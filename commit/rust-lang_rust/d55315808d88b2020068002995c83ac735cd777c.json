{"sha": "d55315808d88b2020068002995c83ac735cd777c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NTMxNTgwOGQ4OGIyMDIwMDY4MDAyOTk1YzgzYWM3MzVjZDc3N2M=", "commit": {"author": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T21:15:49Z"}, "committer": {"name": "Lukas Markeffsky", "email": "markeffsky@outlook.com", "date": "2019-08-09T21:15:49Z"}, "message": "fixed tests (again) and added a test that should actually cause a warning for new_ret_no_self", "tree": {"sha": "dad3fac554412d6c986e45b3d9c58cc8174a0333", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dad3fac554412d6c986e45b3d9c58cc8174a0333"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d55315808d88b2020068002995c83ac735cd777c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d55315808d88b2020068002995c83ac735cd777c", "html_url": "https://github.com/rust-lang/rust/commit/d55315808d88b2020068002995c83ac735cd777c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d55315808d88b2020068002995c83ac735cd777c/comments", "author": null, "committer": null, "parents": [{"sha": "54efffcec1187f58f92fdd23af1ebd4acff982a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/54efffcec1187f58f92fdd23af1ebd4acff982a0", "html_url": "https://github.com/rust-lang/rust/commit/54efffcec1187f58f92fdd23af1ebd4acff982a0"}], "stats": {"total": 63, "additions": 40, "deletions": 23}, "files": [{"sha": "5ae2b32c1bb08fc2a6a9f78165c4666032a1e392", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d55315808d88b2020068002995c83ac735cd777c/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d55315808d88b2020068002995c83ac735cd777c/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=d55315808d88b2020068002995c83ac735cd777c", "patch": "@@ -5,15 +5,14 @@\n #![warn(clippy::all, clippy::pedantic, clippy::option_unwrap_used)]\n #![allow(\n     clippy::blacklisted_name,\n-    dead_code,\n+    unused,\n     clippy::print_stdout,\n     clippy::non_ascii_literal,\n     clippy::new_without_default,\n     clippy::missing_docs_in_private_items,\n     clippy::needless_pass_by_value,\n     clippy::default_trait_access,\n     clippy::use_self,\n-    clippy::new_ret_no_self,\n     clippy::useless_format,\n     clippy::wrong_self_convention\n )]\n@@ -148,6 +147,14 @@ impl AsyncNew {\n     }\n }\n \n+struct BadNew;\n+\n+impl BadNew {\n+    fn new() -> i32 {\n+        0\n+    }\n+}\n+\n impl Mul<T> for T {\n     type Output = T;\n     // No error, obviously."}, {"sha": "8d09c49f005befedce599c4b840910498f43ac97", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/d55315808d88b2020068002995c83ac735cd777c/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d55315808d88b2020068002995c83ac735cd777c/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=d55315808d88b2020068002995c83ac735cd777c", "patch": "@@ -1,5 +1,5 @@\n error: defining a method called `add` on this type; consider implementing the `std::ops::Add` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:38:5\n+  --> $DIR/methods.rs:37:5\n    |\n LL | /     pub fn add(self, other: T) -> T {\n LL | |         self\n@@ -8,8 +8,18 @@ LL | |     }\n    |\n    = note: `-D clippy::should-implement-trait` implied by `-D warnings`\n \n+error: methods called `new` usually return `Self`\n+  --> $DIR/methods.rs:153:5\n+   |\n+LL | /     fn new() -> i32 {\n+LL | |         0\n+LL | |     }\n+   | |_____^\n+   |\n+   = note: `-D clippy::new-ret-no-self` implied by `-D warnings`\n+\n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:168:13\n+  --> $DIR/methods.rs:175:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -21,7 +31,7 @@ LL | |                .unwrap_or(0);\n    = note: replace `map(|x| x + 1).unwrap_or(0)` with `map_or(0, |x| x + 1)`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:172:13\n+  --> $DIR/methods.rs:179:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -31,7 +41,7 @@ LL | |               ).unwrap_or(0);\n    | |____________________________^\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:176:13\n+  --> $DIR/methods.rs:183:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -41,15 +51,15 @@ LL | |                 });\n    | |__________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:181:13\n+  --> $DIR/methods.rs:188:13\n    |\n LL |     let _ = opt.map(|x| Some(x + 1)).unwrap_or(None);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:183:13\n+  --> $DIR/methods.rs:190:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -59,7 +69,7 @@ LL | |     ).unwrap_or(None);\n    | |_____________________^\n \n error: called `map(f).unwrap_or(None)` on an Option value. This can be done more directly by calling `and_then(f)` instead\n-  --> $DIR/methods.rs:187:13\n+  --> $DIR/methods.rs:194:13\n    |\n LL |       let _ = opt\n    |  _____________^\n@@ -70,15 +80,15 @@ LL | |         .unwrap_or(None);\n    = note: replace `map(|x| Some(x + 1)).unwrap_or(None)` with `and_then(|x| Some(x + 1))`\n \n error: called `map(f).unwrap_or(a)` on an Option value. This can be done more directly by calling `map_or(a, f)` instead\n-  --> $DIR/methods.rs:198:13\n+  --> $DIR/methods.rs:205:13\n    |\n LL |     let _ = Some(\"prefix\").map(|p| format!(\"{}.\", p)).unwrap_or(id);\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `map(|p| format!(\"{}.\", p)).unwrap_or(id)` with `map_or(id, |p| format!(\"{}.\", p))`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:202:13\n+  --> $DIR/methods.rs:209:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -90,7 +100,7 @@ LL | |                .unwrap_or_else(|| 0);\n    = note: replace `map(|x| x + 1).unwrap_or_else(|| 0)` with `map_or_else(|| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:206:13\n+  --> $DIR/methods.rs:213:13\n    |\n LL |       let _ = opt.map(|x| {\n    |  _____________^\n@@ -100,7 +110,7 @@ LL | |               ).unwrap_or_else(|| 0);\n    | |____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling `map_or_else(g, f)` instead\n-  --> $DIR/methods.rs:210:13\n+  --> $DIR/methods.rs:217:13\n    |\n LL |       let _ = opt.map(|x| x + 1)\n    |  _____________^\n@@ -110,7 +120,7 @@ LL | |                 );\n    | |_________________^\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:240:13\n+  --> $DIR/methods.rs:247:13\n    |\n LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -119,7 +129,7 @@ LL |     let _ = v.iter().filter(|&x| *x < 0).next();\n    = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-  --> $DIR/methods.rs:243:13\n+  --> $DIR/methods.rs:250:13\n    |\n LL |       let _ = v.iter().filter(|&x| {\n    |  _____________^\n@@ -129,7 +139,7 @@ LL | |                    ).next();\n    | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:259:13\n+  --> $DIR/methods.rs:266:13\n    |\n LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -138,7 +148,7 @@ LL |     let _ = v.iter().find(|&x| *x < 0).is_some();\n    = note: replace `find(|&x| *x < 0).is_some()` with `any(|x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:262:13\n+  --> $DIR/methods.rs:269:13\n    |\n LL |       let _ = v.iter().find(|&x| {\n    |  _____________^\n@@ -148,15 +158,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:268:13\n+  --> $DIR/methods.rs:275:13\n    |\n LL |     let _ = v.iter().position(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:271:13\n+  --> $DIR/methods.rs:278:13\n    |\n LL |       let _ = v.iter().position(|&x| {\n    |  _____________^\n@@ -166,15 +176,15 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:277:13\n+  --> $DIR/methods.rs:284:13\n    |\n LL |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-  --> $DIR/methods.rs:280:13\n+  --> $DIR/methods.rs:287:13\n    |\n LL |       let _ = v.iter().rposition(|&x| {\n    |  _____________^\n@@ -184,12 +194,12 @@ LL | |                    ).is_some();\n    | |______________________________^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-  --> $DIR/methods.rs:295:13\n+  --> $DIR/methods.rs:302:13\n    |\n LL |     let _ = opt.unwrap();\n    |             ^^^^^^^^^^^^\n    |\n    = note: `-D clippy::option-unwrap-used` implied by `-D warnings`\n \n-error: aborting due to 20 previous errors\n+error: aborting due to 21 previous errors\n "}]}