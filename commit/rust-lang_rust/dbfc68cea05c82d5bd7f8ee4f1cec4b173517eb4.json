{"sha": "dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZmM2OGNlYTA1YzgyZDViZDdmOGVlNGYxY2VjNGIxNzM1MTdlYjQ=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-23T17:03:09Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-03-23T17:03:09Z"}, "message": "Fix apply_substs assertion failure\n\nFixes #1030.", "tree": {"sha": "0a7386866a6bc0b1f3dc4d3653e683edeeca940f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a7386866a6bc0b1f3dc4d3653e683edeeca940f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "html_url": "https://github.com/rust-lang/rust/commit/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a6a3d077734d12fe5c7de2af64572611b23b79b", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a6a3d077734d12fe5c7de2af64572611b23b79b", "html_url": "https://github.com/rust-lang/rust/commit/5a6a3d077734d12fe5c7de2af64572611b23b79b"}], "stats": {"total": 27, "additions": 25, "deletions": 2}, "files": [{"sha": "cff7e7481928ba752d3b33aae1dd7e35711f853c", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "patch": "@@ -407,7 +407,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n                     let substs =\n                         Ty::substs_from_path_segment(self.db, &self.resolver, segment, typable);\n-                    self.db.type_for_def(typable, Namespace::Types).apply_substs(substs)\n+                    self.db.type_for_def(typable, Namespace::Types).subst(&substs)\n                 }\n                 Resolution::LocalBinding(_) => {\n                     // can't have a local binding in an associated item path\n@@ -466,7 +466,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let typable: Option<TypableDef> = def.into();\n                 let typable = typable?;\n                 let substs = Ty::substs_from_path(self.db, &self.resolver, path, typable);\n-                let ty = self.db.type_for_def(typable, Namespace::Values).apply_substs(substs);\n+                let ty = self.db.type_for_def(typable, Namespace::Values).subst(&substs);\n                 let ty = self.insert_type_vars(ty);\n                 Some(ty)\n             }"}, {"sha": "5d8ad4aa75e26c0a7b612247f888d2001ec59215", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=dbfc68cea05c82d5bd7f8ee4f1cec4b173517eb4", "patch": "@@ -1791,6 +1791,29 @@ fn test<R>(query_response: Canonical<QueryResponse<R>>) {\n     );\n }\n \n+#[test]\n+fn bug_1030() {\n+    assert_snapshot_matches!(infer(r#\"\n+struct HashSet<T, H>;\n+struct FxHasher;\n+type FxHashSet<T> = HashSet<T, FxHasher>;\n+\n+impl<T, H> HashSet<T, H> {\n+    fn default() -> HashSet<T, H> {}\n+}\n+\n+pub fn main_loop() {\n+    FxHashSet::default();\n+}\n+\"#),\n+    @r###\"\n+[144; 146) '{}': ()\n+[169; 198) '{     ...t(); }': ()\n+[175; 193) 'FxHash...efault': fn default<{unknown}, {unknown}>() -> HashSet<T, H>\n+[175; 195) 'FxHash...ault()': HashSet<{unknown}, {unknown}>\"###\n+    );\n+}\n+\n #[test]\n fn cross_crate_associated_method_call() {\n     let (mut db, pos) = MockDatabase::with_position("}]}