{"sha": "87458955ddf1c819d31b7709298b4ba43aea88ab", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg3NDU4OTU1ZGRmMWM4MTlkMzFiNzcwOTI5OGI0YmE0M2FlYTg4YWI=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-24T01:44:05Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-24T01:44:05Z"}, "message": "Refactor memory/allocation handling.", "tree": {"sha": "2f67129738ca9e850b327760515557234264c6a4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f67129738ca9e850b327760515557234264c6a4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87458955ddf1c819d31b7709298b4ba43aea88ab", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87458955ddf1c819d31b7709298b4ba43aea88ab", "html_url": "https://github.com/rust-lang/rust/commit/87458955ddf1c819d31b7709298b4ba43aea88ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87458955ddf1c819d31b7709298b4ba43aea88ab/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f96c76e8786c08a653089afd96300818838305b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/f96c76e8786c08a653089afd96300818838305b8", "html_url": "https://github.com/rust-lang/rust/commit/f96c76e8786c08a653089afd96300818838305b8"}], "stats": {"total": 97, "additions": 40, "deletions": 57}, "files": [{"sha": "28c14127b9ea251741b63661bdad5aba969b17ff", "filename": "src/memory.rs", "status": "modified", "additions": 40, "deletions": 57, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/87458955ddf1c819d31b7709298b4ba43aea88ab/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87458955ddf1c819d31b7709298b4ba43aea88ab/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=87458955ddf1c819d31b7709298b4ba43aea88ab", "patch": "@@ -96,42 +96,41 @@ impl Memory {\n         self.alloc_map.get_mut(&id.0).ok_or(EvalError::DanglingPointerDeref)\n     }\n \n-    fn get_bytes(&self, ptr: Pointer, size: usize) -> EvalResult<&[u8]> {\n-        try!(self.check_readable_bytes(ptr, size));\n-        try!(self.get(ptr.alloc_id)).checked_slice(ptr.offset, size)\n+    fn get_bytes_unchecked(&self, ptr: Pointer, size: usize) -> EvalResult<&[u8]> {\n+        let alloc = try!(self.get(ptr.alloc_id));\n+        if ptr.offset + size > alloc.bytes.len() {\n+            return Err(EvalError::PointerOutOfBounds);\n+        }\n+        Ok(&alloc.bytes[ptr.offset..ptr.offset + size])\n     }\n \n-    fn get_bytes_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<&mut [u8]> {\n-        try!(self.clear_relocations(ptr, size));\n-        try!(self.get_mut(ptr.alloc_id)).checked_slice_mut(ptr.offset, size)\n+    fn get_bytes_unchecked_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<&mut [u8]> {\n+        let alloc = try!(self.get_mut(ptr.alloc_id));\n+        if ptr.offset + size > alloc.bytes.len() {\n+            return Err(EvalError::PointerOutOfBounds);\n+        }\n+        Ok(&mut alloc.bytes[ptr.offset..ptr.offset + size])\n     }\n \n-    fn check_readable_bytes(&self, ptr: Pointer, size: usize) -> EvalResult<()> {\n-        if try!(self.relocations(ptr, size)).count() == 0 {\n-            // TODO(tsion): Track and check for undef bytes.\n-            Ok(())\n-        } else {\n-            Err(EvalError::ReadPointerAsBytes)\n+    fn get_bytes(&self, ptr: Pointer, size: usize) -> EvalResult<&[u8]> {\n+        if try!(self.relocations(ptr, size)).count() != 0 {\n+            return Err(EvalError::ReadPointerAsBytes);\n         }\n+        // TODO(tsion): Track and check for undef bytes.\n+        self.get_bytes_unchecked(ptr, size)\n+    }\n+\n+    fn get_bytes_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<&mut [u8]> {\n+        try!(self.clear_relocations(ptr, size));\n+        self.get_bytes_unchecked_mut(ptr, size)\n     }\n \n     fn relocations(&self, ptr: Pointer, size: usize)\n         -> EvalResult<btree_map::Range<usize, AllocId>>\n     {\n         let start = ptr.offset.saturating_sub(self.pointer_size - 1);\n-        let end = ptr.offset + size;\n-        let alloc = try!(self.get(ptr.alloc_id));\n-        Ok(alloc.relocations.range(Included(&start), Excluded(&end)))\n-    }\n-\n-    fn check_relocation_edges(&self, ptr: Pointer, size: usize) -> EvalResult<()> {\n-        let overlapping_start = try!(self.relocations(ptr, 0)).count();\n-        let overlapping_end = try!(self.relocations(ptr.offset(size as isize), 0)).count();\n-        if overlapping_start + overlapping_end == 0 {\n-            Ok(())\n-        } else {\n-            Err(EvalError::ReadPointerAsBytes)\n-        }\n+        let end = start + size;\n+        Ok(try!(self.get(ptr.alloc_id)).relocations.range(Included(&start), Excluded(&end)))\n     }\n \n     fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n@@ -143,13 +142,22 @@ impl Memory {\n         Ok(())\n     }\n \n+    fn check_relocation_edges(&self, ptr: Pointer, size: usize) -> EvalResult<()> {\n+        let overlapping_start = try!(self.relocations(ptr, 0)).count();\n+        let overlapping_end = try!(self.relocations(ptr.offset(size as isize), 0)).count();\n+        if overlapping_start + overlapping_end != 0 {\n+            return Err(EvalError::ReadPointerAsBytes);\n+        }\n+        Ok(())\n+    }\n+\n     fn copy_relocations(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<()> {\n-        let relocations: Vec<_> = try!(self.get_mut(src.alloc_id)).relocations\n-            .range(Included(&src.offset), Excluded(&(src.offset + size)))\n+        let relocations: Vec<_> = try!(self.relocations(src, size))\n             .map(|(&offset, &alloc_id)| {\n                 // Update relocation offsets for the new positions in the destination allocation.\n                 (offset + dest.offset - src.offset, alloc_id)\n-            }).collect();\n+            })\n+            .collect();\n         try!(self.get_mut(dest.alloc_id)).relocations.extend(relocations);\n         Ok(())\n     }\n@@ -158,10 +166,7 @@ impl Memory {\n         // TODO(tsion): Track and check for undef bytes.\n         try!(self.check_relocation_edges(src, size));\n \n-        let src_bytes = {\n-            let alloc = try!(self.get(src.alloc_id));\n-            try!(alloc.checked_slice(src.offset, size)).as_ptr()\n-        };\n+        let src_bytes = try!(self.get_bytes_unchecked_mut(src, size)).as_mut_ptr();\n         let dest_bytes = try!(self.get_bytes_mut(dest, size)).as_mut_ptr();\n \n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n@@ -183,10 +188,10 @@ impl Memory {\n     }\n \n     pub fn read_ptr(&self, ptr: Pointer) -> EvalResult<Pointer> {\n+        let size = self.pointer_size;\n+        let offset = try!(self.get_bytes_unchecked(ptr, size))\n+            .read_uint::<NativeEndian>(size).unwrap() as usize;\n         let alloc = try!(self.get(ptr.alloc_id));\n-        let mut bytes = try!(alloc.checked_slice(ptr.offset, self.pointer_size));\n-        let offset = bytes.read_uint::<NativeEndian>(self.pointer_size).unwrap() as usize;\n-\n         match alloc.relocations.get(&ptr.offset) {\n             Some(&alloc_id) => Ok(Pointer { alloc_id: alloc_id, offset: offset }),\n             None => Err(EvalError::ReadBytesAsPointer),\n@@ -268,28 +273,6 @@ impl Memory {\n     }\n }\n \n-impl Allocation {\n-    fn checked_slice(&self, offset: usize, size: usize) -> EvalResult<&[u8]> {\n-        let start = offset;\n-        let end = start + size;\n-        if start <= self.bytes.len() && end <= self.bytes.len() {\n-            Ok(&self.bytes[start..end])\n-        } else {\n-            Err(EvalError::PointerOutOfBounds)\n-        }\n-    }\n-\n-    fn checked_slice_mut(&mut self, offset: usize, size: usize) -> EvalResult<&mut [u8]> {\n-        let start = offset;\n-        let end = start + size;\n-        if start <= self.bytes.len() && end <= self.bytes.len() {\n-            Ok(&mut self.bytes[start..end])\n-        } else {\n-            Err(EvalError::PointerOutOfBounds)\n-        }\n-    }\n-}\n-\n impl Pointer {\n     pub fn offset(self, i: isize) -> Self {\n         Pointer { offset: (self.offset as isize + i) as usize, ..self }"}]}