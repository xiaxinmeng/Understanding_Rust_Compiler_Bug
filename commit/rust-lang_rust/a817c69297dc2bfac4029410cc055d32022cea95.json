{"sha": "a817c69297dc2bfac4029410cc055d32022cea95", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4MTdjNjkyOTdkYzJiZmFjNDAyOTQxMGNjMDU1ZDMyMDIyY2VhOTU=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T19:18:17Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-24T12:14:16Z"}, "message": "syntax: don't store a secondary NodeId for TyPath.", "tree": {"sha": "9c08f77d91b37ee797fc7f4931fb1e1d5e028053", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c08f77d91b37ee797fc7f4931fb1e1d5e028053"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a817c69297dc2bfac4029410cc055d32022cea95", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a817c69297dc2bfac4029410cc055d32022cea95", "html_url": "https://github.com/rust-lang/rust/commit/a817c69297dc2bfac4029410cc055d32022cea95", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a817c69297dc2bfac4029410cc055d32022cea95/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27747ac1a76f054275c75a5b3f867d09cd27c888", "url": "https://api.github.com/repos/rust-lang/rust/commits/27747ac1a76f054275c75a5b3f867d09cd27c888", "html_url": "https://github.com/rust-lang/rust/commit/27747ac1a76f054275c75a5b3f867d09cd27c888"}], "stats": {"total": 175, "additions": 74, "deletions": 101}, "files": [{"sha": "8c6984972718fa092ef36d00e487080967bec672", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -405,8 +405,8 @@ struct ImproperCTypesVisitor<'a, 'tcx: 'a> {\n }\n \n impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n-    fn check_def(&mut self, sp: Span, ty_id: ast::NodeId, path_id: ast::NodeId) {\n-        match self.cx.tcx.def_map.borrow()[path_id].clone() {\n+    fn check_def(&mut self, sp: Span, id: ast::NodeId) {\n+        match self.cx.tcx.def_map.borrow()[id].clone() {\n             def::DefPrimTy(ast::TyInt(ast::TyIs(_))) => {\n                 self.cx.span_lint(IMPROPER_CTYPES, sp,\n                                   \"found rust type `isize` in foreign module, while \\\n@@ -418,7 +418,7 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n                                    libc::c_uint or libc::c_ulong should be used\");\n             }\n             def::DefTy(..) => {\n-                let tty = match self.cx.tcx.ast_ty_to_ty_cache.borrow().get(&ty_id) {\n+                let tty = match self.cx.tcx.ast_ty_to_ty_cache.borrow().get(&id) {\n                     Some(&ty::atttce_resolved(t)) => t,\n                     _ => panic!(\"ast_ty_to_ty_cache was incomplete after typeck!\")\n                 };\n@@ -437,9 +437,8 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for ImproperCTypesVisitor<'a, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n-        match ty.node {\n-            ast::TyPath(_, id) => self.check_def(ty.span, ty.id, id),\n-            _ => (),\n+        if let ast::TyPath(_) = ty.node {\n+            self.check_def(ty.span, ty.id);\n         }\n         visit::walk_ty(self, ty);\n     }"}, {"sha": "e6f5c36a2f81254896258330fc8b1529502d5597", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1221,7 +1221,7 @@ fn encode_info_for_item(ecx: &EncodeContext,\n         encode_unsafety(rbml_w, unsafety);\n         encode_polarity(rbml_w, polarity);\n         match ty.node {\n-            ast::TyPath(ref path, _) if path.segments.len() == 1 => {\n+            ast::TyPath(ref path) if path.segments.len() == 1 => {\n                 let ident = path.segments.last().unwrap().identifier;\n                 encode_impl_type_basename(rbml_w, ident);\n             }"}, {"sha": "d4680844838982919c922c7c61ab00408b2b70f7", "filename": "src/librustc/middle/astconv_util.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastconv_util.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -43,8 +43,8 @@ pub fn check_path_args(tcx: &ty::ctxt,\n pub fn ast_ty_to_prim_ty<'tcx>(tcx: &ty::ctxt<'tcx>, ast_ty: &ast::Ty)\n                                -> Option<Ty<'tcx>> {\n     match ast_ty.node {\n-        ast::TyPath(ref path, id) => {\n-            let a_def = match tcx.def_map.borrow().get(&id) {\n+        ast::TyPath(ref path) => {\n+            let a_def = match tcx.def_map.borrow().get(&ast_ty.id) {\n                 None => {\n                     tcx.sess.span_bug(ast_ty.span,\n                                       &format!(\"unbound path {}\","}, {"sha": "4439472ab5671bb0f4d2bf43a42cc29254cd30b9", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1233,8 +1233,8 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                     }\n                     ty_queue.push(&*mut_ty.ty);\n                 }\n-                ast::TyPath(ref path, id) => {\n-                    let a_def = match self.tcx.def_map.borrow().get(&id) {\n+                ast::TyPath(ref path) => {\n+                    let a_def = match self.tcx.def_map.borrow().get(&cur_ty.id) {\n                         None => {\n                             self.tcx\n                                 .sess\n@@ -1279,7 +1279,7 @@ impl<'a, 'tcx> Rebuilder<'a, 'tcx> {\n                             let new_path = self.rebuild_path(rebuild_info, lifetime);\n                             let to = ast::Ty {\n                                 id: cur_ty.id,\n-                                node: ast::TyPath(new_path, id),\n+                                node: ast::TyPath(new_path),\n                                 span: cur_ty.span\n                             };\n                             new_ty = self.rebuild_ty(new_ty, P(to));"}, {"sha": "7b957d6ce84986368123b4988aa3255ffcb25947", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -165,13 +165,13 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     visit::walk_ty(this, ty);\n                 });\n             }\n-            ast::TyPath(ref path, id) => {\n+            ast::TyPath(ref path) => {\n                 // if this path references a trait, then this will resolve to\n                 // a trait ref, which introduces a binding scope.\n-                match self.def_map.borrow().get(&id) {\n+                match self.def_map.borrow().get(&ty.id) {\n                     Some(&def::DefTrait(..)) => {\n                         self.with(LateScope(&Vec::new(), self.scope), |_, this| {\n-                            this.visit_path(path, id);\n+                            this.visit_path(path, ty.id);\n                         });\n                     }\n                     _ => {\n@@ -270,16 +270,12 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                 for lifetime in &trait_ref.bound_lifetimes {\n                     this.visit_lifetime_def(lifetime);\n                 }\n-                this.visit_trait_ref(&trait_ref.trait_ref)\n+                visit::walk_path(this, &trait_ref.trait_ref.path)\n             })\n         } else {\n             self.visit_trait_ref(&trait_ref.trait_ref)\n         }\n     }\n-\n-    fn visit_trait_ref(&mut self, trait_ref: &ast::TraitRef) {\n-        self.visit_path(&trait_ref.path, trait_ref.ref_id);\n-    }\n }\n \n impl<'a> LifetimeContext<'a> {"}, {"sha": "838ba9c658cf1661fda1b7e3b4ac3c9949d8d848", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 27, "deletions": 42, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -259,8 +259,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             // * Private trait impls for private types can be completely ignored\n             ast::ItemImpl(_, _, _, _, ref ty, ref impl_items) => {\n                 let public_ty = match ty.node {\n-                    ast::TyPath(_, id) => {\n-                        match self.tcx.def_map.borrow()[id].clone() {\n+                    ast::TyPath(_) => {\n+                        match self.tcx.def_map.borrow()[ty.id].clone() {\n                             def::DefPrimTy(..) => true,\n                             def => {\n                                 let did = def.def_id();\n@@ -326,8 +326,8 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             }\n \n             ast::ItemTy(ref ty, _) if public_first => {\n-                if let ast::TyPath(_, id) = ty.node {\n-                    match self.tcx.def_map.borrow()[id].clone() {\n+                if let ast::TyPath(_) = ty.node {\n+                    match self.tcx.def_map.borrow()[ty.id].clone() {\n                         def::DefPrimTy(..) | def::DefTyParam(..) => {},\n                         def => {\n                             let did = def.def_id();\n@@ -628,11 +628,11 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n                     // back up the chains to find the relevant struct/enum that\n                     // was private.\n                     ast::ItemImpl(_, _, _, _, ref ty, _) => {\n-                        let id = match ty.node {\n-                            ast::TyPath(_, id) => id,\n+                        match ty.node {\n+                            ast::TyPath(_) => {}\n                             _ => return Some((err_span, err_msg, None)),\n                         };\n-                        let def = self.tcx.def_map.borrow()[id].clone();\n+                        let def = self.tcx.def_map.borrow()[ty.id].clone();\n                         let did = def.def_id();\n                         assert!(is_local(did));\n                         match self.tcx.map.get(did.node) {\n@@ -716,13 +716,13 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n     }\n \n     // Checks that a path is in scope.\n-    fn check_path(&mut self, span: Span, path_id: ast::NodeId, path: &ast::Path) {\n+    fn check_path(&mut self, span: Span, path_id: ast::NodeId, last: ast::Ident) {\n         debug!(\"privacy - path {}\", self.nodestr(path_id));\n         let orig_def = self.tcx.def_map.borrow()[path_id].clone();\n         let ck = |tyname: &str| {\n             let ck_public = |def: ast::DefId| {\n                 debug!(\"privacy - ck_public {:?}\", def);\n-                let name = token::get_ident(path.segments.last().unwrap().identifier);\n+                let name = token::get_ident(last);\n                 let origdid = orig_def.def_id();\n                 self.ensure_public(span,\n                                    def,\n@@ -832,37 +832,22 @@ impl<'a, 'tcx> PrivacyVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     fn visit_item(&mut self, item: &ast::Item) {\n-        match item.node {\n-            ast::ItemUse(ref vpath) => {\n-                match vpath.node {\n-                    ast::ViewPathSimple(..) | ast::ViewPathGlob(..) => {}\n-                    ast::ViewPathList(ref prefix, ref list) => {\n-                        for pid in list {\n-                            match pid.node {\n-                                ast::PathListIdent { id, name } => {\n-                                    debug!(\"privacy - ident item {}\", id);\n-                                    let seg = ast::PathSegment {\n-                                        identifier: name,\n-                                        parameters: ast::PathParameters::none(),\n-                                    };\n-                                    let segs = vec![seg];\n-                                    let path = ast::Path {\n-                                        global: false,\n-                                        span: pid.span,\n-                                        segments: segs,\n-                                    };\n-                                    self.check_path(pid.span, id, &path);\n-                                }\n-                                ast::PathListMod { id } => {\n-                                    debug!(\"privacy - mod item {}\", id);\n-                                    self.check_path(pid.span, id, prefix);\n-                                }\n-                            }\n+        if let ast::ItemUse(ref vpath) = item.node {\n+            if let ast::ViewPathList(ref prefix, ref list) = vpath.node {\n+                for pid in list {\n+                    match pid.node {\n+                        ast::PathListIdent { id, name } => {\n+                            debug!(\"privacy - ident item {}\", id);\n+                            self.check_path(pid.span, id, name);\n+                        }\n+                        ast::PathListMod { id } => {\n+                            debug!(\"privacy - mod item {}\", id);\n+                            let name = prefix.segments.last().unwrap().identifier;\n+                            self.check_path(pid.span, id, name);\n                         }\n                     }\n                 }\n             }\n-            _ => {}\n         }\n         let orig_curitem = replace(&mut self.curitem, item.id);\n         visit::walk_item(self, item);\n@@ -1033,7 +1018,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for PrivacyVisitor<'a, 'tcx> {\n     }\n \n     fn visit_path(&mut self, path: &ast::Path, id: ast::NodeId) {\n-        self.check_path(path.span, id, path);\n+        self.check_path(path.span, id, path.segments.last().unwrap().identifier);\n         visit::walk_path(self, path);\n     }\n }\n@@ -1273,8 +1258,8 @@ impl<'a, 'tcx> VisiblePrivateTypesVisitor<'a, 'tcx> {\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for CheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n     fn visit_ty(&mut self, ty: &ast::Ty) {\n-        if let ast::TyPath(_, path_id) = ty.node {\n-            if self.inner.path_is_private_type(path_id) {\n+        if let ast::TyPath(_) = ty.node {\n+            if self.inner.path_is_private_type(ty.id) {\n                 self.contains_private = true;\n                 // found what we're looking for so let's stop\n                 // working.\n@@ -1398,7 +1383,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n                             //\n                             // Those in 2. are warned via walk_generics and this\n                             // call here.\n-                            self.visit_trait_ref(tr)\n+                            visit::walk_path(self, &tr.path);\n                         }\n                     }\n                 } else if trait_ref.is_none() && self_is_public_path {\n@@ -1479,9 +1464,9 @@ impl<'a, 'tcx, 'v> Visitor<'v> for VisiblePrivateTypesVisitor<'a, 'tcx> {\n     }\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n-        if let ast::TyPath(ref p, path_id) = t.node {\n+        if let ast::TyPath(ref p) = t.node {\n             if !self.tcx.sess.features.borrow().visible_private_types &&\n-                self.path_is_private_type(path_id) {\n+                self.path_is_private_type(t.id) {\n                 self.tcx.sess.span_err(p.span,\n                                        \"private type in exported type signature\");\n             }"}, {"sha": "ad5fa600bd81b86584dfcd59b266e39520aa17f9", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -523,14 +523,14 @@ impl<'a, 'b:'a, 'tcx:'b> GraphBuilder<'a, 'b, 'tcx> {\n                 // within this module.\n \n                 let mod_name = match ty.node {\n-                    TyPath(ref path, _) if path.segments.len() == 1 => {\n+                    TyPath(ref path) if path.segments.len() == 1 => {\n                         // FIXME(18446) we should distinguish between the name of\n                         // a trait and the name of an impl of that trait.\n                         Some(path.segments.last().unwrap().identifier.name)\n                     }\n                     TyObjectSum(ref lhs_ty, _) => {\n                         match lhs_ty.node {\n-                            TyPath(ref path, _) if path.segments.len() == 1 => {\n+                            TyPath(ref path) if path.segments.len() == 1 => {\n                                 Some(path.segments.last().unwrap().identifier.name)\n                             }\n                             _ => {"}, {"sha": "55ad52762e0c6b750be63e95dce017c0e432c65e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -3387,8 +3387,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 // type, the result will be that the type name resolves to a module but not\n                 // a type (shadowing any imported modules or types with this name), leading\n                 // to weird user-visible bugs. So we ward this off here. See #15060.\n-                TyPath(ref path, path_id) => {\n-                    match self.def_map.borrow().get(&path_id) {\n+                TyPath(ref path) => {\n+                    match self.def_map.borrow().get(&self_type.id) {\n                         // FIXME: should we catch other options and give more precise errors?\n                         Some(&DefMod(_)) => {\n                             self.resolve_error(path.span, \"inherent implementations are not \\\n@@ -3576,7 +3576,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n             // Like path expressions, the interpretation of path types depends\n             // on whether the path has multiple elements in it or not.\n \n-            TyPath(ref path, path_id) => {\n+            TyPath(ref path) => {\n                 // This is a path in the type namespace. Walk through scopes\n                 // looking for it.\n                 let mut result_def = None;\n@@ -3617,8 +3617,8 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         debug!(\"(resolving type) writing resolution for `{}` \\\n                                 (id {}) = {:?}\",\n                                self.path_names_to_string(path),\n-                               path_id, def);\n-                        self.record_def(path_id, def);\n+                               ty.id, def);\n+                        self.record_def(ty.id, def);\n                     }\n                     None => {\n                         let msg = format!(\"use of undeclared type name `{}`\",\n@@ -4281,7 +4281,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         fn extract_path_and_node_id(t: &Ty, allow: FallbackChecks)\n                                                     -> Option<(Path, NodeId, FallbackChecks)> {\n             match t.node {\n-                TyPath(ref path, node_id) => Some((path.clone(), node_id, allow)),\n+                TyPath(ref path) => Some((path.clone(), t.id, allow)),\n                 TyPtr(ref mut_ty) => extract_path_and_node_id(&*mut_ty.ty, OnlyTraitAndStatics),\n                 TyRptr(_, ref mut_ty) => extract_path_and_node_id(&*mut_ty.ty, allow),\n                 // This doesn't handle the remaining `Ty` variants as they are not"}, {"sha": "af891001ea00e0ce16528a290de795fab9d2eeac", "filename": "src/librustc_trans/save/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_trans%2Fsave%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fsave%2Fmod.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -662,9 +662,9 @@ impl <'l, 'tcx> DxrVisitor<'l, 'tcx> {\n         let trait_id = trait_ref.as_ref().and_then(|tr| self.lookup_type_ref(tr.ref_id));\n         match typ.node {\n             // Common case impl for a struct or something basic.\n-            ast::TyPath(ref path, id) => {\n+            ast::TyPath(ref path) => {\n                 let sub_span = self.span.sub_span_for_type_name(path.span);\n-                let self_id = self.lookup_type_ref(id).map(|id| {\n+                let self_id = self.lookup_type_ref(typ.id).map(|id| {\n                     self.fmt.ref_str(recorder::TypeRef,\n                                      path.span,\n                                      sub_span,\n@@ -1303,8 +1303,8 @@ impl<'l, 'tcx, 'v> Visitor<'v> for DxrVisitor<'l, 'tcx> {\n         }\n \n         match t.node {\n-            ast::TyPath(ref path, id) => {\n-                match self.lookup_type_ref(id) {\n+            ast::TyPath(ref path) => {\n+                match self.lookup_type_ref(t.id) {\n                     Some(id) => {\n                         let sub_span = self.span.sub_span_for_type_name(t.span);\n                         self.fmt.ref_str(recorder::TypeRef,"}, {"sha": "16a2dbf26870a64f1a79ed9a963dd72118ee3ba9", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -852,8 +852,8 @@ pub fn ast_ty_to_builtin_ty<'tcx>(\n     }\n \n     match ast_ty.node {\n-        ast::TyPath(ref path, id) => {\n-            let a_def = match this.tcx().def_map.borrow().get(&id) {\n+        ast::TyPath(ref path) => {\n+            let a_def = match this.tcx().def_map.borrow().get(&ast_ty.id) {\n                 None => {\n                     this.tcx()\n                         .sess\n@@ -912,8 +912,8 @@ fn ast_ty_to_trait_ref<'tcx>(this: &AstConv<'tcx>,\n      */\n \n     match ty.node {\n-        ast::TyPath(ref path, id) => {\n-            match this.tcx().def_map.borrow().get(&id) {\n+        ast::TyPath(ref path) => {\n+            match this.tcx().def_map.borrow().get(&ty.id) {\n                 Some(&def::DefTrait(trait_def_id)) => {\n                     let mut projection_bounds = Vec::new();\n                     let trait_ref = object_path_to_poly_trait_ref(this,\n@@ -1183,8 +1183,8 @@ pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n             ast::TyPolyTraitRef(ref bounds) => {\n                 conv_ty_poly_trait_ref(this, rscope, ast_ty.span, &bounds[..])\n             }\n-            ast::TyPath(ref path, id) => {\n-                let a_def = match tcx.def_map.borrow().get(&id) {\n+            ast::TyPath(ref path) => {\n+                let a_def = match tcx.def_map.borrow().get(&ast_ty.id) {\n                     None => {\n                         tcx.sess\n                            .span_bug(ast_ty.span,"}, {"sha": "d05aa4d20066bdaa4f45beb39c9b213f4046ee21", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1496,8 +1496,8 @@ impl Clean<Type> for ast::Ty {\n             TyFixedLengthVec(ref ty, ref e) => FixedVector(box ty.clean(cx),\n                                                            e.span.to_src(cx)),\n             TyTup(ref tys) => Tuple(tys.clean(cx)),\n-            TyPath(ref p, id) => {\n-                resolve_type(cx, p.clean(cx), id)\n+            TyPath(ref p) => {\n+                resolve_type(cx, p.clean(cx), self.id)\n             }\n             TyObjectSum(ref lhs, ref bounds) => {\n                 let lhs_ty = lhs.clean(cx);"}, {"sha": "7c83286f656b15392b9cf53298029cc863cc681f", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1257,7 +1257,7 @@ pub enum Ty_ {\n     /// A path (`module::module::...::Type`) or primitive\n     ///\n     /// Type parameters are stored in the Path itself\n-    TyPath(Path, NodeId),\n+    TyPath(Path),\n     /// Something like `A+B`. Note that `B` must always be a path.\n     TyObjectSum(P<Ty>, TyParamBounds),\n     /// A type like `for<'a> Foo<&'a Bar>`"}, {"sha": "6ea37aaf72ce2971961c65be07ad3d3fd740be17", "filename": "src/libsyntax/ast_util.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast_util.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -488,9 +488,6 @@ impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n \n     fn visit_ty(&mut self, typ: &Ty) {\n         self.operation.visit_id(typ.id);\n-        if let TyPath(_, id) = typ.node {\n-            self.operation.visit_id(id);\n-        }\n         visit::walk_ty(self, typ)\n     }\n "}, {"sha": "baa2fab044f3f6e320a4ab549d88b2eeb3e6f636", "filename": "src/libsyntax/ext/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fext%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fext%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbuild.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -398,7 +398,7 @@ impl<'a> AstBuilder for ExtCtxt<'a> {\n     }\n \n     fn ty_path(&self, path: ast::Path) -> P<ast::Ty> {\n-        self.ty(path.span, ast::TyPath(path, ast::DUMMY_NODE_ID))\n+        self.ty(path.span, ast::TyPath(path))\n     }\n \n     fn ty_sum(&self, path: ast::Path, bounds: OwnedSlice<ast::TyParamBound>) -> P<ast::Ty> {"}, {"sha": "f7014d6cc3c006f6694715277323ac60dc301625", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -41,7 +41,7 @@ pub fn expand_type(t: P<ast::Ty>,\n     debug!(\"expanding type {:?} with impl_ty {:?}\", t, impl_ty);\n     let t = match (t.node.clone(), impl_ty) {\n         // Expand uses of `Self` in impls to the concrete type.\n-        (ast::Ty_::TyPath(ref path, _), Some(ref impl_ty)) => {\n+        (ast::Ty_::TyPath(ref path), Some(ref impl_ty)) => {\n             let path_as_ident = path_to_ident(path);\n             // Note unhygenic comparison here. I think this is correct, since\n             // even though `Self` is almost just a type parameter, the treatment"}, {"sha": "4efae84fea5aebd845efdadfcc09fe317548b585", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -549,7 +549,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_ty(&mut self, t: &ast::Ty) {\n         match t.node {\n-            ast::TyPath(ref p, _) => {\n+            ast::TyPath(ref p) => {\n                 match &*p.segments {\n \n                     [ast::PathSegment { identifier, .. }] => {"}, {"sha": "ae4d2a80045982712e272c7035069041c5fd1eda", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -428,10 +428,7 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             }\n             TyTup(tys) => TyTup(tys.move_map(|ty| fld.fold_ty(ty))),\n             TyParen(ty) => TyParen(fld.fold_ty(ty)),\n-            TyPath(path, id) => {\n-                let id = fld.new_id(id);\n-                TyPath(fld.fold_path(path), id)\n-            }\n+            TyPath(path) => TyPath(fld.fold_path(path)),\n             TyObjectSum(ty, bounds) => {\n                 TyObjectSum(fld.fold_ty(ty),\n                             fld.fold_bounds(bounds))"}, {"sha": "d4c66529e77df4ef268aa59ba767110e4e0f925c", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1051,7 +1051,7 @@ mod test {\n                                                 parameters: ast::PathParameters::none(),\n                                             }\n                                         ),\n-                                        }, ast::DUMMY_NODE_ID),\n+                                        }),\n                                         span:sp(10,13)\n                                     }),\n                                     pat: P(ast::Pat {"}, {"sha": "bcef7238d7f21007035b7512234ee6d3ca6b5684", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -1076,8 +1076,7 @@ impl<'a> Parser<'a> {\n     }\n \n     pub fn parse_ty_path(&mut self) -> Ty_ {\n-        let path = self.parse_path(LifetimeAndTypesWithoutColons);\n-        TyPath(path, ast::DUMMY_NODE_ID)\n+        TyPath(self.parse_path(LifetimeAndTypesWithoutColons))\n     }\n \n     /// parse a TyBareFn type:\n@@ -4815,10 +4814,10 @@ impl<'a> Parser<'a> {\n         let opt_trait = if could_be_trait && self.eat_keyword(keywords::For) {\n             // New-style trait. Reinterpret the type as a trait.\n             match ty.node {\n-                TyPath(ref path, node_id) => {\n+                TyPath(ref path) => {\n                     Some(TraitRef {\n                         path: (*path).clone(),\n-                        ref_id: node_id,\n+                        ref_id: ty.id,\n                     })\n                 }\n                 _ => {"}, {"sha": "752d34a19c6e1760a64a8b60074d9904233579be", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -729,7 +729,7 @@ impl<'a> State<'a> {\n                                       &generics,\n                                       None));\n             }\n-            ast::TyPath(ref path, _) => {\n+            ast::TyPath(ref path) => {\n                 try!(self.print_path(path, false));\n             }\n             ast::TyObjectSum(ref ty, ref bounds) => {"}, {"sha": "4586495227d02d37833d98194405a7045d808ec2", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a817c69297dc2bfac4029410cc055d32022cea95/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=a817c69297dc2bfac4029410cc055d32022cea95", "patch": "@@ -399,8 +399,8 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n             walk_fn_ret_ty(visitor, &function_declaration.decl.output);\n             walk_lifetime_decls_helper(visitor, &function_declaration.lifetimes);\n         }\n-        TyPath(ref path, id) => {\n-            visitor.visit_path(path, id);\n+        TyPath(ref path) => {\n+            visitor.visit_path(path, typ.id);\n         }\n         TyObjectSum(ref ty, ref bounds) => {\n             visitor.visit_ty(&**ty);"}]}