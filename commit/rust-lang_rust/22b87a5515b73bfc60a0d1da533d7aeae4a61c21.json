{"sha": "22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIyYjg3YTU1MTViNzNiZmM2MGEwZDFkYTUzM2Q3YWVhZTRhNjFjMjE=", "commit": {"author": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-27T07:43:46Z"}, "committer": {"name": "ben", "email": "benlewisj@gmail.com", "date": "2019-09-27T22:05:37Z"}, "message": "Add support for relating slices in `super_relate_consts`.", "tree": {"sha": "24def8f39e0d5438c4f3aa8a138c33f8b1427e1b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24def8f39e0d5438c4f3aa8a138c33f8b1427e1b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "html_url": "https://github.com/rust-lang/rust/commit/22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/comments", "author": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "committer": {"login": "BenLewis-Seequent", "id": 7391596, "node_id": "MDQ6VXNlcjczOTE1OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/7391596?v=4", "gravatar_id": "", "url": "https://api.github.com/users/BenLewis-Seequent", "html_url": "https://github.com/BenLewis-Seequent", "followers_url": "https://api.github.com/users/BenLewis-Seequent/followers", "following_url": "https://api.github.com/users/BenLewis-Seequent/following{/other_user}", "gists_url": "https://api.github.com/users/BenLewis-Seequent/gists{/gist_id}", "starred_url": "https://api.github.com/users/BenLewis-Seequent/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/BenLewis-Seequent/subscriptions", "organizations_url": "https://api.github.com/users/BenLewis-Seequent/orgs", "repos_url": "https://api.github.com/users/BenLewis-Seequent/repos", "events_url": "https://api.github.com/users/BenLewis-Seequent/events{/privacy}", "received_events_url": "https://api.github.com/users/BenLewis-Seequent/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "084beb83e0e87d673d5fabc844d28e8e8ae2ab4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/084beb83e0e87d673d5fabc844d28e8e8ae2ab4c", "html_url": "https://github.com/rust-lang/rust/commit/084beb83e0e87d673d5fabc844d28e8e8ae2ab4c"}], "stats": {"total": 59, "additions": 56, "deletions": 3}, "files": [{"sha": "8eab939cf86221e3e6db73bfdc043ede01514aa9", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "patch": "@@ -6,9 +6,9 @@\n \n use crate::hir::def_id::DefId;\n use crate::ty::subst::{GenericArg, GenericArgKind, SubstsRef};\n-use crate::ty::{self, Ty, TyCtxt, TypeFoldable};\n+use crate::ty::{self, layout::Size, Ty, TyCtxt, TypeFoldable};\n use crate::ty::error::{ExpectedFound, TypeError};\n-use crate::mir::interpret::{ConstValue, Scalar};\n+use crate::mir::interpret::{AllocId, ConstValue, Pointer, Scalar};\n use std::rc::Rc;\n use std::iter;\n use rustc_target::spec::abi;\n@@ -584,7 +584,40 @@ pub fn super_relate_consts<R: TypeRelation<'tcx>>(\n         // FIXME(const_generics): we should either handle `Scalar::Ptr` or add a comment\n         // saying that we're not handling it intentionally.\n \n-        // FIXME(const_generics): handle `ConstValue::ByRef` and `ConstValue::Slice`.\n+        (\n+            ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },\n+            ConstValue::Slice { data: alloc_b, start: offset_b, end: end_b },\n+        ) => {\n+            let len_a = end_a - offset_a;\n+            let len_b = end_b - offset_b;\n+            let a_bytes = alloc_a\n+                .get_bytes(\n+                    &tcx,\n+                    // invent a pointer, only the offset is relevant anyway\n+                    Pointer::new(AllocId(0), Size::from_bytes(offset_a as u64)),\n+                    Size::from_bytes(len_a as u64),\n+                )\n+                .unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err));\n+\n+            let b_bytes = alloc_b\n+                .get_bytes(\n+                    &tcx,\n+                    // invent a pointer, only the offset is relevant anyway\n+                    Pointer::new(AllocId(0), Size::from_bytes(offset_b as u64)),\n+                    Size::from_bytes(len_b as u64),\n+                )\n+                .unwrap_or_else(|err| bug!(\"const slice is invalid: {:?}\", err));\n+            if a_bytes == b_bytes {\n+                Ok(tcx.mk_const(ty::Const {\n+                    val: ConstValue::Slice { data: alloc_a, start: offset_a, end: end_a },\n+                    ty: a.ty,\n+                }))\n+            } else {\n+                Err(TypeError::ConstMismatch(expected_found(relation, &a, &b)))\n+            }\n+        }\n+\n+        // FIXME(const_generics): handle `ConstValue::ByRef`.\n \n         // FIXME(const_generics): this is wrong, as it is a projection\n         (ConstValue::Unevaluated(a_def_id, a_substs),"}, {"sha": "a455ca994b8d0562297d9463b90dfb8b28f6d8e9", "filename": "src/test/ui/const-generics/str-const-param.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.rs?ref=22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "patch": "@@ -0,0 +1,12 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+pub fn function_with_str<const STRING: &'static str>() -> &'static str {\n+    STRING\n+}\n+\n+pub fn main() {\n+    assert_eq!(function_with_str::<\"Rust\">(), \"Rust\");\n+}"}, {"sha": "9b71b5b586e12bf2116fccf59161ee0310e36b87", "filename": "src/test/ui/const-generics/str-const-param.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/22b87a5515b73bfc60a0d1da533d7aeae4a61c21/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fstr-const-param.stderr?ref=22b87a5515b73bfc60a0d1da533d7aeae4a61c21", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/str-const-param.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}