{"sha": "503153e9506890c31749768474506e0b4e3eb4ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMzE1M2U5NTA2ODkwYzMxNzQ5NzY4NDc0NTA2ZTBiNGUzZWI0ZWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T18:03:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-26T18:03:00Z"}, "message": "Auto merge of #46554 - kennytm:45861-step-4-5-6-7-upload-test-result-and-remove-toolstate-toml, r=alexcrichton\n\n[auto-toolstate] Upload the toolstate result to an external git repository, and removes BuildExpectation\n\nThis PR consists of 3 commits.\n\n1. (Steps 4\u20136) The `toolstate.json` output previously collected is now pushed to the https://github.com/rust-lang-nursery/rust-toolstate repository.\n2. (Step 7) Revert commit ab018c7, thus removing all traces of `BuildExpectation` and `toolstate.toml`.\n3. (Step 8) Adjust CONTRIBUTION.md for the new procedure.\n\nThese are the last steps of #45861. After this PR, the toolstate will be automatically computed and published to https://rust-lang-nursery.github.io/rust-toolstate/. There is no need to manage toolstate.toml again.\n\nCloses #45861.", "tree": {"sha": "1bdfae1215771ca33d110a887528425f84f6493a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1bdfae1215771ca33d110a887528425f84f6493a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/503153e9506890c31749768474506e0b4e3eb4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/503153e9506890c31749768474506e0b4e3eb4ef", "html_url": "https://github.com/rust-lang/rust/commit/503153e9506890c31749768474506e0b4e3eb4ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/503153e9506890c31749768474506e0b4e3eb4ef/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "269827ced91bb2b702d4cb62e3e164b225f73157", "url": "https://api.github.com/repos/rust-lang/rust/commits/269827ced91bb2b702d4cb62e3e164b225f73157", "html_url": "https://github.com/rust-lang/rust/commit/269827ced91bb2b702d4cb62e3e164b225f73157"}, {"sha": "44954ab52d82fe5ae5222c3bfd482d38c3db0baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/44954ab52d82fe5ae5222c3bfd482d38c3db0baa", "html_url": "https://github.com/rust-lang/rust/commit/44954ab52d82fe5ae5222c3bfd482d38c3db0baa"}], "stats": {"total": 763, "additions": 429, "deletions": 334}, "files": [{"sha": "6a7725e01cf0fee392f9efcaa25787dac14d01ec", "filename": ".travis.yml", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -179,13 +179,26 @@ matrix:\n     - env: IMAGE=x86_64-gnu-incremental\n       if: branch = auto\n \n+    - stage: publish toolstate\n+      if: branch = master AND type = push\n+      before_install: []\n+      install: []\n+      cache: false\n+      sudo: false\n+      script:\n+        MESSAGE_FILE=$(mktemp -t msg.XXXXXX);\n+        . src/ci/docker/x86_64-gnu-tools/repo.sh;\n+        commit_toolstate_change \"$MESSAGE_FILE\" \"$TRAVIS_BUILD_DIR/src/tools/publish_toolstate.py\" \"$(git rev-parse HEAD)\" \"$(git log --format=%s -n1 HEAD)\" \"$MESSAGE_FILE\"\n+\n env:\n   global:\n     - SCCACHE_BUCKET=rust-lang-ci-sccache2\n     - SCCACHE_REGION=us-west-1\n     - AWS_ACCESS_KEY_ID=AKIAJAMV3QAMMA6AXHFQ\n     # AWS_SECRET_ACCESS_KEY=...\n     - secure: \"j96XxTVOSUf4s4r4htIxn/fvIa5DWbMgLqWl7r8z2QfgUwscmkMXAwXuFNc7s7bGTpV/+CgDiMFFM6BAFLGKutytIF6oA02s9b+usQYnM0th7YQ2AIgm9GtMTJCJp4AoyfFmh8F2faUICBZlfVLUJ34udHEe35vOklix+0k4WDo=\"\n+    # TOOLSTATE_REPO_ACCESS_TOKEN=...\n+    - secure: \"cFh8thThqEJLC98XKI5pfqflUzOlxsYPRW20AWRaYOOgYHPTiGWypTXiPbGSKaeAXTZoOA+DpQtEmefc0U6lt9dHc7a/MIaK6isFurjlnKYiLOeTruzyu1z7PWCeZ/jKXsU2RK/88DBtlNwfMdaMIeuKj14IVfpepPPL71ETbuk=\"\n \n before_install:\n   - zcat $HOME/docker/rust-ci.tar.gz | docker load || true"}, {"sha": "54c507304f9f112493d9ea399fdf042de499f5aa", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 19, "deletions": 21, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -369,26 +369,29 @@ Currently building Rust will also build the following external projects:\n \n * [clippy](https://github.com/rust-lang-nursery/rust-clippy)\n * [miri](https://github.com/solson/miri)\n+* [rustfmt](https://github.com/rust-lang-nursery/rustfmt)\n+* [rls](https://github.com/rust-lang-nursery/rls/)\n \n-If your changes break one of these projects, you need to fix them by opening\n-a pull request against the broken project asking to put the fix on a branch.\n-Then you can disable the tool building via `src/tools/toolstate.toml`.\n-Once the branch containing your fix is likely to be merged, you can point\n-the affected submodule at this branch.\n+We allow breakage of these tools in the nightly channel. Maintainers of these\n+projects will be notified of the breakages and should fix them as soon as\n+possible.\n \n-Don't forget to also add your changes with\n+After the external is fixed, one could add the changes with\n \n-```\n+```sh\n git add path/to/submodule\n ```\n \n outside the submodule.\n \n-In order to prepare your PR, you can run the build locally by doing\n+In order to prepare your tool-fixing PR, you can run the build locally by doing\n `./x.py build src/tools/TOOL`. If you will be editing the sources\n there, you may wish to set `submodules = false` in the `config.toml`\n to prevent `x.py` from resetting to the original branch.\n \n+Breakage is not allowed in the beta and stable channels, and must be addressed\n+before the PR is merged.\n+\n #### Breaking Tools Built With The Compiler\n [breaking-tools-built-with-the-compiler]: #breaking-tools-built-with-the-compiler\n \n@@ -406,12 +409,12 @@ tests.\n That means that, in the default state, you can't update the compiler without first\n fixing rustfmt, rls and the other tools that the compiler builds.\n \n-Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/pull/45243)\n-to make all of this easy to handle. The idea is that you mark the tools as \"broken\",\n+Luckily, a feature was [added to Rust's build](https://github.com/rust-lang/rust/issues/45861)\n+to make all of this easy to handle. The idea is that we allow these tools to be \"broken\",\n so that the rust-lang/rust build passes without trying to build them, then land the change\n in the compiler, wait for a nightly, and go update the tools that you broke. Once you're done\n-and the tools are working again, you go back in the compiler and change the tools back\n-from \"broken\".\n+and the tools are working again, you go back in the compiler and update the tools\n+so they can be distributed again.\n \n This should avoid a bunch of synchronization dances and is also much easier on contributors as\n there's no need to block on rls/rustfmt/other tools changes going upstream.\n@@ -430,15 +433,10 @@ Here are those same steps in detail:\n 4. (optional) Maintainers of these submodules will **not** merge the PR. The PR can't be\n    merged because CI will be broken. You'll want to write a message on the PR referencing\n    your change, and how the PR should be merged once your change makes it into a nightly.\n-5. Update `src/tools/toolstate.toml` to indicate that the tool in question is \"broken\",\n-   that will disable building it on CI. See the documentation in that file for the exact\n-   configuration values you can use.\n-6. Commit the changes to `src/tools/toolstate.toml`, **do not update submodules in your commit**,\n-   and then update the PR you have for rust-lang/rust.\n-7. Wait for your PR to merge.\n-8. Wait for a nightly\n-9. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n-10. (optional) Send a PR to rust-lang/rust updating the submodule, reverting `src/tools/toolstate.toml` back to a \"building\" or \"testing\" state.\n+5. Wait for your PR to merge.\n+6. Wait for a nightly\n+7. (optional) Help land your PR on the upstream repository now that your changes are in nightly.\n+8. (optional) Send a PR to rust-lang/rust updating the submodule.\n \n #### Updating submodules\n [updating-submodules]: #updating-submodules"}, {"sha": "da7885540491de471a66081cb6347234c93f9077", "filename": "appveyor.yml", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/appveyor.yml", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/appveyor.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/appveyor.yml?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -5,6 +5,8 @@ environment:\n   AWS_SECRET_ACCESS_KEY:\n     secure: 7Y+JiquYedOAgnUU26uL0DPzrxmTtR+qIwG6rNKSuWDffqU3vVZxbGXim9QpTO80\n   SCCACHE_DIGEST: f808afabb4a4eb1d7112bcb3fa6be03b61e93412890c88e177c667eb37f46353d7ec294e559b16f9f4b5e894f2185fe7670a0df15fd064889ecbd80f0c34166c\n+  TOOLSTATE_REPO_ACCESS_TOKEN:\n+    secure: PTZiSxJMVUZ0VnMR5i13E4OagbXfglj7pcskDQiKufVrDm13mLoI0vDJAEM35+bY\n \n   # By default schannel checks revocation of certificates unlike some other SSL\n   # backends, but we've historically had problems on CI where a revocation\n@@ -27,8 +29,8 @@ environment:\n \n   # MSVC tools tests\n   - MSYS_BITS: 64\n-    SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py toolstates.json\n-    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=toolstates.json\n+    SCRIPT: src/ci/docker/x86_64-gnu-tools/checktools.sh x.py /tmp/toolstates.json windows\n+    RUST_CONFIGURE_ARGS: --build=x86_64-pc-windows-msvc --save-toolstates=/tmp/toolstates.json --enable-test-miri\n \n   # 32/64-bit MinGW builds.\n   #"}, {"sha": "56a68a7ca5481fe9cf4da253f91ccfc847bcf15e", "filename": "src/Cargo.lock", "status": "modified", "additions": 106, "deletions": 57, "changes": 163, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.lock?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -133,8 +133,8 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num_cpus 1.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -152,8 +152,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -166,7 +166,7 @@ dependencies = [\n \n [[package]]\n name = \"byteorder\"\n-version = \"1.1.0\"\n+version = \"1.2.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -205,8 +205,8 @@ dependencies = [\n  \"same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"shell-escape 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -223,8 +223,8 @@ name = \"cargo_metadata\"\n version = \"0.2.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -235,8 +235,20 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"cargo_metadata\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -272,7 +284,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"clap\"\n-version = \"2.28.0\"\n+version = \"2.29.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"ansi_term 0.10.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -296,8 +308,8 @@ dependencies = [\n  \"duct 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -316,8 +328,8 @@ dependencies = [\n  \"quine-mc_cluskey 0.2.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-normalization 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -392,6 +404,7 @@ dependencies = [\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"miow 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -426,8 +439,8 @@ version = \"0.14.0\"\n dependencies = [\n  \"curl 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"failure 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -555,8 +568,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strsim 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -816,7 +829,7 @@ dependencies = [\n  \"pest 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"quick-error 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -903,7 +916,7 @@ version = \"0.1.0\"\n name = \"installer\"\n version = \"0.0.0\"\n dependencies = [\n- \"clap 2.28.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -943,8 +956,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"futures 0.1.17 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -974,8 +987,8 @@ version = \"0.16.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"enum_primitive 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url_serde 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1102,7 +1115,7 @@ name = \"mdbook\"\n version = \"0.0.26\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.28.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"error-chain 0.11.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"handlebars 0.29.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1111,8 +1124,8 @@ dependencies = [\n  \"open 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"pulldown-cmark 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"tempdir 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1162,6 +1175,17 @@ dependencies = [\n  \"ws2_32-sys 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"miri\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"compiletest_rs 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"lazy_static 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"multiple_bins\"\n version = \"0.1.0\"\n@@ -1481,7 +1505,7 @@ name = \"racer\"\n version = \"2.0.12\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"clap 2.28.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"env_logger 0.3.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -1609,9 +1633,9 @@ dependencies = [\n  \"rls-rustc 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustfmt-nightly 0.3.2\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustfmt-nightly 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -1636,8 +1660,8 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rls-span 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1660,8 +1684,8 @@ version = \"0.4.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -1677,7 +1701,7 @@ dependencies = [\n name = \"rustbook\"\n version = \"0.1.0\"\n dependencies = [\n- \"clap 2.28.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"mdbook 0.0.26 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -1688,7 +1712,7 @@ dependencies = [\n  \"arena 0.0.0\",\n  \"backtrace 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"flate2 0.2.20 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"fmt_macros 0.0.0\",\n  \"graphviz 0.0.0\",\n@@ -1937,7 +1961,7 @@ name = \"rustc_mir\"\n version = \"0.0.0\"\n dependencies = [\n  \"bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"graphviz 0.0.0\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log_settings 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2133,8 +2157,31 @@ dependencies = [\n  \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"winapi 0.2.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"rustfmt-nightly\"\n+version = \"0.3.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"cargo_metadata 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"derive-new 0.5.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"diff 0.1.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"getopts 0.2.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"libc 0.2.34 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"regex 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2195,7 +2242,7 @@ version = \"0.8.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2205,22 +2252,22 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.24\"\n+version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.24\"\n+version = \"1.0.25\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive_internals 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.18.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive_internals\"\n-version = \"0.18.0\"\n+version = \"0.18.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -2232,7 +2279,7 @@ name = \"serde_ignored\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2243,7 +2290,7 @@ dependencies = [\n  \"dtoa 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.41 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2336,7 +2383,7 @@ dependencies = [\n  \"lazy_static 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"phf_shared 0.7.21 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"precomputed-hash 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_codegen 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"string_cache_shared 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n@@ -2577,7 +2624,7 @@ name = \"toml\"\n version = \"0.4.5\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -2659,7 +2706,7 @@ name = \"url_serde\"\n version = \"0.2.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"url 1.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n@@ -2781,12 +2828,13 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum bitflags 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b3c30d3802dfb7281680d6285f2ccdaa8c2d8fee41f93805dba5c4cf50dc23cf\"\n \"checksum bufstream 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f2f382711e76b9de6c744cc00d0497baba02fb00a787f088c879f01d09468e32\"\n-\"checksum byteorder 1.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ff81738b726f5d099632ceaffe7fb65b90212e8dce59d518729e7e8634032d3d\"\n+\"checksum byteorder 1.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"652805b7e73fada9d85e9a6682a4abd490cb52d96aeecc12e33a0de34dfd0d23\"\n \"checksum cargo_metadata 0.2.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"be1057b8462184f634c3a208ee35b0f935cfd94b694b26deadccd98732088d7b\"\n \"checksum cargo_metadata 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f56ec3e469bca7c276f2eea015aa05c5e381356febdbb0683c2580189604537\"\n+\"checksum cargo_metadata 0.4.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"20d6fb2b5574726329c85cdba0df0347fddfec3cf9c8b588f9931708280f5643\"\n \"checksum cc 1.0.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a9b13a57efd6b30ecd6598ebdb302cca617930b5470647570468a65d12ef9719\"\n \"checksum cfg-if 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d4c819a1287eb618df47cc647173c5c4c66ba19d888a6e50d605672aed3140de\"\n-\"checksum clap 2.28.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dc34bf7d5d66268b466b9852bca925ec1d2650654dab4da081e63fd230145c2e\"\n+\"checksum clap 2.29.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"110d43e343eb29f4f51c1db31beb879d546db27998577e5715270a54bcf41d3f\"\n \"checksum cmake 0.1.29 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56d741ea7a69e577f6d06b36b7dff4738f680593dc27a701ffa8506b73ce28bb\"\n \"checksum coco 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c06169f5beb7e31c7c67ebf5540b8b472d23e3eade3b2ec7d1f5b504a85f91bd\"\n \"checksum commoncrypto 0.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d056a8586ba25a1e4d61cb090900e495952c7886786fc55f909ab2f819b69007\"\n@@ -2920,6 +2968,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum rls-vfs 0.4.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ffd34691a510938bb67fe0444fb363103c73ffb31c121d1e16bc92d8945ea8ff\"\n \"checksum rustc-demangle 0.1.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"aee45432acc62f7b9a108cc054142dac51f979e69e71ddce7d6fc7adf29e817e\"\n \"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n+\"checksum rustfmt-nightly 0.3.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a1fb3fd656e881c3403c318674d25317034d7ffd30dd36dfcf4b7e09f3bf8ebd\"\n \"checksum same-file 0.1.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d931a44fdaa43b8637009e7632a02adc4f2b2e0733c08caa4cf00e8da4a117a7\"\n \"checksum scoped-tls 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"f417c22df063e9450888a7561788e9bd46d3bb3c1466435b4eccb903807f147d\"\n \"checksum scopeguard 0.1.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"59a076157c1e2dc561d8de585151ee6965d910dd4dcb5dabb7ae3e83981a6c57\"\n@@ -2928,9 +2977,9 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n \"checksum semver 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"bee2bc909ab2d8d60dab26e8cad85b25d795b14603a0dcb627b78b9d30b6454b\"\n \"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n-\"checksum serde 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1c57ab4ec5fa85d08aaf8ed9245899d9bbdd66768945b21113b84d5f595cb6a1\"\n-\"checksum serde_derive 1.0.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"02c92ea07b6e49b959c1481804ebc9bfd92d3c459f1274c9a9546829e42a66ce\"\n-\"checksum serde_derive_internals 0.18.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"75c6aac7b99801a16db5b40b7bf0d7e4ba16e76fbf231e32a4677f271cac0603\"\n+\"checksum serde 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"386122ba68c214599c44587e0c0b411e8d90894503a95425b4f9508e4317901f\"\n+\"checksum serde_derive 1.0.25 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ec0bfa6c5784e7d110514448da0e1dbad41ea5514c3e68be755b23858b83a399\"\n+\"checksum serde_derive_internals 0.18.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"730fe9f29fe8db69a601837f416e46cba07792031ed6b27557a43e49d62d89ae\"\n \"checksum serde_ignored 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"190e9765dcedb56be63b6e0993a006c7e3b071a016a304736e4a315dc01fb142\"\n \"checksum serde_json 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7cf5b0b5b4bd22eeecb7e01ac2e1225c7ef5e4272b79ee28a8392a8c8489c839\"\n \"checksum shared_child 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"099b38928dbe4a0a01fcd8c233183072f14a7d126a34bed05880869be66e14cc\""}, {"sha": "15594a54ef62e3f70eda33adc5343caefe861291", "filename": "src/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FCargo.toml?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -20,6 +20,7 @@ members = [\n   \"tools/rustdoc\",\n   \"tools/rls\",\n   \"tools/rustfmt\",\n+  \"tools/miri\",\n   # FIXME(https://github.com/rust-lang/cargo/issues/4089): move these to exclude\n   \"tools/rls/test_data/bin_lib\",\n   \"tools/rls/test_data/borrow_error\","}, {"sha": "714c01aa5044609841c16762b8620bf5f30c8b64", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 12, "deletions": 32, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -23,7 +23,7 @@ use std::path::{PathBuf, Path};\n use std::process::Command;\n use std::io::Read;\n \n-use build_helper::{self, output, BuildExpectation};\n+use build_helper::{self, output};\n \n use builder::{Kind, RunConfig, ShouldRun, Builder, Compiler, Step};\n use cache::{INTERNER, Interned};\n@@ -65,23 +65,19 @@ impl fmt::Display for TestKind {\n     }\n }\n \n-fn try_run_expecting(build: &Build, cmd: &mut Command, expect: BuildExpectation) -> bool {\n+fn try_run(build: &Build, cmd: &mut Command) -> bool {\n     if !build.fail_fast {\n-        if !build.try_run(cmd, expect) {\n+        if !build.try_run(cmd) {\n             let mut failures = build.delayed_failures.borrow_mut();\n             failures.push(format!(\"{:?}\", cmd));\n             return false;\n         }\n     } else {\n-        build.run_expecting(cmd, expect);\n+        build.run(cmd);\n     }\n     true\n }\n \n-fn try_run(build: &Build, cmd: &mut Command) {\n-    try_run_expecting(build, cmd, BuildExpectation::None);\n-}\n-\n fn try_run_quiet(build: &Build, cmd: &mut Command) {\n     if !build.fail_fast {\n         if !build.try_run_quiet(cmd) {\n@@ -259,12 +255,8 @@ impl Step for Rls {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run_expecting(\n-            build,\n-            &mut cargo,\n-            builder.build.config.toolstate.rls.passes(ToolState::Testing),\n-        ) {\n-            build.save_toolstate(\"rls\", ToolState::Testing);\n+        if try_run(build, &mut cargo) {\n+            build.save_toolstate(\"rls\", ToolState::TestPass);\n         }\n     }\n }\n@@ -309,12 +301,8 @@ impl Step for Rustfmt {\n \n         builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-        if try_run_expecting(\n-            build,\n-            &mut cargo,\n-            builder.build.config.toolstate.rustfmt.passes(ToolState::Testing),\n-        ) {\n-            build.save_toolstate(\"rustfmt\", ToolState::Testing);\n+        if try_run(build, &mut cargo) {\n+            build.save_toolstate(\"rustfmt\", ToolState::TestPass);\n         }\n     }\n }\n@@ -363,12 +351,8 @@ impl Step for Miri {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run_expecting(\n-                build,\n-                &mut cargo,\n-                builder.build.config.toolstate.miri.passes(ToolState::Testing),\n-            ) {\n-                build.save_toolstate(\"miri\", ToolState::Testing);\n+            if try_run(build, &mut cargo) {\n+                build.save_toolstate(\"miri\", ToolState::TestPass);\n             }\n         } else {\n             eprintln!(\"failed to test miri: could not build\");\n@@ -422,12 +406,8 @@ impl Step for Clippy {\n \n             builder.add_rustc_lib_path(compiler, &mut cargo);\n \n-            if try_run_expecting(\n-                build,\n-                &mut cargo,\n-                builder.build.config.toolstate.clippy.passes(ToolState::Testing),\n-            ) {\n-                build.save_toolstate(\"clippy-driver\", ToolState::Testing);\n+            if try_run(build, &mut cargo) {\n+                build.save_toolstate(\"clippy-driver\", ToolState::TestPass);\n             }\n         } else {\n             eprintln!(\"failed to test clippy: could not build\");"}, {"sha": "f3ffe9a276111efc2e6beac1e5a18175e81f148c", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -27,7 +27,6 @@ use util::exe;\n use cache::{INTERNER, Interned};\n use flags::Flags;\n pub use flags::Subcommand;\n-use toolstate::ToolStates;\n \n /// Global configuration for the entire build and/or bootstrap.\n ///\n@@ -134,8 +133,6 @@ pub struct Config {\n     // These are either the stage0 downloaded binaries or the locally installed ones.\n     pub initial_cargo: PathBuf,\n     pub initial_rustc: PathBuf,\n-\n-    pub toolstate: ToolStates,\n }\n \n /// Per-target configuration stored in the global configuration structure.\n@@ -348,18 +345,6 @@ impl Config {\n             }\n         }).unwrap_or_else(|| TomlConfig::default());\n \n-        let toolstate_toml_path = config.src.join(\"src/tools/toolstate.toml\");\n-        let parse_toolstate = || -> Result<_, Box<::std::error::Error>> {\n-            let mut f = File::open(toolstate_toml_path)?;\n-            let mut contents = String::new();\n-            f.read_to_string(&mut contents)?;\n-            Ok(toml::from_str(&contents)?)\n-        };\n-        config.toolstate = parse_toolstate().unwrap_or_else(|err| {\n-            println!(\"failed to parse TOML configuration 'toolstate.toml': {}\", err);\n-            process::exit(2);\n-        });\n-\n         let build = toml.build.clone().unwrap_or(Build::default());\n         set(&mut config.build, build.build.clone().map(|x| INTERNER.intern_string(x)));\n         set(&mut config.build, flags.build);"}, {"sha": "3d2795f04e27cc12ffaff6065a84c43d26b96b13", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -1077,11 +1077,6 @@ impl Step for Rls {\n         let target = self.target;\n         assert!(build.config.extended);\n \n-        if !builder.config.toolstate.rls.testing() {\n-            println!(\"skipping Dist RLS stage{} ({})\", stage, target);\n-            return None\n-        }\n-\n         println!(\"Dist RLS stage{} ({})\", stage, target);\n         let src = build.src.join(\"src/tools/rls\");\n         let release_num = build.release_num(\"rls\");\n@@ -1164,11 +1159,6 @@ impl Step for Rustfmt {\n         let target = self.target;\n         assert!(build.config.extended);\n \n-        if !builder.config.toolstate.rustfmt.testing() {\n-            println!(\"skipping Dist Rustfmt stage{} ({})\", stage, target);\n-            return None\n-        }\n-\n         println!(\"Dist Rustfmt stage{} ({})\", stage, target);\n         let src = build.src.join(\"src/tools/rustfmt\");\n         let release_num = build.release_num(\"rustfmt\");"}, {"sha": "d6dc44034a70836da579c128c5de6c44feb15e33", "filename": "src/bootstrap/lib.rs", "status": "modified", "additions": 10, "deletions": 18, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Flib.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -143,8 +143,7 @@ use std::path::{PathBuf, Path};\n use std::process::{self, Command};\n use std::slice;\n \n-use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime,\n-                   BuildExpectation};\n+use build_helper::{run_silent, run_suppressed, try_run_silent, try_run_suppressed, output, mtime};\n \n use util::{exe, libdir, OutputFolder, CiEnv};\n \n@@ -569,39 +568,32 @@ impl Build {\n             .join(libdir(&self.config.build))\n     }\n \n-    /// Runs a command, printing out nice contextual information if its build\n-    /// status is not the expected one\n-    fn run_expecting(&self, cmd: &mut Command, expect: BuildExpectation) {\n-        self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_silent(cmd, expect)\n-    }\n-\n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run(&self, cmd: &mut Command) {\n-        self.run_expecting(cmd, BuildExpectation::None)\n+        self.verbose(&format!(\"running: {:?}\", cmd));\n+        run_silent(cmd)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     fn run_quiet(&self, cmd: &mut Command) {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        run_suppressed(cmd, BuildExpectation::None)\n+        run_suppressed(cmd)\n     }\n \n-    /// Runs a command, printing out nice contextual information if its build\n-    /// status is not the expected one.\n-    /// Exits if the command failed to execute at all, otherwise returns whether\n-    /// the expectation was met\n-    fn try_run(&self, cmd: &mut Command, expect: BuildExpectation) -> bool {\n+    /// Runs a command, printing out nice contextual information if it fails.\n+    /// Exits if the command failed to execute at all, otherwise returns its\n+    /// `status.success()`.\n+    fn try_run(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_silent(cmd, expect)\n+        try_run_silent(cmd)\n     }\n \n     /// Runs a command, printing out nice contextual information if it fails.\n     /// Exits if the command failed to execute at all, otherwise returns its\n     /// `status.success()`.\n     fn try_run_quiet(&self, cmd: &mut Command) -> bool {\n         self.verbose(&format!(\"running: {:?}\", cmd));\n-        try_run_suppressed(cmd, BuildExpectation::None)\n+        try_run_suppressed(cmd)\n     }\n \n     pub fn is_verbose(&self) -> bool {"}, {"sha": "ea055cb5d1b99e4e2f3ade6ef961b9a403815363", "filename": "src/bootstrap/tool.rs", "status": "modified", "additions": 15, "deletions": 26, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Ftool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Ftool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftool.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -22,7 +22,6 @@ use native;\n use channel::GitInfo;\n use cache::Interned;\n use toolstate::ToolState;\n-use build_helper::BuildExpectation;\n \n #[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n pub struct CleanTools {\n@@ -82,7 +81,7 @@ struct ToolBuild {\n     tool: &'static str,\n     path: &'static str,\n     mode: Mode,\n-    expectation: BuildExpectation,\n+    is_ext_tool: bool,\n }\n \n impl Step for ToolBuild {\n@@ -102,7 +101,7 @@ impl Step for ToolBuild {\n         let target = self.target;\n         let tool = self.tool;\n         let path = self.path;\n-        let expectation = self.expectation;\n+        let is_ext_tool = self.is_ext_tool;\n \n         match self.mode {\n             Mode::Libstd => builder.ensure(compile::Std { compiler, target }),\n@@ -115,34 +114,25 @@ impl Step for ToolBuild {\n         println!(\"Building stage{} tool {} ({})\", compiler.stage, tool, target);\n \n         let mut cargo = prepare_tool_cargo(builder, compiler, target, \"build\", path);\n-        let is_expected = build.try_run(&mut cargo, expectation);\n-        // If the expectation is \"Failing\", `try_run` returning true actually\n-        // means a build-failure is successfully observed, i.e. the tool is\n-        // broken. Thus the XOR here.\n-        // Sorry for the complicated logic, but we can remove this expectation\n-        // logic after #45861 is fully fixed.\n-        build.save_toolstate(tool, if is_expected ^ (expectation == BuildExpectation::Failing) {\n-            ToolState::Compiling\n+        let is_expected = build.try_run(&mut cargo);\n+        build.save_toolstate(tool, if is_expected {\n+            ToolState::TestFail\n         } else {\n-            ToolState::Broken\n+            ToolState::BuildFail\n         });\n \n         if !is_expected {\n-            if expectation == BuildExpectation::None {\n+            if !is_ext_tool {\n                 exit(1);\n             } else {\n                 return None;\n             }\n-        }\n-\n-        if expectation == BuildExpectation::Succeeding || expectation == BuildExpectation::None {\n+        } else {\n             let cargo_out = build.cargo_out(compiler, Mode::Tool, target)\n                 .join(exe(tool, &compiler.host));\n             let bin = build.tools_dir(compiler).join(exe(tool, &compiler.host));\n             copy(&cargo_out, &bin);\n             Some(bin)\n-        } else {\n-            None\n         }\n     }\n }\n@@ -251,8 +241,8 @@ macro_rules! tool {\n                     tool: $tool_name,\n                     mode: $mode,\n                     path: $path,\n-                    expectation: BuildExpectation::None,\n-                }).expect(\"expected to build -- BuildExpectation::None\")\n+                    is_ext_tool: false,\n+                }).expect(\"expected to build -- essential tool\")\n             }\n         }\n         )+\n@@ -299,8 +289,8 @@ impl Step for RemoteTestServer {\n             tool: \"remote-test-server\",\n             mode: Mode::Libstd,\n             path: \"src/tools/remote-test-server\",\n-            expectation: BuildExpectation::None,\n-        }).expect(\"expected to build -- BuildExpectation::None\")\n+            is_ext_tool: false,\n+        }).expect(\"expected to build -- essential tool\")\n     }\n }\n \n@@ -417,8 +407,8 @@ impl Step for Cargo {\n             tool: \"cargo\",\n             mode: Mode::Librustc,\n             path: \"src/tools/cargo\",\n-            expectation: BuildExpectation::None,\n-        }).expect(\"BuildExpectation::None - expected to build\")\n+            is_ext_tool: false,\n+        }).expect(\"expected to build -- essential tool\")\n     }\n }\n \n@@ -455,14 +445,13 @@ macro_rules! tool_extended {\n \n             fn run($sel, $builder: &Builder) -> Option<PathBuf> {\n                 $extra_deps\n-                let toolstate = $builder.build.config.toolstate.$toolstate;\n                 $builder.ensure(ToolBuild {\n                     compiler: $sel.compiler,\n                     target: $sel.target,\n                     tool: $tool_name,\n                     mode: Mode::Librustc,\n                     path: $path,\n-                    expectation: toolstate.passes(ToolState::Compiling),\n+                    is_ext_tool: true,\n                 })\n             }\n         }"}, {"sha": "f63c1988906fbc0665120e41e956209b2ac2ce86", "filename": "src/bootstrap/toolstate.rs", "status": "modified", "additions": 5, "deletions": 35, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Ftoolstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbootstrap%2Ftoolstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftoolstate.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -8,51 +8,21 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use build_helper::BuildExpectation;\n-\n #[derive(Copy, Clone, Debug, Deserialize, Serialize, PartialEq, Eq)]\n+#[serde(rename_all = \"kebab-case\")]\n /// Whether a tool can be compiled, tested or neither\n pub enum ToolState {\n     /// The tool compiles successfully, but the test suite fails\n-    Compiling = 1,\n+    TestFail = 1,\n     /// The tool compiles successfully and its test suite passes\n-    Testing = 2,\n+    TestPass = 2,\n     /// The tool can't even be compiled\n-    Broken = 0,\n-}\n-\n-impl ToolState {\n-    /// If a tool with the current toolstate should be working on\n-    /// the given toolstate\n-    pub fn passes(self, other: ToolState) -> BuildExpectation {\n-        if self as usize >= other as usize {\n-            BuildExpectation::Succeeding\n-        } else {\n-            BuildExpectation::Failing\n-        }\n-    }\n-\n-    pub fn testing(&self) -> bool {\n-        match *self {\n-            ToolState::Testing => true,\n-            _ => false,\n-        }\n-    }\n+    BuildFail = 0,\n }\n \n impl Default for ToolState {\n     fn default() -> Self {\n         // err on the safe side\n-        ToolState::Broken\n+        ToolState::BuildFail\n     }\n }\n-\n-#[derive(Copy, Clone, Debug, Deserialize, Default)]\n-/// Used to express which tools should (not) be compiled or tested.\n-/// This is created from `toolstate.toml`.\n-pub struct ToolStates {\n-    pub miri: ToolState,\n-    pub clippy: ToolState,\n-    pub rls: ToolState,\n-    pub rustfmt: ToolState,\n-}"}, {"sha": "363bbd795442251c295a45cbfcfa998c4966bb1f", "filename": "src/build_helper/lib.rs", "status": "modified", "additions": 19, "deletions": 61, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbuild_helper%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fbuild_helper%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuild_helper%2Flib.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -35,97 +35,55 @@ macro_rules! t {\n     })\n }\n \n-#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]\n-pub enum BuildExpectation {\n-    Succeeding,\n-    Failing,\n-    None,\n-}\n-\n-pub fn run(cmd: &mut Command, expect: BuildExpectation) {\n+pub fn run(cmd: &mut Command) {\n     println!(\"running: {:?}\", cmd);\n-    run_silent(cmd, expect);\n+    run_silent(cmd);\n }\n \n-pub fn run_silent(cmd: &mut Command, expect: BuildExpectation) {\n-    if !try_run_silent(cmd, expect) {\n+pub fn run_silent(cmd: &mut Command) {\n+    if !try_run_silent(cmd) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_silent(cmd: &mut Command, expect: BuildExpectation) -> bool {\n+pub fn try_run_silent(cmd: &mut Command) -> bool {\n     let status = match cmd.status() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    process_status(\n-        cmd,\n-        status.success(),\n-        expect,\n-        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n-                    expected success, got: {}\\n\\n\",\n-                    cmd,\n-                    status))\n-}\n-\n-fn process_status<F: FnOnce()>(\n-    cmd: &Command,\n-    success: bool,\n-    expect: BuildExpectation,\n-    f: F,\n-) -> bool {\n-    use BuildExpectation::*;\n-    match (expect, success) {\n-        (None, false) => { f(); false },\n-        // Non-tool build succeeds, everything is good\n-        (None, true) => true,\n-        // Tool expected to work and is working\n-        (Succeeding, true) => true,\n-        // Tool expected to fail and is failing\n-        (Failing, false) => {\n-            println!(\"This failure is expected (see `src/tools/toolstate.toml`)\");\n-            true\n-        },\n-        // Tool expected to work, but is failing\n-        (Succeeding, false) => {\n-            f();\n-            println!(\"You can disable the tool in `src/tools/toolstate.toml`\");\n-            false\n-        },\n-        // Tool expected to fail, but is working\n-        (Failing, true) => {\n-            println!(\"Expected `{:?}` to fail, but it succeeded.\\n\\\n-                     Please adjust `src/tools/toolstate.toml` accordingly\", cmd);\n-            false\n-        }\n+    if !status.success() {\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+                  expected success, got: {}\\n\\n\",\n+                 cmd,\n+                 status);\n     }\n+    status.success()\n }\n \n-pub fn run_suppressed(cmd: &mut Command, expect: BuildExpectation) {\n-    if !try_run_suppressed(cmd, expect) {\n+pub fn run_suppressed(cmd: &mut Command) {\n+    if !try_run_suppressed(cmd) {\n         std::process::exit(1);\n     }\n }\n \n-pub fn try_run_suppressed(cmd: &mut Command, expect: BuildExpectation) -> bool {\n+pub fn try_run_suppressed(cmd: &mut Command) -> bool {\n     let output = match cmd.output() {\n         Ok(status) => status,\n         Err(e) => fail(&format!(\"failed to execute command: {:?}\\nerror: {}\",\n                                 cmd, e)),\n     };\n-    process_status(\n-        cmd,\n-        output.status.success(),\n-        expect,\n-        || println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n+    if !output.status.success() {\n+        println!(\"\\n\\ncommand did not execute successfully: {:?}\\n\\\n                   expected success, got: {}\\n\\n\\\n                   stdout ----\\n{}\\n\\\n                   stderr ----\\n{}\\n\\n\",\n                  cmd,\n                  output.status,\n                  String::from_utf8_lossy(&output.stdout),\n-                 String::from_utf8_lossy(&output.stderr)))\n+                 String::from_utf8_lossy(&output.stderr));\n+    }\n+    output.status.success()\n }\n \n pub fn gnu_target(target: &str) -> String {"}, {"sha": "f743c976f91a2ae989d33b2e60687e825dbba9e3", "filename": "src/ci/docker/run.sh", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Frun.sh", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Frun.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Frun.sh?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -99,6 +99,7 @@ exec docker \\\n   --env LOCAL_USER_ID=`id -u` \\\n   --env TRAVIS \\\n   --env TRAVIS_BRANCH \\\n+  --env TOOLSTATE_REPO_ACCESS_TOKEN \\\n   --volume \"$HOME/.cargo:/cargo\" \\\n   --volume \"$HOME/rustsrc:$HOME/rustsrc\" \\\n   --init \\"}, {"sha": "44bee199911b8e5f7961fb55b68fa0561f590b72", "filename": "src/ci/docker/x86_64-gnu-aux/Dockerfile", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-aux%2FDockerfile?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -21,5 +21,5 @@ RUN apt-get update && apt-get install -y --no-install-recommends \\\n COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --enable-test-miri\n+ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu\n ENV RUST_CHECK_TARGET check-aux"}, {"sha": "8975d419d2055e01f5a5ea5a79e89fe8a13ae809", "filename": "src/ci/docker/x86_64-gnu-tools/Dockerfile", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2FDockerfile?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -18,6 +18,10 @@ COPY scripts/sccache.sh /scripts/\n RUN sh /scripts/sccache.sh\n \n COPY x86_64-gnu-tools/checktools.sh /tmp/\n+COPY x86_64-gnu-tools/repo.sh /tmp/\n \n-ENV RUST_CONFIGURE_ARGS --build=x86_64-unknown-linux-gnu --save-toolstates=/tmp/toolstates.json\n-ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json\n+ENV RUST_CONFIGURE_ARGS \\\n+  --build=x86_64-unknown-linux-gnu \\\n+  --enable-test-miri \\\n+  --save-toolstates=/tmp/toolstates.json\n+ENV SCRIPT /tmp/checktools.sh ../x.py /tmp/toolstates.json linux"}, {"sha": "0d40863c0920fb08a587335712095fd813ad94c3", "filename": "src/ci/docker/x86_64-gnu-tools/checktools.sh", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Fchecktools.sh?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -13,7 +13,9 @@\n set -eu\n \n X_PY=\"$1\"\n-TOOLSTATE_FILE=\"$2\"\n+TOOLSTATE_FILE=\"$(realpath $2)\"\n+OS=\"$3\"\n+COMMIT=\"$(git rev-parse HEAD)\"\n \n touch \"$TOOLSTATE_FILE\"\n \n@@ -23,17 +25,22 @@ python2.7 \"$X_PY\" test --no-fail-fast \\\n     src/tools/rustfmt \\\n     src/tools/miri \\\n     src/tools/clippy\n-TEST_RESULT=$?\n set -e\n \n-# FIXME: Upload this file to the repository.\n cat \"$TOOLSTATE_FILE\"\n \n-# FIXME: After we can properly inform dev-tool maintainers about failure,\n-#        comment out the `exit 0` below.\n if [ \"$RUST_RELEASE_CHANNEL\" = nightly ]; then\n-    # exit 0\n-    true\n+    . \"$(dirname $0)/repo.sh\"\n+    MESSAGE_FILE=$(mktemp -t msg.XXXXXX)\n+    echo \"($OS CI update)\" > \"$MESSAGE_FILE\"\n+    commit_toolstate_change \"$MESSAGE_FILE\" \\\n+        sed -i \"1 a\\\\\n+$COMMIT\\t$(cat \"$TOOLSTATE_FILE\")\n+\" \"history/$OS.tsv\"\n+    rm -f \"$MESSAGE_FILE\"\n+    exit 0\n fi\n \n-exit $TEST_RESULT\n+if grep -q fail \"$TOOLSTATE_FILE\"; then\n+    exit 4\n+fi"}, {"sha": "c10afef753e810e25f62126927ba739c49b10381", "filename": "src/ci/docker/x86_64-gnu-tools/repo.sh", "status": "added", "additions": 90, "deletions": 0, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fx86_64-gnu-tools%2Frepo.sh?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -0,0 +1,90 @@\n+#!/bin/sh\n+\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+# This file provides the function `commit_toolstate_change` for pushing a change\n+# to the `rust-toolstate` repository.\n+#\n+# The function relies on a GitHub bot user, which should have a Personal access\n+# token defined in the environment variable $TOOLSTATE_REPO_ACCESS_TOKEN. If for\n+# some reason you need to change the token, please update `.travis.yml` and\n+# `appveyor.yml`:\n+#\n+#   1. Generate a new Personal access token:\n+#\n+#       * Login to the bot account, and go to Settings -> Developer settings ->\n+#           Personal access tokens\n+#       * Click \"Generate new token\"\n+#       * Enable the \"public_repo\" permission, then click \"Generate token\"\n+#       * Copy the generated token (should be a 40-digit hexadecimal number).\n+#           Save it somewhere secure, as the token would be gone once you leave\n+#           the page.\n+#\n+#   2. Encrypt the token for Travis CI\n+#\n+#       * Install the `travis` tool locally (`gem install travis`).\n+#       * Encrypt the token:\n+#           ```\n+#           travis -r rust-lang/rust encrypt \\\n+#                   TOOLSTATE_REPO_ACCESS_TOKEN=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n+#           ```\n+#       * Copy output to replace the existing one in `.travis.yml`.\n+#       * Details of this step can be found in\n+#           <https://docs.travis-ci.com/user/encryption-keys/>\n+#\n+#   3. Encrypt the token for AppVeyor\n+#\n+#       * Login to AppVeyor using your main account, and login as the rust-lang\n+#           organization.\n+#       * Open the [\"Encrypt data\" tool](https://ci.appveyor.com/tools/encrypt)\n+#       * Paste the 40-digit token into the \"Value to encrypt\" box, then click\n+#           \"Encrypt\"\n+#       * Copy the output to replace the existing one in `appveyor.yml`.\n+#       * Details of this step can be found in\n+#           <https://www.appveyor.com/docs/how-to/git-push/>\n+#\n+#   4. Replace the email address below if the bot account identity is changed\n+#\n+#       * See <https://help.github.com/articles/about-commit-email-addresses/>\n+#           if a private email by GitHub is wanted.\n+\n+commit_toolstate_change() {\n+    OLDFLAGS=\"$-\"\n+    set -eu\n+\n+    git config --global user.email '34210020+rust-toolstate-update@users.noreply.github.com'\n+    git config --global user.name 'Rust Toolstate Update'\n+    git config --global credential.helper store\n+    printf 'https://%s:x-oauth-basic@github.com\\n' \"$TOOLSTATE_REPO_ACCESS_TOKEN\" \\\n+        > \"$HOME/.git-credentials\"\n+    git clone --depth=1 https://github.com/rust-lang-nursery/rust-toolstate.git\n+\n+    cd rust-toolstate\n+    FAILURE=1\n+    MESSAGE_FILE=\"$1\"\n+    shift\n+    for RETRY_COUNT in 1 2 3 4 5; do\n+        \"$@\"\n+        # `git commit` failing means nothing to commit.\n+        FAILURE=0\n+        git commit -a -F \"$MESSAGE_FILE\" || break\n+        # On failure randomly sleep for 0 to 3 seconds as a crude way to introduce jittering.\n+        git push origin master && break || sleep $(LC_ALL=C tr -cd 0-3 < /dev/urandom | head -c 1)\n+        FAILURE=1\n+        git fetch origin master\n+        git reset --hard origin/master\n+    done\n+    cd ..\n+\n+    set +eu\n+    set \"-$OLDFLAGS\"\n+    return $FAILURE\n+}"}, {"sha": "649cd6e8e85fb41b895b9c00222d2640eb545105", "filename": "src/liballoc_jemalloc/build.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fliballoc_jemalloc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Fliballoc_jemalloc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc_jemalloc%2Fbuild.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -16,7 +16,7 @@ extern crate cc;\n use std::env;\n use std::path::PathBuf;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     // FIXME: This is a hack to support building targets that don't\n@@ -113,7 +113,7 @@ fn main() {\n         cmd.arg(\"--with-lg-quantum=4\");\n     }\n \n-    run(&mut cmd, BuildExpectation::None);\n+    run(&mut cmd);\n \n     let mut make = Command::new(build_helper::make(&host));\n     make.current_dir(&native.out_dir)\n@@ -130,7 +130,7 @@ fn main() {\n             .arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\"));\n     }\n \n-    run(&mut make, BuildExpectation::None);\n+    run(&mut make);\n \n     // The pthread_atfork symbols is used by jemalloc on android but the really\n     // old android we're building on doesn't have them defined, so just make"}, {"sha": "8a28105ff81e1e20f16b2ec9ac5daf4195d9bbd0", "filename": "src/libstd/build.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Flibstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Flibstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbuild.rs?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -14,7 +14,7 @@ extern crate build_helper;\n \n use std::env;\n use std::process::Command;\n-use build_helper::{run, native_lib_boilerplate, BuildExpectation};\n+use build_helper::{run, native_lib_boilerplate};\n \n fn main() {\n     let target = env::var(\"TARGET\").expect(\"TARGET was not set\");\n@@ -91,14 +91,11 @@ fn build_libbacktrace(host: &str, target: &str) -> Result<(), ()> {\n                 .arg(\"--disable-host-shared\")\n                 .arg(format!(\"--host={}\", build_helper::gnu_target(target)))\n                 .arg(format!(\"--build={}\", build_helper::gnu_target(host)))\n-                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden\"),\n-        BuildExpectation::None);\n+                .env(\"CFLAGS\", env::var(\"CFLAGS\").unwrap_or_default() + \" -fvisibility=hidden\"));\n \n     run(Command::new(build_helper::make(host))\n                 .current_dir(&native.out_dir)\n                 .arg(format!(\"INCDIR={}\", native.src_dir.display()))\n-                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")),\n-        BuildExpectation::None);\n-\n+                .arg(\"-j\").arg(env::var(\"NUM_JOBS\").expect(\"NUM_JOBS was not set\")));\n     Ok(())\n }"}, {"sha": "919604e1ead8294c8ca14f101be4380ea1ea370c", "filename": "src/tools/miri", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -1 +1 @@\n-Subproject commit 2671cf34a58b11f995add8402e75c1cd94ed051e\n+Subproject commit 919604e1ead8294c8ca14f101be4380ea1ea370c"}, {"sha": "b90947e5a434a3f03725779456dceb6aa0fe33b9", "filename": "src/tools/publish_toolstate.py", "status": "added", "additions": 105, "deletions": 0, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/503153e9506890c31749768474506e0b4e3eb4ef/src%2Ftools%2Fpublish_toolstate.py", "raw_url": "https://github.com/rust-lang/rust/raw/503153e9506890c31749768474506e0b4e3eb4ef/src%2Ftools%2Fpublish_toolstate.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fpublish_toolstate.py?ref=503153e9506890c31749768474506e0b4e3eb4ef", "patch": "@@ -0,0 +1,105 @@\n+#!/usr/bin/env python\n+# -*- coding: utf-8 -*-\n+\n+# Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+# file at the top-level directory of this distribution and at\n+# http://rust-lang.org/COPYRIGHT.\n+#\n+# Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+# http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+# <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+# option. This file may not be copied, modified, or distributed\n+# except according to those terms.\n+\n+import sys\n+import re\n+import json\n+import copy\n+import datetime\n+import collections\n+\n+# List of people to ping when the status of a tool changed.\n+MAINTAINERS = {\n+    'miri': '@oli-obk @RalfJung @eddyb',\n+    'clippy-driver': '@Manishearth @llogiq @mcarton @oli-obk',\n+    'rls': '@nrc',\n+    'rustfmt': '@nrc',\n+}\n+\n+\n+def read_current_status(current_commit, path):\n+    '''Reads build status of `current_commit` from content of `history/*.tsv`\n+    '''\n+    with open(path, 'rU') as f:\n+        for line in f:\n+            (commit, status) = line.split('\\t', 1)\n+            if commit == current_commit:\n+                return json.loads(status)\n+    return {}\n+\n+\n+def update_latest(current_commit, relevant_pr_number, current_datetime):\n+    '''Updates `_data/latest.json` to match build result of the given commit.\n+    '''\n+    with open('_data/latest.json', 'rb+') as f:\n+        latest = json.load(f, object_pairs_hook=collections.OrderedDict)\n+\n+        current_status = {\n+            os: read_current_status(current_commit, 'history/' + os + '.tsv')\n+            for os in ['windows', 'linux']\n+        }\n+\n+        slug = 'rust-lang/rust'\n+        message = '\ud83d\udce3 Toolstate changed by {}!\\n\\nTested on commit {}@{}.\\n\\n' \\\n+            .format(relevant_pr_number, slug, current_commit)\n+        anything_changed = False\n+        for status in latest:\n+            tool = status['tool']\n+            changed = False\n+\n+            for os, s in current_status.items():\n+                old = status[os]\n+                new = s.get(tool, old)\n+                status[os] = new\n+                if new > old:\n+                    changed = True\n+                    message += '\ud83c\udf89 {} on {}: {} \u2192 {}.\\n' \\\n+                        .format(tool, os, old, new)\n+                elif new < old:\n+                    changed = True\n+                    message += '\ud83d\udc94 {} on {}: {} \u2192 {} (cc {}).\\n' \\\n+                        .format(tool, os, old, new, MAINTAINERS[tool])\n+\n+            if changed:\n+                status['commit'] = current_commit\n+                status['datetime'] = current_datetime\n+                anything_changed = True\n+\n+        if not anything_changed:\n+            return ''\n+\n+        f.seek(0)\n+        f.truncate(0)\n+        json.dump(latest, f, indent=4, separators=(',', ': '))\n+        return message\n+\n+\n+if __name__ == '__main__':\n+    cur_commit = sys.argv[1]\n+    cur_datetime = datetime.datetime.utcnow().strftime('%Y-%m-%dT%H:%M:%SZ')\n+    cur_commit_msg = sys.argv[2]\n+    save_message_to_path = sys.argv[3]\n+\n+    relevant_pr_match = re.search('#[0-9]+', cur_commit_msg)\n+    if relevant_pr_match:\n+        relevant_pr_number = 'rust-lang/rust' + relevant_pr_match.group(0)\n+    else:\n+        relevant_pr_number = '<unknown PR>'\n+\n+    message = update_latest(cur_commit, relevant_pr_number, cur_datetime)\n+    if message:\n+        print(message)\n+        with open(save_message_to_path, 'w') as f:\n+            f.write(message)\n+    else:\n+        print('<Nothing changed>')"}, {"sha": "6901343e367a71ee984dd91c74f8848e3bcb94e0", "filename": "src/tools/toolstate.toml", "status": "removed", "additions": 0, "deletions": 36, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/269827ced91bb2b702d4cb62e3e164b225f73157/src%2Ftools%2Ftoolstate.toml", "raw_url": "https://github.com/rust-lang/rust/raw/269827ced91bb2b702d4cb62e3e164b225f73157/src%2Ftools%2Ftoolstate.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftoolstate.toml?ref=269827ced91bb2b702d4cb62e3e164b225f73157", "patch": "@@ -1,36 +0,0 @@\n-# This file reflects the current status of all tools which are allowed\n-# to fail without failing the build.\n-#\n-# There are three states a tool can be in:\n-# 1. Broken: The tool doesn't build\n-# 2. Compiling: The tool builds but its tests are failing\n-# 3. Testing: The tool builds and its tests are passing\n-#\n-# In the future there will be further states like \"Distributing\", which\n-# configures whether the tool is included in the Rust distribution.\n-#\n-# If a tool was working before your PR but is broken now, consider\n-# opening a PR against the tool so that it works with your changes.\n-# If the tool stops compiling, change its state to `Broken`. If it\n-# still builds, change it to `Compiling`.\n-# How to do that is described in\n-# \"CONTRIBUTING.md#External Dependencies\". If the effort required is not\n-# warranted (e.g. due to the tool abusing some API that you changed, and\n-# fixing the tool would mean a significant refactoring) remember to ping\n-# the tool authors, so they can fix it, instead of being surprised by the\n-# breakage.\n-#\n-# Each tool has a list of people to ping\n-\n-# ping @oli-obk @RalfJung @eddyb\n-miri = \"Broken\"\n-\n-# ping @Manishearth @llogiq @mcarton @oli-obk\n-clippy = \"Broken\"\n-\n-# ping @nrc\n-rls = \"Broken\"\n-\n-# ping @nrc\n-# when breaking rustfmt, always break rls as well\n-rustfmt = \"Broken\""}]}