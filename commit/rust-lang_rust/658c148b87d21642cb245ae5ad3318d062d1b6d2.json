{"sha": "658c148b87d21642cb245ae5ad3318d062d1b6d2", "node_id": "C_kwDOAAsO6NoAKDY1OGMxNDhiODdkMjE2NDJjYjI0NWFlNWFkMzMxOGQwNjJkMWI2ZDI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2021-11-24T21:56:35Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-24T21:56:35Z"}, "message": "Rollup merge of #89542 - jhpratt:stabilize-duration-const-fns, r=oli-obk\n\nPartially stabilize `duration_consts_2`\n\nMethods that were only blocked on `const_panic` have been stabilized.\nThe remaining methods of `duration_consts_2` are all related to floats,\nand as such have been placed behind the `duration_consts_float` feature\ngate.", "tree": {"sha": "e3f992f80d99892a94a41243464a5c65d6184687", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3f992f80d99892a94a41243464a5c65d6184687"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/658c148b87d21642cb245ae5ad3318d062d1b6d2", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnrUUCRBK7hj4Ov3rIwAAMrcIAAYSl507K5QcoYhcsRiG48aU\nnjTH0fABjs0PTOQGQvxnYjG6V+cF6M0lye2mHjknNbQ636gbHzoqG1tL2nE9Wpci\nMw2NPpkYRF/hxrSlktepm+SzOVYkWAc/514X7VSSk+lIoWCxXo7mQIkhEKslrVRH\nSs8yC2qFH+/R8sYaTunbhTfd7O+v1vQ0yWjEYpDlpBujuTes8gLwdg8aGi7LsJ1J\n59CXl0oxbyOIJIfgGKSys3QAl42XASlzOJmfsGGzy2wHWJhCu1Zt6xHow3x5+yS4\nufnqF3SETiBPohQSBDGksqC+pYudopOESWmomFyOoCre+TzbiRGtAlJ3udwo7to=\n=duDt\n-----END PGP SIGNATURE-----\n", "payload": "tree e3f992f80d99892a94a41243464a5c65d6184687\nparent 8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9\nparent 88b0d7cfc5df206d0c5525bf23eae4c9608914c5\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1637790995 +0100\ncommitter GitHub <noreply@github.com> 1637790995 +0100\n\nRollup merge of #89542 - jhpratt:stabilize-duration-const-fns, r=oli-obk\n\nPartially stabilize `duration_consts_2`\n\nMethods that were only blocked on `const_panic` have been stabilized.\nThe remaining methods of `duration_consts_2` are all related to floats,\nand as such have been placed behind the `duration_consts_float` feature\ngate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/658c148b87d21642cb245ae5ad3318d062d1b6d2", "html_url": "https://github.com/rust-lang/rust/commit/658c148b87d21642cb245ae5ad3318d062d1b6d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/658c148b87d21642cb245ae5ad3318d062d1b6d2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9", "html_url": "https://github.com/rust-lang/rust/commit/8a48b376d559f26a9b8fc1f1d597acb0bc0a51f9"}, {"sha": "88b0d7cfc5df206d0c5525bf23eae4c9608914c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/88b0d7cfc5df206d0c5525bf23eae4c9608914c5", "html_url": "https://github.com/rust-lang/rust/commit/88b0d7cfc5df206d0c5525bf23eae4c9608914c5"}], "stats": {"total": 45, "additions": 25, "deletions": 20}, "files": [{"sha": "ab3938fd9e2382ccd600711bee68e68183b2ea62", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=658c148b87d21642cb245ae5ad3318d062d1b6d2", "patch": "@@ -138,7 +138,7 @@\n #![feature(const_type_id)]\n #![feature(const_type_name)]\n #![feature(const_default_impls)]\n-#![feature(duration_consts_2)]\n+#![feature(duration_consts_float)]\n #![feature(ptr_metadata)]\n #![feature(slice_ptr_get)]\n #![feature(str_internals)]"}, {"sha": "5efa04f7e5c578d3874e32588706da60e3d102c8", "filename": "library/core/src/time.rs", "status": "modified", "additions": 23, "deletions": 18, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Fsrc%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Fsrc%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ftime.rs?ref=658c148b87d21642cb245ae5ad3318d062d1b6d2", "patch": "@@ -180,8 +180,9 @@ impl Duration {\n     /// ```\n     #[stable(feature = \"duration\", since = \"1.3.0\")]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n     #[must_use]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn new(secs: u64, nanos: u32) -> Duration {\n         let secs = match secs.checked_add((nanos / NANOS_PER_SEC) as u64) {\n             Some(secs) => secs,\n@@ -480,7 +481,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_add(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_add(rhs.secs) {\n             let mut nanos = self.nanos + rhs.nanos;\n@@ -515,7 +517,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_add(self, rhs: Duration) -> Duration {\n         match self.checked_add(rhs) {\n             Some(res) => res,\n@@ -540,7 +542,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_sub(self, rhs: Duration) -> Option<Duration> {\n         if let Some(mut secs) = self.secs.checked_sub(rhs.secs) {\n             let nanos = if self.nanos >= rhs.nanos {\n@@ -573,7 +576,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_sub(self, rhs: Duration) -> Duration {\n         match self.checked_sub(rhs) {\n             Some(res) => res,\n@@ -598,7 +601,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_mul(self, rhs: u32) -> Option<Duration> {\n         // Multiply nanoseconds as u64, because it cannot overflow that way.\n         let total_nanos = self.nanos as u64 * rhs as u64;\n@@ -629,7 +633,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n     pub const fn saturating_mul(self, rhs: u32) -> Duration {\n         match self.checked_mul(rhs) {\n             Some(res) => res,\n@@ -655,7 +659,8 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_stable(feature = \"duration_consts_2\", since = \"1.58.0\")]\n+    #[cfg_attr(bootstrap, rustc_allow_const_fn_unstable(const_panic))]\n     pub const fn checked_div(self, rhs: u32) -> Option<Duration> {\n         if rhs != 0 {\n             let secs = self.secs / (rhs as u64);\n@@ -683,7 +688,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn as_secs_f64(&self) -> f64 {\n         (self.secs as f64) + (self.nanos as f64) / (NANOS_PER_SEC as f64)\n     }\n@@ -702,7 +707,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn as_secs_f32(&self) -> f32 {\n         (self.secs as f32) + (self.nanos as f32) / (NANOS_PER_SEC as f32)\n     }\n@@ -723,7 +728,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn from_secs_f64(secs: f64) -> Duration {\n         match Duration::try_from_secs_f64(secs) {\n             Ok(v) => v,\n@@ -784,7 +789,7 @@ impl Duration {\n     #[stable(feature = \"duration_float\", since = \"1.38.0\")]\n     #[must_use]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn from_secs_f32(secs: f32) -> Duration {\n         match Duration::try_from_secs_f32(secs) {\n             Ok(v) => v,\n@@ -846,7 +851,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn mul_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(rhs * self.as_secs_f64())\n     }\n@@ -870,7 +875,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn mul_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(rhs * self.as_secs_f32())\n     }\n@@ -893,7 +898,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_f64(self, rhs: f64) -> Duration {\n         Duration::from_secs_f64(self.as_secs_f64() / rhs)\n     }\n@@ -918,7 +923,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_f32(self, rhs: f32) -> Duration {\n         Duration::from_secs_f32(self.as_secs_f32() / rhs)\n     }\n@@ -938,7 +943,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_duration_f64(self, rhs: Duration) -> f64 {\n         self.as_secs_f64() / rhs.as_secs_f64()\n     }\n@@ -958,7 +963,7 @@ impl Duration {\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]\n-    #[rustc_const_unstable(feature = \"duration_consts_2\", issue = \"72440\")]\n+    #[rustc_const_unstable(feature = \"duration_consts_float\", issue = \"72440\")]\n     pub const fn div_duration_f32(self, rhs: Duration) -> f32 {\n         self.as_secs_f32() / rhs.as_secs_f32()\n     }"}, {"sha": "4563c2085c1290a91ac2c54eac284ba291b64875", "filename": "library/core/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/658c148b87d21642cb245ae5ad3318d062d1b6d2/library%2Fcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Flib.rs?ref=658c148b87d21642cb245ae5ad3318d062d1b6d2", "patch": "@@ -21,7 +21,7 @@\n #![feature(core_private_diy_float)]\n #![feature(dec2flt)]\n #![feature(div_duration)]\n-#![feature(duration_consts_2)]\n+#![feature(duration_consts_float)]\n #![feature(duration_constants)]\n #![feature(exact_size_is_empty)]\n #![feature(extern_types)]"}]}