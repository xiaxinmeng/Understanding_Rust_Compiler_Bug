{"sha": "e11511dfa648186b809cf2cd458af2110f5a6809", "node_id": "C_kwDOAAsO6NoAKGUxMTUxMWRmYTY0ODE4NmI4MDljZjJjZDQ1OGFmMjExMGY1YTY4MDk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-10-21T11:59:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-10-21T11:59:58Z"}, "message": "Rollup merge of #103051 - davidtwco:translation-tidying-up, r=compiler-errors\n\ntranslation: doc comments with derives, subdiagnostic-less enum variants, more derive use\n\n- Adds support for `doc` attributes in the diagnostic derives so that documentation comments don't result in the derive failing.\n- Adds support for enum variants in the subdiagnostic derive to not actually correspond to an addition to a diagnostic.\n- Made use of the derive in more places in the `rustc_ast_lowering`, `rustc_ast_passes`, `rustc_lint`, `rustc_session`, `rustc_infer` - taking advantage of recent additions like eager subdiagnostics, multispan suggestions, etc.\n\ncc #100717", "tree": {"sha": "3f96ceec9b4134fc655f05bcfb6ec98d633f7546", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f96ceec9b4134fc655f05bcfb6ec98d633f7546"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e11511dfa648186b809cf2cd458af2110f5a6809", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjUom+CRBK7hj4Ov3rIwAAoaQIAI+0bRBfEQp30VNui2kcK6sC\nnThC0opJri9bHW5dPNLOUZQjBmItb+k3edboYmLL0VTAX1dRHGkoWpP1/+6w575u\n/eC2gIsr+qQxxI6D8WbKcdrNBRPhg3hfcgnIH47E5/o1vZUsKELzBjLxI/7hQb6G\nHoonRIhGBmXOyt567mRHiqGMwpGdLlqhKEZTcloZ5GfalEP7pSPedKmCU1pDL6dw\n2d+Uyhic2hXlqX8PxrjNsXp+ZDPwhavzaDG09AcqMYmFbA+Hcra8e4kOWOswJ2+s\nEhEpFI5cy5AIhHCT+lrj83soaz0g0yQQfvWyoXEDhhfMgcKP43Ci73g6DnfMDqA=\n=wIRn\n-----END PGP SIGNATURE-----\n", "payload": "tree 3f96ceec9b4134fc655f05bcfb6ec98d633f7546\nparent 0a0e9f73affa3daffbe76b1e8881ba71e1ab1eef\nparent 913f5974026334dbd2eeb4f39b0e4ea767e1b28d\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1666353598 +0530\ncommitter GitHub <noreply@github.com> 1666353598 +0530\n\nRollup merge of #103051 - davidtwco:translation-tidying-up, r=compiler-errors\n\ntranslation: doc comments with derives, subdiagnostic-less enum variants, more derive use\n\n- Adds support for `doc` attributes in the diagnostic derives so that documentation comments don't result in the derive failing.\n- Adds support for enum variants in the subdiagnostic derive to not actually correspond to an addition to a diagnostic.\n- Made use of the derive in more places in the `rustc_ast_lowering`, `rustc_ast_passes`, `rustc_lint`, `rustc_session`, `rustc_infer` - taking advantage of recent additions like eager subdiagnostics, multispan suggestions, etc.\n\ncc #100717\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e11511dfa648186b809cf2cd458af2110f5a6809", "html_url": "https://github.com/rust-lang/rust/commit/e11511dfa648186b809cf2cd458af2110f5a6809", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e11511dfa648186b809cf2cd458af2110f5a6809/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a0e9f73affa3daffbe76b1e8881ba71e1ab1eef", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a0e9f73affa3daffbe76b1e8881ba71e1ab1eef", "html_url": "https://github.com/rust-lang/rust/commit/0a0e9f73affa3daffbe76b1e8881ba71e1ab1eef"}, {"sha": "913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "url": "https://api.github.com/repos/rust-lang/rust/commits/913f5974026334dbd2eeb4f39b0e4ea767e1b28d", "html_url": "https://github.com/rust-lang/rust/commit/913f5974026334dbd2eeb4f39b0e4ea767e1b28d"}], "stats": {"total": 524, "additions": 286, "deletions": 238}, "files": [{"sha": "17ca1aa7fe1702dc108d993b873353f59fc23d5c", "filename": "compiler/rustc_ast_lowering/src/errors.rs", "status": "modified", "additions": 18, "deletions": 41, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Ferrors.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -1,7 +1,4 @@\n-use rustc_errors::{\n-    fluent, AddToDiagnostic, Applicability, Diagnostic, DiagnosticArgFromDisplay,\n-    SubdiagnosticMessage,\n-};\n+use rustc_errors::DiagnosticArgFromDisplay;\n use rustc_macros::{Diagnostic, Subdiagnostic};\n use rustc_span::{symbol::Ident, Span, Symbol};\n \n@@ -15,25 +12,15 @@ pub struct GenericTypeWithParentheses {\n     pub sub: Option<UseAngleBrackets>,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n+#[multipart_suggestion(ast_lowering::use_angle_brackets, applicability = \"maybe-incorrect\")]\n pub struct UseAngleBrackets {\n+    #[suggestion_part(code = \"<\")]\n     pub open_param: Span,\n+    #[suggestion_part(code = \">\")]\n     pub close_param: Span,\n }\n \n-impl AddToDiagnostic for UseAngleBrackets {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.multipart_suggestion(\n-            fluent::ast_lowering::use_angle_brackets,\n-            vec![(self.open_param, String::from(\"<\")), (self.close_param, String::from(\">\"))],\n-            Applicability::MaybeIncorrect,\n-        );\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_lowering::invalid_abi, code = \"E0703\")]\n #[note]\n@@ -68,30 +55,20 @@ pub struct AssocTyParentheses {\n     pub sub: AssocTyParenthesesSub,\n }\n \n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub enum AssocTyParenthesesSub {\n-    Empty { parentheses_span: Span },\n-    NotEmpty { open_param: Span, close_param: Span },\n-}\n-\n-impl AddToDiagnostic for AssocTyParenthesesSub {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::Empty { parentheses_span } => diag.multipart_suggestion(\n-                fluent::ast_lowering::remove_parentheses,\n-                vec![(parentheses_span, String::new())],\n-                Applicability::MaybeIncorrect,\n-            ),\n-            Self::NotEmpty { open_param, close_param } => diag.multipart_suggestion(\n-                fluent::ast_lowering::use_angle_brackets,\n-                vec![(open_param, String::from(\"<\")), (close_param, String::from(\">\"))],\n-                Applicability::MaybeIncorrect,\n-            ),\n-        };\n-    }\n+    #[multipart_suggestion(ast_lowering::remove_parentheses)]\n+    Empty {\n+        #[suggestion_part(code = \"\")]\n+        parentheses_span: Span,\n+    },\n+    #[multipart_suggestion(ast_lowering::use_angle_brackets)]\n+    NotEmpty {\n+        #[suggestion_part(code = \"<\")]\n+        open_param: Span,\n+        #[suggestion_part(code = \">\")]\n+        close_param: Span,\n+    },\n }\n \n #[derive(Diagnostic)]"}, {"sha": "7865c523f758c63cd2ec695b6ba5472d5e0c96a4", "filename": "compiler/rustc_ast_passes/src/ast_validation.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Fast_validation.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -14,6 +14,7 @@ use rustc_ast::*;\n use rustc_ast_pretty::pprust::{self, State};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{error_code, fluent, pluralize, struct_span_err, Applicability};\n+use rustc_macros::Subdiagnostic;\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::{\n     DEPRECATED_WHERE_CLAUSE_LOCATION, MISSING_ABI, PATTERNS_IN_FNS_WITHOUT_BODY,\n@@ -1805,15 +1806,17 @@ pub fn check_crate(session: &Session, krate: &Crate, lints: &mut LintBuffer) ->\n }\n \n /// Used to forbid `let` expressions in certain syntactic locations.\n-#[derive(Clone, Copy)]\n+#[derive(Clone, Copy, Subdiagnostic)]\n pub(crate) enum ForbiddenLetReason {\n     /// `let` is not valid and the source environment is not important\n     GenericForbidden,\n     /// A let chain with the `||` operator\n-    NotSupportedOr(Span),\n+    #[note(ast_passes::not_supported_or)]\n+    NotSupportedOr(#[primary_span] Span),\n     /// A let chain with invalid parentheses\n     ///\n     /// For example, `let 1 = 1 && (expr && expr)` is allowed\n     /// but `(let 1 = 1 && (let 1 = 1 && (let 1 = 1))) && let a = 1` is not\n-    NotSupportedParentheses(Span),\n+    #[note(ast_passes::not_supported_parentheses)]\n+    NotSupportedParentheses(#[primary_span] Span),\n }"}, {"sha": "8319352bd24bdd1491653a4e51d5dfa475ca412e", "filename": "compiler/rustc_ast_passes/src/errors.rs", "status": "modified", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ferrors.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -16,23 +16,6 @@ pub struct ForbiddenLet {\n     pub(crate) reason: ForbiddenLetReason,\n }\n \n-impl AddToDiagnostic for ForbiddenLetReason {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            Self::GenericForbidden => {}\n-            Self::NotSupportedOr(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_or);\n-            }\n-            Self::NotSupportedParentheses(span) => {\n-                diag.span_note(span, fluent::ast_passes::not_supported_parentheses);\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(ast_passes::forbidden_let_stable)]\n #[note]"}, {"sha": "18b3408b06ab435a75ccead96437e58f08c62378", "filename": "compiler/rustc_error_messages/locales/en-US/infer.ftl", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Finfer.ftl?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -164,7 +164,9 @@ infer_region_explanation = {$pref_kind ->\n }\n \n infer_mismatched_static_lifetime = incompatible lifetime on type\n-infer_msl_impl_note = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_does_not_outlive_static_from_impl = ...does not necessarily outlive the static lifetime introduced by the compatible `impl`\n+infer_implicit_static_lifetime_note = this has an implicit `'static` lifetime requirement\n+infer_implicit_static_lifetime_suggestion = consider relaxing the implicit `'static` requirement\n infer_msl_introduces_static = introduces a `'static` lifetime requirement\n infer_msl_unmet_req = because this has an unmet lifetime requirement\n infer_msl_trait_note = this has an implicit `'static` lifetime requirement"}, {"sha": "e2277923072f9b3eca8c5e1dc6c0a94a0fb5ac23", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -54,3 +54,7 @@ session_crate_name_empty = crate name must not be empty\n session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`\n \n session_expr_parentheses_needed = parentheses are required to parse this as an expression\n+\n+session_skipping_const_checks = skipping const checks\n+session_unleashed_feature_help_named = skipping check for `{$gate}` feature\n+session_unleashed_feature_help_unnamed = skipping check that does not even have a feature gate"}, {"sha": "571b7dbfd1b04632b0a07cd75dbdb70f2828620e", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 18, "deletions": 3, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -1,14 +1,14 @@\n use crate::{\n     fluent, DiagnosticArgValue, DiagnosticBuilder, Handler, IntoDiagnostic, IntoDiagnosticArg,\n };\n-use rustc_target::abi::TargetDataLayoutErrors;\n-use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n-\n use rustc_ast as ast;\n use rustc_ast_pretty::pprust;\n use rustc_hir as hir;\n+use rustc_lint_defs::Level;\n use rustc_span::edition::Edition;\n use rustc_span::symbol::{Ident, MacroRulesNormalizedIdent, Symbol};\n+use rustc_target::abi::TargetDataLayoutErrors;\n+use rustc_target::spec::{PanicStrategy, SplitDebuginfo, StackProtector, TargetTriple};\n use std::borrow::Cow;\n use std::fmt;\n use std::num::ParseIntError;\n@@ -155,6 +155,21 @@ impl IntoDiagnosticArg for ast::token::TokenKind {\n     }\n }\n \n+impl IntoDiagnosticArg for Level {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Borrowed(match self {\n+            Level::Allow => \"-A\",\n+            Level::Warn => \"-W\",\n+            Level::ForceWarn(_) => \"--force-warn\",\n+            Level::Deny => \"-D\",\n+            Level::Forbid => \"-F\",\n+            Level::Expect(_) => {\n+                unreachable!(\"lints with the level of `expect` should not run this code\");\n+            }\n+        }))\n+    }\n+}\n+\n impl IntoDiagnostic<'_, !> for TargetDataLayoutErrors<'_> {\n     fn into_diagnostic(self, handler: &Handler) -> DiagnosticBuilder<'_, !> {\n         let mut diag;"}, {"sha": "25e8630bf6bd7f3562691915a327e8384e813c45", "filename": "compiler/rustc_infer/src/errors/mod.rs", "status": "modified", "additions": 29, "deletions": 42, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ferrors%2Fmod.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -459,47 +459,34 @@ impl AddToDiagnostic for IntroducesStaticBecauseUnmetLifetimeReq {\n     }\n }\n \n-pub struct ImplNote {\n-    pub impl_span: Option<Span>,\n-}\n-\n-impl AddToDiagnostic for ImplNote {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self.impl_span {\n-            Some(span) => diag.span_note(span, fluent::infer::msl_impl_note),\n-            None => diag.note(fluent::infer::msl_impl_note),\n-        };\n-    }\n-}\n-\n-pub enum TraitSubdiag {\n-    Note { span: Span },\n-    Sugg { span: Span },\n+// FIXME(#100717): replace with a `Option<Span>` when subdiagnostic supports that\n+#[derive(Subdiagnostic)]\n+pub enum DoesNotOutliveStaticFromImpl {\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Spanned {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[note(infer::does_not_outlive_static_from_impl)]\n+    Unspanned,\n }\n \n-// FIXME(#100717) used in `Vec<TraitSubdiag>` so requires eager translation/list support\n-impl AddToDiagnostic for TraitSubdiag {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        match self {\n-            TraitSubdiag::Note { span } => {\n-                diag.span_note(span, \"this has an implicit `'static` lifetime requirement\");\n-            }\n-            TraitSubdiag::Sugg { span } => {\n-                diag.span_suggestion_verbose(\n-                    span,\n-                    \"consider relaxing the implicit `'static` requirement\",\n-                    \" + '_\".to_owned(),\n-                    rustc_errors::Applicability::MaybeIncorrect,\n-                );\n-            }\n-        }\n-    }\n+#[derive(Subdiagnostic)]\n+pub enum ImplicitStaticLifetimeSubdiag {\n+    #[note(infer::implicit_static_lifetime_note)]\n+    Note {\n+        #[primary_span]\n+        span: Span,\n+    },\n+    #[suggestion_verbose(\n+        infer::implicit_static_lifetime_suggestion,\n+        code = \" + '_\",\n+        applicability = \"maybe-incorrect\"\n+    )]\n+    Sugg {\n+        #[primary_span]\n+        span: Span,\n+    },\n }\n \n #[derive(Diagnostic)]\n@@ -512,7 +499,7 @@ pub struct MismatchedStaticLifetime<'a> {\n     #[subdiagnostic]\n     pub expl: Option<note_and_explain::RegionExplanation<'a>>,\n     #[subdiagnostic]\n-    pub impl_note: ImplNote,\n-    #[subdiagnostic]\n-    pub trait_subdiags: Vec<TraitSubdiag>,\n+    pub does_not_outlive_static_from_impl: DoesNotOutliveStaticFromImpl,\n+    #[subdiagnostic(eager)]\n+    pub implicit_static_lifetimes: Vec<ImplicitStaticLifetimeSubdiag>,\n }"}, {"sha": "c5f2a1a3f7dce687ef0f44c2bb334393edef90b9", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/mismatched_static_lifetime.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fmismatched_static_lifetime.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -2,7 +2,9 @@\n //! to hold.\n \n use crate::errors::{note_and_explain, IntroducesStaticBecauseUnmetLifetimeReq};\n-use crate::errors::{ImplNote, MismatchedStaticLifetime, TraitSubdiag};\n+use crate::errors::{\n+    DoesNotOutliveStaticFromImpl, ImplicitStaticLifetimeSubdiag, MismatchedStaticLifetime,\n+};\n use crate::infer::error_reporting::nice_region_error::NiceRegionError;\n use crate::infer::lexical_region_resolve::RegionResolutionError;\n use crate::infer::{SubregionOrigin, TypeTrace};\n@@ -56,7 +58,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             note_and_explain::SuffixKind::Continues,\n         );\n         let mut impl_span = None;\n-        let mut trait_subdiags = Vec::new();\n+        let mut implicit_static_lifetimes = Vec::new();\n         if let Some(impl_node) = self.tcx().hir().get_if_local(*impl_def_id) {\n             // If an impl is local, then maybe this isn't what they want. Try to\n             // be as helpful as possible with implicit lifetimes.\n@@ -90,10 +92,12 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 // Otherwise, point at all implicit static lifetimes\n \n                 for span in &traits {\n-                    trait_subdiags.push(TraitSubdiag::Note { span: *span });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Note { span: *span });\n                     // It would be nice to put this immediately under the above note, but they get\n                     // pushed to the end.\n-                    trait_subdiags.push(TraitSubdiag::Sugg { span: span.shrink_to_hi() });\n+                    implicit_static_lifetimes\n+                        .push(ImplicitStaticLifetimeSubdiag::Sugg { span: span.shrink_to_hi() });\n                 }\n             }\n         } else {\n@@ -105,8 +109,10 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             cause_span: cause.span,\n             unmet_lifetime_reqs: multispan_subdiag,\n             expl,\n-            impl_note: ImplNote { impl_span },\n-            trait_subdiags,\n+            does_not_outlive_static_from_impl: impl_span\n+                .map(|span| DoesNotOutliveStaticFromImpl::Spanned { span })\n+                .unwrap_or(DoesNotOutliveStaticFromImpl::Unspanned),\n+            implicit_static_lifetimes,\n         };\n         let reported = self.tcx().sess.emit_err(err);\n         Some(reported)"}, {"sha": "34b70030a58286a6d27f54844831dceac5b32696", "filename": "compiler/rustc_lint/src/errors.rs", "status": "modified", "additions": 2, "deletions": 23, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Ferrors.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -88,34 +88,13 @@ pub struct BuiltinEllpisisInclusiveRangePatterns {\n     pub replace: String,\n }\n \n+#[derive(Subdiagnostic)]\n+#[note(lint::requested_level)]\n pub struct RequestedLevel {\n     pub level: Level,\n     pub lint_name: String,\n }\n \n-impl AddToDiagnostic for RequestedLevel {\n-    fn add_to_diagnostic_with<F>(self, diag: &mut Diagnostic, _: F)\n-    where\n-        F: Fn(&mut Diagnostic, SubdiagnosticMessage) -> SubdiagnosticMessage,\n-    {\n-        diag.note(fluent::lint::requested_level);\n-        diag.set_arg(\n-            \"level\",\n-            match self.level {\n-                Level::Allow => \"-A\",\n-                Level::Warn => \"-W\",\n-                Level::ForceWarn(_) => \"--force-warn\",\n-                Level::Deny => \"-D\",\n-                Level::Forbid => \"-F\",\n-                Level::Expect(_) => {\n-                    unreachable!(\"lints with the level of `expect` should not run this code\");\n-                }\n-            },\n-        );\n-        diag.set_arg(\"lint_name\", self.lint_name);\n-    }\n-}\n-\n #[derive(Diagnostic)]\n #[diag(lint::unsupported_group, code = \"E0602\")]\n pub struct UnsupportedGroup {"}, {"sha": "9f7d2661a3e8b425a0ca0057f828961ab7b71ccd", "filename": "compiler/rustc_macros/src/diagnostics/diagnostic_builder.rs", "status": "modified", "additions": 28, "deletions": 7, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fdiagnostic_builder.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -5,7 +5,7 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, report_error_if_not_applied_to_span, report_type_error,\n+    build_field_mapping, is_doc_comment, report_error_if_not_applied_to_span, report_type_error,\n     should_generate_set_arg, type_is_unit, type_matches_path, FieldInfo, FieldInnerTy, FieldMap,\n     HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n@@ -152,8 +152,12 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     fn parse_subdiag_attribute(\n         &self,\n         attr: &Attribute,\n-    ) -> Result<(SubdiagnosticKind, Path), DiagnosticDeriveError> {\n-        let (subdiag, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+    ) -> Result<Option<(SubdiagnosticKind, Path)>, DiagnosticDeriveError> {\n+        let Some((subdiag, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(None);\n+        };\n \n         if let SubdiagnosticKind::MultipartSuggestion { .. } = subdiag {\n             let meta = attr.parse_meta()?;\n@@ -170,7 +174,7 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             SubdiagnosticKind::MultipartSuggestion { .. } => unreachable!(),\n         });\n \n-        Ok((subdiag, slug))\n+        Ok(Some((subdiag, slug)))\n     }\n \n     /// Establishes state in the `DiagnosticDeriveBuilder` resulting from the struct\n@@ -182,6 +186,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n     ) -> Result<TokenStream, DiagnosticDeriveError> {\n         let diag = &self.parent.diag;\n \n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(quote! {});\n+        }\n+\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n         let meta = attr.parse_meta()?;\n@@ -250,7 +259,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             return Ok(tokens);\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Note | SubdiagnosticKind::Help | SubdiagnosticKind::Warn => {\n@@ -291,6 +304,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             .attrs\n             .iter()\n             .map(move |attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n                 let needs_clone =\n                     name == \"primary_span\" && matches!(inner_ty, FieldInnerTy::Vec(_));\n@@ -397,8 +415,11 @@ impl<'a> DiagnosticDeriveVariantBuilder<'a> {\n             _ => (),\n         }\n \n-        let (subdiag, slug) = self.parse_subdiag_attribute(attr)?;\n-\n+        let Some((subdiag, slug)) = self.parse_subdiag_attribute(attr)? else {\n+            // Some attributes aren't errors - like documentation comments - but also aren't\n+            // subdiagnostics.\n+            return Ok(quote! {});\n+        };\n         let fn_ident = format_ident!(\"{}\", subdiag);\n         match subdiag {\n             SubdiagnosticKind::Label => {"}, {"sha": "d1acb71384220abd1c90a7cdb1885d9db5af3b62", "filename": "compiler/rustc_macros/src/diagnostics/subdiagnostic.rs", "status": "modified", "additions": 37, "deletions": 10, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Fsubdiagnostic.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -5,9 +5,9 @@ use crate::diagnostics::error::{\n     DiagnosticDeriveError,\n };\n use crate::diagnostics::utils::{\n-    build_field_mapping, new_code_ident, report_error_if_not_applied_to_applicability,\n-    report_error_if_not_applied_to_span, FieldInfo, FieldInnerTy, FieldMap, HasFieldMap, SetOnce,\n-    SpannedOption, SubdiagnosticKind,\n+    build_field_mapping, is_doc_comment, new_code_ident,\n+    report_error_if_not_applied_to_applicability, report_error_if_not_applied_to_span, FieldInfo,\n+    FieldInnerTy, FieldMap, HasFieldMap, SetOnce, SpannedOption, SubdiagnosticKind,\n };\n use proc_macro2::TokenStream;\n use quote::{format_ident, quote};\n@@ -41,8 +41,14 @@ impl SubdiagnosticDeriveBuilder {\n                 }\n             }\n \n-            if matches!(ast.data, syn::Data::Enum(..)) {\n+            let is_enum = matches!(ast.data, syn::Data::Enum(..));\n+            if is_enum {\n                 for attr in &ast.attrs {\n+                    // Always allow documentation comments.\n+                    if is_doc_comment(attr) {\n+                        continue;\n+                    }\n+\n                     span_err(\n                         attr.span().unwrap(),\n                         \"unsupported type attribute for subdiagnostic enum\",\n@@ -62,6 +68,7 @@ impl SubdiagnosticDeriveBuilder {\n                     span_field: None,\n                     applicability: None,\n                     has_suggestion_parts: false,\n+                    is_enum,\n                 };\n                 builder.into_tokens().unwrap_or_else(|v| v.to_compile_error())\n             });\n@@ -79,7 +86,7 @@ impl SubdiagnosticDeriveBuilder {\n             gen impl rustc_errors::AddToDiagnostic for @Self {\n                 fn add_to_diagnostic_with<__F>(self, #diag: &mut rustc_errors::Diagnostic, #f: __F)\n                 where\n-                    __F: Fn(\n+                    __F: core::ops::Fn(\n                         &mut rustc_errors::Diagnostic,\n                         rustc_errors::SubdiagnosticMessage\n                     ) -> rustc_errors::SubdiagnosticMessage,\n@@ -122,6 +129,9 @@ struct SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     /// Set to true when a `#[suggestion_part]` field is encountered, used to generate an error\n     /// during finalization if still `false`.\n     has_suggestion_parts: bool,\n+\n+    /// Set to true when this variant is an enum variant rather than just the body of a struct.\n+    is_enum: bool,\n }\n \n impl<'parent, 'a> HasFieldMap for SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n@@ -173,7 +183,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         let mut kind_slugs = vec![];\n \n         for attr in self.variant.ast().attrs {\n-            let (kind, slug) = SubdiagnosticKind::from_attr(attr, self)?;\n+            let Some((kind, slug)) = SubdiagnosticKind::from_attr(attr, self)? else {\n+                // Some attributes aren't errors - like documentation comments - but also aren't\n+                // subdiagnostics.\n+                continue;\n+            };\n \n             let Some(slug) = slug else {\n                 let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -227,6 +241,11 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n         ast.attrs\n             .iter()\n             .map(|attr| {\n+                // Always allow documentation comments.\n+                if is_doc_comment(attr) {\n+                    return quote! {};\n+                }\n+\n                 let info = FieldInfo {\n                     binding,\n                     ty: inner_ty.inner_type().unwrap_or(&ast.ty),\n@@ -290,6 +309,8 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n                     report_error_if_not_applied_to_span(attr, &info)?;\n \n                     let binding = info.binding.binding.clone();\n+                    // FIXME(#100717): support `Option<Span>` on `primary_span` like in the\n+                    // diagnostic derive\n                     self.span_field.set_once(binding, span);\n                 }\n \n@@ -443,10 +464,16 @@ impl<'parent, 'a> SubdiagnosticDeriveVariantBuilder<'parent, 'a> {\n     pub fn into_tokens(&mut self) -> Result<TokenStream, DiagnosticDeriveError> {\n         let kind_slugs = self.identify_kind()?;\n         if kind_slugs.is_empty() {\n-            throw_span_err!(\n-                self.variant.ast().ident.span().unwrap(),\n-                \"subdiagnostic kind not specified\"\n-            );\n+            if self.is_enum {\n+                // It's okay for a variant to not be a subdiagnostic at all..\n+                return Ok(quote! {});\n+            } else {\n+                // ..but structs should always be _something_.\n+                throw_span_err!(\n+                    self.variant.ast().ident.span().unwrap(),\n+                    \"subdiagnostic kind not specified\"\n+                );\n+            }\n         };\n \n         let kind_stats: KindsStatistics = kind_slugs.iter().map(|(kind, _slug)| kind).collect();"}, {"sha": "61d5007fc30f0a135c7176a56bb355f111c2ce0e", "filename": "compiler/rustc_macros/src/diagnostics/utils.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fdiagnostics%2Futils.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -477,7 +477,12 @@ impl SubdiagnosticKind {\n     pub(super) fn from_attr(\n         attr: &Attribute,\n         fields: &impl HasFieldMap,\n-    ) -> Result<(SubdiagnosticKind, Option<Path>), DiagnosticDeriveError> {\n+    ) -> Result<Option<(SubdiagnosticKind, Option<Path>)>, DiagnosticDeriveError> {\n+        // Always allow documentation comments.\n+        if is_doc_comment(attr) {\n+            return Ok(None);\n+        }\n+\n         let span = attr.span().unwrap();\n \n         let name = attr.path.segments.last().unwrap().ident.to_string();\n@@ -526,7 +531,9 @@ impl SubdiagnosticKind {\n                     | SubdiagnosticKind::Note\n                     | SubdiagnosticKind::Help\n                     | SubdiagnosticKind::Warn\n-                    | SubdiagnosticKind::MultipartSuggestion { .. } => return Ok((kind, None)),\n+                    | SubdiagnosticKind::MultipartSuggestion { .. } => {\n+                        return Ok(Some((kind, None)));\n+                    }\n                     SubdiagnosticKind::Suggestion { .. } => {\n                         throw_span_err!(span, \"suggestion without `code = \\\"...\\\"`\")\n                     }\n@@ -626,7 +633,7 @@ impl SubdiagnosticKind {\n             | SubdiagnosticKind::MultipartSuggestion { .. } => {}\n         }\n \n-        Ok((kind, slug))\n+        Ok(Some((kind, slug)))\n     }\n }\n \n@@ -654,3 +661,7 @@ impl quote::IdentFragment for SubdiagnosticKind {\n pub(super) fn should_generate_set_arg(field: &Field) -> bool {\n     field.attrs.is_empty()\n }\n+\n+pub(super) fn is_doc_comment(attr: &Attribute) -> bool {\n+    attr.path.segments.last().unwrap().ident.to_string() == \"doc\"\n+}"}, {"sha": "500ab4a584cab4de9cc247e3a9a849916b68feff", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -1,9 +1,7 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use rustc_errors::{\n-    fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, MultiSpan,\n-};\n+use rustc_errors::MultiSpan;\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n@@ -148,24 +146,15 @@ pub struct CrateNameEmpty {\n     pub span: Option<Span>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(session::invalid_character_in_create_name)]\n pub struct InvalidCharacterInCrateName<'a> {\n+    #[primary_span]\n     pub span: Option<Span>,\n     pub character: char,\n     pub crate_name: &'a str,\n }\n \n-impl IntoDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n-    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n-        if let Some(sp) = self.span {\n-            diag.set_span(sp);\n-        }\n-        diag.set_arg(\"character\", self.character);\n-        diag.set_arg(\"crate_name\", self.crate_name);\n-        diag\n-    }\n-}\n-\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(session::expr_parentheses_needed, applicability = \"machine-applicable\")]\n pub struct ExprParenthesesNeeded {\n@@ -180,3 +169,25 @@ impl ExprParenthesesNeeded {\n         ExprParenthesesNeeded { left: s.shrink_to_lo(), right: s.shrink_to_hi() }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session::skipping_const_checks)]\n+pub struct SkippingConstChecks {\n+    #[subdiagnostic(eager)]\n+    pub unleashed_features: Vec<UnleashedFeatureHelp>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnleashedFeatureHelp {\n+    #[help(session::unleashed_feature_help_named)]\n+    Named {\n+        #[primary_span]\n+        span: Span,\n+        gate: Symbol,\n+    },\n+    #[help(session::unleashed_feature_help_unnamed)]\n+    Unnamed {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}, {"sha": "100c66f63641c6cda1174344062cb72b6d557f2a", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -5,9 +5,10 @@ use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, S\n use crate::errors::{\n     CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers, LinkerPluginToWindowsNotSupported,\n     NotCircumventFeature, ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist,\n-    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported,\n+    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported, SkippingConstChecks,\n     SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n-    TargetRequiresUnwindTables, UnstableVirtualFunctionElimination, UnsupportedDwarfVersion,\n+    TargetRequiresUnwindTables, UnleashedFeatureHelp, UnstableVirtualFunctionElimination,\n+    UnsupportedDwarfVersion,\n };\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n@@ -232,21 +233,19 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n-            // FIXME(#100717): needs eager translation/lists\n-            #[allow(rustc::untranslatable_diagnostic)]\n-            #[allow(rustc::diagnostic_outside_of_impl)]\n-            let mut diag = self.struct_warn(\"skipping const checks\");\n-            for &(span, feature_gate) in unleashed_features.iter() {\n-                // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n-                if let Some(gate) = feature_gate {\n-                    diag.span_help(span, &format!(\"skipping check for `{gate}` feature\"));\n-                    // The unleash flag must *not* be used to just \"hack around\" feature gates.\n-                    must_err = true;\n-                } else {\n-                    diag.span_help(span, \"skipping check that does not even have a feature gate\");\n-                }\n-            }\n-            diag.emit();\n+            self.emit_warning(SkippingConstChecks {\n+                unleashed_features: unleashed_features\n+                    .iter()\n+                    .map(|(span, gate)| {\n+                        gate.map(|gate| {\n+                            must_err = true;\n+                            UnleashedFeatureHelp::Named { span: *span, gate }\n+                        })\n+                        .unwrap_or(UnleashedFeatureHelp::Unnamed { span: *span })\n+                    })\n+                    .collect(),\n+            });\n+\n             // If we should err, make sure we did.\n             if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject."}, {"sha": "b8deb48d49adde4fc41529dc64a2dabdc965e8fd", "filename": "src/test/ui-fulldeps/session-diagnostic/diagnostic-derive.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fdiagnostic-derive.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -749,3 +749,12 @@ struct SubdiagnosticEagerSuggestion {\n     #[subdiagnostic(eager)]\n     sub: SubdiagnosticWithSuggestion,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Diagnostic)]\n+#[diag(compiletest::example, code = \"E0123\")]\n+struct WithDocComment {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}"}, {"sha": "2fe93d46d0ac073357b34016c84827de76385d49", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.rs", "status": "modified", "additions": 21, "deletions": 1, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.rs?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -237,7 +237,6 @@ enum V {\n         var: String,\n     },\n     B {\n-    //~^ ERROR subdiagnostic kind not specified\n         #[primary_span]\n         span: Span,\n         var: String,\n@@ -641,3 +640,24 @@ struct BJ {\n     span: Span,\n     r#type: String,\n }\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+#[label(parser::add_paren)]\n+struct BK {\n+    /// ..and the field\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+/// with a doc comment on the type..\n+#[derive(Subdiagnostic)]\n+enum BL {\n+    /// ..and the variant..\n+    #[label(parser::add_paren)]\n+    Foo {\n+        /// ..and the field\n+        #[primary_span]\n+        span: Span,\n+    }\n+}"}, {"sha": "1173d24248bc4480f8436d3ebd8e6395051fc7d4", "filename": "src/test/ui-fulldeps/session-diagnostic/subdiagnostic-derive.stderr", "status": "modified", "additions": 43, "deletions": 49, "changes": 92, "blob_url": "https://github.com/rust-lang/rust/blob/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e11511dfa648186b809cf2cd458af2110f5a6809/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-diagnostic%2Fsubdiagnostic-derive.stderr?ref=e11511dfa648186b809cf2cd458af2110f5a6809", "patch": "@@ -134,20 +134,14 @@ error: diagnostic slug must be first argument of a `#[label(...)]` attribute\n LL |     #[label(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n \n-error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:239:5\n-   |\n-LL |     B {\n-   |     ^\n-\n error: the `#[primary_span]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:251:5\n+  --> $DIR/subdiagnostic-derive.rs:250:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: label without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:248:1\n+  --> $DIR/subdiagnostic-derive.rs:247:1\n    |\n LL | / #[label(parser::add_paren)]\n LL | |\n@@ -159,35 +153,35 @@ LL | | }\n    | |_^\n \n error: `#[applicability]` is only valid on suggestions\n-  --> $DIR/subdiagnostic-derive.rs:261:5\n+  --> $DIR/subdiagnostic-derive.rs:260:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: `#[bar]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:271:5\n+  --> $DIR/subdiagnostic-derive.rs:270:5\n    |\n LL |     #[bar]\n    |     ^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: `#[bar = ...]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:282:5\n+  --> $DIR/subdiagnostic-derive.rs:281:5\n    |\n LL |     #[bar = \"...\"]\n    |     ^^^^^^^^^^^^^^\n \n error: `#[bar(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:293:5\n+  --> $DIR/subdiagnostic-derive.rs:292:5\n    |\n LL |     #[bar(\"...\")]\n    |     ^^^^^^^^^^^^^\n    |\n    = help: only `primary_span`, `applicability` and `skip_arg` are valid field attributes\n \n error: unexpected unsupported untagged union\n-  --> $DIR/subdiagnostic-derive.rs:309:1\n+  --> $DIR/subdiagnostic-derive.rs:308:1\n    |\n LL | / union AC {\n LL | |\n@@ -197,75 +191,75 @@ LL | | }\n    | |_^\n \n error: `#[label(parser::add_paren)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:324:28\n+  --> $DIR/subdiagnostic-derive.rs:323:28\n    |\n LL | #[label(parser::add_paren, parser::add_paren)]\n    |                            ^^^^^^^^^^^^^^^^^\n    |\n    = help: a diagnostic slug must be the first argument to the attribute\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:337:5\n+  --> $DIR/subdiagnostic-derive.rs:336:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:334:5\n+  --> $DIR/subdiagnostic-derive.rs:333:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n \n error: subdiagnostic kind not specified\n-  --> $DIR/subdiagnostic-derive.rs:343:8\n+  --> $DIR/subdiagnostic-derive.rs:342:8\n    |\n LL | struct AG {\n    |        ^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:380:47\n+  --> $DIR/subdiagnostic-derive.rs:379:47\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                               ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:380:33\n+  --> $DIR/subdiagnostic-derive.rs:379:33\n    |\n LL | #[suggestion(parser::add_paren, code = \"...\", code = \"...\")]\n    |                                 ^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:398:5\n+  --> $DIR/subdiagnostic-derive.rs:397:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:395:5\n+  --> $DIR/subdiagnostic-derive.rs:394:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: the `#[applicability]` attribute can only be applied to fields of type `Applicability`\n-  --> $DIR/subdiagnostic-derive.rs:408:5\n+  --> $DIR/subdiagnostic-derive.rs:407:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n \n error: suggestion without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:421:1\n+  --> $DIR/subdiagnostic-derive.rs:420:1\n    |\n LL | #[suggestion(parser::add_paren)]\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: invalid applicability\n-  --> $DIR/subdiagnostic-derive.rs:431:46\n+  --> $DIR/subdiagnostic-derive.rs:430:46\n    |\n LL | #[suggestion(parser::add_paren, code =\"...\", applicability = \"foo\")]\n    |                                              ^^^^^^^^^^^^^^^^^^^^^\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:449:1\n+  --> $DIR/subdiagnostic-derive.rs:448:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -275,41 +269,41 @@ LL | | }\n    | |_^\n \n error: unsupported type attribute for subdiagnostic enum\n-  --> $DIR/subdiagnostic-derive.rs:463:1\n+  --> $DIR/subdiagnostic-derive.rs:462:1\n    |\n LL | #[label]\n    | ^^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:483:39\n+  --> $DIR/subdiagnostic-derive.rs:482:39\n    |\n LL | #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                       ^^^^^^^\n \n error: `var` doesn't refer to a field on this type\n-  --> $DIR/subdiagnostic-derive.rs:502:43\n+  --> $DIR/subdiagnostic-derive.rs:501:43\n    |\n LL |     #[suggestion(parser::add_paren, code =\"{var}\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^\n \n error: `#[suggestion_part]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:525:5\n+  --> $DIR/subdiagnostic-derive.rs:524:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions, use `#[primary_span]` instead\n \n error: `#[suggestion_part(...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:528:5\n+  --> $DIR/subdiagnostic-derive.rs:527:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: `#[suggestion_part(...)]` is only valid in multipart suggestions\n \n error: suggestion without `#[primary_span]` field\n-  --> $DIR/subdiagnostic-derive.rs:522:1\n+  --> $DIR/subdiagnostic-derive.rs:521:1\n    |\n LL | / #[suggestion(parser::add_paren, code = \"...\")]\n LL | |\n@@ -321,15 +315,15 @@ LL | | }\n    | |_^\n \n error: `#[multipart_suggestion(code = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:537:43\n+  --> $DIR/subdiagnostic-derive.rs:536:43\n    |\n LL | #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n    |                                           ^^^^^^^^^^^^\n    |\n    = help: only `applicability` is a valid nested attributes\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:537:1\n+  --> $DIR/subdiagnostic-derive.rs:536:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren, code = \"...\", applicability = \"machine-applicable\")]\n LL | |\n@@ -340,27 +334,27 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:547:5\n+  --> $DIR/subdiagnostic-derive.rs:546:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:555:5\n+  --> $DIR/subdiagnostic-derive.rs:554:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[primary_span]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:564:5\n+  --> $DIR/subdiagnostic-derive.rs:563:5\n    |\n LL |     #[primary_span]\n    |     ^^^^^^^^^^^^^^^\n    |\n    = help: multipart suggestions use one or more `#[suggestion_part]`s rather than one `#[primary_span]`\n \n error: multipart suggestion without any `#[suggestion_part(...)]` fields\n-  --> $DIR/subdiagnostic-derive.rs:561:1\n+  --> $DIR/subdiagnostic-derive.rs:560:1\n    |\n LL | / #[multipart_suggestion(parser::add_paren)]\n LL | |\n@@ -372,51 +366,51 @@ LL | | }\n    | |_^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:572:5\n+  --> $DIR/subdiagnostic-derive.rs:571:5\n    |\n LL |     #[suggestion_part]\n    |     ^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(...)]` attribute without `code = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:575:5\n+  --> $DIR/subdiagnostic-derive.rs:574:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: `#[suggestion_part(foo = ...)]` is not a valid attribute\n-  --> $DIR/subdiagnostic-derive.rs:578:23\n+  --> $DIR/subdiagnostic-derive.rs:577:23\n    |\n LL |     #[suggestion_part(foo = \"bar\")]\n    |                       ^^^^^^^^^^^\n    |\n    = help: `code` is the only valid nested attribute\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:581:5\n+  --> $DIR/subdiagnostic-derive.rs:580:5\n    |\n LL |     #[suggestion_part(code = \"...\")]\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: the `#[suggestion_part(...)]` attribute can only be applied to fields of type `Span` or `MultiSpan`\n-  --> $DIR/subdiagnostic-derive.rs:584:5\n+  --> $DIR/subdiagnostic-derive.rs:583:5\n    |\n LL |     #[suggestion_part()]\n    |     ^^^^^^^^^^^^^^^^^^^^\n \n error: specified multiple times\n-  --> $DIR/subdiagnostic-derive.rs:592:37\n+  --> $DIR/subdiagnostic-derive.rs:591:37\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                                     ^^^^^^^^^^^^\n    |\n note: previously specified here\n-  --> $DIR/subdiagnostic-derive.rs:592:23\n+  --> $DIR/subdiagnostic-derive.rs:591:23\n    |\n LL |     #[suggestion_part(code = \"...\", code = \",,,\")]\n    |                       ^^^^^^^^^^^^\n \n error: `#[applicability]` has no effect if all `#[suggestion]`/`#[multipart_suggestion]` attributes have a static `applicability = \"...\"`\n-  --> $DIR/subdiagnostic-derive.rs:621:5\n+  --> $DIR/subdiagnostic-derive.rs:620:5\n    |\n LL |     #[applicability]\n    |     ^^^^^^^^^^^^^^^^\n@@ -458,19 +452,19 @@ LL |     #[bar(\"...\")]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:271:7\n+  --> $DIR/subdiagnostic-derive.rs:270:7\n    |\n LL |     #[bar]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:282:7\n+  --> $DIR/subdiagnostic-derive.rs:281:7\n    |\n LL |     #[bar = \"...\"]\n    |       ^^^\n \n error: cannot find attribute `bar` in this scope\n-  --> $DIR/subdiagnostic-derive.rs:293:7\n+  --> $DIR/subdiagnostic-derive.rs:292:7\n    |\n LL |     #[bar(\"...\")]\n    |       ^^^\n@@ -481,6 +475,6 @@ error[E0425]: cannot find value `slug` in module `rustc_errors::fluent`\n LL | #[label(slug)]\n    |         ^^^^ not found in `rustc_errors::fluent`\n \n-error: aborting due to 68 previous errors\n+error: aborting due to 67 previous errors\n \n For more information about this error, try `rustc --explain E0425`."}]}