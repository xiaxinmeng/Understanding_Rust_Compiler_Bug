{"sha": "1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYzVlNjMxMmZkMTNiZDMwZmI5M2Y3MTM4ODQ1NTMyZmJkZmU4Y2Y=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T08:04:25Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-12-21T17:27:36Z"}, "message": "rollup merge of #20070: aturon/stab-2-clone\n\nThis patch marks `clone` stable, as well as the `Clone` trait, but\nleaves `clone_from` unstable. The latter will be decided by the beta.\n\nThe patch also marks most manual implementations of `Clone` as stable,\nexcept where the APIs are otherwise deprecated or where there is\nuncertainty about providing `Clone`.\n\nr? @alexcrichton", "tree": {"sha": "34749c133b759d1af0f807d34d7f380a3a8b84c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34749c133b759d1af0f807d34d7f380a3a8b84c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "html_url": "https://github.com/rust-lang/rust/commit/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7", "html_url": "https://github.com/rust-lang/rust/commit/6495c27ee6b1aee816dd8eee36c9e60a87ba03c7"}, {"sha": "92ccc073e1a5a68fada24b5b3cb47b65b5ff1c61", "url": "https://api.github.com/repos/rust-lang/rust/commits/92ccc073e1a5a68fada24b5b3cb47b65b5ff1c61", "html_url": "https://github.com/rust-lang/rust/commit/92ccc073e1a5a68fada24b5b3cb47b65b5ff1c61"}], "stats": {"total": 55, "additions": 37, "deletions": 18}, "files": [{"sha": "271cab393c4407a33c6d37198bbc7b599b807b6d", "filename": "src/liballoc/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Farc.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -197,7 +197,7 @@ pub fn weak_count<T>(this: &Arc<T>) -> uint { this.inner().weak.load(atomic::Seq\n #[experimental]\n pub fn strong_count<T>(this: &Arc<T>) -> uint { this.inner().strong.load(atomic::SeqCst) }\n \n-#[unstable = \"waiting on stability of Clone\"]\n+#[stable]\n impl<T> Clone for Arc<T> {\n     /// Makes a clone of the `Arc<T>`.\n     ///"}, {"sha": "5fd234192c515f9f879e580748d9c9f149140244", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -58,7 +58,7 @@ impl<T> Default for Box<[T]> {\n     fn default() -> Box<[T]> { box [] }\n }\n \n-#[unstable]\n+#[stable]\n impl<T: Clone> Clone for Box<T> {\n     /// Returns a copy of the owned box.\n     #[inline]"}, {"sha": "dfa55848c90dadf65bd4bb8ed596b55e3c550115", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -410,7 +410,7 @@ impl<T> Drop for Rc<T> {\n     }\n }\n \n-#[unstable = \"Clone is unstable.\"]\n+#[stable]\n impl<T> Clone for Rc<T> {\n     /// Makes a clone of the `Rc<T>`.\n     ///"}, {"sha": "17dbf8a2cae9ecf6e6e096a6e7595b10903b2610", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -851,6 +851,7 @@ impl Extend<bool> for Bitv {\n     }\n }\n \n+#[stable]\n impl Clone for Bitv {\n     #[inline]\n     fn clone(&self) -> Bitv {"}, {"sha": "86c7def49b197e002ca3be7dca31f9b7311c71a9", "filename": "src/libcollections/btree/node.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fnode.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -390,6 +390,7 @@ impl<K, V> Node<K, V> {\n }\n \n // FIXME(gereeter) Write an efficient clone_from\n+#[stable]\n impl<K: Clone, V: Clone> Clone for Node<K, V> {\n     fn clone(&self) -> Node<K, V> {\n         let mut ret = if self.is_leaf() {"}, {"sha": "d3c1a0f81a3367678b548c36ca016ae41437c874", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -758,6 +758,7 @@ impl<A: Ord> Ord for DList<A> {\n     }\n }\n \n+#[stable]\n impl<A: Clone> Clone for DList<A> {\n     fn clone(&self) -> DList<A> {\n         self.iter().map(|x| x.clone()).collect()"}, {"sha": "aa0e33248fcc1575e4a539cb9dbb2ad69c51b5ab", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -48,6 +48,7 @@ pub struct RingBuf<T> {\n     ptr: *mut T\n }\n \n+#[stable]\n impl<T: Clone> Clone for RingBuf<T> {\n     fn clone(&self) -> RingBuf<T> {\n         self.iter().map(|t| t.clone()).collect()"}, {"sha": "73464c1b2fc776c61fe9204d6a242a05b200d27f", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -469,7 +469,7 @@ impl<T: Clone> Vec<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T:Clone> Clone for Vec<T> {\n     fn clone(&self) -> Vec<T> { self.as_slice().to_vec() }\n "}, {"sha": "e85a132ed363f5a2e6c85dceef701117913118ef", "filename": "src/libcore/array.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Farray.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -25,7 +25,7 @@ use option::Option;\n macro_rules! array_impls {\n     ($($N:expr)+) => {\n         $(\n-            #[unstable = \"waiting for Clone to stabilize\"]\n+            #[stable]\n             impl<T:Copy> Clone for [T, ..$N] {\n                 fn clone(&self) -> [T, ..$N] {\n                     *self\n@@ -115,4 +115,3 @@ array_impls! {\n     20 21 22 23 24 25 26 27 28 29\n     30 31 32\n }\n-"}, {"sha": "9bbcf67773ebbc966bc9081ea1bde77e0dbf34de", "filename": "src/libcore/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fborrow.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -137,6 +137,7 @@ pub enum Cow<'a, T, Sized? B: 'a> where B: ToOwned<T> {\n     Owned(T)\n }\n \n+#[stable]\n impl<'a, T, Sized? B> Clone for Cow<'a, T, B> where B: ToOwned<T> {\n     fn clone(&self) -> Cow<'a, T, B> {\n         match *self {"}, {"sha": "b45424a5eed3f7d4209e62880fd653eed298cbe5", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -208,7 +208,7 @@ impl<T:Copy> Cell<T> {\n     }\n }\n \n-#[unstable = \"waiting for `Clone` trait to become stable\"]\n+#[stable]\n impl<T:Copy> Clone for Cell<T> {\n     fn clone(&self) -> Cell<T> {\n         Cell::new(self.get())\n@@ -341,7 +341,7 @@ impl<T> RefCell<T> {\n     }\n }\n \n-#[unstable = \"waiting for `Clone` to become stable\"]\n+#[stable]\n impl<T: Clone> Clone for RefCell<T> {\n     fn clone(&self) -> RefCell<T> {\n         RefCell::new(self.borrow().clone())"}, {"sha": "686ccf6f1a2513c25e2c7dfd5aa2265d11b90ccb", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -19,13 +19,15 @@\n //! explicitly, by convention implementing the `Clone` trait and calling\n //! the `clone` method.\n \n-#![unstable]\n+#![stable]\n \n use kinds::Sized;\n \n /// A common trait for cloning an object.\n+#[stable]\n pub trait Clone {\n     /// Returns a copy of the value.\n+    #[stable]\n     fn clone(&self) -> Self;\n \n     /// Perform copy-assignment from `source`.\n@@ -34,12 +36,13 @@ pub trait Clone {\n     /// but can be overridden to reuse the resources of `a` to avoid unnecessary\n     /// allocations.\n     #[inline(always)]\n-    #[experimental = \"this function is mostly unused\"]\n+    #[unstable = \"this function rarely unused\"]\n     fn clone_from(&mut self, source: &Self) {\n         *self = source.clone()\n     }\n }\n \n+#[stable]\n impl<'a, Sized? T> Clone for &'a T {\n     /// Return a shallow copy of the reference.\n     #[inline]\n@@ -48,6 +51,7 @@ impl<'a, Sized? T> Clone for &'a T {\n \n macro_rules! clone_impl {\n     ($t:ty) => {\n+        #[stable]\n         impl Clone for $t {\n             /// Return a deep copy of the value.\n             #[inline]\n@@ -95,4 +99,3 @@ extern_fn_clone! { A, B, C, D, E }\n extern_fn_clone! { A, B, C, D, E, F }\n extern_fn_clone! { A, B, C, D, E, F, G }\n extern_fn_clone! { A, B, C, D, E, F, G, H }\n-"}, {"sha": "ab6b0986c686df72b92a04b0aa93a2faa7d06cf6", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -195,6 +195,7 @@ impl Writer for SipState {\n     }\n }\n \n+#[stable]\n impl Clone for SipState {\n     #[inline]\n     fn clone(&self) -> SipState {"}, {"sha": "b592d1db274f63ec9b5dc37a7c2d2056250ae426", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -1386,6 +1386,7 @@ pub struct Map<A, B, I: Iterator<A>, F: FnMut(A) -> B> {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, B, I, F> Clone for Map<A, B, I, F> where\n     I: Clone + Iterator<A>,\n     F: Clone + FnMut(A) -> B,\n@@ -1460,6 +1461,7 @@ pub struct Filter<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, I, P> Clone for Filter<A, I, P> where\n     I: Clone + Iterator<A>,\n     P: Clone + FnMut(&A) -> bool,\n@@ -1518,6 +1520,7 @@ pub struct FilterMap<A, B, I, F> where I: Iterator<A>, F: FnMut(A) -> Option<B>\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, B, I, F> Clone for FilterMap<A, B, I, F> where\n     I: Clone + Iterator<A>,\n     F: Clone + FnMut(A) -> Option<B>,\n@@ -1693,6 +1696,7 @@ pub struct SkipWhile<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, I, P> Clone for SkipWhile<A, I, P> where\n     I: Clone + Iterator<A>,\n     P: Clone + FnMut(&A) -> bool,\n@@ -1736,6 +1740,7 @@ pub struct TakeWhile<A, I, P> where I: Iterator<A>, P: FnMut(&A) -> bool {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, I, P> Clone for TakeWhile<A, I, P> where\n     I: Clone + Iterator<A>,\n     P: Clone + FnMut(&A) -> bool,\n@@ -1911,6 +1916,7 @@ pub struct Scan<A, B, I, St, F> where I: Iterator<A>, F: FnMut(&mut St, A) -> Op\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, B, I, St, F> Clone for Scan<A, B, I, St, F> where\n     I: Clone + Iterator<A>,\n     St: Clone,\n@@ -1955,6 +1961,7 @@ pub struct FlatMap<A, B, I, U, F> where I: Iterator<A>, U: Iterator<B>, F: FnMut\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, B, I, U, F> Clone for FlatMap<A, B, I, U, F> where\n     I: Clone + Iterator<A>,\n     U: Clone + Iterator<B>,\n@@ -2115,6 +2122,7 @@ pub struct Inspect<A, I, F> where I: Iterator<A>, F: FnMut(&A) {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, I, F> Clone for Inspect<A, I, F> where\n     I: Clone + Iterator<A>,\n     F: Clone + FnMut(&A),\n@@ -2222,6 +2230,7 @@ pub struct Unfold<A, St, F> where F: FnMut(&mut St) -> Option<A> {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<A, St, F> Clone for Unfold<A, St, F> where\n     F: Clone + FnMut(&mut St) -> Option<A>,\n     St: Clone,"}, {"sha": "8adbba8b94b87492f3d16cded48167159bda36b0", "filename": "src/libcore/option.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Foption.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -819,6 +819,7 @@ impl<'a, A> DoubleEndedIterator<&'a A> for Iter<'a, A> {\n \n impl<'a, A> ExactSizeIterator<&'a A> for Iter<'a, A> {}\n \n+#[stable]\n impl<'a, A> Clone for Iter<'a, A> {\n     fn clone(&self) -> Iter<'a, A> {\n         Iter { inner: self.inner.clone() }"}, {"sha": "b226d4a6de45d1e5e0e6665a6910e21558db048f", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -388,13 +388,15 @@ impl<T> Equiv<*const T> for *mut T {\n     }\n }\n \n+#[stable]\n impl<T> Clone for *const T {\n     #[inline]\n     fn clone(&self) -> *const T {\n         *self\n     }\n }\n \n+#[stable]\n impl<T> Clone for *mut T {\n     #[inline]\n     fn clone(&self) -> *mut T {\n@@ -499,4 +501,3 @@ impl<T> PartialOrd for *mut T {\n     #[inline]\n     fn ge(&self, other: &*mut T) -> bool { *self >= *other }\n }\n-"}, {"sha": "efc92429afdf1e5f7b0717b70f37de03b5cdbfa2", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -781,7 +781,7 @@ iterator!{struct Items -> *const T, &'a T}\n #[experimental = \"needs review\"]\n impl<'a, T> ExactSizeIterator<&'a T> for Items<'a, T> {}\n \n-#[experimental = \"needs review\"]\n+#[stable]\n impl<'a, T> Clone for Items<'a, T> {\n     fn clone(&self) -> Items<'a, T> { *self }\n }\n@@ -893,6 +893,7 @@ pub struct Splits<'a, T:'a, P> where P: FnMut(&T) -> bool {\n }\n \n // FIXME(#19839) Remove in favor of `#[deriving(Clone)]`\n+#[stable]\n impl<'a, T, P> Clone for Splits<'a, T, P> where P: Clone + FnMut(&T) -> bool {\n     fn clone(&self) -> Splits<'a, T, P> {\n         Splits {\n@@ -1550,4 +1551,3 @@ impl_int_slice! { u16,  i16 }\n impl_int_slice! { u32,  i32 }\n impl_int_slice! { u64,  i64 }\n impl_int_slice! { uint, int }\n-"}, {"sha": "89aed1487924227970786e3c82cd2a9ab37e823e", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -124,7 +124,7 @@ macro_rules! tuple_impls {\n                 )+\n             }\n \n-            #[unstable = \"waiting for Clone to stabilize\"]\n+            #[stable]\n             impl<$($T:Clone),+> Clone for ($($T,)+) {\n                 fn clone(&self) -> ($($T,)+) {\n                     ($(e!(self.$idx.clone()),)+)\n@@ -326,4 +326,3 @@ tuple_impls! {\n         (val11, ref11, mut11, 11) -> L\n     }\n }\n-"}, {"sha": "55f5662dbd897274b489c897fe19289342736643", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -628,7 +628,7 @@ impl<T: Send> Sender<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T: Send> Clone for Sender<T> {\n     fn clone(&self) -> Sender<T> {\n         let (packet, sleeper, guard) = match *unsafe { self.inner() } {\n@@ -756,7 +756,7 @@ impl<T: Send> SyncSender<T> {\n     }\n }\n \n-#[unstable]\n+#[stable]\n impl<T: Send> Clone for SyncSender<T> {\n     fn clone(&self) -> SyncSender<T> {\n         unsafe { (*self.inner.get()).clone_chan(); }"}, {"sha": "3a18b0dc1b525b495cb968a8b3dba01f2a13a7d4", "filename": "src/libstd/io/comm_adapters.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dc5e6312fd13bd30fb93f7138845532fbdfe8cf/src%2Flibstd%2Fio%2Fcomm_adapters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fcomm_adapters.rs?ref=1dc5e6312fd13bd30fb93f7138845532fbdfe8cf", "patch": "@@ -132,6 +132,7 @@ impl ChanWriter {\n     }\n }\n \n+#[stable]\n impl Clone for ChanWriter {\n     fn clone(&self) -> ChanWriter {\n         ChanWriter { tx: self.tx.clone() }"}]}