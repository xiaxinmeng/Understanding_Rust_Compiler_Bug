{"sha": "5599f2ad09345b94487920b84029ad215c4dc743", "node_id": "C_kwDOAAsO6NoAKDU1OTlmMmFkMDkzNDViOTQ0ODc5MjBiODQwMjlhZDIxNWM0ZGM3NDM", "commit": {"author": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-06T13:00:38Z"}, "committer": {"name": "yukang", "email": "moorekang@gmail.com", "date": "2022-12-07T08:13:39Z"}, "message": "fix #105226, Detect spurious ; before assoc fn body", "tree": {"sha": "1f0d4d0061496bde427bba143f50d28ef88d00cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1f0d4d0061496bde427bba143f50d28ef88d00cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5599f2ad09345b94487920b84029ad215c4dc743", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5599f2ad09345b94487920b84029ad215c4dc743", "html_url": "https://github.com/rust-lang/rust/commit/5599f2ad09345b94487920b84029ad215c4dc743", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5599f2ad09345b94487920b84029ad215c4dc743/comments", "author": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "committer": {"login": "chenyukang", "id": 230646, "node_id": "MDQ6VXNlcjIzMDY0Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/230646?v=4", "gravatar_id": "", "url": "https://api.github.com/users/chenyukang", "html_url": "https://github.com/chenyukang", "followers_url": "https://api.github.com/users/chenyukang/followers", "following_url": "https://api.github.com/users/chenyukang/following{/other_user}", "gists_url": "https://api.github.com/users/chenyukang/gists{/gist_id}", "starred_url": "https://api.github.com/users/chenyukang/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/chenyukang/subscriptions", "organizations_url": "https://api.github.com/users/chenyukang/orgs", "repos_url": "https://api.github.com/users/chenyukang/repos", "events_url": "https://api.github.com/users/chenyukang/events{/privacy}", "received_events_url": "https://api.github.com/users/chenyukang/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "703d95e183fbb678249d8f61cabc732e46884e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/703d95e183fbb678249d8f61cabc732e46884e00", "html_url": "https://github.com/rust-lang/rust/commit/703d95e183fbb678249d8f61cabc732e46884e00"}], "stats": {"total": 65, "additions": 62, "deletions": 3}, "files": [{"sha": "8f4f68fb067a731cb7dcfe81a761b55c3b3aaa37", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5599f2ad09345b94487920b84029ad215c4dc743/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5599f2ad09345b94487920b84029ad215c4dc743/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=5599f2ad09345b94487920b84029ad215c4dc743", "patch": "@@ -707,9 +707,9 @@ impl<'a> Parser<'a> {\n             }\n             match parse_item(self) {\n                 Ok(None) => {\n-                    let is_unnecessary_semicolon = !items.is_empty()\n+                    let mut is_unnecessary_semicolon = !items.is_empty()\n                         // When the close delim is `)` in a case like the following, `token.kind` is expected to be `token::CloseDelim(Delimiter::Parenthesis)`,\n-                        // but the actual `token.kind` is `token::CloseDelim(Delimiter::Bracket)`.\n+                        // but the actual `token.kind` is `token::CloseDelim(Delimiter::Brace)`.\n                         // This is because the `token.kind` of the close delim is treated as the same as\n                         // that of the open delim in `TokenTreesReader::parse_token_tree`, even if the delimiters of them are different.\n                         // Therefore, `token.kind` should not be compared here.\n@@ -728,7 +728,13 @@ impl<'a> Parser<'a> {\n                             .span_to_snippet(self.prev_token.span)\n                             .map_or(false, |snippet| snippet == \"}\")\n                         && self.token.kind == token::Semi;\n-                    let semicolon_span = self.token.span;\n+                    let mut semicolon_span = self.token.span;\n+                    if !is_unnecessary_semicolon {\n+                        // #105369, Detect spurious `;` before assoc fn body\n+                        is_unnecessary_semicolon = self.token == token::OpenDelim(Delimiter::Brace)\n+                            && self.prev_token.kind == token::Semi;\n+                        semicolon_span = self.prev_token.span;\n+                    }\n                     // We have to bail or we'll potentially never make progress.\n                     let non_item_span = self.token.span;\n                     let is_let = self.token.is_keyword(kw::Let);"}, {"sha": "f123dbf4cae0caf38776560d002a327da9b79cb9", "filename": "src/test/ui/suggestions/issue-105226.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5599f2ad09345b94487920b84029ad215c4dc743/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5599f2ad09345b94487920b84029ad215c4dc743/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.rs?ref=5599f2ad09345b94487920b84029ad215c4dc743", "patch": "@@ -0,0 +1,22 @@\n+use std::fmt;\n+\n+struct S {\n+}\n+\n+impl S {\n+    fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+        //~^ ERROR non-item in item list\n+        //~| ERROR associated function in `impl` without body\n+        println!(\"val: {}\", val);\n+    }\n+}\n+\n+impl S {\n+    fn hello_empty<P>(&self, val: &P) where P: fmt::Display;\n+    //~^ ERROR associated function in `impl` without body\n+}\n+\n+fn main() {\n+    let s = S{};\n+    s.hello(&32);\n+}"}, {"sha": "f16a80901039030b8b668a688d33bc8d3a450a45", "filename": "src/test/ui/suggestions/issue-105226.stderr", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/5599f2ad09345b94487920b84029ad215c4dc743/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/5599f2ad09345b94487920b84029ad215c4dc743/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fissue-105226.stderr?ref=5599f2ad09345b94487920b84029ad215c4dc743", "patch": "@@ -0,0 +1,31 @@\n+error: non-item in item list\n+  --> $DIR/issue-105226.rs:7:56\n+   |\n+LL | impl S {\n+   |        - item list starts here\n+LL |     fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+   |                                                      - ^ non-item starts here\n+   |                                                      |\n+   |                                                      help: consider removing this semicolon\n+...\n+LL | }\n+   | - item list ends here\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-105226.rs:7:5\n+   |\n+LL |     fn hello<P>(&self, val: &P) where P: fmt::Display; {\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                      |\n+   |                                                      help: provide a definition for the function: `{ <body> }`\n+\n+error: associated function in `impl` without body\n+  --> $DIR/issue-105226.rs:15:5\n+   |\n+LL |     fn hello_empty<P>(&self, val: &P) where P: fmt::Display;\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-\n+   |                                                            |\n+   |                                                            help: provide a definition for the function: `{ <body> }`\n+\n+error: aborting due to 3 previous errors\n+"}]}