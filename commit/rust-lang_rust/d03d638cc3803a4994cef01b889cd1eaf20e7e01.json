{"sha": "d03d638cc3803a4994cef01b889cd1eaf20e7e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwM2Q2MzhjYzM4MDNhNDk5NGNlZjAxYjg4OWNkMWVhZjIwZTdlMDE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-04-01T11:15:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-01T11:15:37Z"}, "message": "Merge #3804\n\n3804: Generalize flycheck to arbitrary commands r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "d6f25e08d77a45c70754d7e2b91a7be9897b0ce3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d6f25e08d77a45c70754d7e2b91a7be9897b0ce3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d03d638cc3803a4994cef01b889cd1eaf20e7e01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehHfZCRBK7hj4Ov3rIwAAdHIIAHZFDayVVHBYb6ZEGK/xbzWh\nqAMBUf0lvYPtPc5jnCvUwY1L7HMemSP1b+mSAnxBKKW/oaeQkl+c3Fib+4Fd4V1g\n44wLHChDYQvKSCXYOMm9xkiWj8wOHZzIyTIp1vtijkyjH/iOxcF0xJEf9CDtizSn\n8qJluZL1SO0r1dT6jGI0j2u/WJV6e/Iluv87ISNA4wOhoEodNqABlOo60ojmu2x0\nGPQkxlHXK9M1aR5i8f9fEMWkisJHwBcUxrhqVn/wwgNJ0MWvUYGLAEoyuaXdgnNw\nGUJ/F5Cyvy2B1gVs0hbQ8yXw7zBl/j3N9DIoGhLZy8tXxkhUSDIxk7oEhFwRpHs=\n=mxqr\n-----END PGP SIGNATURE-----\n", "payload": "tree d6f25e08d77a45c70754d7e2b91a7be9897b0ce3\nparent aad0e63d744e5220fae38f61e1adf7654fb618bd\nparent cc8113dd464fdce61fd425157e1145404be3b568\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1585739737 +0000\ncommitter GitHub <noreply@github.com> 1585739737 +0000\n\nMerge #3804\n\n3804: Generalize flycheck to arbitrary commands r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d03d638cc3803a4994cef01b889cd1eaf20e7e01", "html_url": "https://github.com/rust-lang/rust/commit/d03d638cc3803a4994cef01b889cd1eaf20e7e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d03d638cc3803a4994cef01b889cd1eaf20e7e01/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "aad0e63d744e5220fae38f61e1adf7654fb618bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/aad0e63d744e5220fae38f61e1adf7654fb618bd", "html_url": "https://github.com/rust-lang/rust/commit/aad0e63d744e5220fae38f61e1adf7654fb618bd"}, {"sha": "cc8113dd464fdce61fd425157e1145404be3b568", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc8113dd464fdce61fd425157e1145404be3b568", "html_url": "https://github.com/rust-lang/rust/commit/cc8113dd464fdce61fd425157e1145404be3b568"}], "stats": {"total": 91, "additions": 38, "deletions": 53}, "files": [{"sha": "13494a731b709344782bd1f5dd95c37f8fb83033", "filename": "crates/ra_flycheck/src/lib.rs", "status": "modified", "additions": 37, "deletions": 52, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/d03d638cc3803a4994cef01b889cd1eaf20e7e01/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d638cc3803a4994cef01b889cd1eaf20e7e01/crates%2Fra_flycheck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_flycheck%2Fsrc%2Flib.rs?ref=d03d638cc3803a4994cef01b889cd1eaf20e7e01", "patch": "@@ -4,8 +4,8 @@\n mod conv;\n \n use std::{\n-    env, error, fmt,\n-    io::{BufRead, BufReader},\n+    env,\n+    io::{self, BufRead, BufReader},\n     path::PathBuf,\n     process::{Command, Stdio},\n     time::Instant,\n@@ -23,10 +23,9 @@ use crate::conv::{map_rust_diagnostic_to_lsp, MappedRustDiagnostic};\n pub use crate::conv::url_from_path_with_drive_lowercasing;\n \n #[derive(Clone, Debug)]\n-pub struct FlycheckConfig {\n-    pub command: String,\n-    pub all_targets: bool,\n-    pub extra_args: Vec<String>,\n+pub enum FlycheckConfig {\n+    CargoCommand { command: String, all_targets: bool, extra_args: Vec<String> },\n+    CustomCommand { command: String, args: Vec<String> },\n }\n \n /// Flycheck wraps the shared state and communication machinery used for\n@@ -215,18 +214,25 @@ impl FlycheckThread {\n         self.message_recv = never();\n         self.check_process = None;\n \n-        let cmd = {\n-            let mut cmd = Command::new(cargo_binary());\n-            cmd.arg(&self.config.command);\n-            cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n-            cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n-            if self.config.all_targets {\n-                cmd.arg(\"--all-targets\");\n+        let mut cmd = match &self.config {\n+            FlycheckConfig::CargoCommand { command, all_targets, extra_args } => {\n+                let mut cmd = Command::new(cargo_binary());\n+                cmd.arg(command);\n+                cmd.args(&[\"--workspace\", \"--message-format=json\", \"--manifest-path\"]);\n+                cmd.arg(self.workspace_root.join(\"Cargo.toml\"));\n+                if *all_targets {\n+                    cmd.arg(\"--all-targets\");\n+                }\n+                cmd.args(extra_args);\n+                cmd\n+            }\n+            FlycheckConfig::CustomCommand { command, args } => {\n+                let mut cmd = Command::new(command);\n+                cmd.args(args);\n+                cmd\n             }\n-            cmd.args(self.config.extra_args.iter());\n-            cmd.current_dir(&self.workspace_root);\n-            cmd\n         };\n+        cmd.current_dir(&self.workspace_root);\n \n         let (message_send, message_recv) = unbounded();\n         self.message_recv = message_recv;\n@@ -273,27 +279,12 @@ enum CheckEvent {\n     End,\n }\n \n-#[derive(Debug)]\n-pub struct CargoError(String);\n-\n-impl fmt::Display for CargoError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"Cargo failed: {}\", self.0)\n-    }\n-}\n-impl error::Error for CargoError {}\n-\n fn run_cargo(\n     mut command: Command,\n     on_message: &mut dyn FnMut(cargo_metadata::Message) -> bool,\n-) -> Result<(), CargoError> {\n-    dbg!(&command);\n-    let mut child = command\n-        .stdout(Stdio::piped())\n-        .stderr(Stdio::null())\n-        .stdin(Stdio::null())\n-        .spawn()\n-        .expect(\"couldn't launch cargo\");\n+) -> io::Result<()> {\n+    let mut child =\n+        command.stdout(Stdio::piped()).stderr(Stdio::null()).stdin(Stdio::null()).spawn()?;\n \n     // We manually read a line at a time, instead of using serde's\n     // stream deserializers, because the deserializer cannot recover\n@@ -307,13 +298,7 @@ fn run_cargo(\n     let mut read_at_least_one_message = false;\n \n     for line in stdout.lines() {\n-        let line = match line {\n-            Ok(line) => line,\n-            Err(err) => {\n-                log::error!(\"Couldn't read line from cargo: {}\", err);\n-                continue;\n-            }\n-        };\n+        let line = line?;\n \n         let message = serde_json::from_str::<cargo_metadata::Message>(&line);\n         let message = match message {\n@@ -334,20 +319,20 @@ fn run_cargo(\n     // It is okay to ignore the result, as it only errors if the process is already dead\n     let _ = child.kill();\n \n-    let err_msg = match child.wait() {\n-        Ok(exit_code) if !exit_code.success() && !read_at_least_one_message => {\n-            // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n-            // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n+    let exit_status = child.wait()?;\n+    if !exit_status.success() && !read_at_least_one_message {\n+        // FIXME: Read the stderr to display the reason, see `read2()` reference in PR comment:\n+        // https://github.com/rust-analyzer/rust-analyzer/pull/3632#discussion_r395605298\n+        return Err(io::Error::new(\n+            io::ErrorKind::Other,\n             format!(\n                 \"the command produced no valid metadata (exit code: {:?}): {:?}\",\n-                exit_code, command\n-            )\n-        }\n-        Err(err) => format!(\"io error: {:?}\", err),\n-        Ok(_) => return Ok(()),\n-    };\n+                exit_status, command\n+            ),\n+        ));\n+    }\n \n-    Err(CargoError(err_msg))\n+    Ok(())\n }\n \n fn cargo_binary() -> String {"}, {"sha": "a89ea86ead4f11aeb0f273470a40facf466e2226", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d03d638cc3803a4994cef01b889cd1eaf20e7e01/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d03d638cc3803a4994cef01b889cd1eaf20e7e01/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=d03d638cc3803a4994cef01b889cd1eaf20e7e01", "patch": "@@ -102,7 +102,7 @@ fn get_config(\n             max_length: config.inlay_hints_max_length,\n         },\n         check: if config.cargo_watch_enable {\n-            Some(FlycheckConfig {\n+            Some(FlycheckConfig::CargoCommand {\n                 command: config.cargo_watch_command.clone(),\n                 all_targets: config.cargo_watch_all_targets,\n                 extra_args: config.cargo_watch_args.clone(),"}]}