{"sha": "214d8e3cd46b4186efd9403296e1be38f5c9fa49", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxNGQ4ZTNjZDQ2YjQxODZlZmQ5NDAzMjk2ZTFiZTM4ZjVjOWZhNDk=", "commit": {"author": {"name": "L\u00e9o Lanteri Thauvin", "email": "leseulartichaut@gmail.com", "date": "2021-08-25T13:48:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-25T13:48:48Z"}, "message": "Rollup merge of #88156 - steffahn:arc_make_mut_and_weak, r=Mark-Simulacrum\n\nAdjust / fix documentation of `Arc::make_mut`\n\nRelated discussion in the users forum:\n[What\u02bcs this alleged difference between Arc::make_mut and Rc::make_mut? \u2013 The Rust Programming Language Forum](https://users.rust-lang.org/t/what-s-this-alleged-difference-between-arc-make-mut-and-rc-make-mut/63747?u=steffahn)\n\nAlso includes a small formatting improvement in the documentation of `Rc::make_mut`.\n\nThis PR makes the two documentations in question complete analogs. The previously claimed point in which one \u201cdiffers from the behavior of\u201d the other turns out to be incorrect, AFAIK.\n\nOne remaining inaccuracy: `Weak` pointers aren\u2019t disassociated from the allocation but only from the contained value, i.e. in case of outstanding `Weak` pointers there still is a new allocation created, just the call to `.clone()` is avoided, instead the value is moved from one allocation to the other.\n\n`@rustbot` label T-libs-api, A-docs", "tree": {"sha": "ba4a9f5cfa6f07b172eb32361a764fff9305f30f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba4a9f5cfa6f07b172eb32361a764fff9305f30f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/214d8e3cd46b4186efd9403296e1be38f5c9fa49", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhJkpACRBK7hj4Ov3rIwAAc0UIAAmJQLcwTorCxpEDlHcrJtM9\nJm0d6Sr+Jl1d3I2OBl4D0RpZ/skM0GGTOO1GZ465dQEQ1CkmNxl0xUz3yzH+zfrS\nAZsD49lmYvijOaVWs63A0L14lGO+QzGuL2m3uhlu2ybFj4RyGcju7FsImlNVM3oR\n2qqP0klcXjCQQ1Eg+r7XPj7CoO5EmLMI5+DFjq78VZX0J5Xw3Fag9sN89KqHREqM\nW23LMKmLQehYFEY2bg/Y+Zl7ZErJ2S+i2vi/HUF0BbdaMOd2svM/P/7FwbbpKoRP\naji3h9K+7AiZW+WFGr1WB7jrjxOVCbGhIE1WrI7cctotVQLToAwAF+pqNP1IkNo=\n=J23G\n-----END PGP SIGNATURE-----\n", "payload": "tree ba4a9f5cfa6f07b172eb32361a764fff9305f30f\nparent ccefe27670365f86cafbfa5b0776644980e919f0\nparent 90354c719a94db7d393134c00b2a91bd651b5e7a\nauthor L\u00e9o Lanteri Thauvin <leseulartichaut@gmail.com> 1629899328 +0200\ncommitter GitHub <noreply@github.com> 1629899328 +0200\n\nRollup merge of #88156 - steffahn:arc_make_mut_and_weak, r=Mark-Simulacrum\n\nAdjust / fix documentation of `Arc::make_mut`\n\nRelated discussion in the users forum:\n[What\u02bcs this alleged difference between Arc::make_mut and Rc::make_mut? \u2013 The Rust Programming Language Forum](https://users.rust-lang.org/t/what-s-this-alleged-difference-between-arc-make-mut-and-rc-make-mut/63747?u=steffahn)\n\nAlso includes a small formatting improvement in the documentation of `Rc::make_mut`.\n\nThis PR makes the two documentations in question complete analogs. The previously claimed point in which one \u201cdiffers from the behavior of\u201d the other turns out to be incorrect, AFAIK.\n\nOne remaining inaccuracy: `Weak` pointers aren\u2019t disassociated from the allocation but only from the contained value, i.e. in case of outstanding `Weak` pointers there still is a new allocation created, just the call to `.clone()` is avoided, instead the value is moved from one allocation to the other.\n\n`@rustbot` label T-libs-api, A-docs\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/214d8e3cd46b4186efd9403296e1be38f5c9fa49", "html_url": "https://github.com/rust-lang/rust/commit/214d8e3cd46b4186efd9403296e1be38f5c9fa49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/214d8e3cd46b4186efd9403296e1be38f5c9fa49/comments", "author": {"login": "LeSeulArtichaut", "id": 38361244, "node_id": "MDQ6VXNlcjM4MzYxMjQ0", "avatar_url": "https://avatars.githubusercontent.com/u/38361244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/LeSeulArtichaut", "html_url": "https://github.com/LeSeulArtichaut", "followers_url": "https://api.github.com/users/LeSeulArtichaut/followers", "following_url": "https://api.github.com/users/LeSeulArtichaut/following{/other_user}", "gists_url": "https://api.github.com/users/LeSeulArtichaut/gists{/gist_id}", "starred_url": "https://api.github.com/users/LeSeulArtichaut/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/LeSeulArtichaut/subscriptions", "organizations_url": "https://api.github.com/users/LeSeulArtichaut/orgs", "repos_url": "https://api.github.com/users/LeSeulArtichaut/repos", "events_url": "https://api.github.com/users/LeSeulArtichaut/events{/privacy}", "received_events_url": "https://api.github.com/users/LeSeulArtichaut/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ccefe27670365f86cafbfa5b0776644980e919f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/ccefe27670365f86cafbfa5b0776644980e919f0", "html_url": "https://github.com/rust-lang/rust/commit/ccefe27670365f86cafbfa5b0776644980e919f0"}, {"sha": "90354c719a94db7d393134c00b2a91bd651b5e7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/90354c719a94db7d393134c00b2a91bd651b5e7a", "html_url": "https://github.com/rust-lang/rust/commit/90354c719a94db7d393134c00b2a91bd651b5e7a"}], "stats": {"total": 58, "additions": 39, "deletions": 19}, "files": [{"sha": "a9d147fa1a55c20ffba1b763bc527b3c3a448167", "filename": "library/alloc/src/rc.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/214d8e3cd46b4186efd9403296e1be38f5c9fa49/library%2Falloc%2Fsrc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214d8e3cd46b4186efd9403296e1be38f5c9fa49/library%2Falloc%2Fsrc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Frc.rs?ref=214d8e3cd46b4186efd9403296e1be38f5c9fa49", "patch": "@@ -1011,7 +1011,7 @@ impl<T: ?Sized> Rc<T> {\n     /// mutate a shared value.\n     ///\n     /// See also [`make_mut`][make_mut], which will [`clone`][clone]\n-    /// the inner value when there are other pointers.\n+    /// the inner value when there are other `Rc` pointers.\n     ///\n     /// [make_mut]: Rc::make_mut\n     /// [clone]: Clone::clone\n@@ -1100,10 +1100,12 @@ impl<T: Clone> Rc<T> {\n     /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\n     /// referred to as clone-on-write.\n     ///\n-    /// If there are no other `Rc` pointers to this allocation, then [`Weak`]\n-    /// pointers to this allocation will be disassociated.\n+    /// However, if there are no other `Rc` pointers to this allocation, but some [`Weak`]\n+    /// pointers, then the [`Weak`] pointers will be disassociated and the inner value will not\n+    /// be cloned.\n     ///\n-    /// See also [`get_mut`], which will fail rather than cloning.\n+    /// See also [`get_mut`], which will fail rather than cloning the inner value\n+    /// or diassociating [`Weak`] pointers.\n     ///\n     /// [`clone`]: Clone::clone\n     /// [`get_mut`]: Rc::get_mut\n@@ -1115,11 +1117,11 @@ impl<T: Clone> Rc<T> {\n     ///\n     /// let mut data = Rc::new(5);\n     ///\n-    /// *Rc::make_mut(&mut data) += 1;        // Won't clone anything\n-    /// let mut other_data = Rc::clone(&data);    // Won't clone inner data\n-    /// *Rc::make_mut(&mut data) += 1;        // Clones inner data\n-    /// *Rc::make_mut(&mut data) += 1;        // Won't clone anything\n-    /// *Rc::make_mut(&mut other_data) *= 2;  // Won't clone anything\n+    /// *Rc::make_mut(&mut data) += 1;         // Won't clone anything\n+    /// let mut other_data = Rc::clone(&data); // Won't clone inner data\n+    /// *Rc::make_mut(&mut data) += 1;         // Clones inner data\n+    /// *Rc::make_mut(&mut data) += 1;         // Won't clone anything\n+    /// *Rc::make_mut(&mut other_data) *= 2;   // Won't clone anything\n     ///\n     /// // Now `data` and `other_data` point to different allocations.\n     /// assert_eq!(*data, 8);"}, {"sha": "a066e0b49e25c4505381f7d83e037bd8e24e4d86", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 28, "deletions": 10, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/214d8e3cd46b4186efd9403296e1be38f5c9fa49/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/214d8e3cd46b4186efd9403296e1be38f5c9fa49/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=214d8e3cd46b4186efd9403296e1be38f5c9fa49", "patch": "@@ -1346,18 +1346,19 @@ impl<T: ?Sized> Receiver for Arc<T> {}\n impl<T: Clone> Arc<T> {\n     /// Makes a mutable reference into the given `Arc`.\n     ///\n-    /// If there are other `Arc` or [`Weak`] pointers to the same allocation,\n-    /// then `make_mut` will create a new allocation and invoke [`clone`][clone] on the inner value\n-    /// to ensure unique ownership. This is also referred to as clone-on-write.\n+    /// If there are other `Arc` pointers to the same allocation, then `make_mut` will\n+    /// [`clone`] the inner value to a new allocation to ensure unique ownership.  This is also\n+    /// referred to as clone-on-write.\n     ///\n-    /// Note that this differs from the behavior of [`Rc::make_mut`] which disassociates\n-    /// any remaining `Weak` pointers.\n+    /// However, if there are no other `Arc` pointers to this allocation, but some [`Weak`]\n+    /// pointers, then the [`Weak`] pointers will be disassociated and the inner value will not\n+    /// be cloned.\n     ///\n-    /// See also [`get_mut`][get_mut], which will fail rather than cloning.\n+    /// See also [`get_mut`], which will fail rather than cloning the inner value\n+    /// or diassociating [`Weak`] pointers.\n     ///\n-    /// [clone]: Clone::clone\n-    /// [get_mut]: Arc::get_mut\n-    /// [`Rc::make_mut`]: super::rc::Rc::make_mut\n+    /// [`clone`]: Clone::clone\n+    /// [`get_mut`]: Arc::get_mut\n     ///\n     /// # Examples\n     ///\n@@ -1376,6 +1377,23 @@ impl<T: Clone> Arc<T> {\n     /// assert_eq!(*data, 8);\n     /// assert_eq!(*other_data, 12);\n     /// ```\n+    ///\n+    /// [`Weak`] pointers will be disassociated:\n+    ///\n+    /// ```\n+    /// use std::sync::Arc;\n+    ///\n+    /// let mut data = Arc::new(75);\n+    /// let weak = Arc::downgrade(&data);\n+    ///\n+    /// assert!(75 == *data);\n+    /// assert!(75 == *weak.upgrade().unwrap());\n+    ///\n+    /// *Arc::make_mut(&mut data) += 1;\n+    ///\n+    /// assert!(76 == *data);\n+    /// assert!(weak.upgrade().is_none());\n+    /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n     #[stable(feature = \"arc_unique\", since = \"1.4.0\")]\n@@ -1441,7 +1459,7 @@ impl<T: ?Sized> Arc<T> {\n     /// mutate a shared value.\n     ///\n     /// See also [`make_mut`][make_mut], which will [`clone`][clone]\n-    /// the inner value when there are other pointers.\n+    /// the inner value when there are other `Arc` pointers.\n     ///\n     /// [make_mut]: Arc::make_mut\n     /// [clone]: Clone::clone"}]}