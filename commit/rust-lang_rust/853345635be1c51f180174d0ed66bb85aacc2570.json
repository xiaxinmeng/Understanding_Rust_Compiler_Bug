{"sha": "853345635be1c51f180174d0ed66bb85aacc2570", "node_id": "C_kwDOAAsO6NoAKDg1MzM0NTYzNWJlMWM1MWYxODAxNzRkMGVkNjZiYjg1YWFjYzI1NzA", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-07T00:59:00Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2023-06-07T01:02:15Z"}, "message": "Move `mono_item_placement` construction.\n\nIt's currently created in `place_inlined_mono_items` and then used in\n`internalize_symbols`. This commit moves the creation to\n`internalize_symbols`.", "tree": {"sha": "0858c3895b672c7e28564663f9234faaed5adc9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0858c3895b672c7e28564663f9234faaed5adc9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/853345635be1c51f180174d0ed66bb85aacc2570", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/853345635be1c51f180174d0ed66bb85aacc2570", "html_url": "https://github.com/rust-lang/rust/commit/853345635be1c51f180174d0ed66bb85aacc2570", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/853345635be1c51f180174d0ed66bb85aacc2570/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1defd3076473699332e1b4c424d35f0dfb28c63b", "url": "https://api.github.com/repos/rust-lang/rust/commits/1defd3076473699332e1b4c424d35f0dfb28c63b", "html_url": "https://github.com/rust-lang/rust/commit/1defd3076473699332e1b4c424d35f0dfb28c63b"}], "stats": {"total": 80, "additions": 35, "deletions": 45}, "files": [{"sha": "1d9c8ded349c0924895c2864364a0d2b9be3fa59", "filename": "compiler/rustc_monomorphize/src/partitioning.rs", "status": "modified", "additions": 35, "deletions": 45, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/853345635be1c51f180174d0ed66bb85aacc2570/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/853345635be1c51f180174d0ed66bb85aacc2570/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_monomorphize%2Fsrc%2Fpartitioning.rs?ref=853345635be1c51f180174d0ed66bb85aacc2570", "patch": "@@ -173,7 +173,7 @@ where\n     // monomorphizations have to go into each codegen unit. These additional\n     // monomorphizations can be drop-glue, functions from external crates, and\n     // local functions the definition of which is marked with `#[inline]`.\n-    let mono_item_placements = {\n+    {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_place_inline_items\");\n         place_inlined_mono_items(cx, &mut codegen_units)\n     };\n@@ -188,12 +188,7 @@ where\n     // more freedom to optimize.\n     if !tcx.sess.link_dead_code() {\n         let _prof_timer = tcx.prof.generic_activity(\"cgu_partitioning_internalize_symbols\");\n-        internalize_symbols(\n-            cx,\n-            &mut codegen_units,\n-            mono_item_placements,\n-            internalization_candidates,\n-        );\n+        internalize_symbols(cx, &mut codegen_units, internalization_candidates);\n     }\n \n     let instrument_dead_code =\n@@ -401,19 +396,10 @@ fn merge_codegen_units<'tcx>(\n     codegen_units.sort_by(|a, b| a.name().as_str().cmp(b.name().as_str()));\n }\n \n-/// For symbol internalization, we need to know whether a symbol/mono-item is\n-/// used from outside the codegen unit it is defined in. This type is used\n-/// to keep track of that.\n-#[derive(Clone, PartialEq, Eq, Debug)]\n-enum MonoItemPlacement {\n-    SingleCgu { cgu_name: Symbol },\n-    MultipleCgus,\n-}\n-\n fn place_inlined_mono_items<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-) -> FxHashMap<MonoItem<'tcx>, MonoItemPlacement> {\n+) {\n     for cgu in codegen_units.iter_mut() {\n         // Collect all inlined items that need to be available in this codegen unit.\n         let mut reachable_inlined_items = FxHashSet::default();\n@@ -432,33 +418,6 @@ fn place_inlined_mono_items<'tcx>(\n         }\n     }\n \n-    let mut mono_item_placements = FxHashMap::default();\n-    let single_codegen_unit = codegen_units.len() == 1;\n-\n-    for cgu in codegen_units.iter_mut() {\n-        for item in cgu.items().keys() {\n-            if !single_codegen_unit {\n-                // If there is more than one codegen unit, we need to keep track\n-                // in which codegen units each monomorphization is placed.\n-                match mono_item_placements.entry(*item) {\n-                    Entry::Occupied(e) => {\n-                        let placement = e.into_mut();\n-                        debug_assert!(match *placement {\n-                            MonoItemPlacement::SingleCgu { cgu_name } => cgu_name != cgu.name(),\n-                            MonoItemPlacement::MultipleCgus => true,\n-                        });\n-                        *placement = MonoItemPlacement::MultipleCgus;\n-                    }\n-                    Entry::Vacant(e) => {\n-                        e.insert(MonoItemPlacement::SingleCgu { cgu_name: cgu.name() });\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    return mono_item_placements;\n-\n     fn get_reachable_inlined_items<'tcx>(\n         tcx: TyCtxt<'tcx>,\n         item: MonoItem<'tcx>,\n@@ -477,11 +436,42 @@ fn place_inlined_mono_items<'tcx>(\n fn internalize_symbols<'tcx>(\n     cx: &PartitioningCx<'_, 'tcx>,\n     codegen_units: &mut [CodegenUnit<'tcx>],\n-    mono_item_placements: FxHashMap<MonoItem<'tcx>, MonoItemPlacement>,\n     internalization_candidates: FxHashSet<MonoItem<'tcx>>,\n ) {\n+    /// For symbol internalization, we need to know whether a symbol/mono-item\n+    /// is used from outside the codegen unit it is defined in. This type is\n+    /// used to keep track of that.\n+    #[derive(Clone, PartialEq, Eq, Debug)]\n+    enum MonoItemPlacement {\n+        SingleCgu { cgu_name: Symbol },\n+        MultipleCgus,\n+    }\n+\n+    let mut mono_item_placements = FxHashMap::default();\n     let single_codegen_unit = codegen_units.len() == 1;\n \n+    if !single_codegen_unit {\n+        for cgu in codegen_units.iter_mut() {\n+            for item in cgu.items().keys() {\n+                // If there is more than one codegen unit, we need to keep track\n+                // in which codegen units each monomorphization is placed.\n+                match mono_item_placements.entry(*item) {\n+                    Entry::Occupied(e) => {\n+                        let placement = e.into_mut();\n+                        debug_assert!(match *placement {\n+                            MonoItemPlacement::SingleCgu { cgu_name } => cgu_name != cgu.name(),\n+                            MonoItemPlacement::MultipleCgus => true,\n+                        });\n+                        *placement = MonoItemPlacement::MultipleCgus;\n+                    }\n+                    Entry::Vacant(e) => {\n+                        e.insert(MonoItemPlacement::SingleCgu { cgu_name: cgu.name() });\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     // For each internalization candidates in each codegen unit, check if it is\n     // used from outside its defining codegen unit.\n     for cgu in codegen_units {"}]}