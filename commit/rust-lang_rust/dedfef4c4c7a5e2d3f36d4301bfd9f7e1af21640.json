{"sha": "dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGZlZjRjNGM3YTVlMmQzZjM2ZDQzMDFiZmQ5ZjdlMWFmMjE2NDA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-21T04:57:04Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-21T04:57:04Z"}, "message": "Revert \"wip\"\n\nThis reverts commit aeadc6269ef76f4425a49d892ceac7ea311ef5c1.", "tree": {"sha": "01b407d906d741edb463522309b3fd2cb1363100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01b407d906d741edb463522309b3fd2cb1363100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "html_url": "https://github.com/rust-lang/rust/commit/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "854daaec0c4cf0c236e46b45a1254c85a8b352db", "url": "https://api.github.com/repos/rust-lang/rust/commits/854daaec0c4cf0c236e46b45a1254c85a8b352db", "html_url": "https://github.com/rust-lang/rust/commit/854daaec0c4cf0c236e46b45a1254c85a8b352db"}], "stats": {"total": 89, "additions": 1, "deletions": 88}, "files": [{"sha": "48e7a5f64cab951dc61a22e4eca8f5b8bf445b45", "filename": "src/libcore/core.rs", "status": "modified", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Flibcore%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Flibcore%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcore.rs?ref=dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "patch": "@@ -6,7 +6,6 @@\n import option::{some,  none};\n import option = option::t;\n export option, some, none;\n-export repeat;\n \n // Export the log levels as global constants. Higher levels mean\n // more-verbosity. Error is the bottom level, default logging level is\n@@ -16,16 +15,3 @@ const error : int = 0;\n const warn : int = 1;\n const info : int = 2;\n const debug : int = 3;\n-\n-/*\n-Function: repeat\n-\n-Execute a function for a set number of times\n-*/\n-fn repeat(times: uint, f: block()) {\n-    let i = 0u;\n-    while i < times {\n-        f();\n-        i += 1u;\n-    }\n-}"}, {"sha": "f06e700b2f8cc13c33b56171f78b806258ce1d73", "filename": "src/rt/circular_buffer.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Fcircular_buffer.h", "raw_url": "https://github.com/rust-lang/rust/raw/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Fcircular_buffer.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Fcircular_buffer.h?ref=dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "patch": "@@ -7,7 +7,7 @@\n \n class\n circular_buffer : public kernel_owned<circular_buffer> {\n-    static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 1;\n+    static const size_t INITIAL_CIRCULAR_BUFFER_SIZE_IN_UNITS = 8;\n     static const size_t MAX_CIRCULAR_BUFFER_SIZE = 1 << 24;\n \n public:"}, {"sha": "2e6c41a8e7954173763b8f1e8b561d8e4381d82d", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "patch": "@@ -404,9 +404,6 @@ rust_task::yield(size_t time_in_us, bool *killed) {\n         *killed = true;\n     }\n \n-    // We're not going to need any extra stack for a while\n-    clear_stack_cache();\n-\n     yield_timer.reset_us(time_in_us);\n \n     // Return to the scheduler.\n@@ -749,15 +746,6 @@ rust_task::del_stack() {\n     record_stack_limit();\n }\n \n-void\n-rust_task::clear_stack_cache() {\n-    A(sched, stk != NULL, \"Expected to have a stack\");\n-    if (stk->prev != NULL) {\n-        free_stk(this, stk->prev);\n-        stk->prev = NULL;\n-    }\n-}\n-\n void\n rust_task::record_stack_limit() {\n     // The function prolog compares the amount of stack needed to the end of"}, {"sha": "21d20691ac61adca655655baa20260a683dd5430", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=dedfef4c4c7a5e2d3f36d4301bfd9f7e1af21640", "patch": "@@ -203,7 +203,6 @@ rust_task : public kernel_owned<rust_task>, rust_cond\n     void reset_stack_limit();\n     bool on_rust_stack();\n     void check_stack_canary();\n-    void clear_stack_cache();\n };\n \n //"}, {"sha": "8430351b7e9a31b2a59a2970ab3425749e324f6f", "filename": "src/test/bench/task-perf-one-million.rs", "status": "removed", "additions": 0, "deletions": 60, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/854daaec0c4cf0c236e46b45a1254c85a8b352db/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "raw_url": "https://github.com/rust-lang/rust/raw/854daaec0c4cf0c236e46b45a1254c85a8b352db/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Ftask-perf-one-million.rs?ref=854daaec0c4cf0c236e46b45a1254c85a8b352db", "patch": "@@ -1,60 +0,0 @@\n-// xfail-test FIXME: Can't run under valgrind - too much RAM\n-// FIXME: This doesn't spawn close to a million tasks yet\n-\n-tag msg {\n-    ready(comm::chan<msg>);\n-    start;\n-    done(int);\n-}\n-\n-fn calc(&&args: (int, comm::chan<msg>)) {\n-    let (depth, parent_ch) = args;\n-    let port = comm::port();\n-    let children = depth > 0 ? 20u : 0u;\n-    let child_chs = [];\n-    let sum = 0;\n-\n-    repeat (children) {||\n-        task::spawn((depth - 1, comm::chan(port)), calc);\n-    }\n-\n-    repeat (children) {||\n-        alt comm::recv(port) {\n-          ready(child_ch) {\n-            child_chs += [child_ch];\n-          }\n-        }\n-    }\n-\n-    comm::send(parent_ch, ready(comm::chan(port)));\n-\n-    alt comm::recv(port) {\n-        start. {\n-          vec::iter (child_chs) { |child_ch|\n-              comm::send(child_ch, start);\n-          }\n-        }\n-    }\n-\n-    repeat (children) {||\n-        alt comm::recv(port) {\n-          done(child_sum) { sum += child_sum; }\n-        }\n-    }\n-\n-    comm::send(parent_ch, done(sum + 1));\n-}\n-\n-fn main() {\n-    let port = comm::port();\n-    task::spawn((3, comm::chan(port)), calc);\n-    alt comm::recv(port) {\n-      ready(chan) {\n-        comm::send(chan, start);\n-      }\n-    }\n-    let sum = alt comm::recv(port) {\n-      done(sum) { sum }\n-    };\n-    log #fmt(\"How many tasks? That's right, %d tasks.\", sum);\n-}\n\\ No newline at end of file"}]}