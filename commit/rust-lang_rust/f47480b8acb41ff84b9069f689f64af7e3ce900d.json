{"sha": "f47480b8acb41ff84b9069f689f64af7e3ce900d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NzQ4MGI4YWNiNDFmZjg0YjkwNjlmNjg5ZjY0YWY3ZTNjZTkwMGQ=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T10:40:55Z"}, "committer": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2020-10-06T10:40:55Z"}, "message": "Improve windows thread parker.\n\n- Clarify memory ordering and spurious wakeups.", "tree": {"sha": "a6e8f514e321b4f1598b729239c898d8b5c0a9d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a6e8f514e321b4f1598b729239c898d8b5c0a9d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f47480b8acb41ff84b9069f689f64af7e3ce900d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f47480b8acb41ff84b9069f689f64af7e3ce900d", "html_url": "https://github.com/rust-lang/rust/commit/f47480b8acb41ff84b9069f689f64af7e3ce900d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f47480b8acb41ff84b9069f689f64af7e3ce900d/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e9904342eb407209d6150d9df0cdf02e49069a8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9904342eb407209d6150d9df0cdf02e49069a8b", "html_url": "https://github.com/rust-lang/rust/commit/e9904342eb407209d6150d9df0cdf02e49069a8b"}], "stats": {"total": 58, "additions": 34, "deletions": 24}, "files": [{"sha": "7697e6bb3be037494491d4c452efd2c8fa3f9833", "filename": "library/std/src/sys/windows/thread_parker.rs", "status": "modified", "additions": 34, "deletions": 24, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f47480b8acb41ff84b9069f689f64af7e3ce900d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f47480b8acb41ff84b9069f689f64af7e3ce900d/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fthread_parker.rs?ref=f47480b8acb41ff84b9069f689f64af7e3ce900d", "patch": "@@ -49,19 +49,26 @@ impl Parker {\n             return;\n         }\n \n-        loop {\n-            // Wait for something to happen.\n-            if c::WaitOnAddress::is_available() {\n+        if c::WaitOnAddress::is_available() {\n+            loop {\n+                // Wait for something to happen, assuming it's still set to PARKED.\n                 c::WaitOnAddress(self.ptr(), &PARKED as *const _ as c::LPVOID, 1, c::INFINITE);\n-            } else {\n-                c::NtWaitForKeyedEvent(keyed_event_handle(), self.ptr(), 0, ptr::null_mut());\n-            }\n-            // Change NOTIFIED=>EMPTY and return in that case.\n-            if self.state.compare_and_swap(NOTIFIED, EMPTY, Acquire) == NOTIFIED {\n-                return;\n-            } else {\n-                // Spurious wake up. We loop to try again.\n+                // Change NOTIFIED=>EMPTY but leave PARKED alone.\n+                if self.state.compare_and_swap(NOTIFIED, EMPTY, Acquire) == NOTIFIED {\n+                    // Actually woken up by unpark().\n+                    return;\n+                } else {\n+                    // Spurious wake up. We loop to try again.\n+                }\n             }\n+        } else {\n+            // Wait for unpark() to produce this event.\n+            c::NtWaitForKeyedEvent(keyed_event_handle(), self.ptr(), 0, ptr::null_mut());\n+            // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n+            // Note that we don't just write EMPTY, but use swap() to also\n+            // include a acquire-ordered read to synchronize with unpark()'s\n+            // release-ordered write.\n+            self.state.swap(EMPTY, Acquire);\n         }\n     }\n \n@@ -77,9 +84,12 @@ impl Parker {\n         if c::WaitOnAddress::is_available() {\n             // Wait for something to happen, assuming it's still set to PARKED.\n             c::WaitOnAddress(self.ptr(), &PARKED as *const _ as c::LPVOID, 1, dur2timeout(timeout));\n-            // Change NOTIFIED=>EMPTY and return in that case.\n+            // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n+            // Note that we don't just write EMPTY, but use swap() to also\n+            // include a acquire-ordered read to synchronize with unpark()'s\n+            // release-ordered write.\n             if self.state.swap(EMPTY, Acquire) == NOTIFIED {\n-                return;\n+                // Actually woken up by unpark().\n             } else {\n                 // Timeout or spurious wake up.\n                 // We return either way, because we can't easily tell if it was the\n@@ -97,17 +107,17 @@ impl Parker {\n             };\n \n             // Wait for unpark() to produce this event.\n-            if c::NtWaitForKeyedEvent(handle, self.ptr(), 0, &mut timeout) == c::STATUS_SUCCESS {\n-                // Awoken by another thread.\n-                self.state.swap(EMPTY, Acquire);\n-            } else {\n-                // Not awoken by another thread (spurious or timeout).\n-                if self.state.swap(EMPTY, Acquire) == NOTIFIED {\n-                    // If the state is NOTIFIED, we *just* missed an unpark(),\n-                    // which is now waiting for us to wait for it.\n-                    // Wait for it to consume the event and unblock it.\n-                    c::NtWaitForKeyedEvent(handle, self.ptr(), 0, ptr::null_mut());\n-                }\n+            let unparked = c::NtWaitForKeyedEvent(handle, self.ptr(), 0, &mut timeout) == c::STATUS_SUCCESS;\n+\n+            // Set the state back to EMPTY (from either PARKED or NOTIFIED).\n+            let prev_state = self.state.swap(EMPTY, Acquire);\n+\n+            if !unparked && prev_state == NOTIFIED {\n+                // We were awoken by a timeout, not by unpark(), but the state\n+                // was set to NOTIFIED, which means we *just* missed an\n+                // unpark(), which is now blocked on us to wait for it.\n+                // Wait for it to consume the event and unblock that thread.\n+                c::NtWaitForKeyedEvent(handle, self.ptr(), 0, ptr::null_mut());\n             }\n         }\n     }"}]}