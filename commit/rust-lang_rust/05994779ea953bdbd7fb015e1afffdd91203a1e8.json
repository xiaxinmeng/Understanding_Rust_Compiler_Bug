{"sha": "05994779ea953bdbd7fb015e1afffdd91203a1e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1OTk0Nzc5ZWE5NTNiZGJkN2ZiMDE1ZTFhZmZmZGQ5MTIwM2ExZTg=", "commit": {"author": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-25T16:46:02Z"}, "committer": {"name": "Oliver Schneider", "email": "github35764891676564198441@oli-obk.de", "date": "2018-06-28T09:02:31Z"}, "message": "Move everything over from `middle::const_val` to `mir::interpret`", "tree": {"sha": "f7b6ff546d4ebbc02a5ce5722cb0cbf13714cc6b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7b6ff546d4ebbc02a5ce5722cb0cbf13714cc6b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05994779ea953bdbd7fb015e1afffdd91203a1e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05994779ea953bdbd7fb015e1afffdd91203a1e8", "html_url": "https://github.com/rust-lang/rust/commit/05994779ea953bdbd7fb015e1afffdd91203a1e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05994779ea953bdbd7fb015e1afffdd91203a1e8/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "html_url": "https://github.com/rust-lang/rust/commit/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac"}], "stats": {"total": 324, "additions": 158, "deletions": 166}, "files": [{"sha": "d3280a9130ea9a0aa7cfb93cb38c53b294d7541f", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -370,11 +370,11 @@ impl<'a, 'gcx> HashStable<StableHashingContext<'a>> for ty::FieldDef {\n }\n \n impl<'a, 'gcx> HashStable<StableHashingContext<'a>>\n-for ::middle::const_val::ConstVal<'gcx> {\n+for ::mir::interpret::ConstVal<'gcx> {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        use middle::const_val::ConstVal::*;\n+        use mir::interpret::ConstVal::*;\n \n         mem::discriminant(self).hash_stable(hcx, hasher);\n \n@@ -503,13 +503,13 @@ impl_stable_hash_for!(struct ty::Const<'tcx> {\n     val\n });\n \n-impl_stable_hash_for!(struct ::middle::const_val::ConstEvalErr<'tcx> {\n+impl_stable_hash_for!(struct ::mir::interpret::ConstEvalErr<'tcx> {\n     span,\n     stacktrace,\n     error\n });\n \n-impl_stable_hash_for!(struct ::middle::const_val::FrameInfo {\n+impl_stable_hash_for!(struct ::mir::interpret::FrameInfo {\n     span,\n     lint_root,\n     location"}, {"sha": "c500800a30f9cd9717788a492b6e4f7e664b7ff7", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -132,7 +132,6 @@ pub mod middle {\n     pub mod allocator;\n     pub mod borrowck;\n     pub mod expr_use_visitor;\n-    pub mod const_val;\n     pub mod cstore;\n     pub mod dataflow;\n     pub mod dead;"}, {"sha": "9177b70d1a4aadbce800987871a7bafcdbc2a70b", "filename": "src/librustc/middle/const_val.rs", "status": "removed", "additions": 0, "deletions": 125, "changes": 125, "blob_url": "https://github.com/rust-lang/rust/blob/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac/src%2Flibrustc%2Fmiddle%2Fconst_val.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_val.rs?ref=6005b0ad2fc1398d7d4f757cc96eb783ee8fc1ac", "patch": "@@ -1,125 +0,0 @@\n-// Copyright 2012-2016 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-use hir::def_id::DefId;\n-use ty;\n-use ty::subst::Substs;\n-use ty::query::TyCtxtAt;\n-use mir::interpret::ConstValue;\n-use errors::DiagnosticBuilder;\n-\n-use syntax_pos::Span;\n-use syntax::ast;\n-\n-use rustc_data_structures::sync::Lrc;\n-\n-pub type EvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n-\n-#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n-pub enum ConstVal<'tcx> {\n-    Unevaluated(DefId, &'tcx Substs<'tcx>),\n-    Value(ConstValue<'tcx>),\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct ConstEvalErr<'tcx> {\n-    pub span: Span,\n-    pub error: ::mir::interpret::EvalError<'tcx>,\n-    pub stacktrace: Vec<FrameInfo>,\n-}\n-\n-#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n-pub struct FrameInfo {\n-    pub span: Span,\n-    pub location: String,\n-    pub lint_root: Option<ast::NodeId>,\n-}\n-\n-impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n-    pub fn struct_error(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str)\n-        -> Option<DiagnosticBuilder<'tcx>>\n-    {\n-        self.struct_generic(tcx, message, None)\n-    }\n-\n-    pub fn report_as_error(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str\n-    ) {\n-        let err = self.struct_generic(tcx, message, None);\n-        if let Some(mut err) = err {\n-            err.emit();\n-        }\n-    }\n-\n-    pub fn report_as_lint(&self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str,\n-        lint_root: ast::NodeId,\n-    ) {\n-        let lint = self.struct_generic(\n-            tcx,\n-            message,\n-            Some(lint_root),\n-        );\n-        if let Some(mut lint) = lint {\n-            lint.emit();\n-        }\n-    }\n-\n-    fn struct_generic(\n-        &self,\n-        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-        message: &str,\n-        lint_root: Option<ast::NodeId>,\n-    ) -> Option<DiagnosticBuilder<'tcx>> {\n-        match self.error.kind {\n-            ::mir::interpret::EvalErrorKind::TypeckError |\n-            ::mir::interpret::EvalErrorKind::TooGeneric |\n-            ::mir::interpret::EvalErrorKind::CheckMatchError |\n-            ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n-            ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n-                inner.struct_generic(tcx, \"referenced constant\", lint_root)?.emit();\n-            },\n-            _ => {},\n-        }\n-        trace!(\"reporting const eval failure at {:?}\", self.span);\n-        let mut err = if let Some(lint_root) = lint_root {\n-            let node_id = self.stacktrace\n-                .iter()\n-                .rev()\n-                .filter_map(|frame| frame.lint_root)\n-                .next()\n-                .unwrap_or(lint_root);\n-            tcx.struct_span_lint_node(\n-                ::rustc::lint::builtin::CONST_ERR,\n-                node_id,\n-                tcx.span,\n-                message,\n-            )\n-        } else {\n-            struct_error(tcx, message)\n-        };\n-        err.span_label(self.span, self.error.to_string());\n-        for FrameInfo { span, location, .. } in &self.stacktrace {\n-            err.span_label(*span, format!(\"inside call to `{}`\", location));\n-        }\n-        Some(err)\n-    }\n-}\n-\n-pub fn struct_error<'a, 'gcx, 'tcx>(\n-    tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n-    msg: &str,\n-) -> DiagnosticBuilder<'tcx> {\n-    struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n-}"}, {"sha": "ab3fb0d2180ab84a6997370a1272f442eaeee7db", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 109, "deletions": 1, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -1,7 +1,6 @@\n use std::{fmt, env};\n \n use mir;\n-use middle::const_val::ConstEvalErr;\n use ty::{FnSig, Ty, layout};\n use ty::layout::{Size, Align};\n use rustc_data_structures::sync::Lrc;\n@@ -12,6 +11,115 @@ use super::{\n \n use backtrace::Backtrace;\n \n+\n+use hir::def_id::DefId;\n+use ty;\n+use ty::subst::Substs;\n+use ty::query::TyCtxtAt;\n+use mir::interpret::ConstValue;\n+use errors::DiagnosticBuilder;\n+\n+use syntax_pos::Span;\n+use syntax::ast;\n+\n+pub type ConstEvalResult<'tcx> = Result<&'tcx ty::Const<'tcx>, Lrc<ConstEvalErr<'tcx>>>;\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct ConstEvalErr<'tcx> {\n+    pub span: Span,\n+    pub error: ::mir::interpret::EvalError<'tcx>,\n+    pub stacktrace: Vec<FrameInfo>,\n+}\n+\n+#[derive(Clone, Debug, RustcEncodable, RustcDecodable)]\n+pub struct FrameInfo {\n+    pub span: Span,\n+    pub location: String,\n+    pub lint_root: Option<ast::NodeId>,\n+}\n+\n+impl<'a, 'gcx, 'tcx> ConstEvalErr<'tcx> {\n+    pub fn struct_error(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str)\n+        -> Option<DiagnosticBuilder<'tcx>>\n+    {\n+        self.struct_generic(tcx, message, None)\n+    }\n+\n+    pub fn report_as_error(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str\n+    ) {\n+        let err = self.struct_generic(tcx, message, None);\n+        if let Some(mut err) = err {\n+            err.emit();\n+        }\n+    }\n+\n+    pub fn report_as_lint(&self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: ast::NodeId,\n+    ) {\n+        let lint = self.struct_generic(\n+            tcx,\n+            message,\n+            Some(lint_root),\n+        );\n+        if let Some(mut lint) = lint {\n+            lint.emit();\n+        }\n+    }\n+\n+    fn struct_generic(\n+        &self,\n+        tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+        message: &str,\n+        lint_root: Option<ast::NodeId>,\n+    ) -> Option<DiagnosticBuilder<'tcx>> {\n+        match self.error.kind {\n+            ::mir::interpret::EvalErrorKind::TypeckError |\n+            ::mir::interpret::EvalErrorKind::TooGeneric |\n+            ::mir::interpret::EvalErrorKind::CheckMatchError |\n+            ::mir::interpret::EvalErrorKind::Layout(_) => return None,\n+            ::mir::interpret::EvalErrorKind::ReferencedConstant(ref inner) => {\n+                inner.struct_generic(tcx, \"referenced constant\", lint_root)?.emit();\n+            },\n+            _ => {},\n+        }\n+        trace!(\"reporting const eval failure at {:?}\", self.span);\n+        let mut err = if let Some(lint_root) = lint_root {\n+            let node_id = self.stacktrace\n+                .iter()\n+                .rev()\n+                .filter_map(|frame| frame.lint_root)\n+                .next()\n+                .unwrap_or(lint_root);\n+            tcx.struct_span_lint_node(\n+                ::rustc::lint::builtin::CONST_ERR,\n+                node_id,\n+                tcx.span,\n+                message,\n+            )\n+        } else {\n+            struct_error(tcx, message)\n+        };\n+        err.span_label(self.span, self.error.to_string());\n+        for FrameInfo { span, location, .. } in &self.stacktrace {\n+            err.span_label(*span, format!(\"inside call to `{}`\", location));\n+        }\n+        Some(err)\n+    }\n+}\n+\n+pub fn struct_error<'a, 'gcx, 'tcx>(\n+    tcx: TyCtxtAt<'a, 'gcx, 'tcx>,\n+    msg: &str,\n+) -> DiagnosticBuilder<'tcx> {\n+    struct_span_err!(tcx.sess, tcx.span, E0080, \"{}\", msg)\n+}\n+\n #[derive(Debug, Clone, RustcEncodable, RustcDecodable)]\n pub struct EvalError<'tcx> {\n     pub kind: EvalErrorKind<'tcx, u64>,"}, {"sha": "bd8970f5ea69c3aa1ee20ba0a0f8f4351abf63bf", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -8,7 +8,10 @@ macro_rules! err {\n mod error;\n mod value;\n \n-pub use self::error::{EvalError, EvalResult, EvalErrorKind, AssertMessage};\n+pub use self::error::{\n+    EvalError, EvalResult, EvalErrorKind, AssertMessage, ConstVal, ConstEvalErr, struct_error,\n+    FrameInfo, ConstEvalResult,\n+};\n \n pub use self::value::{Scalar, Value, ConstValue};\n "}, {"sha": "b17b774101769d60cbbf9f99b2daa3f2cbd92072", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -5,10 +5,18 @@ use ty;\n \n use super::{EvalResult, Pointer, PointerArithmetic, Allocation};\n \n+#[derive(Copy, Clone, Debug, Hash, RustcEncodable, RustcDecodable, Eq, PartialEq, Ord, PartialOrd)]\n+pub enum ConstVal<'tcx> {\n+    Value(ConstValue<'tcx>),\n+}\n+\n /// Represents a constant value in Rust. ByVal and ScalarPair are optimizations which\n /// matches Value's optimizations for easy conversions between these two types\n #[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord, RustcEncodable, RustcDecodable, Hash)]\n pub enum ConstValue<'tcx> {\n+    /// Never returned from the `const_eval` query, but the HIR contains these frequently in order\n+    /// to allow HIR creation to happen for everything before needing \n+    Unevaluated(DefId, &'tcx Substs<'tcx>),\n     /// Used only for types with layout::abi::Scalar ABI and ZSTs which use Scalar::undef()\n     Scalar(Scalar),\n     /// Used only for types with layout::abi::ScalarPair"}, {"sha": "31d5ef2e16036998bacb6b82a103127f80844517", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -2164,7 +2164,7 @@ impl<'tcx> Debug for Literal<'tcx> {\n \n /// Write a `ConstVal` in a way closer to the original source code than the `Debug` output.\n pub fn fmt_const_val<W: Write>(fmt: &mut W, const_val: &ty::Const) -> fmt::Result {\n-    use middle::const_val::ConstVal;\n+    use mir::interpret::ConstVal;\n     match const_val.val {\n         ConstVal::Unevaluated(..) => write!(fmt, \"{:?}\", const_val),\n         ConstVal::Value(val) => {"}, {"sha": "e97171c481f1dd25c04fea9efdb7280be14eb2f1", "filename": "src/librustc/traits/fulfill.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Ffulfill.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ffulfill.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -16,7 +16,7 @@ use rustc_data_structures::obligation_forest::{Error, ForestObligation, Obligati\n use rustc_data_structures::obligation_forest::{ObligationProcessor, ProcessResult};\n use std::marker::PhantomData;\n use hir::def_id::DefId;\n-use middle::const_val::ConstEvalErr;\n+use mir::interpret::ConstEvalErr;\n use mir::interpret::EvalErrorKind;\n \n use super::CodeAmbiguity;"}, {"sha": "0290f2e3b13f08e335a1319ca22b64108e9d9517", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -22,7 +22,7 @@ use hir;\n use hir::def_id::DefId;\n use infer::outlives::env::OutlivesEnvironment;\n use middle::region;\n-use middle::const_val::ConstEvalErr;\n+use mir::interpret::ConstEvalErr;\n use ty::subst::Substs;\n use ty::{self, AdtKind, Slice, Ty, TyCtxt, GenericParamDefKind, ToPredicate};\n use ty::error::{ExpectedFound, TypeError};"}, {"sha": "73d288761a0ce7f27b415c32658406d59a5fe557", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -28,7 +28,7 @@ use super::util;\n use hir::def_id::DefId;\n use infer::{InferCtxt, InferOk};\n use infer::type_variable::TypeVariableOrigin;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use mir::interpret::{GlobalId};\n use rustc_data_structures::snapshot_map::{Snapshot, SnapshotMap};\n use syntax::symbol::Symbol;"}, {"sha": "c33f028ae1e48076ba9240add14571d6da7bf894", "filename": "src/librustc/traits/query/normalize.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fquery%2Fnormalize.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -14,8 +14,7 @@\n \n use infer::{InferCtxt, InferOk};\n use infer::at::At;\n-use middle::const_val::ConstVal;\n-use mir::interpret::GlobalId;\n+use mir::interpret::{GlobalId, ConstVal};\n use traits::{Obligation, ObligationCause, PredicateObligation, Reveal};\n use traits::project::Normalized;\n use ty::{self, Ty, TyCtxt};"}, {"sha": "3c798648e19af09dbf95ccf04963ed7e4fe25e1e", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use ty::subst::Substs;\n use ty::{self, Ty, TypeFlags, TypeFoldable};\n "}, {"sha": "713aca38df9ecdb92180f83e7b2a705e5bf3feaa", "filename": "src/librustc/ty/fold.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffold.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -39,7 +39,7 @@\n //! These methods return true to indicate that the visitor has found what it is looking for\n //! and does not need to visit anything else.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use hir::def_id::DefId;\n use ty::{self, Binder, Ty, TyCtxt, TypeFlags};\n "}, {"sha": "4a9de92681a66e3fa5347dd655cb8679009f2994", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -2065,7 +2065,7 @@ impl<'a, 'gcx, 'tcx> AdtDef {\n                     })\n                 } else {\n                     info!(\"invalid enum discriminant: {:#?}\", val);\n-                    ::middle::const_val::struct_error(\n+                    ::mir::interpret::struct_error(\n                         tcx.at(tcx.def_span(expr_did)),\n                         \"constant evaluation of enum discriminant resulted in non-integer\",\n                     ).emit();"}, {"sha": "1095b943836ec76d5d7fb0d40b5e83db9adf450a", "filename": "src/librustc/ty/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -26,7 +26,7 @@ use middle::resolve_lifetime::{ResolveLifetimes, Region, ObjectLifetimeDefault};\n use middle::stability::{self, DeprecationEntry};\n use middle::lang_items::{LanguageItems, LangItem};\n use middle::exported_symbols::{SymbolExportLevel, ExportedSymbol};\n-use middle::const_val::EvalResult;\n+use mir::interpret::ConstEvalResult;\n use mir::mono::{CodegenUnit, Stats};\n use mir;\n use mir::interpret::{GlobalId, Allocation, ConstValue};\n@@ -230,7 +230,7 @@ define_queries! { <'tcx>\n     /// Results of evaluating const items or constants embedded in\n     /// other items (such as enum variant explicit discriminants).\n     [] fn const_eval: const_eval_dep_node(ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>)\n-        -> EvalResult<'tcx>,\n+        -> ConstEvalResult<'tcx>,\n \n     /// Converts a constant value to an constant allocation\n     [] fn const_value_to_allocation: const_value_to_allocation("}, {"sha": "407d4c51847b99e7efab2b9b4706263a8e26f25e", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -14,7 +14,7 @@\n //! type equality, etc.\n \n use hir::def_id::DefId;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use ty::subst::{Kind, UnpackedKind, Substs};\n use ty::{self, Ty, TyCtxt, TypeFoldable};\n use ty::error::{ExpectedFound, TypeError};"}, {"sha": "254f5b5eb7bb5cf0543d4ea471b164f356ff7518", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -13,7 +13,7 @@\n //! hand, though we've recently added some macros (e.g.,\n //! `BraceStructLiftImpl!`) to help with the tedium.\n \n-use middle::const_val::{ConstVal, ConstEvalErr};\n+use mir::interpret::{ConstVal, ConstEvalErr};\n use ty::{self, Lift, Ty, TyCtxt};\n use ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use rustc_data_structures::accumulate_vec::AccumulateVec;"}, {"sha": "e6c2cadc9bb4fe0e1f4ee02e2bdf232eb3cb99f2", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -12,7 +12,7 @@\n \n use hir::def_id::DefId;\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use middle::region;\n use polonius_engine::Atom;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "21cd9affce0a21f7fb9bbd2489278687e4a1f6b2", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -11,7 +11,7 @@\n //! An iterator over the type substructure.\n //! WARNING: this does not keep track of the region depth.\n \n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use ty::{self, Ty};\n use rustc_data_structures::small_vec::SmallVec;\n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;"}, {"sha": "d5e5ea527f255fd675062b09db3178cb64cdd412", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use hir::def_id::DefId;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use infer::InferCtxt;\n use ty::subst::Substs;\n use traits;"}, {"sha": "78bf89cb0d41ae845fcc076c8e499299d5c90b20", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -10,7 +10,7 @@\n \n use hir::def_id::DefId;\n use hir::map::definitions::DefPathData;\n-use middle::const_val::ConstVal;\n+use mir::interpret::ConstVal;\n use middle::region::{self, BlockRemainder};\n use ty::subst::{self, Subst};\n use ty::{BrAnon, BrEnv, BrFresh, BrNamed};"}, {"sha": "3f0d68f869a6a9a87389d76bcd8c4930ff16b8cd", "filename": "src/librustc_codegen_llvm/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbase.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -1381,7 +1381,7 @@ mod temp_stable_hash_impls {\n \n fn fetch_wasm_section(tcx: TyCtxt, id: DefId) -> (String, Vec<u8>) {\n     use rustc::mir::interpret::GlobalId;\n-    use rustc::middle::const_val::ConstVal;\n+    use rustc::mir::interpret::ConstVal;\n \n     info!(\"loading wasm section {:?}\", id);\n "}, {"sha": "3adef1c415ada2ad20f5206e2b0ac48268622bd5", "filename": "src/librustc_codegen_llvm/mir/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Fconstant.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{self, ValueRef};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr};\n+use rustc::mir::interpret::{ConstVal, ConstEvalErr};\n use rustc_mir::interpret::{read_target_uint, const_val_field};\n use rustc::hir::def_id::DefId;\n use rustc::mir;"}, {"sha": "21b67b2c3888fd0d44c2d4a9976429af25a1e268", "filename": "src/librustc_codegen_llvm/mir/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fmir%2Foperand.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n use llvm::{ValueRef, LLVMConstInBoundsGEP};\n-use rustc::middle::const_val::ConstEvalErr;\n+use rustc::mir::interpret::ConstEvalErr;\n use rustc::mir;\n use rustc::mir::interpret::ConstValue;\n use rustc::ty;"}, {"sha": "c04a011cb02f49badeaff50c46af8b872814191b", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -12,7 +12,7 @@ use self::Constructor::*;\n use self::Usefulness::*;\n use self::WitnessPreference::*;\n \n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::indexed_vec::Idx;"}, {"sha": "9975687f907db36182412730cc944cb456db3f7c", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -140,13 +140,13 @@ impl<'a, 'tcx> PatternContext<'a, 'tcx> {\n                 }\n                 PatternError::FloatBug => {\n                     // FIXME(#31407) this is only necessary because float parsing is buggy\n-                    ::rustc::middle::const_val::struct_error(\n+                    ::rustc::mir::interpret::struct_error(\n                         self.tcx.at(pat_span),\n                         \"could not evaluate float literal (see issue #31407)\",\n                     ).emit();\n                 }\n                 PatternError::NonConstPath(span) => {\n-                    ::rustc::middle::const_val::struct_error(\n+                    ::rustc::mir::interpret::struct_error(\n                         self.tcx.at(span),\n                         \"runtime values cannot be referenced in patterns\",\n                     ).emit();"}, {"sha": "e66539b3e5f727bbcc240365ff7242eccba7ecaf", "filename": "src/librustc_mir/hair/pattern/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -18,7 +18,7 @@ pub(crate) use self::check_match::check_match;\n \n use interpret::{const_val_field, const_variant_index, self};\n \n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n use rustc::mir::{fmt_const_val, Field, BorrowKind, Mutability};\n use rustc::mir::interpret::{Scalar, GlobalId, ConstValue, Value};\n use rustc::ty::{self, TyCtxt, AdtDef, Ty, Region};"}, {"sha": "57a703c783f7960897359a73f37b29357359f166", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -1,5 +1,5 @@\n use rustc::hir;\n-use rustc::middle::const_val::{ConstEvalErr};\n+use rustc::mir::interpret::{ConstEvalErr};\n use rustc::mir;\n use rustc::ty::{self, TyCtxt, Ty, Instance};\n use rustc::ty::layout::{self, LayoutOf, Primitive};\n@@ -427,7 +427,7 @@ pub fn const_val_field<'a, 'tcx>(\n     field: mir::Field,\n     value: ConstValue<'tcx>,\n     ty: Ty<'tcx>,\n-) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const_val_field: {:?}, {:?}, {:?}, {:?}\", instance, field, value, ty);\n     let mut ecx = mk_eval_cx(tcx, instance, param_env).unwrap();\n     let result = (|| {\n@@ -527,7 +527,7 @@ pub fn const_value_to_allocation_provider<'a, 'tcx>(\n pub fn const_eval_provider<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     key: ty::ParamEnvAnd<'tcx, GlobalId<'tcx>>,\n-) -> ::rustc::middle::const_val::EvalResult<'tcx> {\n+) -> ::rustc::mir::interpret::ConstEvalResult<'tcx> {\n     trace!(\"const eval: {:?}\", key);\n     let cid = key.value;\n     let def_id = cid.instance.def.def_id();"}, {"sha": "b3ec2459b05efc16eeab70e5eba61cf5b05e77d6", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -3,14 +3,14 @@ use std::fmt::Write;\n use rustc::hir::def_id::DefId;\n use rustc::hir::def::Def;\n use rustc::hir::map::definitions::DefPathData;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n use rustc::mir;\n use rustc::ty::layout::{self, Size, Align, HasDataLayout, IntegerExt, LayoutOf, TyLayout};\n use rustc::ty::subst::{Subst, Substs};\n use rustc::ty::{self, Ty, TyCtxt, TypeAndMut};\n use rustc::ty::query::TyCtxtAt;\n use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n-use rustc::middle::const_val::FrameInfo;\n+use rustc::mir::interpret::FrameInfo;\n use syntax::codemap::{self, Span};\n use syntax::ast::Mutability;\n use rustc::mir::interpret::{"}, {"sha": "1d4df97ce76ca30d7329e9a0a2df60d225690bec", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::ParamEnv;\n use rustc::ty::query::TyCtxtAt;\n use rustc::ty::layout::{self, Align, TargetDataLayout, Size};\n use syntax::ast::Mutability;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n \n use rustc_data_structures::fx::{FxHashSet, FxHashMap};\n use rustc::mir::interpret::{Pointer, AllocId, Allocation, AccessKind, Value,"}, {"sha": "59af0478073a576a7cc41bdef7d825381bc878d3", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -193,7 +193,7 @@ use rustc::hir::itemlikevisit::ItemLikeVisitor;\n \n use rustc::hir::map as hir_map;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n use rustc::mir::interpret::{AllocId, ConstValue};\n use rustc::middle::lang_items::{ExchangeMallocFnLangItem, StartFnLangItem};\n use rustc::ty::subst::Substs;"}, {"sha": "38b9ae3c3cec31018a149e6242fdecf2f984dfd6", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -17,7 +17,7 @@ use rustc::mir::{Constant, Literal, Location, Place, Mir, Operand, Rvalue, Local\n use rustc::mir::{NullOp, StatementKind, Statement, BasicBlock, LocalKind};\n use rustc::mir::{TerminatorKind, ClearCrossCrate, SourceInfo, BinOp, ProjectionElem};\n use rustc::mir::visit::{Visitor, PlaceContext};\n-use rustc::middle::const_val::{ConstVal, ConstEvalErr};\n+use rustc::mir::interpret::{ConstVal, ConstEvalErr};\n use rustc::ty::{TyCtxt, self, Instance};\n use rustc::mir::interpret::{Value, Scalar, GlobalId, EvalResult};\n use interpret::EvalContext;"}, {"sha": "c897e9dc1f6bc58c1f835e4642c195ad078bd5c4", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -20,7 +20,7 @@ use rustc_data_structures::indexed_vec::{IndexVec, Idx};\n use rustc_data_structures::fx::FxHashSet;\n use rustc::hir;\n use rustc::hir::def_id::DefId;\n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n use rustc::traits::{self, TraitEngine};\n use rustc::ty::{self, TyCtxt, Ty, TypeFoldable};\n use rustc::ty::cast::CastTy;"}, {"sha": "3cd434e08fa352a74f00c8484b8833b243a4ecf3", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05994779ea953bdbd7fb015e1afffdd91203a1e8/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=05994779ea953bdbd7fb015e1afffdd91203a1e8", "patch": "@@ -29,7 +29,7 @@ use syntax::symbol::keywords::{self, Keyword};\n use syntax::symbol::{Symbol, InternedString};\n use syntax_pos::{self, DUMMY_SP, Pos, FileName};\n \n-use rustc::middle::const_val::ConstVal;\n+use rustc::mir::interpret::ConstVal;\n use rustc::middle::privacy::AccessLevels;\n use rustc::middle::resolve_lifetime as rl;\n use rustc::ty::fold::TypeFolder;"}]}