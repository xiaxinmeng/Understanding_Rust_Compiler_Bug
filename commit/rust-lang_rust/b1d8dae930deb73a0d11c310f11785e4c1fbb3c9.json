{"sha": "b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "node_id": "C_kwDOAAsO6NoAKGIxZDhkYWU5MzBkZWI3M2EwZDExYzMxMGYxMTc4NWU0YzFmYmIzYzk", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2022-02-11T22:48:01Z"}, "committer": {"name": "Lauren\u021biu Nicola", "email": "lnicola@dend.ro", "date": "2022-03-04T05:45:51Z"}, "message": "Load hints for part of the file only", "tree": {"sha": "8b334246fc915ad774cf1aee6b937e4ccaff65ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b334246fc915ad774cf1aee6b937e4ccaff65ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "html_url": "https://github.com/rust-lang/rust/commit/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lnicola", "id": 308347, "node_id": "MDQ6VXNlcjMwODM0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/308347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lnicola", "html_url": "https://github.com/lnicola", "followers_url": "https://api.github.com/users/lnicola/followers", "following_url": "https://api.github.com/users/lnicola/following{/other_user}", "gists_url": "https://api.github.com/users/lnicola/gists{/gist_id}", "starred_url": "https://api.github.com/users/lnicola/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lnicola/subscriptions", "organizations_url": "https://api.github.com/users/lnicola/orgs", "repos_url": "https://api.github.com/users/lnicola/repos", "events_url": "https://api.github.com/users/lnicola/events{/privacy}", "received_events_url": "https://api.github.com/users/lnicola/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9c0c199e962ef90fe3bf152bc87ff96d5c2a9093", "url": "https://api.github.com/repos/rust-lang/rust/commits/9c0c199e962ef90fe3bf152bc87ff96d5c2a9093", "html_url": "https://github.com/rust-lang/rust/commit/9c0c199e962ef90fe3bf152bc87ff96d5c2a9093"}], "stats": {"total": 129, "additions": 108, "deletions": 21}, "files": [{"sha": "3dc72731cb9e580c297c28199d38eeb742da631e", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 95, "deletions": 18, "changes": 113, "blob_url": "https://github.com/rust-lang/rust/blob/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "patch": "@@ -5,7 +5,7 @@ use itertools::Itertools;\n use stdx::to_lower_snake_case;\n use syntax::{\n     ast::{self, AstNode, HasArgList, HasName, UnaryOp},\n-    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, TextRange, T,\n+    match_ast, Direction, NodeOrToken, SmolStr, SyntaxKind, SyntaxNode, TextRange, T,\n };\n \n use crate::FileId;\n@@ -58,32 +58,58 @@ pub struct InlayHint {\n pub(crate) fn inlay_hints(\n     db: &RootDatabase,\n     file_id: FileId,\n+    range_limit: Option<FileRange>,\n     config: &InlayHintsConfig,\n ) -> Vec<InlayHint> {\n     let _p = profile::span(\"inlay_hints\");\n     let sema = Semantics::new(db);\n     let file = sema.parse(file_id);\n     let file = file.syntax();\n \n-    let mut res = Vec::new();\n-\n-    for node in file.descendants() {\n-        if let Some(expr) = ast::Expr::cast(node.clone()) {\n-            get_chaining_hints(&mut res, &sema, config, &expr);\n-            match expr {\n-                ast::Expr::CallExpr(it) => {\n-                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n-                }\n-                ast::Expr::MethodCallExpr(it) => {\n-                    get_param_name_hints(&mut res, &sema, config, ast::Expr::from(it));\n+    let mut hints = Vec::new();\n+\n+    if let Some(range_limit) = range_limit {\n+        let range_limit = range_limit.range;\n+        match file.covering_element(range_limit) {\n+            NodeOrToken::Token(_) => return hints,\n+            NodeOrToken::Node(n) => {\n+                for node in n\n+                    .descendants()\n+                    .filter(|descendant| range_limit.contains_range(descendant.text_range()))\n+                {\n+                    get_hints(&mut hints, &sema, config, node);\n                 }\n-                _ => (),\n             }\n-        } else if let Some(it) = ast::IdentPat::cast(node.clone()) {\n-            get_bind_pat_hints(&mut res, &sema, config, &it);\n         }\n+    } else {\n+        for node in file.descendants() {\n+            get_hints(&mut hints, &sema, config, node);\n+        }\n+    }\n+\n+    hints\n+}\n+\n+fn get_hints(\n+    hints: &mut Vec<InlayHint>,\n+    sema: &Semantics<RootDatabase>,\n+    config: &InlayHintsConfig,\n+    node: SyntaxNode,\n+) {\n+    if let Some(expr) = ast::Expr::cast(node.clone()) {\n+        get_chaining_hints(hints, sema, config, &expr);\n+        match expr {\n+            ast::Expr::CallExpr(it) => {\n+                get_param_name_hints(hints, sema, config, ast::Expr::from(it));\n+            }\n+            ast::Expr::MethodCallExpr(it) => {\n+                get_param_name_hints(hints, sema, config, ast::Expr::from(it));\n+            }\n+            _ => (),\n+        }\n+    } else if let Some(it) = ast::IdentPat::cast(node) {\n+        get_bind_pat_hints(hints, sema, config, &it);\n     }\n-    res\n }\n \n fn get_chaining_hints(\n@@ -541,6 +567,8 @@ fn get_callable(\n #[cfg(test)]\n mod tests {\n     use expect_test::{expect, Expect};\n+    use ide_db::base_db::FileRange;\n+    use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n     use crate::{fixture, inlay_hints::InlayHintsConfig};\n@@ -604,7 +632,7 @@ mod tests {\n     fn check_with_config(config: InlayHintsConfig, ra_fixture: &str) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n         let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n-        let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n         let actual =\n             inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n         assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n@@ -613,7 +641,7 @@ mod tests {\n     #[track_caller]\n     fn check_expect(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n         let (analysis, file_id) = fixture::file(ra_fixture);\n-        let inlay_hints = analysis.inlay_hints(&config, file_id).unwrap();\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n         expect.assert_debug_eq(&inlay_hints)\n     }\n \n@@ -1045,6 +1073,55 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn check_hint_range_limit() {\n+        let fixture = r#\"\n+        //- minicore: fn, sized\n+        fn foo() -> impl Fn() { loop {} }\n+        fn foo1() -> impl Fn(f64) { loop {} }\n+        fn foo2() -> impl Fn(f64, f64) { loop {} }\n+        fn foo3() -> impl Fn(f64, f64) -> u32 { loop {} }\n+        fn foo4() -> &'static dyn Fn(f64, f64) -> u32 { loop {} }\n+        fn foo5() -> &'static dyn Fn(&'static dyn Fn(f64, f64) -> u32, f64) -> u32 { loop {} }\n+        fn foo6() -> impl Fn(f64, f64) -> u32 + Sized { loop {} }\n+        fn foo7() -> *const (impl Fn(f64, f64) -> u32 + Sized) { loop {} }\n+\n+        fn main() {\n+            let foo = foo();\n+            let foo = foo1();\n+            let foo = foo2();\n+            let foo = foo3();\n+             // ^^^ impl Fn(f64, f64) -> u32\n+            let foo = foo4();\n+             // ^^^ &dyn Fn(f64, f64) -> u32\n+            let foo = foo5();\n+            let foo = foo6();\n+            let foo = foo7();\n+        }\n+        \"#;\n+        let (analysis, file_id) = fixture::file(fixture);\n+        let expected = extract_annotations(&*analysis.file_text(file_id).unwrap());\n+        let inlay_hints = analysis\n+            .inlay_hints(\n+                &InlayHintsConfig {\n+                    parameter_hints: false,\n+                    type_hints: true,\n+                    chaining_hints: false,\n+                    hide_named_constructor_hints: false,\n+                    max_length: None,\n+                },\n+                file_id,\n+                Some(FileRange {\n+                    file_id,\n+                    range: TextRange::new(TextSize::from(500), TextSize::from(600)),\n+                }),\n+            )\n+            .unwrap();\n+        let actual =\n+            inlay_hints.into_iter().map(|it| (it.range, it.label.to_string())).collect::<Vec<_>>();\n+        assert_eq!(expected, actual, \"\\nExpected:\\n{:#?}\\n\\nActual:\\n{:#?}\", expected, actual);\n+    }\n+\n     #[test]\n     fn fn_hints_ptr_rpit_fn_parentheses() {\n         check_types("}, {"sha": "1acaaaccf0da7e27663c99f9f0e57e67ca13cc8d", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "patch": "@@ -358,8 +358,9 @@ impl Analysis {\n         &self,\n         config: &InlayHintsConfig,\n         file_id: FileId,\n+        range: Option<FileRange>,\n     ) -> Cancellable<Vec<InlayHint>> {\n-        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, config))\n+        self.with_db(|db| inlay_hints::inlay_hints(db, file_id, range, config))\n     }\n \n     /// Returns the set of folding ranges."}, {"sha": "64f2bc4423327f9ade82aad139489d3ef201c064", "filename": "crates/ide/src/static_index.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Fstatic_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Fide%2Fsrc%2Fstatic_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fstatic_index.rs?ref=b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "patch": "@@ -112,6 +112,7 @@ impl StaticIndex<'_> {\n                     max_length: Some(25),\n                 },\n                 file_id,\n+                None,\n             )\n             .unwrap();\n         // hovers"}, {"sha": "70ffec7ed27fe7313274b9846937c56c6687badc", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "patch": "@@ -1318,11 +1318,18 @@ pub(crate) fn handle_inlay_hints(\n     params: InlayHintsParams,\n ) -> Result<Vec<InlayHint>> {\n     let _p = profile::span(\"handle_inlay_hints\");\n-    let file_id = from_proto::file_id(&snap, &params.text_document.uri)?;\n+    let document_uri = &params.text_document.uri;\n+    let file_id = from_proto::file_id(&snap, document_uri)?;\n     let line_index = snap.file_line_index(file_id)?;\n+    let range = params\n+        .range\n+        .map(|range| {\n+            from_proto::file_range(&snap, TextDocumentIdentifier::new(document_uri.to_owned()), range)\n+        })\n+        .transpose()?;\n     Ok(snap\n         .analysis\n-        .inlay_hints(&snap.config.inlay_hints(), file_id)?\n+        .inlay_hints(&snap.config.inlay_hints(), file_id, range)?\n         .into_iter()\n         .map(|it| to_proto::inlay_hint(&line_index, it))\n         .collect())"}, {"sha": "973769a7207b464adeaf5f0454f668d9c86d6b8a", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b1d8dae930deb73a0d11c310f11785e4c1fbb3c9/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=b1d8dae930deb73a0d11c310f11785e4c1fbb3c9", "patch": "@@ -240,6 +240,7 @@ impl Request for InlayHints {\n #[serde(rename_all = \"camelCase\")]\n pub struct InlayHintsParams {\n     pub text_document: TextDocumentIdentifier,\n+    pub range: Option<lsp_types::Range>,\n }\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone, Serialize, Deserialize)]"}]}