{"sha": "ebce5e923c3702b0fce3cda2873cc19edf9afaca", "node_id": "C_kwDOAAsO6NoAKGViY2U1ZTkyM2MzNzAyYjBmY2UzY2RhMjg3M2NjMTllZGY5YWZhY2E", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T23:41:22Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-10-28T23:41:22Z"}, "message": "Auto merge of #13513 - Veykril:vscode-workspace-changes, r=Veykril\n\nProperly handle vscode workspace changes", "tree": {"sha": "df7e13ef83777b951e29ed04a1a6734bfde826cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df7e13ef83777b951e29ed04a1a6734bfde826cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ebce5e923c3702b0fce3cda2873cc19edf9afaca", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ebce5e923c3702b0fce3cda2873cc19edf9afaca", "html_url": "https://github.com/rust-lang/rust/commit/ebce5e923c3702b0fce3cda2873cc19edf9afaca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ebce5e923c3702b0fce3cda2873cc19edf9afaca/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7610ee913936bf2540c41238a630de81937a89b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7610ee913936bf2540c41238a630de81937a89b3", "html_url": "https://github.com/rust-lang/rust/commit/7610ee913936bf2540c41238a630de81937a89b3"}, {"sha": "fccf8eb1fd582a4539e6a149fe376685caf43b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/fccf8eb1fd582a4539e6a149fe376685caf43b22", "html_url": "https://github.com/rust-lang/rust/commit/fccf8eb1fd582a4539e6a149fe376685caf43b22"}], "stats": {"total": 112, "additions": 73, "deletions": 39}, "files": [{"sha": "3e366525ee295392fcdef55b019aa6d511ba5bea", "filename": "editors/code/src/ctx.ts", "status": "modified", "additions": 60, "deletions": 7, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/ebce5e923c3702b0fce3cda2873cc19edf9afaca/editors%2Fcode%2Fsrc%2Fctx.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ebce5e923c3702b0fce3cda2873cc19edf9afaca/editors%2Fcode%2Fsrc%2Fctx.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fctx.ts?ref=ebce5e923c3702b0fce3cda2873cc19edf9afaca", "patch": "@@ -4,11 +4,15 @@ import * as ra from \"./lsp_ext\";\n \n import { Config, substituteVariablesInEnv, substituteVSCodeVariables } from \"./config\";\n import { createClient } from \"./client\";\n-import { isRustEditor, log, RustEditor } from \"./util\";\n+import { isRustDocument, isRustEditor, log, RustEditor } from \"./util\";\n import { ServerStatusParams } from \"./lsp_ext\";\n import { PersistentState } from \"./persistent_state\";\n import { bootstrap } from \"./bootstrap\";\n \n+// We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n+// only those are in use. We use \"Empty\" to represent these scenarios\n+// (r-a still somewhat works with Live Share, because commands are tunneled to the host)\n+\n export type Workspace =\n     | { kind: \"Empty\" }\n     | {\n@@ -19,6 +23,24 @@ export type Workspace =\n           files: vscode.TextDocument[];\n       };\n \n+export function fetchWorkspace(): Workspace {\n+    const folders = (vscode.workspace.workspaceFolders || []).filter(\n+        (folder) => folder.uri.scheme === \"file\"\n+    );\n+    const rustDocuments = vscode.workspace.textDocuments.filter((document) =>\n+        isRustDocument(document)\n+    );\n+\n+    return folders.length === 0\n+        ? rustDocuments.length === 0\n+            ? { kind: \"Empty\" }\n+            : {\n+                  kind: \"Detached Files\",\n+                  files: rustDocuments,\n+              }\n+        : { kind: \"Workspace Folder\" };\n+}\n+\n export type CommandFactory = {\n     enabled: (ctx: CtxInit) => Cmd;\n     disabled?: (ctx: Ctx) => Cmd;\n@@ -75,6 +97,31 @@ export class Ctx {\n         this.commandDisposables.forEach((disposable) => disposable.dispose());\n     }\n \n+    async onWorkspaceFolderChanges() {\n+        const workspace = fetchWorkspace();\n+        if (workspace.kind === \"Detached Files\" && this.workspace.kind === \"Detached Files\") {\n+            if (workspace.files !== this.workspace.files) {\n+                if (this.client?.isRunning()) {\n+                    // Ideally we wouldn't need to tear down the server here, but currently detached files\n+                    // are only specified at server start\n+                    await this.stopAndDispose();\n+                    await this.start();\n+                }\n+                return;\n+            }\n+        }\n+        if (workspace.kind === \"Workspace Folder\" && this.workspace.kind === \"Workspace Folder\") {\n+            return;\n+        }\n+        if (workspace.kind === \"Empty\") {\n+            await this.stopAndDispose();\n+            return;\n+        }\n+        if (this.client?.isRunning()) {\n+            await this.restart();\n+        }\n+    }\n+\n     private async getOrCreateClient() {\n         if (this.workspace.kind === \"Empty\") {\n             return;\n@@ -143,8 +190,8 @@ export class Ctx {\n         return this._client;\n     }\n \n-    async activate() {\n-        log.info(\"Activating language client\");\n+    async start() {\n+        log.info(\"Starting language client\");\n         const client = await this.getOrCreateClient();\n         if (!client) {\n             return;\n@@ -153,20 +200,26 @@ export class Ctx {\n         this.updateCommands();\n     }\n \n-    async deactivate() {\n+    async restart() {\n+        // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n+        await this.stopAndDispose();\n+        await this.start();\n+    }\n+\n+    async stop() {\n         if (!this._client) {\n             return;\n         }\n-        log.info(\"Deactivating language client\");\n+        log.info(\"Stopping language client\");\n         this.updateCommands(\"disable\");\n         await this._client.stop();\n     }\n \n-    async stop() {\n+    async stopAndDispose() {\n         if (!this._client) {\n             return;\n         }\n-        log.info(\"Stopping language client\");\n+        log.info(\"Disposing language client\");\n         this.updateCommands(\"disable\");\n         await this.disposeClient();\n     }"}, {"sha": "e76b657c1bfb50605b1e77f85c329bc08ce06090", "filename": "editors/code/src/main.ts", "status": "modified", "additions": 13, "deletions": 32, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ebce5e923c3702b0fce3cda2873cc19edf9afaca/editors%2Fcode%2Fsrc%2Fmain.ts", "raw_url": "https://github.com/rust-lang/rust/raw/ebce5e923c3702b0fce3cda2873cc19edf9afaca/editors%2Fcode%2Fsrc%2Fmain.ts", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fsrc%2Fmain.ts?ref=ebce5e923c3702b0fce3cda2873cc19edf9afaca", "patch": "@@ -2,8 +2,7 @@ import * as vscode from \"vscode\";\n import * as lc from \"vscode-languageclient/node\";\n \n import * as commands from \"./commands\";\n-import { CommandFactory, Ctx, Workspace } from \"./ctx\";\n-import { isRustDocument } from \"./util\";\n+import { CommandFactory, Ctx, fetchWorkspace } from \"./ctx\";\n import { activateTaskProvider } from \"./tasks\";\n import { setContextValue } from \"./util\";\n \n@@ -31,28 +30,7 @@ export async function activate(\n             .then(() => {}, console.error);\n     }\n \n-    // We only support local folders, not eg. Live Share (`vlsl:` scheme), so don't activate if\n-    // only those are in use.\n-    // (r-a still somewhat works with Live Share, because commands are tunneled to the host)\n-    const folders = (vscode.workspace.workspaceFolders || []).filter(\n-        (folder) => folder.uri.scheme === \"file\"\n-    );\n-    const rustDocuments = vscode.workspace.textDocuments.filter((document) =>\n-        isRustDocument(document)\n-    );\n-\n-    // FIXME: This can change over time\n-    const workspace: Workspace =\n-        folders.length === 0\n-            ? rustDocuments.length === 0\n-                ? { kind: \"Empty\" }\n-                : {\n-                      kind: \"Detached Files\",\n-                      files: rustDocuments,\n-                  }\n-            : { kind: \"Workspace Folder\" };\n-\n-    const ctx = new Ctx(context, createCommands(), workspace);\n+    const ctx = new Ctx(context, createCommands(), fetchWorkspace());\n     // VS Code doesn't show a notification when an extension fails to activate\n     // so we do it ourselves.\n     const api = await activateServer(ctx).catch((err) => {\n@@ -70,6 +48,11 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.pushExtCleanup(activateTaskProvider(ctx.config));\n     }\n \n+    vscode.workspace.onDidChangeWorkspaceFolders(\n+        async (_) => ctx.onWorkspaceFolderChanges(),\n+        null,\n+        ctx.subscriptions\n+    );\n     vscode.workspace.onDidChangeConfiguration(\n         async (_) => {\n             await ctx.client?.sendNotification(\"workspace/didChangeConfiguration\", {\n@@ -80,7 +63,7 @@ async function activateServer(ctx: Ctx): Promise<RustAnalyzerExtensionApi> {\n         ctx.subscriptions\n     );\n \n-    await ctx.activate();\n+    await ctx.start();\n     return ctx;\n }\n \n@@ -93,27 +76,25 @@ function createCommands(): Record<string, CommandFactory> {\n         reload: {\n             enabled: (ctx) => async () => {\n                 void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n-                // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n-                await ctx.stop();\n-                await ctx.activate();\n+                await ctx.restart();\n             },\n             disabled: (ctx) => async () => {\n                 void vscode.window.showInformationMessage(\"Reloading rust-analyzer...\");\n-                await ctx.activate();\n+                await ctx.start();\n             },\n         },\n         startServer: {\n             enabled: (ctx) => async () => {\n-                await ctx.activate();\n+                await ctx.start();\n             },\n             disabled: (ctx) => async () => {\n-                await ctx.activate();\n+                await ctx.start();\n             },\n         },\n         stopServer: {\n             enabled: (ctx) => async () => {\n                 // FIXME: We should re-use the client, that is ctx.deactivate() if none of the configs have changed\n-                await ctx.stop();\n+                await ctx.stopAndDispose();\n                 ctx.setServerStatus({\n                     health: \"stopped\",\n                 });"}]}