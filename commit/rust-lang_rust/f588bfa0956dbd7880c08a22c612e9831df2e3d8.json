{"sha": "f588bfa0956dbd7880c08a22c612e9831df2e3d8", "node_id": "C_kwDOAAsO6NoAKGY1ODhiZmEwOTU2ZGJkNzg4MGMwOGEyMmM2MTJlOTgzMWRmMmUzZDg", "commit": {"author": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-07-30T22:04:59Z"}, "committer": {"name": "Afonso Bordado", "email": "afonsobordado@az8.co", "date": "2022-07-30T22:04:59Z"}, "message": "Assume host target in get_file_name", "tree": {"sha": "28e24c3c42c656a993b980125f167ea516f4c640", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/28e24c3c42c656a993b980125f167ea516f4c640"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f588bfa0956dbd7880c08a22c612e9831df2e3d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f588bfa0956dbd7880c08a22c612e9831df2e3d8", "html_url": "https://github.com/rust-lang/rust/commit/f588bfa0956dbd7880c08a22c612e9831df2e3d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f588bfa0956dbd7880c08a22c612e9831df2e3d8/comments", "author": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "committer": {"login": "afonso360", "id": 1357143, "node_id": "MDQ6VXNlcjEzNTcxNDM=", "avatar_url": "https://avatars.githubusercontent.com/u/1357143?v=4", "gravatar_id": "", "url": "https://api.github.com/users/afonso360", "html_url": "https://github.com/afonso360", "followers_url": "https://api.github.com/users/afonso360/followers", "following_url": "https://api.github.com/users/afonso360/following{/other_user}", "gists_url": "https://api.github.com/users/afonso360/gists{/gist_id}", "starred_url": "https://api.github.com/users/afonso360/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/afonso360/subscriptions", "organizations_url": "https://api.github.com/users/afonso360/orgs", "repos_url": "https://api.github.com/users/afonso360/repos", "events_url": "https://api.github.com/users/afonso360/events{/privacy}", "received_events_url": "https://api.github.com/users/afonso360/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5d7936650d174515730458b29b83e99153365d89", "url": "https://api.github.com/repos/rust-lang/rust/commits/5d7936650d174515730458b29b83e99153365d89", "html_url": "https://github.com/rust-lang/rust/commit/5d7936650d174515730458b29b83e99153365d89"}], "stats": {"total": 80, "additions": 38, "deletions": 42}, "files": [{"sha": "6e4b57cf4d3097824aab670f1c9e35fbf04b4432", "filename": "build_system/build_sysroot.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fbuild_sysroot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fbuild_sysroot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fbuild_sysroot.rs?ref=f588bfa0956dbd7880c08a22c612e9831df2e3d8", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn build_sysroot(\n     fs::create_dir_all(target_dir.join(\"lib\")).unwrap();\n \n     // Copy the backend\n-    let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\", host_triple);\n+    let cg_clif_dylib = get_file_name(\"rustc_codegen_cranelift\", \"dylib\");\n     let cg_clif_dylib_path = target_dir\n         .join(if cfg!(windows) {\n             // Windows doesn't have rpath support, so the cg_clif dylib needs to be next to the\n@@ -37,7 +37,7 @@ pub(crate) fn build_sysroot(\n \n     // Build and copy rustc and cargo wrappers\n     for wrapper in [\"rustc-clif\", \"cargo-clif\"] {\n-        let wrapper_name = get_wrapper_file_name(wrapper, \"bin\", host_triple);\n+        let wrapper_name = get_wrapper_file_name(wrapper, \"bin\");\n \n         let mut build_cargo_wrapper_cmd = Command::new(\"rustc\");\n         build_cargo_wrapper_cmd"}, {"sha": "4772a5a77784e5d8f1395c18cba0b75c16bee937", "filename": "build_system/mod.rs", "status": "modified", "additions": 28, "deletions": 30, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fmod.rs?ref=f588bfa0956dbd7880c08a22c612e9831df2e3d8", "patch": "@@ -48,42 +48,13 @@ pub fn main() {\n     // The target dir is expected in the default location. Guard against the user changing it.\n     env::set_var(\"CARGO_TARGET_DIR\", \"target\");\n \n-\n-    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n-        host_triple\n-    } else if let Some(host_triple) = config::get_value(\"host\") {\n-        host_triple\n-    } else {\n-        rustc_info::get_host_triple()\n-    };\n-    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n-        if target_triple != \"\" {\n-            target_triple\n-        } else {\n-            host_triple.clone() // Empty target triple can happen on GHA\n-        }\n-    } else if let Some(target_triple) = config::get_value(\"target\") {\n-        target_triple\n-    } else {\n-        host_triple.clone()\n-    };\n-\n-    if target_triple.ends_with(\"-msvc\") {\n-        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n-        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n-        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n-        eprintln!(\"set the global default target to MinGW\");\n-        process::exit(1);\n-    }\n-\n-\n     let mut args = env::args().skip(1);\n     let command = match args.next().as_deref() {\n         Some(\"prepare\") => {\n             if args.next().is_some() {\n                 arg_error!(\"./y.rs prepare doesn't expect arguments\");\n             }\n-            prepare::prepare(&host_triple);\n+            prepare::prepare();\n             process::exit(0);\n         }\n         Some(\"build\") => Command::Build,\n@@ -124,6 +95,33 @@ pub fn main() {\n     }\n     target_dir = std::env::current_dir().unwrap().join(target_dir);\n \n+    let host_triple = if let Ok(host_triple) = std::env::var(\"HOST_TRIPLE\") {\n+        host_triple\n+    } else if let Some(host_triple) = config::get_value(\"host\") {\n+        host_triple\n+    } else {\n+        rustc_info::get_host_triple()\n+    };\n+    let target_triple = if let Ok(target_triple) = std::env::var(\"TARGET_TRIPLE\") {\n+        if target_triple != \"\" {\n+            target_triple\n+        } else {\n+            host_triple.clone() // Empty target triple can happen on GHA\n+        }\n+    } else if let Some(target_triple) = config::get_value(\"target\") {\n+        target_triple\n+    } else {\n+        host_triple.clone()\n+    };\n+\n+    if target_triple.ends_with(\"-msvc\") {\n+        eprintln!(\"The MSVC toolchain is not yet supported by rustc_codegen_cranelift.\");\n+        eprintln!(\"Switch to the MinGW toolchain for Windows support.\");\n+        eprintln!(\"Hint: You can use `rustup set default-host x86_64-pc-windows-gnu` to\");\n+        eprintln!(\"set the global default target to MinGW\");\n+        process::exit(1);\n+    }\n+\n     let cg_clif_build_dir = build_backend::build_backend(channel, &host_triple, use_unstable_features);\n     match command {\n         Command::Test => {"}, {"sha": "7e0fd182d984a9a1111c7a90a3caf0f8140980ae", "filename": "build_system/prepare.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fprepare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Fprepare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Fprepare.rs?ref=f588bfa0956dbd7880c08a22c612e9831df2e3d8", "patch": "@@ -8,7 +8,7 @@ use std::process::Command;\n use super::rustc_info::{get_file_name, get_rustc_path, get_rustc_version};\n use super::utils::{copy_dir_recursively, spawn_and_wait};\n \n-pub(crate) fn prepare(host_triple: &str) {\n+pub(crate) fn prepare() {\n     prepare_sysroot();\n \n     eprintln!(\"[INSTALL] hyperfine\");\n@@ -49,8 +49,8 @@ pub(crate) fn prepare(host_triple: &str) {\n     build_cmd.arg(\"build\").env_remove(\"CARGO_TARGET_DIR\").current_dir(\"simple-raytracer\");\n     spawn_and_wait(build_cmd);\n     fs::copy(\n-        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\", host_triple)),\n-        Path::new(\"simple-raytracer\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\", host_triple)),\n+        Path::new(\"simple-raytracer/target/debug\").join(get_file_name(\"main\", \"bin\")),\n+        Path::new(\"simple-raytracer\").join(get_file_name(\"raytracer_cg_llvm\", \"bin\")),\n     )\n     .unwrap();\n }"}, {"sha": "913b589afcc87f658510195969fd03aef5d683e2", "filename": "build_system/rustc_info.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Frustc_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Frustc_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Frustc_info.rs?ref=f588bfa0956dbd7880c08a22c612e9831df2e3d8", "patch": "@@ -43,16 +43,14 @@ pub(crate) fn get_default_sysroot() -> PathBuf {\n     Path::new(String::from_utf8(default_sysroot).unwrap().trim()).to_owned()\n }\n \n-pub(crate) fn get_file_name(crate_name: &str, crate_type: &str, target: &str) -> String {\n+pub(crate) fn get_file_name(crate_name: &str, crate_type: &str) -> String {\n     let file_name = Command::new(\"rustc\")\n         .stderr(Stdio::inherit())\n         .args(&[\n             \"--crate-name\",\n             crate_name,\n             \"--crate-type\",\n             crate_type,\n-            \"--target\",\n-            target,\n             \"--print\",\n             \"file-names\",\n             \"-\",\n@@ -69,8 +67,8 @@ pub(crate) fn get_file_name(crate_name: &str, crate_type: &str, target: &str) ->\n /// Similar to `get_file_name`, but converts any dashes (`-`) in the `crate_name` to\n /// underscores (`_`). This is specially made for the the rustc and cargo wrappers\n /// which have a dash in the name, and that is not allowed in a crate name.\n-pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str, target: &str) -> String {\n+pub(crate) fn get_wrapper_file_name(crate_name: &str, crate_type: &str) -> String {\n     let crate_name = crate_name.replace('-', \"_\");\n-    let wrapper_name = get_file_name(&crate_name, crate_type, target);\n+    let wrapper_name = get_file_name(&crate_name, crate_type);\n     wrapper_name.replace('_', \"-\")\n }"}, {"sha": "2b4ae39a75ea874ef144ef16b7bda10f35fe1091", "filename": "build_system/tests.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f588bfa0956dbd7880c08a22c612e9831df2e3d8/build_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build_system%2Ftests.rs?ref=f588bfa0956dbd7880c08a22c612e9831df2e3d8", "patch": "@@ -415,7 +415,7 @@ impl TestRunner {\n     {\n         let mut rustc_clif = self.root_dir.clone();\n         rustc_clif.push(\"build\");\n-        rustc_clif.push(get_wrapper_file_name(\"rustc-clif\", \"bin\", &self.host_triple));\n+        rustc_clif.push(get_wrapper_file_name(\"rustc-clif\", \"bin\"));\n \n         let mut cmd = Command::new(rustc_clif);\n         cmd.args(self.rust_flags.split_whitespace());\n@@ -474,7 +474,7 @@ impl TestRunner {\n     {\n         let mut cargo_clif = self.root_dir.clone();\n         cargo_clif.push(\"build\");\n-        cargo_clif.push(get_wrapper_file_name(\"cargo-clif\", \"bin\", &self.host_triple));\n+        cargo_clif.push(get_wrapper_file_name(\"cargo-clif\", \"bin\"));\n \n         let mut cmd = Command::new(cargo_clif);\n         cmd.args(args);"}]}