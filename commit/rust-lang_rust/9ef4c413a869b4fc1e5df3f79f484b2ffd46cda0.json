{"sha": "9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZjRjNDEzYTg2OWI0ZmMxZTVkZjNmNzlmNDg0YjJmZmQ0NmNkYTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T06:18:20Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-06-18T06:18:20Z"}, "message": "std::rt: Check exchange count on exit", "tree": {"sha": "3886fd7db31c56542604489666250758f6c789a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3886fd7db31c56542604489666250758f6c789a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "html_url": "https://github.com/rust-lang/rust/commit/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3281f5b63792a57d2cea6e93446e63f44e1e3ea0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3281f5b63792a57d2cea6e93446e63f44e1e3ea0", "html_url": "https://github.com/rust-lang/rust/commit/3281f5b63792a57d2cea6e93446e63f44e1e3ea0"}], "stats": {"total": 43, "additions": 37, "deletions": 6}, "files": [{"sha": "9f273fc8e653563136d0e4e9bc3499a25d4f8f6a", "filename": "src/libstd/rt/global_heap.rs", "status": "modified", "additions": 31, "deletions": 6, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0/src%2Flibstd%2Frt%2Fglobal_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0/src%2Flibstd%2Frt%2Fglobal_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fglobal_heap.rs?ref=9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "patch": "@@ -14,7 +14,7 @@ use c_malloc = libc::malloc;\n use c_free = libc::free;\n use managed::raw::{BoxHeaderRepr, BoxRepr};\n use cast::transmute;\n-use unstable::intrinsics::{atomic_xadd,atomic_xsub};\n+use unstable::intrinsics::{atomic_xadd,atomic_xsub, atomic_load};\n use ptr::null;\n use intrinsic::TyDesc;\n \n@@ -34,8 +34,7 @@ pub unsafe fn malloc(td: *TypeDesc, size: uint) -> *c_void {\n     box.header.prev = null();\n     box.header.next = null();\n \n-    let exchange_count = &mut *exchange_count_ptr();\n-    atomic_xadd(exchange_count, 1);\n+    inc_count();\n \n     return transmute(box);\n }\n@@ -48,21 +47,47 @@ pub unsafe fn malloc_raw(size: uint) -> *c_void {\n     if p.is_null() {\n         fail!(\"Failure in malloc_raw: result ptr is null\");\n     }\n+    inc_count();\n     p\n }\n \n pub unsafe fn free(ptr: *c_void) {\n-    let exchange_count = &mut *exchange_count_ptr();\n-    atomic_xsub(exchange_count, 1);\n-\n     assert!(ptr.is_not_null());\n+    dec_count();\n     c_free(ptr);\n }\n ///Thin wrapper around libc::free, as with exchange_alloc::malloc_raw\n pub unsafe fn free_raw(ptr: *c_void) {\n+    assert!(ptr.is_not_null());\n+    dec_count();\n     c_free(ptr);\n }\n \n+fn inc_count() {\n+    unsafe {\n+        let exchange_count = &mut *exchange_count_ptr();\n+        atomic_xadd(exchange_count, 1);\n+    }\n+}\n+\n+fn dec_count() {\n+    unsafe {\n+        let exchange_count = &mut *exchange_count_ptr();\n+        atomic_xsub(exchange_count, 1);\n+    }\n+}\n+\n+pub fn cleanup() {\n+    unsafe {\n+        let count_ptr = exchange_count_ptr();\n+        let allocations = atomic_load(&*count_ptr);\n+        if allocations != 0 {\n+            abort!(\"exchange heap not empty on exit\\\n+                    %i dangling allocations\", allocations);\n+        }\n+    }\n+}\n+\n fn get_box_size(body_size: uint, body_align: uint) -> uint {\n     let header_size = size_of::<BoxHeaderRepr>();\n     // FIXME (#2699): This alignment calculation is suspicious. Is it right?"}, {"sha": "0a269aa8767e0969eadc3e9957913f42dde8ff1d", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=9ef4c413a869b4fc1e5df3f79f484b2ffd46cda0", "patch": "@@ -176,6 +176,8 @@ pub fn start(_argc: int, _argv: **u8, crate_map: *u8, main: ~fn()) -> int {\n     sched.enqueue_task(main_task);\n     sched.run();\n \n+    cleanup();\n+\n     return 0;\n }\n \n@@ -185,6 +187,10 @@ pub fn init(crate_map: *u8) {\n     logging::init(crate_map);\n }\n \n+pub fn cleanup() {\n+    global_heap::cleanup();\n+}\n+\n /// Possible contexts in which Rust code may be executing.\n /// Different runtime services are available depending on context.\n /// Mostly used for determining if we're using the new scheduler"}]}