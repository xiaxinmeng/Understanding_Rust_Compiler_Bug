{"sha": "45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1Njc3ZWViZjI4NmEzOWMyOWQ5Y2Q3ODllNzZlYTFjZjJkMmIxZDA=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-22T20:09:20Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2013-03-23T10:57:30Z"}, "message": "replace impls with `deriving` where applicable", "tree": {"sha": "04b5fbbe19377386b540c192fba0568463da46c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/04b5fbbe19377386b540c192fba0568463da46c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "html_url": "https://github.com/rust-lang/rust/commit/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2b83defa4a48303db642f38e2a9f24460756721d", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b83defa4a48303db642f38e2a9f24460756721d", "html_url": "https://github.com/rust-lang/rust/commit/2b83defa4a48303db642f38e2a9f24460756721d"}], "stats": {"total": 70, "additions": 7, "deletions": 63}, "files": [{"sha": "350a1de629cd4d370ca22a6c78354e35b803ca5b", "filename": "src/libcore/pipes.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpipes.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -82,7 +82,6 @@ bounded and unbounded protocols allows for less code duplication.\n \n */\n \n-use cmp::Eq;\n use cast::{forget, reinterpret_cast, transmute};\n use cell::Cell;\n use either::{Either, Left, Right};\n@@ -103,20 +102,14 @@ macro_rules! move_it (\n )\n \n #[doc(hidden)]\n+#[deriving(Eq)]\n enum State {\n     Empty,\n     Full,\n     Blocked,\n     Terminated\n }\n \n-impl Eq for State {\n-    fn eq(&self, other: &State) -> bool {\n-        ((*self) as uint) == ((*other) as uint)\n-    }\n-    fn ne(&self, other: &State) -> bool { !(*self).eq(other) }\n-}\n-\n pub struct BufferHeader {\n     // Tracks whether this buffer needs to be freed. We can probably\n     // get away with restricting it to 0 or 1, if we're careful."}, {"sha": "349a10bb809830f4dc36d6f8fb719883679128bf", "filename": "src/libcore/task/mod.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Ftask%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Ftask%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fmod.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -72,21 +72,12 @@ pub enum Task {\n  * If you wish for this result's delivery to block until all linked and/or\n  * children tasks complete, recommend using a result future.\n  */\n+#[deriving(Eq)]\n pub enum TaskResult {\n     Success,\n     Failure,\n }\n \n-impl Eq for TaskResult {\n-    fn eq(&self, other: &TaskResult) -> bool {\n-        match ((*self), (*other)) {\n-            (Success, Success) | (Failure, Failure) => true,\n-            (Success, _) | (Failure, _) => false\n-        }\n-    }\n-    fn ne(&self, other: &TaskResult) -> bool { !(*self).eq(other) }\n-}\n-\n /// Scheduler modes\n #[deriving(Eq)]\n pub enum SchedMode {"}, {"sha": "a69655cd1255a86051759ff5acb2fa24ec767097", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -2533,12 +2533,7 @@ impl<A:Copy> iter::CopyableNonstrictIter<A> for @[A] {\n impl<A:Clone> Clone for ~[A] {\n     #[inline]\n     fn clone(&self) -> ~[A] {\n-        let mut dolly = ~[];\n-        vec::reserve(&mut dolly, self.len());\n-        for self.each |item| {\n-            dolly.push(item.clone());\n-        }\n-        return dolly;\n+        self.map(|item| item.clone())\n     }\n }\n "}, {"sha": "7d20eb7b891febfb0c97b92e55ed8c6491ac836e", "filename": "src/libstd/bigint.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Fbigint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Fbigint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbigint.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -557,13 +557,9 @@ priv fn get_radix_base(radix: uint) -> (uint, uint) {\n }\n \n /// A Sign is a BigInt's composing element.\n+#[deriving(Eq)]\n pub enum Sign { Minus, Zero, Plus }\n \n-impl Eq for Sign {\n-    fn eq(&self, other: &Sign) -> bool { self.cmp(other) == 0 }\n-    fn ne(&self, other: &Sign) -> bool { self.cmp(other) != 0 }\n-}\n-\n impl Ord for Sign {\n     fn lt(&self, other: &Sign) -> bool { self.cmp(other) <  0 }\n     fn le(&self, other: &Sign) -> bool { self.cmp(other) <= 0 }"}, {"sha": "a9b9b2977cded41ce233c62dc2504e64abe17cb1", "filename": "src/libstd/json.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fjson.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -35,6 +35,7 @@ pub enum Json {\n pub type List = ~[Json];\n pub type Object = LinearMap<~str, Json>;\n \n+#[deriving(Eq)]\n pub struct Error {\n     line: uint,\n     col: uint,\n@@ -1060,15 +1061,6 @@ impl Ord for Json {\n     fn gt(&self, other: &Json) -> bool { (*other).lt(&(*self))  }\n }\n \n-impl Eq for Error {\n-    fn eq(&self, other: &Error) -> bool {\n-        (*self).line == other.line &&\n-        (*self).col == other.col &&\n-        (*self).msg == other.msg\n-    }\n-    fn ne(&self, other: &Error) -> bool { !(*self).eq(other) }\n-}\n-\n trait ToJson { fn to_json(&self) -> Json; }\n \n impl ToJson for Json {"}, {"sha": "9ac302ed890cad0dd9b3a6c3feb2cf38b38f80d0", "filename": "src/libstd/time.rs", "status": "modified", "additions": 2, "deletions": 25, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45677eebf286a39c29d9cd789e76ea1cf2d2b1d0/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=45677eebf286a39c29d9cd789e76ea1cf2d2b1d0", "patch": "@@ -40,6 +40,7 @@ pub mod rustrt {\n /// A record specifying a time value in seconds and nanoseconds.\n #[auto_encode]\n #[auto_decode]\n+#[deriving(Eq)]\n pub struct Timespec { sec: i64, nsec: i32 }\n \n /*\n@@ -57,13 +58,6 @@ pub impl Timespec {\n     }\n }\n \n-impl Eq for Timespec {\n-    fn eq(&self, other: &Timespec) -> bool {\n-        self.sec == other.sec && self.nsec == other.nsec\n-    }\n-    fn ne(&self, other: &Timespec) -> bool { !self.eq(other) }\n-}\n-\n impl Ord for Timespec {\n     fn lt(&self, other: &Timespec) -> bool {\n         self.sec < other.sec ||\n@@ -117,6 +111,7 @@ pub fn tzset() {\n \n #[auto_encode]\n #[auto_decode]\n+#[deriving(Eq)]\n pub struct Tm {\n     tm_sec: i32, // seconds after the minute ~[0-60]\n     tm_min: i32, // minutes after the hour ~[0-59]\n@@ -132,24 +127,6 @@ pub struct Tm {\n     tm_nsec: i32, // nanoseconds\n }\n \n-impl Eq for Tm {\n-    fn eq(&self, other: &Tm) -> bool {\n-        self.tm_sec == (*other).tm_sec &&\n-        self.tm_min == (*other).tm_min &&\n-        self.tm_hour == (*other).tm_hour &&\n-        self.tm_mday == (*other).tm_mday &&\n-        self.tm_mon == (*other).tm_mon &&\n-        self.tm_year == (*other).tm_year &&\n-        self.tm_wday == (*other).tm_wday &&\n-        self.tm_yday == (*other).tm_yday &&\n-        self.tm_isdst == (*other).tm_isdst &&\n-        self.tm_gmtoff == (*other).tm_gmtoff &&\n-        self.tm_zone == (*other).tm_zone &&\n-        self.tm_nsec == (*other).tm_nsec\n-    }\n-    fn ne(&self, other: &Tm) -> bool { !self.eq(other) }\n-}\n-\n pub fn empty_tm() -> Tm {\n     Tm {\n         tm_sec: 0_i32,"}]}