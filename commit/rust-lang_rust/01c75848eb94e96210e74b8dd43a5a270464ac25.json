{"sha": "01c75848eb94e96210e74b8dd43a5a270464ac25", "node_id": "C_kwDOAAsO6NoAKDAxYzc1ODQ4ZWI5NGU5NjIxMGU3NGI4ZGQ0M2E1YTI3MDQ2NGFjMjU", "commit": {"author": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-01-12T18:48:13Z"}, "committer": {"name": "Philipp Krones", "email": "hello@philkrones.com", "date": "2023-01-12T18:48:13Z"}, "message": "Merge commit '7f27e2e74ef957baa382dc05cf08df6368165c74' into clippyup", "tree": {"sha": "073089b3b8c1d49c37f00b9b50b61feb079675ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/073089b3b8c1d49c37f00b9b50b61feb079675ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01c75848eb94e96210e74b8dd43a5a270464ac25", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEij1UXJ/PQTcb99vTHKDfKvWdaKUFAmPAVe4ACgkQHKDfKvWd\naKURZhAAsIw9zTJ5BOU9ITtjT8MxSyRCk8kwg0j+tGm6QGYSQeSjXNB6Oby4rcEB\nnkx1igEjXnteCc9UbEaiH5V3riygPC5TIKdfkiFyMLo+tkkMV6FABRGPxAbeshgR\n2MXXbrn+JvhQiPaf25ZdwQOvZsqYcZ/NTZoQR89W4hKAA7uzo4DIxA0CwKEnaw72\nQsbhdF0cW+OQQ+7LTN7aE7KIpulUXu0zUuL0nyNgN2O0qZmis42uba0R6lyqRyxS\n/dvzijvIZproXCieVZziAKvEXRHRLbUoNi1XjVxwQhYBWaBRud2lM0rTczMVmUDm\nPwq+3mPs2IJTWsiYhb/VIUKmfjTCdLYcWPOZTcS/Pbq4yDuv5uD6vnxnC+lYlOdg\nHOV8PmWnJedCwsiPpFSxWNx8bJ1hAJtFtKNuwCctlH3rs+vncEP0JsHw/5fKt1ct\nPlMdCknNU5LyDSTzpJtn4PcfS8qxR1B8/SHd8u2+nR3irca1To67iwCroVllKutg\nkIjREnI/DiXi9ohD9OI7EgS2MD776OqWHbfwXAGF2tzN435r+9LHtWA8Ox+TUimb\nugf6hZmc0CldYG1nyKc/iY86glOVtqRVByyD1Thmv48oYKaWXRfKHDz+R8do5zI1\n6zrHj9EWz+2/HWLQnlTHbBbPaDTm8dC0yK/sgkX6nL2NImQbS/8=\n=jfZq\n-----END PGP SIGNATURE-----", "payload": "tree 073089b3b8c1d49c37f00b9b50b61feb079675ee\nparent 222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9\nparent 7f27e2e74ef957baa382dc05cf08df6368165c74\nauthor Philipp Krones <hello@philkrones.com> 1673549293 +0100\ncommitter Philipp Krones <hello@philkrones.com> 1673549293 +0100\n\nMerge commit '7f27e2e74ef957baa382dc05cf08df6368165c74' into clippyup\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01c75848eb94e96210e74b8dd43a5a270464ac25", "html_url": "https://github.com/rust-lang/rust/commit/01c75848eb94e96210e74b8dd43a5a270464ac25", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01c75848eb94e96210e74b8dd43a5a270464ac25/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "url": "https://api.github.com/repos/rust-lang/rust/commits/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "html_url": "https://github.com/rust-lang/rust/commit/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9"}, {"sha": "7f27e2e74ef957baa382dc05cf08df6368165c74", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f27e2e74ef957baa382dc05cf08df6368165c74", "html_url": "https://github.com/rust-lang/rust/commit/7f27e2e74ef957baa382dc05cf08df6368165c74"}], "stats": {"total": 2729, "additions": 1879, "deletions": 850}, "files": [{"sha": "798782340ee7d1581425c994f73573cdcd01fb76", "filename": "src/tools/clippy/.github/driver.sh", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2F.github%2Fdriver.sh?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -17,6 +17,13 @@ test \"$sysroot\" = $desired_sysroot\n sysroot=$(SYSROOT=$desired_sysroot ./target/debug/clippy-driver --print sysroot)\n test \"$sysroot\" = $desired_sysroot\n \n+# Check that the --sysroot argument is only passed once (SYSROOT is ignored)\n+(\n+    cd rustc_tools_util\n+    touch src/lib.rs\n+    SYSROOT=/tmp RUSTFLAGS=\"--sysroot=$(rustc --print sysroot)\" ../target/debug/cargo-clippy clippy --verbose\n+)\n+\n # Make sure this isn't set - clippy-driver should cope without it\n unset CARGO_MANIFEST_DIR\n "}, {"sha": "8e31e8f0d9815083d09b9fe971c471871e41248d", "filename": "src/tools/clippy/CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2FCHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2FCHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2FCHANGELOG.md?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -4137,6 +4137,7 @@ Released 2018-09-13\n [`derive_hash_xor_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_hash_xor_eq\n [`derive_ord_xor_partial_ord`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_ord_xor_partial_ord\n [`derive_partial_eq_without_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq\n+[`derived_hash_with_manual_eq`]: https://rust-lang.github.io/rust-clippy/master/index.html#derived_hash_with_manual_eq\n [`disallowed_macros`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_macros\n [`disallowed_method`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_method\n [`disallowed_methods`]: https://rust-lang.github.io/rust-clippy/master/index.html#disallowed_methods"}, {"sha": "cce888b17d4d3fe6f914b52cceb2f930fb44b777", "filename": "src/tools/clippy/book/src/installation.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Finstallation.md", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Finstallation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fbook%2Fsrc%2Finstallation.md?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,6 +1,6 @@\n # Installation\n \n-If you're using `rustup` to install and manage you're Rust toolchains, Clippy is\n+If you're using `rustup` to install and manage your Rust toolchains, Clippy is\n usually **already installed**. In that case you can skip this chapter and go to\n the [Usage] chapter.\n "}, {"sha": "e70488165b99bb2dec1fc07cb0e3d6d8ce800ff7", "filename": "src/tools/clippy/clippy_dev/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_dev%2Fsrc%2Flib.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -5,6 +5,9 @@\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n #![warn(rust_2018_idioms, unused_lifetimes)]\n \n+// The `rustc_driver` crate seems to be required in order to use the `rust_lexer` crate.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n extern crate rustc_lexer;\n \n use std::path::PathBuf;"}, {"sha": "9d98a6bab71073efed82eefdc75a6fa33d091e9b", "filename": "src/tools/clippy/clippy_lints/src/box_default.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fbox_default.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -8,7 +8,7 @@ use rustc_hir::{\n     Block, Expr, ExprKind, Local, Node, QPath, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n-use rustc_middle::lint::in_external_macro;\n+use rustc_middle::{lint::in_external_macro, ty::print::with_forced_trimmed_paths};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::sym;\n \n@@ -59,7 +59,7 @@ impl LateLintPass<'_> for BoxDefault {\n                 if is_plain_default(arg_path) || given_type(cx, expr) {\n                     \"Box::default()\".into()\n                 } else {\n-                    format!(\"Box::<{arg_ty}>::default()\")\n+                    with_forced_trimmed_paths!(format!(\"Box::<{arg_ty}>::default()\"))\n                 },\n                 Applicability::MachineApplicable\n             );"}, {"sha": "f10c35cde52a1e9b0eed124ae7b1609efbc3d625", "filename": "src/tools/clippy/clippy_lints/src/copies.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fcopies.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -525,7 +525,11 @@ fn check_for_warn_of_moved_symbol(cx: &LateContext<'_>, symbols: &[(HirId, Symbo\n             .iter()\n             .filter(|&&(_, name)| !name.as_str().starts_with('_'))\n             .any(|&(_, name)| {\n-                let mut walker = ContainsName { name, result: false };\n+                let mut walker = ContainsName {\n+                    name,\n+                    result: false,\n+                    cx,\n+                };\n \n                 // Scan block\n                 block"}, {"sha": "799e71e847a9fcf60fc176d86e413f5aa7de57a1", "filename": "src/tools/clippy/clippy_lints/src/dbg_macro.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdbg_macro.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -10,11 +10,11 @@ use rustc_span::sym;\n \n declare_clippy_lint! {\n     /// ### What it does\n-    /// Checks for usage of dbg!() macro.\n+    /// Checks for usage of the [`dbg!`](https://doc.rust-lang.org/std/macro.dbg.html) macro.\n     ///\n     /// ### Why is this bad?\n-    /// `dbg!` macro is intended as a debugging tool. It\n-    /// should not be in version control.\n+    /// The `dbg!` macro is intended as a debugging tool. It should not be present in released\n+    /// software or committed to a version control system.\n     ///\n     /// ### Example\n     /// ```rust,ignore\n@@ -91,8 +91,8 @@ impl LateLintPass<'_> for DbgMacro {\n                 cx,\n                 DBG_MACRO,\n                 macro_call.span,\n-                \"`dbg!` macro is intended as a debugging tool\",\n-                \"ensure to avoid having uses of it in version control\",\n+                \"the `dbg!` macro is intended as a debugging tool\",\n+                \"remove the invocation before committing it to a version control system\",\n                 suggestion,\n                 applicability,\n             );"}, {"sha": "91ca73633f062d7e0f1c3e10ac31b3ef085ec297", "filename": "src/tools/clippy/clippy_lints/src/declared_lints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdeclared_lints.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -111,7 +111,7 @@ pub(crate) static LINTS: &[&crate::LintInfo] = &[\n     crate::dereference::NEEDLESS_BORROW_INFO,\n     crate::dereference::REF_BINDING_TO_REFERENCE_INFO,\n     crate::derivable_impls::DERIVABLE_IMPLS_INFO,\n-    crate::derive::DERIVE_HASH_XOR_EQ_INFO,\n+    crate::derive::DERIVED_HASH_WITH_MANUAL_EQ_INFO,\n     crate::derive::DERIVE_ORD_XOR_PARTIAL_ORD_INFO,\n     crate::derive::DERIVE_PARTIAL_EQ_WITHOUT_EQ_INFO,\n     crate::derive::EXPL_IMPL_CLONE_ON_COPY_INFO,"}, {"sha": "a04693f4637ab9697d0e14171eed47f7867cd81f", "filename": "src/tools/clippy/clippy_lints/src/default.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdefault.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -11,6 +11,7 @@ use rustc_hir::def::Res;\n use rustc_hir::{Block, Expr, ExprKind, PatKind, QPath, Stmt, StmtKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n+use rustc_middle::ty::print::with_forced_trimmed_paths;\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::Span;\n@@ -98,9 +99,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             if let ty::Adt(def, ..) = expr_ty.kind();\n             if !is_from_proc_macro(cx, expr);\n             then {\n-                // TODO: Work out a way to put \"whatever the imported way of referencing\n-                // this type in this file\" rather than a fully-qualified type.\n-                let replacement = format!(\"{}::default()\", cx.tcx.def_path_str(def.did()));\n+                let replacement = with_forced_trimmed_paths!(format!(\"{}::default()\", cx.tcx.def_path_str(def.did())));\n                 span_lint_and_sugg(\n                     cx,\n                     DEFAULT_TRAIT_ACCESS,\n@@ -170,7 +169,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n                 // find out if and which field was set by this `consecutive_statement`\n                 if let Some((field_ident, assign_rhs)) = field_reassigned_by_stmt(consecutive_statement, binding_name) {\n                     // interrupt and cancel lint if assign_rhs references the original binding\n-                    if contains_name(binding_name, assign_rhs) {\n+                    if contains_name(binding_name, assign_rhs, cx) {\n                         cancel_lint = true;\n                         break;\n                     }"}, {"sha": "05f2b92c037093affa39e21fe5ac1dc058528cb6", "filename": "src/tools/clippy/clippy_lints/src/dereference.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdereference.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1282,10 +1282,10 @@ fn referent_used_exactly_once<'tcx>(\n             possible_borrowers.push((body_owner_local_def_id, PossibleBorrowerMap::new(cx, mir)));\n         }\n         let possible_borrower = &mut possible_borrowers.last_mut().unwrap().1;\n-        // If `place.local` were not included here, the `copyable_iterator::warn` test would fail. The\n-        // reason is that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible\n-        // borrower of itself. See the comment in that method for an explanation as to why.\n-        possible_borrower.at_most_borrowers(cx, &[local, place.local], place.local, location)\n+        // If `only_borrowers` were used here, the `copyable_iterator::warn` test would fail. The reason is\n+        // that `PossibleBorrowerVisitor::visit_terminator` considers `place.local` a possible borrower of\n+        // itself. See the comment in that method for an explanation as to why.\n+        possible_borrower.bounded_borrowers(&[local], &[local, place.local], place.local, location)\n             && used_exactly_once(mir, place.local).unwrap_or(false)\n     } else {\n         false"}, {"sha": "bc18e2e5ed5fdcd25e1d824dc79547e0efa8a738", "filename": "src/tools/clippy/clippy_lints/src/derivable_impls.rs", "status": "modified", "additions": 117, "deletions": 44, "changes": 161, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderivable_impls.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,12 +1,15 @@\n use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::msrvs::{self, Msrv};\n+use clippy_utils::source::indent_of;\n use clippy_utils::{is_default_equivalent, peel_blocks};\n use rustc_errors::Applicability;\n use rustc_hir::{\n-    def::{DefKind, Res},\n-    Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, TyKind,\n+    def::{CtorKind, CtorOf, DefKind, Res},\n+    Body, Expr, ExprKind, GenericArg, Impl, ImplItemKind, Item, ItemKind, Node, PathSegment, QPath, Ty, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n-use rustc_session::{declare_lint_pass, declare_tool_lint};\n+use rustc_middle::ty::{AdtDef, DefIdTree};\n+use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::sym;\n \n declare_clippy_lint! {\n@@ -51,7 +54,18 @@ declare_clippy_lint! {\n     \"manual implementation of the `Default` trait which is equal to a derive\"\n }\n \n-declare_lint_pass!(DerivableImpls => [DERIVABLE_IMPLS]);\n+pub struct DerivableImpls {\n+    msrv: Msrv,\n+}\n+\n+impl DerivableImpls {\n+    #[must_use]\n+    pub fn new(msrv: Msrv) -> Self {\n+        DerivableImpls { msrv }\n+    }\n+}\n+\n+impl_lint_pass!(DerivableImpls => [DERIVABLE_IMPLS]);\n \n fn is_path_self(e: &Expr<'_>) -> bool {\n     if let ExprKind::Path(QPath::Resolved(_, p)) = e.kind {\n@@ -61,6 +75,98 @@ fn is_path_self(e: &Expr<'_>) -> bool {\n     }\n }\n \n+fn check_struct<'tcx>(\n+    cx: &LateContext<'tcx>,\n+    item: &'tcx Item<'_>,\n+    self_ty: &Ty<'_>,\n+    func_expr: &Expr<'_>,\n+    adt_def: AdtDef<'_>,\n+) {\n+    if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n+        if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {\n+            for arg in a.args {\n+                if !matches!(arg, GenericArg::Lifetime(_)) {\n+                    return;\n+                }\n+            }\n+        }\n+    }\n+    let should_emit = match peel_blocks(func_expr).kind {\n+        ExprKind::Tup(fields) => fields.iter().all(|e| is_default_equivalent(cx, e)),\n+        ExprKind::Call(callee, args) if is_path_self(callee) => args.iter().all(|e| is_default_equivalent(cx, e)),\n+        ExprKind::Struct(_, fields, _) => fields.iter().all(|ef| is_default_equivalent(cx, ef.expr)),\n+        _ => false,\n+    };\n+\n+    if should_emit {\n+        let struct_span = cx.tcx.def_span(adt_def.did());\n+        span_lint_and_then(cx, DERIVABLE_IMPLS, item.span, \"this `impl` can be derived\", |diag| {\n+            diag.span_suggestion_hidden(\n+                item.span,\n+                \"remove the manual implementation...\",\n+                String::new(),\n+                Applicability::MachineApplicable,\n+            );\n+            diag.span_suggestion(\n+                struct_span.shrink_to_lo(),\n+                \"...and instead derive it\",\n+                \"#[derive(Default)]\\n\".to_string(),\n+                Applicability::MachineApplicable,\n+            );\n+        });\n+    }\n+}\n+\n+fn check_enum<'tcx>(cx: &LateContext<'tcx>, item: &'tcx Item<'_>, func_expr: &Expr<'_>, adt_def: AdtDef<'_>) {\n+    if_chain! {\n+        if let ExprKind::Path(QPath::Resolved(None, p)) = &peel_blocks(func_expr).kind;\n+        if let Res::Def(DefKind::Ctor(CtorOf::Variant, CtorKind::Const), id) = p.res;\n+        if let variant_id = cx.tcx.parent(id);\n+        if let Some(variant_def) = adt_def.variants().iter().find(|v| v.def_id == variant_id);\n+        if variant_def.fields.is_empty();\n+        if !variant_def.is_field_list_non_exhaustive();\n+\n+        then {\n+            let enum_span = cx.tcx.def_span(adt_def.did());\n+            let indent_enum = indent_of(cx, enum_span).unwrap_or(0);\n+            let variant_span = cx.tcx.def_span(variant_def.def_id);\n+            let indent_variant = indent_of(cx, variant_span).unwrap_or(0);\n+            span_lint_and_then(\n+                cx,\n+                DERIVABLE_IMPLS,\n+                item.span,\n+                \"this `impl` can be derived\",\n+                |diag| {\n+                    diag.span_suggestion_hidden(\n+                        item.span,\n+                        \"remove the manual implementation...\",\n+                        String::new(),\n+                        Applicability::MachineApplicable\n+                    );\n+                    diag.span_suggestion(\n+                        enum_span.shrink_to_lo(),\n+                        \"...and instead derive it...\",\n+                        format!(\n+                            \"#[derive(Default)]\\n{indent}\",\n+                            indent = \" \".repeat(indent_enum),\n+                        ),\n+                        Applicability::MachineApplicable\n+                    );\n+                    diag.span_suggestion(\n+                        variant_span.shrink_to_lo(),\n+                        \"...and mark the default variant\",\n+                        format!(\n+                            \"#[default]\\n{indent}\",\n+                            indent = \" \".repeat(indent_variant),\n+                        ),\n+                        Applicability::MachineApplicable\n+                    );\n+                }\n+            );\n+        }\n+    }\n+}\n+\n impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n     fn check_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx Item<'_>) {\n         if_chain! {\n@@ -83,49 +189,16 @@ impl<'tcx> LateLintPass<'tcx> for DerivableImpls {\n             if !attrs.iter().any(|attr| attr.doc_str().is_some());\n             if let child_attrs = cx.tcx.hir().attrs(impl_item_hir);\n             if !child_attrs.iter().any(|attr| attr.doc_str().is_some());\n-            if adt_def.is_struct();\n-            then {\n-                if let TyKind::Path(QPath::Resolved(_, p)) = self_ty.kind {\n-                    if let Some(PathSegment { args: Some(a), .. }) = p.segments.last() {\n-                        for arg in a.args {\n-                            if !matches!(arg, GenericArg::Lifetime(_)) {\n-                                return;\n-                            }\n-                        }\n-                    }\n-                }\n-                let should_emit = match peel_blocks(func_expr).kind {\n-                    ExprKind::Tup(fields) => fields.iter().all(|e| is_default_equivalent(cx, e)),\n-                    ExprKind::Call(callee, args)\n-                        if is_path_self(callee) => args.iter().all(|e| is_default_equivalent(cx, e)),\n-                    ExprKind::Struct(_, fields, _) => fields.iter().all(|ef| is_default_equivalent(cx, ef.expr)),\n-                    _ => false,\n-                };\n \n-                if should_emit {\n-                    let struct_span = cx.tcx.def_span(adt_def.did());\n-                    span_lint_and_then(\n-                        cx,\n-                        DERIVABLE_IMPLS,\n-                        item.span,\n-                        \"this `impl` can be derived\",\n-                        |diag| {\n-                            diag.span_suggestion_hidden(\n-                                item.span,\n-                                \"remove the manual implementation...\",\n-                                String::new(),\n-                                Applicability::MachineApplicable\n-                            );\n-                            diag.span_suggestion(\n-                                struct_span.shrink_to_lo(),\n-                                \"...and instead derive it\",\n-                                \"#[derive(Default)]\\n\".to_string(),\n-                                Applicability::MachineApplicable\n-                            );\n-                        }\n-                    );\n+            then {\n+                if adt_def.is_struct() {\n+                    check_struct(cx, item, self_ty, func_expr, adt_def);\n+                } else if adt_def.is_enum() && self.msrv.meets(msrvs::DEFAULT_ENUM_ATTRIBUTE) {\n+                    check_enum(cx, item, func_expr, adt_def);\n                 }\n             }\n         }\n     }\n+\n+    extract_msrv_attr!(LateContext);\n }"}, {"sha": "f4b15e0916dbf47bca1aa427e5d46f35d9bfa45a", "filename": "src/tools/clippy/clippy_lints/src/derive.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fderive.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -14,8 +14,8 @@ use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::hir::nested_filter;\n use rustc_middle::traits::Reveal;\n use rustc_middle::ty::{\n-    self, Binder, BoundConstness, Clause, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind, TraitPredicate,\n-    Ty, TyCtxt,\n+    self, Binder, BoundConstness, Clause, GenericArgKind, GenericParamDefKind, ImplPolarity, ParamEnv, PredicateKind,\n+    TraitPredicate, Ty, TyCtxt,\n };\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n@@ -46,7 +46,7 @@ declare_clippy_lint! {\n     /// }\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n-    pub DERIVE_HASH_XOR_EQ,\n+    pub DERIVED_HASH_WITH_MANUAL_EQ,\n     correctness,\n     \"deriving `Hash` but implementing `PartialEq` explicitly\"\n }\n@@ -197,7 +197,7 @@ declare_clippy_lint! {\n \n declare_lint_pass!(Derive => [\n     EXPL_IMPL_CLONE_ON_COPY,\n-    DERIVE_HASH_XOR_EQ,\n+    DERIVED_HASH_WITH_MANUAL_EQ,\n     DERIVE_ORD_XOR_PARTIAL_ORD,\n     UNSAFE_DERIVE_DESERIALIZE,\n     DERIVE_PARTIAL_EQ_WITHOUT_EQ\n@@ -226,7 +226,7 @@ impl<'tcx> LateLintPass<'tcx> for Derive {\n     }\n }\n \n-/// Implementation of the `DERIVE_HASH_XOR_EQ` lint.\n+/// Implementation of the `DERIVED_HASH_WITH_MANUAL_EQ` lint.\n fn check_hash_peq<'tcx>(\n     cx: &LateContext<'tcx>,\n     span: Span,\n@@ -243,7 +243,7 @@ fn check_hash_peq<'tcx>(\n             cx.tcx.for_each_relevant_impl(peq_trait_def_id, ty, |impl_id| {\n                 let peq_is_automatically_derived = cx.tcx.has_attr(impl_id, sym::automatically_derived);\n \n-                if peq_is_automatically_derived == hash_is_automatically_derived {\n+                if !hash_is_automatically_derived || peq_is_automatically_derived {\n                     return;\n                 }\n \n@@ -252,17 +252,11 @@ fn check_hash_peq<'tcx>(\n                 // Only care about `impl PartialEq<Foo> for Foo`\n                 // For `impl PartialEq<B> for A, input_types is [A, B]\n                 if trait_ref.substs.type_at(1) == ty {\n-                    let mess = if peq_is_automatically_derived {\n-                        \"you are implementing `Hash` explicitly but have derived `PartialEq`\"\n-                    } else {\n-                        \"you are deriving `Hash` but have implemented `PartialEq` explicitly\"\n-                    };\n-\n                     span_lint_and_then(\n                         cx,\n-                        DERIVE_HASH_XOR_EQ,\n+                        DERIVED_HASH_WITH_MANUAL_EQ,\n                         span,\n-                        mess,\n+                        \"you are deriving `Hash` but have implemented `PartialEq` explicitly\",\n                         |diag| {\n                             if let Some(local_def_id) = impl_id.as_local() {\n                                 let hir_id = cx.tcx.hir().local_def_id_to_hir_id(local_def_id);\n@@ -366,6 +360,15 @@ fn check_copy_clone<'tcx>(cx: &LateContext<'tcx>, item: &Item<'_>, trait_ref: &h\n     if ty_subs.types().any(|ty| !implements_trait(cx, ty, clone_id, &[])) {\n         return;\n     }\n+    // `#[repr(packed)]` structs with type/const parameters can't derive `Clone`.\n+    // https://github.com/rust-lang/rust-clippy/issues/10188\n+    if ty_adt.repr().packed()\n+        && ty_subs\n+            .iter()\n+            .any(|arg| matches!(arg.unpack(), GenericArgKind::Type(_) | GenericArgKind::Const(_)))\n+    {\n+        return;\n+    }\n \n     span_lint_and_note(\n         cx,"}, {"sha": "11e1bcdf12d1ec79f309902c6bd64bb9b614e50d", "filename": "src/tools/clippy/clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -206,7 +206,7 @@ impl<'tcx> LateLintPass<'tcx> for DropForgetRef {\n             let is_copy = is_copy(cx, arg_ty);\n             let drop_is_single_call_in_arm = is_single_call_in_arm(cx, arg, expr);\n             let (lint, msg) = match fn_name {\n-                sym::mem_drop if arg_ty.is_ref() => (DROP_REF, DROP_REF_SUMMARY),\n+                sym::mem_drop if arg_ty.is_ref() && !drop_is_single_call_in_arm => (DROP_REF, DROP_REF_SUMMARY),\n                 sym::mem_forget if arg_ty.is_ref() => (FORGET_REF, FORGET_REF_SUMMARY),\n                 sym::mem_drop if is_copy && !drop_is_single_call_in_arm => (DROP_COPY, DROP_COPY_SUMMARY),\n                 sym::mem_forget if is_copy => (FORGET_COPY, FORGET_COPY_SUMMARY),"}, {"sha": "c3a020433de85bea0c68c3b9de7fd53fdb6608d1", "filename": "src/tools/clippy/clippy_lints/src/empty_structs_with_brackets.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fempty_structs_with_brackets.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -45,7 +45,7 @@ impl EarlyLintPass for EmptyStructsWithBrackets {\n                         span_after_ident,\n                         \"remove the brackets\",\n                         \";\",\n-                        Applicability::MachineApplicable);\n+                        Applicability::Unspecified);\n                     },\n             );\n         }"}, {"sha": "d8e2ae02c5a65cf1467d0cfee62e5edbf87c14dc", "filename": "src/tools/clippy/clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flib.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -639,7 +639,7 @@ pub fn register_plugins(store: &mut rustc_lint::LintStore, sess: &Session, conf:\n     store.register_late_pass(|_| Box::new(panic_unimplemented::PanicUnimplemented));\n     store.register_late_pass(|_| Box::new(strings::StringLitAsBytes));\n     store.register_late_pass(|_| Box::new(derive::Derive));\n-    store.register_late_pass(|_| Box::new(derivable_impls::DerivableImpls));\n+    store.register_late_pass(move |_| Box::new(derivable_impls::DerivableImpls::new(msrv())));\n     store.register_late_pass(|_| Box::new(drop_forget_ref::DropForgetRef));\n     store.register_late_pass(|_| Box::new(empty_enum::EmptyEnum));\n     store.register_late_pass(|_| Box::new(invalid_upcast_comparisons::InvalidUpcastComparisons));"}, {"sha": "3bca93d80aa7f7540dfdecd9243f32bda0ed8c06", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -81,7 +81,7 @@ pub(super) fn check<'tcx>(\n \n                 let skip = if starts_at_zero {\n                     String::new()\n-                } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, start) {\n+                } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, start, cx) {\n                     return;\n                 } else {\n                     format!(\".skip({})\", snippet(cx, start.span, \"..\"))\n@@ -109,7 +109,7 @@ pub(super) fn check<'tcx>(\n \n                     if is_len_call(end, indexed) || is_end_eq_array_len(cx, end, limits, indexed_ty) {\n                         String::new()\n-                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr) {\n+                    } else if visitor.indexed_mut.contains(&indexed) && contains_name(indexed, take_expr, cx) {\n                         return;\n                     } else {\n                         match limits {"}, {"sha": "744fd61bd135c62c70efb6586f6f4e82e40ac397", "filename": "src/tools/clippy/clippy_lints/src/loops/single_element_loop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fsingle_element_loop.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,6 +1,7 @@\n use super::SINGLE_ELEMENT_LOOP;\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::{indent_of, snippet_with_applicability};\n+use clippy_utils::visitors::contains_break_or_continue;\n use if_chain::if_chain;\n use rustc_ast::util::parser::PREC_PREFIX;\n use rustc_ast::Mutability;\n@@ -67,6 +68,7 @@ pub(super) fn check<'tcx>(\n     if_chain! {\n         if let ExprKind::Block(block, _) = body.kind;\n         if !block.stmts.is_empty();\n+        if !contains_break_or_continue(body);\n         then {\n             let mut applicability = Applicability::MachineApplicable;\n             let pat_snip = snippet_with_applicability(cx, pat.span, \"..\", &mut applicability);"}, {"sha": "0b3bf22743fae1b0c446c72112b6be8536a1ef4c", "filename": "src/tools/clippy/clippy_lints/src/methods/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 41, "deletions": 5, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fcase_sensitive_file_extension_comparisons.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,7 +1,10 @@\n-use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::diagnostics::span_lint_and_then;\n+use clippy_utils::source::snippet_opt;\n+use clippy_utils::source::{indent_of, reindent_multiline};\n use clippy_utils::ty::is_type_lang_item;\n use if_chain::if_chain;\n use rustc_ast::ast::LitKind;\n+use rustc_errors::Applicability;\n use rustc_hir::{Expr, ExprKind, LangItem};\n use rustc_lint::LateContext;\n use rustc_span::{source_map::Spanned, Span};\n@@ -15,6 +18,15 @@ pub(super) fn check<'tcx>(\n     recv: &'tcx Expr<'_>,\n     arg: &'tcx Expr<'_>,\n ) {\n+    if let ExprKind::MethodCall(path_segment, ..) = recv.kind {\n+        if matches!(\n+            path_segment.ident.name.as_str(),\n+            \"to_lowercase\" | \"to_uppercase\" | \"to_ascii_lowercase\" | \"to_ascii_uppercase\"\n+        ) {\n+            return;\n+        }\n+    }\n+\n     if_chain! {\n         if let Some(method_id) = cx.typeck_results().type_dependent_def_id(expr.hir_id);\n         if let Some(impl_id) = cx.tcx.impl_of_method(method_id);\n@@ -28,13 +40,37 @@ pub(super) fn check<'tcx>(\n         let recv_ty = cx.typeck_results().expr_ty(recv).peel_refs();\n         if recv_ty.is_str() || is_type_lang_item(cx, recv_ty, LangItem::String);\n         then {\n-            span_lint_and_help(\n+            span_lint_and_then(\n                 cx,\n                 CASE_SENSITIVE_FILE_EXTENSION_COMPARISONS,\n-                call_span,\n+                recv.span.to(call_span),\n                 \"case-sensitive file extension comparison\",\n-                None,\n-                \"consider using a case-insensitive comparison instead\",\n+                |diag| {\n+                    diag.help(\"consider using a case-insensitive comparison instead\");\n+                    if let Some(mut recv_source) = snippet_opt(cx, recv.span) {\n+\n+                        if !cx.typeck_results().expr_ty(recv).is_ref() {\n+                            recv_source = format!(\"&{recv_source}\");\n+                        }\n+\n+                        let suggestion_source = reindent_multiline(\n+                            format!(\n+                                \"std::path::Path::new({})\n+                                    .extension()\n+                                    .map_or(false, |ext| ext.eq_ignore_ascii_case(\\\"{}\\\"))\",\n+                                recv_source, ext_str.strip_prefix('.').unwrap()).into(),\n+                            true,\n+                            Some(indent_of(cx, call_span).unwrap_or(0) + 4)\n+                        );\n+\n+                        diag.span_suggestion(\n+                            recv.span.to(call_span),\n+                            \"use std::path::Path\",\n+                            suggestion_source,\n+                            Applicability::MaybeIncorrect,\n+                        );\n+                    }\n+                }\n             );\n         }\n     }"}, {"sha": "3795c0ec250987c0ba4560263d6ef35231f9345f", "filename": "src/tools/clippy/clippy_lints/src/methods/clone_on_copy.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fclone_on_copy.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::ty::is_copy;\n use rustc_errors::Applicability;\n use rustc_hir::{BindingAnnotation, ByRef, Expr, ExprKind, MatchSource, Node, PatKind, QPath};\n use rustc_lint::LateContext;\n-use rustc_middle::ty::{self, adjustment::Adjust};\n+use rustc_middle::ty::{self, adjustment::Adjust, print::with_forced_trimmed_paths};\n use rustc_span::symbol::{sym, Symbol};\n \n use super::CLONE_DOUBLE_REF;\n@@ -47,10 +47,10 @@ pub(super) fn check(\n                 cx,\n                 CLONE_DOUBLE_REF,\n                 expr.span,\n-                &format!(\n+                &with_forced_trimmed_paths!(format!(\n                     \"using `clone` on a double-reference; \\\n                     this will copy the reference of type `{ty}` instead of cloning the inner type\"\n-                ),\n+                )),\n                 |diag| {\n                     if let Some(snip) = sugg::Sugg::hir_opt(cx, arg) {\n                         let mut ty = innermost;\n@@ -61,11 +61,11 @@ pub(super) fn check(\n                         }\n                         let refs = \"&\".repeat(n + 1);\n                         let derefs = \"*\".repeat(n);\n-                        let explicit = format!(\"<{refs}{ty}>::clone({snip})\");\n+                        let explicit = with_forced_trimmed_paths!(format!(\"<{refs}{ty}>::clone({snip})\"));\n                         diag.span_suggestion(\n                             expr.span,\n                             \"try dereferencing it\",\n-                            format!(\"{refs}({derefs}{}).clone()\", snip.deref()),\n+                            with_forced_trimmed_paths!(format!(\"{refs}({derefs}{}).clone()\", snip.deref())),\n                             Applicability::MaybeIncorrect,\n                         );\n                         diag.span_suggestion(\n@@ -129,7 +129,9 @@ pub(super) fn check(\n             cx,\n             CLONE_ON_COPY,\n             expr.span,\n-            &format!(\"using `clone` on type `{ty}` which implements the `Copy` trait\"),\n+            &with_forced_trimmed_paths!(format!(\n+                \"using `clone` on type `{ty}` which implements the `Copy` trait\"\n+            )),\n             help,\n             sugg,\n             app,"}, {"sha": "fc80f2eeae0152825267c2bfe39375bf771325a4", "filename": "src/tools/clippy/clippy_lints/src/methods/filter_map.rs", "status": "modified", "additions": 87, "deletions": 87, "changes": 174, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Ffilter_map.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -30,12 +30,12 @@ fn is_method(cx: &LateContext<'_>, expr: &hir::Expr<'_>, method_name: Symbol) ->\n             match closure_expr.kind {\n                 hir::ExprKind::MethodCall(hir::PathSegment { ident, .. }, receiver, ..) => {\n                     if_chain! {\n-                    if ident.name == method_name;\n-                    if let hir::ExprKind::Path(path) = &receiver.kind;\n-                    if let Res::Local(ref local) = cx.qpath_res(path, receiver.hir_id);\n-                    then {\n-                        return arg_id == *local\n-                    }\n+                        if ident.name == method_name;\n+                        if let hir::ExprKind::Path(path) = &receiver.kind;\n+                        if let Res::Local(ref local) = cx.qpath_res(path, receiver.hir_id);\n+                        then {\n+                            return arg_id == *local\n+                        }\n                     }\n                     false\n                 },\n@@ -92,92 +92,92 @@ pub(super) fn check(\n     }\n \n     if_chain! {\n-            if is_trait_method(cx, map_recv, sym::Iterator);\n-\n-            // filter(|x| ...is_some())...\n-            if let ExprKind::Closure(&Closure { body: filter_body_id, .. }) = filter_arg.kind;\n-            let filter_body = cx.tcx.hir().body(filter_body_id);\n-            if let [filter_param] = filter_body.params;\n-            // optional ref pattern: `filter(|&x| ..)`\n-            let (filter_pat, is_filter_param_ref) = if let PatKind::Ref(ref_pat, _) = filter_param.pat.kind {\n-                (ref_pat, true)\n-            } else {\n-                (filter_param.pat, false)\n+        if is_trait_method(cx, map_recv, sym::Iterator);\n+\n+        // filter(|x| ...is_some())...\n+        if let ExprKind::Closure(&Closure { body: filter_body_id, .. }) = filter_arg.kind;\n+        let filter_body = cx.tcx.hir().body(filter_body_id);\n+        if let [filter_param] = filter_body.params;\n+        // optional ref pattern: `filter(|&x| ..)`\n+        let (filter_pat, is_filter_param_ref) = if let PatKind::Ref(ref_pat, _) = filter_param.pat.kind {\n+            (ref_pat, true)\n+        } else {\n+            (filter_param.pat, false)\n+        };\n+        // closure ends with is_some() or is_ok()\n+        if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n+        if let ExprKind::MethodCall(path, filter_arg, [], _) = filter_body.value.kind;\n+        if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).peel_refs().ty_adt_def();\n+        if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did()) {\n+            Some(false)\n+        } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did()) {\n+            Some(true)\n+        } else {\n+            None\n+        };\n+        if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n+\n+        // ...map(|x| ...unwrap())\n+        if let ExprKind::Closure(&Closure { body: map_body_id, .. }) = map_arg.kind;\n+        let map_body = cx.tcx.hir().body(map_body_id);\n+        if let [map_param] = map_body.params;\n+        if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n+        // closure ends with expect() or unwrap()\n+        if let ExprKind::MethodCall(seg, map_arg, ..) = map_body.value.kind;\n+        if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n+\n+        // .filter(..).map(|y| f(y).copied().unwrap())\n+        //                     ~~~~\n+        let map_arg_peeled = match map_arg.kind {\n+            ExprKind::MethodCall(method, original_arg, [], _) if acceptable_methods(method) => {\n+                original_arg\n+            },\n+            _ => map_arg,\n+        };\n+\n+        // .filter(|x| x.is_some()).map(|y| y[.acceptable_method()].unwrap())\n+        let simple_equal = path_to_local_id(filter_arg, filter_param_id)\n+            && path_to_local_id(map_arg_peeled, map_param_id);\n+\n+        let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n+            // in `filter(|x| ..)`, replace `*x` with `x`\n+            let a_path = if_chain! {\n+                if !is_filter_param_ref;\n+                if let ExprKind::Unary(UnOp::Deref, expr_path) = a.kind;\n+                then { expr_path } else { a }\n             };\n-            // closure ends with is_some() or is_ok()\n-            if let PatKind::Binding(_, filter_param_id, _, None) = filter_pat.kind;\n-            if let ExprKind::MethodCall(path, filter_arg, [], _) = filter_body.value.kind;\n-            if let Some(opt_ty) = cx.typeck_results().expr_ty(filter_arg).peel_refs().ty_adt_def();\n-            if let Some(is_result) = if cx.tcx.is_diagnostic_item(sym::Option, opt_ty.did()) {\n-                Some(false)\n-            } else if cx.tcx.is_diagnostic_item(sym::Result, opt_ty.did()) {\n-                Some(true)\n+            // let the filter closure arg and the map closure arg be equal\n+            path_to_local_id(a_path, filter_param_id)\n+                && path_to_local_id(b, map_param_id)\n+                && cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b)\n+        };\n+\n+        if simple_equal || SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg_peeled);\n+        then {\n+            let span = filter_span.with_hi(expr.span.hi());\n+            let (filter_name, lint) = if is_find {\n+                (\"find\", MANUAL_FIND_MAP)\n             } else {\n-                None\n-            };\n-            if path.ident.name.as_str() == if is_result { \"is_ok\" } else { \"is_some\" };\n-\n-            // ...map(|x| ...unwrap())\n-            if let ExprKind::Closure(&Closure { body: map_body_id, .. }) = map_arg.kind;\n-            let map_body = cx.tcx.hir().body(map_body_id);\n-            if let [map_param] = map_body.params;\n-            if let PatKind::Binding(_, map_param_id, map_param_ident, None) = map_param.pat.kind;\n-            // closure ends with expect() or unwrap()\n-            if let ExprKind::MethodCall(seg, map_arg, ..) = map_body.value.kind;\n-            if matches!(seg.ident.name, sym::expect | sym::unwrap | sym::unwrap_or);\n-\n-            // .filter(..).map(|y| f(y).copied().unwrap())\n-            //                     ~~~~\n-            let map_arg_peeled = match map_arg.kind {\n-                ExprKind::MethodCall(method, original_arg, [], _) if acceptable_methods(method) => {\n-                    original_arg\n-                },\n-                _ => map_arg,\n+                (\"filter\", MANUAL_FILTER_MAP)\n             };\n+            let msg = format!(\"`{filter_name}(..).map(..)` can be simplified as `{filter_name}_map(..)`\");\n+            let (to_opt, deref) = if is_result {\n+                (\".ok()\", String::new())\n+            } else {\n+                let derefs = cx.typeck_results()\n+                    .expr_adjustments(map_arg)\n+                    .iter()\n+                    .filter(|adj| matches!(adj.kind, Adjust::Deref(_)))\n+                    .count();\n \n-            // .filter(|x| x.is_some()).map(|y| y[.acceptable_method()].unwrap())\n-            let simple_equal = path_to_local_id(filter_arg, filter_param_id)\n-                && path_to_local_id(map_arg_peeled, map_param_id);\n-\n-            let eq_fallback = |a: &Expr<'_>, b: &Expr<'_>| {\n-                // in `filter(|x| ..)`, replace `*x` with `x`\n-                let a_path = if_chain! {\n-                    if !is_filter_param_ref;\n-                    if let ExprKind::Unary(UnOp::Deref, expr_path) = a.kind;\n-                    then { expr_path } else { a }\n-                };\n-                // let the filter closure arg and the map closure arg be equal\n-                path_to_local_id(a_path, filter_param_id)\n-                    && path_to_local_id(b, map_param_id)\n-                    && cx.typeck_results().expr_ty_adjusted(a) == cx.typeck_results().expr_ty_adjusted(b)\n+                (\"\", \"*\".repeat(derefs))\n             };\n-\n-            if simple_equal || SpanlessEq::new(cx).expr_fallback(eq_fallback).eq_expr(filter_arg, map_arg_peeled);\n-            then {\n-                let span = filter_span.with_hi(expr.span.hi());\n-                let (filter_name, lint) = if is_find {\n-                    (\"find\", MANUAL_FIND_MAP)\n-                } else {\n-                    (\"filter\", MANUAL_FILTER_MAP)\n-                };\n-                let msg = format!(\"`{filter_name}(..).map(..)` can be simplified as `{filter_name}_map(..)`\");\n-                let (to_opt, deref) = if is_result {\n-                    (\".ok()\", String::new())\n-                } else {\n-                    let derefs = cx.typeck_results()\n-                        .expr_adjustments(map_arg)\n-                        .iter()\n-                        .filter(|adj| matches!(adj.kind, Adjust::Deref(_)))\n-                        .count();\n-\n-                    (\"\", \"*\".repeat(derefs))\n-                };\n-                let sugg = format!(\n-                    \"{filter_name}_map(|{map_param_ident}| {deref}{}{to_opt})\",\n-                    snippet(cx, map_arg.span, \"..\"),\n-                );\n-                span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n-            }\n+            let sugg = format!(\n+                \"{filter_name}_map(|{map_param_ident}| {deref}{}{to_opt})\",\n+                snippet(cx, map_arg.span, \"..\"),\n+            );\n+            span_lint_and_sugg(cx, lint, span, &msg, \"try\", sugg, Applicability::MachineApplicable);\n+        }\n     }\n }\n "}, {"sha": "c87f5daab6f241ebfc51e0b75f3275dd058c4fcf", "filename": "src/tools/clippy/clippy_lints/src/methods/iter_kv_map.rs", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fiter_kv_map.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -6,7 +6,7 @@ use clippy_utils::source::{snippet, snippet_with_applicability};\n use clippy_utils::sugg;\n use clippy_utils::ty::is_type_diagnostic_item;\n use clippy_utils::visitors::is_local_used;\n-use rustc_hir::{BindingAnnotation, Body, BorrowKind, Expr, ExprKind, Mutability, Pat, PatKind};\n+use rustc_hir::{BindingAnnotation, Body, BorrowKind, ByRef, Expr, ExprKind, Mutability, Pat, PatKind};\n use rustc_lint::{LateContext, LintContext};\n use rustc_middle::ty;\n use rustc_span::sym;\n@@ -30,9 +30,9 @@ pub(super) fn check<'tcx>(\n         if let Body {params: [p], value: body_expr, generator_kind: _ } = cx.tcx.hir().body(c.body);\n         if let PatKind::Tuple([key_pat, val_pat], _) = p.pat.kind;\n \n-        let (replacement_kind, binded_ident) = match (&key_pat.kind, &val_pat.kind) {\n-            (key, PatKind::Binding(_, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", value),\n-            (PatKind::Binding(_, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", key),\n+        let (replacement_kind, annotation, bound_ident) = match (&key_pat.kind, &val_pat.kind) {\n+            (key, PatKind::Binding(ann, _, value, _)) if pat_is_wild(cx, key, m_arg) => (\"value\", ann, value),\n+            (PatKind::Binding(ann, _, key, _), value) if pat_is_wild(cx, value, m_arg) => (\"key\", ann, key),\n             _ => return,\n         };\n \n@@ -47,7 +47,7 @@ pub(super) fn check<'tcx>(\n             if_chain! {\n                 if let ExprKind::Path(rustc_hir::QPath::Resolved(_, path)) = body_expr.kind;\n                 if let [local_ident] = path.segments;\n-                if local_ident.ident.as_str() == binded_ident.as_str();\n+                if local_ident.ident.as_str() == bound_ident.as_str();\n \n                 then {\n                     span_lint_and_sugg(\n@@ -60,13 +60,23 @@ pub(super) fn check<'tcx>(\n                         applicability,\n                     );\n                 } else {\n+                    let ref_annotation = if annotation.0 == ByRef::Yes {\n+                        \"ref \"\n+                    } else {\n+                        \"\"\n+                    };\n+                    let mut_annotation = if annotation.1 == Mutability::Mut {\n+                        \"mut \"\n+                    } else {\n+                        \"\"\n+                    };\n                     span_lint_and_sugg(\n                         cx,\n                         ITER_KV_MAP,\n                         expr.span,\n                         &format!(\"iterating on a map's {replacement_kind}s\"),\n                         \"try\",\n-                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{binded_ident}| {})\",\n+                        format!(\"{recv_snippet}.{into_prefix}{replacement_kind}s().map(|{ref_annotation}{mut_annotation}{bound_ident}| {})\",\n                             snippet_with_applicability(cx, body_expr.span, \"/* body */\", &mut applicability)),\n                         applicability,\n                     );"}, {"sha": "fe88fa41fd91efd3cdf558f836ed41ba8f210b7f", "filename": "src/tools/clippy/clippy_lints/src/methods/suspicious_to_owned.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fsuspicious_to_owned.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -5,7 +5,7 @@ use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n use rustc_lint::LateContext;\n-use rustc_middle::ty;\n+use rustc_middle::ty::{self, print::with_forced_trimmed_paths};\n use rustc_span::sym;\n \n use super::SUSPICIOUS_TO_OWNED;\n@@ -24,7 +24,9 @@ pub fn check(cx: &LateContext<'_>, expr: &hir::Expr<'_>, recv: &hir::Expr<'_>) -\n                 cx,\n                 SUSPICIOUS_TO_OWNED,\n                 expr.span,\n-                &format!(\"this `to_owned` call clones the {input_type} itself and does not cause the {input_type} contents to become owned\"),\n+                &with_forced_trimmed_paths!(format!(\n+                    \"this `to_owned` call clones the {input_type} itself and does not cause the {input_type} contents to become owned\"\n+                )),\n                 \"consider using, depending on intent\",\n                 format!(\"{recv_snip}.clone()` or `{recv_snip}.into_owned()\"),\n                 app,"}, {"sha": "dc866ab6373bbb76fd013d62159e30f2ab3587e3", "filename": "src/tools/clippy/clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,6 +1,6 @@\n //! Checks for uses of mutex where an atomic value could be used\n //!\n-//! This lint is **warn** by default\n+//! This lint is **allow** by default\n \n use clippy_utils::diagnostics::span_lint;\n use clippy_utils::ty::is_type_diagnostic_item;\n@@ -20,6 +20,10 @@ declare_clippy_lint! {\n     /// `std::sync::atomic::AtomicBool` and `std::sync::atomic::AtomicPtr` are leaner and\n     /// faster.\n     ///\n+    /// On the other hand, `Mutex`es are, in general, easier to\n+    /// verify correctness. An atomic does not behave the same as\n+    /// an equivalent mutex. See [this issue](https://github.com/rust-lang/rust-clippy/issues/4295)'s commentary for more details.\n+    ///\n     /// ### Known problems\n     /// This lint cannot detect if the mutex is actually used\n     /// for waiting before a critical section.\n@@ -39,8 +43,8 @@ declare_clippy_lint! {\n     /// ```\n     #[clippy::version = \"pre 1.29.0\"]\n     pub MUTEX_ATOMIC,\n-    nursery,\n-    \"using a mutex where an atomic value could be used instead\"\n+    restriction,\n+    \"using a mutex where an atomic value could be used instead.\"\n }\n \n declare_clippy_lint! {"}, {"sha": "cff82b875f11a73830cf2ab574593664030ac9f2", "filename": "src/tools/clippy/clippy_lints/src/operators/arithmetic_side_effects.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Foperators%2Farithmetic_side_effects.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -2,7 +2,7 @@ use super::ARITHMETIC_SIDE_EFFECTS;\n use clippy_utils::{\n     consts::{constant, constant_simple},\n     diagnostics::span_lint,\n-    peel_hir_expr_refs,\n+    peel_hir_expr_refs, peel_hir_expr_unary,\n };\n use rustc_ast as ast;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -98,8 +98,11 @@ impl ArithmeticSideEffects {\n     }\n \n     /// If `expr` is not a literal integer like `1`, returns `None`.\n+    ///\n+    /// Returns the absolute value of the expression, if this is an integer literal.\n     fn literal_integer(expr: &hir::Expr<'_>) -> Option<u128> {\n-        if let hir::ExprKind::Lit(ref lit) = expr.kind && let ast::LitKind::Int(n, _) = lit.node {\n+        let actual = peel_hir_expr_unary(expr).0;\n+        if let hir::ExprKind::Lit(ref lit) = actual.kind && let ast::LitKind::Int(n, _) = lit.node {\n             Some(n)\n         }\n         else {\n@@ -123,12 +126,12 @@ impl ArithmeticSideEffects {\n         if !matches!(\n             op.node,\n             hir::BinOpKind::Add\n-                | hir::BinOpKind::Sub\n-                | hir::BinOpKind::Mul\n                 | hir::BinOpKind::Div\n+                | hir::BinOpKind::Mul\n                 | hir::BinOpKind::Rem\n                 | hir::BinOpKind::Shl\n                 | hir::BinOpKind::Shr\n+                | hir::BinOpKind::Sub\n         ) {\n             return;\n         };"}, {"sha": "fc655fe2d0bb3469bfb813de501e75bcc457288b", "filename": "src/tools/clippy/clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Franges.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -103,7 +103,7 @@ declare_clippy_lint! {\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for range expressions `x..y` where both `x` and `y`\n-    /// are constant and `x` is greater or equal to `y`.\n+    /// are constant and `x` is greater to `y`. Also triggers if `x` is equal to `y` when they are conditions to a `for` loop.\n     ///\n     /// ### Why is this bad?\n     /// Empty ranges yield no values so iterating them is a no-op."}, {"sha": "c1677fb3da1c4850215dfd6a88e1ee485d4c54ed", "filename": "src/tools/clippy/clippy_lints/src/redundant_clone.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fredundant_clone.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -131,7 +131,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // `res = clone(arg)` can be turned into `res = move arg;`\n                 // if `arg` is the only borrow of `cloned` at this point.\n \n-                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg], cloned, loc) {\n+                if cannot_move_out || !possible_borrower.only_borrowers(&[arg], cloned, loc) {\n                     continue;\n                 }\n \n@@ -178,7 +178,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClone {\n                 // StorageDead(pred_arg);\n                 // res = to_path_buf(cloned);\n                 // ```\n-                if cannot_move_out || !possible_borrower.at_most_borrowers(cx, &[arg, cloned], local, loc) {\n+                if cannot_move_out || !possible_borrower.only_borrowers(&[arg, cloned], local, loc) {\n                     continue;\n                 }\n "}, {"sha": "9f487dedb8cb6daf24970e3a7d2d7d99278d7ebd", "filename": "src/tools/clippy/clippy_lints/src/renamed_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Frenamed_lints.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -9,6 +9,7 @@ pub static RENAMED_LINTS: &[(&str, &str)] = &[\n     (\"clippy::box_vec\", \"clippy::box_collection\"),\n     (\"clippy::const_static_lifetime\", \"clippy::redundant_static_lifetimes\"),\n     (\"clippy::cyclomatic_complexity\", \"clippy::cognitive_complexity\"),\n+    (\"clippy::derive_hash_xor_eq\", \"clippy::derived_hash_with_manual_eq\"),\n     (\"clippy::disallowed_method\", \"clippy::disallowed_methods\"),\n     (\"clippy::disallowed_type\", \"clippy::disallowed_types\"),\n     (\"clippy::eval_order_dependence\", \"clippy::mixed_read_write_in_expression\"),"}, {"sha": "bbbd9e4989e97c05f189ddec545cb59d84be67cc", "filename": "src/tools/clippy/clippy_lints/src/returns.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Freturns.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -210,22 +210,25 @@ fn check_final_expr<'tcx>(\n             // if desugar of `do yeet`, don't lint\n             if let Some(inner_expr) = inner\n                 && let ExprKind::Call(path_expr, _) = inner_expr.kind\n-                && let ExprKind::Path(QPath::LangItem(LangItem::TryTraitFromYeet, _, _)) = path_expr.kind {\n-                    return;\n+                && let ExprKind::Path(QPath::LangItem(LangItem::TryTraitFromYeet, _, _)) = path_expr.kind\n+            {\n+                return;\n             }\n-            if cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n-                let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n-                if !borrows {\n-                    // check if expr return nothing\n-                    let ret_span = if inner.is_none() && replacement == RetReplacement::Empty {\n-                        extend_span_to_previous_non_ws(cx, peeled_drop_expr.span)\n-                    } else {\n-                        peeled_drop_expr.span\n-                    };\n-\n-                    emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n-                }\n+            if !cx.tcx.hir().attrs(expr.hir_id).is_empty() {\n+                return;\n+            }\n+            let borrows = inner.map_or(false, |inner| last_statement_borrows(cx, inner));\n+            if borrows {\n+                return;\n             }\n+            // check if expr return nothing\n+            let ret_span = if inner.is_none() && replacement == RetReplacement::Empty {\n+                extend_span_to_previous_non_ws(cx, peeled_drop_expr.span)\n+            } else {\n+                peeled_drop_expr.span\n+            };\n+\n+            emit_return_lint(cx, ret_span, semi_spans, inner.as_ref().map(|i| i.span), replacement);\n         },\n         ExprKind::If(_, then, else_clause_opt) => {\n             check_block_return(cx, &then.kind, semi_spans.clone());\n@@ -292,7 +295,7 @@ fn last_statement_borrows<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'tcx>)\n         {\n             ControlFlow::Break(())\n         } else {\n-            ControlFlow::Continue(Descend::from(!expr.span.from_expansion()))\n+            ControlFlow::Continue(Descend::from(!e.span.from_expansion()))\n         }\n     })\n     .is_some()"}, {"sha": "229478b7ce3c9c2b72cf80617fa2f204f3fe38f2", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -127,7 +127,7 @@ declare_clippy_lint! {\n     /// `Vec` or a `VecDeque` (formerly called `RingBuf`).\n     ///\n     /// ### Why is this bad?\n-    /// Gankro says:\n+    /// Gankra says:\n     ///\n     /// > The TL;DR of `LinkedList` is that it's built on a massive amount of\n     /// pointers and indirection."}, {"sha": "f864c520302e4a56b294e2b8b66b290f005addfb", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,9 +1,11 @@\n use clippy_utils::diagnostics::span_lint_and_help;\n+use clippy_utils::macros::root_macro_call_first_node;\n use clippy_utils::visitors::is_local_used;\n use if_chain::if_chain;\n-use rustc_hir::{Impl, ImplItem, ImplItemKind, ItemKind};\n+use rustc_hir::{Body, Impl, ImplItem, ImplItemKind, ItemKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n+use std::ops::ControlFlow;\n \n declare_clippy_lint! {\n     /// ### What it does\n@@ -57,6 +59,20 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id()).def_id;\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.owner_id);\n+        let contains_todo = |cx, body: &'_ Body<'_>| -> bool {\n+            clippy_utils::visitors::for_each_expr(body.value, |e| {\n+                if let Some(macro_call) = root_macro_call_first_node(cx, e) {\n+                    if cx.tcx.item_name(macro_call.def_id).as_str() == \"todo\" {\n+                        ControlFlow::Break(())\n+                    } else {\n+                        ControlFlow::Continue(())\n+                    }\n+                } else {\n+                    ControlFlow::Continue(())\n+                }\n+            })\n+            .is_some()\n+        };\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;\n@@ -65,14 +81,15 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n             let body = cx.tcx.hir().body(*body_id);\n             if let [self_param, ..] = body.params;\n             if !is_local_used(cx, body, self_param.pat.hir_id);\n+            if !contains_todo(cx, body);\n             then {\n                 span_lint_and_help(\n                     cx,\n                     UNUSED_SELF,\n                     self_param.span,\n                     \"unused `self` argument\",\n                     None,\n-                    \"consider refactoring to a associated function\",\n+                    \"consider refactoring to an associated function\",\n                 );\n             }\n         }"}, {"sha": "c4d8c28f0606184bfee6ffd13299833935175681", "filename": "src/tools/clippy/clippy_lints/src/utils/internal_lints/metadata_collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Futils%2Finternal_lints%2Fmetadata_collector.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1058,7 +1058,7 @@ fn get_parent_local<'hir>(cx: &LateContext<'hir>, expr: &'hir hir::Expr<'hir>) -\n fn get_parent_local_hir_id<'hir>(cx: &LateContext<'hir>, hir_id: hir::HirId) -> Option<&'hir hir::Local<'hir>> {\n     let map = cx.tcx.hir();\n \n-    match map.find_parent((hir_id)) {\n+    match map.find_parent(hir_id) {\n         Some(hir::Node::Local(local)) => Some(local),\n         Some(hir::Node::Pat(pattern)) => get_parent_local_hir_id(cx, pattern.hir_id),\n         _ => None,"}, {"sha": "7a4a9036dd3639ed82de815331ee68897ed37003", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 33, "deletions": 4, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -22,6 +22,9 @@ extern crate rustc_ast;\n extern crate rustc_ast_pretty;\n extern crate rustc_attr;\n extern crate rustc_data_structures;\n+// The `rustc_driver` crate seems to be required in order to use the `rust_ast` crate.\n+#[allow(unused_extern_crates)]\n+extern crate rustc_driver;\n extern crate rustc_errors;\n extern crate rustc_hir;\n extern crate rustc_hir_typeck;\n@@ -116,6 +119,8 @@ use crate::consts::{constant, Constant};\n use crate::ty::{can_partially_move_ty, expr_sig, is_copy, is_recursively_primitive_type, ty_is_fn_once_param};\n use crate::visitors::for_each_expr;\n \n+use rustc_middle::hir::nested_filter;\n+\n #[macro_export]\n macro_rules! extract_msrv_attr {\n     ($context:ident) => {\n@@ -1253,22 +1258,33 @@ pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     }\n }\n \n-pub struct ContainsName {\n+pub struct ContainsName<'a, 'tcx> {\n+    pub cx: &'a LateContext<'tcx>,\n     pub name: Symbol,\n     pub result: bool,\n }\n \n-impl<'tcx> Visitor<'tcx> for ContainsName {\n+impl<'a, 'tcx> Visitor<'tcx> for ContainsName<'a, 'tcx> {\n+    type NestedFilter = nested_filter::OnlyBodies;\n+\n     fn visit_name(&mut self, name: Symbol) {\n         if self.name == name {\n             self.result = true;\n         }\n     }\n+\n+    fn nested_visit_map(&mut self) -> Self::Map {\n+        self.cx.tcx.hir()\n+    }\n }\n \n /// Checks if an `Expr` contains a certain name.\n-pub fn contains_name(name: Symbol, expr: &Expr<'_>) -> bool {\n-    let mut cn = ContainsName { name, result: false };\n+pub fn contains_name<'tcx>(name: Symbol, expr: &'tcx Expr<'_>, cx: &LateContext<'tcx>) -> bool {\n+    let mut cn = ContainsName {\n+        name,\n+        result: false,\n+        cx,\n+    };\n     cn.visit_expr(expr);\n     cn.result\n }\n@@ -1304,6 +1320,7 @@ pub fn get_parent_expr_for_hir<'tcx>(cx: &LateContext<'tcx>, hir_id: hir::HirId)\n     }\n }\n \n+/// Gets the enclosing block, if any.\n pub fn get_enclosing_block<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx Block<'tcx>> {\n     let map = &cx.tcx.hir();\n     let enclosing_node = map\n@@ -2244,6 +2261,18 @@ pub fn peel_n_hir_expr_refs<'a>(expr: &'a Expr<'a>, count: usize) -> (&'a Expr<'\n     (e, count - remaining)\n }\n \n+/// Peels off all unary operators of an expression. Returns the underlying expression and the number\n+/// of operators removed.\n+pub fn peel_hir_expr_unary<'a>(expr: &'a Expr<'a>) -> (&'a Expr<'a>, usize) {\n+    let mut count: usize = 0;\n+    let mut curr_expr = expr;\n+    while let ExprKind::Unary(_, local_expr) = curr_expr.kind {\n+        count = count.wrapping_add(1);\n+        curr_expr = local_expr;\n+    }\n+    (curr_expr, count)\n+}\n+\n /// Peels off all references on the expression. Returns the underlying expression and the number of\n /// references removed.\n pub fn peel_hir_expr_refs<'a>(expr: &'a Expr<'a>) -> (&'a Expr<'a>, usize) {"}, {"sha": "9adae7733894580fec10663a47c9ab9a69ebb635", "filename": "src/tools/clippy/clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 99, "deletions": 171, "changes": 270, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,137 +1,90 @@\n-use super::possible_origin::PossibleOriginVisitor;\n+use super::{possible_origin::PossibleOriginVisitor, transitive_relation::TransitiveRelation};\n use crate::ty::is_copy;\n-use rustc_data_structures::fx::{FxHashMap, FxIndexMap};\n+use rustc_data_structures::fx::FxHashMap;\n use rustc_index::bit_set::{BitSet, HybridBitSet};\n use rustc_lint::LateContext;\n-use rustc_middle::mir::{\n-    self, visit::Visitor as _, BasicBlock, Local, Location, Mutability, Statement, StatementKind, Terminator,\n-};\n-use rustc_middle::ty::{self, visit::TypeVisitor, TyCtxt};\n-use rustc_mir_dataflow::{\n-    fmt::DebugWithContext, impls::MaybeStorageLive, lattice::JoinSemiLattice, Analysis, AnalysisDomain,\n-    CallReturnPlaces, ResultsCursor,\n-};\n+use rustc_middle::mir::{self, visit::Visitor as _, Mutability};\n+use rustc_middle::ty::{self, visit::TypeVisitor};\n+use rustc_mir_dataflow::{impls::MaybeStorageLive, Analysis, ResultsCursor};\n use std::borrow::Cow;\n use std::ops::ControlFlow;\n \n /// Collects the possible borrowers of each local.\n /// For example, `b = &a; c = &a;` will make `b` and (transitively) `c`\n /// possible borrowers of `a`.\n #[allow(clippy::module_name_repetitions)]\n-struct PossibleBorrowerAnalysis<'b, 'tcx> {\n-    tcx: TyCtxt<'tcx>,\n+struct PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n+    possible_borrower: TransitiveRelation,\n     body: &'b mir::Body<'tcx>,\n+    cx: &'a LateContext<'tcx>,\n     possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n }\n \n-#[derive(Clone, Debug, Eq, PartialEq)]\n-struct PossibleBorrowerState {\n-    map: FxIndexMap<Local, BitSet<Local>>,\n-    domain_size: usize,\n-}\n-\n-impl PossibleBorrowerState {\n-    fn new(domain_size: usize) -> Self {\n+impl<'a, 'b, 'tcx> PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n+    fn new(\n+        cx: &'a LateContext<'tcx>,\n+        body: &'b mir::Body<'tcx>,\n+        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    ) -> Self {\n         Self {\n-            map: FxIndexMap::default(),\n-            domain_size,\n+            possible_borrower: TransitiveRelation::default(),\n+            cx,\n+            body,\n+            possible_origin,\n         }\n     }\n \n-    #[allow(clippy::similar_names)]\n-    fn add(&mut self, borrowed: Local, borrower: Local) {\n-        self.map\n-            .entry(borrowed)\n-            .or_insert(BitSet::new_empty(self.domain_size))\n-            .insert(borrower);\n-    }\n-}\n-\n-impl<C> DebugWithContext<C> for PossibleBorrowerState {\n-    fn fmt_with(&self, _ctxt: &C, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        <_ as std::fmt::Debug>::fmt(self, f)\n-    }\n-    fn fmt_diff_with(&self, _old: &Self, _ctxt: &C, _f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        unimplemented!()\n-    }\n-}\n+    fn into_map(\n+        self,\n+        cx: &'a LateContext<'tcx>,\n+        maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive<'tcx>>,\n+    ) -> PossibleBorrowerMap<'b, 'tcx> {\n+        let mut map = FxHashMap::default();\n+        for row in (1..self.body.local_decls.len()).map(mir::Local::from_usize) {\n+            if is_copy(cx, self.body.local_decls[row].ty) {\n+                continue;\n+            }\n \n-impl JoinSemiLattice for PossibleBorrowerState {\n-    fn join(&mut self, other: &Self) -> bool {\n-        let mut changed = false;\n-        for (&borrowed, borrowers) in other.map.iter() {\n+            let mut borrowers = self.possible_borrower.reachable_from(row, self.body.local_decls.len());\n+            borrowers.remove(mir::Local::from_usize(0));\n             if !borrowers.is_empty() {\n-                changed |= self\n-                    .map\n-                    .entry(borrowed)\n-                    .or_insert(BitSet::new_empty(self.domain_size))\n-                    .union(borrowers);\n+                map.insert(row, borrowers);\n             }\n         }\n-        changed\n-    }\n-}\n-\n-impl<'b, 'tcx> AnalysisDomain<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n-    type Domain = PossibleBorrowerState;\n-\n-    const NAME: &'static str = \"possible_borrower\";\n-\n-    fn bottom_value(&self, body: &mir::Body<'tcx>) -> Self::Domain {\n-        PossibleBorrowerState::new(body.local_decls.len())\n-    }\n-\n-    fn initialize_start_block(&self, _body: &mir::Body<'tcx>, _entry_set: &mut Self::Domain) {}\n-}\n \n-impl<'b, 'tcx> PossibleBorrowerAnalysis<'b, 'tcx> {\n-    fn new(\n-        tcx: TyCtxt<'tcx>,\n-        body: &'b mir::Body<'tcx>,\n-        possible_origin: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n-    ) -> Self {\n-        Self {\n-            tcx,\n-            body,\n-            possible_origin,\n+        let bs = BitSet::new_empty(self.body.local_decls.len());\n+        PossibleBorrowerMap {\n+            map,\n+            maybe_live,\n+            bitset: (bs.clone(), bs),\n         }\n     }\n }\n \n-impl<'b, 'tcx> Analysis<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n-    fn apply_call_return_effect(\n-        &self,\n-        _state: &mut Self::Domain,\n-        _block: BasicBlock,\n-        _return_places: CallReturnPlaces<'_, 'tcx>,\n-    ) {\n-    }\n-\n-    fn apply_statement_effect(&self, state: &mut Self::Domain, statement: &Statement<'tcx>, _location: Location) {\n-        if let StatementKind::Assign(box (place, rvalue)) = &statement.kind {\n-            let lhs = place.local;\n-            match rvalue {\n-                mir::Rvalue::Ref(_, _, borrowed) => {\n-                    state.add(borrowed.local, lhs);\n-                },\n-                other => {\n-                    if ContainsRegion\n-                        .visit_ty(place.ty(&self.body.local_decls, self.tcx).ty)\n-                        .is_continue()\n-                    {\n-                        return;\n+impl<'a, 'b, 'tcx> mir::visit::Visitor<'tcx> for PossibleBorrowerVisitor<'a, 'b, 'tcx> {\n+    fn visit_assign(&mut self, place: &mir::Place<'tcx>, rvalue: &mir::Rvalue<'_>, _location: mir::Location) {\n+        let lhs = place.local;\n+        match rvalue {\n+            mir::Rvalue::Ref(_, _, borrowed) => {\n+                self.possible_borrower.add(borrowed.local, lhs);\n+            },\n+            other => {\n+                if ContainsRegion\n+                    .visit_ty(place.ty(&self.body.local_decls, self.cx.tcx).ty)\n+                    .is_continue()\n+                {\n+                    return;\n+                }\n+                rvalue_locals(other, |rhs| {\n+                    if lhs != rhs {\n+                        self.possible_borrower.add(rhs, lhs);\n                     }\n-                    rvalue_locals(other, |rhs| {\n-                        if lhs != rhs {\n-                            state.add(rhs, lhs);\n-                        }\n-                    });\n-                },\n-            }\n+                });\n+            },\n         }\n     }\n \n-    fn apply_terminator_effect(&self, state: &mut Self::Domain, terminator: &Terminator<'tcx>, _location: Location) {\n+    fn visit_terminator(&mut self, terminator: &mir::Terminator<'_>, _loc: mir::Location) {\n         if let mir::TerminatorKind::Call {\n             args,\n             destination: mir::Place { local: dest, .. },\n@@ -171,10 +124,10 @@ impl<'b, 'tcx> Analysis<'tcx> for PossibleBorrowerAnalysis<'b, 'tcx> {\n \n             for y in mutable_variables {\n                 for x in &immutable_borrowers {\n-                    state.add(*x, y);\n+                    self.possible_borrower.add(*x, y);\n                 }\n                 for x in &mutable_borrowers {\n-                    state.add(*x, y);\n+                    self.possible_borrower.add(*x, y);\n                 }\n             }\n         }\n@@ -210,98 +163,73 @@ fn rvalue_locals(rvalue: &mir::Rvalue<'_>, mut visit: impl FnMut(mir::Local)) {\n     }\n }\n \n-/// Result of `PossibleBorrowerAnalysis`.\n+/// Result of `PossibleBorrowerVisitor`.\n #[allow(clippy::module_name_repetitions)]\n pub struct PossibleBorrowerMap<'b, 'tcx> {\n-    body: &'b mir::Body<'tcx>,\n-    possible_borrower: ResultsCursor<'b, 'tcx, PossibleBorrowerAnalysis<'b, 'tcx>>,\n-    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive<'b>>,\n-    pushed: BitSet<Local>,\n-    stack: Vec<Local>,\n+    /// Mapping `Local -> its possible borrowers`\n+    pub map: FxHashMap<mir::Local, HybridBitSet<mir::Local>>,\n+    maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive<'tcx>>,\n+    // Caches to avoid allocation of `BitSet` on every query\n+    pub bitset: (BitSet<mir::Local>, BitSet<mir::Local>),\n }\n \n-impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n-    pub fn new(cx: &LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n+impl<'a, 'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n+    pub fn new(cx: &'a LateContext<'tcx>, mir: &'b mir::Body<'tcx>) -> Self {\n         let possible_origin = {\n             let mut vis = PossibleOriginVisitor::new(mir);\n             vis.visit_body(mir);\n             vis.into_map(cx)\n         };\n-        let possible_borrower = PossibleBorrowerAnalysis::new(cx.tcx, mir, possible_origin)\n+        let maybe_storage_live_result = MaybeStorageLive::new(Cow::Owned(BitSet::new_empty(mir.local_decls.len())))\n             .into_engine(cx.tcx, mir)\n-            .pass_name(\"possible_borrower\")\n+            .pass_name(\"redundant_clone\")\n             .iterate_to_fixpoint()\n             .into_results_cursor(mir);\n-        let maybe_live = MaybeStorageLive::new(Cow::Owned(BitSet::new_empty(mir.local_decls.len())))\n-            .into_engine(cx.tcx, mir)\n-            .pass_name(\"possible_borrower\")\n-            .iterate_to_fixpoint()\n-            .into_results_cursor(mir);\n-        PossibleBorrowerMap {\n-            body: mir,\n-            possible_borrower,\n-            maybe_live,\n-            pushed: BitSet::new_empty(mir.local_decls.len()),\n-            stack: Vec::with_capacity(mir.local_decls.len()),\n-        }\n+        let mut vis = PossibleBorrowerVisitor::new(cx, mir, possible_origin);\n+        vis.visit_body(mir);\n+        vis.into_map(cx, maybe_storage_live_result)\n     }\n \n-    /// Returns true if the set of borrowers of `borrowed` living at `at` includes no more than\n-    /// `borrowers`.\n-    /// Notes:\n-    /// 1. It would be nice if `PossibleBorrowerMap` could store `cx` so that `at_most_borrowers`\n-    /// would not require it to be passed in. But a `PossibleBorrowerMap` is stored in `LintPass`\n-    /// `Dereferencing`, which outlives any `LateContext`.\n-    /// 2. In all current uses of `at_most_borrowers`, `borrowers` is a slice of at most two\n-    /// elements. Thus, `borrowers.contains(...)` is effectively a constant-time operation. If\n-    /// `at_most_borrowers`'s uses were to expand beyond this, its implementation might have to be\n-    /// adjusted.\n-    pub fn at_most_borrowers(\n+    /// Returns true if the set of borrowers of `borrowed` living at `at` matches with `borrowers`.\n+    pub fn only_borrowers(&mut self, borrowers: &[mir::Local], borrowed: mir::Local, at: mir::Location) -> bool {\n+        self.bounded_borrowers(borrowers, borrowers, borrowed, at)\n+    }\n+\n+    /// Returns true if the set of borrowers of `borrowed` living at `at` includes at least `below`\n+    /// but no more than `above`.\n+    pub fn bounded_borrowers(\n         &mut self,\n-        cx: &LateContext<'tcx>,\n-        borrowers: &[mir::Local],\n+        below: &[mir::Local],\n+        above: &[mir::Local],\n         borrowed: mir::Local,\n         at: mir::Location,\n     ) -> bool {\n-        if is_copy(cx, self.body.local_decls[borrowed].ty) {\n-            return true;\n-        }\n-\n-        self.possible_borrower.seek_before_primary_effect(at);\n-        self.maybe_live.seek_before_primary_effect(at);\n-\n-        let possible_borrower = &self.possible_borrower.get().map;\n-        let maybe_live = &self.maybe_live;\n-\n-        self.pushed.clear();\n-        self.stack.clear();\n+        self.maybe_live.seek_after_primary_effect(at);\n \n-        if let Some(borrowers) = possible_borrower.get(&borrowed) {\n-            for b in borrowers.iter() {\n-                if self.pushed.insert(b) {\n-                    self.stack.push(b);\n-                }\n+        self.bitset.0.clear();\n+        let maybe_live = &mut self.maybe_live;\n+        if let Some(bitset) = self.map.get(&borrowed) {\n+            for b in bitset.iter().filter(move |b| maybe_live.contains(*b)) {\n+                self.bitset.0.insert(b);\n             }\n         } else {\n-            // Nothing borrows `borrowed` at `at`.\n-            return true;\n+            return false;\n         }\n \n-        while let Some(borrower) = self.stack.pop() {\n-            if maybe_live.contains(borrower) && !borrowers.contains(&borrower) {\n-                return false;\n-            }\n+        self.bitset.1.clear();\n+        for b in below {\n+            self.bitset.1.insert(*b);\n+        }\n \n-            if let Some(borrowers) = possible_borrower.get(&borrower) {\n-                for b in borrowers.iter() {\n-                    if self.pushed.insert(b) {\n-                        self.stack.push(b);\n-                    }\n-                }\n-            }\n+        if !self.bitset.0.superset(&self.bitset.1) {\n+            return false;\n+        }\n+\n+        for b in above {\n+            self.bitset.0.remove(*b);\n         }\n \n-        true\n+        self.bitset.0.is_empty()\n     }\n \n     pub fn local_is_alive_at(&mut self, local: mir::Local, at: mir::Location) -> bool {"}, {"sha": "dbf9f3b621d7aaa3c4c5531f64a4eb4b09a702e1", "filename": "src/tools/clippy/clippy_utils/src/msrvs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fmsrvs.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -20,8 +20,9 @@ macro_rules! msrv_aliases {\n // names may refer to stabilized feature flags or library items\n msrv_aliases! {\n     1,65,0 { LET_ELSE }\n-    1,62,0 { BOOL_THEN_SOME }\n+    1,62,0 { BOOL_THEN_SOME, DEFAULT_ENUM_ATTRIBUTE }\n     1,58,0 { FORMAT_ARGS_CAPTURE, PATTERN_TRAIT_CHAR_ARRAY }\n+    1,55,0 { SEEK_REWIND }\n     1,53,0 { OR_PATTERNS, MANUAL_BITS, BTREE_MAP_RETAIN, BTREE_SET_RETAIN, ARRAY_INTO_ITERATOR }\n     1,52,0 { STR_SPLIT_ONCE, REM_EUCLID_CONST }\n     1,51,0 { BORROW_AS_PTR, SEEK_FROM_CURRENT, UNSIGNED_ABS }\n@@ -45,7 +46,6 @@ msrv_aliases! {\n     1,18,0 { HASH_MAP_RETAIN, HASH_SET_RETAIN }\n     1,17,0 { FIELD_INIT_SHORTHAND, STATIC_IN_CONST, EXPECT_ERR }\n     1,16,0 { STR_REPEAT }\n-    1,55,0 { SEEK_REWIND }\n }\n \n fn parse_msrv(msrv: &str, sess: Option<&Session>, span: Option<Span>) -> Option<RustcVersion> {"}, {"sha": "95eebab7567762cedd6f1606ffeef7cf61088650", "filename": "src/tools/clippy/clippy_utils/src/paths.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fpaths.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -47,7 +47,6 @@ pub const IDENT: [&str; 3] = [\"rustc_span\", \"symbol\", \"Ident\"];\n #[cfg(feature = \"internal\")]\n pub const IDENT_AS_STR: [&str; 4] = [\"rustc_span\", \"symbol\", \"Ident\", \"as_str\"];\n pub const INSERT_STR: [&str; 4] = [\"alloc\", \"string\", \"String\", \"insert_str\"];\n-pub const ITER_COUNT: [&str; 6] = [\"core\", \"iter\", \"traits\", \"iterator\", \"Iterator\", \"count\"];\n pub const ITER_EMPTY: [&str; 5] = [\"core\", \"iter\", \"sources\", \"empty\", \"Empty\"];\n pub const ITERTOOLS_NEXT_TUPLE: [&str; 3] = [\"itertools\", \"Itertools\", \"next_tuple\"];\n #[cfg(feature = \"internal\")]"}, {"sha": "14c01a60b4c32b775e7aa5cce1ce9a242b363fd7", "filename": "src/tools/clippy/clippy_utils/src/visitors.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fvisitors.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -724,3 +724,14 @@ pub fn for_each_local_assignment<'tcx, B>(\n         ControlFlow::Continue(())\n     }\n }\n+\n+pub fn contains_break_or_continue(expr: &Expr<'_>) -> bool {\n+    for_each_expr(expr, |e| {\n+        if matches!(e.kind, ExprKind::Break(..) | ExprKind::Continue(..)) {\n+            ControlFlow::Break(())\n+        } else {\n+            ControlFlow::Continue(())\n+        }\n+    })\n+    .is_some()\n+}"}, {"sha": "40a6f47095ec2e59705f4f889ff1250a5af7065d", "filename": "src/tools/clippy/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Frust-toolchain?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2022-12-29\"\n+channel = \"nightly-2023-01-12\"\n components = [\"cargo\", \"llvm-tools\", \"rust-src\", \"rust-std\", \"rustc\", \"rustc-dev\", \"rustfmt\"]"}, {"sha": "d521e8d883983da345bd4df530e242a97d67f186", "filename": "src/tools/clippy/src/driver.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fsrc%2Fdriver.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -256,11 +256,14 @@ pub fn main() {\n     LazyLock::force(&ICE_HOOK);\n     exit(rustc_driver::catch_with_exit_code(move || {\n         let mut orig_args: Vec<String> = env::args().collect();\n+        let has_sysroot_arg = arg_value(&orig_args, \"--sysroot\", |_| true).is_some();\n \n         let sys_root_env = std::env::var(\"SYSROOT\").ok();\n         let pass_sysroot_env_if_given = |args: &mut Vec<String>, sys_root_env| {\n             if let Some(sys_root) = sys_root_env {\n-                args.extend(vec![\"--sysroot\".into(), sys_root]);\n+                if !has_sysroot_arg {\n+                    args.extend(vec![\"--sysroot\".into(), sys_root]);\n+                }\n             };\n         };\n "}, {"sha": "a771d8b87c81a4bcec3b0ed4cd14829bcad2f191", "filename": "src/tools/clippy/tests/integration.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fintegration.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fintegration.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fintegration.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,3 +1,12 @@\n+//! This test is meant to only be run in CI. To run it locally use:\n+//!\n+//! `env INTEGRATION=rust-lang/log cargo test --test integration --features=integration`\n+//!\n+//! You can use a different `INTEGRATION` value to test different repositories.\n+//!\n+//! This test will clone the specified repository and run Clippy on it. The test succeeds, if\n+//! Clippy doesn't produce an ICE. Lint warnings are ignored by this test.\n+\n #![cfg(feature = \"integration\")]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n #![warn(rust_2018_idioms, unused_lifetimes)]"}, {"sha": "fb5b1b193f8415b012b0756e48bb3d86200d4e68", "filename": "src/tools/clippy/tests/ui-toml/arithmetic_side_effects_allowed/arithmetic_side_effects_allowed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Farithmetic_side_effects_allowed%2Farithmetic_side_effects_allowed.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -107,7 +107,7 @@ fn rhs_is_different() {\n fn unary() {\n     // is explicitly on the list\n     let _ = -OutOfNames;\n-    // is specifically on the list\n+    // is explicitly on the list\n     let _ = -Foo;\n     // not on the list\n     let _ = -Bar;"}, {"sha": "859383a71194fd2d64d62241f7a574d9c1204096", "filename": "src/tools/clippy/tests/ui-toml/dbg_macro/dbg_macro.stderr", "status": "modified", "additions": 18, "deletions": 18, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui-toml%2Fdbg_macro%2Fdbg_macro.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,99 +1,99 @@\n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:5:22\n    |\n LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n    |                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::dbg-macro` implied by `-D warnings`\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n    |                      ~~~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:9:8\n    |\n LL |     if dbg!(n <= 1) {\n    |        ^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     if n <= 1 {\n    |        ~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:10:9\n    |\n LL |         dbg!(1)\n    |         ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         1\n    |\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:12:9\n    |\n LL |         dbg!(n * factorial(n - 1))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         n * factorial(n - 1)\n    |\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:17:5\n    |\n LL |     dbg!(42);\n    |     ^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     42;\n    |     ~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:18:5\n    |\n LL |     dbg!(dbg!(dbg!(42)));\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     dbg!(dbg!(42));\n    |     ~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:19:14\n    |\n LL |     foo(3) + dbg!(factorial(4));\n    |              ^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:20:5\n    |\n LL |     dbg!(1, 2, dbg!(3, 4));\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     (1, 2, dbg!(3, 4));\n    |     ~~~~~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:21:5\n    |\n LL |     dbg!(1, 2, 3, 4, 5);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     (1, 2, 3, 4, 5);\n    |     ~~~~~~~~~~~~~~~"}, {"sha": "918cf81c600af08db4573d83b6ca2dcceb3b4310", "filename": "src/tools/clippy/tests/ui/arithmetic_side_effects.rs", "status": "modified", "additions": 185, "deletions": 40, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -2,6 +2,7 @@\n     clippy::assign_op_pattern,\n     clippy::erasing_op,\n     clippy::identity_op,\n+    clippy::no_effect,\n     clippy::op_ref,\n     clippy::unnecessary_owned_empty_strings,\n     arithmetic_overflow,\n@@ -12,31 +13,95 @@\n \n use core::num::{Saturating, Wrapping};\n \n+#[derive(Clone, Copy)]\n pub struct Custom;\n \n macro_rules! impl_arith {\n-    ( $( $_trait:ident, $ty:ty, $method:ident; )* ) => {\n+    ( $( $_trait:ident, $lhs:ty, $rhs:ty, $method:ident; )* ) => {\n         $(\n-            impl core::ops::$_trait<$ty> for Custom {\n-                type Output = Self;\n-                fn $method(self, _: $ty) -> Self::Output { Self }\n+            impl core::ops::$_trait<$lhs> for $rhs {\n+                type Output = Custom;\n+                fn $method(self, _: $lhs) -> Self::Output { todo!() }\n+            }\n+        )*\n+    }\n+}\n+\n+macro_rules! impl_assign_arith {\n+    ( $( $_trait:ident, $lhs:ty, $rhs:ty, $method:ident; )* ) => {\n+        $(\n+            impl core::ops::$_trait<$lhs> for $rhs {\n+                fn $method(&mut self, _: $lhs) {}\n             }\n         )*\n     }\n }\n \n impl_arith!(\n-    Add, i32, add;\n-    Div, i32, div;\n-    Mul, i32, mul;\n-    Sub, i32, sub;\n-\n-    Add, f64, add;\n-    Div, f64, div;\n-    Mul, f64, mul;\n-    Sub, f64, sub;\n+    Add, Custom, Custom, add;\n+    Div, Custom, Custom, div;\n+    Mul, Custom, Custom, mul;\n+    Rem, Custom, Custom, rem;\n+    Sub, Custom, Custom, sub;\n+\n+    Add, Custom, &Custom, add;\n+    Div, Custom, &Custom, div;\n+    Mul, Custom, &Custom, mul;\n+    Rem, Custom, &Custom, rem;\n+    Sub, Custom, &Custom, sub;\n+\n+    Add, &Custom, Custom, add;\n+    Div, &Custom, Custom, div;\n+    Mul, &Custom, Custom, mul;\n+    Rem, &Custom, Custom, rem;\n+    Sub, &Custom, Custom, sub;\n+\n+    Add, &Custom, &Custom, add;\n+    Div, &Custom, &Custom, div;\n+    Mul, &Custom, &Custom, mul;\n+    Rem, &Custom, &Custom, rem;\n+    Sub, &Custom, &Custom, sub;\n+);\n+\n+impl_assign_arith!(\n+    AddAssign, Custom, Custom, add_assign;\n+    DivAssign, Custom, Custom, div_assign;\n+    MulAssign, Custom, Custom, mul_assign;\n+    RemAssign, Custom, Custom, rem_assign;\n+    SubAssign, Custom, Custom, sub_assign;\n+\n+    AddAssign, Custom, &Custom, add_assign;\n+    DivAssign, Custom, &Custom, div_assign;\n+    MulAssign, Custom, &Custom, mul_assign;\n+    RemAssign, Custom, &Custom, rem_assign;\n+    SubAssign, Custom, &Custom, sub_assign;\n+\n+    AddAssign, &Custom, Custom, add_assign;\n+    DivAssign, &Custom, Custom, div_assign;\n+    MulAssign, &Custom, Custom, mul_assign;\n+    RemAssign, &Custom, Custom, rem_assign;\n+    SubAssign, &Custom, Custom, sub_assign;\n+\n+    AddAssign, &Custom, &Custom, add_assign;\n+    DivAssign, &Custom, &Custom, div_assign;\n+    MulAssign, &Custom, &Custom, mul_assign;\n+    RemAssign, &Custom, &Custom, rem_assign;\n+    SubAssign, &Custom, &Custom, sub_assign;\n );\n \n+impl core::ops::Neg for Custom {\n+    type Output = Custom;\n+    fn neg(self) -> Self::Output {\n+        todo!()\n+    }\n+}\n+impl core::ops::Neg for &Custom {\n+    type Output = Custom;\n+    fn neg(self) -> Self::Output {\n+        todo!()\n+    }\n+}\n+\n pub fn association_with_structures_should_not_trigger_the_lint() {\n     enum Foo {\n         Bar = -2,\n@@ -125,6 +190,18 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n *= &0;\n     _n *= 1;\n     _n *= &1;\n+    _n += -0;\n+    _n += &-0;\n+    _n -= -0;\n+    _n -= &-0;\n+    _n /= -99;\n+    _n /= &-99;\n+    _n %= -99;\n+    _n %= &-99;\n+    _n *= -0;\n+    _n *= &-0;\n+    _n *= -1;\n+    _n *= &-1;\n \n     // Binary\n     _n = _n + 0;\n@@ -158,8 +235,9 @@ pub fn non_overflowing_ops_or_ops_already_handled_by_the_compiler_should_not_tri\n     _n = -&i32::MIN;\n }\n \n-pub fn runtime_ops() {\n+pub fn unknown_ops_or_runtime_ops_that_can_overflow() {\n     let mut _n = i32::MAX;\n+    let mut _custom = Custom;\n \n     // Assign\n     _n += 1;\n@@ -172,6 +250,36 @@ pub fn runtime_ops() {\n     _n %= &0;\n     _n *= 2;\n     _n *= &2;\n+    _n += -1;\n+    _n += &-1;\n+    _n -= -1;\n+    _n -= &-1;\n+    _n /= -0;\n+    _n /= &-0;\n+    _n %= -0;\n+    _n %= &-0;\n+    _n *= -2;\n+    _n *= &-2;\n+    _custom += Custom;\n+    _custom += &Custom;\n+    _custom -= Custom;\n+    _custom -= &Custom;\n+    _custom /= Custom;\n+    _custom /= &Custom;\n+    _custom %= Custom;\n+    _custom %= &Custom;\n+    _custom *= Custom;\n+    _custom *= &Custom;\n+    _custom += -Custom;\n+    _custom += &-Custom;\n+    _custom -= -Custom;\n+    _custom -= &-Custom;\n+    _custom /= -Custom;\n+    _custom /= &-Custom;\n+    _custom %= -Custom;\n+    _custom %= &-Custom;\n+    _custom *= -Custom;\n+    _custom *= &-Custom;\n \n     // Binary\n     _n = _n + 1;\n@@ -193,36 +301,73 @@ pub fn runtime_ops() {\n     _n = 23 + &85;\n     _n = &23 + 85;\n     _n = &23 + &85;\n-\n-    // Custom\n-    let _ = Custom + 0;\n-    let _ = Custom + 1;\n-    let _ = Custom + 2;\n-    let _ = Custom + 0.0;\n-    let _ = Custom + 1.0;\n-    let _ = Custom + 2.0;\n-    let _ = Custom - 0;\n-    let _ = Custom - 1;\n-    let _ = Custom - 2;\n-    let _ = Custom - 0.0;\n-    let _ = Custom - 1.0;\n-    let _ = Custom - 2.0;\n-    let _ = Custom / 0;\n-    let _ = Custom / 1;\n-    let _ = Custom / 2;\n-    let _ = Custom / 0.0;\n-    let _ = Custom / 1.0;\n-    let _ = Custom / 2.0;\n-    let _ = Custom * 0;\n-    let _ = Custom * 1;\n-    let _ = Custom * 2;\n-    let _ = Custom * 0.0;\n-    let _ = Custom * 1.0;\n-    let _ = Custom * 2.0;\n+    _custom = _custom + _custom;\n+    _custom = _custom + &_custom;\n+    _custom = Custom + _custom;\n+    _custom = &Custom + _custom;\n+    _custom = _custom - Custom;\n+    _custom = _custom - &Custom;\n+    _custom = Custom - _custom;\n+    _custom = &Custom - _custom;\n+    _custom = _custom / Custom;\n+    _custom = _custom / &Custom;\n+    _custom = _custom % Custom;\n+    _custom = _custom % &Custom;\n+    _custom = _custom * Custom;\n+    _custom = _custom * &Custom;\n+    _custom = Custom * _custom;\n+    _custom = &Custom * _custom;\n+    _custom = Custom + &Custom;\n+    _custom = &Custom + Custom;\n+    _custom = &Custom + &Custom;\n \n     // Unary\n     _n = -_n;\n     _n = -&_n;\n+    _custom = -_custom;\n+    _custom = -&_custom;\n+}\n+\n+// Copied and pasted from the `integer_arithmetic` lint for comparison.\n+pub fn integer_arithmetic() {\n+    let mut i = 1i32;\n+    let mut var1 = 0i32;\n+    let mut var2 = -1i32;\n+\n+    1 + i;\n+    i * 2;\n+    1 % i / 2;\n+    i - 2 + 2 - i;\n+    -i;\n+    i >> 1;\n+    i << 1;\n+\n+    -1;\n+    -(-1);\n+\n+    i & 1;\n+    i | 1;\n+    i ^ 1;\n+\n+    i += 1;\n+    i -= 1;\n+    i *= 2;\n+    i /= 2;\n+    i /= 0;\n+    i /= -1;\n+    i /= var1;\n+    i /= var2;\n+    i %= 2;\n+    i %= 0;\n+    i %= -1;\n+    i %= var1;\n+    i %= var2;\n+    i <<= 3;\n+    i >>= 2;\n+\n+    i |= 1;\n+    i &= 1;\n+    i ^= i;\n }\n \n fn main() {}"}, {"sha": "5e349f6b497cd00e19c82bb49088be1173115577", "filename": "src/tools/clippy/tests/ui/arithmetic_side_effects.stderr", "status": "modified", "additions": 372, "deletions": 108, "changes": 480, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Farithmetic_side_effects.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,334 +1,598 @@\n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:165:5\n+  --> $DIR/arithmetic_side_effects.rs:243:5\n    |\n LL |     _n += 1;\n    |     ^^^^^^^\n    |\n    = note: `-D clippy::arithmetic-side-effects` implied by `-D warnings`\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:166:5\n+  --> $DIR/arithmetic_side_effects.rs:244:5\n    |\n LL |     _n += &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:167:5\n+  --> $DIR/arithmetic_side_effects.rs:245:5\n    |\n LL |     _n -= 1;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:168:5\n+  --> $DIR/arithmetic_side_effects.rs:246:5\n    |\n LL |     _n -= &1;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:169:5\n+  --> $DIR/arithmetic_side_effects.rs:247:5\n    |\n LL |     _n /= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:170:5\n+  --> $DIR/arithmetic_side_effects.rs:248:5\n    |\n LL |     _n /= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:171:5\n+  --> $DIR/arithmetic_side_effects.rs:249:5\n    |\n LL |     _n %= 0;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:172:5\n+  --> $DIR/arithmetic_side_effects.rs:250:5\n    |\n LL |     _n %= &0;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:173:5\n+  --> $DIR/arithmetic_side_effects.rs:251:5\n    |\n LL |     _n *= 2;\n    |     ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:174:5\n+  --> $DIR/arithmetic_side_effects.rs:252:5\n    |\n LL |     _n *= &2;\n    |     ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:177:10\n+  --> $DIR/arithmetic_side_effects.rs:253:5\n+   |\n+LL |     _n += -1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:254:5\n+   |\n+LL |     _n += &-1;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:255:5\n+   |\n+LL |     _n -= -1;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:256:5\n+   |\n+LL |     _n -= &-1;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:257:5\n+   |\n+LL |     _n /= -0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:258:5\n+   |\n+LL |     _n /= &-0;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:259:5\n+   |\n+LL |     _n %= -0;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:260:5\n+   |\n+LL |     _n %= &-0;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:261:5\n+   |\n+LL |     _n *= -2;\n+   |     ^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:262:5\n+   |\n+LL |     _n *= &-2;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:263:5\n+   |\n+LL |     _custom += Custom;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:264:5\n+   |\n+LL |     _custom += &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:265:5\n+   |\n+LL |     _custom -= Custom;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:266:5\n+   |\n+LL |     _custom -= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:267:5\n+   |\n+LL |     _custom /= Custom;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:268:5\n+   |\n+LL |     _custom /= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:269:5\n+   |\n+LL |     _custom %= Custom;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:270:5\n+   |\n+LL |     _custom %= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:271:5\n+   |\n+LL |     _custom *= Custom;\n+   |     ^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:272:5\n+   |\n+LL |     _custom *= &Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:273:5\n+   |\n+LL |     _custom += -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:274:5\n+   |\n+LL |     _custom += &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:275:5\n+   |\n+LL |     _custom -= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:276:5\n+   |\n+LL |     _custom -= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:277:5\n+   |\n+LL |     _custom /= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:278:5\n+   |\n+LL |     _custom /= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:279:5\n+   |\n+LL |     _custom %= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:280:5\n+   |\n+LL |     _custom %= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:281:5\n+   |\n+LL |     _custom *= -Custom;\n+   |     ^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:282:5\n+   |\n+LL |     _custom *= &-Custom;\n+   |     ^^^^^^^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:285:10\n    |\n LL |     _n = _n + 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:178:10\n+  --> $DIR/arithmetic_side_effects.rs:286:10\n    |\n LL |     _n = _n + &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:179:10\n+  --> $DIR/arithmetic_side_effects.rs:287:10\n    |\n LL |     _n = 1 + _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:180:10\n+  --> $DIR/arithmetic_side_effects.rs:288:10\n    |\n LL |     _n = &1 + _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:181:10\n+  --> $DIR/arithmetic_side_effects.rs:289:10\n    |\n LL |     _n = _n - 1;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:182:10\n+  --> $DIR/arithmetic_side_effects.rs:290:10\n    |\n LL |     _n = _n - &1;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:183:10\n+  --> $DIR/arithmetic_side_effects.rs:291:10\n    |\n LL |     _n = 1 - _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:184:10\n+  --> $DIR/arithmetic_side_effects.rs:292:10\n    |\n LL |     _n = &1 - _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:185:10\n+  --> $DIR/arithmetic_side_effects.rs:293:10\n    |\n LL |     _n = _n / 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:186:10\n+  --> $DIR/arithmetic_side_effects.rs:294:10\n    |\n LL |     _n = _n / &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:187:10\n+  --> $DIR/arithmetic_side_effects.rs:295:10\n    |\n LL |     _n = _n % 0;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:188:10\n+  --> $DIR/arithmetic_side_effects.rs:296:10\n    |\n LL |     _n = _n % &0;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:189:10\n+  --> $DIR/arithmetic_side_effects.rs:297:10\n    |\n LL |     _n = _n * 2;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:190:10\n+  --> $DIR/arithmetic_side_effects.rs:298:10\n    |\n LL |     _n = _n * &2;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:191:10\n+  --> $DIR/arithmetic_side_effects.rs:299:10\n    |\n LL |     _n = 2 * _n;\n    |          ^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:192:10\n+  --> $DIR/arithmetic_side_effects.rs:300:10\n    |\n LL |     _n = &2 * _n;\n    |          ^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:193:10\n+  --> $DIR/arithmetic_side_effects.rs:301:10\n    |\n LL |     _n = 23 + &85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:194:10\n+  --> $DIR/arithmetic_side_effects.rs:302:10\n    |\n LL |     _n = &23 + 85;\n    |          ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:195:10\n+  --> $DIR/arithmetic_side_effects.rs:303:10\n    |\n LL |     _n = &23 + &85;\n    |          ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:198:13\n+  --> $DIR/arithmetic_side_effects.rs:304:15\n    |\n-LL |     let _ = Custom + 0;\n-   |             ^^^^^^^^^^\n+LL |     _custom = _custom + _custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:199:13\n+  --> $DIR/arithmetic_side_effects.rs:305:15\n    |\n-LL |     let _ = Custom + 1;\n-   |             ^^^^^^^^^^\n+LL |     _custom = _custom + &_custom;\n+   |               ^^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:200:13\n+  --> $DIR/arithmetic_side_effects.rs:306:15\n    |\n-LL |     let _ = Custom + 2;\n-   |             ^^^^^^^^^^\n+LL |     _custom = Custom + _custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:201:13\n+  --> $DIR/arithmetic_side_effects.rs:307:15\n    |\n-LL |     let _ = Custom + 0.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = &Custom + _custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:202:13\n+  --> $DIR/arithmetic_side_effects.rs:308:15\n    |\n-LL |     let _ = Custom + 1.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = _custom - Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:203:13\n+  --> $DIR/arithmetic_side_effects.rs:309:15\n    |\n-LL |     let _ = Custom + 2.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = _custom - &Custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:204:13\n+  --> $DIR/arithmetic_side_effects.rs:310:15\n    |\n-LL |     let _ = Custom - 0;\n-   |             ^^^^^^^^^^\n+LL |     _custom = Custom - _custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:205:13\n+  --> $DIR/arithmetic_side_effects.rs:311:15\n    |\n-LL |     let _ = Custom - 1;\n-   |             ^^^^^^^^^^\n+LL |     _custom = &Custom - _custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:206:13\n+  --> $DIR/arithmetic_side_effects.rs:312:15\n    |\n-LL |     let _ = Custom - 2;\n-   |             ^^^^^^^^^^\n+LL |     _custom = _custom / Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:207:13\n+  --> $DIR/arithmetic_side_effects.rs:313:15\n    |\n-LL |     let _ = Custom - 0.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = _custom / &Custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:208:13\n+  --> $DIR/arithmetic_side_effects.rs:314:15\n    |\n-LL |     let _ = Custom - 1.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = _custom % Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:209:13\n+  --> $DIR/arithmetic_side_effects.rs:315:15\n    |\n-LL |     let _ = Custom - 2.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = _custom % &Custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:210:13\n+  --> $DIR/arithmetic_side_effects.rs:316:15\n    |\n-LL |     let _ = Custom / 0;\n-   |             ^^^^^^^^^^\n+LL |     _custom = _custom * Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:211:13\n+  --> $DIR/arithmetic_side_effects.rs:317:15\n    |\n-LL |     let _ = Custom / 1;\n-   |             ^^^^^^^^^^\n+LL |     _custom = _custom * &Custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:212:13\n+  --> $DIR/arithmetic_side_effects.rs:318:15\n    |\n-LL |     let _ = Custom / 2;\n-   |             ^^^^^^^^^^\n+LL |     _custom = Custom * _custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:213:13\n+  --> $DIR/arithmetic_side_effects.rs:319:15\n    |\n-LL |     let _ = Custom / 0.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = &Custom * _custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:214:13\n+  --> $DIR/arithmetic_side_effects.rs:320:15\n    |\n-LL |     let _ = Custom / 1.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = Custom + &Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:215:13\n+  --> $DIR/arithmetic_side_effects.rs:321:15\n    |\n-LL |     let _ = Custom / 2.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = &Custom + Custom;\n+   |               ^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:216:13\n+  --> $DIR/arithmetic_side_effects.rs:322:15\n    |\n-LL |     let _ = Custom * 0;\n-   |             ^^^^^^^^^^\n+LL |     _custom = &Custom + &Custom;\n+   |               ^^^^^^^^^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:217:13\n+  --> $DIR/arithmetic_side_effects.rs:325:10\n    |\n-LL |     let _ = Custom * 1;\n-   |             ^^^^^^^^^^\n+LL |     _n = -_n;\n+   |          ^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:218:13\n+  --> $DIR/arithmetic_side_effects.rs:326:10\n    |\n-LL |     let _ = Custom * 2;\n-   |             ^^^^^^^^^^\n+LL |     _n = -&_n;\n+   |          ^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:219:13\n+  --> $DIR/arithmetic_side_effects.rs:327:15\n    |\n-LL |     let _ = Custom * 0.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = -_custom;\n+   |               ^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:220:13\n+  --> $DIR/arithmetic_side_effects.rs:328:15\n    |\n-LL |     let _ = Custom * 1.0;\n-   |             ^^^^^^^^^^^^\n+LL |     _custom = -&_custom;\n+   |               ^^^^^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:221:13\n+  --> $DIR/arithmetic_side_effects.rs:337:5\n    |\n-LL |     let _ = Custom * 2.0;\n-   |             ^^^^^^^^^^^^\n+LL |     1 + i;\n+   |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:224:10\n+  --> $DIR/arithmetic_side_effects.rs:338:5\n    |\n-LL |     _n = -_n;\n-   |          ^^^\n+LL |     i * 2;\n+   |     ^^^^^\n \n error: arithmetic operation that can potentially result in unexpected side-effects\n-  --> $DIR/arithmetic_side_effects.rs:225:10\n+  --> $DIR/arithmetic_side_effects.rs:340:5\n    |\n-LL |     _n = -&_n;\n-   |          ^^^^\n+LL |     i - 2 + 2 - i;\n+   |     ^^^^^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:341:5\n+   |\n+LL |     -i;\n+   |     ^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:342:5\n+   |\n+LL |     i >> 1;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:343:5\n+   |\n+LL |     i << 1;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:352:5\n+   |\n+LL |     i += 1;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:353:5\n+   |\n+LL |     i -= 1;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:354:5\n+   |\n+LL |     i *= 2;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:356:5\n+   |\n+LL |     i /= 0;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:358:5\n+   |\n+LL |     i /= var1;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:359:5\n+   |\n+LL |     i /= var2;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:361:5\n+   |\n+LL |     i %= 0;\n+   |     ^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:363:5\n+   |\n+LL |     i %= var1;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:364:5\n+   |\n+LL |     i %= var2;\n+   |     ^^^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:365:5\n+   |\n+LL |     i <<= 3;\n+   |     ^^^^^^^\n+\n+error: arithmetic operation that can potentially result in unexpected side-effects\n+  --> $DIR/arithmetic_side_effects.rs:366:5\n+   |\n+LL |     i >>= 2;\n+   |     ^^^^^^^\n \n-error: aborting due to 55 previous errors\n+error: aborting due to 99 previous errors\n "}, {"sha": "7e9f074fdcabd24f9e97019139ebedc60e7b36a0", "filename": "src/tools/clippy/tests/ui/box_default.fixed", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -21,16 +21,16 @@ macro_rules! outer {\n fn main() {\n     let _string: Box<String> = Box::default();\n     let _byte = Box::<u8>::default();\n-    let _vec = Box::<std::vec::Vec<u8>>::default();\n+    let _vec = Box::<Vec<u8>>::default();\n     let _impl = Box::<ImplementsDefault>::default();\n     let _impl2 = Box::<ImplementsDefault>::default();\n     let _impl3: Box<ImplementsDefault> = Box::default();\n     let _own = Box::new(OwnDefault::default()); // should not lint\n-    let _in_macro = outer!(Box::<std::string::String>::default());\n-    let _string_default = outer!(Box::<std::string::String>::default());\n+    let _in_macro = outer!(Box::<String>::default());\n+    let _string_default = outer!(Box::<String>::default());\n     let _vec2: Box<Vec<ImplementsDefault>> = Box::default();\n     let _vec3: Box<Vec<bool>> = Box::default();\n-    let _vec4: Box<_> = Box::<std::vec::Vec<bool>>::default();\n+    let _vec4: Box<_> = Box::<Vec<bool>>::default();\n     let _more = ret_ty_fn();\n     call_ty_fn(Box::default());\n }\n@@ -54,4 +54,14 @@ impl Read for ImplementsDefault {\n \n fn issue_9621_dyn_trait() {\n     let _: Box<dyn Read> = Box::<ImplementsDefault>::default();\n+    issue_10089();\n+}\n+\n+fn issue_10089() {\n+    let _closure = || {\n+        #[derive(Default)]\n+        struct WeirdPathed;\n+\n+        let _ = Box::<WeirdPathed>::default();\n+    };\n }"}, {"sha": "5c8d0b8354cccf6eb7d3512399d3d1a54ff0082a", "filename": "src/tools/clippy/tests/ui/box_default.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -54,4 +54,14 @@ impl Read for ImplementsDefault {\n \n fn issue_9621_dyn_trait() {\n     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n+    issue_10089();\n+}\n+\n+fn issue_10089() {\n+    let _closure = || {\n+        #[derive(Default)]\n+        struct WeirdPathed;\n+\n+        let _ = Box::new(WeirdPathed::default());\n+    };\n }"}, {"sha": "249eb340f96cbd75b4b7991adbe39a1b733295dc", "filename": "src/tools/clippy/tests/ui/box_default.stderr", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fbox_default.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -16,7 +16,7 @@ error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:24:16\n    |\n LL |     let _vec = Box::new(Vec::<u8>::new());\n-   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::vec::Vec<u8>>::default()`\n+   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<u8>>::default()`\n \n error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:25:17\n@@ -40,13 +40,13 @@ error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:29:28\n    |\n LL |     let _in_macro = outer!(Box::new(String::new()));\n-   |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::string::String>::default()`\n+   |                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:30:34\n    |\n LL |     let _string_default = outer!(Box::new(String::from(\"\")));\n-   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::string::String>::default()`\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<String>::default()`\n \n error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:31:46\n@@ -64,7 +64,7 @@ error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:33:25\n    |\n LL |     let _vec4: Box<_> = Box::new(Vec::from([false; 0]));\n-   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<std::vec::Vec<bool>>::default()`\n+   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<Vec<bool>>::default()`\n \n error: `Box::new(_)` of default value\n   --> $DIR/box_default.rs:35:16\n@@ -84,5 +84,11 @@ error: `Box::new(_)` of default value\n LL |     let _: Box<dyn Read> = Box::new(ImplementsDefault::default());\n    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<ImplementsDefault>::default()`\n \n-error: aborting due to 14 previous errors\n+error: `Box::new(_)` of default value\n+  --> $DIR/box_default.rs:65:17\n+   |\n+LL |         let _ = Box::new(WeirdPathed::default());\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `Box::<WeirdPathed>::default()`\n+\n+error: aborting due to 15 previous errors\n "}, {"sha": "5fbaa64db39edb8406855012a3c1ef35e83cce28", "filename": "src/tools/clippy/tests/ui/case_sensitive_file_extension_comparisons.fixed", "status": "added", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -0,0 +1,67 @@\n+// run-rustfix\n+#![warn(clippy::case_sensitive_file_extension_comparisons)]\n+\n+use std::string::String;\n+\n+struct TestStruct;\n+\n+impl TestStruct {\n+    fn ends_with(self, _arg: &str) {}\n+}\n+\n+#[allow(dead_code)]\n+fn is_rust_file(filename: &str) -> bool {\n+    std::path::Path::new(filename)\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+}\n+\n+fn main() {\n+    // std::string::String and &str should trigger the lint failure with .ext12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+\n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = std::path::Path::new(\"str\")\n+            .extension()\n+            .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+    }\n+\n+    // The test struct should not trigger the lint failure with .ext12\n+    TestStruct {}.ends_with(\".ext12\");\n+\n+    // std::string::String and &str should trigger the lint failure with .EXT12\n+    let _ = std::path::Path::new(&String::new())\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+    let _ = std::path::Path::new(\"str\")\n+        .extension()\n+        .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+\n+    // Should not trigger the lint failure because of the calls to to_lowercase and to_uppercase\n+    let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+    let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+\n+    // The test struct should not trigger the lint failure with .EXT12\n+    TestStruct {}.ends_with(\".EXT12\");\n+\n+    // Should not trigger the lint failure with .eXT12\n+    let _ = String::new().ends_with(\".eXT12\");\n+    let _ = \"str\".ends_with(\".eXT12\");\n+    TestStruct {}.ends_with(\".eXT12\");\n+\n+    // Should not trigger the lint failure with .EXT123 (too long)\n+    let _ = String::new().ends_with(\".EXT123\");\n+    let _ = \"str\".ends_with(\".EXT123\");\n+    TestStruct {}.ends_with(\".EXT123\");\n+\n+    // Shouldn't fail if it doesn't start with a dot\n+    let _ = String::new().ends_with(\"a.ext\");\n+    let _ = \"str\".ends_with(\"a.extA\");\n+    TestStruct {}.ends_with(\"a.ext\");\n+}"}, {"sha": "3c0d4821f9f3a8ee9ff18b66e51e855cadc3655b", "filename": "src/tools/clippy/tests/ui/case_sensitive_file_extension_comparisons.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,13 +1,15 @@\n+// run-rustfix\n #![warn(clippy::case_sensitive_file_extension_comparisons)]\n \n use std::string::String;\n \n struct TestStruct;\n \n impl TestStruct {\n-    fn ends_with(self, arg: &str) {}\n+    fn ends_with(self, _arg: &str) {}\n }\n \n+#[allow(dead_code)]\n fn is_rust_file(filename: &str) -> bool {\n     filename.ends_with(\".rs\")\n }\n@@ -17,13 +19,22 @@ fn main() {\n     let _ = String::new().ends_with(\".ext12\");\n     let _ = \"str\".ends_with(\".ext12\");\n \n+    // The fixup should preserve the indentation level\n+    {\n+        let _ = \"str\".ends_with(\".ext12\");\n+    }\n+\n     // The test struct should not trigger the lint failure with .ext12\n     TestStruct {}.ends_with(\".ext12\");\n \n     // std::string::String and &str should trigger the lint failure with .EXT12\n     let _ = String::new().ends_with(\".EXT12\");\n     let _ = \"str\".ends_with(\".EXT12\");\n \n+    // Should not trigger the lint failure because of the calls to to_lowercase and to_uppercase\n+    let _ = String::new().to_lowercase().ends_with(\".EXT12\");\n+    let _ = String::new().to_uppercase().ends_with(\".EXT12\");\n+\n     // The test struct should not trigger the lint failure with .EXT12\n     TestStruct {}.ends_with(\".EXT12\");\n "}, {"sha": "44c8e3fdf7403d05c6eba7101d231cc6c89d7e14", "filename": "src/tools/clippy/tests/ui/case_sensitive_file_extension_comparisons.stderr", "status": "modified", "additions": 55, "deletions": 11, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fcase_sensitive_file_extension_comparisons.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,43 +1,87 @@\n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:12:14\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:14:5\n    |\n LL |     filename.ends_with(\".rs\")\n-   |              ^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n    = note: `-D clippy::case-sensitive-file-extension-comparisons` implied by `-D warnings`\n+help: use std::path::Path\n+   |\n+LL ~     std::path::Path::new(filename)\n+LL +         .extension()\n+LL +         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"rs\"))\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:17:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:19:13\n    |\n LL |     let _ = String::new().ends_with(\".ext12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:18:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:20:13\n    |\n LL |     let _ = \"str\".ends_with(\".ext12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:27\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:24:17\n+   |\n+LL |         let _ = \"str\".ends_with(\".ext12\");\n+   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~         let _ = std::path::Path::new(\"str\")\n+LL +             .extension()\n+LL ~             .map_or(false, |ext| ext.eq_ignore_ascii_case(\"ext12\"));\n+   |\n+\n+error: case-sensitive file extension comparison\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:31:13\n    |\n LL |     let _ = String::new().ends_with(\".EXT12\");\n-   |                           ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(&String::new())\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n error: case-sensitive file extension comparison\n-  --> $DIR/case_sensitive_file_extension_comparisons.rs:25:19\n+  --> $DIR/case_sensitive_file_extension_comparisons.rs:32:13\n    |\n LL |     let _ = \"str\".ends_with(\".EXT12\");\n-   |                   ^^^^^^^^^^^^^^^^^^^\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = help: consider using a case-insensitive comparison instead\n+help: use std::path::Path\n+   |\n+LL ~     let _ = std::path::Path::new(\"str\")\n+LL +         .extension()\n+LL ~         .map_or(false, |ext| ext.eq_ignore_ascii_case(\"EXT12\"));\n+   |\n \n-error: aborting due to 5 previous errors\n+error: aborting due to 6 previous errors\n "}, {"sha": "862234d204be355e4fff41dbe4d4e1d474207da5", "filename": "src/tools/clippy/tests/ui/clone_on_copy.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fclone_on_copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fclone_on_copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fclone_on_copy.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -48,7 +48,7 @@ error: using `clone` on type `i32` which implements the `Copy` trait\n LL |     vec.push(42.clone());\n    |              ^^^^^^^^^^ help: try removing the `clone` call: `42`\n \n-error: using `clone` on type `std::option::Option<i32>` which implements the `Copy` trait\n+error: using `clone` on type `Option<i32>` which implements the `Copy` trait\n   --> $DIR/clone_on_copy.rs:77:17\n    |\n LL |     let value = opt.clone()?; // operator precedence needed (*opt)?"}, {"sha": "ddb5f1342e9942a72f2183b9bee79b3a5ef0506b", "filename": "src/tools/clippy/tests/ui/dbg_macro.stderr", "status": "modified", "additions": 26, "deletions": 26, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdbg_macro.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,143 +1,143 @@\n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:5:22\n    |\n LL |     if let Some(n) = dbg!(n.checked_sub(4)) { n } else { n }\n    |                      ^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::dbg-macro` implied by `-D warnings`\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     if let Some(n) = n.checked_sub(4) { n } else { n }\n    |                      ~~~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:9:8\n    |\n LL |     if dbg!(n <= 1) {\n    |        ^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     if n <= 1 {\n    |        ~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:10:9\n    |\n LL |         dbg!(1)\n    |         ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         1\n    |\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:12:9\n    |\n LL |         dbg!(n * factorial(n - 1))\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         n * factorial(n - 1)\n    |\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:17:5\n    |\n LL |     dbg!(42);\n    |     ^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     42;\n    |     ~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:18:5\n    |\n LL |     dbg!(dbg!(dbg!(42)));\n    |     ^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     dbg!(dbg!(42));\n    |     ~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:19:14\n    |\n LL |     foo(3) + dbg!(factorial(4));\n    |              ^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     foo(3) + factorial(4);\n    |              ~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:20:5\n    |\n LL |     dbg!(1, 2, dbg!(3, 4));\n    |     ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     (1, 2, dbg!(3, 4));\n    |     ~~~~~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:21:5\n    |\n LL |     dbg!(1, 2, 3, 4, 5);\n    |     ^^^^^^^^^^^^^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     (1, 2, 3, 4, 5);\n    |     ~~~~~~~~~~~~~~~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:41:9\n    |\n LL |         dbg!(2);\n    |         ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         2;\n    |         ~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:47:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     1;\n    |     ~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:52:5\n    |\n LL |     dbg!(1);\n    |     ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |     1;\n    |     ~\n \n-error: `dbg!` macro is intended as a debugging tool\n+error: the `dbg!` macro is intended as a debugging tool\n   --> $DIR/dbg_macro.rs:58:9\n    |\n LL |         dbg!(1);\n    |         ^^^^^^^\n    |\n-help: ensure to avoid having uses of it in version control\n+help: remove the invocation before committing it to a version control system\n    |\n LL |         1;\n    |         ~"}, {"sha": "5640599d48ae8b191c95bc77fdd85d6802e774fa", "filename": "src/tools/clippy/tests/ui/default_trait_access.fixed", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -12,17 +12,17 @@ use std::default::Default as D2;\n use std::string;\n \n fn main() {\n-    let s1: String = std::string::String::default();\n+    let s1: String = String::default();\n \n     let s2 = String::default();\n \n-    let s3: String = std::string::String::default();\n+    let s3: String = String::default();\n \n-    let s4: String = std::string::String::default();\n+    let s4: String = String::default();\n \n     let s5 = string::String::default();\n \n-    let s6: String = std::string::String::default();\n+    let s6: String = String::default();\n \n     let s7 = std::string::String::default();\n "}, {"sha": "e4f73c08d190a8844f9feb37303e4db35300f242", "filename": "src/tools/clippy/tests/ui/default_trait_access.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdefault_trait_access.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,32 +1,32 @@\n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:15:22\n    |\n LL |     let s1: String = Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n    |\n note: the lint level is defined here\n   --> $DIR/default_trait_access.rs:3:9\n    |\n LL | #![deny(clippy::default_trait_access)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:19:22\n    |\n LL |     let s3: String = D2::default();\n-   |                      ^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^ help: try: `String::default()`\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:21:22\n    |\n LL |     let s4: String = std::default::Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n \n-error: calling `std::string::String::default()` is more clear than this expression\n+error: calling `String::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:25:22\n    |\n LL |     let s6: String = default::Default::default();\n-   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::string::String::default()`\n+   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `String::default()`\n \n error: calling `GenericDerivedDefault::default()` is more clear than this expression\n   --> $DIR/default_trait_access.rs:35:46"}, {"sha": "ee8456f5deb8ae89f3462f02d2ed2766378c10d6", "filename": "src/tools/clippy/tests/ui/derivable_impls.fixed", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -210,4 +210,25 @@ impl Default for IntOrString {\n     }\n }\n \n+#[derive(Default)]\n+pub enum SimpleEnum {\n+    Foo,\n+    #[default]\n+    Bar,\n+}\n+\n+\n+\n+pub enum NonExhaustiveEnum {\n+    Foo,\n+    #[non_exhaustive]\n+    Bar,\n+}\n+\n+impl Default for NonExhaustiveEnum {\n+    fn default() -> Self {\n+        NonExhaustiveEnum::Bar\n+    }\n+}\n+\n fn main() {}"}, {"sha": "14af419bcad14ad3992a18a14cbd71099bd4afd5", "filename": "src/tools/clippy/tests/ui/derivable_impls.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -244,4 +244,27 @@ impl Default for IntOrString {\n     }\n }\n \n+pub enum SimpleEnum {\n+    Foo,\n+    Bar,\n+}\n+\n+impl Default for SimpleEnum {\n+    fn default() -> Self {\n+        SimpleEnum::Bar\n+    }\n+}\n+\n+pub enum NonExhaustiveEnum {\n+    Foo,\n+    #[non_exhaustive]\n+    Bar,\n+}\n+\n+impl Default for NonExhaustiveEnum {\n+    fn default() -> Self {\n+        NonExhaustiveEnum::Bar\n+    }\n+}\n+\n fn main() {}"}, {"sha": "81963c3be5b5d32478c63c7871e4e24d933f966e", "filename": "src/tools/clippy/tests/ui/derivable_impls.stderr", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderivable_impls.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -113,5 +113,26 @@ help: ...and instead derive it\n LL | #[derive(Default)]\n    |\n \n-error: aborting due to 7 previous errors\n+error: this `impl` can be derived\n+  --> $DIR/derivable_impls.rs:252:1\n+   |\n+LL | / impl Default for SimpleEnum {\n+LL | |     fn default() -> Self {\n+LL | |         SimpleEnum::Bar\n+LL | |     }\n+LL | | }\n+   | |_^\n+   |\n+   = help: remove the manual implementation...\n+help: ...and instead derive it...\n+   |\n+LL | #[derive(Default)]\n+   |\n+help: ...and mark the default variant\n+   |\n+LL ~     #[default]\n+LL ~     Bar,\n+   |\n+\n+error: aborting due to 8 previous errors\n "}, {"sha": "6e0ce55f57d9349c7e353ec6438e04a96afab159", "filename": "src/tools/clippy/tests/ui/derive.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -86,4 +86,15 @@ impl<T: Clone, U> Clone for GenericRef<'_, T, U> {\n     }\n }\n \n+// https://github.com/rust-lang/rust-clippy/issues/10188\n+#[repr(packed)]\n+#[derive(Copy)]\n+struct Packed<T>(T);\n+\n+impl<T: Copy> Clone for Packed<T> {\n+    fn clone(&self) -> Self {\n+        *self\n+    }\n+}\n+\n fn main() {}"}, {"sha": "16c92397804e526dac40510073c9814d8e053efc", "filename": "src/tools/clippy/tests/ui/derive_hash_xor_eq.stderr", "status": "removed", "additions": 0, "deletions": 59, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderive_hash_xor_eq.stderr?ref=222d1ff68d5bfe1dc2d7f3f0c42811fe12964af9", "patch": "@@ -1,59 +0,0 @@\n-error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:12:10\n-   |\n-LL | #[derive(Hash)]\n-   |          ^^^^\n-   |\n-note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:15:1\n-   |\n-LL | impl PartialEq for Bar {\n-   | ^^^^^^^^^^^^^^^^^^^^^^\n-   = note: `#[deny(clippy::derive_hash_xor_eq)]` on by default\n-   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n-  --> $DIR/derive_hash_xor_eq.rs:21:10\n-   |\n-LL | #[derive(Hash)]\n-   |          ^^^^\n-   |\n-note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:24:1\n-   |\n-LL | impl PartialEq<Baz> for Baz {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:33:1\n-   |\n-LL | / impl std::hash::Hash for Bah {\n-LL | |     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n-LL | | }\n-   | |_^\n-   |\n-note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:30:10\n-   |\n-LL | #[derive(PartialEq)]\n-   |          ^^^^^^^^^\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: you are implementing `Hash` explicitly but have derived `PartialEq`\n-  --> $DIR/derive_hash_xor_eq.rs:51:5\n-   |\n-LL | /     impl Hash for Foo3 {\n-LL | |         fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n-LL | |     }\n-   | |_____^\n-   |\n-note: `PartialEq` implemented here\n-  --> $DIR/derive_hash_xor_eq.rs:48:14\n-   |\n-LL |     #[derive(PartialEq)]\n-   |              ^^^^^^^^^\n-   = note: this error originates in the derive macro `PartialEq` (in Nightly builds, run with -Z macro-backtrace for more info)\n-\n-error: aborting due to 4 previous errors\n-"}, {"sha": "8ad09a8de43d5acad141e03b5cf3b682010105eb", "filename": "src/tools/clippy/tests/ui/derived_hash_with_manual_eq.rs", "status": "renamed", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -27,30 +27,13 @@ impl PartialEq<Baz> for Baz {\n     }\n }\n \n+// Implementing `Hash` with a derived `PartialEq` is fine. See #2627\n+\n #[derive(PartialEq)]\n struct Bah;\n \n impl std::hash::Hash for Bah {\n     fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n }\n \n-#[derive(PartialEq)]\n-struct Foo2;\n-\n-trait Hash {}\n-\n-// We don't want to lint on user-defined traits called `Hash`\n-impl Hash for Foo2 {}\n-\n-mod use_hash {\n-    use std::hash::{Hash, Hasher};\n-\n-    #[derive(PartialEq)]\n-    struct Foo3;\n-\n-    impl Hash for Foo3 {\n-        fn hash<H: std::hash::Hasher>(&self, _: &mut H) {}\n-    }\n-}\n-\n fn main() {}", "previous_filename": "src/tools/clippy/tests/ui/derive_hash_xor_eq.rs"}, {"sha": "230940f25fb60ca1bf6c89c74c32a5b9962feb6a", "filename": "src/tools/clippy/tests/ui/derived_hash_with_manual_eq.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fderived_hash_with_manual_eq.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -0,0 +1,29 @@\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derived_hash_with_manual_eq.rs:12:10\n+   |\n+LL | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+note: `PartialEq` implemented here\n+  --> $DIR/derived_hash_with_manual_eq.rs:15:1\n+   |\n+LL | impl PartialEq for Bar {\n+   | ^^^^^^^^^^^^^^^^^^^^^^\n+   = note: `#[deny(clippy::derived_hash_with_manual_eq)]` on by default\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: you are deriving `Hash` but have implemented `PartialEq` explicitly\n+  --> $DIR/derived_hash_with_manual_eq.rs:21:10\n+   |\n+LL | #[derive(Hash)]\n+   |          ^^^^\n+   |\n+note: `PartialEq` implemented here\n+  --> $DIR/derived_hash_with_manual_eq.rs:24:1\n+   |\n+LL | impl PartialEq<Baz> for Baz {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: this error originates in the derive macro `Hash` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "10044e65f1156bc484ea3de731ed05c0fc97d902", "filename": "src/tools/clippy/tests/ui/drop_ref.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -72,3 +72,26 @@ fn test_owl_result_2() -> Result<u8, ()> {\n     produce_half_owl_ok().map(drop)?;\n     Ok(1)\n }\n+\n+#[allow(unused)]\n+#[allow(clippy::unit_cmp)]\n+fn issue10122(x: u8) {\n+    // This is a function which returns a reference and has a side-effect, which means\n+    // that calling drop() on the function is considered an idiomatic way of achieving the side-effect\n+    // in a match arm.\n+    fn println_and<T>(t: &T) -> &T {\n+        println!(\"foo\");\n+        t\n+    }\n+\n+    match x {\n+        0 => drop(println_and(&12)), // Don't lint (copy type), we only care about side-effects\n+        1 => drop(println_and(&String::new())), // Don't lint (no copy type), we only care about side-effects\n+        2 => {\n+            drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+        },\n+        3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+        4 => drop(&2),                           // Lint, not a fn/method call\n+        _ => (),\n+    }\n+}"}, {"sha": "293b9f6de832dc5ca5f2f3d5a1eefb67d79f3195", "filename": "src/tools/clippy/tests/ui/drop_ref.stderr", "status": "modified", "additions": 37, "deletions": 1, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fdrop_ref.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -107,5 +107,41 @@ note: argument has type `&SomeStruct`\n LL |     std::mem::drop(&SomeStruct);\n    |                    ^^^^^^^^^^^\n \n-error: aborting due to 9 previous errors\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:91:13\n+   |\n+LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |             ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:91:18\n+   |\n+LL |             drop(println_and(&13)); // Lint, even if we only care about the side-effect, it's already in a block\n+   |                  ^^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:93:14\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |              ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:93:19\n+   |\n+LL |         3 if drop(println_and(&14)) == () => (), // Lint, idiomatic use is only in body of `Arm`\n+   |                   ^^^^^^^^^^^^^^^^\n+\n+error: calls to `std::mem::drop` with a reference instead of an owned value. Dropping a reference does nothing\n+  --> $DIR/drop_ref.rs:94:14\n+   |\n+LL |         4 => drop(&2),                           // Lint, not a fn/method call\n+   |              ^^^^^^^^\n+   |\n+note: argument has type `&i32`\n+  --> $DIR/drop_ref.rs:94:19\n+   |\n+LL |         4 => drop(&2),                           // Lint, not a fn/method call\n+   |                   ^^\n+\n+error: aborting due to 12 previous errors\n "}, {"sha": "1f989bb1220525f35807d6d1195ea875707b0e1e", "filename": "src/tools/clippy/tests/ui/field_reassign_with_default.rs", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffield_reassign_with_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffield_reassign_with_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Ffield_reassign_with_default.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -247,3 +247,24 @@ mod issue6312 {\n         }\n     }\n }\n+\n+struct Collection {\n+    items: Vec<i32>,\n+    len: usize,\n+}\n+\n+impl Default for Collection {\n+    fn default() -> Self {\n+        Self {\n+            items: vec![1, 2, 3],\n+            len: 0,\n+        }\n+    }\n+}\n+\n+#[allow(clippy::redundant_closure_call)]\n+fn issue10136() {\n+    let mut c = Collection::default();\n+    // don't lint, since c.items was used to calculate this value\n+    c.len = (|| c.items.len())();\n+}"}, {"sha": "f2a4c284cb16d68d0ccb92bca478c716d309f468", "filename": "src/tools/clippy/tests/ui/iter_kv_map.fixed", "status": "modified", "additions": 32, "deletions": 3, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,14 +1,15 @@\n // run-rustfix\n \n #![warn(clippy::iter_kv_map)]\n-#![allow(clippy::redundant_clone)]\n-#![allow(clippy::suspicious_map)]\n-#![allow(clippy::map_identity)]\n+#![allow(unused_mut, clippy::redundant_clone, clippy::suspicious_map, clippy::map_identity)]\n \n use std::collections::{BTreeMap, HashMap};\n \n fn main() {\n     let get_key = |(key, _val)| key;\n+    fn ref_acceptor(v: &u32) -> u32 {\n+        *v\n+    }\n \n     let map: HashMap<u32, u32> = HashMap::new();\n \n@@ -36,6 +37,20 @@ fn main() {\n     let _ = map.keys().map(|key| key * 9).count();\n     let _ = map.values().map(|value| value * 17).count();\n \n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_values().map(|ref val| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone().into_values().map(|mut val| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_values().count();\n+\n     let map: BTreeMap<u32, u32> = BTreeMap::new();\n \n     let _ = map.keys().collect::<Vec<_>>();\n@@ -61,4 +76,18 @@ fn main() {\n     // Lint\n     let _ = map.keys().map(|key| key * 9).count();\n     let _ = map.values().map(|value| value * 17).count();\n+\n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_values().map(|ref val| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone().into_values().map(|mut val| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_values().count();\n }"}, {"sha": "ad6564df40846e2e8da197eb592ad5730b67fa17", "filename": "src/tools/clippy/tests/ui/iter_kv_map.rs", "status": "modified", "additions": 36, "deletions": 3, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,14 +1,15 @@\n // run-rustfix\n \n #![warn(clippy::iter_kv_map)]\n-#![allow(clippy::redundant_clone)]\n-#![allow(clippy::suspicious_map)]\n-#![allow(clippy::map_identity)]\n+#![allow(unused_mut, clippy::redundant_clone, clippy::suspicious_map, clippy::map_identity)]\n \n use std::collections::{BTreeMap, HashMap};\n \n fn main() {\n     let get_key = |(key, _val)| key;\n+    fn ref_acceptor(v: &u32) -> u32 {\n+        *v\n+    }\n \n     let map: HashMap<u32, u32> = HashMap::new();\n \n@@ -36,6 +37,22 @@ fn main() {\n     let _ = map.iter().map(|(key, _value)| key * 9).count();\n     let _ = map.iter().map(|(_key, value)| value * 17).count();\n \n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone()\n+        .into_iter()\n+        .map(|(_, mut val)| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+\n     let map: BTreeMap<u32, u32> = BTreeMap::new();\n \n     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n@@ -61,4 +78,20 @@ fn main() {\n     // Lint\n     let _ = map.iter().map(|(key, _value)| key * 9).count();\n     let _ = map.iter().map(|(_key, value)| value * 17).count();\n+\n+    // Preserve the ref in the fix.\n+    let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+\n+    // Preserve the mut in the fix.\n+    let _ = map\n+        .clone()\n+        .into_iter()\n+        .map(|(_, mut val)| {\n+            val += 2;\n+            val\n+        })\n+        .count();\n+\n+    // Don't let a mut interfere.\n+    let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n }"}, {"sha": "e00da223b4dd2193f2f690d7326221fcb2e98e55", "filename": "src/tools/clippy/tests/ui/iter_kv_map.stderr", "status": "modified", "additions": 91, "deletions": 23, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fiter_kv_map.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,136 +1,204 @@\n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:15:13\n+  --> $DIR/iter_kv_map.rs:16:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n    |\n    = note: `-D clippy::iter-kv-map` implied by `-D warnings`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:16:13\n+  --> $DIR/iter_kv_map.rs:17:13\n    |\n LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:17:13\n+  --> $DIR/iter_kv_map.rs:18:13\n    |\n LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:19:13\n+  --> $DIR/iter_kv_map.rs:20:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:20:13\n+  --> $DIR/iter_kv_map.rs:21:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:22:13\n+  --> $DIR/iter_kv_map.rs:23:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:23:13\n+  --> $DIR/iter_kv_map.rs:24:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:25:13\n+  --> $DIR/iter_kv_map.rs:26:13\n    |\n LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:26:13\n+  --> $DIR/iter_kv_map.rs:27:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:36:13\n+  --> $DIR/iter_kv_map.rs:37:13\n    |\n LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:37:13\n+  --> $DIR/iter_kv_map.rs:38:13\n    |\n LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n \n-error: iterating on a map's keys\n+error: iterating on a map's values\n   --> $DIR/iter_kv_map.rs:41:13\n    |\n+LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|ref val| ref_acceptor(val))`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:44:13\n+   |\n+LL |       let _ = map\n+   |  _____________^\n+LL | |         .clone()\n+LL | |         .into_iter()\n+LL | |         .map(|(_, mut val)| {\n+LL | |             val += 2;\n+LL | |             val\n+LL | |         })\n+   | |__________^\n+   |\n+help: try\n+   |\n+LL ~     let _ = map\n+LL +         .clone().into_values().map(|mut val| {\n+LL +             val += 2;\n+LL +             val\n+LL +         })\n+   |\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:54:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: iterating on a map's keys\n+  --> $DIR/iter_kv_map.rs:58:13\n+   |\n LL |     let _ = map.iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:42:13\n+  --> $DIR/iter_kv_map.rs:59:13\n    |\n LL |     let _ = map.iter().map(|(_, value)| value).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:43:13\n+  --> $DIR/iter_kv_map.rs:60:13\n    |\n LL |     let _ = map.iter().map(|(_, v)| v + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|v| v + 2)`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:45:13\n+  --> $DIR/iter_kv_map.rs:62:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:46:13\n+  --> $DIR/iter_kv_map.rs:63:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(key, _)| key + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_keys().map(|key| key + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:48:13\n+  --> $DIR/iter_kv_map.rs:65:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:49:13\n+  --> $DIR/iter_kv_map.rs:66:13\n    |\n LL |     let _ = map.clone().into_iter().map(|(_, val)| val + 2).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|val| val + 2)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:51:13\n+  --> $DIR/iter_kv_map.rs:68:13\n    |\n LL |     let _ = map.clone().iter().map(|(_, val)| val).collect::<Vec<_>>();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().values()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:52:13\n+  --> $DIR/iter_kv_map.rs:69:13\n    |\n LL |     let _ = map.iter().map(|(key, _)| key).filter(|x| *x % 2 == 0).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys()`\n \n error: iterating on a map's keys\n-  --> $DIR/iter_kv_map.rs:62:13\n+  --> $DIR/iter_kv_map.rs:79:13\n    |\n LL |     let _ = map.iter().map(|(key, _value)| key * 9).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.keys().map(|key| key * 9)`\n \n error: iterating on a map's values\n-  --> $DIR/iter_kv_map.rs:63:13\n+  --> $DIR/iter_kv_map.rs:80:13\n    |\n LL |     let _ = map.iter().map(|(_key, value)| value * 17).count();\n    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.values().map(|value| value * 17)`\n \n-error: aborting due to 22 previous errors\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:83:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, ref val)| ref_acceptor(val)).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values().map(|ref val| ref_acceptor(val))`\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:86:13\n+   |\n+LL |       let _ = map\n+   |  _____________^\n+LL | |         .clone()\n+LL | |         .into_iter()\n+LL | |         .map(|(_, mut val)| {\n+LL | |             val += 2;\n+LL | |             val\n+LL | |         })\n+   | |__________^\n+   |\n+help: try\n+   |\n+LL ~     let _ = map\n+LL +         .clone().into_values().map(|mut val| {\n+LL +             val += 2;\n+LL +             val\n+LL +         })\n+   |\n+\n+error: iterating on a map's values\n+  --> $DIR/iter_kv_map.rs:96:13\n+   |\n+LL |     let _ = map.clone().into_iter().map(|(_, mut val)| val).count();\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `map.clone().into_values()`\n+\n+error: aborting due to 28 previous errors\n "}, {"sha": "4cb7f6b687f1195c3bb429b941c8ca256f6534d3", "filename": "src/tools/clippy/tests/ui/needless_borrow.fixed", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n+#![feature(lint_reasons)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,14 +491,3 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n-\n-extern crate rustc_lint;\n-extern crate rustc_span;\n-\n-#[allow(dead_code)]\n-mod span_lint {\n-    use rustc_lint::{LateContext, Lint, LintContext};\n-    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n-        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(String::new()));\n-    }\n-}"}, {"sha": "9a01190ed8dbd585127276cde688afa19fd07730", "filename": "src/tools/clippy/tests/ui/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,5 +1,5 @@\n // run-rustfix\n-#![feature(custom_inner_attributes, lint_reasons, rustc_private)]\n+#![feature(lint_reasons)]\n #![allow(\n     unused,\n     clippy::uninlined_format_args,\n@@ -491,14 +491,3 @@ mod issue_9782_method_variant {\n         S.foo::<&[u8; 100]>(&a);\n     }\n }\n-\n-extern crate rustc_lint;\n-extern crate rustc_span;\n-\n-#[allow(dead_code)]\n-mod span_lint {\n-    use rustc_lint::{LateContext, Lint, LintContext};\n-    fn foo(cx: &LateContext<'_>, lint: &'static Lint) {\n-        cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n-    }\n-}"}, {"sha": "d26c317124b8d18d3dc900d31c8badce92e20af1", "filename": "src/tools/clippy/tests/ui/needless_borrow.stderr", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_borrow.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -216,11 +216,5 @@ error: the borrowed expression implements the required traits\n LL |         foo(&a);\n    |             ^^ help: change this to: `a`\n \n-error: the borrowed expression implements the required traits\n-  --> $DIR/needless_borrow.rs:502:85\n-   |\n-LL |         cx.struct_span_lint(lint, rustc_span::Span::default(), \"\", |diag| diag.note(&String::new()));\n-   |                                                                                     ^^^^^^^^^^^^^^ help: change this to: `String::new()`\n-\n-error: aborting due to 37 previous errors\n+error: aborting due to 36 previous errors\n "}, {"sha": "ab1c0e590bbc7ca317ea0568eebee557090b7623", "filename": "src/tools/clippy/tests/ui/needless_return.fixed", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -277,4 +277,14 @@ fn issue9947() -> Result<(), String> {\n     do yeet \"hello\";\n }\n \n+// without anyhow, but triggers the same bug I believe\n+#[expect(clippy::useless_format)]\n+fn issue10051() -> Result<String, String> {\n+    if true {\n+        Ok(format!(\"ok!\"))\n+    } else {\n+        Err(format!(\"err!\"))\n+    }\n+}\n+\n fn main() {}"}, {"sha": "abed338bb9b297c415a2cf0115728cd54e6f29a5", "filename": "src/tools/clippy/tests/ui/needless_return.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -287,4 +287,14 @@ fn issue9947() -> Result<(), String> {\n     do yeet \"hello\";\n }\n \n+// without anyhow, but triggers the same bug I believe\n+#[expect(clippy::useless_format)]\n+fn issue10051() -> Result<String, String> {\n+    if true {\n+        return Ok(format!(\"ok!\"));\n+    } else {\n+        return Err(format!(\"err!\"));\n+    }\n+}\n+\n fn main() {}"}, {"sha": "52eabf6e1370dd2235f22cfbb958464e03d3e746", "filename": "src/tools/clippy/tests/ui/needless_return.stderr", "status": "modified", "additions": 17, "deletions": 1, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fneedless_return.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -386,5 +386,21 @@ LL |         let _ = 42; return;\n    |\n    = help: remove `return`\n \n-error: aborting due to 46 previous errors\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:294:9\n+   |\n+LL |         return Ok(format!(\"ok!\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: unneeded `return` statement\n+  --> $DIR/needless_return.rs:296:9\n+   |\n+LL |         return Err(format!(\"err!\"));\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = help: remove `return`\n+\n+error: aborting due to 48 previous errors\n "}, {"sha": "00b427450935d5077a7ff947a78da65c5221ef2b", "filename": "src/tools/clippy/tests/ui/redundant_clone.fixed", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -239,9 +239,3 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n-\n-#[allow(unused, clippy::manual_retain)]\n-fn possible_borrower_improvements() {\n-    let mut s = String::from(\"foobar\");\n-    s = s.chars().filter(|&c| c != 'o').collect();\n-}"}, {"sha": "f899127db8d04674fab4e5d5282106da2e7721d8", "filename": "src/tools/clippy/tests/ui/redundant_clone.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -239,9 +239,3 @@ fn false_negative_5707() {\n     let _z = x.clone(); // pr 7346 can't lint on `x`\n     drop(y);\n }\n-\n-#[allow(unused, clippy::manual_retain)]\n-fn possible_borrower_improvements() {\n-    let mut s = String::from(\"foobar\");\n-    s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n-}"}, {"sha": "782590034d051cb07c2486e07983958809029a77", "filename": "src/tools/clippy/tests/ui/redundant_clone.stderr", "status": "modified", "additions": 1, "deletions": 13, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fredundant_clone.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -179,17 +179,5 @@ note: this value is dropped without further use\n LL |     foo(&x.clone(), move || {\n    |          ^\n \n-error: redundant clone\n-  --> $DIR/redundant_clone.rs:246:40\n-   |\n-LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n-   |                                        ^^^^^^^^^^^ help: remove this\n-   |\n-note: this value is dropped without further use\n-  --> $DIR/redundant_clone.rs:246:9\n-   |\n-LL |     s = s.chars().filter(|&c| c != 'o').to_owned().collect();\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: aborting due to 16 previous errors\n+error: aborting due to 15 previous errors\n "}, {"sha": "5076f61334d67d32d75d7720896f4f8a1a6e34e2", "filename": "src/tools/clippy/tests/ui/rename.fixed", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -10,6 +10,7 @@\n #![allow(clippy::box_collection)]\n #![allow(clippy::redundant_static_lifetimes)]\n #![allow(clippy::cognitive_complexity)]\n+#![allow(clippy::derived_hash_with_manual_eq)]\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n@@ -45,6 +46,7 @@\n #![warn(clippy::box_collection)]\n #![warn(clippy::redundant_static_lifetimes)]\n #![warn(clippy::cognitive_complexity)]\n+#![warn(clippy::derived_hash_with_manual_eq)]\n #![warn(clippy::disallowed_methods)]\n #![warn(clippy::disallowed_types)]\n #![warn(clippy::mixed_read_write_in_expression)]"}, {"sha": "64bc1ca7116c535d118d3a49626f4e40637e1f92", "filename": "src/tools/clippy/tests/ui/rename.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -10,6 +10,7 @@\n #![allow(clippy::box_collection)]\n #![allow(clippy::redundant_static_lifetimes)]\n #![allow(clippy::cognitive_complexity)]\n+#![allow(clippy::derived_hash_with_manual_eq)]\n #![allow(clippy::disallowed_methods)]\n #![allow(clippy::disallowed_types)]\n #![allow(clippy::mixed_read_write_in_expression)]\n@@ -45,6 +46,7 @@\n #![warn(clippy::box_vec)]\n #![warn(clippy::const_static_lifetime)]\n #![warn(clippy::cyclomatic_complexity)]\n+#![warn(clippy::derive_hash_xor_eq)]\n #![warn(clippy::disallowed_method)]\n #![warn(clippy::disallowed_type)]\n #![warn(clippy::eval_order_dependence)]"}, {"sha": "27a0263292ef1a37104fe047dd5570e27600f181", "filename": "src/tools/clippy/tests/ui/rename.stderr", "status": "modified", "additions": 48, "deletions": 42, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Frename.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,250 +1,256 @@\n error: lint `clippy::almost_complete_letter_range` has been renamed to `clippy::almost_complete_range`\n-  --> $DIR/rename.rs:41:9\n+  --> $DIR/rename.rs:42:9\n    |\n LL | #![warn(clippy::almost_complete_letter_range)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::almost_complete_range`\n    |\n    = note: `-D renamed-and-removed-lints` implied by `-D warnings`\n \n error: lint `clippy::blacklisted_name` has been renamed to `clippy::disallowed_names`\n-  --> $DIR/rename.rs:42:9\n+  --> $DIR/rename.rs:43:9\n    |\n LL | #![warn(clippy::blacklisted_name)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_names`\n \n error: lint `clippy::block_in_if_condition_expr` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:43:9\n+  --> $DIR/rename.rs:44:9\n    |\n LL | #![warn(clippy::block_in_if_condition_expr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::block_in_if_condition_stmt` has been renamed to `clippy::blocks_in_if_conditions`\n-  --> $DIR/rename.rs:44:9\n+  --> $DIR/rename.rs:45:9\n    |\n LL | #![warn(clippy::block_in_if_condition_stmt)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::blocks_in_if_conditions`\n \n error: lint `clippy::box_vec` has been renamed to `clippy::box_collection`\n-  --> $DIR/rename.rs:45:9\n+  --> $DIR/rename.rs:46:9\n    |\n LL | #![warn(clippy::box_vec)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::box_collection`\n \n error: lint `clippy::const_static_lifetime` has been renamed to `clippy::redundant_static_lifetimes`\n-  --> $DIR/rename.rs:46:9\n+  --> $DIR/rename.rs:47:9\n    |\n LL | #![warn(clippy::const_static_lifetime)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::redundant_static_lifetimes`\n \n error: lint `clippy::cyclomatic_complexity` has been renamed to `clippy::cognitive_complexity`\n-  --> $DIR/rename.rs:47:9\n+  --> $DIR/rename.rs:48:9\n    |\n LL | #![warn(clippy::cyclomatic_complexity)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::cognitive_complexity`\n \n+error: lint `clippy::derive_hash_xor_eq` has been renamed to `clippy::derived_hash_with_manual_eq`\n+  --> $DIR/rename.rs:49:9\n+   |\n+LL | #![warn(clippy::derive_hash_xor_eq)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::derived_hash_with_manual_eq`\n+\n error: lint `clippy::disallowed_method` has been renamed to `clippy::disallowed_methods`\n-  --> $DIR/rename.rs:48:9\n+  --> $DIR/rename.rs:50:9\n    |\n LL | #![warn(clippy::disallowed_method)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_methods`\n \n error: lint `clippy::disallowed_type` has been renamed to `clippy::disallowed_types`\n-  --> $DIR/rename.rs:49:9\n+  --> $DIR/rename.rs:51:9\n    |\n LL | #![warn(clippy::disallowed_type)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::disallowed_types`\n \n error: lint `clippy::eval_order_dependence` has been renamed to `clippy::mixed_read_write_in_expression`\n-  --> $DIR/rename.rs:50:9\n+  --> $DIR/rename.rs:52:9\n    |\n LL | #![warn(clippy::eval_order_dependence)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::mixed_read_write_in_expression`\n \n error: lint `clippy::identity_conversion` has been renamed to `clippy::useless_conversion`\n-  --> $DIR/rename.rs:51:9\n+  --> $DIR/rename.rs:53:9\n    |\n LL | #![warn(clippy::identity_conversion)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::useless_conversion`\n \n error: lint `clippy::if_let_some_result` has been renamed to `clippy::match_result_ok`\n-  --> $DIR/rename.rs:52:9\n+  --> $DIR/rename.rs:54:9\n    |\n LL | #![warn(clippy::if_let_some_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::match_result_ok`\n \n error: lint `clippy::logic_bug` has been renamed to `clippy::overly_complex_bool_expr`\n-  --> $DIR/rename.rs:53:9\n+  --> $DIR/rename.rs:55:9\n    |\n LL | #![warn(clippy::logic_bug)]\n    |         ^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::overly_complex_bool_expr`\n \n error: lint `clippy::new_without_default_derive` has been renamed to `clippy::new_without_default`\n-  --> $DIR/rename.rs:54:9\n+  --> $DIR/rename.rs:56:9\n    |\n LL | #![warn(clippy::new_without_default_derive)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::new_without_default`\n \n error: lint `clippy::option_and_then_some` has been renamed to `clippy::bind_instead_of_map`\n-  --> $DIR/rename.rs:55:9\n+  --> $DIR/rename.rs:57:9\n    |\n LL | #![warn(clippy::option_and_then_some)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::bind_instead_of_map`\n \n error: lint `clippy::option_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:56:9\n+  --> $DIR/rename.rs:58:9\n    |\n LL | #![warn(clippy::option_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::option_map_unwrap_or` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:57:9\n+  --> $DIR/rename.rs:59:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:58:9\n+  --> $DIR/rename.rs:60:9\n    |\n LL | #![warn(clippy::option_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::option_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:59:9\n+  --> $DIR/rename.rs:61:9\n    |\n LL | #![warn(clippy::option_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::ref_in_deref` has been renamed to `clippy::needless_borrow`\n-  --> $DIR/rename.rs:60:9\n+  --> $DIR/rename.rs:62:9\n    |\n LL | #![warn(clippy::ref_in_deref)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::needless_borrow`\n \n error: lint `clippy::result_expect_used` has been renamed to `clippy::expect_used`\n-  --> $DIR/rename.rs:61:9\n+  --> $DIR/rename.rs:63:9\n    |\n LL | #![warn(clippy::result_expect_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::expect_used`\n \n error: lint `clippy::result_map_unwrap_or_else` has been renamed to `clippy::map_unwrap_or`\n-  --> $DIR/rename.rs:62:9\n+  --> $DIR/rename.rs:64:9\n    |\n LL | #![warn(clippy::result_map_unwrap_or_else)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::map_unwrap_or`\n \n error: lint `clippy::result_unwrap_used` has been renamed to `clippy::unwrap_used`\n-  --> $DIR/rename.rs:63:9\n+  --> $DIR/rename.rs:65:9\n    |\n LL | #![warn(clippy::result_unwrap_used)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::unwrap_used`\n \n error: lint `clippy::single_char_push_str` has been renamed to `clippy::single_char_add_str`\n-  --> $DIR/rename.rs:64:9\n+  --> $DIR/rename.rs:66:9\n    |\n LL | #![warn(clippy::single_char_push_str)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::single_char_add_str`\n \n error: lint `clippy::stutter` has been renamed to `clippy::module_name_repetitions`\n-  --> $DIR/rename.rs:65:9\n+  --> $DIR/rename.rs:67:9\n    |\n LL | #![warn(clippy::stutter)]\n    |         ^^^^^^^^^^^^^^^ help: use the new name: `clippy::module_name_repetitions`\n \n error: lint `clippy::to_string_in_display` has been renamed to `clippy::recursive_format_impl`\n-  --> $DIR/rename.rs:66:9\n+  --> $DIR/rename.rs:68:9\n    |\n LL | #![warn(clippy::to_string_in_display)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::recursive_format_impl`\n \n error: lint `clippy::zero_width_space` has been renamed to `clippy::invisible_characters`\n-  --> $DIR/rename.rs:67:9\n+  --> $DIR/rename.rs:69:9\n    |\n LL | #![warn(clippy::zero_width_space)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `clippy::invisible_characters`\n \n error: lint `clippy::drop_bounds` has been renamed to `drop_bounds`\n-  --> $DIR/rename.rs:68:9\n+  --> $DIR/rename.rs:70:9\n    |\n LL | #![warn(clippy::drop_bounds)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `drop_bounds`\n \n error: lint `clippy::for_loop_over_option` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:69:9\n+  --> $DIR/rename.rs:71:9\n    |\n LL | #![warn(clippy::for_loop_over_option)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loop_over_result` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:70:9\n+  --> $DIR/rename.rs:72:9\n    |\n LL | #![warn(clippy::for_loop_over_result)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::for_loops_over_fallibles` has been renamed to `for_loops_over_fallibles`\n-  --> $DIR/rename.rs:71:9\n+  --> $DIR/rename.rs:73:9\n    |\n LL | #![warn(clippy::for_loops_over_fallibles)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `for_loops_over_fallibles`\n \n error: lint `clippy::into_iter_on_array` has been renamed to `array_into_iter`\n-  --> $DIR/rename.rs:72:9\n+  --> $DIR/rename.rs:74:9\n    |\n LL | #![warn(clippy::into_iter_on_array)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `array_into_iter`\n \n error: lint `clippy::invalid_atomic_ordering` has been renamed to `invalid_atomic_ordering`\n-  --> $DIR/rename.rs:73:9\n+  --> $DIR/rename.rs:75:9\n    |\n LL | #![warn(clippy::invalid_atomic_ordering)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_atomic_ordering`\n \n error: lint `clippy::invalid_ref` has been renamed to `invalid_value`\n-  --> $DIR/rename.rs:74:9\n+  --> $DIR/rename.rs:76:9\n    |\n LL | #![warn(clippy::invalid_ref)]\n    |         ^^^^^^^^^^^^^^^^^^^ help: use the new name: `invalid_value`\n \n error: lint `clippy::let_underscore_drop` has been renamed to `let_underscore_drop`\n-  --> $DIR/rename.rs:75:9\n+  --> $DIR/rename.rs:77:9\n    |\n LL | #![warn(clippy::let_underscore_drop)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `let_underscore_drop`\n \n error: lint `clippy::mem_discriminant_non_enum` has been renamed to `enum_intrinsics_non_enums`\n-  --> $DIR/rename.rs:76:9\n+  --> $DIR/rename.rs:78:9\n    |\n LL | #![warn(clippy::mem_discriminant_non_enum)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `enum_intrinsics_non_enums`\n \n error: lint `clippy::panic_params` has been renamed to `non_fmt_panics`\n-  --> $DIR/rename.rs:77:9\n+  --> $DIR/rename.rs:79:9\n    |\n LL | #![warn(clippy::panic_params)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `non_fmt_panics`\n \n error: lint `clippy::positional_named_format_parameters` has been renamed to `named_arguments_used_positionally`\n-  --> $DIR/rename.rs:78:9\n+  --> $DIR/rename.rs:80:9\n    |\n LL | #![warn(clippy::positional_named_format_parameters)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `named_arguments_used_positionally`\n \n error: lint `clippy::temporary_cstring_as_ptr` has been renamed to `temporary_cstring_as_ptr`\n-  --> $DIR/rename.rs:79:9\n+  --> $DIR/rename.rs:81:9\n    |\n LL | #![warn(clippy::temporary_cstring_as_ptr)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `temporary_cstring_as_ptr`\n \n error: lint `clippy::unknown_clippy_lints` has been renamed to `unknown_lints`\n-  --> $DIR/rename.rs:80:9\n+  --> $DIR/rename.rs:82:9\n    |\n LL | #![warn(clippy::unknown_clippy_lints)]\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unknown_lints`\n \n error: lint `clippy::unused_label` has been renamed to `unused_labels`\n-  --> $DIR/rename.rs:81:9\n+  --> $DIR/rename.rs:83:9\n    |\n LL | #![warn(clippy::unused_label)]\n    |         ^^^^^^^^^^^^^^^^^^^^ help: use the new name: `unused_labels`\n \n-error: aborting due to 41 previous errors\n+error: aborting due to 42 previous errors\n "}, {"sha": "a0dcc0172e8b0ba5cba4f7952aad8c521f9023aa", "filename": "src/tools/clippy/tests/ui/single_element_loop.fixed", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.fixed?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -33,4 +33,31 @@ fn main() {\n         let item = 0..5;\n         dbg!(item);\n     }\n+\n+    // should not lint (issue #10018)\n+    for e in [42] {\n+        if e > 0 {\n+            continue;\n+        }\n+    }\n+\n+    // should not lint (issue #10018)\n+    for e in [42] {\n+        if e > 0 {\n+            break;\n+        }\n+    }\n+\n+    // should lint (issue #10018)\n+    {\n+        let _ = 42;\n+        let _f = |n: u32| {\n+            for i in 0..n {\n+                if i > 10 {\n+                    dbg!(i);\n+                    break;\n+                }\n+            }\n+        };\n+    }\n }"}, {"sha": "bc014035c98a5671c8ccc59c9b96ebff077c646e", "filename": "src/tools/clippy/tests/ui/single_element_loop.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -27,4 +27,30 @@ fn main() {\n     for item in [0..5].into_iter() {\n         dbg!(item);\n     }\n+\n+    // should not lint (issue #10018)\n+    for e in [42] {\n+        if e > 0 {\n+            continue;\n+        }\n+    }\n+\n+    // should not lint (issue #10018)\n+    for e in [42] {\n+        if e > 0 {\n+            break;\n+        }\n+    }\n+\n+    // should lint (issue #10018)\n+    for _ in [42] {\n+        let _f = |n: u32| {\n+            for i in 0..n {\n+                if i > 10 {\n+                    dbg!(i);\n+                    break;\n+                }\n+            }\n+        };\n+    }\n }"}, {"sha": "14437a59745e04896bb17e386eefb04cb505f7a8", "filename": "src/tools/clippy/tests/ui/single_element_loop.stderr", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsingle_element_loop.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -95,5 +95,32 @@ LL +         dbg!(item);\n LL +     }\n    |\n \n-error: aborting due to 6 previous errors\n+error: for loop over a single element\n+  --> $DIR/single_element_loop.rs:46:5\n+   |\n+LL | /     for _ in [42] {\n+LL | |         let _f = |n: u32| {\n+LL | |             for i in 0..n {\n+LL | |                 if i > 10 {\n+...  |\n+LL | |         };\n+LL | |     }\n+   | |_____^\n+   |\n+help: try\n+   |\n+LL ~     {\n+LL +         let _ = 42;\n+LL +         let _f = |n: u32| {\n+LL +             for i in 0..n {\n+LL +                 if i > 10 {\n+LL +                     dbg!(i);\n+LL +                     break;\n+LL +                 }\n+LL +             }\n+LL +         };\n+LL +     }\n+   |\n+\n+error: aborting due to 7 previous errors\n "}, {"sha": "dec3f50d6f1b633fa85d3f2b61e180c2656884e2", "filename": "src/tools/clippy/tests/ui/suspicious_to_owned.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Fsuspicious_to_owned.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -1,24 +1,24 @@\n-error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n+error: this `to_owned` call clones the Cow<'_, str> itself and does not cause the Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:16:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n    |\n    = note: `-D clippy::suspicious-to-owned` implied by `-D warnings`\n \n-error: this `to_owned` call clones the std::borrow::Cow<'_, [char; 3]> itself and does not cause the std::borrow::Cow<'_, [char; 3]> contents to become owned\n+error: this `to_owned` call clones the Cow<'_, [char; 3]> itself and does not cause the Cow<'_, [char; 3]> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:26:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<'_, std::vec::Vec<char>> itself and does not cause the std::borrow::Cow<'_, std::vec::Vec<char>> contents to become owned\n+error: this `to_owned` call clones the Cow<'_, Vec<char>> itself and does not cause the Cow<'_, Vec<char>> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:36:13\n    |\n LL |     let _ = cow.to_owned();\n    |             ^^^^^^^^^^^^^^ help: consider using, depending on intent: `cow.clone()` or `cow.into_owned()`\n \n-error: this `to_owned` call clones the std::borrow::Cow<'_, str> itself and does not cause the std::borrow::Cow<'_, str> contents to become owned\n+error: this `to_owned` call clones the Cow<'_, str> itself and does not cause the Cow<'_, str> contents to become owned\n   --> $DIR/suspicious_to_owned.rs:46:13\n    |\n LL |     let _ = cow.to_owned();"}, {"sha": "6022d9fa4c5c3e7d2493dc0cff56e1b305599c9e", "filename": "src/tools/clippy/tests/ui/unnecessary_clone.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funnecessary_clone.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -38,13 +38,13 @@ LL |     t.clone();\n    |\n    = note: `-D clippy::clone-on-copy` implied by `-D warnings`\n \n-error: using `clone` on type `std::option::Option<T>` which implements the `Copy` trait\n+error: using `clone` on type `Option<T>` which implements the `Copy` trait\n   --> $DIR/unnecessary_clone.rs:42:5\n    |\n LL |     Some(t).clone();\n    |     ^^^^^^^^^^^^^^^ help: try removing the `clone` call: `Some(t)`\n \n-error: using `clone` on a double-reference; this will copy the reference of type `&std::vec::Vec<i32>` instead of cloning the inner type\n+error: using `clone` on a double-reference; this will copy the reference of type `&Vec<i32>` instead of cloning the inner type\n   --> $DIR/unnecessary_clone.rs:48:22\n    |\n LL |     let z: &Vec<_> = y.clone();\n@@ -57,10 +57,10 @@ LL |     let z: &Vec<_> = &(*y).clone();\n    |                      ~~~~~~~~~~~~~\n help: or try being explicit if you are sure, that you want to clone a reference\n    |\n-LL |     let z: &Vec<_> = <&std::vec::Vec<i32>>::clone(y);\n-   |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n+LL |     let z: &Vec<_> = <&Vec<i32>>::clone(y);\n+   |                      ~~~~~~~~~~~~~~~~~~~~~\n \n-error: using `clone` on type `many_derefs::E` which implements the `Copy` trait\n+error: using `clone` on type `E` which implements the `Copy` trait\n   --> $DIR/unnecessary_clone.rs:84:20\n    |\n LL |         let _: E = a.clone();"}, {"sha": "55bd5607185c67ec5f07eb9847f2e4ee4524c8b7", "filename": "src/tools/clippy/tests/ui/unused_self.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.rs?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -60,6 +60,16 @@ mod unused_self_allow {\n         // shouldn't trigger for public methods\n         pub fn unused_self_move(self) {}\n     }\n+\n+    pub struct E;\n+\n+    impl E {\n+        // shouldn't trigger if body contains todo!()\n+        pub fn unused_self_todo(self) {\n+            let x = 42;\n+            todo!()\n+        }\n+    }\n }\n \n pub use unused_self_allow::D;"}, {"sha": "919f9b6efdab8cb9ebb6a3d9f47a26d49b7382f5", "filename": "src/tools/clippy/tests/ui/unused_self.stderr", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/01c75848eb94e96210e74b8dd43a5a270464ac25/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Ftests%2Fui%2Funused_self.stderr?ref=01c75848eb94e96210e74b8dd43a5a270464ac25", "patch": "@@ -4,7 +4,7 @@ error: unused `self` argument\n LL |         fn unused_self_move(self) {}\n    |                             ^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n    = note: `-D clippy::unused-self` implied by `-D warnings`\n \n error: unused `self` argument\n@@ -13,63 +13,63 @@ error: unused `self` argument\n LL |         fn unused_self_ref(&self) {}\n    |                            ^^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:13:32\n    |\n LL |         fn unused_self_mut_ref(&mut self) {}\n    |                                ^^^^^^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:14:32\n    |\n LL |         fn unused_self_pin_ref(self: Pin<&Self>) {}\n    |                                ^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:15:36\n    |\n LL |         fn unused_self_pin_mut_ref(self: Pin<&mut Self>) {}\n    |                                    ^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:16:35\n    |\n LL |         fn unused_self_pin_nested(self: Pin<Arc<Self>>) {}\n    |                                   ^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:17:28\n    |\n LL |         fn unused_self_box(self: Box<Self>) {}\n    |                            ^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:18:40\n    |\n LL |         fn unused_with_other_used_args(&self, x: u8, y: u8) -> u8 {\n    |                                        ^^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: unused `self` argument\n   --> $DIR/unused_self.rs:21:37\n    |\n LL |         fn unused_self_class_method(&self) {\n    |                                     ^^^^^\n    |\n-   = help: consider refactoring to a associated function\n+   = help: consider refactoring to an associated function\n \n error: aborting due to 9 previous errors\n "}]}