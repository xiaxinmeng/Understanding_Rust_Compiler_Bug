{"sha": "e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYzUwYzQ0MTA4MDRkZmNlOWZiZTA0MGYzNDFmNjEwNGNjOWJhN2U=", "commit": {"author": {"name": "Kevin Atkinson", "email": "kevina@cs.utah.edu", "date": "2012-01-16T09:36:47Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-01-16T10:19:33Z"}, "message": "Don't evaluate discriminator value constants when parsing.\n\nRemove disr_val from ast::variant_ and always use ty::variant_info\nwhen the value is needed.  Move what was done during parsing into\nother passes, primary typeck.rs.  This move also correctly type checks\nthe disr. value expression; thus, fixing rustc --pretty=typed when\ndisr. values are used.", "tree": {"sha": "5afd49a9f0b209d2853f991532297a315d342b13", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5afd49a9f0b209d2853f991532297a315d342b13"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "html_url": "https://github.com/rust-lang/rust/commit/e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/comments", "author": {"login": "kevina", "id": 1271492, "node_id": "MDQ6VXNlcjEyNzE0OTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1271492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kevina", "html_url": "https://github.com/kevina", "followers_url": "https://api.github.com/users/kevina/followers", "following_url": "https://api.github.com/users/kevina/following{/other_user}", "gists_url": "https://api.github.com/users/kevina/gists{/gist_id}", "starred_url": "https://api.github.com/users/kevina/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kevina/subscriptions", "organizations_url": "https://api.github.com/users/kevina/orgs", "repos_url": "https://api.github.com/users/kevina/repos", "events_url": "https://api.github.com/users/kevina/events{/privacy}", "received_events_url": "https://api.github.com/users/kevina/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "edf11ebf021dba897e5419cca53de3b652670799", "url": "https://api.github.com/repos/rust-lang/rust/commits/edf11ebf021dba897e5419cca53de3b652670799", "html_url": "https://github.com/rust-lang/rust/commit/edf11ebf021dba897e5419cca53de3b652670799"}], "stats": {"total": 157, "additions": 106, "deletions": 51}, "files": [{"sha": "41235c01d3dc7c95587cdca428bdf3dbb61452d0", "filename": "src/comp/metadata/encoder.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Fencoder.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -232,6 +232,8 @@ fn encode_tag_variant_info(ecx: @encode_ctxt, ebml_w: ebml::writer,\n                            id: node_id, variants: [variant],\n                            &index: [entry<int>], ty_params: [ty_param]) {\n     let disr_val = 0;\n+    let i = 0;\n+    let vi = ty::tag_variants(ecx.ccx.tcx, {crate: local_crate, node: id});\n     for variant: variant in variants {\n         index += [{val: variant.node.id, pos: ebml_w.writer.tell()}];\n         ebml::start_tag(ebml_w, tag_items_data_item);\n@@ -244,13 +246,14 @@ fn encode_tag_variant_info(ecx: @encode_ctxt, ebml_w: ebml::writer,\n             encode_symbol(ecx, ebml_w, variant.node.id);\n         }\n         encode_discriminant(ecx, ebml_w, variant.node.id);\n-        if variant.node.disr_val != disr_val {\n-            encode_disr_val(ecx, ebml_w, variant.node.disr_val);\n-            disr_val = variant.node.disr_val;\n+        if vi[i].disr_val != disr_val {\n+            encode_disr_val(ecx, ebml_w, vi[i].disr_val);\n+            disr_val = vi[i].disr_val;\n         }\n         encode_type_param_bounds(ebml_w, ecx, ty_params);\n         ebml::end_tag(ebml_w);\n         disr_val += 1;\n+        i += 1;\n     }\n }\n "}, {"sha": "943c9184fe2091ac265599f710f1793a53318179", "filename": "src/comp/middle/check_const.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fcheck_const.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -15,6 +15,13 @@ fn check_crate(sess: session, crate: @crate) {\n fn check_item(it: @item, &&_is_const: bool, v: visit::vt<bool>) {\n     alt it.node {\n       item_const(_, ex) { v.visit_expr(ex, true, v); }\n+      item_tag(vs, _) {\n+        for var in vs {\n+            option::may(var.node.disr_expr) {|ex|\n+                v.visit_expr(ex, true, v);\n+            }\n+        }\n+      }\n       _ { visit::visit_item(it, false, v); }\n     }\n }"}, {"sha": "44b55b0c34ddd130ade8299007c3308bf5df28f8", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -4543,7 +4543,7 @@ fn trans_res_ctor(cx: @local_ctxt, sp: span, dtor: ast::fn_decl,\n \n \n fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n-                     variant: ast::variant, is_degen: bool,\n+                     variant: ast::variant, disr: int, is_degen: bool,\n                      ty_params: [ast::ty_param]) {\n     let ccx = cx.ccx;\n \n@@ -4593,7 +4593,7 @@ fn trans_tag_variant(cx: @local_ctxt, tag_id: ast::node_id,\n             let lltagptr =\n                 PointerCast(bcx, fcx.llretptr, T_opaque_tag_ptr(ccx));\n             let lldiscrimptr = GEPi(bcx, lltagptr, [0, 0]);\n-            Store(bcx, C_int(ccx, variant.node.disr_val), lldiscrimptr);\n+            Store(bcx, C_int(ccx, disr), lldiscrimptr);\n             GEPi(bcx, lltagptr, [0, 1])\n         };\n     i = 0u;\n@@ -4938,8 +4938,13 @@ fn trans_item(cx: @local_ctxt, item: ast::item) {\n       ast::item_tag(variants, tps) {\n         let sub_cx = extend_path(cx, item.ident);\n         let degen = vec::len(variants) == 1u;\n+        let vi = ty::tag_variants(cx.ccx.tcx, {crate: ast::local_crate,\n+                                               node: item.id});\n+        let i = 0;\n         for variant: ast::variant in variants {\n-            trans_tag_variant(sub_cx, item.id, variant, degen, tps);\n+            trans_tag_variant(sub_cx, item.id, variant,\n+                              vi[i].disr_val, degen, tps);\n+            i += 1;\n         }\n       }\n       ast::item_const(_, expr) { trans_const(cx.ccx, expr, item.id); }\n@@ -5268,10 +5273,13 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n     visit::visit_item(it, new_pt, v);\n     alt it.node {\n       ast::item_tag(variants, _) {\n+        let vi = ty::tag_variants(ccx.tcx, {crate: ast::local_crate,\n+                                            node: it.id});\n+        let i = 0;\n         for variant in variants {\n             let p = new_pt + [variant.node.name, \"discrim\"];\n             let s = mangle_exported_name(ccx, p, ty::mk_int(ccx.tcx));\n-            let disr_val = variant.node.disr_val;\n+            let disr_val = vi[i].disr_val;\n             let discrim_gvar = str::as_buf(s, {|buf|\n                 llvm::LLVMAddGlobal(ccx.llmod, ccx.int_type, buf)\n             });\n@@ -5280,6 +5288,7 @@ fn trans_constant(ccx: @crate_ctxt, it: @ast::item, &&pt: [str],\n             ccx.discrims.insert(\n                 ast_util::local_def(variant.node.id), discrim_gvar);\n             ccx.discrim_symbols.insert(variant.node.id, s);\n+            i += 1;\n         }\n       }\n       ast::item_impl(tps, some(@{node: ast::ty_path(_, id), _}), _, ms) {"}, {"sha": "60289d28428cd15c1ef014c22f25fc06d19ae5c2", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -2631,17 +2631,30 @@ fn tag_variants(cx: ctxt, id: ast::def_id) -> @[variant_info] {\n     let result = if ast::local_crate != id.crate {\n         @csearch::get_tag_variants(cx, id)\n     } else {\n+        // FIXME: Now that the variants are run through the type checker (to\n+        // check the disr_expr if one exists), this code should likely be\n+        // moved there to avoid having to call eval_const_expr twice\n         alt cx.items.get(id.node) {\n           ast_map::node_item(@{node: ast::item_tag(variants, _), _}) {\n+            let disr_val = -1;\n             @vec::map(variants, {|variant|\n                 let ctor_ty = node_id_to_monotype(cx, variant.node.id);\n                 let arg_tys = if vec::len(variant.node.args) > 0u {\n                     vec::map(ty_fn_args(cx, ctor_ty), {|a| a.ty})\n                 } else { [] };\n+                alt variant.node.disr_expr {\n+                  some (ex) {\n+                    // FIXME: issue #1417\n+                    disr_val = alt syntax::ast_util::eval_const_expr(ex) {\n+                      ast_util::const_int(val) {val as int}\n+                    }\n+                  }\n+                  _ {disr_val += 1;}\n+                }\n                 @{args: arg_tys,\n                   ctor_ty: ctor_ty,\n                   id: ast_util::local_def(variant.node.id),\n-                  disr_val: variant.node.disr_val\n+                  disr_val: disr_val\n                  }\n             })\n           }"}, {"sha": "ca8c0cfcfc34c8007d18ef8047d2fe1afa784eab", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -2461,6 +2461,55 @@ fn check_const(ccx: @crate_ctxt, _sp: span, e: @ast::expr, id: ast::node_id) {\n     demand::simple(fcx, e.span, declty, cty);\n }\n \n+fn check_tag_variants(ccx: @crate_ctxt, _sp: span, vs: [ast::variant],\n+                      id: ast::node_id) {\n+    // FIXME: this is kinda a kludge; we manufacture a fake function context\n+    // and statement context for checking the initializer expression.\n+    let rty = node_id_to_type(ccx.tcx, id);\n+    let fixups: [ast::node_id] = [];\n+    let fcx: @fn_ctxt =\n+        @{ret_ty: rty,\n+          purity: ast::pure_fn,\n+          proto: ast::proto_box,\n+          var_bindings: ty::unify::mk_var_bindings(),\n+          locals: new_int_hash::<int>(),\n+          next_var_id: @mutable 0,\n+          mutable fixups: fixups,\n+          ccx: ccx};\n+    let disr_vals: [int] = [];\n+    let disr_val = 0;\n+    for v in vs {\n+        alt v.node.disr_expr {\n+          some(e) {\n+            check_expr(fcx, e);\n+            let cty = expr_ty(fcx.ccx.tcx, e);\n+            let declty =ty::mk_int(fcx.ccx.tcx);\n+            demand::simple(fcx, e.span, declty, cty);\n+            // FIXME: issue #1417\n+            // Also, check_expr (from check_const pass) doesn't guarantee that\n+            // the expression in an form that eval_const_expr, so we may still\n+            // get an internal compiler error\n+            alt syntax::ast_util::eval_const_expr(e) {\n+              syntax::ast_util::const_int(val) {\n+                disr_val = val as int;\n+              }\n+              _ {\n+                ccx.tcx.sess.span_err(e.span,\n+                                      \"expected signed integer constant\");\n+              }\n+            }\n+          }\n+          _ {}\n+        }\n+        if vec::member(disr_val, disr_vals) {\n+            ccx.tcx.sess.span_err(v.span,\n+                                  \"discriminator value already exists.\");\n+        }\n+        disr_vals += [disr_val];\n+        disr_val += 1;\n+    }\n+}\n+\n // A generic function for checking the pred in a check\n // or if-check\n fn check_pred_expr(fcx: @fn_ctxt, e: @ast::expr) -> bool {\n@@ -2632,6 +2681,7 @@ fn check_method(ccx: @crate_ctxt, method: @ast::method) {\n fn check_item(ccx: @crate_ctxt, it: @ast::item) {\n     alt it.node {\n       ast::item_const(_, e) { check_const(ccx, it.span, e, it.id); }\n+      ast::item_tag(vs, _) { check_tag_variants(ccx, it.span, vs, it.id); }\n       ast::item_fn(decl, tps, body) {\n         check_fn(ccx, ast::proto_bare, decl, body, it.id, none);\n       }"}, {"sha": "b953362b1be8930b36c24d9733744c7ddf900064", "filename": "src/comp/syntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -409,7 +409,7 @@ type native_mod =\n type variant_arg = {ty: @ty, id: node_id};\n \n type variant_ = {name: ident, args: [variant_arg], id: node_id,\n-                disr_val: int, disr_expr: option::t<@expr>};\n+                 disr_expr: option::t<@expr>};\n \n type variant = spanned<variant_>;\n "}, {"sha": "eaac7fa9596a040402d9cefe7198fe2562749d39", "filename": "src/comp/syntax/ast_util.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fast_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fast_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fast_util.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -241,8 +241,7 @@ tag const_val {\n     const_str(str);\n }\n \n-// FIXME (#1417): any function that uses this function should likely be moved\n-// into the middle end\n+// FIXME: issue #1417\n fn eval_const_expr(e: @expr) -> const_val {\n     fn fromb(b: bool) -> const_val { const_int(b as i64) }\n     alt e.node {"}, {"sha": "e74e1cd9ba75e7d3918c1fe9b5d3153bcfcc1688", "filename": "src/comp/syntax/fold.rs", "status": "modified", "additions": 4, "deletions": 13, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Ffold.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -432,21 +432,12 @@ fn noop_fold_variant(v: variant_, fld: ast_fold) -> variant_ {\n     }\n     let fold_variant_arg = bind fold_variant_arg_(_, fld);\n     let args = vec::map(v.args, fold_variant_arg);\n-    let (de, dv) = alt v.disr_expr {\n-      some(e) {\n-        let de = fld.fold_expr(e);\n-        // FIXME (#1417): see parser.rs\n-        let dv = alt syntax::ast_util::eval_const_expr(e) {\n-          ast_util::const_int(val) {\n-            val as int\n-          }\n-        };\n-        (some(de), dv)\n-      }\n-      none. { (none, v.disr_val) }\n+    let de = alt v.disr_expr {\n+      some(e) {some(fld.fold_expr(e))}\n+      none. {none}\n     };\n     ret {name: v.name, args: args, id: v.id,\n-         disr_val: dv,  disr_expr: de};\n+         disr_expr: de};\n }\n \n fn noop_fold_ident(&&i: ident, _fld: ast_fold) -> ident { ret i; }"}, {"sha": "ef65a0bd8971351eb49f6f82738e2ed2b5f4f69a", "filename": "src/comp/syntax/parse/parser.rs", "status": "modified", "additions": 2, "deletions": 27, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fparse%2Fparser.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -2023,15 +2023,13 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n                     {name: id,\n                      args: [{ty: ty, id: p.get_id()}],\n                      id: p.get_id(),\n-                     disr_val: 0,\n                      disr_expr: none});\n         ret mk_item(p, lo, ty.span.hi, id,\n                     ast::item_tag([variant], ty_params), attrs);\n     }\n     expect(p, token::LBRACE);\n     let all_nullary = true;\n     let have_disr = false;\n-    let disr_val = 0;\n     while p.token != token::RBRACE {\n         let tok = p.token;\n         alt tok {\n@@ -2056,38 +2054,15 @@ fn parse_item_tag(p: parser, attrs: [ast::attribute]) -> @ast::item {\n               token::EQ. {\n                 have_disr = true;\n                 p.bump();\n-                let e = parse_expr(p);\n-                // FIXME: eval_const_expr does no error checking, nor do I.\n-                // Also, the parser is not the right place to do this; likely\n-                // somewhere in the middle end so that constants can be\n-                // refereed to, even if they are after the declaration for the\n-                // type.  Finally, eval_const_expr probably shouldn't exist as\n-                // it Graydon puts it: \"[I] am a little worried at its\n-                // presence since it quasi-duplicates stuff that trans should\n-                // probably be doing.\"  (See issue #1417)\n-                alt syntax::ast_util::eval_const_expr(e) {\n-                  syntax::ast_util::const_int(val) {\n-                    // FIXME: check that value is in range\n-                    disr_val = val as int;\n-                  }\n-                }\n-                if option::is_some\n-                    (vec::find\n-                     (variants, {|v| v.node.disr_val == disr_val}))\n-                {\n-                    p.fatal(\"discriminator value \" + /* str(disr_val) + */\n-                            \"already exists.\");\n-                }\n-                disr_expr = some(e);\n+                disr_expr = some(parse_expr(p));\n               }\n               _ {/* empty */ }\n             }\n             expect(p, token::SEMI);\n             p.get_id();\n             let vr = {name: p.get_str(name), args: args, id: p.get_id(),\n-                      disr_val: disr_val, disr_expr: disr_expr};\n+                      disr_expr: disr_expr};\n             variants += [spanned(vlo, vhi, vr)];\n-            disr_val += 1;\n           }\n           token::RBRACE. {/* empty */ }\n           _ {"}, {"sha": "52badcd35e339b73e29c975196cbdbe39eb07111", "filename": "src/test/compile-fail/tag-variant-disr-type-mismatch.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1c50c4410804dfce9fbe040f341f6104cc9ba7e/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftag-variant-disr-type-mismatch.rs?ref=e1c50c4410804dfce9fbe040f341f6104cc9ba7e", "patch": "@@ -0,0 +1,8 @@\n+//error-pattern: mismatched types\n+\n+tag color {\n+    red = 1u;\n+    blue = 2;\n+}\n+\n+fn main() {}"}]}