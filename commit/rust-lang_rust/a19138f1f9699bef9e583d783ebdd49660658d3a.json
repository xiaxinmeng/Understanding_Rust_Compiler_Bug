{"sha": "a19138f1f9699bef9e583d783ebdd49660658d3a", "node_id": "C_kwDOAAsO6NoAKGExOTEzOGYxZjk2OTliZWY5ZTU4M2Q3ODNlYmRkNDk2NjA2NThkM2E", "commit": {"author": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-03-05T04:14:38Z"}, "committer": {"name": "Erik Desjardins", "email": "erikdesjardins@users.noreply.github.com", "date": "2022-03-06T17:28:46Z"}, "message": "cleanup: remove unused ability to have LLVM null-terminate const strings", "tree": {"sha": "91e7bf31a00d0f78687c12c4713bf2550f5265da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/91e7bf31a00d0f78687c12c4713bf2550f5265da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a19138f1f9699bef9e583d783ebdd49660658d3a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a19138f1f9699bef9e583d783ebdd49660658d3a", "html_url": "https://github.com/rust-lang/rust/commit/a19138f1f9699bef9e583d783ebdd49660658d3a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a19138f1f9699bef9e583d783ebdd49660658d3a/comments", "author": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erikdesjardins", "id": 7673145, "node_id": "MDQ6VXNlcjc2NzMxNDU=", "avatar_url": "https://avatars.githubusercontent.com/u/7673145?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erikdesjardins", "html_url": "https://github.com/erikdesjardins", "followers_url": "https://api.github.com/users/erikdesjardins/followers", "following_url": "https://api.github.com/users/erikdesjardins/following{/other_user}", "gists_url": "https://api.github.com/users/erikdesjardins/gists{/gist_id}", "starred_url": "https://api.github.com/users/erikdesjardins/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erikdesjardins/subscriptions", "organizations_url": "https://api.github.com/users/erikdesjardins/orgs", "repos_url": "https://api.github.com/users/erikdesjardins/repos", "events_url": "https://api.github.com/users/erikdesjardins/events{/privacy}", "received_events_url": "https://api.github.com/users/erikdesjardins/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8238b914028fddeeb89d2df84988c97dc89fccfb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8238b914028fddeeb89d2df84988c97dc89fccfb", "html_url": "https://github.com/rust-lang/rust/commit/8238b914028fddeeb89d2df84988c97dc89fccfb"}], "stats": {"total": 24, "additions": 8, "deletions": 16}, "files": [{"sha": "3c0dad13deac6ae5dd06003d640c922a47bd8a14", "filename": "src/common.rs", "status": "modified", "additions": 6, "deletions": 14, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/a19138f1f9699bef9e583d783ebdd49660658d3a/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19138f1f9699bef9e583d783ebdd49660658d3a/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=a19138f1f9699bef9e583d783ebdd49660658d3a", "patch": "@@ -26,18 +26,6 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         bytes_in_context(self, bytes)\n     }\n \n-    fn const_cstr(&self, symbol: Symbol, _null_terminated: bool) -> LValue<'gcc> {\n-        // TODO(antoyo): handle null_terminated.\n-        if let Some(&value) = self.const_cstr_cache.borrow().get(&symbol) {\n-            return value;\n-        }\n-\n-        let global = self.global_string(symbol.as_str());\n-\n-        self.const_cstr_cache.borrow_mut().insert(symbol, global);\n-        global\n-    }\n-\n     fn global_string(&self, string: &str) -> LValue<'gcc> {\n         // TODO(antoyo): handle non-null-terminated strings.\n         let string = self.context.new_string_literal(&*string);\n@@ -171,8 +159,12 @@ impl<'gcc, 'tcx> ConstMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n     }\n \n     fn const_str(&self, s: Symbol) -> (RValue<'gcc>, RValue<'gcc>) {\n-        let len = s.as_str().len();\n-        let cs = self.const_ptrcast(self.const_cstr(s, false).get_address(None),\n+        let s_str = s.as_str();\n+        let str_global = *self.const_str_cache.borrow_mut().entry(s).or_insert_with(|| {\n+            self.global_string(s_str)\n+        });\n+        let len = s_str.len();\n+        let cs = self.const_ptrcast(str_global.get_address(None),\n             self.type_ptr_to(self.layout_of(self.tcx.types.str_).gcc_type(self, true)),\n         );\n         (cs, self.const_usize(len as u64))"}, {"sha": "6c1dce969f0f5eed9ec997d4f5af26629c0b33f7", "filename": "src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a19138f1f9699bef9e583d783ebdd49660658d3a/src%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a19138f1f9699bef9e583d783ebdd49660658d3a/src%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcontext.rs?ref=a19138f1f9699bef9e583d783ebdd49660658d3a", "patch": "@@ -85,7 +85,7 @@ pub struct CodegenCx<'gcc, 'tcx> {\n     pub const_globals: RefCell<FxHashMap<RValue<'gcc>, RValue<'gcc>>>,\n \n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n+    pub const_str_cache: RefCell<FxHashMap<Symbol, LValue<'gcc>>>,\n \n     /// Cache of globals.\n     pub globals: RefCell<FxHashMap<String, RValue<'gcc>>>,\n@@ -195,7 +195,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             function_instances: Default::default(),\n             vtables: Default::default(),\n             const_globals: Default::default(),\n-            const_cstr_cache: Default::default(),\n+            const_str_cache: Default::default(),\n             globals: Default::default(),\n             scalar_types: Default::default(),\n             types: Default::default(),"}]}