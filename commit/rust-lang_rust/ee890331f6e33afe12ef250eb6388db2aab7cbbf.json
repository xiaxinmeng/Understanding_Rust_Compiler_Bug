{"sha": "ee890331f6e33afe12ef250eb6388db2aab7cbbf", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlODkwMzMxZjZlMzNhZmUxMmVmMjUwZWI2Mzg4ZGIyYWFiN2NiYmY=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-06T02:28:53Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2019-06-06T02:29:02Z"}, "message": "Reblessed tests with NLL compare mode on.", "tree": {"sha": "9ae6f2e31b1ae780d45df155fc16a68b8d7d522d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae6f2e31b1ae780d45df155fc16a68b8d7d522d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee890331f6e33afe12ef250eb6388db2aab7cbbf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee890331f6e33afe12ef250eb6388db2aab7cbbf", "html_url": "https://github.com/rust-lang/rust/commit/ee890331f6e33afe12ef250eb6388db2aab7cbbf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee890331f6e33afe12ef250eb6388db2aab7cbbf/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e37a7a1f74afb0b62b933af4439d271f4b8f890a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37a7a1f74afb0b62b933af4439d271f4b8f890a", "html_url": "https://github.com/rust-lang/rust/commit/e37a7a1f74afb0b62b933af4439d271f4b8f890a"}], "stats": {"total": 32, "additions": 28, "deletions": 4}, "files": [{"sha": "32d099fce759e44d258cf2754d07ada71670e3a5", "filename": "src/test/ui/associated-type-bounds/implied-region-constraints.nll.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fimplied-region-constraints.nll.stderr?ref=ee890331f6e33afe12ef250eb6388db2aab7cbbf", "patch": "@@ -0,0 +1,24 @@\n+error: lifetime may not live long enough\n+  --> $DIR/implied-region-constraints.rs:19:56\n+   |\n+LL | fn _bad_st<'a, 'b, T>(x: St<'a, 'b, T>)\n+   |            --  -- lifetime `'b` defined here\n+   |            |\n+   |            lifetime `'a` defined here\n+...\n+LL |     let _failure_proves_not_implied_outlives_region_b: &'b T = &x.f0;\n+   |                                                        ^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/implied-region-constraints.rs:40:64\n+   |\n+LL | fn _bad_en7<'a, 'b, T>(x: En7<'a, 'b, T>)\n+   |             --  -- lifetime `'b` defined here\n+   |             |\n+   |             lifetime `'a` defined here\n+...\n+LL |             let _failure_proves_not_implied_outlives_region_b: &'b T = &x;\n+   |                                                                ^^^^^ type annotation requires that `'a` must outlive `'b`\n+\n+error: aborting due to 2 previous errors\n+"}, {"sha": "b1e4edd998094cb1233ef6457c185030a9663acc", "filename": "src/test/ui/impl-trait/must_outlive_least_region_or_bound.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmust_outlive_least_region_or_bound.nll.stderr?ref=ee890331f6e33afe12ef250eb6388db2aab7cbbf", "patch": "@@ -5,7 +5,7 @@ LL | fn elided(x: &i32) -> impl Copy { x }\n    |              -        ^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |              |\n    |              let's call the lifetime of this reference `'1`\n-help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL | fn elided(x: &i32) -> impl Copy + '_ { x }\n    |                       ^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL | fn explicit<'a>(x: &'a i32) -> impl Copy { x }\n    |             --                 ^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |             |\n    |             lifetime `'a` defined here\n-help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL | fn explicit<'a>(x: &'a i32) -> impl Copy + 'a { x }\n    |                                ^^^^^^^^^^^^^^"}, {"sha": "0736f25cb51bd8bf4bf4a0ec9bc844964698d799", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ee890331f6e33afe12ef250eb6388db2aab7cbbf/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=ee890331f6e33afe12ef250eb6388db2aab7cbbf", "patch": "@@ -5,7 +5,7 @@ LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n    |                         -         ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'1` must outlive `'static`\n    |                         |\n    |                         let's call the lifetime of this reference `'1`\n-help: to allow this impl Trait to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'1`, add `'_` as a constraint\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> + '_ {\n    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n@@ -17,7 +17,7 @@ LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n    |                    --               ^^^^^^^^^^^^^^^^^^^^^^^ opaque type requires that `'a` must outlive `'static`\n    |                    |\n    |                    lifetime `'a` defined here\n-help: to allow this impl Trait to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n+help: to allow this `impl Trait` to capture borrowed data with lifetime `'a`, add `'a` as a constraint\n    |\n LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> + 'a {\n    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^"}]}