{"sha": "b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3YTBiOTdlOTdlMWFhOWU3Y2UyMzc3YWU2MjNjYmJkYWY3ODM3MmM=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-03-30T11:13:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-30T11:13:45Z"}, "message": "Merge pull request #2590 from phansch/fix_another_false_positive\n\nFix false positive in empty_line_after_outer_attr", "tree": {"sha": "7e56ee9dbca2ab21e4916cc0e0337e602ff2b034", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e56ee9dbca2ab21e4916cc0e0337e602ff2b034"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJavhvpCRBK7hj4Ov3rIwAAdHIIAJgECAdAGTxFvUkDNtA/eW25\nIgrbOchB2FtQE73Z01oehixjuOUpb6cq4xxHfozGNeX80/CWjBqYktvhuLYd4gLw\nYgJaPHTqQfSa+VSufDtzS03XUF4q6NtGwC7AZQMgt0SzSXKh7Kv70SYv/sPqVBNK\np9iinvkXL7neUsbH4yjfvE+pNhu0M1ar3D9Q3A55Q7ASwWIqUPRy84cOs8/OqdPz\nX5QepxSMqMmelLfI2iYYf/ofBvUB098d9d6V6DFd5nqNMWHtqUeJLl3v694tFGMl\nx89xL8Qy9KOKv4xWgsuWMfFlmL3MHaoED2+vFNoYRe/9aOJnAdADCHIKDuGIEIM=\n=GElk\n-----END PGP SIGNATURE-----\n", "payload": "tree 7e56ee9dbca2ab21e4916cc0e0337e602ff2b034\nparent b45801ff192e6f1bd3504c05e612a1004f52a24e\nparent db1ec446160ef990675082f3208616de3157a91f\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1522408425 +0200\ncommitter GitHub <noreply@github.com> 1522408425 +0200\n\nMerge pull request #2590 from phansch/fix_another_false_positive\n\nFix false positive in empty_line_after_outer_attr"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "html_url": "https://github.com/rust-lang/rust/commit/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b45801ff192e6f1bd3504c05e612a1004f52a24e", "url": "https://api.github.com/repos/rust-lang/rust/commits/b45801ff192e6f1bd3504c05e612a1004f52a24e", "html_url": "https://github.com/rust-lang/rust/commit/b45801ff192e6f1bd3504c05e612a1004f52a24e"}, {"sha": "db1ec446160ef990675082f3208616de3157a91f", "url": "https://api.github.com/repos/rust-lang/rust/commits/db1ec446160ef990675082f3208616de3157a91f", "html_url": "https://github.com/rust-lang/rust/commit/db1ec446160ef990675082f3208616de3157a91f"}], "stats": {"total": 86, "additions": 83, "deletions": 3}, "files": [{"sha": "553a98f682dee2f111bacc8a134994c0c729dd04", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::{self, TyCtxt};\n use semver::Version;\n use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n+use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then, without_block_comments};\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -85,7 +85,11 @@ declare_clippy_lint! {\n /// If it was meant to be an outer attribute, then the following item\n /// should not be separated by empty lines.\n ///\n-/// **Known problems:** None\n+/// **Known problems:** Can cause false positives.\n+///\n+/// From the clippy side it's difficult to detect empty lines between an attributes and the\n+/// following item because empty lines and comments are not part of the AST. The parsing\n+/// currently works for basic cases but is not perfect.\n ///\n /// **Example:**\n /// ```rust\n@@ -105,7 +109,7 @@ declare_clippy_lint! {\n /// ```\n declare_clippy_lint! {\n     pub EMPTY_LINE_AFTER_OUTER_ATTR,\n-    style,\n+    nursery,\n     \"empty line after outer attribute\"\n }\n \n@@ -276,6 +280,8 @@ fn check_attrs(cx: &LateContext, span: Span, name: &Name, attrs: &[Attribute]) {\n \n             if let Some(snippet) = snippet_opt(cx, end_of_attr_to_item) {\n                 let lines = snippet.split('\\n').collect::<Vec<_>>();\n+                let lines = without_block_comments(lines);\n+\n                 if lines.iter().filter(|l| l.trim().is_empty()).count() > 2 {\n                     span_lint(\n                         cx,"}, {"sha": "e3a7fc851b15215dd57da374bc40294cd3a03fdf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "patch": "@@ -1086,3 +1086,36 @@ pub fn clip(tcx: TyCtxt, u: u128, ity: ast::UintTy) -> u128 {\n     let amt = 128 - bits;\n     (u << amt) >> amt\n }\n+\n+/// Remove block comments from the given Vec of lines\n+///\n+/// # Examples\n+///\n+/// ```rust,ignore\n+/// without_block_comments(vec![\"/*\", \"foo\", \"*/\"]);\n+/// // => vec![]\n+///\n+/// without_block_comments(vec![\"bar\", \"/*\", \"foo\", \"*/\"]);\n+/// // => vec![\"bar\"]\n+/// ```\n+pub fn without_block_comments(lines: Vec<&str>) -> Vec<&str> {\n+    let mut without = vec![];\n+\n+    let mut nest_level = 0;\n+\n+    for line in lines.into_iter() {\n+        if line.contains(\"/*\") {\n+            nest_level += 1;\n+            continue;\n+        } else if line.contains(\"*/\") {\n+            nest_level -= 1;\n+            continue;\n+        }\n+\n+        if nest_level == 0 {\n+            without.push(line);\n+        }\n+    }\n+\n+    without\n+}"}, {"sha": "30063dac0a4659ff7c88717df115b86c9b862326", "filename": "tests/ui/empty_line_after_outer_attribute.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/tests%2Fui%2Fempty_line_after_outer_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fempty_line_after_outer_attribute.rs?ref=b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "patch": "@@ -79,4 +79,16 @@ pub enum FooFighter {\n     Bar4\n }\n \n+// This should not produce a warning because the empty line is inside a block comment\n+#[crate_type = \"lib\"]\n+/*\n+\n+*/\n+pub struct S;\n+\n+// This should not produce a warning\n+#[crate_type = \"lib\"]\n+/* test */\n+pub struct T;\n+\n fn main() { }"}, {"sha": "375df05754497b3e9482bf3d0375f8cf4ef37725", "filename": "tests/without_block_comments.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/tests%2Fwithout_block_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c/tests%2Fwithout_block_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fwithout_block_comments.rs?ref=b7a0b97e97e1aa9e7ce2377ae623cbbdaf78372c", "patch": "@@ -0,0 +1,29 @@\n+extern crate clippy_lints;\n+use clippy_lints::utils::without_block_comments;\n+\n+#[test]\n+fn test_lines_without_block_comments() {\n+    let result = without_block_comments(vec![\"/*\", \"\", \"*/\"]);\n+    println!(\"result: {:?}\", result);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(\n+        vec![\"\", \"/*\", \"\", \"*/\", \"#[crate_type = \\\"lib\\\"]\", \"/*\", \"\", \"*/\", \"\"]\n+    );\n+    assert_eq!(result, vec![\"\", \"#[crate_type = \\\"lib\\\"]\", \"\"]);\n+\n+    let result = without_block_comments(vec![\"/* rust\", \"\", \"*/\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* one-line comment */\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* nested\", \"/* multi-line\",  \"comment\",  \"*/\", \"test\", \"*/\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"/* nested /* inline /* comment */ test */ */\"]);\n+    assert!(result.is_empty());\n+\n+    let result = without_block_comments(vec![\"foo\", \"bar\", \"baz\"]);\n+    assert_eq!(result, vec![\"foo\", \"bar\", \"baz\"]);\n+}"}]}