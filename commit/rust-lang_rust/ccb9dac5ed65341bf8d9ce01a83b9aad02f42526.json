{"sha": "ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjYjlkYWM1ZWQ2NTM0MWJmOGQ5Y2UwMWE4M2I5YWFkMDJmNDI1MjY=", "commit": {"author": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-04T14:48:57Z"}, "committer": {"name": "Taiki Endo", "email": "te316e89@gmail.com", "date": "2019-05-04T14:48:57Z"}, "message": "Fix intra-doc link resolution failure on re-exporting libstd", "tree": {"sha": "8148c29c67cf4418b404cfc43f913179e399939c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8148c29c67cf4418b404cfc43f913179e399939c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "html_url": "https://github.com/rust-lang/rust/commit/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/comments", "author": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "committer": {"login": "taiki-e", "id": 43724913, "node_id": "MDQ6VXNlcjQzNzI0OTEz", "avatar_url": "https://avatars.githubusercontent.com/u/43724913?v=4", "gravatar_id": "", "url": "https://api.github.com/users/taiki-e", "html_url": "https://github.com/taiki-e", "followers_url": "https://api.github.com/users/taiki-e/followers", "following_url": "https://api.github.com/users/taiki-e/following{/other_user}", "gists_url": "https://api.github.com/users/taiki-e/gists{/gist_id}", "starred_url": "https://api.github.com/users/taiki-e/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/taiki-e/subscriptions", "organizations_url": "https://api.github.com/users/taiki-e/orgs", "repos_url": "https://api.github.com/users/taiki-e/repos", "events_url": "https://api.github.com/users/taiki-e/events{/privacy}", "received_events_url": "https://api.github.com/users/taiki-e/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef9a876f8297e26859469b004047e0946ed10565", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef9a876f8297e26859469b004047e0946ed10565", "html_url": "https://github.com/rust-lang/rust/commit/ef9a876f8297e26859469b004047e0946ed10565"}], "stats": {"total": 96, "additions": 94, "deletions": 2}, "files": [{"sha": "41ff06d70ff09eb7897af0f71c5385e42807483d", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -37,6 +37,8 @@ extern \"Rust\" {\n ///\n /// Note: while this type is unstable, the functionality it provides can be\n /// accessed through the [free functions in `alloc`](index.html#functions).\n+///\n+/// [`Alloc`]: trait.Alloc.html\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n #[derive(Copy, Clone, Default, Debug)]\n pub struct Global;\n@@ -54,6 +56,10 @@ pub struct Global;\n ///\n /// See [`GlobalAlloc::alloc`].\n ///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::alloc`]: trait.GlobalAlloc.html#tymethod.alloc\n+///\n /// # Examples\n ///\n /// ```\n@@ -87,6 +93,10 @@ pub unsafe fn alloc(layout: Layout) -> *mut u8 {\n /// # Safety\n ///\n /// See [`GlobalAlloc::dealloc`].\n+///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::dealloc`]: trait.GlobalAlloc.html#tymethod.dealloc\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n@@ -105,6 +115,10 @@ pub unsafe fn dealloc(ptr: *mut u8, layout: Layout) {\n /// # Safety\n ///\n /// See [`GlobalAlloc::realloc`].\n+///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::realloc`]: trait.GlobalAlloc.html#method.realloc\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[inline]\n pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n@@ -124,6 +138,10 @@ pub unsafe fn realloc(ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8\n ///\n /// See [`GlobalAlloc::alloc_zeroed`].\n ///\n+/// [`Global`]: struct.Global.html\n+/// [`Alloc`]: trait.Alloc.html\n+/// [`GlobalAlloc::alloc_zeroed`]: trait.GlobalAlloc.html#method.alloc_zeroed\n+///\n /// # Examples\n ///\n /// ```"}, {"sha": "a6d611d2e93c4b83847a9791a39a28bb1a270e14", "filename": "src/libcore/task/wake.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibcore%2Ftask%2Fwake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibcore%2Ftask%2Fwake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftask%2Fwake.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -10,6 +10,8 @@ use crate::marker::{PhantomData, Unpin};\n ///\n /// It consists of a data pointer and a [virtual function pointer table (vtable)][vtable] that\n /// customizes the behavior of the `RawWaker`.\n+///\n+/// [`Waker`]: struct.Waker.html\n #[derive(PartialEq, Debug)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct RawWaker {\n@@ -55,6 +57,8 @@ impl RawWaker {\n /// pointer of a properly constructed [`RawWaker`] object from inside the\n /// [`RawWaker`] implementation. Calling one of the contained functions using\n /// any other `data` pointer will cause undefined behavior.\n+///\n+/// [`RawWaker`]: struct.RawWaker.html\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n #[derive(PartialEq, Copy, Clone, Debug)]\n pub struct RawWakerVTable {\n@@ -65,6 +69,9 @@ pub struct RawWakerVTable {\n     /// required for this additional instance of a [`RawWaker`] and associated\n     /// task. Calling `wake` on the resulting [`RawWaker`] should result in a wakeup\n     /// of the same task that would have been awoken by the original [`RawWaker`].\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     clone: unsafe fn(*const ()) -> RawWaker,\n \n     /// This function will be called when `wake` is called on the [`Waker`].\n@@ -73,20 +80,28 @@ pub struct RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     wake: unsafe fn(*const ()),\n \n     /// This function will be called when `wake_by_ref` is called on the [`Waker`].\n     /// It must wake up the task associated with this [`RawWaker`].\n     ///\n     /// This function is similar to `wake`, but must not consume the provided data\n     /// pointer.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     wake_by_ref: unsafe fn(*const ()),\n \n     /// This function gets called when a [`RawWaker`] gets dropped.\n     ///\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`RawWaker`]: struct.RawWaker.html\n     drop: unsafe fn(*const ()),\n }\n \n@@ -128,6 +143,9 @@ impl RawWakerVTable {\n     /// The implementation of this function must make sure to release any\n     /// resources that are associated with this instance of a [`RawWaker`] and\n     /// associated task.\n+    ///\n+    /// [`Waker`]: struct.Waker.html\n+    /// [`RawWaker`]: struct.RawWaker.html\n     #[rustc_promotable]\n     #[cfg_attr(stage0, unstable(feature = \"futures_api_const_fn_ptr\", issue = \"50547\"))]\n     #[cfg_attr(not(stage0), stable(feature = \"futures_api\", since = \"1.36.0\"))]\n@@ -201,6 +219,8 @@ impl fmt::Debug for Context<'_> {\n /// executor-specific wakeup behavior.\n ///\n /// Implements [`Clone`], [`Send`], and [`Sync`].\n+///\n+/// [`RawWaker`]: struct.RawWaker.html\n #[repr(transparent)]\n #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n pub struct Waker {\n@@ -266,6 +286,9 @@ impl Waker {\n     /// The behavior of the returned `Waker` is undefined if the contract defined\n     /// in [`RawWaker`]'s and [`RawWakerVTable`]'s documentation is not upheld.\n     /// Therefore this method is unsafe.\n+    ///\n+    /// [`RawWaker`]: struct.RawWaker.html\n+    /// [`RawWakerVTable`]: struct.RawWakerVTable.html\n     #[inline]\n     #[stable(feature = \"futures_api\", since = \"1.36.0\")]\n     pub unsafe fn from_raw(waker: RawWaker) -> Waker {"}, {"sha": "ff52974775b05268e1a4b3b49a704340a6f24d50", "filename": "src/libstd/alloc.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Falloc.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -173,6 +173,9 @@ static HOOK: AtomicPtr<()> = AtomicPtr::new(ptr::null_mut());\n /// about the allocation that failed.\n ///\n /// The allocation error hook is a global resource.\n+///\n+/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n+/// [`take_alloc_error_hook`]: fn.take_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn set_alloc_error_hook(hook: fn(Layout)) {\n     HOOK.store(hook as *mut (), Ordering::SeqCst);\n@@ -183,6 +186,8 @@ pub fn set_alloc_error_hook(hook: fn(Layout)) {\n /// *See also the function [`set_alloc_error_hook`].*\n ///\n /// If no custom hook is registered, the default hook will be returned.\n+///\n+/// [`set_alloc_error_hook`]: fn.set_alloc_error_hook.html\n #[unstable(feature = \"alloc_error_hook\", issue = \"51245\")]\n pub fn take_alloc_error_hook() -> fn(Layout) {\n     let hook = HOOK.swap(ptr::null_mut(), Ordering::SeqCst);"}, {"sha": "af4f911a7842c64590f9b9765a749b2eab24a175", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -2492,7 +2492,10 @@ impl DefaultHasher {\n \n #[stable(feature = \"hashmap_default_hasher\", since = \"1.13.0\")]\n impl Default for DefaultHasher {\n-    /// Creates a new `DefaultHasher` using [`new`][DefaultHasher::new].\n+    // FIXME: here should link `new` to [DefaultHasher::new], but it occurs intra-doc link\n+    // resolution failure when re-exporting libstd items. When #56922 fixed,\n+    // link `new` to [DefaultHasher::new] again.\n+    /// Creates a new `DefaultHasher` using `new`.\n     /// See its documentation for more.\n     fn default() -> DefaultHasher {\n         DefaultHasher::new()"}, {"sha": "71227c31c55309ceddee1838b9b816731f8016d7", "filename": "src/libstd/error.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -207,6 +207,8 @@ pub trait Error: Debug + Display {\n impl<'a, E: Error + 'a> From<E> for Box<dyn Error + 'a> {\n     /// Converts a type of [`Error`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -244,6 +246,8 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n     /// Converts a type of [`Error`] + [`Send`] + [`Sync`] into a box of dyn [`Error`] +\n     /// [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -285,6 +289,8 @@ impl<'a, E: Error + Send + Sync + 'a> From<E> for Box<dyn Error + Send + Sync +\n impl From<String> for Box<dyn Error + Send + Sync> {\n     /// Converts a [`String`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -318,6 +324,8 @@ impl From<String> for Box<dyn Error + Send + Sync> {\n impl From<String> for Box<dyn Error> {\n     /// Converts a [`String`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -339,6 +347,8 @@ impl From<String> for Box<dyn Error> {\n impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`str`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -359,6 +369,8 @@ impl<'a> From<&str> for Box<dyn Error + Send + Sync + 'a> {\n impl From<&str> for Box<dyn Error> {\n     /// Converts a [`str`] into a box of dyn [`Error`].\n     ///\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -378,6 +390,9 @@ impl From<&str> for Box<dyn Error> {\n impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`] + [`Send`] + [`Sync`].\n     ///\n+    /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```\n@@ -399,6 +414,9 @@ impl<'a, 'b> From<Cow<'b, str>> for Box<dyn Error + Send + Sync + 'a> {\n impl<'a> From<Cow<'a, str>> for Box<dyn Error> {\n     /// Converts a [`Cow`] into a box of dyn [`Error`].\n     ///\n+    /// [`Cow`]: ../borrow/enum.Cow.html\n+    /// [`Error`]: ../error/trait.Error.html\n+    ///\n     /// # Examples\n     ///\n     /// ```"}, {"sha": "c7c5849a00fa03e7ded2fe25de405f195575d0f2", "filename": "src/libstd/ffi/os_str.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fffi%2Fos_str.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -351,6 +351,8 @@ impl From<String> for OsString {\n     /// Converts a [`String`] into a [`OsString`].\n     ///\n     /// The conversion copies the data, and includes an allocation on the heap.\n+    ///\n+    /// [`OsString`]: ../../std/ffi/struct.OsString.html\n     fn from(s: String) -> OsString {\n         OsString { inner: Buf::from_string(s) }\n     }"}, {"sha": "616b5eb836ffd6c8c20163cd752790ade30ef170", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -1812,6 +1812,8 @@ pub fn canonicalize<P: AsRef<Path>>(path: P) -> io::Result<PathBuf> {\n ///   function.)\n /// * `path` already exists.\n ///\n+/// [`create_dir_all`]: fn.create_dir_all.html\n+///\n /// # Examples\n ///\n /// ```no_run"}, {"sha": "e309f81192cf3ffb7322bd4540da7beb5c384461", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -754,7 +754,7 @@ impl<W> fmt::Display for IntoInnerError<W> {\n /// completed, rather than the entire buffer at once. Enter `LineWriter`. It\n /// does exactly that.\n ///\n-/// Like [`BufWriter`], a `LineWriter`\u2019s buffer will also be flushed when the\n+/// Like [`BufWriter`][bufwriter], a `LineWriter`\u2019s buffer will also be flushed when the\n /// `LineWriter` goes out of scope or when its internal buffer is full.\n ///\n /// [bufwriter]: struct.BufWriter.html"}, {"sha": "b3f0508221a56e2e7a4b694b566e344998cc3d65", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -546,6 +546,9 @@ impl FromInner<c::sockaddr_in6> for SocketAddrV6 {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV4> for SocketAddr {\n     /// Converts a [`SocketAddrV4`] into a [`SocketAddr::V4`].\n+    ///\n+    /// [`SocketAddrV4`]: ../../std/net/struct.SocketAddrV4.html\n+    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n     fn from(sock4: SocketAddrV4) -> SocketAddr {\n         SocketAddr::V4(sock4)\n     }\n@@ -554,6 +557,9 @@ impl From<SocketAddrV4> for SocketAddr {\n #[stable(feature = \"ip_from_ip\", since = \"1.16.0\")]\n impl From<SocketAddrV6> for SocketAddr {\n     /// Converts a [`SocketAddrV6`] into a [`SocketAddr::V6`].\n+    ///\n+    /// [`SocketAddrV6`]: ../../std/net/struct.SocketAddrV6.html\n+    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(sock6: SocketAddrV6) -> SocketAddr {\n         SocketAddr::V6(sock6)\n     }\n@@ -567,6 +573,13 @@ impl<I: Into<IpAddr>> From<(I, u16)> for SocketAddr {\n     /// and creates a [`SocketAddr::V6`] for a [`IpAddr::V6`].\n     ///\n     /// `u16` is treated as port of the newly created [`SocketAddr`].\n+    ///\n+    /// [`IpAddr`]: ../../std/net/enum.IpAddr.html\n+    /// [`IpAddr::V4`]: ../../std/net/enum.IpAddr.html#variant.V4\n+    /// [`IpAddr::V6`]: ../../std/net/enum.IpAddr.html#variant.V6\n+    /// [`SocketAddr`]: ../../std/net/enum.SocketAddr.html\n+    /// [`SocketAddr::V4`]: ../../std/net/enum.SocketAddr.html#variant.V4\n+    /// [`SocketAddr::V6`]: ../../std/net/enum.SocketAddr.html#variant.V6\n     fn from(pieces: (I, u16)) -> SocketAddr {\n         SocketAddr::new(pieces.0.into(), pieces.1)\n     }"}, {"sha": "87c2318a9377c56ff3b3922915d664cd2aeaeaa8", "filename": "src/libstd/sync/mutex.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fsync%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fsync%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmutex.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -376,6 +376,8 @@ unsafe impl<#[may_dangle] T: ?Sized> Drop for Mutex<T> {\n impl<T> From<T> for Mutex<T> {\n     /// Creates a new mutex in an unlocked state ready for use.\n     /// This is equivalent to [`Mutex::new`].\n+    ///\n+    /// [`Mutex::new`]: ../../std/sync/struct.Mutex.html#method.new\n     fn from(t: T) -> Self {\n         Mutex::new(t)\n     }"}, {"sha": "b1b56f321fc6b8fb162c68a7ba2362de91621ab3", "filename": "src/libstd/sync/rwlock.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fsync%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fsync%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Frwlock.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -453,6 +453,8 @@ impl<T: Default> Default for RwLock<T> {\n impl<T> From<T> for RwLock<T> {\n     /// Creates a new instance of an `RwLock<T>` which is unlocked.\n     /// This is equivalent to [`RwLock::new`].\n+    ///\n+    /// [`RwLock::new`]: ../../std/sync/struct.RwLock.html#method.new\n     fn from(t: T) -> Self {\n         RwLock::new(t)\n     }"}, {"sha": "35de4f4008b6723a67aa2c567ee4fde6987c0067", "filename": "src/libstd/thread/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Flibstd%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread%2Fmod.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -443,6 +443,7 @@ impl Builder {\n     /// [`Builder::spawn`]: ../../std/thread/struct.Builder.html#method.spawn\n     /// [`io::Result`]: ../../std/io/type.Result.html\n     /// [`JoinHandle`]: ../../std/thread/struct.JoinHandle.html\n+    /// [`JoinHandle::join`]: ../../std/thread/struct.JoinHandle.html#method.join\n     #[unstable(feature = \"thread_spawn_unchecked\", issue = \"55132\")]\n     pub unsafe fn spawn_unchecked<'a, F, T>(self, f: F) -> io::Result<JoinHandle<T>> where\n         F: FnOnce() -> T, F: Send + 'a, T: Send + 'a"}, {"sha": "6f239292ec2004be6a68e597d5355951bb9a38b6", "filename": "src/test/rustdoc/intra-link-libstd-re-export.rs", "status": "added", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ccb9dac5ed65341bf8d9ce01a83b9aad02f42526/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fintra-link-libstd-re-export.rs?ref=ccb9dac5ed65341bf8d9ce01a83b9aad02f42526", "patch": "@@ -0,0 +1,3 @@\n+#![deny(intra_doc_link_resolution_failure)]\n+\n+pub use std::*;"}]}