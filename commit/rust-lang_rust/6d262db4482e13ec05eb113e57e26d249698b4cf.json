{"sha": "6d262db4482e13ec05eb113e57e26d249698b4cf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkMjYyZGI0NDgyZTEzZWMwNWViMTEzZTU3ZTI2ZDI0OTY5OGI0Y2Y=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-07T04:25:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-07T04:25:27Z"}, "message": "Auto merge of #32066 - ruud-v-a:fma, r=alexcrichton\n\nThis adds support for fused multiply-add and multiply-subtract vector intrinsics for 128 and 256-bit vectors of `f32` and `f64`. These correspond to the intrinsics [listed here](https://software.intel.com/en-us/node/523929) except for the `_ss` and `_sd` variants. The intrinsics added are:\n\n * `fmadd`\n * `fmaddsub`\n * `fmsub`\n * `fmsubadd`\n * `fnmadd`\n * `fnmsub`\n\nThe \u201cfma\u201d target feature must be enabled by passing `-C target-feature=+fma` to rustc when using these, otherwise LLVM will complain.\n\nI verified locally that the `x86_mm256_fmadd_ps` and `x86_mm256_fmsub_ps` work.", "tree": {"sha": "6a93f96508825ad54693a01250ec607c6f3e20e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a93f96508825ad54693a01250ec607c6f3e20e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d262db4482e13ec05eb113e57e26d249698b4cf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d262db4482e13ec05eb113e57e26d249698b4cf", "html_url": "https://github.com/rust-lang/rust/commit/6d262db4482e13ec05eb113e57e26d249698b4cf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d262db4482e13ec05eb113e57e26d249698b4cf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6eb81a1f3bc27f2160048c09e3936486b4c9ef59", "url": "https://api.github.com/repos/rust-lang/rust/commits/6eb81a1f3bc27f2160048c09e3936486b4c9ef59", "html_url": "https://github.com/rust-lang/rust/commit/6eb81a1f3bc27f2160048c09e3936486b4c9ef59"}, {"sha": "a409076df4ac1e80d0e8b4ed55608cbd354129ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/a409076df4ac1e80d0e8b4ed55608cbd354129ef", "html_url": "https://github.com/rust-lang/rust/commit/a409076df4ac1e80d0e8b4ed55608cbd354129ef"}], "stats": {"total": 173, "additions": 170, "deletions": 3}, "files": [{"sha": "0e0d4841063a4ac43c837dbb856379df98eb5931", "filename": "src/etc/platform-intrinsics/generator.py", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "raw_url": "https://github.com/rust-lang/rust/raw/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fgenerator.py?ref=6d262db4482e13ec05eb113e57e26d249698b4cf", "patch": "@@ -691,7 +691,7 @@ def parse_args():\n     parser.add_argument('-o', '--out', type=argparse.FileType('w'), default=sys.stdout,\n                         help = 'File to output to (default stdout).')\n     parser.add_argument('-i', '--info', type=argparse.FileType('r'),\n-                        help = 'File containing platform specific information to merge into'\n+                        help = 'File containing platform specific information to merge into '\n                                 'the input files\\' header.')\n     parser.add_argument('in_', metavar=\"FILE\", type=argparse.FileType('r'), nargs='+',\n                         help = 'JSON files to load')\n@@ -735,12 +735,12 @@ def open(self, platform):\n \n use {{Intrinsic, i, i_, u, u_, f, v, v_, agg, p, void}};\n use IntrinsicDef::Named;\n-use rustc::middle::ty;\n+use rustc::middle::ty::TyCtxt;\n \n // The default inlining settings trigger a pathological behaviour in\n // LLVM, which causes makes compilation very slow. See #28273.\n #[inline(never)]\n-pub fn find<'tcx>(_tcx: &ty::ctxt<'tcx>, name: &str) -> Option<Intrinsic> {{\n+pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {{\n     if !name.starts_with(\"{0}\") {{ return None }}\n     Some(match &name[\"{0}\".len()..] {{'''.format(platform.intrinsic_prefix())\n "}, {"sha": "c922d166c8fbc831758e8ab0e98a8036d7ca56a7", "filename": "src/etc/platform-intrinsics/x86/fma.json", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json", "raw_url": "https://github.com/rust-lang/rust/raw/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Fplatform-intrinsics%2Fx86%2Ffma.json?ref=6d262db4482e13ec05eb113e57e26d249698b4cf", "patch": "@@ -0,0 +1,47 @@\n+{\n+    \"llvm_prefix\": \"llvm.x86.fma.\",\n+    \"intrinsics\": [\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fmadd_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfmadd.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fmaddsub_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfmaddsub.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fmsub_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfmsub.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fmsubadd_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfmsubadd.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fnmadd_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfnmadd.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        },\n+        {\n+            \"intrinsic\": \"{0.width_mm}_fnmsub_{0.data_type}\",\n+            \"width\": [128, 256],\n+            \"llvm\": \"vfnmsub.{0.data_type_short}{0.width_suffix}\",\n+            \"ret\": \"f(32-64)\",\n+            \"args\": [\"0\", \"0\", \"0\"]\n+        }\n+    ]\n+}"}, {"sha": "168ae79ab748ff6fcd73fb34d727fc0c0a1b0f91", "filename": "src/librustc_platform_intrinsics/x86.rs", "status": "modified", "additions": 120, "deletions": 0, "changes": 120, "blob_url": "https://github.com/rust-lang/rust/blob/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d262db4482e13ec05eb113e57e26d249698b4cf/src%2Flibrustc_platform_intrinsics%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_platform_intrinsics%2Fx86.rs?ref=6d262db4482e13ec05eb113e57e26d249698b4cf", "patch": "@@ -1108,6 +1108,126 @@ pub fn find<'tcx>(_tcx: &TyCtxt<'tcx>, name: &str) -> Option<Intrinsic> {\n             output: v(u(16), 16),\n             definition: Named(\"llvm.x86.avx2.psubus.w\")\n         },\n+        \"_fmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmadd.ps\")\n+        },\n+        \"_fmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmadd.pd\")\n+        },\n+        \"256_fmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmadd.ps.256\")\n+        },\n+        \"256_fmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmadd.pd.256\")\n+        },\n+        \"_fmaddsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.ps\")\n+        },\n+        \"_fmaddsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.pd\")\n+        },\n+        \"256_fmaddsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.ps.256\")\n+        },\n+        \"256_fmaddsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmaddsub.pd.256\")\n+        },\n+        \"_fmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsub.ps\")\n+        },\n+        \"_fmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmsub.pd\")\n+        },\n+        \"256_fmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmsub.ps.256\")\n+        },\n+        \"256_fmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsub.pd.256\")\n+        },\n+        \"_fmsubadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.ps\")\n+        },\n+        \"_fmsubadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.pd\")\n+        },\n+        \"256_fmsubadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.ps.256\")\n+        },\n+        \"256_fmsubadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfmsubadd.pd.256\")\n+        },\n+        \"_fnmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.ps\")\n+        },\n+        \"_fnmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.pd\")\n+        },\n+        \"256_fnmadd_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.ps.256\")\n+        },\n+        \"256_fnmadd_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmadd.pd.256\")\n+        },\n+        \"_fnmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 4), v(f(32), 4), v(f(32), 4)],\n+            output: v(f(32), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.ps\")\n+        },\n+        \"_fnmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 2), v(f(64), 2), v(f(64), 2)],\n+            output: v(f(64), 2),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.pd\")\n+        },\n+        \"256_fnmsub_ps\" => Intrinsic {\n+            inputs: vec![v(f(32), 8), v(f(32), 8), v(f(32), 8)],\n+            output: v(f(32), 8),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.ps.256\")\n+        },\n+        \"256_fnmsub_pd\" => Intrinsic {\n+            inputs: vec![v(f(64), 4), v(f(64), 4), v(f(64), 4)],\n+            output: v(f(64), 4),\n+            definition: Named(\"llvm.x86.fma.vfnmsub.pd.256\")\n+        },\n         _ => return None,\n     })\n }"}]}