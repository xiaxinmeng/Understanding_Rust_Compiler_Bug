{"sha": "98c94f6f771c0e3894a65e82572c5dca1c43167d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4Yzk0ZjZmNzcxYzBlMzg5NGE2NWU4MjU3MmM1ZGNhMWM0MzE2N2Q=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T13:51:32Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2019-09-13T23:44:44Z"}, "message": "Move edition field out of Context", "tree": {"sha": "fa245dab362e815824b19277374e5da2dfcf9530", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa245dab362e815824b19277374e5da2dfcf9530"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98c94f6f771c0e3894a65e82572c5dca1c43167d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98c94f6f771c0e3894a65e82572c5dca1c43167d", "html_url": "https://github.com/rust-lang/rust/commit/98c94f6f771c0e3894a65e82572c5dca1c43167d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98c94f6f771c0e3894a65e82572c5dca1c43167d/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0e0c3787ca64d8c2540d703ca1e2f26607c5717", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0e0c3787ca64d8c2540d703ca1e2f26607c5717", "html_url": "https://github.com/rust-lang/rust/commit/e0e0c3787ca64d8c2540d703ca1e2f26607c5717"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "1ecb2293fc22c2091c286f68626d1cc43fc643f7", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/98c94f6f771c0e3894a65e82572c5dca1c43167d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98c94f6f771c0e3894a65e82572c5dca1c43167d/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=98c94f6f771c0e3894a65e82572c5dca1c43167d", "patch": "@@ -164,8 +164,6 @@ struct Context {\n     /// publicly reused items to redirect to the right location.\n     pub render_redirect_pages: bool,\n     pub codes: ErrorCodes,\n-    /// The default edition used to parse doctests.\n-    pub edition: Edition,\n     /// The map used to ensure all generated 'id=' attributes are unique.\n     id_map: Rc<RefCell<IdMap>>,\n     pub shared: Arc<SharedContext>,\n@@ -208,6 +206,8 @@ crate struct SharedContext {\n     pub generate_redirect_pages: bool,\n     /// The fs handle we are working with.\n     pub fs: DocFS,\n+    /// The default edition used to parse doctests.\n+    pub edition: Edition,\n }\n \n impl SharedContext {\n@@ -539,6 +539,7 @@ pub fn run(mut krate: clean::Crate,\n         static_root_path,\n         generate_redirect_pages,\n         fs: DocFS::new(&errors),\n+        edition,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -585,7 +586,6 @@ pub fn run(mut krate: clean::Crate,\n         dst,\n         render_redirect_pages: false,\n         codes: ErrorCodes::from(UnstableFeatures::from_environment().is_nightly_build()),\n-        edition,\n         id_map: Rc::new(RefCell::new(id_map)),\n         shared: Arc::new(scx),\n         playground,\n@@ -1134,7 +1134,7 @@ themePicker.onblur = handleThemeButtonsBlur;\n             md_opts.output = cx.dst.clone();\n             md_opts.external_html = (*cx.shared).layout.external_html.clone();\n \n-            crate::markdown::render(index_page, md_opts, diag, cx.edition);\n+            crate::markdown::render(index_page, md_opts, diag, cx.shared.edition);\n         } else {\n             let dst = cx.dst.join(\"index.html\");\n             let page = layout::Page {\n@@ -2353,7 +2353,7 @@ fn render_markdown(\n            if is_hidden { \" hidden\" } else { \"\" },\n            prefix,\n            Markdown(md_text, &links, &mut ids,\n-           cx.codes, cx.edition, &cx.playground).to_string())\n+           cx.codes, cx.shared.edition, &cx.playground).to_string())\n }\n \n fn document_short(\n@@ -2710,7 +2710,8 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n \n         if let Some(note) = note {\n             let mut ids = cx.id_map.borrow_mut();\n-            let html = MarkdownHtml(&note, &mut ids, error_codes, cx.edition, &cx.playground);\n+            let html = MarkdownHtml(\n+                &note, &mut ids, error_codes, cx.shared.edition, &cx.playground);\n             message.push_str(&format!(\": {}\", html.to_string()));\n         }\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", message));\n@@ -2763,7 +2764,7 @@ fn short_stability(item: &clean::Item, cx: &Context) -> Vec<String> {\n                     &unstable_reason,\n                     &mut ids,\n                     error_codes,\n-                    cx.edition,\n+                    cx.shared.edition,\n                     &cx.playground,\n                 ).to_string()\n             );\n@@ -3960,7 +3961,7 @@ fn render_impl(w: &mut Buffer, cx: &Context, i: &Impl, link: AssocItemLink<'_>,\n             let mut ids = cx.id_map.borrow_mut();\n             write!(w, \"<div class='docblock'>{}</div>\",\n                    Markdown(&*dox, &i.impl_item.links(), &mut ids,\n-                            cx.codes, cx.edition, &cx.playground).to_string());\n+                            cx.codes, cx.shared.edition, &cx.playground).to_string());\n         }\n     }\n "}]}