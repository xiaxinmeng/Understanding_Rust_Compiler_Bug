{"sha": "900c04a42338604d7dbea655950527ea76601533", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkwMGMwNGE0MjMzODYwNGQ3ZGJlYTY1NTk1MDUyN2VhNzY2MDE1MzM=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-26T15:35:13Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2020-02-26T15:35:13Z"}, "message": "Implement simd_fma", "tree": {"sha": "222f58bf3732bd79d0f6bcc1276f60918c8c5ab0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/222f58bf3732bd79d0f6bcc1276f60918c8c5ab0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/900c04a42338604d7dbea655950527ea76601533", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/900c04a42338604d7dbea655950527ea76601533", "html_url": "https://github.com/rust-lang/rust/commit/900c04a42338604d7dbea655950527ea76601533", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/900c04a42338604d7dbea655950527ea76601533/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fd6c463367428b4501fb3da65772c58aaf808e24", "url": "https://api.github.com/repos/rust-lang/rust/commits/fd6c463367428b4501fb3da65772c58aaf808e24", "html_url": "https://github.com/rust-lang/rust/commit/fd6c463367428b4501fb3da65772c58aaf808e24"}], "stats": {"total": 22, "additions": 22, "deletions": 0}, "files": [{"sha": "99149d7d89bf7e0f4df4398dc4d36397429f9fd4", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/900c04a42338604d7dbea655950527ea76601533/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/900c04a42338604d7dbea655950527ea76601533/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=900c04a42338604d7dbea655950527ea76601533", "patch": "@@ -180,6 +180,28 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             simd_int_binop!(fx, bxor(x, y) -> ret);\n         };\n \n+        simd_fma, (c a, c b, c c) {\n+            assert_eq!(a.layout(), b.layout());\n+            assert_eq!(a.layout(), c.layout());\n+            let layout = a.layout();\n+\n+            let (_lane_layout, lane_count) = lane_type_and_count(fx.tcx, layout);\n+            let (ret_lane_layout, ret_lane_count) = lane_type_and_count(fx.tcx, ret.layout());\n+            assert_eq!(lane_count, ret_lane_count);\n+\n+            for lane in 0..lane_count {\n+                let lane = mir::Field::new(lane.try_into().unwrap());\n+                let a_lane = a.value_field(fx, lane).load_scalar(fx);\n+                let b_lane = b.value_field(fx, lane).load_scalar(fx);\n+                let c_lane = c.value_field(fx, lane).load_scalar(fx);\n+\n+                let mul_lane = fx.bcx.ins().fmul(a_lane, b_lane);\n+                let res_lane = CValue::by_val(fx.bcx.ins().fadd(mul_lane, c_lane), ret_lane_layout);\n+\n+                ret.place_field(fx, lane).write_cvalue(fx, res_lane);\n+            }\n+        };\n+\n         simd_fmin, (c x, c y) {\n             simd_flt_binop!(fx, fmin(x, y) -> ret);\n         };"}]}