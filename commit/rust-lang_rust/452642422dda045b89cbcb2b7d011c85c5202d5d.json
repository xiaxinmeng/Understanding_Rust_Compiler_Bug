{"sha": "452642422dda045b89cbcb2b7d011c85c5202d5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1MjY0MjQyMmRkYTA0NWI4OWNiY2IyYjdkMDExYzg1YzUyMDJkNWQ=", "commit": {"author": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2012-12-31T04:29:17Z"}, "committer": {"name": "Jed Davis", "email": "jld@panix.com", "date": "2013-01-12T07:42:51Z"}, "message": "Factor out base::get_discrim_val from const translation", "tree": {"sha": "60f9d8f7b6964af6748fca8e75ad656c2f5b4def", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f9d8f7b6964af6748fca8e75ad656c2f5b4def"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/452642422dda045b89cbcb2b7d011c85c5202d5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/452642422dda045b89cbcb2b7d011c85c5202d5d", "html_url": "https://github.com/rust-lang/rust/commit/452642422dda045b89cbcb2b7d011c85c5202d5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/452642422dda045b89cbcb2b7d011c85c5202d5d/comments", "author": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jld", "id": 254973, "node_id": "MDQ6VXNlcjI1NDk3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/254973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jld", "html_url": "https://github.com/jld", "followers_url": "https://api.github.com/users/jld/followers", "following_url": "https://api.github.com/users/jld/following{/other_user}", "gists_url": "https://api.github.com/users/jld/gists{/gist_id}", "starred_url": "https://api.github.com/users/jld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jld/subscriptions", "organizations_url": "https://api.github.com/users/jld/orgs", "repos_url": "https://api.github.com/users/jld/repos", "events_url": "https://api.github.com/users/jld/events{/privacy}", "received_events_url": "https://api.github.com/users/jld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f38e9724e6fbc99668b523f30c7e6ca25c20645b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f38e9724e6fbc99668b523f30c7e6ca25c20645b", "html_url": "https://github.com/rust-lang/rust/commit/f38e9724e6fbc99668b523f30c7e6ca25c20645b"}], "stats": {"total": 51, "additions": 27, "deletions": 24}, "files": [{"sha": "a02b8314ff3a1c75404497f547fae742c638f97b", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/452642422dda045b89cbcb2b7d011c85c5202d5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452642422dda045b89cbcb2b7d011c85c5202d5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=452642422dda045b89cbcb2b7d011c85c5202d5d", "patch": "@@ -779,6 +779,30 @@ fn trans_external_path(ccx: @crate_ctxt, did: ast::def_id, t: ty::t)\n     };\n }\n \n+fn get_discrim_val(cx: @crate_ctxt, span: span, enum_did: ast::def_id,\n+                   variant_did: ast::def_id) -> ValueRef {\n+    // Can't use `discrims` from the crate context here because\n+    // those discriminants have an extra level of indirection,\n+    // and there's no LLVM constant load instruction.\n+    let mut lldiscrim_opt = None;\n+    for ty::enum_variants(cx.tcx, enum_did).each |variant_info| {\n+        if variant_info.id == variant_did {\n+            lldiscrim_opt = Some(C_int(cx,\n+                                       variant_info.disr_val));\n+            break;\n+        }\n+    }\n+\n+    match lldiscrim_opt {\n+        None => {\n+            cx.tcx.sess.span_bug(span, ~\"didn't find discriminant?!\");\n+        }\n+        Some(found_lldiscrim) => {\n+            found_lldiscrim\n+        }\n+    }\n+}\n+\n fn lookup_discriminant(ccx: @crate_ctxt, vid: ast::def_id) -> ValueRef {\n     unsafe {\n         let _icx = ccx.insn_ctxt(\"lookup_discriminant\");"}, {"sha": "421d1981c415ebcb05af628bab117cf54c3edbf2", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/452642422dda045b89cbcb2b7d011c85c5202d5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/452642422dda045b89cbcb2b7d011c85c5202d5d/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=452642422dda045b89cbcb2b7d011c85c5202d5d", "patch": "@@ -416,31 +416,10 @@ fn const_expr(cx: @crate_ctxt, e: @ast::expr) -> ValueRef {\n                     // variants.\n                     let ety = ty::expr_ty(cx.tcx, e);\n                     let llty = type_of::type_of(cx, ety);\n+                    let lldiscrim = base::get_discrim_val(cx, e.span,\n+                                                          enum_did,\n+                                                          variant_did);\n \n-                    // Can't use `discrims` from the crate context here\n-                    // because those discriminants have an extra level of\n-                    // indirection, and there's no LLVM constant load\n-                    // instruction.\n-                    let mut lldiscrim_opt = None;\n-                    for ty::enum_variants(cx.tcx, enum_did).each\n-                            |variant_info| {\n-                        if variant_info.id == variant_did {\n-                            lldiscrim_opt = Some(C_int(cx,\n-                                variant_info.disr_val));\n-                            break;\n-                        }\n-                    }\n-\n-                    let lldiscrim;\n-                    match lldiscrim_opt {\n-                        None => {\n-                            cx.tcx.sess.span_bug(e.span,\n-                                ~\"didn't find discriminant?!\");\n-                        }\n-                        Some(found_lldiscrim) => {\n-                            lldiscrim = found_lldiscrim;\n-                        }\n-                    }\n                     let fields = if ty::enum_is_univariant(cx.tcx, enum_did) {\n                         ~[lldiscrim]\n                     } else {"}]}