{"sha": "5a58cf4943da9ea50c0cc534756bee31b4ac1899", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhNThjZjQ5NDNkYTllYTUwYzBjYzUzNDc1NmJlZTMxYjRhYzE4OTk=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2021-02-04T15:11:30Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2021-02-12T20:14:17Z"}, "message": "Use raw ref macros as in #80886", "tree": {"sha": "9d6f33d5204fd59af4fddc12fc488c844d8bb2d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d6f33d5204fd59af4fddc12fc488c844d8bb2d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5a58cf4943da9ea50c0cc534756bee31b4ac1899", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5a58cf4943da9ea50c0cc534756bee31b4ac1899", "html_url": "https://github.com/rust-lang/rust/commit/5a58cf4943da9ea50c0cc534756bee31b4ac1899", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5a58cf4943da9ea50c0cc534756bee31b4ac1899/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48e5866d11c6bdff9e1d55ad53c758e2fcdddcb1", "url": "https://api.github.com/repos/rust-lang/rust/commits/48e5866d11c6bdff9e1d55ad53c758e2fcdddcb1", "html_url": "https://github.com/rust-lang/rust/commit/48e5866d11c6bdff9e1d55ad53c758e2fcdddcb1"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "50d6fb11b11ce8af500da8fc9f75629080f66b66", "filename": "library/alloc/src/collections/btree/node.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5a58cf4943da9ea50c0cc534756bee31b4ac1899/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5a58cf4943da9ea50c0cc534756bee31b4ac1899/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode.rs?ref=5a58cf4943da9ea50c0cc534756bee31b4ac1899", "patch": "@@ -73,8 +73,8 @@ impl<K, V> LeafNode<K, V> {\n         // be both slightly faster and easier to track in Valgrind.\n         unsafe {\n             // parent_idx, keys, and vals are all MaybeUninit\n-            (&raw mut (*this).parent).write(None);\n-            (&raw mut (*this).len).write(0);\n+            ptr::addr_of_mut!((*this).parent).write(None);\n+            ptr::addr_of_mut!((*this).len).write(0);\n         }\n     }\n \n@@ -117,7 +117,7 @@ impl<K, V> InternalNode<K, V> {\n         unsafe {\n             let mut node = Box::<Self>::new_uninit();\n             // We only need to initialize the data; the edges are MaybeUninit.\n-            LeafNode::init(&raw mut (*node.as_mut_ptr()).data);\n+            LeafNode::init(ptr::addr_of_mut!((*node.as_mut_ptr()).data));\n             node.assume_init()\n         }\n     }"}]}