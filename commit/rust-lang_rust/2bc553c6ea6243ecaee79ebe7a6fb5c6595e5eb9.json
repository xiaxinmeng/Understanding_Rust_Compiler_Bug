{"sha": "2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "node_id": "C_kwDOAAsO6NoAKDJiYzU1M2M2ZWE2MjQzZWNhZWU3OWViZTdhNmZiNWM2NTk1ZTVlYjk", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-26T11:04:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-26T11:04:57Z"}, "message": "Rollup merge of #107941 - compiler-errors:str-has-u8-slice-for-auto, r=lcnr\n\nTreat `str` as containing `[u8]` for auto trait purposes\n\nWanted to gauge ``@rust-lang/lang`` and ``@rust-lang/types`` teams' thoughts on treating `str` as \"containing\" a `[u8]` slice for auto-trait purposes.\n\n``@dtolnay`` brought this up in https://github.com/rust-lang/rust/issues/13231#issuecomment-1399386472 as a blocker for future `str` type librarification, and I think it's both a valid concern and very easy to fix. I'm interested in actually doing that `str` type librarification (#107939), but this probably should be considered in the mean time regardless of that PR.\n\nr? types for the impl, though this definitely needs an FCP.", "tree": {"sha": "02680f3a814060640fed46849a35917be79f9022", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02680f3a814060640fed46849a35917be79f9022"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj+zzZCRBK7hj4Ov3rIwAA290IAC///5mN9wrIPuZlAAbyuuO0\nioc1spqU5oMrGM5T6ucOMzjyMJc+UeTDvSsvO/k1LrzoP1C82ZwJCgFGr0Hxw3x8\n/U/vWROmJwF+Nf19wEbPPebDVNS+fe4B78tE70MfH9cXAIBGVzI6GL0li8DG6+0U\nSLdezhMGvJ2oht3NM++E+beEmwDIuios1NjGaM8goHj5j1OJSj6kRLqFD53NU1T5\nOWJVDB+idRH2V/Ardmb2gDFFPej2spGjOozfZitwhUkIV+V4DBpRaKDi1lNJVQNw\nOsJ5xYYLBtAxElwoKhJTCnorG+LlBHgakvCaKOMrHAGJKQts0hDd0iTUlgeQgoI=\n=ox3Z\n-----END PGP SIGNATURE-----\n", "payload": "tree 02680f3a814060640fed46849a35917be79f9022\nparent 70fd012439d75fd6ce561a6518b9b8fd399f455f\nparent 53fb43365258bee55d796ba360835a9d6fcef9a5\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1677409497 +0100\ncommitter GitHub <noreply@github.com> 1677409497 +0100\n\nRollup merge of #107941 - compiler-errors:str-has-u8-slice-for-auto, r=lcnr\n\nTreat `str` as containing `[u8]` for auto trait purposes\n\nWanted to gauge ``@rust-lang/lang`` and ``@rust-lang/types`` teams' thoughts on treating `str` as \"containing\" a `[u8]` slice for auto-trait purposes.\n\n``@dtolnay`` brought this up in https://github.com/rust-lang/rust/issues/13231#issuecomment-1399386472 as a blocker for future `str` type librarification, and I think it's both a valid concern and very easy to fix. I'm interested in actually doing that `str` type librarification (#107939), but this probably should be considered in the mean time regardless of that PR.\n\nr? types for the impl, though this definitely needs an FCP.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "html_url": "https://github.com/rust-lang/rust/commit/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "70fd012439d75fd6ce561a6518b9b8fd399f455f", "url": "https://api.github.com/repos/rust-lang/rust/commits/70fd012439d75fd6ce561a6518b9b8fd399f455f", "html_url": "https://github.com/rust-lang/rust/commit/70fd012439d75fd6ce561a6518b9b8fd399f455f"}, {"sha": "53fb43365258bee55d796ba360835a9d6fcef9a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/53fb43365258bee55d796ba360835a9d6fcef9a5", "html_url": "https://github.com/rust-lang/rust/commit/53fb43365258bee55d796ba360835a9d6fcef9a5"}], "stats": {"total": 38, "additions": 36, "deletions": 2}, "files": [{"sha": "d7d93377cf164e87d9db98d7888ddc82cf448dfb", "filename": "compiler/rustc_trait_selection/src/solve/trait_goals/structural_traits.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Fsolve%2Ftrait_goals%2Fstructural_traits.rs?ref=2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "patch": "@@ -21,12 +21,14 @@ pub(super) fn instantiate_constituent_tys_for_auto_trait<'tcx>(\n         | ty::Float(_)\n         | ty::FnDef(..)\n         | ty::FnPtr(_)\n-        | ty::Str\n         | ty::Error(_)\n         | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n         | ty::Never\n         | ty::Char => Ok(vec![]),\n \n+        // Treat this like `struct str([u8]);`\n+        ty::Str => Ok(vec![tcx.mk_slice(tcx.types.u8)]),\n+\n         ty::Dynamic(..)\n         | ty::Param(..)\n         | ty::Foreign(..)"}, {"sha": "66d74fd05a67f908cd005f8ab8f382a02e0a097a", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "patch": "@@ -3107,6 +3107,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                                 self.tcx.def_span(def_id),\n                                 \"required because it's used within this closure\",\n                             ),\n+                            ty::Str => err.note(\"`str` is considered to contain a `[u8]` slice for auto trait purposes\"),\n                             _ => err.note(&msg),\n                         };\n                     }"}, {"sha": "01c1ad3a4cef3890458cf7cc2cde2d8af2c7f5a1", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "patch": "@@ -2300,12 +2300,14 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             | ty::Float(_)\n             | ty::FnDef(..)\n             | ty::FnPtr(_)\n-            | ty::Str\n             | ty::Error(_)\n             | ty::Infer(ty::IntVar(_) | ty::FloatVar(_))\n             | ty::Never\n             | ty::Char => ty::Binder::dummy(Vec::new()),\n \n+            // Treat this like `struct str([u8]);`\n+            ty::Str => ty::Binder::dummy(vec![self.tcx().mk_slice(self.tcx().types.u8)]),\n+\n             ty::Placeholder(..)\n             | ty::Dynamic(..)\n             | ty::Param(..)"}, {"sha": "6a16fdcf2842f77a65d249f4f3788ab46650bf9c", "filename": "tests/ui/auto-traits/str-contains-slice-conceptually.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.rs?ref=2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "patch": "@@ -0,0 +1,13 @@\n+#![feature(negative_impls)]\n+#![feature(auto_traits)]\n+\n+auto trait AutoTrait {}\n+\n+impl<T> !AutoTrait for [T] {}\n+\n+fn needs_auto_trait<T: AutoTrait + ?Sized>() {}\n+\n+fn main() {\n+  needs_auto_trait::<str>();\n+  //~^ ERROR the trait bound `[u8]: AutoTrait` is not satisfied in `str`\n+}"}, {"sha": "1cf16cebddd15321a7c940c07cbd19e9c18c98a5", "filename": "tests/ui/auto-traits/str-contains-slice-conceptually.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fauto-traits%2Fstr-contains-slice-conceptually.stderr?ref=2bc553c6ea6243ecaee79ebe7a6fb5c6595e5eb9", "patch": "@@ -0,0 +1,16 @@\n+error[E0277]: the trait bound `[u8]: AutoTrait` is not satisfied in `str`\n+  --> $DIR/str-contains-slice-conceptually.rs:11:22\n+   |\n+LL |   needs_auto_trait::<str>();\n+   |                      ^^^ within `str`, the trait `AutoTrait` is not implemented for `[u8]`\n+   |\n+   = note: `str` is considered to contain a `[u8]` slice for auto trait purposes\n+note: required by a bound in `needs_auto_trait`\n+  --> $DIR/str-contains-slice-conceptually.rs:8:24\n+   |\n+LL | fn needs_auto_trait<T: AutoTrait + ?Sized>() {}\n+   |                        ^^^^^^^^^ required by this bound in `needs_auto_trait`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}]}