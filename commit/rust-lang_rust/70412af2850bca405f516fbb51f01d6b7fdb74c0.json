{"sha": "70412af2850bca405f516fbb51f01d6b7fdb74c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjcwNDEyYWYyODUwYmNhNDA1ZjUxNmZiYjUxZjAxZDZiN2ZkYjc0YzA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-07T10:37:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-07-07T10:37:38Z"}, "message": "Auto merge of #43060 - petrochenkov:asless, r=estebank\n\nsyntax: Apply `x as usize < y` recovery to type ascription as well\n\nAlso correct spans, add some comments.\n\nr? @estebank", "tree": {"sha": "72d312ec3c280cf58fd6ff5ec0b0211b6e520557", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/72d312ec3c280cf58fd6ff5ec0b0211b6e520557"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70412af2850bca405f516fbb51f01d6b7fdb74c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70412af2850bca405f516fbb51f01d6b7fdb74c0", "html_url": "https://github.com/rust-lang/rust/commit/70412af2850bca405f516fbb51f01d6b7fdb74c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70412af2850bca405f516fbb51f01d6b7fdb74c0/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "33e353ea51e0b266435143cd88458b59d9051d2a", "url": "https://api.github.com/repos/rust-lang/rust/commits/33e353ea51e0b266435143cd88458b59d9051d2a", "html_url": "https://github.com/rust-lang/rust/commit/33e353ea51e0b266435143cd88458b59d9051d2a"}, {"sha": "4323877e9202aa7a7fc2742d4863300e9abed17b", "url": "https://api.github.com/repos/rust-lang/rust/commits/4323877e9202aa7a7fc2742d4863300e9abed17b", "html_url": "https://github.com/rust-lang/rust/commit/4323877e9202aa7a7fc2742d4863300e9abed17b"}], "stats": {"total": 272, "additions": 194, "deletions": 78}, "files": [{"sha": "f605c4643107d61f8ad71e9fb9604a39c6a8ef6c", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 65, "deletions": 51, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=70412af2850bca405f516fbb51f01d6b7fdb74c0", "patch": "@@ -150,13 +150,14 @@ fn maybe_append(mut lhs: Vec<Attribute>, rhs: Option<Vec<Attribute>>)\n     lhs\n }\n \n-#[derive(Clone, PartialEq)]\n+#[derive(Clone, Copy, PartialEq)]\n enum PrevTokenKind {\n     DocComment,\n     Comma,\n     Plus,\n     Interpolated,\n     Eof,\n+    Ident,\n     Other,\n }\n \n@@ -1040,6 +1041,7 @@ impl<'a> Parser<'a> {\n             token::BinOp(token::Plus) => PrevTokenKind::Plus,\n             token::Interpolated(..) => PrevTokenKind::Interpolated,\n             token::Eof => PrevTokenKind::Eof,\n+            token::Ident(..) => PrevTokenKind::Ident,\n             _ => PrevTokenKind::Other,\n         };\n \n@@ -1079,6 +1081,16 @@ impl<'a> Parser<'a> {\n             None => token::CloseDelim(self.token_cursor.frame.delim),\n         })\n     }\n+    fn look_ahead_span(&self, dist: usize) -> Span {\n+        if dist == 0 {\n+            return self.span\n+        }\n+\n+        match self.token_cursor.frame.tree_cursor.look_ahead(dist - 1) {\n+            Some(TokenTree::Token(span, _)) | Some(TokenTree::Delimited(span, _)) => span,\n+            None => self.look_ahead_span(dist - 1),\n+        }\n+    }\n     pub fn fatal(&self, m: &str) -> DiagnosticBuilder<'a> {\n         self.sess.span_diagnostic.struct_span_fatal(self.span, m)\n     }\n@@ -2777,10 +2789,15 @@ impl<'a> Parser<'a> {\n         self.expected_tokens.push(TokenType::Operator);\n         while let Some(op) = AssocOp::from_token(&self.token) {\n \n-            let lhs_span = if self.prev_token_kind == PrevTokenKind::Interpolated {\n-                self.prev_span\n-            } else {\n-                lhs.span\n+            // Adjust the span for interpolated LHS to point to the `$lhs` token and not to what\n+            // it refers to. Interpolated identifiers are unwrapped early and never show up here\n+            // as `PrevTokenKind::Interpolated` so if LHS is a single identifier we always process\n+            // it as \"interpolated\", it doesn't change the answer for non-interpolated idents.\n+            let lhs_span = match (self.prev_token_kind, &lhs.node) {\n+                (PrevTokenKind::Interpolated, _) => self.prev_span,\n+                (PrevTokenKind::Ident, &ExprKind::Path(None, ref path))\n+                    if path.segments.len() == 1 => self.prev_span,\n+                _ => lhs.span,\n             };\n \n             let cur_op_span = self.span;\n@@ -2798,13 +2815,10 @@ impl<'a> Parser<'a> {\n             }\n             // Special cases:\n             if op == AssocOp::As {\n-                // Save the state of the parser before parsing type normally, in case there is a\n-                // LessThan comparison after this cast.\n-                lhs = self.parse_assoc_op_as(lhs, lhs_span)?;\n+                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Cast)?;\n                 continue\n             } else if op == AssocOp::Colon {\n-                let rhs = self.parse_ty_no_plus()?;\n-                lhs = self.mk_expr(lhs_span.to(rhs.span), ExprKind::Type(lhs, rhs), ThinVec::new());\n+                lhs = self.parse_assoc_op_cast(lhs, lhs_span, ExprKind::Type)?;\n                 continue\n             } else if op == AssocOp::DotDot || op == AssocOp::DotDotDot {\n                 // If we didn\u2019t have to handle `x..`/`x...`, it would be pretty easy to\n@@ -2898,61 +2912,61 @@ impl<'a> Parser<'a> {\n         Ok(lhs)\n     }\n \n-    fn parse_assoc_op_as(&mut self, lhs: P<Expr>, lhs_span: Span) -> PResult<'a, P<Expr>> {\n-        let rp = self.clone();\n+    fn parse_assoc_op_cast(&mut self, lhs: P<Expr>, lhs_span: Span,\n+                           expr_kind: fn(P<Expr>, P<Ty>) -> ExprKind)\n+                           -> PResult<'a, P<Expr>> {\n+        let mk_expr = |this: &mut Self, rhs: P<Ty>| {\n+            this.mk_expr(lhs_span.to(rhs.span), expr_kind(lhs, rhs), ThinVec::new())\n+        };\n+\n+        // Save the state of the parser before parsing type normally, in case there is a\n+        // LessThan comparison after this cast.\n+        let parser_snapshot_before_type = self.clone();\n         match self.parse_ty_no_plus() {\n             Ok(rhs) => {\n-                Ok(self.mk_expr(lhs_span.to(rhs.span),\n-                                ExprKind::Cast(lhs, rhs),\n-                                ThinVec::new()))\n+                Ok(mk_expr(self, rhs))\n             }\n-            Err(mut err) => {\n-                let rp_err = self.clone();\n-                let sp = rp_err.span.clone();\n+            Err(mut type_err) => {\n+                // Rewind to before attempting to parse the type with generics, to recover\n+                // from situations like `x as usize < y` in which we first tried to parse\n+                // `usize < y` as a type with generic arguments.\n+                let parser_snapshot_after_type = self.clone();\n+                mem::replace(self, parser_snapshot_before_type);\n \n-                // Rewind to before attempting to parse the type with generics, to get\n-                // arround #22644.\n-                mem::replace(self, rp);\n-                let lo = self.span;\n                 match self.parse_path_without_generics(PathStyle::Type) {\n                     Ok(path) => {\n-                        // Successfully parsed the type leaving a `<` yet to parse\n-                        err.cancel();\n-                        let codemap = self.sess.codemap();\n-                        let suggestion_span = lhs_span.to(self.prev_span);\n-                        let warn_message = match codemap.span_to_snippet(self.prev_span) {\n-                            Ok(lstring) => format!(\"`{}`\", lstring),\n-                            _ => \"a type\".to_string(),\n-                        };\n+                        // Successfully parsed the type path leaving a `<` yet to parse.\n+                        type_err.cancel();\n+\n+                        // Report non-fatal diagnostics, keep `x as usize` as an expression\n+                        // in AST and continue parsing.\n                         let msg = format!(\"`<` is interpreted as a start of generic \\\n-                                           arguments for {}, not a comparison\",\n-                                          warn_message);\n-                        let mut err = self.sess.span_diagnostic.struct_span_err(sp, &msg);\n-                        err.span_label(sp, \"interpreted as generic argument\");\n+                                           arguments for `{}`, not a comparison\", path);\n+                        let mut err = self.sess.span_diagnostic.struct_span_err(self.span, &msg);\n+                        err.span_label(self.look_ahead_span(1).to(parser_snapshot_after_type.span),\n+                                       \"interpreted as generic arguments\");\n                         err.span_label(self.span, \"not interpreted as comparison\");\n-                        let suggestion = match codemap.span_to_snippet(suggestion_span) {\n-                            Ok(lstring) => format!(\"({})\", lstring),\n-                            _ => format!(\"(<expression> as <type>)\")\n-                        };\n-                        err.span_suggestion(suggestion_span,\n+\n+                        let expr = mk_expr(self, P(Ty {\n+                            span: path.span,\n+                            node: TyKind::Path(None, path),\n+                            id: ast::DUMMY_NODE_ID\n+                        }));\n+\n+                        let expr_str = self.sess.codemap().span_to_snippet(expr.span)\n+                                                .unwrap_or(pprust::expr_to_string(&expr));\n+                        err.span_suggestion(expr.span,\n                                             \"if you want to compare the casted value then write:\",\n-                                            suggestion);\n+                                            format!(\"({})\", expr_str));\n                         err.emit();\n \n-                        let path = TyKind::Path(None, path);\n-                        let span = lo.to(self.prev_span);\n-                        let rhs = P(Ty { node: path, span: span, id: ast::DUMMY_NODE_ID });\n-                        // Letting the parser accept the recovered type to avoid further errors,\n-                        // but the code will still not compile due to the error emitted above.\n-                        Ok(self.mk_expr(lhs_span.to(rhs.span),\n-                                        ExprKind::Cast(lhs, rhs),\n-                                        ThinVec::new()))\n+                        Ok(expr)\n                     }\n                     Err(mut path_err) => {\n-                        // Still couldn't parse, return original error and parser state\n+                        // Couldn't parse as a path, return original error and parser state.\n                         path_err.cancel();\n-                        mem::replace(self, rp_err);\n-                        Err(err)\n+                        mem::replace(self, parser_snapshot_after_type);\n+                        Err(type_err)\n                     }\n                 }\n             }"}, {"sha": "b482d0595f7b608f8f0f2919f1eb484623b1c0fd", "filename": "src/test/ui/issue-22644.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-22644.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-22644.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.rs?ref=70412af2850bca405f516fbb51f01d6b7fdb74c0", "patch": "@@ -10,10 +10,16 @@\n \n fn main() {\n     let a : u32 = 0;\n-    let b : usize = 0;\n+    let long_name : usize = 0;\n+\n+    println!(\"{}\", a as usize > long_name);\n+    println!(\"{}\", a as usize < long_name);\n+    println!(\"{}{}\", a as usize < long_name, long_name);\n+    println!(\"{}\", a as usize < 4);\n+    println!(\"{}\", a: usize > long_name);\n+    println!(\"{}{}\", a: usize < long_name, long_name);\n+    println!(\"{}\", a: usize < 4);\n \n-    println!(\"{}\", a as usize > b);\n-    println!(\"{}\", a as usize < b);\n     println!(\"{}\", a\n                    as\n                    usize\n@@ -28,4 +34,6 @@ fn main() {\n                    usize\n                    <\n                    5);\n+\n+    println!(\"{}\", a: &mut 4);\n }"}, {"sha": "144c5ef1ed6a22e0462956a984df786b611cf698", "filename": "src/test/ui/issue-22644.stderr", "status": "modified", "additions": 80, "deletions": 24, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-22644.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-22644.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-22644.stderr?ref=70412af2850bca405f516fbb51f01d6b7fdb74c0", "patch": "@@ -1,48 +1,104 @@\n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:16:33\n+  --> $DIR/issue-22644.rs:16:31\n    |\n-16 |     println!(\"{}\", a as usize < b);\n-   |                               - ^ interpreted as generic argument\n+16 |     println!(\"{}\", a as usize < long_name);\n+   |                               ^ --------- interpreted as generic arguments\n    |                               |\n    |                               not interpreted as comparison\n    |\n help: if you want to compare the casted value then write:\n    |\n-16 |     println!(\"{}\", (a as usize) < b);\n+16 |     println!(\"{}\", (a as usize) < long_name);\n    |                    ^^^^^^^^^^^^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:21:20\n+  --> $DIR/issue-22644.rs:17:33\n    |\n-20 |                    <\n-   |                    - not interpreted as comparison\n-21 |                    4);\n-   |                    ^ interpreted as generic argument\n+17 |     println!(\"{}{}\", a as usize < long_name, long_name);\n+   |                                 ^ -------------------- interpreted as generic arguments\n+   |                                 |\n+   |                                 not interpreted as comparison\n    |\n help: if you want to compare the casted value then write:\n    |\n-17 |     println!(\"{}\", (a\n-18 |                    as\n-19 |                    usize)\n+17 |     println!(\"{}{}\", (a as usize) < long_name, long_name);\n+   |                      ^^^^^^^^^^^^\n+\n+error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n+  --> $DIR/issue-22644.rs:18:31\n+   |\n+18 |     println!(\"{}\", a as usize < 4);\n+   |                               ^ - interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as comparison\n+   |\n+help: if you want to compare the casted value then write:\n+   |\n+18 |     println!(\"{}\", (a as usize) < 4);\n+   |                    ^^^^^^^^^^^^\n+\n+error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n+  --> $DIR/issue-22644.rs:20:31\n+   |\n+20 |     println!(\"{}{}\", a: usize < long_name, long_name);\n+   |                               ^ -------------------- interpreted as generic arguments\n+   |                               |\n+   |                               not interpreted as comparison\n+   |\n+help: if you want to compare the casted value then write:\n+   |\n+20 |     println!(\"{}{}\", (a: usize) < long_name, long_name);\n+   |                      ^^^^^^^^^^\n+\n+error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n+  --> $DIR/issue-22644.rs:21:29\n    |\n+21 |     println!(\"{}\", a: usize < 4);\n+   |                             ^ - interpreted as generic arguments\n+   |                             |\n+   |                             not interpreted as comparison\n+   |\n+help: if you want to compare the casted value then write:\n+   |\n+21 |     println!(\"{}\", (a: usize) < 4);\n+   |                    ^^^^^^^^^^\n \n error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n-  --> $DIR/issue-22644.rs:30:20\n+  --> $DIR/issue-22644.rs:26:20\n    |\n-29 |                    <\n-   |                    - not interpreted as comparison\n-30 |                    5);\n-   |                    ^ interpreted as generic argument\n+26 |                    <\n+   |                    ^ not interpreted as comparison\n+27 |                    4);\n+   |                    - interpreted as generic arguments\n    |\n help: if you want to compare the casted value then write:\n    |\n-22 |     println!(\"{}\", (a\n-23 | \n-24 | \n-25 |                    as\n-26 | \n-27 | \n+23 |     println!(\"{}\", (a\n+24 |                    as\n+25 |                    usize)\n+   |\n+\n+error: `<` is interpreted as a start of generic arguments for `usize`, not a comparison\n+  --> $DIR/issue-22644.rs:35:20\n+   |\n+35 |                    <\n+   |                    ^ not interpreted as comparison\n+36 |                    5);\n+   |                    - interpreted as generic arguments\n+   |\n+help: if you want to compare the casted value then write:\n+   |\n+28 |     println!(\"{}\", (a\n+29 | \n+30 | \n+31 |                    as\n+32 | \n+33 | \n  ...\n \n-error: aborting due to 3 previous errors\n+error: expected type, found `4`\n+  --> $DIR/issue-22644.rs:38:28\n+   |\n+38 |     println!(\"{}\", a: &mut 4);\n+   |                            ^\n "}, {"sha": "bdfdf44c0e28a977465acd7171650728068e2148", "filename": "src/test/ui/issue-42954.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-42954.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-42954.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.rs?ref=70412af2850bca405f516fbb51f01d6b7fdb74c0", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! is_plainly_printable {\n+    ($i: ident) => {\n+        $i as u32 < 0\n+    };\n+}\n+\n+fn main() {\n+    let c = 'a';\n+    is_plainly_printable!(c);\n+}"}, {"sha": "35995749d3bd0e469dbdbf4852313f46855e067f", "filename": "src/test/ui/issue-42954.stderr", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-42954.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/70412af2850bca405f516fbb51f01d6b7fdb74c0/src%2Ftest%2Fui%2Fissue-42954.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-42954.stderr?ref=70412af2850bca405f516fbb51f01d6b7fdb74c0", "patch": "@@ -0,0 +1,18 @@\n+error: `<` is interpreted as a start of generic arguments for `u32`, not a comparison\n+  --> $DIR/issue-42954.rs:13:19\n+   |\n+13 |         $i as u32 < 0\n+   |                   ^ - interpreted as generic arguments\n+   |                   |\n+   |                   not interpreted as comparison\n+...\n+19 |     is_plainly_printable!(c);\n+   |     ------------------------- in this macro invocation\n+   |\n+help: if you want to compare the casted value then write:\n+   |\n+13 |         ($i as u32) < 0\n+   |         ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+"}]}