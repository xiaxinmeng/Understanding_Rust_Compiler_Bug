{"sha": "81ea6105e2e230705e9ac4b7af57968504fe4e2c", "node_id": "C_kwDOAAsO6NoAKDgxZWE2MTA1ZTJlMjMwNzA1ZTlhYzRiN2FmNTc5Njg1MDRmZTRlMmM", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2022-11-22T06:26:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-22T06:26:05Z"}, "message": "Rollup merge of #95583 - scottmcm:deprecate-ptr-to-from-bits, r=dtolnay\n\nDeprecate the unstable `ptr_to_from_bits` feature\n\nI propose that we deprecate the (unstable!) `to_bits` and `from_bits` methods on raw pointers.  (With the intent to ~~remove them once `addr` has been around long enough to make the transition easy on people -- maybe another 6 weeks~~ remove them fairly soon after, as the strict and expose versions have been around for a while already.)\n\nThe APIs that came from the strict provenance explorations (#95228) are a more holistic version of these, and things like `.expose_addr()` work for the \"that cast looks sketchy\" case even if the full strict provenance stuff never happens.  (As a bonus, `addr` is even shorter than `to_bits`, though it is only applicable if people can use full strict provenance! `addr` is *not* a direct replacement for `to_bits`.)  So I think it's fine to move away from the `{to|from}_bits` methods, and encourage the others instead.\n\nThat also resolves the worry that was brought up (I forget where) that `q.to_bits()` and `(*q).to_bits()` both work if `q` is a pointer-to-floating-point, as they also have a `to_bits` method.\n\nTracking issue #91126\nCode search: https://github.com/search?l=Rust&p=1&q=ptr_to_from_bits&type=Code\n\nFor potential pushback, some users in case they want to chime in\n- `@RSSchermer` https://github.com/RSSchermer/ARWA/blob/365bb68541447453fc44f6fbcc5d394bb94c14e9/arwa/src/html/custom_element.rs#L105\n- `@strax` https://github.com/strax/pbr/blob/99616d1dbf42f93ec8dd668d05b3180649558180/openexr/src/core/alloc.rs#L36\n- `@MiSawa` https://github.com/MiSawa/pomelo/blob/577c6223588d539295a71ff125d8f249e59f4146/crates/kernel/src/timer.rs#L50", "tree": {"sha": "df39d2d23387906d5e75e4adf7948378a495662f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df39d2d23387906d5e75e4adf7948378a495662f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81ea6105e2e230705e9ac4b7af57968504fe4e2c", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjfGt9CRBK7hj4Ov3rIwAApXIIAIA5E73qBidBgi0e7/UjqiRH\nzlYJ4OVuztRMcFnMrvDnC6ZYe4XXoAN8rUodLBZzrwgo+CxigTeNeS2QT8ioN/zq\np8h4YDCgbHgOsEWrPxl5UCHQYE59NX55r7uXxTWCUDcJqdsKcKBQrrb7h3XrUxAa\nc+TigE2uYFxmHUppoB7vJaYd9YjeMPwAS0oq6JybfVbHci2+GFsEawE8ytObG4co\nlrXkTSDdRWP9SA0NG43TunuLeRfdNIDTcXOfeX5p5bCkrT7x1Nl+snjyQ1d9RoNw\nf+3Tg/I+7d/CipoFvA/5dAEJ8nEvCwu0lnVgd0ScZQPiYet6LhdBYpJFppn4BU8=\n=7d+I\n-----END PGP SIGNATURE-----\n", "payload": "tree df39d2d23387906d5e75e4adf7948378a495662f\nparent 1dd515f27393c7f1e8b57f9d21c183cd05005b5c\nparent 6d943af735a86cd7f77305b5723b9481d9bf1f71\nauthor Manish Goregaokar <manishsmail@gmail.com> 1669098365 -0500\ncommitter GitHub <noreply@github.com> 1669098365 -0500\n\nRollup merge of #95583 - scottmcm:deprecate-ptr-to-from-bits, r=dtolnay\n\nDeprecate the unstable `ptr_to_from_bits` feature\n\nI propose that we deprecate the (unstable!) `to_bits` and `from_bits` methods on raw pointers.  (With the intent to ~~remove them once `addr` has been around long enough to make the transition easy on people -- maybe another 6 weeks~~ remove them fairly soon after, as the strict and expose versions have been around for a while already.)\n\nThe APIs that came from the strict provenance explorations (#95228) are a more holistic version of these, and things like `.expose_addr()` work for the \"that cast looks sketchy\" case even if the full strict provenance stuff never happens.  (As a bonus, `addr` is even shorter than `to_bits`, though it is only applicable if people can use full strict provenance! `addr` is *not* a direct replacement for `to_bits`.)  So I think it's fine to move away from the `{to|from}_bits` methods, and encourage the others instead.\n\nThat also resolves the worry that was brought up (I forget where) that `q.to_bits()` and `(*q).to_bits()` both work if `q` is a pointer-to-floating-point, as they also have a `to_bits` method.\n\nTracking issue #91126\nCode search: https://github.com/search?l=Rust&p=1&q=ptr_to_from_bits&type=Code\n\nFor potential pushback, some users in case they want to chime in\n- `@RSSchermer` https://github.com/RSSchermer/ARWA/blob/365bb68541447453fc44f6fbcc5d394bb94c14e9/arwa/src/html/custom_element.rs#L105\n- `@strax` https://github.com/strax/pbr/blob/99616d1dbf42f93ec8dd668d05b3180649558180/openexr/src/core/alloc.rs#L36\n- `@MiSawa` https://github.com/MiSawa/pomelo/blob/577c6223588d539295a71ff125d8f249e59f4146/crates/kernel/src/timer.rs#L50\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81ea6105e2e230705e9ac4b7af57968504fe4e2c", "html_url": "https://github.com/rust-lang/rust/commit/81ea6105e2e230705e9ac4b7af57968504fe4e2c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81ea6105e2e230705e9ac4b7af57968504fe4e2c/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dd515f27393c7f1e8b57f9d21c183cd05005b5c", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dd515f27393c7f1e8b57f9d21c183cd05005b5c", "html_url": "https://github.com/rust-lang/rust/commit/1dd515f27393c7f1e8b57f9d21c183cd05005b5c"}, {"sha": "6d943af735a86cd7f77305b5723b9481d9bf1f71", "url": "https://api.github.com/repos/rust-lang/rust/commits/6d943af735a86cd7f77305b5723b9481d9bf1f71", "html_url": "https://github.com/rust-lang/rust/commit/6d943af735a86cd7f77305b5723b9481d9bf1f71"}], "stats": {"total": 20, "additions": 20, "deletions": 0}, "files": [{"sha": "969029e262e02917efa933cdbd77fc02ddfa3f4e", "filename": "library/core/src/ptr/const_ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ea6105e2e230705e9ac4b7af57968504fe4e2c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ea6105e2e230705e9ac4b7af57968504fe4e2c/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fconst_ptr.rs?ref=81ea6105e2e230705e9ac4b7af57968504fe4e2c", "patch": "@@ -119,6 +119,11 @@ impl<T: ?Sized> *const T {\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[deprecated(\n+        since = \"1.67\",\n+        note = \"replaced by the `exposed_addr` method, or update your code \\\n+            to follow the strict provenance rules using its APIs\"\n+    )]\n     pub fn to_bits(self) -> usize\n     where\n         T: Sized,\n@@ -140,6 +145,11 @@ impl<T: ?Sized> *const T {\n     /// assert_eq!(<*const u8>::from_bits(1), dangling);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[deprecated(\n+        since = \"1.67\",\n+        note = \"replaced by the `ptr::from_exposed_addr` function, or update \\\n+            your code to follow the strict provenance rules using its APIs\"\n+    )]\n     #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n     pub fn from_bits(bits: usize) -> Self\n     where"}, {"sha": "d1b3a63443379b8a69e953ddc1f8821cedce6376", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81ea6105e2e230705e9ac4b7af57968504fe4e2c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81ea6105e2e230705e9ac4b7af57968504fe4e2c/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=81ea6105e2e230705e9ac4b7af57968504fe4e2c", "patch": "@@ -125,6 +125,11 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(p1.to_bits() - p0.to_bits(), 4);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[deprecated(\n+        since = \"1.67\",\n+        note = \"replaced by the `exposed_addr` method, or update your code \\\n+            to follow the strict provenance rules using its APIs\"\n+    )]\n     pub fn to_bits(self) -> usize\n     where\n         T: Sized,\n@@ -146,6 +151,11 @@ impl<T: ?Sized> *mut T {\n     /// assert_eq!(<*mut u8>::from_bits(1), dangling);\n     /// ```\n     #[unstable(feature = \"ptr_to_from_bits\", issue = \"91126\")]\n+    #[deprecated(\n+        since = \"1.67\",\n+        note = \"replaced by the `ptr::from_exposed_addr_mut` function, or \\\n+            update your code to follow the strict provenance rules using its APIs\"\n+    )]\n     #[allow(fuzzy_provenance_casts)] // this is an unstable and semi-deprecated cast function\n     pub fn from_bits(bits: usize) -> Self\n     where"}]}