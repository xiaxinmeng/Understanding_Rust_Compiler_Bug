{"sha": "d101439c77c6842e41e04f1438eb1d93095dea52", "node_id": "C_kwDOAAsO6NoAKGQxMDE0MzljNzdjNjg0MmU0MWUwNGYxNDM4ZWIxZDkzMDk1ZGVhNTI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T17:18:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-07-02T17:18:24Z"}, "message": "Auto merge of #12627 - yue4u:fix/struct-variant-patterns, r=Veykril\n\nfix: complete enum variants as patterns in pattern path\n\nclose #12593", "tree": {"sha": "afe4ffb14867243a092076b523217b5d704f4eb5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afe4ffb14867243a092076b523217b5d704f4eb5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d101439c77c6842e41e04f1438eb1d93095dea52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d101439c77c6842e41e04f1438eb1d93095dea52", "html_url": "https://github.com/rust-lang/rust/commit/d101439c77c6842e41e04f1438eb1d93095dea52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d101439c77c6842e41e04f1438eb1d93095dea52/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "30680df3ccf035afc30952ab6660a262c3eac6af", "url": "https://api.github.com/repos/rust-lang/rust/commits/30680df3ccf035afc30952ab6660a262c3eac6af", "html_url": "https://github.com/rust-lang/rust/commit/30680df3ccf035afc30952ab6660a262c3eac6af"}, {"sha": "ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5", "html_url": "https://github.com/rust-lang/rust/commit/ea7ea7079cd8cf030ccd9b8c5e522165eace58c5"}], "stats": {"total": 216, "additions": 140, "deletions": 76}, "files": [{"sha": "1bcbb3aaa65bb4bdb3adf668c1a53c6a79cd640a", "filename": "crates/ide-completion/src/completions.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -357,6 +357,12 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n+        if let PathCompletionCtx { kind: PathKind::Pat { pat_ctx }, .. } = path_ctx {\n+            cov_mark::hit!(enum_variant_pattern_path);\n+            self.add_variant_pat(ctx, pat_ctx, variant, local_name);\n+            return;\n+        }\n+\n         if let Some(builder) =\n             render_variant_lit(RenderContext::new(ctx), path_ctx, local_name, variant, None)\n         {"}, {"sha": "df0556ba451c7dd957cf2fd534ea0d3058ee6a8d", "filename": "crates/ide-completion/src/completions/expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fexpr.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -115,6 +115,7 @@ pub(crate) fn complete_expr_path(\n                     };\n \n                     if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n+                        cov_mark::hit!(completes_variant_through_self);\n                         acc.add_enum_variants(ctx, path_ctx, e);\n                     }\n "}, {"sha": "65b6eee188864fbe21370baa50a8c6eb7eb78794", "filename": "crates/ide-completion/src/completions/pattern.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -151,7 +151,6 @@ pub(crate) fn complete_pattern_path(\n                     };\n \n                     if let Some(hir::Adt::Enum(e)) = ty.as_adt() {\n-                        cov_mark::hit!(enum_plain_qualified_use_tree);\n                         acc.add_enum_variants(ctx, path_ctx, e);\n                     }\n "}, {"sha": "e5689f332ddf98050ea681d56628aa7e188c38d9", "filename": "crates/ide-completion/src/completions/use_.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Fcompletions%2Fuse_.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -79,9 +79,7 @@ pub(crate) fn complete_use_path(\n                 }\n                 hir::PathResolution::Def(hir::ModuleDef::Adt(hir::Adt::Enum(e))) => {\n                     cov_mark::hit!(enum_plain_qualified_use_tree);\n-                    e.variants(ctx.db)\n-                        .into_iter()\n-                        .for_each(|variant| acc.add_enum_variant(ctx, path_ctx, variant, None));\n+                    acc.add_enum_variants(ctx, path_ctx, *e);\n                 }\n                 _ => {}\n             }"}, {"sha": "d6779961c07ed4c27e06e45f8c56e8cd16c2836b", "filename": "crates/ide-completion/src/render/pattern.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Frender%2Fpattern.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -7,7 +7,10 @@ use syntax::SmolStr;\n \n use crate::{\n     context::{ParamKind, PatternContext},\n-    render::{variant::visible_fields, RenderContext},\n+    render::{\n+        variant::{format_literal_label, visible_fields},\n+        RenderContext,\n+    },\n     CompletionItem, CompletionItemKind,\n };\n \n@@ -29,16 +32,11 @@ pub(crate) fn render_struct_pat(\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db()));\n     let (name, escaped_name) = (name.to_smol_str(), name.escaped().to_smol_str());\n-    let pat = render_pat(\n-        &ctx,\n-        pattern_ctx,\n-        &escaped_name,\n-        strukt.kind(ctx.db()),\n-        &visible_fields,\n-        fields_omitted,\n-    )?;\n+    let kind = strukt.kind(ctx.db());\n+    let label = format_literal_label(name.as_str(), kind);\n+    let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n-    Some(build_completion(ctx, name, pat, strukt))\n+    Some(build_completion(ctx, label, pat, strukt))\n }\n \n pub(crate) fn render_variant_pat(\n@@ -60,25 +58,20 @@ pub(crate) fn render_variant_pat(\n             (name.to_smol_str(), name.escaped().to_smol_str())\n         }\n     };\n-    let pat = render_pat(\n-        &ctx,\n-        pattern_ctx,\n-        &escaped_name,\n-        variant.kind(ctx.db()),\n-        &visible_fields,\n-        fields_omitted,\n-    )?;\n+    let kind = variant.kind(ctx.db());\n+    let label = format_literal_label(name.as_str(), kind);\n+    let pat = render_pat(&ctx, pattern_ctx, &escaped_name, kind, &visible_fields, fields_omitted)?;\n \n-    Some(build_completion(ctx, name, pat, variant))\n+    Some(build_completion(ctx, label, pat, variant))\n }\n \n fn build_completion(\n     ctx: RenderContext<'_>,\n-    name: SmolStr,\n+    label: SmolStr,\n     pat: String,\n     def: impl HasAttrs + Copy,\n ) -> CompletionItem {\n-    let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), name);\n+    let mut item = CompletionItem::new(CompletionItemKind::Binding, ctx.source_range(), label);\n     item.set_documentation(ctx.docs(def))\n         .set_deprecated(ctx.is_deprecated(def))\n         .detail(&pat)\n@@ -103,7 +96,7 @@ fn render_pat(\n         StructKind::Record => {\n             render_record_as_pat(ctx.db(), ctx.snippet_cap(), fields, name, fields_omitted)\n         }\n-        StructKind::Unit => return None,\n+        StructKind::Unit => name.to_string(),\n     };\n \n     let needs_ascription = matches!(\n@@ -138,7 +131,7 @@ fn render_record_as_pat(\n             format!(\n                 \"{name} {{ {}{} }}\",\n                 fields.enumerate().format_with(\", \", |(idx, field), f| {\n-                    f(&format_args!(\"{}${}\", field.name(db), idx + 1))\n+                    f(&format_args!(\"{}${}\", field.name(db).escaped(), idx + 1))\n                 }),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n@@ -147,7 +140,7 @@ fn render_record_as_pat(\n         None => {\n             format!(\n                 \"{name} {{ {}{} }}\",\n-                fields.map(|field| field.name(db)).format(\", \"),\n+                fields.map(|field| field.name(db).escaped().to_smol_str()).format(\", \"),\n                 if fields_omitted { \", ..\" } else { \"\" },\n                 name = name\n             )"}, {"sha": "cce74604c2d0e6ea5d3ff0340c1f2d55233f62a2", "filename": "crates/ide-completion/src/tests/fn_param.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Ffn_param.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -139,8 +139,8 @@ fn foo2($0) {}\n \"#,\n         expect![[r#\"\n             st Bar\n-            bn Bar              Bar { bar$1 }: Bar$0\n             bn Bar { bar }: Bar\n+            bn Bar {\u2026}          Bar { bar$1 }: Bar$0\n             kw mut\n             kw ref\n         \"#]],"}, {"sha": "63ccf9003b4fdac9b80586a1881167fc097f52cc", "filename": "crates/ide-completion/src/tests/pattern.rs", "status": "modified", "additions": 109, "deletions": 28, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fpattern.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -1,7 +1,7 @@\n //! Completion tests for pattern position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::{completion_list, BASE_ITEMS_FIXTURE};\n+use crate::tests::{check_edit, completion_list, BASE_ITEMS_FIXTURE};\n \n fn check_empty(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n@@ -127,15 +127,15 @@ fn foo() {\n         expect![[r#\"\n             ct CONST\n             en Enum\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n             st Record\n             st Tuple\n             st Unit\n             ev TupleV\n-            bn Record    Record { field$1 }$0\n-            bn Tuple     Tuple($1)$0\n-            bn TupleV    TupleV($1)$0\n+            bn Record {\u2026} Record { field$1 }$0\n+            bn Tuple(\u2026)   Tuple($1)$0\n+            bn TupleV(\u2026)  TupleV($1)$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -162,8 +162,9 @@ fn foo() {\n             st Tuple\n             st Unit\n             ev Variant\n-            bn Record            Record { field$1 }$0\n-            bn Tuple             Tuple($1)$0\n+            bn Record {\u2026}        Record { field$1 }$0\n+            bn Tuple(\u2026)          Tuple($1)$0\n+            bn Variant           Variant$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -178,13 +179,13 @@ fn foo(a$0) {\n }\n \"#,\n         expect![[r#\"\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n             st Record\n             st Tuple\n             st Unit\n-            bn Record    Record { field$1 }: Record$0\n-            bn Tuple     Tuple($1): Tuple$0\n+            bn Record {\u2026} Record { field$1 }: Record$0\n+            bn Tuple(\u2026)   Tuple($1): Tuple$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -195,13 +196,13 @@ fn foo(a$0: Tuple) {\n }\n \"#,\n         expect![[r#\"\n-            ma makro!(\u2026) macro_rules! makro\n+            ma makro!(\u2026)  macro_rules! makro\n             md module\n             st Record\n             st Tuple\n             st Unit\n-            bn Record    Record { field$1 }$0\n-            bn Tuple     Tuple($1)$0\n+            bn Record {\u2026} Record { field$1 }$0\n+            bn Tuple(\u2026)   Tuple($1)$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -243,6 +244,7 @@ fn foo() {\n         expect![[r#\"\n             en E\n             ma m!(\u2026) macro_rules! m\n+            bn E::X  E::X$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -269,8 +271,8 @@ fn outer() {\n             st Invisible\n             st Record\n             st Tuple\n-            bn Record    Record { field$1, .. }$0\n-            bn Tuple     Tuple($1, ..)$0\n+            bn Record {\u2026} Record { field$1, .. }$0\n+            bn Tuple(\u2026)   Tuple($1, ..)$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -293,8 +295,8 @@ impl Foo {\n         expect![[r#\"\n             sp Self\n             st Foo\n-            bn Foo  Foo($1)$0\n-            bn Self Self($1)$0\n+            bn Foo(\u2026)  Foo($1)$0\n+            bn Self(\u2026) Self($1)$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -316,9 +318,9 @@ fn func() {\n \"#,\n         expect![[r#\"\n             ct ASSOC_CONST const ASSOC_CONST: ()\n-            ev RecordV {\u2026} RecordV { field: u32 }\n-            ev TupleV(\u2026)   TupleV(u32)\n-            ev UnitV       UnitV\n+            bn RecordV {\u2026} RecordV { field$1 }$0\n+            bn TupleV(\u2026)   TupleV($1)$0\n+            bn UnitV       UnitV$0\n         \"#]],\n     );\n }\n@@ -334,8 +336,8 @@ fn outer(Foo { bar: $0 }: Foo) {}\n         expect![[r#\"\n             st Bar\n             st Foo\n-            bn Bar Bar($1)$0\n-            bn Foo Foo { bar$1 }$0\n+            bn Bar(\u2026)  Bar($1)$0\n+            bn Foo {\u2026} Foo { bar$1 }$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -368,8 +370,8 @@ fn foo($0) {}\n         expect![[r#\"\n             st Bar\n             st Foo\n-            bn Bar Bar($1): Bar$0\n-            bn Foo Foo { bar$1 }: Foo$0\n+            bn Bar(\u2026)  Bar($1): Bar$0\n+            bn Foo {\u2026} Foo { bar$1 }: Foo$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -389,8 +391,8 @@ fn foo() {\n         expect![[r#\"\n             st Bar\n             st Foo\n-            bn Bar Bar($1)$0\n-            bn Foo Foo { bar$1 }$0\n+            bn Bar(\u2026)  Bar($1)$0\n+            bn Foo {\u2026} Foo { bar$1 }$0\n             kw mut\n             kw ref\n         \"#]],\n@@ -443,7 +445,7 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            ev TupleVariant TupleVariant\n+            bn TupleVariant(\u2026) TupleVariant($1)$0\n         \"#]],\n     );\n     check_empty(\n@@ -458,7 +460,86 @@ fn foo() {\n }\n \"#,\n         expect![[r#\"\n-            ev RecordVariant RecordVariant\n+            bn RecordVariant {\u2026} RecordVariant { field$1 }$0\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn completes_enum_variant_pat() {\n+    cov_mark::check!(enum_variant_pattern_path);\n+    check_edit(\n+        \"RecordVariant {\u2026}\",\n+        r#\"\n+enum Enum {\n+    RecordVariant { field: u32 }\n+}\n+fn foo() {\n+    match (Enum::RecordVariant { field: 0 }) {\n+        Enum::RecordV$0\n+    }\n+}\n+\"#,\n+        r#\"\n+enum Enum {\n+    RecordVariant { field: u32 }\n+}\n+fn foo() {\n+    match (Enum::RecordVariant { field: 0 }) {\n+        Enum::RecordVariant { field$1 }$0\n+    }\n+}\n+\"#,\n+    );\n+}\n+\n+#[test]\n+fn completes_enum_variant_pat_escape() {\n+    cov_mark::check!(enum_variant_pattern_path);\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    A,\n+    B { r#type: i32 },\n+    r#type,\n+    r#struct { r#type: i32 },\n+}\n+fn foo() {\n+    match (Enum::A) {\n+        $0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            en Enum\n+            bn Enum::A          Enum::A$0\n+            bn Enum::B {\u2026}      Enum::B { r#type$1 }$0\n+            bn Enum::struct {\u2026} Enum::r#struct { r#type$1 }$0\n+            bn Enum::type       Enum::r#type$0\n+            kw mut\n+            kw ref\n+        \"#]],\n+    );\n+\n+    check_empty(\n+        r#\"\n+enum Enum {\n+    A,\n+    B { r#type: i32 },\n+    r#type,\n+    r#struct { r#type: i32 },\n+}\n+fn foo() {\n+    match (Enum::A) {\n+        Enum::$0\n+    }\n+}\n+\"#,\n+        expect![[r#\"\n+            bn A          A$0\n+            bn B {\u2026}      B { r#type$1 }$0\n+            bn struct {\u2026} r#struct { r#type$1 }$0\n+            bn type       r#type$0\n         \"#]],\n     );\n }"}, {"sha": "fc59f781dd3187a3653992622904d62055058efa", "filename": "crates/ide-completion/src/tests/special.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fspecial.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -519,6 +519,7 @@ fn foo() {\n \n #[test]\n fn completes_variant_through_self() {\n+    cov_mark::check!(completes_variant_through_self);\n     check(\n         r#\"\n enum Foo {"}, {"sha": "109007c7a074fbd90e8632365c0cb1d23656e981", "filename": "crates/ide-completion/src/tests/use_tree.rs", "status": "modified", "additions": 4, "deletions": 19, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d101439c77c6842e41e04f1438eb1d93095dea52/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=d101439c77c6842e41e04f1438eb1d93095dea52", "patch": "@@ -165,30 +165,15 @@ fn enum_plain_qualified_use_tree() {\n         r#\"\n use Foo::$0\n \n-enum Foo { Variant }\n-impl Foo {\n-    const CONST: () = ()\n-    fn func() {}\n-}\n-\"#,\n-        expect![[r#\"\n-            ev Variant Variant\n-        \"#]],\n-    );\n-}\n-\n-#[test]\n-fn enum_no_parens_in_qualified_use_tree() {\n-    cov_mark::check!(enum_plain_qualified_use_tree);\n-    check(\n-        r#\"\n-use Foo::$0\n-\n enum Foo {\n     UnitVariant,\n     TupleVariant(),\n     RecordVariant {},\n }\n+impl Foo {\n+    const CONST: () = ()\n+    fn func() {}\n+}\n \"#,\n         expect![[r#\"\n             ev RecordVariant RecordVariant"}]}