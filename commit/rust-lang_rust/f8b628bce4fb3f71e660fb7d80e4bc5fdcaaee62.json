{"sha": "f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "node_id": "C_kwDOAAsO6NoAKGY4YjYyOGJjZTRmYjNmNzFlNjYwZmI3ZDgwZTRiYzVmZGNhYWVlNjI", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-14T12:25:43Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-10-17T08:54:24Z"}, "message": "session: use derive more\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "df01a993073666a914f9f538cba16cfc9dd9aaca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df01a993073666a914f9f538cba16cfc9dd9aaca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "html_url": "https://github.com/rust-lang/rust/commit/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "21d3bbd8b611725456e5ebefb6704b263bee819e", "url": "https://api.github.com/repos/rust-lang/rust/commits/21d3bbd8b611725456e5ebefb6704b263bee819e", "html_url": "https://github.com/rust-lang/rust/commit/21d3bbd8b611725456e5ebefb6704b263bee819e"}], "stats": {"total": 78, "additions": 46, "deletions": 32}, "files": [{"sha": "e2277923072f9b3eca8c5e1dc6c0a94a0fb5ac23", "filename": "compiler/rustc_error_messages/locales/en-US/session.ftl", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fsession.ftl?ref=f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "patch": "@@ -54,3 +54,7 @@ session_crate_name_empty = crate name must not be empty\n session_invalid_character_in_create_name = invalid character `{$character}` in crate name: `{$crate_name}`\n \n session_expr_parentheses_needed = parentheses are required to parse this as an expression\n+\n+session_skipping_const_checks = skipping const checks\n+session_unleashed_feature_help_named = skipping check for `{$gate}` feature\n+session_unleashed_feature_help_unnamed = skipping check that does not even have a feature gate"}, {"sha": "500ab4a584cab4de9cc247e3a9a849916b68feff", "filename": "compiler/rustc_session/src/errors.rs", "status": "modified", "additions": 26, "deletions": 15, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_session%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Ferrors.rs?ref=f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "patch": "@@ -1,9 +1,7 @@\n use std::num::NonZeroU32;\n \n use crate::cgu_reuse_tracker::CguReuse;\n-use rustc_errors::{\n-    fluent, DiagnosticBuilder, ErrorGuaranteed, Handler, IntoDiagnostic, MultiSpan,\n-};\n+use rustc_errors::MultiSpan;\n use rustc_macros::Diagnostic;\n use rustc_span::{Span, Symbol};\n use rustc_target::spec::{SplitDebuginfo, StackProtector, TargetTriple};\n@@ -148,24 +146,15 @@ pub struct CrateNameEmpty {\n     pub span: Option<Span>,\n }\n \n+#[derive(Diagnostic)]\n+#[diag(session::invalid_character_in_create_name)]\n pub struct InvalidCharacterInCrateName<'a> {\n+    #[primary_span]\n     pub span: Option<Span>,\n     pub character: char,\n     pub crate_name: &'a str,\n }\n \n-impl IntoDiagnostic<'_> for InvalidCharacterInCrateName<'_> {\n-    fn into_diagnostic(self, sess: &Handler) -> DiagnosticBuilder<'_, ErrorGuaranteed> {\n-        let mut diag = sess.struct_err(fluent::session::invalid_character_in_create_name);\n-        if let Some(sp) = self.span {\n-            diag.set_span(sp);\n-        }\n-        diag.set_arg(\"character\", self.character);\n-        diag.set_arg(\"crate_name\", self.crate_name);\n-        diag\n-    }\n-}\n-\n #[derive(Subdiagnostic)]\n #[multipart_suggestion(session::expr_parentheses_needed, applicability = \"machine-applicable\")]\n pub struct ExprParenthesesNeeded {\n@@ -180,3 +169,25 @@ impl ExprParenthesesNeeded {\n         ExprParenthesesNeeded { left: s.shrink_to_lo(), right: s.shrink_to_hi() }\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(session::skipping_const_checks)]\n+pub struct SkippingConstChecks {\n+    #[subdiagnostic(eager)]\n+    pub unleashed_features: Vec<UnleashedFeatureHelp>,\n+}\n+\n+#[derive(Subdiagnostic)]\n+pub enum UnleashedFeatureHelp {\n+    #[help(session::unleashed_feature_help_named)]\n+    Named {\n+        #[primary_span]\n+        span: Span,\n+        gate: Symbol,\n+    },\n+    #[help(session::unleashed_feature_help_unnamed)]\n+    Unnamed {\n+        #[primary_span]\n+        span: Span,\n+    },\n+}"}, {"sha": "73cc79692d7b369911a850697f8109d5bac7e18c", "filename": "compiler/rustc_session/src/session.rs", "status": "modified", "additions": 16, "deletions": 17, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62/compiler%2Frustc_session%2Fsrc%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fsession.rs?ref=f8b628bce4fb3f71e660fb7d80e4bc5fdcaaee62", "patch": "@@ -5,9 +5,10 @@ use crate::config::{self, CrateType, InstrumentCoverage, OptLevel, OutputType, S\n use crate::errors::{\n     CannotEnableCrtStaticLinux, CannotMixAndMatchSanitizers, LinkerPluginToWindowsNotSupported,\n     NotCircumventFeature, ProfileSampleUseFileDoesNotExist, ProfileUseFileDoesNotExist,\n-    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported,\n+    SanitizerCfiEnabled, SanitizerNotSupported, SanitizersNotSupported, SkippingConstChecks,\n     SplitDebugInfoUnstablePlatform, StackProtectorNotSupportedForTarget,\n-    TargetRequiresUnwindTables, UnstableVirtualFunctionElimination, UnsupportedDwarfVersion,\n+    TargetRequiresUnwindTables, UnleashedFeatureHelp, UnstableVirtualFunctionElimination,\n+    UnsupportedDwarfVersion,\n };\n use crate::parse::{add_feature_diagnostics, ParseSess};\n use crate::search_paths::{PathKind, SearchPath};\n@@ -233,21 +234,19 @@ impl Session {\n         if !unleashed_features.is_empty() {\n             let mut must_err = false;\n             // Create a diagnostic pointing at where things got unleashed.\n-            // FIXME(#100717): needs eager translation/lists\n-            #[allow(rustc::untranslatable_diagnostic)]\n-            #[allow(rustc::diagnostic_outside_of_impl)]\n-            let mut diag = self.struct_warn(\"skipping const checks\");\n-            for &(span, feature_gate) in unleashed_features.iter() {\n-                // FIXME: `span_label` doesn't do anything, so we use \"help\" as a hack.\n-                if let Some(gate) = feature_gate {\n-                    diag.span_help(span, &format!(\"skipping check for `{gate}` feature\"));\n-                    // The unleash flag must *not* be used to just \"hack around\" feature gates.\n-                    must_err = true;\n-                } else {\n-                    diag.span_help(span, \"skipping check that does not even have a feature gate\");\n-                }\n-            }\n-            diag.emit();\n+            self.emit_warning(SkippingConstChecks {\n+                unleashed_features: unleashed_features\n+                    .iter()\n+                    .map(|(span, gate)| {\n+                        gate.map(|gate| {\n+                            must_err = true;\n+                            UnleashedFeatureHelp::Named { span: *span, gate }\n+                        })\n+                        .unwrap_or(UnleashedFeatureHelp::Unnamed { span: *span })\n+                    })\n+                    .collect(),\n+            });\n+\n             // If we should err, make sure we did.\n             if must_err && self.has_errors().is_none() {\n                 // We have skipped a feature gate, and not run into other errors... reject."}]}