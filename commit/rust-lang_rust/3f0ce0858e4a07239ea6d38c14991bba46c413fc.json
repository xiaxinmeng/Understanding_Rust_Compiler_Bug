{"sha": "3f0ce0858e4a07239ea6d38c14991bba46c413fc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMGNlMDg1OGU0YTA3MjM5ZWE2ZDM4YzE0OTkxYmJhNDZjNDEzZmM=", "commit": {"author": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-02T05:16:01Z"}, "committer": {"name": "gaurikholkar", "email": "f2013002@goa.bits-pilani.ac.in", "date": "2018-03-10T15:22:22Z"}, "message": "minor refactorings to fix trait import issue", "tree": {"sha": "7d5a388c688999d62b0b86d94c4852ac1c206ae5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d5a388c688999d62b0b86d94c4852ac1c206ae5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f0ce0858e4a07239ea6d38c14991bba46c413fc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f0ce0858e4a07239ea6d38c14991bba46c413fc", "html_url": "https://github.com/rust-lang/rust/commit/3f0ce0858e4a07239ea6d38c14991bba46c413fc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f0ce0858e4a07239ea6d38c14991bba46c413fc/comments", "author": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "committer": {"login": "gaurikholkar", "id": 117768111, "node_id": "U_kgDOBwT_rw", "avatar_url": "https://avatars.githubusercontent.com/u/117768111?v=4", "gravatar_id": "", "url": "https://api.github.com/users/gaurikholkar", "html_url": "https://github.com/gaurikholkar", "followers_url": "https://api.github.com/users/gaurikholkar/followers", "following_url": "https://api.github.com/users/gaurikholkar/following{/other_user}", "gists_url": "https://api.github.com/users/gaurikholkar/gists{/gist_id}", "starred_url": "https://api.github.com/users/gaurikholkar/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/gaurikholkar/subscriptions", "organizations_url": "https://api.github.com/users/gaurikholkar/orgs", "repos_url": "https://api.github.com/users/gaurikholkar/repos", "events_url": "https://api.github.com/users/gaurikholkar/events{/privacy}", "received_events_url": "https://api.github.com/users/gaurikholkar/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f60788b9b2267eb9b0de742939207730f0b9b3e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/f60788b9b2267eb9b0de742939207730f0b9b3e1", "html_url": "https://github.com/rust-lang/rust/commit/f60788b9b2267eb9b0de742939207730f0b9b3e1"}], "stats": {"total": 53, "additions": 11, "deletions": 42}, "files": [{"sha": "90e84a4780957c88e1e1e55a6be506146a91fa35", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 10, "deletions": 42, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/3f0ce0858e4a07239ea6d38c14991bba46c413fc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0ce0858e4a07239ea6d38c14991bba46c413fc/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=3f0ce0858e4a07239ea6d38c14991bba46c413fc", "patch": "@@ -17,7 +17,7 @@ use rustc::hir::map::definitions::DefPathData;\n use rustc::infer::InferCtxt;\n use rustc::ty::{self, ParamEnv, TyCtxt};\n use rustc::ty::maps::Providers;\n-use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Local, Location, Place, Visitor};\n+use rustc::mir::{AssertMessage, BasicBlock, BorrowKind, Local, Location, Place};\n use rustc::mir::{Mir, Mutability, Operand, Projection, ProjectionElem, Rvalue};\n use rustc::mir::{Field, Statement, StatementKind, Terminator, TerminatorKind};\n use rustc::mir::ClosureRegionRequirements;\n@@ -43,6 +43,7 @@ use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::{IllegalMoveOriginKind, MoveError};\n use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MovePathIndex};\n use util::borrowck_errors::{BorrowckErrors, Origin};\n+use util::collect_writes::FindAssignments;\n \n use std::iter;\n \n@@ -56,37 +57,6 @@ mod prefixes;\n \n use std::borrow::Cow;\n \n-struct FindLocalAssignmentVisitor {\n-    needle: Local,\n-    locations: Vec<Location>,\n-    placectxt: PlaceContext,\n-    location: Location,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for FindLocalAssignmentVisitor {\n-    fn visit_local(&mut self,\n-                   local: &Local,\n-                   place_context: PlaceContext<'tcx>,\n-                   location: Location) {\n-        if self.needle != *local {\n-            return;\n-        }   \n-\n-        match place_context {\n-            PlaceContext::Store | PlaceContext::Call => {\n-                self.locations.push(location);\n-            }\n-            PlaceContext::AsmOutput | PlaceContext::Drop| PlaceContext::Inspect |\n-            PlaceContext::Borrow| PlaceContext::Projection| PlaceContext::Copy| \n-            PlaceContext::Move| PlaceContext::StorageLive| PlaceContext::StorageDead|\n-            PlaceContext::Validate => {\n-            }\n-        }\n-\n-        Visitor::visit_local(local,place_context,location)\n-    }\n-}\n-\n pub(crate) mod nll;\n \n pub fn provide(providers: &mut Providers) {\n@@ -1587,7 +1557,6 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     None => \"immutable item\".to_owned(),\n                 };\n \n-            // call find_assignments() here\n                 let mut err = self.tcx\n                     .cannot_borrow_path_as_mutable(span, &item_msg, Origin::Mir);\n                 err.span_label(span, \"cannot borrow as mutable\");\n@@ -1604,6 +1573,14 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                 if let Err(place_err) = self.is_mutable(place, is_local_mutation_allowed) {\n                     error_reported = true;\n \n+                    match *place{\n+                        Place::Local(local) => {let locations = self.mir.find_assignments(local);\n+                        \n+                        for n in &locations{\n+                            debug!(\"locations ={:?}\", n);}\n+                        }\n+                        _ => {}}\n+\n                     let item_msg = if error_reported{\n                         if let Some(name) = self.describe_place(place_err) {\n                             format!(\"`&`-reference {}\", name)\n@@ -2269,12 +2246,3 @@ impl ContextKind {\n     }\n }\n \n-impl Mir {\n-    fn find_assignments(&self, local: Local, place_context:PlaceContext, location:Location) -> Vec<Location> \n-    { \n-        let mut visitor = FindLocalAssignmentVisitor { needle: local, locations: vec![], location:location, place_context: };\n-        visitor.visit_mir(self);\n-        visitor.locations\n-    }\n-}\n-"}, {"sha": "19cd376688627de9d3fe4e79272f57b3656700e0", "filename": "src/librustc_mir/util/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3f0ce0858e4a07239ea6d38c14991bba46c413fc/src%2Flibrustc_mir%2Futil%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f0ce0858e4a07239ea6d38c14991bba46c413fc/src%2Flibrustc_mir%2Futil%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fmod.rs?ref=3f0ce0858e4a07239ea6d38c14991bba46c413fc", "patch": "@@ -17,6 +17,7 @@ mod alignment;\n mod graphviz;\n pub(crate) mod pretty;\n pub mod liveness;\n+pub mod collect_writes;\n \n pub use self::alignment::is_disaligned;\n pub use self::pretty::{dump_enabled, dump_mir, write_mir_pretty, PassWhere};"}]}