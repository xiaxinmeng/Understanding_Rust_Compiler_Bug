{"sha": "341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0MWViNGFlODdkZThjZWJjM2JmYzU2NDk3MGE0ZjE0MzBhZjRkYzE=", "commit": {"author": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-04T10:06:46Z"}, "committer": {"name": "Hirokazu Hata", "email": "h.hata.ai.t@gmail.com", "date": "2019-01-05T02:28:16Z"}, "message": "Use both type_of and doc_text_for", "tree": {"sha": "689b1c08db1756e01211cd9ce671876ab04093f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/689b1c08db1756e01211cd9ce671876ab04093f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "html_url": "https://github.com/rust-lang/rust/commit/341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/341eb4ae87de8cebc3bfc564970a4f1430af4dc1/comments", "author": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "committer": {"login": "h-michael", "id": 4556097, "node_id": "MDQ6VXNlcjQ1NTYwOTc=", "avatar_url": "https://avatars.githubusercontent.com/u/4556097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/h-michael", "html_url": "https://github.com/h-michael", "followers_url": "https://api.github.com/users/h-michael/followers", "following_url": "https://api.github.com/users/h-michael/following{/other_user}", "gists_url": "https://api.github.com/users/h-michael/gists{/gist_id}", "starred_url": "https://api.github.com/users/h-michael/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/h-michael/subscriptions", "organizations_url": "https://api.github.com/users/h-michael/orgs", "repos_url": "https://api.github.com/users/h-michael/repos", "events_url": "https://api.github.com/users/h-michael/events{/privacy}", "received_events_url": "https://api.github.com/users/h-michael/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6ee7788513960ddf11254aca50da012b58df4583", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ee7788513960ddf11254aca50da012b58df4583", "html_url": "https://github.com/rust-lang/rust/commit/6ee7788513960ddf11254aca50da012b58df4583"}], "stats": {"total": 39, "additions": 25, "deletions": 14}, "files": [{"sha": "06ae9a64aa49c0a9a11a968ddcd0605e421ee563", "filename": "crates/ra_lsp_server/src/main_loop/handlers.rs", "status": "modified", "additions": 25, "deletions": 14, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/341eb4ae87de8cebc3bfc564970a4f1430af4dc1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/341eb4ae87de8cebc3bfc564970a4f1430af4dc1/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_lsp_server%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=341eb4ae87de8cebc3bfc564970a4f1430af4dc1", "patch": "@@ -9,7 +9,7 @@ use languageserver_types::{\n     Range, WorkspaceEdit, ParameterInformation, ParameterLabel, SignatureInformation, Hover,\n     HoverContents, DocumentFormattingParams, DocumentHighlight,\n };\n-use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity};\n+use ra_analysis::{FileId, FoldKind, Query, RunnableKind, FileRange, FilePosition, Severity, NavigationTarget};\n use ra_syntax::{TextUnit, text_utils::intersect};\n use ra_text_edit::text_utils::contains_offset_nonstrict;\n use rustc_hash::FxHashMap;\n@@ -514,29 +514,26 @@ pub fn handle_hover(\n         Some(it) => it,\n     };\n     let mut result = Vec::new();\n+    let file_id = params.text_document.try_conv_with(&world)?;\n+    let file_range = FileRange {\n+        file_id,\n+        range: rr.reference_range,\n+    };\n+    if let Some(type_name) = get_type(&world, file_range) {\n+        result.push(type_name);\n+    }\n     for nav in rr.resolves_to {\n-        if let Some(docs) = world.analysis().doc_text_for(nav)? {\n+        if let Some(docs) = get_doc_text(&world, nav) {\n             result.push(docs);\n         }\n     }\n+\n     let range = rr.reference_range.conv_with(&line_index);\n     if result.len() > 0 {\n         return Ok(Some(Hover {\n             contents: HoverContents::Scalar(MarkedString::String(result.join(\"\\n\\n---\\n\"))),\n             range: Some(range),\n         }));\n-    } else {\n-        let file_id = params.text_document.try_conv_with(&world)?;\n-        let file_range = FileRange {\n-            file_id,\n-            range: rr.reference_range,\n-        };\n-        if let Some(type_name) = world.analysis().type_of(file_range)? {\n-            return Ok(Some(Hover {\n-                contents: HoverContents::Scalar(MarkedString::String(type_name)),\n-                range: Some(range),\n-            }));\n-        }\n     }\n     Ok(None)\n }\n@@ -762,3 +759,17 @@ fn to_diagnostic_severity(severity: Severity) -> DiagnosticSeverity {\n         WeakWarning => DiagnosticSeverity::Hint,\n     }\n }\n+\n+fn get_type(world: &ServerWorld, file_range: FileRange) -> Option<String> {\n+    match world.analysis().type_of(file_range) {\n+        Ok(result) => result,\n+        _ => None,\n+    }\n+}\n+\n+fn get_doc_text(world: &ServerWorld, nav: NavigationTarget) -> Option<String> {\n+    match world.analysis().doc_text_for(nav) {\n+        Ok(result) => result,\n+        _ => None,\n+    }\n+}"}]}