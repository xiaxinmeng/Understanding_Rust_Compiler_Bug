{"sha": "342bac98072c7e8310167aaf26f19f0501a8f76c", "node_id": "C_kwDOAAsO6NoAKDM0MmJhYzk4MDcyYzdlODMxMDE2N2FhZjI2ZjE5ZjA1MDFhOGY3NmM", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-23T13:09:28Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2022-10-23T13:09:28Z"}, "message": "Fix drop for dyn*", "tree": {"sha": "d92e054b391571b12e1cab6254816f34727fc2c3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d92e054b391571b12e1cab6254816f34727fc2c3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/342bac98072c7e8310167aaf26f19f0501a8f76c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/342bac98072c7e8310167aaf26f19f0501a8f76c", "html_url": "https://github.com/rust-lang/rust/commit/342bac98072c7e8310167aaf26f19f0501a8f76c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/342bac98072c7e8310167aaf26f19f0501a8f76c/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/2470ad30e651dfd63ec6af90b83436eeafd6a3bd", "html_url": "https://github.com/rust-lang/rust/commit/2470ad30e651dfd63ec6af90b83436eeafd6a3bd"}], "stats": {"total": 47, "additions": 45, "deletions": 2}, "files": [{"sha": "99059e788a074a12450d9022e210d27efc005978", "filename": "src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/342bac98072c7e8310167aaf26f19f0501a8f76c/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342bac98072c7e8310167aaf26f19f0501a8f76c/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=342bac98072c7e8310167aaf26f19f0501a8f76c", "patch": "@@ -613,8 +613,7 @@ pub(crate) fn codegen_drop<'tcx>(\n                 // (data, vtable)          // an equivalent Rust `*mut dyn Trait`\n                 //\n                 // SO THEN WE CAN USE THE ABOVE CODE.\n-                let dyn_star = drop_place.to_cvalue(fx);\n-                let (data, vtable) = dyn_star.load_scalar_pair(fx);\n+                let (data, vtable) = drop_place.to_cvalue(fx).dyn_star_force_data_on_stack(fx);\n                 let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable);\n \n                 let virtual_drop = Instance {"}, {"sha": "75f968f3f4b8dcf105edb576691d8d55e7dde13f", "filename": "src/value_and_place.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/342bac98072c7e8310167aaf26f19f0501a8f76c/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/342bac98072c7e8310167aaf26f19f0501a8f76c/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=342bac98072c7e8310167aaf26f19f0501a8f76c", "patch": "@@ -107,6 +107,50 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n+    // FIXME remove\n+    // Forces the data value of a dyn* value to the stack and returns a pointer to it as well as the\n+    // vtable pointer.\n+    pub(crate) fn dyn_star_force_data_on_stack(\n+        self,\n+        fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    ) -> (Value, Value) {\n+        assert!(self.1.ty.is_dyn_star());\n+\n+        match self.0 {\n+            CValueInner::ByRef(ptr, None) => {\n+                let (a_scalar, b_scalar) = match self.1.abi {\n+                    Abi::ScalarPair(a, b) => (a, b),\n+                    _ => unreachable!(\"dyn_star_force_data_on_stack({:?})\", self),\n+                };\n+                let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n+                let clif_ty2 = scalar_to_clif_type(fx.tcx, b_scalar);\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                let vtable = ptr.offset(fx, b_offset).load(fx, clif_ty2, flags);\n+                (ptr.get_addr(fx), vtable)\n+            }\n+            CValueInner::ByValPair(data, vtable) => {\n+                let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {\n+                    kind: StackSlotKind::ExplicitSlot,\n+                    // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n+                    // specify stack slot alignment.\n+                    size: (u32::try_from(fx.target_config.pointer_type().bytes()).unwrap() + 15)\n+                        / 16\n+                        * 16,\n+                });\n+                let data_ptr = Pointer::stack_slot(stack_slot);\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                data_ptr.store(fx, data, flags);\n+\n+                (data_ptr.get_addr(fx), vtable)\n+            }\n+            CValueInner::ByRef(_, Some(_)) | CValueInner::ByVal(_) => {\n+                unreachable!(\"dyn_star_force_data_on_stack({:?})\", self)\n+            }\n+        }\n+    }\n+\n     pub(crate) fn try_to_ptr(self) -> Option<(Pointer, Option<Value>)> {\n         match self.0 {\n             CValueInner::ByRef(ptr, meta) => Some((ptr, meta)),"}]}