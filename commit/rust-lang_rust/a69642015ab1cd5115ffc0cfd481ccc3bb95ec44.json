{"sha": "a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "node_id": "C_kwDOAAsO6NoAKGE2OTY0MjAxNWFiMWNkNTExNWZmYzBjZmQ0ODFjY2MzYmI5NWVjNDQ", "commit": {"author": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-03-27T15:55:19Z"}, "committer": {"name": "R\u00e9my Rakic", "email": "remy.rakic+github@gmail.com", "date": "2023-03-27T16:04:05Z"}, "message": "add more InitMask test coverage", "tree": {"sha": "98f39545af3fc16f989c3a4ffe848ab44b2f9c5b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/98f39545af3fc16f989c3a4ffe848ab44b2f9c5b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "html_url": "https://github.com/rust-lang/rust/commit/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44/comments", "author": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lqd", "id": 247183, "node_id": "MDQ6VXNlcjI0NzE4Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/247183?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lqd", "html_url": "https://github.com/lqd", "followers_url": "https://api.github.com/users/lqd/followers", "following_url": "https://api.github.com/users/lqd/following{/other_user}", "gists_url": "https://api.github.com/users/lqd/gists{/gist_id}", "starred_url": "https://api.github.com/users/lqd/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lqd/subscriptions", "organizations_url": "https://api.github.com/users/lqd/orgs", "repos_url": "https://api.github.com/users/lqd/repos", "events_url": "https://api.github.com/users/lqd/events{/privacy}", "received_events_url": "https://api.github.com/users/lqd/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3f80529c643be8449fc755adc6bb37e2ea92114b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3f80529c643be8449fc755adc6bb37e2ea92114b", "html_url": "https://github.com/rust-lang/rust/commit/3f80529c643be8449fc755adc6bb37e2ea92114b"}], "stats": {"total": 175, "additions": 175, "deletions": 0}, "files": [{"sha": "171ed4d93bb0e015ccc7ccdf472a844cfbed9d76", "filename": "compiler/rustc_middle/src/mir/interpret/allocation/tests.rs", "status": "modified", "additions": 175, "deletions": 0, "changes": 175, "blob_url": "https://github.com/rust-lang/rust/blob/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a69642015ab1cd5115ffc0cfd481ccc3bb95ec44/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Finterpret%2Fallocation%2Ftests.rs?ref=a69642015ab1cd5115ffc0cfd481ccc3bb95ec44", "patch": "@@ -17,3 +17,178 @@ fn uninit_mask() {\n         assert!(!mask.get(Size::from_bytes(i)), \"{i} should not be set\");\n     }\n }\n+\n+/// Returns the number of materialized blocks for this mask.\n+fn materialized_block_count(mask: &InitMask) -> usize {\n+    match mask.blocks {\n+        InitMaskBlocks::Lazy { .. } => 0,\n+        InitMaskBlocks::Materialized(ref blocks) => blocks.blocks.len(),\n+    }\n+}\n+\n+#[test]\n+fn materialize_mask_within_range() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), false);\n+    assert_eq!(materialized_block_count(&mask), 0);\n+\n+    // Forces materialization, but doesn't require growth. This is case #1 documented in the\n+    // `set_range` method.\n+    mask.set_range((8..16).into(), true);\n+    assert_eq!(materialized_block_count(&mask), 1);\n+\n+    for i in 0..8 {\n+        assert!(!mask.get(Size::from_bytes(i)), \"{i} should not be set\");\n+    }\n+    for i in 8..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+}\n+\n+#[test]\n+fn grow_within_unused_bits_with_full_overwrite() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    for i in 0..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    // Grow without requiring an additional block. Full overwrite.\n+    // This can be fully handled without materialization.\n+    let range = (0..32).into();\n+    mask.set_range(range, true);\n+\n+    for i in 0..32 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    assert_eq!(materialized_block_count(&mask), 0);\n+}\n+\n+// This test checks that an initmask's spare capacity is correctly used when growing within block\n+// capacity. This can be fully handled without materialization.\n+#[test]\n+fn grow_same_state_within_unused_bits() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    for i in 0..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    // Grow without requiring an additional block. The gap between the current length and the\n+    // range's beginning should be set to the same value as the range.\n+    let range = (24..32).into();\n+    mask.set_range(range, true);\n+\n+    // We want to make sure the unused bits in the first block are correct\n+    for i in 16..24 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    for i in 24..32 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    assert_eq!(1, mask.range_as_init_chunks((0..32).into()).count());\n+    assert_eq!(materialized_block_count(&mask), 0);\n+}\n+\n+// This is the same test as `grow_same_state_within_unused_bits` but with both init and uninit\n+// states: this forces materialization; otherwise the mask could stay lazy even when needing to\n+// grow.\n+#[test]\n+fn grow_mixed_state_within_unused_bits() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    for i in 0..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    // Grow without requiring an additional block. The gap between the current length and the\n+    // range's beginning should be set to the same value as the range. Note: since this is fully\n+    // out-of-bounds of the current mask, this is case #3 described in the `set_range` method.\n+    let range = (24..32).into();\n+    mask.set_range(range, false);\n+\n+    // We want to make sure the unused bits in the first block are correct\n+    for i in 16..24 {\n+        assert!(!mask.get(Size::from_bytes(i)), \"{i} should not be set\");\n+    }\n+\n+    for i in 24..32 {\n+        assert!(!mask.get(Size::from_bytes(i)), \"{i} should not be set\");\n+    }\n+\n+    assert_eq!(1, mask.range_as_init_chunks((0..16).into()).count());\n+    assert_eq!(2, mask.range_as_init_chunks((0..32).into()).count());\n+    assert_eq!(materialized_block_count(&mask), 1);\n+}\n+\n+// This is similar to `grow_mixed_state_within_unused_bits` to force materialization, but the range\n+// to set partially overlaps the mask, so this requires a different growth + write pattern in the\n+// mask.\n+#[test]\n+fn grow_within_unused_bits_with_overlap() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    for i in 0..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+\n+    // Grow without requiring an additional block, but leave no gap after the current len. Note:\n+    // since this is partially out-of-bounds of the current mask, this is case #2 described in the\n+    // `set_range` method.\n+    let range = (8..24).into();\n+    mask.set_range(range, false);\n+\n+    // We want to make sure the unused bits in the first block are correct\n+    for i in 8..24 {\n+        assert!(!mask.get(Size::from_bytes(i)), \"{i} should not be set\");\n+    }\n+\n+    assert_eq!(1, mask.range_as_init_chunks((0..8).into()).count());\n+    assert_eq!(2, mask.range_as_init_chunks((0..24).into()).count());\n+    assert_eq!(materialized_block_count(&mask), 1);\n+}\n+\n+// Force materialization before a full overwrite: the mask can now become lazy.\n+#[test]\n+fn grow_mixed_state_within_unused_bits_and_full_overwrite() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    let range = (0..16).into();\n+    assert!(mask.is_range_initialized(range).is_ok());\n+\n+    // Force materialization.\n+    let range = (8..24).into();\n+    mask.set_range(range, false);\n+    assert!(mask.is_range_initialized(range).is_err());\n+    assert_eq!(materialized_block_count(&mask), 1);\n+\n+    // Full overwrite, lazy blocks would be enough from now on.\n+    let range = (0..32).into();\n+    mask.set_range(range, true);\n+    assert!(mask.is_range_initialized(range).is_ok());\n+\n+    assert_eq!(1, mask.range_as_init_chunks((0..32).into()).count());\n+    assert_eq!(materialized_block_count(&mask), 0);\n+}\n+\n+// Check that growth outside the current capacity can still be lazy: if the init state doesn't\n+// change, we don't need materialized blocks.\n+#[test]\n+fn grow_same_state_outside_capacity() {\n+    // To have spare bits, we use a mask size smaller than its block size of 64.\n+    let mut mask = InitMask::new(Size::from_bytes(16), true);\n+    for i in 0..16 {\n+        assert!(mask.get(Size::from_bytes(i)), \"{i} should be set\");\n+    }\n+    assert_eq!(materialized_block_count(&mask), 0);\n+\n+    // Grow to 10 blocks with the same init state.\n+    let range = (24..640).into();\n+    mask.set_range(range, true);\n+\n+    assert_eq!(1, mask.range_as_init_chunks((0..640).into()).count());\n+    assert_eq!(materialized_block_count(&mask), 0);\n+}"}]}