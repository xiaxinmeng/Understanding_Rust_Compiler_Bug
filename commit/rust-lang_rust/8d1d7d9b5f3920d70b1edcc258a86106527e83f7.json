{"sha": "8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhkMWQ3ZDliNWYzOTIwZDcwYjFlZGNjMjU4YTg2MTA2NTI3ZTgzZjc=", "commit": {"author": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-02T17:56:26Z"}, "committer": {"name": "Aaron Turon", "email": "aturon@mozilla.com", "date": "2014-05-05T22:24:36Z"}, "message": "Change std::io::FilePermission to a typesafe representation\n\nThis patch changes `std::io::FilePermissions` from an exposed `u32`\nrepresentation to a typesafe representation (that only allows valid\nflag combinations) using the `std::bitflags`, thus ensuring a greater\ndegree of safety on the Rust side.\n\nDespite the change to the type, most code should continue to work\nas-is, sincde the new type provides bit operations in the style of C\nflags. To get at the underlying integer representation, use the `bits`\nmethod; to (unsafely) convert to `FilePermissions`, use\n`FilePermissions::from_bits`.\n\nCloses #6085.\n\n[breaking-change]", "tree": {"sha": "2c699707e94f9c3676bfdc3ee0492d728d3ff641", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c699707e94f9c3676bfdc3ee0492d728d3ff641"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "html_url": "https://github.com/rust-lang/rust/commit/8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/comments", "author": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "aturon", "id": 709807, "node_id": "MDQ6VXNlcjcwOTgwNw==", "avatar_url": "https://avatars.githubusercontent.com/u/709807?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aturon", "html_url": "https://github.com/aturon", "followers_url": "https://api.github.com/users/aturon/followers", "following_url": "https://api.github.com/users/aturon/following{/other_user}", "gists_url": "https://api.github.com/users/aturon/gists{/gist_id}", "starred_url": "https://api.github.com/users/aturon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aturon/subscriptions", "organizations_url": "https://api.github.com/users/aturon/orgs", "repos_url": "https://api.github.com/users/aturon/repos", "events_url": "https://api.github.com/users/aturon/events{/privacy}", "received_events_url": "https://api.github.com/users/aturon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c00d8fd9a07244a13d1cc7162a80c3d618935ce8", "html_url": "https://github.com/rust-lang/rust/commit/c00d8fd9a07244a13d1cc7162a80c3d618935ce8"}], "stats": {"total": 99, "additions": 55, "deletions": 44}, "files": [{"sha": "94ca602784112e31d487bf00d9bf6a61b9c0865a", "filename": "src/libnative/io/file_unix.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibnative%2Fio%2Ffile_unix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibnative%2Fio%2Ffile_unix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_unix.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -335,7 +335,7 @@ pub fn open(path: &CString, fm: io::FileMode, fa: io::FileAccess)\n \n pub fn mkdir(p: &CString, mode: io::FilePermission) -> IoResult<()> {\n     super::mkerr_libc(retry(|| unsafe {\n-        libc::mkdir(p.with_ref(|p| p), mode as libc::mode_t)\n+        libc::mkdir(p.with_ref(|p| p), mode.bits() as libc::mode_t)\n     }))\n }\n \n@@ -392,7 +392,7 @@ pub fn rename(old: &CString, new: &CString) -> IoResult<()> {\n \n pub fn chmod(p: &CString, mode: io::FilePermission) -> IoResult<()> {\n     super::mkerr_libc(retry(|| unsafe {\n-        libc::chmod(p.with_ref(|p| p), mode as libc::mode_t)\n+        libc::chmod(p.with_ref(|p| p), mode.bits() as libc::mode_t)\n     }))\n }\n \n@@ -470,7 +470,9 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n         path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: (stat.st_mode) as io::FilePermission & io::AllPermissions,\n+        perm: unsafe {\n+            io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n+        },\n         created: mktime(stat.st_ctime as u64, stat.st_ctime_nsec as u64),\n         modified: mktime(stat.st_mtime as u64, stat.st_mtime_nsec as u64),\n         accessed: mktime(stat.st_atime as u64, stat.st_atime_nsec as u64),"}, {"sha": "945a1f0d612357e4fa48f914179532fbbefe68f6", "filename": "src/libnative/io/file_win32.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibnative%2Fio%2Ffile_win32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibnative%2Fio%2Ffile_win32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Fio%2Ffile_win32.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -391,7 +391,7 @@ pub fn rename(old: &CString, new: &CString) -> IoResult<()> {\n \n pub fn chmod(p: &CString, mode: io::FilePermission) -> IoResult<()> {\n     super::mkerr_libc(as_utf16_p(p.as_str().unwrap(), |p| unsafe {\n-        libc::wchmod(p, mode as libc::c_int)\n+        libc::wchmod(p, mode.bits() as libc::c_int)\n     }))\n }\n \n@@ -470,7 +470,9 @@ fn mkstat(stat: &libc::stat, path: &CString) -> io::FileStat {\n         path: Path::new(path),\n         size: stat.st_size as u64,\n         kind: kind,\n-        perm: (stat.st_mode) as io::FilePermission & io::AllPermissions,\n+        perm: unsafe {\n+          io::FilePermission::from_bits(stat.st_mode as u32)  & io::AllPermissions\n+        },\n         created: stat.st_ctime as u64,\n         modified: stat.st_mtime as u64,\n         accessed: stat.st_atime as u64,"}, {"sha": "1df68b5cf5c72352f46bfc134c0209ccaccbec75", "filename": "src/librustuv/file.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibrustuv%2Ffile.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibrustuv%2Ffile.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Ffile.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -283,7 +283,9 @@ impl FsRequest {\n             path: path,\n             size: stat.st_size as u64,\n             kind: kind,\n-            perm: (stat.st_mode as io::FilePermission) & io::AllPermissions,\n+            perm: unsafe {\n+                io::FilePermission::from_bits(stat.st_mode as u32) & io::AllPermissions\n+            },\n             created: to_msec(stat.st_birthtim),\n             modified: to_msec(stat.st_mtim),\n             accessed: to_msec(stat.st_atim),"}, {"sha": "999c5ec4e33f2441290702572b2617f7a5d50371", "filename": "src/librustuv/uvio.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibrustuv%2Fuvio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibrustuv%2Fuvio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvio.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -224,7 +224,7 @@ impl IoFactory for UvIoFactory {\n     }\n     fn fs_mkdir(&mut self, path: &CString,\n                 perm: io::FilePermission) -> Result<(), IoError> {\n-        let r = FsRequest::mkdir(&self.loop_, path, perm as c_int);\n+        let r = FsRequest::mkdir(&self.loop_, path, perm.bits() as c_int);\n         r.map_err(uv_error_to_io_error)\n     }\n     fn fs_rmdir(&mut self, path: &CString) -> Result<(), IoError> {\n@@ -237,7 +237,7 @@ impl IoFactory for UvIoFactory {\n     }\n     fn fs_chmod(&mut self, path: &CString,\n                 perm: io::FilePermission) -> Result<(), IoError> {\n-        let r = FsRequest::chmod(&self.loop_, path, perm as c_int);\n+        let r = FsRequest::chmod(&self.loop_, path, perm.bits() as c_int);\n         r.map_err(uv_error_to_io_error)\n     }\n     fn fs_readdir(&mut self, path: &CString, flags: c_int)"}, {"sha": "6d48b9eee3517f9889b9081dbeea2c417c8f0d94", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -1119,7 +1119,7 @@ mod test {\n         check!(File::create(&input));\n         check!(chmod(&input, io::UserRead));\n         check!(copy(&input, &out));\n-        assert!(check!(out.stat()).perm & io::UserWrite == 0);\n+        assert!(!check!(out.stat()).perm.intersects(io::UserWrite));\n \n         check!(chmod(&input, io::UserFile));\n         check!(chmod(&out, io::UserFile));\n@@ -1193,9 +1193,9 @@ mod test {\n         let file = tmpdir.join(\"in.txt\");\n \n         check!(File::create(&file));\n-        assert!(check!(stat(&file)).perm & io::UserWrite == io::UserWrite);\n+        assert!(check!(stat(&file)).perm.contains(io::UserWrite));\n         check!(chmod(&file, io::UserRead));\n-        assert!(check!(stat(&file)).perm & io::UserWrite == 0);\n+        assert!(!check!(stat(&file)).perm.contains(io::UserWrite));\n \n         match chmod(&tmpdir.join(\"foo\"), io::UserRWX) {\n             Ok(..) => fail!(\"wanted a failure\"),"}, {"sha": "ff276d0202818b7be01169ea1ce4dc27302942e2", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 38, "deletions": 33, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8d1d7d9b5f3920d70b1edcc258a86106527e83f7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8d1d7d9b5f3920d70b1edcc258a86106527e83f7", "patch": "@@ -224,6 +224,7 @@ use fmt;\n use int;\n use iter::Iterator;\n use libc;\n+use ops::{BitOr, BitAnd, Sub};\n use os;\n use option::{Option, Some, None};\n use path::Path;\n@@ -1558,36 +1559,40 @@ pub struct UnstableFileStat {\n     pub gen: u64,\n }\n \n-/// A set of permissions for a file or directory is represented by a set of\n-/// flags which are or'd together.\n-pub type FilePermission = u32;\n-\n-// Each permission bit\n-pub static UserRead: FilePermission     = 0x100;\n-pub static UserWrite: FilePermission    = 0x080;\n-pub static UserExecute: FilePermission  = 0x040;\n-pub static GroupRead: FilePermission    = 0x020;\n-pub static GroupWrite: FilePermission   = 0x010;\n-pub static GroupExecute: FilePermission = 0x008;\n-pub static OtherRead: FilePermission    = 0x004;\n-pub static OtherWrite: FilePermission   = 0x002;\n-pub static OtherExecute: FilePermission = 0x001;\n-\n-// Common combinations of these bits\n-pub static UserRWX: FilePermission  = UserRead | UserWrite | UserExecute;\n-pub static GroupRWX: FilePermission = GroupRead | GroupWrite | GroupExecute;\n-pub static OtherRWX: FilePermission = OtherRead | OtherWrite | OtherExecute;\n-\n-/// A set of permissions for user owned files, this is equivalent to 0644 on\n-/// unix-like systems.\n-pub static UserFile: FilePermission = UserRead | UserWrite | GroupRead | OtherRead;\n-/// A set of permissions for user owned directories, this is equivalent to 0755\n-/// on unix-like systems.\n-pub static UserDir: FilePermission = UserRWX | GroupRead | GroupExecute |\n-                                     OtherRead | OtherExecute;\n-/// A set of permissions for user owned executables, this is equivalent to 0755\n-/// on unix-like systems.\n-pub static UserExec: FilePermission = UserDir;\n-\n-/// A mask for all possible permission bits\n-pub static AllPermissions: FilePermission = 0x1ff;\n+bitflags!(\n+    #[doc=\"A set of permissions for a file or directory is represented\n+by a set of flags which are or'd together.\"]\n+    #[deriving(Hash)]\n+    #[deriving(Show)]\n+    flags FilePermission: u32 {\n+        static UserRead     = 0o400,\n+        static UserWrite    = 0o200,\n+        static UserExecute  = 0o100,\n+        static GroupRead    = 0o040,\n+        static GroupWrite   = 0o020,\n+        static GroupExecute = 0o010,\n+        static OtherRead    = 0o004,\n+        static OtherWrite   = 0o002,\n+        static OtherExecute = 0o001,\n+\n+        static UserRWX  = UserRead.bits | UserWrite.bits | UserExecute.bits,\n+        static GroupRWX = GroupRead.bits | GroupWrite.bits | GroupExecute.bits,\n+        static OtherRWX = OtherRead.bits | OtherWrite.bits | OtherExecute.bits,\n+\n+        #[doc=\"Permissions for user owned files, equivalent to 0644 on\n+unix-like systems.\"]\n+        static UserFile = UserRead.bits | UserWrite.bits | GroupRead.bits | OtherRead.bits,\n+\n+        #[doc=\"Permissions for user owned directories, equivalent to 0755 on\n+unix-like systems.\"]\n+        static UserDir  = UserRWX.bits | GroupRead.bits | GroupExecute.bits |\n+                   OtherRead.bits | OtherExecute.bits,\n+\n+        #[doc=\"Permissions for user owned executables, equivalent to 0755\n+on unix-like systems.\"]\n+        static UserExec = UserDir.bits,\n+\n+        #[doc=\"All possible permissions enabled.\"]\n+        static AllPermissions = UserRWX.bits | GroupRWX.bits | OtherRWX.bits\n+    }\n+)"}]}