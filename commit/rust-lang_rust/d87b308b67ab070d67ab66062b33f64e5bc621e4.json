{"sha": "d87b308b67ab070d67ab66062b33f64e5bc621e4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4N2IzMDhiNjdhYjA3MGQ2N2FiNjYwNjJiMzNmNjRlNWJjNjIxZTQ=", "commit": {"author": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2014-12-20T10:48:43Z"}, "committer": {"name": "Jared Roesch", "email": "roeschinc@gmail.com", "date": "2014-12-20T11:54:39Z"}, "message": "Add support for multiple region bounds in where clauses", "tree": {"sha": "13fa47333d28c9926b8a26718f355250ad20247d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13fa47333d28c9926b8a26718f355250ad20247d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d87b308b67ab070d67ab66062b33f64e5bc621e4", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d87b308b67ab070d67ab66062b33f64e5bc621e4", "html_url": "https://github.com/rust-lang/rust/commit/d87b308b67ab070d67ab66062b33f64e5bc621e4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d87b308b67ab070d67ab66062b33f64e5bc621e4/comments", "author": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jroesch", "id": 696509, "node_id": "MDQ6VXNlcjY5NjUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/696509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jroesch", "html_url": "https://github.com/jroesch", "followers_url": "https://api.github.com/users/jroesch/followers", "following_url": "https://api.github.com/users/jroesch/following{/other_user}", "gists_url": "https://api.github.com/users/jroesch/gists{/gist_id}", "starred_url": "https://api.github.com/users/jroesch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jroesch/subscriptions", "organizations_url": "https://api.github.com/users/jroesch/orgs", "repos_url": "https://api.github.com/users/jroesch/repos", "events_url": "https://api.github.com/users/jroesch/events{/privacy}", "received_events_url": "https://api.github.com/users/jroesch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0cac488ac6ca16507da390429565b7879f76bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0cac488ac6ca16507da390429565b7879f76bb4", "html_url": "https://github.com/rust-lang/rust/commit/e0cac488ac6ca16507da390429565b7879f76bb4"}], "stats": {"total": 103, "additions": 79, "deletions": 24}, "files": [{"sha": "be191801626a8495e6de39c48304ac2a75123318", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -213,11 +213,13 @@ impl<'a, 'v> Visitor<'v> for LifetimeContext<'a> {\n                     visit::walk_ty_param_bounds_helper(self, bounds);\n                 }\n                 &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n-                                                                                ref bound,\n+                                                                                ref bounds,\n                                                                                 .. }) => {\n \n                     self.visit_lifetime_ref(lifetime);\n-                    self.visit_lifetime_ref(bound);\n+                    for bound in bounds.iter() {\n+                        self.visit_lifetime_ref(bound);\n+                    }\n                 }\n                 &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ id,\n                                                                          ref path,\n@@ -558,10 +560,13 @@ fn early_bound_lifetime_names(generics: &ast::Generics) -> Vec<ast::Name> {\n                     visit::walk_ty_param_bounds_helper(&mut collector, bounds);\n                 }\n                 &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n-                                                                                ref bound,\n+                                                                                ref bounds,\n                                                                                 ..}) => {\n                     collector.visit_lifetime_ref(lifetime);\n-                    collector.visit_lifetime_ref(bound);\n+\n+                    for bound in bounds.iter() {\n+                        collector.visit_lifetime_ref(bound);\n+                    }\n                 }\n                 &ast::WherePredicate::EqPredicate(_) => unimplemented!()\n             }"}, {"sha": "3f59b50337faf144bee74bc8388c1ceb7d7d7304", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -1827,9 +1827,11 @@ fn ty_generics<'tcx,AC>(this: &AC,\n \n             &ast::WherePredicate::RegionPredicate(ref region_pred) => {\n                 let r1 = ast_region_to_region(this.tcx(), &region_pred.lifetime);\n-                let r2 = ast_region_to_region(this.tcx(), &region_pred.bound);\n-                let pred = ty::Binder(ty::OutlivesPredicate(r1, r2));\n-                result.predicates.push(space, ty::Predicate::RegionOutlives(pred))\n+                for bound in region_pred.bounds.iter() {\n+                    let r2 = ast_region_to_region(this.tcx(), bound);\n+                    let pred = ty::Binder(ty::OutlivesPredicate(r1, r2));\n+                    result.predicates.push(space, ty::Predicate::RegionOutlives(pred))\n+                }\n             }\n \n             &ast::WherePredicate::EqPredicate(ref eq_pred) => {"}, {"sha": "440e11e385fe0e6403feffcc7fd409a14989bf53", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -430,11 +430,9 @@ pub struct WhereBoundPredicate {\n pub struct WhereRegionPredicate {\n     pub span: Span,\n     pub lifetime: Lifetime,\n-    pub bound: Lifetime\n+    pub bounds: Vec<Lifetime>,\n }\n \n-impl Copy for WhereRegionPredicate {}\n-\n #[deriving(Clone, PartialEq, Eq, Encodable, Decodable, Hash, Show)]\n pub struct WhereEqPredicate {\n     pub id: NodeId,"}, {"sha": "d8de3d2db9795c992cba98d3d8d68e7ffa0a65c8", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -435,7 +435,7 @@ impl<'a> TraitDef<'a> {\n                     ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                         span: self.span,\n                         lifetime: rb.lifetime,\n-                        bound: rb.bound\n+                        bounds: rb.bounds.iter().map(|b| b.clone()).collect()\n                     })\n                 }\n                 ast::WherePredicate::EqPredicate(ref we) => {"}, {"sha": "86df588386464d33bb270d34839a8a0291b99436", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -824,12 +824,12 @@ pub fn noop_fold_where_predicate<T: Folder>(\n             })\n         }\n         ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{lifetime,\n-                                                                       bound,\n+                                                                       bounds,\n                                                                        span}) => {\n             ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate {\n                 span: fld.new_span(span),\n                 lifetime: fld.fold_lifetime(lifetime),\n-                bound: fld.fold_lifetime(bound)\n+                bounds: bounds.move_map(|bound| fld.fold_lifetime(bound))\n             })\n         }\n         ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{id,"}, {"sha": "f8b47e0405f29c58a21c87bf079f7d98466f7091", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -4199,9 +4199,8 @@ impl<'a> Parser<'a> {\n \n                     self.eat(&token::Colon);\n \n-                    // FIXME(#20049)\n-                    let bounding_lifetime =\n-                        self.parse_lifetime();\n+                    let bounds =\n+                        self.parse_lifetimes(token::BinOp(token::Plus));\n \n                     let hi = self.span.hi;\n                     let span = mk_sp(lo, hi);\n@@ -4210,7 +4209,7 @@ impl<'a> Parser<'a> {\n                         ast::WhereRegionPredicate {\n                             span: span,\n                             lifetime: bounded_lifetime,\n-                            bound: bounding_lifetime\n+                            bounds: bounds\n                         }\n                     ));\n "}, {"sha": "f27a476dbdd7514c62054588334a6c932c64bdf1", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -2444,11 +2444,18 @@ impl<'a> State<'a> {\n                     try!(self.print_bounds(\":\", bounds.as_slice()));\n                 }\n                 &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n-                                                                                ref bound,\n+                                                                                ref bounds,\n                                                                                 ..}) => {\n                     try!(self.print_lifetime(lifetime));\n                     try!(word(&mut self.s, \":\"));\n-                    try!(self.print_lifetime(bound));\n+\n+                    for (i, bound) in bounds.iter().enumerate() {\n+                        try!(self.print_lifetime(bound));\n+\n+                        if i != 0 {\n+                            try!(word(&mut self.s, \":\"));\n+                        }\n+                    }\n                 }\n                 &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{ref path, ref ty, ..}) => {\n                     try!(self.print_path(path, false));"}, {"sha": "9938feb171eb0fc738509969e29cf5c7b6b6857a", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -590,10 +590,13 @@ pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics\n                 walk_ty_param_bounds_helper(visitor, bounds);\n             }\n             &ast::WherePredicate::RegionPredicate(ast::WhereRegionPredicate{ref lifetime,\n-                                                                            ref bound,\n+                                                                            ref bounds,\n                                                                             ..}) => {\n                 visitor.visit_lifetime_ref(lifetime);\n-                visitor.visit_lifetime_ref(bound);\n+\n+                for bound in bounds.iter() {\n+                    visitor.visit_lifetime_ref(bound);\n+                }\n             }\n             &ast::WherePredicate::EqPredicate(ast::WhereEqPredicate{id,\n                                                                     ref path,"}, {"sha": "a03911e1d0e18127bdde883dc18875b1e12d77f1", "filename": "src/test/compile-fail/region-multiple-lifetime-bounds-on-fns-where-clause.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-multiple-lifetime-bounds-on-fns-where-clause.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -0,0 +1,41 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn a<'a, 'b, 'c>(x: &mut &'a int, y: &mut &'b int, z: &mut &'c int) where 'b: 'a + 'c {\n+    // Note: this is legal because of the `'b:'a` declaration.\n+    *x = *y;\n+    *z = *y;\n+}\n+\n+fn b<'a, 'b, 'c>(x: &mut &'a int, y: &mut &'b int, z: &mut &'c int) {\n+    // Illegal now because there is no `'b:'a` declaration.\n+    *x = *y; //~ ERROR mismatched types\n+    *z = *y; //~ ERROR mismatched types\n+}\n+\n+fn c<'a,'b, 'c>(x: &mut &'a int, y: &mut &'b int, z: &mut &'c int) {\n+    // Here we try to call `foo` but do not know that `'a` and `'b` are\n+    // related as required.\n+    a(x, y, z); //~ ERROR cannot infer\n+}\n+\n+fn d() {\n+    // 'a and 'b are early bound in the function `a` because they appear\n+    // inconstraints:\n+    let _: fn(&mut &int, &mut &int, &mut &int) = a; //~ ERROR mismatched types\n+}\n+\n+fn e() {\n+    // 'a and 'b are late bound in the function `b` because there are\n+    // no constraints:\n+    let _: fn(&mut &int, &mut &int, &mut &int) = b;\n+}\n+\n+fn main() { }"}, {"sha": "40d2df45488f5a67468bbb822133d5e56db6fdbd", "filename": "src/test/compile-fail/where-clause-method-substituion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clause-method-substituion.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -26,5 +26,5 @@ impl Bar<X> for int {\n \n fn main() {\n     1.method::<X>();\n-    //~^ ERROR the trait `Foo<_>` is not implemented for the type `X`\n-}\n\\ No newline at end of file\n+    //~^ ERROR the trait `Foo<X>` is not implemented for the type `X`\n+}"}, {"sha": "e5b54582e4e3ffca0ccc224b7bf53062054a0fb7", "filename": "src/test/compile-fail/where-clauses-method-unsatisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d87b308b67ab070d67ab66062b33f64e5bc621e4/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwhere-clauses-method-unsatisfied.rs?ref=d87b308b67ab070d67ab66062b33f64e5bc621e4", "patch": "@@ -26,5 +26,5 @@ impl<T> Foo<T> {\n fn main() {\n     let x = Foo { value: Bar };\n     x.equals(&x);\n-    //~^ ERROR the trait `core::cmp::Eq` is not not implemented\n+    //~^ ERROR the trait `core::cmp::Eq` is not implemented for the type `Bar`\n }"}]}