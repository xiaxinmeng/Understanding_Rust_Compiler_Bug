{"sha": "107257eedc3d351b7c1a02cddee89e52db5808e9", "node_id": "C_kwDOAAsO6NoAKDEwNzI1N2VlZGMzZDM1MWI3YzFhMDJjZGRlZTg5ZTUyZGI1ODA4ZTk", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-20T02:21:13Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-04-29T07:31:25Z"}, "message": "switch Crate to run_cargo_test", "tree": {"sha": "4360ae892461a18708f2480dda5161787adf93db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4360ae892461a18708f2480dda5161787adf93db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/107257eedc3d351b7c1a02cddee89e52db5808e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/107257eedc3d351b7c1a02cddee89e52db5808e9", "html_url": "https://github.com/rust-lang/rust/commit/107257eedc3d351b7c1a02cddee89e52db5808e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/107257eedc3d351b7c1a02cddee89e52db5808e9/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc5a742b24539f4e3e62dffa005c6a927adb66b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5a742b24539f4e3e62dffa005c6a927adb66b5", "html_url": "https://github.com/rust-lang/rust/commit/fc5a742b24539f4e3e62dffa005c6a927adb66b5"}], "stats": {"total": 104, "additions": 43, "deletions": 61}, "files": [{"sha": "b026c449a3838ca84e4c7eaf0e8521ea3c2d247b", "filename": "src/bootstrap/test.rs", "status": "modified", "additions": 43, "deletions": 61, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/107257eedc3d351b7c1a02cddee89e52db5808e9/src%2Fbootstrap%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/107257eedc3d351b7c1a02cddee89e52db5808e9/src%2Fbootstrap%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Ftest.rs?ref=107257eedc3d351b7c1a02cddee89e52db5808e9", "patch": "@@ -2109,8 +2109,13 @@ impl Step for CrateLibrustc {\n }\n \n // Given a `cargo test` subcommand, pass it the appropriate test flags given a `builder`.\n-fn cargo_test_args(cargo: &mut Command, libtest_args: &[&str], _crates: &[&str], builder: &Builder<'_>) {\n-    if !builder.fail_fast {\n+fn run_cargo_test(cargo: impl Into<Command>, libtest_args: &[&str], crates: &[Interned<String>], compiler: Compiler, target: TargetSelection, builder: &Builder<'_>) {\n+    let mut cargo = cargo.into();\n+\n+    // Pass in some standard flags then iterate over the graph we've discovered\n+    // in `cargo metadata` with the maps above and figure out what `-p`\n+    // arguments need to get passed.\n+    if builder.kind == Kind::Test && !builder.fail_fast {\n         cargo.arg(\"--no-fail-fast\");\n     }\n     match builder.doc_tests {\n@@ -2123,8 +2128,38 @@ fn cargo_test_args(cargo: &mut Command, libtest_args: &[&str], _crates: &[&str],\n         DocTests::Yes => {}\n     }\n \n+    for &krate in crates {\n+        cargo.arg(\"-p\").arg(krate);\n+    }\n+\n+    // The tests are going to run with the *target* libraries, so we need to\n+    // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n+    //\n+    // Note that to run the compiler we need to run with the *host* libraries,\n+    // but our wrapper scripts arrange for that to be the case anyway.\n+    let mut dylib_path = dylib_path();\n+    dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n+    cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n+\n+    if target.contains(\"emscripten\") {\n+        cargo.env(\n+            format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n+            builder.config.nodejs.as_ref().expect(\"nodejs not configured\"),\n+        );\n+    } else if target.starts_with(\"wasm32\") {\n+        let node = builder.config.nodejs.as_ref().expect(\"nodejs not configured\");\n+        let runner = format!(\"{} {}/src/etc/wasm32-shim.js\", node.display(), builder.src.display());\n+        cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)), &runner);\n+    } else if builder.remote_tested(target) {\n+        cargo.env(\n+            format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n+            format!(\"{} run 0\", builder.tool_exe(Tool::RemoteTestClient).display()),\n+        );\n+    }\n+\n     cargo.arg(\"--\").args(&builder.config.cmd.test_args()).args(libtest_args);\n-    add_flags_and_try_run_tests(builder, cargo);\n+    let _time = util::timeit(&builder);\n+    add_flags_and_try_run_tests(builder, &mut cargo);\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n@@ -2190,69 +2225,14 @@ impl Step for Crate {\n             _ => panic!(\"can only test libraries\"),\n         };\n \n-        // Build up the base `cargo test` command.\n-        //\n-        // Pass in some standard flags then iterate over the graph we've discovered\n-        // in `cargo metadata` with the maps above and figure out what `-p`\n-        // arguments need to get passed.\n-        if builder.kind == Kind::Test && !builder.fail_fast {\n-            cargo.arg(\"--no-fail-fast\");\n-        }\n-        match builder.doc_tests {\n-            DocTests::Only => {\n-                cargo.arg(\"--doc\");\n-            }\n-            DocTests::No => {\n-                cargo.args(&[\"--lib\", \"--bins\", \"--examples\", \"--tests\", \"--benches\"]);\n-            }\n-            DocTests::Yes => {}\n-        }\n-\n-        for krate in &self.crates {\n-            cargo.arg(\"-p\").arg(krate);\n-        }\n-\n-        // The tests are going to run with the *target* libraries, so we need to\n-        // ensure that those libraries show up in the LD_LIBRARY_PATH equivalent.\n-        //\n-        // Note that to run the compiler we need to run with the *host* libraries,\n-        // but our wrapper scripts arrange for that to be the case anyway.\n-        let mut dylib_path = dylib_path();\n-        dylib_path.insert(0, PathBuf::from(&*builder.sysroot_libdir(compiler, target)));\n-        cargo.env(dylib_path_var(), env::join_paths(&dylib_path).unwrap());\n-\n-        cargo.arg(\"--\");\n-        cargo.args(&builder.config.cmd.test_args());\n-\n-        cargo.arg(\"-Z\").arg(\"unstable-options\");\n-        cargo.arg(\"--format\").arg(\"json\");\n-\n-        if target.contains(\"emscripten\") {\n-            cargo.env(\n-                format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n-                builder.config.nodejs.as_ref().expect(\"nodejs not configured\"),\n-            );\n-        } else if target.starts_with(\"wasm32\") {\n-            let node = builder.config.nodejs.as_ref().expect(\"nodejs not configured\");\n-            let runner =\n-                format!(\"{} {}/src/etc/wasm32-shim.js\", node.display(), builder.src.display());\n-            cargo.env(format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)), &runner);\n-        } else if builder.remote_tested(target) {\n-            cargo.env(\n-                format!(\"CARGO_TARGET_{}_RUNNER\", envify(&target.triple)),\n-                format!(\"{} run 0\", builder.tool_exe(Tool::RemoteTestClient).display()),\n-            );\n-        }\n-\n         let _guard = builder.msg(\n             builder.kind,\n             compiler.stage,\n             crate_description(&self.crates),\n             compiler.host,\n             target,\n         );\n-        let _time = util::timeit(&builder);\n-        crate::render_tests::try_run_tests(builder, &mut cargo.into());\n+        run_cargo_test(cargo, &[], &self.crates, compiler, target, builder);\n     }\n }\n \n@@ -2565,13 +2545,15 @@ impl Step for Bootstrap {\n         check_bootstrap.arg(\"bootstrap_test.py\").current_dir(builder.src.join(\"src/bootstrap/\"));\n         try_run(builder, &mut check_bootstrap);\n \n+        let host = builder.config.build;\n+        let compiler = builder.compiler(0, host);\n         let mut cmd = Command::new(&builder.initial_cargo);\n         cmd.arg(\"test\")\n             .current_dir(builder.src.join(\"src/bootstrap\"))\n             .env(\"RUSTFLAGS\", \"-Cdebuginfo=2\")\n             .env(\"CARGO_TARGET_DIR\", builder.out.join(\"bootstrap\"))\n             .env(\"RUSTC_BOOTSTRAP\", \"1\")\n-            .env(\"RUSTDOC\", builder.rustdoc(builder.compiler(0, builder.build.build)))\n+            .env(\"RUSTDOC\", builder.rustdoc(compiler))\n             .env(\"RUSTC\", &builder.initial_rustc);\n         if let Some(flags) = option_env!(\"RUSTFLAGS\") {\n             // Use the same rustc flags for testing as for \"normal\" compilation,\n@@ -2581,7 +2563,7 @@ impl Step for Bootstrap {\n         }\n         // rustbuild tests are racy on directory creation so just run them one at a time.\n         // Since there's not many this shouldn't be a problem.\n-        cargo_test_args(&mut cmd, &[\"--test-threads=1\"], &[], builder);\n+        run_cargo_test(cmd, &[\"--test-threads=1\"], &[], compiler, host, builder);\n     }\n \n     fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {"}]}