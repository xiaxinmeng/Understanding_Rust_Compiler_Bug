{"sha": "8e9aad268ef0994a2edfb77b33cffc4d5a220970", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlOWFhZDI2OGVmMDk5NGEyZWRmYjc3YjMzY2ZmYzRkNWEyMjA5NzA=", "commit": {"author": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-14T18:04:39Z"}, "committer": {"name": "Niv Kaminer", "email": "nivkner@zoho.com", "date": "2018-08-22T22:37:03Z"}, "message": "deemphasize immutability and improve swap explanation in pin module", "tree": {"sha": "e5ebd67ed2a63b79e2ec27a040abc2961d3a937b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5ebd67ed2a63b79e2ec27a040abc2961d3a937b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e9aad268ef0994a2edfb77b33cffc4d5a220970", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e9aad268ef0994a2edfb77b33cffc4d5a220970", "html_url": "https://github.com/rust-lang/rust/commit/8e9aad268ef0994a2edfb77b33cffc4d5a220970", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e9aad268ef0994a2edfb77b33cffc4d5a220970/comments", "author": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nivkner", "id": 22821514, "node_id": "MDQ6VXNlcjIyODIxNTE0", "avatar_url": "https://avatars.githubusercontent.com/u/22821514?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nivkner", "html_url": "https://github.com/nivkner", "followers_url": "https://api.github.com/users/nivkner/followers", "following_url": "https://api.github.com/users/nivkner/following{/other_user}", "gists_url": "https://api.github.com/users/nivkner/gists{/gist_id}", "starred_url": "https://api.github.com/users/nivkner/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nivkner/subscriptions", "organizations_url": "https://api.github.com/users/nivkner/orgs", "repos_url": "https://api.github.com/users/nivkner/repos", "events_url": "https://api.github.com/users/nivkner/events{/privacy}", "received_events_url": "https://api.github.com/users/nivkner/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f501a1bc46e5d589f3ee98d573206ef195890d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f501a1bc46e5d589f3ee98d573206ef195890d3", "html_url": "https://github.com/rust-lang/rust/commit/2f501a1bc46e5d589f3ee98d573206ef195890d3"}], "stats": {"total": 22, "additions": 9, "deletions": 13}, "files": [{"sha": "8cb57ade8651a9c23635836ba56c7a720bce416a", "filename": "src/liballoc/pin.rs", "status": "modified", "additions": 9, "deletions": 13, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/8e9aad268ef0994a2edfb77b33cffc4d5a220970/src%2Fliballoc%2Fpin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e9aad268ef0994a2edfb77b33cffc4d5a220970/src%2Fliballoc%2Fpin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fpin.rs?ref=8e9aad268ef0994a2edfb77b33cffc4d5a220970", "patch": "@@ -11,28 +11,25 @@\n //! Types which pin data to its location in memory\n //!\n //! It is sometimes useful to have objects that are guaranteed to not move,\n-//! in the sense that their placement in memory in consistent, and can thus be relied upon.\n+//! in the sense that their placement in memory does not change, and can thus be relied upon.\n //!\n //! A prime example of such a scenario would be building self-referencial structs,\n //! since moving an object with pointers to itself will invalidate them,\n //! which could cause undefined behavior.\n //!\n //! In order to prevent objects from moving, they must be *pinned*,\n //! by wrapping the data in special pointer types, such as [`PinMut`] and [`PinBox`].\n-//! These restrict access to the underlying data to only be immutable by implementing [`Deref`],\n+//! On top of ensuring the data cannot be taked by value by being pointers,\n+//! these types restrict access to the underlying data such that it cannot be moved out of them,\n //! unless the type implements the [`Unpin`] trait,\n-//! which indicates that it doesn't need these restrictions and can be safely mutated,\n-//! by implementing [`DerefMut`].\n+//! which indicates that it can be used safely without these restrictions.\n //!\n-//! This is done because, while modifying an object can be done in-place,\n-//! it might also relocate a buffer when its at full capacity,\n-//! or it might replace one object with another without logically \"moving\" them with [`swap`].\n+//! A type may be moved out of a reference to it using a function like [`swap`],\n+//! which replaces the contents of the references, and thus changes their place in memory.\n //!\n //! [`PinMut`]: struct.PinMut.html\n //! [`PinBox`]: struct.PinBox.html\n //! [`Unpin`]: ../../core/marker/trait.Unpin.html\n-//! [`DerefMut`]: ../../core/ops/trait.DerefMut.html\n-//! [`Deref`]: ../../core/ops/trait.Deref.html\n //! [`swap`]: ../../core/mem/fn.swap.html\n //!\n //! # Examples\n@@ -83,10 +80,9 @@\n //! let mut still_unmoved = unmoved;\n //! assert_eq!(still_unmoved.slice, NonNull::from(&still_unmoved.data));\n //!\n-//! // Now the only way to access to data (safely) is immutably,\n-//! // so this will fail to compile:\n-//! // still_unmoved.data.push_str(\" world\");\n-//!\n+//! // Since our type doesn't implement Unpin, this will fail to compile:\n+//! // let new_unmoved = Unmovable::new(\"world\".to_string());\n+//! // std::mem::swap(&mut *still_unmoved, &mut *new_unmoved);\n //! ```\n \n #![unstable(feature = \"pin\", issue = \"49150\")]"}]}