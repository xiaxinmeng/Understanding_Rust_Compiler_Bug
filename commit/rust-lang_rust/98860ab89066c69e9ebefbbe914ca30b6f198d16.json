{"sha": "98860ab89066c69e9ebefbbe914ca30b6f198d16", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4ODYwYWI4OTA2NmM2OWU5ZWJlZmJiZTkxNGNhMzBiNmYxOThkMTY=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-06T13:48:48Z"}, "committer": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2017-12-06T13:48:48Z"}, "message": "Add SnippetProvider", "tree": {"sha": "59eefe5f0cace20324b054e02ea085b4e545c81c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59eefe5f0cace20324b054e02ea085b4e545c81c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/98860ab89066c69e9ebefbbe914ca30b6f198d16", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/98860ab89066c69e9ebefbbe914ca30b6f198d16", "html_url": "https://github.com/rust-lang/rust/commit/98860ab89066c69e9ebefbbe914ca30b6f198d16", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/98860ab89066c69e9ebefbbe914ca30b6f198d16/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0432d4db35cee640ca96460f4ebc4baad3891d6d", "url": "https://api.github.com/repos/rust-lang/rust/commits/0432d4db35cee640ca96460f4ebc4baad3891d6d", "html_url": "https://github.com/rust-lang/rust/commit/0432d4db35cee640ca96460f4ebc4baad3891d6d"}], "stats": {"total": 28, "additions": 28, "deletions": 0}, "files": [{"sha": "510bf6e8f5cae66ea73f9ed1ca0a381e091d184f", "filename": "src/visitor.rs", "status": "modified", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/98860ab89066c69e9ebefbbe914ca30b6f198d16/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/98860ab89066c69e9ebefbbe914ca30b6f198d16/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=98860ab89066c69e9ebefbbe914ca30b6f198d16", "patch": "@@ -8,7 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+use std::rc::Rc;\n use std::cmp;\n+use std::mem;\n \n use strings::string_buffer::StringBuffer;\n use syntax::{ast, visit};\n@@ -47,6 +49,32 @@ fn is_extern_crate(item: &ast::Item) -> bool {\n     }\n }\n \n+/// Creates a string slice corresponding to the specified span.\n+pub struct SnippetProvider {\n+    /// A pointer to the content of the file we are formatting.\n+    big_snippet: *const Rc<String>,\n+    /// A position of the start of `big_snippet`, used as an offset.\n+    start_pos: usize,\n+}\n+\n+impl SnippetProvider {\n+    pub fn span_to_snippet(&self, span: Span) -> Option<&str> {\n+        let start_index = span.lo().to_usize().checked_sub(self.start_pos)?;\n+        let end_index = span.hi().to_usize().checked_sub(self.start_pos)?;\n+        unsafe { Some(&(*self.big_snippet)[start_index..end_index]) }\n+    }\n+\n+    pub fn from_codemap(codemap: &CodeMap, span: Span) -> Self {\n+        let filemap = codemap.lookup_char_pos(span.lo()).file;\n+        let big_snippet = unsafe { mem::transmute(&filemap.src) };\n+        let start_pos = filemap.start_pos.to_usize();\n+        SnippetProvider {\n+            big_snippet,\n+            start_pos,\n+        }\n+    }\n+}\n+\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,"}]}