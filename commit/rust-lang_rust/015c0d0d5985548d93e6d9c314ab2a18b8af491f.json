{"sha": "015c0d0d5985548d93e6d9c314ab2a18b8af491f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxNWMwZDBkNTk4NTU0OGQ5M2U2ZDljMzE0YWIyYTE4YjhhZjQ5MWY=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-07T19:50:37Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-04-07T19:51:27Z"}, "message": "rustc: Allow dereference expressions to be used as lvalues. Add a test case.", "tree": {"sha": "dba83daa45b50e18f0a3e8768aa489f5122b2ea3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dba83daa45b50e18f0a3e8768aa489f5122b2ea3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/015c0d0d5985548d93e6d9c314ab2a18b8af491f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/015c0d0d5985548d93e6d9c314ab2a18b8af491f", "html_url": "https://github.com/rust-lang/rust/commit/015c0d0d5985548d93e6d9c314ab2a18b8af491f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/015c0d0d5985548d93e6d9c314ab2a18b8af491f/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b4422cca2195be788d99c849e662c3c778496739", "url": "https://api.github.com/repos/rust-lang/rust/commits/b4422cca2195be788d99c849e662c3c778496739", "html_url": "https://github.com/rust-lang/rust/commit/b4422cca2195be788d99c849e662c3c778496739"}], "stats": {"total": 52, "additions": 32, "deletions": 20}, "files": [{"sha": "2e49924ddd7912f371d91b01902c2ff0a2fec87e", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/015c0d0d5985548d93e6d9c314ab2a18b8af491f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015c0d0d5985548d93e6d9c314ab2a18b8af491f/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=015c0d0d5985548d93e6d9c314ab2a18b8af491f", "patch": "@@ -2591,15 +2591,9 @@ fn trans_unary(@block_ctxt cx, ast.unop op,\n             ret res(sub.bcx, box);\n         }\n         case (ast.deref) {\n-            auto val = sub.bcx.build.GEP(sub.val,\n-                                         vec(C_int(0),\n-                                             C_int(abi.box_rc_field_body)));\n-            auto e_ty = node_ann_type(sub.bcx.fcx.ccx, a);\n-            if (ty.type_is_scalar(e_ty) ||\n-                ty.type_is_nil(e_ty)) {\n-                val = sub.bcx.build.Load(val);\n-            }\n-            ret res(sub.bcx, val);\n+            log \"deref expressions should have been translated using \" +\n+                \"trans_lval(), not trans_unary()\";\n+            fail;\n         }\n     }\n     fail;\n@@ -3908,6 +3902,15 @@ fn trans_lval(@block_ctxt cx, @ast.expr e) -> lval_result {\n         case (ast.expr_index(?base, ?idx, ?ann)) {\n             ret trans_index(cx, e.span, base, idx, ann);\n         }\n+        case (ast.expr_unary(?unop, ?base, ?ann)) {\n+            check (unop == ast.deref);\n+\n+            auto sub = trans_expr(cx, base);\n+            auto val = sub.bcx.build.GEP(sub.val,\n+                                         vec(C_int(0),\n+                                             C_int(abi.box_rc_field_body)));\n+            ret lval_mem(sub.bcx, val);\n+        }\n \n         // Kind of bizarre to pass an *entire* self-call here...but let's try\n         // it\n@@ -3925,7 +3928,9 @@ fn trans_lval(@block_ctxt cx, @ast.expr e) -> lval_result {\n \n             }\n         }\n-        case (_) { cx.fcx.ccx.sess.unimpl(\"expr variant in trans_lval\"); }\n+        case (_) {\n+            cx.fcx.ccx.sess.span_unimpl(e.span, \"expr variant in trans_lval\");\n+        }\n     }\n     fail;\n }\n@@ -4685,7 +4690,9 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n         }\n \n         case (ast.expr_unary(?op, ?x, ?ann)) {\n-            ret trans_unary(cx, op, x, ann);\n+            if (op != ast.deref) {\n+                ret trans_unary(cx, op, x, ann);\n+            }\n         }\n \n         case (ast.expr_binary(?op, ?x, ?y, _)) {\n@@ -4832,18 +4839,17 @@ fn trans_expr(@block_ctxt cx, @ast.expr e) -> result {\n             ret trans_recv(cx, lhs, rhs, ann);\n         }\n \n-        // lval cases fall through to trans_lval and then\n-        // possibly load the result (if it's non-structural).\n-\n         case (_) {\n-            auto t = ty.expr_ty(e);\n-            auto sub = trans_lval(cx, e);\n-            ret res(sub.res.bcx,\n-                    load_scalar_or_boxed(sub.res.bcx, sub.res.val, t));\n+            // The expression is an lvalue. Fall through.\n         }\n     }\n-    cx.fcx.ccx.sess.unimpl(\"expr variant in trans_expr\");\n-    fail;\n+\n+    // lval cases fall through to trans_lval and then\n+    // possibly load the result (if it's non-structural).\n+\n+    auto t = ty.expr_ty(e);\n+    auto sub = trans_lval(cx, e);\n+    ret res(sub.res.bcx, load_scalar_or_boxed(sub.res.bcx, sub.res.val, t));\n }\n \n // We pass structural values around the compiler \"by pointer\" and"}, {"sha": "ff76f9e6192318e7eb371df05fc1b8e780fa00b5", "filename": "src/test/run-pass/deref-lval.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/015c0d0d5985548d93e6d9c314ab2a18b8af491f/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/015c0d0d5985548d93e6d9c314ab2a18b8af491f/src%2Ftest%2Frun-pass%2Fderef-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fderef-lval.rs?ref=015c0d0d5985548d93e6d9c314ab2a18b8af491f", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    auto x = @mutable 5;\n+    *x = 1000;\n+    log *x;\n+}\n+"}]}