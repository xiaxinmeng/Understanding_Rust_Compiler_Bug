{"sha": "240dba54677c09a455d15f76f8d4f328348ebd99", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0MGRiYTU0Njc3YzA5YTQ1NWQxNWY3NmY4ZDRmMzI4MzQ4ZWJkOTk=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-31T07:45:45Z"}, "committer": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2016-05-31T07:45:45Z"}, "message": "Merge pull request #1007 from kamalmarhubi/basic-line-ranges-v2\n\nAdd infrastructure for formatting specific line ranges", "tree": {"sha": "441e412acf1021eeb55055a34df292a40e669742", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/441e412acf1021eeb55055a34df292a40e669742"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/240dba54677c09a455d15f76f8d4f328348ebd99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/240dba54677c09a455d15f76f8d4f328348ebd99", "html_url": "https://github.com/rust-lang/rust/commit/240dba54677c09a455d15f76f8d4f328348ebd99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/240dba54677c09a455d15f76f8d4f328348ebd99/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5436977bd5262cb8c6af90d727bda4494b7a23a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5436977bd5262cb8c6af90d727bda4494b7a23a8", "html_url": "https://github.com/rust-lang/rust/commit/5436977bd5262cb8c6af90d727bda4494b7a23a8"}, {"sha": "e252100cf67ae2afe8d4d9687dcafe7a4fbb8f72", "url": "https://api.github.com/repos/rust-lang/rust/commits/e252100cf67ae2afe8d4d9687dcafe7a4fbb8f72", "html_url": "https://github.com/rust-lang/rust/commit/e252100cf67ae2afe8d4d9687dcafe7a4fbb8f72"}], "stats": {"total": 690, "additions": 638, "deletions": 52}, "files": [{"sha": "fc8070979d6f63488ed42f7341f769d3482bdcd9", "filename": "Cargo.lock", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -7,6 +7,7 @@ dependencies = [\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itertools 0.4.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"log 0.3.6 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"multimap 0.3.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.1.71 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"rustc-serialize 0.3.19 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.0.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -80,6 +81,11 @@ dependencies = [\n  \"libc 0.2.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"multimap\"\n+version = \"0.3.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"regex\"\n version = \"0.1.71\""}, {"sha": "9d8ad68ed8aba3f40cbddd746b9485f2080bdb3b", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -26,3 +26,4 @@ log = \"0.3\"\n env_logger = \"0.3\"\n getopts = \"0.2\"\n itertools = \"0.4.15\"\n+multimap = \"0.3\""}, {"sha": "5d9f262d659f398b010b2bcc773094851ee64773", "filename": "README.md", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -73,6 +73,25 @@ the command line. For example `rustfmt --write-mode=display src/filename.rs`\n \n `cargo fmt` uses `--write-mode=replace` by default.\n \n+If you want to restrict reformatting to specific sets of lines, you can\n+use the `--file-lines` option. Its argument is a JSON array of objects\n+with `file` and `range` properties, where `file` is a file name, and\n+`range` is an array representing a range of lines like `[7,13]`. Ranges\n+are 1-based and inclusive of both end points. Specifying an empty array\n+will result in no files being formatted. For example,\n+\n+```\n+rustfmt --file-lines '[\n+    {\"file\":\"src/lib.rs\",\"range\":[7,13]},\n+    {\"file\":\"src/lib.rs\",\"range\":[21,29]},\n+    {\"file\":\"src/foo.rs\",\"range\":[10,11]},\n+    {\"file\":\"src/foo.rs\",\"range\":[15,15]}]'\n+```\n+\n+would format lines `7-13` and `21-29` of `src/lib.rs`, and lines `10-11`,\n+and `15` of `src/foo.rs`. No other files would be formatted, even if they\n+are included as out of line modules from `src/lib.rs`.\n+\n If `rustfmt` successfully reformatted the code it will exit with `0` exit\n status. Exit status `1` signals some unexpected error, like an unknown option or\n a failure to read a file. Exit status `2` is returned if there are syntax errors"}, {"sha": "5aa7cc4e080e3485f3a759c5fbf9859364e051de", "filename": "src/bin/rustfmt.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fbin%2Frustfmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fbin%2Frustfmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Frustfmt.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -18,6 +18,7 @@ extern crate env_logger;\n extern crate getopts;\n \n use rustfmt::{run, Input, Summary};\n+use rustfmt::file_lines::FileLines;\n use rustfmt::config::{Config, WriteMode};\n \n use std::{env, error};\n@@ -57,6 +58,7 @@ struct CliOptions {\n     skip_children: bool,\n     verbose: bool,\n     write_mode: Option<WriteMode>,\n+    file_lines: FileLines, // Default is all lines in all files.\n }\n \n impl CliOptions {\n@@ -73,12 +75,17 @@ impl CliOptions {\n             }\n         }\n \n+        if let Some(ref file_lines) = matches.opt_str(\"file-lines\") {\n+            options.file_lines = try!(file_lines.parse());\n+        }\n+\n         Ok(options)\n     }\n \n-    fn apply_to(&self, config: &mut Config) {\n+    fn apply_to(self, config: &mut Config) {\n         config.skip_children = self.skip_children;\n         config.verbose = self.verbose;\n+        config.file_lines = self.file_lines;\n         if let Some(write_mode) = self.write_mode {\n             config.write_mode = write_mode;\n         }\n@@ -168,6 +175,10 @@ fn make_opts() -> Options {\n                 \"Recursively searches the given path for the rustfmt.toml config file. If not \\\n                  found reverts to the input file path\",\n                 \"[Path for the configuration file]\");\n+    opts.optopt(\"\",\n+                \"file-lines\",\n+                \"Format specified line ranges. See README for more detail on the JSON format.\",\n+                \"JSON\");\n \n     opts\n }\n@@ -198,8 +209,12 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n \n             Ok(run(Input::Text(input), &config))\n         }\n-        Operation::Format { files, config_path } => {\n+        Operation::Format { mut files, config_path } => {\n             let options = try!(CliOptions::from_matches(&matches));\n+\n+            // Add any additional files that were specified via `--file-lines`.\n+            files.extend(options.file_lines.files().cloned().map(PathBuf::from));\n+\n             let mut config = Config::default();\n             let mut path = None;\n             // Load the config path file if provided\n@@ -227,7 +242,7 @@ fn execute(opts: &Options) -> FmtResult<Summary> {\n                     config = config_tmp;\n                 }\n \n-                options.apply_to(&mut config);\n+                options.clone().apply_to(&mut config);\n                 error_summary.add(run(Input::File(file), &config));\n             }\n             Ok(error_summary)\n@@ -306,8 +321,8 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n             Some(dir)\n         });\n \n-    // if no file argument is supplied, read from stdin\n-    if matches.free.is_empty() {\n+    // if no file argument is supplied and `--file-lines` is not specified, read from stdin\n+    if matches.free.is_empty() && !matches.opt_present(\"file-lines\") {\n \n         let mut buffer = String::new();\n         try!(io::stdin().read_to_string(&mut buffer));\n@@ -318,6 +333,7 @@ fn determine_operation(matches: &Matches) -> FmtResult<Operation> {\n         });\n     }\n \n+    // We append files from `--file-lines` later in `execute()`.\n     let files: Vec<_> = matches.free.iter().map(PathBuf::from).collect();\n \n     Ok(Operation::Format {"}, {"sha": "9ec5c6630640bf97b8d4f3fa48754cc7b0c6c316", "filename": "src/codemap.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcodemap.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,94 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module contains utilities that work with the `CodeMap` from libsyntax / syntex_syntax.\n+//! This includes extension traits and methods for looking up spans and line ranges for AST nodes.\n+\n+use std::rc::Rc;\n+\n+use syntax::codemap::{BytePos, CodeMap, FileMap, Span};\n+\n+use comment::FindUncommented;\n+\n+/// A range of lines in a file, inclusive of both ends.\n+pub struct LineRange {\n+    pub file: Rc<FileMap>,\n+    pub lo: usize,\n+    pub hi: usize,\n+}\n+\n+impl LineRange {\n+    pub fn file_name(&self) -> &str {\n+        self.file.as_ref().name.as_str()\n+    }\n+}\n+\n+pub trait SpanUtils {\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos;\n+}\n+\n+pub trait LineRangeUtils {\n+    /// Returns the `LineRange` that corresponds to `span` in `self`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// Panics if `span` crosses a file boundary, which shouldn't happen.\n+    fn lookup_line_range(&self, span: Span) -> LineRange;\n+}\n+\n+impl SpanUtils for CodeMap {\n+    #[inline]\n+    fn span_after(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+\n+    #[inline]\n+    fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let mut offset = 0;\n+\n+        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n+            offset += additional_offset + needle.len();\n+        }\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+\n+    #[inline]\n+    fn span_before(&self, original: Span, needle: &str) -> BytePos {\n+        let snippet = self.span_to_snippet(original).unwrap();\n+        let offset = snippet.find_uncommented(needle).unwrap();\n+\n+        original.lo + BytePos(offset as u32)\n+    }\n+}\n+\n+impl LineRangeUtils for CodeMap {\n+    fn lookup_line_range(&self, span: Span) -> LineRange {\n+        let lo = self.lookup_char_pos(span.lo);\n+        let hi = self.lookup_char_pos(span.hi);\n+\n+        assert!(lo.file.name == hi.file.name,\n+                \"span crossed file boundary: lo: {:?}, hi: {:?}\",\n+                lo,\n+                hi);\n+\n+        LineRange {\n+            file: lo.file.clone(),\n+            lo: lo.line,\n+            hi: hi.line,\n+        }\n+    }\n+}"}, {"sha": "51daa7a505a0e12582d9ba9a305c076553d32f56", "filename": "src/config.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -10,6 +10,7 @@\n \n extern crate toml;\n \n+use file_lines::FileLines;\n use lists::{SeparatorTactic, ListTactic};\n use std::io::Write;\n \n@@ -200,6 +201,12 @@ impl ConfigType for String {\n     }\n }\n \n+impl ConfigType for FileLines {\n+    fn doc_hint() -> String {\n+        String::from(\"<json>\")\n+    }\n+}\n+\n pub struct ConfigHelpItem {\n     option_name: &'static str,\n     doc_string: &'static str,\n@@ -327,6 +334,9 @@ macro_rules! create_config {\n create_config! {\n     verbose: bool, false, \"Use verbose output\";\n     skip_children: bool, false, \"Don't reformat out of line modules\";\n+    file_lines: FileLines, FileLines::all(),\n+        \"Lines to format; this is not supported in rustfmt.toml, and can only be specified \\\n+         via the --file-lines option\";\n     max_width: usize, 100, \"Maximum width of each line\";\n     ideal_width: usize, 80, \"Ideal width of each line\";\n     tab_spaces: usize, 4, \"Number of spaces per tab\";"}, {"sha": "af0492b291359ae1cb46cfce0faff64f94bd252c", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -16,12 +16,13 @@ use std::iter::ExactSizeIterator;\n use std::fmt::Write;\n \n use {Indent, Spanned};\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTactic,\n             DefinitiveListTactic, definitive_tactic, ListItem, format_item_list};\n use string::{StringFormat, rewrite_string};\n-use utils::{CodeMapSpanUtils, extra_offset, last_line_width, wrap_str, binary_search,\n-            first_line_width, semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n+use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n+            semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr};\n use visitor::FmtVisitor;\n use config::{Config, StructLitStyle, MultilineStyle, ElseIfBraceStyle, ControlBraceStyle};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};"}, {"sha": "28fedad4cfd4ce1e4309e7aed4e621120a271716", "filename": "src/file_lines.rs", "status": "added", "additions": 232, "deletions": 0, "changes": 232, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Ffile_lines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Ffile_lines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ffile_lines.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,232 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+//! This module contains types and functions to support formatting specific line ranges.\n+use std::{cmp, iter, str};\n+\n+use itertools::Itertools;\n+use multimap::MultiMap;\n+use rustc_serialize::{self, json};\n+\n+use codemap::LineRange;\n+\n+/// A range that is inclusive of both ends.\n+#[derive(Clone, Copy, Debug, Eq, PartialEq, RustcDecodable)]\n+struct Range {\n+    pub lo: usize,\n+    pub hi: usize,\n+}\n+\n+impl<'a> From<&'a LineRange> for Range {\n+    fn from(range: &'a LineRange) -> Range {\n+        Range::new(range.lo, range.hi)\n+    }\n+}\n+\n+impl Range {\n+    fn new(lo: usize, hi: usize) -> Range {\n+        Range { lo: lo, hi: hi }\n+    }\n+\n+    fn is_empty(self) -> bool {\n+        self.lo > self.hi\n+    }\n+\n+    fn contains(self, other: Range) -> bool {\n+        if other.is_empty() {\n+            true\n+        } else {\n+            !self.is_empty() && self.lo <= other.lo && self.hi >= other.hi\n+        }\n+    }\n+\n+    fn intersects(self, other: Range) -> bool {\n+        if self.is_empty() || other.is_empty() {\n+            false\n+        } else {\n+            (self.lo <= other.hi && other.hi <= self.hi) ||\n+            (other.lo <= self.hi && self.hi <= other.hi)\n+        }\n+    }\n+\n+    fn adjacent_to(self, other: Range) -> bool {\n+        if self.is_empty() || other.is_empty() {\n+            false\n+        } else {\n+            self.hi + 1 == other.lo || other.hi + 1 == self.lo\n+        }\n+    }\n+\n+    /// Returns a new `Range` with lines from `self` and `other` if they were adjacent or\n+    /// intersect; returns `None` otherwise.\n+    fn merge(self, other: Range) -> Option<Range> {\n+        if self.adjacent_to(other) || self.intersects(other) {\n+            Some(Range::new(cmp::min(self.lo, other.lo), cmp::max(self.hi, other.hi)))\n+        } else {\n+            None\n+        }\n+    }\n+}\n+\n+/// A set of lines in files.\n+///\n+/// It is represented as a multimap keyed on file names, with values a collection of\n+/// non-overlapping ranges sorted by their start point. An inner `None` is interpreted to mean all\n+/// lines in all files.\n+#[derive(Clone, Debug, Default)]\n+pub struct FileLines(Option<MultiMap<String, Range>>);\n+\n+/// Normalizes the ranges so that the invariants for `FileLines` hold: ranges are non-overlapping,\n+/// and ordered by their start point.\n+fn normalize_ranges(map: &mut MultiMap<String, Range>) {\n+    for (_, ranges) in map.iter_all_mut() {\n+        ranges.sort_by_key(|x| x.lo);\n+        let merged = ranges.drain(..).coalesce(|x, y| x.merge(y).ok_or((x, y))).collect();\n+        *ranges = merged;\n+    }\n+}\n+\n+impl FileLines {\n+    /// Creates a `FileLines` that contains all lines in all files.\n+    pub fn all() -> FileLines {\n+        FileLines(None)\n+    }\n+\n+    /// Creates a `FileLines` from a `MultiMap`, ensuring that the invariants hold.\n+    fn from_multimap(map: MultiMap<String, Range>) -> FileLines {\n+        let mut map = map;\n+        normalize_ranges(&mut map);\n+        FileLines(Some(map))\n+    }\n+\n+    /// Returns an iterator over the files contained in `self`.\n+    pub fn files(&self) -> Files {\n+        Files(self.0.as_ref().map(MultiMap::keys))\n+    }\n+\n+    /// Returns true if `range` is fully contained in `self`.\n+    pub fn contains(&self, range: &LineRange) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match map.get_vec(range.file_name()) {\n+            None => false,\n+            Some(ranges) => ranges.iter().any(|r| r.contains(Range::from(range))),\n+        }\n+    }\n+\n+    /// Returns true if any lines in `range` are in `self`.\n+    pub fn intersects(&self, range: &LineRange) -> bool {\n+        let map = match self.0 {\n+            // `None` means \"all lines in all files\".\n+            None => return true,\n+            Some(ref map) => map,\n+        };\n+\n+        match map.get_vec(range.file_name()) {\n+            None => false,\n+            Some(ranges) => ranges.iter().any(|r| r.intersects(Range::from(range))),\n+        }\n+    }\n+}\n+\n+/// FileLines files iterator.\n+pub struct Files<'a>(Option<::std::collections::hash_map::Keys<'a, String, Vec<Range>>>);\n+\n+impl<'a> iter::Iterator for Files<'a> {\n+    type Item = &'a String;\n+\n+    fn next(&mut self) -> Option<&'a String> {\n+        self.0.as_mut().and_then(Iterator::next)\n+    }\n+}\n+\n+// This impl is needed for `Config::override_value` to work for use in tests.\n+impl str::FromStr for FileLines {\n+    type Err = String;\n+\n+    fn from_str(s: &str) -> Result<FileLines, String> {\n+        let v: Vec<JsonSpan> = try!(json::decode(s).map_err(|e| e.to_string()));\n+        let m = v.into_iter().map(JsonSpan::into_tuple).collect();\n+        Ok(FileLines::from_multimap(m))\n+    }\n+}\n+\n+// For JSON decoding.\n+#[derive(Clone, Debug, RustcDecodable)]\n+struct JsonSpan {\n+    file: String,\n+    range: (usize, usize),\n+}\n+\n+impl JsonSpan {\n+    // To allow `collect()`ing into a `MultiMap`.\n+    fn into_tuple(self) -> (String, Range) {\n+        let (lo, hi) = self.range;\n+        (self.file, Range::new(lo, hi))\n+    }\n+}\n+\n+// This impl is needed for inclusion in the `Config` struct. We don't have a toml representation\n+// for `FileLines`, so it will just panic instead.\n+impl rustc_serialize::Decodable for FileLines {\n+    fn decode<D: rustc_serialize::Decoder>(_: &mut D) -> Result<Self, D::Error> {\n+        panic!(\"FileLines cannot be deserialized from a project rustfmt.toml file: please \\\n+                specify it via the `--file-lines` option instead\");\n+    }\n+}\n+\n+#[cfg(test)]\n+mod test {\n+    use super::Range;\n+\n+    #[test]\n+    fn test_range_intersects() {\n+        assert!(Range::new(1, 2).intersects(Range::new(1, 1)));\n+        assert!(Range::new(1, 2).intersects(Range::new(2, 2)));\n+        assert!(!Range::new(1, 2).intersects(Range::new(0, 0)));\n+        assert!(!Range::new(1, 2).intersects(Range::new(3, 10)));\n+        assert!(!Range::new(1, 3).intersects(Range::new(5, 5)));\n+    }\n+\n+    #[test]\n+    fn test_range_adjacent_to() {\n+        assert!(!Range::new(1, 2).adjacent_to(Range::new(1, 1)));\n+        assert!(!Range::new(1, 2).adjacent_to(Range::new(2, 2)));\n+        assert!(Range::new(1, 2).adjacent_to(Range::new(0, 0)));\n+        assert!(Range::new(1, 2).adjacent_to(Range::new(3, 10)));\n+        assert!(!Range::new(1, 3).adjacent_to(Range::new(5, 5)));\n+    }\n+\n+    #[test]\n+    fn test_range_contains() {\n+        assert!(Range::new(1, 2).contains(Range::new(1, 1)));\n+        assert!(Range::new(1, 2).contains(Range::new(2, 2)));\n+        assert!(!Range::new(1, 2).contains(Range::new(0, 0)));\n+        assert!(!Range::new(1, 2).contains(Range::new(3, 10)));\n+    }\n+\n+    #[test]\n+    fn test_range_merge() {\n+        assert_eq!(None, Range::new(1, 3).merge(Range::new(5, 5)));\n+        assert_eq!(None, Range::new(4, 7).merge(Range::new(0, 1)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(4, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(5, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 5).merge(Range::new(6, 7)));\n+        assert_eq!(Some(Range::new(3, 7)),\n+                   Range::new(3, 7).merge(Range::new(4, 5)));\n+    }\n+}"}, {"sha": "89030392774c36fd52cb54abe9079e19cde2b7e3", "filename": "src/imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -9,9 +9,9 @@\n // except according to those terms.\n \n use Indent;\n+use codemap::SpanUtils;\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n use types::rewrite_path;\n-use utils::CodeMapSpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n \n use syntax::ast;"}, {"sha": "d83ad3c88ee83d1767739e23439de7569ff6f923", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -11,8 +11,9 @@\n // Formatting top-level items - functions, structs, enums, traits, impls.\n \n use Indent;\n-use utils::{CodeMapSpanUtils, format_mutability, format_visibility, contains_skip, end_typaram,\n-            wrap_str, last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n+use codemap::SpanUtils;\n+use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n+            last_line_width, semicolon_for_expr, format_unsafety, trim_newlines};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};"}, {"sha": "322eed374de8b50a3f5411cf44a0c837568b2679", "filename": "src/lib.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -25,6 +25,7 @@ extern crate regex;\n extern crate diff;\n extern crate term;\n extern crate itertools;\n+extern crate multimap;\n \n use syntax::ast;\n use syntax::codemap::{mk_sp, CodeMap, Span};\n@@ -52,7 +53,9 @@ pub use self::summary::Summary;\n #[macro_use]\n mod utils;\n pub mod config;\n+pub mod codemap;\n pub mod filemap;\n+pub mod file_lines;\n pub mod visitor;\n mod checkstyle;\n mod items;\n@@ -470,6 +473,7 @@ pub fn format_input<T: Write>(input: Input,\n     }\n }\n \n+#[derive(Debug)]\n pub enum Input {\n     File(PathBuf),\n     Text(String),"}, {"sha": "9cb0f8619c0b2d6247ad92cbd53bd3bfa070eb1e", "filename": "src/macros.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -25,10 +25,11 @@ use syntax::parse::tts_to_parser;\n use syntax::codemap::{mk_sp, BytePos};\n \n use Indent;\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use expr::{rewrite_call, rewrite_array};\n use comment::{FindUncommented, contains_comment};\n-use utils::{CodeMapSpanUtils, wrap_str};\n+use utils::wrap_str;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n "}, {"sha": "a0b15a0f8c9e3be98f7ec7f07afa86184bbf4507", "filename": "src/patterns.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -9,8 +9,9 @@\n // except according to those terms.\n \n use Indent;\n+use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{CodeMapSpanUtils, wrap_str, format_mutability};\n+use utils::{wrap_str, format_mutability};\n use lists::{format_item_list, itemize_list};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use types::rewrite_path;"}, {"sha": "b1b9b749dd8e19a4cfd5f3c033ab953a0d862877", "filename": "src/types.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -17,9 +17,10 @@ use syntax::codemap::{self, Span, BytePos};\n use syntax::abi;\n \n use {Indent, Spanned};\n+use codemap::SpanUtils;\n use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{CodeMapSpanUtils, extra_offset, format_mutability, wrap_str};\n+use utils::{extra_offset, format_mutability, wrap_str};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple};\n use config::TypeDensity;\n "}, {"sha": "82fbb8d5925ade33b22c260219efe9a00c671bd7", "filename": "src/utils.rs", "status": "modified", "additions": 1, "deletions": 38, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -14,51 +14,14 @@ use std::cmp::Ordering;\n use itertools::Itertools;\n \n use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, Path};\n-use syntax::codemap::{CodeMap, Span, BytePos};\n+use syntax::codemap::BytePos;\n use syntax::abi;\n \n use Indent;\n-use comment::FindUncommented;\n use rewrite::{Rewrite, RewriteContext};\n \n use SKIP_ANNOTATION;\n \n-pub trait CodeMapSpanUtils {\n-    fn span_after(&self, original: Span, needle: &str) -> BytePos;\n-    fn span_after_last(&self, original: Span, needle: &str) -> BytePos;\n-    fn span_before(&self, original: Span, needle: &str) -> BytePos;\n-}\n-\n-impl CodeMapSpanUtils for CodeMap {\n-    #[inline]\n-    fn span_after(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap() + needle.len();\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-\n-    #[inline]\n-    fn span_after_last(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let mut offset = 0;\n-\n-        while let Some(additional_offset) = snippet[offset..].find_uncommented(needle) {\n-            offset += additional_offset + needle.len();\n-        }\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-\n-    #[inline]\n-    fn span_before(&self, original: Span, needle: &str) -> BytePos {\n-        let snippet = self.span_to_snippet(original).unwrap();\n-        let offset = snippet.find_uncommented(needle).unwrap();\n-\n-        original.lo + BytePos(offset as u32)\n-    }\n-}\n-\n // Computes the length of a string's last line, minus offset.\n #[inline]\n pub fn extra_offset(text: &str, offset: Indent) -> usize {"}, {"sha": "48b5e0ff7d247e74c7a78188cfdf7cc3c9a9cb52", "filename": "src/visitor.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -15,7 +15,8 @@ use syntax::parse::ParseSess;\n use strings::string_buffer::StringBuffer;\n \n use Indent;\n-use utils::{self, CodeMapSpanUtils};\n+use utils;\n+use codemap::{LineRangeUtils, SpanUtils};\n use config::Config;\n use rewrite::{Rewrite, RewriteContext};\n use comment::rewrite_comment;\n@@ -42,6 +43,15 @@ pub struct FmtVisitor<'a> {\n \n impl<'a> FmtVisitor<'a> {\n     fn visit_stmt(&mut self, stmt: &ast::Stmt) {\n+        debug!(\"visit_stmt: {:?} {:?}\",\n+               self.codemap.lookup_char_pos(stmt.span.lo),\n+               self.codemap.lookup_char_pos(stmt.span.hi));\n+\n+        // FIXME(#434): Move this check to somewhere more central, eg Rewrite.\n+        if !self.config.file_lines.contains(&self.codemap.lookup_line_range(stmt.span)) {\n+            return;\n+        }\n+\n         match stmt.node {\n             ast::StmtKind::Decl(ref decl, _) => {\n                 if let ast::DeclKind::Item(ref item) = decl.node {"}, {"sha": "43c18d8f46fa112c20472baf0240d2104adf8aa9", "filename": "tests/source/file-lines-1.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-1.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-1.rs\",\"range\":[4,8]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "6f8e9e6db3a2b1de2cfc63c2548d6c71caae7b0a", "filename": "tests/source/file-lines-2.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-2.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-2.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+            .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "73d482695d6ee4dd8a26ac23819ffeddceda6689", "filename": "tests/source/file-lines-3.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-3.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,29 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[4,8]},{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "381f021515fed0897d606cd8b32ab66762dbe884", "filename": "tests/source/file-lines-4.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Fsource%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ffile-lines-4.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: []\n+// (Test that nothing is formatted if an empty array is specified.)\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "5b8478e03032ffa1c84d25c5e3522dab587d76f7", "filename": "tests/target/file-lines-1.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-1.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-1.rs\",\"range\":[4,8]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+            field1: val1,\n+            field2: val2,\n+        }\n+        .method_call()\n+        .method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "db4902d49b7c5ec6aee974eb2dc1250a990e2324", "filename": "tests/target/file-lines-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-2.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,24 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-2.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond { val1 } else { val2 }.method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "19359b2ddf9ae1436e5d43182fd21618dc7643b2", "filename": "tests/target/file-lines-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-3.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,25 @@\n+// rustfmt-file_lines: [{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[4,8]},{\"file\":\"tests/source/file-lines-3.rs\",\"range\":[10,15]}]\n+\n+fn floaters() {\n+    let x = Foo {\n+            field1: val1,\n+            field2: val2,\n+        }\n+        .method_call()\n+        .method_call();\n+\n+    let y = if cond { val1 } else { val2 }.method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}, {"sha": "381f021515fed0897d606cd8b32ab66762dbe884", "filename": "tests/target/file-lines-4.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/240dba54677c09a455d15f76f8d4f328348ebd99/tests%2Ftarget%2Ffile-lines-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ffile-lines-4.rs?ref=240dba54677c09a455d15f76f8d4f328348ebd99", "patch": "@@ -0,0 +1,30 @@\n+// rustfmt-file_lines: []\n+// (Test that nothing is formatted if an empty array is specified.)\n+\n+fn floaters() {\n+    let x = Foo {\n+                field1: val1,\n+                field2: val2,\n+            }\n+            .method_call().method_call();\n+\n+    let y = if cond {\n+                val1\n+            } else {\n+                val2\n+            }\n+                .method_call();\n+\n+    {\n+        match x {\n+            PushParam => {\n+                // params are 1-indexed\n+                stack.push(mparams[match cur.to_digit(10) {\n+                                            Some(d) => d as usize - 1,\n+                                            None => return Err(\"bad param number\".to_owned()),\n+                                        }]\n+                               .clone());\n+            }\n+        }\n+    }\n+}"}]}