{"sha": "5b4dad7ad2666237a45e0467374fd744dd01bb6e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViNGRhZDdhZDI2NjYyMzdhNDVlMDQ2NzM3NGZkNzQ0ZGQwMWJiNmU=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-16T10:52:00Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-17T21:37:16Z"}, "message": "Derive HashStable_Generic for ABI types.", "tree": {"sha": "5c6259d186b2beb730a9c2b33a665656e579206a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6259d186b2beb730a9c2b33a665656e579206a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b4dad7ad2666237a45e0467374fd744dd01bb6e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b4dad7ad2666237a45e0467374fd744dd01bb6e", "html_url": "https://github.com/rust-lang/rust/commit/5b4dad7ad2666237a45e0467374fd744dd01bb6e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b4dad7ad2666237a45e0467374fd744dd01bb6e/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e8e7ad6fb86dc07cb4466a170a38b97d38746902", "url": "https://api.github.com/repos/rust-lang/rust/commits/e8e7ad6fb86dc07cb4466a170a38b97d38746902", "html_url": "https://github.com/rust-lang/rust/commit/e8e7ad6fb86dc07cb4466a170a38b97d38746902"}], "stats": {"total": 60, "additions": 8, "deletions": 52}, "files": [{"sha": "ac781819cc35e7e652a28dda3bc60f7ffb0a2515", "filename": "src/librustc_target/abi/mod.rs", "status": "modified", "additions": 8, "deletions": 52, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/5b4dad7ad2666237a45e0467374fd744dd01bb6e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b4dad7ad2666237a45e0467374fd744dd01bb6e/src%2Flibrustc_target%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fabi%2Fmod.rs?ref=5b4dad7ad2666237a45e0467374fd744dd01bb6e", "patch": "@@ -6,7 +6,6 @@ use crate::spec::Target;\n use std::ops::{Add, Deref, Sub, Mul, AddAssign, Range, RangeInclusive};\n \n use rustc_index::vec::{Idx, IndexVec};\n-use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_macros::HashStable_Generic;\n use syntax_pos::Span;\n \n@@ -244,16 +243,11 @@ pub enum Endian {\n \n /// Size of a type in bytes.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct Size {\n     raw: u64\n }\n \n-impl<CTX> HashStable<CTX> for Size {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.bytes().hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl Size {\n     pub const ZERO: Size = Self::from_bytes(0);\n \n@@ -373,16 +367,11 @@ impl AddAssign for Size {\n \n /// Alignment of a type in bytes (always a power of two).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct Align {\n     pow2: u8,\n }\n \n-impl<CTX> HashStable<CTX> for Align {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.bytes().hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl Align {\n     pub fn from_bits(bits: u64) -> Result<Align, String> {\n         Align::from_bytes(Size::from_bits(bits).bytes())\n@@ -436,8 +425,8 @@ impl Align {\n }\n \n /// A pair of aligments, ABI-mandated and preferred.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug,\n-         RustcEncodable, RustcDecodable, HashStable_Generic)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n+#[derive(HashStable_Generic)]\n pub struct AbiAndPrefAlign {\n     pub abi: Align,\n     pub pref: Align,\n@@ -603,6 +592,7 @@ impl Primitive {\n \n /// Information about one scalar component of a Rust type.\n #[derive(Clone, PartialEq, Eq, Hash, Debug)]\n+#[derive(HashStable_Generic)]\n pub struct Scalar {\n     pub value: Primitive,\n \n@@ -623,15 +613,6 @@ pub struct Scalar {\n     pub valid_range: RangeInclusive<u128>,\n }\n \n-impl<CTX> HashStable<CTX> for Scalar {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        let Scalar { value, ref valid_range } = *self;\n-        value.hash_stable(hcx, hasher);\n-        valid_range.start().hash_stable(hcx, hasher);\n-        valid_range.end().hash_stable(hcx, hasher);\n-    }\n-}\n-\n impl Scalar {\n     pub fn is_bool(&self) -> bool {\n         if let Int(I8, _) = self.value {\n@@ -824,12 +805,8 @@ impl Abi {\n }\n \n rustc_index::newtype_index! {\n-    pub struct VariantIdx { .. }\n-}\n-\n-impl<CTX> HashStable<CTX> for VariantIdx {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        self.as_u32().hash_stable(hcx, hasher)\n+    pub struct VariantIdx {\n+        derive [HashStable_Generic]\n     }\n }\n \n@@ -851,7 +828,7 @@ pub enum Variants {\n     },\n }\n \n-#[derive(PartialEq, Eq, Hash, Debug)]\n+#[derive(PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub enum DiscriminantKind {\n     /// Integer tag holding the discriminant value itself.\n     Tag,\n@@ -872,27 +849,6 @@ pub enum DiscriminantKind {\n     },\n }\n \n-impl<CTX> HashStable<CTX> for DiscriminantKind {\n-    fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n-        use DiscriminantKind::*;\n-        std::mem::discriminant(self).hash_stable(hcx, hasher);\n-\n-        match *self {\n-            Tag => {}\n-            Niche {\n-                dataful_variant,\n-                ref niche_variants,\n-                niche_start,\n-            } => {\n-                dataful_variant.hash_stable(hcx, hasher);\n-                niche_variants.start().hash_stable(hcx, hasher);\n-                niche_variants.end().hash_stable(hcx, hasher);\n-                niche_start.hash_stable(hcx, hasher);\n-            }\n-        }\n-    }\n-}\n-\n #[derive(Clone, PartialEq, Eq, Hash, Debug, HashStable_Generic)]\n pub struct Niche {\n     pub offset: Size,"}]}