{"sha": "7a14f4994eb4527a38d02c61fa83822df02f7b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhMTRmNDk5NGViNDUyN2EzOGQwMmM2MWZhODM4MjJkZjAyZjdiNWQ=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-17T12:48:32Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2015-02-18T00:27:51Z"}, "message": "Update tests for the Send - 'static change.", "tree": {"sha": "d9d3698e9f2897195403fdf196d05b633bd4f581", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9d3698e9f2897195403fdf196d05b633bd4f581"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a14f4994eb4527a38d02c61fa83822df02f7b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a14f4994eb4527a38d02c61fa83822df02f7b5d", "html_url": "https://github.com/rust-lang/rust/commit/7a14f4994eb4527a38d02c61fa83822df02f7b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a14f4994eb4527a38d02c61fa83822df02f7b5d/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "adfcd93f0c3b624399934558f63d945b7b6b663a", "url": "https://api.github.com/repos/rust-lang/rust/commits/adfcd93f0c3b624399934558f63d945b7b6b663a", "html_url": "https://github.com/rust-lang/rust/commit/adfcd93f0c3b624399934558f63d945b7b6b663a"}], "stats": {"total": 235, "additions": 52, "deletions": 183}, "files": [{"sha": "6dd73273122c57434ad4df653c7dbec96be5846a", "filename": "src/libstd/old_io/net/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fnet%2Fpipe.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -287,7 +287,7 @@ mod tests {\n \n     pub fn smalltest<F,G>(server: F, client: G)\n         where F : FnOnce(UnixStream), F : Send,\n-              G : FnOnce(UnixStream), G : Send\n+              G : FnOnce(UnixStream), G : Send + 'static\n     {\n         let path1 = next_test_unix();\n         let path2 = path1.clone();"}, {"sha": "05b5e47103f22e85088f0d8bb68c77a09a3d533a", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -458,7 +458,7 @@ impl Child {\n     /// the parent waits for the child to exit.\n     pub fn wait_with_output(mut self) -> io::Result<Output> {\n         drop(self.stdin.take());\n-        fn read<T: Read + Send>(stream: Option<T>) -> Receiver<io::Result<Vec<u8>>> {\n+        fn read<T: Read + Send + 'static>(stream: Option<T>) -> Receiver<io::Result<Vec<u8>>> {\n             let (tx, rx) = channel();\n             match stream {\n                 Some(stream) => {"}, {"sha": "d5dcdca5fbf218c37470a9921797f4c9f965f6e9", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -630,7 +630,7 @@ mod test {\n         rx.recv().unwrap();\n     }\n \n-    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk) {\n+    fn avoid_copying_the_body<F>(spawnfn: F) where F: FnOnce(Thunk<'static>) {\n         let (tx, rx) = channel::<uint>();\n \n         let x = box 1;\n@@ -677,7 +677,7 @@ mod test {\n         // (well, it would if the constant were 8000+ - I lowered it to be more\n         // valgrind-friendly. try this at home, instead..!)\n         static GENERATIONS: uint = 16;\n-        fn child_no(x: uint) -> Thunk {\n+        fn child_no(x: uint) -> Thunk<'static> {\n             return Thunk::new(move|| {\n                 if x < GENERATIONS {\n                     Thread::spawn(move|| child_no(x+1).invoke(()));"}, {"sha": "2053f635c44a9d90293f2dafed933fbdef27c5b7", "filename": "src/test/auxiliary/cci_capture_clause.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fcci_capture_clause.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -11,7 +11,7 @@\n use std::thread::Thread;\n use std::sync::mpsc::{Receiver, channel};\n \n-pub fn foo<T:Send + Clone>(x: T) -> Receiver<T> {\n+pub fn foo<T:'static + Send + Clone>(x: T) -> Receiver<T> {\n     let (tx, rx) = channel();\n     Thread::spawn(move|| {\n         tx.send(x.clone());"}, {"sha": "469923d80b6dbb54fa6b3f19e407d47a7d15fb8d", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -229,21 +229,12 @@ unsafe impl<T: 'static> Send for Racy<T> {}\n \n /// Executes a closure in parallel over the given iterator over mutable slice.\n /// The closure `f` is run in parallel with an element of `iter`.\n-fn parallel<'a, I, T, F>(iter: I, f: F)\n-        where T: 'a+Send + Sync,\n-              I: Iterator<Item=&'a mut [T]>,\n-              F: Fn(&mut [T]) + Sync {\n-    use std::mem;\n-    use std::raw::Repr;\n-\n-    iter.map(|chunk| {\n-        // Need to convert `f` and `chunk` to something that can cross the task\n-        // boundary.\n-        let f = Racy(&f as *const F as *const uint);\n-        let raw = Racy(chunk.repr());\n+fn parallel<'a, I: Iterator, F>(iter: I, ref f: F)\n+        where I::Item: Send + 'a,\n+              F: Fn(I::Item) + Sync + 'a {\n+    iter.map(|x| {\n         Thread::scoped(move|| {\n-            let f = f.0 as *const F;\n-            unsafe { (*f)(mem::transmute(raw.0)) }\n+            f(x)\n         })\n     }).collect::<Vec<_>>();\n }"}, {"sha": "0c77120e506cb69f1ca9ee8720de1e62a3b3e0c3", "filename": "src/test/bench/shootout-spectralnorm.rs", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-spectralnorm.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -112,26 +112,16 @@ fn dot(v: &[f64], u: &[f64]) -> f64 {\n }\n \n \n-struct Racy<T>(T);\n-\n-unsafe impl<T: 'static> Send for Racy<T> {}\n-\n // Executes a closure in parallel over the given mutable slice. The closure `f`\n // is run in parallel and yielded the starting index within `v` as well as a\n // sub-slice of `v`.\n-fn parallel<T, F>(v: &mut [T], f: F)\n-                  where T: Send + Sync,\n-                        F: Fn(uint, &mut [T]) + Sync {\n+fn parallel<'a,T, F>(v: &mut [T], ref f: F)\n+                  where T: Send + Sync + 'a,\n+                        F: Fn(uint, &mut [T]) + Sync + 'a {\n     let size = v.len() / os::num_cpus() + 1;\n-\n     v.chunks_mut(size).enumerate().map(|(i, chunk)| {\n-        // Need to convert `f` and `chunk` to something that can cross the task\n-        // boundary.\n-        let f = Racy(&f as *const _ as *const uint);\n-        let raw = Racy(chunk.repr());\n         Thread::scoped(move|| {\n-            let f = f.0 as *const F;\n-            unsafe { (*f)(i * size, mem::transmute(raw.0)) }\n+            f(i * size, chunk)\n         })\n     }).collect::<Vec<_>>();\n }"}, {"sha": "c3fb6a1be8797a811819022975446ca9fabf5711", "filename": "src/test/compile-fail/builtin-superkinds-simple.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbuiltin-superkinds-simple.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -13,7 +13,7 @@\n \n trait Foo : Send { }\n \n-impl <'a> Foo for &'a mut () { }\n-//~^ ERROR the type `&'a mut ()` does not fulfill the required lifetime\n+impl Foo for std::rc::Rc<i8> { }\n+//~^ ERROR the trait `core::marker::Send` is not implemented\n \n fn main() { }"}, {"sha": "38730d241f68532b43f35c2dc15f3d1177c46d67", "filename": "src/test/compile-fail/coherence-impls-builtin.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcoherence-impls-builtin.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -8,6 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(optin_builtin_traits)]\n+\n use std::marker::Send;\n \n enum TestE {\n@@ -16,18 +18,21 @@ enum TestE {\n \n struct MyType;\n \n+struct NotSync;\n+impl !Sync for NotSync {}\n+\n unsafe impl Send for TestE {}\n unsafe impl Send for MyType {}\n unsafe impl Send for (MyType, MyType) {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n-unsafe impl Send for &'static MyType {}\n+unsafe impl Send for &'static NotSync {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n unsafe impl Send for [MyType] {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n-unsafe impl Send for &'static [MyType] {}\n+unsafe impl Send for &'static [NotSync] {}\n //~^ ERROR builtin traits can only be implemented on structs or enums\n \n fn is_send<T: Send>() {}"}, {"sha": "d5276efa8be9812649f978f8ee7da58e6238faa3", "filename": "src/test/compile-fail/kindck-impl-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-impl-type-params.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -17,7 +17,7 @@ struct S<T>;\n \n trait Gettable<T> {}\n \n-impl<T: Send + Copy> Gettable<T> for S<T> {}\n+impl<T: Send + Copy + 'static> Gettable<T> for S<T> {}\n \n fn f<T>(val: T) {\n     let t: S<T> = S;"}, {"sha": "570f7ad7fe3bf214adae00a7ac6644053305dd6c", "filename": "src/test/compile-fail/kindck-send-object.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -20,15 +20,15 @@ trait Message : Send { }\n \n fn object_ref_with_static_bound_not_ok() {\n     assert_send::<&'static (Dummy+'static)>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }\n \n fn box_object_with_no_bound_not_ok<'a>() {\n     assert_send::<Box<Dummy>>(); //~ ERROR the trait `core::marker::Send` is not implemented\n }\n \n fn object_with_send_bound_ok() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n     assert_send::<Box<Dummy+Send>>();\n }\n "}, {"sha": "48d5215b7085be78f389d72df0139f2efa25130e", "filename": "src/test/compile-fail/kindck-send-object1.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object1.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -12,22 +12,22 @@\n // is broken into two parts because some errors occur in distinct\n // phases in the compiler. See kindck-send-object2.rs as well!\n \n-fn assert_send<T:Send>() { }\n+fn assert_send<T:Send+'static>() { }\n trait Dummy { }\n \n // careful with object types, who knows what they close over...\n fn test51<'a>() {\n     assert_send::<&'a Dummy>();\n-    //~^ ERROR the trait `core::marker::Send` is not implemented\n+    //~^ ERROR the trait `core::marker::Sync` is not implemented\n }\n fn test52<'a>() {\n-    assert_send::<&'a (Dummy+Send)>();\n+    assert_send::<&'a (Dummy+Sync)>();\n     //~^ ERROR does not fulfill the required lifetime\n }\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "d3d166e2a6916181d24c32984ed212bca92a07e6", "filename": "src/test/compile-fail/kindck-send-object2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-object2.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -14,7 +14,7 @@ fn assert_send<T:Send>() { }\n trait Dummy { }\n \n fn test50() {\n-    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Send` is not implemented\n+    assert_send::<&'static Dummy>(); //~ ERROR the trait `core::marker::Sync` is not implemented\n }\n \n fn test53() {\n@@ -23,7 +23,7 @@ fn test53() {\n \n // ...unless they are properly bounded\n fn test60() {\n-    assert_send::<&'static (Dummy+Send)>();\n+    assert_send::<&'static (Dummy+Sync)>();\n }\n fn test61() {\n     assert_send::<Box<Dummy+Send>>();"}, {"sha": "406711902a543555547453d1900b5469d74d2ea9", "filename": "src/test/compile-fail/kindck-send-owned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-owned.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -18,8 +18,8 @@ fn test31() { assert_send::<String>(); }\n fn test32() { assert_send::<Vec<isize> >(); }\n \n // but not if they own a bad thing\n-fn test40<'a>(_: &'a isize) {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n+fn test40() {\n+    assert_send::<Box<*mut u8>>(); //~ ERROR `core::marker::Send` is not implemented\n }\n \n fn main() { }"}, {"sha": "e2a5b0678a6283164b661393c9dd5cb1dfdf016f", "filename": "src/test/compile-fail/kindck-send-region-pointers.rs", "status": "removed", "additions": 0, "deletions": 34, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/adfcd93f0c3b624399934558f63d945b7b6b663a/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfcd93f0c3b624399934558f63d945b7b6b663a/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-send-region-pointers.rs?ref=adfcd93f0c3b624399934558f63d945b7b6b663a", "patch": "@@ -1,34 +0,0 @@\n-// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test that borrowed pointers are not sendable unless 'static.\n-\n-fn assert_send<T:Send>() { }\n-\n-// lifetime pointers with 'static lifetime are ok\n-fn test01() { assert_send::<&'static isize>(); }\n-fn test02() { assert_send::<&'static str>(); }\n-fn test03() { assert_send::<&'static [isize]>(); }\n-\n-// whether or not they are mutable\n-fn test10() { assert_send::<&'static mut isize>(); }\n-\n-// otherwise lifetime pointers are not ok\n-fn test20<'a>(_: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n-}\n-fn test21<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n-}\n-fn test22<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn main() { }"}, {"sha": "71254e15d32fc37051b70324bc7e7d1942f77085", "filename": "src/test/compile-fail/regions-bounded-by-send.rs", "status": "removed", "additions": 0, "deletions": 83, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/adfcd93f0c3b624399934558f63d945b7b6b663a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adfcd93f0c3b624399934558f63d945b7b6b663a/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-bounded-by-send.rs?ref=adfcd93f0c3b624399934558f63d945b7b6b663a", "patch": "@@ -1,83 +0,0 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-// Test which of the builtin types are considered sendable. The tests\n-// in this file all test region bound and lifetime violations that are\n-// detected during type check.\n-\n-extern crate core;\n-use core::ptr::Unique;\n-\n-fn assert_send<T:Send>() { }\n-trait Dummy:Send { }\n-\n-// lifetime pointers with 'static lifetime are ok\n-\n-fn static_lifime_ok<'a,T,U:Send>(_: &'a isize) {\n-    assert_send::<&'static isize>();\n-    assert_send::<&'static str>();\n-    assert_send::<&'static [isize]>();\n-\n-    // whether or not they are mutable\n-    assert_send::<&'static mut isize>();\n-}\n-\n-// otherwise lifetime pointers are not ok\n-\n-fn param_not_ok<'a>(x: &'a isize) {\n-    assert_send::<&'a isize>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn param_not_ok1<'a>(_: &'a isize) {\n-    assert_send::<&'a str>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-fn param_not_ok2<'a>(_: &'a isize) {\n-    assert_send::<&'a [isize]>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-// boxes are ok\n-\n-fn box_ok() {\n-    assert_send::<Box<isize>>();\n-    assert_send::<String>();\n-    assert_send::<Vec<isize>>();\n-}\n-\n-// but not if they own a bad thing\n-\n-fn box_with_region_not_ok<'a>() {\n-    assert_send::<Box<&'a isize>>(); //~ ERROR does not fulfill the required lifetime\n-}\n-\n-// objects with insufficient bounds no ok\n-\n-fn object_with_random_bound_not_ok<'a>() {\n-    assert_send::<&'a (Dummy+'a)>();\n-    //~^ ERROR reference has a longer lifetime\n-}\n-\n-fn object_with_send_bound_not_ok<'a>() {\n-    assert_send::<&'a (Dummy+Send)>();\n-    //~^ ERROR does not fulfill the required lifetime\n-}\n-\n-// unsafe pointers are ok unless they point at unsendable things\n-\n-struct UniqueUnsafePtr(Unique<*const isize>);\n-\n-unsafe impl Send for UniqueUnsafePtr {}\n-\n-fn unsafe_ok1<'a>(_: &'a isize) {\n-    assert_send::<UniqueUnsafePtr>();\n-}\n-\n-fn main() {\n-}"}, {"sha": "3401dd1becdd8b141dd5e8940e1af672ac7e68f2", "filename": "src/test/compile-fail/regions-pattern-typing-issue-19552.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-pattern-typing-issue-19552.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn assert_send<T: Send>(_t: T) {}\n+fn assert_static<T: 'static>(_t: T) {}\n \n fn main() {\n     let line = String::new();\n     match [&*line] { //~ ERROR `line` does not live long enough\n-        [ word ] => { assert_send(word); }\n+        [ word ] => { assert_static(word); }\n     }\n }"}, {"sha": "79174552ae09c36f5ba136754f7a95cd7d6b6bc0", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -22,7 +22,7 @@ fn c(x: Box<Foo+Sync+Send>) {\n fn d(x: Box<Foo>) {\n     a(x); //~  ERROR mismatched types\n           //~| expected `Box<Foo + Send>`\n-          //~| found `Box<Foo + 'static>`\n+          //~| found `Box<Foo>`\n           //~| expected bounds `Send`\n           //~| found no bounds\n }"}, {"sha": "379ac12a95424c3ac1880e95e39121cd7c17dfe0", "filename": "src/test/run-pass/builtin-superkinds-capabilities-transitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-transitive.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -22,7 +22,7 @@ trait Foo : Bar { }\n impl <T: Send> Foo for T { }\n impl <T: Send> Bar for T { }\n \n-fn foo<T: Foo>(val: T, chan: Sender<T>) {\n+fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "cd019c21a3d056f1ad291581de645f2ac1cd0448", "filename": "src/test/run-pass/builtin-superkinds-capabilities-xc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities-xc.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -25,7 +25,7 @@ struct X<T>(T);\n impl <T: Sync> RequiresShare for X<T> { }\n impl <T: Sync+Send> RequiresRequiresShareAndSend for X<T> { }\n \n-fn foo<T: RequiresRequiresShareAndSend>(val: T, chan: Sender<T>) {\n+fn foo<T: RequiresRequiresShareAndSend + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "dc61508eec4fabf7acbb7bc55c029588ca1d7ac1", "filename": "src/test/run-pass/builtin-superkinds-capabilities.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-capabilities.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -18,7 +18,7 @@ trait Foo : Send { }\n \n impl <T: Send> Foo for T { }\n \n-fn foo<T: Foo>(val: T, chan: Sender<T>) {\n+fn foo<T: Foo + 'static>(val: T, chan: Sender<T>) {\n     chan.send(val).unwrap();\n }\n "}, {"sha": "1d05a7baa5352b938af0eee830201e6b023263a2", "filename": "src/test/run-pass/builtin-superkinds-self-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fbuiltin-superkinds-self-type.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -13,13 +13,13 @@\n \n use std::sync::mpsc::{Sender, channel};\n \n-trait Foo : Send + Sized {\n+trait Foo : Send + Sized + 'static {\n     fn foo(self, tx: Sender<Self>) {\n         tx.send(self).unwrap();\n     }\n }\n \n-impl <T: Send> Foo for T { }\n+impl <T: Send + 'static> Foo for T { }\n \n pub fn main() {\n     let (tx, rx) = channel();"}, {"sha": "a4b09eb08e0f663392de8cbbdcd25f47e8a01523", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -14,12 +14,12 @@ use std::thunk::Thunk;\n \n pub trait Promisable: Send + Sync {}\n impl<T: Send + Sync> Promisable for T {}\n-pub fn propagate<T, E, F, G>(action: F) -> Thunk<Result<T, E>, Result<T, E>>\n+pub fn propagate<'a, T, E, F, G>(action: F) -> Thunk<'a,Result<T, E>, Result<T, E>>\n     where\n-        T: Promisable + Clone,\n-        E: Promisable + Clone,\n-        F: FnOnce(&T) -> Result<T, E> + Send,\n-        G: FnOnce(Result<T, E>) -> Result<T, E> {\n+        T: Promisable + Clone + 'a,\n+        E: Promisable + Clone + 'a,\n+        F: FnOnce(&T) -> Result<T, E> + Send + 'a,\n+        G: FnOnce(Result<T, E>) -> Result<T, E> + 'a {\n     Thunk::with_arg(move |result: Result<T, E>| {\n         match result {\n             Ok(ref t) => action(t),"}, {"sha": "3cdd57aed5a1ccef3c37438a0981005eee8f1e9a", "filename": "src/test/run-pass/issue-21058.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-21058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21058.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -14,7 +14,7 @@ struct DST { a: u32, b: str }\n \n fn main() {\n     // get_tydesc should support unsized types\n-    assert!(unsafe {(\n+    assert_eq!(unsafe {(\n         // Slice\n         (*std::intrinsics::get_tydesc::<[u8]>()).name,\n         // str\n@@ -25,5 +25,5 @@ fn main() {\n         (*std::intrinsics::get_tydesc::<NT>()).name,\n         // DST\n         (*std::intrinsics::get_tydesc::<DST>()).name\n-    )} == (\"[u8]\", \"str\", \"core::marker::Copy + 'static\", \"NT\", \"DST\"));\n+    )}, (\"[u8]\", \"str\", \"core::marker::Copy\", \"NT\", \"DST\"));\n }"}, {"sha": "3025741694f43b4068850047628e81c0d902257f", "filename": "src/test/run-pass/issue-2190-1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2190-1.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -13,11 +13,11 @@ use std::thunk::Thunk;\n \n static generations: uint = 1024+256+128+49;\n \n-fn spawn(f: Thunk) {\n+fn spawn(f: Thunk<'static>) {\n     Builder::new().stack_size(32 * 1024).spawn(move|| f.invoke(()));\n }\n \n-fn child_no(x: uint) -> Thunk {\n+fn child_no(x: uint) -> Thunk<'static> {\n     Thunk::new(move|| {\n         if x < generations {\n             spawn(child_no(x+1));"}, {"sha": "60093803f0b77745e77c7fde8879d070ab39fbbb", "filename": "src/test/run-pass/send-type-inference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a14f4994eb4527a38d02c61fa83822df02f7b5d/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsend-type-inference.rs?ref=7a14f4994eb4527a38d02c61fa83822df02f7b5d", "patch": "@@ -16,7 +16,7 @@ struct Command<K, V> {\n     val: V\n }\n \n-fn cache_server<K:Send,V:Send>(mut tx: Sender<Sender<Command<K, V>>>) {\n+fn cache_server<K:Send+'static,V:Send+'static>(mut tx: Sender<Sender<Command<K, V>>>) {\n     let (tx1, _rx) = channel();\n     tx.send(tx1);\n }"}]}