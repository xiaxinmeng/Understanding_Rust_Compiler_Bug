{"sha": "4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "node_id": "C_kwDOAAsO6NoAKDQ5MDFlYTNlZWYxYWEwMWEyMzFmNzY3NjdmYTVlZTE5ZTdmNzZjZDk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-11T09:07:16Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-01-11T09:28:38Z"}, "message": "Lookup lang attribute on assoc item trait directly", "tree": {"sha": "d9a22004272429499cc0cbb9f65dc4a6fa30dfb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9a22004272429499cc0cbb9f65dc4a6fa30dfb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "html_url": "https://github.com/rust-lang/rust/commit/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94b369faa3bec8bfcbb833bae34682fad6f89bc4", "url": "https://api.github.com/repos/rust-lang/rust/commits/94b369faa3bec8bfcbb833bae34682fad6f89bc4", "html_url": "https://github.com/rust-lang/rust/commit/94b369faa3bec8bfcbb833bae34682fad6f89bc4"}], "stats": {"total": 121, "additions": 67, "deletions": 54}, "files": [{"sha": "c60ef87a93929c4e071f269125df1ef320bc77ff", "filename": "crates/hir_def/src/attr.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fhir_def%2Fsrc%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fhir_def%2Fsrc%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fattr.rs?ref=4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "patch": "@@ -255,6 +255,10 @@ impl Attrs {\n         }\n     }\n \n+    pub fn lang(&self) -> Option<&SmolStr> {\n+        self.by_key(\"lang\").string_value()\n+    }\n+\n     pub fn docs(&self) -> Option<Documentation> {\n         let docs = self.by_key(\"doc\").attrs().flat_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(s) => Some(s),\n@@ -754,20 +758,20 @@ impl Attr {\n }\n \n #[derive(Debug, Clone, Copy)]\n-pub struct AttrQuery<'a> {\n-    attrs: &'a Attrs,\n+pub struct AttrQuery<'attr> {\n+    attrs: &'attr Attrs,\n     key: &'static str,\n }\n \n-impl<'a> AttrQuery<'a> {\n-    pub fn tt_values(self) -> impl Iterator<Item = &'a Subtree> {\n+impl<'attr> AttrQuery<'attr> {\n+    pub fn tt_values(self) -> impl Iterator<Item = &'attr Subtree> {\n         self.attrs().filter_map(|attr| match attr.input.as_deref()? {\n             AttrInput::TokenTree(it, _) => Some(it),\n             _ => None,\n         })\n     }\n \n-    pub fn string_value(self) -> Option<&'a SmolStr> {\n+    pub fn string_value(self) -> Option<&'attr SmolStr> {\n         self.attrs().find_map(|attr| match attr.input.as_deref()? {\n             AttrInput::Literal(it) => Some(it),\n             _ => None,\n@@ -778,7 +782,7 @@ impl<'a> AttrQuery<'a> {\n         self.attrs().next().is_some()\n     }\n \n-    pub fn attrs(self) -> impl Iterator<Item = &'a Attr> + Clone {\n+    pub fn attrs(self) -> impl Iterator<Item = &'attr Attr> + Clone {\n         let key = self.key;\n         self.attrs\n             .iter()"}, {"sha": "0baca08ca99d4b5118dd17fbf262bd105f255122", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 35, "deletions": 46, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "patch": "@@ -3,14 +3,13 @@\n use std::iter;\n \n use base_db::SourceDatabaseExt;\n-use hir::{known, Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n+use hir::{HasAttrs, Local, Name, ScopeDef, Semantics, SemanticsScope, Type, TypeInfo};\n use ide_db::{\n     active_parameter::ActiveParameter,\n     base_db::{FilePosition, SourceDatabase},\n     helpers::FamousDefs,\n     RootDatabase,\n };\n-use rustc_hash::FxHashSet;\n use syntax::{\n     algo::find_node_at_offset,\n     ast::{self, HasName, NameOrNameRef},\n@@ -124,8 +123,6 @@ pub(crate) struct CompletionContext<'a> {\n     pub(super) path_context: Option<PathCompletionContext>,\n \n     pub(super) locals: Vec<(Name, Local)>,\n-    /// Operator traits defined in the project\n-    pub(super) ops_traits: FxHashSet<hir::Trait>,\n \n     no_completion_required: bool,\n }\n@@ -315,7 +312,10 @@ impl<'a> CompletionContext<'a> {\n \n     /// Whether the given trait is an operator trait or not.\n     pub(crate) fn is_ops_trait(&self, trait_: hir::Trait) -> bool {\n-        self.ops_traits.contains(&trait_)\n+        match trait_.attrs(self.db).lang() {\n+            Some(lang) => OP_TRAIT_LANG_NAMES.contains(&lang.as_str()),\n+            None => false,\n+        }\n     }\n \n     /// A version of [`SemanticsScope::process_all_names`] that filters out `#[doc(hidden)]` items.\n@@ -398,16 +398,6 @@ impl<'a> CompletionContext<'a> {\n                 locals.push((name, local));\n             }\n         });\n-        let mut ops_traits =\n-            FxHashSet::with_capacity_and_hasher(OP_TRAIT_LANG_NAMES.len(), Default::default());\n-        if let Some(krate) = krate {\n-            let _p = profile::span(\"CompletionContext::new ops\");\n-            for trait_ in\n-                OP_TRAIT_LANG_NAMES.iter().filter_map(|item| hir::Trait::lang(db, krate, item))\n-            {\n-                ops_traits.insert(trait_);\n-            }\n-        }\n \n         let mut ctx = CompletionContext {\n             sema,\n@@ -434,7 +424,6 @@ impl<'a> CompletionContext<'a> {\n             locals,\n             incomplete_let: false,\n             no_completion_required: false,\n-            ops_traits,\n         };\n         ctx.expand_and_fill(\n             original_file.syntax().clone(),\n@@ -938,36 +927,36 @@ fn has_ref(token: &SyntaxToken) -> bool {\n     token.kind() == T![&]\n }\n \n-const OP_TRAIT_LANG_NAMES: &[hir::Name] = &[\n-    known::add_assign,\n-    known::add,\n-    known::bitand_assign,\n-    known::bitand,\n-    known::bitor_assign,\n-    known::bitor,\n-    known::bitxor_assign,\n-    known::bitxor,\n-    known::deref_mut,\n-    known::deref,\n-    known::div_assign,\n-    known::div,\n-    known::fn_mut,\n-    known::fn_once,\n-    known::r#fn,\n-    known::index_mut,\n-    known::index,\n-    known::mul_assign,\n-    known::mul,\n-    known::neg,\n-    known::not,\n-    known::rem_assign,\n-    known::rem,\n-    known::shl_assign,\n-    known::shl,\n-    known::shr_assign,\n-    known::shr,\n-    known::sub,\n-    known::sub,\n+const OP_TRAIT_LANG_NAMES: &[&str] = &[\n+    \"add_assign\",\n+    \"add\",\n+    \"bitand_assign\",\n+    \"bitand\",\n+    \"bitor_assign\",\n+    \"bitor\",\n+    \"bitxor_assign\",\n+    \"bitxor\",\n+    \"deref_mut\",\n+    \"deref\",\n+    \"div_assign\",\n+    \"div\",\n+    \"fn_mut\",\n+    \"fn_once\",\n+    \"fn\",\n+    \"index_mut\",\n+    \"index\",\n+    \"mul_assign\",\n+    \"mul\",\n+    \"neg\",\n+    \"not\",\n+    \"rem_assign\",\n+    \"rem\",\n+    \"shl_assign\",\n+    \"shl\",\n+    \"shr_assign\",\n+    \"shr\",\n+    \"sub\",\n+    \"sub\",\n ];\n #[cfg(test)]\n mod tests {"}, {"sha": "8ac4291078a56f58a7a2227a5ae54b829f653db0", "filename": "crates/ide_completion/src/item.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fitem.rs?ref=4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "patch": "@@ -177,6 +177,7 @@ pub enum CompletionRelevanceTypeMatch {\n }\n \n impl CompletionRelevance {\n+    const BASE_LINE: u32 = 1;\n     /// Provides a relevance score. Higher values are more relevant.\n     ///\n     /// The absolute value of the relevance score is not meaningful, for\n@@ -187,7 +188,7 @@ impl CompletionRelevance {\n     /// See is_relevant if you need to make some judgement about score\n     /// in an absolute sense.\n     pub fn score(&self) -> u32 {\n-        let mut score = 0;\n+        let mut score = Self::BASE_LINE;\n \n         if self.exact_name_match {\n             score += 1;\n@@ -213,7 +214,7 @@ impl CompletionRelevance {\n     /// some threshold such that we think it is especially likely\n     /// to be relevant.\n     pub fn is_relevant(&self) -> bool {\n-        self.score() > 0\n+        self.score() > (Self::BASE_LINE + 1)\n     }\n }\n \n@@ -563,6 +564,7 @@ mod tests {\n         // This test asserts that the relevance score for these items is ascending, and\n         // that any items in the same vec have the same score.\n         let expected_relevance_order = vec![\n+            vec![CompletionRelevance { is_op_method: true, ..CompletionRelevance::default() }],\n             vec![CompletionRelevance::default()],\n             vec![\n                 CompletionRelevance { exact_name_match: true, ..CompletionRelevance::default() },"}, {"sha": "15dacc8e4624eded8b5f90a8ae2d22f63405e17e", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4901ea3eef1aa01a231f76767fa5ee19e7f76cd9/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=4901ea3eef1aa01a231f76767fa5ee19e7f76cd9", "patch": "@@ -400,6 +400,7 @@ mod tests {\n                 (relevance.exact_name_match, \"name\"),\n                 (relevance.is_local, \"local\"),\n                 (relevance.exact_postfix_snippet_match, \"snippet\"),\n+                (relevance.is_op_method, \"op_method\"),\n             ]\n             .into_iter()\n             .filter_map(|(cond, desc)| if cond { Some(desc) } else { None })\n@@ -1352,6 +1353,23 @@ fn main() {\n         )\n     }\n \n+    #[test]\n+    fn op_method_relevances() {\n+        check_relevance(\n+            r#\"\n+#[lang = \"sub\"]\n+trait Sub {\n+    fn sub(self, other: Self) -> Self { self }\n+}\n+impl Sub for u32 {}\n+fn foo(a: u32) { a.$0 }\n+\"#,\n+            expect![[r#\"\n+                me sub(\u2026) (as Sub) [op_method]\n+            \"#]],\n+        )\n+    }\n+\n     #[test]\n     fn struct_field_method_ref() {\n         check_kinds("}]}