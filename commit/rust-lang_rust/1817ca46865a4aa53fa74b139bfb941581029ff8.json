{"sha": "1817ca46865a4aa53fa74b139bfb941581029ff8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4MTdjYTQ2ODY1YTRhYTUzZmE3NGIxMzliZmI5NDE1ODEwMjlmZjg=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-26T03:17:05Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-10-02T06:07:20Z"}, "message": "Refactor out `resolve_macro_name`.", "tree": {"sha": "506d4bc93e4e5fba87cca70844976ac0259cb092", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/506d4bc93e4e5fba87cca70844976ac0259cb092"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1817ca46865a4aa53fa74b139bfb941581029ff8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1817ca46865a4aa53fa74b139bfb941581029ff8", "html_url": "https://github.com/rust-lang/rust/commit/1817ca46865a4aa53fa74b139bfb941581029ff8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1817ca46865a4aa53fa74b139bfb941581029ff8/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2df4f2a126ec817666c66dd94f25411da1789243", "url": "https://api.github.com/repos/rust-lang/rust/commits/2df4f2a126ec817666c66dd94f25411da1789243", "html_url": "https://github.com/rust-lang/rust/commit/2df4f2a126ec817666c66dd94f25411da1789243"}], "stats": {"total": 27, "additions": 16, "deletions": 11}, "files": [{"sha": "bdd8d96aa7b4bec4ea1b91a632dc7d9c789b4d35", "filename": "src/librustc_resolve/macros.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/1817ca46865a4aa53fa74b139bfb941581029ff8/src%2Flibrustc_resolve%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1817ca46865a4aa53fa74b139bfb941581029ff8/src%2Flibrustc_resolve%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fmacros.rs?ref=1817ca46865a4aa53fa74b139bfb941581029ff8", "patch": "@@ -138,6 +138,22 @@ impl<'a> base::Resolver for Resolver<'a> {\n             InvocationKind::Attr { ref attr, .. } => (intern(&*attr.name()), attr.span),\n         };\n \n+        self.resolve_macro_name(scope, name).or_else(|| {\n+            let mut err =\n+                self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n+            self.suggest_macro_name(&name.as_str(), &mut err);\n+            err.emit();\n+            None\n+        })\n+    }\n+\n+    fn resolve_derive_mode(&mut self, ident: ast::Ident) -> Option<Rc<MultiItemModifier>> {\n+        self.derive_modes.get(&ident.name).cloned()\n+    }\n+}\n+\n+impl<'a> Resolver<'a> {\n+    fn resolve_macro_name(&mut self, scope: Mark, name: ast::Name) -> Option<Rc<SyntaxExtension>> {\n         let mut module = self.expansion_data[&scope].module;\n         loop {\n             if let Some(binding) = module.macros.borrow().get(&name) {\n@@ -148,20 +164,9 @@ impl<'a> base::Resolver for Resolver<'a> {\n                 None => break,\n             }\n         }\n-\n-        let mut err =\n-            self.session.struct_span_err(span, &format!(\"macro undefined: '{}!'\", name));\n-        self.suggest_macro_name(&name.as_str(), &mut err);\n-        err.emit();\n         None\n     }\n \n-    fn resolve_derive_mode(&mut self, ident: ast::Ident) -> Option<Rc<MultiItemModifier>> {\n-        self.derive_modes.get(&ident.name).cloned()\n-    }\n-}\n-\n-impl<'a> Resolver<'a> {\n     fn suggest_macro_name(&mut self, name: &str, err: &mut DiagnosticBuilder<'a>) {\n         if let Some(suggestion) = find_best_match_for_name(self.macro_names.iter(), name, None) {\n             if suggestion != name {"}]}