{"sha": "3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNkZTE4NGZiMGU2ZjcxNjFmZWYyZjFkOTI4OGUwNmY1N2FiYWRmYzA=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seuchida@gmail.com", "date": "2018-03-29T00:16:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-29T00:16:38Z"}, "message": "Merge pull request #2572 from codeworm96/remove_unreachable\n\nRemove unreachable! from macros.rs", "tree": {"sha": "3b737f2ec13ce2ce2e10761ed51cc82f0a6e6f44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b737f2ec13ce2ce2e10761ed51cc82f0a6e6f44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJavDBmCRBK7hj4Ov3rIwAAdHIIAH7n0hJIKrqQy3IQaCg7OAah\nPUi1YWkpizTp5psvj1LJSiO2QTrr6T4nTK2a40qHIE9N/Qe+HP1FvUbWBuPh0eez\nd6KI5SXzLEQsCvUhfMHCWn87VsWjkek55IUPdC166rc2mX6a3ltRj5LnSLJHcGON\nXaX9M4sV9gGCw8FeiB61MokDiD/2viAt9+qDc0k6KRzFLLxZLY5Kex/K1RwmTIk3\n9L/tt2ljB8AOTBvLAMJLzcN9QlAk1BRzKOc68jx0So7Ri2wEQ20tMuL8vI7C9f/5\nmpHjvDDf2fTM5lZccA7S9amHpy0p/fXdHeZiF4eWCgeuDxVeIVG+0LEPBsvxpiM=\n=EWWi\n-----END PGP SIGNATURE-----\n", "payload": "tree 3b737f2ec13ce2ce2e10761ed51cc82f0a6e6f44\nparent 72b715bad4cb71e041a2d286370df883643d2b8b\nparent 38107192f113c3715a4133a294dec83281ed9ca2\nauthor Seiichi Uchida <seuchida@gmail.com> 1522282598 +0900\ncommitter GitHub <noreply@github.com> 1522282598 +0900\n\nMerge pull request #2572 from codeworm96/remove_unreachable\n\nRemove unreachable! from macros.rs"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "html_url": "https://github.com/rust-lang/rust/commit/3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72b715bad4cb71e041a2d286370df883643d2b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/72b715bad4cb71e041a2d286370df883643d2b8b", "html_url": "https://github.com/rust-lang/rust/commit/72b715bad4cb71e041a2d286370df883643d2b8b"}, {"sha": "38107192f113c3715a4133a294dec83281ed9ca2", "url": "https://api.github.com/repos/rust-lang/rust/commits/38107192f113c3715a4133a294dec83281ed9ca2", "html_url": "https://github.com/rust-lang/rust/commit/38107192f113c3715a4133a294dec83281ed9ca2"}], "stats": {"total": 34, "additions": 24, "deletions": 10}, "files": [{"sha": "d37b0a6a05a1b2c32e7725899e5d3b4847b249f6", "filename": "src/macros.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "patch": "@@ -681,7 +681,7 @@ impl MacroArgParser {\n         self.buf.clear();\n     }\n \n-    fn add_meta_variable(&mut self, iter: &mut Cursor) {\n+    fn add_meta_variable(&mut self, iter: &mut Cursor) -> Option<()> {\n         match iter.next() {\n             Some(TokenTree::Token(sp, Token::Ident(ref ident))) => {\n                 self.result.push(ParsedMacroArg {\n@@ -691,8 +691,9 @@ impl MacroArgParser {\n \n                 self.buf.clear();\n                 self.is_meta_var = false;\n+                Some(())\n             }\n-            _ => unreachable!(),\n+            _ => None,\n         }\n     }\n \n@@ -710,7 +711,7 @@ impl MacroArgParser {\n         delim: DelimToken,\n         iter: &mut Cursor,\n         span: Span,\n-    ) {\n+    ) -> Option<()> {\n         let mut buffer = String::new();\n         let mut first = false;\n         let mut lo = span.lo();\n@@ -734,7 +735,7 @@ impl MacroArgParser {\n                     buffer.push_str(&pprust::token_to_string(t));\n                     hi = sp.hi();\n                 }\n-                _ => unreachable!(),\n+                _ => return None,\n             }\n         }\n \n@@ -752,6 +753,7 @@ impl MacroArgParser {\n             kind: MacroArgKind::Repeat(delim, inner, another, self.last_tok.clone()),\n             span: mk_sp(self.lo, self.hi),\n         });\n+        Some(())\n     }\n \n     fn update_buffer(&mut self, lo: BytePos, t: &Token) {\n@@ -796,7 +798,7 @@ impl MacroArgParser {\n     }\n \n     /// Returns a collection of parsed macro def's arguments.\n-    pub fn parse(mut self, tokens: ThinTokenStream) -> Vec<ParsedMacroArg> {\n+    pub fn parse(mut self, tokens: ThinTokenStream) -> Option<Vec<ParsedMacroArg>> {\n         let mut iter = (tokens.into(): TokenStream).trees();\n \n         while let Some(ref tok) = iter.next() {\n@@ -813,7 +815,7 @@ impl MacroArgParser {\n                     self.start_tok = Token::Dollar;\n                 }\n                 TokenTree::Token(_, Token::Colon) if self.is_meta_var => {\n-                    self.add_meta_variable(&mut iter);\n+                    self.add_meta_variable(&mut iter)?;\n                 }\n                 TokenTree::Token(sp, ref t) => self.update_buffer(sp.lo(), t),\n                 TokenTree::Delimited(sp, delimited) => {\n@@ -828,10 +830,10 @@ impl MacroArgParser {\n                     // Parse the stuff inside delimiters.\n                     let mut parser = MacroArgParser::new();\n                     parser.lo = sp.lo();\n-                    let delimited_arg = parser.parse(delimited.tts.clone());\n+                    let delimited_arg = parser.parse(delimited.tts.clone())?;\n \n                     if self.is_meta_var {\n-                        self.add_repeat(delimited_arg, delimited.delim, &mut iter, *sp);\n+                        self.add_repeat(delimited_arg, delimited.delim, &mut iter, *sp)?;\n                     } else {\n                         self.add_delimited(delimited_arg, delimited.delim, *sp);\n                     }\n@@ -847,7 +849,7 @@ impl MacroArgParser {\n             self.add_other();\n         }\n \n-        self.result\n+        Some(self.result)\n     }\n }\n \n@@ -909,7 +911,7 @@ fn format_macro_args(\n     toks: ThinTokenStream,\n     shape: Shape,\n ) -> Option<String> {\n-    let parsed_args = MacroArgParser::new().parse(toks);\n+    let parsed_args = MacroArgParser::new().parse(toks)?;\n     wrap_macro_args(context, &parsed_args, shape)\n }\n "}, {"sha": "51c80ad5b7dd115a3ad972185e489705f1715880", "filename": "tests/source/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/tests%2Fsource%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/tests%2Fsource%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmacro_rules.rs?ref=3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "patch": "@@ -188,3 +188,9 @@ macro_rules! binary {\n         }\n     };\n }\n+\n+// #2558\n+macro_rules! m {\n+    ($x:) => {};\n+    ($($foo:expr)()?) => {};\n+}"}, {"sha": "451e78cb3a861a76413286dad73b228f02e6f59b", "filename": "tests/target/macro_rules.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/tests%2Ftarget%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3de184fb0e6f7161fef2f1d9288e06f57abadfc0/tests%2Ftarget%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmacro_rules.rs?ref=3de184fb0e6f7161fef2f1d9288e06f57abadfc0", "patch": "@@ -220,3 +220,9 @@ macro_rules! binary {\n         }\n     };\n }\n+\n+// #2558\n+macro_rules! m {\n+    ($x:) => {};\n+    ($($foo:expr)()?) => {};\n+}"}]}