{"sha": "be03db0e3a75533f34d48c3014d532919b30a9e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlMDNkYjBlM2E3NTUzM2YzNGQ0OGMzMDE0ZDUzMjkxOWIzMGE5ZTk=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T16:25:18Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-04-08T20:48:47Z"}, "message": "Intern Substitutions\n\n(Costs a bit of performance, reduces memory usage on RA by ~10%.)", "tree": {"sha": "3742a817b8238043a3a855d92532c7342815210e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3742a817b8238043a3a855d92532c7342815210e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be03db0e3a75533f34d48c3014d532919b30a9e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be03db0e3a75533f34d48c3014d532919b30a9e9", "html_url": "https://github.com/rust-lang/rust/commit/be03db0e3a75533f34d48c3014d532919b30a9e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be03db0e3a75533f34d48c3014d532919b30a9e9/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a169fa6a832a513cd1534d1a6566e4584ca5fb6a", "html_url": "https://github.com/rust-lang/rust/commit/a169fa6a832a513cd1534d1a6566e4584ca5fb6a"}], "stats": {"total": 61, "additions": 34, "deletions": 27}, "files": [{"sha": "04875240bc8a1cc016500d3c243defc379ede028", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -1825,7 +1825,7 @@ impl Type {\n             Solution::Unique(s) => s\n                 .value\n                 .subst\n-                .interned()\n+                .as_slice(&Interner)\n                 .first()\n                 .map(|ty| self.derived(ty.assert_ty_ref(&Interner).clone())),\n             Solution::Ambig(_) => None,"}, {"sha": "92224b46b2ced153d244d62062b71830b9fcef30", "filename": "crates/hir_ty/src/display.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Fdisplay.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -265,7 +265,7 @@ impl HirDisplay for ProjectionTy {\n         write!(f, \" as {}\", trait_.name)?;\n         if self.substitution.len(&Interner) > 1 {\n             write!(f, \"<\")?;\n-            f.write_joined(&self.substitution.interned()[1..], \", \")?;\n+            f.write_joined(&self.substitution.as_slice(&Interner)[1..], \", \")?;\n             write!(f, \">\")?;\n         }\n         write!(f, \">::{}\", f.db.type_alias_data(from_assoc_type_id(self.associated_ty_id)).name)?;\n@@ -416,7 +416,7 @@ impl HirDisplay for Ty {\n                     write!(f, \",)\")?;\n                 } else {\n                     write!(f, \"(\")?;\n-                    f.write_joined(&*substs.interned(), \", \")?;\n+                    f.write_joined(&*substs.as_slice(&Interner), \", \")?;\n                     write!(f, \")\")?;\n                 }\n             }\n@@ -444,7 +444,7 @@ impl HirDisplay for Ty {\n                     // We print all params except implicit impl Trait params. Still a bit weird; should we leave out parent and self?\n                     if total_len > 0 {\n                         write!(f, \"<\")?;\n-                        f.write_joined(&parameters.interned()[..total_len], \", \")?;\n+                        f.write_joined(&parameters.as_slice(&Interner)[..total_len], \", \")?;\n                         write!(f, \">\")?;\n                     }\n                 }\n@@ -491,7 +491,7 @@ impl HirDisplay for Ty {\n                             .map(|generic_def_id| f.db.generic_defaults(generic_def_id))\n                             .filter(|defaults| !defaults.is_empty())\n                         {\n-                            None => parameters.interned().as_ref(),\n+                            None => parameters.as_slice(&Interner),\n                             Some(default_parameters) => {\n                                 let mut default_from = 0;\n                                 for (i, parameter) in parameters.iter(&Interner).enumerate() {\n@@ -515,11 +515,11 @@ impl HirDisplay for Ty {\n                                         }\n                                     }\n                                 }\n-                                &parameters.interned()[0..default_from]\n+                                &parameters.as_slice(&Interner)[0..default_from]\n                             }\n                         }\n                     } else {\n-                        parameters.interned().as_ref()\n+                        parameters.as_slice(&Interner)\n                     };\n                     if !parameters_to_write.is_empty() {\n                         write!(f, \"<\")?;\n@@ -542,7 +542,7 @@ impl HirDisplay for Ty {\n                     write!(f, \"{}::{}\", trait_.name, type_alias_data.name)?;\n                     if parameters.len(&Interner) > 0 {\n                         write!(f, \"<\")?;\n-                        f.write_joined(&*parameters.interned(), \", \")?;\n+                        f.write_joined(&*parameters.as_slice(&Interner), \", \")?;\n                         write!(f, \">\")?;\n                     }\n                 } else {\n@@ -749,13 +749,13 @@ fn write_bounds_like_dyn_trait(\n                 // existential) here, which is the only thing that's\n                 // possible in actual Rust, and hence don't print it\n                 write!(f, \"{}\", f.db.trait_data(trait_).name)?;\n-                if let [_, params @ ..] = &*trait_ref.substitution.interned().as_slice() {\n+                if let [_, params @ ..] = &*trait_ref.substitution.as_slice(&Interner) {\n                     if is_fn_trait {\n                         if let Some(args) =\n                             params.first().and_then(|it| it.assert_ty_ref(&Interner).as_tuple())\n                         {\n                             write!(f, \"(\")?;\n-                            f.write_joined(&*args.interned(), \", \")?;\n+                            f.write_joined(args.as_slice(&Interner), \", \")?;\n                             write!(f, \")\")?;\n                         }\n                     } else if !params.is_empty() {\n@@ -814,7 +814,7 @@ fn fmt_trait_ref(tr: &TraitRef, f: &mut HirFormatter, use_as: bool) -> Result<()\n     write!(f, \"{}\", f.db.trait_data(tr.hir_trait_id()).name)?;\n     if tr.substitution.len(&Interner) > 1 {\n         write!(f, \"<\")?;\n-        f.write_joined(&tr.substitution.interned()[1..], \", \")?;\n+        f.write_joined(&tr.substitution.as_slice(&Interner)[1..], \", \")?;\n         write!(f, \">\")?;\n     }\n     Ok(())"}, {"sha": "ee6763926a92d8cba4f13a3b5f48dc354946f0af", "filename": "crates/hir_ty/src/infer/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -462,7 +462,7 @@ impl<'a> InferenceContext<'a> {\n                     };\n                     match canonicalized.decanonicalize_ty(derefed_ty.value).kind(&Interner) {\n                         TyKind::Tuple(_, substs) => name.as_tuple_index().and_then(|idx| {\n-                            substs.interned().get(idx).map(|a| a.assert_ty_ref(&Interner)).cloned()\n+                            substs.as_slice(&Interner).get(idx).map(|a| a.assert_ty_ref(&Interner)).cloned()\n                         }),\n                         TyKind::Adt(AdtId(hir_def::AdtId::StructId(s)), parameters) => {\n                             let local_id = self.db.struct_data(*s).variant_data.field(name)?;"}, {"sha": "aea354cdecf80d823f95ed1f141b75181bcd82ea", "filename": "crates/hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -122,7 +122,7 @@ impl<'a> InferenceContext<'a> {\n         let ty = match &body[pat] {\n             &Pat::Tuple { ref args, ellipsis } => {\n                 let expectations = match expected.as_tuple() {\n-                    Some(parameters) => &*parameters.interned().as_slice(),\n+                    Some(parameters) => &*parameters.as_slice(&Interner),\n                     _ => &[],\n                 };\n \n@@ -242,7 +242,7 @@ impl<'a> InferenceContext<'a> {\n                     let (inner_ty, alloc_ty) = match expected.as_adt() {\n                         Some((adt, subst)) if adt == box_adt => (\n                             subst.at(&Interner, 0).assert_ty_ref(&Interner).clone(),\n-                            subst.interned().get(1).and_then(|a| a.ty(&Interner).cloned()),\n+                            subst.as_slice(&Interner).get(1).and_then(|a| a.ty(&Interner).cloned()),\n                         ),\n                         _ => (self.result.standard_types.unknown.clone(), None),\n                     };"}, {"sha": "495282eba85196cd81e4ecc7f9a94c24fe0e15c8", "filename": "crates/hir_ty/src/infer/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -101,7 +101,7 @@ impl<'a> InferenceContext<'a> {\n         let substs = ctx.substs_from_path(path, typable, true);\n         let ty = TyBuilder::value_ty(self.db, typable)\n             .use_parent_substs(&parent_substs)\n-            .fill(substs.interned()[parent_substs.len(&Interner)..].iter().cloned())\n+            .fill(substs.as_slice(&Interner)[parent_substs.len(&Interner)..].iter().cloned())\n             .build();\n         Some(ty)\n     }"}, {"sha": "beb58d711739d07b0759b8fce9af718fefa8e9d3", "filename": "crates/hir_ty/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Flib.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -109,7 +109,7 @@ pub type WhereClause = chalk_ir::WhereClause<Interner>;\n pub fn subst_prefix(s: &Substitution, n: usize) -> Substitution {\n     Substitution::from_iter(\n         &Interner,\n-        s.interned()[..std::cmp::min(s.len(&Interner), n)].iter().cloned(),\n+        s.as_slice(&Interner)[..std::cmp::min(s.len(&Interner), n)].iter().cloned(),\n     )\n }\n \n@@ -187,7 +187,7 @@ impl CallableSig {\n                 .shifted_out_to(&Interner, DebruijnIndex::ONE)\n                 .expect(\"unexpected lifetime vars in fn ptr\")\n                 .0\n-                .interned()\n+                .as_slice(&Interner)\n                 .iter()\n                 .map(|arg| arg.assert_ty_ref(&Interner).clone())\n                 .collect(),"}, {"sha": "17e056f030c3c7e0a3bc80013b6b3619af50d53f", "filename": "crates/hir_ty/src/traits/chalk/interner.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Finterner.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -3,11 +3,12 @@\n \n use super::tls;\n use base_db::salsa::InternId;\n-use chalk_ir::{GenericArg, Goal, GoalData};\n+use chalk_ir::{Goal, GoalData};\n use hir_def::{\n     intern::{impl_internable, InternStorage, Internable, Interned},\n     TypeAliasId,\n };\n+use crate::GenericArg;\n use smallvec::SmallVec;\n use std::{fmt, sync::Arc};\n \n@@ -32,7 +33,13 @@ pub(crate) type Variances = chalk_ir::Variances<Interner>;\n #[derive(PartialEq, Eq, Hash, Debug)]\n pub struct InternedVariableKindsInner(Vec<chalk_ir::VariableKind<Interner>>);\n \n-impl_internable!(InternedVariableKindsInner,);\n+#[derive(PartialEq, Eq, Hash, Debug)]\n+pub struct InternedSubstitutionInner(SmallVec<[GenericArg; 2]>);\n+\n+impl_internable!(\n+    InternedVariableKindsInner,\n+    InternedSubstitutionInner,\n+);\n \n impl chalk_ir::interner::Interner for Interner {\n     type InternedType = Arc<chalk_ir::TyData<Self>>;\n@@ -42,7 +49,7 @@ impl chalk_ir::interner::Interner for Interner {\n     type InternedGenericArg = chalk_ir::GenericArgData<Self>;\n     type InternedGoal = Arc<GoalData<Self>>;\n     type InternedGoals = Vec<Goal<Self>>;\n-    type InternedSubstitution = SmallVec<[GenericArg<Self>; 2]>;\n+    type InternedSubstitution = Interned<InternedSubstitutionInner>;\n     type InternedProgramClause = Arc<chalk_ir::ProgramClauseData<Self>>;\n     type InternedProgramClauses = Arc<[chalk_ir::ProgramClause<Self>]>;\n     type InternedQuantifiedWhereClauses = Vec<chalk_ir::QuantifiedWhereClause<Self>>;\n@@ -107,7 +114,7 @@ impl chalk_ir::interner::Interner for Interner {\n     }\n \n     fn debug_generic_arg(\n-        parameter: &GenericArg<Interner>,\n+        parameter: &GenericArg,\n         fmt: &mut fmt::Formatter<'_>,\n     ) -> Option<fmt::Result> {\n         tls::with_current_program(|prog| Some(prog?.debug_generic_arg(parameter, fmt)))\n@@ -272,16 +279,16 @@ impl chalk_ir::interner::Interner for Interner {\n \n     fn intern_substitution<E>(\n         &self,\n-        data: impl IntoIterator<Item = Result<GenericArg<Self>, E>>,\n+        data: impl IntoIterator<Item = Result<GenericArg, E>>,\n     ) -> Result<Self::InternedSubstitution, E> {\n-        data.into_iter().collect()\n+        Ok(Interned::new(InternedSubstitutionInner(data.into_iter().collect::<Result<SmallVec<_>, _>>()?)))\n     }\n \n     fn substitution_data<'a>(\n         &self,\n         substitution: &'a Self::InternedSubstitution,\n-    ) -> &'a [GenericArg<Self>] {\n-        substitution\n+    ) -> &'a [GenericArg] {\n+        &substitution.as_ref().0\n     }\n \n     fn intern_program_clause("}, {"sha": "e78581ea5b43cc1cef1655f6e9da65bd54e3169f", "filename": "crates/hir_ty/src/traits/chalk/mapping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be03db0e3a75533f34d48c3014d532919b30a9e9/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftraits%2Fchalk%2Fmapping.rs?ref=be03db0e3a75533f34d48c3014d532919b30a9e9", "patch": "@@ -99,7 +99,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 // have the expected self type\n                 return None;\n             }\n-            let args_no_self = trait_ref.substitution.interned()[1..]\n+            let args_no_self = trait_ref.substitution.as_slice(&Interner)[1..]\n                 .iter()\n                 .map(|ty| ty.clone().cast(&Interner))\n                 .collect();\n@@ -111,7 +111,7 @@ pub(super) fn generic_predicate_to_inline_bound(\n                 return None;\n             }\n             let trait_ = projection_ty.trait_(db);\n-            let args_no_self = projection_ty.substitution.interned()[1..]\n+            let args_no_self = projection_ty.substitution.as_slice(&Interner)[1..]\n                 .iter()\n                 .map(|ty| ty.clone().cast(&Interner))\n                 .collect();"}]}