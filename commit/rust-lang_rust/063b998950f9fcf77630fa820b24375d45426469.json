{"sha": "063b998950f9fcf77630fa820b24375d45426469", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA2M2I5OTg5NTBmOWZjZjc3NjMwZmE4MjBiMjQzNzVkNDU0MjY0Njk=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-23T22:45:53Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-12-24T12:56:52Z"}, "message": "add pre-statement-effect to dataflow", "tree": {"sha": "104600dc69e57ef5bbbda0d9e1e562a02ae83699", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/104600dc69e57ef5bbbda0d9e1e562a02ae83699"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/063b998950f9fcf77630fa820b24375d45426469", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/063b998950f9fcf77630fa820b24375d45426469", "html_url": "https://github.com/rust-lang/rust/commit/063b998950f9fcf77630fa820b24375d45426469", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/063b998950f9fcf77630fa820b24375d45426469/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5165ee9e209e0e70d89946ccbb7e90b9c0c3a7ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/5165ee9e209e0e70d89946ccbb7e90b9c0c3a7ac", "html_url": "https://github.com/rust-lang/rust/commit/5165ee9e209e0e70d89946ccbb7e90b9c0c3a7ac"}], "stats": {"total": 82, "additions": 77, "deletions": 5}, "files": [{"sha": "b1f73bfbe2284cf088128c83fbf443ad800f748d", "filename": "src/librustc_mir/dataflow/at_location.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fat_location.rs?ref=063b998950f9fcf77630fa820b24375d45426469", "patch": "@@ -149,6 +149,18 @@ impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n     fn reconstruct_statement_effect(&mut self, loc: Location) {\n         self.stmt_gen.reset_to_empty();\n         self.stmt_kill.reset_to_empty();\n+        {\n+            let mut sets = BlockSets {\n+                on_entry: &mut self.curr_state,\n+                gen_set: &mut self.stmt_gen,\n+                kill_set: &mut self.stmt_kill,\n+            };\n+            self.base_results\n+                .operator()\n+                .before_statement_effect(&mut sets, loc);\n+        }\n+        self.apply_local_effect(loc);\n+\n         let mut sets = BlockSets {\n             on_entry: &mut self.curr_state,\n             gen_set: &mut self.stmt_gen,\n@@ -162,6 +174,18 @@ impl<BD> FlowsAtLocation for FlowAtLocation<BD>\n     fn reconstruct_terminator_effect(&mut self, loc: Location) {\n         self.stmt_gen.reset_to_empty();\n         self.stmt_kill.reset_to_empty();\n+        {\n+            let mut sets = BlockSets {\n+                on_entry: &mut self.curr_state,\n+                gen_set: &mut self.stmt_gen,\n+                kill_set: &mut self.stmt_kill,\n+            };\n+            self.base_results\n+                .operator()\n+                .before_terminator_effect(&mut sets, loc);\n+        }\n+        self.apply_local_effect(loc);\n+\n         let mut sets = BlockSets {\n             on_entry: &mut self.curr_state,\n             gen_set: &mut self.stmt_gen,"}, {"sha": "19333dec3bc0559a67b53a46e415e552c1f099be", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 44, "deletions": 3, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=063b998950f9fcf77630fa820b24375d45426469", "patch": "@@ -214,6 +214,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n             }\n             for j_stmt in 0..statements.len() {\n                 let location = Location { block: bb, statement_index: j_stmt };\n+                self.flow_state.operator.before_statement_effect(sets, location);\n                 self.flow_state.operator.statement_effect(sets, location);\n                 if track_intrablock {\n                     sets.apply_local_effect();\n@@ -222,6 +223,7 @@ impl<'a, 'tcx: 'a, BD> DataflowAnalysis<'a, 'tcx, BD> where BD: BitDenotation\n \n             if terminator.is_some() {\n                 let location = Location { block: bb, statement_index: statements.len() };\n+                self.flow_state.operator.before_terminator_effect(sets, location);\n                 self.flow_state.operator.terminator_effect(sets, location);\n                 if track_intrablock {\n                     sets.apply_local_effect();\n@@ -365,9 +367,10 @@ pub(crate) trait DataflowResultsConsumer<'a, 'tcx: 'a> {\n     fn mir(&self) -> &'a Mir<'tcx>;\n }\n \n-pub fn state_for_location<T: BitDenotation>(loc: Location,\n-                                            analysis: &T,\n-                                            result: &DataflowResults<T>)\n+pub fn state_for_location<'tcx, T: BitDenotation>(loc: Location,\n+                                                  analysis: &T,\n+                                                  result: &DataflowResults<T>,\n+                                                  mir: &Mir<'tcx>)\n     -> IdxSetBuf<T::Idx> {\n     let mut entry = result.sets().on_entry_set_for(loc.block.index()).to_owned();\n \n@@ -381,8 +384,16 @@ pub fn state_for_location<T: BitDenotation>(loc: Location,\n         for stmt in 0..loc.statement_index {\n             let mut stmt_loc = loc;\n             stmt_loc.statement_index = stmt;\n+            analysis.before_statement_effect(&mut sets, stmt_loc);\n             analysis.statement_effect(&mut sets, stmt_loc);\n         }\n+\n+        // Apply the pre-statement effect of the statement we're evaluating.\n+        if loc.statement_index == mir[loc.block].statements.len() {\n+            analysis.before_terminator_effect(&mut sets, loc);\n+        } else {\n+            analysis.before_statement_effect(&mut sets, loc);\n+        }\n     }\n \n     entry\n@@ -637,6 +648,21 @@ pub trait BitDenotation: BitwiseOperator {\n     /// (For example, establishing the call arguments.)\n     fn start_block_effect(&self, entry_set: &mut IdxSet<Self::Idx>);\n \n+    /// Similar to `statement_effect`, except it applies\n+    /// *just before* the statement rather than *just after* it.\n+    ///\n+    /// This matters for \"dataflow at location\" APIs, because the\n+    /// before-statement effect is visible while visiting the\n+    /// statement, while the after-statement effect only becomes\n+    /// visible at the next statement.\n+    ///\n+    /// Both the before-statement and after-statement effects are\n+    /// applied, in that order, before moving for the next\n+    /// statement.\n+    fn before_statement_effect(&self,\n+                               _sets: &mut BlockSets<Self::Idx>,\n+                               _location: Location) {}\n+\n     /// Mutates the block-sets (the flow sets for the given\n     /// basic block) according to the effects of evaluating statement.\n     ///\n@@ -651,6 +677,21 @@ pub trait BitDenotation: BitwiseOperator {\n                         sets: &mut BlockSets<Self::Idx>,\n                         location: Location);\n \n+    /// Similar to `terminator_effect`, except it applies\n+    /// *just before* the terminator rather than *just after* it.\n+    ///\n+    /// This matters for \"dataflow at location\" APIs, because the\n+    /// before-terminator effect is visible while visiting the\n+    /// terminator, while the after-terminator effect only becomes\n+    /// visible at the terminator's successors.\n+    ///\n+    /// Both the before-terminator and after-terminator effects are\n+    /// applied, in that order, before moving for the next\n+    /// terminator.\n+    fn before_terminator_effect(&self,\n+                                _sets: &mut BlockSets<Self::Idx>,\n+                                _location: Location) {}\n+\n     /// Mutates the block-sets (the flow sets for the given\n     /// basic block) according to the effects of evaluating\n     /// the terminator."}, {"sha": "b226bb592cbc5cfe99c910eabcd6d1d7e24cda00", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=063b998950f9fcf77630fa820b24375d45426469", "patch": "@@ -363,7 +363,7 @@ fn locals_live_across_suspend_points<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                 statement_index: data.statements.len(),\n             };\n \n-            let storage_liveness = state_for_location(loc, &analysis, &storage_live);\n+            let storage_liveness = state_for_location(loc, &analysis, &storage_live, mir);\n \n             storage_liveness_map.insert(block, storage_liveness.clone());\n "}, {"sha": "b6153ea1fdbad175839dae13e6b33fd9256ceaca", "filename": "src/librustc_mir/transform/rustc_peek.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "raw_url": "https://github.com/rust-lang/rust/raw/063b998950f9fcf77630fa820b24375d45426469/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Frustc_peek.rs?ref=063b998950f9fcf77630fa820b24375d45426469", "patch": "@@ -203,11 +203,18 @@ fn each_block<'a, 'tcx, O>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // reset GEN and KILL sets before emulating their effect.\n         for e in sets.gen_set.words_mut() { *e = 0; }\n         for e in sets.kill_set.words_mut() { *e = 0; }\n-        results.0.operator.statement_effect(&mut sets, Location { block: bb, statement_index: j });\n+        results.0.operator.before_statement_effect(\n+            &mut sets, Location { block: bb, statement_index: j });\n+        results.0.operator.statement_effect(\n+            &mut sets, Location { block: bb, statement_index: j });\n         sets.on_entry.union(sets.gen_set);\n         sets.on_entry.subtract(sets.kill_set);\n     }\n \n+    results.0.operator.before_terminator_effect(\n+        &mut sets,\n+        Location { block: bb, statement_index: statements.len() });\n+\n     tcx.sess.span_err(span, &format!(\"rustc_peek: MIR did not match \\\n                                       anticipated pattern; note that \\\n                                       rustc_peek expects input of \\"}]}