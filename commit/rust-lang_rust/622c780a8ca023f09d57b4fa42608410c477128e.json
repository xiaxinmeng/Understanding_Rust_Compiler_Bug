{"sha": "622c780a8ca023f09d57b4fa42608410c477128e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyMmM3ODBhOGNhMDIzZjA5ZDU3YjRmYTQyNjA4NDEwYzQ3NzEyOGU=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T15:29:57Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2021-03-17T17:28:27Z"}, "message": "ItemTree: lower attributes on fn parameters", "tree": {"sha": "d3abeda6a55e2dc4bae686d749cdace8ade09b92", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3abeda6a55e2dc4bae686d749cdace8ade09b92"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/622c780a8ca023f09d57b4fa42608410c477128e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/622c780a8ca023f09d57b4fa42608410c477128e", "html_url": "https://github.com/rust-lang/rust/commit/622c780a8ca023f09d57b4fa42608410c477128e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/622c780a8ca023f09d57b4fa42608410c477128e/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "022a0f061e887bd27f54c028f9a23018b8eb2b8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/022a0f061e887bd27f54c028f9a23018b8eb2b8b", "html_url": "https://github.com/rust-lang/rust/commit/022a0f061e887bd27f54c028f9a23018b8eb2b8b"}], "stats": {"total": 77, "additions": 54, "deletions": 23}, "files": [{"sha": "f9bb0c6da470c8867be15cdcf76ea0001f80179e", "filename": "crates/hir_def/src/data.rs", "status": "modified", "additions": 15, "deletions": 3, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fdata.rs?ref=622c780a8ca023f09d57b4fa42608410c477128e", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     attr::Attrs,\n     body::Expander,\n     db::DefDatabase,\n-    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem},\n+    item_tree::{AssocItem, FunctionQualifier, ItemTreeId, ModItem, Param},\n     type_ref::{TypeBound, TypeRef},\n     visibility::RawVisibility,\n     AssocContainerId, AssocItemId, ConstId, ConstLoc, FunctionId, FunctionLoc, HasModule, ImplId,\n@@ -38,17 +38,29 @@ impl FunctionData {\n         let krate = loc.container.module(db).krate;\n         let item_tree = db.item_tree(loc.id.file_id);\n         let func = &item_tree[loc.id.value];\n+        let is_varargs = func\n+            .params\n+            .clone()\n+            .last()\n+            .map_or(false, |param| matches!(item_tree[param], Param::Varargs));\n \n         Arc::new(FunctionData {\n             name: func.name.clone(),\n-            params: func.params.iter().map(|id| item_tree[*id].clone()).collect(),\n+            params: func\n+                .params\n+                .clone()\n+                .filter_map(|id| match &item_tree[id] {\n+                    Param::Normal(ty) => Some(item_tree[*ty].clone()),\n+                    Param::Varargs => None,\n+                })\n+                .collect(),\n             ret_type: item_tree[func.ret_type].clone(),\n             attrs: item_tree.attrs(db, krate, ModItem::from(loc.id.value).into()),\n             has_self_param: func.has_self_param,\n             has_body: func.has_body,\n             qualifier: func.qualifier.clone(),\n             is_in_extern_block: func.is_in_extern_block,\n-            is_varargs: func.is_varargs,\n+            is_varargs,\n             visibility: item_tree[func.visibility].clone(),\n         })\n     }"}, {"sha": "c14da95ab56fbe1c273a17a597b1df641a3d2b90", "filename": "crates/hir_def/src/item_tree.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree.rs?ref=622c780a8ca023f09d57b4fa42608410c477128e", "patch": "@@ -134,6 +134,7 @@ impl ItemTree {\n                 imports,\n                 extern_crates,\n                 functions,\n+                params,\n                 structs,\n                 fields,\n                 unions,\n@@ -157,6 +158,7 @@ impl ItemTree {\n             imports.shrink_to_fit();\n             extern_crates.shrink_to_fit();\n             functions.shrink_to_fit();\n+            params.shrink_to_fit();\n             structs.shrink_to_fit();\n             fields.shrink_to_fit();\n             unions.shrink_to_fit();\n@@ -303,6 +305,7 @@ struct ItemTreeData {\n     imports: Arena<Import>,\n     extern_crates: Arena<ExternCrate>,\n     functions: Arena<Function>,\n+    params: Arena<Param>,\n     structs: Arena<Struct>,\n     fields: Arena<Field>,\n     unions: Arena<Union>,\n@@ -334,6 +337,7 @@ pub enum AttrOwner {\n \n     Variant(Idx<Variant>),\n     Field(Idx<Field>),\n+    Param(Idx<Param>),\n }\n \n macro_rules! from_attrs {\n@@ -348,7 +352,7 @@ macro_rules! from_attrs {\n     };\n }\n \n-from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>));\n+from_attrs!(ModItem(ModItem), Variant(Idx<Variant>), Field(Idx<Field>), Param(Idx<Param>));\n \n /// Trait implemented by all item nodes in the item tree.\n pub trait ItemTreeNode: Clone {\n@@ -484,7 +488,7 @@ macro_rules! impl_index {\n     };\n }\n \n-impl_index!(fields: Field, variants: Variant);\n+impl_index!(fields: Field, variants: Variant, params: Param);\n \n impl Index<RawVisibilityId> for ItemTree {\n     type Output = RawVisibility;\n@@ -560,12 +564,17 @@ pub struct Function {\n     /// Whether the function is located in an `extern` block (*not* whether it is an\n     /// `extern \"abi\" fn`).\n     pub is_in_extern_block: bool,\n-    pub params: Box<[Idx<TypeRef>]>,\n-    pub is_varargs: bool,\n+    pub params: IdRange<Param>,\n     pub ret_type: Idx<TypeRef>,\n     pub ast_id: FileAstId<ast::Fn>,\n }\n \n+#[derive(Debug, Clone, Eq, PartialEq)]\n+pub enum Param {\n+    Normal(Idx<TypeRef>),\n+    Varargs,\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct FunctionQualifier {\n     pub is_default: bool,\n@@ -796,6 +805,7 @@ pub struct Variant {\n     pub fields: Fields,\n }\n \n+/// A range of densely allocated ItemTree IDs.\n pub struct IdRange<T> {\n     range: Range<u32>,\n     _p: PhantomData<T>,"}, {"sha": "3f558edd81622e33d2feb6e8ada2b99dc5254740", "filename": "crates/hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/622c780a8ca023f09d57b4fa42608410c477128e/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=622c780a8ca023f09d57b4fa42608410c477128e", "patch": "@@ -333,8 +333,8 @@ impl Ctx {\n         let visibility = self.lower_visibility(func);\n         let name = func.name()?.as_name();\n \n-        let mut params = Vec::new();\n         let mut has_self_param = false;\n+        let start_param = self.next_param_idx();\n         if let Some(param_list) = func.param_list() {\n             if let Some(self_param) = param_list.self_param() {\n                 let self_type = match self_param.ty() {\n@@ -356,22 +356,25 @@ impl Ctx {\n                         }\n                     }\n                 };\n-                params.push(self_type);\n+                let ty = self.data().type_refs.intern(self_type);\n+                let idx = self.data().params.alloc(Param::Normal(ty));\n+                self.add_attrs(idx.into(), RawAttrs::new(&self_param, &self.hygiene));\n                 has_self_param = true;\n             }\n             for param in param_list.params() {\n-                let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n-                params.push(type_ref);\n-            }\n-        }\n-        let params = params.into_iter().map(|param| self.data().type_refs.intern(param)).collect();\n-\n-        let mut is_varargs = false;\n-        if let Some(params) = func.param_list() {\n-            if let Some(last) = params.params().last() {\n-                is_varargs = last.dotdotdot_token().is_some();\n+                let idx = match param.dotdotdot_token() {\n+                    Some(_) => self.data().params.alloc(Param::Varargs),\n+                    None => {\n+                        let type_ref = TypeRef::from_ast_opt(&self.body_ctx, param.ty());\n+                        let ty = self.data().type_refs.intern(type_ref);\n+                        self.data().params.alloc(Param::Normal(ty))\n+                    }\n+                };\n+                self.add_attrs(idx.into(), RawAttrs::new(&param, &self.hygiene));\n             }\n         }\n+        let end_param = self.next_param_idx();\n+        let params = IdRange::new(start_param..end_param);\n \n         let ret_type = match func.ret_type().and_then(|rt| rt.ty()) {\n             Some(type_ref) => TypeRef::from_ast(&self.body_ctx, type_ref),\n@@ -419,7 +422,6 @@ impl Ctx {\n             qualifier,\n             is_in_extern_block: false,\n             params,\n-            is_varargs,\n             ret_type,\n             ast_id,\n         };\n@@ -682,9 +684,11 @@ impl Ctx {\n             GenericsOwner::Function(func) => {\n                 generics.fill(&self.body_ctx, sm, node);\n                 // lower `impl Trait` in arguments\n-                for param in &*func.params {\n-                    let param = self.data().type_refs.lookup(*param);\n-                    generics.fill_implicit_impl_trait_args(param);\n+                for id in func.params.clone() {\n+                    if let Param::Normal(ty) = self.data().params[id] {\n+                        let ty = self.data().type_refs.lookup(ty);\n+                        generics.fill_implicit_impl_trait_args(ty);\n+                    }\n                 }\n             }\n             GenericsOwner::Struct\n@@ -769,6 +773,11 @@ impl Ctx {\n             self.tree.data.as_ref().map_or(0, |data| data.variants.len() as u32),\n         ))\n     }\n+    fn next_param_idx(&self) -> Idx<Param> {\n+        Idx::from_raw(RawIdx::from(\n+            self.tree.data.as_ref().map_or(0, |data| data.params.len() as u32),\n+        ))\n+    }\n }\n \n fn desugar_future_path(orig: TypeRef) -> Path {"}]}