{"sha": "79e066fc95c036e64716a4222c580782a9c932c2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5ZTA2NmZjOTVjMDM2ZTY0NzE2YTQyMjJjNTgwNzgyYTljOTMyYzI=", "commit": {"author": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-03T15:09:09Z"}, "committer": {"name": "Samrat Man Singh", "email": "samratmansingh@gmail.com", "date": "2020-08-03T15:09:09Z"}, "message": "Remove unnecessary `clone()` on `writable`", "tree": {"sha": "afa30e806ce59bc3d98454f95b9566d18cb13f74", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/afa30e806ce59bc3d98454f95b9566d18cb13f74"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79e066fc95c036e64716a4222c580782a9c932c2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79e066fc95c036e64716a4222c580782a9c932c2", "html_url": "https://github.com/rust-lang/rust/commit/79e066fc95c036e64716a4222c580782a9c932c2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79e066fc95c036e64716a4222c580782a9c932c2/comments", "author": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "committer": {"login": "samrat", "id": 480806, "node_id": "MDQ6VXNlcjQ4MDgwNg==", "avatar_url": "https://avatars.githubusercontent.com/u/480806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/samrat", "html_url": "https://github.com/samrat", "followers_url": "https://api.github.com/users/samrat/followers", "following_url": "https://api.github.com/users/samrat/following{/other_user}", "gists_url": "https://api.github.com/users/samrat/gists{/gist_id}", "starred_url": "https://api.github.com/users/samrat/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/samrat/subscriptions", "organizations_url": "https://api.github.com/users/samrat/orgs", "repos_url": "https://api.github.com/users/samrat/repos", "events_url": "https://api.github.com/users/samrat/events{/privacy}", "received_events_url": "https://api.github.com/users/samrat/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3386f12eca5db75ee679c5d08fecec88ae99e6a0", "url": "https://api.github.com/repos/rust-lang/rust/commits/3386f12eca5db75ee679c5d08fecec88ae99e6a0", "html_url": "https://github.com/rust-lang/rust/commit/3386f12eca5db75ee679c5d08fecec88ae99e6a0"}], "stats": {"total": 4, "additions": 2, "deletions": 2}, "files": [{"sha": "1bba30a1ea0ff86c70b8f908bcfc61951e5ba8b6", "filename": "src/shims/posix/fs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79e066fc95c036e64716a4222c580782a9c932c2/src%2Fshims%2Fposix%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79e066fc95c036e64716a4222c580782a9c932c2/src%2Fshims%2Fposix%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fposix%2Ffs.rs?ref=79e066fc95c036e64716a4222c580782a9c932c2", "patch": "@@ -411,13 +411,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             let fh = &mut this.machine.file_handler;\n             let (file_result, writable) = match fh.handles.get(&fd) {\n                 Some(file_descriptor) => match file_descriptor.as_file_handle() {\n-                    Ok(FileHandle { file, writable }) => (file.try_clone(), writable.clone()),\n+                    Ok(FileHandle { file, writable }) => (file.try_clone(), *writable),\n                     Err(_) => return this.handle_not_found(),\n                 },\n                 None => return this.handle_not_found(),\n             };\n             let fd_result = file_result.map(|duplicated| {\n-                fh.insert_fd_with_min_fd(FileHandle { file: duplicated, writable: writable }, start)\n+                fh.insert_fd_with_min_fd(FileHandle { file: duplicated, writable }, start)\n             });\n             this.try_unwrap_io_result(fd_result)\n         } else if this.tcx.sess.target.target.target_os == \"macos\""}]}