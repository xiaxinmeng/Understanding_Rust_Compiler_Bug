{"sha": "d154ea88f90e570b9d88dba021050f9030238c79", "node_id": "C_kwDOAAsO6NoAKGQxNTRlYTg4ZjkwZTU3MGI5ZDg4ZGJhMDIxMDUwZjkwMzAyMzhjNzk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-25T15:42:52Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-03-25T15:46:44Z"}, "message": "Split out proc-macros from the CrateGraph", "tree": {"sha": "1c8c12b344f318ecb1406c0ae1a6ab7315f40b4b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1c8c12b344f318ecb1406c0ae1a6ab7315f40b4b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d154ea88f90e570b9d88dba021050f9030238c79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d154ea88f90e570b9d88dba021050f9030238c79", "html_url": "https://github.com/rust-lang/rust/commit/d154ea88f90e570b9d88dba021050f9030238c79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d154ea88f90e570b9d88dba021050f9030238c79/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71b23360e781a00e51ed702a96e181261e92c6c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/71b23360e781a00e51ed702a96e181261e92c6c5", "html_url": "https://github.com/rust-lang/rust/commit/71b23360e781a00e51ed702a96e181261e92c6c5"}], "stats": {"total": 315, "additions": 140, "deletions": 175}, "files": [{"sha": "b906511dbcfe253e191bfef7d45b0abd808892aa", "filename": "crates/base-db/src/change.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Fchange.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -6,14 +6,15 @@ use std::{fmt, sync::Arc};\n use salsa::Durability;\n use vfs::FileId;\n \n-use crate::{CrateGraph, SourceDatabaseExt, SourceRoot, SourceRootId};\n+use crate::{CrateGraph, ProcMacros, SourceDatabaseExt, SourceRoot, SourceRootId};\n \n /// Encapsulate a bunch of raw `.set` calls on the database.\n #[derive(Default)]\n pub struct Change {\n     pub roots: Option<Vec<SourceRoot>>,\n     pub files_changed: Vec<(FileId, Option<Arc<String>>)>,\n     pub crate_graph: Option<CrateGraph>,\n+    pub proc_macros: Option<ProcMacros>,\n }\n \n impl fmt::Debug for Change {\n@@ -49,6 +50,10 @@ impl Change {\n         self.crate_graph = Some(graph);\n     }\n \n+    pub fn set_proc_macros(&mut self, proc_macros: ProcMacros) {\n+        self.proc_macros = Some(proc_macros);\n+    }\n+\n     pub fn apply(self, db: &mut dyn SourceDatabaseExt) {\n         let _p = profile::span(\"RootDatabase::apply_change\");\n         if let Some(roots) = self.roots {\n@@ -73,6 +78,9 @@ impl Change {\n         if let Some(crate_graph) = self.crate_graph {\n             db.set_crate_graph_with_durability(Arc::new(crate_graph), Durability::HIGH)\n         }\n+        if let Some(proc_macros) = self.proc_macros {\n+            db.set_proc_macros_with_durability(Arc::new(proc_macros), Durability::HIGH)\n+        }\n     }\n }\n "}, {"sha": "7269180a5d61145bbdb44debd370ff6079a61ae2", "filename": "crates/base-db/src/fixture.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Ffixture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Ffixture.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -12,8 +12,8 @@ use vfs::{file_set::FileSet, VfsPath};\n use crate::{\n     input::{CrateName, CrateOrigin, LangCrateOrigin},\n     Change, CrateDisplayName, CrateGraph, CrateId, Dependency, Edition, Env, FileId, FilePosition,\n-    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, SourceDatabaseExt,\n-    SourceRoot, SourceRootId,\n+    FileRange, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacros,\n+    SourceDatabaseExt, SourceRoot, SourceRootId,\n };\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n@@ -100,7 +100,7 @@ impl ChangeFixture {\n \n     pub fn parse_with_proc_macros(\n         ra_fixture: &str,\n-        mut proc_macros: Vec<(String, ProcMacro)>,\n+        mut proc_macro_defs: Vec<(String, ProcMacro)>,\n     ) -> ChangeFixture {\n         let (mini_core, proc_macro_names, fixture) = Fixture::parse(ra_fixture);\n         let mut change = Change::new();\n@@ -160,7 +160,6 @@ impl ChangeFixture {\n                     meta.cfg.clone(),\n                     meta.cfg,\n                     meta.env,\n-                    Ok(Vec::new()),\n                     false,\n                     origin,\n                     meta.target_data_layout\n@@ -200,7 +199,6 @@ impl ChangeFixture {\n                 default_cfg.clone(),\n                 default_cfg,\n                 Env::default(),\n-                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n                 default_target_data_layout\n@@ -244,7 +242,6 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                Ok(Vec::new()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::Core),\n                 target_layout.clone(),\n@@ -257,12 +254,13 @@ impl ChangeFixture {\n             }\n         }\n \n+        let mut proc_macros = ProcMacros::default();\n         if !proc_macro_names.is_empty() {\n             let proc_lib_file = file_id;\n             file_id.0 += 1;\n \n-            proc_macros.extend(default_test_proc_macros());\n-            let (proc_macro, source) = filter_test_proc_macros(&proc_macro_names, proc_macros);\n+            proc_macro_defs.extend(default_test_proc_macros());\n+            let (proc_macro, source) = filter_test_proc_macros(&proc_macro_names, proc_macro_defs);\n             let mut fs = FileSet::default();\n             fs.insert(\n                 proc_lib_file,\n@@ -282,11 +280,11 @@ impl ChangeFixture {\n                 CfgOptions::default(),\n                 CfgOptions::default(),\n                 Env::default(),\n-                Ok(proc_macro),\n                 true,\n                 CrateOrigin::CratesIo { repo: None, name: None },\n                 target_layout,\n             );\n+            proc_macros.insert(proc_macros_crate, Ok(proc_macro));\n \n             for krate in all_crates {\n                 crate_graph\n@@ -305,6 +303,7 @@ impl ChangeFixture {\n         roots.push(root);\n         change.set_roots(roots);\n         change.set_crate_graph(crate_graph);\n+        change.set_proc_macros(proc_macros);\n \n         ChangeFixture { file_position, files, change }\n     }"}, {"sha": "41a2abd803a62130843d5fdf7ade3bb3706f1014", "filename": "crates/base-db/src/input.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Finput.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -15,6 +15,8 @@ use syntax::SmolStr;\n use tt::token_id::Subtree;\n use vfs::{file_set::FileSet, AnchoredPath, FileId, VfsPath};\n \n+pub type ProcMacros = FxHashMap<CrateId, ProcMacroLoadResult>;\n+\n /// Files are grouped into source roots. A source root is a directory on the\n /// file systems which is watched for changes. Typically it corresponds to a\n /// Rust crate. Source roots *might* be nested: in this case, a file belongs to\n@@ -269,7 +271,6 @@ pub struct CrateData {\n     pub target_layout: TargetLayoutLoadResult,\n     pub env: Env,\n     pub dependencies: Vec<Dependency>,\n-    pub proc_macro: ProcMacroLoadResult,\n     pub origin: CrateOrigin,\n     pub is_proc_macro: bool,\n }\n@@ -322,7 +323,6 @@ impl CrateGraph {\n         cfg_options: CfgOptions,\n         potential_cfg_options: CfgOptions,\n         env: Env,\n-        proc_macro: ProcMacroLoadResult,\n         is_proc_macro: bool,\n         origin: CrateOrigin,\n         target_layout: Result<Arc<str>, Arc<str>>,\n@@ -335,7 +335,6 @@ impl CrateGraph {\n             cfg_options,\n             potential_cfg_options,\n             env,\n-            proc_macro,\n             dependencies: Vec::new(),\n             origin,\n             target_layout,\n@@ -460,7 +459,12 @@ impl CrateGraph {\n     ///\n     /// The ids of the crates in the `other` graph are shifted by the return\n     /// amount.\n-    pub fn extend(&mut self, other: CrateGraph) -> u32 {\n+    pub fn extend(\n+        &mut self,\n+        other: CrateGraph,\n+        proc_macros: &mut ProcMacros,\n+        other_proc_macros: ProcMacros,\n+    ) -> u32 {\n         let start = self.arena.len() as u32;\n         self.arena.extend(other.arena.into_iter().map(|(id, mut data)| {\n             let new_id = id.shift(start);\n@@ -469,6 +473,8 @@ impl CrateGraph {\n             }\n             (new_id, data)\n         }));\n+        proc_macros\n+            .extend(other_proc_macros.into_iter().map(|(id, macros)| (id.shift(start), macros)));\n         start\n     }\n \n@@ -645,7 +651,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -658,7 +663,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -671,7 +675,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -698,7 +701,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -711,7 +713,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -735,7 +736,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -748,7 +748,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -761,7 +760,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -785,7 +783,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),\n@@ -798,7 +795,6 @@ mod tests {\n             CfgOptions::default(),\n             CfgOptions::default(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"\".into()),"}, {"sha": "7ab9aa8709c042d20ce7f1b7a4b86129d764c344", "filename": "crates/base-db/src/lib.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fbase-db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fbase-db%2Fsrc%2Flib.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -16,7 +16,7 @@ pub use crate::{\n     input::{\n         CrateData, CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency,\n         Edition, Env, LangCrateOrigin, ProcMacro, ProcMacroExpander, ProcMacroExpansionError,\n-        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, SourceRoot, SourceRootId,\n+        ProcMacroId, ProcMacroKind, ProcMacroLoadResult, ProcMacros, SourceRoot, SourceRootId,\n         TargetLayoutLoadResult,\n     },\n };\n@@ -73,6 +73,10 @@ pub trait SourceDatabase: FileLoader + std::fmt::Debug {\n     /// The crate graph.\n     #[salsa::input]\n     fn crate_graph(&self) -> Arc<CrateGraph>;\n+\n+    /// The crate graph.\n+    #[salsa::input]\n+    fn proc_macros(&self) -> Arc<ProcMacros>;\n }\n \n fn parse_query(db: &dyn SourceDatabase, file_id: FileId) -> Parse<ast::SourceFile> {"}, {"sha": "b3ce913d9ab572342e6769b9d5b3df384414ed84", "filename": "crates/hir-def/src/nameres/collector.rs", "status": "modified", "additions": 27, "deletions": 17, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fnameres%2Fcollector.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -78,25 +78,35 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: DefMap, tree_id: T\n     }\n \n     let cfg_options = &krate.cfg_options;\n-    let proc_macros = match &krate.proc_macro {\n-        Ok(proc_macros) => {\n-            proc_macros\n-                .iter()\n-                .enumerate()\n-                .map(|(idx, it)| {\n-                    // FIXME: a hacky way to create a Name from string.\n-                    let name =\n-                        tt::Ident { text: it.name.clone(), span: tt::TokenId::unspecified() };\n-                    (name.as_name(), ProcMacroExpander::new(base_db::ProcMacroId(idx as u32)))\n-                })\n-                .collect()\n-        }\n-        Err(e) => {\n-            def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n-            Vec::new()\n+\n+    let is_proc_macro = krate.is_proc_macro;\n+    let proc_macros = if is_proc_macro {\n+        match db.proc_macros().get(&def_map.krate) {\n+            Some(Ok(proc_macros)) => {\n+                proc_macros\n+                    .iter()\n+                    .enumerate()\n+                    .map(|(idx, it)| {\n+                        // FIXME: a hacky way to create a Name from string.\n+                        let name =\n+                            tt::Ident { text: it.name.clone(), span: tt::TokenId::unspecified() };\n+                        (name.as_name(), ProcMacroExpander::new(base_db::ProcMacroId(idx as u32)))\n+                    })\n+                    .collect()\n+            }\n+            Some(Err(e)) => {\n+                def_map.proc_macro_loading_error = Some(e.clone().into_boxed_str());\n+                Vec::new()\n+            }\n+            None => {\n+                def_map.proc_macro_loading_error =\n+                    Some(\"No proc-macros present for crate\".to_owned().into_boxed_str());\n+                Vec::new()\n+            }\n         }\n+    } else {\n+        vec![]\n     };\n-    let is_proc_macro = krate.is_proc_macro;\n \n     let mut collector = DefCollector {\n         db,"}, {"sha": "ad9893587406a0f487df814f8c85b1670dffdfc9", "filename": "crates/hir-expand/src/proc_macro.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-expand%2Fsrc%2Fproc_macro.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -33,10 +33,10 @@ impl ProcMacroExpander {\n     ) -> ExpandResult<tt::Subtree> {\n         match self.proc_macro_id {\n             Some(id) => {\n-                let krate_graph = db.crate_graph();\n-                let proc_macros = match &krate_graph[def_crate].proc_macro {\n-                    Ok(proc_macros) => proc_macros,\n-                    Err(_) => {\n+                let proc_macros = db.proc_macros();\n+                let proc_macros = match proc_macros.get(&def_crate) {\n+                    Some(Ok(proc_macros)) => proc_macros,\n+                    Some(Err(_)) | None => {\n                         never!(\"Non-dummy expander even though there are no proc macros\");\n                         return ExpandResult::with_err(\n                             tt::Subtree::empty(),\n@@ -59,6 +59,7 @@ impl ProcMacroExpander {\n                     }\n                 };\n \n+                let krate_graph = db.crate_graph();\n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n                 match proc_macro.expander.expand(tt, attr_arg, env) {"}, {"sha": "8477a8e6228d53c13750123c43ebe1b8f7471a90", "filename": "crates/ide/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fide%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fide%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Flib.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -235,7 +235,6 @@ impl Analysis {\n             cfg_options.clone(),\n             cfg_options,\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo { repo: None, name: None },\n             Err(\"Analysis::from_single_file has no target layout\".into()),"}, {"sha": "471c36dfecf5777524358a28327706cd84171094", "filename": "crates/ide/src/shuffle_crate_graph.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fshuffle_crate_graph.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -1,7 +1,7 @@\n use std::sync::Arc;\n \n use ide_db::{\n-    base_db::{salsa::Durability, CrateGraph, SourceDatabase},\n+    base_db::{salsa::Durability, CrateGraph, ProcMacros, SourceDatabase},\n     FxHashMap, RootDatabase,\n };\n \n@@ -16,13 +16,15 @@ use ide_db::{\n // |===\n pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n     let crate_graph = db.crate_graph();\n+    let proc_macros = db.proc_macros();\n \n     let mut shuffled_ids = crate_graph.iter().collect::<Vec<_>>();\n \n     let mut rng = oorandom::Rand32::new(stdx::rand::seed());\n     stdx::rand::shuffle(&mut shuffled_ids, |i| rng.rand_range(0..i as u32) as usize);\n \n     let mut new_graph = CrateGraph::default();\n+    let mut new_proc_macros = ProcMacros::default();\n \n     let mut map = FxHashMap::default();\n     for old_id in shuffled_ids.iter().copied() {\n@@ -35,11 +37,11 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n             data.cfg_options.clone(),\n             data.potential_cfg_options.clone(),\n             data.env.clone(),\n-            data.proc_macro.clone(),\n             data.is_proc_macro,\n             data.origin.clone(),\n             data.target_layout.clone(),\n         );\n+        new_proc_macros.insert(new_id, proc_macros[&old_id].clone());\n         map.insert(old_id, new_id);\n     }\n \n@@ -53,4 +55,5 @@ pub(crate) fn shuffle_crate_graph(db: &mut RootDatabase) {\n     }\n \n     db.set_crate_graph_with_durability(Arc::new(new_graph), Durability::HIGH);\n+    db.set_proc_macros_with_durability(Arc::new(new_proc_macros), Durability::HIGH);\n }"}, {"sha": "ed78d71a1a57ae1d5e87bbbb122cb2bbd932b0c9", "filename": "crates/project-model/src/tests.rs", "status": "modified", "additions": 12, "deletions": 88, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fproject-model%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fproject-model%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Ftests.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -3,7 +3,7 @@ use std::{\n     path::{Path, PathBuf},\n };\n \n-use base_db::{CrateGraph, FileId};\n+use base_db::{CrateGraph, FileId, ProcMacros};\n use cfg::{CfgAtom, CfgDiff};\n use expect_test::{expect, Expect};\n use paths::{AbsPath, AbsPathBuf};\n@@ -14,11 +14,11 @@ use crate::{\n     WorkspaceBuildScripts,\n };\n \n-fn load_cargo(file: &str) -> CrateGraph {\n+fn load_cargo(file: &str) -> (CrateGraph, ProcMacros) {\n     load_cargo_with_overrides(file, CfgOverrides::default())\n }\n \n-fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGraph {\n+fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> (CrateGraph, ProcMacros) {\n     let meta = get_test_json_file(file);\n     let cargo_workspace = CargoWorkspace::new(meta);\n     let project_workspace = ProjectWorkspace::Cargo {\n@@ -34,7 +34,7 @@ fn load_cargo_with_overrides(file: &str, cfg_overrides: CfgOverrides) -> CrateGr\n     to_crate_graph(project_workspace)\n }\n \n-fn load_rust_project(file: &str) -> CrateGraph {\n+fn load_rust_project(file: &str) -> (CrateGraph, ProcMacros) {\n     let data = get_test_json_file(file);\n     let project = rooted_project_json(data);\n     let sysroot = Ok(get_fake_sysroot());\n@@ -92,7 +92,7 @@ fn rooted_project_json(data: ProjectJsonData) -> ProjectJson {\n     ProjectJson::new(base, data)\n }\n \n-fn to_crate_graph(project_workspace: ProjectWorkspace) -> CrateGraph {\n+fn to_crate_graph(project_workspace: ProjectWorkspace) -> (CrateGraph, ProcMacros) {\n     project_workspace.to_crate_graph(\n         &mut |_, _| Ok(Vec::new()),\n         &mut {\n@@ -117,7 +117,8 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n     let cfg_overrides = CfgOverrides::Wildcard(\n         CfgDiff::new(Vec::new(), vec![CfgAtom::Flag(\"test\".into())]).unwrap(),\n     );\n-    let crate_graph = load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n+    let (crate_graph, _proc_macros) =\n+        load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -184,9 +185,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -265,9 +263,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -346,9 +341,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -427,9 +419,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -498,9 +487,6 @@ fn cargo_hello_world_project_model_with_wildcard_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -527,7 +513,8 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n             .collect(),\n         )\n     };\n-    let crate_graph = load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n+    let (crate_graph, _proc_macros) =\n+        load_cargo_with_overrides(\"hello-world-metadata.json\", cfg_overrides);\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -596,9 +583,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -679,9 +663,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -762,9 +743,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -845,9 +823,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -916,9 +891,6 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -936,7 +908,7 @@ fn cargo_hello_world_project_model_with_selective_overrides() {\n \n #[test]\n fn cargo_hello_world_project_model() {\n-    let crate_graph = load_cargo(\"hello-world-metadata.json\");\n+    let (crate_graph, _proc_macros) = load_cargo(\"hello-world-metadata.json\");\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -1005,9 +977,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1088,9 +1057,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1171,9 +1137,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1254,9 +1217,6 @@ fn cargo_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1325,9 +1285,6 @@ fn cargo_hello_world_project_model() {\n                             },\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"crate has not (yet) been built\",\n-                        ),\n                         origin: CratesIo {\n                             repo: Some(\n                                 \"https://github.com/rust-lang/libc\",\n@@ -1345,7 +1302,7 @@ fn cargo_hello_world_project_model() {\n \n #[test]\n fn rust_project_hello_world_project_model() {\n-    let crate_graph = load_rust_project(\"hello-world-project.json\");\n+    let (crate_graph, _proc_macros) = load_rust_project(\"hello-world-project.json\");\n     check_crate_graph(\n         crate_graph,\n         expect![[r#\"\n@@ -1390,9 +1347,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Alloc,\n                         ),\n@@ -1427,9 +1381,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Core,\n                         ),\n@@ -1464,9 +1415,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1501,9 +1449,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1557,9 +1502,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1594,9 +1536,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1704,9 +1643,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: true,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Std,\n                         ),\n@@ -1741,9 +1677,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1778,9 +1711,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Test,\n                         ),\n@@ -1815,9 +1745,6 @@ fn rust_project_hello_world_project_model() {\n                             entries: {},\n                         },\n                         dependencies: [],\n-                        proc_macro: Err(\n-                            \"no proc macro loaded for sysroot crate\",\n-                        ),\n                         origin: Lang(\n                             Other,\n                         ),\n@@ -1889,9 +1816,6 @@ fn rust_project_hello_world_project_model() {\n                                 prelude: false,\n                             },\n                         ],\n-                        proc_macro: Err(\n-                            \"no proc macro dylib present\",\n-                        ),\n                         origin: CratesIo {\n                             repo: None,\n                             name: Some(\n@@ -1907,7 +1831,7 @@ fn rust_project_hello_world_project_model() {\n \n #[test]\n fn rust_project_is_proc_macro_has_proc_macro_dep() {\n-    let crate_graph = load_rust_project(\"is-proc-macro-project.json\");\n+    let (crate_graph, _proc_macros) = load_rust_project(\"is-proc-macro-project.json\");\n     // Since the project only defines one crate (outside the sysroot crates),\n     // it should be the one with the biggest Id.\n     let crate_id = crate_graph.iter().max().unwrap();"}, {"sha": "5766859143b2054ad723c49c95de4ebd04c9b977", "filename": "crates/project-model/src/workspace.rs", "status": "modified", "additions": 37, "deletions": 29, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Fproject-model%2Fsrc%2Fworkspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fproject-model%2Fsrc%2Fworkspace.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -7,7 +7,7 @@ use std::{collections::VecDeque, fmt, fs, process::Command, sync::Arc};\n use anyhow::{bail, format_err, Context, Result};\n use base_db::{\n     CrateDisplayName, CrateGraph, CrateId, CrateName, CrateOrigin, Dependency, Edition, Env,\n-    FileId, LangCrateOrigin, ProcMacroLoadResult, TargetLayoutLoadResult,\n+    FileId, LangCrateOrigin, ProcMacroLoadResult, ProcMacros, TargetLayoutLoadResult,\n };\n use cfg::{CfgDiff, CfgOptions};\n use paths::{AbsPath, AbsPathBuf};\n@@ -579,10 +579,10 @@ impl ProjectWorkspace {\n         load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n         load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n         extra_env: &FxHashMap<String, String>,\n-    ) -> CrateGraph {\n+    ) -> (CrateGraph, ProcMacros) {\n         let _p = profile::span(\"ProjectWorkspace::to_crate_graph\");\n \n-        let mut crate_graph = match self {\n+        let (mut crate_graph, proc_macros) = match self {\n             ProjectWorkspace::Json { project, sysroot, rustc_cfg } => project_json_to_crate_graph(\n                 rustc_cfg.clone(),\n                 load_proc_macro,\n@@ -630,7 +630,7 @@ impl ProjectWorkspace {\n         } else {\n             tracing::debug!(\"Did not patch std to depend on cfg-if\")\n         }\n-        crate_graph\n+        (crate_graph, proc_macros)\n     }\n \n     pub fn eq_ignore_build_data(&self, other: &Self) -> bool {\n@@ -685,8 +685,9 @@ fn project_json_to_crate_graph(\n     sysroot: Option<&Sysroot>,\n     extra_env: &FxHashMap<String, String>,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacros) {\n     let mut crate_graph = CrateGraph::default();\n+    let mut proc_macros = FxHashMap::<_, _>::default();\n     let sysroot_deps = sysroot.as_ref().map(|sysroot| {\n         sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -707,13 +708,15 @@ fn project_json_to_crate_graph(\n         })\n         .map(|(crate_id, krate, file_id)| {\n             let env = krate.env.clone().into_iter().collect();\n-            let proc_macro = match krate.proc_macro_dylib_path.clone() {\n-                Some(it) => load_proc_macro(\n-                    krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n-                    &it,\n-                ),\n-                None => Err(\"no proc macro dylib present\".into()),\n-            };\n+            if let Some(it) = krate.proc_macro_dylib_path.clone() {\n+                proc_macros.insert(\n+                    crate_id,\n+                    load_proc_macro(\n+                        krate.display_name.as_ref().map(|it| it.canonical_name()).unwrap_or(\"\"),\n+                        &it,\n+                    ),\n+                );\n+            }\n \n             let target_cfgs = match krate.target.as_deref() {\n                 Some(target) => cfg_cache\n@@ -734,7 +737,6 @@ fn project_json_to_crate_graph(\n                     cfg_options.clone(),\n                     cfg_options,\n                     env,\n-                    proc_macro,\n                     krate.is_proc_macro,\n                     if krate.display_name.is_some() {\n                         CrateOrigin::CratesIo {\n@@ -776,7 +778,7 @@ fn project_json_to_crate_graph(\n             }\n         }\n     }\n-    crate_graph\n+    (crate_graph, proc_macros)\n }\n \n fn cargo_to_crate_graph(\n@@ -789,9 +791,10 @@ fn cargo_to_crate_graph(\n     override_cfg: &CfgOverrides,\n     build_scripts: &WorkspaceBuildScripts,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacros) {\n     let _p = profile::span(\"cargo_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n+    let mut proc_macros = FxHashMap::default();\n     let (public_deps, libproc_macro) = match sysroot {\n         Some(sysroot) => sysroot_to_crate_graph(\n             &mut crate_graph,\n@@ -855,6 +858,7 @@ fn cargo_to_crate_graph(\n             if let Some(file_id) = load(&cargo[tgt].root) {\n                 let crate_id = add_target_crate_root(\n                     &mut crate_graph,\n+                    &mut proc_macros,\n                     &cargo[pkg],\n                     build_scripts.get_output(pkg),\n                     cfg_options.clone(),\n@@ -931,6 +935,7 @@ fn cargo_to_crate_graph(\n         if let Some((rustc_workspace, rustc_build_scripts)) = rustc {\n             handle_rustc_crates(\n                 &mut crate_graph,\n+                &mut proc_macros,\n                 &mut pkg_to_lib_crate,\n                 load,\n                 load_proc_macro,\n@@ -952,7 +957,7 @@ fn cargo_to_crate_graph(\n             );\n         }\n     }\n-    crate_graph\n+    (crate_graph, proc_macros)\n }\n \n fn detached_files_to_crate_graph(\n@@ -961,7 +966,7 @@ fn detached_files_to_crate_graph(\n     detached_files: &[AbsPathBuf],\n     sysroot: Option<&Sysroot>,\n     target_layout: TargetLayoutLoadResult,\n-) -> CrateGraph {\n+) -> (CrateGraph, ProcMacros) {\n     let _p = profile::span(\"detached_files_to_crate_graph\");\n     let mut crate_graph = CrateGraph::default();\n     let (public_deps, _libproc_macro) = match sysroot {\n@@ -998,7 +1003,6 @@ fn detached_files_to_crate_graph(\n             cfg_options.clone(),\n             cfg_options.clone(),\n             Env::default(),\n-            Ok(Vec::new()),\n             false,\n             CrateOrigin::CratesIo {\n                 repo: None,\n@@ -1009,11 +1013,12 @@ fn detached_files_to_crate_graph(\n \n         public_deps.add_to_crate_graph(&mut crate_graph, detached_file_crate);\n     }\n-    crate_graph\n+    (crate_graph, FxHashMap::default())\n }\n \n fn handle_rustc_crates(\n     crate_graph: &mut CrateGraph,\n+    proc_macros: &mut ProcMacros,\n     pkg_to_lib_crate: &mut FxHashMap<Package, CrateId>,\n     load: &mut dyn FnMut(&AbsPath) -> Option<FileId>,\n     load_proc_macro: &mut dyn FnMut(&str, &AbsPath) -> ProcMacroLoadResult,\n@@ -1075,6 +1080,7 @@ fn handle_rustc_crates(\n                 if let Some(file_id) = load(&rustc_workspace[tgt].root) {\n                     let crate_id = add_target_crate_root(\n                         crate_graph,\n+                        proc_macros,\n                         &rustc_workspace[pkg],\n                         build_scripts.get_output(pkg),\n                         cfg_options.clone(),\n@@ -1140,6 +1146,7 @@ fn handle_rustc_crates(\n \n fn add_target_crate_root(\n     crate_graph: &mut CrateGraph,\n+    proc_macros: &mut ProcMacros,\n     pkg: &PackageData,\n     build_data: Option<&BuildScriptOutput>,\n     cfg_options: CfgOptions,\n@@ -1176,26 +1183,28 @@ fn add_target_crate_root(\n         }\n     }\n \n-    let proc_macro = match build_data.as_ref().map(|it| it.proc_macro_dylib_path.as_ref()) {\n-        Some(Some(it)) => load_proc_macro(it),\n-        Some(None) => Err(\"no proc macro dylib present\".into()),\n-        None => Err(\"crate has not (yet) been built\".into()),\n-    };\n-\n     let display_name = CrateDisplayName::from_canonical_name(cargo_name.to_string());\n-    crate_graph.add_crate_root(\n+    let crate_id = crate_graph.add_crate_root(\n         file_id,\n         edition,\n         Some(display_name),\n         Some(pkg.version.to_string()),\n         cfg_options,\n         potential_cfg_options,\n         env,\n-        proc_macro,\n         is_proc_macro,\n         CrateOrigin::CratesIo { repo: pkg.repository.clone(), name: Some(pkg.name.clone()) },\n         target_layout,\n-    )\n+    );\n+    let proc_macro = match build_data.as_ref().map(|it| &it.proc_macro_dylib_path) {\n+        Some(it) => it.as_deref().map(load_proc_macro),\n+        None => Some(Err(\"crate has not (yet) been built\".into())),\n+    };\n+    if let Some(proc_macro) = proc_macro {\n+        proc_macros.insert(crate_id, proc_macro);\n+    }\n+\n+    crate_id\n }\n \n #[derive(Default)]\n@@ -1237,7 +1246,6 @@ fn sysroot_to_crate_graph(\n                 cfg_options.clone(),\n                 cfg_options.clone(),\n                 env,\n-                Err(\"no proc macro loaded for sysroot crate\".into()),\n                 false,\n                 CrateOrigin::Lang(LangCrateOrigin::from(&*sysroot[krate].name)),\n                 target_layout.clone(),"}, {"sha": "2d15d673edb0480e6ee7972e70f39195cf2037ee", "filename": "crates/rust-analyzer/src/cli/load_cargo.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fload_cargo.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -6,7 +6,10 @@ use anyhow::Result;\n use crossbeam_channel::{unbounded, Receiver};\n use hir::db::DefDatabase;\n use ide::{AnalysisHost, Change};\n-use ide_db::{base_db::CrateGraph, FxHashMap};\n+use ide_db::{\n+    base_db::{CrateGraph, ProcMacros},\n+    FxHashMap,\n+};\n use proc_macro_api::ProcMacroServer;\n use project_model::{CargoConfig, ProjectManifest, ProjectWorkspace};\n use vfs::{loader::Handle, AbsPath, AbsPathBuf};\n@@ -79,7 +82,7 @@ pub fn load_workspace(\n         ProcMacroServerChoice::None => Err(\"proc macro server disabled\".to_owned()),\n     };\n \n-    let crate_graph = ws.to_crate_graph(\n+    let (crate_graph, proc_macros) = ws.to_crate_graph(\n         &mut |_, path: &AbsPath| {\n             load_proc_macro(proc_macro_client.as_ref().map_err(|e| &**e), path, &[])\n         },\n@@ -100,8 +103,13 @@ pub fn load_workspace(\n     });\n \n     tracing::debug!(\"crate graph: {:?}\", crate_graph);\n-    let host =\n-        load_crate_graph(crate_graph, project_folders.source_root_config, &mut vfs, &receiver);\n+    let host = load_crate_graph(\n+        crate_graph,\n+        proc_macros,\n+        project_folders.source_root_config,\n+        &mut vfs,\n+        &receiver,\n+    );\n \n     if load_config.prefill_caches {\n         host.analysis().parallel_prime_caches(1, |_| {})?;\n@@ -111,6 +119,7 @@ pub fn load_workspace(\n \n fn load_crate_graph(\n     crate_graph: CrateGraph,\n+    proc_macros: ProcMacros,\n     source_root_config: SourceRootConfig,\n     vfs: &mut vfs::Vfs,\n     receiver: &Receiver<vfs::loader::Message>,\n@@ -149,6 +158,7 @@ fn load_crate_graph(\n     analysis_change.set_roots(source_roots);\n \n     analysis_change.set_crate_graph(crate_graph);\n+    analysis_change.set_proc_macros(proc_macros);\n \n     host.apply_change(analysis_change);\n     host"}, {"sha": "65758419deacb85753dcba7bffbca0e2c0012e25", "filename": "crates/rust-analyzer/src/reload.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d154ea88f90e570b9d88dba021050f9030238c79/crates%2Frust-analyzer%2Fsrc%2Freload.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Freload.rs?ref=d154ea88f90e570b9d88dba021050f9030238c79", "patch": "@@ -20,7 +20,7 @@ use ide::Change;\n use ide_db::{\n     base_db::{\n         CrateGraph, Env, ProcMacro, ProcMacroExpander, ProcMacroExpansionError, ProcMacroKind,\n-        ProcMacroLoadResult, SourceRoot, VfsPath,\n+        ProcMacroLoadResult, ProcMacros, SourceRoot, VfsPath,\n     },\n     FxHashMap,\n };\n@@ -355,7 +355,7 @@ impl GlobalState {\n         });\n \n         // Create crate graph from all the workspaces\n-        let crate_graph = {\n+        let (crate_graph, proc_macros) = {\n             let dummy_replacements = self.config.dummy_replacements();\n \n             let vfs = &mut self.vfs.write().0;\n@@ -376,6 +376,7 @@ impl GlobalState {\n             };\n \n             let mut crate_graph = CrateGraph::default();\n+            let mut proc_macros = ProcMacros::default();\n             for (idx, ws) in self.workspaces.iter().enumerate() {\n                 let proc_macro_client = match self.proc_macro_clients.get(idx) {\n                     Some(res) => res.as_ref().map_err(|e| &**e),\n@@ -388,15 +389,17 @@ impl GlobalState {\n                         dummy_replacements.get(crate_name).map(|v| &**v).unwrap_or_default(),\n                     )\n                 };\n-                crate_graph.extend(ws.to_crate_graph(\n+                let (other, other_proc_macros) = ws.to_crate_graph(\n                     &mut load_proc_macro,\n                     &mut load,\n                     &self.config.cargo().extra_env,\n-                ));\n+                );\n+                crate_graph.extend(other, &mut proc_macros, other_proc_macros);\n             }\n-            crate_graph\n+            (crate_graph, proc_macros)\n         };\n         change.set_crate_graph(crate_graph);\n+        change.set_proc_macros(proc_macros);\n \n         self.source_root_config = project_folders.source_root_config;\n "}]}