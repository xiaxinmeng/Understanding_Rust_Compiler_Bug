{"sha": "60064726aee0d05c41bf6ff0eac4699f47762b05", "node_id": "C_kwDOAAsO6NoAKDYwMDY0NzI2YWVlMGQwNWM0MWJmNmZmMGVhYzQ2OTlmNDc3NjJiMDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-10-21T17:41:47Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-01-15T20:26:20Z"}, "message": "Return a LocalDefId in get_parent_item.", "tree": {"sha": "95a007dacbbc0339549ba1c86805281627eb1bc3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/95a007dacbbc0339549ba1c86805281627eb1bc3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/60064726aee0d05c41bf6ff0eac4699f47762b05", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/60064726aee0d05c41bf6ff0eac4699f47762b05", "html_url": "https://github.com/rust-lang/rust/commit/60064726aee0d05c41bf6ff0eac4699f47762b05", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/60064726aee0d05c41bf6ff0eac4699f47762b05/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5a123c265b7bf47fb7894c9e338f531fb463b4d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/5a123c265b7bf47fb7894c9e338f531fb463b4d8", "html_url": "https://github.com/rust-lang/rust/commit/5a123c265b7bf47fb7894c9e338f531fb463b4d8"}], "stats": {"total": 291, "additions": 151, "deletions": 140}, "files": [{"sha": "2b23a0475fe5919acaf1b136346db89d7b989fdf", "filename": "compiler/rustc_borrowck/src/diagnostics/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fmutability_errors.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -896,7 +896,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n         if look_at_return && hir.get_return_block(closure_id).is_some() {\n             // ...otherwise we are probably in the tail expression of the function, point at the\n             // return type.\n-            match hir.get(hir.get_parent_item(fn_call_id)) {\n+            match hir.get_by_def_id(hir.get_parent_item(fn_call_id)) {\n                 hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     ident,"}, {"sha": "9aa58f05a8e65e5e55ce8ed0d643c7a123d5f23c", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -704,7 +704,7 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n                         hir::AsyncGeneratorKind::Block => \" of async block\",\n                         hir::AsyncGeneratorKind::Closure => \" of async closure\",\n                         hir::AsyncGeneratorKind::Fn => {\n-                            let parent_item = hir.get(hir.get_parent_item(mir_hir_id));\n+                            let parent_item = hir.get_by_def_id(hir.get_parent_item(mir_hir_id));\n                             let output = &parent_item\n                                 .fn_decl()\n                                 .expect(\"generator lowered from async fn should be in fn\")"}, {"sha": "e855ad2f02fd954620e1e85d65fb4a47d8fb85c5", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -2212,9 +2212,9 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     if let Some(Node::Item(Item {\n                         kind: ItemKind::Trait(..) | ItemKind::Impl { .. },\n                         ..\n-                    })) = hir.find(parent_id)\n+                    })) = hir.find_by_def_id(parent_id)\n                     {\n-                        Some(self.tcx.generics_of(hir.local_def_id(parent_id).to_def_id()))\n+                        Some(self.tcx.generics_of(parent_id))\n                     } else {\n                         None\n                     },"}, {"sha": "eecd0a5a70807c1de193522123cdae715f22f21f", "filename": "compiler/rustc_infer/src/infer/error_reporting/nice_region_error/static_impl_trait.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fnice_region_error%2Fstatic_impl_trait.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -187,6 +187,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n             | ObligationCauseCode::BlockTailExpression(hir_id) = cause.code()\n             {\n                 let parent_id = tcx.hir().get_parent_item(*hir_id);\n+                let parent_id = tcx.hir().local_def_id_to_hir_id(parent_id);\n                 if let Some(fn_decl) = tcx.hir().fn_decl_by_hir_id(parent_id) {\n                     let mut span: MultiSpan = fn_decl.output.span().into();\n                     let mut add_label = true;\n@@ -425,7 +426,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n         let tcx = self.tcx();\n         match tcx.hir().get_if_local(def_id) {\n             Some(Node::ImplItem(impl_item)) => {\n-                match tcx.hir().find(tcx.hir().get_parent_item(impl_item.hir_id())) {\n+                match tcx.hir().find_by_def_id(tcx.hir().get_parent_item(impl_item.hir_id())) {\n                     Some(Node::Item(Item {\n                         kind: ItemKind::Impl(hir::Impl { self_ty, .. }),\n                         ..\n@@ -434,13 +435,13 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 }\n             }\n             Some(Node::TraitItem(trait_item)) => {\n-                let parent_id = tcx.hir().get_parent_item(trait_item.hir_id());\n-                match tcx.hir().find(parent_id) {\n+                let trait_did = tcx.hir().get_parent_item(trait_item.hir_id());\n+                match tcx.hir().find_by_def_id(trait_did) {\n                     Some(Node::Item(Item { kind: ItemKind::Trait(..), .. })) => {\n                         // The method being called is defined in the `trait`, but the `'static`\n                         // obligation comes from the `impl`. Find that `impl` so that we can point\n                         // at it in the suggestion.\n-                        let trait_did = tcx.hir().local_def_id(parent_id).to_def_id();\n+                        let trait_did = trait_did.to_def_id();\n                         match tcx\n                             .hir()\n                             .trait_impls(trait_did)"}, {"sha": "0b1c59d092f2be4695ac3bc10e1b8f4a46c4d242", "filename": "compiler/rustc_infer/src/infer/opaque_types.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fopaque_types.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -635,7 +635,7 @@ fn may_define_opaque_type(tcx: TyCtxt<'_>, def_id: LocalDefId, opaque_hir_id: hi\n     let scope = tcx.hir().get_defining_scope(opaque_hir_id);\n     // We walk up the node tree until we hit the root or the scope of the opaque type.\n     while hir_id != scope && hir_id != hir::CRATE_HIR_ID {\n-        hir_id = tcx.hir().get_parent_item(hir_id);\n+        hir_id = tcx.hir().local_def_id_to_hir_id(tcx.hir().get_parent_item(hir_id));\n     }\n     // Syntactically, we are allowed to define the concrete type if:\n     let res = hir_id == scope;"}, {"sha": "edfff3dae65d5d615a10f18540b83fc5fb4a7c4a", "filename": "compiler/rustc_lint/src/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fbuiltin.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -656,7 +656,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n         // If the method is an impl for an item with docs_hidden, don't doc.\n         if method_context(cx, impl_item.hir_id()) == MethodLateContext::PlainImpl {\n-            let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n             let impl_ty = cx.tcx.type_of(parent);\n             let outerdef = match impl_ty.kind() {\n                 ty::Adt(def, _) => Some(def.did),"}, {"sha": "b346c2bb6364f84545f27b285e80a093cf5ddb75", "filename": "compiler/rustc_middle/src/hir/map/mod.rs", "status": "modified", "additions": 29, "deletions": 18, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmap%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -117,13 +117,13 @@ pub struct ParentOwnerIterator<'hir> {\n }\n \n impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n-    type Item = (HirId, OwnerNode<'hir>);\n+    type Item = (LocalDefId, OwnerNode<'hir>);\n \n     fn next(&mut self) -> Option<Self::Item> {\n         if self.current_id.local_id.index() != 0 {\n             self.current_id.local_id = ItemLocalId::new(0);\n             if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n-                return Some((self.current_id, node.node));\n+                return Some((self.current_id.owner, node.node));\n             }\n         }\n         if self.current_id == CRATE_HIR_ID {\n@@ -141,7 +141,7 @@ impl<'hir> Iterator for ParentOwnerIterator<'hir> {\n \n             // If this `HirId` doesn't have an entry, skip it and look for its `parent_id`.\n             if let Some(node) = self.map.tcx.hir_owner(self.current_id.owner) {\n-                return Some((self.current_id, node.node));\n+                return Some((self.current_id.owner, node.node));\n             }\n         }\n     }\n@@ -340,11 +340,23 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n+    /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n+    #[inline]\n+    pub fn find_by_def_id(&self, id: LocalDefId) -> Option<Node<'hir>> {\n+        self.find(self.local_def_id_to_hir_id(id))\n+    }\n+\n     /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n     pub fn get(&self, id: HirId) -> Node<'hir> {\n         self.find(id).unwrap_or_else(|| bug!(\"couldn't find hir id {} in the HIR map\", id))\n     }\n \n+    /// Retrieves the `Node` corresponding to `id`, panicking if it cannot be found.\n+    #[inline]\n+    pub fn get_by_def_id(&self, id: LocalDefId) -> Node<'hir> {\n+        self.find_by_def_id(id).unwrap_or_else(|| bug!(\"couldn't find {:?} in the HIR map\", id))\n+    }\n+\n     pub fn get_if_local(&self, id: DefId) -> Option<Node<'hir>> {\n         id.as_local().and_then(|id| self.find(self.local_def_id_to_hir_id(id)))\n     }\n@@ -780,23 +792,23 @@ impl<'hir> Map<'hir> {\n     /// parent item is in this map. The \"parent item\" is the closest parent node\n     /// in the HIR which is recorded by the map and is an item, either an item\n     /// in a module, trait, or impl.\n-    pub fn get_parent_item(&self, hir_id: HirId) -> HirId {\n-        if let Some((hir_id, _node)) = self.parent_owner_iter(hir_id).next() {\n-            hir_id\n+    pub fn get_parent_item(&self, hir_id: HirId) -> LocalDefId {\n+        if let Some((def_id, _node)) = self.parent_owner_iter(hir_id).next() {\n+            def_id\n         } else {\n-            CRATE_HIR_ID\n+            CRATE_DEF_ID\n         }\n     }\n \n     /// Returns the `HirId` of `id`'s nearest module parent, or `id` itself if no\n     /// module parent is in this map.\n-    pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> HirId {\n-        for (hir_id, node) in self.parent_owner_iter(hir_id) {\n+    pub(super) fn get_module_parent_node(&self, hir_id: HirId) -> LocalDefId {\n+        for (def_id, node) in self.parent_owner_iter(hir_id) {\n             if let OwnerNode::Item(&Item { kind: ItemKind::Mod(_), .. }) = node {\n-                return hir_id;\n+                return def_id;\n             }\n         }\n-        CRATE_HIR_ID\n+        CRATE_DEF_ID\n     }\n \n     /// When on an if expression, a match arm tail expression or a match arm, give back\n@@ -859,19 +871,18 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn get_parent_did(&self, id: HirId) -> LocalDefId {\n-        self.local_def_id(self.get_parent_item(id))\n-    }\n-\n     pub fn get_foreign_abi(&self, hir_id: HirId) -> Abi {\n         let parent = self.get_parent_item(hir_id);\n-        if let Some(node) = self.tcx.hir_owner(self.local_def_id(parent)) {\n+        if let Some(node) = self.tcx.hir_owner(parent) {\n             if let OwnerNode::Item(Item { kind: ItemKind::ForeignMod { abi, .. }, .. }) = node.node\n             {\n                 return *abi;\n             }\n         }\n-        bug!(\"expected foreign mod or inlined parent, found {}\", self.node_to_string(parent))\n+        bug!(\n+            \"expected foreign mod or inlined parent, found {}\",\n+            self.node_to_string(HirId::make_owner(parent))\n+        )\n     }\n \n     pub fn expect_item(&self, id: LocalDefId) -> &'hir Item<'hir> {\n@@ -929,7 +940,7 @@ impl<'hir> Map<'hir> {\n             Node::Lifetime(lt) => lt.name.ident().name,\n             Node::GenericParam(param) => param.name.ident().name,\n             Node::Binding(&Pat { kind: PatKind::Binding(_, _, l, _), .. }) => l.name,\n-            Node::Ctor(..) => self.name(self.get_parent_item(id)),\n+            Node::Ctor(..) => self.name(HirId::make_owner(self.get_parent_item(id))),\n             _ => return None,\n         })\n     }"}, {"sha": "900f8f43bb7dc8f37dcd3cd9d095666e8b19fc15", "filename": "compiler/rustc_middle/src/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -58,7 +58,7 @@ impl<'tcx> TyCtxt<'tcx> {\n pub fn provide(providers: &mut Providers) {\n     providers.parent_module_from_def_id = |tcx, id| {\n         let hir = tcx.hir();\n-        hir.local_def_id(hir.get_module_parent_node(hir.local_def_id_to_hir_id(id)))\n+        hir.get_module_parent_node(hir.local_def_id_to_hir_id(id))\n     };\n     providers.hir_crate = |tcx, ()| tcx.untracked_crate;\n     providers.crate_hash = map::crate_hash;"}, {"sha": "6d531d3e7d620fa68a52d06c25d4bd038ca2edf9", "filename": "compiler/rustc_middle/src/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmiddle%2Fstability.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -348,7 +348,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n-                let parent_def_id = self.hir().local_def_id(self.hir().get_parent_item(id));\n+                let parent_def_id = self.hir().get_parent_item(id);\n                 let skip = self\n                     .lookup_deprecation_entry(parent_def_id.to_def_id())\n                     .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));"}, {"sha": "5bb687512f3cbe5dbaa4b578e39d7a9ba15dbd09", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -869,7 +869,7 @@ fn foo(&self) -> Self::T { String::new() }\n         // When `body_owner` is an `impl` or `trait` item, look in its associated types for\n         // `expected` and point at it.\n         let parent_id = self.hir().get_parent_item(hir_id);\n-        let item = self.hir().find(parent_id);\n+        let item = self.hir().find_by_def_id(parent_id);\n         debug!(\"expected_projection parent item {:?}\", item);\n         match item {\n             Some(hir::Node::Item(hir::Item { kind: hir::ItemKind::Trait(.., items), .. })) => {"}, {"sha": "eca7d84e95d8e446e35b94a1ae65abd111314fbb", "filename": "compiler/rustc_passes/src/check_attr.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fcheck_attr.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -13,7 +13,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_feature::{AttributeDuplicates, AttributeType, BuiltinAttribute, BUILTIN_ATTRIBUTE_MAP};\n use rustc_hir as hir;\n-use rustc_hir::def_id::LocalDefId;\n+use rustc_hir::def_id::{LocalDefId, CRATE_DEF_ID};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{self, FnSig, ForeignItem, HirId, Item, ItemKind, TraitItem, CRATE_HIR_ID};\n use rustc_hir::{MethodKind, Target};\n@@ -32,7 +32,7 @@ pub(crate) fn target_from_impl_item<'tcx>(\n     match impl_item.kind {\n         hir::ImplItemKind::Const(..) => Target::AssocConst,\n         hir::ImplItemKind::Fn(..) => {\n-            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id()).expect_owner();\n+            let parent_hir_id = tcx.hir().get_parent_item(impl_item.hir_id());\n             let containing_item = tcx.hir().expect_item(parent_hir_id);\n             let containing_impl_is_for_trait = match &containing_item.kind {\n                 hir::ItemKind::Impl(impl_) => impl_.of_trait.is_some(),\n@@ -582,7 +582,7 @@ impl CheckAttrVisitor<'_> {\n             Target::Impl => Some(\"implementation block\"),\n             Target::ForeignMod => Some(\"extern block\"),\n             Target::AssocTy => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id).expect_owner();\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n                 if Target::from_item(containing_item) == Target::Impl {\n                     Some(\"type alias in implementation block\")\n@@ -591,7 +591,7 @@ impl CheckAttrVisitor<'_> {\n                 }\n             }\n             Target::AssocConst => {\n-                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id).expect_owner();\n+                let parent_hir_id = self.tcx.hir().get_parent_item(hir_id);\n                 let containing_item = self.tcx.hir().expect_item(parent_hir_id);\n                 // We can't link to trait impl's consts.\n                 let err = \"associated constant in trait implementation block\";\n@@ -832,7 +832,7 @@ impl CheckAttrVisitor<'_> {\n                     let mut err = lint.build(\n                         \"this attribute can only be applied at the crate level\",\n                     );\n-                    if attr.style == AttrStyle::Outer && self.tcx.hir().get_parent_item(hir_id) == CRATE_HIR_ID {\n+                    if attr.style == AttrStyle::Outer && self.tcx.hir().get_parent_item(hir_id) == CRATE_DEF_ID {\n                         if let Ok(mut src) =\n                             self.tcx.sess.source_map().span_to_snippet(attr.span)\n                         {"}, {"sha": "1ce6a17303e5b60a3c5966bacba6b55c2d22d649", "filename": "compiler/rustc_passes/src/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Freachable.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -169,7 +169,7 @@ impl<'tcx> ReachableContext<'tcx> {\n                         if generics.requires_monomorphization(self.tcx) || attrs.requests_inline() {\n                             true\n                         } else {\n-                            let impl_did = self.tcx.hir().get_parent_did(hir_id);\n+                            let impl_did = self.tcx.hir().get_parent_item(hir_id);\n                             // Check the impl. If the generics on the self\n                             // type of the impl require inlining, this method\n                             // does too."}, {"sha": "270da883b8db45f3ec8f84342d2e50d156582f20", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -629,7 +629,7 @@ impl<'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'tcx> {\n     }\n \n     fn visit_impl_item(&mut self, ii: &'tcx hir::ImplItem<'tcx>) {\n-        let impl_def_id = self.tcx.hir().local_def_id(self.tcx.hir().get_parent_item(ii.hir_id()));\n+        let impl_def_id = self.tcx.hir().get_parent_item(ii.hir_id());\n         if self.tcx.impl_trait_ref(impl_def_id).is_none() {\n             self.check_missing_stability(ii.def_id, ii.span);\n         }"}, {"sha": "e5d57a889a6fbe57fc2d0178fda4d7225e6acd82", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -2024,7 +2024,7 @@ fn visibility(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Visibility {\n                 // Visibilities of trait impl items are inherited from their traits\n                 // and are not filled in resolve.\n                 Node::ImplItem(impl_item) => {\n-                    match tcx.hir().get(tcx.hir().get_parent_item(hir_id)) {\n+                    match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(hir_id)) {\n                         Node::Item(hir::Item {\n                             kind: hir::ItemKind::Impl(hir::Impl { of_trait: Some(tr), .. }),\n                             .."}, {"sha": "52bd45f12c97cb386b313e291bb2a74b72bf71af", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -1137,7 +1137,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_did(trait_item.hir_id())),\n+                    Some(tcx.hir().get_parent_item(trait_item.hir_id())),\n                     trait_item.hir_id(),\n                     &sig.decl,\n                     &trait_item.generics,\n@@ -1206,7 +1206,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n                 self.missing_named_lifetime_spots.push((&impl_item.generics).into());\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n-                    Some(tcx.hir().get_parent_did(impl_item.hir_id())),\n+                    Some(tcx.hir().get_parent_item(impl_item.hir_id())),\n                     impl_item.hir_id(),\n                     &sig.decl,\n                     &impl_item.generics,\n@@ -1950,7 +1950,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         };\n         if let Node::Lifetime(hir_lifetime) = self.tcx.hir().get(lifetime.hir_id) {\n             if let Some(parent) =\n-                self.tcx.hir().find(self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n+                self.tcx.hir().find_by_def_id(self.tcx.hir().get_parent_item(hir_lifetime.hir_id))\n             {\n                 match parent {\n                     Node::Item(item) => {\n@@ -2761,7 +2761,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             Node::TraitItem(&hir::TraitItem { kind: hir::TraitItemKind::Fn(_, ref m), .. }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) =\n-                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(parent)).kind\n+                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {\n                     assoc_item_kind =\n                         trait_items.iter().find(|ti| ti.id.hir_id() == parent).map(|ti| ti.kind);\n@@ -2774,7 +2774,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n \n             Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body), .. }) => {\n                 if let hir::ItemKind::Impl(hir::Impl { ref self_ty, ref items, .. }) =\n-                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(parent)).kind\n+                    self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {\n                     impl_self = Some(self_ty);\n                     assoc_item_kind ="}, {"sha": "b06977c3f302e035d7bf2ef819cb3b9cc89af087", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -481,7 +481,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 _ => {}\n             }\n \n-            hir_id = self.tcx.hir().get_parent_item(hir_id);\n+            hir_id = self.tcx.hir().local_def_id_to_hir_id(self.tcx.hir().get_parent_item(hir_id));\n         }\n     }\n \n@@ -2301,7 +2301,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                 {\n                     let in_progress_typeck_results =\n                         self.in_progress_typeck_results.map(|t| t.borrow());\n-                    let parent_id = hir.local_def_id(hir.get_parent_item(arg_hir_id));\n+                    let parent_id = hir.get_parent_item(arg_hir_id);\n                     let typeck_results: &TypeckResults<'tcx> = match &in_progress_typeck_results {\n                         Some(t) if t.hir_owner == parent_id => t,\n                         _ => self.tcx.typeck(parent_id),"}, {"sha": "781a639b09ebd0646b1e09e64d2ff961f52beebd", "filename": "compiler/rustc_ty_utils/src/assoc.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Fassoc.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -52,8 +52,7 @@ fn trait_of_item(tcx: TyCtxt<'_>, def_id: DefId) -> Option<DefId> {\n \n fn associated_item(tcx: TyCtxt<'_>, def_id: DefId) -> ty::AssocItem {\n     let id = tcx.hir().local_def_id_to_hir_id(def_id.expect_local());\n-    let parent_id = tcx.hir().get_parent_item(id);\n-    let parent_def_id = tcx.hir().local_def_id(parent_id);\n+    let parent_def_id = tcx.hir().get_parent_item(id);\n     let parent_item = tcx.hir().expect_item(parent_def_id);\n     match parent_item.kind {\n         hir::ItemKind::Impl(ref impl_) => {"}, {"sha": "5044829cd89edb62b18f8778fac4fc1eb573e0f4", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -1914,7 +1914,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .and_then(|def_id| {\n                     def_id.as_local().map(|def_id| tcx.hir().local_def_id_to_hir_id(def_id))\n                 })\n-                .map(|hir_id| tcx.hir().get_parent_did(hir_id).to_def_id());\n+                .map(|hir_id| tcx.hir().get_parent_item(hir_id).to_def_id());\n \n             debug!(\"qpath_to_ty: parent_def_id={:?}\", parent_def_id);\n "}, {"sha": "4e83b351b9b54675c24ba5940ef063ecf150ecd7", "filename": "compiler/rustc_typeck/src/check/check.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcheck.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -1440,8 +1440,8 @@ fn opaque_type_cycle_error(tcx: TyCtxt<'_>, def_id: LocalDefId, span: Span) {\n     let mut err = struct_span_err!(tcx.sess, span, E0720, \"cannot resolve opaque type\");\n \n     let mut label = false;\n-    if let Some((hir_id, visitor)) = get_owner_return_paths(tcx, def_id) {\n-        let typeck_results = tcx.typeck(tcx.hir().local_def_id(hir_id));\n+    if let Some((def_id, visitor)) = get_owner_return_paths(tcx, def_id) {\n+        let typeck_results = tcx.typeck(def_id);\n         if visitor\n             .returns\n             .iter()"}, {"sha": "3668ecd234c64e1c8b216af4f6d07e653ba8038b", "filename": "compiler/rustc_typeck/src/check/coercion.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fcoercion.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -1575,7 +1575,7 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n                     expected,\n                     found,\n                     can_suggest,\n-                    fcx.tcx.hir().get_parent_item(id),\n+                    fcx.tcx.hir().local_def_id_to_hir_id(fcx.tcx.hir().get_parent_item(id)),\n                 );\n             }\n             if !pointing_at_return_type {\n@@ -1584,13 +1584,19 @@ impl<'tcx, 'exprs, E: AsCoercionSite> CoerceMany<'tcx, 'exprs, E> {\n         }\n \n         let parent_id = fcx.tcx.hir().get_parent_item(id);\n-        let parent_item = fcx.tcx.hir().get(parent_id);\n+        let parent_item = fcx.tcx.hir().get_by_def_id(parent_id);\n \n         if let (Some((expr, _)), Some((fn_decl, _, _))) =\n             (expression, fcx.get_node_fn_decl(parent_item))\n         {\n             fcx.suggest_missing_break_or_return_expr(\n-                &mut err, expr, fn_decl, expected, found, id, parent_id,\n+                &mut err,\n+                expr,\n+                fn_decl,\n+                expected,\n+                found,\n+                id,\n+                fcx.tcx.hir().local_def_id_to_hir_id(parent_id),\n             );\n         }\n "}, {"sha": "8f9f4e82e845d2b58066c7aa1b101a9154030fd4", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -742,7 +742,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 kind: hir::ImplItemKind::Fn(..),\n                 span: encl_fn_span,\n                 ..\n-            })) = self.tcx.hir().find(encl_item_id)\n+            })) = self.tcx.hir().find_by_def_id(encl_item_id)\n             {\n                 // We are inside a function body, so reporting \"return statement\n                 // outside of function body\" needs an explanation.\n@@ -751,7 +751,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n                 // If this didn't hold, we would not have to report an error in\n                 // the first place.\n-                assert_ne!(encl_item_id, encl_body_owner_id);\n+                assert_ne!(hir::HirId::make_owner(encl_item_id), encl_body_owner_id);\n \n                 let encl_body_id = self.tcx.hir().body_owned_by(encl_body_owner_id);\n                 let encl_body = self.tcx.hir().body(encl_body_id);"}, {"sha": "d9a597bce8a014ee8ce6a412f6dc707dd95747d1", "filename": "compiler/rustc_typeck/src/check/fn_ctxt/checks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Ffn_ctxt%2Fchecks.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -846,7 +846,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     }\n \n     fn parent_item_span(&self, id: hir::HirId) -> Option<Span> {\n-        let node = self.tcx.hir().get(self.tcx.hir().get_parent_item(id));\n+        let node = self.tcx.hir().get_by_def_id(self.tcx.hir().get_parent_item(id));\n         match node {\n             Node::Item(&hir::Item { kind: hir::ItemKind::Fn(_, _, body_id), .. })\n             | Node::ImplItem(&hir::ImplItem { kind: hir::ImplItemKind::Fn(_, body_id), .. }) => {\n@@ -862,7 +862,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     /// Given a function block's `HirId`, returns its `FnDecl` if it exists, or `None` otherwise.\n     fn get_parent_fn_decl(&self, blk_id: hir::HirId) -> Option<(&'tcx hir::FnDecl<'tcx>, Ident)> {\n-        let parent = self.tcx.hir().get(self.tcx.hir().get_parent_item(blk_id));\n+        let parent = self.tcx.hir().get_by_def_id(self.tcx.hir().get_parent_item(blk_id));\n         self.get_node_fn_decl(parent).map(|(fn_decl, ident, _)| (fn_decl, ident))\n     }\n "}, {"sha": "719266ad5a4355b9ff70add27239001e09b93fea", "filename": "compiler/rustc_typeck/src/check/mod.rs", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -511,19 +511,15 @@ struct GeneratorTypes<'tcx> {\n fn get_owner_return_paths<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: LocalDefId,\n-) -> Option<(hir::HirId, ReturnsVisitor<'tcx>)> {\n+) -> Option<(LocalDefId, ReturnsVisitor<'tcx>)> {\n     let hir_id = tcx.hir().local_def_id_to_hir_id(def_id);\n-    let id = tcx.hir().get_parent_item(hir_id);\n-    tcx.hir()\n-        .find(id)\n-        .map(|n| (id, n))\n-        .and_then(|(hir_id, node)| node.body_id().map(|b| (hir_id, b)))\n-        .map(|(hir_id, body_id)| {\n-            let body = tcx.hir().body(body_id);\n-            let mut visitor = ReturnsVisitor::default();\n-            visitor.visit_body(body);\n-            (hir_id, visitor)\n-        })\n+    let parent_id = tcx.hir().get_parent_item(hir_id);\n+    tcx.hir().find_by_def_id(parent_id).and_then(|node| node.body_id()).map(|body_id| {\n+        let body = tcx.hir().body(body_id);\n+        let mut visitor = ReturnsVisitor::default();\n+        visitor.visit_body(body);\n+        (parent_id, visitor)\n+    })\n }\n \n // Forbid defining intrinsics in Rust code,"}, {"sha": "72eabab301ac7a421ad2d772ab7c50c7b8d4a647", "filename": "compiler/rustc_typeck/src/check/op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fop.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -972,7 +972,7 @@ fn suggest_constraining_param(\n     if let Some(generics) = param_def_id\n         .as_local()\n         .map(|id| hir.local_def_id_to_hir_id(id))\n-        .and_then(|id| hir.find(hir.get_parent_item(id)))\n+        .and_then(|id| hir.find_by_def_id(hir.get_parent_item(id)))\n         .as_ref()\n         .and_then(|node| node.generics())\n     {"}, {"sha": "bf68c59fd1a20acd563efa454499f87005304971", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -206,7 +206,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n     check_object_unsafe_self_trait_by_name(tcx, trait_item);\n     check_associated_item(tcx, trait_item.def_id, span, method_sig);\n \n-    let encl_trait_def_id = tcx.hir().get_parent_did(hir_id);\n+    let encl_trait_def_id = tcx.hir().get_parent_item(hir_id);\n     let encl_trait = tcx.hir().expect_item(encl_trait_def_id);\n     let encl_trait_def_id = encl_trait.def_id.to_def_id();\n     let fn_lang_item_name = if Some(encl_trait_def_id) == tcx.lang_items().fn_trait() {\n@@ -668,13 +668,14 @@ fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {\n /// Detect when an object unsafe trait is referring to itself in one of its associated items.\n /// When this is done, suggest using `Self` instead.\n fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem<'_>) {\n-    let (trait_name, trait_def_id) = match tcx.hir().get(tcx.hir().get_parent_item(item.hir_id())) {\n-        hir::Node::Item(item) => match item.kind {\n-            hir::ItemKind::Trait(..) => (item.ident, item.def_id),\n+    let (trait_name, trait_def_id) =\n+        match tcx.hir().get_by_def_id(tcx.hir().get_parent_item(item.hir_id())) {\n+            hir::Node::Item(item) => match item.kind {\n+                hir::ItemKind::Trait(..) => (item.ident, item.def_id),\n+                _ => return,\n+            },\n             _ => return,\n-        },\n-        _ => return,\n-    };\n+        };\n     let mut trait_should_be_self = vec![];\n     match &item.kind {\n         hir::TraitItemKind::Const(ty, _) | hir::TraitItemKind::Type(_, Some(ty))"}, {"sha": "5c1c9c4791cc20322ac84be355cac0d6372dde13", "filename": "compiler/rustc_typeck/src/collect.rs", "status": "modified", "additions": 9, "deletions": 11, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -28,7 +28,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet, FxIndexSet};\n use rustc_errors::{struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind};\n-use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n use rustc_hir::{GenericParamKind, HirId, Node};\n@@ -435,7 +435,7 @@ impl<'tcx> AstConv<'tcx> for ItemCtxt<'tcx> {\n             match self.node() {\n                 hir::Node::Field(_) | hir::Node::Ctor(_) | hir::Node::Variant(_) => {\n                     let item =\n-                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_did(self.hir_id()));\n+                        self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(self.hir_id()));\n                     match &item.kind {\n                         hir::ItemKind::Enum(_, generics)\n                         | hir::ItemKind::Struct(_, generics)\n@@ -1396,13 +1396,12 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n         | Node::Ctor(..)\n         | Node::Field(_) => {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n-            Some(tcx.hir().local_def_id(parent_id).to_def_id())\n+            Some(parent_id.to_def_id())\n         }\n         // FIXME(#43408) always enable this once `lazy_normalization` is\n         // stable enough and does not need a feature gate anymore.\n         Node::AnonConst(_) => {\n-            let parent_id = tcx.hir().get_parent_item(hir_id);\n-            let parent_def_id = tcx.hir().local_def_id(parent_id);\n+            let parent_def_id = tcx.hir().get_parent_item(hir_id);\n \n             let mut in_param_ty = false;\n             for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n@@ -1512,11 +1511,11 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             }) => Some(fn_def_id.to_def_id()),\n             ItemKind::OpaqueTy(hir::OpaqueTy { origin: hir::OpaqueTyOrigin::TyAlias, .. }) => {\n                 let parent_id = tcx.hir().get_parent_item(hir_id);\n-                assert!(parent_id != hir_id && parent_id != CRATE_HIR_ID);\n+                assert_ne!(parent_id, CRATE_DEF_ID);\n                 debug!(\"generics_of: parent of opaque ty {:?} is {:?}\", def_id, parent_id);\n                 // Opaque types are always nested within another item, and\n                 // inherit the generics of the item.\n-                Some(tcx.hir().local_def_id(parent_id).to_def_id())\n+                Some(parent_id.to_def_id())\n             }\n             _ => None,\n         },\n@@ -1861,7 +1860,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         Ctor(data) | Variant(hir::Variant { data, .. }) if data.ctor_hir_id().is_some() => {\n-            let ty = tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id());\n+            let ty = tcx.type_of(tcx.hir().get_parent_item(hir_id));\n             let inputs =\n                 data.fields().iter().map(|f| tcx.type_of(tcx.hir().local_def_id(f.hir_id)));\n             ty::Binder::dummy(tcx.mk_fn_sig(\n@@ -2431,8 +2430,7 @@ fn explicit_predicates_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::GenericPredicat\n                 //        parent of generics returned by `generics_of`\n                 //\n                 // In the above code we want the anon const to have predicates in its param env for `T: Trait`\n-                let item_id = tcx.hir().get_parent_item(hir_id);\n-                let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+                let item_def_id = tcx.hir().get_parent_item(hir_id);\n                 // In the above code example we would be calling `explicit_predicates_of(Foo)` here\n                 return tcx.explicit_predicates_of(item_def_id);\n             }\n@@ -3230,7 +3228,7 @@ fn check_target_feature_trait_unsafe(tcx: TyCtxt<'_>, id: LocalDefId, attr_span:\n     let hir_id = tcx.hir().local_def_id_to_hir_id(id);\n     let node = tcx.hir().get(hir_id);\n     if let Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Fn(..), .. }) = node {\n-        let parent_id = tcx.hir().get_parent_did(hir_id);\n+        let parent_id = tcx.hir().get_parent_item(hir_id);\n         let parent_item = tcx.hir().expect_item(parent_id);\n         if let hir::ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = parent_item.kind {\n             tcx.sess"}, {"sha": "a216e8c2f883cf8b3b4a911675f57517f4b97594", "filename": "compiler/rustc_typeck/src/collect/type_of.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcollect%2Ftype_of.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -348,7 +348,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n             }\n             ImplItemKind::TyAlias(ty) => {\n-                if tcx.impl_trait_ref(tcx.hir().get_parent_did(hir_id).to_def_id()).is_none() {\n+                if tcx.impl_trait_ref(tcx.hir().get_parent_item(hir_id)).is_none() {\n                     check_feature_inherent_assoc_ty(tcx, item.span);\n                 }\n \n@@ -458,7 +458,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n         Node::Ctor(&ref def) | Node::Variant(Variant { data: ref def, .. }) => match *def {\n             VariantData::Unit(..) | VariantData::Struct(..) => {\n-                tcx.type_of(tcx.hir().get_parent_did(hir_id).to_def_id())\n+                tcx.type_of(tcx.hir().get_parent_item(hir_id))\n             }\n             VariantData::Tuple(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id.to_def_id());\n@@ -507,7 +507,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 }\n \n                 Node::Variant(Variant { disr_expr: Some(ref e), .. }) if e.hir_id == hir_id => tcx\n-                    .adt_def(tcx.hir().get_parent_did(hir_id).to_def_id())\n+                    .adt_def(tcx.hir().get_parent_item(hir_id))\n                     .repr\n                     .discr_type()\n                     .to_ty(tcx),"}, {"sha": "6a9f154844a5752ab32cd328cbab24f6ee588dde", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -543,8 +543,7 @@ pub fn hir_ty_to_ty<'tcx>(tcx: TyCtxt<'tcx>, hir_ty: &hir::Ty<'_>) -> Ty<'tcx> {\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n-    let env_node_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n-    let env_def_id = tcx.hir().local_def_id(env_node_id);\n+    let env_def_id = tcx.hir().get_parent_item(hir_ty.hir_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n     <dyn AstConv<'_>>::ast_ty_to_ty(&item_cx, hir_ty)\n }\n@@ -557,8 +556,7 @@ pub fn hir_trait_to_predicates<'tcx>(\n     // In case there are any projections, etc., find the \"environment\"\n     // def-ID that will be used to determine the traits/predicates in\n     // scope.  This is derived from the enclosing item-like thing.\n-    let env_hir_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n-    let env_def_id = tcx.hir().local_def_id(env_hir_id);\n+    let env_def_id = tcx.hir().get_parent_item(hir_trait.hir_ref_id);\n     let item_cx = self::collect::ItemCtxt::new(tcx, env_def_id.to_def_id());\n     let mut bounds = Bounds::default();\n     let _ = <dyn AstConv<'_>>::instantiate_poly_trait_ref("}, {"sha": "78a9cb33fbac5e95504ef1176165abc19ddf3812", "filename": "compiler/rustc_typeck/src/outlives/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Foutlives%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -35,8 +35,7 @@ fn inferred_outlives_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[(ty::Predicate\n             //        parent of generics returned by `generics_of`\n             //\n             // In the above code we want the anon const to have predicates in its param env for `'b: 'a`\n-            let item_id = tcx.hir().get_parent_item(id);\n-            let item_def_id = tcx.hir().local_def_id(item_id).to_def_id();\n+            let item_def_id = tcx.hir().get_parent_item(id);\n             // In the above code example we would be calling `inferred_outlives_of(Foo)` here\n             return tcx.inferred_outlives_of(item_def_id);\n         }"}, {"sha": "a5bc70a74ae92b4163122d947a03cb21ec61cdce", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -1004,7 +1004,7 @@ impl Clean<Item> for hir::ImplItem<'_> {\n \n             let what_rustc_thinks =\n                 Item::from_def_id_and_parts(local_did, Some(self.ident.name), inner, cx);\n-            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_did(self.hir_id()));\n+            let parent_item = cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(self.hir_id()));\n             if let hir::ItemKind::Impl(impl_) = &parent_item.kind {\n                 if impl_.of_trait.is_some() {\n                     // Trait impl items always inherit the impl's visibility --"}, {"sha": "3282309b9df3e04dbea36d3427119c0610f16c0c", "filename": "src/librustdoc/scrape_examples.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Flibrustdoc%2Fscrape_examples.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Flibrustdoc%2Fscrape_examples.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fscrape_examples.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -173,7 +173,9 @@ where\n \n         // If the enclosing item has a span coming from a proc macro, then we also don't want to include\n         // the example.\n-        let enclosing_item_span = tcx.hir().span_with_body(tcx.hir().get_parent_item(ex.hir_id));\n+        let enclosing_item_span = tcx\n+            .hir()\n+            .span_with_body(tcx.hir().local_def_id_to_hir_id(tcx.hir().get_parent_item(ex.hir_id)));\n         if enclosing_item_span.from_expansion() {\n             trace!(\"Rejecting expr ({:?}) from macro item: {:?}\", span, enclosing_item_span);\n             return;"}, {"sha": "ee668501ae78b859dbe461d7e5e483b9c8dd3759", "filename": "src/test/ui-fulldeps/auxiliary/issue-40001-plugin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Fissue-40001-plugin.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingAllowedAttrPass {\n     ) {\n         let item = match cx.tcx.hir().get(id) {\n             Node::Item(item) => item,\n-            _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id).expect_owner()),\n+            _ => cx.tcx.hir().expect_item(cx.tcx.hir().get_parent_item(id)),\n         };\n \n         let allowed = |attr| pprust::attribute_to_string(attr).contains(\"allowed_attr\");"}, {"sha": "5f95333a77407f7f65bc80465e2664f1a5a053ec", "filename": "src/tools/clippy/clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fescape.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -77,7 +77,7 @@ impl<'tcx> LateLintPass<'tcx> for BoxedLocal {\n         }\n \n         let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-        let parent_node = cx.tcx.hir().find(parent_id);\n+        let parent_node = cx.tcx.hir().find_by_def_id(parent_id);\n \n         let mut trait_self_ty = None;\n         if let Some(Node::Item(item)) = parent_node {"}, {"sha": "cbf52d19334c0f79a15a7fdc4b876dcca6d973b5", "filename": "src/tools/clippy/clippy_lints/src/exit.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fexit.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -34,11 +34,10 @@ impl<'tcx> LateLintPass<'tcx> for Exit {\n             if let Some(def_id) = cx.qpath_res(path, path_expr.hir_id).opt_def_id();\n             if match_def_path(cx, def_id, &paths::EXIT);\n             let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find(parent);\n+            if let Some(Node::Item(Item{kind: ItemKind::Fn(..), ..})) = cx.tcx.hir().find_by_def_id(parent);\n             // If the next item up is a function we check if it is an entry point\n             // and only then emit a linter warning\n-            let def_id = cx.tcx.hir().local_def_id(parent);\n-            if !is_entrypoint_fn(cx, def_id.to_def_id());\n+            if !is_entrypoint_fn(cx, parent.to_def_id());\n             then {\n                 span_lint(cx, EXIT, e.span, \"usage of `process::exit`\");\n             }"}, {"sha": "bf59103e3f4d2bce903907fc9c41653eff1cf155", "filename": "src/tools/clippy/clippy_lints/src/functions/must_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fmust_use.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -48,7 +48,7 @@ pub(super) fn check_impl_item<'tcx>(cx: &LateContext<'tcx>, item: &'tcx hir::Imp\n         let attr = must_use_attr(attrs);\n         if let Some(attr) = attr {\n             check_needless_must_use(cx, sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n-        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        } else if is_public && !is_proc_macro(cx.sess(), attrs) && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_must_use_candidate(\n                 cx,\n                 sig.decl,"}, {"sha": "120fcb2619c7c66dd59dd58bdb3b7c1ea8b30170", "filename": "src/tools/clippy/clippy_lints/src/functions/result_unit_err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ffunctions%2Fresult_unit_err.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -27,7 +27,7 @@ pub(super) fn check_impl_item(cx: &LateContext<'_>, item: &hir::ImplItem<'_>) {\n     if let hir::ImplItemKind::Fn(ref sig, _) = item.kind {\n         let is_public = cx.access_levels.is_exported(item.def_id);\n         let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-        if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n+        if is_public && trait_ref_of_method(cx, item.def_id).is_none() {\n             check_result_unit_err(cx, sig.decl, item.span, fn_header_span);\n         }\n     }"}, {"sha": "55c04a1186fc3376fce1d70124b972727d9e0163", "filename": "src/tools/clippy/clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Finherent_to_string.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -116,7 +116,7 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::String);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n+            if trait_ref_of_method(cx, impl_item.def_id).is_none();\n \n             then {\n                 show_lint(cx, impl_item);"}, {"sha": "6dd7b22ff94b5f80c9d5e49d7210913dedcd6c90", "filename": "src/tools/clippy/clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Flifetimes.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -91,7 +91,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.def_id).is_none();\n             check_fn_inner(\n                 cx,\n                 sig.decl,"}, {"sha": "33abd2a72d8809384618191316b2d4fb86c8b5c3", "filename": "src/tools/clippy/clippy_lints/src/loops/needless_range_loop.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Floops%2Fneedless_range_loop.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -58,8 +58,7 @@ pub(super) fn check<'tcx>(\n \n                 // ensure that the indexed variable was declared before the loop, see #601\n                 if let Some(indexed_extent) = indexed_extent {\n-                    let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-                    let parent_def_id = cx.tcx.hir().local_def_id(parent_id);\n+                    let parent_def_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n                     let region_scope_tree = cx.tcx.region_scope_tree(parent_def_id);\n                     let pat_extent = region_scope_tree.var_scope(pat.hir_id.local_id);\n                     if region_scope_tree.is_subscope_of(indexed_extent, pat_extent) {\n@@ -263,8 +262,7 @@ impl<'a, 'tcx> VarVisitor<'a, 'tcx> {\n                 let res = self.cx.qpath_res(seqpath, seqexpr.hir_id);\n                 match res {\n                     Res::Local(hir_id) => {\n-                        let parent_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n-                        let parent_def_id = self.cx.tcx.hir().local_def_id(parent_id);\n+                        let parent_def_id = self.cx.tcx.hir().get_parent_item(expr.hir_id);\n                         let extent = self.cx.tcx.region_scope_tree(parent_def_id).var_scope(hir_id.local_id);\n                         if index_used_directly {\n                             self.indexed_directly.insert("}, {"sha": "cd038ecd5ce1ec4fcb2507ebc763c0b65b40f601", "filename": "src/tools/clippy/clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -2053,7 +2053,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n "}, {"sha": "77849e1800f6bf9f22aff0d916f55592d55fc42e", "filename": "src/tools/clippy/clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -121,7 +121,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingConstForFn {\n                 }\n             },\n             FnKind::Method(_, sig, ..) => {\n-                if trait_ref_of_method(cx, hir_id).is_some()\n+                if trait_ref_of_method(cx, def_id).is_some()\n                     || already_const(sig.header)\n                     || method_accepts_dropable(cx, sig.decl.inputs)\n                 {"}, {"sha": "1bdd805f658549801dec79a6bfd63d1d14e6e66f", "filename": "src/tools/clippy/clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fmut_key.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -89,7 +89,7 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+            if trait_ref_of_method(cx, item.def_id).is_none() {\n                 check_sig(cx, item.hir_id(), sig.decl);\n             }\n         }"}, {"sha": "aec95530bba67ea3b3d2faaeaf93cec7b9612c44", "filename": "src/tools/clippy/clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnew_without_default.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -101,7 +101,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                             if sig.decl.inputs.is_empty();\n                             if name == sym::new;\n                             if cx.access_levels.is_reachable(impl_item.def_id);\n-                            let self_def_id = cx.tcx.hir().local_def_id(cx.tcx.hir().get_parent_item(id));\n+                            let self_def_id = cx.tcx.hir().get_parent_item(id);\n                             let self_ty = cx.tcx.type_of(self_def_id);\n                             if TyS::same_type(self_ty, return_ty(cx, id));\n                             if let Some(default_trait_id) = cx.tcx.get_diagnostic_item(sym::Default);"}, {"sha": "21ac6548b0179cafa486608e4f7153d04e137080", "filename": "src/tools/clippy/clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -280,7 +280,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_def_id = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+            let item_def_id = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_def_id);\n \n             match &item.kind {"}, {"sha": "63de117a6f1dec08737ffb022427062517570395", "filename": "src/tools/clippy/clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fptr.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -164,7 +164,7 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let parent_item = cx.tcx.hir().get_parent_item(item.hir_id());\n-            if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n+            if let Some(Node::Item(it)) = cx.tcx.hir().find_by_def_id(parent_item) {\n                 if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }"}, {"sha": "9673d975cb4d3cc2becb0f501e3244bc2516e49c", "filename": "src/tools/clippy/clippy_lints/src/self_named_constructors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fself_named_constructors.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -51,7 +51,7 @@ impl<'tcx> LateLintPass<'tcx> for SelfNamedConstructors {\n             _ => return,\n         }\n \n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n         let ret_ty = return_ty(cx, impl_item.hir_id());"}, {"sha": "92494159deeb53029c88592e4d6a7ffe93b24c98", "filename": "src/tools/clippy/clippy_lints/src/suspicious_trait_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fsuspicious_trait_impl.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -66,7 +66,7 @@ impl<'tcx> LateLintPass<'tcx> for SuspiciousImpl {\n             // Check for more than one binary operation in the implemented function\n             // Linting when multiple operations are involved can result in false positives\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);\n-            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get(parent_fn);\n+            if let hir::Node::ImplItem(impl_item) = cx.tcx.hir().get_by_def_id(parent_fn);\n             if let hir::ImplItemKind::Fn(_, body_id) = impl_item.kind;\n             let body = cx.tcx.hir().body(body_id);\n             let parent_fn = cx.tcx.hir().get_parent_item(expr.hir_id);"}, {"sha": "67cc8913318962f2f849ab1441a166dd7b9d9eaa", "filename": "src/tools/clippy/clippy_lints/src/types/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -312,12 +312,12 @@ impl_lint_pass!(Types => [BOX_COLLECTION, VEC_BOX, OPTION_OPTION, LINKEDLIST, BO\n \n impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_fn(&mut self, cx: &LateContext<'_>, _: FnKind<'_>, decl: &FnDecl<'_>, _: &Body<'_>, _: Span, id: HirId) {\n-        let is_in_trait_impl = if let Some(hir::Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(id))\n-        {\n-            matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n-        } else {\n-            false\n-        };\n+        let is_in_trait_impl =\n+            if let Some(hir::Node::Item(item)) = cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(id)) {\n+                matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n+            } else {\n+                false\n+            };\n \n         let is_exported = cx.access_levels.is_exported(cx.tcx.hir().local_def_id(id));\n \n@@ -353,7 +353,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         match item.kind {\n             ImplItemKind::Const(ty, _) => {\n                 let is_in_trait_impl = if let Some(hir::Node::Item(item)) =\n-                    cx.tcx.hir().find(cx.tcx.hir().get_parent_item(item.hir_id()))\n+                    cx.tcx.hir().find_by_def_id(cx.tcx.hir().get_parent_item(item.hir_id()))\n                 {\n                     matches!(item.kind, ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }))\n                 } else {"}, {"sha": "fd9d5b52e501f318199e5fa94ad9cf55dd79cad6", "filename": "src/tools/clippy/clippy_lints/src/unused_self.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Funused_self.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -42,7 +42,7 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_did(impl_item.hir_id());\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n         let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {"}, {"sha": "70b0560e676044eef19feef0cff8f9733f5394d8", "filename": "src/tools/clippy/clippy_lints/src/zero_sized_map_values.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fzero_sized_map_values.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -69,7 +69,11 @@ impl LateLintPass<'_> for ZeroSizedMapValues {\n \n fn in_trait_impl(cx: &LateContext<'_>, hir_id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(hir_id);\n-    if let Some(Node::Item(item)) = cx.tcx.hir().find(cx.tcx.hir().get_parent_item(parent_id)) {\n+    let second_parent_id = cx\n+        .tcx\n+        .hir()\n+        .get_parent_item(cx.tcx.hir().local_def_id_to_hir_id(parent_id));\n+    if let Some(Node::Item(item)) = cx.tcx.hir().find_by_def_id(second_parent_id) {\n         if let ItemKind::Impl(hir::Impl { of_trait: Some(_), .. }) = item.kind {\n             return true;\n         }"}, {"sha": "e55817f13eb1a1c0c67a655f7aee1371d7f128e9", "filename": "src/tools/clippy/clippy_utils/src/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/60064726aee0d05c41bf6ff0eac4699f47762b05/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Flib.rs?ref=60064726aee0d05c41bf6ff0eac4699f47762b05", "patch": "@@ -70,7 +70,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::unhash::UnhashMap;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, CRATE_DEF_ID};\n use rustc_hir::hir_id::{HirIdMap, HirIdSet};\n use rustc_hir::intravisit::{walk_expr, ErasedMap, FnKind, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n@@ -90,7 +90,6 @@ use rustc_middle::ty::binding::BindingMode;\n use rustc_middle::ty::{layout::IntegerExt, BorrowKind, DefIdTree, Ty, TyCtxt, TypeAndMut, TypeFoldable, UpvarCapture};\n use rustc_semver::RustcVersion;\n use rustc_session::Session;\n-use rustc_span::def_id::LocalDefId;\n use rustc_span::hygiene::{ExpnKind, MacroKind};\n use rustc_span::source_map::original_sp;\n use rustc_span::sym;\n@@ -216,7 +215,7 @@ pub fn find_binding_init<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<\n /// ```\n pub fn in_constant(cx: &LateContext<'_>, id: HirId) -> bool {\n     let parent_id = cx.tcx.hir().get_parent_item(id);\n-    match cx.tcx.hir().get(parent_id) {\n+    match cx.tcx.hir().get_by_def_id(parent_id) {\n         Node::Item(&Item {\n             kind: ItemKind::Const(..) | ItemKind::Static(..),\n             ..\n@@ -607,12 +606,13 @@ pub fn get_trait_def_id(cx: &LateContext<'_>, path: &[&str]) -> Option<DefId> {\n ///     }\n /// }\n /// ```\n-pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, hir_id: HirId) -> Option<&'tcx TraitRef<'tcx>> {\n+pub fn trait_ref_of_method<'tcx>(cx: &LateContext<'tcx>, def_id: LocalDefId) -> Option<&'tcx TraitRef<'tcx>> {\n     // Get the implemented trait for the current function\n+    let hir_id = cx.tcx.hir().local_def_id_to_hir_id(def_id);\n     let parent_impl = cx.tcx.hir().get_parent_item(hir_id);\n     if_chain! {\n-        if parent_impl != hir::CRATE_HIR_ID;\n-        if let hir::Node::Item(item) = cx.tcx.hir().get(parent_impl);\n+        if parent_impl != CRATE_DEF_ID;\n+        if let hir::Node::Item(item) = cx.tcx.hir().get_by_def_id(parent_impl);\n         if let hir::ItemKind::Impl(impl_) = &item.kind;\n         then { return impl_.of_trait.as_ref(); }\n     }\n@@ -1122,14 +1122,13 @@ pub fn is_entrypoint_fn(cx: &LateContext<'_>, def_id: DefId) -> bool {\n /// Returns `true` if the expression is in the program's `#[panic_handler]`.\n pub fn is_in_panic_handler(cx: &LateContext<'_>, e: &Expr<'_>) -> bool {\n     let parent = cx.tcx.hir().get_parent_item(e.hir_id);\n-    let def_id = cx.tcx.hir().local_def_id(parent).to_def_id();\n-    Some(def_id) == cx.tcx.lang_items().panic_impl()\n+    Some(parent.to_def_id()) == cx.tcx.lang_items().panic_impl()\n }\n \n /// Gets the name of the item the expression is in, if available.\n pub fn get_item_name(cx: &LateContext<'_>, expr: &Expr<'_>) -> Option<Symbol> {\n     let parent_id = cx.tcx.hir().get_parent_item(expr.hir_id);\n-    match cx.tcx.hir().find(parent_id) {\n+    match cx.tcx.hir().find_by_def_id(parent_id) {\n         Some(\n             Node::Item(Item { ident, .. })\n             | Node::TraitItem(TraitItem { ident, .. })\n@@ -1639,7 +1638,7 @@ pub fn any_parent_has_attr(tcx: TyCtxt<'_>, node: HirId, symbol: Symbol) -> bool\n             return true;\n         }\n         prev_enclosing_node = Some(enclosing_node);\n-        enclosing_node = map.get_parent_item(enclosing_node);\n+        enclosing_node = map.local_def_id_to_hir_id(map.get_parent_item(enclosing_node));\n     }\n \n     false"}]}