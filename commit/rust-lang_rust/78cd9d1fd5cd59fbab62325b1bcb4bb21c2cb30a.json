{"sha": "78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4Y2Q5ZDFmZDVjZDU5ZmJhYjYyMzI1YjFiY2I0YmIyMWMyY2IzMGE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-08-14T20:56:32Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-08-14T20:56:32Z"}, "message": "Rollup merge of #63570 - rust-lang:maybe-uninit-gates, r=RalfJung\n\nAdjust tracking issues for `MaybeUninit<T>` gates\n\ncc #63566  #63567 #63568 #63569\n\nr? @RalfJung", "tree": {"sha": "f7ddf1adeadfac00ac0b716ebafdfc0396d355db", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7ddf1adeadfac00ac0b716ebafdfc0396d355db"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdVHWBCRBK7hj4Ov3rIwAAdHIIAHDW8c5e4AqT11ahS/Appvyz\ngHnmVF+/kmUvOmbBL+V2DhH9vHVPER7CyszW9AOgPyoUpkPD3g8oraqIpTuzfvTd\n4dSxgJylC5Vk/HUic+w0XWyZZ0QKBck/xUWPZ8lIEjWP1BizTcZYQpV/Gqjx6Ykp\nNxOi6fs8vxQcM40jE3qnwU+kedDJ0C4FLJWlXESJAfBtVFYat6zuClvdGg8fhLYA\nDwARkq0AB9ww9Cn7Nas/A8xamCA1ZQjEljeOigBLzhQCwnyI3q3oimM/hXTTqPKa\nrIzzF7HwjQZgTNhhSDeo4yuXWmmyipNIlU3faNWXMr+/Iw73s1M4UQwq9x90/II=\n=sCgT\n-----END PGP SIGNATURE-----\n", "payload": "tree f7ddf1adeadfac00ac0b716ebafdfc0396d355db\nparent d11cf775b70160a3883d30ecc9fedf45fc52c591\nparent 24693d70d650b717770deb2331a50b56d1469158\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1565816192 +0200\ncommitter GitHub <noreply@github.com> 1565816192 +0200\n\nRollup merge of #63570 - rust-lang:maybe-uninit-gates, r=RalfJung\n\nAdjust tracking issues for `MaybeUninit<T>` gates\n\ncc #63566  #63567 #63568 #63569\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a", "html_url": "https://github.com/rust-lang/rust/commit/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d11cf775b70160a3883d30ecc9fedf45fc52c591", "url": "https://api.github.com/repos/rust-lang/rust/commits/d11cf775b70160a3883d30ecc9fedf45fc52c591", "html_url": "https://github.com/rust-lang/rust/commit/d11cf775b70160a3883d30ecc9fedf45fc52c591"}, {"sha": "24693d70d650b717770deb2331a50b56d1469158", "url": "https://api.github.com/repos/rust-lang/rust/commits/24693d70d650b717770deb2331a50b56d1469158", "html_url": "https://github.com/rust-lang/rust/commit/24693d70d650b717770deb2331a50b56d1469158"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "c48fcfe99d2907ce3642c7ce31b9db96ec7ea1af", "filename": "src/libcore/mem/maybe_uninit.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem%2Fmaybe_uninit.rs?ref=78cd9d1fd5cd59fbab62325b1bcb4bb21c2cb30a", "patch": "@@ -312,7 +312,7 @@ impl<T> MaybeUninit<T> {\n     /// without dropping it, so be careful not to use this twice unless you want to\n     /// skip running the destructor. For your convenience, this also returns a mutable\n     /// reference to the (now safely initialized) contents of `self`.\n-    #[unstable(feature = \"maybe_uninit_extra\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub fn write(&mut self, val: T) -> &mut T {\n         unsafe {\n@@ -502,7 +502,7 @@ impl<T> MaybeUninit<T> {\n     /// // We now created two copies of the same vector, leading to a double-free when\n     /// // they both get dropped!\n     /// ```\n-    #[unstable(feature = \"maybe_uninit_extra\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_extra\", issue = \"63567\")]\n     #[inline(always)]\n     pub unsafe fn read(&self) -> T {\n         intrinsics::panic_if_uninhabited::<T>();\n@@ -516,7 +516,7 @@ impl<T> MaybeUninit<T> {\n     /// It is up to the caller to guarantee that the `MaybeUninit<T>` really is in an initialized\n     /// state. Calling this when the content is not yet fully initialized causes undefined\n     /// behavior.\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_ref(&self) -> &T {\n         &*self.value\n@@ -532,21 +532,21 @@ impl<T> MaybeUninit<T> {\n     // FIXME(#53491): We currently rely on the above being incorrect, i.e., we have references\n     // to uninitialized data (e.g., in `libcore/fmt/float.rs`).  We should make\n     // a final decision about the rules before stabilization.\n-    #[unstable(feature = \"maybe_uninit_ref\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_ref\", issue = \"63568\")]\n     #[inline(always)]\n     pub unsafe fn get_mut(&mut self) -> &mut T {\n         &mut *self.value\n     }\n \n     /// Gets a pointer to the first element of the array.\n-    #[unstable(feature = \"maybe_uninit_slice\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn first_ptr(this: &[MaybeUninit<T>]) -> *const T {\n         this as *const [MaybeUninit<T>] as *const T\n     }\n \n     /// Gets a mutable pointer to the first element of the array.\n-    #[unstable(feature = \"maybe_uninit_slice\", issue = \"53491\")]\n+    #[unstable(feature = \"maybe_uninit_slice\", issue = \"63569\")]\n     #[inline(always)]\n     pub fn first_ptr_mut(this: &mut [MaybeUninit<T>]) -> *mut T {\n         this as *mut [MaybeUninit<T>] as *mut T"}]}