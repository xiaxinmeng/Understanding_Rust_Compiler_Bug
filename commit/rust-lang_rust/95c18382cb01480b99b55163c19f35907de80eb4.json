{"sha": "95c18382cb01480b99b55163c19f35907de80eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk1YzE4MzgyY2IwMTQ4MGI5OWI1NTE2M2MxOWYzNTkwN2RlODBlYjQ=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-09T02:07:31Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-12-30T13:30:59Z"}, "message": "Fix unresolved inference variable ICE.\n\nThis commit moves well-formedness check for the\n`UserTypeAnnotation::Ty(..)` case from always running to only when the\ncode is reachable. This solves the ICE that resulted from\n`src/test/ui/issue-54943-1.rs` (a minimal repro of `dropck-eyepatch`\nrun-pass tests that failed).\n\nThe main well-formedness check that was intended to be run despite\nunreachable code still is, that being the\n`UserTypeAnnotation::TypeOf(..)` case. Before this PR, the other case\nwasn't being checked at all.\n\nIt is possible to fix this ICE while still always checking\nwell-formedness for the `UserTypeAnnotation::Ty(..)` case but that\nsolution will ICE in unreachable code for that case, the diff for\nthat change [can be found here](0).\n\n[0]: https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53", "tree": {"sha": "b69ab6e7896afbe6a401be810530e3e4bc2c5965", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b69ab6e7896afbe6a401be810530e3e4bc2c5965"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/95c18382cb01480b99b55163c19f35907de80eb4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlwoyJMACgkQAXYLT59T\n8VTC4A//UKVIjDrKHr7CdPwe0Eu3dZeBmiNkIlOgsiLDDVw174stuJMS+E91EZ3Y\nLyOWiOtXyYW6Vr1fJv6dW4wM0dK5zTTmhFpS4aeXjVqV7E6cGjsV6Pt3iA966cKh\niQZHLHE5SkIfdO7bu2tTbK3rDFP8nzFJQeGZ2hxuuprQPlMm9QKW5nhB9kU1cAeV\nH3qF/8Ig9DG/0rjU9EnTI6zRD+rG2cz5J47YxgL36fhl0d8Fdgt/y/UenG2WDOWB\ngrpuhCFa3Sx8eJgf00pDXrc4NUE9Z80LZCyd5sr22Umt7J/v0PhKPvFI6FuyNmUc\nO/voYjUj3qcwPplO8wS+X5mSUqcDOmIRZJ1jrUHTeVHuK3zv+DeB0nnvjCVh7i6T\nqqyUkVkhLyrCfdIkMIUcQ3H9MM90SRWUcFMolsKWoPE3OwOb3wSgrI1UDgWBstpd\ndHZQXI65jYdgl0h6X4KtxQW9CHvoxQfW6qc99fexmaeE3fisJpWism5oeX6syady\nPVxBPra+RELAP6tRVVF6e7LQtEkI37YJ4zlD8g7LJpld5+8kLxdgA5Y0KXXGXig1\n+eqKAkJYwBtpkfWVrSxkNsLQBwPdqzOmwGM/YBs23gV/FWH+Gwjpld7nt0iiDwkv\nnupXhg+Yj+O1/7yN1HDoZTNFPb1505l6Em9aVD8Es4PTgCY5ssI=\n=j3lE\n-----END PGP SIGNATURE-----", "payload": "tree b69ab6e7896afbe6a401be810530e3e4bc2c5965\nparent 6092d92d70c81861ed46f2496e62dc74183857fd\nauthor David Wood <david@davidtw.co> 1544321251 +0100\ncommitter David Wood <david@davidtw.co> 1546176659 +0100\n\nFix unresolved inference variable ICE.\n\nThis commit moves well-formedness check for the\n`UserTypeAnnotation::Ty(..)` case from always running to only when the\ncode is reachable. This solves the ICE that resulted from\n`src/test/ui/issue-54943-1.rs` (a minimal repro of `dropck-eyepatch`\nrun-pass tests that failed).\n\nThe main well-formedness check that was intended to be run despite\nunreachable code still is, that being the\n`UserTypeAnnotation::TypeOf(..)` case. Before this PR, the other case\nwasn't being checked at all.\n\nIt is possible to fix this ICE while still always checking\nwell-formedness for the `UserTypeAnnotation::Ty(..)` case but that\nsolution will ICE in unreachable code for that case, the diff for\nthat change [can be found here](0).\n\n[0]: https://gist.github.com/davidtwco/f9751ffd9c0508f7251c0f17adc3af53\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/95c18382cb01480b99b55163c19f35907de80eb4", "html_url": "https://github.com/rust-lang/rust/commit/95c18382cb01480b99b55163c19f35907de80eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/95c18382cb01480b99b55163c19f35907de80eb4/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6092d92d70c81861ed46f2496e62dc74183857fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/6092d92d70c81861ed46f2496e62dc74183857fd", "html_url": "https://github.com/rust-lang/rust/commit/6092d92d70c81861ed46f2496e62dc74183857fd"}], "stats": {"total": 95, "additions": 79, "deletions": 16}, "files": [{"sha": "d0ca050f0dff713c1fdeb481b5f8a916ab75bd2b", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 44, "deletions": 14, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/95c18382cb01480b99b55163c19f35907de80eb4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c18382cb01480b99b55163c19f35907de80eb4/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=95c18382cb01480b99b55163c19f35907de80eb4", "patch": "@@ -933,19 +933,28 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n         for index in self.mir.user_type_annotations.indices() {\n             let (span, _) = &self.mir.user_type_annotations[index];\n             let type_annotation = self.instantiated_type_annotations[&index];\n-            if let Err(terr) = self.fully_perform_op(\n-                Locations::All(*span),\n-                ConstraintCategory::Assignment,\n-                self.param_env.and(type_op::ascribe_user_type::AscribeUserTypeWellFormed::new(\n-                    type_annotation,\n-                )),\n-            ) {\n-                span_mirbug!(\n-                    self,\n-                    type_annotation,\n-                    \"bad user type annotation: {:?}\",\n-                    terr,\n-                );\n+            match type_annotation {\n+                // We can't check the well-formedness of a `UserTypeAnnotation::Ty` here, it will\n+                // cause ICEs (see comment in `relate_type_and_user_type`).\n+                UserTypeAnnotation::TypeOf(..) => {\n+                    if let Err(terr) = self.fully_perform_op(\n+                        Locations::All(*span),\n+                        ConstraintCategory::Assignment,\n+                        self.param_env.and(\n+                            type_op::ascribe_user_type::AscribeUserTypeWellFormed::new(\n+                                type_annotation,\n+                            )\n+                        ),\n+                    ) {\n+                        span_mirbug!(\n+                            self,\n+                            type_annotation,\n+                            \"bad user type annotation: {:?}\",\n+                            terr,\n+                        );\n+                    }\n+                },\n+                _ => {},\n             }\n         }\n     }\n@@ -1079,7 +1088,8 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n             a, v, user_ty, locations,\n         );\n \n-        match self.instantiated_type_annotations[&user_ty.base] {\n+        let type_annotation = self.instantiated_type_annotations[&user_ty.base];\n+        match type_annotation {\n             UserTypeAnnotation::Ty(ty) => {\n                 // The `TypeRelating` code assumes that \"unresolved inference\n                 // variables\" appear in the \"a\" side, so flip `Contravariant`\n@@ -1117,7 +1127,27 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 if let Ok(projected_ty) = curr_projected_ty {\n                     let ty = projected_ty.to_ty(tcx);\n                     self.relate_types(ty, v1, a, locations, category)?;\n+\n+                    // We'll get an ICE if we check for well-formedness of a\n+                    // `UserTypeAnnotation::Ty` that hasn't had types related.\n+                    //\n+                    // Doing this without the types having been related will result in\n+                    // `probe_ty_var` failing in the canonicalizer - in practice, this\n+                    // results in three run-pass tests failing. You can work around that\n+                    // by keeping an vec of projections instead of annotations and performing\n+                    // the projections before storing into `instantiated_type_annotations`\n+                    // but that still fails in dead code.\n+                    self.fully_perform_op(\n+                        locations,\n+                        category,\n+                        self.param_env.and(\n+                            type_op::ascribe_user_type::AscribeUserTypeWellFormed::new(\n+                                UserTypeAnnotation::Ty(ty),\n+                            )\n+                        ),\n+                    )?;\n                 }\n+\n             }\n             UserTypeAnnotation::TypeOf(def_id, user_substs) => {\n                 let projs = self.infcx.tcx.intern_projs(&user_ty.projs);"}, {"sha": "b6050f059c27bc6e5614bfa7a8ae544228b9aa1d", "filename": "src/test/incremental/hashes/let_expressions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fincremental%2Fhashes%2Flet_expressions.rs?ref=95c18382cb01480b99b55163c19f35907de80eb4", "patch": "@@ -70,7 +70,7 @@ pub fn change_mutability_of_reference_type() {\n \n #[cfg(not(cfail1))]\n #[rustc_clean(cfg=\"cfail2\",\n-    except=\"HirBody,TypeckTables,MirValidated\")]\n+    except=\"HirBody,TypeckTables,MirValidated,MirOptimized\")]\n #[rustc_clean(cfg=\"cfail3\")]\n pub fn change_mutability_of_reference_type() {\n     let _x: &mut u64;"}, {"sha": "7750e3403619288b0f44a332799ebc97c7e25c80", "filename": "src/test/ui/issue-54943-1.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fissue-54943-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fissue-54943-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-54943-1.rs?ref=95c18382cb01480b99b55163c19f35907de80eb4", "patch": "@@ -0,0 +1,15 @@\n+#![feature(nll)]\n+\n+// This test is a minimal version of an ICE in the dropck-eyepatch tests\n+// found in the fix for #54943.\n+\n+// compile-pass\n+\n+fn foo<T>(_t: T) {\n+}\n+\n+fn main() {\n+    struct A<'a, B: 'a>(&'a B);\n+    let (a1, a2): (String, A<_>) = (String::from(\"auto\"), A(&\"this\"));\n+    foo((a1, a2));\n+}"}, {"sha": "f829c38c35d23638963114e4bc92fbe043512d9f", "filename": "src/test/ui/issue-54943-2.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fissue-54943-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fissue-54943-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-54943-2.rs?ref=95c18382cb01480b99b55163c19f35907de80eb4", "patch": "@@ -0,0 +1,18 @@\n+#![feature(nll)]\n+\n+// This test is a minimal version of an ICE in the dropck-eyepatch tests\n+// found in the fix for #54943. In particular, this test is in unreachable\n+// code as the initial fix for this ICE only worked if the code was reachable.\n+\n+// compile-pass\n+\n+fn foo<T>(_t: T) {\n+}\n+\n+fn main() {\n+    return;\n+\n+    struct A<'a, B: 'a>(&'a B);\n+    let (a1, a2): (String, A<_>) = (String::from(\"auto\"), A(&\"this\"));\n+    foo((a1, a2));\n+}"}, {"sha": "539343a68294f35415ce28a8e18a50f3bc8c63d4", "filename": "src/test/ui/regions/regions-free-region-ordering-caller1.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/95c18382cb01480b99b55163c19f35907de80eb4/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Fregions-free-region-ordering-caller1.nll.stderr?ref=95c18382cb01480b99b55163c19f35907de80eb4", "patch": "@@ -21,7 +21,7 @@ LL | fn call1<'a>(x: &'a usize) {\n LL |     let z: &'a & usize = &(&y);\n    |            -----------    ^^^^ borrowed value does not live long enough\n    |            |\n-   |            assignment requires that `y` is borrowed for `'a`\n+   |            type annotation requires that `y` is borrowed for `'a`\n ...\n LL | }\n    | - `y` dropped here while still borrowed"}]}