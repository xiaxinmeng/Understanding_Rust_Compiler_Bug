{"sha": "97ccd9706885d801990372fb88c4ab52817338b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk3Y2NkOTcwNjg4NWQ4MDE5OTAzNzJmYjg4YzRhYjUyODE3MzM4Yjk=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T07:39:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T07:39:15Z"}, "message": "Rollup merge of #73719 - davidtwco:issue-72509-emitter-column-width, r=estebank\n\nemitter: column width defaults to 140\n\nFixes #72509.\n\nThis PR modifies the column width computation in the emitter when `termize::dimensions` returns `None` so that it uses the default value of 140 (which is used in UI testing currently) instead of `usize::MAX` which just ends up causing overflows in later computations.\n\nI also tried changing the computations which used `column_width` with their saturating equivalent, but the output appeared the same - so I decided to go with this approach because I feel like it's less likely to accidentally re-introduce an ICE like this in future (e.g. adding a non-saturating operation on `column_width` in future).\n\nI haven't added a test because I couldn't come up with a MCVE. I stumbled upon this running rustc-perf with the `piston-image` benchmark (running in tmux; it only happened with stage two builds only; and only when running through Cargo, not rustc directly with the same flags). In addition, given the nature of the issue, I don't know that we *could* write a UI test for this. Open to suggestions here though.\n\nr? @estebank", "tree": {"sha": "0167495f1fcb4ddea17c02a9d2aa5dd34cbfe100", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0167495f1fcb4ddea17c02a9d2aa5dd34cbfe100"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/97ccd9706885d801990372fb88c4ab52817338b9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9aYkCRBK7hj4Ov3rIwAAdHIIAG9wJmOi8KIpX8Icty5bbCbq\nCPOtNm5FVF+pWXNsKK52UrFZqGEtJ+DMlhgwPJ+YP+9zxnNCWVCSf3cCtNABw8cR\nEUs9CtjQnNOsacCR7snAwaxinmtxCu/Vr3bZ/QoyiY+SuB7YJmoYLE3RzDcdn/HK\nJrMhbQDodJwMHl/pyxM/hlY1ZCWb2JmIIAiW3k6EsY4KOBu2bDdcXgdLMvF3y56S\nOJjcBz1/i0iLaBkhCkjS0KPuS6A+KoXvhMiD9jSUAiynyEXwQps2cL8vJc/j35Nt\nOui+hp3iNEtjQDffh7SaiKXw6Czuk3jqXUytW53t0Oi+y8u8oU4EvmspApuTK1Q=\n=crUx\n-----END PGP SIGNATURE-----\n", "payload": "tree 0167495f1fcb4ddea17c02a9d2aa5dd34cbfe100\nparent 6061752853a672e3058ba763b1fc5b310796ab93\nparent 11a3584de4084deabe23354cb387984d6664a4a8\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593157155 -0700\ncommitter GitHub <noreply@github.com> 1593157155 -0700\n\nRollup merge of #73719 - davidtwco:issue-72509-emitter-column-width, r=estebank\n\nemitter: column width defaults to 140\n\nFixes #72509.\n\nThis PR modifies the column width computation in the emitter when `termize::dimensions` returns `None` so that it uses the default value of 140 (which is used in UI testing currently) instead of `usize::MAX` which just ends up causing overflows in later computations.\n\nI also tried changing the computations which used `column_width` with their saturating equivalent, but the output appeared the same - so I decided to go with this approach because I feel like it's less likely to accidentally re-introduce an ICE like this in future (e.g. adding a non-saturating operation on `column_width` in future).\n\nI haven't added a test because I couldn't come up with a MCVE. I stumbled upon this running rustc-perf with the `piston-image` benchmark (running in tmux; it only happened with stage two builds only; and only when running through Cargo, not rustc directly with the same flags). In addition, given the nature of the issue, I don't know that we *could* write a UI test for this. Open to suggestions here though.\n\nr? @estebank\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/97ccd9706885d801990372fb88c4ab52817338b9", "html_url": "https://github.com/rust-lang/rust/commit/97ccd9706885d801990372fb88c4ab52817338b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/97ccd9706885d801990372fb88c4ab52817338b9/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6061752853a672e3058ba763b1fc5b310796ab93", "url": "https://api.github.com/repos/rust-lang/rust/commits/6061752853a672e3058ba763b1fc5b310796ab93", "html_url": "https://github.com/rust-lang/rust/commit/6061752853a672e3058ba763b1fc5b310796ab93"}, {"sha": "11a3584de4084deabe23354cb387984d6664a4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a3584de4084deabe23354cb387984d6664a4a8", "html_url": "https://github.com/rust-lang/rust/commit/11a3584de4084deabe23354cb387984d6664a4a8"}], "stats": {"total": 10, "additions": 7, "deletions": 3}, "files": [{"sha": "1362a1155bcdd358e68573809147005fe47d2b6d", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/97ccd9706885d801990372fb88c4ab52817338b9/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/97ccd9706885d801990372fb88c4ab52817338b9/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=97ccd9706885d801990372fb88c4ab52817338b9", "patch": "@@ -31,6 +31,9 @@ use std::path::Path;\n use termcolor::{Ansi, BufferWriter, ColorChoice, ColorSpec, StandardStream};\n use termcolor::{Buffer, Color, WriteColor};\n \n+/// Default column width, used in tests and when terminal dimensions cannot be determined.\n+const DEFAULT_COLUMN_WIDTH: usize = 140;\n+\n /// Describes the way the content of the `rendered` field of the json output is generated\n #[derive(Clone, Copy, Debug, PartialEq, Eq)]\n pub enum HumanReadableErrorType {\n@@ -74,7 +77,8 @@ struct Margin {\n     pub computed_left: usize,\n     /// The end of the line to be displayed.\n     pub computed_right: usize,\n-    /// The current width of the terminal. 140 by default and in tests.\n+    /// The current width of the terminal. Uses value of `DEFAULT_COLUMN_WIDTH` constant by default\n+    /// and in tests.\n     pub column_width: usize,\n     /// The end column of a span label, including the span. Doesn't account for labels not in the\n     /// same line as the span.\n@@ -1414,11 +1418,11 @@ impl EmitterWriter {\n                 let column_width = if let Some(width) = self.terminal_width {\n                     width.saturating_sub(code_offset)\n                 } else if self.ui_testing {\n-                    140\n+                    DEFAULT_COLUMN_WIDTH\n                 } else {\n                     termize::dimensions()\n                         .map(|(w, _)| w.saturating_sub(code_offset))\n-                        .unwrap_or(usize::MAX)\n+                        .unwrap_or(DEFAULT_COLUMN_WIDTH)\n                 };\n \n                 let margin = Margin::new("}]}