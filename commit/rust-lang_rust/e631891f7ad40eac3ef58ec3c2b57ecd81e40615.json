{"sha": "e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "node_id": "C_kwDOAAsO6NoAKGU2MzE4OTFmN2FkNDBlYWMzZWY1OGVjM2MyYjU3ZWNkODFlNDA2MTU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T18:13:08Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-13T18:13:08Z"}, "message": "Auto merge of #104370 - matthiaskrgr:rollup-c3b38sm, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #103996 (Add small clarification around using pointers derived from references)\n - #104315 (Improve spans with `use crate::{self}`)\n - #104320 (Use `derive_const` and rm manual StructuralEq impl)\n - #104357 (add is_sized method on Abi and Layout, and use it)\n - #104365 (Add x tool to triagebot)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "f12e807d6a2bb7b1ad5401aec6f860ec29765399", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f12e807d6a2bb7b1ad5401aec6f860ec29765399"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "html_url": "https://github.com/rust-lang/rust/commit/e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4d6307c633c954971f3ca7876d4f29f3fe83614", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4d6307c633c954971f3ca7876d4f29f3fe83614", "html_url": "https://github.com/rust-lang/rust/commit/e4d6307c633c954971f3ca7876d4f29f3fe83614"}, {"sha": "39ff9d28724870876bd6c9d0e1d8815b12c1bdc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/39ff9d28724870876bd6c9d0e1d8815b12c1bdc6", "html_url": "https://github.com/rust-lang/rust/commit/39ff9d28724870876bd6c9d0e1d8815b12c1bdc6"}], "stats": {"total": 105, "additions": 73, "deletions": 32}, "files": [{"sha": "df1150ec0b8ce266e610de2a0a52052ebd9dc992", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -128,7 +128,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n     ty: Ty<'tcx>,\n ) -> CValue<'tcx> {\n     let layout = fx.layout_of(ty);\n-    assert!(!layout.is_unsized(), \"sized const value\");\n+    assert!(layout.is_sized(), \"unsized const value\");\n \n     if layout.is_zst() {\n         return CValue::by_ref(crate::Pointer::dangling(layout.align.pref), layout);"}, {"sha": "c5bd574623df68d2644ce5908d136d696b12e979", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -19,7 +19,7 @@ fn codegen_field<'tcx>(\n     };\n \n     if let Some(extra) = extra {\n-        if !field_layout.is_unsized() {\n+        if field_layout.is_sized() {\n             return simple(fx);\n         }\n         match field_layout.ty.kind() {\n@@ -364,7 +364,7 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n         layout: TyAndLayout<'tcx>,\n     ) -> CPlace<'tcx> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         if layout.size.bytes() == 0 {\n             return CPlace {\n                 inner: CPlaceInner::Addr(Pointer::dangling(layout.align.pref), None),\n@@ -825,7 +825,7 @@ impl<'tcx> CPlace<'tcx> {\n         fx: &FunctionCx<'_, '_, 'tcx>,\n         variant: VariantIdx,\n     ) -> Self {\n-        assert!(!self.layout().is_unsized());\n+        assert!(self.layout().is_sized());\n         let layout = self.layout().for_variant(fx, variant);\n         CPlace { inner: self.inner, layout }\n     }"}, {"sha": "bdf7318ce48c9505887b2287c0201bf66742bc54", "filename": "compiler/rustc_codegen_gcc/src/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fsrc%2Ftype_.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -277,7 +277,7 @@ pub fn struct_fields<'gcc, 'tcx>(cx: &CodegenCx<'gcc, 'tcx>, layout: TyAndLayout\n         offset = target_offset + field.size;\n         prev_effective_align = effective_field_align;\n     }\n-    if !layout.is_unsized() && field_count > 0 {\n+    if layout.is_sized() && field_count > 0 {\n         if offset > layout.size {\n             bug!(\"layout: {:#?} stride: {:?} offset: {:?}\", layout, layout.size, offset);\n         }"}, {"sha": "5cd0e1cb63ae1b6b2c602272ba506cbf45dc1c45", "filename": "compiler/rustc_codegen_llvm/src/debuginfo/utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fdebuginfo%2Futils.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -72,7 +72,7 @@ pub(crate) fn fat_pointer_kind<'ll, 'tcx>(\n         layout.is_unsized()\n     );\n \n-    if !layout.is_unsized() {\n+    if layout.is_sized() {\n         return None;\n     }\n "}, {"sha": "182adf81785716fe5abea7b91e0571dc6bda7a8b", "filename": "compiler/rustc_codegen_llvm/src/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Ftype_of.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -140,7 +140,7 @@ fn struct_llfields<'a, 'tcx>(\n         prev_effective_align = effective_field_align;\n     }\n     let padding_used = result.len() > field_count;\n-    if !layout.is_unsized() && field_count > 0 {\n+    if layout.is_sized() && field_count > 0 {\n         if offset > layout.size {\n             bug!(\"layout: {:#?} stride: {:?} offset: {:?}\", layout, layout.size, offset);\n         }"}, {"sha": "6015d48decae930ac7cfc764663680d25d830c8b", "filename": "compiler/rustc_codegen_ssa/src/glue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fglue.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -15,7 +15,7 @@ pub fn size_and_align_of_dst<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n ) -> (Bx::Value, Bx::Value) {\n     let layout = bx.layout_of(t);\n     debug!(\"size_and_align_of_dst(ty={}, info={:?}): layout: {:?}\", t, info, layout);\n-    if !layout.is_unsized() {\n+    if layout.is_sized() {\n         let size = bx.const_usize(layout.size.bytes());\n         let align = bx.const_usize(layout.align.abi.bytes());\n         return (size, align);"}, {"sha": "908555385891d85417e4710ad4b860b790e43676", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -29,7 +29,7 @@ pub struct PlaceRef<'tcx, V> {\n \n impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(llval: V, layout: TyAndLayout<'tcx>) -> PlaceRef<'tcx, V> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         PlaceRef { llval, llextra: None, layout, align: layout.align.abi }\n     }\n \n@@ -38,7 +38,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         layout: TyAndLayout<'tcx>,\n         align: Align,\n     ) -> PlaceRef<'tcx, V> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         PlaceRef { llval, llextra: None, layout, align }\n     }\n \n@@ -48,7 +48,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         bx: &mut Bx,\n         layout: TyAndLayout<'tcx>,\n     ) -> Self {\n-        assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n+        assert!(layout.is_sized(), \"tried to statically allocate unsized place\");\n         let tmp = bx.alloca(bx.cx().backend_type(layout), layout.align.abi);\n         Self::new_sized(tmp, layout)\n     }\n@@ -145,7 +145,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n                 );\n                 return simple();\n             }\n-            _ if !field.is_unsized() => return simple(),\n+            _ if field.is_sized() => return simple(),\n             ty::Slice(..) | ty::Str | ty::Foreign(..) => return simple(),\n             ty::Adt(def, _) => {\n                 if def.repr().packed() {"}, {"sha": "8f5e503d659dad30b1d16c7199bfcb7dc7276bfd", "filename": "compiler/rustc_const_eval/src/const_eval/eval_queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -46,7 +46,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n         ecx.tcx.def_kind(cid.instance.def_id())\n     );\n     let layout = ecx.layout_of(body.bound_return_ty().subst(tcx, cid.instance.substs))?;\n-    assert!(!layout.is_unsized());\n+    assert!(layout.is_sized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack)?;\n \n     trace!("}, {"sha": "ab82268dde3ab5898bce8cb11ccda94b43ec7bf9", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -572,7 +572,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         metadata: &MemPlaceMeta<M::Provenance>,\n         layout: &TyAndLayout<'tcx>,\n     ) -> InterpResult<'tcx, Option<(Size, Align)>> {\n-        if !layout.is_unsized() {\n+        if layout.is_sized() {\n             return Ok(Some((layout.size, layout.align.abi)));\n         }\n         match layout.ty.kind() {"}, {"sha": "e68456a1d731a2989ceace8449d42c7bdc406982", "filename": "compiler/rustc_const_eval/src/interpret/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fintrinsics.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -713,7 +713,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         rhs: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::Provenance>,\n     ) -> InterpResult<'tcx, Scalar<M::Provenance>> {\n         let layout = self.layout_of(lhs.layout.ty.builtin_deref(true).unwrap().ty)?;\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n \n         let get_bytes = |this: &InterpCx<'mir, 'tcx, M>,\n                          op: &OpTy<'tcx, <M as Machine<'mir, 'tcx>>::Provenance>,"}, {"sha": "a529972db9d6fec739332ae5b9ad2ee8f1dc5dda", "filename": "compiler/rustc_const_eval/src/interpret/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmemory.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -683,7 +683,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // Use size and align of the type.\n                 let ty = self.tcx.type_of(def_id);\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n-                assert!(!layout.is_unsized());\n+                assert!(layout.is_sized());\n                 (layout.size, layout.align.abi, AllocKind::LiveData)\n             }\n             Some(GlobalAlloc::Memory(alloc)) => {"}, {"sha": "274917f09fe3648e88dc5fd7cf97e85a59d859b7", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -280,7 +280,7 @@ impl<'tcx, Prov: Provenance> OpTy<'tcx, Prov> {\n         layout: TyAndLayout<'tcx>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Self> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         self.offset_with_meta(offset, MemPlaceMeta::None, layout, cx)\n     }\n }"}, {"sha": "4d0125bf395d69174206a67d238edb94694d4e54", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -201,7 +201,7 @@ impl<'tcx, Prov: Provenance> MPlaceTy<'tcx, Prov> {\n         layout: TyAndLayout<'tcx>,\n         cx: &impl HasDataLayout,\n     ) -> InterpResult<'tcx, Self> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         self.offset_with_meta(offset, MemPlaceMeta::None, layout, cx)\n     }\n \n@@ -340,7 +340,7 @@ where\n         &self,\n         place: &MPlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx, Option<AllocRef<'_, 'tcx, M::Provenance, M::AllocExtra>>> {\n-        assert!(!place.layout.is_unsized());\n+        assert!(place.layout.is_sized());\n         assert!(!place.meta.has_meta());\n         let size = place.layout.size;\n         self.get_ptr_alloc(place.ptr, size, place.align)\n@@ -351,7 +351,7 @@ where\n         &mut self,\n         place: &MPlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx, Option<AllocRefMut<'_, 'tcx, M::Provenance, M::AllocExtra>>> {\n-        assert!(!place.layout.is_unsized());\n+        assert!(place.layout.is_sized());\n         assert!(!place.meta.has_meta());\n         let size = place.layout.size;\n         self.get_ptr_alloc_mut(place.ptr, size, place.align)\n@@ -485,7 +485,7 @@ where\n         src: Immediate<M::Provenance>,\n         dest: &PlaceTy<'tcx, M::Provenance>,\n     ) -> InterpResult<'tcx> {\n-        assert!(!dest.layout.is_unsized(), \"Cannot write unsized data\");\n+        assert!(dest.layout.is_sized(), \"Cannot write unsized data\");\n         trace!(\"write_immediate: {:?} <- {:?}: {}\", *dest, src, dest.layout.ty);\n \n         // See if we can avoid an allocation. This is the counterpart to `read_immediate_raw`,\n@@ -746,7 +746,7 @@ where\n         layout: TyAndLayout<'tcx>,\n         kind: MemoryKind<M::MemoryKind>,\n     ) -> InterpResult<'tcx, MPlaceTy<'tcx, M::Provenance>> {\n-        assert!(!layout.is_unsized());\n+        assert!(layout.is_sized());\n         let ptr = self.allocate_ptr(layout.size, layout.align.abi, kind)?;\n         Ok(MPlaceTy::from_aligned_ptr(ptr.into(), layout))\n     }"}, {"sha": "3c286fa61bec5c9cb1a9501924ceded45ab5d13b", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -209,7 +209,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Repeat(ref operand, _) => {\n                 let src = self.eval_operand(operand, None)?;\n-                assert!(!src.layout.is_unsized());\n+                assert!(src.layout.is_sized());\n                 let dest = self.force_allocation(&dest)?;\n                 let length = dest.len(self)?;\n "}, {"sha": "fa15d466ac125cf910f3e2cbd13e27c362ee6154", "filename": "compiler/rustc_const_eval/src/interpret/traits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Ftraits.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -53,7 +53,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     ) -> InterpResult<'tcx, (Size, Align)> {\n         let (ty, _trait_ref) = self.get_ptr_vtable(vtable)?;\n         let layout = self.layout_of(ty)?;\n-        assert!(!layout.is_unsized(), \"there are no vtables for unsized types\");\n+        assert!(layout.is_sized(), \"there are no vtables for unsized types\");\n         Ok((layout.size, layout.align.abi))\n     }\n }"}, {"sha": "6eae94511e4d63c05f1a508da14027ac07cf0399", "filename": "compiler/rustc_middle/src/ty/vtable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fvtable.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -66,7 +66,7 @@ pub(super) fn vtable_allocation_provider<'tcx>(\n     let layout = tcx\n         .layout_of(ty::ParamEnv::reveal_all().and(ty))\n         .expect(\"failed to build vtable representation\");\n-    assert!(!layout.is_unsized(), \"can't create a vtable for an unsized type\");\n+    assert!(layout.is_sized(), \"can't create a vtable for an unsized type\");\n     let size = layout.size.bytes();\n     let align = layout.align.abi.bytes();\n "}, {"sha": "4f30e8a0be03ef3cda925f60540da06bb4111d56", "filename": "compiler/rustc_mir_transform/src/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -385,7 +385,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // I don't know how return types can seem to be unsized but this happens in the\n             // `type/type-unsatisfiable.rs` test.\n             .filter(|ret_layout| {\n-                !ret_layout.is_unsized() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n+                ret_layout.is_sized() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n             })\n             .unwrap_or_else(|| ecx.layout_of(tcx.types.unit).unwrap());\n "}, {"sha": "163446c52e4c28112ad4d90681c3f01d5a365c21", "filename": "compiler/rustc_mir_transform/src/const_prop_lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fconst_prop_lint.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -199,7 +199,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             // I don't know how return types can seem to be unsized but this happens in the\n             // `type/type-unsatisfiable.rs` test.\n             .filter(|ret_layout| {\n-                !ret_layout.is_unsized() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n+                ret_layout.is_sized() && ret_layout.size < Size::from_bytes(MAX_ALLOC_LIMIT)\n             })\n             .unwrap_or_else(|| ecx.layout_of(tcx.types.unit).unwrap());\n "}, {"sha": "af49d438a22cb7918e9fde85d1f9b42dca2dfe6f", "filename": "compiler/rustc_passes/src/stability.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_passes%2Fsrc%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Fstability.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -536,6 +536,14 @@ impl<'tcx> MissingStabilityAnnotations<'tcx> {\n             return;\n         }\n \n+        // if the const impl is derived using the `derive_const` attribute,\n+        // then it would be \"stable\" at least for the impl.\n+        // We gate usages of it using `feature(const_trait_impl)` anyways\n+        // so there is no unstable leakage\n+        if self.tcx.is_builtin_derive(def_id.to_def_id()) {\n+            return;\n+        }\n+\n         let is_const = self.tcx.is_const_fn(def_id.to_def_id())\n             || self.tcx.is_const_trait_impl_raw(def_id.to_def_id());\n         let is_stable = self"}, {"sha": "e7e419c9b4238207d0c75fc8fc1931d779395765", "filename": "compiler/rustc_resolve/src/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fbuild_reduced_graph.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -469,9 +469,11 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                         }\n \n                         // Replace `use foo::{ self };` with `use foo;`\n+                        let self_span = source.ident.span;\n                         source = module_path.pop().unwrap();\n                         if rename.is_none() {\n-                            ident = source.ident;\n+                            // Keep the span of `self`, but the name of `foo`\n+                            ident = Ident { name: source.ident.name, span: self_span };\n                         }\n                     }\n                 } else {"}, {"sha": "decbefc2f7c622b8a4d85a95b3b97bb4bdeb7616", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -1083,6 +1083,11 @@ impl Abi {\n         }\n     }\n \n+    #[inline]\n+    pub fn is_sized(&self) -> bool {\n+        !self.is_unsized()\n+    }\n+\n     /// Returns `true` if this is a single signed integer scalar\n     #[inline]\n     pub fn is_signed(&self) -> bool {\n@@ -1490,6 +1495,11 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n         self.abi.is_unsized()\n     }\n \n+    #[inline]\n+    pub fn is_sized(&self) -> bool {\n+        self.abi.is_sized()\n+    }\n+\n     /// Returns `true` if the type is a ZST and not unsized.\n     pub fn is_zst(&self) -> bool {\n         match self.abi {"}, {"sha": "b59be0a0ea7945d5907438b653215a5f6320c165", "filename": "compiler/rustc_ty_utils/src/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ty_utils%2Fsrc%2Flayout.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -668,7 +668,7 @@ fn layout_of_uncached<'tcx>(\n                 let mut abi = Abi::Aggregate { sized: true };\n                 let index = VariantIdx::new(0);\n                 for field in &variants[index] {\n-                    assert!(!field.is_unsized());\n+                    assert!(field.is_sized());\n                     align = align.max(field.align);\n \n                     // If all non-ZST fields have the same ABI, forward this ABI"}, {"sha": "5db5cbfc3dfdde2c6349e3fc145c05f29f4d6fdb", "filename": "library/core/src/cmp.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fcmp.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -24,6 +24,7 @@\n \n use crate::const_closure::ConstFnMutClosure;\n use crate::marker::Destruct;\n+#[cfg(bootstrap)]\n use crate::marker::StructuralPartialEq;\n \n use self::Ordering::*;\n@@ -331,6 +332,7 @@ pub struct AssertParamIsEq<T: Eq + ?Sized> {\n /// assert_eq!(Ordering::Greater, result);\n /// ```\n #[derive(Clone, Copy, Eq, Debug, Hash)]\n+#[cfg_attr(not(bootstrap), derive_const(PartialOrd, Ord, PartialEq))]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[repr(i8)]\n pub enum Ordering {\n@@ -877,10 +879,12 @@ pub macro Ord($item:item) {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[cfg(bootstrap)]\n impl StructuralPartialEq for Ordering {}\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const PartialEq for Ordering {\n     #[inline]\n     fn eq(&self, other: &Self) -> bool {\n@@ -890,6 +894,7 @@ impl const PartialEq for Ordering {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const Ord for Ordering {\n     #[inline]\n     fn cmp(&self, other: &Ordering) -> Ordering {\n@@ -899,6 +904,7 @@ impl const Ord for Ordering {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[rustc_const_unstable(feature = \"const_cmp\", issue = \"92391\")]\n+#[cfg(bootstrap)]\n impl const PartialOrd for Ordering {\n     #[inline]\n     fn partial_cmp(&self, other: &Ordering) -> Option<Ordering> {"}, {"sha": "8425354837841608c002775d7651bd4d3f72443f", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -185,6 +185,7 @@\n #![feature(const_refs_to_cell)]\n #![feature(decl_macro)]\n #![feature(deprecated_suggestion)]\n+#![cfg_attr(not(bootstrap), feature(derive_const))]\n #![feature(doc_cfg)]\n #![feature(doc_notable_trait)]\n #![feature(rustdoc_internals)]"}, {"sha": "fd6fe46bf50a85eca419a9469603e11249264939", "filename": "library/core/src/ptr/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmod.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -35,7 +35,8 @@\n //!   be used for inter-thread synchronization.\n //! * The result of casting a reference to a pointer is valid for as long as the\n //!   underlying object is live and no reference (just raw pointers) is used to\n-//!   access the same memory.\n+//!   access the same memory. That is, reference and pointer accesses cannot be\n+//!   interleaved.\n //!\n //! These axioms, along with careful use of [`offset`] for pointer arithmetic,\n //! are enough to correctly implement many useful things in unsafe code. Stronger guarantees\n@@ -64,7 +65,6 @@\n //! separate allocated object), heap allocations (each allocation created by the global allocator is\n //! a separate allocated object), and `static` variables.\n //!\n-//!\n //! # Strict Provenance\n //!\n //! **The following text is non-normative, insufficiently formal, and is an extremely strict"}, {"sha": "65ab948147cdc3fce11acccc40e666b2cb9a929c", "filename": "src/test/ui/use/use-crate-self.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -0,0 +1,4 @@\n+use crate::{self};\n+        //~^ ERROR crate root imports need to be explicitly named: `use crate as name;`\n+\n+fn main() {}"}, {"sha": "dd4036bfff475e1539ecc8024b08bb4ba1cf45ba", "filename": "src/test/ui/use/use-crate-self.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fuse%2Fuse-crate-self.stderr?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -0,0 +1,8 @@\n+error: crate root imports need to be explicitly named: `use crate as name;`\n+  --> $DIR/use-crate-self.rs:1:13\n+   |\n+LL | use crate::{self};\n+   |             ^^^^\n+\n+error: aborting due to previous error\n+"}, {"sha": "9ce02a02ec408faae64fddf54aaf14036e352f58", "filename": "src/tools/miri/src/stacked_borrows/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fstacked_borrows%2Fmod.rs?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -1053,7 +1053,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 // pointers we need to retag, so we can stop recursion early.\n                 // This optimization is crucial for ZSTs, because they can contain way more fields\n                 // than we can ever visit.\n-                if !place.layout.is_unsized() && place.layout.size < self.ecx.pointer_size() {\n+                if place.layout.is_sized() && place.layout.size < self.ecx.pointer_size() {\n                     return Ok(());\n                 }\n "}, {"sha": "985e065652d620b021cc1224a45fead4601336b2", "filename": "triagebot.toml", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e631891f7ad40eac3ef58ec3c2b57ecd81e40615/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=e631891f7ad40eac3ef58ec3c2b57ecd81e40615", "patch": "@@ -182,6 +182,7 @@ trigger_files = [\n     \"x.ps1\",\n     \"src/bootstrap\",\n     \"src/tools/rust-installer\",\n+    \"src/tools/x\",\n     \"configure\",\n     \"Cargo.toml\",\n     \"Cargo.lock\",\n@@ -583,3 +584,4 @@ fallback = [\n \"/src/tools/rustdoc-js\" =                    [\"rustdoc\"]\n \"/src/tools/rustdoc-themes\" =                [\"rustdoc\"]\n \"/src/tools/tidy\" =                          [\"bootstrap\"]\n+\"/src/tools/x\" =                             [\"bootstrap\"]"}]}