{"sha": "3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNhMmExMzc1NmYzMjViMWRkOGRkZDU0YTBhMGIyNGI5OTE4MGZiODI=", "commit": {"author": {"name": "Changyu Li", "email": "changyl@microsoft.com", "date": "2019-06-25T20:14:54Z"}, "committer": {"name": "Changyu Li", "email": "changyl@microsoft.com", "date": "2019-06-25T20:26:12Z"}, "message": "Review 1", "tree": {"sha": "d4fd5b96086c5594abce5a7a1040395849c5b013", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d4fd5b96086c5594abce5a7a1040395849c5b013"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "html_url": "https://github.com/rust-lang/rust/commit/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82/comments", "author": {"login": "yourmsftacct", "id": 62322545, "node_id": "MDQ6VXNlcjYyMzIyNTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/62322545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yourmsftacct", "html_url": "https://github.com/yourmsftacct", "followers_url": "https://api.github.com/users/yourmsftacct/followers", "following_url": "https://api.github.com/users/yourmsftacct/following{/other_user}", "gists_url": "https://api.github.com/users/yourmsftacct/gists{/gist_id}", "starred_url": "https://api.github.com/users/yourmsftacct/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yourmsftacct/subscriptions", "organizations_url": "https://api.github.com/users/yourmsftacct/orgs", "repos_url": "https://api.github.com/users/yourmsftacct/repos", "events_url": "https://api.github.com/users/yourmsftacct/events{/privacy}", "received_events_url": "https://api.github.com/users/yourmsftacct/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yourmsftacct", "id": 62322545, "node_id": "MDQ6VXNlcjYyMzIyNTQ1", "avatar_url": "https://avatars.githubusercontent.com/u/62322545?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yourmsftacct", "html_url": "https://github.com/yourmsftacct", "followers_url": "https://api.github.com/users/yourmsftacct/followers", "following_url": "https://api.github.com/users/yourmsftacct/following{/other_user}", "gists_url": "https://api.github.com/users/yourmsftacct/gists{/gist_id}", "starred_url": "https://api.github.com/users/yourmsftacct/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yourmsftacct/subscriptions", "organizations_url": "https://api.github.com/users/yourmsftacct/orgs", "repos_url": "https://api.github.com/users/yourmsftacct/repos", "events_url": "https://api.github.com/users/yourmsftacct/events{/privacy}", "received_events_url": "https://api.github.com/users/yourmsftacct/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "888157b52eace7a4dbf4138ad48926a78ed1d0e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/888157b52eace7a4dbf4138ad48926a78ed1d0e1", "html_url": "https://github.com/rust-lang/rust/commit/888157b52eace7a4dbf4138ad48926a78ed1d0e1"}], "stats": {"total": 35, "additions": 19, "deletions": 16}, "files": [{"sha": "71b101b4033f356e4f4894747348a2e386111e9b", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 19, "deletions": 16, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a2a13756f325b1dd8ddd54a0a0b24b99180fb82/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=3a2a13756f325b1dd8ddd54a0a0b24b99180fb82", "patch": "@@ -1,4 +1,5 @@\n use std::fmt::Write;\n+use itertools::Itertools;\n \n use hir::{\n     AdtDef, FieldSource, HasSource,\n@@ -9,19 +10,14 @@ use ra_syntax::ast::{self, AstNode};\n use crate::{AssistCtx, Assist, AssistId};\n \n fn is_trivial_arm(arm: &ast::MatchArm) -> bool {\n-    for (i, p) in arm.pats().enumerate() {\n-        if i > 0 {\n-            return false;\n-        }\n-\n-        match p.kind() {\n-            ast::PatKind::PlaceholderPat(_) => {}\n-            _ => {\n-                return false;\n-            }\n-        };\n+    fn single_pattern(arm: &ast::MatchArm) -> Option<ast::PatKind> {\n+        let (pat,) = arm.pats().collect_tuple()?;\n+        Some(pat.kind())\n+    }\n+    match single_pattern(arm) {\n+        Some(ast::PatKind::PlaceholderPat(..)) => true,\n+        _ => false,\n     }\n-    return true;\n }\n \n pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n@@ -32,12 +28,19 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     // by match postfix complete. Trivial match arm is the catch all arm.\n     match match_expr.match_arm_list() {\n         Some(arm_list) => {\n-            for (i, a) in arm_list.arms().enumerate() {\n-                if i > 0 {\n-                    return None;\n+            let mut arm_iter = arm_list.arms();\n+            let first = arm_iter.next();\n+\n+            match first {\n+                // If there arm list is empty or there is only one trivial arm, then proceed.\n+                Some(arm) if is_trivial_arm(arm) => {\n+                    if arm_iter.next() != None {\n+                        return None;\n+                    }\n                 }\n+                None => {}\n \n-                if !is_trivial_arm(a) {\n+                _ => {\n                     return None;\n                 }\n             }"}]}