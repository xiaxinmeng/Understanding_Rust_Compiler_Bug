{"sha": "6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "node_id": "C_kwDOAAsO6NoAKDZjZjM0MDllMTY4NDViZjUyZTcyZjRmZmRhYzlkYjEzOWEyNGE4ZDM", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-21T17:46:20Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-21T17:47:38Z"}, "message": "add/update tests", "tree": {"sha": "ba1582554ebd440ac10b13f0c409675f7d885523", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba1582554ebd440ac10b13f0c409675f7d885523"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "html_url": "https://github.com/rust-lang/rust/commit/6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b9de6b087ffddff6b4e32e070a01799878bc05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9de6b087ffddff6b4e32e070a01799878bc05d", "html_url": "https://github.com/rust-lang/rust/commit/3b9de6b087ffddff6b4e32e070a01799878bc05d"}], "stats": {"total": 187, "additions": 50, "deletions": 137}, "files": [{"sha": "c59d62e576d9b95d55427b04bdd3c8d8d5173f1f", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-try-unify.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.rs?ref=6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "patch": "@@ -0,0 +1,26 @@\n+// build-pass\n+\n+#![feature(generic_const_exprs)]\n+//~^ WARNING the feature `generic_const_exprs` is incomplete\n+\n+trait Generic {\n+    const ASSOC: usize;\n+}\n+\n+impl Generic for u8 {\n+    const ASSOC: usize = 17;\n+}\n+impl Generic for u16 {\n+    const ASSOC: usize = 13;\n+}\n+\n+\n+fn uses_assoc_type<T: Generic, const N: usize>() -> [u8; N + T::ASSOC] {\n+    [0; N + T::ASSOC]\n+}\n+\n+fn only_generic_n<const N: usize>() -> [u8; N + 13] {\n+    uses_assoc_type::<u16, N>()\n+}\n+\n+fn main() {}"}, {"sha": "b5719b3fe1dc29df5868573b9bfff7cdab8c2055", "filename": "src/test/ui/const-generics/generic_const_exprs/eval-try-unify.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fgeneric_const_exprs%2Feval-try-unify.stderr?ref=6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_const_exprs` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/eval-try-unify.rs:3:12\n+   |\n+LL | #![feature(generic_const_exprs)]\n+   |            ^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #76560 <https://github.com/rust-lang/rust/issues/76560> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "67d813819e7a3c010d28bc2ee1bfbc2bf96e5725", "filename": "src/test/ui/const-generics/issues/issue-83765.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.rs?ref=6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "patch": "@@ -3,6 +3,7 @@\n \n trait TensorDimension {\n     const DIM : usize;\n+    //~^ ERROR cycle detected when resolving instance `<LazyUpdim<T, {T::DIM}, DIM>\n     const ISSCALAR : bool = Self::DIM == 0;\n     fn is_scalar(&self) -> bool {Self::ISSCALAR}\n }\n@@ -42,22 +43,16 @@ impl<'a,T : Broadcastable,const DIM : usize> TensorDimension for LazyUpdim<'a,T,\n \n impl<'a,T : Broadcastable,const DIM : usize> TensorSize for LazyUpdim<'a,T,{T::DIM},DIM> {\n     fn size(&self) -> [usize;DIM] {self.size}\n-    //~^ ERROR method not compatible with trait\n }\n \n impl<'a,T : Broadcastable,const DIM : usize>  Broadcastable for LazyUpdim<'a,T,{T::DIM},DIM>\n {\n     type Element = T::Element;\n     fn bget(&self,index:[usize;DIM]) -> Option<Self::Element> {\n-      //~^ ERROR method not compatible with trait\n         assert!(DIM >= T::DIM);\n         if !self.inbounds(index) {return None}\n-        //~^ ERROR unconstrained generic constant\n-        //~| ERROR mismatched types\n         let size = self.size();\n-        //~^ ERROR unconstrained generic constant\n         let newindex : [usize;T::DIM] = Default::default();\n-        //~^ ERROR the trait bound `[usize; _]: Default` is not satisfied\n         self.reference.bget(newindex)\n     }\n }\n@@ -76,20 +71,14 @@ impl<'a,R, T : Broadcastable, F :  Fn(T::Element) -> R  ,\n       const DIM: usize> TensorSize for BMap<'a,R,T,F,DIM> {\n \n     fn size(&self) -> [usize;DIM] {self.reference.size()}\n-    //~^ ERROR unconstrained generic constant\n-    //~| ERROR mismatched types\n-    //~| ERROR method not compatible with trait\n }\n \n impl<'a,R, T : Broadcastable, F :  Fn(T::Element) -> R  ,\n   const DIM: usize> Broadcastable for BMap<'a,R,T,F,DIM> {\n \n     type Element = R;\n     fn bget(&self,index:[usize;DIM]) -> Option<Self::Element> {\n-      //~^ ERROR method not compatible with trait\n         self.reference.bget(index).map(&self.closure)\n-        //~^ ERROR unconstrained generic constant\n-        //~| ERROR mismatched types\n     }\n }\n "}, {"sha": "0003969f7ac2d81007d0290bbb57aca6b1590c54", "filename": "src/test/ui/const-generics/issues/issue-83765.stderr", "status": "modified", "additions": 12, "deletions": 125, "changes": 137, "blob_url": "https://github.com/rust-lang/rust/blob/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6cf3409e16845bf52e72f4ffdac9db139a24a8d3/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-83765.stderr?ref=6cf3409e16845bf52e72f4ffdac9db139a24a8d3", "patch": "@@ -1,130 +1,17 @@\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:44:5\n+error[E0391]: cycle detected when resolving instance `<LazyUpdim<T, {T::DIM}, DIM> as TensorDimension>::DIM`\n+  --> $DIR/issue-83765.rs:5:5\n    |\n-LL |     fn size(&self) -> [usize;DIM] {self.size}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n+LL |     const DIM : usize;\n+   |     ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:51:5\n-   |\n-LL |     fn bget(&self,index:[usize;DIM]) -> Option<Self::Element> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:78:5\n-   |\n-LL |     fn size(&self) -> [usize;DIM] {self.reference.size()}\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/issue-83765.rs:88:5\n-   |\n-LL |     fn bget(&self,index:[usize;DIM]) -> Option<Self::Element> {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:54:18\n-   |\n-LL |         if !self.inbounds(index) {return None}\n-   |                  ^^^^^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::inbounds`\n-  --> $DIR/issue-83765.rs:12:38\n-   |\n-LL |     fn inbounds(&self,index : [usize;Self::DIM]) -> bool {\n-   |                                      ^^^^^^^^^ required by this bound in `TensorSize::inbounds`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:54:27\n-   |\n-LL |         if !self.inbounds(index) {return None}\n-   |                           ^^^^^ expected `Self::DIM`, found `DIM`\n-   |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:57:25\n-   |\n-LL |         let size = self.size();\n-   |                         ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::size`\n-  --> $DIR/issue-83765.rs:11:30\n-   |\n-LL |     fn size(&self) -> [usize;Self::DIM];\n-   |                              ^^^^^^^^^ required by this bound in `TensorSize::size`\n-\n-error[E0277]: the trait bound `[usize; _]: Default` is not satisfied\n-  --> $DIR/issue-83765.rs:59:41\n-   |\n-LL |         let newindex : [usize;T::DIM] = Default::default();\n-   |                                         ^^^^^^^^^^^^^^^^ the trait `Default` is not implemented for `[usize; _]`\n-   |\n-help: consider introducing a `where` bound, but there might be an alternative better way to express this requirement\n-   |\n-LL | impl<'a,T : Broadcastable,const DIM : usize>  Broadcastable for LazyUpdim<'a,T,{T::DIM},DIM> where [usize; _]: Default\n-   |                                                                                              +++++++++++++++++++++++++\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:78:51\n-   |\n-LL |     fn size(&self) -> [usize;DIM] {self.reference.size()}\n-   |                                                   ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `TensorSize::size`\n-  --> $DIR/issue-83765.rs:11:30\n-   |\n-LL |     fn size(&self) -> [usize;Self::DIM];\n-   |                              ^^^^^^^^^ required by this bound in `TensorSize::size`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:78:36\n-   |\n-LL |     fn size(&self) -> [usize;DIM] {self.reference.size()}\n-   |                                    ^^^^^^^^^^^^^^^^^^^^^ expected `DIM`, found `Self::DIM`\n-   |\n-   = note: expected type `DIM`\n-              found type `Self::DIM`\n-\n-error: unconstrained generic constant\n-  --> $DIR/issue-83765.rs:90:24\n-   |\n-LL |         self.reference.bget(index).map(&self.closure)\n-   |                        ^^^^\n-   |\n-   = help: try adding a `where` bound using this expression: `where [(); Self::DIM]:`\n-note: required by a bound in `Broadcastable::bget`\n-  --> $DIR/issue-83765.rs:20:33\n-   |\n-LL |     fn bget(&self, index:[usize;Self::DIM]) -> Option<Self::Element>;\n-   |                                 ^^^^^^^^^ required by this bound in `Broadcastable::bget`\n-\n-error[E0308]: mismatched types\n-  --> $DIR/issue-83765.rs:90:29\n-   |\n-LL |         self.reference.bget(index).map(&self.closure)\n-   |                             ^^^^^ expected `Self::DIM`, found `DIM`\n+note: ...which requires checking if `TensorDimension` fulfills its obligations...\n+  --> $DIR/issue-83765.rs:4:1\n    |\n-   = note: expected type `Self::DIM`\n-              found type `DIM`\n+LL | trait TensorDimension {\n+   | ^^^^^^^^^^^^^^^^^^^^^\n+   = note: ...which again requires resolving instance `<LazyUpdim<T, {T::DIM}, DIM> as TensorDimension>::DIM`, completing the cycle\n+   = note: cycle used when normalizing `<LazyUpdim<T, {T::DIM}, DIM> as TensorDimension>::DIM`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to previous error\n \n-Some errors have detailed explanations: E0277, E0308.\n-For more information about an error, try `rustc --explain E0277`.\n+For more information about this error, try `rustc --explain E0391`."}]}