{"sha": "0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjZGQxOGQwYTdiOWQzYzUyMDE3YjU3ZWVjZGE2ZTE5OGU5NTEyYjE=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-14T13:09:39Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-07-15T09:42:07Z"}, "message": "pprust: Support `macro` macros", "tree": {"sha": "11e861c4e4f4a0eea33d6068dbb2e70ff9e63fd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/11e861c4e4f4a0eea33d6068dbb2e70ff9e63fd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "html_url": "https://github.com/rust-lang/rust/commit/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a2a1cd186481c49d1cde611e4f3f2a707e77eab9", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2a1cd186481c49d1cde611e4f3f2a707e77eab9", "html_url": "https://github.com/rust-lang/rust/commit/a2a1cd186481c49d1cde611e4f3f2a707e77eab9"}], "stats": {"total": 40, "additions": 31, "deletions": 9}, "files": [{"sha": "16e0bace925842eb69eb6d762259f2a1975ed8b0", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 23, "deletions": 8, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "patch": "@@ -20,6 +20,11 @@ use syntax_pos::{DUMMY_SP, FileName, Span};\n \n use std::borrow::Cow;\n \n+pub enum MacHeader<'a> {\n+    Path(&'a ast::Path),\n+    Keyword(&'static str),\n+}\n+\n pub enum AnnNode<'a> {\n     Ident(&'a ast::Ident),\n     Name(&'a ast::Name),\n@@ -620,7 +625,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n             match attr.tokens.trees().next() {\n                 Some(TokenTree::Delimited(_, delim, tts)) => {\n                     self.print_mac_common(\n-                        Some(&attr.path), false, None, delim, tts, true, attr.span\n+                        Some(MacHeader::Path(&attr.path)), false, None, delim, tts, true, attr.span\n                     );\n                 }\n                 tree => {\n@@ -706,7 +711,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n \n     fn print_mac_common(\n         &mut self,\n-        path: Option<&ast::Path>,\n+        header: Option<MacHeader<'_>>,\n         has_bang: bool,\n         ident: Option<ast::Ident>,\n         delim: DelimToken,\n@@ -717,8 +722,10 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n         if delim == DelimToken::Brace {\n             self.cbox(INDENT_UNIT);\n         }\n-        if let Some(path) = path {\n-            self.print_path(path, false, 0);\n+        match header {\n+            Some(MacHeader::Path(path)) => self.print_path(path, false, 0),\n+            Some(MacHeader::Keyword(kw)) => self.word(kw),\n+            None => {}\n         }\n         if has_bang {\n             self.word(\"!\");\n@@ -729,7 +736,7 @@ pub trait PrintState<'a>: std::ops::Deref<Target=pp::Printer> + std::ops::DerefM\n         }\n         match delim {\n             DelimToken::Brace => {\n-                if path.is_some() || has_bang || ident.is_some() {\n+                if header.is_some() || has_bang || ident.is_some() {\n                     self.nbsp();\n                 }\n                 self.word(\"{\");\n@@ -1357,9 +1364,11 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::MacroDef(ref macro_def) => {\n+                let (kw, has_bang) =\n+                    if macro_def.legacy { (\"macro_rules\", true) } else { (\"macro\", false) };\n                 self.print_mac_common(\n-                    Some(&ast::Path::from_ident(ast::Ident::with_empty_ctxt(sym::macro_rules))),\n-                    true,\n+                    Some(MacHeader::Keyword(kw)),\n+                    has_bang,\n                     Some(item.ident),\n                     DelimToken::Brace,\n                     macro_def.stream(),\n@@ -1754,7 +1763,13 @@ impl<'a> State<'a> {\n \n     crate fn print_mac(&mut self, m: &ast::Mac) {\n         self.print_mac_common(\n-            Some(&m.node.path), true, None, m.node.delim.to_token(), m.node.stream(), true, m.span\n+            Some(MacHeader::Path(&m.node.path)),\n+            true,\n+            None,\n+            m.node.delim.to_token(),\n+            m.node.stream(),\n+            true,\n+            m.span,\n         );\n     }\n "}, {"sha": "39677d1dc2da35de91493176b7afbc03e1aca3b1", "filename": "src/test/pretty/macro.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Ftest%2Fpretty%2Fmacro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Ftest%2Fpretty%2Fmacro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fmacro.rs?ref=0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "patch": "@@ -0,0 +1,7 @@\n+// pp-exact\n+\n+#![feature(decl_macro)]\n+\n+macro mac { ($ arg : expr) => { $ arg + $ arg } }\n+\n+fn main() { }"}, {"sha": "570dece023dea363973a3926098d65806834b318", "filename": "src/test/run-make-fulldeps/pretty-expanded-hygiene/input.pp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded-hygiene%2Finput.pp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0cdd18d0a7b9d3c52017b57eecda6e198e9512b1/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded-hygiene%2Finput.pp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make-fulldeps%2Fpretty-expanded-hygiene%2Finput.pp.rs?ref=0cdd18d0a7b9d3c52017b57eecda6e198e9512b1", "patch": "@@ -2,7 +2,7 @@\n #![feature /* 0#0 */(no_core)]\n #![no_core /* 0#0 */]\n \n-macro_rules /* 0#0 */! foo /* 0#0 */ { ($ x : ident) => { y + $ x } }\n+macro_rules! foo /* 0#0 */ { ($ x : ident) => { y + $ x } }\n \n fn bar /* 0#0 */() { let x /* 0#0 */ = 1; y /* 0#1 */ + x /* 0#0 */ }\n "}]}