{"sha": "45c01edaf21f9052eec8d04cb32c7724eb627e03", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzAxZWRhZjIxZjkwNTJlZWM4ZDA0Y2IzMmM3NzI0ZWI2MjdlMDM=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-19T11:31:42Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2020-07-20T17:50:09Z"}, "message": "Use `ReEmpty(U0)` as the implicit region bound in typeck", "tree": {"sha": "9e6f67242cabfac4bdc571a4ba7dfcee26ee63e1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9e6f67242cabfac4bdc571a4ba7dfcee26ee63e1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c01edaf21f9052eec8d04cb32c7724eb627e03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c01edaf21f9052eec8d04cb32c7724eb627e03", "html_url": "https://github.com/rust-lang/rust/commit/45c01edaf21f9052eec8d04cb32c7724eb627e03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c01edaf21f9052eec8d04cb32c7724eb627e03/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0701419e96d94e5493c7ebfcecb66511ab0aa778", "url": "https://api.github.com/repos/rust-lang/rust/commits/0701419e96d94e5493c7ebfcecb66511ab0aa778", "html_url": "https://github.com/rust-lang/rust/commit/0701419e96d94e5493c7ebfcecb66511ab0aa778"}], "stats": {"total": 112, "additions": 102, "deletions": 10}, "files": [{"sha": "6e77aba30506a5ba89c946207752d7be27d7745a", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=45c01edaf21f9052eec8d04cb32c7724eb627e03", "patch": "@@ -256,14 +256,6 @@ pub struct Inherited<'a, 'tcx> {\n     /// opaque type.\n     opaque_types_vars: RefCell<FxHashMap<Ty<'tcx>, Ty<'tcx>>>,\n \n-    /// Each type parameter has an implicit region bound that\n-    /// indicates it must outlive at least the function body (the user\n-    /// may specify stronger requirements). This field indicates the\n-    /// region of the callee. If it is `None`, then the parameter\n-    /// environment is for an item or something where the \"callee\" is\n-    /// not clear.\n-    implicit_region_bound: Option<ty::Region<'tcx>>,\n-\n     body_id: Option<hir::BodyId>,\n }\n \n@@ -684,7 +676,6 @@ impl Inherited<'a, 'tcx> {\n             deferred_generator_interiors: RefCell::new(Vec::new()),\n             opaque_types: RefCell::new(Default::default()),\n             opaque_types_vars: RefCell::new(Default::default()),\n-            implicit_region_bound: None,\n             body_id,\n         }\n     }"}, {"sha": "221e5f72dc977b135d5a263212ecf5094d187285", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=45c01edaf21f9052eec8d04cb32c7724eb627e03", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> RegionCtxt<'a, 'tcx> {\n     fn resolve_regions_and_report_errors(&self, mode: RegionckMode) {\n         self.infcx.process_registered_region_obligations(\n             self.outlives_environment.region_bound_pairs_map(),\n-            self.implicit_region_bound,\n+            Some(self.tcx.lifetimes.re_root_empty),\n             self.param_env,\n         );\n "}, {"sha": "a65c17e0efc3c4bd11cee161dd240f4e3fc09947", "filename": "src/test/ui/regions/type-param-outlives-reempty-issue-74429-2.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429-2.rs?ref=45c01edaf21f9052eec8d04cb32c7724eb627e03", "patch": "@@ -0,0 +1,66 @@\n+// Regression test for #74429, where we didn't think that a type parameter\n+// outlived `ReEmpty`.\n+\n+// check-pass\n+\n+use std::marker::PhantomData;\n+use std::ptr::NonNull;\n+\n+pub unsafe trait RawData {\n+    type Elem;\n+}\n+\n+unsafe impl<A> RawData for OwnedRepr<A> {\n+    type Elem = A;\n+}\n+\n+unsafe impl<'a, A> RawData for ViewRepr<&'a A> {\n+    type Elem = A;\n+}\n+\n+pub struct OwnedRepr<A> {\n+    ptr: PhantomData<A>,\n+}\n+\n+// these Copy impls are not necessary for the repro, but allow the code to compile without error\n+// on 1.44.1\n+#[derive(Copy, Clone)]\n+pub struct ViewRepr<A> {\n+    life: PhantomData<A>,\n+}\n+\n+#[derive(Copy, Clone)]\n+pub struct ArrayBase<S>\n+where\n+    S: RawData,\n+{\n+    ptr: NonNull<S::Elem>,\n+}\n+\n+pub type Array<A> = ArrayBase<OwnedRepr<A>>;\n+\n+pub type ArrayView<'a, A> = ArrayBase<ViewRepr<&'a A>>;\n+\n+impl<A, S> ArrayBase<S>\n+where\n+    S: RawData<Elem = A>,\n+{\n+    pub fn index_axis(&self) -> ArrayView<'_, A> {\n+        unimplemented!()\n+    }\n+\n+    pub fn axis_iter<'a>(&'a self) -> std::iter::Empty<&'a A> {\n+        unimplemented!()\n+    }\n+}\n+\n+pub fn x<T: Copy>(a: Array<T>) {\n+    // drop just avoids a must_use warning\n+    drop((0..1).filter(|_| true));\n+    let y = a.index_axis();\n+    a.axis_iter().for_each(|_| {\n+        drop(y);\n+    });\n+}\n+\n+fn main() {}"}, {"sha": "d463f311c34e95d7743eaf9ac70089fb7e71b543", "filename": "src/test/ui/regions/type-param-outlives-reempty-issue-74429.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c01edaf21f9052eec8d04cb32c7724eb627e03/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fregions%2Ftype-param-outlives-reempty-issue-74429.rs?ref=45c01edaf21f9052eec8d04cb32c7724eb627e03", "patch": "@@ -0,0 +1,35 @@\n+// Regression test for #74429, where we didn't think that a type parameter\n+// outlived `ReEmpty`.\n+\n+// check-pass\n+\n+use std::marker::PhantomData;\n+\n+fn apply<T, F: FnOnce(T)>(_: T, _: F) {}\n+\n+#[derive(Clone, Copy)]\n+struct Invariant<T> {\n+    t: T,\n+    p: PhantomData<fn(T) -> T>,\n+}\n+\n+fn verify_reempty<T>(x: T) {\n+    // r is inferred to have type `Invariant<&ReEmpty(U0) T>`\n+    let r = Invariant { t: &x, p: PhantomData };\n+    // Creates a new universe, all variables from now on are in `U1`, say.\n+    let _: fn(&()) = |_| {};\n+    // Closure parameter is of type `&ReEmpty(U1) T`, so the closure has an implied\n+    // bound of `T: ReEmpty(U1)`\n+    apply(&x, |_| {\n+        // Requires `typeof(r)` is well-formed, i.e. `T: ReEmpty(U0)`. If we\n+        // only have the implied bound from the closure parameter to use this\n+        // requires `ReEmpty(U1): ReEmpty(U0)`, which isn't true so we reported\n+        // an error.\n+        //\n+        // This doesn't happen any more because we ensure that `T: ReEmpty(U0)`\n+        // is an implicit bound for all type parameters.\n+        drop(r);\n+    });\n+}\n+\n+fn main() {}"}]}