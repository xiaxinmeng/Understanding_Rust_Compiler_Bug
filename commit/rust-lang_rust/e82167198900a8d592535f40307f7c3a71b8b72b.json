{"sha": "e82167198900a8d592535f40307f7c3a71b8b72b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4MjE2NzE5ODkwMGE4ZDU5MjUzNWY0MDMwN2Y3YzNhNzFiOGI3MmI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-19T18:40:34Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-03-19T18:40:34Z"}, "message": "Refactor trans_call to separate out the translation of the arguments, environment, and return pointer", "tree": {"sha": "6cb1a4608cf5c075babedeec75e6aa42d58263d3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cb1a4608cf5c075babedeec75e6aa42d58263d3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e82167198900a8d592535f40307f7c3a71b8b72b", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e82167198900a8d592535f40307f7c3a71b8b72b", "html_url": "https://github.com/rust-lang/rust/commit/e82167198900a8d592535f40307f7c3a71b8b72b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e82167198900a8d592535f40307f7c3a71b8b72b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e67448d397ed8f468170d6fba95ceae081ece624", "url": "https://api.github.com/repos/rust-lang/rust/commits/e67448d397ed8f468170d6fba95ceae081ece624", "html_url": "https://github.com/rust-lang/rust/commit/e67448d397ed8f468170d6fba95ceae081ece624"}], "stats": {"total": 60, "additions": 26, "deletions": 34}, "files": [{"sha": "ccea8453c4f8acce5b2b369cc3f42d840a30bf65", "filename": "src/librustc/middle/trans/callee.rs", "status": "modified", "additions": 26, "deletions": 34, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/e82167198900a8d592535f40307f7c3a71b8b72b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e82167198900a8d592535f40307f7c3a71b8b72b/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcallee.rs?ref=e82167198900a8d592535f40307f7c3a71b8b72b", "patch": "@@ -491,12 +491,14 @@ pub fn trans_call_inner(\n             }\n         };\n \n-        let args_res = trans_args(bcx, llenv, args, fn_expr_ty,\n-                                  dest, ret_flag, autoref_arg);\n-        bcx = args_res.bcx;\n-        let mut llargs = /*bad*/copy args_res.args;\n+        let llretslot = trans_ret_slot(bcx, fn_expr_ty, dest);\n+\n+        let mut llargs = ~[];\n+        llargs.push(llretslot);\n+        llargs.push(llenv);\n+        bcx = trans_args(bcx, args, fn_expr_ty,\n+                         ret_flag, autoref_arg, &mut llargs);\n \n-        let llretslot = args_res.retslot;\n \n         // Now that the arguments have finished evaluating, we need to revoke\n         // the cleanup for the self argument, if it exists\n@@ -554,30 +556,12 @@ pub enum CallArgs {\n     ArgVals(&'self [ValueRef])\n }\n \n-pub struct Args {\n-    bcx: block,\n-    args: ~[ValueRef],\n-    retslot: ValueRef\n-}\n-\n-pub fn trans_args(cx: block,\n-                  llenv: ValueRef,\n-                  +args: CallArgs,\n-                  fn_ty: ty::t,\n-                  dest: expr::Dest,\n-                  ret_flag: Option<ValueRef>,\n-                  +autoref_arg: AutorefArg) -> Args {\n-    let _icx = cx.insn_ctxt(\"trans_args\");\n-    let mut temp_cleanups = ~[];\n-    let arg_tys = ty::ty_fn_args(fn_ty);\n-    let mut llargs: ~[ValueRef] = ~[];\n-\n-    let mut bcx = cx;\n-\n+pub fn trans_ret_slot(+bcx: block,\n+                      +fn_ty: ty::t,\n+                      +dest: expr::Dest) -> ValueRef\n+{\n     let retty = ty::ty_fn_ret(fn_ty);\n-\n-    // Arg 0: Output pointer.\n-    let llretslot = match dest {\n+    match dest {\n         expr::SaveIn(dst) => dst,\n         expr::Ignore => {\n             if ty::type_is_nil(retty) {\n@@ -588,13 +572,21 @@ pub fn trans_args(cx: block,\n                 alloc_ty(bcx, retty)\n             }\n         }\n-    };\n-    llargs.push(llretslot);\n+    }\n+}\n \n-    // Arg 1: Env (closure-bindings / self value)\n-    llargs.push(llenv);\n+pub fn trans_args(+cx: block,\n+                  +args: CallArgs,\n+                  +fn_ty: ty::t,\n+                  +ret_flag: Option<ValueRef>,\n+                  +autoref_arg: AutorefArg,\n+                  +llargs: &mut ~[ValueRef]) -> block\n+{\n+    let _icx = cx.insn_ctxt(\"trans_args\");\n+    let mut temp_cleanups = ~[];\n+    let arg_tys = ty::ty_fn_args(fn_ty);\n \n-    // ... then explicit args.\n+    let mut bcx = cx;\n \n     // First we figure out the caller's view of the types of the arguments.\n     // This will be needed if this is a generic call, because the callee has\n@@ -623,7 +615,7 @@ pub fn trans_args(cx: block,\n         revoke_clean(bcx, *c)\n     }\n \n-    Args { bcx: bcx, args: llargs, retslot: llretslot }\n+    return bcx;\n }\n \n pub enum AutorefArg {"}]}