{"sha": "fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjOTVlMjgyN2JiYmUyNDFiZmJjN2ZhYmZkNWNiNjc4ZDhlZDFjMzA=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-08-05T23:24:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-08-05T23:24:38Z"}, "message": "Merge pull request #1855 from topecongiro/inner-outer-attrs\n\nFormat inner attributes in match expr", "tree": {"sha": "b1d7fc61ec7ce24f6c84f494f722ac3fe0c84ed1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1d7fc61ec7ce24f6c84f494f722ac3fe0c84ed1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "html_url": "https://github.com/rust-lang/rust/commit/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "41df87ec4420479460c68de15256e321bbe082b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/41df87ec4420479460c68de15256e321bbe082b5", "html_url": "https://github.com/rust-lang/rust/commit/41df87ec4420479460c68de15256e321bbe082b5"}, {"sha": "6f24c646738d448ceff366e610f8fd3cb7f1c04a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6f24c646738d448ceff366e610f8fd3cb7f1c04a", "html_url": "https://github.com/rust-lang/rust/commit/6f24c646738d448ceff366e610f8fd3cb7f1c04a"}], "stats": {"total": 172, "additions": 114, "deletions": 58}, "files": [{"sha": "f56f3f8779ed4c672f9b2f849596eafa4cc6a7e8", "filename": "src/expr.rs", "status": "modified", "additions": 45, "deletions": 16, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -31,8 +31,9 @@ use rewrite::{Rewrite, RewriteContext};\n use string::{rewrite_string, StringFormat};\n use types::{can_be_overflowed_type, rewrite_path, PathContext};\n use utils::{binary_search, colon_spaces, contains_skip, extra_offset, first_line_width,\n-            last_line_extendable, last_line_width, left_most_sub_expr, mk_sp, paren_overhead,\n-            semicolon_for_stmt, stmt_expr, trimmed_last_line_width, wrap_str};\n+            inner_attributes, last_line_extendable, last_line_width, left_most_sub_expr, mk_sp,\n+            outer_attributes, paren_overhead, semicolon_for_stmt, stmt_expr,\n+            trimmed_last_line_width, wrap_str};\n use vertical::rewrite_with_alignment;\n use visitor::FmtVisitor;\n \n@@ -54,15 +55,13 @@ fn combine_attr_and_expr(\n     expr: &ast::Expr,\n     expr_str: &str,\n ) -> Option<String> {\n-    let attr_str = try_opt!((&*expr.attrs).rewrite(context, shape));\n+    let attrs = outer_attributes(&expr.attrs);\n+    let attr_str = try_opt!(attrs.rewrite(context, shape));\n     let separator = if attr_str.is_empty() {\n         String::new()\n     } else {\n         // Try to recover comments between the attributes and the expression if available.\n-        let missing_snippet = context.snippet(mk_sp(\n-            expr.attrs[expr.attrs.len() - 1].span.hi,\n-            expr.span.lo,\n-        ));\n+        let missing_snippet = context.snippet(mk_sp(attrs[attrs.len() - 1].span.hi, expr.span.lo));\n         let comment_opening_pos = missing_snippet.chars().position(|c| c == '/');\n         let prefer_same_line = if let Some(pos) = comment_opening_pos {\n             !missing_snippet[..pos].contains('\\n')\n@@ -198,7 +197,7 @@ pub fn format_expr(\n             }\n         }\n         ast::ExprKind::Match(ref cond, ref arms) => {\n-            rewrite_match(context, cond, arms, shape, expr.span)\n+            rewrite_match(context, cond, arms, shape, expr.span, &expr.attrs)\n         }\n         ast::ExprKind::Path(ref qself, ref path) => {\n             rewrite_path(context, PathContext::Expr, qself.as_ref(), path, shape)\n@@ -1531,6 +1530,7 @@ fn rewrite_match(\n     arms: &[ast::Arm],\n     shape: Shape,\n     span: Span,\n+    attrs: &[ast::Attribute],\n ) -> Option<String> {\n     if arms.is_empty() {\n         return None;\n@@ -1558,11 +1558,42 @@ fn rewrite_match(\n         _ => \" \",\n     };\n \n+    let nested_indent_str = shape\n+        .indent\n+        .block_indent(context.config)\n+        .to_string(context.config);\n+    // Inner attributes.\n+    let inner_attrs = &inner_attributes(attrs);\n+    let inner_attrs_str = if inner_attrs.is_empty() {\n+        String::new()\n+    } else {\n+        try_opt!(\n+            inner_attrs\n+                .rewrite(context, shape)\n+                .map(|s| format!(\"\\n{}{}\", nested_indent_str, s))\n+        )\n+    };\n+\n+    let open_brace_pos = if inner_attrs.is_empty() {\n+        context\n+            .codemap\n+            .span_after(mk_sp(cond.span.hi, arms[0].span().lo), \"{\")\n+    } else {\n+        inner_attrs[inner_attrs.len() - 1].span().hi\n+    };\n+\n     Some(format!(\n-        \"match {}{}{{{}\\n{}}}\",\n+        \"match {}{}{{{}{}\\n{}}}\",\n         cond_str,\n         block_sep,\n-        try_opt!(rewrite_match_arms(context, arms, shape, span, cond.span.hi)),\n+        inner_attrs_str,\n+        try_opt!(rewrite_match_arms(\n+            context,\n+            arms,\n+            shape,\n+            span,\n+            open_brace_pos,\n+        )),\n         shape.indent.to_string(context.config),\n     ))\n }\n@@ -1586,7 +1617,7 @@ fn rewrite_match_arms(\n     arms: &[ast::Arm],\n     shape: Shape,\n     span: Span,\n-    cond_end_pos: BytePos,\n+    open_brace_pos: BytePos,\n ) -> Option<String> {\n     let mut result = String::new();\n \n@@ -1597,10 +1628,6 @@ fn rewrite_match_arms(\n     }.with_max_width(context.config);\n     let arm_indent_str = arm_shape.indent.to_string(context.config);\n \n-    let open_brace_pos = context\n-        .codemap\n-        .span_after(mk_sp(cond_end_pos, arms[0].span().lo), \"{\");\n-\n     let arm_num = arms.len();\n     for (i, arm) in arms.iter().enumerate() {\n         // Make sure we get the stuff between arms.\n@@ -1615,7 +1642,9 @@ fn rewrite_match_arms(\n             arm_shape,\n             &arm_indent_str,\n         ));\n-        result.push_str(&comment);\n+        if !comment.chars().all(|c| c == ' ') {\n+            result.push_str(&comment);\n+        }\n         result.push('\\n');\n         result.push_str(&arm_indent_str);\n "}, {"sha": "e1017fab9596ea51e4e8afd6758dcac840d44e91", "filename": "src/lib.rs", "status": "modified", "additions": 29, "deletions": 24, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -46,7 +46,7 @@ use checkstyle::{output_footer, output_header};\n use config::Config;\n use filemap::FileMap;\n use issues::{BadIssueSeeker, Issue};\n-use utils::mk_sp;\n+use utils::{mk_sp, outer_attributes};\n use visitor::FmtVisitor;\n \n pub use self::summary::Summary;\n@@ -81,13 +81,33 @@ pub trait Spanned {\n     fn span(&self) -> Span;\n }\n \n+macro_rules! span_with_attrs_lo_hi {\n+    ($this:ident, $lo:expr, $hi:expr) => {\n+        {\n+            let attrs = outer_attributes(&$this.attrs);\n+            if attrs.is_empty() {\n+                mk_sp($lo, $hi)\n+            } else {\n+                mk_sp(attrs[0].span.lo, $hi)\n+            }\n+        }\n+    }\n+}\n+macro_rules! span_with_attrs {\n+    ($this:ident) => {\n+        span_with_attrs_lo_hi!($this, $this.span.lo, $this.span.hi)\n+    }\n+}\n+\n impl Spanned for ast::Expr {\n     fn span(&self) -> Span {\n-        if self.attrs.is_empty() {\n-            self.span\n-        } else {\n-            mk_sp(self.attrs[0].span.lo, self.span.hi)\n-        }\n+        span_with_attrs!(self)\n+    }\n+}\n+\n+impl Spanned for ast::Item {\n+    fn span(&self) -> Span {\n+        span_with_attrs!(self)\n     }\n }\n \n@@ -117,12 +137,7 @@ impl Spanned for ast::Ty {\n \n impl Spanned for ast::Arm {\n     fn span(&self) -> Span {\n-        let hi = self.body.span.hi;\n-        if self.attrs.is_empty() {\n-            mk_sp(self.pats[0].span.lo, hi)\n-        } else {\n-            mk_sp(self.attrs[0].span.lo, hi)\n-        }\n+        span_with_attrs_lo_hi!(self, self.pats[0].span.lo, self.body.span.hi)\n     }\n }\n \n@@ -138,23 +153,13 @@ impl Spanned for ast::Arg {\n \n impl Spanned for ast::StructField {\n     fn span(&self) -> Span {\n-        if self.attrs.is_empty() {\n-            mk_sp(self.span.lo, self.ty.span.hi)\n-        } else {\n-            // Include attributes and doc comments, if present\n-            mk_sp(self.attrs[0].span.lo, self.ty.span.hi)\n-        }\n+        span_with_attrs_lo_hi!(self, self.span.lo, self.ty.span.hi)\n     }\n }\n \n impl Spanned for ast::Field {\n     fn span(&self) -> Span {\n-        let lo = if self.attrs.is_empty() {\n-            self.span.lo\n-        } else {\n-            self.attrs[0].span.lo\n-        };\n-        mk_sp(lo, self.span.hi)\n+        span_with_attrs!(self)\n     }\n }\n "}, {"sha": "c0861b8da20ab9eccd7e4589c5dfa5df3f9ba9ad", "filename": "src/utils.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -97,6 +97,25 @@ pub fn format_abi(abi: abi::Abi, explicit_abi: bool) -> String {\n     }\n }\n \n+#[inline]\n+pub fn filter_attributes(attrs: &[ast::Attribute], style: ast::AttrStyle) -> Vec<ast::Attribute> {\n+    attrs\n+        .iter()\n+        .filter(|a| a.style == style)\n+        .cloned()\n+        .collect::<Vec<_>>()\n+}\n+\n+#[inline]\n+pub fn inner_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n+    filter_attributes(attrs, ast::AttrStyle::Inner)\n+}\n+\n+#[inline]\n+pub fn outer_attributes(attrs: &[ast::Attribute]) -> Vec<ast::Attribute> {\n+    filter_attributes(attrs, ast::AttrStyle::Outer)\n+}\n+\n // The width of the first line in s.\n #[inline]\n pub fn first_line_width(s: &str) -> usize {"}, {"sha": "ef0ff1d52db846f97c4f0b2e4dfe78f9211eaa46", "filename": "src/visitor.rs", "status": "modified", "additions": 5, "deletions": 18, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -15,7 +15,7 @@ use syntax::{ast, ptr, visit};\n use syntax::codemap::{self, BytePos, CodeMap, Span};\n use syntax::parse::ParseSess;\n \n-use {Indent, Shape};\n+use {Indent, Shape, Spanned};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::{contains_comment, FindUncommented};\n use comment::rewrite_comment;\n@@ -36,19 +36,6 @@ fn is_use_item(item: &ast::Item) -> bool {\n     }\n }\n \n-fn item_bound(item: &ast::Item) -> Span {\n-    item.attrs.iter().map(|attr| attr.span).fold(\n-        item.span,\n-        |bound, span| {\n-            Span {\n-                lo: cmp::min(bound.lo, span.lo),\n-                hi: cmp::max(bound.hi, span.hi),\n-                ctxt: span.ctxt,\n-            }\n-        },\n-    )\n-}\n-\n pub struct FmtVisitor<'a> {\n     pub parse_session: &'a ParseSess,\n     pub codemap: &'a CodeMap,\n@@ -93,7 +80,7 @@ impl<'a> FmtVisitor<'a> {\n                 let span = if expr.attrs.is_empty() {\n                     stmt.span\n                 } else {\n-                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                    mk_sp(expr.span().lo, stmt.span.hi)\n                 };\n                 self.push_rewrite(span, rewrite)\n             }\n@@ -105,7 +92,7 @@ impl<'a> FmtVisitor<'a> {\n                 let span = if expr.attrs.is_empty() {\n                     stmt.span\n                 } else {\n-                    mk_sp(expr.attrs[0].span.lo, stmt.span.hi)\n+                    mk_sp(expr.span().lo, stmt.span.hi)\n                 };\n                 self.push_rewrite(span, rewrite)\n             }\n@@ -648,12 +635,12 @@ impl<'a> FmtVisitor<'a> {\n             // next item for output.\n             if self.config.reorder_imports() && is_use_item(&*items_left[0]) {\n                 let reorder_imports_in_group = self.config.reorder_imports_in_group();\n-                let mut last = self.codemap.lookup_line_range(item_bound(&items_left[0]));\n+                let mut last = self.codemap.lookup_line_range(items_left[0].span());\n                 let use_item_length = items_left\n                     .iter()\n                     .take_while(|ppi| {\n                         is_use_item(&***ppi) && (!reorder_imports_in_group || {\n-                            let current = self.codemap.lookup_line_range(item_bound(&ppi));\n+                            let current = self.codemap.lookup_line_range(ppi.span());\n                             let in_same_group = current.lo < last.hi + 2;\n                             last = current;\n                             in_same_group"}, {"sha": "2087e887882cf712ed308f7409d8167504eca0f0", "filename": "tests/source/match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/tests%2Fsource%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/tests%2Fsource%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fmatch.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -408,3 +408,11 @@ fn match_with_near_max_width() {\n         {}\n     }\n }\n+\n+fn match_with_trailing_spaces() {\n+    match x {    \n+        #![allow(simple_match)]\n+        Some(..) => 0,\n+        None => 1,\n+    }\n+}"}, {"sha": "219c6fdea13fc973c947c5e533c50a917dcb2081", "filename": "tests/target/match.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=fc95e2827bbbe241bfbc7fabfd5cb678d8ed1c30", "patch": "@@ -450,3 +450,11 @@ fn match_with_near_max_width() {\n         Variant::Tag6 => {}\n     }\n }\n+\n+fn match_with_trailing_spaces() {\n+    match x {\n+        #![allow(simple_match)]\n+        Some(..) => 0,\n+        None => 1,\n+    }\n+}"}]}