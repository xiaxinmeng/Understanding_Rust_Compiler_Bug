{"sha": "3b9de6b087ffddff6b4e32e070a01799878bc05d", "node_id": "C_kwDOAAsO6NoAKDNiOWRlNmIwODdmZmRkZmY2YjRlMzJlMDcwYTAxNzk5ODc4YmMwNWQ", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-21T17:26:53Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2022-03-21T17:47:38Z"}, "message": "dont try to unify unevaluated constants that contain infer vars", "tree": {"sha": "e52ed43274e5a01d36f8a9d9c9710d77ed46ac4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e52ed43274e5a01d36f8a9d9c9710d77ed46ac4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b9de6b087ffddff6b4e32e070a01799878bc05d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b9de6b087ffddff6b4e32e070a01799878bc05d", "html_url": "https://github.com/rust-lang/rust/commit/3b9de6b087ffddff6b4e32e070a01799878bc05d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b9de6b087ffddff6b4e32e070a01799878bc05d/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac0458a597674a4afc01a11b97b6b6385727050d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac0458a597674a4afc01a11b97b6b6385727050d", "html_url": "https://github.com/rust-lang/rust/commit/ac0458a597674a4afc01a11b97b6b6385727050d"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "e7fd7d2928e530721863b08325a0931bfd14a45d", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3b9de6b087ffddff6b4e32e070a01799878bc05d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b9de6b087ffddff6b4e32e070a01799878bc05d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=3b9de6b087ffddff6b4e32e070a01799878bc05d", "patch": "@@ -687,14 +687,23 @@ pub struct CombinedSnapshot<'a, 'tcx> {\n impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     /// calls `tcx.try_unify_abstract_consts` after\n     /// canonicalizing the consts.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn try_unify_abstract_consts(\n         &self,\n         a: ty::Unevaluated<'tcx, ()>,\n         b: ty::Unevaluated<'tcx, ()>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> bool {\n+        // Reject any attempt to unify two unevaluated constants that contain inference\n+        // variables.\n+        // FIXME `TyCtxt::const_eval_resolve` already rejects the resolution of those\n+        // constants early, but the canonicalization below messes with that mechanism.\n+        if a.substs.has_infer_types_or_consts() || b.substs.has_infer_types_or_consts() {\n+            debug!(\"a or b contain infer vars in its substs -> cannot unify\");\n+            return false;\n+        }\n+\n         let canonical = self.canonicalize_query((a, b), &mut OriginalQueryValues::default());\n-        debug!(\"canonical consts: {:?}\", &canonical.value);\n \n         self.tcx.try_unify_abstract_consts(param_env.and(canonical.value))\n     }\n@@ -1599,22 +1608,27 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n     ///\n     /// This handles inferences variables within both `param_env` and `substs` by\n     /// performing the operation on their respective canonical forms.\n+    #[instrument(skip(self), level = \"debug\")]\n     pub fn const_eval_resolve(\n         &self,\n         param_env: ty::ParamEnv<'tcx>,\n         unevaluated: ty::Unevaluated<'tcx>,\n         span: Option<Span>,\n     ) -> EvalToConstValueResult<'tcx> {\n         let substs = self.resolve_vars_if_possible(unevaluated.substs);\n+        debug!(?substs);\n \n         // Postpone the evaluation of constants whose substs depend on inference\n         // variables\n         if substs.has_infer_types_or_consts() {\n+            debug!(\"has infer types or consts\");\n             return Err(ErrorHandled::TooGeneric);\n         }\n \n         let param_env_erased = self.tcx.erase_regions(param_env);\n         let substs_erased = self.tcx.erase_regions(substs);\n+        debug!(?param_env_erased);\n+        debug!(?substs_erased);\n \n         let unevaluated = ty::Unevaluated {\n             def: unevaluated.def,"}]}