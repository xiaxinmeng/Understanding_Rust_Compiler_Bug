{"sha": "f3054ce18ca747b8354137f07230bd2251d7985c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzMDU0Y2UxOGNhNzQ3YjgzNTQxMzdmMDcyMzBiZDIyNTFkNzk4NWM=", "commit": {"author": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-09T21:20:59Z"}, "committer": {"name": "Jonathan Turner", "email": "jturner@mozilla.com", "date": "2016-05-12T23:39:19Z"}, "message": "Set of fixes to improve borrowcks that weren't updated", "tree": {"sha": "5c27ec18f1ed2fad822aa48c0629b42681c68c61", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c27ec18f1ed2fad822aa48c0629b42681c68c61"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3054ce18ca747b8354137f07230bd2251d7985c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3054ce18ca747b8354137f07230bd2251d7985c", "html_url": "https://github.com/rust-lang/rust/commit/f3054ce18ca747b8354137f07230bd2251d7985c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3054ce18ca747b8354137f07230bd2251d7985c/comments", "author": null, "committer": null, "parents": [{"sha": "e37f8593e42335829e98fed27b8ececbad61a05d", "url": "https://api.github.com/repos/rust-lang/rust/commits/e37f8593e42335829e98fed27b8ececbad61a05d", "html_url": "https://github.com/rust-lang/rust/commit/e37f8593e42335829e98fed27b8ececbad61a05d"}], "stats": {"total": 63, "additions": 47, "deletions": 16}, "files": [{"sha": "c0c3d5ecd0abf8740e19a058994a851715bb4ae3", "filename": "src/librustc_borrowck/borrowck/check_loans.rs", "status": "modified", "additions": 28, "deletions": 9, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fcheck_loans.rs?ref=f3054ce18ca747b8354137f07230bd2251d7985c", "patch": "@@ -663,23 +663,39 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n             UseOk => { }\n             UseWhileBorrowed(loan_path, loan_span) => {\n                 let mut err = match move_kind {\n-                    move_data::Captured =>\n+                    move_data::Captured => {\n                         struct_span_err!(self.bccx, span, E0504,\n                                          \"cannot move `{}` into closure because it is borrowed\",\n-                                         &self.bccx.loan_path_to_string(move_path)),\n+                                         &self.bccx.loan_path_to_string(move_path))\n+                        .span_label(\n+                            loan_span,\n+                            &format!(\"borrow of `{}` occurs here\",\n+                                    &self.bccx.loan_path_to_string(&loan_path))\n+                            )\n+                        .span_label(\n+                            span,\n+                            &format!(\"move into closure occurs here\")\n+                            )\n+                    }\n                     move_data::Declared |\n                     move_data::MoveExpr |\n-                    move_data::MovePat =>\n+                    move_data::MovePat => {\n                         struct_span_err!(self.bccx, span, E0505,\n                                          \"cannot move out of `{}` because it is borrowed\",\n                                          &self.bccx.loan_path_to_string(move_path))\n+                        .span_label(\n+                            loan_span,\n+                            &format!(\"borrow of `{}` occurs here\",\n+                                    &self.bccx.loan_path_to_string(&loan_path))\n+                            )\n+                        .span_label(\n+                            span,\n+                            &format!(\"move out of `{}` occurs here\",\n+                                &self.bccx.loan_path_to_string(move_path))\n+                            )\n+                    }\n                 };\n \n-                err.span_note(\n-                    loan_span,\n-                    &format!(\"borrow of `{}` occurs here\",\n-                            &self.bccx.loan_path_to_string(&loan_path))\n-                    );\n                 err.emit();\n             }\n         }\n@@ -845,9 +861,12 @@ impl<'a, 'tcx> CheckLoanCtxt<'a, 'tcx> {\n         struct_span_err!(self.bccx, span, E0506,\n                          \"cannot assign to `{}` because it is borrowed\",\n                          self.bccx.loan_path_to_string(loan_path))\n-            .span_note(loan.span,\n+            .span_label(loan.span,\n                        &format!(\"borrow of `{}` occurs here\",\n                                self.bccx.loan_path_to_string(loan_path)))\n+            .span_label(span,\n+                       &format!(\"assignment to `{}` occurs here\",\n+                               self.bccx.loan_path_to_string(loan_path)))\n             .emit();\n     }\n }"}, {"sha": "0f2381f1ff916d063e0d016f9fc850648dd25289", "filename": "src/librustc_borrowck/borrowck/gather_loans/move_error.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fgather_loans%2Fmove_error.rs?ref=f3054ce18ca747b8354137f07230bd2251d7985c", "patch": "@@ -72,7 +72,7 @@ fn report_move_errors<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n         let mut err = report_cannot_move_out_of(bccx, error.move_from.clone());\n         let mut is_first_note = true;\n         for move_to in &error.move_to_places {\n-            note_move_destination(&mut err, move_to.span,\n+            err = note_move_destination(err, move_to.span,\n                                   move_to.name, is_first_note);\n             is_first_note = false;\n         }\n@@ -124,6 +124,10 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n             struct_span_err!(bccx, move_from.span, E0507,\n                              \"cannot move out of {}\",\n                              move_from.descriptive_string(bccx.tcx))\n+            .span_label(\n+                move_from.span,\n+                &format!(\"move occurs here\")\n+                )\n         }\n \n         Categorization::Interior(ref b, mc::InteriorElement(Kind::Index, _)) => {\n@@ -159,22 +163,24 @@ fn report_cannot_move_out_of<'a, 'tcx>(bccx: &BorrowckCtxt<'a, 'tcx>,\n     }\n }\n \n-fn note_move_destination(err: &mut DiagnosticBuilder,\n+fn note_move_destination(mut err: DiagnosticBuilder,\n                          move_to_span: codemap::Span,\n                          pat_name: ast::Name,\n-                         is_first_note: bool) {\n+                         is_first_note: bool) -> DiagnosticBuilder {\n     if is_first_note {\n-        err.span_note(\n+        err = err.span_label(\n             move_to_span,\n-            \"attempting to move value to here\");\n+            &format!(\"attempting to move value to here\"));\n         err.help(\n             &format!(\"to prevent the move, \\\n                       use `ref {0}` or `ref mut {0}` to capture value by \\\n                       reference\",\n                      pat_name));\n+        err\n     } else {\n         err.span_note(move_to_span,\n                       &format!(\"and here (use `ref {0}` or `ref mut {0}`)\",\n                                pat_name));\n+        err\n     }\n }"}, {"sha": "e5fb08b36bf7e59c8d61601ef3bc07f5b9ed69f9", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=f3054ce18ca747b8354137f07230bd2251d7985c", "patch": "@@ -620,11 +620,13 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n         }\n \n         // General fallback.\n+        let span = err.span.clone();\n         let mut db = self.struct_span_err(\n             err.span,\n             &self.bckerr_to_string(&err));\n         self.note_and_explain_bckerr(&mut db, err);\n-        db.emit();\n+        db.span_label(span, &format!(\"cannot borrow\"))\n+          .emit();\n     }\n \n     pub fn report_use_of_moved_value(&self,\n@@ -647,7 +649,10 @@ impl<'a, 'tcx> BorrowckCtxt<'a, 'tcx> {\n                     self.tcx.sess, use_span, E0381,\n                     \"{} of possibly uninitialized variable: `{}`\",\n                     verb,\n-                    self.loan_path_to_string(lp)).emit();\n+                    self.loan_path_to_string(lp))\n+                .span_label(use_span, &format!(\"use of possibly uninitialized `{}`\",\n+                    self.loan_path_to_string(lp)))\n+                .emit();\n                 return;\n             }\n             _ => {"}, {"sha": "4070a666ef6c1858896ce5adebf4cdaf4acaa82e", "filename": "src/libsyntax/errors/snippet/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3054ce18ca747b8354137f07230bd2251d7985c/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ferrors%2Fsnippet%2Fmod.rs?ref=f3054ce18ca747b8354137f07230bd2251d7985c", "patch": "@@ -612,6 +612,7 @@ impl FileInfo {\n                         styled_buffer.set_style(0, p, Style::UnderlinePrimary);\n                     } else {\n                         styled_buffer.putc(1, p, '-', Style::UnderlineSecondary);\n+                        styled_buffer.set_style(0, p, Style::UnderlineSecondary);\n                     }\n                 }\n             }"}]}