{"sha": "517385b31b0add8487ff3cc27e216cf3f867ab44", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUxNzM4NWIzMWIwYWRkODQ4N2ZmM2NjMjdlMjE2Y2YzZjg2N2FiNDQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T01:38:00Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-07-29T01:38:00Z"}, "message": "Auto merge of #74894 - JohnTitor:rollup-4ine62a, r=JohnTitor\n\nRollup of 8 pull requests\n\nSuccessful merges:\n\n - #74266 (Clean up E0720 explanation)\n - #74671 (add const generics array coercion test)\n - #74707 (Add str::[r]split_once)\n - #74814 (Fix RefUnwindSafe & UnwinsSafe impls for lazy::SyncLazy)\n - #74859 (Update outdated readme)\n - #74864 (ayu theme: Change doccomment color to `#a1ac88`)\n - #74872 (Enable to ping RISC-V group via triagebot)\n - #74891 (handle ConstEquate in rustdoc)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "a3b2ffa82eed0cbcac59f3e63d19ce48011c28d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3b2ffa82eed0cbcac59f3e63d19ce48011c28d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/517385b31b0add8487ff3cc27e216cf3f867ab44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/517385b31b0add8487ff3cc27e216cf3f867ab44", "html_url": "https://github.com/rust-lang/rust/commit/517385b31b0add8487ff3cc27e216cf3f867ab44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/517385b31b0add8487ff3cc27e216cf3f867ab44/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cca9505ea9faab261c2769032101cda6a04c212", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cca9505ea9faab261c2769032101cda6a04c212", "html_url": "https://github.com/rust-lang/rust/commit/4cca9505ea9faab261c2769032101cda6a04c212"}, {"sha": "2b4ae49f2ead270663e2b3644ba5669301f40338", "url": "https://api.github.com/repos/rust-lang/rust/commits/2b4ae49f2ead270663e2b3644ba5669301f40338", "html_url": "https://github.com/rust-lang/rust/commit/2b4ae49f2ead270663e2b3644ba5669301f40338"}], "stats": {"total": 157, "additions": 149, "deletions": 8}, "files": [{"sha": "fa20a46671591f4aef2c91dc1735ffc533d5a058", "filename": "library/alloc/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Falloc%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Falloc%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Flib.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -6,6 +6,7 @@\n #![feature(map_first_last)]\n #![feature(new_uninit)]\n #![feature(pattern)]\n+#![feature(str_split_once)]\n #![feature(trusted_len)]\n #![feature(try_reserve)]\n #![feature(unboxed_closures)]"}, {"sha": "b20cf076aca3cac5dacea42cfc143ea5525b93fd", "filename": "library/alloc/tests/str.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Falloc%2Ftests%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Falloc%2Ftests%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fstr.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -1318,6 +1318,30 @@ fn test_rsplitn() {\n     assert_eq!(split, [\"mb\\n\", \"\\nM\u00e4ry h\u00e4d \u00e4 little l\u00e4mb\\nLittle l\"]);\n }\n \n+#[test]\n+fn test_split_once() {\n+    assert_eq!(\"\".split_once(\"->\"), None);\n+    assert_eq!(\"-\".split_once(\"->\"), None);\n+    assert_eq!(\"->\".split_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".split_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".split_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".split_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".split_once(\"->\"), Some((\"a\", \"b->c\")));\n+    assert_eq!(\"---\".split_once(\"--\"), Some((\"\", \"-\")));\n+}\n+\n+#[test]\n+fn test_rsplit_once() {\n+    assert_eq!(\"\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"-\".rsplit_once(\"->\"), None);\n+    assert_eq!(\"->\".rsplit_once(\"->\"), Some((\"\", \"\")));\n+    assert_eq!(\"a->\".rsplit_once(\"->\"), Some((\"a\", \"\")));\n+    assert_eq!(\"->b\".rsplit_once(\"->\"), Some((\"\", \"b\")));\n+    assert_eq!(\"a->b\".rsplit_once(\"->\"), Some((\"a\", \"b\")));\n+    assert_eq!(\"a->b->c\".rsplit_once(\"->\"), Some((\"a->b\", \"c\")));\n+    assert_eq!(\"---\".rsplit_once(\"--\"), Some((\"-\", \"\")));\n+}\n+\n #[test]\n fn test_split_whitespace() {\n     let data = \"\\n \\tM\u00e4ry   h\u00e4d\\t\u00e4  little l\u00e4mb\\nLittle l\u00e4mb\\n\";"}, {"sha": "9d7e38d0e183100b6cd79dbd775dfd39f4dc5852", "filename": "library/core/src/str/mod.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstr%2Fmod.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -3610,6 +3610,47 @@ impl str {\n         RSplitN(self.splitn(n, pat).0)\n     }\n \n+    /// Splits the string on the first occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".split_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".split_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".split_once('='), Some((\"cfg\", \"foo=bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn split_once<'a, P: Pattern<'a>>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)> {\n+        let (start, end) = delimiter.into_searcher(self).next_match()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n+    /// Splits the string on the last occurrence of the specified delimiter and\n+    /// returns prefix before delimiter and suffix after delimiter.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(str_split_once)]\n+    ///\n+    /// assert_eq!(\"cfg\".rsplit_once('='), None);\n+    /// assert_eq!(\"cfg=foo\".rsplit_once('='), Some((\"cfg\", \"foo\")));\n+    /// assert_eq!(\"cfg=foo=bar\".rsplit_once('='), Some((\"cfg=foo\", \"bar\")));\n+    /// ```\n+    #[unstable(feature = \"str_split_once\", reason = \"newly added\", issue = \"74773\")]\n+    #[inline]\n+    pub fn rsplit_once<'a, P>(&'a self, delimiter: P) -> Option<(&'a str, &'a str)>\n+    where\n+        P: Pattern<'a, Searcher: ReverseSearcher<'a>>,\n+    {\n+        let (start, end) = delimiter.into_searcher(self).next_match_back()?;\n+        Some((&self[..start], &self[end..]))\n+    }\n+\n     /// An iterator over the disjoint matches of a pattern within the given string\n     /// slice.\n     ///"}, {"sha": "60eba96bcc0156f8f0357ce1dbb25fc304d5e95d", "filename": "library/std/src/lazy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Fstd%2Fsrc%2Flazy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/library%2Fstd%2Fsrc%2Flazy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flazy.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -451,7 +451,9 @@ unsafe impl<T, F: Send> Sync for SyncLazy<T, F> where SyncOnceCell<T>: Sync {}\n // auto-derived `Send` impl is OK.\n \n #[unstable(feature = \"once_cell\", issue = \"74465\")]\n-impl<T, F: RefUnwindSafe> RefUnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: RefUnwindSafe {}\n+impl<T, F: UnwindSafe> RefUnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: RefUnwindSafe {}\n+#[unstable(feature = \"once_cell\", issue = \"74465\")]\n+impl<T, F: UnwindSafe> UnwindSafe for SyncLazy<T, F> where SyncOnceCell<T>: UnwindSafe {}\n \n impl<T, F> SyncLazy<T, F> {\n     /// Creates a new lazy value with the given initializing"}, {"sha": "2f8e9da179afaaedf4795bb106c084f222e879a3", "filename": "src/README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2FREADME.md?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -1,6 +1,6 @@\n This directory contains the source code of the rust project, including:\n - `rustc` and its tests\n-- `libstd`\n+- The bootstrapping build system\n - Various submodules for tools, like rustdoc, rls, etc.\n \n For more information on how various parts of the compiler work, see the [rustc dev guide]."}, {"sha": "40dfa484d3f9443760894bb2680994fddcfa0645", "filename": "src/librustc_error_codes/error_codes/E0720.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustc_error_codes%2Ferror_codes%2FE0720.md", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustc_error_codes%2Ferror_codes%2FE0720.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0720.md?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -1,11 +1,13 @@\n An `impl Trait` type expands to a recursive type.\n \n-An `impl Trait` type must be expandable to a concrete type that contains no\n-`impl Trait` types. For example the following example tries to create an\n-`impl Trait` type `T` that is equal to `[T, T]`:\n+Erroneous code example:\n \n ```compile_fail,E0720\n fn make_recursive_type() -> impl Sized {\n     [make_recursive_type(), make_recursive_type()]\n }\n ```\n+\n+An `impl Trait` type must be expandable to a concrete type that contains no\n+`impl Trait` types. For example the previous example tries to create an\n+`impl Trait` type `T` that is equal to `[T, T]`."}, {"sha": "05a0c52badb7adb0d17576caa282f9f70cf5d7a5", "filename": "src/librustc_trait_selection/traits/auto_trait.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Fauto_trait.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -802,6 +802,38 @@ impl AutoTraitFinder<'tcx> {\n                         _ => {}\n                     };\n                 }\n+                ty::PredicateAtom::ConstEquate(c1, c2) => {\n+                    let evaluate = |c: &'tcx ty::Const<'tcx>| {\n+                        if let ty::ConstKind::Unevaluated(def, substs, promoted) = c.val {\n+                            match select.infcx().const_eval_resolve(\n+                                obligation.param_env,\n+                                def,\n+                                substs,\n+                                promoted,\n+                                Some(obligation.cause.span),\n+                            ) {\n+                                Ok(val) => Ok(ty::Const::from_value(select.tcx(), val, c.ty)),\n+                                Err(err) => Err(err),\n+                            }\n+                        } else {\n+                            Ok(c)\n+                        }\n+                    };\n+\n+                    match (evaluate(c1), evaluate(c2)) {\n+                        (Ok(c1), Ok(c2)) => {\n+                            match select\n+                                .infcx()\n+                                .at(&obligation.cause, obligation.param_env)\n+                                .eq(c1, c2)\n+                            {\n+                                Ok(_) => (),\n+                                Err(_) => return false,\n+                            }\n+                        }\n+                        _ => return false,\n+                    }\n+                }\n                 _ => panic!(\"Unexpected predicate {:?} {:?}\", ty, predicate),\n             };\n         }"}, {"sha": "f4710f6ae873aef882d6387c255e0553ca75f5e8", "filename": "src/librustdoc/html/static/themes/ayu.css", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fayu.css?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -197,9 +197,8 @@ pre {\n \tcolor: #a37acc;\n }\n \n-pre.rust .comment, pre.rust .doccomment {\n-\tcolor: #788797;\n-}\n+pre.rust .comment { color: #788797; }\n+pre.rust .doccomment { color: #a1ac88; }\n \n nav:not(.sidebar) {\n \tborder-bottom-color: #424c57;"}, {"sha": "6cc02f78c625d622f5f5018420f52a7a2d3094c7", "filename": "src/test/rustdoc/lazy_normalization_consts/const-equate-pred.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Ftest%2Frustdoc%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Ftest%2Frustdoc%2Flazy_normalization_consts%2Fconst-equate-pred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Flazy_normalization_consts%2Fconst-equate-pred.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -0,0 +1,18 @@\n+#![crate_name = \"foo\"]\n+#![feature(lazy_normalization_consts)]\n+#![allow(incomplete_features)]\n+\n+// Checking if `Send` is implemented for `Hasher` requires us to evaluate a `ConstEquate` predicate,\n+// which previously caused an ICE.\n+\n+pub struct Hasher<T> {\n+    cv_stack: T,\n+}\n+\n+unsafe impl<T: Default> Send for Hasher<T> {}\n+\n+// @has foo/struct.Foo.html\n+// @has - '//code' 'impl Send for Foo'\n+pub struct Foo {\n+    hasher: Hasher<[u8; 3]>,\n+}"}, {"sha": "b28768a5163ddf655cedc60f485984084e93d05e", "filename": "src/test/ui/const-generics/coerce_unsized_array.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fcoerce_unsized_array.rs?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const N: usize>(v: &[u8; N]) -> &[u8] {\n+    v\n+}\n+\n+fn main() {\n+    assert_eq!(foo(&[1, 2]), &[1, 2]);\n+}"}, {"sha": "8fe89095ae99facec08e89f456619ec1caa44665", "filename": "triagebot.toml", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/517385b31b0add8487ff3cc27e216cf3f867ab44/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/517385b31b0add8487ff3cc27e216cf3f867ab44/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=517385b31b0add8487ff3cc27e216cf3f867ab44", "patch": "@@ -58,6 +58,17 @@ Thanks! <3\n \"\"\"\n label = \"O-ARM\"\n \n+[ping.risc-v]\n+message = \"\"\"\\\n+Hey RISC-V Group! This bug has been identified as a good \"RISC-V candidate\".\n+In case it's useful, here are some [instructions] for tackling these sorts of\n+bugs. Maybe take a look?\n+Thanks! <3\n+\n+[instructions]: https://rustc-dev-guide.rust-lang.org/notification-groups/risc-v.html\n+\"\"\"\n+label = \"O-riscv\"\n+\n [prioritize]\n label = \"I-prioritize\"\n "}]}