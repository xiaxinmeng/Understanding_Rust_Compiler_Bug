{"sha": "e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2YjA3ODQ5MDM4YmQzNjkxYmI0NmRiNmExNGJkNWFhZGRmY2Q0NWE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T14:38:54Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-09-09T19:07:13Z"}, "message": "rollup merge of #17085 : jakub-/issue-17074", "tree": {"sha": "0fdb3e772ce9ea6d4f428233055cd88bbdf12c30", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fdb3e772ce9ea6d4f428233055cd88bbdf12c30"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "html_url": "https://github.com/rust-lang/rust/commit/e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6b07849038bd3691bb46db6a14bd5aaddfcd45a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b8dd7d5056012052941dad6c1a7d622d356a81ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/b8dd7d5056012052941dad6c1a7d622d356a81ce", "html_url": "https://github.com/rust-lang/rust/commit/b8dd7d5056012052941dad6c1a7d622d356a81ce"}, {"sha": "c98a80e472e5b090b53b1205417b06d0b8aa25b8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c98a80e472e5b090b53b1205417b06d0b8aa25b8", "html_url": "https://github.com/rust-lang/rust/commit/c98a80e472e5b090b53b1205417b06d0b8aa25b8"}], "stats": {"total": 92, "additions": 57, "deletions": 35}, "files": [{"sha": "605c90a49c6674a375a6611e3199a819a8e7b4f5", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 37, "deletions": 35, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e6b07849038bd3691bb46db6a14bd5aaddfcd45a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b07849038bd3691bb46db6a14bd5aaddfcd45a/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "patch": "@@ -500,42 +500,44 @@ pub fn eval_const_expr_partial(tcx: &ty::ctxt, e: &Expr) -> Result<const_val, St\n                                         \"target type not found for const cast\")\n                 });\n \n-        let base = eval_const_expr_partial(tcx, &**base);\n-        match base {\n-            Err(_) => base,\n-            Ok(val) => {\n-                match ty::get(ety).sty {\n-                    ty::ty_float(_) => {\n-                        match val {\n-                            const_bool(b) => Ok(const_float(b as f64)),\n-                            const_uint(u) => Ok(const_float(u as f64)),\n-                            const_int(i) => Ok(const_float(i as f64)),\n-                            const_float(f) => Ok(const_float(f)),\n-                            _ => Err(\"can't cast this type to float\".to_string()),\n-                        }\n+        macro_rules! define_casts(\n+            ($val:ident, {\n+                $($ty_pat:pat => (\n+                    $intermediate_ty:ty,\n+                    $const_type:ident,\n+                    $target_ty:ty\n+                )),*\n+            }) => (match ty::get(ety).sty {\n+                $($ty_pat => {\n+                    match $val {\n+                        const_bool(b) => Ok($const_type(b as $intermediate_ty as $target_ty)),\n+                        const_uint(u) => Ok($const_type(u as $intermediate_ty as $target_ty)),\n+                        const_int(i) => Ok($const_type(i as $intermediate_ty as $target_ty)),\n+                        const_float(f) => Ok($const_type(f as $intermediate_ty as $target_ty)),\n+                        _ => Err(concat!(\n+                            \"can't cast this type to \", stringify!($const_type)\n+                        ).to_string())\n                     }\n-                    ty::ty_uint(_) => {\n-                        match val {\n-                            const_bool(b) => Ok(const_uint(b as u64)),\n-                            const_uint(u) => Ok(const_uint(u)),\n-                            const_int(i) => Ok(const_uint(i as u64)),\n-                            const_float(f) => Ok(const_uint(f as u64)),\n-                            _ => Err(\"can't cast this type to uint\".to_string()),\n-                        }\n-                    }\n-                    ty::ty_int(_) => {\n-                        match val {\n-                            const_bool(b) => Ok(const_int(b as i64)),\n-                            const_uint(u) => Ok(const_int(u as i64)),\n-                            const_int(i) => Ok(const_int(i)),\n-                            const_float(f) => Ok(const_int(f as i64)),\n-                            _ => Err(\"can't cast this type to int\".to_string()),\n-                        }\n-                    }\n-                    _ => Err(\"can't cast this type\".to_string())\n-                }\n-            }\n-        }\n+                },)*\n+                _ => Err(\"can't cast this type\".to_string())\n+            })\n+        )\n+\n+        eval_const_expr_partial(tcx, &**base)\n+            .and_then(|val| define_casts!(val, {\n+                ty::ty_int(ast::TyI) => (int, const_int, i64),\n+                ty::ty_int(ast::TyI8) => (i8, const_int, i64),\n+                ty::ty_int(ast::TyI16) => (i16, const_int, i64),\n+                ty::ty_int(ast::TyI32) => (i32, const_int, i64),\n+                ty::ty_int(ast::TyI64) => (i64, const_int, i64),\n+                ty::ty_uint(ast::TyU) => (uint, const_uint, u64),\n+                ty::ty_uint(ast::TyU8) => (u8, const_uint, u64),\n+                ty::ty_uint(ast::TyU16) => (u16, const_uint, u64),\n+                ty::ty_uint(ast::TyU32) => (u32, const_uint, u64),\n+                ty::ty_uint(ast::TyU64) => (u64, const_uint, u64),\n+                ty::ty_float(ast::TyF32) => (f32, const_float, f64),\n+                ty::ty_float(ast::TyF64) => (f64, const_float, f64)\n+            }))\n       }\n       ExprPath(_) => {\n           match lookup_const(tcx, e) {"}, {"sha": "e346148691d863689bdd19c1d84cfc2014918797", "filename": "src/test/run-pass/issue-17074.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e6b07849038bd3691bb46db6a14bd5aaddfcd45a/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6b07849038bd3691bb46db6a14bd5aaddfcd45a/src%2Ftest%2Frun-pass%2Fissue-17074.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17074.rs?ref=e6b07849038bd3691bb46db6a14bd5aaddfcd45a", "patch": "@@ -0,0 +1,20 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+static X: u64 = -1 as u16 as u64;\n+static Y: u64 = -1 as u32 as u64;\n+\n+fn main() {\n+    assert_eq!(match 1 {\n+        X => unreachable!(),\n+        Y => unreachable!(),\n+        _ => 1i\n+    }, 1);\n+}"}]}