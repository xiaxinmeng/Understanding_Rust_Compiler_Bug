{"sha": "5b8403c46357ee0f1e72aa6b7ab90942d697a241", "node_id": "C_kwDOAAsO6NoAKDViODQwM2M0NjM1N2VlMGYxZTcyYWE2YjdhYjkwOTQyZDY5N2EyNDE", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-02-08T17:32:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-02-08T17:32:43Z"}, "message": "Rollup merge of #107777 - compiler-errors:derive_const-actually-derive-const, r=fee1-dead\n\nMake `derive_const` derive properly const-if-const impls\n\nFixes #107774\nFixes #107666\n\nAlso fixes rendering of const-if-const bounds in pretty printing.\n\nr? ```@oli-obk``` or ```@fee1-dead```", "tree": {"sha": "8b5d0ca17cf5538212cd1784b1d1117ccc8d8ccf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8b5d0ca17cf5538212cd1784b1d1117ccc8d8ccf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b8403c46357ee0f1e72aa6b7ab90942d697a241", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJj49y7CRBK7hj4Ov3rIwAAS5gIAJC5Q2rjde3k8bRC3dtMIugC\nPtm84gJxD9lFLx4SwBcudwbH0imOABDLcFEftmnb2mlByveBc6IUKDkHWRp/oWsM\nbof/qQ/It/vbWo2Qc02nPFDV0obWWw2KqF0Zp6GQ4HUwX2uoqAMwMj5fWFhKUiVE\nur+ZqAE4B/+jAhjuy5bMjSB0BZ/cSYQND5z0GY5KcC3+3xDxw4v51V6w9TDKH33k\nRquuB/CBVasQ+1bAitRoDKh2oIj1O1wmlHy/bxJpCU8VlVAYz0H0MaJ2Sqzdpb2m\nDrfhjcDioF4m4SzjkuyT6jMTFVDdE8OovkkL5aOEbNVcfqfO9cYu6ro1/hcwMf0=\n=mR63\n-----END PGP SIGNATURE-----\n", "payload": "tree 8b5d0ca17cf5538212cd1784b1d1117ccc8d8ccf\nparent abc2203e360773f3b02d65d1bc7a3e1a8e9de745\nparent 7a4505900db08696071655018e72bad896fb9cb0\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1675877563 +0100\ncommitter GitHub <noreply@github.com> 1675877563 +0100\n\nRollup merge of #107777 - compiler-errors:derive_const-actually-derive-const, r=fee1-dead\n\nMake `derive_const` derive properly const-if-const impls\n\nFixes #107774\nFixes #107666\n\nAlso fixes rendering of const-if-const bounds in pretty printing.\n\nr? ```@oli-obk``` or ```@fee1-dead```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b8403c46357ee0f1e72aa6b7ab90942d697a241", "html_url": "https://github.com/rust-lang/rust/commit/5b8403c46357ee0f1e72aa6b7ab90942d697a241", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b8403c46357ee0f1e72aa6b7ab90942d697a241/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "url": "https://api.github.com/repos/rust-lang/rust/commits/abc2203e360773f3b02d65d1bc7a3e1a8e9de745", "html_url": "https://github.com/rust-lang/rust/commit/abc2203e360773f3b02d65d1bc7a3e1a8e9de745"}, {"sha": "7a4505900db08696071655018e72bad896fb9cb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/7a4505900db08696071655018e72bad896fb9cb0", "html_url": "https://github.com/rust-lang/rust/commit/7a4505900db08696071655018e72bad896fb9cb0"}], "stats": {"total": 86, "additions": 69, "deletions": 17}, "files": [{"sha": "cd621bc67a1de9328e4fec0d2ebc27fa721df944", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -1567,8 +1567,18 @@ impl<'a> State<'a> {\n \n             match bound {\n                 GenericBound::Trait(tref, modifier) => {\n-                    if modifier == &TraitBoundModifier::Maybe {\n-                        self.word(\"?\");\n+                    match modifier {\n+                        TraitBoundModifier::None => {}\n+                        TraitBoundModifier::Maybe => {\n+                            self.word(\"?\");\n+                        }\n+                        TraitBoundModifier::MaybeConst => {\n+                            self.word_space(\"~const\");\n+                        }\n+                        TraitBoundModifier::MaybeConstMaybe => {\n+                            self.word_space(\"~const\");\n+                            self.word(\"?\");\n+                        }\n                     }\n                     self.print_poly_trait_ref(tref);\n                 }"}, {"sha": "e8a353b1c8fcc61474ad64cb001971ede5a5b67a", "filename": "compiler/rustc_builtin_macros/src/deriving/debug.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fdebug.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -153,7 +153,10 @@ fn show_substructure(cx: &mut ExtCtxt<'_>, span: Span, substr: &Substructure<'_>\n         let path_debug = cx.path_global(span, cx.std_path(&[sym::fmt, sym::Debug]));\n         let ty_dyn_debug = cx.ty(\n             span,\n-            ast::TyKind::TraitObject(vec![cx.trait_bound(path_debug)], ast::TraitObjectSyntax::Dyn),\n+            ast::TyKind::TraitObject(\n+                vec![cx.trait_bound(path_debug, false)],\n+                ast::TraitObjectSyntax::Dyn,\n+            ),\n         );\n         let ty_slice = cx.ty(\n             span,"}, {"sha": "a8c0aeb787078140ba2cab22b851002e2bbdf3f6", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/mod.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fmod.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -605,18 +605,26 @@ impl<'a> TraitDef<'a> {\n                     let bounds: Vec<_> = self\n                         .additional_bounds\n                         .iter()\n-                        .map(|p| cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                        .map(|p| {\n+                            cx.trait_bound(\n+                                p.to_path(cx, self.span, type_ident, generics),\n+                                self.is_const,\n+                            )\n+                        })\n                         .chain(\n                             // Add a bound for the current trait.\n                             self.skip_path_as_bound\n                                 .not()\n-                                .then(|| cx.trait_bound(trait_path.clone())),\n+                                .then(|| cx.trait_bound(trait_path.clone(), self.is_const)),\n                         )\n                         .chain({\n                             // Add a `Copy` bound if required.\n                             if is_packed && self.needs_copy_as_bound_if_packed {\n                                 let p = deriving::path_std!(marker::Copy);\n-                                Some(cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                                Some(cx.trait_bound(\n+                                    p.to_path(cx, self.span, type_ident, generics),\n+                                    self.is_const,\n+                                ))\n                             } else {\n                                 None\n                             }\n@@ -694,18 +702,24 @@ impl<'a> TraitDef<'a> {\n                         let mut bounds: Vec<_> = self\n                             .additional_bounds\n                             .iter()\n-                            .map(|p| cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)))\n+                            .map(|p| {\n+                                cx.trait_bound(\n+                                    p.to_path(cx, self.span, type_ident, generics),\n+                                    self.is_const,\n+                                )\n+                            })\n                             .collect();\n \n                         // Require the current trait.\n-                        bounds.push(cx.trait_bound(trait_path.clone()));\n+                        bounds.push(cx.trait_bound(trait_path.clone(), self.is_const));\n \n                         // Add a `Copy` bound if required.\n                         if is_packed && self.needs_copy_as_bound_if_packed {\n                             let p = deriving::path_std!(marker::Copy);\n-                            bounds.push(\n-                                cx.trait_bound(p.to_path(cx, self.span, type_ident, generics)),\n-                            );\n+                            bounds.push(cx.trait_bound(\n+                                p.to_path(cx, self.span, type_ident, generics),\n+                                self.is_const,\n+                            ));\n                         }\n \n                         let predicate = ast::WhereBoundPredicate {"}, {"sha": "aabd5b1f773f70baa3691862eb4a190f8068a8fb", "filename": "compiler/rustc_builtin_macros/src/deriving/generic/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fderiving%2Fgeneric%2Fty.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -154,7 +154,7 @@ fn mk_ty_param(\n         .iter()\n         .map(|b| {\n             let path = b.to_path(cx, span, self_ident, self_generics);\n-            cx.trait_bound(path)\n+            cx.trait_bound(path, false)\n         })\n         .collect();\n     cx.typaram(span, Ident::new(name, span), bounds, None)"}, {"sha": "b4c12651e7a2d36e7011fac4664f36d63f695c05", "filename": "compiler/rustc_expand/src/build.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbuild.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -131,10 +131,14 @@ impl<'a> ExtCtxt<'a> {\n         }\n     }\n \n-    pub fn trait_bound(&self, path: ast::Path) -> ast::GenericBound {\n+    pub fn trait_bound(&self, path: ast::Path, is_const: bool) -> ast::GenericBound {\n         ast::GenericBound::Trait(\n             self.poly_trait_ref(path.span, path),\n-            ast::TraitBoundModifier::None,\n+            if is_const {\n+                ast::TraitBoundModifier::MaybeConst\n+            } else {\n+                ast::TraitBoundModifier::None\n+            },\n         )\n     }\n "}, {"sha": "fdc2a7666d69b0a6ccbaad809fd933bf45124919", "filename": "tests/ui/macros/stringify.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Fmacros%2Fstringify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Fmacros%2Fstringify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmacros%2Fstringify.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -626,7 +626,7 @@ fn test_item() {\n         stringify_item!(\n             impl ~const Struct {}\n         ),\n-        \"impl Struct {}\", // FIXME\n+        \"impl ~const Struct {}\",\n     );\n \n     // ItemKind::MacCall\n@@ -838,15 +838,15 @@ fn test_ty() {\n     assert_eq!(stringify_ty!(dyn Send + 'a), \"dyn Send + 'a\");\n     assert_eq!(stringify_ty!(dyn 'a + Send), \"dyn 'a + Send\");\n     assert_eq!(stringify_ty!(dyn ?Sized), \"dyn ?Sized\");\n-    assert_eq!(stringify_ty!(dyn ~const Clone), \"dyn Clone\"); // FIXME\n+    assert_eq!(stringify_ty!(dyn ~const Clone), \"dyn ~const Clone\");\n     assert_eq!(stringify_ty!(dyn for<'a> Send), \"dyn for<'a> Send\");\n \n     // TyKind::ImplTrait\n     assert_eq!(stringify_ty!(impl Send), \"impl Send\");\n     assert_eq!(stringify_ty!(impl Send + 'a), \"impl Send + 'a\");\n     assert_eq!(stringify_ty!(impl 'a + Send), \"impl 'a + Send\");\n     assert_eq!(stringify_ty!(impl ?Sized), \"impl ?Sized\");\n-    assert_eq!(stringify_ty!(impl ~const Clone), \"impl Clone\"); // FIXME\n+    assert_eq!(stringify_ty!(impl ~const Clone), \"impl ~const Clone\");\n     assert_eq!(stringify_ty!(impl for<'a> Send), \"impl for<'a> Send\");\n \n     // TyKind::Paren"}, {"sha": "72edfbc97e48fb0b3421cad2dfb19eda8e5b880e", "filename": "tests/ui/rfc-2632-const-trait-impl/const_derives/derive-const-with-params.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Frfc-2632-const-trait-impl%2Fconst_derives%2Fderive-const-with-params.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -0,0 +1,13 @@\n+// check-pass\n+\n+#![feature(derive_const)]\n+#![feature(const_trait_impl)]\n+\n+#[derive_const(PartialEq)]\n+pub struct Reverse<T>(T);\n+\n+const fn foo(a: Reverse<i32>, b: Reverse<i32>) -> bool {\n+    a == b\n+}\n+\n+fn main() {}"}, {"sha": "dbcba7871ec96fdd86ce86d0fb4263cf783b451a", "filename": "tests/ui/unpretty/ast-const-trait-bound.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Funpretty%2Fast-const-trait-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Funpretty%2Fast-const-trait-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funpretty%2Fast-const-trait-bound.rs?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Zunpretty=normal\n+// check-pass\n+\n+fn foo() where T: ~const Bar {}"}, {"sha": "dbcba7871ec96fdd86ce86d0fb4263cf783b451a", "filename": "tests/ui/unpretty/ast-const-trait-bound.stdout", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Funpretty%2Fast-const-trait-bound.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/5b8403c46357ee0f1e72aa6b7ab90942d697a241/tests%2Fui%2Funpretty%2Fast-const-trait-bound.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funpretty%2Fast-const-trait-bound.stdout?ref=5b8403c46357ee0f1e72aa6b7ab90942d697a241", "patch": "@@ -0,0 +1,4 @@\n+// compile-flags: -Zunpretty=normal\n+// check-pass\n+\n+fn foo() where T: ~const Bar {}"}]}