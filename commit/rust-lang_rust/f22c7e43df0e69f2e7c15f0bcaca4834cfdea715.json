{"sha": "f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyMmM3ZTQzZGYwZTY5ZjJlN2MxNWYwYmNhY2E0ODM0Y2ZkZWE3MTU=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T12:06:23Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-06-21T13:46:30Z"}, "message": "Store env vars where necessary", "tree": {"sha": "9ea9b17e979a80d6f9bd404e935cb1a79e78c2af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ea9b17e979a80d6f9bd404e935cb1a79e78c2af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "html_url": "https://github.com/rust-lang/rust/commit/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5414825f09b9f5d132cdb71c62700afdfab43d57", "url": "https://api.github.com/repos/rust-lang/rust/commits/5414825f09b9f5d132cdb71c62700afdfab43d57", "html_url": "https://github.com/rust-lang/rust/commit/5414825f09b9f5d132cdb71c62700afdfab43d57"}], "stats": {"total": 119, "additions": 114, "deletions": 5}, "files": [{"sha": "8995a199f1370c8e1257e691bf3141cdc11b0e7d", "filename": "src/eval_context.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "patch": "@@ -41,6 +41,10 @@ pub struct EvalContext<'a, 'tcx: 'a> {\n     /// This prevents infinite loops and huge computations from freezing up const eval.\n     /// Remove once halting problem is solved.\n     pub(crate) steps_remaining: u64,\n+\n+    /// Environment variables set by `setenv`\n+    /// Miri does not expose env vars from the host to the emulated program\n+    pub(crate) env_vars: HashMap<Vec<u8>, Pointer>,\n }\n \n /// A stack frame.\n@@ -134,6 +138,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             stack: Vec::new(),\n             stack_limit: limits.stack_limit,\n             steps_remaining: limits.step_limit,\n+            env_vars: HashMap::new(),\n         }\n     }\n "}, {"sha": "ee7e3a388198c292dbec531b832bf853c65b9d0b", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 63, "deletions": 5, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "patch": "@@ -670,12 +670,63 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             }\n \n             \"getenv\" => {\n-                {\n+                let result = {\n                     let name_ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n                     let name = self.memory.read_c_str(name_ptr)?;\n-                    info!(\"ignored env var request for `{:?}`\", ::std::str::from_utf8(name));\n+                    match self.env_vars.get(name) {\n+                        Some(&var) => PrimVal::Ptr(var),\n+                        None => PrimVal::Bytes(0),\n+                    }\n+                };\n+                self.write_primval(dest, result, dest_ty)?;\n+            }\n+\n+            \"unsetenv\" => {\n+                let mut success = None;\n+                {\n+                    let name_ptr = args[0].read_ptr(&self.memory)?;\n+                    if !name_ptr.is_null()? {\n+                        let name = self.memory.read_c_str(name_ptr.to_ptr()?)?;\n+                        if !name.is_empty() && !name.contains(&b'=') {\n+                            success = Some(self.env_vars.remove(name));\n+                        }\n+                    }\n+                }\n+                if let Some(old) = success {\n+                    if let Some(var) = old {\n+                        self.memory.deallocate(var)?;\n+                    }\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n+                }\n+            }\n+\n+            \"setenv\" => {\n+                let mut new = None;\n+                {\n+                    let name_ptr = args[0].read_ptr(&self.memory)?;\n+                    let value_ptr = args[1].read_ptr(&self.memory)?.to_ptr()?;\n+                    let value = self.memory.read_c_str(value_ptr)?;\n+                    if !name_ptr.is_null()? {\n+                        let name = self.memory.read_c_str(name_ptr.to_ptr()?)?;\n+                        if !name.is_empty() && !name.contains(&b'=') {\n+                            new = Some((name.to_owned(), value.to_owned()));\n+                        }\n+                    }\n+                }\n+                if let Some((name, value)) = new {\n+                    // +1 for the null terminator\n+                    let value_copy = self.memory.allocate((value.len() + 1) as u64, 1)?;\n+                    self.memory.write_bytes(value_copy, &value)?;\n+                    self.memory.write_bytes(value_copy.offset(value.len() as u64, self.memory.layout)?, &[0])?;\n+                    if let Some(var) = self.env_vars.insert(name.to_owned(), value_copy) {\n+                        self.memory.deallocate(var)?;\n+                    }\n+                    self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n+                } else {\n+                    self.write_primval(dest, PrimVal::from_i128(-1), dest_ty)?;\n                 }\n-                self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n             }\n \n             \"write\" => {\n@@ -696,6 +747,12 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 self.write_primval(dest, PrimVal::Bytes(result as u128), dest_ty)?;\n             }\n \n+            \"strlen\" => {\n+                let ptr = args[0].read_ptr(&self.memory)?.to_ptr()?;\n+                let n = self.memory.read_c_str(ptr)?.len();\n+                self.write_primval(dest, PrimVal::Bytes(n as u128), dest_ty)?;\n+            }\n+\n             // Some things needed for sys::thread initialization to go through\n             \"signal\" | \"sigaction\" | \"sigaltstack\" => {\n                 self.write_primval(dest, PrimVal::Bytes(0), dest_ty)?;\n@@ -705,10 +762,11 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let name = self.value_to_primval(args[0], usize)?.to_u64()?;\n                 trace!(\"sysconf() called with name {}\", name);\n                 let result = match name {\n-                    30 => 4096, // _SC_PAGESIZE\n+                    30 => PrimVal::Bytes(4096), // _SC_PAGESIZE\n+                    70 => PrimVal::from_i128(-1), // _SC_GETPW_R_SIZE_MAX\n                     _ => return Err(EvalError::Unimplemented(format!(\"Unimplemented sysconf name: {}\", name)))\n                 };\n-                self.write_primval(dest, PrimVal::Bytes(result), dest_ty)?;\n+                self.write_primval(dest, result, dest_ty)?;\n             }\n \n             \"mmap\" => {"}, {"sha": "37cfea8058f47d75792f99712756f9b1b99de462", "filename": "src/value.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/src%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue.rs?ref=f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "patch": "@@ -205,6 +205,14 @@ impl<'tcx> PrimVal {\n         }\n     }\n \n+    pub fn is_null(self) -> EvalResult<'tcx, bool> {\n+        match self {\n+            PrimVal::Bytes(b) => Ok(b == 0),\n+            PrimVal::Ptr(_) => Ok(false),\n+            PrimVal::Undef => Err(EvalError::ReadUndefBytes),\n+        }\n+    }\n+\n     pub fn signed_offset(self, i: i64, layout: &TargetDataLayout) -> EvalResult<'tcx, Self> {\n         match self {\n             PrimVal::Bytes(b) => {"}, {"sha": "a9001a3cdcf6ec64eb1236ce8b284a4894d1900f", "filename": "tests/run-pass-fullmir/foreign-fn-linkname.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f22c7e43df0e69f2e7c15f0bcaca4834cfdea715/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass-fullmir%2Fforeign-fn-linkname.rs?ref=f22c7e43df0e69f2e7c15f0bcaca4834cfdea715", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+\n+\n+#![feature(std_misc, libc)]\n+\n+extern crate libc;\n+use std::ffi::CString;\n+\n+mod mlibc {\n+    use libc::{c_char, size_t};\n+\n+    extern {\n+        #[link_name = \"strlen\"]\n+        pub fn my_strlen(str: *const c_char) -> size_t;\n+    }\n+}\n+\n+fn strlen(str: String) -> usize {\n+    // C string is terminated with a zero\n+    let s = CString::new(str).unwrap();\n+    unsafe {\n+        mlibc::my_strlen(s.as_ptr()) as usize\n+    }\n+}\n+\n+pub fn main() {\n+    let len = strlen(\"Rust\".to_string());\n+    assert_eq!(len, 4);\n+}"}]}