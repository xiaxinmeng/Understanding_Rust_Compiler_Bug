{"sha": "f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwYmFlYzY5MWY5YmZjZmM3MGQ2ZjM1YjFhODZmN2NmMjA0YTdkNGY=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-01T01:25:32Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2016-08-12T03:43:34Z"}, "message": "syntax: add anonymized type syntax, i.e. impl TraitA+TraitB.", "tree": {"sha": "02a32f5d6fbf04d9812324fbea662e50281454d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02a32f5d6fbf04d9812324fbea662e50281454d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "html_url": "https://github.com/rust-lang/rust/commit/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c976e073fda6bae5f11593913b244f33ce57d0d9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c976e073fda6bae5f11593913b244f33ce57d0d9", "html_url": "https://github.com/rust-lang/rust/commit/c976e073fda6bae5f11593913b244f33ce57d0d9"}], "stats": {"total": 72, "additions": 68, "deletions": 4}, "files": [{"sha": "dd79e14f077e831c5949797dd4b62c4fc08c7bef", "filename": "src/librustc/hir/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Ffold.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -375,6 +375,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n                 TyPolyTraitRef(bounds) => {\n                     TyPolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n                 }\n+                TyImplTrait(bounds) => {\n+                    TyImplTrait(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+                }\n             },\n             span: fld.new_span(span),\n         }"}, {"sha": "1162c290f9cfca675f63b14bb52fef53e050e59e", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -427,6 +427,9 @@ pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n         TyPolyTraitRef(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n+        TyImplTrait(ref bounds) => {\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n         TyTypeof(ref expression) => {\n             visitor.visit_expr(expression)\n         }"}, {"sha": "eb98ed77da703df241719e57999b9c37a460930d", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -293,8 +293,10 @@ impl<'a> LoweringContext<'a> {\n                     hir::TyTypeof(self.lower_expr(expr))\n                 }\n                 PolyTraitRef(ref bounds) => {\n-                    let bounds = bounds.iter().map(|b| self.lower_ty_param_bound(b)).collect();\n-                    hir::TyPolyTraitRef(bounds)\n+                    hir::TyPolyTraitRef(self.lower_bounds(bounds))\n+                }\n+                ImplTrait(ref bounds) => {\n+                    hir::TyImplTrait(self.lower_bounds(bounds))\n                 }\n                 Mac(_) => panic!(\"TyMac should have been expanded by now.\"),\n             },"}, {"sha": "707ef987c2c06e1518c466bccad774f5a9765732", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -1132,6 +1132,8 @@ pub enum Ty_ {\n     TyObjectSum(P<Ty>, TyParamBounds),\n     /// A type like `for<'a> Foo<&'a Bar>`\n     TyPolyTraitRef(TyParamBounds),\n+    /// An `impl TraitA+TraitB` type.\n+    TyImplTrait(TyParamBounds),\n     /// Unused for now\n     TyTypeof(P<Expr>),\n     /// TyInfer means the type should be inferred instead of it having been"}, {"sha": "6dedae5ccd75d2761321976ae5a260c343ab7315", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -536,6 +536,9 @@ impl<'a> State<'a> {\n             hir::TyPolyTraitRef(ref bounds) => {\n                 self.print_bounds(\"\", &bounds[..])?;\n             }\n+            hir::TyImplTrait(ref bounds) => {\n+                self.print_bounds(\"impl \", &bounds[..])?;\n+            }\n             hir::TyFixedLengthVec(ref ty, ref v) => {\n                 word(&mut self.s, \"[\")?;\n                 self.print_type(&ty)?;"}, {"sha": "37af778d5556876b5e599488ea01ca8b554b30a8", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -1492,6 +1492,9 @@ pub enum Type {\n \n     // for<'a> Foo(&'a)\n     PolyTraitRef(Vec<TyParamBound>),\n+\n+    // impl TraitA+TraitB\n+    ImplTrait(Vec<TyParamBound>),\n }\n \n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Eq, Hash, Copy, Debug)]\n@@ -1777,6 +1780,7 @@ impl Clean<Type> for hir::Ty {\n             }\n             TyBareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyPolyTraitRef(ref bounds) => PolyTraitRef(bounds.clean(cx)),\n+            TyImplTrait(ref bounds) => ImplTrait(bounds.clean(cx)),\n             TyInfer => Infer,\n             TyTypeof(..) => panic!(\"Unimplemented type {:?}\", self.node),\n         }"}, {"sha": "854ca57e8556c72a606a0f4e49c2de298c3e9c22", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -539,6 +539,16 @@ impl fmt::Display for clean::Type {\n                 }\n                 Ok(())\n             }\n+            clean::ImplTrait(ref bounds) => {\n+                write!(f, \"impl \")?;\n+                for (i, bound) in bounds.iter().enumerate() {\n+                    if i != 0 {\n+                        write!(f, \" + \")?;\n+                    }\n+                    write!(f, \"{}\", *bound)?;\n+                }\n+                Ok(())\n+            }\n             // It's pretty unsightly to look at `<A as B>::C` in output, and\n             // we've got hyperlinking on our side, so try to avoid longer\n             // notation as much as possible by making `C` a hyperlink to trait"}, {"sha": "3f929e6d23aea0cedcd5eda3d8aa9256e7a3ae5e", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -1368,6 +1368,8 @@ pub enum TyKind {\n     ObjectSum(P<Ty>, TyParamBounds),\n     /// A type like `for<'a> Foo<&'a Bar>`\n     PolyTraitRef(TyParamBounds),\n+    /// An `impl TraitA+TraitB` type.\n+    ImplTrait(TyParamBounds),\n     /// No-op; kept solely so that we can pretty-print faithfully\n     Paren(P<Ty>),\n     /// Unused for now"}, {"sha": "f550e7d2a0515e1f2da1f7599a1746d9a0bebd93", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -277,7 +277,10 @@ declare_features! (\n     (active, cfg_target_has_atomic, \"1.9.0\", Some(32976)),\n \n     // Allows `..` in tuple (struct) patterns\n-    (active, dotdot_in_tuple_patterns, \"1.10.0\", Some(33627))\n+    (active, dotdot_in_tuple_patterns, \"1.10.0\", Some(33627)),\n+\n+    // Allows `impl Trait` in function return types.\n+    (active, conservative_impl_trait, \"1.12.0\", Some(34511))\n );\n \n declare_features! (\n@@ -952,6 +955,10 @@ impl<'a> Visitor for PostExpansionVisitor<'a> {\n             ast::TyKind::BareFn(ref bare_fn_ty) => {\n                 self.check_abi(bare_fn_ty.abi, ty.span);\n             }\n+            ast::TyKind::ImplTrait(..) => {\n+                gate_feature_post!(&self, conservative_impl_trait, ty.span,\n+                                   \"`impl Trait` is experimental\");\n+            }\n             _ => {}\n         }\n         visit::walk_ty(self, ty)"}, {"sha": "afc990f498e6f824d5502292a77a80f1ec18f778", "filename": "src/libsyntax/fold.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Ffold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Ffold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffold.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -397,6 +397,9 @@ pub fn noop_fold_ty<T: Folder>(t: P<Ty>, fld: &mut T) -> P<Ty> {\n             TyKind::PolyTraitRef(bounds) => {\n                 TyKind::PolyTraitRef(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n             }\n+            TyKind::ImplTrait(bounds) => {\n+                TyKind::ImplTrait(bounds.move_map(|b| fld.fold_ty_param_bound(b)))\n+            }\n             TyKind::Mac(mac) => {\n                 TyKind::Mac(fld.fold_mac(mac))\n             }"}, {"sha": "1b32632a06f4e2b2997df194f7029387231fffa0", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -1051,7 +1051,7 @@ impl<'a> Parser<'a> {\n     pub fn parse_for_in_type(&mut self) -> PResult<'a, TyKind> {\n         /*\n         Parses whatever can come after a `for` keyword in a type.\n-        The `for` has already been consumed.\n+        The `for` hasn't been consumed.\n \n         Deprecated:\n \n@@ -1091,6 +1091,23 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    pub fn parse_impl_trait_type(&mut self) -> PResult<'a, TyKind> {\n+        /*\n+        Parses whatever can come after a `impl` keyword in a type.\n+        The `impl` has already been consumed.\n+        */\n+\n+        let bounds = self.parse_ty_param_bounds(BoundParsingMode::Modified)?;\n+\n+        if !bounds.iter().any(|b| if let TraitTyParamBound(..) = *b { true } else { false }) {\n+            let last_span = self.last_span;\n+            self.span_err(last_span, \"at least one trait must be specified\");\n+        }\n+\n+        Ok(ast::TyKind::ImplTrait(bounds))\n+    }\n+\n+\n     pub fn parse_ty_path(&mut self) -> PResult<'a, TyKind> {\n         Ok(TyKind::Path(None, self.parse_path(PathStyle::Type)?))\n     }\n@@ -1406,6 +1423,8 @@ impl<'a> Parser<'a> {\n             self.parse_borrowed_pointee()?\n         } else if self.check_keyword(keywords::For) {\n             self.parse_for_in_type()?\n+        } else if self.eat_keyword(keywords::Impl) {\n+            self.parse_impl_trait_type()?\n         } else if self.token_is_bare_fn_keyword() {\n             // BARE FUNCTION\n             self.parse_ty_bare_fn(Vec::new())?"}, {"sha": "62e55eb78b72383eda8accaa5bbbec407af72564", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -1018,6 +1018,9 @@ impl<'a> State<'a> {\n             ast::TyKind::PolyTraitRef(ref bounds) => {\n                 try!(self.print_bounds(\"\", &bounds[..]));\n             }\n+            ast::TyKind::ImplTrait(ref bounds) => {\n+                try!(self.print_bounds(\"impl \", &bounds[..]));\n+            }\n             ast::TyKind::FixedLengthVec(ref ty, ref v) => {\n                 try!(word(&mut self.s, \"[\"));\n                 try!(self.print_type(&ty));"}, {"sha": "6d3cdbdc6da7cc414e63de5ef5bcf4f0023ee849", "filename": "src/libsyntax/visit.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f/src%2Flibsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fvisit.rs?ref=f0baec691f9bfcfc70d6f35b1a86f7cf204a7d4f", "patch": "@@ -343,6 +343,9 @@ pub fn walk_ty<V: Visitor>(visitor: &mut V, typ: &Ty) {\n         TyKind::PolyTraitRef(ref bounds) => {\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n         }\n+        TyKind::ImplTrait(ref bounds) => {\n+            walk_list!(visitor, visit_ty_param_bound, bounds);\n+        }\n         TyKind::Typeof(ref expression) => {\n             visitor.visit_expr(expression)\n         }"}]}