{"sha": "018f9347fcc265b21e5269254c50b73ac8c2a3de", "node_id": "C_kwDOAAsO6NoAKDAxOGY5MzQ3ZmNjMjY1YjIxZTUyNjkyNTRjNTBiNzNhYzhjMmEzZGU", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-28T09:40:42Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2022-04-28T09:40:42Z"}, "message": "Update the diagnostic message to match the new span", "tree": {"sha": "ce25046c7a9d2407a18f6073d8f25aa9c8beb30a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ce25046c7a9d2407a18f6073d8f25aa9c8beb30a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/018f9347fcc265b21e5269254c50b73ac8c2a3de", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/018f9347fcc265b21e5269254c50b73ac8c2a3de", "html_url": "https://github.com/rust-lang/rust/commit/018f9347fcc265b21e5269254c50b73ac8c2a3de", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/018f9347fcc265b21e5269254c50b73ac8c2a3de/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bc14b6bea6a410f11a7ea5db84ad753673b78150", "url": "https://api.github.com/repos/rust-lang/rust/commits/bc14b6bea6a410f11a7ea5db84ad753673b78150", "html_url": "https://github.com/rust-lang/rust/commit/bc14b6bea6a410f11a7ea5db84ad753673b78150"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "187df6f7de0ff314197e309f7e6c8642383b289c", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -2227,7 +2227,7 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n             }\n             ObligationCauseCode::RepeatElementCopy { is_const_fn } => {\n                 err.note(\n-                    \"the `Copy` trait is required because the repeated element will be copied\",\n+                    \"the `Copy` trait is required because this value will be copied for each element of the array\",\n                 );\n \n                 if is_const_fn {"}, {"sha": "724bdcd920ab46c12f71adfdbfa347b53fd76939", "filename": "src/test/ui/array-slice-vec/repeat_empty_ok.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Farray-slice-vec%2Frepeat_empty_ok.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n LL |     let headers = [Header{value: &[]}; 128];\n    |                    ^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]\n@@ -16,7 +16,7 @@ error[E0277]: the trait bound `Header<'_>: Copy` is not satisfied\n LL |     let headers = [Header{value: &[0]}; 128];\n    |                    ^^^^^^^^^^^^^^^^^^^ the trait `Copy` is not implemented for `Header<'_>`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Header<'_>` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]"}, {"sha": "5bb35669623671649c292794a1fbe8dccc3a7fd2", "filename": "src/test/ui/const-generics/issues/issue-61336-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336-2.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     [x; { N }]\n    |      ^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {"}, {"sha": "8d9e545b4568975d28182a4f48050adf4c79e1fc", "filename": "src/test/ui/const-generics/issues/issue-61336.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-61336.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `T: Copy` is not satisfied\n LL |     [x; N]\n    |      ^ the trait `Copy` is not implemented for `T`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider restricting type parameter `T`\n    |\n LL | fn g<T: std::marker::Copy, const N: usize>(x: T) -> [T; N] {"}, {"sha": "5306fed225118c0434cc9347cb6d1025d48080cd", "filename": "src/test/ui/consts/const-blocks/fn-call-in-non-const.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ffn-call-in-non-const.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -5,7 +5,7 @@ LL |     let _: [Option<Bar>; 2] = [no_copy(); 2];\n    |                                ^^^^^^^^^ the trait `Copy` is not implemented for `Bar`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n help: consider annotating `Bar` with `#[derive(Copy)]`"}, {"sha": "2e7ff5cb8b32c6da2b879432e3285499e25ed394", "filename": "src/test/ui/consts/const-blocks/migrate-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fmigrate-fail.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -5,7 +5,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]\n@@ -18,7 +18,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]"}, {"sha": "c0d273b5a9a2a14ce9c94c23dce6d12951c2a34e", "filename": "src/test/ui/consts/const-blocks/nll-fail.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Fnll-fail.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -5,7 +5,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]\n@@ -18,7 +18,7 @@ LL |         let arr: [Option<Bar>; 2] = [x; 2];\n    |                                      ^ the trait `Copy` is not implemented for `Bar`\n    |\n    = note: required because of the requirements on the impl of `Copy` for `Option<Bar>`\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Bar` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]"}, {"sha": "ece200ad10b5b4bcbde24dd0e2220b463dc66719", "filename": "src/test/ui/consts/const-blocks/trait-error.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-blocks%2Ftrait-error.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -9,7 +9,7 @@ note: required because of the requirements on the impl of `Copy` for `Foo<String\n    |\n LL | #[derive(Copy, Clone)]\n    |          ^^^^\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n    = note: this error originates in the derive macro `Copy` (in Nightly builds, run with -Z macro-backtrace for more info)"}, {"sha": "9eb7524b5044b3acb1779e3977c7e2e768877f88", "filename": "src/test/ui/consts/const-fn-in-vec.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-in-vec.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `String: Copy` is not satisfied\n LL |     let strings: [String; 5] = [String::new(); 5];\n    |                                 ^^^^^^^^^^^^^ the trait `Copy` is not implemented for `String`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n    = help: consider creating a new `const` item and initializing it with the result of the function call to be used in the repeat position, like `const VAL: Type = const_fn();` and `let x = [VAL; 42];`\n    = help: create an inline `const` block, see RFC #2920 <https://github.com/rust-lang/rfcs/pull/2920> for more information\n "}, {"sha": "36b93616375e03f1deb4c4eabc19f51e91498866", "filename": "src/test/ui/repeat-expr/repeat-to-run-dtor-twice.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/018f9347fcc265b21e5269254c50b73ac8c2a3de/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frepeat-expr%2Frepeat-to-run-dtor-twice.stderr?ref=018f9347fcc265b21e5269254c50b73ac8c2a3de", "patch": "@@ -4,7 +4,7 @@ error[E0277]: the trait bound `Foo: Copy` is not satisfied\n LL |     let _ = [ a; 5 ];\n    |               ^ the trait `Copy` is not implemented for `Foo`\n    |\n-   = note: the `Copy` trait is required because the repeated element will be copied\n+   = note: the `Copy` trait is required because this value will be copied for each element of the array\n help: consider annotating `Foo` with `#[derive(Copy)]`\n    |\n LL | #[derive(Copy)]"}]}