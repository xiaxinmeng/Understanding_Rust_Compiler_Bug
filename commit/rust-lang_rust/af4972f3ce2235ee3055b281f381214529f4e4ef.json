{"sha": "af4972f3ce2235ee3055b281f381214529f4e4ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmNDk3MmYzY2UyMjM1ZWUzMDU1YjI4MWYzODEyMTQ1MjlmNGU0ZWY=", "commit": {"author": {"name": "Marvin L\u00f6bel", "email": "loebel.marvin@gmail.com", "date": "2013-02-02T15:40:42Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-03T23:37:25Z"}, "message": "Fixed `fmt!`, tests, doc-tests.", "tree": {"sha": "a2d0a963e483d20202fab9f7dcdb56cfb6d67352", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a2d0a963e483d20202fab9f7dcdb56cfb6d67352"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/af4972f3ce2235ee3055b281f381214529f4e4ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/af4972f3ce2235ee3055b281f381214529f4e4ef", "html_url": "https://github.com/rust-lang/rust/commit/af4972f3ce2235ee3055b281f381214529f4e4ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/af4972f3ce2235ee3055b281f381214529f4e4ef/comments", "author": {"login": "Kimundi", "id": 2903206, "node_id": "MDQ6VXNlcjI5MDMyMDY=", "avatar_url": "https://avatars.githubusercontent.com/u/2903206?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Kimundi", "html_url": "https://github.com/Kimundi", "followers_url": "https://api.github.com/users/Kimundi/followers", "following_url": "https://api.github.com/users/Kimundi/following{/other_user}", "gists_url": "https://api.github.com/users/Kimundi/gists{/gist_id}", "starred_url": "https://api.github.com/users/Kimundi/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Kimundi/subscriptions", "organizations_url": "https://api.github.com/users/Kimundi/orgs", "repos_url": "https://api.github.com/users/Kimundi/repos", "events_url": "https://api.github.com/users/Kimundi/events{/privacy}", "received_events_url": "https://api.github.com/users/Kimundi/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "98445d95d4615093c5e639f1e966830b99b95d63", "url": "https://api.github.com/repos/rust-lang/rust/commits/98445d95d4615093c5e639f1e966830b99b95d63", "html_url": "https://github.com/rust-lang/rust/commit/98445d95d4615093c5e639f1e966830b99b95d63"}], "stats": {"total": 56, "additions": 31, "deletions": 25}, "files": [{"sha": "34fd7cf25d60d8f3f628708c8aa4079f19971287", "filename": "doc/rust.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -844,7 +844,7 @@ mod quux {\n         pub fn bar() { }\n         pub fn baz() { }\n     }\n-    \n+\n     pub use quux::foo::*;\n }\n ~~~~\n@@ -1242,7 +1242,7 @@ trait Num {\n impl float: Num {\n     static pure fn from_int(n: int) -> float { n as float }\n }\n-let x: float = Num::from_int(42);     \n+let x: float = Num::from_int(42);\n ~~~~\n \n Traits may inherit from other traits. For example, in\n@@ -1615,7 +1615,7 @@ The following are examples of structure expressions:\n ~~~~\n # struct Point { x: float, y: float }\n # struct TuplePoint(float, float);\n-# mod game { pub struct User { name: &str, age: uint, mut score: uint } } \n+# mod game { pub struct User { name: &str, age: uint, mut score: uint } }\n # use game;\n Point {x: 10f, y: 20f};\n TuplePoint(10f, 20f);\n@@ -2812,7 +2812,7 @@ trait Printable {\n }\n \n impl int: Printable {\n-  fn to_str() -> ~str { int::to_str(self, 10) }\n+  fn to_str() -> ~str { int::to_str(self) }\n }\n \n fn print(a: @Printable) {"}, {"sha": "f814970375a7d6d4b5459a0adec33b7ff0f2d01f", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -473,7 +473,7 @@ fn stringifier(channel: &DuplexStream<~str, uint>) {\n     let mut value: uint;\n     loop {\n         value = channel.recv();\n-        channel.send(uint::to_str(value, 10));\n+        channel.send(uint::to_str(value));\n         if value == 0 { break; }\n     }\n }\n@@ -497,7 +497,7 @@ Here is the code for the parent task:\n #     let mut value: uint;\n #     loop {\n #         value = channel.recv();\n-#         channel.send(uint::to_str(value, 10u));\n+#         channel.send(uint::to_str(value));\n #         if value == 0u { break; }\n #     }\n # }"}, {"sha": "30f6a727f0abce1fc85826ac1043b5e68d90ea27", "filename": "src/libcore/num/num.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Flibcore%2Fnum%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Flibcore%2Fnum%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fnum.rs?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -422,6 +422,12 @@ pub pure fn to_str_bytes_common<T: Num Zero One Eq Ord Round Copy>(\n                 buf = buf.slice(0, i + 1);\n             }\n         }\n+    } // If exact and trailing '.', just cut that\n+    else {\n+        let max_i = buf.len() - 1;\n+        if buf[max_i] == '.' as u8 {\n+            buf = buf.slice(0, max_i);\n+        }\n     }\n \n     (buf, false)\n@@ -678,4 +684,4 @@ pub pure fn from_str_common<T: Num Zero One Ord Copy>(\n         ) -> Option<T> {\n     from_str_bytes_common(str::to_bytes(buf), radix, negative,\n                             fractional, special, exponent, empty_zero)\n-}\n\\ No newline at end of file\n+}"}, {"sha": "dd25fc36d2ddf6fb94f2126145f3014535e3a840", "filename": "src/libstd/time.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -926,7 +926,7 @@ mod tests {\n         let s0 = precise_time_s();\n         let ns1 = precise_time_ns();\n \n-        log(debug, ~\"s0=\" + float::to_str(s0, 9u) + ~\" sec\");\n+        log(debug, ~\"s0=\" + float::to_str_digits(s0, 9u) + ~\" sec\");\n         assert s0 > 0.;\n         let ns0 = (s0 * 1000000000.) as u64;\n         log(debug, ~\"ns0=\" + u64::str(ns0) + ~\" ns\");"}, {"sha": "a61d8f01ab7852c2a7e869cd2042954c5fce9ae3", "filename": "src/test/bench/core-map.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Fbench%2Fcore-map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Fbench%2Fcore-map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-map.rs?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -75,12 +75,12 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n         let map = map::HashMap();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 map.insert(s, i);\n             }\n \n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 assert map.get(s) == i;\n             }\n         }\n@@ -90,7 +90,7 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n         let map = map::HashMap();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(rng.next() as uint, 10);\n+                let s = uint::to_str(rng.next() as uint);\n                 map.insert(s, i);\n             }\n         }\n@@ -99,11 +99,11 @@ fn old_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     {\n         let map = map::HashMap();\n         for uint::range(0, num_keys) |i| {\n-            map.insert(uint::to_str(i, 10), i);\n+            map.insert(uint::to_str(i), i);\n         }\n         do timed(&mut results.delete_strings) {\n             for uint::range(0, num_keys) |i| {\n-                assert map.remove(uint::to_str(i, 10));\n+                assert map.remove(uint::to_str(i));\n             }\n         }\n     }\n@@ -151,12 +151,12 @@ fn linear_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results)\n         let mut map = LinearMap::new();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 map.insert(s, i);\n             }\n \n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 assert map.find(&s).unwrap() == &i;\n             }\n         }\n@@ -166,7 +166,7 @@ fn linear_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results)\n         let mut map = LinearMap::new();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(rng.next() as uint, 10);\n+                let s = uint::to_str(rng.next() as uint);\n                 map.insert(s, i);\n             }\n         }\n@@ -175,11 +175,11 @@ fn linear_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results)\n     {\n         let mut map = LinearMap::new();\n         for uint::range(0, num_keys) |i| {\n-            map.insert(uint::to_str(i, 10), i);\n+            map.insert(uint::to_str(i), i);\n         }\n         do timed(&mut results.delete_strings) {\n             for uint::range(0, num_keys) |i| {\n-                assert map.remove(&uint::to_str(i, 10));\n+                assert map.remove(&uint::to_str(i));\n             }\n         }\n     }\n@@ -227,12 +227,12 @@ fn tree_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n         let mut map = TreeMap::new();\n         do timed(&mut results.sequential_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 map.insert(s, i);\n             }\n \n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(i, 10);\n+                let s = uint::to_str(i);\n                 assert map.find(&s).unwrap() == &i;\n             }\n         }\n@@ -242,7 +242,7 @@ fn tree_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n         let mut map = TreeMap::new();\n         do timed(&mut results.random_strings) {\n             for uint::range(0, num_keys) |i| {\n-                let s = uint::to_str(rng.next() as uint, 10);\n+                let s = uint::to_str(rng.next() as uint);\n                 map.insert(s, i);\n             }\n         }\n@@ -251,11 +251,11 @@ fn tree_str_benchmarks(rng: @rand::Rng, num_keys: uint, results: &mut Results) {\n     {\n         let mut map = TreeMap::new();\n         for uint::range(0, num_keys) |i| {\n-            map.insert(uint::to_str(i, 10), i);\n+            map.insert(uint::to_str(i), i);\n         }\n         do timed(&mut results.delete_strings) {\n             for uint::range(0, num_keys) |i| {\n-                assert map.remove(&uint::to_str(i, 10));\n+                assert map.remove(&uint::to_str(i));\n             }\n         }\n     }"}, {"sha": "56f616c6f281524001d8b77d49a18d8c16add766", "filename": "src/test/bench/core-uint-to-str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fcore-uint-to-str.rs?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -21,7 +21,7 @@ fn main() {\n     let n = uint::from_str(args[1]).get();\n \n     for uint::range(0u, n) |i| {\n-        let x = uint::to_str(i, 10u);\n+        let x = uint::to_str(i);\n         log(debug, x);\n     }\n }"}, {"sha": "d7ac91fe75c32cda70df0863de3ca6c94d22717a", "filename": "src/test/run-pass/core-export-f64-sqrt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/af4972f3ce2235ee3055b281f381214529f4e4ef/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-export-f64-sqrt.rs?ref=af4972f3ce2235ee3055b281f381214529f4e4ef", "patch": "@@ -14,5 +14,5 @@ pub fn main() {\n \n     let digits: uint = 10 as uint;\n \n-    ::core::io::println(float::to_str(f64::sqrt(42.0f64) as float, digits));\n+    ::core::io::println(float::to_str_digits(f64::sqrt(42.0f64) as float, digits));\n }"}]}