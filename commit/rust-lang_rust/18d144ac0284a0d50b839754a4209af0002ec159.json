{"sha": "18d144ac0284a0d50b839754a4209af0002ec159", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4ZDE0NGFjMDI4NGEwZDUwYjgzOTc1NGE0MjA5YWYwMDAyZWMxNTk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-16T18:25:16Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2015-01-22T00:16:22Z"}, "message": "Implement unused features check", "tree": {"sha": "05b882069de64cd257e8fe3856c2458d79f1c114", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/05b882069de64cd257e8fe3856c2458d79f1c114"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/18d144ac0284a0d50b839754a4209af0002ec159", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/18d144ac0284a0d50b839754a4209af0002ec159", "html_url": "https://github.com/rust-lang/rust/commit/18d144ac0284a0d50b839754a4209af0002ec159", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/18d144ac0284a0d50b839754a4209af0002ec159/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62c37eb8d8fca4fb8924f56c8a5bd56338d5bb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62c37eb8d8fca4fb8924f56c8a5bd56338d5bb4", "html_url": "https://github.com/rust-lang/rust/commit/e62c37eb8d8fca4fb8924f56c8a5bd56338d5bb4"}], "stats": {"total": 42, "additions": 25, "deletions": 17}, "files": [{"sha": "8acf8b1032fa876862b4aa1cfbaaba8f67cd8558", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=18d144ac0284a0d50b839754a4209af0002ec159", "patch": "@@ -1734,9 +1734,9 @@ declare_lint! {\n }\n \n declare_lint! {\n-    pub UNKNOWN_FEATURES,\n+    pub UNUSED_FEATURES,\n     Deny,\n-    \"unknown features found in crate-level #[feature] directives\"\n+    \"unused or unknown features found in crate-level #[feature] directives\"\n }\n \n declare_lint! {\n@@ -1780,7 +1780,7 @@ impl LintPass for HardwiredLints {\n             DEAD_CODE,\n             UNREACHABLE_CODE,\n             WARNINGS,\n-            UNKNOWN_FEATURES,\n+            UNUSED_FEATURES,\n             UNKNOWN_CRATE_TYPES,\n             VARIANT_SIZE_DIFFERENCES,\n             FAT_PTR_TRANSMUTES"}, {"sha": "2682df8b2ab53da22299af66e5a0db2968d5600d", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=18d144ac0284a0d50b839754a4209af0002ec159", "patch": "@@ -257,6 +257,7 @@ impl LintStore {\n         self.register_renamed(\"transmute_fat_ptr\", \"fat_ptr_transmutes\");\n         self.register_renamed(\"raw_pointer_deriving\", \"raw_pointer_derive\");\n \n+        self.register_renamed(\"unknown_features\", \"unused_features\");\n     }\n \n     #[allow(unused_variables)]\n@@ -829,6 +830,5 @@ pub fn check_crate(tcx: &ty::ctxt,\n         }\n     }\n \n-    tcx.sess.abort_if_errors();\n     *tcx.node_lint_levels.borrow_mut() = cx.node_levels.into_inner();\n }"}, {"sha": "b1f6a19ea3ede633822f8bf553091f378b4a4cdd", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=18d144ac0284a0d50b839754a4209af0002ec159", "patch": "@@ -12,6 +12,7 @@\n //! propagating default levels lexically from parent to children ast nodes.\n \n use session::Session;\n+use lint;\n use middle::ty;\n use metadata::csearch;\n use syntax::parse::token::InternedString;\n@@ -25,7 +26,7 @@ use syntax::ast_util::is_local;\n use syntax::attr::{Stability, AttrMetaMethods};\n use syntax::visit::{FnKind, FkMethod, Visitor};\n use syntax::feature_gate::emit_feature_warn;\n-use util::nodemap::{NodeMap, DefIdMap, FnvHashSet};\n+use util::nodemap::{NodeMap, DefIdMap, FnvHashSet, FnvHashMap};\n use util::ppaux::Repr;\n \n use std::mem::replace;\n@@ -418,13 +419,20 @@ pub fn lookup(tcx: &ty::ctxt, id: DefId) -> Option<Stability> {\n /// Given the list of enabled features that were not language features (i.e. that\n /// were expected to be library features), and the list of features used from\n /// libraries, identify activated features that don't exist and error about them.\n-pub fn check_unknown_features(sess: &Session,\n-                              _used_lib_features: &FnvHashSet<InternedString>) {\n-    let ref _lib_features = sess.features.borrow().lib_features;\n-    // TODO\n-\n-    //sess.add_lint(lint::builtin::UNKNOWN_FEATURES,\n-    //              ast::CRATE_NODE_ID,\n-    //              *uf,\n-    //              \"unknown feature\".to_string());\n+pub fn check_unused_features(sess: &Session,\n+                             used_lib_features: &FnvHashSet<InternedString>) {\n+    let ref lib_features = sess.features.borrow().lib_features;\n+    let mut active_lib_features: FnvHashMap<InternedString, Span>\n+        = lib_features.clone().into_iter().collect();\n+\n+    for used_feature in used_lib_features.iter() {\n+        active_lib_features.remove(used_feature);\n+    }\n+\n+    for (_, &span) in active_lib_features.iter() {\n+        sess.add_lint(lint::builtin::UNUSED_FEATURES,\n+                      ast::CRATE_NODE_ID,\n+                      span,\n+                      \"unused or unknown feature\".to_string());\n+    }\n }"}, {"sha": "4626c5216bcae199989bf3251b46f834aa99874b", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/18d144ac0284a0d50b839754a4209af0002ec159/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=18d144ac0284a0d50b839754a4209af0002ec159", "patch": "@@ -668,14 +668,14 @@ pub fn phase_3_run_analysis_passes<'tcx>(sess: Session,\n         time(time_passes, \"stability checking\", (), |_|\n              stability::check_unstable_api_usage(&ty_cx));\n \n-    time(time_passes, \"unknown feature checking\", (), |_|\n-         stability::check_unknown_features(\n+    time(time_passes, \"unused feature checking\", (), |_|\n+         stability::check_unused_features(\n              &ty_cx.sess, lib_features_used));\n \n     time(time_passes, \"lint checking\", (), |_|\n          lint::check_crate(&ty_cx, &exported_items));\n \n-    // Some of the above passes generate errors\n+    // The above three passes generate errors w/o aborting\n     ty_cx.sess.abort_if_errors();\n \n     ty::CrateAnalysis {"}]}