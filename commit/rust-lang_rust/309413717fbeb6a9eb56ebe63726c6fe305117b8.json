{"sha": "309413717fbeb6a9eb56ebe63726c6fe305117b8", "node_id": "C_kwDOAAsO6NoAKDMwOTQxMzcxN2ZiZWI2YTllYjU2ZWJlNjM3MjZjNmZlMzA1MTE3Yjg", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-21T16:04:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-07-21T18:08:07Z"}, "message": "cargo-miri debugging improvements", "tree": {"sha": "b401a63f5ba8fe70330e12dcdb3d6c4ed623148e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b401a63f5ba8fe70330e12dcdb3d6c4ed623148e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/309413717fbeb6a9eb56ebe63726c6fe305117b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/309413717fbeb6a9eb56ebe63726c6fe305117b8", "html_url": "https://github.com/rust-lang/rust/commit/309413717fbeb6a9eb56ebe63726c6fe305117b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/309413717fbeb6a9eb56ebe63726c6fe305117b8/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69a4eaa1871a288968d3fcfa10e9a9612669fd9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/69a4eaa1871a288968d3fcfa10e9a9612669fd9c", "html_url": "https://github.com/rust-lang/rust/commit/69a4eaa1871a288968d3fcfa10e9a9612669fd9c"}], "stats": {"total": 103, "additions": 57, "deletions": 46}, "files": [{"sha": "113b0c04a3ae213123ab820ece33d9f9ef957db7", "filename": "cargo-miri/bin.rs", "status": "modified", "additions": 57, "deletions": 46, "changes": 103, "blob_url": "https://github.com/rust-lang/rust/blob/309413717fbeb6a9eb56ebe63726c6fe305117b8/cargo-miri%2Fbin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/309413717fbeb6a9eb56ebe63726c6fe305117b8/cargo-miri%2Fbin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/cargo-miri%2Fbin.rs?ref=309413717fbeb6a9eb56ebe63726c6fe305117b8", "patch": "@@ -572,7 +572,51 @@ fn local_crates(metadata: &Metadata) -> String {\n     local_crates\n }\n \n-fn phase_cargo_miri(mut args: env::Args) {\n+fn env_vars_from_cmd(cmd: &Command) -> Vec<(String, String)> {\n+    let mut envs = HashMap::new();\n+    for (key, value) in std::env::vars() {\n+        envs.insert(key, value);\n+    }\n+    for (key, value) in cmd.get_envs() {\n+        if let Some(value) = value {\n+            envs.insert(key.to_string_lossy().to_string(), value.to_string_lossy().to_string());\n+        } else {\n+            envs.remove(&key.to_string_lossy().to_string());\n+        }\n+    }\n+    let mut envs: Vec<_> = envs.into_iter().collect();\n+    envs.sort();\n+    envs\n+}\n+\n+/// Debug-print a command that is going to be run.\n+fn debug_cmd(prefix: &str, verbose: usize, cmd: &Command) {\n+    if verbose == 0 {\n+        return;\n+    }\n+    // We only do a single `eprintln!` call to minimize concurrency interactions.\n+    let mut out = prefix.to_string();\n+    writeln!(out, \" running command: env \\\\\").unwrap();\n+    if verbose > 1 {\n+        // Print the full environment this will be called in.\n+        for (key, value) in env_vars_from_cmd(cmd) {\n+            writeln!(out, \"{key}={value:?} \\\\\").unwrap();\n+        }\n+    } else {\n+        // Print only what has been changed for this `cmd`.\n+        for (var, val) in cmd.get_envs() {\n+            if let Some(val) = val {\n+                writeln!(out, \"{}={:?} \\\\\", var.to_string_lossy(), val).unwrap();\n+            } else {\n+                writeln!(out, \"--unset={}\", var.to_string_lossy()).unwrap();\n+            }\n+        }\n+    }\n+    write!(out, \"{cmd:?}\").unwrap();\n+    eprintln!(\"{}\", out);\n+}\n+\n+fn phase_cargo_miri(mut args: impl Iterator<Item = String>) {\n     // Check for version and help flags even when invoked as `cargo-miri`.\n     if has_arg_flag(\"--help\") || has_arg_flag(\"-h\") {\n         show_help();\n@@ -694,18 +738,12 @@ fn phase_cargo_miri(mut args: env::Args) {\n     cmd.env(\"RUSTDOC\", &cargo_miri_path);\n \n     cmd.env(\"MIRI_LOCAL_CRATES\", local_crates(&metadata));\n-\n-    // Run cargo.\n     if verbose > 0 {\n-        eprintln!(\"[cargo-miri miri] RUSTC_WRAPPER={:?}\", cargo_miri_path);\n-        eprintln!(\"[cargo-miri miri] {}={:?}\", target_runner_env_name, cargo_miri_path);\n-        if *target != host {\n-            eprintln!(\"[cargo-miri miri] {}={:?}\", host_runner_env_name, cargo_miri_path);\n-        }\n-        eprintln!(\"[cargo-miri miri] RUSTDOC={:?}\", cargo_miri_path);\n-        eprintln!(\"[cargo-miri miri] {:?}\", cmd);\n         cmd.env(\"MIRI_VERBOSE\", verbose.to_string()); // This makes the other phases verbose.\n     }\n+\n+    // Run cargo.\n+    debug_cmd(\"[cargo-miri miri]\", verbose, &cmd);\n     exec(cmd)\n }\n \n@@ -913,14 +951,8 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n         eprintln!(\n             \"[cargo-miri rustc] target_crate={target_crate} runnable_crate={runnable_crate} print={print}\"\n         );\n-        eprintln!(\"[cargo-miri rustc] going to run:\");\n-        if verbose > 1 {\n-            for (key, value) in env_vars_from_cmd(&cmd) {\n-                eprintln!(\"{key}={value:?} \\\\\");\n-            }\n-        }\n-        eprintln!(\"{:?}\", cmd);\n     }\n+    debug_cmd(\"[cargo-miri rustc]\", verbose, &cmd);\n     exec(cmd);\n \n     // Create a stub .rlib file if \"link\" was requested by cargo.\n@@ -938,23 +970,6 @@ fn phase_rustc(mut args: env::Args, phase: RustcPhase) {\n     }\n }\n \n-fn env_vars_from_cmd(cmd: &Command) -> Vec<(String, String)> {\n-    let mut envs = HashMap::new();\n-    for (key, value) in std::env::vars() {\n-        envs.insert(key, value);\n-    }\n-    for (key, value) in cmd.get_envs() {\n-        if let Some(value) = value {\n-            envs.insert(key.to_str().unwrap().into(), value.to_str().unwrap().to_owned());\n-        } else {\n-            envs.remove(key.to_str().unwrap());\n-        }\n-    }\n-    let mut envs: Vec<_> = envs.into_iter().collect();\n-    envs.sort();\n-    envs\n-}\n-\n #[derive(Debug, Copy, Clone, PartialEq)]\n enum RunnerPhase {\n     /// `cargo` is running a binary\n@@ -963,8 +978,9 @@ enum RunnerPhase {\n     Rustdoc,\n }\n \n-fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n-    let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n+fn phase_runner(binary: &Path, binary_args: impl Iterator<Item = String>, phase: RunnerPhase) {\n+    let verbose = std::env::var(\"MIRI_VERBOSE\")\n+        .map_or(0, |verbose| verbose.parse().expect(\"verbosity flag must be an integer\"));\n \n     let file = File::open(&binary)\n         .unwrap_or_else(|_| show_error(format!(\"file {:?} not found or `cargo-miri` invoked incorrectly; please only invoke this binary through `cargo miri`\", binary)));\n@@ -991,7 +1007,7 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     // Set missing env vars. We prefer build-time env vars over run-time ones; see\n     // <https://github.com/rust-lang/miri/issues/1661> for the kind of issue that fixes.\n     for (name, val) in info.env {\n-        if verbose {\n+        if verbose > 0 {\n             if let Some(old_val) = env::var_os(&name) {\n                 if old_val != val {\n                     eprintln!(\n@@ -1048,18 +1064,16 @@ fn phase_runner(binary: &Path, binary_args: env::Args, phase: RunnerPhase) {\n     cmd.env(\"MIRI_CWD\", env::current_dir().unwrap());\n \n     // Run it.\n-    if verbose {\n-        eprintln!(\"[cargo-miri runner] {:?}\", cmd);\n-    }\n-\n+    debug_cmd(\"[cargo-miri runner]\", verbose, &cmd);\n     match phase {\n         RunnerPhase::Rustdoc => exec_with_pipe(cmd, &info.stdin),\n         RunnerPhase::Cargo => exec(cmd),\n     }\n }\n \n fn phase_rustdoc(fst_arg: &str, mut args: env::Args) {\n-    let verbose = std::env::var_os(\"MIRI_VERBOSE\").is_some();\n+    let verbose = std::env::var(\"MIRI_VERBOSE\")\n+        .map_or(0, |verbose| verbose.parse().expect(\"verbosity flag must be an integer\"));\n \n     // phase_cargo_miri sets the RUSTDOC env var to ourselves, so we can't use that here;\n     // just default to a straight-forward invocation for now:\n@@ -1126,10 +1140,7 @@ fn phase_rustdoc(fst_arg: &str, mut args: env::Args) {\n     cmd.arg(\"--test-builder\").arg(&cargo_miri_path); // invoked by forwarding most arguments\n     cmd.arg(\"--runtool\").arg(&cargo_miri_path); // invoked with just a single path argument\n \n-    if verbose {\n-        eprintln!(\"[cargo-miri rustdoc] {:?}\", cmd);\n-    }\n-\n+    debug_cmd(\"[cargo-miri rustdoc]\", verbose, &cmd);\n     exec(cmd)\n }\n "}]}