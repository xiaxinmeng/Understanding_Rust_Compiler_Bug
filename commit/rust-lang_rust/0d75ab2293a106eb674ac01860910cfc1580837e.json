{"sha": "0d75ab2293a106eb674ac01860910cfc1580837e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkNzVhYjIyOTNhMTA2ZWI2NzRhYzAxODYwOTEwY2ZjMTU4MDgzN2U=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-26T08:58:06Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-06T16:20:06Z"}, "message": "Make constructors actually be const functions", "tree": {"sha": "be914e8f7fae9fb4eb30f22f986e15635a5c74fc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/be914e8f7fae9fb4eb30f22f986e15635a5c74fc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d75ab2293a106eb674ac01860910cfc1580837e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d75ab2293a106eb674ac01860910cfc1580837e", "html_url": "https://github.com/rust-lang/rust/commit/0d75ab2293a106eb674ac01860910cfc1580837e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d75ab2293a106eb674ac01860910cfc1580837e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c9a018b60d1222217645ef4015764fd33b14a3f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c9a018b60d1222217645ef4015764fd33b14a3f", "html_url": "https://github.com/rust-lang/rust/commit/6c9a018b60d1222217645ef4015764fd33b14a3f"}], "stats": {"total": 250, "additions": 237, "deletions": 13}, "files": [{"sha": "56f75e800f2557739c7661595668bebed4f018e1", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -2,35 +2,38 @@ use crate::ty::query::Providers;\n use crate::hir::def_id::DefId;\n use crate::hir;\n use crate::ty::TyCtxt;\n-use syntax_pos::symbol::Symbol;\n+use syntax_pos::symbol::{sym, Symbol};\n use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n \n impl<'a, 'tcx> TyCtxt<'a, 'tcx, 'tcx> {\n     /// Whether the `def_id` counts as const fn in your current crate, considering all active\n     /// feature gates\n     pub fn is_const_fn(self, def_id: DefId) -> bool {\n-        self.is_const_fn_raw(def_id) && match self.lookup_stability(def_id) {\n-            Some(stab) => match stab.const_stability {\n+        self.is_const_fn_raw(def_id) && match self.is_unstable_const_fn(def_id) {\n+            Some(feature_name) => {\n                 // has a `rustc_const_unstable` attribute, check whether the user enabled the\n-                // corresponding feature gate\n-                Some(feature_name) => self.features()\n+                // corresponding feature gate, const_constructor is not a lib feature, so has\n+                // to be checked separately.\n+                self.features()\n                     .declared_lib_features\n                     .iter()\n-                    .any(|&(sym, _)| sym == feature_name),\n-                // the function has no stability attribute, it is stable as const fn or the user\n-                // needs to use feature gates to use the function at all\n-                None => true,\n+                    .any(|&(sym, _)| sym == feature_name)\n+                    || (feature_name == sym::const_constructor\n+                        && self.features().const_constructor)\n             },\n-            // functions without stability are either stable user written const fn or the user is\n-            // using feature gates and we thus don't care what they do\n+            // functions without const stability are either stable user written\n+            // const fn or the user is using feature gates and we thus don't\n+            // care what they do\n             None => true,\n         }\n     }\n \n     /// Whether the `def_id` is an unstable const fn and what feature gate is necessary to enable it\n     pub fn is_unstable_const_fn(self, def_id: DefId) -> Option<Symbol> {\n-        if self.is_const_fn_raw(def_id) {\n+        if self.is_constructor(def_id) {\n+            Some(sym::const_constructor)\n+        } else if self.is_const_fn_raw(def_id) {\n             self.lookup_stability(def_id)?.const_stability\n         } else {\n             None\n@@ -70,8 +73,11 @@ pub fn provide<'tcx>(providers: &mut Providers<'tcx>) {\n         let hir_id = tcx.hir().as_local_hir_id(def_id)\n                               .expect(\"Non-local call to local provider is_const_fn\");\n \n-        if let Some(fn_like) = FnLikeNode::from_node(tcx.hir().get_by_hir_id(hir_id)) {\n+        let node = tcx.hir().get_by_hir_id(hir_id);\n+        if let Some(fn_like) = FnLikeNode::from_node(node) {\n             fn_like.constness() == hir::Constness::Const\n+        } else if let hir::Node::Ctor(_) = node {\n+            true\n         } else {\n             false\n         }"}, {"sha": "e3e327d0a5bd0920d487f4298f9e2771c372f210", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -1167,6 +1167,7 @@ impl<'a, 'tcx> CrateMetadata {\n         let constness = match self.entry(id).kind {\n             EntryKind::Method(data) => data.decode(self).fn_data.constness,\n             EntryKind::Fn(data) => data.decode(self).constness,\n+            EntryKind::Variant(..) | EntryKind::Struct(..) => hir::Constness::Const,\n             _ => hir::Constness::NotConst,\n         };\n         constness == hir::Constness::Const"}, {"sha": "0043b8a1c47c4424f61862fa1c2cb03664cb1b6a", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -560,6 +560,10 @@ declare_features! (\n     // Allows the user of associated type bounds.\n     (active, associated_type_bounds, \"1.34.0\", Some(52662), None),\n \n+    // Allows calling constructor functions in `const fn`\n+    // FIXME Create issue\n+    (active, const_constructor, \"1.37.0\", Some(61456), None),\n+\n     // -------------------------------------------------------------------------\n     // feature-group-end: actual feature gates\n     // -------------------------------------------------------------------------"}, {"sha": "6fac343581427a0d25421f77d6618e1b41a82e86", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -185,6 +185,7 @@ symbols! {\n         conservative_impl_trait,\n         console,\n         const_compare_raw_pointers,\n+        const_constructor,\n         const_fn,\n         const_fn_union,\n         const_generics,"}, {"sha": "f2d2bda53c05380d868cfb6118a15829b15485d6", "filename": "src/test/ui/consts/const_constructor/const-construct-call.rs", "status": "added", "additions": 116, "deletions": 0, "changes": 116, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Fconst-construct-call.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -0,0 +1,116 @@\n+// Test that constructors are considered to be const fns with the required feature.\n+\n+// run-pass\n+\n+// revisions: min_const_fn const_fn\n+\n+#![cfg_attr(const_fn, feature(const_fn))]\n+\n+#![feature(const_constructor)]\n+\n+// Ctor(..) is transformed to Ctor { 0: ... } in HAIR lowering, so directly\n+// calling constructors doesn't require them to be const.\n+\n+type ExternalType = std::panic::AssertUnwindSafe<(Option<i32>, Result<i32, bool>)>;\n+\n+const fn call_external_constructors_in_local_vars() -> ExternalType {\n+    let f = Some;\n+    let g = Err;\n+    let h = std::panic::AssertUnwindSafe;\n+    let x = f(5);\n+    let y = g(false);\n+    let z = h((x, y));\n+    z\n+}\n+\n+const CALL_EXTERNAL_CONSTRUCTORS_IN_LOCAL_VARS: ExternalType = {\n+    let f = Some;\n+    let g = Err;\n+    let h = std::panic::AssertUnwindSafe;\n+    let x = f(5);\n+    let y = g(false);\n+    let z = h((x, y));\n+    z\n+};\n+\n+const fn call_external_constructors_in_temps() -> ExternalType {\n+    let x = { Some }(5);\n+    let y = (*&Err)(false);\n+    let z = [std::panic::AssertUnwindSafe][0]((x, y));\n+    z\n+}\n+\n+const CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS: ExternalType = {\n+    let x = { Some }(5);\n+    let y = (*&Err)(false);\n+    let z = [std::panic::AssertUnwindSafe][0]((x, y));\n+    z\n+};\n+\n+#[derive(Debug, PartialEq)]\n+enum LocalOption<T> {\n+    Some(T),\n+    _None,\n+}\n+\n+#[derive(Debug, PartialEq)]\n+enum LocalResult<T, E> {\n+    _Ok(T),\n+    Err(E),\n+}\n+\n+#[derive(Debug, PartialEq)]\n+struct LocalAssertUnwindSafe<T>(T);\n+\n+type LocalType = LocalAssertUnwindSafe<(LocalOption<i32>, LocalResult<i32, bool>)>;\n+\n+const fn call_local_constructors_in_local_vars() -> LocalType {\n+    let f = LocalOption::Some;\n+    let g = LocalResult::Err;\n+    let h = LocalAssertUnwindSafe;\n+    let x = f(5);\n+    let y = g(false);\n+    let z = h((x, y));\n+    z\n+}\n+\n+const CALL_LOCAL_CONSTRUCTORS_IN_LOCAL_VARS: LocalType = {\n+    let f = LocalOption::Some;\n+    let g = LocalResult::Err;\n+    let h = LocalAssertUnwindSafe;\n+    let x = f(5);\n+    let y = g(false);\n+    let z = h((x, y));\n+    z\n+};\n+\n+const fn call_local_constructors_in_temps() -> LocalType {\n+    let x = { LocalOption::Some }(5);\n+    let y = (*&LocalResult::Err)(false);\n+    let z = [LocalAssertUnwindSafe][0]((x, y));\n+    z\n+}\n+\n+const CALL_LOCAL_CONSTRUCTORS_IN_TEMPS: LocalType = {\n+    let x = { LocalOption::Some }(5);\n+    let y = (*&LocalResult::Err)(false);\n+    let z = [LocalAssertUnwindSafe][0]((x, y));\n+    z\n+};\n+\n+fn main() {\n+    assert_eq!(\n+        (\n+            call_external_constructors_in_local_vars().0,\n+            call_external_constructors_in_temps().0,\n+            call_local_constructors_in_local_vars(),\n+            call_local_constructors_in_temps(),\n+        ),\n+        (\n+            CALL_EXTERNAL_CONSTRUCTORS_IN_LOCAL_VARS.0,\n+            CALL_EXTERNAL_CONSTRUCTORS_IN_TEMPS.0,\n+            CALL_LOCAL_CONSTRUCTORS_IN_LOCAL_VARS,\n+            CALL_LOCAL_CONSTRUCTORS_IN_TEMPS,\n+        )\n+    );\n+}"}, {"sha": "fa4f83ed01e157ff62ee43b000cdc409cd1108f6", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.const_fn.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.const_fn.stderr?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -0,0 +1,34 @@\n+error: `std::prelude::v1::Some` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:9:37\n+   |\n+LL | const EXTERNAL_CONST: Option<i32> = {Some}(1);\n+   |                                     ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `E::V` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:12:24\n+   |\n+LL | const LOCAL_CONST: E = {E::V}(1);\n+   |                        ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `std::prelude::v1::Some` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:17:13\n+   |\n+LL |     let _ = {Some}(1);\n+   |             ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `E::V` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:23:13\n+   |\n+LL |     let _ = {E::V}(1);\n+   |             ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "fa4f83ed01e157ff62ee43b000cdc409cd1108f6", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.min_const_fn.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.min_const_fn.stderr?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -0,0 +1,34 @@\n+error: `std::prelude::v1::Some` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:9:37\n+   |\n+LL | const EXTERNAL_CONST: Option<i32> = {Some}(1);\n+   |                                     ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `E::V` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:12:24\n+   |\n+LL | const LOCAL_CONST: E = {E::V}(1);\n+   |                        ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `std::prelude::v1::Some` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:17:13\n+   |\n+LL |     let _ = {Some}(1);\n+   |             ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: `E::V` is not yet stable as a const fn\n+  --> $DIR/feature-gate-const_constructor.rs:23:13\n+   |\n+LL |     let _ = {E::V}(1);\n+   |             ^^^^^^^^^\n+   |\n+   = help: add `#![feature(const_constructor)]` to the crate attributes to enable\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "b37fd2fd243d1318942e1fb5a2eb1f0af8f1c743", "filename": "src/test/ui/consts/const_constructor/feature-gate-const_constructor.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d75ab2293a106eb674ac01860910cfc1580837e/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst_constructor%2Ffeature-gate-const_constructor.rs?ref=0d75ab2293a106eb674ac01860910cfc1580837e", "patch": "@@ -0,0 +1,28 @@\n+// revisions: min_const_fn const_fn\n+\n+#![cfg_attr(const_fn, feature(const_fn))]\n+\n+enum E {\n+    V(i32),\n+}\n+\n+const EXTERNAL_CONST: Option<i32> = {Some}(1);\n+//[min_const_fn]~^ ERROR is not yet stable as a const fn\n+//[const_fn]~^^ ERROR is not yet stable as a const fn\n+const LOCAL_CONST: E = {E::V}(1);\n+//[min_const_fn]~^ ERROR is not yet stable as a const fn\n+//[const_fn]~^^ ERROR is not yet stable as a const fn\n+\n+const fn external_fn() {\n+    let _ = {Some}(1);\n+    //[min_const_fn]~^ ERROR is not yet stable as a const fn\n+    //[const_fn]~^^ ERROR is not yet stable as a const fn\n+}\n+\n+const fn local_fn() {\n+    let _ = {E::V}(1);\n+    //[min_const_fn]~^ ERROR is not yet stable as a const fn\n+    //[const_fn]~^^ ERROR is not yet stable as a const fn\n+}\n+\n+fn main() {}"}]}