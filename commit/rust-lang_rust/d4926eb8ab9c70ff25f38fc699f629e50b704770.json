{"sha": "d4926eb8ab9c70ff25f38fc699f629e50b704770", "node_id": "C_kwDOAAsO6NoAKGQ0OTI2ZWI4YWI5YzcwZmYyNWYzOGZjNjk5ZjYyOWU1MGI3MDQ3NzA", "commit": {"author": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-09T15:18:06Z"}, "committer": {"name": "Kai Luo", "email": "gluokai@gmail.com", "date": "2023-01-09T15:18:06Z"}, "message": "Move to intepret_cs_action", "tree": {"sha": "02dcef4c0a2571835d87ffa028a82276834ed5f2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02dcef4c0a2571835d87ffa028a82276834ed5f2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4926eb8ab9c70ff25f38fc699f629e50b704770", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4926eb8ab9c70ff25f38fc699f629e50b704770", "html_url": "https://github.com/rust-lang/rust/commit/d4926eb8ab9c70ff25f38fc699f629e50b704770", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4926eb8ab9c70ff25f38fc699f629e50b704770/comments", "author": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bzEq", "id": 3006405, "node_id": "MDQ6VXNlcjMwMDY0MDU=", "avatar_url": "https://avatars.githubusercontent.com/u/3006405?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bzEq", "html_url": "https://github.com/bzEq", "followers_url": "https://api.github.com/users/bzEq/followers", "following_url": "https://api.github.com/users/bzEq/following{/other_user}", "gists_url": "https://api.github.com/users/bzEq/gists{/gist_id}", "starred_url": "https://api.github.com/users/bzEq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bzEq/subscriptions", "organizations_url": "https://api.github.com/users/bzEq/orgs", "repos_url": "https://api.github.com/users/bzEq/repos", "events_url": "https://api.github.com/users/bzEq/events{/privacy}", "received_events_url": "https://api.github.com/users/bzEq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8333e5cf5e4a37852774993a5a2398c8a0891239", "url": "https://api.github.com/repos/rust-lang/rust/commits/8333e5cf5e4a37852774993a5a2398c8a0891239", "html_url": "https://github.com/rust-lang/rust/commit/8333e5cf5e4a37852774993a5a2398c8a0891239"}], "stats": {"total": 41, "additions": 17, "deletions": 24}, "files": [{"sha": "4d114d6167490d3332670838b3bfb49720f79593", "filename": "library/std/src/personality/dwarf/eh.rs", "status": "modified", "additions": 17, "deletions": 24, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/d4926eb8ab9c70ff25f38fc699f629e50b704770/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4926eb8ab9c70ff25f38fc699f629e50b704770/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fpersonality%2Fdwarf%2Feh.rs?ref=d4926eb8ab9c70ff25f38fc699f629e50b704770", "patch": "@@ -95,17 +95,7 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n                     return Ok(EHAction::None);\n                 } else {\n                     let lpad = lpad_base + cs_lpad;\n-                    if cs_action_entry == 0 {\n-                        return Ok(interpret_cs_action(0, lpad));\n-                    } else {\n-                        let action_record =\n-                            (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n-                        let mut action_reader = DwarfReader::new(action_record);\n-                        let ttype_index = action_reader.read_sleb128();\n-                        // Normally, if ttype_index < 0, meaning the catch type is exception specification.\n-                        // Since we only care about if ttype_index is zero, so casting ttype_index to u64 makes sense.\n-                        return Ok(interpret_cs_action(ttype_index as u64, lpad));\n-                    }\n+                    return Ok(interpret_cs_action(action_table as *mut u8, cs_action_entry, lpad));\n                 }\n             }\n         }\n@@ -129,28 +119,31 @@ pub unsafe fn find_eh_action(lsda: *const u8, context: &EHContext<'_>) -> Result\n                 // Can never have null landing pad for sjlj -- that would have\n                 // been indicated by a -1 call site index.\n                 let lpad = (cs_lpad + 1) as usize;\n-                if cs_action_entry == 0 {\n-                    return Ok(interpret_cs_action(0, lpad));\n-                } else {\n-                    let action_record =\n-                        (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n-                    let mut action_reader = DwarfReader::new(action_record);\n-                    let ttype_index = action_reader.read_sleb128();\n-                    return Ok(interpret_cs_action(ttype_index as u64, lpad));\n-                }\n+                return Ok(interpret_cs_action(action_table as *mut u8, cs_action_entry, lpad));\n             }\n         }\n     }\n }\n \n-fn interpret_cs_action(cs_action: u64, lpad: usize) -> EHAction {\n-    if cs_action == 0 {\n+unsafe fn interpret_cs_action(\n+    action_table: *mut u8,\n+    cs_action_entry: u64,\n+    lpad: usize,\n+) -> EHAction {\n+    if cs_action_entry == 0 {\n         // If cs_action is 0 then this is a cleanup (Drop::drop). We run these\n         // for both Rust panics and foreign exceptions.\n         EHAction::Cleanup(lpad)\n     } else {\n-        // Stop unwinding Rust panics at catch_unwind.\n-        EHAction::Catch(lpad)\n+        let action_record = (action_table as *mut u8).offset(cs_action_entry as isize - 1);\n+        let mut action_reader = DwarfReader::new(action_record);\n+        let ttype_index = action_reader.read_sleb128();\n+        if ttype_index == 0 {\n+            EHAction::Cleanup(lpad)\n+        } else {\n+            // Stop unwinding Rust panics at catch_unwind.\n+            EHAction::Catch(lpad)\n+        }\n     }\n }\n "}]}