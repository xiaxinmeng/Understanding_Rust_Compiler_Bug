{"sha": "aae2b245e4c3958ca37d6eaa58b89d955d0b66e7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFhZTJiMjQ1ZTRjMzk1OGNhMzdkNmVhYTU4Yjg5ZDk1NWQwYjY2ZTc=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-01T01:42:13Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-01T02:07:59Z"}, "message": "deduplicate code", "tree": {"sha": "35f7b91c020e26b9c04c9960860acfc08ba14057", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35f7b91c020e26b9c04c9960860acfc08ba14057"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7", "html_url": "https://github.com/rust-lang/rust/commit/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab607edcfe556343aa4fcb3de6229a790fc5e72", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab607edcfe556343aa4fcb3de6229a790fc5e72", "html_url": "https://github.com/rust-lang/rust/commit/cab607edcfe556343aa4fcb3de6229a790fc5e72"}], "stats": {"total": 40, "additions": 17, "deletions": 23}, "files": [{"sha": "63d059bdf2a8081540dbcdd1524ebc43dc52dfd4", "filename": "src/librustc_typeck/check/_match.rs", "status": "modified", "additions": 17, "deletions": 23, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aae2b245e4c3958ca37d6eaa58b89d955d0b66e7/src%2Flibrustc_typeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2F_match.rs?ref=aae2b245e4c3958ca37d6eaa58b89d955d0b66e7", "patch": "@@ -112,36 +112,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n \n             self.diverges.set(pats_diverge);\n-            let arm_ty = if source_if {\n+            let arm_ty = if source_if && if_no_else && i != 0 && self.if_fallback_coercion(\n+                expr.span,\n+                &arms[0].body,\n+                &mut coercion,\n+            ) {\n+                    tcx.types.err\n+            } else {\n+                // Only call this if this is not an `if` expr with an expected type and no `else`\n+                // clause to avoid duplicated type errors. (#60254)\n+                let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n+                all_arms_diverge &= self.diverges.get();\n+                arm_ty\n+            };\n+            if source_if {\n                 let then_expr = &arms[0].body;\n                 match (i, if_no_else) {\n-                    (0, _) => {\n-                        let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n-                        all_arms_diverge &= self.diverges.get();\n-                        coercion.coerce(self, &self.misc(expr.span), &arm.body, arm_ty);\n-                        arm_ty\n-                    }\n-                    (_, true) => {\n-                        if self.if_fallback_coercion(expr.span, then_expr, &mut coercion) {\n-                            tcx.types.err\n-                        } else {\n-                            let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n-                            all_arms_diverge &= self.diverges.get();\n-                            arm_ty\n-                        }\n-                    }\n+                    (0, _) => coercion.coerce(self, &self.misc(expr.span), &arm.body, arm_ty),\n+                    (_, true) => {} // Handled above to avoid duplicated type errors (#60254).\n                     (_, _) => {\n-                        let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n-                        all_arms_diverge &= self.diverges.get();\n                         let then_ty = prior_arm_ty.unwrap();\n                         let cause = self.if_cause(expr.span, then_expr, &arm.body, then_ty, arm_ty);\n                         coercion.coerce(self, &cause, &arm.body, arm_ty);\n-                        arm_ty\n                     }\n                 }\n             } else {\n-                let arm_ty = self.check_expr_with_expectation(&arm.body, expected);\n-                all_arms_diverge &= self.diverges.get();\n                 let arm_span = if let hir::ExprKind::Block(blk, _) = &arm.body.node {\n                     // Point at the block expr instead of the entire block\n                     blk.expr.as_ref().map(|e| e.span).unwrap_or(arm.body.span)\n@@ -166,8 +161,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if other_arms.len() > 5 {\n                     other_arms.remove(0);\n                 }\n-                arm_ty\n-            };\n+            }\n             prior_arm_ty = Some(arm_ty);\n         }\n "}]}