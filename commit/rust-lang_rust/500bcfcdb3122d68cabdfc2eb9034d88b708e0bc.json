{"sha": "500bcfcdb3122d68cabdfc2eb9034d88b708e0bc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwMGJjZmNkYjMxMjJkNjhjYWJkZmMyZWI5MDM0ZDg4YjcwOGUwYmM=", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-13T15:31:38Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2021-03-20T16:22:24Z"}, "message": "update `const_eval_resolve`", "tree": {"sha": "ddbc5dd75de5544a1a6fded261e5705e8c74d938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddbc5dd75de5544a1a6fded261e5705e8c74d938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc", "html_url": "https://github.com/rust-lang/rust/commit/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4a1092b9f21a7dd966d7198846132f3dd17513a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4a1092b9f21a7dd966d7198846132f3dd17513a", "html_url": "https://github.com/rust-lang/rust/commit/e4a1092b9f21a7dd966d7198846132f3dd17513a"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "f4cbfb6967ff35bf92e5954adfcac45a0c0f8fbe", "filename": "src/constant.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/500bcfcdb3122d68cabdfc2eb9034d88b708e0bc/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=500bcfcdb3122d68cabdfc2eb9034d88b708e0bc", "patch": "@@ -45,9 +45,9 @@ pub(crate) fn check_constants(fx: &mut FunctionCx<'_, '_, '_>) -> bool {\n         };\n         match const_.val {\n             ConstKind::Value(_) => {}\n-            ConstKind::Unevaluated(def, ref substs, promoted) => {\n+            ConstKind::Unevaluated(unevaluated) => {\n                 if let Err(err) =\n-                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None)\n+                    fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None)\n                 {\n                     all_constants_ok = false;\n                     match err {\n@@ -122,14 +122,14 @@ pub(crate) fn codegen_constant<'tcx>(\n     };\n     let const_val = match const_.val {\n         ConstKind::Value(const_val) => const_val,\n-        ConstKind::Unevaluated(def, ref substs, promoted) if fx.tcx.is_static(def.did) => {\n+        ConstKind::Unevaluated(ty::Unevaluated { def, substs, promoted }) if fx.tcx.is_static(def.did) => {\n             assert!(substs.is_empty());\n             assert!(promoted.is_none());\n \n             return codegen_static_ref(fx, def.did, fx.layout_of(const_.ty)).to_cvalue(fx);\n         }\n-        ConstKind::Unevaluated(def, ref substs, promoted) => {\n-            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), def, substs, promoted, None) {\n+        ConstKind::Unevaluated(unevaluated) => {\n+            match fx.tcx.const_eval_resolve(ParamEnv::reveal_all(), unevaluated, None) {\n                 Ok(const_val) => const_val,\n                 Err(_) => {\n                     span_bug!(constant.span, \"erroneous constant not captured by required_consts\");"}]}