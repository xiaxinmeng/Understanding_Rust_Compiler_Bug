{"sha": "fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "node_id": "C_kwDOAAsO6NoAKGZiZDBmYjlhZWRiZWUwNmQwZWVmZWVjZDYyYmM3MTA4MzJlMGM0NTc", "commit": {"author": {"name": "Michael Sproul", "email": "michael@sigmaprime.io", "date": "2021-10-07T00:50:14Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-10-07T14:11:47Z"}, "message": "Restriction lint for function pointer casts", "tree": {"sha": "60f3cf4e1efebeb44410917ffa88c4c899402059", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/60f3cf4e1efebeb44410917ffa88c4c899402059"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "html_url": "https://github.com/rust-lang/rust/commit/fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11492c75a39b26c19f3e5655d425b2db8a0b4e00", "url": "https://api.github.com/repos/rust-lang/rust/commits/11492c75a39b26c19f3e5655d425b2db8a0b4e00", "html_url": "https://github.com/rust-lang/rust/commit/11492c75a39b26c19f3e5655d425b2db8a0b4e00"}], "stats": {"total": 258, "additions": 258, "deletions": 0}, "files": [{"sha": "b13a5d760026fd183b76bd9e2b0803cfd30821b4", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -2730,6 +2730,7 @@ Released 2018-09-13\n [`fn_address_comparisons`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_address_comparisons\n [`fn_params_excessive_bools`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_params_excessive_bools\n [`fn_to_numeric_cast`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast\n+[`fn_to_numeric_cast_any`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_any\n [`fn_to_numeric_cast_with_truncation`]: https://rust-lang.github.io/rust-clippy/master/index.html#fn_to_numeric_cast_with_truncation\n [`for_kv_map`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_kv_map\n [`for_loops_over_fallibles`]: https://rust-lang.github.io/rust-clippy/master/index.html#for_loops_over_fallibles"}, {"sha": "03621887a34a67e1771da65174ad9f0cd452f8f5", "filename": "clippy_lints/src/casts/fn_to_numeric_cast_any.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Ffn_to_numeric_cast_any.rs?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -0,0 +1,34 @@\n+use clippy_utils::diagnostics::span_lint_and_sugg;\n+use clippy_utils::source::snippet_with_applicability;\n+use rustc_errors::Applicability;\n+use rustc_hir::Expr;\n+use rustc_lint::LateContext;\n+use rustc_middle::ty::{self, Ty};\n+\n+use super::FN_TO_NUMERIC_CAST_ANY;\n+\n+pub(super) fn check(cx: &LateContext<'_>, expr: &Expr<'_>, cast_expr: &Expr<'_>, cast_from: Ty<'_>, cast_to: Ty<'_>) {\n+    // We allow casts from any function type to any function type.\n+    match cast_to.kind() {\n+        ty::FnDef(..) | ty::FnPtr(..) => return,\n+        _ => { /* continue to checks */ },\n+    }\n+\n+    match cast_from.kind() {\n+        ty::FnDef(..) | ty::FnPtr(_) => {\n+            let mut applicability = Applicability::MaybeIncorrect;\n+            let from_snippet = snippet_with_applicability(cx, cast_expr.span, \"..\", &mut applicability);\n+\n+            span_lint_and_sugg(\n+                cx,\n+                FN_TO_NUMERIC_CAST_ANY,\n+                expr.span,\n+                &format!(\"casting function pointer `{}` to `{}`\", from_snippet, cast_to),\n+                \"did you mean to invoke the function?\",\n+                format!(\"{}() as {}\", from_snippet, cast_to),\n+                applicability,\n+            );\n+        },\n+        _ => {},\n+    }\n+}"}, {"sha": "f0800c6a6f18f788bbb2804b20aaba1b8b362fc6", "filename": "clippy_lints/src/casts/mod.rs", "status": "modified", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fmod.rs?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -7,6 +7,7 @@ mod cast_ref_to_mut;\n mod cast_sign_loss;\n mod char_lit_as_u8;\n mod fn_to_numeric_cast;\n+mod fn_to_numeric_cast_any;\n mod fn_to_numeric_cast_with_truncation;\n mod ptr_as_ptr;\n mod unnecessary_cast;\n@@ -251,6 +252,42 @@ declare_clippy_lint! {\n     \"casting a function pointer to a numeric type not wide enough to store the address\"\n }\n \n+declare_clippy_lint! {\n+    /// ### What it does\n+    /// Checks for casts of a function pointer to any integer type.\n+    ///\n+    /// ### Why is this bad?\n+    /// Casting a function pointer to an integer can have surprising results and can occur\n+    /// accidentally if parantheses are omitted from a function call. If you aren't doing anything\n+    /// low-level with function pointers then you can opt-out of casting functions to integers in\n+    /// order to avoid mistakes. Alternatively, you can use this lint to audit all uses of function\n+    /// pointer casts in your code.\n+    ///\n+    /// ### Example\n+    /// ```rust\n+    /// // Bad: fn1 is cast as `usize`\n+    /// fn fn1() -> u16 {\n+    ///     1\n+    /// };\n+    /// let _ = fn1 as usize;\n+    ///\n+    /// // Good: maybe you intended to call the function?\n+    /// fn fn2() -> u16 {\n+    ///     1\n+    /// };\n+    /// let _ = fn2() as usize;\n+    ///\n+    /// // Good: maybe you intended to cast it to a function type?\n+    /// fn fn3() -> u16 {\n+    ///     1\n+    /// }\n+    /// let _ = fn3 as fn() -> u16;\n+    /// ```\n+    pub FN_TO_NUMERIC_CAST_ANY,\n+    restriction,\n+    \"casting a function pointer to any integer type\"\n+}\n+\n declare_clippy_lint! {\n     /// ### What it does\n     /// Checks for casts of `&T` to `&mut T` anywhere in the code.\n@@ -360,6 +397,7 @@ impl_lint_pass!(Casts => [\n     CAST_REF_TO_MUT,\n     CAST_PTR_ALIGNMENT,\n     UNNECESSARY_CAST,\n+    FN_TO_NUMERIC_CAST_ANY,\n     FN_TO_NUMERIC_CAST,\n     FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     CHAR_LIT_AS_U8,\n@@ -385,6 +423,7 @@ impl<'tcx> LateLintPass<'tcx> for Casts {\n                 return;\n             }\n \n+            fn_to_numeric_cast_any::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast::check(cx, expr, cast_expr, cast_from, cast_to);\n             fn_to_numeric_cast_with_truncation::check(cx, expr, cast_expr, cast_from, cast_to);\n             if cast_from.is_numeric() && cast_to.is_numeric() && !in_external_macro(cx.sess(), expr.span) {"}, {"sha": "3c6d8103b6da01125375ac37405da96a11409224", "filename": "clippy_lints/src/lib.register_lints.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Flib.register_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Flib.register_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_lints.rs?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -67,6 +67,7 @@ store.register_lints(&[\n     casts::CAST_SIGN_LOSS,\n     casts::CHAR_LIT_AS_U8,\n     casts::FN_TO_NUMERIC_CAST,\n+    casts::FN_TO_NUMERIC_CAST_ANY,\n     casts::FN_TO_NUMERIC_CAST_WITH_TRUNCATION,\n     casts::PTR_AS_PTR,\n     casts::UNNECESSARY_CAST,"}, {"sha": "503f4f64a0e2bdcf136ec4c9b0b11d52bc620201", "filename": "clippy_lints/src/lib.register_restriction.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/clippy_lints%2Fsrc%2Flib.register_restriction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.register_restriction.rs?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -8,6 +8,7 @@ store.register_group(true, \"clippy::restriction\", Some(\"clippy_restriction\"), ve\n     LintId::of(as_conversions::AS_CONVERSIONS),\n     LintId::of(asm_syntax::INLINE_ASM_X86_ATT_SYNTAX),\n     LintId::of(asm_syntax::INLINE_ASM_X86_INTEL_SYNTAX),\n+    LintId::of(casts::FN_TO_NUMERIC_CAST_ANY),\n     LintId::of(create_dir::CREATE_DIR),\n     LintId::of(dbg_macro::DBG_MACRO),\n     LintId::of(default_numeric_fallback::DEFAULT_NUMERIC_FALLBACK),"}, {"sha": "46704683926b2c8bae4ea25c538af783f1d9cc6d", "filename": "tests/ui/fn_to_numeric_cast_any.rs", "status": "added", "additions": 76, "deletions": 0, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/tests%2Fui%2Ffn_to_numeric_cast_any.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/tests%2Fui%2Ffn_to_numeric_cast_any.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_any.rs?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -0,0 +1,76 @@\n+#![warn(clippy::fn_to_numeric_cast_any)]\n+#![allow(clippy::fn_to_numeric_cast, clippy::fn_to_numeric_cast_with_truncation)]\n+\n+fn foo() -> u8 {\n+    0\n+}\n+\n+fn generic_foo<T>(x: T) -> T {\n+    x\n+}\n+\n+trait Trait {\n+    fn static_method() -> u32 {\n+        2\n+    }\n+}\n+\n+struct Struct;\n+\n+impl Trait for Struct {}\n+\n+fn fn_pointer_to_integer() {\n+    let _ = foo as i8;\n+    let _ = foo as i16;\n+    let _ = foo as i32;\n+    let _ = foo as i64;\n+    let _ = foo as i128;\n+    let _ = foo as isize;\n+\n+    let _ = foo as u8;\n+    let _ = foo as u16;\n+    let _ = foo as u32;\n+    let _ = foo as u64;\n+    let _ = foo as u128;\n+    let _ = foo as usize;\n+}\n+\n+fn static_method_to_integer() {\n+    let _ = Struct::static_method as usize;\n+}\n+\n+fn fn_with_fn_arg(f: fn(i32) -> u32) -> usize {\n+    f as usize\n+}\n+\n+fn fn_with_generic_static_trait_method<T: Trait>() -> usize {\n+    T::static_method as usize\n+}\n+\n+fn closure_to_fn_to_integer() {\n+    let clos = |x| x * 2_u32;\n+\n+    let _ = (clos as fn(u32) -> u32) as usize;\n+}\n+\n+fn fn_to_raw_ptr() {\n+    let _ = foo as *const ();\n+}\n+\n+fn cast_fn_to_self() {\n+    // Casting to the same function pointer type should be permitted.\n+    let _ = foo as fn() -> u8;\n+}\n+\n+fn cast_generic_to_concrete() {\n+    // Casting to a more concrete function pointer type should be permitted.\n+    let _ = generic_foo as fn(usize) -> usize;\n+}\n+\n+fn cast_closure_to_fn() {\n+    // Casting a closure to a function pointer should be permitted.\n+    let id = |x| x;\n+    let _ = id as fn(usize) -> usize;\n+}\n+\n+fn main() {}"}, {"sha": "a6c4a77672f86116229fec67ec2d58c97b36689a", "filename": "tests/ui/fn_to_numeric_cast_any.stderr", "status": "added", "additions": 106, "deletions": 0, "changes": 106, "blob_url": "https://github.com/rust-lang/rust/blob/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/tests%2Fui%2Ffn_to_numeric_cast_any.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/fbd0fb9aedbee06d0eefeecd62bc710832e0c457/tests%2Fui%2Ffn_to_numeric_cast_any.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ffn_to_numeric_cast_any.stderr?ref=fbd0fb9aedbee06d0eefeecd62bc710832e0c457", "patch": "@@ -0,0 +1,106 @@\n+error: casting function pointer `foo` to `i8`\n+  --> $DIR/fn_to_numeric_cast_any.rs:23:13\n+   |\n+LL |     let _ = foo as i8;\n+   |             ^^^^^^^^^ help: did you mean to invoke the function?: `foo() as i8`\n+   |\n+   = note: `-D clippy::fn-to-numeric-cast-any` implied by `-D warnings`\n+\n+error: casting function pointer `foo` to `i16`\n+  --> $DIR/fn_to_numeric_cast_any.rs:24:13\n+   |\n+LL |     let _ = foo as i16;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as i16`\n+\n+error: casting function pointer `foo` to `i32`\n+  --> $DIR/fn_to_numeric_cast_any.rs:25:13\n+   |\n+LL |     let _ = foo as i32;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as i32`\n+\n+error: casting function pointer `foo` to `i64`\n+  --> $DIR/fn_to_numeric_cast_any.rs:26:13\n+   |\n+LL |     let _ = foo as i64;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as i64`\n+\n+error: casting function pointer `foo` to `i128`\n+  --> $DIR/fn_to_numeric_cast_any.rs:27:13\n+   |\n+LL |     let _ = foo as i128;\n+   |             ^^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as i128`\n+\n+error: casting function pointer `foo` to `isize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:28:13\n+   |\n+LL |     let _ = foo as isize;\n+   |             ^^^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as isize`\n+\n+error: casting function pointer `foo` to `u8`\n+  --> $DIR/fn_to_numeric_cast_any.rs:30:13\n+   |\n+LL |     let _ = foo as u8;\n+   |             ^^^^^^^^^ help: did you mean to invoke the function?: `foo() as u8`\n+\n+error: casting function pointer `foo` to `u16`\n+  --> $DIR/fn_to_numeric_cast_any.rs:31:13\n+   |\n+LL |     let _ = foo as u16;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as u16`\n+\n+error: casting function pointer `foo` to `u32`\n+  --> $DIR/fn_to_numeric_cast_any.rs:32:13\n+   |\n+LL |     let _ = foo as u32;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as u32`\n+\n+error: casting function pointer `foo` to `u64`\n+  --> $DIR/fn_to_numeric_cast_any.rs:33:13\n+   |\n+LL |     let _ = foo as u64;\n+   |             ^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as u64`\n+\n+error: casting function pointer `foo` to `u128`\n+  --> $DIR/fn_to_numeric_cast_any.rs:34:13\n+   |\n+LL |     let _ = foo as u128;\n+   |             ^^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as u128`\n+\n+error: casting function pointer `foo` to `usize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:35:13\n+   |\n+LL |     let _ = foo as usize;\n+   |             ^^^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as usize`\n+\n+error: casting function pointer `Struct::static_method` to `usize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:39:13\n+   |\n+LL |     let _ = Struct::static_method as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean to invoke the function?: `Struct::static_method() as usize`\n+\n+error: casting function pointer `f` to `usize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:43:5\n+   |\n+LL |     f as usize\n+   |     ^^^^^^^^^^ help: did you mean to invoke the function?: `f() as usize`\n+\n+error: casting function pointer `T::static_method` to `usize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:47:5\n+   |\n+LL |     T::static_method as usize\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean to invoke the function?: `T::static_method() as usize`\n+\n+error: casting function pointer `(clos as fn(u32) -> u32)` to `usize`\n+  --> $DIR/fn_to_numeric_cast_any.rs:53:13\n+   |\n+LL |     let _ = (clos as fn(u32) -> u32) as usize;\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: did you mean to invoke the function?: `(clos as fn(u32) -> u32)() as usize`\n+\n+error: casting function pointer `foo` to `*const ()`\n+  --> $DIR/fn_to_numeric_cast_any.rs:57:13\n+   |\n+LL |     let _ = foo as *const ();\n+   |             ^^^^^^^^^^^^^^^^ help: did you mean to invoke the function?: `foo() as *const ()`\n+\n+error: aborting due to 17 previous errors\n+"}]}