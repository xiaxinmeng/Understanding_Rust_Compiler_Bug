{"sha": "b5b5b5471ba324f6b4d5a53957a800ad44126964", "node_id": "C_kwDOAAsO6NoAKGI1YjViNTQ3MWJhMzI0ZjZiNGQ1YTUzOTU3YTgwMGFkNDQxMjY5NjQ", "commit": {"author": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-05T04:05:50Z"}, "committer": {"name": "Aaron Kofsky", "email": "aaronko@umich.edu", "date": "2022-06-05T04:05:50Z"}, "message": "Remove `let_underscore_must_use`\n\nThe `let_underscore_must_use` lint was really only added because clippy\nincluded it, but it doesn't actually seem very useful.", "tree": {"sha": "85a474c7a2c1bd87782839f47a62361e0cfbfad6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85a474c7a2c1bd87782839f47a62361e0cfbfad6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b5b5b5471ba324f6b4d5a53957a800ad44126964", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b5b5b5471ba324f6b4d5a53957a800ad44126964", "html_url": "https://github.com/rust-lang/rust/commit/b5b5b5471ba324f6b4d5a53957a800ad44126964", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b5b5b5471ba324f6b4d5a53957a800ad44126964/comments", "author": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "committer": {"login": "a2aaron", "id": 15718048, "node_id": "MDQ6VXNlcjE1NzE4MDQ4", "avatar_url": "https://avatars.githubusercontent.com/u/15718048?v=4", "gravatar_id": "", "url": "https://api.github.com/users/a2aaron", "html_url": "https://github.com/a2aaron", "followers_url": "https://api.github.com/users/a2aaron/followers", "following_url": "https://api.github.com/users/a2aaron/following{/other_user}", "gists_url": "https://api.github.com/users/a2aaron/gists{/gist_id}", "starred_url": "https://api.github.com/users/a2aaron/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/a2aaron/subscriptions", "organizations_url": "https://api.github.com/users/a2aaron/orgs", "repos_url": "https://api.github.com/users/a2aaron/repos", "events_url": "https://api.github.com/users/a2aaron/events{/privacy}", "received_events_url": "https://api.github.com/users/a2aaron/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5", "html_url": "https://github.com/rust-lang/rust/commit/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5"}], "stats": {"total": 158, "additions": 3, "deletions": 155}, "files": [{"sha": "dea878c4460b963dfd851e8be75c7843e3cd9512", "filename": "compiler/rustc_lint/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 103, "changes": 105, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5b5471ba324f6b4d5a53957a800ad44126964/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5b5471ba324f6b4d5a53957a800ad44126964/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flet_underscore.rs?ref=b5b5b5471ba324f6b4d5a53957a800ad44126964", "patch": "@@ -1,10 +1,7 @@\n use crate::{LateContext, LateLintPass, LintContext};\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n-use rustc_middle::{\n-    lint::LintDiagnosticBuilder,\n-    ty::{self, Ty},\n-};\n+use rustc_middle::{lint::LintDiagnosticBuilder, ty};\n use rustc_span::Symbol;\n \n declare_lint! {\n@@ -87,32 +84,7 @@ declare_lint! {\n     \"non-binding let on a synchronization lock\"\n }\n \n-declare_lint! {\n-    /// The `let_underscore_must_use` lint checks for statements which don't bind\n-    /// a `must_use` expression to anything, causing the lock to be released\n-    /// immediately instead of at end of scope, which is typically incorrect.\n-    ///\n-    /// ### Example\n-    /// ```rust\n-    /// #[must_use]\n-    /// struct SomeStruct;\n-    ///\n-    /// fn main() {\n-    ///     // SomeStuct is dropped immediately instead of at end of scope.\n-    ///     let _ = SomeStruct;\n-    /// }\n-    /// ```\n-    /// ### Explanation\n-    ///\n-    /// Statements which assign an expression to an underscore causes the\n-    /// expression to immediately drop. Usually, it's better to explicitly handle\n-    /// the `must_use` expression.\n-    pub LET_UNDERSCORE_MUST_USE,\n-    Allow,\n-    \"non-binding let on a expression marked `must_use`\"\n-}\n-\n-declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK, LET_UNDERSCORE_MUST_USE]);\n+declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK]);\n \n const SYNC_GUARD_SYMBOLS: [Symbol; 3] = [\n     rustc_span::sym::MutexGuard,\n@@ -138,8 +110,6 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                     .any(|guard_symbol| cx.tcx.is_diagnostic_item(*guard_symbol, adt.did())),\n                 _ => false,\n             };\n-            let is_must_use_ty = is_must_use_ty(cx, cx.typeck_results().expr_ty(init));\n-            let is_must_use_func_call = is_must_use_func_call(cx, init);\n \n             if is_sync_lock {\n                 cx.struct_span_lint(LET_UNDERSCORE_LOCK, local.span, |lint| {\n@@ -150,15 +120,6 @@ impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n                         \"non-binding let on a synchronization lock\",\n                     )\n                 })\n-            } else if is_must_use_ty || is_must_use_func_call {\n-                cx.struct_span_lint(LET_UNDERSCORE_MUST_USE, local.span, |lint| {\n-                    build_and_emit_lint(\n-                        lint,\n-                        local,\n-                        init.span,\n-                        \"non-binding let on a expression marked `must_use`\",\n-                    );\n-                })\n             } else {\n                 cx.struct_span_lint(LET_UNDERSCORE_DROP, local.span, |lint| {\n                     build_and_emit_lint(\n@@ -194,65 +155,3 @@ fn build_and_emit_lint(\n         )\n         .emit();\n }\n-\n-// return true if `ty` is a type that is marked as `must_use`\n-fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n-    match ty.kind() {\n-        ty::Adt(adt, _) => has_must_use_attr(cx, adt.did()),\n-        ty::Foreign(ref did) => has_must_use_attr(cx, *did),\n-        ty::Slice(ty)\n-        | ty::Array(ty, _)\n-        | ty::RawPtr(ty::TypeAndMut { ty, .. })\n-        | ty::Ref(_, ty, _) => {\n-            // for the Array case we don't need to care for the len == 0 case\n-            // because we don't want to lint functions returning empty arrays\n-            is_must_use_ty(cx, *ty)\n-        }\n-        ty::Tuple(substs) => substs.iter().any(|ty| is_must_use_ty(cx, ty)),\n-        ty::Opaque(ref def_id, _) => {\n-            for (predicate, _) in cx.tcx.explicit_item_bounds(*def_id) {\n-                if let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() {\n-                    if has_must_use_attr(cx, trait_predicate.trait_ref.def_id) {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        }\n-        ty::Dynamic(binder, _) => {\n-            for predicate in binder.iter() {\n-                if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n-                    if has_must_use_attr(cx, trait_ref.def_id) {\n-                        return true;\n-                    }\n-                }\n-            }\n-            false\n-        }\n-        _ => false,\n-    }\n-}\n-\n-// check if expr is calling method or function with #[must_use] attribute\n-fn is_must_use_func_call(cx: &LateContext<'_>, expr: &hir::Expr<'_>) -> bool {\n-    let did = match expr.kind {\n-                hir::ExprKind::Call(path, _) if let hir::ExprKind::Path(ref qpath) = path.kind => {\n-                    if let hir::def::Res::Def(_, did) = cx.qpath_res(qpath, path.hir_id) {\n-                        Some(did)\n-                    } else {\n-                        None\n-                    }\n-                },\n-                hir::ExprKind::MethodCall(..) => {\n-                    cx.typeck_results().type_dependent_def_id(expr.hir_id)\n-                }\n-                _ => None,\n-            };\n-\n-    did.map_or(false, |did| has_must_use_attr(cx, did))\n-}\n-\n-// returns true if DefId contains a `#[must_use]` attribute\n-fn has_must_use_attr(cx: &LateContext<'_>, did: hir::def_id::DefId) -> bool {\n-    cx.tcx.has_attr(did, rustc_span::sym::must_use)\n-}"}, {"sha": "79661c0fefe8d4305a84da6c9f1664a9bbdc0650", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b5b5b5471ba324f6b4d5a53957a800ad44126964/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b5b5b5471ba324f6b4d5a53957a800ad44126964/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=b5b5b5471ba324f6b4d5a53957a800ad44126964", "patch": "@@ -317,12 +317,7 @@ fn register_builtins(store: &mut LintStore, no_interleave_lints: bool) {\n         REDUNDANT_SEMICOLONS\n     );\n \n-    add_lint_group!(\n-        \"let_underscore\",\n-        LET_UNDERSCORE_DROP,\n-        LET_UNDERSCORE_LOCK,\n-        LET_UNDERSCORE_MUST_USE\n-    );\n+    add_lint_group!(\"let_underscore\", LET_UNDERSCORE_DROP, LET_UNDERSCORE_LOCK);\n \n     add_lint_group!(\n         \"rust_2018_idioms\","}, {"sha": "3f79dc7a096b63cef1a718a3bf86d488ae4df40b", "filename": "src/test/ui/lint/let_underscore/let_underscore_must_use.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.rs?ref=11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5", "patch": "@@ -1,13 +0,0 @@\n-// check-pass\n-// compile-flags: -W let_underscore_must_use\n-\n-#[must_use]\n-struct MustUseType;\n-\n-#[must_use]\n-fn must_use_function() -> () {}\n-\n-fn main() {\n-    let _ = MustUseType; //~WARNING non-binding let on a expression marked `must_use`\n-    let _ = must_use_function(); //~WARNING non-binding let on a expression marked `must_use`\n-}"}, {"sha": "959572edd7c0da419c639d8629f6929c928e653a", "filename": "src/test/ui/lint/let_underscore/let_underscore_must_use.stderr", "status": "removed", "additions": 0, "deletions": 33, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flet_underscore%2Flet_underscore_must_use.stderr?ref=11663b1d78cd4e9bc68cf13e55ee73189f1d1cf5", "patch": "@@ -1,33 +0,0 @@\n-warning: non-binding let on a expression marked `must_use`\n-  --> $DIR/let_underscore_must_use.rs:11:5\n-   |\n-LL |     let _ = MustUseType;\n-   |     ^^^^^^^^^^^^^^^^^^^^\n-   |\n-   = note: requested on the command line with `-W let-underscore-must-use`\n-help: consider binding to an unused variable\n-   |\n-LL |     let _unused = MustUseType;\n-   |         ~~~~~~~\n-help: consider explicitly droping with `std::mem::drop`\n-   |\n-LL |     let _ = drop(...);\n-   |             ~~~~~~~~~\n-\n-warning: non-binding let on a expression marked `must_use`\n-  --> $DIR/let_underscore_must_use.rs:12:5\n-   |\n-LL |     let _ = must_use_function();\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-   |\n-help: consider binding to an unused variable\n-   |\n-LL |     let _unused = must_use_function();\n-   |         ~~~~~~~\n-help: consider explicitly droping with `std::mem::drop`\n-   |\n-LL |     let _ = drop(...);\n-   |             ~~~~~~~~~\n-\n-warning: 2 warnings emitted\n-"}]}