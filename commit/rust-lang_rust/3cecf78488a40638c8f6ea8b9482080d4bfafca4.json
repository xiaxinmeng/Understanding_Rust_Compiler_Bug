{"sha": "3cecf78488a40638c8f6ea8b9482080d4bfafca4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjZWNmNzg0ODhhNDA2MzhjOGY2ZWE4Yjk0ODIwODBkNGJmYWZjYTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:18:40Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-11-09T12:18:40Z"}, "message": "More consistent naming", "tree": {"sha": "2370ce0d4aa5e93b99878ba548cb9694a8921509", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2370ce0d4aa5e93b99878ba548cb9694a8921509"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cecf78488a40638c8f6ea8b9482080d4bfafca4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cecf78488a40638c8f6ea8b9482080d4bfafca4", "html_url": "https://github.com/rust-lang/rust/commit/3cecf78488a40638c8f6ea8b9482080d4bfafca4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cecf78488a40638c8f6ea8b9482080d4bfafca4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/29bf6bed9b65691a54a72f83c6cf3be40ae558e8", "html_url": "https://github.com/rust-lang/rust/commit/29bf6bed9b65691a54a72f83c6cf3be40ae558e8"}], "stats": {"total": 162, "additions": 81, "deletions": 81}, "files": [{"sha": "e08981f89c029f3fee1012a43e3898e51d9a3169", "filename": "crates/assists/src/handlers/wrap_return_type_in_result.rs", "status": "renamed", "additions": 66, "deletions": 66, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fwrap_return_type_in_result.rs?ref=3cecf78488a40638c8f6ea8b9482080d4bfafca4", "patch": "@@ -8,9 +8,9 @@ use test_utils::mark;\n \n use crate::{AssistContext, AssistId, AssistKind, Assists};\n \n-// Assist: change_return_type_to_result\n+// Assist: wrap_return_type_in_result\n //\n-// Change the function's return type to Result.\n+// Wrap the function's return type into Result.\n //\n // ```\n // fn foo() -> i32<|> { 42i32 }\n@@ -19,7 +19,7 @@ use crate::{AssistContext, AssistId, AssistKind, Assists};\n // ```\n // fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n // ```\n-pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+pub(crate) fn wrap_return_type_in_result(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n     let ret_type = ctx.find_node_at_offset::<ast::RetType>()?;\n     let parent = ret_type.syntax().parent()?;\n     let block_expr = match_ast! {\n@@ -39,13 +39,13 @@ pub(crate) fn change_return_type_to_result(acc: &mut Assists, ctx: &AssistContex\n     let first_part_ret_type = ret_type_str.splitn(2, '<').next();\n     if let Some(ret_type_first_part) = first_part_ret_type {\n         if ret_type_first_part.ends_with(\"Result\") {\n-            mark::hit!(change_return_type_to_result_simple_return_type_already_result);\n+            mark::hit!(wrap_return_type_in_result_simple_return_type_already_result);\n             return None;\n         }\n     }\n \n     acc.add(\n-        AssistId(\"change_return_type_to_result\", AssistKind::RefactorRewrite),\n+        AssistId(\"wrap_return_type_in_result\", AssistKind::RefactorRewrite),\n         \"Wrap return type in Result\",\n         type_ref.syntax().text_range(),\n         |builder| {\n@@ -278,9 +278,9 @@ mod tests {\n     use super::*;\n \n     #[test]\n-    fn change_return_type_to_result_simple() {\n+    fn wrap_return_type_in_result_simple() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i3<|>2 {\n                 let test = \"test\";\n                 return 42i32;\n@@ -293,9 +293,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_closure() {\n+    fn wrap_return_type_in_result_simple_closure() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -> i32<|> {\n                     let test = \"test\";\n@@ -312,9 +312,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type_bad_cursor() {\n+    fn wrap_return_type_in_result_simple_return_type_bad_cursor() {\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32 {\n                 let test = \"test\";<|>\n                 return 42i32;\n@@ -323,9 +323,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type_bad_cursor_closure() {\n+    fn wrap_return_type_in_result_simple_return_type_bad_cursor_closure() {\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -> i32 {\n                     let test = \"test\";<|>\n@@ -336,19 +336,19 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_closure_non_block() {\n+    fn wrap_return_type_in_result_closure_non_block() {\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -> i<|>32 3;\n             }\"#,\n         );\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type_already_result_std() {\n+    fn wrap_return_type_in_result_simple_return_type_already_result_std() {\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> std::result::Result<i32<|>, String> {\n                 let test = \"test\";\n                 return 42i32;\n@@ -357,10 +357,10 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type_already_result() {\n-        mark::check!(change_return_type_to_result_simple_return_type_already_result);\n+    fn wrap_return_type_in_result_simple_return_type_already_result() {\n+        mark::check!(wrap_return_type_in_result_simple_return_type_already_result);\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> Result<i32<|>, String> {\n                 let test = \"test\";\n                 return 42i32;\n@@ -369,9 +369,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_return_type_already_result_closure() {\n+    fn wrap_return_type_in_result_simple_return_type_already_result_closure() {\n         check_assist_not_applicable(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -> Result<i32<|>, String> {\n                     let test = \"test\";\n@@ -382,9 +382,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_cursor() {\n+    fn wrap_return_type_in_result_simple_with_cursor() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> <|>i32 {\n                 let test = \"test\";\n                 return 42i32;\n@@ -397,9 +397,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail() {\n+    fn wrap_return_type_in_result_simple_with_tail() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -><|> i32 {\n                 let test = \"test\";\n                 42i32\n@@ -412,9 +412,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_closure() {\n+    fn wrap_return_type_in_result_simple_with_tail_closure() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -><|> i32 {\n                     let test = \"test\";\n@@ -431,9 +431,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_only() {\n+    fn wrap_return_type_in_result_simple_with_tail_only() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 42i32\n             }\"#,\n@@ -444,9 +444,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_block_like() {\n+    fn wrap_return_type_in_result_simple_with_tail_block_like() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 if true {\n                     42i32\n@@ -465,9 +465,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_without_block_closure() {\n+    fn wrap_return_type_in_result_simple_without_block_closure() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() {\n                 || -> i32<|> {\n                     if true {\n@@ -490,9 +490,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_nested_if() {\n+    fn wrap_return_type_in_result_simple_with_nested_if() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 if true {\n                     if false {\n@@ -519,9 +519,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_await() {\n+    fn wrap_return_type_in_result_simple_with_await() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"async fn foo() -> i<|>32 {\n                 if true {\n                     if false {\n@@ -548,9 +548,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_array() {\n+    fn wrap_return_type_in_result_simple_with_array() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> [i32;<|> 3] {\n                 [1, 2, 3]\n             }\"#,\n@@ -561,9 +561,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_cast() {\n+    fn wrap_return_type_in_result_simple_with_cast() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -<|>> i32 {\n                 if true {\n                     if false {\n@@ -590,9 +590,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_block_like_match() {\n+    fn wrap_return_type_in_result_simple_with_tail_block_like_match() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = 5;\n                 match my_var {\n@@ -611,9 +611,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_loop_with_tail() {\n+    fn wrap_return_type_in_result_simple_with_loop_with_tail() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = 5;\n                 loop {\n@@ -636,9 +636,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_loop_in_let_stmt() {\n+    fn wrap_return_type_in_result_simple_with_loop_in_let_stmt() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = let x = loop {\n                     break 1;\n@@ -657,9 +657,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_block_like_match_return_expr() {\n+    fn wrap_return_type_in_result_simple_with_tail_block_like_match_return_expr() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = 5;\n                 let res = match my_var {\n@@ -681,7 +681,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = 5;\n                 let res = if my_var == 5 {\n@@ -706,9 +706,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_block_like_match_deeper() {\n+    fn wrap_return_type_in_result_simple_with_tail_block_like_match_deeper() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let my_var = 5;\n                 match my_var {\n@@ -751,9 +751,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_tail_block_like_early_return() {\n+    fn wrap_return_type_in_result_simple_with_tail_block_like_early_return() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i<|>32 {\n                 let test = \"test\";\n                 if test == \"test\" {\n@@ -772,9 +772,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_closure() {\n+    fn wrap_return_type_in_result_simple_with_closure() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -><|> u32 {\n                 let true_closure = || {\n                     return true;\n@@ -812,7 +812,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -> u32<|> {\n                 let true_closure = || {\n                     return true;\n@@ -853,9 +853,9 @@ mod tests {\n     }\n \n     #[test]\n-    fn change_return_type_to_result_simple_with_weird_forms() {\n+    fn wrap_return_type_in_result_simple_with_weird_forms() {\n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let test = \"test\";\n                 if test == \"test\" {\n@@ -885,7 +885,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i32<|> {\n                 let test = \"test\";\n                 if test == \"test\" {\n@@ -919,7 +919,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo() -> i3<|>2 {\n                 let test = \"test\";\n                 let other = 5;\n@@ -961,7 +961,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -> u32<|> {\n                 if the_field < 5 {\n                     let mut i = 0;\n@@ -1001,7 +1001,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -> u3<|>2 {\n                 if the_field < 5 {\n                     let mut i = 0;\n@@ -1029,7 +1029,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -> u32<|> {\n                 if the_field < 5 {\n                     let mut i = 0;\n@@ -1059,7 +1059,7 @@ mod tests {\n         );\n \n         check_assist(\n-            change_return_type_to_result,\n+            wrap_return_type_in_result,\n             r#\"fn foo(the_field: u32) -> <|>u32 {\n                 if the_field < 5 {\n                     let mut i = 0;", "previous_filename": "crates/assists/src/handlers/change_return_type_to_result.rs"}, {"sha": "e8d81b33d76e833428d9c2215596192142466180", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=3cecf78488a40638c8f6ea8b9482080d4bfafca4", "patch": "@@ -125,7 +125,6 @@ mod handlers {\n     mod add_turbo_fish;\n     mod apply_demorgan;\n     mod auto_import;\n-    mod change_return_type_to_result;\n     mod change_visibility;\n     mod convert_integer_literal;\n     mod early_return;\n@@ -165,6 +164,7 @@ mod handlers {\n     mod replace_unwrap_with_match;\n     mod split_import;\n     mod unwrap_block;\n+    mod wrap_return_type_in_result;\n \n     pub(crate) fn all() -> &'static [Handler] {\n         &[\n@@ -173,7 +173,6 @@ mod handlers {\n             add_turbo_fish::add_turbo_fish,\n             apply_demorgan::apply_demorgan,\n             auto_import::auto_import,\n-            change_return_type_to_result::change_return_type_to_result,\n             change_visibility::change_visibility,\n             convert_integer_literal::convert_integer_literal,\n             early_return::convert_to_guarded_return,\n@@ -215,6 +214,7 @@ mod handlers {\n             replace_unwrap_with_match::replace_unwrap_with_match,\n             split_import::split_import,\n             unwrap_block::unwrap_block,\n+            wrap_return_type_in_result::wrap_return_type_in_result,\n             // These are manually sorted for better priorities\n             add_missing_impl_members::add_missing_impl_members,\n             add_missing_impl_members::add_missing_default_members,"}, {"sha": "dbf4f21aa55e7da160b29e81ec3a4b44f6b0c036", "filename": "crates/assists/src/tests/generated.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cecf78488a40638c8f6ea8b9482080d4bfafca4/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Ftests%2Fgenerated.rs?ref=3cecf78488a40638c8f6ea8b9482080d4bfafca4", "patch": "@@ -158,19 +158,6 @@ pub mod std { pub mod collections { pub struct HashMap { } } }\n     )\n }\n \n-#[test]\n-fn doctest_change_return_type_to_result() {\n-    check_doc_test(\n-        \"change_return_type_to_result\",\n-        r#####\"\n-fn foo() -> i32<|> { 42i32 }\n-\"#####,\n-        r#####\"\n-fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n-\"#####,\n-    )\n-}\n-\n #[test]\n fn doctest_change_visibility() {\n     check_doc_test(\n@@ -989,3 +976,16 @@ fn foo() {\n \"#####,\n     )\n }\n+\n+#[test]\n+fn doctest_wrap_return_type_in_result() {\n+    check_doc_test(\n+        \"wrap_return_type_in_result\",\n+        r#####\"\n+fn foo() -> i32<|> { 42i32 }\n+\"#####,\n+        r#####\"\n+fn foo() -> Result<i32, ${0:_}> { Ok(42i32) }\n+\"#####,\n+    )\n+}"}]}