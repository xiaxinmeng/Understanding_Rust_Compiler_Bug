{"sha": "9bc738697003db452a1a169dbddc74fe6237a02d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliYzczODY5NzAwM2RiNDUyYTFhMTY5ZGJkZGM3NGZlNjIzN2EwMmQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-12T15:32:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-03-12T15:32:13Z"}, "message": "Rollup merge of #69674 - mark-i-m:assoc-fn, r=matthewjasper\n\nRename DefKind::Method and TraitItemKind::Method\n\nr? @eddyb, @Centril, or @matthewjasper\n\ncc #69498 #60163", "tree": {"sha": "987e8a5216f840cb53be90bd4802205fb089de07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/987e8a5216f840cb53be90bd4802205fb089de07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9bc738697003db452a1a169dbddc74fe6237a02d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJealX9CRBK7hj4Ov3rIwAAdHIIAEvJo2lo1MX4ECNZKRPmdsbW\n2dETBjyon4DPBQ8x4nkB7IUjptuRgDHRv8ZVhPve2ngCRjiZFMcxTyN0GhEemk93\nZqexXAeFjVijhfWB4yWjpY2cUKNN8T5XXrmQlmdBVtZ6CCrV040w/OoXHNz6AL3d\n+xa1gFvrVHqXimmA7pecyNxUexHW7o3Km92CQd1qUdleO5hH8caCbl8NJ08pvQNx\njMyAritimDbntdwvCEaQ4iMWXKmgVvgSv+YS26WBAYvDZFrZWEn20XqA1A+ARgWJ\nfHsknqUItFiZonXQTZsmzmTD6+xq+m+RaVu3CFTOFyMrM7sEEfgPjwsHw4HUFWI=\n=BkwQ\n-----END PGP SIGNATURE-----\n", "payload": "tree 987e8a5216f840cb53be90bd4802205fb089de07\nparent 156a05a2e79620605a1b59435cba7dc6fc365131\nparent 3aeb9f0fafd33a425a67b7ee44f30f98dde64642\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1584027133 +0100\ncommitter GitHub <noreply@github.com> 1584027133 +0100\n\nRollup merge of #69674 - mark-i-m:assoc-fn, r=matthewjasper\n\nRename DefKind::Method and TraitItemKind::Method\n\nr? @eddyb, @Centril, or @matthewjasper\n\ncc #69498 #60163\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9bc738697003db452a1a169dbddc74fe6237a02d", "html_url": "https://github.com/rust-lang/rust/commit/9bc738697003db452a1a169dbddc74fe6237a02d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9bc738697003db452a1a169dbddc74fe6237a02d/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "156a05a2e79620605a1b59435cba7dc6fc365131", "url": "https://api.github.com/repos/rust-lang/rust/commits/156a05a2e79620605a1b59435cba7dc6fc365131", "html_url": "https://github.com/rust-lang/rust/commit/156a05a2e79620605a1b59435cba7dc6fc365131"}, {"sha": "3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "url": "https://api.github.com/repos/rust-lang/rust/commits/3aeb9f0fafd33a425a67b7ee44f30f98dde64642", "html_url": "https://github.com/rust-lang/rust/commit/3aeb9f0fafd33a425a67b7ee44f30f98dde64642"}], "stats": {"total": 210, "additions": 104, "deletions": 106}, "files": [{"sha": "d9ffe4582e7d77e75ebace0a02066e50b0fa4be4", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -60,7 +60,7 @@ impl MaybeFnLike for hir::ImplItem<'_> {\n impl MaybeFnLike for hir::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n-            hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n+            hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n             _ => false,\n         }\n     }\n@@ -239,7 +239,7 @@ impl<'a> FnLikeNode<'a> {\n                 _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             Node::TraitItem(ti) => match ti.kind {\n-                hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+                hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                     method(ti.hir_id, ti.ident, sig, None, body, ti.span, &ti.attrs)\n                 }\n                 _ => bug!(\"trait method FnLikeNode that is not fn-like\"),"}, {"sha": "cacb76c28619128724b2e52f84f7c94f46c15cda", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -51,7 +51,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(ref item) => match item.kind {\n-                TraitItemKind::Method(ref sig, _) => Some(&sig.decl),\n+                TraitItemKind::Fn(ref sig, _) => Some(&sig.decl),\n                 _ => None,\n             },\n \n@@ -77,7 +77,7 @@ impl<'hir> Entry<'hir> {\n             },\n \n             Node::TraitItem(item) => match &item.kind {\n-                TraitItemKind::Method(sig, _) => Some(sig),\n+                TraitItemKind::Fn(sig, _) => Some(sig),\n                 _ => None,\n             },\n \n@@ -101,7 +101,7 @@ impl<'hir> Entry<'hir> {\n \n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(_, Some(body))\n-                | TraitItemKind::Method(_, TraitMethod::Provided(body)) => Some(body),\n+                | TraitItemKind::Fn(_, TraitMethod::Provided(body)) => Some(body),\n                 _ => None,\n             },\n \n@@ -326,12 +326,12 @@ impl<'hir> Map<'hir> {\n             },\n             Node::TraitItem(item) => match item.kind {\n                 TraitItemKind::Const(..) => DefKind::AssocConst,\n-                TraitItemKind::Method(..) => DefKind::Method,\n+                TraitItemKind::Fn(..) => DefKind::AssocFn,\n                 TraitItemKind::Type(..) => DefKind::AssocTy,\n             },\n             Node::ImplItem(item) => match item.kind {\n                 ImplItemKind::Const(..) => DefKind::AssocConst,\n-                ImplItemKind::Method(..) => DefKind::Method,\n+                ImplItemKind::Method(..) => DefKind::AssocFn,\n                 ImplItemKind::TyAlias(..) => DefKind::AssocTy,\n                 ImplItemKind::OpaqueTy(..) => DefKind::AssocOpaqueTy,\n             },\n@@ -472,7 +472,7 @@ impl<'hir> Map<'hir> {\n             | Node::AnonConst(_) => BodyOwnerKind::Const,\n             Node::Ctor(..)\n             | Node::Item(&Item { kind: ItemKind::Fn(..), .. })\n-            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Method(..), .. })\n+            | Node::TraitItem(&TraitItem { kind: TraitItemKind::Fn(..), .. })\n             | Node::ImplItem(&ImplItem { kind: ImplItemKind::Method(..), .. }) => BodyOwnerKind::Fn,\n             Node::Item(&Item { kind: ItemKind::Static(_, m, _), .. }) => BodyOwnerKind::Static(m),\n             Node::Expr(&Expr { kind: ExprKind::Closure(..), .. }) => BodyOwnerKind::Closure,\n@@ -800,7 +800,7 @@ impl<'hir> Map<'hir> {\n                     _ => false,\n                 },\n                 Node::TraitItem(ti) => match ti.kind {\n-                    TraitItemKind::Method(..) => true,\n+                    TraitItemKind::Fn(..) => true,\n                     _ => false,\n                 },\n                 Node::ImplItem(ii) => match ii.kind {\n@@ -1311,7 +1311,7 @@ fn hir_id_to_string(map: &Map<'_>, id: HirId, include_id: bool) -> String {\n         Some(Node::TraitItem(ti)) => {\n             let kind = match ti.kind {\n                 TraitItemKind::Const(..) => \"assoc constant\",\n-                TraitItemKind::Method(..) => \"trait method\",\n+                TraitItemKind::Fn(..) => \"trait method\",\n                 TraitItemKind::Type(..) => \"assoc type\",\n             };\n "}, {"sha": "048e24ce3aa8978ebc79c83bb4121f42264fc191", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -250,7 +250,7 @@ pub enum EvalResult {\n fn skip_stability_check_due_to_privacy(tcx: TyCtxt<'_>, mut def_id: DefId) -> bool {\n     // Check if `def_id` is a trait method.\n     match tcx.def_kind(def_id) {\n-        Some(DefKind::Method) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n+        Some(DefKind::AssocFn) | Some(DefKind::AssocTy) | Some(DefKind::AssocConst) => {\n             if let ty::TraitContainer(trait_def_id) = tcx.associated_item(def_id).container {\n                 // Trait methods do not declare visibility (even\n                 // for visibility info in cstore). Use containing"}, {"sha": "722d49aeaabe9b66c857a8842700cbbcbed94121", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -611,7 +611,7 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n \n         match self.type_dependent_defs().get(expr.hir_id) {\n-            Some(Ok((DefKind::Method, _))) => true,\n+            Some(Ok((DefKind::AssocFn, _))) => true,\n             _ => false,\n         }\n     }"}, {"sha": "c2697570dda2785040b750570f39ff7db7a9f79b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -230,7 +230,7 @@ impl AssocItem {\n     pub fn def_kind(&self) -> DefKind {\n         match self.kind {\n             AssocKind::Const => DefKind::AssocConst,\n-            AssocKind::Method => DefKind::Method,\n+            AssocKind::Method => DefKind::AssocFn,\n             AssocKind::Type => DefKind::AssocTy,\n             AssocKind::OpaqueTy => DefKind::AssocOpaqueTy,\n         }\n@@ -2872,7 +2872,7 @@ impl<'tcx> TyCtxt<'tcx> {\n             }\n         } else {\n             match self.def_kind(def_id).expect(\"no def for `DefId`\") {\n-                DefKind::AssocConst | DefKind::Method | DefKind::AssocTy => true,\n+                DefKind::AssocConst | DefKind::AssocFn | DefKind::AssocTy => true,\n                 _ => false,\n             }\n         };\n@@ -3051,7 +3051,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// `DefId` of the impl that the method belongs to; otherwise, returns `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         let item = if def_id.krate != LOCAL_CRATE {\n-            if let Some(DefKind::Method) = self.def_kind(def_id) {\n+            if let Some(DefKind::AssocFn) = self.def_kind(def_id) {\n                 Some(self.associated_item(def_id))\n             } else {\n                 None"}, {"sha": "fcc859e3b6d198a5e859e98ff5720824fd38261d", "filename": "src/librustc_ast_lowering/item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_ast_lowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_ast_lowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fitem.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -761,13 +761,13 @@ impl<'hir> LoweringContext<'_, 'hir> {\n                 let names = self.lower_fn_params_to_names(&sig.decl);\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Required(names)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Required(names)))\n             }\n             AssocItemKind::Fn(_, ref sig, ref generics, Some(ref body)) => {\n                 let body_id = self.lower_fn_body_block(i.span, &sig.decl, Some(body));\n                 let (generics, sig) =\n                     self.lower_method_sig(generics, sig, trait_item_def_id, false, None);\n-                (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n+                (generics, hir::TraitItemKind::Fn(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(_, ref generics, ref bounds, ref default) => {\n                 let ty = default.as_ref().map(|x| self.lower_ty(x, ImplTraitContext::disallowed()));"}, {"sha": "db8517bfbf0c78825b51a8d438759a76d98c1fca", "filename": "src/librustc_ast_lowering/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_ast_lowering%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_ast_lowering%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fpath.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n                             ParenthesizedGenericArgs::Ok\n                         }\n                         // `a::b::Trait(Args)::TraitItem`\n-                        Res::Def(DefKind::Method, _)\n+                        Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::AssocConst, _)\n                         | Res::Def(DefKind::AssocTy, _)\n                             if i + 2 == proj_start =>"}, {"sha": "5b2c1453de6424554c6fc84312519b97a70a08bc", "filename": "src/librustc_hir/def.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fdef.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -72,7 +72,7 @@ pub enum DefKind {\n     Static,\n     /// Refers to the struct or enum variant's constructor.\n     Ctor(CtorOf, CtorKind),\n-    Method,\n+    AssocFn,\n     AssocConst,\n \n     // Macro namespace\n@@ -107,7 +107,8 @@ impl DefKind {\n             DefKind::Union => \"union\",\n             DefKind::Trait => \"trait\",\n             DefKind::ForeignTy => \"foreign type\",\n-            DefKind::Method => \"method\",\n+            // FIXME: Update the description to \"assoc fn\"\n+            DefKind::AssocFn => \"method\",\n             DefKind::Const => \"constant\",\n             DefKind::AssocConst => \"associated constant\",\n             DefKind::TyParam => \"type parameter\",\n@@ -150,7 +151,7 @@ impl DefKind {\n             | DefKind::ConstParam\n             | DefKind::Static\n             | DefKind::Ctor(..)\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::AssocConst => ns == Namespace::ValueNS,\n \n             DefKind::Macro(..) => ns == Namespace::MacroNS,"}, {"sha": "5a83c65204cc44c034d07b88ead7972f6f92bf58", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -1863,8 +1863,8 @@ pub enum TraitMethod<'hir> {\n pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n     Const(&'hir Ty<'hir>, Option<BodyId>),\n-    /// A method with an optional body.\n-    Method(FnSig<'hir>, TraitMethod<'hir>),\n+    /// An associated function with an optional body.\n+    Fn(FnSig<'hir>, TraitMethod<'hir>),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n     Type(GenericBounds<'hir>, Option<&'hir Ty<'hir>>),\n@@ -2699,7 +2699,7 @@ impl Node<'_> {\n \n     pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n         match self {\n-            Node::TraitItem(TraitItem { kind: TraitItemKind::Method(fn_sig, _), .. })\n+            Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Method(fn_sig, _), .. })\n             | Node::Item(Item { kind: ItemKind::Fn(fn_sig, _, _), .. }) => Some(fn_sig.decl),\n             Node::ForeignItem(ForeignItem { kind: ForeignItemKind::Fn(fn_decl, _, _), .. }) => {"}, {"sha": "e92192c8b1f728269d27dcfc9b30241bc3a5cc3b", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -911,14 +911,14 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_nested_body, default);\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Required(param_names)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Required(param_names)) => {\n             visitor.visit_id(trait_item.hir_id);\n             visitor.visit_fn_decl(&sig.decl);\n             for &param_name in param_names {\n                 visitor.visit_ident(param_name);\n             }\n         }\n-        TraitItemKind::Method(ref sig, TraitMethod::Provided(body_id)) => {\n+        TraitItemKind::Fn(ref sig, TraitMethod::Provided(body_id)) => {\n             visitor.visit_fn(\n                 FnKind::Method(trait_item.ident, sig, None, &trait_item.attrs),\n                 &sig.decl,"}, {"sha": "7738548dadef2f86c1c2b3da29ce174edbdc11ee", "filename": "src/librustc_hir/print.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fprint.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -886,13 +886,13 @@ impl<'a> State<'a> {\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_associated_const(ti.ident, &ty, default, &vis);\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref arg_names)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.print_method_sig(ti.ident, sig, &ti.generics, &vis, arg_names, None);\n                 self.s.word(\";\");\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 let vis =\n                     Spanned { span: rustc_span::DUMMY_SP, node: hir::VisibilityKind::Inherited };\n                 self.head(\"\");"}, {"sha": "b7bc555d7b410255ea8903fc8702774a3118e0cf", "filename": "src/librustc_hir/target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Ftarget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_hir%2Ftarget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Ftarget.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -105,10 +105,10 @@ impl Target {\n     pub fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n-            TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                 Target::Method(MethodKind::Trait { body: false })\n             }\n-            TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+            TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                 Target::Method(MethodKind::Trait { body: true })\n             }\n             TraitItemKind::Type(..) => Target::AssocTy,"}, {"sha": "54815fe3468eaeeef45c17b4215cf673f570b63c", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -328,7 +328,7 @@ impl DirtyCleanVisitor<'tcx> {\n                 }\n             }\n             HirNode::TraitItem(item) => match item.kind {\n-                TraitItemKind::Method(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n+                TraitItemKind::Fn(..) => (\"Node::TraitItem\", LABELS_FN_IN_TRAIT),\n                 TraitItemKind::Const(..) => (\"NodeTraitConst\", LABELS_CONST_IN_TRAIT),\n                 TraitItemKind::Type(..) => (\"NodeTraitType\", LABELS_CONST_IN_TRAIT),\n             },"}, {"sha": "7e418898910dc3e051cd9b856ff71c17f143ec87", "filename": "src/librustc_infer/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -269,7 +269,7 @@ fn item_scope_tag(item: &hir::Item<'_>) -> &'static str {\n \n fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n     match item.kind {\n-        hir::TraitItemKind::Method(..) => \"method body\",\n+        hir::TraitItemKind::Fn(..) => \"method body\",\n         hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\",\n     }\n }"}, {"sha": "fe70215dc27a5162ca5e4179da76cbd4d560e489", "filename": "src/librustc_infer/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -468,7 +468,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &segment.args,\n         ) {\n             let borrow = tables.borrow();\n-            if let Some((DefKind::Method, did)) = borrow.type_dependent_def(e.hir_id) {\n+            if let Some((DefKind::AssocFn, did)) = borrow.type_dependent_def(e.hir_id) {\n                 let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n                     err.span_suggestion("}, {"sha": "7346cb0a03393dfd9e04a9ba9e26166adff3f012", "filename": "src/librustc_infer/infer/error_reporting/nice_region_error/find_anon_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Ferror_reporting%2Fnice_region_error%2Ffind_anon_type.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -33,7 +33,7 @@ impl<'a, 'tcx> NiceRegionError<'a, 'tcx> {\n                 let fndecl = match self.tcx().hir().get(hir_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(ref m, ..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(ref m, ..),\n+                        kind: hir::TraitItemKind::Fn(ref m, ..),\n                         ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {"}, {"sha": "eb34a4875961c0bcbd984b6bcef32d0a306ae9fd", "filename": "src/librustc_infer/traits/error_reporting/on_unimplemented.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fon_unimplemented.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -70,7 +70,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 })\n             }\n             hir::Node::TraitItem(hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)),\n+                kind: hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)),\n                 ..\n             }) => self.describe_generator(*body_id).or_else(|| Some(\"a trait method\")),\n             hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "228747c3f89e9efc2b781d544f519c1532c9c431", "filename": "src/librustc_infer/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -62,7 +62,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             match node {\n                 hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 }) if param_ty && self_ty == self.tcx.types.self_param => {\n                     // Restricting `Self` for a single method.\n@@ -73,7 +73,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { kind: hir::ItemKind::Fn(_, generics, _), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     generics,\n-                    kind: hir::TraitItemKind::Method(..),\n+                    kind: hir::TraitItemKind::Fn(..),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {\n@@ -803,7 +803,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             })\n             | Node::TraitItem(&hir::TraitItem {\n                 span,\n-                kind: hir::TraitItemKind::Method(ref sig, _),\n+                kind: hir::TraitItemKind::Fn(ref sig, _),\n                 ..\n             }) => (\n                 self.tcx.sess.source_map().def_span(span),"}, {"sha": "249c9af3d48013d4c1de7a8ba249a06c8dffbed4", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -465,7 +465,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n \n         let desc = match trait_item.kind {\n             hir::TraitItemKind::Const(..) => \"an associated constant\",\n-            hir::TraitItemKind::Method(..) => \"a trait method\",\n+            hir::TraitItemKind::Fn(..) => \"a trait method\",\n             hir::TraitItemKind::Type(..) => \"an associated type\",\n         };\n "}, {"sha": "37fefe680d7d26e58fbb24c09c9a5b1dd7cd2da7", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -343,7 +343,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = item.kind {\n+        if let hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(pnames)) = item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n                 self.check_snake_case(cx, \"variable\", param_name);"}, {"sha": "49d05819c5ec939a49278f671c3a2c774754b79e", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -54,7 +54,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnusedResults {\n                 match callee.kind {\n                     hir::ExprKind::Path(ref qpath) => {\n                         match cx.tables.qpath_res(qpath, callee.hir_id) {\n-                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::Method, def_id) => {\n+                            Res::Def(DefKind::Fn, def_id) | Res::Def(DefKind::AssocFn, def_id) => {\n                                 Some(def_id)\n                             }\n                             // `Res::Local` if it was a closure, for which we"}, {"sha": "1d8eb0cde468af20fb6008e4688ca89a354a1ab8", "filename": "src/librustc_metadata/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fdecoder.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -505,7 +505,7 @@ impl EntryKind {\n             EntryKind::Struct(_, _) => DefKind::Struct,\n             EntryKind::Union(_, _) => DefKind::Union,\n             EntryKind::Fn(_) | EntryKind::ForeignFn(_) => DefKind::Fn,\n-            EntryKind::Method(_) => DefKind::Method,\n+            EntryKind::Method(_) => DefKind::AssocFn,\n             EntryKind::Type => DefKind::TyAlias,\n             EntryKind::TypeParam => DefKind::TyParam,\n             EntryKind::ConstParam => DefKind::ConstParam,"}, {"sha": "ce62f15f85d93683ebfffd6962352d682f52ea81", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -805,7 +805,7 @@ impl EncodeContext<'tcx> {\n                 )\n             }\n             ty::AssocKind::Method => {\n-                let fn_data = if let hir::TraitItemKind::Method(m_sig, m) = &ast_item.kind {\n+                let fn_data = if let hir::TraitItemKind::Fn(m_sig, m) = &ast_item.kind {\n                     let param_names = match *m {\n                         hir::TraitMethod::Required(ref names) => {\n                             self.encode_fn_param_names(names)"}, {"sha": "5d22ef46c41b1ddaba432401f1c64972dea775bb", "filename": "src/librustc_mir/borrow_check/diagnostics/mutability_errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fdiagnostics%2Fmutability_errors.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -480,7 +480,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         }))\n                         | Some(hir::Node::TraitItem(hir::TraitItem {\n                             ident,\n-                            kind: hir::TraitItemKind::Method(sig, _),\n+                            kind: hir::TraitItemKind::Fn(sig, _),\n                             ..\n                         }))\n                         | Some(hir::Node::ImplItem(hir::ImplItem {\n@@ -522,7 +522,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                 hir::Node::Item(hir::Item { ident, kind: hir::ItemKind::Fn(sig, ..), .. })\n                 | hir::Node::TraitItem(hir::TraitItem {\n                     ident,\n-                    kind: hir::TraitItemKind::Method(sig, _),\n+                    kind: hir::TraitItemKind::Fn(sig, _),\n                     ..\n                 })\n                 | hir::Node::ImplItem(hir::ImplItem {"}, {"sha": "e7ca8b0be78c44bea0672e73a304df181d9b5928", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -545,7 +545,7 @@ fn write_mir_sig(\n     trace!(\"write_mir_sig: {:?}\", src.instance);\n     let kind = tcx.def_kind(src.def_id());\n     let is_function = match kind {\n-        Some(DefKind::Fn) | Some(DefKind::Method) | Some(DefKind::Ctor(..)) => true,\n+        Some(DefKind::Fn) | Some(DefKind::AssocFn) | Some(DefKind::Ctor(..)) => true,\n         _ => tcx.is_closure(src.def_id()),\n     };\n     match (kind, src.promoted) {"}, {"sha": "c6bc86942957cdc75a523597bc5694e6dbb79da5", "filename": "src/librustc_mir_build/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -44,7 +44,7 @@ fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n         })\n         | Node::TraitItem(hir::TraitItem {\n             kind:\n-                hir::TraitItemKind::Method(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n+                hir::TraitItemKind::Fn(hir::FnSig { decl, .. }, hir::TraitMethod::Provided(body_id)),\n             ..\n         }) => (*body_id, decl.output.span()),\n         Node::Item(hir::Item { kind: hir::ItemKind::Static(ty, _, body_id), .. })"}, {"sha": "9f04bc1dc769703f6822536f70f8b017400716f9", "filename": "src/librustc_mir_build/hair/cx/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fcx%2Fexpr.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -600,7 +600,7 @@ fn user_substs_applied_to_res<'tcx>(\n         // a tuple-struct or tuple-variant. This has the type of a\n         // `Fn` but with the user-given substitutions.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::Def(DefKind::Const, _)\n         | Res::Def(DefKind::AssocConst, _) => {\n@@ -703,7 +703,7 @@ fn convert_path_expr<'a, 'tcx>(\n     match res {\n         // A regular function, constructor function or a constant.\n         Res::Def(DefKind::Fn, _)\n-        | Res::Def(DefKind::Method, _)\n+        | Res::Def(DefKind::AssocFn, _)\n         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _)\n         | Res::SelfCtor(..) => {\n             let user_ty = user_substs_applied_to_res(cx, expr.hir_id, res);"}, {"sha": "4a0ffc23365da9ccabe41dd1759387bf4c3d3a9d", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -391,7 +391,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n                     let trait_item = self.krate.trait_item(trait_item_ref.id);\n                     match trait_item.kind {\n                         hir::TraitItemKind::Const(_, Some(_))\n-                        | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => {\n+                        | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => {\n                             if has_allow_dead_code_or_lang_attr(\n                                 self.tcx,\n                                 trait_item.hir_id,\n@@ -682,11 +682,11 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id))\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                 self.visit_nested_body(body_id)\n             }\n             hir::TraitItemKind::Const(_, None)\n-            | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+            | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n             | hir::TraitItemKind::Type(..) => {}\n         }\n     }"}, {"sha": "79a9f22603042aa0993faa453e92d37134e6a1a6", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -162,8 +162,8 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             },\n             Some(Node::TraitItem(trait_method)) => match trait_method.kind {\n                 hir::TraitItemKind::Const(_, ref default) => default.is_some(),\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(_)) => true,\n-                hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_))\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(_)) => true,\n+                hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_))\n                 | hir::TraitItemKind::Type(..) => false,\n             },\n             Some(Node::ImplItem(impl_item)) => {\n@@ -278,11 +278,11 @@ impl<'a, 'tcx> ReachableContext<'a, 'tcx> {\n             Node::TraitItem(trait_method) => {\n                 match trait_method.kind {\n                     hir::TraitItemKind::Const(_, None)\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Required(_)) => {\n                         // Keep going, nothing to get exported\n                     }\n                     hir::TraitItemKind::Const(_, Some(body_id))\n-                    | hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {\n+                    | hir::TraitItemKind::Fn(_, hir::TraitMethod::Provided(body_id)) => {\n                         self.visit_nested_body(body_id);\n                     }\n                     hir::TraitItemKind::Type(..) => {}"}, {"sha": "175b2390d3083c7691daf30f6f868d5bb7ffe270", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -620,7 +620,7 @@ impl EmbargoVisitor<'tcx> {\n             | DefKind::ForeignTy\n             | DefKind::Fn\n             | DefKind::OpaqueTy\n-            | DefKind::Method\n+            | DefKind::AssocFn\n             | DefKind::Trait\n             | DefKind::TyParam\n             | DefKind::Variant => (),\n@@ -1298,7 +1298,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n             _ => None,\n         };\n         let def = def.filter(|(kind, _)| match kind {\n-            DefKind::Method\n+            DefKind::AssocFn\n             | DefKind::AssocConst\n             | DefKind::AssocTy\n             | DefKind::AssocOpaqueTy"}, {"sha": "61f511c22e6a15e45b8555ffaa5988d270d5adc3", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -874,7 +874,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n             | Res::PrimTy(..)\n             | Res::ToolMod => self.r.define(parent, ident, TypeNS, (res, vis, span, expansion)),\n             Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Static, _)\n             | Res::Def(DefKind::Const, _)\n             | Res::Def(DefKind::AssocConst, _)\n@@ -898,7 +898,7 @@ impl<'a, 'b> BuildReducedGraphVisitor<'a, 'b> {\n                 let field_names = cstore.struct_field_names_untracked(def_id, self.r.session);\n                 self.insert_field_names(def_id, field_names);\n             }\n-            Res::Def(DefKind::Method, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) => {\n                 if cstore.associated_item_cloned_untracked(def_id).method_has_self_argument {\n                     self.r.has_self.insert(def_id);\n                 }\n@@ -1243,7 +1243,7 @@ impl<'a, 'b> Visitor<'b> for BuildReducedGraphVisitor<'a, 'b> {\n                 if sig.decl.has_self() {\n                     self.r.has_self.insert(item_def_id);\n                 }\n-                (Res::Def(DefKind::Method, item_def_id), ValueNS)\n+                (Res::Def(DefKind::AssocFn, item_def_id), ValueNS)\n             }\n             AssocItemKind::TyAlias(..) => (Res::Def(DefKind::AssocTy, item_def_id), TypeNS),\n             AssocItemKind::Macro(_) => bug!(), // handled above"}, {"sha": "97f3ad72ee37ff822feffae5a97c69921c3e7e58", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -266,7 +266,7 @@ impl<'a> PathSource<'a> {\n                 | Res::Def(DefKind::Static, _)\n                 | Res::Local(..)\n                 | Res::Def(DefKind::Fn, _)\n-                | Res::Def(DefKind::Method, _)\n+                | Res::Def(DefKind::AssocFn, _)\n                 | Res::Def(DefKind::AssocConst, _)\n                 | Res::SelfCtor(..)\n                 | Res::Def(DefKind::ConstParam, _) => true,\n@@ -293,7 +293,7 @@ impl<'a> PathSource<'a> {\n                 _ => false,\n             },\n             PathSource::TraitItem(ns) => match res {\n-                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _)\n+                Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _)\n                     if ns == ValueNS =>\n                 {\n                     true"}, {"sha": "d1c2c194fca53f193f0f2010e9d12243bd9b4f3d", "filename": "src/librustc_resolve/late/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Fdiagnostics.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -124,7 +124,7 @@ impl<'a> LateResolutionVisitor<'a, '_, '_> {\n                             .unwrap_or(false)\n                     }\n                     Res::Def(DefKind::Ctor(..), _)\n-                    | Res::Def(DefKind::Method, _)\n+                    | Res::Def(DefKind::AssocFn, _)\n                     | Res::Def(DefKind::Const, _)\n                     | Res::Def(DefKind::AssocConst, _)\n                     | Res::SelfCtor(_)"}, {"sha": "5c0748797f04b6581bf47e65a6ef1dc99b23d6e1", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -713,7 +713,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         use self::hir::TraitItemKind::*;\n         self.missing_named_lifetime_spots.push((&trait_item.generics).into());\n         match trait_item.kind {\n-            Method(ref sig, _) => {\n+            Fn(ref sig, _) => {\n                 let tcx = self.tcx;\n                 self.visit_early_late(\n                     Some(tcx.hir().get_parent_item(trait_item.hir_id)),\n@@ -1816,8 +1816,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n                 match self.tcx.hir().get(fn_id) {\n                     Node::Item(&hir::Item { kind: hir::ItemKind::Fn(..), .. })\n                     | Node::TraitItem(&hir::TraitItem {\n-                        kind: hir::TraitItemKind::Method(..),\n-                        ..\n+                        kind: hir::TraitItemKind::Fn(..), ..\n                     })\n                     | Node::ImplItem(&hir::ImplItem {\n                         kind: hir::ImplItemKind::Method(..), ..\n@@ -2093,9 +2092,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             // `fn` definitions and methods.\n             Node::Item(&hir::Item { kind: hir::ItemKind::Fn(.., body), .. }) => Some(body),\n \n-            Node::TraitItem(&hir::TraitItem {\n-                kind: hir::TraitItemKind::Method(_, ref m), ..\n-            }) => {\n+            Node::TraitItem(&hir::TraitItem { kind: hir::TraitItemKind::Fn(_, ref m), .. }) => {\n                 if let hir::ItemKind::Trait(.., ref trait_items) =\n                     self.tcx.hir().expect_item(self.tcx.hir().get_parent_item(parent)).kind\n                 {"}, {"sha": "f035df3c34d3ad56ab47ba200294f5f9c825bf6d", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -741,7 +741,7 @@ impl<'a> NameBinding<'a> {\n     fn is_importable(&self) -> bool {\n         match self.res() {\n             Res::Def(DefKind::AssocConst, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::AssocTy, _) => false,\n             _ => true,\n         }"}, {"sha": "e4949ea5b4b0af1c847e7ad3f4a62b4cf8508d57", "filename": "src/librustc_save_analysis/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_save_analysis%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_save_analysis%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_save_analysis%2Flib.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -718,7 +718,7 @@ impl<'l, 'tcx> SaveContext<'l, 'tcx> {\n             | Res::Def(HirDefKind::Ctor(..), _) => {\n                 Some(Ref { kind: RefKind::Variable, span, ref_id: id_from_def_id(res.def_id()) })\n             }\n-            Res::Def(HirDefKind::Method, decl_id) => {\n+            Res::Def(HirDefKind::AssocFn, decl_id) => {\n                 let def_id = if decl_id.is_local() {\n                     let ti = self.tcx.associated_item(decl_id);\n "}, {"sha": "db392ede432e189714b6685bd56d0880c21c740d", "filename": "src/librustc_traits/lowering/environment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fenvironment.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -185,7 +185,7 @@ crate fn environment(tcx: TyCtxt<'_>, def_id: DefId) -> Environment<'_> {\n \n     let node_kind = match node {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => NodeKind::Fn,\n+            TraitItemKind::Fn(..) => NodeKind::Fn,\n             _ => NodeKind::Other,\n         },\n "}, {"sha": "36461f2400cef8954a3232140311b38b90bb9e74", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -2588,7 +2588,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             }\n \n             // Case 4. Reference to a method or associated const.\n-            DefKind::Method | DefKind::AssocConst => {\n+            DefKind::AssocFn | DefKind::AssocConst => {\n                 if segments.len() >= 2 {\n                     let generics = tcx.generics_of(def_id);\n                     path_segs.push(PathSeg(generics.parent.unwrap(), last - 1));"}, {"sha": "0c8dec8f8d4a9706d3acd98efaa8b4070a510256", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -412,8 +412,8 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n         TypeError::Mutability => {\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let trait_m_iter = match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                    TraitItemKind::Method(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n-                    _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                    TraitItemKind::Fn(ref trait_m_sig, _) => trait_m_sig.decl.inputs.iter(),\n+                    _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                 };\n \n                 impl_m_iter\n@@ -440,10 +440,10 @@ fn extract_spans_for_error_reporting<'a, 'tcx>(\n             if let Some(trait_m_hir_id) = tcx.hir().as_local_hir_id(trait_m.def_id) {\n                 let (trait_m_output, trait_m_iter) =\n                     match tcx.hir().expect_trait_item(trait_m_hir_id).kind {\n-                        TraitItemKind::Method(ref trait_m_sig, _) => {\n+                        TraitItemKind::Fn(ref trait_m_sig, _) => {\n                             (&trait_m_sig.decl.output, trait_m_sig.decl.inputs.iter())\n                         }\n-                        _ => bug!(\"{:?} is not a TraitItemKind::Method\", trait_m),\n+                        _ => bug!(\"{:?} is not a TraitItemKind::Fn\", trait_m),\n                     };\n \n                 let impl_iter = impl_sig.inputs().iter();\n@@ -708,7 +708,7 @@ fn compare_number_of_method_arguments<'tcx>(\n         let trait_m_hir_id = tcx.hir().as_local_hir_id(trait_m.def_id);\n         let trait_span = if let Some(trait_id) = trait_m_hir_id {\n             match tcx.hir().expect_trait_item(trait_id).kind {\n-                TraitItemKind::Method(ref trait_m_sig, _) => {\n+                TraitItemKind::Fn(ref trait_m_sig, _) => {\n                     let pos = if trait_number_args > 0 { trait_number_args - 1 } else { 0 };\n                     if let Some(arg) = trait_m_sig.decl.inputs.get(pos) {\n                         Some(if pos == 0 {"}, {"sha": "7e526573773936b1a5bf493c5d82ab91af3df169", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -237,7 +237,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n                         // ZST in a temporary, so skip its type, just in case it\n                         // can significantly complicate the generator type.\n                         Res::Def(DefKind::Fn, _)\n-                        | Res::Def(DefKind::Method, _)\n+                        | Res::Def(DefKind::AssocFn, _)\n                         | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                             // NOTE(eddyb) this assumes a path expression has\n                             // no nested expressions to keep track of."}, {"sha": "654ec372dedfffe8df4d65ac45fb164cc356599d", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -933,7 +933,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                             if let ty::AssocKind::Method = item.kind {\n                                 let id = self.tcx.hir().as_local_hir_id(item.def_id);\n                                 if let Some(hir::Node::TraitItem(hir::TraitItem {\n-                                    kind: hir::TraitItemKind::Method(fn_sig, method),\n+                                    kind: hir::TraitItemKind::Fn(fn_sig, method),\n                                     ..\n                                 })) = id.map(|id| self.tcx.hir().get(id))\n                                 {"}, {"sha": "f1f505e18599aec36f51c0940ea2ecf4da8d514f", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -811,7 +811,7 @@ fn primary_body_of(\n         },\n         Node::TraitItem(item) => match item.kind {\n             hir::TraitItemKind::Const(ref ty, Some(body)) => Some((body, Some(ty), None, None)),\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 Some((body, None, Some(&sig.header), Some(&sig.decl)))\n             }\n             _ => None,\n@@ -1733,7 +1733,7 @@ pub fn check_item_type<'tcx>(tcx: TyCtxt<'tcx>, it: &'tcx hir::Item<'tcx>) {\n \n             for item in items.iter() {\n                 let item = tcx.hir().trait_item(item.id);\n-                if let hir::TraitItemKind::Method(sig, _) = &item.kind {\n+                if let hir::TraitItemKind::Fn(sig, _) = &item.kind {\n                     let abi = sig.header.abi;\n                     fn_maybe_err(tcx, item.ident.span, abi);\n                 }\n@@ -2976,7 +2976,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n     pub fn write_method_call(&self, hir_id: hir::HirId, method: MethodCallee<'tcx>) {\n         debug!(\"write_method_call(hir_id={:?}, method={:?})\", hir_id, method);\n-        self.write_resolution(hir_id, Ok((DefKind::Method, method.def_id)));\n+        self.write_resolution(hir_id, Ok((DefKind::AssocFn, method.def_id)));\n         self.write_substs(hir_id, method.substs);\n \n         // When the method is confirmed, the `method.substs` includes\n@@ -4769,7 +4769,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             }\n             Node::TraitItem(&hir::TraitItem {\n                 ident,\n-                kind: hir::TraitItemKind::Method(ref sig, ..),\n+                kind: hir::TraitItemKind::Fn(ref sig, ..),\n                 ..\n             }) => Some((&sig.decl, ident, true)),\n             Node::ImplItem(&hir::ImplItem {\n@@ -4863,7 +4863,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     ..\n                 }))\n                 | Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Provided(body_id)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Provided(body_id)),\n                     ..\n                 })) => {\n                     let body = hir.body(*body_id);\n@@ -4934,7 +4934,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         .join(\", \")\n                 }\n                 Some(Node::TraitItem(hir::TraitItem {\n-                    kind: hir::TraitItemKind::Method(.., hir::TraitMethod::Required(idents)),\n+                    kind: hir::TraitItemKind::Fn(.., hir::TraitMethod::Required(idents)),\n                     ..\n                 })) => {\n                     sugg_call = idents\n@@ -5364,7 +5364,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     is_alias_variant_ctor = true;\n                 }\n             }\n-            Res::Def(DefKind::Method, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n+            Res::Def(DefKind::AssocFn, def_id) | Res::Def(DefKind::AssocConst, def_id) => {\n                 let container = tcx.associated_item(def_id).container;\n                 debug!(\"instantiate_value_path: def_id={:?} container={:?}\", def_id, container);\n                 match container {"}, {"sha": "70b39a62cd718f4ee557cdcb1b253ffe341756cb", "filename": "src/librustc_typeck/check/pat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fpat.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -707,7 +707,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 self.set_tainted_by_errors();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::Method, _)\n+            Res::Def(DefKind::AssocFn, _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fictive), _)\n             | Res::Def(DefKind::Ctor(_, CtorKind::Fn), _) => {\n                 report_unexpected_variant_res(tcx, res, pat.span, qpath);\n@@ -793,7 +793,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             );\n             let mut err = struct_span_err!(tcx.sess, pat.span, E0164, \"{}\", msg);\n             match (res, &pat.kind) {\n-                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::Method, _), _) => {\n+                (Res::Def(DefKind::Fn, _), _) | (Res::Def(DefKind::AssocFn, _), _) => {\n                     err.span_label(pat.span, \"`fn` calls are not allowed in patterns\");\n                     err.help(\n                         \"for more information, visit \\\n@@ -830,7 +830,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 on_error();\n                 return tcx.types.err;\n             }\n-            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::Method, _) => {\n+            Res::Def(DefKind::AssocConst, _) | Res::Def(DefKind::AssocFn, _) => {\n                 report_unexpected_res(res);\n                 return tcx.types.err;\n             }"}, {"sha": "335b4a285011681922501e2ba4a817085f976080", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -173,7 +173,7 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: DefId) {\n     let trait_item = tcx.hir().expect_trait_item(hir_id);\n \n     let method_sig = match trait_item.kind {\n-        hir::TraitItemKind::Method(ref sig, _) => Some(sig),\n+        hir::TraitItemKind::Fn(ref sig, _) => Some(sig),\n         _ => None,\n     };\n     check_object_unsafe_self_trait_by_name(tcx, &trait_item);\n@@ -207,7 +207,7 @@ fn check_object_unsafe_self_trait_by_name(tcx: TyCtxt<'_>, item: &hir::TraitItem\n         {\n             trait_should_be_self.push(ty.span)\n         }\n-        hir::TraitItemKind::Method(sig, _) => {\n+        hir::TraitItemKind::Fn(sig, _) => {\n             for ty in sig.decl.inputs {\n                 if could_be_self(trait_def_id, ty) {\n                     trait_should_be_self.push(ty.span);"}, {"sha": "0238486a489df909300f8fe1132a781397178502", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -715,7 +715,7 @@ fn convert_trait_item(tcx: TyCtxt<'_>, trait_item_id: hir::HirId) {\n     tcx.generics_of(def_id);\n \n     match trait_item.kind {\n-        hir::TraitItemKind::Method(..) => {\n+        hir::TraitItemKind::Fn(..) => {\n             tcx.type_of(def_id);\n             tcx.fn_sig(def_id);\n         }\n@@ -1121,7 +1121,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n \n     match node {\n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(ref sig, _) => {\n+            hir::TraitItemKind::Fn(ref sig, _) => {\n                 has_late_bound_regions(tcx, &item.generics, &sig.decl)\n             }\n             _ => None,\n@@ -1437,7 +1437,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n \n     match tcx.hir().get(hir_id) {\n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(sig, TraitMethod::Provided(_)),\n+            kind: TraitItemKind::Fn(sig, TraitMethod::Provided(_)),\n             ident,\n             generics,\n             ..\n@@ -1474,7 +1474,7 @@ fn fn_sig(tcx: TyCtxt<'_>, def_id: DefId) -> ty::PolyFnSig<'_> {\n         }\n \n         TraitItem(hir::TraitItem {\n-            kind: TraitItemKind::Method(FnSig { header, decl }, _),\n+            kind: TraitItemKind::Fn(FnSig { header, decl }, _),\n             ident,\n             generics,\n             .."}, {"sha": "815235adc7175f4ba80024bdb38e39584aeaf4df", "filename": "src/librustc_typeck/collect/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect%2Ftype_of.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -27,7 +27,7 @@ pub(super) fn type_of(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n \n     match tcx.hir().get(hir_id) {\n         Node::TraitItem(item) => match item.kind {\n-            TraitItemKind::Method(..) => {\n+            TraitItemKind::Fn(..) => {\n                 let substs = InternalSubsts::identity_for_item(tcx, def_id);\n                 tcx.mk_fn_def(def_id, substs)\n             }"}, {"sha": "8e06948a1095303a9784d75ad258f8f0272ffc77", "filename": "src/librustc_typeck/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fmem_categorization.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -425,7 +425,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n             | Res::Def(DefKind::ConstParam, _)\n             | Res::Def(DefKind::AssocConst, _)\n             | Res::Def(DefKind::Fn, _)\n-            | Res::Def(DefKind::Method, _)\n+            | Res::Def(DefKind::AssocFn, _)\n             | Res::SelfCtor(..) => Ok(self.cat_rvalue(hir_id, span, expr_ty)),\n \n             Res::Def(DefKind::Static, _) => Ok(Place {"}, {"sha": "fc3b7201a1e6322e48a562bae5e432f4a27745f7", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -105,7 +105,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.visit_node_helper(trait_item.hir_id);\n         }\n     }"}, {"sha": "412b90a9acffa03fa9deabc781b341522d02ef21", "filename": "src/librustc_typeck/variance/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -54,7 +54,7 @@ fn variances_of(tcx: TyCtxt<'_>, item_def_id: DefId) -> &[ty::Variance] {\n         },\n \n         Node::TraitItem(item) => match item.kind {\n-            hir::TraitItemKind::Method(..) => {}\n+            hir::TraitItemKind::Fn(..) => {}\n \n             _ => unsupported(),\n         },"}, {"sha": "f79f8c4bb9510d38926e50b9bdae772d4eb6e797", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -164,7 +164,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n     }\n \n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n-        if let hir::TraitItemKind::Method(..) = trait_item.kind {\n+        if let hir::TraitItemKind::Fn(..) = trait_item.kind {\n             self.add_inferreds_for_item(trait_item.hir_id);\n         }\n     }"}, {"sha": "661666b6637f124d8698637845616dad8babc3cd", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -1082,10 +1082,10 @@ impl Clean<Item> for hir::TraitItem<'_> {\n             hir::TraitItemKind::Const(ref ty, default) => {\n                 AssocConstItem(ty.clean(cx), default.map(|e| print_const_expr(cx, e)))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Provided(body)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Provided(body)) => {\n                 MethodItem((sig, &self.generics, body, None).clean(cx))\n             }\n-            hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n+            hir::TraitItemKind::Fn(ref sig, hir::TraitMethod::Required(ref names)) => {\n                 let (generics, decl) = enter_impl_trait(cx, || {\n                     (self.generics.clean(cx), (&*sig.decl, &names[..]).clean(cx))\n                 });"}, {"sha": "75355b84fee835963cfa838bb4504c8b02a59c45", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9bc738697003db452a1a169dbddc74fe6237a02d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=9bc738697003db452a1a169dbddc74fe6237a02d", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                 // In case this is a trait item, skip the\n                 // early return and try looking for the trait.\n                 let value = match res {\n-                    Res::Def(DefKind::Method, _) | Res::Def(DefKind::AssocConst, _) => true,\n+                    Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::AssocConst, _) => true,\n                     Res::Def(DefKind::AssocTy, _) => false,\n                     Res::Def(DefKind::Variant, _) => {\n                         return handle_variant(cx, res, extra_fragment);\n@@ -813,7 +813,7 @@ fn ambiguity_error(\n \n                     for (res, ns) in candidates {\n                         let (action, mut suggestion) = match res {\n-                            Res::Def(DefKind::Method, _) | Res::Def(DefKind::Fn, _) => {\n+                            Res::Def(DefKind::AssocFn, _) | Res::Def(DefKind::Fn, _) => {\n                                 (\"add parentheses\", format!(\"{}()\", path_str))\n                             }\n                             Res::Def(DefKind::Macro(..), _) => {"}]}