{"sha": "988e387132cf4137ecbba7f212ec37f52928d42b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4OGUzODcxMzJjZjQxMzdlY2JiYTdmMjEyZWMzN2Y1MjkyOGQ0MmI=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-13T11:40:49Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-07-14T00:18:28Z"}, "message": "Add imports_indent and imports_layout config options", "tree": {"sha": "79a193f9f84d9942791f39f9aee9f5a1df2b8933", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/79a193f9f84d9942791f39f9aee9f5a1df2b8933"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/988e387132cf4137ecbba7f212ec37f52928d42b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/988e387132cf4137ecbba7f212ec37f52928d42b", "html_url": "https://github.com/rust-lang/rust/commit/988e387132cf4137ecbba7f212ec37f52928d42b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/988e387132cf4137ecbba7f212ec37f52928d42b/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcb953b901354bf89f7a9fbdfba8053e37e86894", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcb953b901354bf89f7a9fbdfba8053e37e86894", "html_url": "https://github.com/rust-lang/rust/commit/dcb953b901354bf89f7a9fbdfba8053e37e86894"}], "stats": {"total": 196, "additions": 168, "deletions": 28}, "files": [{"sha": "f97214c13585ad692e078447aafb7cdcd789d39c", "filename": "Configurations.md", "status": "modified", "additions": 81, "deletions": 0, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -979,6 +979,87 @@ match lorem {\n \n See also: [`match_block_trailing_comma`](#match_block_trailing_comma), [`wrap_match_arms`](#wrap_match_arms).\n \n+## `imports_indent`\n+\n+Indent style of imports\n+\n+- **Default Value**: `\"Visual\"`\n+- **Possible values**: `\"Block\"`, `\"Visual\"`\n+\n+#### `\"Block\"`\n+\n+```rust\n+use foo::{\n+    xxx,\n+    yyy,\n+    zzz,\n+};\n+```\n+\n+#### `\"Visual\"`\n+\n+```rust\n+use foo::{xxx,\n+          yyy,\n+          zzz};\n+```\n+\n+See also: [`imports_layout`](#imports_layout).\n+\n+## `imports_layout`\n+\n+Item layout inside a imports block\n+\n+- **Default value**: \"Mixed\"\n+- **Possible values**: \"Horizontal\", \"HorizontalVertical\", \"Mixed\", \"Vertical\"\n+\n+#### `\"Mixed\"`\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa, bbb, ccc,\n+          ddd, eee, fff};\n+```\n+\n+#### `\"Horizontal\"`\n+\n+**Note**: This option forces to put everything on one line and may exceeds `max_width`.\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa, bbb, ccc, ddd, eee, fff};\n+```\n+\n+#### `\"HorizontalVertical\"`\n+\n+```rust\n+use foo::{xxx, yyy, zzz};\n+\n+use foo::{aaa,\n+          bbb,\n+          ccc,\n+          ddd, \n+          eee, \n+          fff};\n+```\n+\n+#### `\"Vertical\"`\n+\n+```rust\n+use foo::{xxx,\n+          yyy,\n+          zzz};\n+\n+use foo::{aaa,\n+          bbb,\n+          ccc,\n+          ddd,\n+          eee,\n+          fff};\n+```\n+\n ## `item_brace_style`\n \n Brace style for structs and enums"}, {"sha": "173f076bebb31c1bbe48aefcec6ad4510ffe931f", "filename": "src/config.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/src%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/src%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig.rs?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -556,6 +556,8 @@ create_config! {\n     chain_one_line_max: usize, 60, \"Maximum length of a chain to fit on a single line\";\n     chain_split_single_child: bool, false, \"Split a chain with a single child if its length \\\n                                             exceeds `chain_one_line_max`\";\n+    imports_indent: IndentStyle, IndentStyle::Visual, \"Indent of imports\";\n+    imports_layout: ListTactic, ListTactic::Mixed, \"Item layout inside a import block\";\n     reorder_imports: bool, false, \"Reorder import statements alphabetically\";\n     reorder_imports_in_group: bool, false, \"Reorder import statements in group\";\n     reorder_imported_names: bool, true,"}, {"sha": "1ce397f6c5a58099fc005777dfdfd8fc4d23bc44", "filename": "src/imports.rs", "status": "modified", "additions": 51, "deletions": 28, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -15,7 +15,9 @@ use syntax::codemap::{BytePos, Span};\n \n use Shape;\n use codemap::SpanUtils;\n-use lists::{definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, SeparatorTactic};\n+use config::IndentStyle;\n+use lists::{definitive_tactic, itemize_list, write_list, DefinitiveListTactic, ListFormatting,\n+            ListItem, SeparatorTactic};\n use rewrite::{Rewrite, RewriteContext};\n use types::{rewrite_path, PathContext};\n use utils;\n@@ -250,13 +252,12 @@ impl<'a> FmtVisitor<'a> {\n \n     pub fn format_import(&mut self, vis: &ast::Visibility, vp: &ast::ViewPath, span: Span) {\n         let vis = utils::format_visibility(vis);\n-        let mut offset = self.block_indent;\n-        offset.alignment += vis.len() + \"use \".len();\n-        // 1 = \";\"\n-        match vp.rewrite(\n-            &self.get_context(),\n-            Shape::legacy(self.config.max_width() - offset.width() - 1, offset),\n-        ) {\n+        // 4 = `use `, 1 = `;`\n+        let rw = Shape::indented(self.block_indent, self.config)\n+            .offset_left(vis.len() + 4)\n+            .and_then(|shape| shape.sub_width(1))\n+            .and_then(|shape| vp.rewrite(&self.get_context(), shape));\n+        match rw {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n                 let prev_span = utils::mk_sp(self.last_pos, source!(self, span).lo);\n@@ -385,7 +386,7 @@ impl<'a> Ord for ImportItem<'a> {\n \n // Pretty prints a multi-item import.\n // Assumes that path_list.len() > 0.\n-pub fn rewrite_use_list(\n+fn rewrite_use_list(\n     shape: Shape,\n     path: &ast::Path,\n     path_list: &[ast::PathListItem],\n@@ -407,13 +408,14 @@ pub fn rewrite_use_list(\n         _ => (),\n     }\n \n-    let colons_offset = if path_str.is_empty() { 0 } else { 2 };\n+    let path_str = if path_str.is_empty() {\n+        path_str\n+    } else {\n+        format!(\"{}::\", path_str)\n+    };\n \n     // 2 = \"{}\"\n-    let remaining_width = shape\n-        .width\n-        .checked_sub(path_str.len() + 2 + colons_offset)\n-        .unwrap_or(0);\n+    let remaining_width = shape.width.checked_sub(path_str.len() + 2).unwrap_or(0);\n \n     let mut items = {\n         // Dummy value, see explanation below.\n@@ -446,32 +448,53 @@ pub fn rewrite_use_list(\n         });\n     }\n \n-\n     let tactic = definitive_tactic(\n         &items[first_index..],\n-        ::lists::ListTactic::Mixed,\n+        context.config.imports_layout(),\n         remaining_width,\n     );\n \n+    let nested_indent = match context.config.imports_indent() {\n+        IndentStyle::Block => shape.indent.block_indent(context.config),\n+        // 1 = `{`\n+        IndentStyle::Visual => shape.visual_indent(path_str.len() + 1).indent,\n+    };\n+\n+    let nested_shape = match context.config.imports_indent() {\n+        IndentStyle::Block => Shape::indented(nested_indent, context.config),\n+        IndentStyle::Visual => Shape::legacy(remaining_width, nested_indent),\n+    };\n+\n+    let ends_with_newline = context.config.imports_indent() == IndentStyle::Block &&\n+        tactic != DefinitiveListTactic::Horizontal;\n+\n     let fmt = ListFormatting {\n         tactic: tactic,\n         separator: \",\",\n-        trailing_separator: SeparatorTactic::Never,\n-        // Add one to the indent to account for \"{\"\n-        shape: Shape::legacy(\n-            remaining_width,\n-            shape.indent + path_str.len() + colons_offset + 1,\n-        ),\n-        ends_with_newline: false,\n+        trailing_separator: if ends_with_newline {\n+            context.config.trailing_comma()\n+        } else {\n+            SeparatorTactic::Never\n+        },\n+        shape: nested_shape,\n+        ends_with_newline: ends_with_newline,\n         config: context.config,\n     };\n     let list_str = try_opt!(write_list(&items[first_index..], &fmt));\n \n-    Some(if path_str.is_empty() {\n-        format!(\"{{{}}}\", list_str)\n-    } else {\n-        format!(\"{}::{{{}}}\", path_str, list_str)\n-    })\n+    let result =\n+        if list_str.contains('\\n') && context.config.imports_indent() == IndentStyle::Block {\n+            format!(\n+                \"{}{{\\n{}{}\\n{}}}\",\n+                path_str,\n+                nested_shape.indent.to_string(context.config),\n+                list_str,\n+                shape.indent.to_string(context.config)\n+            )\n+        } else {\n+            format!(\"{}{{{}}}\", path_str, list_str)\n+        };\n+    Some(result)\n }\n \n // Returns true when self item was found."}, {"sha": "84c3b26bd6e1a3b5b9b0041327d4223be8db197e", "filename": "tests/target/configs-imports_indent-block.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_indent-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_indent-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_indent-block.rs?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-imports_indent: Block\n+\n+use lists::{\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting, ListItem, ListTactic,\n+    SeparatorTactic,\n+};"}, {"sha": "4a63556d45bca16a536a0d0764391ad17992d00d", "filename": "tests/target/configs-imports_layout-horizontal_vertical.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_layout-horizontal_vertical.rs?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -0,0 +1,18 @@\n+// rustfmt-imports_indent: Block\n+// rustfmt-imports_layout: HorizontalVertical\n+\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use lists::{\n+    definitive_tactic,\n+    itemize_list,\n+    shape_for_tactic,\n+    struct_lit_formatting,\n+    struct_lit_shape,\n+    struct_lit_tactic,\n+    write_list,\n+    DefinitiveListTactic,\n+    ListFormatting,\n+    ListItem,\n+    ListTactic,\n+    SeparatorTactic,\n+};"}, {"sha": "5d3349a01bba7ae3518a1d785319f65bfa636b22", "filename": "tests/target/configs-imports_layout-mixed.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/988e387132cf4137ecbba7f212ec37f52928d42b/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-imports_layout-mixed.rs?ref=988e387132cf4137ecbba7f212ec37f52928d42b", "patch": "@@ -0,0 +1,9 @@\n+// rustfmt-imports_indent: Block\n+// rustfmt-imports_layout: Mixed\n+\n+use comment::{contains_comment, recover_comment_removed, rewrite_comment, FindUncommented};\n+use lists::{\n+    definitive_tactic, itemize_list, shape_for_tactic, struct_lit_formatting, struct_lit_shape,\n+    struct_lit_tactic, write_list, DefinitiveListTactic, ListFormatting, ListItem, ListTactic,\n+    SeparatorTactic,\n+};"}]}