{"sha": "072a89642bae1a1aca96acda290dab1bcf318696", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA3MmE4OTY0MmJhZTFhMWFjYTk2YWNkYTI5MGRhYjFiY2YzMTg2OTY=", "commit": {"author": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-12T17:08:50Z"}, "committer": {"name": "Tom Jakubowski", "email": "tom@crystae.net", "date": "2015-01-12T17:25:20Z"}, "message": "rustdoc: Remove traces of old closures", "tree": {"sha": "f7adf551b3a3e659cbde17f4b4655b5c4fc48026", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7adf551b3a3e659cbde17f4b4655b5c4fc48026"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/072a89642bae1a1aca96acda290dab1bcf318696", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/072a89642bae1a1aca96acda290dab1bcf318696", "html_url": "https://github.com/rust-lang/rust/commit/072a89642bae1a1aca96acda290dab1bcf318696", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/072a89642bae1a1aca96acda290dab1bcf318696/comments", "author": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tomjakubowski", "id": 667901, "node_id": "MDQ6VXNlcjY2NzkwMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/667901?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tomjakubowski", "html_url": "https://github.com/tomjakubowski", "followers_url": "https://api.github.com/users/tomjakubowski/followers", "following_url": "https://api.github.com/users/tomjakubowski/following{/other_user}", "gists_url": "https://api.github.com/users/tomjakubowski/gists{/gist_id}", "starred_url": "https://api.github.com/users/tomjakubowski/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tomjakubowski/subscriptions", "organizations_url": "https://api.github.com/users/tomjakubowski/orgs", "repos_url": "https://api.github.com/users/tomjakubowski/repos", "events_url": "https://api.github.com/users/tomjakubowski/events{/privacy}", "received_events_url": "https://api.github.com/users/tomjakubowski/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a69d35e1edf6dee4c1f5163e8b7160d8479ebc0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a69d35e1edf6dee4c1f5163e8b7160d8479ebc0", "html_url": "https://github.com/rust-lang/rust/commit/8a69d35e1edf6dee4c1f5163e8b7160d8479ebc0"}], "stats": {"total": 78, "additions": 0, "deletions": 78}, "files": [{"sha": "4c2cd8864c7658c13cf2e1f92064dcd8c8c652d1", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/072a89642bae1a1aca96acda290dab1bcf318696/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072a89642bae1a1aca96acda290dab1bcf318696/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=072a89642bae1a1aca96acda290dab1bcf318696", "patch": "@@ -1055,27 +1055,6 @@ impl Clean<Item> for doctree::Function {\n     }\n }\n \n-#[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n-pub struct ClosureDecl {\n-    pub lifetimes: Vec<Lifetime>,\n-    pub decl: FnDecl,\n-    pub onceness: ast::Onceness,\n-    pub unsafety: ast::Unsafety,\n-    pub bounds: Vec<TyParamBound>,\n-}\n-\n-impl Clean<ClosureDecl> for ast::ClosureTy {\n-    fn clean(&self, cx: &DocContext) -> ClosureDecl {\n-        ClosureDecl {\n-            lifetimes: self.lifetimes.clean(cx),\n-            decl: self.decl.clean(cx),\n-            onceness: self.onceness,\n-            unsafety: self.unsafety,\n-            bounds: self.bounds.clean(cx)\n-        }\n-    }\n-}\n-\n #[derive(Clone, RustcEncodable, RustcDecodable, PartialEq, Show)]\n pub struct FnDecl {\n     pub inputs: Arguments,\n@@ -1352,8 +1331,6 @@ pub enum Type {\n     Generic(String),\n     /// Primitives are just the fixed-size numeric types (plus int/uint/float), and char.\n     Primitive(PrimitiveType),\n-    Closure(Box<ClosureDecl>),\n-    Proc(Box<ClosureDecl>),\n     /// extern \"ABI\" fn\n     BareFunction(Box<BareFunctionDecl>),\n     Tuple(Vec<Type>),"}, {"sha": "61d2a9ee07107c1f4a25217d27dc5f249780114d", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 0, "deletions": 55, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/072a89642bae1a1aca96acda290dab1bcf318696/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/072a89642bae1a1aca96acda290dab1bcf318696/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=072a89642bae1a1aca96acda290dab1bcf318696", "patch": "@@ -465,61 +465,6 @@ impl fmt::String for clean::Type {\n             }\n             clean::Infer => write!(f, \"_\"),\n             clean::Primitive(prim) => primitive_link(f, prim, prim.to_string()),\n-            clean::Closure(ref decl) => {\n-                write!(f, \"{style}{lifetimes}|{args}|{bounds}{arrow}\",\n-                       style = UnsafetySpace(decl.unsafety),\n-                       lifetimes = if decl.lifetimes.len() == 0 {\n-                           \"\".to_string()\n-                       } else {\n-                           format!(\"for &lt;{}&gt;\",\n-                                   CommaSep(decl.lifetimes.as_slice()))\n-                       },\n-                       args = decl.decl.inputs,\n-                       arrow = decl.decl.output,\n-                       bounds = {\n-                           let mut ret = String::new();\n-                           for bound in decl.bounds.iter() {\n-                                match *bound {\n-                                    clean::RegionBound(..) => {}\n-                                    clean::TraitBound(ref t, modifier) => {\n-                                        if ret.len() == 0 {\n-                                            ret.push_str(\": \");\n-                                        } else {\n-                                            ret.push_str(\" + \");\n-                                        }\n-                                        if modifier == ast::TraitBoundModifier::Maybe {\n-                                            ret.push_str(\"?\");\n-                                        }\n-                                        ret.push_str(format!(\"{}\",\n-                                                             *t).as_slice());\n-                                    }\n-                                }\n-                           }\n-                           ret\n-                       })\n-            }\n-            clean::Proc(ref decl) => {\n-                write!(f, \"{style}{lifetimes}proc({args}){bounds}{arrow}\",\n-                       style = UnsafetySpace(decl.unsafety),\n-                       lifetimes = if decl.lifetimes.len() == 0 {\n-                           \"\".to_string()\n-                       } else {\n-                           format!(\"for &lt;{}&gt;\",\n-                                   CommaSep(decl.lifetimes.as_slice()))\n-                       },\n-                       args = decl.decl.inputs,\n-                       bounds = if decl.bounds.len() == 0 {\n-                           \"\".to_string()\n-                       } else {\n-                           let m = decl.bounds\n-                                           .iter()\n-                                           .map(|s| s.to_string());\n-                           format!(\n-                               \": {}\",\n-                               m.collect::<Vec<String>>().connect(\" + \"))\n-                       },\n-                       arrow = decl.decl.output)\n-            }\n             clean::BareFunction(ref decl) => {\n                 write!(f, \"{}{}fn{}{}\",\n                        UnsafetySpace(decl.unsafety),"}]}