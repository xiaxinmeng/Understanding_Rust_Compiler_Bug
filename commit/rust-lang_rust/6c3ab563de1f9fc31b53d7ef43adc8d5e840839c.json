{"sha": "6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "node_id": "C_kwDOAAsO6NoAKDZjM2FiNTYzZGUxZjlmYzMxYjUzZDdlZjQzYWRjOGQ1ZTg0MDgzOWM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-02T11:06:54Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-11-02T11:06:54Z"}, "message": "Auto merge of #13527 - unexge:use-let-else-stmt-in-convert-to-guarded-return-assist, r=jonas-schievink\n\nUse let-else statements in `Convert to guarded return` assist\n\nFollow up for https://github.com/rust-lang/rust-analyzer/pull/13516, addresses remaining part of https://github.com/rust-lang/rust-analyzer/issues/13254#issuecomment-1250408527", "tree": {"sha": "68cfc928d97e54a4005f5e0611c25363bcaa04e2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68cfc928d97e54a4005f5e0611c25363bcaa04e2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "html_url": "https://github.com/rust-lang/rust/commit/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "af1f48deab88565acf1eb7f3292af79744178d7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/af1f48deab88565acf1eb7f3292af79744178d7e", "html_url": "https://github.com/rust-lang/rust/commit/af1f48deab88565acf1eb7f3292af79744178d7e"}, {"sha": "62a6cdfe46b622e40ab0dc4fbb89134fc73d079e", "url": "https://api.github.com/repos/rust-lang/rust/commits/62a6cdfe46b622e40ab0dc4fbb89134fc73d079e", "html_url": "https://github.com/rust-lang/rust/commit/62a6cdfe46b622e40ab0dc4fbb89134fc73d079e"}], "stats": {"total": 90, "additions": 36, "deletions": 54}, "files": [{"sha": "b97be34c5f7e48324ff86a7c701dad8d6d96de38", "filename": "crates/ide-assists/src/handlers/convert_to_guarded_return.rs", "status": "modified", "additions": 16, "deletions": 54, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fconvert_to_guarded_return.rs?ref=6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "patch": "@@ -129,32 +129,15 @@ pub(crate) fn convert_to_guarded_return(acc: &mut Assists, ctx: &AssistContext<'\n                 }\n                 Some((path, bound_ident)) => {\n                     // If-let.\n-                    let match_expr = {\n-                        let happy_arm = {\n-                            let pat = make::tuple_struct_pat(\n-                                path,\n-                                once(make::ext::simple_ident_pat(make::name(\"it\")).into()),\n-                            );\n-                            let expr = {\n-                                let path = make::ext::ident_path(\"it\");\n-                                make::expr_path(path)\n-                            };\n-                            make::match_arm(once(pat.into()), None, expr)\n-                        };\n-\n-                        let sad_arm = make::match_arm(\n-                            // FIXME: would be cool to use `None` or `Err(_)` if appropriate\n-                            once(make::wildcard_pat().into()),\n-                            None,\n-                            early_expression,\n-                        );\n-\n-                        make::expr_match(cond_expr, make::match_arm_list(vec![happy_arm, sad_arm]))\n-                    };\n-\n-                    let let_stmt = make::let_stmt(bound_ident, None, Some(match_expr));\n-                    let let_stmt = let_stmt.indent(if_indent_level);\n-                    let_stmt.syntax().clone_for_update()\n+                    let pat = make::tuple_struct_pat(path, once(bound_ident));\n+                    let let_else_stmt = make::let_else_stmt(\n+                        pat.into(),\n+                        None,\n+                        cond_expr,\n+                        ast::make::tail_only_block_expr(early_expression),\n+                    );\n+                    let let_else_stmt = let_else_stmt.indent(if_indent_level);\n+                    let_else_stmt.syntax().clone_for_update()\n                 }\n             };\n \n@@ -238,10 +221,7 @@ fn main(n: Option<String>) {\n             r#\"\n fn main(n: Option<String>) {\n     bar();\n-    let n = match n {\n-        Some(it) => it,\n-        _ => return,\n-    };\n+    let Some(n) = n else { return };\n     foo(n);\n \n     // comment\n@@ -264,10 +244,7 @@ fn main() {\n \"#,\n             r#\"\n fn main() {\n-    let x = match Err(92) {\n-        Ok(it) => it,\n-        _ => return,\n-    };\n+    let Ok(x) = Err(92) else { return };\n     foo(x);\n }\n \"#,\n@@ -292,10 +269,7 @@ fn main(n: Option<String>) {\n             r#\"\n fn main(n: Option<String>) {\n     bar();\n-    let n = match n {\n-        Some(it) => it,\n-        _ => return,\n-    };\n+    let Some(n) = n else { return };\n     foo(n);\n \n     // comment\n@@ -323,10 +297,7 @@ fn main(n: Option<String>) {\n             r#\"\n fn main(n: Option<String>) {\n     bar();\n-    let mut n = match n {\n-        Some(it) => it,\n-        _ => return,\n-    };\n+    let Some(mut n) = n else { return };\n     foo(n);\n \n     // comment\n@@ -354,10 +325,7 @@ fn main(n: Option<&str>) {\n             r#\"\n fn main(n: Option<&str>) {\n     bar();\n-    let ref n = match n {\n-        Some(it) => it,\n-        _ => return,\n-    };\n+    let Some(ref n) = n else { return };\n     foo(n);\n \n     // comment\n@@ -412,10 +380,7 @@ fn main() {\n             r#\"\n fn main() {\n     while true {\n-        let n = match n {\n-            Some(it) => it,\n-            _ => continue,\n-        };\n+        let Some(n) = n else { continue };\n         foo(n);\n         bar();\n     }\n@@ -469,10 +434,7 @@ fn main() {\n             r#\"\n fn main() {\n     loop {\n-        let n = match n {\n-            Some(it) => it,\n-            _ => continue,\n-        };\n+        let Some(n) = n else { continue };\n         foo(n);\n         bar();\n     }"}, {"sha": "8c26009add2bb04fbab8203720e32518213270bc", "filename": "crates/syntax/src/ast/make.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6c3ab563de1f9fc31b53d7ef43adc8d5e840839c/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fmake.rs?ref=6c3ab563de1f9fc31b53d7ef43adc8d5e840839c", "patch": "@@ -334,6 +334,10 @@ pub fn block_expr(\n     ast_from_text(&format!(\"fn f() {buf}\"))\n }\n \n+pub fn tail_only_block_expr(tail_expr: ast::Expr) -> ast::BlockExpr {\n+    ast_from_text(&format!(\"fn f() {{ {tail_expr} }}\"))\n+}\n+\n /// Ideally this function wouldn't exist since it involves manual indenting.\n /// It differs from `make::block_expr` by also supporting comments.\n ///\n@@ -656,6 +660,22 @@ pub fn let_stmt(\n     };\n     ast_from_text(&format!(\"fn f() {{ {text} }}\"))\n }\n+\n+pub fn let_else_stmt(\n+    pattern: ast::Pat,\n+    ty: Option<ast::Type>,\n+    expr: ast::Expr,\n+    diverging: ast::BlockExpr,\n+) -> ast::LetStmt {\n+    let mut text = String::new();\n+    format_to!(text, \"let {pattern}\");\n+    if let Some(ty) = ty {\n+        format_to!(text, \": {ty}\");\n+    }\n+    format_to!(text, \" = {expr} else {diverging};\");\n+    ast_from_text(&format!(\"fn f() {{ {text} }}\"))\n+}\n+\n pub fn expr_stmt(expr: ast::Expr) -> ast::ExprStmt {\n     let semi = if expr.is_block_like() { \"\" } else { \";\" };\n     ast_from_text(&format!(\"fn f() {{ {expr}{semi} (); }}\"))"}]}