{"sha": "1894a5fe2c72a1e22897026f34e5f9035cc169ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE4OTRhNWZlMmM3MmExZTIyODk3MDI2ZjM0ZTVmOTAzNWNjMTY5ZmY=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-11-04T12:45:26Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-12-04T09:17:36Z"}, "message": "Also make immutable references to non-freeze restricted value range types unsafe", "tree": {"sha": "6ed8ba0526340f76b4918ba8159f53f47f4177c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ed8ba0526340f76b4918ba8159f53f47f4177c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1894a5fe2c72a1e22897026f34e5f9035cc169ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1894a5fe2c72a1e22897026f34e5f9035cc169ff", "html_url": "https://github.com/rust-lang/rust/commit/1894a5fe2c72a1e22897026f34e5f9035cc169ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1894a5fe2c72a1e22897026f34e5f9035cc169ff/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "081c49783f5cfc24f66f3ac36244d816567cc120", "url": "https://api.github.com/repos/rust-lang/rust/commits/081c49783f5cfc24f66f3ac36244d816567cc120", "html_url": "https://github.com/rust-lang/rust/commit/081c49783f5cfc24f66f3ac36244d816567cc120"}], "stats": {"total": 39, "additions": 33, "deletions": 6}, "files": [{"sha": "23f07773f3f3431186d62c1d5a1eac4c04c77624", "filename": "src/libcore/marker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibcore%2Fmarker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibcore%2Fmarker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmarker.rs?ref=1894a5fe2c72a1e22897026f34e5f9035cc169ff", "patch": "@@ -596,7 +596,7 @@ mod impls {\n /// This affects, for example, whether a `static` of that type is\n /// placed in read-only static memory or writable static memory.\n #[lang = \"freeze\"]\n-unsafe auto trait Freeze {}\n+pub(crate) unsafe auto trait Freeze {}\n \n impl<T: ?Sized> !Freeze for UnsafeCell<T> {}\n unsafe impl<T: ?Sized> Freeze for PhantomData<T> {}"}, {"sha": "a89c6ca60cbea434f1eb023d4b525db292f215dc", "filename": "src/libcore/nonzero.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibcore%2Fnonzero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibcore%2Fnonzero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnonzero.rs?ref=1894a5fe2c72a1e22897026f34e5f9035cc169ff", "patch": "@@ -11,22 +11,23 @@\n //! Exposes the NonZero lang item which provides optimization hints.\n \n use ops::{CoerceUnsized, DispatchFromDyn};\n+use marker::Freeze;\n \n /// A wrapper type for raw pointers and integers that will never be\n /// NULL or 0 that might allow certain optimizations.\n #[rustc_layout_scalar_valid_range_start(1)]\n #[derive(Copy, Eq, PartialEq, Ord, PartialOrd, Hash)]\n #[repr(transparent)]\n-pub(crate) struct NonZero<T>(pub(crate) T);\n+pub(crate) struct NonZero<T: Freeze>(pub(crate) T);\n \n // Do not call `T::clone` as theoretically it could turn the field into `0`\n // invalidating `NonZero`'s invariant.\n-impl<T: Copy> Clone for NonZero<T> {\n+impl<T: Copy + Freeze> Clone for NonZero<T> {\n     fn clone(&self) -> Self {\n         unsafe { NonZero(self.0) }\n     }\n }\n \n-impl<T: CoerceUnsized<U>, U> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n+impl<T: CoerceUnsized<U> + Freeze, U: Freeze> CoerceUnsized<NonZero<U>> for NonZero<T> {}\n \n-impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<NonZero<U>> for NonZero<T> {}\n+impl<T: DispatchFromDyn<U> + Freeze, U: Freeze> DispatchFromDyn<NonZero<U>> for NonZero<T> {}"}, {"sha": "c7a785ad2c5200ed59d4b0e46d3b1da8d9622159", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=1894a5fe2c72a1e22897026f34e5f9035cc169ff", "patch": "@@ -187,7 +187,11 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                             kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                         }], &[]);\n                     }\n-                    if context.is_mutating_use() {\n+                    let is_freeze = base\n+                        .ty(self.mir, self.tcx)\n+                        .to_ty(self.tcx)\n+                        .is_freeze(self.tcx, self.param_env, self.source_info.span);\n+                    if context.is_mutating_use() || !is_freeze {\n                         self.check_mut_borrowing_layout_constrained_field(place);\n                     }\n                 }"}, {"sha": "d68c712227af232e2fec23f2a9805c7feafbcfbb", "filename": "src/test/ui/unsafe/ranged_ints3.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.rs?ref=1894a5fe2c72a1e22897026f34e5f9035cc169ff", "patch": "@@ -0,0 +1,11 @@\n+#![feature(rustc_attrs)]\n+\n+use std::cell::Cell;\n+\n+#[rustc_layout_scalar_valid_range_start(1)]\n+#[repr(transparent)]\n+pub(crate) struct NonZero<T>(pub(crate) T);\n+fn main() {\n+    let mut x = unsafe { NonZero(Cell::new(1)) };\n+    let y = &x.0; //~ ERROR borrow of layout constrained field is unsafe\n+}"}, {"sha": "b5aa9089b5f62ecc0f63d7c5c935c0f787ae522e", "filename": "src/test/ui/unsafe/ranged_ints3.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1894a5fe2c72a1e22897026f34e5f9035cc169ff/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Franged_ints3.stderr?ref=1894a5fe2c72a1e22897026f34e5f9035cc169ff", "patch": "@@ -0,0 +1,11 @@\n+error[E0133]: borrow of layout constrained field is unsafe and requires unsafe function or block\n+  --> $DIR/ranged_ints3.rs:10:13\n+   |\n+LL |     let y = &x.0; //~ ERROR borrow of layout constrained field is unsafe\n+   |             ^^^^ borrow of layout constrained field\n+   |\n+   = note: references to fields of layout constrained fields lose the constraints\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0133`."}]}