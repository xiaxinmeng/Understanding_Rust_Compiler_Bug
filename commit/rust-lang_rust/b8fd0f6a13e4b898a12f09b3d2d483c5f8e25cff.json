{"sha": "b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4ZmQwZjZhMTNlNGI4OThhMTJmMDliM2QyZDQ4M2M1ZjhlMjVjZmY=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T11:01:01Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2020-07-27T11:01:01Z"}, "message": "rename eval_const_to_op -> const_to_op", "tree": {"sha": "29de8b56607c68842bb8ca74154eac813b353695", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29de8b56607c68842bb8ca74154eac813b353695"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "html_url": "https://github.com/rust-lang/rust/commit/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1df9f44db7e0be3122335d961c3aa3542c923c7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1df9f44db7e0be3122335d961c3aa3542c923c7d", "html_url": "https://github.com/rust-lang/rust/commit/1df9f44db7e0be3122335d961c3aa3542c923c7d"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "e7eeb4b4de4965d266d7babbeb9bcb51d1b1630d", "filename": "src/librustc_mir/const_eval/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fconst_eval%2Fmod.rs?ref=b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "patch": "@@ -41,7 +41,7 @@ pub(crate) fn destructure_const<'tcx>(\n ) -> mir::DestructuredConst<'tcx> {\n     trace!(\"destructure_const: {:?}\", val);\n     let ecx = mk_eval_cx(tcx, DUMMY_SP, param_env, false);\n-    let op = ecx.eval_const_to_op(val, None).unwrap();\n+    let op = ecx.const_to_op(val, None).unwrap();\n \n     // We go to `usize` as we cannot allocate anything bigger anyway.\n     let (field_count, variant, down) = match val.ty.kind {"}, {"sha": "3d3d756cffe5a8bcead03508b9a1d1059c48f2b5", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "patch": "@@ -848,12 +848,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         };\n         let val = self.tcx.const_eval_global_id(param_env, gid, Some(self.tcx.span))?;\n \n-        // Even though `ecx.const_eval` is called from `eval_const_to_op` we can never have a\n+        // Even though `ecx.const_eval` is called from `const_to_op` we can never have a\n         // recursion deeper than one level, because the `tcx.const_eval` above is guaranteed to not\n-        // return `ConstValue::Unevaluated`, which is the only way that `eval_const_to_op` will call\n+        // return `ConstValue::Unevaluated`, which is the only way that `const_to_op` will call\n         // `ecx.const_eval`.\n         let const_ = ty::Const { val: ty::ConstKind::Value(val), ty };\n-        self.eval_const_to_op(&const_, None)\n+        self.const_to_op(&const_, None)\n     }\n \n     pub fn const_eval_raw("}, {"sha": "f9f72464b277b87d328ab602a447fd59f25fe14a", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "patch": "@@ -517,7 +517,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             Constant(ref constant) => {\n                 let val =\n                     self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal);\n-                self.eval_const_to_op(val, layout)?\n+                self.const_to_op(val, layout)?\n             }\n         };\n         trace!(\"{:?}: {:?}\", mir_op, *op);\n@@ -536,7 +536,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     // in patterns via the `const_eval` module\n     /// The `val` and `layout` are assumed to already be in our interpreter\n     /// \"universe\" (param_env).\n-    crate fn eval_const_to_op(\n+    crate fn const_to_op(\n         &self,\n         val: &ty::Const<'tcx>,\n         layout: Option<TyAndLayout<'tcx>>,\n@@ -559,16 +559,12 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 // potentially requiring the current static to be evaluated again. This is not a\n                 // problem here, because we are building an operand which means an actual read is\n                 // happening.\n-                //\n-                // The machine callback `adjust_global_const` below is guaranteed to\n-                // be called for all constants because `const_eval` calls\n-                // `eval_const_to_op` recursively.\n                 return Ok(self.const_eval(GlobalId { instance, promoted }, val.ty)?);\n             }\n             ty::ConstKind::Infer(..)\n             | ty::ConstKind::Bound(..)\n             | ty::ConstKind::Placeholder(..) => {\n-                span_bug!(self.cur_span(), \"eval_const_to_op: Unexpected ConstKind {:?}\", val)\n+                span_bug!(self.cur_span(), \"const_to_op: Unexpected ConstKind {:?}\", val)\n             }\n             ty::ConstKind::Value(val_val) => val_val,\n         };"}, {"sha": "59003ce9e76be999502cf67a43fa5c19104abd76", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=b8fd0f6a13e4b898a12f09b3d2d483c5f8e25cff", "patch": "@@ -436,7 +436,7 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n             return None;\n         }\n \n-        match self.ecx.eval_const_to_op(c.literal, None) {\n+        match self.ecx.const_to_op(c.literal, None) {\n             Ok(op) => Some(op),\n             Err(error) => {\n                 let tcx = self.ecx.tcx.at(c.span);"}]}