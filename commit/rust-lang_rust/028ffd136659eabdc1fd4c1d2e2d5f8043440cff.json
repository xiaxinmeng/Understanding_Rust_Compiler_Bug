{"sha": "028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyOGZmZDEzNjY1OWVhYmRjMWZkNGMxZDJlMmQ1ZjgwNDM0NDBjZmY=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-10-02T16:24:42Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-10-02T16:24:42Z"}, "message": "Rollup merge of #64989 - sinkuu:fix_ice_64964, r=davidtwco\n\nFix ICE #64964\n\nFixes #64964, which is an ICE with `await`ing in a method + incr-comp.", "tree": {"sha": "b9bc7971179046e7f8bb1866f82aee8f8e2de876", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b9bc7971179046e7f8bb1866f82aee8f8e2de876"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdlM9KCRBK7hj4Ov3rIwAAdHIIAA3HlknXfkRFNZ5x5TUMaem7\nqu3EU+zFbSi7YoKEVV1D83P21aeTOs2nHOmf+CpdAQq6Eo4ly8wXyk0iELsttdGr\nLeguwv2LWq1L9vlkA43fw6eaV9pLHPsUYb0AUD+7qOr9nt3Q5gUIxKlTu6FeLQZ6\n7LD5fJ6PI1Yra4hseefj6QzNISIDAg6ENFajAqHOm/lKrF/+Vneo5GhXtqn9snkt\nwY+tMfgVe4VIlRMbBLyaNo6Awyx+SGZ78LJFCG6aKW9rX4/VMS5rKxhLjT3pSn/W\n29vN5NjX71KW5G2rct7sDESo5yPJw1OhNOs8Wggb+Gv4PsHqyxiEMKnkAHjilaM=\n=aIxo\n-----END PGP SIGNATURE-----\n", "payload": "tree b9bc7971179046e7f8bb1866f82aee8f8e2de876\nparent 7daf2e8946015f0ba1bf69f5be61964a3f29f04e\nparent f0fddb1a89eda1c5588725e23a50b3073f4e7e97\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1570033482 +0200\ncommitter GitHub <noreply@github.com> 1570033482 +0200\n\nRollup merge of #64989 - sinkuu:fix_ice_64964, r=davidtwco\n\nFix ICE #64964\n\nFixes #64964, which is an ICE with `await`ing in a method + incr-comp.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "html_url": "https://github.com/rust-lang/rust/commit/028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7daf2e8946015f0ba1bf69f5be61964a3f29f04e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7daf2e8946015f0ba1bf69f5be61964a3f29f04e", "html_url": "https://github.com/rust-lang/rust/commit/7daf2e8946015f0ba1bf69f5be61964a3f29f04e"}, {"sha": "f0fddb1a89eda1c5588725e23a50b3073f4e7e97", "url": "https://api.github.com/repos/rust-lang/rust/commits/f0fddb1a89eda1c5588725e23a50b3073f4e7e97", "html_url": "https://github.com/rust-lang/rust/commit/f0fddb1a89eda1c5588725e23a50b3073f4e7e97"}], "stats": {"total": 46, "additions": 37, "deletions": 9}, "files": [{"sha": "42d45c5dfd3c46080fcab8da83573f9931254a48", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "patch": "@@ -317,6 +317,12 @@ pub struct GeneratorInteriorTypeCause<'tcx> {\n     pub scope_span: Option<Span>,\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx> TypeFoldable<'tcx> for GeneratorInteriorTypeCause<'tcx> {\n+        ty, span, scope_span\n+    }\n+}\n+\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n pub struct TypeckTables<'tcx> {\n     /// The HirId::owner all ItemLocalIds in this table are relative to."}, {"sha": "940537a5f48afac66848305f4c2fd66975ead5bb", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "patch": "@@ -123,13 +123,6 @@ pub fn resolve_interior<'a, 'tcx>(\n     // Sort types by insertion order\n     types.sort_by_key(|t| t.1);\n \n-    // Store the generator types and spans into the tables for this generator.\n-    let interior_types = types.iter().cloned().map(|t| t.0).collect::<Vec<_>>();\n-    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n-\n-    // Extract type components\n-    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n-\n     // The types in the generator interior contain lifetimes local to the generator itself,\n     // which should not be exposed outside of the generator. Therefore, we replace these\n     // lifetimes with existentially-bound lifetimes, which reflect the exact value of the\n@@ -139,18 +132,25 @@ pub fn resolve_interior<'a, 'tcx>(\n     // if a Sync generator contains an &'\u03b1 T, we need to check whether &'\u03b1 T: Sync),\n     // so knowledge of the exact relationships between them isn't particularly important.\n \n-    debug!(\"types in generator {:?}, span = {:?}\", type_list, body.value.span);\n+    debug!(\"types in generator {:?}, span = {:?}\", types, body.value.span);\n \n     // Replace all regions inside the generator interior with late bound regions\n     // Note that each region slot in the types gets a new fresh late bound region,\n     // which means that none of the regions inside relate to any other, even if\n     // typeck had previously found constraints that would cause them to be related.\n     let mut counter = 0;\n-    let type_list = fcx.tcx.fold_regions(&type_list, &mut false, |_, current_depth| {\n+    let types = fcx.tcx.fold_regions(&types, &mut false, |_, current_depth| {\n         counter += 1;\n         fcx.tcx.mk_region(ty::ReLateBound(current_depth, ty::BrAnon(counter)))\n     });\n \n+    // Store the generator types and spans into the tables for this generator.\n+    let interior_types = types.iter().map(|t| t.0.clone()).collect::<Vec<_>>();\n+    visitor.fcx.inh.tables.borrow_mut().generator_interior_types = interior_types;\n+\n+    // Extract type components\n+    let type_list = fcx.tcx.mk_type_list(types.into_iter().map(|t| (t.0).ty));\n+\n     let witness = fcx.tcx.mk_generator_witness(ty::Binder::bind(type_list));\n \n     debug!(\"types in generator after region replacement {:?}, span = {:?}\","}, {"sha": "11f6cb6af9cc6b2688446535696c27236aaee4d9", "filename": "src/test/ui/async-await/issues/issue-64964.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "raw_url": "https://github.com/rust-lang/rust/raw/028ffd136659eabdc1fd4c1d2e2d5f8043440cff/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissues%2Fissue-64964.rs?ref=028ffd136659eabdc1fd4c1d2e2d5f8043440cff", "patch": "@@ -0,0 +1,22 @@\n+// check-pass\n+// compile-flags: -Z query-dep-graph\n+// edition:2018\n+\n+// Regression test for ICE related to `await`ing in a method + incr. comp. (#64964)\n+\n+struct Body;\n+impl Body {\n+    async fn next(&mut self) {\n+        async {}.await\n+    }\n+}\n+\n+// Another reproduction: `await`ing with a variable from for-loop.\n+\n+async fn bar() {\n+    for x in 0..10 {\n+        async { Some(x) }.await.unwrap();\n+    }\n+}\n+\n+fn main() {}"}]}