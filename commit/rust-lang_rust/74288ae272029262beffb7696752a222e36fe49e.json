{"sha": "74288ae272029262beffb7696752a222e36fe49e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0Mjg4YWUyNzIwMjkyNjJiZWZmYjc2OTY3NTJhMjIyZTM2ZmU0OWU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-18T11:20:54Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-18T11:20:54Z"}, "message": "remove depedency on ra_arena", "tree": {"sha": "63640e1220c5cc8b009a39fdb5dbe4f1cde933d6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63640e1220c5cc8b009a39fdb5dbe4f1cde933d6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74288ae272029262beffb7696752a222e36fe49e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74288ae272029262beffb7696752a222e36fe49e", "html_url": "https://github.com/rust-lang/rust/commit/74288ae272029262beffb7696752a222e36fe49e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74288ae272029262beffb7696752a222e36fe49e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c154c289e3c18c2517ab8ce91e1d61f45f70388", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c154c289e3c18c2517ab8ce91e1d61f45f70388", "html_url": "https://github.com/rust-lang/rust/commit/4c154c289e3c18c2517ab8ce91e1d61f45f70388"}], "stats": {"total": 41, "additions": 23, "deletions": 18}, "files": [{"sha": "451daed1bd0219bac78dcfc37e84ae3c6ab26463", "filename": "crates/ra_vfs/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74288ae272029262beffb7696752a222e36fe49e/crates%2Fra_vfs%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/74288ae272029262beffb7696752a222e36fe49e/crates%2Fra_vfs%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2FCargo.toml?ref=74288ae272029262beffb7696752a222e36fe49e", "patch": "@@ -15,7 +15,6 @@ drop_bomb = \"0.1.0\"\n parking_lot = \"0.7.0\"\n \n thread_worker = { path = \"../thread_worker\" }\n-ra_arena = { path = \"../ra_arena\" }\n \n [dev-dependencies]\n tempfile = \"3\""}, {"sha": "d07bc569448dac762c402029f85d683e5679f1d3", "filename": "crates/ra_vfs/src/lib.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/74288ae272029262beffb7696752a222e36fe49e/crates%2Fra_vfs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74288ae272029262beffb7696752a222e36fe49e/crates%2Fra_vfs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_vfs%2Fsrc%2Flib.rs?ref=74288ae272029262beffb7696752a222e36fe49e", "patch": "@@ -25,7 +25,6 @@ use std::{\n };\n \n use crossbeam_channel::Receiver;\n-use ra_arena::{impl_arena_id, Arena, RawId};\n use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::{FxHashMap, FxHashSet};\n \n@@ -40,8 +39,7 @@ pub use crate::{\n };\n \n #[derive(Debug, Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash)]\n-pub struct VfsFile(pub RawId);\n-impl_arena_id!(VfsFile);\n+pub struct VfsFile(pub u32);\n \n struct VfsFileData {\n     root: VfsRoot,\n@@ -52,7 +50,7 @@ struct VfsFileData {\n \n pub struct Vfs {\n     roots: Arc<Roots>,\n-    files: Arena<VfsFile, VfsFileData>,\n+    files: Vec<VfsFileData>,\n     root2files: FxHashMap<VfsRoot, FxHashSet<VfsFile>>,\n     pending_changes: Vec<VfsChange>,\n     worker: Worker,\n@@ -78,8 +76,7 @@ impl Vfs {\n             root2files.insert(root, Default::default());\n             worker.sender().send(io::Task::AddRoot { root }).unwrap();\n         }\n-        let res =\n-            Vfs { roots, files: Arena::default(), root2files, worker, pending_changes: Vec::new() };\n+        let res = Vfs { roots, files: Vec::new(), root2files, worker, pending_changes: Vec::new() };\n         let vfs_roots = res.roots.iter().collect();\n         (res, vfs_roots)\n     }\n@@ -96,8 +93,8 @@ impl Vfs {\n     }\n \n     pub fn file2path(&self, file: VfsFile) -> PathBuf {\n-        let rel_path = &self.files[file].path;\n-        let root_path = &self.roots.path(self.files[file].root);\n+        let rel_path = &self.file(file).path;\n+        let root_path = &self.roots.path(self.file(file).root);\n         rel_path.to_path(root_path)\n     }\n \n@@ -166,11 +163,11 @@ impl Vfs {\n                 // been open in the editor, so we need to account for that.\n                 let existing = self.root2files[&root]\n                     .iter()\n-                    .map(|&file| (self.files[file].path.clone(), file))\n+                    .map(|&file| (self.file(file).path.clone(), file))\n                     .collect::<FxHashMap<_, _>>();\n                 for (path, text) in files {\n                     if let Some(&file) = existing.get(&path) {\n-                        let text = Arc::clone(&self.files[file].text);\n+                        let text = Arc::clone(&self.file(file).text);\n                         cur_files.push((file, path, text));\n                         continue;\n                     }\n@@ -184,7 +181,7 @@ impl Vfs {\n             }\n             TaskResult::SingleFile { root, path, text } => {\n                 let existing_file = self.find_file(root, &path);\n-                if existing_file.map(|file| self.files[file].is_overlayed) == Some(true) {\n+                if existing_file.map(|file| self.file(file).is_overlayed) == Some(true) {\n                     return;\n                 }\n                 match (existing_file, text) {\n@@ -240,22 +237,23 @@ impl Vfs {\n         is_overlayed: bool,\n     ) -> VfsFile {\n         let data = VfsFileData { root, path, text, is_overlayed };\n-        let file = self.files.alloc(data);\n+        let file = VfsFile(self.files.len() as u32);\n+        self.files.push(data);\n         self.root2files.get_mut(&root).unwrap().insert(file);\n         file\n     }\n \n     fn raw_change_file(&mut self, file: VfsFile, new_text: Arc<String>, is_overlayed: bool) {\n-        let mut file_data = &mut self.files[file];\n+        let mut file_data = &mut self.file_mut(file);\n         file_data.text = new_text;\n         file_data.is_overlayed = is_overlayed;\n     }\n \n     fn raw_remove_file(&mut self, file: VfsFile) {\n         // FIXME: use arena with removal\n-        self.files[file].text = Default::default();\n-        self.files[file].path = Default::default();\n-        let root = self.files[file].root;\n+        self.file_mut(file).text = Default::default();\n+        self.file_mut(file).path = Default::default();\n+        let root = self.file(file).root;\n         let removed = self.root2files.get_mut(&root).unwrap().remove(&file);\n         assert!(removed);\n     }\n@@ -267,7 +265,15 @@ impl Vfs {\n     }\n \n     fn find_file(&self, root: VfsRoot, path: &RelativePath) -> Option<VfsFile> {\n-        self.root2files[&root].iter().map(|&it| it).find(|&file| self.files[file].path == path)\n+        self.root2files[&root].iter().map(|&it| it).find(|&file| self.file(file).path == path)\n+    }\n+\n+    fn file(&self, file: VfsFile) -> &VfsFileData {\n+        &self.files[file.0 as usize]\n+    }\n+\n+    fn file_mut(&mut self, file: VfsFile) -> &mut VfsFileData {\n+        &mut self.files[file.0 as usize]\n     }\n }\n "}]}