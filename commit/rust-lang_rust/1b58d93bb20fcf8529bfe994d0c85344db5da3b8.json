{"sha": "1b58d93bb20fcf8529bfe994d0c85344db5da3b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiNThkOTNiYjIwZmNmODUyOWJmZTk5NGQwYzg1MzQ0ZGI1ZGEzYjg=", "commit": {"author": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-15T00:30:05Z"}, "committer": {"name": "Taylor Yu", "email": "tlyu@mit.edu", "date": "2021-06-15T02:42:34Z"}, "message": "add boolean operator example", "tree": {"sha": "ea3274d3639a05bbe2529350ac99151777836171", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea3274d3639a05bbe2529350ac99151777836171"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b58d93bb20fcf8529bfe994d0c85344db5da3b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b58d93bb20fcf8529bfe994d0c85344db5da3b8", "html_url": "https://github.com/rust-lang/rust/commit/1b58d93bb20fcf8529bfe994d0c85344db5da3b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b58d93bb20fcf8529bfe994d0c85344db5da3b8/comments", "author": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tlyu", "id": 431873, "node_id": "MDQ6VXNlcjQzMTg3Mw==", "avatar_url": "https://avatars.githubusercontent.com/u/431873?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tlyu", "html_url": "https://github.com/tlyu", "followers_url": "https://api.github.com/users/tlyu/followers", "following_url": "https://api.github.com/users/tlyu/following{/other_user}", "gists_url": "https://api.github.com/users/tlyu/gists{/gist_id}", "starred_url": "https://api.github.com/users/tlyu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tlyu/subscriptions", "organizations_url": "https://api.github.com/users/tlyu/orgs", "repos_url": "https://api.github.com/users/tlyu/repos", "events_url": "https://api.github.com/users/tlyu/events{/privacy}", "received_events_url": "https://api.github.com/users/tlyu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "834f4b770ea58ea39ed18bd50a880e9d61bdc69f", "url": "https://api.github.com/repos/rust-lang/rust/commits/834f4b770ea58ea39ed18bd50a880e9d61bdc69f", "html_url": "https://github.com/rust-lang/rust/commit/834f4b770ea58ea39ed18bd50a880e9d61bdc69f"}], "stats": {"total": 30, "additions": 30, "deletions": 0}, "files": [{"sha": "e79b55193c6c211187a83beeb173c323ae2d64e5", "filename": "library/core/src/option.rs", "status": "modified", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1b58d93bb20fcf8529bfe994d0c85344db5da3b8/library%2Fcore%2Fsrc%2Foption.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b58d93bb20fcf8529bfe994d0c85344db5da3b8/library%2Fcore%2Fsrc%2Foption.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Foption.rs?ref=1b58d93bb20fcf8529bfe994d0c85344db5da3b8", "patch": "@@ -233,6 +233,36 @@\n //! [`or_else`]: Option::or_else\n //! [`xor`]: Option::xor\n //!\n+//! This is an example of using methods like [`and_then`] and [`or`] in a\n+//! pipeline of method calls. Early stages of the pipeline pass failure\n+//! values ([`None`]) through unchanged, and continue processing on\n+//! success values ([`Some`]). Toward the end, [`or`] substitutes an error\n+//! message if it receives [`None`].\n+//!\n+//! ```\n+//! # use std::collections::BTreeMap;\n+//! let mut bt = BTreeMap::new();\n+//! bt.insert(20u8, \"foo\");\n+//! bt.insert(42u8, \"bar\");\n+//! let res = vec![0u8, 1, 11, 200, 22]\n+//!     .into_iter()\n+//!     .map(|x| {\n+//!         // `checked_sub()` returns `None` on error\n+//!         x.checked_sub(1)\n+//!             // same with `checked_mul()`\n+//!             .and_then(|x| x.checked_mul(2))\n+//!             // `BTreeMap::get` returns `None` on error\n+//!             .and_then(|x| bt.get(&x))\n+//!             // Substitute an error message if we have `None` so far\n+//!             .or(Some(&\"error!\"))\n+//!             .copied()\n+//!             // Won't panic because we unconditionally used `Some` above\n+//!             .unwrap()\n+//!     })\n+//!     .collect::<Vec<_>>();\n+//! assert_eq!(res, [\"error!\", \"error!\", \"foo\", \"error!\", \"bar\"]);\n+//! ```\n+//!\n //! ## Iterating over `Option`\n //!\n //! An [`Option`] can be iterated over. This can be helpful if you need an"}]}