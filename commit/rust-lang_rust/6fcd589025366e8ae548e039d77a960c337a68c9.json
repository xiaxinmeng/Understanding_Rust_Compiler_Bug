{"sha": "6fcd589025366e8ae548e039d77a960c337a68c9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2Q1ODkwMjUzNjZlOGFlNTQ4ZTAzOWQ3N2E5NjBjMzM3YTY4Yzk=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-11-26T12:39:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-11-26T12:39:05Z"}, "message": "Rollup merge of #79000 - sivadeilra:user/ardavis/lev_distance, r=wesleywiser\n\nMove lev_distance to rustc_ast, make non-generic\n\nrustc_ast currently has a few dependencies on rustc_lexer. Ideally, an AST\nwould not have any dependency its lexer, for minimizing\ndesign-time dependencies. Breaking this dependency would also have practical\nbenefits, since modifying rustc_lexer would not trigger a rebuild of rustc_ast.\n\nThis commit does not remove the rustc_ast --> rustc_lexer dependency,\nbut it does remove one of the sources of this dependency, which is the\ncode that handles fuzzy matching between symbol names for making suggestions\nin diagnostics. Since that code depends only on Symbol, it is easy to move\nit to rustc_span. It might even be best to move it to a separate crate,\nsince other tools such as Cargo use the same algorithm, and have simply\ncontain a duplicate of the code.\n\nThis changes the signature of find_best_match_for_name so that it is no\nlonger generic over its input. I checked the optimized binaries, and this\nfunction was duplicated for nearly every call site, because most call sites\nused short-lived iterator chains, generic over Map and such. But there's\nno good reason for a function like this to be generic, since all it does\nis immediately convert the generic input (the Iterator impl) to a concrete\nVec<Symbol>. This has all of the costs of generics (duplicated method bodies)\nwith no benefit.\n\nChanging find_best_match_for_name to be non-generic removed about 10KB of\ncode from the optimized binary. I know it's a drop in the bucket, but we have\nto start reducing binary size, and beginning to tame over-use of generics\nis part of that.", "tree": {"sha": "2f9a6a9475026f69a50689ccfd6e3b8a6d67842f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f9a6a9475026f69a50689ccfd6e3b8a6d67842f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcd589025366e8ae548e039d77a960c337a68c9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfv6HpCRBK7hj4Ov3rIwAAdHIIAIKON0ChOckXVP0ag/DfSPP5\nAWNq5g19FHQJOP7XXyel4si0c7iKv+YMpsijtlI+yFsgYGVxiZIEnFVckzOZ3hpy\nrNJGMeyLfCO3bcJRq6ZGEZiSSM+RLGSp+EJRnCm0NW2dyfyeGqEW3J+d7Cno9sEC\nXUndCM4zNHhuHCYV33Vv0OqYMKBdkvNJoFlRGvaFQxkyrz1g314c7crBbBE/BGlX\n3ZCOEWkf6ByfX7MYSHgZFee9FCe4Akhf7paiNFH3uz+2jP+NxPbfxSSAlDimY5Zs\nZFlhkEFQYJFqWIQ9iGHKcwyz9AG4ZRuPgilELn9pPSKVfhMRf/ivDi/eX2hQpUU=\n=rAqq\n-----END PGP SIGNATURE-----\n", "payload": "tree 2f9a6a9475026f69a50689ccfd6e3b8a6d67842f\nparent 9b2117d1f62116467de870d8264dfb926d68c22f\nparent 5481c1bd6dc6b6cfdf7e75676028f561a39b78b9\nauthor Jonas Schievink <jonasschievink@gmail.com> 1606394345 +0100\ncommitter GitHub <noreply@github.com> 1606394345 +0100\n\nRollup merge of #79000 - sivadeilra:user/ardavis/lev_distance, r=wesleywiser\n\nMove lev_distance to rustc_ast, make non-generic\n\nrustc_ast currently has a few dependencies on rustc_lexer. Ideally, an AST\nwould not have any dependency its lexer, for minimizing\ndesign-time dependencies. Breaking this dependency would also have practical\nbenefits, since modifying rustc_lexer would not trigger a rebuild of rustc_ast.\n\nThis commit does not remove the rustc_ast --> rustc_lexer dependency,\nbut it does remove one of the sources of this dependency, which is the\ncode that handles fuzzy matching between symbol names for making suggestions\nin diagnostics. Since that code depends only on Symbol, it is easy to move\nit to rustc_span. It might even be best to move it to a separate crate,\nsince other tools such as Cargo use the same algorithm, and have simply\ncontain a duplicate of the code.\n\nThis changes the signature of find_best_match_for_name so that it is no\nlonger generic over its input. I checked the optimized binaries, and this\nfunction was duplicated for nearly every call site, because most call sites\nused short-lived iterator chains, generic over Map and such. But there's\nno good reason for a function like this to be generic, since all it does\nis immediately convert the generic input (the Iterator impl) to a concrete\nVec<Symbol>. This has all of the costs of generics (duplicated method bodies)\nwith no benefit.\n\nChanging find_best_match_for_name to be non-generic removed about 10KB of\ncode from the optimized binary. I know it's a drop in the bucket, but we have\nto start reducing binary size, and beginning to tame over-use of generics\nis part of that.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd589025366e8ae548e039d77a960c337a68c9", "html_url": "https://github.com/rust-lang/rust/commit/6fcd589025366e8ae548e039d77a960c337a68c9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd589025366e8ae548e039d77a960c337a68c9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9b2117d1f62116467de870d8264dfb926d68c22f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2117d1f62116467de870d8264dfb926d68c22f", "html_url": "https://github.com/rust-lang/rust/commit/9b2117d1f62116467de870d8264dfb926d68c22f"}, {"sha": "5481c1bd6dc6b6cfdf7e75676028f561a39b78b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/5481c1bd6dc6b6cfdf7e75676028f561a39b78b9", "html_url": "https://github.com/rust-lang/rust/commit/5481c1bd6dc6b6cfdf7e75676028f561a39b78b9"}], "stats": {"total": 180, "additions": 96, "deletions": 84}, "files": [{"sha": "8a20dd796859034b226135d9ddd913db84ef2721", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -34,7 +34,6 @@ macro_rules! unwrap_or {\n pub mod util {\n     pub mod classify;\n     pub mod comments;\n-    pub mod lev_distance;\n     pub mod literal;\n     pub mod parser;\n }"}, {"sha": "b43cbf46d61e390f3741d88e91ed0fe2a2301f78", "filename": "compiler/rustc_interface/src/util.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_interface%2Fsrc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Futil.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -1,6 +1,5 @@\n use rustc_ast::mut_visit::{visit_clobber, MutVisitor, *};\n use rustc_ast::ptr::P;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::{self as ast, AttrVec, BlockCheckMode};\n use rustc_codegen_ssa::traits::CodegenBackend;\n use rustc_data_structures::fingerprint::Fingerprint;\n@@ -20,6 +19,7 @@ use rustc_session::parse::CrateConfig;\n use rustc_session::CrateDisambiguator;\n use rustc_session::{early_error, filesearch, output, DiagnosticOutput, Session};\n use rustc_span::edition::Edition;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::FileLoader;\n use rustc_span::symbol::{sym, Symbol};\n use smallvec::SmallVec;\n@@ -512,8 +512,11 @@ pub(crate) fn check_attr_crate_type(\n \n                 if let ast::MetaItemKind::NameValue(spanned) = a.meta().unwrap().kind {\n                     let span = spanned.span;\n-                    let lev_candidate =\n-                        find_best_match_for_name(CRATE_TYPES.iter().map(|(k, _)| k), n, None);\n+                    let lev_candidate = find_best_match_for_name(\n+                        &CRATE_TYPES.iter().map(|(k, _)| *k).collect::<Vec<_>>(),\n+                        n,\n+                        None,\n+                    );\n                     if let Some(candidate) = lev_candidate {\n                         lint_buffer.buffer_lint_with_diagnostic(\n                             lint::builtin::UNKNOWN_CRATE_TYPES,"}, {"sha": "16563d21ff133b5940eb977daa52b16e1fb5e3df", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -19,7 +19,6 @@ use self::TargetLint::*;\n use crate::levels::LintLevelsBuilder;\n use crate::passes::{EarlyLintPassObject, LateLintPassObject};\n use rustc_ast as ast;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync;\n use rustc_errors::{add_elided_lifetime_in_path_suggestion, struct_span_err, Applicability};\n@@ -37,6 +36,7 @@ use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::lint::{FutureIncompatibleInfo, Level, Lint, LintBuffer, LintId};\n use rustc_session::Session;\n use rustc_session::SessionLintStore;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::{symbol::Symbol, MultiSpan, Span, DUMMY_SP};\n use rustc_target::abi::LayoutOf;\n \n@@ -411,7 +411,7 @@ impl LintStore {\n                         self.by_name.keys().map(|name| Symbol::intern(&name)).collect::<Vec<_>>();\n \n                     let suggestion = find_best_match_for_name(\n-                        symbols.iter(),\n+                        &symbols,\n                         Symbol::intern(&lint_name.to_lowercase()),\n                         None,\n                     );"}, {"sha": "809de9beff625a7b8fd8cb1f605e6f33eceade89", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -1,7 +1,6 @@\n use std::cmp::Reverse;\n use std::ptr;\n \n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::{self as ast, Path};\n use rustc_ast_pretty::pprust;\n use rustc_data_structures::fx::FxHashSet;\n@@ -14,6 +13,7 @@ use rustc_middle::bug;\n use rustc_middle::ty::{self, DefIdTree};\n use rustc_session::Session;\n use rustc_span::hygiene::MacroKind;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::SourceMap;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span};\n@@ -716,7 +716,7 @@ impl<'a> Resolver<'a> {\n         suggestions.sort_by_cached_key(|suggestion| suggestion.candidate.as_str());\n \n         match find_best_match_for_name(\n-            suggestions.iter().map(|suggestion| &suggestion.candidate),\n+            &suggestions.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),\n             ident.name,\n             None,\n         ) {"}, {"sha": "cb1f0834ce7acd3d763f6f6d3b10a17a39a12330", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 26, "deletions": 22, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -10,7 +10,6 @@ use crate::{CrateLint, Module, ModuleOrUniformRoot, ParentScope, PerNS, ScopeSet\n use crate::{NameBinding, NameBindingKind, PathResult, PrivacyError, ToNameBinding};\n \n use rustc_ast::unwrap_or;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::NodeId;\n use rustc_ast_lowering::ResolverAstLowering;\n use rustc_data_structures::fx::FxHashSet;\n@@ -25,6 +24,7 @@ use rustc_session::lint::builtin::{PUB_USE_OF_PRIVATE_EXTERN_CRATE, UNUSED_IMPOR\n use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::DiagnosticMessageId;\n use rustc_span::hygiene::ExpnId;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, Ident, Symbol};\n use rustc_span::{MultiSpan, Span};\n \n@@ -1096,33 +1096,37 @@ impl<'a, 'b> ImportResolver<'a, 'b> {\n                     _ => None,\n                 };\n                 let resolutions = resolutions.as_ref().into_iter().flat_map(|r| r.iter());\n-                let names = resolutions.filter_map(|(BindingKey { ident: i, .. }, resolution)| {\n-                    if *i == ident {\n-                        return None;\n-                    } // Never suggest the same name\n-                    match *resolution.borrow() {\n-                        NameResolution { binding: Some(name_binding), .. } => {\n-                            match name_binding.kind {\n-                                NameBindingKind::Import { binding, .. } => {\n-                                    match binding.kind {\n-                                        // Never suggest the name that has binding error\n-                                        // i.e., the name that cannot be previously resolved\n-                                        NameBindingKind::Res(Res::Err, _) => None,\n-                                        _ => Some(&i.name),\n+                let names = resolutions\n+                    .filter_map(|(BindingKey { ident: i, .. }, resolution)| {\n+                        if *i == ident {\n+                            return None;\n+                        } // Never suggest the same name\n+                        match *resolution.borrow() {\n+                            NameResolution { binding: Some(name_binding), .. } => {\n+                                match name_binding.kind {\n+                                    NameBindingKind::Import { binding, .. } => {\n+                                        match binding.kind {\n+                                            // Never suggest the name that has binding error\n+                                            // i.e., the name that cannot be previously resolved\n+                                            NameBindingKind::Res(Res::Err, _) => None,\n+                                            _ => Some(i.name),\n+                                        }\n                                     }\n+                                    _ => Some(i.name),\n                                 }\n-                                _ => Some(&i.name),\n                             }\n+                            NameResolution { ref single_imports, .. }\n+                                if single_imports.is_empty() =>\n+                            {\n+                                None\n+                            }\n+                            _ => Some(i.name),\n                         }\n-                        NameResolution { ref single_imports, .. } if single_imports.is_empty() => {\n-                            None\n-                        }\n-                        _ => Some(&i.name),\n-                    }\n-                });\n+                    })\n+                    .collect::<Vec<Symbol>>();\n \n                 let lev_suggestion =\n-                    find_best_match_for_name(names, ident.name, None).map(|suggestion| {\n+                    find_best_match_for_name(&names, ident.name, None).map(|suggestion| {\n                         (\n                             vec![(ident.span, suggestion.to_string())],\n                             String::from(\"a similar name exists in the module\"),"}, {"sha": "6ce299a94170841f3f9a3be29d8f0cefdf999c13", "filename": "compiler/rustc_resolve/src/late/diagnostics.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Fdiagnostics.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -5,7 +5,6 @@ use crate::path_names_to_string;\n use crate::{CrateLint, Module, ModuleKind, ModuleOrUniformRoot};\n use crate::{PathResult, PathSource, Segment};\n \n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_ast::visit::FnKind;\n use rustc_ast::{self as ast, Expr, ExprKind, Item, ItemKind, NodeId, Path, Ty, TyKind};\n use rustc_ast_pretty::pprust::path_segment_to_string;\n@@ -18,6 +17,7 @@ use rustc_hir::def_id::{DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n use rustc_session::parse::feature_err;\n use rustc_span::hygiene::MacroKind;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{BytePos, MultiSpan, Span, DUMMY_SP};\n \n@@ -1206,7 +1206,7 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n         names.sort_by_cached_key(|suggestion| suggestion.candidate.as_str());\n \n         match find_best_match_for_name(\n-            names.iter().map(|suggestion| &suggestion.candidate),\n+            &names.iter().map(|suggestion| suggestion.candidate).collect::<Vec<Symbol>>(),\n             name,\n             None,\n         ) {\n@@ -1592,9 +1592,10 @@ impl<'a: 'ast, 'ast> LateResolutionVisitor<'a, '_, 'ast> {\n             .bindings\n             .iter()\n             .filter(|(id, _)| id.span.ctxt() == label.span.ctxt())\n-            .map(|(id, _)| &id.name);\n+            .map(|(id, _)| id.name)\n+            .collect::<Vec<Symbol>>();\n \n-        find_best_match_for_name(names, label.name, None).map(|symbol| {\n+        find_best_match_for_name(&names, label.name, None).map(|symbol| {\n             // Upon finding a similar name, get the ident that it was from - the span\n             // contained within helps make a useful diagnostic. In addition, determine\n             // whether this candidate is within scope."}, {"sha": "edc6625a6ead7a94fcac4da8c5bb54f52e726e52", "filename": "compiler/rustc_span/src/lev_distance.rs", "status": "renamed", "additions": 9, "deletions": 14, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -1,6 +1,4 @@\n-// FIXME(Centril): Move to rustc_span?\n-\n-use rustc_span::symbol::Symbol;\n+use crate::symbol::Symbol;\n use std::cmp;\n \n #[cfg(test)]\n@@ -45,17 +43,14 @@ pub fn lev_distance(a: &str, b: &str) -> usize {\n ///\n /// Besides Levenshtein, we use case insensitive comparison to improve accuracy on an edge case with\n /// a lower(upper)case letters mismatch.\n-pub fn find_best_match_for_name<'a, T>(\n-    iter_names: T,\n+#[cold]\n+pub fn find_best_match_for_name(\n+    name_vec: &[Symbol],\n     lookup: Symbol,\n     dist: Option<usize>,\n-) -> Option<Symbol>\n-where\n-    T: Iterator<Item = &'a Symbol>,\n-{\n+) -> Option<Symbol> {\n     let lookup = &lookup.as_str();\n     let max_dist = dist.unwrap_or_else(|| cmp::max(lookup.len(), 3) / 3);\n-    let name_vec: Vec<&Symbol> = iter_names.collect();\n \n     let (case_insensitive_match, levenshtein_match) = name_vec\n         .iter()\n@@ -83,18 +78,18 @@ where\n     // 2. Levenshtein distance match\n     // 3. Sorted word match\n     if let Some(candidate) = case_insensitive_match {\n-        Some(*candidate)\n+        Some(candidate)\n     } else if levenshtein_match.is_some() {\n-        levenshtein_match.map(|(candidate, _)| *candidate)\n+        levenshtein_match.map(|(candidate, _)| candidate)\n     } else {\n         find_match_by_sorted_words(name_vec, lookup)\n     }\n }\n \n-fn find_match_by_sorted_words<'a>(iter_names: Vec<&'a Symbol>, lookup: &str) -> Option<Symbol> {\n+fn find_match_by_sorted_words(iter_names: &[Symbol], lookup: &str) -> Option<Symbol> {\n     iter_names.iter().fold(None, |result, candidate| {\n         if sort_by_words(&candidate.as_str()) == sort_by_words(lookup) {\n-            Some(**candidate)\n+            Some(*candidate)\n         } else {\n             result\n         }", "previous_filename": "compiler/rustc_ast/src/util/lev_distance.rs"}, {"sha": "7aa01cb8efe7e478abdf26fa06825c9413be3f1d", "filename": "compiler/rustc_span/src/lev_distance/tests.rs", "status": "renamed", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flev_distance%2Ftests.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -21,38 +21,35 @@ fn test_lev_distance() {\n \n #[test]\n fn test_find_best_match_for_name() {\n-    use rustc_span::with_default_session_globals;\n+    use crate::with_default_session_globals;\n     with_default_session_globals(|| {\n         let input = vec![Symbol::intern(\"aaab\"), Symbol::intern(\"aaabc\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), None),\n+            find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None),\n             Some(Symbol::intern(\"aaab\"))\n         );\n \n-        assert_eq!(\n-            find_best_match_for_name(input.iter(), Symbol::intern(\"1111111111\"), None),\n-            None\n-        );\n+        assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"1111111111\"), None), None);\n \n         let input = vec![Symbol::intern(\"aAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), Symbol::intern(\"AAAA\"), None),\n+            find_best_match_for_name(&input, Symbol::intern(\"AAAA\"), None),\n             Some(Symbol::intern(\"aAAA\"))\n         );\n \n         let input = vec![Symbol::intern(\"AAAA\")];\n         // Returns None because `lev_distance > max_dist / 3`\n-        assert_eq!(find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), None), None);\n+        assert_eq!(find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), None), None);\n \n         let input = vec![Symbol::intern(\"AAAA\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), Symbol::intern(\"aaaa\"), Some(4)),\n+            find_best_match_for_name(&input, Symbol::intern(\"aaaa\"), Some(4)),\n             Some(Symbol::intern(\"AAAA\"))\n         );\n \n         let input = vec![Symbol::intern(\"a_longer_variable_name\")];\n         assert_eq!(\n-            find_best_match_for_name(input.iter(), Symbol::intern(\"a_variable_longer_name\"), None),\n+            find_best_match_for_name(&input, Symbol::intern(\"a_variable_longer_name\"), None),\n             Some(Symbol::intern(\"a_longer_variable_name\"))\n         );\n     })", "previous_filename": "compiler/rustc_ast/src/util/lev_distance/tests.rs"}, {"sha": "11a49d1ab887daf91c8deb2fc64992f44816b1eb", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -34,6 +34,7 @@ use hygiene::Transparency;\n pub use hygiene::{DesugaringKind, ExpnData, ExpnId, ExpnKind, ForLoopLoc, MacroKind};\n pub mod def_id;\n use def_id::{CrateNum, DefId, LOCAL_CRATE};\n+pub mod lev_distance;\n mod span_encoding;\n pub use span_encoding::{Span, DUMMY_SP};\n "}, {"sha": "b04acd9660d4572baa9747fa789ae9813d21e505", "filename": "compiler/rustc_typeck/src/astconv/errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Ferrors.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -1,11 +1,11 @@\n use crate::astconv::AstConv;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n use rustc_session::parse::feature_err;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{sym, Ident};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -180,7 +180,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             .collect();\n \n         if let (Some(suggested_name), true) = (\n-            find_best_match_for_name(all_candidate_names.iter(), assoc_name.name, None),\n+            find_best_match_for_name(&all_candidate_names, assoc_name.name, None),\n             assoc_name.span != DUMMY_SP,\n         ) {\n             err.span_suggestion("}, {"sha": "9b814f6b7ee66a371961d63e45695356f9e7acd8", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -13,7 +13,6 @@ use crate::errors::{\n };\n use crate::middle::resolve_lifetime as rl;\n use crate::require_c_abi_if_c_variadic;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, ErrorReported, FatalError};\n use rustc_hir as hir;\n@@ -26,6 +25,7 @@ use rustc_middle::ty::subst::{self, InternalSubsts, Subst, SubstsRef};\n use rustc_middle::ty::GenericParamDefKind;\n use rustc_middle::ty::{self, Const, DefIdTree, Ty, TyCtxt, TypeFoldable};\n use rustc_session::lint::builtin::AMBIGUOUS_ASSOCIATED_ITEMS;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use rustc_target::spec::abi;\n@@ -1579,7 +1579,11 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n                     let adt_def = qself_ty.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggested_name) = find_best_match_for_name(\n-                        adt_def.variants.iter().map(|variant| &variant.ident.name),\n+                        &adt_def\n+                            .variants\n+                            .iter()\n+                            .map(|variant| variant.ident.name)\n+                            .collect::<Vec<Symbol>>(),\n                         assoc_ident.name,\n                         None,\n                     ) {"}, {"sha": "26962d2222d32f592c87264183e5e9c8372cc855", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 16, "deletions": 12, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -22,7 +22,6 @@ use crate::type_error_struct;\n \n use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructExprNonExhaustive};\n use rustc_ast as ast;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_errors::ErrorReported;\n@@ -40,6 +39,7 @@ use rustc_middle::ty::Ty;\n use rustc_middle::ty::TypeFoldable;\n use rustc_middle::ty::{AdtKind, Visibility};\n use rustc_span::hygiene::DesugaringKind;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n@@ -1441,18 +1441,22 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         field: Symbol,\n         skip: Vec<Symbol>,\n     ) -> Option<Symbol> {\n-        let names = variant.fields.iter().filter_map(|field| {\n-            // ignore already set fields and private fields from non-local crates\n-            if skip.iter().any(|&x| x == field.ident.name)\n-                || (!variant.def_id.is_local() && field.vis != Visibility::Public)\n-            {\n-                None\n-            } else {\n-                Some(&field.ident.name)\n-            }\n-        });\n+        let names = variant\n+            .fields\n+            .iter()\n+            .filter_map(|field| {\n+                // ignore already set fields and private fields from non-local crates\n+                if skip.iter().any(|&x| x == field.ident.name)\n+                    || (!variant.def_id.is_local() && field.vis != Visibility::Public)\n+                {\n+                    None\n+                } else {\n+                    Some(field.ident.name)\n+                }\n+            })\n+            .collect::<Vec<Symbol>>();\n \n-        find_best_match_for_name(names, field, None)\n+        find_best_match_for_name(&names, field, None)\n     }\n \n     fn available_field_names(&self, variant: &'tcx ty::VariantDef) -> Vec<Symbol> {"}, {"sha": "39a79893b6441c603f70a78a83a608e943505ef7", "filename": "compiler/rustc_typeck/src/check/method/probe.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fprobe.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -9,7 +9,6 @@ use crate::hir::def::DefKind;\n use crate::hir::def_id::DefId;\n \n use rustc_ast as ast;\n-use rustc_ast::util::lev_distance::{find_best_match_for_name, lev_distance};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::sync::Lrc;\n use rustc_hir as hir;\n@@ -27,6 +26,7 @@ use rustc_middle::ty::{\n };\n use rustc_session::lint;\n use rustc_span::def_id::LocalDefId;\n+use rustc_span::lev_distance::{find_best_match_for_name, lev_distance};\n use rustc_span::{symbol::Ident, Span, Symbol, DUMMY_SP};\n use rustc_trait_selection::autoderef::{self, Autoderef};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -1538,8 +1538,11 @@ impl<'a, 'tcx> ProbeContext<'a, 'tcx> {\n                 Ok(None)\n             } else {\n                 let best_name = {\n-                    let names = applicable_close_candidates.iter().map(|cand| &cand.ident.name);\n-                    find_best_match_for_name(names, self.method_name.unwrap().name, None)\n+                    let names = applicable_close_candidates\n+                        .iter()\n+                        .map(|cand| cand.ident.name)\n+                        .collect::<Vec<Symbol>>();\n+                    find_best_match_for_name(&names, self.method_name.unwrap().name, None)\n                 }\n                 .unwrap();\n                 Ok(applicable_close_candidates"}, {"sha": "a979bc470d8db52f80efb77fde618acbf372ef85", "filename": "compiler/rustc_typeck/src/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fmethod%2Fsuggest.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -2,7 +2,6 @@\n //! found or is otherwise invalid.\n \n use crate::check::FnCtxt;\n-use rustc_ast::util::lev_distance;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -17,6 +16,7 @@ use rustc_middle::ty::print::with_crate_prefix;\n use rustc_middle::ty::{\n     self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n };\n+use rustc_span::lev_distance;\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::{source_map, FileName, Span};\n use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n@@ -744,7 +744,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 if actual.is_enum() {\n                     let adt_def = actual.ty_adt_def().expect(\"enum is not an ADT\");\n                     if let Some(suggestion) = lev_distance::find_best_match_for_name(\n-                        adt_def.variants.iter().map(|s| &s.ident.name),\n+                        &adt_def.variants.iter().map(|s| s.ident.name).collect::<Vec<_>>(),\n                         item_name.name,\n                         None,\n                     ) {"}, {"sha": "bcb73e1b4e74e9a4bf11fdd185d2fe7df759b623", "filename": "compiler/rustc_typeck/src/check/pat.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fpat.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -1,7 +1,6 @@\n use crate::check::FnCtxt;\n use rustc_ast as ast;\n \n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n@@ -13,6 +12,7 @@ use rustc_infer::infer::type_variable::{TypeVariableOrigin, TypeVariableOriginKi\n use rustc_middle::ty::subst::GenericArg;\n use rustc_middle::ty::{self, Adt, BindingMode, Ty, TypeFoldable};\n use rustc_span::hygiene::DesugaringKind;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_span::source_map::{Span, Spanned};\n use rustc_span::symbol::Ident;\n use rustc_trait_selection::traits::{ObligationCause, Pattern};\n@@ -1302,8 +1302,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 ),\n             );\n             if plural == \"\" {\n-                let input = unmentioned_fields.iter().map(|(_, field)| &field.name);\n-                let suggested_name = find_best_match_for_name(input, ident.name, None);\n+                let input =\n+                    unmentioned_fields.iter().map(|(_, field)| field.name).collect::<Vec<_>>();\n+                let suggested_name = find_best_match_for_name(&input, ident.name, None);\n                 if let Some(suggested_name) = suggested_name {\n                     err.span_suggestion(\n                         ident.span,"}, {"sha": "15505fd79f4a1f6ac0c338de623b478c6b0c1268", "filename": "src/tools/clippy/clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcd589025366e8ae548e039d77a960c337a68c9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcd589025366e8ae548e039d77a960c337a68c9/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_lints%2Fsrc%2Fattrs.rs?ref=6fcd589025366e8ae548e039d77a960c337a68c9", "patch": "@@ -5,7 +5,7 @@ use crate::utils::{\n     span_lint_and_sugg, span_lint_and_then, without_block_comments,\n };\n use if_chain::if_chain;\n-use rustc_ast::util::lev_distance::find_best_match_for_name;\n+use rustc_span::lev_distance::find_best_match_for_name;\n use rustc_ast::{AttrKind, AttrStyle, Attribute, Lit, LitKind, MetaItemKind, NestedMetaItem};\n use rustc_errors::Applicability;\n use rustc_hir::{\n@@ -427,7 +427,7 @@ fn check_clippy_lint_names(cx: &LateContext<'_>, ident: &str, items: &[NestedMet\n                             .map(|l| Symbol::intern(&l.name_lower()))\n                             .collect::<Vec<_>>();\n                         let sugg = find_best_match_for_name(\n-                            symbols.iter(),\n+                            &symbols,\n                             Symbol::intern(&format!(\"clippy::{}\", name_lower)),\n                             None,\n                         );"}]}