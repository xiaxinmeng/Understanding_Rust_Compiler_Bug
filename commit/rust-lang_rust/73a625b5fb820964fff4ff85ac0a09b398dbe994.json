{"sha": "73a625b5fb820964fff4ff85ac0a09b398dbe994", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczYTYyNWI1ZmI4MjA5NjRmZmY0ZmY4NWFjMGEwOWIzOThkYmU5OTQ=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-11T11:05:32Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-03-16T01:49:19Z"}, "message": "remove unnecessary hir::map imports", "tree": {"sha": "5f525bebd2a2ff9d9aa0671eff8b153049709524", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f525bebd2a2ff9d9aa0671eff8b153049709524"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73a625b5fb820964fff4ff85ac0a09b398dbe994", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73a625b5fb820964fff4ff85ac0a09b398dbe994", "html_url": "https://github.com/rust-lang/rust/commit/73a625b5fb820964fff4ff85ac0a09b398dbe994", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73a625b5fb820964fff4ff85ac0a09b398dbe994/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "url": "https://api.github.com/repos/rust-lang/rust/commits/45ebd5808afd3df7ba842797c0fcd4447ddf30fb", "html_url": "https://github.com/rust-lang/rust/commit/45ebd5808afd3df7ba842797c0fcd4447ddf30fb"}], "stats": {"total": 103, "additions": 52, "deletions": 51}, "files": [{"sha": "6685a89d2c7163325c011de2f54a9a41f87bcb69", "filename": "src/librustc_ast_lowering/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_ast_lowering%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_ast_lowering%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Flib.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -37,7 +37,6 @@\n use rustc::arena::Arena;\n use rustc::dep_graph::DepGraph;\n use rustc::hir::map::definitions::{DefKey, DefPathData, Definitions};\n-use rustc::hir::map::Map;\n use rustc::{bug, span_bug};\n use rustc_ast::ast;\n use rustc_ast::ast::*;\n@@ -1460,7 +1459,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n \n         impl<'r, 'a, 'v, 'hir> intravisit::Visitor<'v> for ImplTraitLifetimeCollector<'r, 'a, 'hir> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "5ccec90cee179e7a53327d27bda173de919d7735", "filename": "src/librustc_hir/intravisit.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_hir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_hir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fintravisit.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -127,6 +127,25 @@ pub trait Map<'hir> {\n     fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir>;\n }\n \n+/// An erased version of `Map<'hir>`, using dynamic dispatch.\n+/// NOTE: This type is effectively only usable with `NestedVisitorMap::None`.\n+pub struct ErasedMap<'hir>(&'hir dyn Map<'hir>);\n+\n+impl<'hir> Map<'hir> for ErasedMap<'hir> {\n+    fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n+        self.0.body(id)\n+    }\n+    fn item(&self, id: HirId) -> &'hir Item<'hir> {\n+        self.0.item(id)\n+    }\n+    fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n+        self.0.trait_item(id)\n+    }\n+    fn impl_item(&self, id: ImplItemId) -> &'hir ImplItem<'hir> {\n+        self.0.impl_item(id)\n+    }\n+}\n+\n /// Specifies what nested things a visitor wants to visit. The most\n /// common choice is `OnlyBodies`, which will cause the visitor to\n /// visit fn bodies for fns that it encounters, but skip over nested"}, {"sha": "e9dda81ed43f8062fd59ffde40eb1f077294d915", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -22,7 +22,6 @@\n //! `late_lint_methods!` invocation in `lib.rs`.\n \n use crate::{EarlyContext, EarlyLintPass, LateContext, LateLintPass, LintContext};\n-use rustc::hir::map::Map;\n use rustc::lint::LintDiagnosticBuilder;\n use rustc::ty::{self, layout::VariantIdx, Ty, TyCtxt};\n use rustc_ast::ast::{self, Expr};\n@@ -1071,7 +1070,7 @@ impl TypeAliasBounds {\n             err: &'a mut DiagnosticBuilder<'db>,\n         }\n         impl<'a, 'db, 'v> Visitor<'v> for WalkAssocTypes<'a, 'db> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n                 intravisit::NestedVisitorMap::None"}, {"sha": "78440c8437d117b7eb5ca47695a0e2ab22d97f27", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::lint::builtin::{SAFE_PACKED_BORROWS, UNUSED_UNSAFE};\n use rustc::mir::visit::{MutatingUseContext, PlaceContext, Visitor};\n use rustc::mir::*;\n@@ -451,7 +450,7 @@ struct UnusedUnsafeVisitor<'a> {\n }\n \n impl<'a, 'tcx> intravisit::Visitor<'tcx> for UnusedUnsafeVisitor<'a> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "3eb9d23a32a259472cc4e2d17c118dfc194f3799", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1,5 +1,4 @@\n use crate::{shim, util};\n-use rustc::hir::map::Map;\n use rustc::mir::{BodyAndCache, ConstQualifs, MirPhase, Promoted};\n use rustc::ty::query::Providers;\n use rustc::ty::steal::Steal;\n@@ -86,7 +85,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             }\n             intravisit::walk_struct_def(self, v)\n         }\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n         }"}, {"sha": "f71ec5e9ac000f768f1d063c70447e7761ef35c7", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -4,7 +4,6 @@ use super::_match::{expand_pattern, is_useful, MatchCheckCtxt, Matrix, PatStack}\n \n use super::{PatCtxt, PatKind, PatternError};\n \n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt};\n use rustc_ast::ast::Mutability;\n use rustc_errors::{error_code, struct_span_err, Applicability, DiagnosticBuilder};\n@@ -43,7 +42,7 @@ struct MatchVisitor<'a, 'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for MatchVisitor<'_, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -753,7 +752,7 @@ fn check_legality_of_bindings_in_at_patterns(cx: &MatchVisitor<'_, '_>, pat: &Pa\n     }\n \n     impl<'v> Visitor<'v> for AtBindingPatternVisitor<'_, '_, '_> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "0c90933bd19167009f99483557a793a317b2f136", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -210,7 +210,7 @@ impl<'a, 'tcx> MarkSymbolVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for MarkSymbolVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "1b46aaeefcb18f28e98169353468a78315d78090", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::layout::{LayoutError, Pointer, SizeSkeleton, VariantIdx};\n use rustc::ty::query::Providers;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -122,7 +121,7 @@ impl ExprVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ItemVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -139,7 +138,7 @@ impl Visitor<'tcx> for ItemVisitor<'tcx> {\n }\n \n impl Visitor<'tcx> for ExprVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "161aad253f240a1019c94f2c9632682ba9f79ebe", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1359,7 +1359,7 @@ impl<'a, 'tcx> Liveness<'a, 'tcx> {\n // Checking for error conditions\n \n impl<'a, 'tcx> Visitor<'tcx> for Liveness<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "34af0d5b03ecca9a7e556cbf7e856f985635b3f1", "filename": "src/librustc_passes/reachable.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Freachable.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -5,7 +5,6 @@\n // makes all other generics or inline functions that it references\n // reachable as well.\n \n-use rustc::hir::map::Map;\n use rustc::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n use rustc::middle::privacy;\n use rustc::session::config;\n@@ -17,8 +16,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_hir::def_id::LOCAL_CRATE;\n use rustc_hir::def_id::{CrateNum, DefId};\n-use rustc_hir::intravisit;\n-use rustc_hir::intravisit::{NestedVisitorMap, Visitor};\n+use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirIdSet, Node};\n use rustc_target::spec::abi::Abi;\n@@ -83,7 +81,7 @@ struct ReachableContext<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for ReachableContext<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "e771696a5b6bf9678935529ad070d3178caef8c0", "filename": "src/librustc_passes/region.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fregion.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -6,7 +6,6 @@\n //!\n //! [rustc dev guide]: https://rustc-dev-guide.rust-lang.org/borrow_check.html\n \n-use rustc::hir::map::Map;\n use rustc::middle::region::*;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n@@ -696,7 +695,7 @@ impl<'tcx> RegionResolutionVisitor<'tcx> {\n }\n \n impl<'tcx> Visitor<'tcx> for RegionResolutionVisitor<'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "43f39e6c610c8ba5d96f3ebb86e4d55ad0b2e236", "filename": "src/librustc_passes/upvars.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fupvars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fupvars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fupvars.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1,6 +1,5 @@\n //! Upvar (closure capture) collection from cross-body HIR uses of `Res::Local`s.\n \n-use rustc::hir::map::Map;\n use rustc::ty::query::Providers;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::{FxHashSet, FxIndexMap};\n@@ -44,7 +43,7 @@ struct LocalCollector {\n }\n \n impl Visitor<'tcx> for LocalCollector {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -73,7 +72,7 @@ impl CaptureCollector<'_, '_> {\n }\n \n impl Visitor<'tcx> for CaptureCollector<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "2aef080a677578c828c9c606a13f08a8bcdd9aa5", "filename": "src/librustc_passes/weak_lang_items.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fweak_lang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_passes%2Fweak_lang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fweak_lang_items.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -4,7 +4,6 @@ use rustc::middle::lang_items;\n use rustc::middle::lang_items::whitelisted;\n use rustc::session::config;\n \n-use rustc::hir::map::Map;\n use rustc::ty::TyCtxt;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_errors::struct_span_err;\n@@ -85,9 +84,9 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n }\n \n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n-    fn nested_visit_map(&mut self) -> NestedVisitorMap<Map<'v>> {\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n     }\n "}, {"sha": "8dd4fadc026117b1a96519330176813421b54e45", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1447,7 +1447,7 @@ impl<'a, 'tcx> ObsoleteVisiblePrivateTypesVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'b, 'tcx, 'v> Visitor<'v> for ObsoleteCheckTypeForPrivatenessVisitor<'a, 'b, 'tcx> {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "e28b4884b8822942a76b3b55e4cbca8826757670", "filename": "src/librustc_resolve/late/lifetimes.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate%2Flifetimes.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1123,7 +1123,7 @@ fn extract_labels(ctxt: &mut LifetimeContext<'_, '_>, body: &hir::Body<'_>) {\n     gather.visit_body(body);\n \n     impl<'v, 'a, 'tcx> Visitor<'v> for GatherLabels<'a, 'tcx> {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2172,7 +2172,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n             }\n \n             impl<'a> Visitor<'a> for SelfVisitor<'a> {\n-                type Map = Map<'a>;\n+                type Map = intravisit::ErasedMap<'a>;\n \n                 fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                     NestedVisitorMap::None\n@@ -2263,7 +2263,7 @@ impl<'a, 'tcx> LifetimeContext<'a, 'tcx> {\n         }\n \n         impl<'v, 'a> Visitor<'v> for GatherLifetimes<'a> {\n-            type Map = Map<'v>;\n+            type Map = intravisit::ErasedMap<'v>;\n \n             fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n                 NestedVisitorMap::None\n@@ -2852,7 +2852,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for ConstrainedCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None\n@@ -2895,7 +2895,7 @@ fn insert_late_bound_lifetimes(\n     }\n \n     impl<'v> Visitor<'v> for AllCollector {\n-        type Map = Map<'v>;\n+        type Map = intravisit::ErasedMap<'v>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}, {"sha": "f9d8bf37761a6cf74f22d096ecc2839a8d9c18be", "filename": "src/librustc_trait_selection/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trait_selection%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1567,7 +1567,7 @@ struct ReturnsVisitor<'v> {\n }\n \n impl<'v> Visitor<'v> for ReturnsVisitor<'v> {\n-    type Map = rustc::hir::map::Map<'v>;\n+    type Map = hir::intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> hir::intravisit::NestedVisitorMap<Self::Map> {\n         hir::intravisit::NestedVisitorMap::None"}, {"sha": "09dece7d7e43c7ca8c26a4a19182f0cc8a61d270", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -1,4 +1,3 @@\n-use rustc::hir::map::Map;\n use rustc::ty::error::{ExpectedFound, TypeError};\n use rustc::ty::subst::{InternalSubsts, Subst};\n use rustc::ty::util::ExplicitSelf;\n@@ -890,7 +889,7 @@ fn compare_synthetic_generics<'tcx>(\n                                     }\n                                 }\n                             }\n-                            type Map = Map<'v>;\n+                            type Map = intravisit::ErasedMap<'v>;\n                             fn nested_visit_map(\n                                 &mut self,\n                             ) -> intravisit::NestedVisitorMap<Self::Map>"}, {"sha": "cdf68256a7a88198d6a3cd65fd3db0aad64b5efa", "filename": "src/librustc_typeck/check/generator_interior.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fgenerator_interior.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -4,7 +4,6 @@\n //! types computed here.\n \n use super::FnCtxt;\n-use rustc::hir::map::Map;\n use rustc::middle::region::{self, YieldData};\n use rustc::ty::{self, Ty};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -209,7 +208,7 @@ pub fn resolve_interior<'a, 'tcx>(\n // librustc/middle/region.rs since `expr_count` is compared against the results\n // there.\n impl<'a, 'tcx> Visitor<'tcx> for InteriorVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "7ad2120fa544c04592779e71254c888d55047202", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -4,7 +4,6 @@\n use crate::check::FnCtxt;\n use crate::middle::lang_items::FnOnceTraitLangItem;\n use rustc::hir::map as hir_map;\n-use rustc::hir::map::Map;\n use rustc::ty::print::with_crate_prefix;\n use rustc::ty::{self, ToPolyTraitRef, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness};\n use rustc_ast::ast;\n@@ -1347,7 +1346,7 @@ impl intravisit::Visitor<'tcx> for UsePlacementFinder<'tcx> {\n         }\n     }\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> intravisit::NestedVisitorMap<Self::Map> {\n         intravisit::NestedVisitorMap::None"}, {"sha": "bbc9171918f810656c236ff5a2907ba3367d48c1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -90,7 +90,6 @@ pub mod writeback;\n use crate::astconv::{AstConv, GenericArgCountMismatch, PathSeg};\n use crate::middle::lang_items;\n use rustc::hir::map::blocks::FnLikeNode;\n-use rustc::hir::map::Map;\n use rustc::middle::region;\n use rustc::mir::interpret::ConstValue;\n use rustc::session::parse::feature_err;\n@@ -1177,7 +1176,7 @@ impl<'a, 'tcx> GatherLocalsVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for GatherLocalsVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "72e4169332e8ba3d660b30563164940171a11822", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -76,7 +76,6 @@ use crate::check::dropck;\n use crate::check::FnCtxt;\n use crate::mem_categorization as mc;\n use crate::middle::region;\n-use rustc::hir::map::Map;\n use rustc::ty::adjustment;\n use rustc::ty::subst::{GenericArgKind, SubstsRef};\n use rustc::ty::{self, Ty};\n@@ -417,7 +416,7 @@ impl<'a, 'tcx> Visitor<'tcx> for RegionCtxt<'a, 'tcx> {\n     // hierarchy, and in particular the relationships between free\n     // regions, until regionck, as described in #3238.\n \n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "44b960ad22bffd074fa84048cdb4b825eb882573", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -35,7 +35,6 @@ use super::FnCtxt;\n use crate::expr_use_visitor as euv;\n use crate::mem_categorization as mc;\n use crate::mem_categorization::PlaceBase;\n-use rustc::hir::map::Map;\n use rustc::ty::{self, Ty, TyCtxt, UpvarSubsts};\n use rustc_ast::ast;\n use rustc_data_structures::fx::FxIndexMap;\n@@ -60,7 +59,7 @@ struct InferBorrowKindVisitor<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> Visitor<'tcx> for InferBorrowKindVisitor<'a, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "58b45638e437e31ffa71dba1a11ccc79bd09f26c", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -4,7 +4,6 @@\n \n use crate::check::FnCtxt;\n \n-use rustc::hir::map::Map;\n use rustc::ty::adjustment::{Adjust, Adjustment, PointerCast};\n use rustc::ty::fold::{TypeFoldable, TypeFolder};\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -244,7 +243,7 @@ impl<'cx, 'tcx> WritebackCx<'cx, 'tcx> {\n // traffic in node-ids or update tables in the type context etc.\n \n impl<'cx, 'tcx> Visitor<'tcx> for WritebackCx<'cx, 'tcx> {\n-    type Map = Map<'tcx>;\n+    type Map = intravisit::ErasedMap<'tcx>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None"}, {"sha": "9bb1f7e3131b31611414dc2cd33d1854460817b3", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73a625b5fb820964fff4ff85ac0a09b398dbe994/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=73a625b5fb820964fff4ff85ac0a09b398dbe994", "patch": "@@ -105,7 +105,7 @@ pub struct ItemCtxt<'tcx> {\n crate struct PlaceholderHirTyCollector(crate Vec<Span>);\n \n impl<'v> Visitor<'v> for PlaceholderHirTyCollector {\n-    type Map = Map<'v>;\n+    type Map = intravisit::ErasedMap<'v>;\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n         NestedVisitorMap::None\n@@ -1045,7 +1045,7 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n \n     impl Visitor<'tcx> for LateBoundRegionsDetector<'tcx> {\n-        type Map = Map<'tcx>;\n+        type Map = intravisit::ErasedMap<'tcx>;\n \n         fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n             NestedVisitorMap::None"}]}