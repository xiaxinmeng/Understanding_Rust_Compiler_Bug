{"sha": "fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "node_id": "C_kwDOAAsO6NoAKGZjYjBiY2UyNWNiMDFmZjJjYzI2ZWY0MWVhMWYzYmU3ODkzZmYwYTY", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2022-05-06T18:05:38Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-05-06T18:05:38Z"}, "message": "Rollup merge of #96590 - notriddle:notriddle/tab-bar-fn-search, r=GuillaumeGomez,jsha\n\nrustdoc: when running a function-signature search, tweak the tab bar\n\n# Before\n\n![In Names (7) / In Parameters (0) / In Return types (0)](https://user-images.githubusercontent.com/1593513/166122875-ffdeafe6-8d4d-4e61-84a6-f5986b50ac35.png)\n\n# After\n\n![In Function Signature (7)](https://user-images.githubusercontent.com/1593513/166122883-9a3d7515-3235-4ee3-8c4b-5401d109e099.png)", "tree": {"sha": "8796d3893df4b9ae9d7d6a114d27f693ea6070dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8796d3893df4b9ae9d7d6a114d27f693ea6070dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJidWNyCRBK7hj4Ov3rIwAAleYIADR90WdrSvpSEyz0+xCx6XM0\n3N/CL9G+tLAbBXTaFs5SFC3MhBA8aKtpbS4j4gg2QRcYRRpXcMdTyr/q0X45UmiI\nJ33IIvA7XAczyen7pnR66pV9NOJVP1ci5qnKTo1/7+FEjcxjV+1m6G97vNuB0J+b\nhlgs571vGSUI/hx2dGsGcAozezMsLq3DKNpKJmpert9Zm6d+MMIapZ0AU3W9i1Vb\nmEvyK/BV0ArNhtnUXgBeivjMJLUyC6G79J/d1Pc6Aj4zpkSiXReka1/Q6JYmhsI+\nxojMI6NI1a/O20Vw34sMRavdywwJm3eYSVa3rDcOOb6TFJcDljAymOWugEt6Ios=\n=mYfo\n-----END PGP SIGNATURE-----\n", "payload": "tree 8796d3893df4b9ae9d7d6a114d27f693ea6070dc\nparent 66443a185261a04d7098bb465e2338334a3aa7a4\nparent 4c183cd2d41abfe22b20ff1c9d5a1bb712ef1d71\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1651860338 +0200\ncommitter GitHub <noreply@github.com> 1651860338 +0200\n\nRollup merge of #96590 - notriddle:notriddle/tab-bar-fn-search, r=GuillaumeGomez,jsha\n\nrustdoc: when running a function-signature search, tweak the tab bar\n\n# Before\n\n![In Names (7) / In Parameters (0) / In Return types (0)](https://user-images.githubusercontent.com/1593513/166122875-ffdeafe6-8d4d-4e61-84a6-f5986b50ac35.png)\n\n# After\n\n![In Function Signature (7)](https://user-images.githubusercontent.com/1593513/166122883-9a3d7515-3235-4ee3-8c4b-5401d109e099.png)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "html_url": "https://github.com/rust-lang/rust/commit/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66443a185261a04d7098bb465e2338334a3aa7a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/66443a185261a04d7098bb465e2338334a3aa7a4", "html_url": "https://github.com/rust-lang/rust/commit/66443a185261a04d7098bb465e2338334a3aa7a4"}, {"sha": "4c183cd2d41abfe22b20ff1c9d5a1bb712ef1d71", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c183cd2d41abfe22b20ff1c9d5a1bb712ef1d71", "html_url": "https://github.com/rust-lang/rust/commit/4c183cd2d41abfe22b20ff1c9d5a1bb712ef1d71"}], "stats": {"total": 161, "additions": 113, "deletions": 48}, "files": [{"sha": "eb3ce37e313d065ef6387c0a03e57a0194ac8d16", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "patch": "@@ -1333,6 +1333,11 @@ pre.rust {\n \tborder-top: 2px solid;\n }\n \n+#titles > button:first-child:last-child {\n+\tmargin-right: 1px;\n+\twidth: calc(100% - 1px);\n+}\n+\n #titles > button:not(:last-child) {\n \tmargin-right: 1px;\n \twidth: calc(33.3% - 1px);"}, {"sha": "02370a1243a0cc4c6b04a977a29fe51ccd56f7bd", "filename": "src/librustdoc/html/static/js/search.js", "status": "modified", "additions": 44, "deletions": 25, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "raw_url": "https://github.com/rust-lang/rust/raw/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsearch.js?ref=fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "patch": "@@ -45,26 +45,33 @@ const TY_KEYWORD = itemTypes.indexOf(\"keyword\");\n \n // In the search display, allows to switch between tabs.\n function printTab(nb) {\n-    if (nb === 0 || nb === 1 || nb === 2) {\n-        searchState.currentTab = nb;\n-    }\n-    let nb_copy = nb;\n+    let iter = 0;\n+    let foundCurrentTab = false;\n+    let foundCurrentResultSet = false;\n     onEachLazy(document.getElementById(\"titles\").childNodes, elem => {\n-        if (nb_copy === 0) {\n+        if (nb === iter) {\n             addClass(elem, \"selected\");\n+            foundCurrentTab = true;\n         } else {\n             removeClass(elem, \"selected\");\n         }\n-        nb_copy -= 1;\n+        iter += 1;\n     });\n+    iter = 0;\n     onEachLazy(document.getElementById(\"results\").childNodes, elem => {\n-        if (nb === 0) {\n+        if (nb === iter) {\n             addClass(elem, \"active\");\n+            foundCurrentResultSet = true;\n         } else {\n             removeClass(elem, \"active\");\n         }\n-        nb -= 1;\n+        iter += 1;\n     });\n+    if (foundCurrentTab && foundCurrentResultSet) {\n+        searchState.currentTab = nb;\n+    } else if (nb != 0) {\n+        printTab(0);\n+    }\n }\n \n /**\n@@ -1409,18 +1416,12 @@ window.initSearch = rawSearchIndex => {\n                     for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n                         row = searchIndex[i];\n                         in_returned = checkReturned(row, elem, parsedQuery.typeFilter);\n-                        addIntoResults(results_returned, row.id, i, -1, in_returned);\n+                        addIntoResults(results_others, row.id, i, -1, in_returned);\n                     }\n                 }\n             } else if (parsedQuery.foundElems > 0) {\n-                let container = results_others;\n-                // In the special case where only a \"returned\" information is available, we want to\n-                // put the information into the \"results_returned\" dict.\n-                if (parsedQuery.returned.length !== 0 && parsedQuery.elems.length === 0) {\n-                    container = results_returned;\n-                }\n                 for (i = 0, nSearchWords = searchWords.length; i < nSearchWords; ++i) {\n-                    handleArgs(searchIndex[i], i, container);\n+                    handleArgs(searchIndex[i], i, results_others);\n                 }\n             }\n         }\n@@ -1725,12 +1726,26 @@ window.initSearch = rawSearchIndex => {\n             `${typeFilter}</h1> in ${crates} </div>`;\n         if (results.query.error !== null) {\n             output += `<h3>Query parser error: \"${results.query.error}\".</h3>`;\n+            output += '<div id=\"titles\">' +\n+                makeTabHeader(0, \"In Names\", ret_others[1]) +\n+                \"</div>\";\n+            currentTab = 0;\n+        } else if (results.query.foundElems <= 1 && results.query.returned.length === 0) {\n+            output += `<div id=\"titles\">` +\n+                makeTabHeader(0, \"In Names\", ret_others[1]) +\n+                makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n+                makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n+                \"</div>\";\n+        } else {\n+            const signatureTabTitle =\n+                results.query.elems.length === 0 ? \"In Function Return Types\" :\n+                results.query.returned.length === 0 ? \"In Function Parameters\" :\n+                \"In Function Signatures\";\n+            output += '<div id=\"titles\">' +\n+                makeTabHeader(0, signatureTabTitle, ret_others[1]) +\n+                \"</div>\";\n+            currentTab = 0;\n         }\n-        output += `<div id=\"titles\">` +\n-            makeTabHeader(0, \"In Names\", ret_others[1]) +\n-            makeTabHeader(1, \"In Parameters\", ret_in_args[1]) +\n-            makeTabHeader(2, \"In Return Types\", ret_returned[1]) +\n-            \"</div>\";\n \n         const resultsElem = document.createElement(\"div\");\n         resultsElem.id = \"results\";\n@@ -1745,12 +1760,16 @@ window.initSearch = rawSearchIndex => {\n         }\n         search.appendChild(resultsElem);\n         // Reset focused elements.\n-        searchState.focusedByTab = [null, null, null];\n         searchState.showResults(search);\n         const elems = document.getElementById(\"titles\").childNodes;\n-        elems[0].onclick = () => { printTab(0); };\n-        elems[1].onclick = () => { printTab(1); };\n-        elems[2].onclick = () => { printTab(2); };\n+        searchState.focusedByTab = [];\n+        let i = 0;\n+        for (const elem of elems) {\n+            const j = i;\n+            elem.onclick = () => { printTab(j); };\n+            searchState.focusedByTab.push(null);\n+            i += 1;\n+        }\n         printTab(currentTab);\n     }\n "}, {"sha": "763927f9d0fe9d810b7acc4924e5ae5e25483508", "filename": "src/test/rustdoc-gui/search-tab-change-title-fn-sig.goml", "status": "added", "additions": 64, "deletions": 0, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "raw_url": "https://github.com/rust-lang/rust/raw/fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-change-title-fn-sig.goml?ref=fcb0bce25cb01ff2cc26ef41ea1f3be7893ff0a6", "patch": "@@ -0,0 +1,64 @@\n+// Checks that the search tab results work correctly with function signature syntax\n+// First, try a search-by-name\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"Foo\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Names\", STARTS_WITH)\n+assert: \"input.search-input:focus\"\n+// Use left-right keys\n+press-key: \"ArrowDown\"\n+assert: \"#results > .search-results.active > a:nth-of-type(1):focus\"\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(2)\", {\"class\": \"selected\"})\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+press-key: \"ArrowLeft\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n+\n+// Now try search-by-return\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"-> String\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Return Types\", STARTS_WITH)\n+assert: \"input.search-input:focus\"\n+// Use left-right keys\n+press-key: \"ArrowDown\"\n+assert: \"#results > .search-results.active > a:nth-of-type(1):focus\"\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+press-key: \"ArrowRight\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+press-key: \"ArrowLeft\"\n+wait-for-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+\n+// Try with a search-by-return with no results\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"-> Something\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Return Types\", STARTS_WITH)\n+\n+// Try with a search-by-parameter\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"usize pattern\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Parameters\", STARTS_WITH)\n+\n+// Try with a search-by-parameter-and-return\n+goto: file://|DOC_PATH|/test_docs/index.html\n+write: (\".search-input\", \"pattern -> str\")\n+// Waiting for the search results to appear...\n+wait-for: \"#titles\"\n+assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n+assert-text: (\"#titles > button:nth-of-type(1)\", \"In Function Signatures\", STARTS_WITH)"}, {"sha": "52b3ceae7b115ae09186d12cb9a38a60cf02dd55", "filename": "src/test/rustdoc-gui/search-tab-selection-if-current-is-empty.goml", "status": "removed", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "raw_url": "https://github.com/rust-lang/rust/raw/66443a185261a04d7098bb465e2338334a3aa7a4/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsearch-tab-selection-if-current-is-empty.goml?ref=66443a185261a04d7098bb465e2338334a3aa7a4", "patch": "@@ -1,23 +0,0 @@\n-// Checks that the first non-empty search result tab is selected if the default/currently selected\n-// one is empty.\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"Foo\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})\n-\n-// To go back to the original \"state\"\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"-> String\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-// With this search, only the last tab shouldn't be empty so it should be selected.\n-assert-attribute: (\"#titles > button:nth-of-type(3)\", {\"class\": \"selected\"})\n-\n-// To go back to the original \"state\"\n-goto: file://|DOC_PATH|/test_docs/index.html\n-write: (\".search-input\", \"-> Something\")\n-// Waiting for the search results to appear...\n-wait-for: \"#titles\"\n-// With this search, all the tabs are empty so the first one should remain selected.\n-assert-attribute: (\"#titles > button:nth-of-type(1)\", {\"class\": \"selected\"})"}]}