{"sha": "987f824f233faee4aed39dac92a1b442d42965cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk4N2Y4MjRmMjMzZmFlZTRhZWQzOWRhYzkyYTFiNDQyZDQyOTY1Y2M=", "commit": {"author": {"name": "kyeongwoon", "email": "kyeongwoon.lee@samsung.com", "date": "2012-11-30T00:21:49Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-01-14T00:43:39Z"}, "message": "Support ARM and Android\n\nConflicts:\n\tsrc/libcore/os.rs\n\tsrc/librustc/back/link.rs\n\tsrc/librustc/driver/driver.rs\n\tsrc/librustc/metadata/loader.rs\n\tsrc/librustc/middle/trans/base.rs", "tree": {"sha": "2cf1b078738e9bf580b9ee43f674d95c403751fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2cf1b078738e9bf580b9ee43f674d95c403751fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/987f824f233faee4aed39dac92a1b442d42965cc", "comment_count": 2, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/987f824f233faee4aed39dac92a1b442d42965cc", "html_url": "https://github.com/rust-lang/rust/commit/987f824f233faee4aed39dac92a1b442d42965cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/987f824f233faee4aed39dac92a1b442d42965cc/comments", "author": null, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "27e6a0fa5651dbda55773488c8b706adfa5cefc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e6a0fa5651dbda55773488c8b706adfa5cefc2", "html_url": "https://github.com/rust-lang/rust/commit/27e6a0fa5651dbda55773488c8b706adfa5cefc2"}], "stats": {"total": 629, "additions": 599, "deletions": 30}, "files": [{"sha": "e476ac1dba2d1cf47eda06710cb7f828ca839557", "filename": "Makefile.in", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/Makefile.in", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/Makefile.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Makefile.in?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -241,7 +241,7 @@ DRIVER_CRATE := $(S)src/driver/driver.rs\n ######################################################################\n \n # FIXME: x86-ism\n-LLVM_COMPONENTS=x86 ipo bitreader bitwriter linker asmparser jit mcjit \\\n+LLVM_COMPONENTS=x86 arm ipo bitreader bitwriter linker asmparser jit mcjit \\\n                 interpreter\n \n define DEF_LLVM_VARS"}, {"sha": "f466f0fa3d7bc34de864473979083387918cdc77", "filename": "configure", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/configure", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/configure", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/configure?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -717,7 +717,7 @@ do\n     then\n         msg \"configuring LLVM for $t\"\n \n-        LLVM_TARGETS=\"--enable-targets=x86,x86_64\"\n+        LLVM_TARGETS=\"--enable-targets=x86,x86_64,arm\"\n         LLVM_BUILD=\"--build=$t\"\n         LLVM_HOST=\"--host=$t\"\n         LLVM_TARGET=\"--target=$t\""}, {"sha": "656f672479e9998a4d26c95103f336b77678c88c", "filename": "src/libcore/cleanup.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcleanup.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -40,11 +40,13 @@ struct AllocHeader { priv opaque: () }\n struct MemoryRegion { priv opaque: () }\n \n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n struct Registers {\n     data: [u32 * 16]\n }\n \n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n struct Context {\n     regs: Registers,\n     next: *Context,\n@@ -70,6 +72,7 @@ struct BoxedRegion {\n }\n \n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n struct Task {\n     // Public fields\n     refcount: intptr_t,                 // 0"}, {"sha": "ecd48fe16bc35c7a0047af944eda8c6dbb53df6c", "filename": "src/libcore/libc.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flibc.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -198,12 +198,14 @@ pub mod types {\n     // Standard types that are scalar but vary by OS and arch.\n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod common {\n             pub mod posix01 {}\n         }\n \n         #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch = \"arm\")]\n         pub mod arch {\n             pub mod c95 {\n                 pub type c_char = i8;\n@@ -797,6 +799,7 @@ pub mod consts {\n \n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     pub mod os {\n         pub mod c95 {\n             pub const EXIT_FAILURE : int = 1;\n@@ -1264,6 +1267,7 @@ pub mod funcs {\n \n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix88 {\n@@ -1283,7 +1287,8 @@ pub mod funcs {\n \n             #[cfg(target_os = \"linux\")]\n             #[cfg(target_os = \"freebsd\")]\n-            unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n+            #[cfg(target_os = \"android\")]\n+           unsafe fn fstat(fildes: c_int, buf: *mut stat) -> c_int;\n \n             #[cfg(target_os = \"macos\")]\n             #[link_name = \"fstat64\"]\n@@ -1294,6 +1299,7 @@ pub mod funcs {\n \n             #[cfg(target_os = \"linux\")]\n             #[cfg(target_os = \"freebsd\")]\n+            #[cfg(target_os = \"android\")]\n             unsafe fn stat(path: *c_char, buf: *mut stat) -> c_int;\n \n             #[cfg(target_os = \"macos\")]\n@@ -1382,6 +1388,7 @@ pub mod funcs {\n     }\n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix01 {\n@@ -1394,6 +1401,7 @@ pub mod funcs {\n         pub extern mod stat_ {\n             #[cfg(target_os = \"linux\")]\n             #[cfg(target_os = \"freebsd\")]\n+            #[cfg(target_os = \"android\")]\n             unsafe fn lstat(path: *c_char, buf: *mut stat) -> c_int;\n \n             #[cfg(target_os = \"macos\")]\n@@ -1410,6 +1418,7 @@ pub mod funcs {\n             unsafe fn fsync(fd: c_int) -> c_int;\n \n             #[cfg(target_os = \"linux\")]\n+            #[cfg(target_os = \"android\")]\n             unsafe fn fdatasync(fd: c_int) -> c_int;\n \n             unsafe fn setenv(name: *c_char, val: *c_char,\n@@ -1442,6 +1451,7 @@ pub mod funcs {\n \n     #[cfg(target_os = \"win32\")]\n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"macos\")]\n     #[cfg(target_os = \"freebsd\")]\n     pub mod posix08 {\n@@ -1473,6 +1483,7 @@ pub mod funcs {\n \n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     #[cfg(target_os = \"win32\")]\n     pub mod bsd44 {\n     }\n@@ -1492,6 +1503,7 @@ pub mod funcs {\n     }\n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     pub mod extra {\n     }\n "}, {"sha": "ff3253a8223ffd30ed7ba6cc48b7fb0caf6edc95", "filename": "src/libcore/os.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fos.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -325,6 +325,7 @@ pub fn fsync_fd(fd: c_int, _level: io::fsync::Level) -> c_int {\n }\n \n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n pub fn fsync_fd(fd: c_int, level: io::fsync::Level) -> c_int {\n     unsafe {\n         use libc::funcs::posix01::unistd::*;\n@@ -449,6 +450,7 @@ pub fn self_exe_path() -> Option<Path> {\n     }\n \n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"android\")]\n     fn load_self() -> Option<~str> {\n         unsafe {\n             use libc::funcs::posix01::unistd::readlink;\n@@ -876,6 +878,7 @@ pub fn real_args() -> ~[~str] {\n }\n \n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n #[cfg(target_os = \"freebsd\")]\n pub fn real_args() -> ~[~str] {\n     unsafe {\n@@ -976,7 +979,6 @@ pub mod consts {\n         pub const FAMILY: &str = \"windows\";\n     }\n \n-\n     #[cfg(target_os = \"macos\")]\n     use os::consts::macos::*;\n \n@@ -986,6 +988,9 @@ pub mod consts {\n     #[cfg(target_os = \"linux\")]\n     use os::consts::linux::*;\n \n+    #[cfg(target_os = \"android\")]\n+    use os::consts::android::*;\n+\n     #[cfg(target_os = \"win32\")]\n     use os::consts::win32::*;\n \n@@ -1010,6 +1015,13 @@ pub mod consts {\n         pub const EXE_SUFFIX: &str = \"\";\n     }\n \n+    pub mod android {\n+        pub const SYSNAME: &str = \"android\";\n+        pub const DLL_PREFIX: &str = \"lib\";\n+        pub const DLL_SUFFIX: &str = \".so\";\n+        pub const EXE_SUFFIX: &str = \"\";\n+    }\n+\n     pub mod win32 {\n         pub const SYSNAME: &str = \"win32\";\n         pub const DLL_PREFIX: &str = \"\";"}, {"sha": "7f5f334ac1f9a42876f1b1392336aed1b92083ab", "filename": "src/libcore/path.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpath.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -89,8 +89,10 @@ pub pure fn Path(s: &str) -> Path {\n }\n \n #[cfg(target_os = \"linux\")]\n+#[cfg(target_os = \"android\")]\n mod stat {\n     #[cfg(target_arch = \"x86\")]\n+    #[cfg(target_arch = \"arm\")]\n     pub mod arch {\n         use libc;\n "}, {"sha": "54bce77d30885406f1466355ca360c7bf4806ab3", "filename": "src/libcore/run.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Frun.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibcore%2Frun.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frun.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -405,6 +405,7 @@ pub fn waitpid(pid: pid_t) -> int {\n     #[cfg(unix)]\n     fn waitpid_os(pid: pid_t) -> int {\n         #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"android\")]\n         fn WIFEXITED(status: i32) -> bool {\n             (status & 0xffi32) == 0i32\n         }\n@@ -416,6 +417,7 @@ pub fn waitpid(pid: pid_t) -> int {\n         }\n \n         #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"android\")]\n         fn WEXITSTATUS(status: i32) -> i32 {\n             (status >> 8i32) & 0xffi32\n         }"}, {"sha": "2c4e0af0f2d28d54cdae4d6be9d87aeba77994cc", "filename": "src/librustc/back/arm.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Farm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Farm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Farm.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,85 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use back::target_strs;\n+use driver::session;\n+use session::sess_os_to_meta_os;\n+use metadata::loader::meta_section_name;\n+\n+fn get_target_strs(target_os: session::os) -> target_strs::t {\n+    return {\n+        module_asm: ~\"\",\n+\n+        meta_sect_name: meta_section_name(sess_os_to_meta_os(target_os)),\n+\n+        data_layout: match target_os {\n+          session::os_macos => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_win32 => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_linux => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_android => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+\n+          session::os_freebsd => {\n+            ~\"e-p:32:32:32\" +\n+                ~\"-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64\" +\n+                ~\"-f32:32:32-f64:64:64\" +\n+                ~\"-v64:64:64-v128:64:128\" +\n+                ~\"-a0:0:64-n32\"\n+          }\n+        },\n+\n+        target_triple: match target_os {\n+          session::os_macos => ~\"arm-apple-darwin\",\n+          session::os_win32 => ~\"arm-pc-mingw32\",\n+          session::os_linux => ~\"arm-unknown-linux\",\n+          session::os_android => ~\"arm-unknown-android\",\n+          session::os_freebsd => ~\"arm-unknown-freebsd\"\n+        },\n+\n+        cc_args: ~[~\"-marm\"]\n+    };\n+}\n+\n+\n+//\n+// Local Variables:\n+// mode: rust\n+// fill-column: 78;\n+// indent-tabs-mode: nil\n+// c-basic-offset: 4\n+// buffer-file-coding-system: utf-8-unix\n+// End:\n+//"}, {"sha": "e49d9da335569de39198341687d38b050ee6b145", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -30,7 +30,7 @@ use core::cmp;\n use core::hash;\n use core::io::{Writer, WriterUtil};\n use core::libc::{c_int, c_uint, c_char};\n-use core::os::consts::{macos, freebsd, linux, win32};\n+use core::os::consts::{macos, freebsd, linux, android, win32};\n use core::os;\n use core::ptr;\n use core::run;\n@@ -43,7 +43,7 @@ use syntax::ast_map::{path, path_mod, path_name};\n use syntax::attr;\n use syntax::print::pprust;\n \n-pub enum output_type {\n+enum output_type {\n     output_type_none,\n     output_type_bitcode,\n     output_type_assembly,\n@@ -712,6 +712,7 @@ fn output_dll_filename(os: session::os, lm: &link_meta) -> ~str {\n         session::os_win32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n         session::os_macos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n         session::os_linux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+        session::os_android => (android::DLL_PREFIX, android::DLL_SUFFIX),\n         session::os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n     return str::from_slice(dll_prefix) + libname +\n@@ -758,7 +759,10 @@ fn link_binary(sess: Session,\n     // For win32, there is no cc command,\n     // so we add a condition to make it use gcc.\n     let cc_prog: ~str =\n-        if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" } else { ~\"cc\" };\n+        if sess.targ_cfg.os == session::os_android {\n+            ~\"arm-linux-androideabi-g++\"\n+        } else if sess.targ_cfg.os == session::os_win32 { ~\"gcc\" }\n+        else { ~\"cc\" };\n     // The invocations of cc share some flags across platforms\n \n     let mut cc_args =\n@@ -831,6 +835,11 @@ fn link_binary(sess: Session,\n         // have to be explicit about linking to it. See #2510\n         cc_args.push(~\"-lm\");\n     }\n+    else if sess.targ_cfg.os == session::os_android {\n+        cc_args.push_all(~[~\"-ldl\", ~\"-llog\",  ~\"-lsupc++\",\n+                           ~\"-lgnustl_shared\"]);\n+        cc_args.push(~\"-lm\");\n+    }\n \n     if sess.targ_cfg.os == session::os_freebsd {\n         cc_args.push_all(~[~\"-pthread\", ~\"-lrt\",\n@@ -851,7 +860,9 @@ fn link_binary(sess: Session,\n     }\n \n     // Stack growth requires statically linking a __morestack function\n+    if sess.targ_cfg.os != session::os_android {\n     cc_args.push(~\"-lmorestack\");\n+    }\n \n     // FIXME (#2397): At some point we want to rpath our guesses as to where\n     // extern libraries might live, based on the addl_lib_search_paths"}, {"sha": "005a5404b37e6a9eb6dfbc6ee71b1f5dd4d453b2", "filename": "src/librustc/back/rpath.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Frpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Frpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Frpath.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -130,7 +130,8 @@ fn get_rpath_relative_to_output(os: session::os,\n \n     // Mac doesn't appear to support $ORIGIN\n     let prefix = match os {\n-        session::os_linux | session::os_freebsd => \"$ORIGIN\",\n+        session::os_android |session::os_linux | session::os_freebsd\n+                          => \"$ORIGIN\",\n         session::os_macos => \"@executable_path\",\n         session::os_win32 => util::unreachable()\n     };\n@@ -331,6 +332,7 @@ mod test {\n \n     #[test]\n     #[cfg(target_os = \"linux\")]\n+    #[cfg(target_os = \"andorid\")]\n     fn test_rpath_relative() {\n       let o = session::os_linux;\n       let res = get_rpath_relative_to_output(o,"}, {"sha": "7ac2bb73ebb854bee8c2bb7b44e9195855254e50", "filename": "src/librustc/back/x86.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Fx86.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Fx86.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -35,6 +35,9 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_linux => {\n             ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n           }\n+          session::os_android => {\n+            ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n+          }\n \n           session::os_freebsd => {\n             ~\"e-p:32:32-f64:32:64-i64:32:64-f80:32:32-n8:16:32\"\n@@ -45,6 +48,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_macos => ~\"i686-apple-darwin\",\n           session::os_win32 => ~\"i686-pc-mingw32\",\n           session::os_linux => ~\"i686-unknown-linux-gnu\",\n+          session::os_android => ~\"i686-unknown-android-gnu\",\n           session::os_freebsd => ~\"i686-unknown-freebsd\"\n         },\n "}, {"sha": "aaf9758781301b255169a729433edc9775f6a6b6", "filename": "src/librustc/back/x86_64.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Fx86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fback%2Fx86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Fx86_64.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -39,6 +39,11 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n                 ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n                 ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n           }\n+          session::os_android => {\n+            ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n+                ~\"f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-\"+\n+                ~\"s0:64:64-f80:128:128-n8:16:32:64-S128\"\n+          }\n \n           session::os_freebsd => {\n             ~\"e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-\"+\n@@ -51,6 +56,7 @@ fn get_target_strs(target_os: session::os) -> target_strs::t {\n           session::os_macos => ~\"x86_64-apple-darwin\",\n           session::os_win32 => ~\"x86_64-pc-mingw32\",\n           session::os_linux => ~\"x86_64-unknown-linux-gnu\",\n+          session::os_android => ~\"x86_64-unknown-android-gnu\",\n           session::os_freebsd => ~\"x86_64-unknown-freebsd\",\n         },\n "}, {"sha": "030856539a5e86cf29fbffae304a0972c482573d", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 14, "deletions": 3, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -12,7 +12,7 @@\n use core::prelude::*;\n \n use back::link;\n-use back::{x86, x86_64};\n+use back::{arm, x86, x86_64};\n use front;\n use lib::llvm::llvm;\n use metadata::{creader, cstore, filesearch};\n@@ -74,9 +74,18 @@ fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n       session::os_win32 => ~\"msvcrt.dll\",\n       session::os_macos => ~\"libc.dylib\",\n       session::os_linux => ~\"libc.so.6\",\n+      session::os_android => ~\"libc.so\",\n       session::os_freebsd => ~\"libc.so.7\"\n       // _ { \"libc.so\" }\n     };\n+    let tos = match sess.targ_cfg.os {\n+      session::os_win32 => ~\"win32\",\n+      session::os_macos => ~\"macos\",\n+      session::os_linux => ~\"linux\",\n+      session::os_android => ~\"android\",\n+      session::os_freebsd => ~\"freebsd\"\n+      // _ { \"libc.so\" }\n+    };\n \n     let mk = attr::mk_name_value_item_str;\n \n@@ -88,7 +97,7 @@ fn default_configuration(sess: Session, +argv0: ~str, input: input) ->\n \n     return ~[ // Target bindings.\n          attr::mk_word_item(str::from_slice(os::FAMILY)),\n-         mk(~\"target_os\", str::from_slice(os::SYSNAME)),\n+         mk(~\"target_os\", tos),\n          mk(~\"target_family\", str::from_slice(os::FAMILY)),\n          mk(~\"target_arch\", arch),\n          mk(~\"target_word_size\", wordsz),\n@@ -424,6 +433,8 @@ fn get_os(triple: ~str) -> Option<session::os> {\n             Some(session::os_macos)\n         } else if str::contains(triple, ~\"linux\") {\n             Some(session::os_linux)\n+        } else if str::contains(triple, ~\"android\") {\n+            Some(session::os_android)\n         } else if str::contains(triple, ~\"freebsd\") {\n             Some(session::os_freebsd)\n         } else { None }\n@@ -463,7 +474,7 @@ fn build_target_config(sopts: @session::options,\n     let target_strs = match arch {\n       session::arch_x86 => x86::get_target_strs(os),\n       session::arch_x86_64 => x86_64::get_target_strs(os),\n-      session::arch_arm => x86::get_target_strs(os)\n+      session::arch_arm => arm::get_target_strs(os)\n     };\n     let target_cfg: @session::config =\n         @{os: os, arch: arch, target_strs: target_strs, int_type: int_type,"}, {"sha": "b2b6cb25dbb7b46c4136e9749e5986872007b1b7", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -29,7 +29,7 @@ use syntax::parse::parse_sess;\n use syntax::{ast, codemap};\n use syntax;\n \n-enum os { os_win32, os_macos, os_linux, os_freebsd, }\n+enum os { os_win32, os_macos, os_linux, os_android, os_freebsd, }\n \n impl os : cmp::Eq {\n     pure fn eq(&self, other: &os) -> bool {\n@@ -326,6 +326,7 @@ fn sess_os_to_meta_os(os: os) -> metadata::loader::os {\n     match os {\n       os_win32 => loader::os_win32,\n       os_linux => loader::os_linux,\n+      os_android => loader::os_android,\n       os_macos => loader::os_macos,\n       os_freebsd => loader::os_freebsd\n     }"}, {"sha": "58c9a1b90f247729725b16fb862b73d4d957ccfd", "filename": "src/librustc/metadata/loader.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmetadata%2Floader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmetadata%2Floader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Floader.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -28,15 +28,15 @@ use core::cast;\n use core::flate;\n use core::io::WriterUtil;\n use core::io;\n-use core::os::consts::{macos, freebsd, linux, win32};\n+use core::os::consts::{macos, freebsd, linux, android, win32};\n use core::option;\n use core::ptr;\n use core::str;\n use core::uint;\n use core::vec;\n \n export os;\n-export os_macos, os_win32, os_linux, os_freebsd;\n+export os_macos, os_win32, os_linux, os_freebsd, os_android;\n export ctxt;\n export load_library_crate;\n export list_file_metadata;\n@@ -49,6 +49,7 @@ enum os {\n     os_macos,\n     os_win32,\n     os_linux,\n+    os_android,\n     os_freebsd\n }\n \n@@ -86,6 +87,7 @@ fn libname(cx: ctxt) -> {prefix: ~str, suffix: ~str} {\n         os_win32 => (win32::DLL_PREFIX, win32::DLL_SUFFIX),\n         os_macos => (macos::DLL_PREFIX, macos::DLL_SUFFIX),\n         os_linux => (linux::DLL_PREFIX, linux::DLL_SUFFIX),\n+        os_android => (android::DLL_PREFIX, android::DLL_SUFFIX),\n         os_freebsd => (freebsd::DLL_PREFIX, freebsd::DLL_SUFFIX),\n     };\n     return {\n@@ -251,6 +253,7 @@ fn meta_section_name(os: os) -> ~str {\n       os_macos => ~\"__DATA,__note.rustc\",\n       os_win32 => ~\".note.rustc\",\n       os_linux => ~\".note.rustc\",\n+      os_android => ~\".note.rustc\",\n       os_freebsd => ~\".note.rustc\"\n     }\n }"}, {"sha": "165d9b60a61d9f61058d808ee01d4801cc652476", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 18, "deletions": 9, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -2152,7 +2152,9 @@ fn register_fn_fuller(ccx: @crate_ctxt,\n     let llfn: ValueRef = decl_fn(ccx.llmod, copy ps, cc, llfty);\n     ccx.item_symbols.insert(node_id, ps);\n \n-    let is_main = is_main_name(path) && !ccx.sess.building_library;\n+    let is_main = is_main_name(path) && (!ccx.sess.building_library ||\n+                      (ccx.sess.building_library &&\n+                       ccx.sess.targ_cfg.os == session::os_android));\n     if is_main { create_main_wrapper(ccx, sp, llfn); }\n     llfn\n }\n@@ -2202,7 +2204,12 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef) {\n         #[cfg(unix)]\n         fn main_name() -> ~str { return ~\"main\"; }\n         let llfty = T_fn(~[ccx.int_type, ccx.int_type], ccx.int_type);\n-        let llfn = decl_cdecl_fn(ccx.llmod, main_name(), llfty);\n+\n+        let llfn = if ccx.sess.building_library {\n+            decl_cdecl_fn(ccx.llmod, ~\"amain\", llfty)\n+        } else {\n+            decl_cdecl_fn(ccx.llmod, main_name(), llfty)\n+        };\n         let llbb = str::as_c_str(~\"top\", |buf| {\n             unsafe {\n                 llvm::LLVMAppendBasicBlock(llfn, buf)\n@@ -2217,14 +2224,16 @@ fn create_main_wrapper(ccx: @crate_ctxt, sp: span, main_llfn: ValueRef) {\n                              val_ty(crate_map)], ccx.int_type);\n         let start = decl_cdecl_fn(ccx.llmod, ~\"rust_start\", start_ty);\n \n-        let args = unsafe {\n-            ~[\n-                rust_main,\n-                llvm::LLVMGetParam(llfn, 0 as c_uint),\n-                llvm::LLVMGetParam(llfn, 1 as c_uint),\n-                crate_map\n-            ]\n+        let args = if ccx.sess.building_library unsafe {\n+            ~[rust_main,\n+              llvm::LLVMConstInt(T_i32(), 0u as c_ulonglong, False),\n+              llvm::LLVMConstInt(T_i32(), 0u as c_ulonglong, False),\n+              crate_map]\n+        } else unsafe {\n+            ~[rust_main, llvm::LLVMGetParam(llfn, 0 as c_uint),\n+              llvm::LLVMGetParam(llfn, 1 as c_uint), crate_map]\n         };\n+\n         let result = unsafe {\n             llvm::LLVMBuildCall(bld, start, vec::raw::to_ptr(args),\n                                 args.len() as c_uint, noname())"}, {"sha": "4c373e0d2170a808c7800d0e80978b4e1e9c470d", "filename": "src/librustc/middle/trans/foreign.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fforeign.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -15,6 +15,7 @@ use core::prelude::*;\n \n use back::{link, abi};\n use driver::session::arch_x86_64;\n+use driver::session::arch_arm;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};\n use lib::llvm::{Struct, Array, ModuleRef, CallConv, Attribute};\n use lib::llvm::{StructRetAttribute, ByValAttribute};\n@@ -494,6 +495,8 @@ fn c_stack_tys(ccx: @crate_ctxt,\n     let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n     let x86_64 = if ccx.sess.targ_cfg.arch == arch_x86_64 {\n         option::Some(x86_64_tys(llargtys, llretty, ret_def))\n+    } else if ccx.sess.targ_cfg.arch == arch_arm {\n+        option::Some(x86_64_tys(llargtys, llretty, ret_def))\n     } else {\n         option::None\n     };\n@@ -1491,6 +1494,14 @@ fn register_foreign_fn(ccx: @crate_ctxt,\n             register_fn_fuller(ccx, sp, /*bad*/copy path, node_id, attrs,\n                                t, lib::llvm::CCallConv, fnty)\n         }\n+    } else if ccx.sess.targ_cfg.arch == arch_arm {\n+        let ret_def = !ty::type_is_bot(ret_ty) && !ty::type_is_nil(ret_ty);\n+        let x86_64 = x86_64_tys(llargtys, llretty, ret_def);\n+        do decl_x86_64_fn(x86_64) |fnty| {\n+            register_fn_fuller(ccx, sp, /*bad*/copy path, node_id, attrs,\n+                               t, lib::llvm::CCallConv, fnty)\n+        }\n+\n     } else {\n         let llfty = T_fn(llargtys, llretty);\n         register_fn_fuller(ccx, sp, path, node_id, attrs,"}, {"sha": "56a228991939b60fdcb9599d4af038eb590350be", "filename": "src/librustc/rustc.rc", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Frustc.rc", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibrustc%2Frustc.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Frustc.rc?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -162,6 +162,8 @@ mod back {\n     #[legacy_exports]\n     mod upcall;\n     #[legacy_exports]\n+    mod arm;\n+    #[legacy_exports]\n     mod x86;\n     #[legacy_exports]\n     mod x86_64;"}, {"sha": "847962c1773a9a72457b0196eb26a93bd91b1a01", "filename": "src/libstd/net_tcp.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibstd%2Fnet_tcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibstd%2Fnet_tcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet_tcp.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -1291,6 +1291,7 @@ pub mod test {\n     #[cfg(target_os=\"win32\")]\n     #[cfg(target_os=\"darwin\")]\n     #[cfg(target_os=\"linux\")]\n+    #[cfg(target_os=\"android\")]\n     pub mod tcp_ipv4_server_and_client_test {\n         #[cfg(target_arch=\"x86_64\")]\n         pub mod impl64 {\n@@ -1329,6 +1330,7 @@ pub mod test {\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n+        #[cfg(target_arch=\"arm\")]\n         pub mod impl32 {\n             use net::tcp::test::*;\n "}, {"sha": "eee3d60a66d6cf6664f30071bdc20d97d36fde07", "filename": "src/libstd/uv_ll.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibstd%2Fuv_ll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Flibstd%2Fuv_ll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fuv_ll.rs?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -109,6 +109,7 @@ pub type uv_tcp_t_32bit_unix_riders = {\n     a29: *u8\n };\n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n pub type uv_tcp_t_32bit_unix_riders = {\n     a29: *u8, a30: *u8, a31: *u8,\n     a32: *u8, a33: *u8, a34: *u8,\n@@ -165,6 +166,7 @@ pub type uv_write_t_32bit_unix_riders = {\n     a13: *u8\n };\n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n pub type uv_write_t_32bit_unix_riders = {\n     a13: *u8, a14: *u8\n };\n@@ -192,6 +194,7 @@ pub type uv_async_t_32bit_unix_riders = {\n     a10: *u8\n };\n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n pub type uv_async_t_32bit_unix_riders = {\n     a10: *u8, a11: *u8, a12: *u8, a13: *u8\n };\n@@ -220,6 +223,7 @@ pub type uv_timer_t_32bit_unix_riders = {\n     a10: *u8, a11: *u8\n };\n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n pub type uv_timer_t_32bit_unix_riders = {\n     a10: *u8, a11: *u8, a12: *u8, a13: *u8,\n     a14: *u8, a15: *u8, a16: *u8\n@@ -249,6 +253,7 @@ pub type sockaddr_in6 = {\n     a2: *u8, a3: *u8\n };\n #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n pub type sockaddr_in6 = {\n     a0: *u8, a1: *u8,\n     a2: *u8, a3: *u8,\n@@ -267,6 +272,7 @@ pub mod addr_in_impl {\n         a2: *u8, a3: *u8\n     };\n     #[cfg(target_arch=\"x86\")]\n+#[cfg(target_arch=\"arm\")]\n     pub type addr_in = {\n         a0: *u8, a1: *u8,\n         a2: *u8, a3: *u8,\n@@ -285,13 +291,15 @@ pub mod addr_in_impl {\n // unix size: 48, 32bit: 32\n pub type addrinfo = addrinfo_impl::addrinfo;\n #[cfg(target_os=\"linux\")]\n+#[cfg(target_os=\"android\")]\n pub mod addrinfo_impl {\n     #[cfg(target_arch=\"x86_64\")]\n     pub type addrinfo = {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n         a04: *u8, a05: *u8\n     };\n     #[cfg(target_arch=\"x86\")]\n+    #[cfg(target_arch=\"arm\")]\n     pub type addrinfo = {\n         a00: *u8, a01: *u8, a02: *u8, a03: *u8,\n         a04: *u8, a05: *u8, a06: *u8, a07: *u8\n@@ -328,6 +336,7 @@ pub mod uv_ll_struct_stubgen {\n     pub fn gen_stub_uv_tcp_t() -> uv_tcp_t {\n         return gen_stub_os();\n         #[cfg(target_os = \"linux\")]\n+        #[cfg(target_os = \"android\")]\n         #[cfg(target_os = \"macos\")]\n         #[cfg(target_os = \"freebsd\")]\n         pub fn gen_stub_os() -> uv_tcp_t {\n@@ -358,6 +367,7 @@ pub mod uv_ll_struct_stubgen {\n                 };\n             }\n             #[cfg(target_arch=\"x86\")]\n+            #[cfg(target_arch=\"arm\")]\n             pub fn gen_stub_arch() -> uv_tcp_t {\n                 return { fields: { loop_handle: ptr::null(), type_: 0u32,\n                                 close_cb: ptr::null(),\n@@ -443,6 +453,7 @@ pub mod uv_ll_struct_stubgen {\n             };\n         }\n         #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch=\"arm\")]\n         pub fn gen_stub_arch() -> uv_async_t {\n             return { fields: { loop_handle: ptr::null(), type_: 0u32,\n                             close_cb: ptr::null(),\n@@ -492,6 +503,7 @@ pub mod uv_ll_struct_stubgen {\n             };\n         }\n         #[cfg(target_arch = \"x86\")]\n+        #[cfg(target_arch=\"arm\")]\n         pub fn gen_stub_arch() -> uv_timer_t {\n             return { fields: { loop_handle: ptr::null(), type_: 0u32,\n                             close_cb: ptr::null(),\n@@ -541,6 +553,7 @@ pub mod uv_ll_struct_stubgen {\n             };\n         }\n         #[cfg(target_arch=\"x86\")]\n+        #[cfg(target_arch=\"arm\")]\n         pub fn gen_stub_arch() -> uv_write_t {\n             return { fields: { loop_handle: ptr::null(), type_: 0u32,\n                             close_cb: ptr::null(),\n@@ -1571,6 +1584,7 @@ pub mod test {\n     #[cfg(target_os=\"win32\")]\n     #[cfg(target_os=\"darwin\")]\n     #[cfg(target_os=\"linux\")]\n+    #[cfg(target_os=\"android\")]\n     pub mod tcp_and_server_client_test {\n         #[cfg(target_arch=\"x86_64\")]\n         pub mod impl64 {\n@@ -1581,6 +1595,7 @@ pub mod test {\n             }\n         }\n         #[cfg(target_arch=\"x86\")]\n+        #[cfg(target_arch=\"arm\")]\n         pub mod impl32 {\n             use uv_ll::test::*;\n             #[test]"}, {"sha": "8d370c2d64e4c1986ef25a1e4d624eccb065b423", "filename": "src/rt/arch/arm/_context.S", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2F_context.S", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2F_context.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2F_context.S?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,47 @@\n+.text\n+.code 32\n+.arm\n+.align\n+\n+\n+.globl swap_registers\n+swap_registers:\n+\tstr r0, [r0, #0]\n+\tstr r3, [r0, #12]\n+\tstr r4, [r0, #16]\n+\tstr r5, [r0, #20]\n+\tstr r6, [r0, #24]\n+\tstr r7, [r0, #28]\n+\tstr r8, [r0, #32]\n+\tstr r9, [r0, #36]\n+\tstr r10, [r0, #40]\n+\tstr r11, [r0, #44]\n+\tstr r12, [r0, #48]\n+\tstr sp, [r0, #52] \n+\tstr lr, [r0, #56]\n+\n+\tmrs r2, cpsr\n+\tstr r2, [r0, #64]\n+\t\n+\n+\tldr r0, [r1, #0]\n+\tldr r3, [r1, #12]\n+\tldr r4, [r1, #16]\n+\tldr r5, [r1, #20]\n+\tldr r6, [r1, #24]\n+\tldr r7, [r1, #28]\n+\tldr r8, [r1, #32]\n+\tldr r9, [r1, #36]\n+\tldr r10, [r1, #40]\n+\tldr r11, [r1, #44]\n+\tldr r12, [r1, #48]\n+\t\n+\tldr sp, [r1, #52]\n+\tldr lr, [r1, #56]\n+\t \n+\tldr r2, [r1, #64]\n+\tmsr cpsr_cxsf, r2\n+\n+\tmov pc, lr\n+\n+"}, {"sha": "4b89cc994a7a55c441f29d721335a5f1232bcdc0", "filename": "src/rt/arch/arm/ccall.S", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fccall.S", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fccall.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fccall.S?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,27 @@\n+.text\n+.code 32\n+.arm\n+.align\n+\n+.globl __morestack\n+.hidden __morestack\n+__morestack:\n+\tmov r3, sp\n+\tmov sp, r2\n+\t\n+\tstr r3, [sp]\n+\tstr lr, [sp, #-4]\n+\t\n+\tsub sp, #8\n+\t\n+\tblx r1\n+\n+\tadd sp, #8\n+\t\n+\tldr lr, [sp, #-4]\n+\tldr r3, [sp] \n+\t\n+\tmov sp, r3\n+\tmov pc, lr\n+\t\n+"}, {"sha": "dbf06a532a878c707d78a77b3a91a23d41761e18", "filename": "src/rt/arch/arm/context.cpp", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fcontext.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fcontext.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fcontext.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,36 @@\n+\n+#include \"context.h\"\n+#include \"../../rust_globals.h\"\n+\n+extern \"C\" void CDECL swap_registers(registers_t *oregs,\n+                                     registers_t *regs)\n+asm (\"swap_registers\");\n+\n+context::context()\n+{\n+    assert((void*)&regs == (void*)this);\n+    memset(&regs, 0, sizeof(regs));\n+}\n+\n+void context::swap(context &out)\n+{\n+    swap_registers(&out.regs, &regs);\n+}\n+\n+void context::call(void *f, void *arg, void *stack)\n+{\n+  // Get the current context, which we will then modify to call the\n+  // given function.\n+  swap(*this);\n+\n+  // set up the stack\n+  uint32_t *sp = ( uint32_t *)stack;\n+  //sp = align_down(sp);\n+  // The final return address. 0 indicates the bottom of the stack\n+  *--sp = 0;\n+\n+  regs.data[0] = ( uint32_t )arg; // r0\n+  regs.data[13] = ( uint32_t )sp; //#52 sp, r13\n+  regs.data[14] = ( uint32_t )f;  //#60 pc, r15 --> lr,\n+  // Last base pointer on the stack should be 0\n+}"}, {"sha": "6c7db766d6a7e0bd40a934a983036b733dcf89bc", "filename": "src/rt/arch/arm/context.h", "status": "added", "additions": 43, "deletions": 0, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fcontext.h", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fcontext.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fcontext.h?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,43 @@\n+// -*- mode: c++ -*-\n+\n+#ifndef CONTEXT_H\n+#define CONTEXT_H\n+\n+#include <cstdlib>\n+#include <inttypes.h>\n+#include <stdint.h>\n+//#include <xmmintrin.h>\n+\n+#include \"vg/memcheck.h\"\n+\n+template<typename T>\n+T align_down(T sp)\n+{\n+    // There is no platform we care about that needs more than a\n+    // 16-byte alignment.\n+    return (T)((uint32_t)sp & ~(16 - 1));\n+}\n+\n+// The struct in which we store the saved data.  This is mostly the\n+// volatile registers and instruction pointer, but it also includes\n+// RCX/RDI which are used to pass arguments.  The indices for each\n+// register are found in \"regs.h\".  Note that the alignment must be\n+// 16 bytes so that SSE instructions can be used.\n+#include \"regs.h\"\n+struct registers_t {\n+    uint32_t data[RUSTRT_MAX];\n+} __attribute__((aligned(16)));\n+\n+class context {\n+public:\n+    registers_t regs;\n+\n+    context();\n+\n+    context *next;\n+\n+    void swap(context &out);\n+    void call(void *f, void *arg, void *sp);\n+};\n+\n+#endif"}, {"sha": "32a68d0732ab342cca0eea25e6f52ae46467da77", "filename": "src/rt/arch/arm/gpr.cpp", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fgpr.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fgpr.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fgpr.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,15 @@\n+#include \"gpr.h\"\n+\n+#define LOAD(rn) do { \\\n+    uintptr_t tmp; \\\n+    asm(\"mov %%\" #rn \",%0\" : \"=r\" (tmp) :); \\\n+    this->rn = tmp; \\\n+} while (0)\n+\n+void rust_gpr::load() {\n+    LOAD(r0); LOAD(r1); LOAD(r2); LOAD(r3);\n+    LOAD(r4); LOAD(r5); LOAD(r6); LOAD(r7);\n+    LOAD(r8);  LOAD(r9);  LOAD(r10); LOAD(r11);\n+    LOAD(r12); LOAD(r13); LOAD(r14); LOAD(r15);\n+}\n+"}, {"sha": "472c8a05e35e46a3390928217c0d9c7bbec142fa", "filename": "src/rt/arch/arm/gpr.h", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fgpr.h", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fgpr.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fgpr.h?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,23 @@\n+// General-purpose registers. This structure is used during stack crawling.\n+\n+#ifndef GPR_H\n+#define GPR_H\n+\n+#include \"rust_gpr_base.h\"\n+\n+class rust_gpr : public rust_gpr_base {\n+public:\n+    uintptr_t r0, r1, r2, r3, r4, r5, r6, r7;\n+    uintptr_t  r8,  r9, r10, r11, r12, r13, r14, r15;\n+\n+    inline uintptr_t get_fp() { return r11; }\n+    inline uintptr_t get_ip() { return r12; }\n+\n+    inline void set_fp(uintptr_t new_fp) { r11 = new_fp; }\n+    inline void set_ip(uintptr_t new_ip) { r12 = new_ip; }\n+\n+    void load();\n+};\n+\n+#endif\n+"}, {"sha": "193104d53b11b0c0ef33eecfb08a1065c9da0688", "filename": "src/rt/arch/arm/record_sp.S", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Frecord_sp.S", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Frecord_sp.S?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,61 @@\n+.text\n+.code 32\n+.arm\n+.align\n+\n+\n+.globl record_sp_limit\n+.globl get_sp_limit\n+.globl get_sp\n+\n+record_sp_limit:\n+\tmov r3, r0\n+\tldr r0, =my_cpu\n+\tmov r1, #0\n+\tmov r2, #0\n+    stmfd   sp!, {r3, r7}\n+    ldr     r7, =345\n+    swi     #0\n+    ldmfd   sp!, {r3, r7}\n+    movs    r0, r0\n+\tmovmi\tr0, #0\n+\n+\tldr r1, =my_array\n+\tstr r3, [r1, r0]\n+\tmov pc, lr\n+\n+\n+get_sp_limit:\n+    ldr r0, =my_cpu\n+\tmov r1, #0\n+\tmov r2, #0\n+    stmfd   sp!, {r4, r7}\n+    ldr     r7, =345\n+    swi     #0\n+    ldmfd   sp!, {r4, r7}\n+    movs    r0, r0\n+\tmovmi\tr0, #0\n+\tmov r3, r0\n+\n+\tldr r1, =my_array\n+\tldr r0, [r1, r3]\n+\tmov pc, lr\n+\n+\n+get_sp:\n+\tmov r0, sp\n+\tmov pc, lr\n+\t\n+.data\n+my_cpu:\t.long\t0\n+.global my_array\n+my_array:\t\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\n+\t.long\t0\t\n+.end"}, {"sha": "a49fcab1184c5e270904e7c6cf05197d4b4c5d33", "filename": "src/rt/arch/arm/regs.h", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fregs.h", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Farch%2Farm%2Fregs.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Farch%2Farm%2Fregs.h?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,21 @@\n+#define RUSTRT_RBX   0\n+#define RUSTRT_RSP   1\n+#define RUSTRT_RBP   2\n+// RCX on Windows, RDI elsewhere\n+#define RUSTRT_ARG0  3\n+#define RUSTRT_R12   4\n+#define RUSTRT_R13   5\n+#define RUSTRT_R14   6\n+#define RUSTRT_R15   7\n+#define RUSTRT_IP    8\n+\n+#define RUSTRT_MAX  32\n+\n+// ARG0 is the register in which the first argument goes.\n+// Naturally this depends on your operating system.\n+#   define RUSTRT_ARG0_S r0\n+#   define RUSTRT_ARG1_S r1\n+#   define RUSTRT_ARG2_S r2\n+#   define RUSTRT_ARG3_S r3\n+\n+"}, {"sha": "76aa51723ef3226066afd8b690ab0f50a1c8f8e6", "filename": "src/rt/rust_android_dummy.cpp", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_android_dummy.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_android_dummy.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,61 @@\n+// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+#include \"rust_android_dummy.h\"\n+#include <math.h>\n+\n+#ifdef __ANDROID__\n+\n+int backtrace(void **array, int size) { return 0; }\n+\n+char **backtrace_symbols(void *const *array, int size) { return 0; }\n+\n+void backtrace_symbols_fd (void *const *array, int size, int fd) {}\n+\n+\n+extern \"C\" float log2f(float f)\n+{\n+    return logf( f ) / logf( 2 );\n+}\n+\n+extern \"C\" double log2( double n )\n+{\n+    return log( n ) / log( 2 );\n+}\n+\n+extern \"C\" void telldir()\n+{\n+}\n+\n+extern \"C\" void seekdir()\n+{\n+}\n+\n+extern \"C\" void mkfifo()\n+{\n+}\n+\n+extern \"C\" void abs()\n+{\n+}\n+\n+extern \"C\" void labs()\n+{\n+}\n+\n+extern \"C\" void rand()\n+{\n+}\n+\n+extern \"C\" void srand()\n+{\n+}\n+\n+extern \"C\" void atof()\n+{\n+}\n+extern \"C\" void tgammaf()\n+{\n+}\n+#endif"}, {"sha": "2e8b6f2c766044ad1c5b2c68757c8bd4fe81c16c", "filename": "src/rt/rust_android_dummy.h", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_android_dummy.h", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_android_dummy.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_android_dummy.h?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -0,0 +1,5 @@\n+// Copyright (c) 2011 The Chromium Authors. All rights reserved.\n+// Use of this source code is governed by a BSD-style license that can be\n+// found in the LICENSE file.\n+\n+#include \"execinfo.h\""}, {"sha": "0919ccf7f0e53829c2aa1e329ca71f455bdad28e", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -33,6 +33,27 @@\n extern char **environ;\n #endif\n \n+#ifdef __ANDROID__\n+time_t\n+timegm(struct tm *tm)\n+{\n+    time_t ret;\n+    char *tz;\n+\n+    tz = getenv(\"TZ\");\n+    setenv(\"TZ\", \"\", 1);\n+    tzset();\n+    ret = mktime(tm);\n+    if (tz)\n+        setenv(\"TZ\", tz, 1);\n+    else\n+        unsetenv(\"TZ\");\n+    tzset();\n+    return ret;\n+}\n+#endif\n+\n+\n extern \"C\" CDECL rust_str*\n last_os_error() {\n     rust_task *task = rust_get_current_task();"}, {"sha": "5ddfd88d4b4a7896796fc67ed6f045719ef1e55d", "filename": "src/rt/rust_sched_loop.cpp", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_sched_loop.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_sched_loop.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_sched_loop.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -28,6 +28,7 @@ rust_sched_loop::rust_sched_loop(rust_scheduler *sched, int id, bool killed) :\n     id(id),\n     should_exit(false),\n     cached_c_stack(NULL),\n+    extra_c_stack(NULL),\n     dead_task(NULL),\n     killed(killed),\n     pump_signal(NULL),"}, {"sha": "20c9a48f1ddeff18b7e5fd742fcaab5351ffa2ed", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -165,6 +165,9 @@\n #define RED_ZONE_SIZE RZ_BSD_64\n #endif\n #endif\n+#ifdef __ANDROID__\n+#define RED_ZONE_SIZE RZ_MAC_32\n+#endif\n \n struct rust_box;\n "}, {"sha": "3c38f3c6215d494c1480e9619b19f1a474fd4b32", "filename": "src/rustllvm/RustWrapper.cpp", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frustllvm%2FRustWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frustllvm%2FRustWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FRustWrapper.cpp?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -91,6 +91,12 @@ void LLVMInitializeX86TargetMC();\n void LLVMInitializeX86AsmPrinter();\n void LLVMInitializeX86AsmParser();\n \n+\n+void LLVMInitializeARMTargetInfo();\n+void LLVMInitializeARMTarget();\n+void LLVMInitializeARMTargetMC();\n+void LLVMInitializeARMAsmPrinter();\n+void LLVMInitializeARMAsmParser();\n // Only initialize the platforms supported by Rust here,\n // because using --llvm-root will have multiple platforms\n // that rustllvm doesn't actually link to and it's pointless to put target info\n@@ -102,6 +108,12 @@ void LLVMRustInitializeTargets() {\n   LLVMInitializeX86TargetMC();\n   LLVMInitializeX86AsmPrinter();\n   LLVMInitializeX86AsmParser();\n+\t\n+  LLVMInitializeARMTargetInfo();\n+  LLVMInitializeARMTarget();\n+  LLVMInitializeARMTargetMC();\n+  LLVMInitializeARMAsmPrinter();\n+  LLVMInitializeARMAsmParser();\t\n }\n \n // Custom memory manager for MCJITting. It needs special features"}, {"sha": "d3cbc490ada453491980364661010a10e2cd7b8f", "filename": "src/rustllvm/rustllvm.def.in", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frustllvm%2Frustllvm.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/987f824f233faee4aed39dac92a1b442d42965cc/src%2Frustllvm%2Frustllvm.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2Frustllvm.def.in?ref=987f824f233faee4aed39dac92a1b442d42965cc", "patch": "@@ -383,19 +383,19 @@ LLVMInitializeInstCombine\n LLVMInitializeScalarOpts\n LLVMInitializeTarget\n LLVMInitializeTransformUtils\n+LLVMInitializeARMAsmLexer\n LLVMInitializeX86AsmLexer\n-LLVMInitializeX86AsmLexer\n-LLVMInitializeX86AsmParser\n+LLVMInitializeARMAsmParser\n LLVMInitializeX86AsmParser\n+LLVMInitializeARMAsmPrinter\n LLVMInitializeX86AsmPrinter\n-LLVMInitializeX86AsmPrinter\n-LLVMInitializeX86Disassembler\n+LLVMInitializeARMDisassembler\n LLVMInitializeX86Disassembler\n+LLVMInitializeARMTarget\n LLVMInitializeX86Target\n-LLVMInitializeX86Target\n-LLVMInitializeX86TargetMC\n+LLVMInitializeARMTargetMC\n LLVMInitializeX86TargetMC\n-LLVMInitializeX86TargetInfo\n+LLVMInitializeARMTargetInfo\n LLVMInitializeX86TargetInfo\n LLVMInsertBasicBlock\n LLVMInsertBasicBlockInContext"}]}