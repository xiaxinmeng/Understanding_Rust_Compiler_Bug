{"sha": "a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTBhOTNiZjVkMDIxN2U2ZjM2NmZmYzkxY2E4YjI1YmZkMzdiZTQ=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:21:31Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-02-24T18:21:31Z"}, "message": "move res completion to presentation", "tree": {"sha": "9d67a5e40ab57f5ed4b619455a6105d586a7eeca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d67a5e40ab57f5ed4b619455a6105d586a7eeca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "html_url": "https://github.com/rust-lang/rust/commit/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/2369af8c829c187aa8c734f4f6b1d6fd452a41ff", "html_url": "https://github.com/rust-lang/rust/commit/2369af8c829c187aa8c734f4f6b1d6fd452a41ff"}], "stats": {"total": 83, "additions": 42, "deletions": 41}, "files": [{"sha": "8e453b0e0e3c762704764e11d439d82bfd973fda", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 5, "deletions": 34, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "patch": "@@ -1,8 +1,8 @@\n use hir::Resolution;\n-use ra_syntax::{AstNode, ast::NameOwner};\n+use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n-use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{Completions, CompletionContext};\n \n pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n     let path = match &ctx.path_prefix {\n@@ -27,14 +27,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                         }\n                     }\n                 }\n-\n-                CompletionItem::new(\n-                    CompletionKind::Reference,\n-                    ctx.source_range(),\n-                    name.to_string(),\n-                )\n-                .from_resolution(ctx, &res.def.map(hir::Resolution::Def))\n-                .add_to(acc);\n+                acc.add_resolution(ctx, name.to_string(), &res.def.map(hir::Resolution::Def));\n             }\n         }\n         hir::ModuleDef::Enum(e) => {\n@@ -52,30 +45,8 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                             acc.add_function(ctx, func);\n                         }\n                     }\n-                    hir::ImplItem::Const(ct) => {\n-                        let source = ct.source(ctx.db);\n-                        if let Some(name) = source.1.name() {\n-                            CompletionItem::new(\n-                                CompletionKind::Reference,\n-                                ctx.source_range(),\n-                                name.text().to_string(),\n-                            )\n-                            .from_const(ctx, ct)\n-                            .add_to(acc);\n-                        }\n-                    }\n-                    hir::ImplItem::Type(ty) => {\n-                        let source = ty.source(ctx.db);\n-                        if let Some(name) = source.1.name() {\n-                            CompletionItem::new(\n-                                CompletionKind::Reference,\n-                                ctx.source_range(),\n-                                name.text().to_string(),\n-                            )\n-                            .from_type(ctx, ty)\n-                            .add_to(acc);\n-                        }\n-                    }\n+                    hir::ImplItem::Const(ct) => acc.add_const(ctx, ct),\n+                    hir::ImplItem::Type(ty) => acc.add_type(ctx, ty),\n                 }\n                 None::<()>\n             });"}, {"sha": "b44b943ae912b7f7da3338b37bbc023cdef67ca6", "filename": "crates/ra_ide_api/src/completion/complete_scope.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_scope.rs?ref=a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "patch": "@@ -1,16 +1,12 @@\n-use crate::completion::{CompletionItem, Completions, CompletionKind, CompletionContext};\n+use crate::completion::{Completions, CompletionContext};\n \n pub(super) fn complete_scope(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.is_trivial_path {\n         return;\n     }\n     let names = ctx.resolver.all_names(ctx.db);\n \n-    names.into_iter().for_each(|(name, res)| {\n-        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.to_string())\n-            .from_resolution(ctx, &res)\n-            .add_to(acc)\n-    });\n+    names.into_iter().for_each(|(name, res)| acc.add_resolution(ctx, name.to_string(), &res));\n }\n \n #[cfg(test)]"}, {"sha": "232ec80cd543b1cc70239c13a2e1d1e8f9d67e5b", "filename": "crates/ra_ide_api/src/completion/presentation.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a650a93bf5d0217e6f366ffc91ca8b25bfd37be4/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=a650a93bf5d0217e6f366ffc91ca8b25bfd37be4", "patch": "@@ -1,7 +1,8 @@\n //! This modules takes care of rendering various defenitions as completion items.\n use join_to_string::join;\n use test_utils::tested_by;\n-use hir::Docs;\n+use hir::{Docs, PerNs, Resolution};\n+use ra_syntax::ast::NameOwner;\n \n use crate::completion::{\n     Completions, CompletionKind, CompletionItemKind, CompletionContext, CompletionItem,\n@@ -33,6 +34,17 @@ impl Completions {\n             .add_to(self);\n     }\n \n+    pub(crate) fn add_resolution(\n+        &mut self,\n+        ctx: &CompletionContext,\n+        local_name: String,\n+        res: &PerNs<Resolution>,\n+    ) {\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), local_name)\n+            .from_resolution(ctx, res)\n+            .add_to(self);\n+    }\n+\n     pub(crate) fn add_function(&mut self, ctx: &CompletionContext, func: hir::Function) {\n         let sig = func.signature(ctx.db);\n \n@@ -62,6 +74,28 @@ impl Completions {\n         self.add(builder)\n     }\n \n+    pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n+        let (_file_id, cosnt_def) = constant.source(ctx.db);\n+        let name = match cosnt_def.name() {\n+            Some(name) => name,\n+            _ => return,\n+        };\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n+            .from_const(ctx, constant)\n+            .add_to(self);\n+    }\n+\n+    pub(crate) fn add_type(&mut self, ctx: &CompletionContext, type_alias: hir::Type) {\n+        let (_file_id, type_def) = type_alias.source(ctx.db);\n+        let name = match type_def.name() {\n+            Some(name) => name,\n+            _ => return,\n+        };\n+        CompletionItem::new(CompletionKind::Reference, ctx.source_range(), name.text().to_string())\n+            .from_type(ctx, type_alias)\n+            .add_to(self);\n+    }\n+\n     pub(crate) fn add_enum_variant(&mut self, ctx: &CompletionContext, variant: hir::EnumVariant) {\n         let name = match variant.name(ctx.db) {\n             Some(it) => it,"}]}