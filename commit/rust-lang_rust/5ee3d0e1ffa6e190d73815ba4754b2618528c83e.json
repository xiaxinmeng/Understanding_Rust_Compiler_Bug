{"sha": "5ee3d0e1ffa6e190d73815ba4754b2618528c83e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlZTNkMGUxZmZhNmUxOTBkNzM4MTViYTQ3NTRiMjYxODUyOGM4M2U=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-24T02:01:33Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-25T08:18:10Z"}, "message": "rustdoc: Inline reexported modules", "tree": {"sha": "f93f663d0b488186126936b517e8213cfd57221a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f93f663d0b488186126936b517e8213cfd57221a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ee3d0e1ffa6e190d73815ba4754b2618528c83e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ee3d0e1ffa6e190d73815ba4754b2618528c83e", "html_url": "https://github.com/rust-lang/rust/commit/5ee3d0e1ffa6e190d73815ba4754b2618528c83e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ee3d0e1ffa6e190d73815ba4754b2618528c83e/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9181c35ee925240fc129d77695e3f88c6d5f0f2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9181c35ee925240fc129d77695e3f88c6d5f0f2b", "html_url": "https://github.com/rust-lang/rust/commit/9181c35ee925240fc129d77695e3f88c6d5f0f2b"}], "stats": {"total": 27, "additions": 27, "deletions": 0}, "files": [{"sha": "a78e9d1d1fb0c4c4f037974f6b2598034d748a0f", "filename": "src/librustdoc/clean.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5ee3d0e1ffa6e190d73815ba4754b2618528c83e/src%2Flibrustdoc%2Fclean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ee3d0e1ffa6e190d73815ba4754b2618528c83e/src%2Flibrustdoc%2Fclean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean.rs?ref=5ee3d0e1ffa6e190d73815ba4754b2618528c83e", "patch": "@@ -1575,8 +1575,12 @@ fn try_inline(id: ast::NodeId) -> Option<Vec<Item>> {\n     };\n     let did = ast_util::def_id_of_def(def);\n     if ast_util::is_local(did) { return None }\n+    try_inline_def(tcx, def)\n+}\n \n+fn try_inline_def(tcx: &ty::ctxt, def: ast::Def) -> Option<Vec<Item>> {\n     let mut ret = Vec::new();\n+    let did = ast_util::def_id_of_def(def);\n     let inner = match def {\n         ast::DefTrait(did) => TraitItem(build_external_trait(tcx, did)),\n         ast::DefFn(did, style) =>\n@@ -1592,6 +1596,7 @@ fn try_inline(id: ast::NodeId) -> Option<Vec<Item>> {\n         // Assume that the enum type is reexported next to the variant, and\n         // variants don't show up in documentation specially.\n         ast::DefVariant(..) => return Some(Vec::new()),\n+        ast::DefMod(did) => ModuleItem(build_module(tcx, did)),\n         _ => return None,\n     };\n     let fqn = csearch::get_item_path(tcx, did);\n@@ -1995,6 +2000,28 @@ fn build_impl(tcx: &ty::ctxt, did: ast::DefId) -> Item {\n     }\n }\n \n+fn build_module(tcx: &ty::ctxt, did: ast::DefId) -> Module {\n+    let mut items = Vec::new();\n+\n+    csearch::each_child_of_item(&tcx.sess.cstore, did, |def, _, _| {\n+        match def {\n+            decoder::DlDef(def) => {\n+                match try_inline_def(tcx, def) {\n+                    Some(i) => items.extend(i.move_iter()),\n+                    None => {}\n+                }\n+            }\n+            decoder::DlImpl(did) => items.push(build_impl(tcx, did)),\n+            decoder::DlField => fail!(\"unimplemented field\"),\n+        }\n+    });\n+\n+    Module {\n+        items: items,\n+        is_crate: false,\n+    }\n+}\n+\n fn resolve_use_source(path: Path, id: ast::NodeId) -> ImportSource {\n     ImportSource {\n         path: path,"}]}