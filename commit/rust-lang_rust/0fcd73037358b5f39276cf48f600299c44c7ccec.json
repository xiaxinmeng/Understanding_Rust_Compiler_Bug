{"sha": "0fcd73037358b5f39276cf48f600299c44c7ccec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmY2Q3MzAzNzM1OGI1ZjM5Mjc2Y2Y0OGY2MDAyOTljNDRjN2NjZWM=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-02T19:24:40Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2014-12-13T22:03:44Z"}, "message": "librustrt: fix fallout", "tree": {"sha": "96eacd812254bbd75f09978ffc272a43f869dd62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96eacd812254bbd75f09978ffc272a43f869dd62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0fcd73037358b5f39276cf48f600299c44c7ccec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0fcd73037358b5f39276cf48f600299c44c7ccec", "html_url": "https://github.com/rust-lang/rust/commit/0fcd73037358b5f39276cf48f600299c44c7ccec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0fcd73037358b5f39276cf48f600299c44c7ccec/comments", "author": null, "committer": null, "parents": [{"sha": "f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "url": "https://api.github.com/repos/rust-lang/rust/commits/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88", "html_url": "https://github.com/rust-lang/rust/commit/f91d87e6a03f4e64034ee8fa073ac8d47e71dc88"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "c2ee91d6acca281943ef94b31aa28805558bdda6", "filename": "src/librustrt/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0fcd73037358b5f39276cf48f600299c44c7ccec/src%2Flibrustrt%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcd73037358b5f39276cf48f600299c44c7ccec/src%2Flibrustrt%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Flib.rs?ref=0fcd73037358b5f39276cf48f600299c44c7ccec", "patch": "@@ -19,6 +19,7 @@\n #![feature(macro_rules, phase, globs, thread_local, asm)]\n #![feature(linkage, lang_items, unsafe_destructor, default_type_params)]\n #![feature(import_shadowing, slicing_syntax)]\n+#![feature(unboxed_closures)]\n #![no_std]\n #![experimental]\n "}, {"sha": "7e657d3aef39197c27a0a0da77218026d7c70497", "filename": "src/librustrt/task.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0fcd73037358b5f39276cf48f600299c44c7ccec/src%2Flibrustrt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0fcd73037358b5f39276cf48f600299c44c7ccec/src%2Flibrustrt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustrt%2Ftask.rs?ref=0fcd73037358b5f39276cf48f600299c44c7ccec", "patch": "@@ -22,6 +22,7 @@ use core::atomic::{AtomicUint, SeqCst};\n use core::iter::{IteratorExt, Take};\n use core::kinds::marker;\n use core::mem;\n+use core::ops::FnMut;\n use core::prelude::{Clone, Drop, Err, Iterator, None, Ok, Option, Send, Some};\n use core::prelude::{drop};\n \n@@ -297,9 +298,9 @@ impl Task {\n     // `awoken` field which indicates whether we were actually woken up via some\n     // invocation of `reawaken`. This flag is only ever accessed inside the\n     // lock, so there's no need to make it atomic.\n-    pub fn deschedule(mut self: Box<Task>,\n-                      times: uint,\n-                      f: |BlockedTask| -> ::core::result::Result<(), BlockedTask>) {\n+    pub fn deschedule<F>(mut self: Box<Task>, times: uint, mut f: F) where\n+        F: FnMut(BlockedTask) -> ::core::result::Result<(), BlockedTask>,\n+    {\n         unsafe {\n             let me = &mut *self as *mut Task;\n             let task = BlockedTask::block(self);"}]}