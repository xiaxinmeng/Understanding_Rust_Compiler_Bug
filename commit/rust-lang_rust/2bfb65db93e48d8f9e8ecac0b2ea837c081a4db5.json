{"sha": "2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJiZmI2NWRiOTNlNDhkOGY5ZThlY2FjMGIyZWE4MzdjMDgxYTRkYjU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:40:43Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-04-09T16:48:13Z"}, "message": "Be consistent about token accesors", "tree": {"sha": "8a518f7fadab6918dea225122a69c8fd040e0fc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a518f7fadab6918dea225122a69c8fd040e0fc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "html_url": "https://github.com/rust-lang/rust/commit/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e6d22187a67e762bb950de244a6ca15f3a0b0731", "url": "https://api.github.com/repos/rust-lang/rust/commits/e6d22187a67e762bb950de244a6ca15f3a0b0731", "html_url": "https://github.com/rust-lang/rust/commit/e6d22187a67e762bb950de244a6ca15f3a0b0731"}], "stats": {"total": 150, "additions": 36, "deletions": 114}, "files": [{"sha": "b9eb0967652f15ed5747383cdc26c5de6dfa49fc", "filename": "crates/ra_assists/src/handlers/inline_local_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Finline_local_variable.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -29,7 +29,7 @@ pub(crate) fn inline_local_variable(ctx: AssistCtx) -> Option<Assist> {\n         ast::Pat::BindPat(pat) => pat,\n         _ => return None,\n     };\n-    if bind_pat.is_mutable() {\n+    if bind_pat.mut_kw_token().is_some() {\n         tested_by!(test_not_inline_mut_variable);\n         return None;\n     }"}, {"sha": "ab6bdf6bbdf88df49aa4c67e7a5e24d9c285dee6", "filename": "crates/ra_assists/src/handlers/introduce_variable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fintroduce_variable.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn introduce_variable(ctx: AssistCtx) -> Option<Assist> {\n         };\n         if is_full_stmt {\n             tested_by!(test_introduce_var_expr_stmt);\n-            if !full_stmt.unwrap().has_semi() {\n+            if full_stmt.unwrap().semi_token().is_none() {\n                 buf.push_str(\";\");\n             }\n             edit.replace(expr.syntax().text_range(), buf);"}, {"sha": "c4a5ec59cbb258f4ed5176b7b7dd053137cc740e", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -572,7 +572,10 @@ impl ExprCollector<'_> {\n         let pattern = match &pat {\n             ast::Pat::BindPat(bp) => {\n                 let name = bp.name().map(|nr| nr.as_name()).unwrap_or_else(Name::missing);\n-                let annotation = BindingAnnotation::new(bp.is_mutable(), bp.is_ref());\n+                let annotation = BindingAnnotation::new(\n+                    bp.mut_kw_token().is_some(),\n+                    bp.ref_kw_token().is_some(),\n+                );\n                 let subpat = bp.pat().map(|subpat| self.collect_pat(subpat));\n                 if annotation == BindingAnnotation::Unannotated && subpat.is_none() {\n                     // This could also be a single-segment path pattern. To\n@@ -613,7 +616,7 @@ impl ExprCollector<'_> {\n             }\n             ast::Pat::RefPat(p) => {\n                 let pat = self.collect_pat_opt(p.pat());\n-                let mutability = Mutability::from_mutable(p.is_mut());\n+                let mutability = Mutability::from_mutable(p.mut_kw_token().is_some());\n                 Pat::Ref { pat, mutability }\n             }\n             ast::Pat::PathPat(p) => {"}, {"sha": "689bb6c5c2f8afbaaa69418e02fc481bd560e0ba", "filename": "crates/ra_hir_def/src/data.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fdata.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -75,7 +75,7 @@ impl FunctionData {\n             TypeRef::unit()\n         };\n \n-        let ret_type = if src.value.is_async() {\n+        let ret_type = if src.value.async_kw_token().is_some() {\n             let future_impl = desugar_future_path(ret_type);\n             let ty_bound = TypeBound::Path(future_impl);\n             TypeRef::ImplTrait(vec![ty_bound])\n@@ -136,7 +136,7 @@ impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n         let src = tr.lookup(db).source(db);\n         let name = src.value.name().map_or_else(Name::missing, |n| n.as_name());\n-        let auto = src.value.is_auto();\n+        let auto = src.value.auto_kw_token().is_some();\n         let ast_id_map = db.ast_id_map(src.file_id);\n \n         let container = AssocContainerId::TraitId(tr);\n@@ -213,7 +213,7 @@ impl ImplData {\n \n         let target_trait = src.value.target_trait().map(TypeRef::from_ast);\n         let target_type = TypeRef::from_ast_opt(src.value.target_type());\n-        let is_negative = src.value.is_negative();\n+        let is_negative = src.value.excl_token().is_some();\n         let module_id = impl_loc.container.module(db);\n \n         let mut items = Vec::new();"}, {"sha": "d850244c4a1f512f3b4272bd6a1b9fad6680fc89", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -194,7 +194,7 @@ impl GenericParams {\n     }\n \n     fn add_where_predicate_from_bound(&mut self, bound: ast::TypeBound, type_ref: TypeRef) {\n-        if bound.has_question_mark() {\n+        if bound.question_token().is_some() {\n             // FIXME: remove this bound\n             return;\n         }"}, {"sha": "e72ba52cfb37a0144da0809221ac6298947fa96b", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -287,7 +287,7 @@ impl RawItemsCollector {\n         let visibility = RawVisibility::from_ast_with_hygiene(module.visibility(), &self.hygiene);\n \n         let ast_id = self.source_ast_id_map.ast_id(&module);\n-        if module.has_semi() {\n+        if module.semi_token().is_some() {\n             let item =\n                 self.raw_items.modules.alloc(ModuleData::Declaration { name, visibility, ast_id });\n             self.push_item(current_module, attrs, RawItemKind::Module(item));"}, {"sha": "7a8338937429295e0e3081f60b9528b9eb26debe", "filename": "crates/ra_hir_def/src/type_ref.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftype_ref.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -77,7 +77,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::PointerType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n+                let mutability = Mutability::from_mutable(inner.mut_kw_token().is_some());\n                 TypeRef::RawPtr(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::ArrayType(inner) => {\n@@ -88,7 +88,7 @@ impl TypeRef {\n             }\n             ast::TypeRef::ReferenceType(inner) => {\n                 let inner_ty = TypeRef::from_ast_opt(inner.type_ref());\n-                let mutability = Mutability::from_mutable(inner.is_mut());\n+                let mutability = Mutability::from_mutable(inner.mut_kw_token().is_some());\n                 TypeRef::Reference(Box::new(inner_ty), mutability)\n             }\n             ast::TypeRef::PlaceholderType(_inner) => TypeRef::Placeholder,"}, {"sha": "0e34d85dbd7ea2ef71cf77f8fc68bae3f86cf67d", "filename": "crates/ra_ide/src/completion/completion_context.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_context.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -190,7 +190,10 @@ impl<'a> CompletionContext<'a> {\n         if let Some(name) = find_node_at_offset::<ast::Name>(&file_with_fake_ident, offset) {\n             if let Some(bind_pat) = name.syntax().ancestors().find_map(ast::BindPat::cast) {\n                 self.is_pat_binding_or_const = true;\n-                if bind_pat.has_at() || bind_pat.is_ref() || bind_pat.is_mutable() {\n+                if bind_pat.at_token().is_some()\n+                    || bind_pat.ref_kw_token().is_some()\n+                    || bind_pat.mut_kw_token().is_some()\n+                {\n                     self.is_pat_binding_or_const = false;\n                 }\n                 if bind_pat.syntax().parent().and_then(ast::RecordFieldPatList::cast).is_some() {"}, {"sha": "ad6fd50aa0a50341857c8064452a99f6bd30d690", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -152,7 +152,7 @@ fn decl_access(def: &Definition, syntax: &SyntaxNode, range: TextRange) -> Optio\n     if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n         if let ast::Pat::BindPat(it) = pat {\n-            if it.is_mutable() {\n+            if it.mut_kw_token().is_some() {\n                 return Some(ReferenceAccess::Write);\n             }\n         }"}, {"sha": "71d2bcb045dcbfb7a9584d1fabc81993171e24cc", "filename": "crates/ra_ide/src/typing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_ide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Ftyping.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -63,7 +63,7 @@ fn on_char_typed_inner(\n fn on_eq_typed(file: &SourceFile, offset: TextUnit) -> Option<SingleFileChange> {\n     assert_eq!(file.syntax().text().char_at(offset), Some('='));\n     let let_stmt: ast::LetStmt = find_node_at_offset(file.syntax(), offset)?;\n-    if let_stmt.has_semi() {\n+    if let_stmt.semi_token().is_some() {\n         return None;\n     }\n     if let Some(expr) = let_stmt.initializer() {"}, {"sha": "069c6ee82a15af3c85c588a259c88e23e04f4220", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -33,9 +33,9 @@ impl ast::FnDef {\n         let mut to_insert: ArrayVec<[SyntaxElement; 2]> = ArrayVec::new();\n         let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n             old_body.syntax().clone().into()\n-        } else if let Some(semi) = self.semicolon_token() {\n+        } else if let Some(semi) = self.semi_token() {\n             to_insert.push(make::tokens::single_space().into());\n-            semi.into()\n+            semi.syntax.clone().into()\n         } else {\n             to_insert.push(make::tokens::single_space().into());\n             to_insert.push(body.syntax().clone().into());"}, {"sha": "b50a89864eff4d8dc8bc3a644370ed84ee58f1ec", "filename": "crates/ra_syntax/src/ast/extensions.rs", "status": "modified", "additions": 8, "deletions": 96, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fextensions.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -136,12 +136,6 @@ impl ast::Path {\n     }\n }\n \n-impl ast::Module {\n-    pub fn has_semi(&self) -> bool {\n-        self.semi_token().is_some()\n-    }\n-}\n-\n impl ast::UseTreeList {\n     pub fn parent_use_tree(&self) -> ast::UseTree {\n         self.syntax()\n@@ -172,10 +166,6 @@ impl ast::ImplDef {\n         let second = types.next();\n         (first, second)\n     }\n-\n-    pub fn is_negative(&self) -> bool {\n-        self.excl_token().is_some()\n-    }\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n@@ -216,31 +206,6 @@ impl ast::EnumVariant {\n     }\n }\n \n-impl ast::FnDef {\n-    pub fn semicolon_token(&self) -> Option<SyntaxToken> {\n-        Some(self.semi_token()?.syntax().clone())\n-    }\n-\n-    pub fn is_async(&self) -> bool {\n-        self.async_kw_token().is_some()\n-    }\n-}\n-\n-impl ast::LetStmt {\n-    pub fn has_semi(&self) -> bool {\n-        match self.syntax().last_child_or_token() {\n-            None => false,\n-            Some(node) => node.kind() == T![;],\n-        }\n-    }\n-}\n-\n-impl ast::ExprStmt {\n-    pub fn has_semi(&self) -> bool {\n-        self.semi_token().is_some()\n-    }\n-}\n-\n #[derive(Debug, Clone, PartialEq, Eq)]\n pub enum FieldKind {\n     Name(ast::NameRef),\n@@ -269,25 +234,6 @@ impl ast::FieldExpr {\n     }\n }\n \n-impl ast::RefPat {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n-impl ast::BindPat {\n-    pub fn is_mutable(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-\n-    pub fn is_ref(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![ref])\n-    }\n-    pub fn has_at(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![@])\n-    }\n-}\n-\n pub struct SlicePatComponents {\n     pub prefix: Vec<ast::Pat>,\n     pub slice: Option<ast::Pat>,\n@@ -322,18 +268,6 @@ impl ast::SlicePat {\n     }\n }\n \n-impl ast::PointerType {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n-impl ast::ReferenceType {\n-    pub fn is_mut(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|n| n.kind() == T![mut])\n-    }\n-}\n-\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash)]\n pub enum SelfParamKind {\n     /// self\n@@ -347,7 +281,7 @@ pub enum SelfParamKind {\n impl ast::SelfParam {\n     pub fn kind(&self) -> SelfParamKind {\n         if self.amp_token().is_some() {\n-            if self.amp_mut_kw().is_some() {\n+            if self.amp_mut_kw_token().is_some() {\n                 SelfParamKind::MutRef\n             } else {\n                 SelfParamKind::Ref\n@@ -358,7 +292,7 @@ impl ast::SelfParam {\n     }\n \n     /// the \"mut\" in \"mut self\", not the one in \"&mut self\"\n-    pub fn mut_kw(&self) -> Option<ast::MutKw> {\n+    pub fn mut_kw_token(&self) -> Option<ast::MutKw> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n@@ -367,7 +301,7 @@ impl ast::SelfParam {\n     }\n \n     /// the \"mut\" in \"&mut self\", not the one in \"mut self\"\n-    pub fn amp_mut_kw(&self) -> Option<ast::MutKw> {\n+    pub fn amp_mut_kw_token(&self) -> Option<ast::MutKw> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n@@ -399,19 +333,15 @@ impl ast::TypeBound {\n         }\n     }\n \n-    pub fn has_question_mark(&self) -> bool {\n-        self.question().is_some()\n-    }\n-\n-    pub fn const_question(&self) -> Option<ast::Question> {\n+    pub fn const_question_token(&self) -> Option<ast::Question> {\n         self.syntax()\n             .children_with_tokens()\n             .filter_map(|it| it.into_token())\n             .take_while(|it| it.kind() != T![const])\n             .find_map(ast::Question::cast)\n     }\n \n-    pub fn question(&self) -> Option<ast::Question> {\n+    pub fn question_token(&self) -> Option<ast::Question> {\n         if self.const_kw_token().is_some() {\n             self.syntax()\n                 .children_with_tokens()\n@@ -424,12 +354,6 @@ impl ast::TypeBound {\n     }\n }\n \n-impl ast::TraitDef {\n-    pub fn is_auto(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|t| t.kind() == T![auto])\n-    }\n-}\n-\n pub enum VisibilityKind {\n     In(ast::Path),\n     PubCrate,\n@@ -442,28 +366,16 @@ impl ast::Visibility {\n     pub fn kind(&self) -> VisibilityKind {\n         if let Some(path) = children(self).next() {\n             VisibilityKind::In(path)\n-        } else if self.is_pub_crate() {\n+        } else if self.crate_kw_token().is_some() {\n             VisibilityKind::PubCrate\n-        } else if self.is_pub_super() {\n+        } else if self.super_kw_token().is_some() {\n             VisibilityKind::PubSuper\n-        } else if self.is_pub_self() {\n+        } else if self.self_kw_token().is_some() {\n             VisibilityKind::PubSuper\n         } else {\n             VisibilityKind::Pub\n         }\n     }\n-\n-    fn is_pub_crate(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![crate])\n-    }\n-\n-    fn is_pub_super(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![super])\n-    }\n-\n-    fn is_pub_self(&self) -> bool {\n-        self.syntax().children_with_tokens().any(|it| it.kind() == T![self])\n-    }\n }\n \n impl ast::MacroCall {"}, {"sha": "bcbfd1129df572b089e23f461e9946105321572b", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -555,6 +555,7 @@ impl AstNode for PointerType {\n impl PointerType {\n     pub fn star_token(&self) -> Option<Star> { support::token(&self.syntax) }\n     pub fn const_kw_token(&self) -> Option<ConstKw> { support::token(&self.syntax) }\n+    pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n     pub fn type_ref(&self) -> Option<TypeRef> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1532,6 +1533,7 @@ impl ast::NameOwner for BindPat {}\n impl BindPat {\n     pub fn ref_kw_token(&self) -> Option<RefKw> { support::token(&self.syntax) }\n     pub fn mut_kw_token(&self) -> Option<MutKw> { support::token(&self.syntax) }\n+    pub fn at_token(&self) -> Option<At> { support::token(&self.syntax) }\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -2114,6 +2116,7 @@ impl LetStmt {\n     pub fn pat(&self) -> Option<Pat> { support::child(&self.syntax) }\n     pub fn eq_token(&self) -> Option<Eq> { support::token(&self.syntax) }\n     pub fn initializer(&self) -> Option<Expr> { support::child(&self.syntax) }\n+    pub fn semi_token(&self) -> Option<Semi> { support::token(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Condition {"}, {"sha": "74a87e9009b39274b8edf8dbf24e13da2395c92f", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=2bfb65db93e48d8f9e8ecac0b2ea837c081a4db5", "patch": "@@ -408,7 +408,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct TupleType { LParen, fields: [TypeRef], RParen }\n         struct NeverType { Excl }\n         struct PathType { Path }\n-        struct PointerType { Star, ConstKw, TypeRef }\n+        struct PointerType { Star, ConstKw, MutKw, TypeRef }\n         struct ArrayType { LBrack, TypeRef, Semi, Expr, RBrack }\n         struct SliceType { LBrack, TypeRef, RBrack }\n         struct ReferenceType { Amp, Lifetime, MutKw, TypeRef }\n@@ -485,7 +485,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n         struct ParenPat { LParen, Pat, RParen }\n         struct RefPat { Amp, MutKw, Pat }\n         struct BoxPat { BoxKw, Pat }\n-        struct BindPat: AttrsOwner, NameOwner { RefKw, MutKw, Pat }\n+        struct BindPat: AttrsOwner, NameOwner { RefKw, MutKw, At, Pat }\n         struct PlaceholderPat { Underscore }\n         struct DotDotPat { Dotdot }\n         struct PathPat { Path }\n@@ -545,6 +545,7 @@ pub(crate) const AST_SRC: AstSrc = AstSrc {\n             Pat,\n             Eq,\n             initializer: Expr,\n+            Semi,\n         }\n         struct Condition { LetKw, Pat, Eq, Expr }\n         struct Block: AttrsOwner, ModuleItemOwner {"}]}