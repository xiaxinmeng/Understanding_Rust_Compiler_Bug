{"sha": "ba8750a5503242828ca0d95177196ebe6d7cbf51", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJhODc1MGE1NTAzMjQyODI4Y2EwZDk1MTc3MTk2ZWJlNmQ3Y2JmNTE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-25T02:51:03Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-09-25T02:51:03Z"}, "message": "tutorial: Merge discussion of patterns and let bindings", "tree": {"sha": "2f7d06d9733524c2d6992b7510692b4921126b66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2f7d06d9733524c2d6992b7510692b4921126b66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ba8750a5503242828ca0d95177196ebe6d7cbf51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ba8750a5503242828ca0d95177196ebe6d7cbf51", "html_url": "https://github.com/rust-lang/rust/commit/ba8750a5503242828ca0d95177196ebe6d7cbf51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ba8750a5503242828ca0d95177196ebe6d7cbf51/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8406e3d00ca791317f85d369e6157e4b5a2cf90", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8406e3d00ca791317f85d369e6157e4b5a2cf90", "html_url": "https://github.com/rust-lang/rust/commit/a8406e3d00ca791317f85d369e6157e4b5a2cf90"}], "stats": {"total": 20, "additions": 8, "deletions": 12}, "files": [{"sha": "bf774a19ace3da52e1d689b5bece7e94a098dc5b", "filename": "doc/tutorial.md", "status": "modified", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ba8750a5503242828ca0d95177196ebe6d7cbf51/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/ba8750a5503242828ca0d95177196ebe6d7cbf51/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=ba8750a5503242828ca0d95177196ebe6d7cbf51", "patch": "@@ -580,8 +580,8 @@ you use the matching to get at the contents of data types. Remember\n that `(float, float)` is a tuple of two floats:\n \n ~~~~\n-use float::consts::pi;\n fn angle(vector: (float, float)) -> float {\n+    let pi = float::consts::pi;\n     match vector {\n       (0f, y) if y < 0f => 1.5 * pi,\n       (0f, y) => 0.5 * pi,\n@@ -601,23 +601,19 @@ an expression of type `bool` that determines, after the pattern is\n found to match, whether the arm is taken or not. The variables bound\n by the pattern are available in this guard expression.\n \n-## Let\n-\n-You've already seen simple `let` bindings. `let` is also a little fancier: it\n-is possible to use destructuring patterns in it. For example, you can say this\n-to extract the fields from a tuple:\n+You've already seen simple `let` bindings, but `let` is a little\n+fancier than you've been led to believe. It too supports destructuring\n+patterns. For example, you can say this to extract the fields from a\n+tuple, introducing two variables, `a` and `b`.\n \n ~~~~\n # fn get_tuple_of_two_ints() -> (int, int) { (1, 1) }\n let (a, b) = get_tuple_of_two_ints();\n ~~~~\n \n-This will introduce two new variables, `a` and `b`, bound to the\n-content of the tuple.\n-\n-You may only use *irrefutable* patterns\u2014patterns that can never fail to\n-match\u2014in let bindings. Other types of patterns, such as literals, are\n-not allowed.\n+Let bindings only work with _irrefutable_ patterns, that is, patterns\n+that can never fail to match. This excludes `let` from matching\n+literals and most enum variants.\n \n ## Loops\n "}]}