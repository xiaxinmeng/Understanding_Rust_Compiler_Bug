{"sha": "743d6a413248a50bff762d1bfa46d31424be1b39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0M2Q2YTQxMzI0OGE1MGJmZjc2MmQxYmZhNDZkMzE0MjRiZTFiMzk=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-16T00:48:18Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2014-12-16T00:50:24Z"}, "message": "Review changes", "tree": {"sha": "07fd061f55c30ce357af394fa1f2e94cb4824cb2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07fd061f55c30ce357af394fa1f2e94cb4824cb2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/743d6a413248a50bff762d1bfa46d31424be1b39", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/743d6a413248a50bff762d1bfa46d31424be1b39", "html_url": "https://github.com/rust-lang/rust/commit/743d6a413248a50bff762d1bfa46d31424be1b39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/743d6a413248a50bff762d1bfa46d31424be1b39/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "65616644af943c6de7879d16799e5fb488055fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/65616644af943c6de7879d16799e5fb488055fd5", "html_url": "https://github.com/rust-lang/rust/commit/65616644af943c6de7879d16799e5fb488055fd5"}], "stats": {"total": 15, "additions": 7, "deletions": 8}, "files": [{"sha": "87eda76db29900353886e3d4c3f8e7195bdb35a5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 7, "deletions": 8, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/743d6a413248a50bff762d1bfa46d31424be1b39/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/743d6a413248a50bff762d1bfa46d31424be1b39/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=743d6a413248a50bff762d1bfa46d31424be1b39", "patch": "@@ -73,6 +73,11 @@ pub trait AstConv<'tcx> {\n     fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx>;\n     fn get_item_ty(&self, id: ast::DefId) -> ty::Polytype<'tcx>;\n     fn get_trait_def(&self, id: ast::DefId) -> Rc<ty::TraitDef<'tcx>>;\n+\n+    /// Return an (optional) substitution to convert bound type parameters that\n+    /// are in scope into free ones. This function should only return Some\n+    /// within a fn body.\n+    /// See ParameterEnvironment::free_substs for more information.\n     fn get_free_substs(&self) -> Option<&Substs<'tcx>> {\n         None\n     }\n@@ -1029,21 +1034,15 @@ pub fn ast_ty_to_ty<'tcx, AC: AstConv<'tcx>, RS: RegionScope>(\n                         // FIXME(#19541): in both branches we should consider\n                         // associated types in super-traits.\n                         let (assoc_tys, tp_name): (Vec<_>, _) = match typ {\n-                            def::TyParamProvenance::FromParam(did) => {\n+                            def::TyParamProvenance::FromParam(did) |\n+                            def::TyParamProvenance::FromSelf(did) => {\n                                 let ty_param_defs = tcx.ty_param_defs.borrow();\n                                 let tp_def = &(*ty_param_defs)[did.node];\n                                 let assoc_tys = tp_def.bounds.trait_bounds.iter()\n                                     .filter_map(|b| find_assoc_ty(this, &**b, assoc_ident))\n                                     .collect();\n                                 (assoc_tys, token::get_name(tp_def.name).to_string())\n                             }\n-                            def::TyParamProvenance::FromSelf(did) => {\n-                                let assoc_tys = find_assoc_ty(this,\n-                                                              &*this.get_trait_def(did).trait_ref,\n-                                                              assoc_ident)\n-                                    .into_iter().collect();\n-                                (assoc_tys, \"Self\".to_string())\n-                            }\n                         };\n \n                         if assoc_tys.len() == 0 {"}]}