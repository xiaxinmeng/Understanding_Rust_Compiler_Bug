{"sha": "207ebf13f12d8fa4449d66cd86407de03f264667", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwN2ViZjEzZjEyZDhmYTQ0NDlkNjZjZDg2NDA3ZGUwM2YyNjQ2Njc=", "commit": {"author": {"name": "Peter Marheine", "email": "peter@taricorp.net", "date": "2014-03-10T23:30:23Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-03-12T20:39:47Z"}, "message": "doc: discuss try! in std::io", "tree": {"sha": "19ea95c9b53353e2e997ac8bd4245916ea0273c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19ea95c9b53353e2e997ac8bd4245916ea0273c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207ebf13f12d8fa4449d66cd86407de03f264667", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207ebf13f12d8fa4449d66cd86407de03f264667", "html_url": "https://github.com/rust-lang/rust/commit/207ebf13f12d8fa4449d66cd86407de03f264667", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207ebf13f12d8fa4449d66cd86407de03f264667/comments", "author": {"login": "tari", "id": 506181, "node_id": "MDQ6VXNlcjUwNjE4MQ==", "avatar_url": "https://avatars.githubusercontent.com/u/506181?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tari", "html_url": "https://github.com/tari", "followers_url": "https://api.github.com/users/tari/followers", "following_url": "https://api.github.com/users/tari/following{/other_user}", "gists_url": "https://api.github.com/users/tari/gists{/gist_id}", "starred_url": "https://api.github.com/users/tari/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tari/subscriptions", "organizations_url": "https://api.github.com/users/tari/orgs", "repos_url": "https://api.github.com/users/tari/repos", "events_url": "https://api.github.com/users/tari/events{/privacy}", "received_events_url": "https://api.github.com/users/tari/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91bed14ca8085887a26d029d785d853ad2587718", "url": "https://api.github.com/repos/rust-lang/rust/commits/91bed14ca8085887a26d029d785d853ad2587718", "html_url": "https://github.com/rust-lang/rust/commit/91bed14ca8085887a26d029d785d853ad2587718"}], "stats": {"total": 34, "additions": 34, "deletions": 0}, "files": [{"sha": "1c10c7b61c364fb3c6f0591f6cf697a37609b7b0", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/207ebf13f12d8fa4449d66cd86407de03f264667/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207ebf13f12d8fa4449d66cd86407de03f264667/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=207ebf13f12d8fa4449d66cd86407de03f264667", "patch": "@@ -172,6 +172,40 @@ need to inspect or unwrap the `IoResult<File>` and we simply call `write_line`\n on it. If `new` returned an `Err(..)` then the followup call to `write_line`\n will also return an error.\n \n+## `try!`\n+\n+Explicit pattern matching on `IoResult`s can get quite verbose, especially\n+when performing many I/O operations. Some examples (like those above) are\n+alleviated with extra methods implemented on `IoResult`, but others have more\n+complex interdependencies among each I/O operation.\n+\n+The `try!` macro from `std::macros` is provided as a method of early-return\n+inside `Result`-returning functions. It expands to an early-return on `Err`\n+and otherwise unwraps the contained `Ok` value.\n+\n+If you wanted to read several `u32`s from a file and return their product:\n+\n+```rust\n+use std::io::{File, IoResult};\n+\n+fn file_product(p: &Path) -> IoResult<u32> {\n+    let mut f = File::open(p);\n+    let x1 = try!(f.read_le_u32());\n+    let x2 = try!(f.read_le_u32());\n+\n+    Ok(x1 * x2)\n+}\n+\n+match file_product(&Path::new(\"numbers.bin\")) {\n+    Ok(x) => println!(\"{}\", x),\n+    Err(e) => println!(\"Failed to read numbers!\")\n+}\n+```\n+\n+With `try!` in `file_product`, each `read_le_u32` need not be directly\n+concerned with error handling; instead its caller is responsible for\n+responding to errors that may occur while attempting to read the numbers.\n+\n */\n \n #[deny(unused_must_use)];"}]}