{"sha": "0caba178dfd5983403564de82a7d11184c7964e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBjYWJhMTc4ZGZkNTk4MzQwMzU2NGRlODJhN2QxMTE4NGM3OTY0ZTI=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-18T10:54:36Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-10-18T11:11:06Z"}, "message": "run EndRegion when unwinding otherwise-empty scopes\n\nImproves #44832\n\nborrowck-overloaded-index-move-index.rs - fixed\nborrowck-multiple-captures.rs - still ICE\nborrowck-issue-2657-1.rs - fixed\nborrowck-loan-blocks-move.rs - fixed\nborrowck-move-from-subpath-of-borrowed-path.rs - fixed\nborrowck-mut-borrow-linear-errors.rs - still ICE\nborrowck-no-cycle-in-exchange-heap.rs - fixed\nborrowck-unary-move.rs - fixed\nborrowck-loan-blocks-move-cc.rs - fixed\nborrowck-vec-pattern-element-loan.rs - still broken", "tree": {"sha": "b1bcba0b338aae080ded4cf0bfd53f958d278fe6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1bcba0b338aae080ded4cf0bfd53f958d278fe6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0caba178dfd5983403564de82a7d11184c7964e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0caba178dfd5983403564de82a7d11184c7964e2", "html_url": "https://github.com/rust-lang/rust/commit/0caba178dfd5983403564de82a7d11184c7964e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0caba178dfd5983403564de82a7d11184c7964e2/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946", "html_url": "https://github.com/rust-lang/rust/commit/a6ca84a38340bdbf3c02ba4c7970c9289e5bc946"}], "stats": {"total": 111, "additions": 66, "deletions": 45}, "files": [{"sha": "c0d17a1590f84e01b0ca429ecb79124e14f5f3a5", "filename": "src/librustc_mir/build/scope.rs", "status": "modified", "additions": 60, "deletions": 44, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0caba178dfd5983403564de82a7d11184c7964e2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0caba178dfd5983403564de82a7d11184c7964e2/src%2Flibrustc_mir%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fscope.rs?ref=0caba178dfd5983403564de82a7d11184c7964e2", "patch": "@@ -131,6 +131,9 @@ pub struct Scope<'tcx> {\n \n     /// The cache for drop chain on \"generator drop\" exit.\n     cached_generator_drop: Option<BasicBlock>,\n+\n+    /// The cache for drop chain on \"unwind\" exit.\n+    cached_unwind: CachedBlock,\n }\n \n #[derive(Debug)]\n@@ -233,8 +236,10 @@ impl<'tcx> Scope<'tcx> {\n         self.cached_exits.clear();\n \n         if !storage_only {\n-            // the current generator drop ignores storage but refers to top-of-scope\n+            // the current generator drop and unwind ignore\n+            // storage but refer to top-of-scope\n             self.cached_generator_drop = None;\n+            self.cached_unwind.invalidate();\n         }\n \n         if !storage_only && !this_scope_only {\n@@ -246,26 +251,6 @@ impl<'tcx> Scope<'tcx> {\n         }\n     }\n \n-    /// Returns the cached entrypoint for diverging exit from this scope.\n-    ///\n-    /// Precondition: the caches must be fully filled (i.e. diverge_cleanup is called) in order for\n-    /// this method to work correctly.\n-    fn cached_block(&self, generator_drop: bool) -> Option<BasicBlock> {\n-        let mut drops = self.drops.iter().rev().filter_map(|data| {\n-            match data.kind {\n-                DropKind::Value { cached_block } => {\n-                    Some(cached_block.get(generator_drop))\n-                }\n-                DropKind::Storage => None\n-            }\n-        });\n-        if let Some(cached_block) = drops.next() {\n-            Some(cached_block.expect(\"drop cache is not filled\"))\n-        } else {\n-            None\n-        }\n-    }\n-\n     /// Given a span and this scope's visibility scope, make a SourceInfo.\n     fn source_info(&self, span: Span) -> SourceInfo {\n         SourceInfo {\n@@ -374,7 +359,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             needs_cleanup: false,\n             drops: vec![],\n             cached_generator_drop: None,\n-            cached_exits: FxHashMap()\n+            cached_exits: FxHashMap(),\n+            cached_unwind: CachedBlock::default(),\n         });\n     }\n \n@@ -500,15 +486,16 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                    TerminatorKind::Goto { target: b });\n                 b\n             };\n+\n+            // End all regions for scopes out of which we are breaking.\n+            self.cfg.push_end_region(self.hir.tcx(), block, src_info, scope.region_scope);\n+\n             unpack!(block = build_scope_drops(&mut self.cfg,\n                                               scope,\n                                               rest,\n                                               block,\n                                               self.arg_count,\n                                               true));\n-\n-            // End all regions for scopes out of which we are breaking.\n-            self.cfg.push_end_region(self.hir.tcx(), block, src_info, scope.region_scope);\n         }\n \n         self.cfg.terminate(block, src_info, TerminatorKind::GeneratorDrop);\n@@ -841,23 +828,45 @@ fn build_scope_drops<'tcx>(cfg: &mut CFG<'tcx>,\n         let source_info = scope.source_info(drop_data.span);\n         match drop_data.kind {\n             DropKind::Value { .. } => {\n-                // Try to find the next block with its cached block\n-                // for us to diverge into in case the drop panics.\n+                // Try to find the next block with its cached block for us to\n+                // diverge into, either a previous block in this current scope or\n+                // the top of the previous scope.\n+                //\n+                // If it wasn't for EndRegion, we could just chain all the DropData\n+                // together and pick the first DropKind::Value. Please do that\n+                // when we replace EndRegion with NLL.\n                 let on_diverge = iter.clone().filter_map(|dd| {\n                     match dd.kind {\n                         DropKind::Value { cached_block } => Some(cached_block),\n                         DropKind::Storage => None\n                     }\n-                }).map(|cached_block| {\n-                    cached_block\n-                        .get(generator_drop)\n-                        .unwrap_or_else(|| span_bug!(drop_data.span, \"cached block not present?\"))\n-                }).next();\n-                // If there\u2019s no `cached_block`s within current scope,\n-                // we must look for one in the enclosing scope.\n-                let on_diverge = on_diverge.or_else(|| {\n-                    earlier_scopes.iter().rev().flat_map(|s| s.cached_block(generator_drop)).next()\n+                }).next().or_else(|| {\n+                    if earlier_scopes.iter().any(|scope| scope.needs_cleanup) {\n+                        // If *any* scope requires cleanup code to be run,\n+                        // we must use the cached unwind from the *topmost*\n+                        // scope, to ensure all EndRegions from surrounding\n+                        // scopes are executed before the drop code runs.\n+                        Some(earlier_scopes.last().unwrap().cached_unwind)\n+                    } else {\n+                        // We don't need any further cleanup, so return None\n+                        // to avoid creating a landing pad. We can skip\n+                        // EndRegions because all local regions end anyway\n+                        // when the function unwinds.\n+                        //\n+                        // This is an important optimization because LLVM is\n+                        // terrible at optimizing landing pads. FIXME: I think\n+                        // it would be cleaner and better to do this optimization\n+                        // in SimplifyCfg instead of here.\n+                        None\n+                    }\n+                });\n+\n+                let on_diverge = on_diverge.map(|cached_block| {\n+                    cached_block.get(generator_drop).unwrap_or_else(|| {\n+                        span_bug!(drop_data.span, \"cached block not present?\")\n+                    })\n                 });\n+\n                 let next = cfg.start_new_block();\n                 cfg.terminate(block, source_info, TerminatorKind::Drop {\n                     location: drop_data.location.clone(),\n@@ -948,14 +957,21 @@ fn build_diverge_scope<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         };\n     }\n \n-    // Finally, push the EndRegion block, used by mir-borrowck. (Block\n-    // becomes trivial goto after pass that removes all EndRegions.)\n-    {\n-        let block = cfg.start_new_cleanup_block();\n-        cfg.push_end_region(tcx, block, source_info(span), scope.region_scope);\n-        cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n-        target = block\n-    }\n+    // Finally, push the EndRegion block, used by mir-borrowck, and set\n+    // `cached_unwind` to point to it (Block becomes trivial goto after\n+    // pass that removes all EndRegions).\n+    target = {\n+        let cached_block = scope.cached_unwind.ref_mut(generator_drop);\n+        if let Some(cached_block) = *cached_block {\n+            cached_block\n+        } else {\n+            let block = cfg.start_new_cleanup_block();\n+            cfg.push_end_region(tcx, block, source_info(span), scope.region_scope);\n+            cfg.terminate(block, source_info(span), TerminatorKind::Goto { target: target });\n+            *cached_block = Some(block);\n+            block\n+        }\n+    };\n \n     debug!(\"build_diverge_scope({:?}, {:?}) = {:?}\", scope, span, target);\n "}, {"sha": "6cab5a8bf6026d0d28aaa43ac38a027b7b35fb4e", "filename": "src/test/compile-fail/borrowck/borrowck-unary-move.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0caba178dfd5983403564de82a7d11184c7964e2/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0caba178dfd5983403564de82a7d11184c7964e2/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-unary-move.rs?ref=0caba178dfd5983403564de82a7d11184c7964e2", "patch": "@@ -8,10 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+// ignore-tidy-linelength\n+// revisions: ast mir\n+//[mir]compile-flags: -Z emit-end-regions -Z borrowck-mir\n \n fn foo(x: Box<isize>) -> isize {\n     let y = &*x;\n-    free(x); //~ ERROR cannot move out of `x` because it is borrowed\n+    free(x); //[ast]~ ERROR cannot move out of `x` because it is borrowed\n+    //[mir]~^ ERROR cannot move out of `x` because it is borrowed (Ast)\n+    //[mir]~| ERROR cannot move out of `x` because it is borrowed (Mir)\n     *y\n }\n "}]}