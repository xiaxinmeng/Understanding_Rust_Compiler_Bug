{"sha": "45c24ae0a5f9fedac996bdc26244cb1161810722", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1YzI0YWUwYTVmOWZlZGFjOTk2YmRjMjYyNDRjYjExNjE4MTA3MjI=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-08-19T15:42:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-19T15:42:26Z"}, "message": "Merge #5818\n\n5818: Some trivial local simiplifications r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "face1eb5c4a3cf3817b6cefab96f94663f3b792f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/face1eb5c4a3cf3817b6cefab96f94663f3b792f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45c24ae0a5f9fedac996bdc26244cb1161810722", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfPUhiCRBK7hj4Ov3rIwAAdHIIAIX7/bIFpD7DFi1AqyzpTLtM\nGeIKnnaxt+OAKnMs9RDP/tupEe3xhAge1dOLyP9kTqompCEgCVVoftZeMmP0H1ay\n21c0NVj/d368vsWndnnbkMKRkZVduFENE2f8dIfQ6Ekpc8eQtIGt+SQsEArEmS3E\niN3WnXkJzOhuIEp2dYuUxC52yOPoNntV4CfJja34nFmnIxHkUKotWEj82HbUN8cX\nSyWuT0zhfrEMPgb7Vr0JmRm2f9iuIEi+f6PvjT4tZGRoLQ71Jjmqq6tuXmmZyv++\nL6xbOuShowzkDd745NBJvLpYHucyKmwLETZPSQ36ZG49keuYnPUE/3Qu6ZF4W8Q=\n=P48r\n-----END PGP SIGNATURE-----\n", "payload": "tree face1eb5c4a3cf3817b6cefab96f94663f3b792f\nparent a4b7ce94bacbb8a9da28111fba0abeb2a68e9bc2\nparent 11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1597851746 +0000\ncommitter GitHub <noreply@github.com> 1597851746 +0000\n\nMerge #5818\n\n5818: Some trivial local simiplifications r=matklad a=matklad\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45c24ae0a5f9fedac996bdc26244cb1161810722", "html_url": "https://github.com/rust-lang/rust/commit/45c24ae0a5f9fedac996bdc26244cb1161810722", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45c24ae0a5f9fedac996bdc26244cb1161810722/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4b7ce94bacbb8a9da28111fba0abeb2a68e9bc2", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4b7ce94bacbb8a9da28111fba0abeb2a68e9bc2", "html_url": "https://github.com/rust-lang/rust/commit/a4b7ce94bacbb8a9da28111fba0abeb2a68e9bc2"}, {"sha": "11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec", "url": "https://api.github.com/repos/rust-lang/rust/commits/11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec", "html_url": "https://github.com/rust-lang/rust/commit/11a1bb1c3ec02456813ccb5cb0bdb76f9d39b2ec"}], "stats": {"total": 30, "additions": 11, "deletions": 19}, "files": [{"sha": "ad49f8e1713e3f63e4ae40d1191e4e1d7e11a174", "filename": "crates/ide/src/syntax_highlighting.rs", "status": "modified", "additions": 11, "deletions": 19, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/45c24ae0a5f9fedac996bdc26244cb1161810722/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45c24ae0a5f9fedac996bdc26244cb1161810722/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting.rs?ref=45c24ae0a5f9fedac996bdc26244cb1161810722", "patch": "@@ -454,18 +454,6 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n-fn is_possibly_unsafe(name_ref: &ast::NameRef) -> bool {\n-    name_ref\n-        .syntax()\n-        .parent()\n-        .and_then(|parent| {\n-            ast::FieldExpr::cast(parent.clone())\n-                .map(|_| true)\n-                .or_else(|| ast::RecordPatField::cast(parent).map(|_| true))\n-        })\n-        .unwrap_or(false)\n-}\n-\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -496,9 +484,9 @@ fn highlight_element(\n             match name_kind {\n                 Some(NameClass::ExternCrate(_)) => HighlightTag::Module.into(),\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_name(sema, db, def, None, false) | HighlightModifier::Definition\n+                    highlight_def(sema, db, def, None, false) | HighlightModifier::Definition\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_name(sema, db, def, None, false),\n+                Some(NameClass::ConstReference(def)) => highlight_def(sema, db, def, None, false),\n                 Some(NameClass::FieldShorthand { field, .. }) => {\n                     let mut h = HighlightTag::Field.into();\n                     if let Definition::Field(field) = field {\n@@ -520,7 +508,6 @@ fn highlight_element(\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n             highlight_func_by_name_ref(sema, &name_ref).unwrap_or_else(|| {\n-                let possibly_unsafe = is_possibly_unsafe(&name_ref);\n                 match classify_name_ref(sema, &name_ref) {\n                     Some(name_kind) => match name_kind {\n                         NameRefClass::ExternCrate(_) => HighlightTag::Module.into(),\n@@ -532,7 +519,13 @@ fn highlight_element(\n                                     binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                                 }\n                             };\n-                            highlight_name(sema, db, def, Some(name_ref), possibly_unsafe)\n+                            let possibly_unsafe = match name_ref.syntax().parent() {\n+                                Some(parent) => {\n+                                    matches!(parent.kind(), FIELD_EXPR | RECORD_PAT_FIELD)\n+                                }\n+                                None => false,\n+                            };\n+                            highlight_def(sema, db, def, Some(name_ref), possibly_unsafe)\n                         }\n                         NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                     },\n@@ -706,8 +699,7 @@ fn highlight_func_by_name_ref(\n     sema: &Semantics<RootDatabase>,\n     name_ref: &ast::NameRef,\n ) -> Option<Highlight> {\n-    let parent = name_ref.syntax().parent()?;\n-    let method_call = ast::MethodCallExpr::cast(parent)?;\n+    let method_call = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast)?;\n     highlight_method_call(sema, &method_call)\n }\n \n@@ -737,7 +729,7 @@ fn highlight_method_call(\n     Some(h)\n }\n \n-fn highlight_name(\n+fn highlight_def(\n     sema: &Semantics<RootDatabase>,\n     db: &RootDatabase,\n     def: Definition,"}]}