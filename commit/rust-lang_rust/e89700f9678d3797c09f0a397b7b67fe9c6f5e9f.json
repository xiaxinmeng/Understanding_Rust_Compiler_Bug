{"sha": "e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU4OTcwMGY5Njc4ZDM3OTdjMDlmMGEzOTdiN2I2N2ZlOWM2ZjVlOWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T13:19:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-11-28T13:19:01Z"}, "message": "Move hir tests to hit", "tree": {"sha": "aedb0bd160c98dff996ad9cdd55d7f96db294b78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/aedb0bd160c98dff996ad9cdd55d7f96db294b78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "html_url": "https://github.com/rust-lang/rust/commit/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "95c0c8f3986c8b3bcf0052d34d3ace09ebb9fa1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/95c0c8f3986c8b3bcf0052d34d3ace09ebb9fa1b", "html_url": "https://github.com/rust-lang/rust/commit/95c0c8f3986c8b3bcf0052d34d3ace09ebb9fa1b"}], "stats": {"total": 472, "additions": 330, "deletions": 142}, "files": [{"sha": "12df580ba83b97749ef666c1c5a1f9427e488f47", "filename": "crates/ra_analysis/src/lib.rs", "status": "modified", "additions": 0, "deletions": 109, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Flib.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -317,112 +317,3 @@ fn analysis_is_send() {\n     fn is_send<T: Send>() {}\n     is_send::<Analysis>();\n }\n-\n-//TODO: move to hir\n-#[cfg(test)]\n-mod hir_namres_tests {\n-    use std::sync::Arc;\n-    use ra_db::FilesDatabase;\n-    use ra_syntax::SmolStr;\n-    use hir::{self, db::HirDatabase};\n-\n-    use crate::{\n-        AnalysisChange,\n-        mock_analysis::{MockAnalysis, analysis_and_position},\n-};\n-\n-    fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n-        let (analysis, pos) = analysis_and_position(fixture);\n-        let db = analysis.imp.db;\n-        let source_root = db.file_source_root(pos.file_id);\n-        let descr = hir::Module::guess_from_position(&*db, pos)\n-            .unwrap()\n-            .unwrap();\n-        let module_id = descr.module_id;\n-        (db.item_map(source_root).unwrap(), module_id)\n-    }\n-\n-    #[test]\n-    fn test_item_map() {\n-        let (item_map, module_id) = item_map(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-\n-            use crate::foo::bar::Baz;\n-            <|>\n-\n-            //- /foo/mod.rs\n-            pub mod bar;\n-\n-            //- /foo/bar.rs\n-            pub struct Baz;\n-        \",\n-        );\n-        let name = SmolStr::from(\"Baz\");\n-        let resolution = &item_map.per_module[&module_id].items[&name];\n-        assert!(resolution.def_id.is_some());\n-    }\n-\n-    #[test]\n-    fn typing_inside_a_function_should_not_invalidate_item_map() {\n-        let mock_analysis = MockAnalysis::with_files(\n-            \"\n-            //- /lib.rs\n-            mod foo;\n-\n-            use crate::foo::bar::Baz;\n-\n-            fn foo() -> i32 {\n-                1 + 1\n-            }\n-            //- /foo/mod.rs\n-            pub mod bar;\n-\n-            //- /foo/bar.rs\n-            pub struct Baz;\n-        \",\n-        );\n-\n-        let file_id = mock_analysis.id_of(\"/lib.rs\");\n-        let mut host = mock_analysis.analysis_host();\n-\n-        let source_root = host.analysis().imp.db.file_source_root(file_id);\n-\n-        {\n-            let db = host.analysis().imp.db;\n-            let events = db.log_executed(|| {\n-                db.item_map(source_root).unwrap();\n-            });\n-            assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n-        }\n-\n-        let mut change = AnalysisChange::new();\n-\n-        change.change_file(\n-            file_id,\n-            \"\n-            mod foo;\n-\n-            use crate::foo::bar::Baz;\n-\n-            fn foo() -> i32 { 92 }\n-        \"\n-            .to_string(),\n-        );\n-\n-        host.apply_change(change);\n-\n-        {\n-            let db = host.analysis().imp.db;\n-            let events = db.log_executed(|| {\n-                db.item_map(source_root).unwrap();\n-            });\n-            assert!(\n-                !format!(\"{:?}\", events).contains(\"_item_map\"),\n-                \"{:#?}\",\n-                events\n-            )\n-        }\n-    }\n-}"}, {"sha": "0d9a7a1476da028324f16f2a87605277a8406f06", "filename": "crates/ra_analysis/src/mock_analysis.rs", "status": "modified", "additions": 7, "deletions": 33, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_analysis%2Fsrc%2Fmock_analysis.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -1,9 +1,10 @@\n use std::sync::Arc;\n \n-use relative_path::{RelativePath, RelativePathBuf};\n+use relative_path::{RelativePathBuf};\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n+use ra_db::mock::FileMap;\n \n-use crate::{Analysis, AnalysisChange, AnalysisHost, FileId, FileResolver, FilePosition};\n+use crate::{Analysis, AnalysisChange, AnalysisHost, FileId, FilePosition};\n \n /// Mock analysis is used in test to bootstrap an AnalysisHost/Analysis\n /// from a set of in-memory files.\n@@ -76,16 +77,15 @@ impl MockAnalysis {\n     }\n     pub fn analysis_host(self) -> AnalysisHost {\n         let mut host = AnalysisHost::default();\n-        let mut file_map = Vec::new();\n+        let mut file_map = FileMap::default();\n         let mut change = AnalysisChange::new();\n-        for (id, (path, contents)) in self.files.into_iter().enumerate() {\n-            let file_id = FileId((id + 1) as u32);\n+        for (path, contents) in self.files.into_iter() {\n             assert!(path.starts_with('/'));\n             let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n+            let file_id = file_map.add(path);\n             change.add_file(file_id, contents);\n-            file_map.push((file_id, path));\n         }\n-        change.set_file_resolver(Arc::new(FileMap(file_map)));\n+        change.set_file_resolver(Arc::new(file_map));\n         host.apply_change(change);\n         host\n     }\n@@ -113,29 +113,3 @@ pub fn single_file_with_position(code: &str) -> (Analysis, FilePosition) {\n     let pos = mock.add_file_with_position(\"/main.rs\", code);\n     (mock.analysis(), pos)\n }\n-\n-#[derive(Debug)]\n-struct FileMap(Vec<(FileId, RelativePathBuf)>);\n-\n-impl FileMap {\n-    fn iter<'a>(&'a self) -> impl Iterator<Item = (FileId, &'a RelativePath)> + 'a {\n-        self.0\n-            .iter()\n-            .map(|(id, path)| (*id, path.as_relative_path()))\n-    }\n-\n-    fn path(&self, id: FileId) -> &RelativePath {\n-        self.iter().find(|&(it, _)| it == id).unwrap().1\n-    }\n-}\n-\n-impl FileResolver for FileMap {\n-    fn file_stem(&self, id: FileId) -> String {\n-        self.path(id).file_stem().unwrap().to_string()\n-    }\n-    fn resolve(&self, id: FileId, rel: &RelativePath) -> Option<FileId> {\n-        let path = self.path(id).join(rel).normalize();\n-        let id = self.iter().find(|&(_, p)| path == p)?.0;\n-        Some(id)\n-    }\n-}"}, {"sha": "6a996c7f44fb55f011ec87038e9c24d023e5f611", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -10,6 +10,7 @@ mod syntax_ptr;\n mod file_resolver;\n mod input;\n mod loc2id;\n+pub mod mock;\n \n use std::sync::Arc;\n use ra_editor::LineIndex;"}, {"sha": "2840f965586128d2f9e6df08c52c43f05bcf58ea", "filename": "crates/ra_db/src/mock.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_db%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_db%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Fmock.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -0,0 +1,51 @@\n+use std::sync::Arc;\n+\n+use rustc_hash::FxHashSet;\n+use relative_path::{RelativePath, RelativePathBuf};\n+\n+use crate::{FileId, FileResolver, SourceRoot, FileResolverImp};\n+\n+#[derive(Default, Debug)]\n+pub struct FileMap(Vec<(FileId, RelativePathBuf)>);\n+\n+impl FileMap {\n+    pub fn add(&mut self, path: RelativePathBuf) -> FileId {\n+        let file_id = FileId((self.0.len() + 1) as u32);\n+        self.0.push((file_id, path));\n+        file_id\n+    }\n+\n+    pub fn into_source_root(self) -> SourceRoot {\n+        let files = self.files();\n+        let file_resolver = FileResolverImp::new(Arc::new(self));\n+        SourceRoot {\n+            file_resolver,\n+            files,\n+        }\n+    }\n+\n+    pub fn files(&self) -> FxHashSet<FileId> {\n+        self.iter().map(|(id, _)| id).collect()\n+    }\n+\n+    fn iter<'a>(&'a self) -> impl Iterator<Item = (FileId, &'a RelativePath)> + 'a {\n+        self.0\n+            .iter()\n+            .map(|(id, path)| (*id, path.as_relative_path()))\n+    }\n+\n+    fn path(&self, id: FileId) -> &RelativePath {\n+        self.iter().find(|&(it, _)| it == id).unwrap().1\n+    }\n+}\n+\n+impl FileResolver for FileMap {\n+    fn file_stem(&self, id: FileId) -> String {\n+        self.path(id).file_stem().unwrap().to_string()\n+    }\n+    fn resolve(&self, id: FileId, rel: &RelativePath) -> Option<FileId> {\n+        let path = self.path(id).join(rel).normalize();\n+        let id = self.iter().find(|&(_, p)| path == p)?.0;\n+        Some(id)\n+    }\n+}"}, {"sha": "e7b6a81f414d82adf1e4c749e1f3d8219c8b877e", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -15,6 +15,8 @@ macro_rules! ctry {\n }\n \n pub mod db;\n+#[cfg(test)]\n+mod mock;\n mod query_definitions;\n mod function;\n mod module;"}, {"sha": "8e256b89fedd03117accb185a723babd198da788", "filename": "crates/ra_hir/src/mock.rs", "status": "added", "additions": 172, "deletions": 0, "changes": 172, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -0,0 +1,172 @@\n+use std::sync::Arc;\n+\n+use parking_lot::Mutex;\n+use salsa::{self, Database};\n+use ra_db::{LocationIntener, BaseDatabase, FilePosition, mock::FileMap, FileId, WORKSPACE};\n+use relative_path::RelativePathBuf;\n+use test_utils::{parse_fixture, CURSOR_MARKER, extract_offset};\n+\n+use crate::{db, DefId, DefLoc, FnId, SourceItemId};\n+\n+#[derive(Debug)]\n+pub(crate) struct MockDatabase {\n+    events: Mutex<Option<Vec<salsa::Event<MockDatabase>>>>,\n+    runtime: salsa::Runtime<MockDatabase>,\n+    id_maps: Arc<IdMaps>,\n+}\n+\n+impl MockDatabase {\n+    pub(crate) fn with_position(fixture: &str) -> (MockDatabase, FilePosition) {\n+        let mut db = MockDatabase::default();\n+\n+        let mut position = None;\n+        let mut file_map = FileMap::default();\n+        for entry in parse_fixture(fixture) {\n+            if entry.text.contains(CURSOR_MARKER) {\n+                assert!(\n+                    position.is_none(),\n+                    \"only one marker (<|>) per fixture is allowed\"\n+                );\n+                position = Some(db.add_file_with_position(&mut file_map, &entry.meta, &entry.text));\n+            } else {\n+                db.add_file(&mut file_map, &entry.meta, &entry.text);\n+            }\n+        }\n+        let position = position.expect(\"expected a marker (<|>)\");\n+        let source_root = file_map.into_source_root();\n+        db.query_mut(ra_db::SourceRootQuery)\n+            .set(WORKSPACE, Arc::new(source_root));\n+        (db, position)\n+    }\n+\n+    fn add_file(&mut self, file_map: &mut FileMap, path: &str, text: &str) -> FileId {\n+        assert!(path.starts_with('/'));\n+        let path = RelativePathBuf::from_path(&path[1..]).unwrap();\n+\n+        let file_id = file_map.add(path);\n+        let text = Arc::new(text.to_string());\n+        self.query_mut(ra_db::FileTextQuery).set(file_id, text);\n+        self.query_mut(ra_db::FileSourceRootQuery)\n+            .set(file_id, WORKSPACE);\n+        file_id\n+    }\n+\n+    fn add_file_with_position(\n+        &mut self,\n+        file_map: &mut FileMap,\n+        path: &str,\n+        text: &str,\n+    ) -> FilePosition {\n+        let (offset, text) = extract_offset(text);\n+        let file_id = self.add_file(file_map, path, &text);\n+        FilePosition { file_id, offset }\n+    }\n+}\n+\n+#[derive(Debug, Default)]\n+struct IdMaps {\n+    fns: LocationIntener<SourceItemId, FnId>,\n+    defs: LocationIntener<DefLoc, DefId>,\n+}\n+\n+impl salsa::Database for MockDatabase {\n+    fn salsa_runtime(&self) -> &salsa::Runtime<MockDatabase> {\n+        &self.runtime\n+    }\n+\n+    fn salsa_event(&self, event: impl Fn() -> salsa::Event<MockDatabase>) {\n+        let mut events = self.events.lock();\n+        if let Some(events) = &mut *events {\n+            events.push(event());\n+        }\n+    }\n+}\n+\n+impl Default for MockDatabase {\n+    fn default() -> MockDatabase {\n+        let mut db = MockDatabase {\n+            events: Default::default(),\n+            runtime: salsa::Runtime::default(),\n+            id_maps: Default::default(),\n+        };\n+        db.query_mut(ra_db::SourceRootQuery)\n+            .set(ra_db::WORKSPACE, Default::default());\n+        db.query_mut(ra_db::CrateGraphQuery)\n+            .set((), Default::default());\n+        db.query_mut(ra_db::LibrariesQuery)\n+            .set((), Default::default());\n+        db\n+    }\n+}\n+\n+impl salsa::ParallelDatabase for MockDatabase {\n+    fn snapshot(&self) -> salsa::Snapshot<MockDatabase> {\n+        salsa::Snapshot::new(MockDatabase {\n+            events: Default::default(),\n+            runtime: self.runtime.snapshot(self),\n+            id_maps: self.id_maps.clone(),\n+        })\n+    }\n+}\n+\n+impl BaseDatabase for MockDatabase {}\n+\n+impl AsRef<LocationIntener<DefLoc, DefId>> for MockDatabase {\n+    fn as_ref(&self) -> &LocationIntener<DefLoc, DefId> {\n+        &self.id_maps.defs\n+    }\n+}\n+\n+impl AsRef<LocationIntener<SourceItemId, FnId>> for MockDatabase {\n+    fn as_ref(&self) -> &LocationIntener<SourceItemId, FnId> {\n+        &self.id_maps.fns\n+    }\n+}\n+\n+impl MockDatabase {\n+    pub(crate) fn log(&self, f: impl FnOnce()) -> Vec<salsa::Event<MockDatabase>> {\n+        *self.events.lock() = Some(Vec::new());\n+        f();\n+        let events = self.events.lock().take().unwrap();\n+        events\n+    }\n+\n+    pub(crate) fn log_executed(&self, f: impl FnOnce()) -> Vec<String> {\n+        let events = self.log(f);\n+        events\n+            .into_iter()\n+            .filter_map(|e| match e.kind {\n+                // This pretty horrible, but `Debug` is the only way to inspect\n+                // QueryDescriptor at the moment.\n+                salsa::EventKind::WillExecute { descriptor } => Some(format!(\"{:?}\", descriptor)),\n+                _ => None,\n+            })\n+            .collect()\n+    }\n+}\n+\n+salsa::database_storage! {\n+    pub(crate) struct MockDatabaseStorage for MockDatabase {\n+        impl ra_db::FilesDatabase {\n+            fn file_text() for ra_db::FileTextQuery;\n+            fn file_source_root() for ra_db::FileSourceRootQuery;\n+            fn source_root() for ra_db::SourceRootQuery;\n+            fn libraries() for ra_db::LibrariesQuery;\n+            fn crate_graph() for ra_db::CrateGraphQuery;\n+        }\n+        impl ra_db::SyntaxDatabase {\n+            fn source_file() for ra_db::SourceFileQuery;\n+            fn file_lines() for ra_db::FileLinesQuery;\n+        }\n+        impl db::HirDatabase {\n+            fn module_tree() for db::ModuleTreeQuery;\n+            fn fn_scopes() for db::FnScopesQuery;\n+            fn file_items() for db::SourceFileItemsQuery;\n+            fn file_item() for db::FileItemQuery;\n+            fn input_module_items() for db::InputModuleItemsQuery;\n+            fn item_map() for db::ItemMapQuery;\n+            fn fn_syntax() for db::FnSyntaxQuery;\n+            fn submodules() for db::SubmodulesQuery;\n+        }\n+    }\n+}"}, {"sha": "de13835b21e8120e473938aaeca01a257f23faa4", "filename": "crates/ra_hir/src/module/nameres.rs", "status": "modified", "additions": 97, "deletions": 0, "changes": 97, "blob_url": "https://github.com/rust-lang/rust/blob/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e89700f9678d3797c09f0a397b7b67fe9c6f5e9f/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmodule%2Fnameres.rs?ref=e89700f9678d3797c09f0a397b7b67fe9c6f5e9f", "patch": "@@ -336,3 +336,100 @@ where\n         f(module_items)\n     }\n }\n+\n+//TODO: move to hir\n+#[cfg(test)]\n+mod tests {\n+    use std::sync::Arc;\n+\n+    use salsa::Database;\n+    use ra_db::FilesDatabase;\n+    use ra_syntax::SmolStr;\n+\n+    use crate::{\n+        self as hir,\n+        db::HirDatabase,\n+        mock::MockDatabase,\n+};\n+\n+    fn item_map(fixture: &str) -> (Arc<hir::ItemMap>, hir::ModuleId) {\n+        let (db, pos) = MockDatabase::with_position(fixture);\n+        let source_root = db.file_source_root(pos.file_id);\n+        let module = hir::Module::guess_from_position(&db, pos).unwrap().unwrap();\n+        let module_id = module.module_id;\n+        (db.item_map(source_root).unwrap(), module_id)\n+    }\n+\n+    #[test]\n+    fn test_item_map() {\n+        let (item_map, module_id) = item_map(\n+            \"\n+            //- /lib.rs\n+            mod foo;\n+\n+            use crate::foo::bar::Baz;\n+            <|>\n+\n+            //- /foo/mod.rs\n+            pub mod bar;\n+\n+            //- /foo/bar.rs\n+            pub struct Baz;\n+        \",\n+        );\n+        let name = SmolStr::from(\"Baz\");\n+        let resolution = &item_map.per_module[&module_id].items[&name];\n+        assert!(resolution.def_id.is_some());\n+    }\n+\n+    #[test]\n+    fn typing_inside_a_function_should_not_invalidate_item_map() {\n+        let (mut db, pos) = MockDatabase::with_position(\n+            \"\n+            //- /lib.rs\n+            mod foo;<|>\n+\n+            use crate::foo::bar::Baz;\n+\n+            fn foo() -> i32 {\n+                1 + 1\n+            }\n+            //- /foo/mod.rs\n+            pub mod bar;\n+\n+            //- /foo/bar.rs\n+            pub struct Baz;\n+        \",\n+        );\n+        let source_root = db.file_source_root(pos.file_id);\n+        {\n+            let events = db.log_executed(|| {\n+                db.item_map(source_root).unwrap();\n+            });\n+            assert!(format!(\"{:?}\", events).contains(\"item_map\"))\n+        }\n+\n+        let new_text = \"\n+            mod foo;\n+\n+            use crate::foo::bar::Baz;\n+\n+            fn foo() -> i32 { 92 }\n+        \"\n+        .to_string();\n+\n+        db.query_mut(ra_db::FileTextQuery)\n+            .set(pos.file_id, Arc::new(new_text));\n+\n+        {\n+            let events = db.log_executed(|| {\n+                db.item_map(source_root).unwrap();\n+            });\n+            assert!(\n+                !format!(\"{:?}\", events).contains(\"_item_map\"),\n+                \"{:#?}\",\n+                events\n+            )\n+        }\n+    }\n+}"}]}