{"sha": "82a983de6803c7b1026ba0b553186306e842e427", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyYTk4M2RlNjgwM2M3YjEwMjZiYTBiNTUzMTg2MzA2ZTg0MmU0Mjc=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "etryzelaar@iqt.org", "date": "2012-12-19T02:55:36Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-12-19T04:54:13Z"}, "message": "Remove superfluous parentheses.", "tree": {"sha": "ff4e9f945742ec4a118a89cb0e0fd0e7b85256c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff4e9f945742ec4a118a89cb0e0fd0e7b85256c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82a983de6803c7b1026ba0b553186306e842e427", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82a983de6803c7b1026ba0b553186306e842e427", "html_url": "https://github.com/rust-lang/rust/commit/82a983de6803c7b1026ba0b553186306e842e427", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82a983de6803c7b1026ba0b553186306e842e427/comments", "author": null, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a0ef334179714e0c3f1a3c7276543a0305db2c95", "url": "https://api.github.com/repos/rust-lang/rust/commits/a0ef334179714e0c3f1a3c7276543a0305db2c95", "html_url": "https://github.com/rust-lang/rust/commit/a0ef334179714e0c3f1a3c7276543a0305db2c95"}], "stats": {"total": 8, "additions": 4, "deletions": 4}, "files": [{"sha": "10cbcaa0c3b3a07af3c1da523eeba9b5145bc46f", "filename": "src/libstd/par.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/82a983de6803c7b1026ba0b553186306e842e427/src%2Flibstd%2Fpar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82a983de6803c7b1026ba0b553186306e842e427/src%2Flibstd%2Fpar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpar.rs?ref=82a983de6803c7b1026ba0b553186306e842e427", "patch": "@@ -85,7 +85,7 @@ fn map_slices<A: Copy Owned, B: Copy Owned>(\n \n /// A parallel version of map.\n pub fn map<A: Copy Owned, B: Copy Owned>(\n-    xs: &[A], f: fn~((&A)) -> B) -> ~[B] {\n+    xs: &[A], f: fn~(&A) -> B) -> ~[B] {\n     vec::concat(map_slices(xs, || {\n         fn~(_base: uint, slice : &[A], copy f) -> ~[B] {\n             vec::map(slice, |x| f(x))\n@@ -95,7 +95,7 @@ pub fn map<A: Copy Owned, B: Copy Owned>(\n \n /// A parallel version of mapi.\n pub fn mapi<A: Copy Owned, B: Copy Owned>(xs: &[A],\n-                                    f: fn~(uint, (&A)) -> B) -> ~[B] {\n+                                    f: fn~(uint, &A) -> B) -> ~[B] {\n     let slices = map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> ~[B] {\n             vec::mapi(slice, |i, x| {\n@@ -132,7 +132,7 @@ pub fn mapi_factory<A: Copy Owned, B: Copy Owned>(\n }\n \n /// Returns true if the function holds for all elements in the vector.\n-pub fn alli<A: Copy Owned>(xs: &[A], f: fn~(uint, (&A)) -> bool) -> bool {\n+pub fn alli<A: Copy Owned>(xs: &[A], f: fn~(uint, &A) -> bool) -> bool {\n     do vec::all(map_slices(xs, || {\n         fn~(base: uint, slice : &[A], copy f) -> bool {\n             vec::alli(slice, |i, x| {\n@@ -143,7 +143,7 @@ pub fn alli<A: Copy Owned>(xs: &[A], f: fn~(uint, (&A)) -> bool) -> bool {\n }\n \n /// Returns true if the function holds for any elements in the vector.\n-pub fn any<A: Copy Owned>(xs: &[A], f: fn~(&(A)) -> bool) -> bool {\n+pub fn any<A: Copy Owned>(xs: &[A], f: fn~(&A) -> bool) -> bool {\n     do vec::any(map_slices(xs, || {\n         fn~(_base : uint, slice: &[A], copy f) -> bool {\n             vec::any(slice, |x| f(x))"}]}