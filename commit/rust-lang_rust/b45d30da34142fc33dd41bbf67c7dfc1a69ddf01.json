{"sha": "b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI0NWQzMGRhMzQxNDJmYzMzZGQ0MWJiZjY3YzdkZmMxYTY5ZGRmMDE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-19T12:02:22Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2014-12-20T05:49:37Z"}, "message": "Fix fallout of removing import_shadowing in tests.", "tree": {"sha": "cff82472a01b56c5a8f0113a33c4821db3a8a87f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cff82472a01b56c5a8f0113a33c4821db3a8a87f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "comment_count": 6, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "html_url": "https://github.com/rust-lang/rust/commit/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f95e0c21aaf752cf1401c872dfb1d8de1a22b6f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/f95e0c21aaf752cf1401c872dfb1d8de1a22b6f2", "html_url": "https://github.com/rust-lang/rust/commit/f95e0c21aaf752cf1401c872dfb1d8de1a22b6f2"}], "stats": {"total": 213, "additions": 97, "deletions": 116}, "files": [{"sha": "fbaebd0125d0d3e9e1def4d2573c33ab0958a486", "filename": "src/libcollections/bench.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbench.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use std::prelude::*;\n+use prelude::*;\n use std::rand;\n use std::rand::Rng;\n use test::Bencher;"}, {"sha": "e1c06736b369619a2e8602f201346696aaf65d4d", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -617,10 +617,9 @@ impl<T: Ord> Extend<T> for BinaryHeap<T> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::BinaryHeap;\n-    use vec::Vec;\n \n     #[test]\n     fn test_iterator() {"}, {"sha": "f59fb1c5d3daa6e2e8088434dda29277b929cbe2", "filename": "src/libcollections/bit.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbit.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1686,16 +1686,15 @@ impl<'a> Iterator<uint> for TwoBitPositions<'a> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n-    use std::iter::range_step;\n+    use prelude::*;\n+    use core::iter::range_step;\n+    use core::u32;\n     use std::rand;\n     use std::rand::Rng;\n-    use std::u32;\n     use test::{Bencher, black_box};\n \n     use super::{Bitv, BitvSet, from_fn, from_bytes};\n     use bitv;\n-    use vec::Vec;\n \n     static BENCH_BITS : uint = 1 << 14;\n \n@@ -2038,7 +2037,7 @@ mod tests {\n     #[test]\n     fn test_from_bytes() {\n         let bitv = from_bytes(&[0b10110110, 0b00000000, 0b11111111]);\n-        let str = format!(\"{}{}{}\", \"10110110\", \"00000000\", \"11111111\");\n+        let str = concat!(\"10110110\", \"00000000\", \"11111111\");\n         assert_eq!(bitv.to_string(), str);\n     }\n "}, {"sha": "01096c1fd4e9617a8481a511291be1673104c5d4", "filename": "src/libcollections/btree/map.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbtree%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbtree%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fmap.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1335,7 +1335,7 @@ impl<K: Ord, V> BTreeMap<K, V> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::{BTreeMap, Occupied, Vacant};\n \n@@ -1537,7 +1537,7 @@ mod test {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::rand::{weak_rng, Rng};\n     use test::{Bencher, black_box};\n "}, {"sha": "890d9be39f985a1c23fe87b4444a11b99ddab283", "filename": "src/libcollections/btree/set.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbtree%2Fset.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -726,7 +726,7 @@ impl<'a, T: Ord> Iterator<&'a T> for UnionItems<'a, T> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n+    use prelude::*;\n \n     use super::BTreeSet;\n     use std::hash;"}, {"sha": "4d7ce92b5491e88b03dfe4497ebc222a08637b89", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -788,14 +788,14 @@ impl<S: Writer, A: Hash<S>> Hash<S> for DList<A> {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::rand;\n     use std::hash;\n+    use std::task::spawn;\n     use test::Bencher;\n     use test;\n \n     use super::{DList, Node, ListInsertion};\n-    use vec::Vec;\n \n     pub fn check_links<T>(list: &DList<T>) {\n         let mut len = 0u;"}, {"sha": "ed7516fec16a946c4ed8cd1039dd3c8b266ed735", "filename": "src/libcollections/enum_set.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fenum_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fenum_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fenum_set.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -295,9 +295,9 @@ impl<E:CLike> Extend<E> for EnumSet<E> {\n \n #[cfg(test)]\n mod test {\n-    use std::prelude::*;\n     use self::Foo::*;\n-    use std::mem;\n+    use prelude::*;\n+    use core::mem;\n \n     use super::{EnumSet, CLike};\n "}, {"sha": "75d179319f7c03e999dc28341c561e1c4fc8b690", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -95,3 +95,41 @@ mod std {\n     pub use core::kinds;    // deriving(Copy)\n     pub use core::hash;     // deriving(Hash)\n }\n+\n+#[cfg(test)]\n+mod prelude {\n+    // from core.\n+    pub use core::borrow::IntoCow;\n+    pub use core::char::Char;\n+    pub use core::clone::Clone;\n+    pub use core::cmp::{PartialEq, Eq, Equiv, PartialOrd, Ord};\n+    pub use core::cmp::Ordering::{Less, Equal, Greater};\n+    pub use core::iter::range;\n+    pub use core::iter::{FromIterator, Extend, IteratorExt};\n+    pub use core::iter::{Iterator, DoubleEndedIterator, RandomAccessIterator};\n+    pub use core::iter::{IteratorCloneExt, CloneIteratorExt, DoubleEndedIteratorExt};\n+    pub use core::iter::{IteratorOrdExt, MutableDoubleEndedIterator, ExactSizeIterator};\n+    pub use core::kinds::{Copy, Send, Sized, Sync};\n+    pub use core::mem::drop;\n+    pub use core::ops::{Drop, Fn, FnMut, FnOnce};\n+    pub use core::option::Option;\n+    pub use core::option::Option::{Some, None};\n+    pub use core::ptr::RawPtr;\n+    pub use core::result::Result;\n+    pub use core::result::Result::{Ok, Err};\n+\n+    // in core and collections (may differ).\n+    pub use slice::{PartialEqSliceExt, OrdSliceExt};\n+    pub use slice::{AsSlice, SliceExt};\n+    pub use str::{from_str, Str, StrPrelude};\n+\n+    // from other crates.\n+    pub use alloc::boxed::Box;\n+    pub use unicode::char::UnicodeChar;\n+\n+    // from collections.\n+    pub use slice::{CloneSliceExt, VectorVector};\n+    pub use str::{IntoMaybeOwned, UnicodeStrPrelude, StrAllocating, StrVector};\n+    pub use string::{String, ToString};\n+    pub use vec::Vec;\n+}"}, {"sha": "b02285939230b6628066c472ac75a90a644809bb", "filename": "src/libcollections/ring_buf.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fring_buf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fring_buf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fring_buf.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1260,18 +1260,17 @@ impl<T: fmt::Show> fmt::Show for RingBuf<T> {\n \n #[cfg(test)]\n mod tests {\n-    use core::iter;\n     use self::Taggy::*;\n     use self::Taggypar::*;\n-    use std::cmp;\n+    use prelude::*;\n+    use core::cmp;\n+    use core::iter;\n     use std::fmt::Show;\n-    use std::prelude::*;\n     use std::hash;\n     use test::Bencher;\n     use test;\n \n     use super::RingBuf;\n-    use vec::Vec;\n \n     #[test]\n     #[allow(deprecated)]\n@@ -1791,7 +1790,7 @@ mod tests {\n \n     #[test]\n     fn test_from_iter() {\n-        use std::iter;\n+        use core::iter;\n         let v = vec!(1i,2,3,4,5,6,7);\n         let deq: RingBuf<int> = v.iter().map(|&x| x).collect();\n         let u: Vec<int> = deq.iter().map(|&x| x).collect();"}, {"sha": "16adf6fa224b449cdfe5d1b9e41a7a064b4cafec", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 8, "deletions": 13, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1343,16 +1343,13 @@ pub mod raw {\n #[cfg(test)]\n mod tests {\n     use std::boxed::Box;\n-    use std::cell::Cell;\n-    use std::default::Default;\n-    use std::mem;\n-    use std::prelude::*;\n+    use prelude::*;\n+    use core::cell::Cell;\n+    use core::default::Default;\n+    use core::mem;\n     use std::rand::{Rng, task_rng};\n     use std::rc::Rc;\n-    use std::rt;\n-    use slice::*;\n-\n-    use vec::Vec;\n+    use super::ElementSwaps;\n \n     fn square(n: uint) -> uint { n * n }\n \n@@ -2764,14 +2761,12 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n-    use std::prelude::*;\n+    use prelude::*;\n+    use core::mem;\n+    use core::ptr;\n     use std::rand::{weak_rng, Rng};\n-    use std::mem;\n-    use std::ptr;\n     use test::{Bencher, black_box};\n \n-    use vec::Vec;\n-\n     #[bench]\n     fn iterator(b: &mut Bencher) {\n         // peculiar numbers to stop LLVM from optimising the summation"}, {"sha": "feec2a216c7036c3a2e03e81888c384c1bceefa1", "filename": "src/libcollections/str.rs", "status": "modified", "additions": 10, "deletions": 25, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstr.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -837,25 +837,12 @@ impl<'a> StrAllocating for &'a str {\n \n #[cfg(test)]\n mod tests {\n-    use std::iter::AdditiveIterator;\n-    use std::iter::range;\n-    use std::default::Default;\n-    use std::char::Char;\n-    use std::clone::Clone;\n-    use std::cmp::{Ord, PartialOrd, Equiv};\n-    use std::cmp::Ordering::{Equal, Greater, Less};\n-    use std::option::Option;\n-    use std::option::Option::{Some, None};\n-    use std::ptr::RawPtr;\n-    use std::iter::{Iterator, IteratorExt, DoubleEndedIteratorExt};\n-\n-    use super::*;\n-    use std::slice::{AsSlice, SliceExt};\n-    use string::String;\n-    use vec::Vec;\n-    use slice::CloneSliceExt;\n-\n-    use unicode::char::UnicodeChar;\n+    use prelude::*;\n+    use core::default::Default;\n+    use core::iter::AdditiveIterator;\n+    use super::{eq_slice, from_utf8, is_utf8, is_utf16, raw};\n+    use super::truncate_utf16_at_nul;\n+    use super::{Owned, Slice};\n \n     #[test]\n     fn test_eq_slice() {\n@@ -1829,7 +1816,7 @@ mod tests {\n \n     #[test]\n     fn test_lev_distance() {\n-        use std::char::{ from_u32, MAX };\n+        use core::char::{ from_u32, MAX };\n         // Test bytelength agnosticity\n         for c in range(0u32, MAX as u32)\n                  .filter_map(|i| from_u32(i))\n@@ -1939,7 +1926,7 @@ mod tests {\n \n     #[test]\n     fn test_graphemes() {\n-        use std::iter::order;\n+        use core::iter::order;\n         // official Unicode test data\n         // from http://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n         let test_same: [(_, &[_]), .. 325] = [\n@@ -2370,7 +2357,7 @@ mod tests {\n \n     #[test]\n     fn test_str_default() {\n-        use std::default::Default;\n+        use core::default::Default;\n         fn t<S: Default + Str>() {\n             let s: S = Default::default();\n             assert_eq!(s.as_slice(), \"\");\n@@ -2470,12 +2457,10 @@ mod tests {\n \n #[cfg(test)]\n mod bench {\n+    use prelude::*;\n     use test::Bencher;\n     use test::black_box;\n     use super::*;\n-    use std::iter::{IteratorExt, DoubleEndedIteratorExt};\n-    use std::str::StrPrelude;\n-    use std::slice::SliceExt;\n \n     #[bench]\n     fn char_iterator(b: &mut Bencher) {"}, {"sha": "bcd1e3b36809a079d162fce3aef955d155eb96c4", "filename": "src/libcollections/string.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fstring.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1040,14 +1040,11 @@ pub mod raw {\n \n #[cfg(test)]\n mod tests {\n-    use std::prelude::*;\n+    use prelude::*;\n     use test::Bencher;\n \n-    use slice::CloneSliceExt;\n-    use str::{Str, StrPrelude};\n     use str;\n-    use super::{as_string, String, ToString};\n-    use vec::Vec;\n+    use super::as_string;\n \n     #[test]\n     fn test_as_string() {"}, {"sha": "e0745a86d71dee559e5fcb8d25f589a05d9ae36b", "filename": "src/libcollections/vec.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1805,12 +1805,10 @@ impl<'a> fmt::FormatWriter for Vec<u8> {\n \n #[cfg(test)]\n mod tests {\n-    extern crate test;\n-\n-    use std::prelude::*;\n-    use std::mem::size_of;\n+    use prelude::*;\n+    use core::mem::size_of;\n     use test::Bencher;\n-    use super::{as_vec, unzip, raw, Vec};\n+    use super::{as_vec, unzip, raw};\n \n     struct DropCounter<'a> {\n         count: &'a mut int"}, {"sha": "1babde6066d0622693b8cce2b9df0b451c51c0d3", "filename": "src/libcollections/vec_map.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fvec_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcollections%2Fvec_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fvec_map.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -672,8 +672,7 @@ impl<V> DoubleEndedIterator<(uint, V)> for MoveItems<V> {\n \n #[cfg(test)]\n mod test_map {\n-    use std::prelude::*;\n-    use vec::Vec;\n+    use prelude::*;\n     use core::hash::hash;\n \n     use super::VecMap;\n@@ -1046,8 +1045,7 @@ mod test_map {\n \n #[cfg(test)]\n mod bench {\n-    extern crate test;\n-    use self::test::Bencher;\n+    use test::Bencher;\n     use super::VecMap;\n     use bench::{insert_rand_n, insert_seq_n, find_rand_n, find_seq_n};\n "}, {"sha": "bdc210f0d8e6e0ace0fe7e9d249d35b92cc569e7", "filename": "src/libcore/hash/sip.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcore%2Fhash%2Fsip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibcore%2Fhash%2Fsip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fsip.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -271,14 +271,9 @@ pub fn hash_with_keys<Sized? T: Hash<SipState>>(k0: u64, k1: u64, value: &T) ->\n #[cfg(test)]\n mod tests {\n     use test::Bencher;\n-    use std::prelude::*;\n+    use prelude::*;\n     use std::fmt;\n \n-    use str::Str;\n-    use string::String;\n-    use slice::{AsSlice, SliceExt};\n-    use vec::Vec;\n-\n     use super::super::{Hash, Writer};\n     use super::{SipState, hash, hash_with_keys};\n "}, {"sha": "08b17f25e29d97e4a231dfd27555942dd6ec8bb9", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -633,7 +633,6 @@ mod tests {\n     use prelude::*;\n     use super::*;\n     use char::from_u32;\n-    use str::StrPrelude;\n \n     macro_rules! v2ascii {\n         ( [$($e:expr),*]) => (&[$(Ascii{chr:$e}),*]);"}, {"sha": "c7cf0b5bc8e66b90388570aed237158dedc9f3ed", "filename": "src/libstd/bitflags.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fbitflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fbitflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fbitflags.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -315,7 +315,6 @@ macro_rules! bitflags {\n #[cfg(test)]\n #[allow(non_upper_case_globals)]\n mod tests {\n-    use kinds::Copy;\n     use hash;\n     use option::Option::{Some, None};\n     use ops::{BitOr, BitAnd, BitXor, Sub, Not};"}, {"sha": "d068c4610be7c5c92b0ba6361ed608cbceafca27", "filename": "src/libstd/collections/hash/map.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fmap.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1428,9 +1428,8 @@ mod test_map {\n \n     use super::HashMap;\n     use super::{Occupied, Vacant};\n-    use cmp::Equiv;\n     use hash;\n-    use iter::{Iterator,range_inclusive,range_step_inclusive};\n+    use iter::{range_inclusive, range_step_inclusive};\n     use cell::RefCell;\n     use rand::{weak_rng, Rng};\n "}, {"sha": "71cc4a1e5a6509d3f9615c03723a8fb1028ee5aa", "filename": "src/libstd/collections/hash/set.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Fset.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -678,7 +678,6 @@ mod test_set {\n     use prelude::*;\n \n     use super::HashSet;\n-    use slice::PartialEqSliceExt;\n \n     #[test]\n     fn test_disjoint() {"}, {"sha": "9d9e882757147f33226f424035833ad32030148a", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -409,7 +409,6 @@ mod test {\n     use super::super::{IoResult, EndOfFile};\n     use super::super::mem::MemReader;\n     use self::test::Bencher;\n-    use str::StrPrelude;\n \n     /// A type, free to create, primarily intended for benchmarking creation of\n     /// wrappers that, just for construction, don't need a Reader/Writer that"}, {"sha": "4e736908c3720c15d443cc71b5da191affebba0f", "filename": "src/libstd/io/fs.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ffs.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -823,10 +823,6 @@ mod test {\n     use io;\n     use str;\n     use io::fs::*;\n-    use path::Path;\n-    use io;\n-    use ops::Drop;\n-    use str::StrPrelude;\n \n     macro_rules! check { ($e:expr) => (\n         match $e {"}, {"sha": "431e11cf9cacaf59b57ac8fd36235688d95d2434", "filename": "src/libstd/io/mem.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmem.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -398,13 +398,12 @@ impl<'a> Buffer for BufReader<'a> {\n \n #[cfg(test)]\n mod test {\n-    extern crate test;\n+    extern crate \"test\" as test_crate;\n     use prelude::*;\n     use super::*;\n     use io::*;\n     use io;\n-    use self::test::Bencher;\n-    use str::StrPrelude;\n+    use self::test_crate::Bencher;\n \n     #[test]\n     fn test_vec_writer() {"}, {"sha": "953effe4345ceb18bac732b07d45b4fa7224f10d", "filename": "src/libstd/io/timer.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fio%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftimer.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -225,11 +225,11 @@ fn in_ms_u64(d: Duration) -> u64 {\n \n #[cfg(test)]\n mod test {\n-    use super::*;\n-    use time::Duration;\n-    use task::spawn;\n     use prelude::*;\n \n+    use super::Timer;\n+    use time::Duration;\n+\n     #[test]\n     fn test_io_timer_sleep_simple() {\n         let mut timer = Timer::new().unwrap();"}, {"sha": "7de3e1c961a8c09cf7b2ef78a039402a1279c74d", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -157,7 +157,7 @@ pub use core::unit;\n pub use core::result;\n pub use core::option;\n \n-pub use alloc::boxed;\n+#[cfg(not(test))] pub use alloc::boxed;\n pub use alloc::rc;\n \n pub use core_collections::slice;"}, {"sha": "d307e1f7415678b9d36e4857abf57feca3022276", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -349,7 +349,6 @@ pub fn to_str_exp_digits(num: f32, dig: uint, upper: bool) -> String {\n mod tests {\n     use f32::*;\n     use num::*;\n-    use num;\n \n     #[test]\n     fn test_min_nan() {\n@@ -364,8 +363,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_num() {\n-        num::test_num(10f32, 2f32);\n+    fn test_num_f32() {\n+        test_num(10f32, 2f32);\n     }\n \n     #[test]"}, {"sha": "dfe20d59c82ce958de064ba2678a31d50c90ef1c", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -357,7 +357,6 @@ pub fn to_str_exp_digits(num: f64, dig: uint, upper: bool) -> String {\n mod tests {\n     use f64::*;\n     use num::*;\n-    use num;\n \n     #[test]\n     fn test_min_nan() {\n@@ -372,8 +371,8 @@ mod tests {\n     }\n \n     #[test]\n-    fn test_num() {\n-        num::test_num(10f64, 2f64);\n+    fn test_num_f64() {\n+        test_num(10f64, 2f64);\n     }\n \n     #[test]"}, {"sha": "20a72f45fbf9b105237d74bb2f155d6de0f6857d", "filename": "src/libstd/os.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -1425,7 +1425,6 @@ mod arch_consts {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use c_str::ToCStr;\n     use option;\n     use os::{env, getcwd, getenv, make_absolute};\n     use os::{split_paths, join_paths, setenv, unsetenv};"}, {"sha": "ed4bb6ee08116ece668c1d80bf4d99c9055d440b", "filename": "src/libstd/path/mod.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fpath%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fpath%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fmod.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -931,8 +931,6 @@ fn contains_nul<T: BytesContainer>(v: &T) -> bool {\n #[cfg(test)]\n mod tests {\n     use prelude::*;\n-    use super::{GenericPath, PosixPath, WindowsPath};\n-    use c_str::ToCStr;\n \n     #[test]\n     fn test_cstring() {"}, {"sha": "88907951673d1ce2f8b3a9b8e479952cfbc36e28", "filename": "src/libstd/path/posix.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fpath%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fpath%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fposix.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -445,7 +445,6 @@ mod tests {\n     use prelude::*;\n     use super::*;\n     use str;\n-    use str::StrPrelude;\n \n     macro_rules! t {\n         (s: $path:expr, $exp:expr) => ("}, {"sha": "51899a87a325d72d05aff960e81f20817b041aec", "filename": "src/libstd/sync/future.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ffuture.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -153,7 +153,6 @@ mod test {\n     use prelude::*;\n     use sync::Future;\n     use task;\n-    use comm::channel;\n \n     #[test]\n     fn test_from_value() {"}, {"sha": "366e4b7d35b01eb67acd50643dc9a0ed8e44395a", "filename": "src/libstd/sync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Ftask_pool.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -131,10 +131,8 @@ fn spawn_in_pool(jobs: Arc<Mutex<Receiver<Thunk>>>) {\n \n #[cfg(test)]\n mod test {\n-    use core::prelude::*;\n+    use prelude::*;\n     use super::*;\n-    use comm::channel;\n-    use iter::range;\n \n     const TEST_TASKS: uint = 4u;\n "}, {"sha": "89773207347d548e0d8fafd7f7dbbd38066a2dae", "filename": "src/libstd/thread.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibstd%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fthread.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -428,13 +428,11 @@ impl<T: Send> Drop for JoinGuard<T> {\n \n #[cfg(test)]\n mod test {\n+    use prelude::*;\n     use any::{Any, AnyRefExt};\n     use boxed::BoxAny;\n-    use prelude::*;\n-    use result::Result::{Ok, Err};\n     use result;\n     use std::io::{ChanReader, ChanWriter};\n-    use string::String;\n     use thunk::Thunk;\n     use super::{Thread, Builder};\n "}, {"sha": "3d0877dd4327311f4ee3505e07f65a9a30fd0818", "filename": "src/libsyntax/parse/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibsyntax%2Fparse%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b45d30da34142fc33dd41bbf67c7dfc1a69ddf01/src%2Flibsyntax%2Fparse%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fmod.rs?ref=b45d30da34142fc33dd41bbf67c7dfc1a69ddf01", "patch": "@@ -745,8 +745,7 @@ mod test {\n     use owned_slice::OwnedSlice;\n     use ast;\n     use abi;\n-    use attr;\n-    use attr::AttrMetaMethods;\n+    use attr::{first_attr_value_str_by_name, AttrMetaMethods};\n     use parse::parser::Parser;\n     use parse::token::{str_to_ident};\n     use print::pprust::view_item_to_string;\n@@ -1195,7 +1194,7 @@ mod test {\n         let name = \"<source>\".to_string();\n         let source = \"/// doc comment\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name.clone(), source, Vec::new(), &sess).unwrap();\n-        let doc = attr::first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n+        let doc = first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n         assert_eq!(doc.get(), \"/// doc comment\");\n \n         let source = \"/// doc comment\\r\\n/// line 2\\r\\nfn foo() {}\".to_string();\n@@ -1207,7 +1206,7 @@ mod test {\n \n         let source = \"/** doc comment\\r\\n *  with CRLF */\\r\\nfn foo() {}\".to_string();\n         let item = parse_item_from_source_str(name, source, Vec::new(), &sess).unwrap();\n-        let doc = attr::first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n+        let doc = first_attr_value_str_by_name(item.attrs.as_slice(), \"doc\").unwrap();\n         assert_eq!(doc.get(), \"/** doc comment\\n *  with CRLF */\");\n     }\n }"}]}