{"sha": "7a369938928cae16184f172b3f8a5d9d29d0453a", "node_id": "C_kwDOAAsO6NoAKDdhMzY5OTM4OTI4Y2FlMTYxODRmMTcyYjNmOGE1ZDlkMjlkMDQ1M2E", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-09-30T15:33:07Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-30T15:33:07Z"}, "message": "Merge #10400\n\n10400: fix: fix format string highlighting for `todo!` and `unimplemented!` r=jonas-schievink a=jonas-schievink\n\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/10394\r\n\r\nThese macros require us to see through the `const_format_args!` invocation the panic macros generate, for that we have to add it to our supported built-in macros.\r\n\r\nI've also made the macros in the test `#[macro_export]` (turns out they didn't all resolve correctly before this), which changes the output slightly.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "0788f4bdc8aa73be6ccbeb0202ab31ab2210a006", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0788f4bdc8aa73be6ccbeb0202ab31ab2210a006"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7a369938928cae16184f172b3f8a5d9d29d0453a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhVdizCRBK7hj4Ov3rIwAA63cIALAyme9GA+wRXEJmZk+RLMTl\nJJsr2nhr0owgfkNEvK7QJtZ+9aYodYWe5I5tIHC/xpJhJwlbtkdG6nfNYBY+Vm7M\nAoyW0e4XP5Qs+blaH4gEZsD6LKFS5sIaBOPlj39ubb10N27qsrURFKQFyUYKLu/P\nITC1ml4UycOD2KLKihRBFnGiSGIAprfvQnXI/SfoydMLpe8LBXst4o/Hdl2dc38Z\nXaanrZ2ysZ1M2PKNWs5AMlcbWxb6aNVR1RX04pBbdYAJw/dFXkCJHTmaadPb+XIO\n3Svd308c69yRVo2CxT1F8mehtWrRVohxv+pSOlLtpyAHwqQafSEn8DICbN9GzsE=\n=SJfo\n-----END PGP SIGNATURE-----\n", "payload": "tree 0788f4bdc8aa73be6ccbeb0202ab31ab2210a006\nparent 73562aa168d3c9437acc6f549214d7f585dda97d\nparent 4465685878fe7cb74e5b0ed88f5aa51f54e7f89d\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633015987 +0000\ncommitter GitHub <noreply@github.com> 1633015987 +0000\n\nMerge #10400\n\n10400: fix: fix format string highlighting for `todo!` and `unimplemented!` r=jonas-schievink a=jonas-schievink\n\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/10394\r\n\r\nThese macros require us to see through the `const_format_args!` invocation the panic macros generate, for that we have to add it to our supported built-in macros.\r\n\r\nI've also made the macros in the test `#[macro_export]` (turns out they didn't all resolve correctly before this), which changes the output slightly.\r\n\r\nbors r+\n\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7a369938928cae16184f172b3f8a5d9d29d0453a", "html_url": "https://github.com/rust-lang/rust/commit/7a369938928cae16184f172b3f8a5d9d29d0453a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7a369938928cae16184f172b3f8a5d9d29d0453a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "73562aa168d3c9437acc6f549214d7f585dda97d", "url": "https://api.github.com/repos/rust-lang/rust/commits/73562aa168d3c9437acc6f549214d7f585dda97d", "html_url": "https://github.com/rust-lang/rust/commit/73562aa168d3c9437acc6f549214d7f585dda97d"}, {"sha": "4465685878fe7cb74e5b0ed88f5aa51f54e7f89d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4465685878fe7cb74e5b0ed88f5aa51f54e7f89d", "html_url": "https://github.com/rust-lang/rust/commit/4465685878fe7cb74e5b0ed88f5aa51f54e7f89d"}], "stats": {"total": 45, "additions": 35, "deletions": 10}, "files": [{"sha": "3d63e05195bc1ad2314e368e5d19ef0c41befa84", "filename": "crates/hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=7a369938928cae16184f172b3f8a5d9d29d0453a", "patch": "@@ -103,6 +103,7 @@ register_builtin! {\n     (assert, Assert) => assert_expand,\n     (stringify, Stringify) => stringify_expand,\n     (format_args, FormatArgs) => format_args_expand,\n+    (const_format_args, ConstFormatArgs) => format_args_expand,\n     // format_args_nl only differs in that it adds a newline in the end,\n     // so we use the same stub expansion for now\n     (format_args_nl, FormatArgsNl) => format_args_expand,"}, {"sha": "9c844c6138dcc805f8825742235f84c88aca2182", "filename": "crates/hir_expand/src/name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fhir_expand%2Fsrc%2Fname.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fhir_expand%2Fsrc%2Fname.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fname.rs?ref=7a369938928cae16184f172b3f8a5d9d29d0453a", "patch": "@@ -211,6 +211,7 @@ pub mod known {\n         // Builtin macros\n         file,\n         column,\n+        const_format_args,\n         compile_error,\n         line,\n         module_path,"}, {"sha": "b755a945cdbce21a21b6f3439af0194d40b94772", "filename": "crates/ide/src/syntax_highlighting/format.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Fformat.rs?ref=7a369938928cae16184f172b3f8a5d9d29d0453a", "patch": "@@ -38,6 +38,9 @@ fn is_format_string(string: &ast::String) -> Option<()> {\n         return None;\n     }\n \n+    // NB: we match against `panic_2015`/`panic_2021` here because they have a special-cased arm for\n+    // `\"{}\"`, which otherwise wouldn't get highlighted.\n+\n     let first_literal = parent\n         .children_with_tokens()\n         .find_map(|it| it.as_token().cloned().and_then(ast::String::cast))?;"}, {"sha": "f6d9d9aa14a0b15d1326f6df7a7e1b6fef0bdd63", "filename": "crates/ide/src/syntax_highlighting/test_data/highlight_strings.html", "status": "modified", "additions": 16, "deletions": 6, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "raw_url": "https://github.com/rust-lang/rust/raw/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftest_data%2Fhighlight_strings.html?ref=7a369938928cae16184f172b3f8a5d9d29d0453a", "patch": "@@ -46,10 +46,14 @@\n     <span class=\"brace\">}</span><span class=\"parenthesis\">)</span>\n <span class=\"brace\">}</span>\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n-<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>fmt<span class=\"colon\">:</span>expr<span class=\"comma\">,</span> <span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>args<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">*</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"brace\">{</span><span class=\"brace\">{</span> <span class=\"comment\">/* compiler built-in */</span> <span class=\"brace\">}</span><span class=\"brace\">}</span><span class=\"semicolon\">;</span>\n-<span class=\"brace\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">const_format_args</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n+<span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">macro_export</span><span class=\"attribute attribute\">]</span>\n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">format_args_nl</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n <span class=\"keyword\">mod</span> <span class=\"module declaration\">panic</span> <span class=\"brace\">{</span>\n     <span class=\"keyword\">pub</span> <span class=\"keyword\">macro</span> <span class=\"macro declaration\">panic_2015</span> <span class=\"brace\">{</span>\n@@ -79,6 +83,11 @@\n <span class=\"attribute attribute\">#</span><span class=\"attribute attribute\">[</span><span class=\"builtin_attr attribute\">rustc_builtin_macro</span><span class=\"attribute attribute\">]</span>\n <span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">assert</span> <span class=\"brace\">{</span><span class=\"brace\">}</span>\n \n+<span class=\"keyword\">macro_rules</span><span class=\"punctuation\">!</span> <span class=\"macro declaration\">toho</span> <span class=\"brace\">{</span>\n+    <span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"not yet implemented\"</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"colon\">:</span>tt<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span> <span class=\"operator\">=</span><span class=\"angle\">&gt;</span> <span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>panic<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"not yet implemented: {}\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">$</span>crate<span class=\"colon\">:</span><span class=\"colon\">:</span>format_args<span class=\"punctuation\">!</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span><span class=\"parenthesis\">(</span><span class=\"punctuation\">$</span>arg<span class=\"parenthesis\">)</span><span class=\"punctuation\">+</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+<span class=\"brace\">}</span>\n+\n <span class=\"keyword\">fn</span> <span class=\"function declaration\">main</span><span class=\"parenthesis\">(</span><span class=\"parenthesis\">)</span> <span class=\"brace\">{</span>\n     <span class=\"comment\">// from https://doc.rust-lang.org/std/fmt/index.html</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello\"</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>                 <span class=\"comment\">// =&gt; \"Hello\"</span>\n@@ -104,7 +113,7 @@\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">+</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"punctuation\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">-</span><span class=\"numeric_literal\">5</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">#</span><span class=\"numeric_literal\">0</span><span class=\"numeric_literal\">10</span><span class=\"variable\">x</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">!\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">27</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">5</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"Hello </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">1</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> is </span><span class=\"format_specifier\">{</span><span class=\"numeric_literal\">2</span><span class=\"format_specifier\">:</span><span class=\"format_specifier\">.</span><span class=\"numeric_literal\">0</span><span class=\"format_specifier\">$</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">5</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"x\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0.01</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n@@ -127,9 +136,10 @@\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"escape_sequence\">\\x41</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> A <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"variable\">\u043d\u0438\u0447\u043e\u0441\u0438</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> \u043d\u0438\u0447\u043e\u0441\u0438 <span class=\"operator\">=</span> <span class=\"numeric_literal\">92</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n \n-    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> thingy<span class=\"comma\">,</span> n2<span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">println!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">:</span><span class=\"variable\">x</span><span class=\"format_specifier\">?</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> \"</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">thingy</span><span class=\"comma\">,</span> <span class=\"unresolved_reference\">n2</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">panic!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"more </span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n     <span class=\"macro\">assert!</span><span class=\"parenthesis\">(</span><span class=\"bool_literal\">true</span><span class=\"comma\">,</span> <span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\"> asdasd\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">1</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n+    <span class=\"macro\">toho!</span><span class=\"parenthesis\">(</span><span class=\"string_literal\">\"</span><span class=\"format_specifier\">{</span><span class=\"format_specifier\">}</span><span class=\"string_literal\">fmt\"</span><span class=\"comma\">,</span> <span class=\"numeric_literal\">0</span><span class=\"parenthesis\">)</span><span class=\"semicolon\">;</span>\n <span class=\"brace\">}</span></code></pre>\n\\ No newline at end of file"}, {"sha": "f5f7d8fe95166be533bcf619f3daf003a0d34cee", "filename": "crates/ide/src/syntax_highlighting/tests.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7a369938928cae16184f172b3f8a5d9d29d0453a/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsyntax_highlighting%2Ftests.rs?ref=7a369938928cae16184f172b3f8a5d9d29d0453a", "patch": "@@ -441,10 +441,14 @@ macro_rules! println {\n     })\n }\n #[rustc_builtin_macro]\n-macro_rules! format_args_nl {\n-    ($fmt:expr) => {{ /* compiler built-in */ }};\n-    ($fmt:expr, $($args:tt)*) => {{ /* compiler built-in */ }};\n-}\n+#[macro_export]\n+macro_rules! format_args {}\n+#[rustc_builtin_macro]\n+#[macro_export]\n+macro_rules! const_format_args {}\n+#[rustc_builtin_macro]\n+#[macro_export]\n+macro_rules! format_args_nl {}\n \n mod panic {\n     pub macro panic_2015 {\n@@ -474,6 +478,11 @@ macro_rules! panic {}\n #[rustc_builtin_macro]\n macro_rules! assert {}\n \n+macro_rules! toho {\n+    () => ($crate::panic!(\"not yet implemented\"));\n+    ($($arg:tt)+) => ($crate::panic!(\"not yet implemented: {}\", $crate::format_args!($($arg)+)));\n+}\n+\n fn main() {\n     // from https://doc.rust-lang.org/std/fmt/index.html\n     println!(\"Hello\");                 // => \"Hello\"\n@@ -527,6 +536,7 @@ fn main() {\n     panic!(\"more {}\", 1);\n     assert!(true, \"{}\", 1);\n     assert!(true, \"{} asdasd\", 1);\n+    toho!(\"{}fmt\", 0);\n }\"#\n         .trim(),\n         expect_file![\"./test_data/highlight_strings.html\"],"}]}