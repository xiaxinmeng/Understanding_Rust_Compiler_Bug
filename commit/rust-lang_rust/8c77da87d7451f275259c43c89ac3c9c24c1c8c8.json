{"sha": "8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "node_id": "C_kwDOAAsO6NoAKDhjNzdkYTg3ZDc0NTFmMjc1MjU5YzQzYzg5YWMzYzljMjRjMWM4Yzg", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-11-14T18:26:15Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-14T18:26:15Z"}, "message": "Rollup merge of #102470 - est31:stabilize_const_char_convert, r=joshtriplett\n\nStabilize const char convert\n\nSplit out `const_char_from_u32_unchecked` from `const_char_convert` and stabilize the rest, i.e. stabilize the following functions:\n\n```Rust\nimpl char {\n    pub const fn from_u32(self, i: u32) -> Option<char>;\n    pub const fn from_digit(self, num: u32, radix: u32) -> Option<char>;\n    pub const fn to_digit(self, radix: u32) -> Option<u32>;\n}\n\n// Available through core::char and std::char\nmod char {\n    pub const fn from_u32(i: u32) -> Option<char>;\n    pub const fn from_digit(num: u32, radix: u32) -> Option<char>;\n}\n```\n\nAnd put the following under the `from_u32_unchecked` const stability gate as it needs `Option::unwrap` which isn't const-stable (yet):\n\n```Rust\nimpl char {\n    pub const unsafe fn from_u32_unchecked(i: u32) -> char;\n}\n\n// Available through core::char and std::char\nmod char {\n    pub const unsafe fn from_u32_unchecked(i: u32) -> char;\n}\n```\n\ncc the tracking issue #89259 (which I'd like to keep open for `const_char_from_u32_unchecked`).", "tree": {"sha": "89fc15caaf1dd49a2053042c56308385a897e41b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89fc15caaf1dd49a2053042c56308385a897e41b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcohHCRBK7hj4Ov3rIwAAgTMIAHVEG383ptjCiU7b+G5/blyx\nlyg3pHHRRC1gPDv/muErqnIb6ay2/19pl6vNMMVuX5HXBg5BRkyiLtItbH3eB0dX\n9ai2FXG6yjX98gwpRgBB0BBHoFE+UHKSzIvB7VxrBRJKWuyO6GEb4Fk+1QFEb/YJ\nBaEXQplaMialLAcoF5WuBKHX/2a3ARe9qmm/AYyevOSEOC2Fs23dKiU6mXAXnfrK\nQpBQToJiqSPA/Ea+xFXSogCDGF4dxR7JTd9eknC+azPZpKHwNPQKa6mvZyOoEhqS\n7/u7NzAysnoI6jloYVPUaZhosIOJrJStLdqW3/fMEEp3WqL1iq1ig4WmA2+UwNI=\n=pPv3\n-----END PGP SIGNATURE-----\n", "payload": "tree 89fc15caaf1dd49a2053042c56308385a897e41b\nparent 9f3786b2b1f3450c796041175f08a7cae7da42f3\nparent 176c44c08ed797b5ddea893a0a292a7bee0d8f8c\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1668450375 +0100\ncommitter GitHub <noreply@github.com> 1668450375 +0100\n\nRollup merge of #102470 - est31:stabilize_const_char_convert, r=joshtriplett\n\nStabilize const char convert\n\nSplit out `const_char_from_u32_unchecked` from `const_char_convert` and stabilize the rest, i.e. stabilize the following functions:\n\n```Rust\nimpl char {\n    pub const fn from_u32(self, i: u32) -> Option<char>;\n    pub const fn from_digit(self, num: u32, radix: u32) -> Option<char>;\n    pub const fn to_digit(self, radix: u32) -> Option<u32>;\n}\n\n// Available through core::char and std::char\nmod char {\n    pub const fn from_u32(i: u32) -> Option<char>;\n    pub const fn from_digit(num: u32, radix: u32) -> Option<char>;\n}\n```\n\nAnd put the following under the `from_u32_unchecked` const stability gate as it needs `Option::unwrap` which isn't const-stable (yet):\n\n```Rust\nimpl char {\n    pub const unsafe fn from_u32_unchecked(i: u32) -> char;\n}\n\n// Available through core::char and std::char\nmod char {\n    pub const unsafe fn from_u32_unchecked(i: u32) -> char;\n}\n```\n\ncc the tracking issue #89259 (which I'd like to keep open for `const_char_from_u32_unchecked`).\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "html_url": "https://github.com/rust-lang/rust/commit/8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f3786b2b1f3450c796041175f08a7cae7da42f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f3786b2b1f3450c796041175f08a7cae7da42f3", "html_url": "https://github.com/rust-lang/rust/commit/9f3786b2b1f3450c796041175f08a7cae7da42f3"}, {"sha": "176c44c08ed797b5ddea893a0a292a7bee0d8f8c", "url": "https://api.github.com/repos/rust-lang/rust/commits/176c44c08ed797b5ddea893a0a292a7bee0d8f8c", "html_url": "https://github.com/rust-lang/rust/commit/176c44c08ed797b5ddea893a0a292a7bee0d8f8c"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "f1a51a550f5792216c8d723818e1a5f7ec38fd2c", "filename": "library/core/src/char/convert.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fconvert.rs?ref=8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "patch": "@@ -18,7 +18,6 @@ pub(super) const fn from_u32(i: u32) -> Option<char> {\n }\n \n /// Converts a `u32` to a `char`, ignoring validity. See [`char::from_u32_unchecked`].\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n #[inline]\n #[must_use]\n pub(super) const unsafe fn from_u32_unchecked(i: u32) -> char {"}, {"sha": "c05b68e30bc90c88d2f78746ab8e99e0d9b44563", "filename": "library/core/src/char/methods.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmethods.rs?ref=8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "patch": "@@ -140,7 +140,7 @@ impl char {\n     /// assert_eq!(None, c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_u32(i: u32) -> Option<char> {\n@@ -183,7 +183,7 @@ impl char {\n     /// assert_eq!('\u2764', c);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_unstable(feature = \"const_char_from_u32_unchecked\", issue = \"89259\")]\n     #[must_use]\n     #[inline]\n     pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n@@ -241,7 +241,7 @@ impl char {\n     /// let _c = char::from_digit(1, 37);\n     /// ```\n     #[stable(feature = \"assoc_char_funcs\", since = \"1.52.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use]\n     #[inline]\n     pub const fn from_digit(num: u32, radix: u32) -> Option<char> {\n@@ -338,7 +338,7 @@ impl char {\n     /// let _ = '1'.to_digit(37);\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-    #[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+    #[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n     #[must_use = \"this returns the result of the operation, \\\n                   without modifying the original\"]\n     #[inline]"}, {"sha": "55552376280ab045a5ecbf0bfa64c3a72b298aae", "filename": "library/core/src/char/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fchar%2Fmod.rs?ref=8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "patch": "@@ -110,7 +110,7 @@ pub fn decode_utf16<I: IntoIterator<Item = u16>>(iter: I) -> DecodeUtf16<I::Into\n \n /// Converts a `u32` to a `char`. Use [`char::from_u32`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n #[must_use]\n #[inline]\n pub const fn from_u32(i: u32) -> Option<char> {\n@@ -120,7 +120,7 @@ pub const fn from_u32(i: u32) -> Option<char> {\n /// Converts a `u32` to a `char`, ignoring validity. Use [`char::from_u32_unchecked`].\n /// instead.\n #[stable(feature = \"char_from_unchecked\", since = \"1.5.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_unstable(feature = \"const_char_from_u32_unchecked\", issue = \"89259\")]\n #[must_use]\n #[inline]\n pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n@@ -130,7 +130,7 @@ pub const unsafe fn from_u32_unchecked(i: u32) -> char {\n \n /// Converts a digit in the given radix to a `char`. Use [`char::from_digit`] instead.\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-#[rustc_const_unstable(feature = \"const_char_convert\", issue = \"89259\")]\n+#[rustc_const_stable(feature = \"const_char_convert\", since = \"CURRENT_RUSTC_VERSION\")]\n #[must_use]\n #[inline]\n pub const fn from_digit(num: u32, radix: u32) -> Option<char> {"}, {"sha": "2d12805270f93bed274ee92d93cc32b48cf19fb5", "filename": "library/core/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c77da87d7451f275259c43c89ac3c9c24c1c8c8/library%2Fcore%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Flib.rs?ref=8c77da87d7451f275259c43c89ac3c9c24c1c8c8", "patch": "@@ -104,7 +104,7 @@\n #![feature(const_black_box)]\n #![feature(const_caller_location)]\n #![feature(const_cell_into_inner)]\n-#![feature(const_char_convert)]\n+#![feature(const_char_from_u32_unchecked)]\n #![feature(const_clone)]\n #![feature(const_cmp)]\n #![feature(const_discriminant)]"}]}