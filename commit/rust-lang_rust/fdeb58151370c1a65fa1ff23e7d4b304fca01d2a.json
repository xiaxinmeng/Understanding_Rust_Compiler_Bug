{"sha": "fdeb58151370c1a65fa1ff23e7d4b304fca01d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZkZWI1ODE1MTM3MGMxYTY1ZmExZmYyM2U3ZDRiMzA0ZmNhMDFkMmE=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-05-31T20:31:03Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-06-18T21:54:51Z"}, "message": "Address review comments", "tree": {"sha": "29a4c291ab6a34da50f1e1c2f8bbda9cd4fe9376", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/29a4c291ab6a34da50f1e1c2f8bbda9cd4fe9376"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a", "html_url": "https://github.com/rust-lang/rust/commit/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d5f80c8414989660d66d822f3e2391f4efda2c7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/d5f80c8414989660d66d822f3e2391f4efda2c7b", "html_url": "https://github.com/rust-lang/rust/commit/d5f80c8414989660d66d822f3e2391f4efda2c7b"}], "stats": {"total": 39, "additions": 20, "deletions": 19}, "files": [{"sha": "1a4b12b03d8317716ed2e453e27545a4f68e7e82", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 20, "deletions": 19, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fdeb58151370c1a65fa1ff23e7d4b304fca01d2a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=fdeb58151370c1a65fa1ff23e7d4b304fca01d2a", "patch": "@@ -1618,7 +1618,7 @@ impl ExplicitOutlivesRequirements {\n             let mut from_start = true;\n             for (i, bound_span) in bound_spans {\n                 match last_merged_i {\n-                    // If the first bound is inferable, our span should also eat the leading `+`\n+                    // If the first bound is inferable, our span should also eat the leading `+`.\n                     None if i == 0 => {\n                         merged.push(bound_span.to(bounds[1].span().shrink_to_lo()));\n                         last_merged_i = Some(0);\n@@ -1732,15 +1732,17 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n                             hir::TyKind::Path(hir::QPath::Resolved(\n                                 None,\n                                 ref path,\n-                            )) => if let Res::Def(DefKind::TyParam, def_id) = path.res {\n-                                let index = ty_generics.param_def_id_to_index[&def_id];\n-                                (\n-                                    Self::lifetimes_outliving_type(inferred_outlives, index),\n-                                    &predicate.bounds,\n-                                    predicate.span,\n-                                )\n-                            } else {\n-                                continue\n+                            )) => {\n+                                if let Res::Def(DefKind::TyParam, def_id) = path.res {\n+                                    let index = ty_generics.param_def_id_to_index[&def_id];\n+                                    (\n+                                        Self::lifetimes_outliving_type(inferred_outlives, index),\n+                                        &predicate.bounds,\n+                                        predicate.span,\n+                                    )\n+                                } else {\n+                                    continue;\n+                                }\n                             },\n                             _ => { continue; }\n                         }\n@@ -1762,9 +1764,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n                 }\n \n                 // If all the bounds on a predicate were inferable and there are\n-                // further predicates, we want to eat the trailing comma\n+                // further predicates, we want to eat the trailing comma.\n                 if drop_predicate && i + 1 < num_predicates {\n-                    let next_predicate_span = hir_generics.where_clause.predicates[i+1].span();\n+                    let next_predicate_span = hir_generics.where_clause.predicates[i + 1].span();\n                     where_lint_spans.push(\n                         span.to(next_predicate_span.shrink_to_lo())\n                     );\n@@ -1787,13 +1789,12 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ExplicitOutlivesRequirements {\n                 // Extend the where clause back to the closing `>` of the\n                 // generics, except for tuple struct, which have the `where`\n                 // after the fields of the struct.\n-                let full_where_span = match item.node {\n-                    hir::ItemKind::Struct(hir::VariantData::Tuple(..), _) => {\n-                        where_span\n-                    }\n-                    _ => {\n-                        hir_generics.span.shrink_to_hi().to(where_span)\n-                    }\n+                let full_where_span = if let hir::ItemKind::Struct(hir::VariantData::Tuple(..), _)\n+                        = item.node\n+                {\n+                    where_span\n+                } else {\n+                    hir_generics.span.shrink_to_hi().to(where_span)\n                 };\n                 lint_spans.push(\n                     full_where_span"}]}