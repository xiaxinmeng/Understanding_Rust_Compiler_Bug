{"sha": "c4bdb8e516e9f927f37a324185905fb9be387f57", "node_id": "C_kwDOAAsO6NoAKGM0YmRiOGU1MTZlOWY5MjdmMzdhMzI0MTg1OTA1ZmI5YmUzODdmNTc", "commit": {"author": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-10-06T18:41:02Z"}, "committer": {"name": "feniljain", "email": "fkjainco@gmail.com", "date": "2022-10-24T07:48:24Z"}, "message": "feat: add config for inserting must_use in `generate_enum_as_method`", "tree": {"sha": "5ce39779ec5cade3a23c00cfe300aad4d46b6466", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ce39779ec5cade3a23c00cfe300aad4d46b6466"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c4bdb8e516e9f927f37a324185905fb9be387f57", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c4bdb8e516e9f927f37a324185905fb9be387f57", "html_url": "https://github.com/rust-lang/rust/commit/c4bdb8e516e9f927f37a324185905fb9be387f57", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c4bdb8e516e9f927f37a324185905fb9be387f57/comments", "author": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "feniljain", "id": 49019259, "node_id": "MDQ6VXNlcjQ5MDE5MjU5", "avatar_url": "https://avatars.githubusercontent.com/u/49019259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/feniljain", "html_url": "https://github.com/feniljain", "followers_url": "https://api.github.com/users/feniljain/followers", "following_url": "https://api.github.com/users/feniljain/following{/other_user}", "gists_url": "https://api.github.com/users/feniljain/gists{/gist_id}", "starred_url": "https://api.github.com/users/feniljain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/feniljain/subscriptions", "organizations_url": "https://api.github.com/users/feniljain/orgs", "repos_url": "https://api.github.com/users/feniljain/repos", "events_url": "https://api.github.com/users/feniljain/events{/privacy}", "received_events_url": "https://api.github.com/users/feniljain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64", "url": "https://api.github.com/repos/rust-lang/rust/commits/97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64", "html_url": "https://github.com/rust-lang/rust/commit/97b357e41b99ee3d5dd72a1640f6c74e4f4d6b64"}], "stats": {"total": 44, "additions": 39, "deletions": 5}, "files": [{"sha": "b273ebc85a50687c8afc65097e8f182a40c935a4", "filename": "crates/ide-assists/src/assist_config.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Fassist_config.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Fassist_config.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fassist_config.rs?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -14,4 +14,5 @@ pub struct AssistConfig {\n     pub allowed: Option<Vec<AssistKind>>,\n     pub insert_use: InsertUseConfig,\n     pub prefer_no_std: bool,\n+    pub assist_emit_must_use: bool,\n }"}, {"sha": "732ee49f66d2dfa1ab7e5cda571fe3d3b0edc36f", "filename": "crates/ide-assists/src/handlers/generate_enum_projection_method.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fgenerate_enum_projection_method.rs?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -124,6 +124,7 @@ fn generate_enum_projection_method(\n         happy_case,\n         sad_case,\n     } = props;\n+\n     let variant = ctx.find_node_at_offset::<ast::Variant>()?;\n     let variant_name = variant.name()?;\n     let parent_enum = ast::Adt::Enum(variant.parent_enum());\n@@ -144,7 +145,7 @@ fn generate_enum_projection_method(\n         ast::StructKind::Unit => return None,\n     };\n \n-    let fn_name = format!(\"{}_{}\", fn_name_prefix, &to_lower_snake_case(&variant_name.text()));\n+    let fn_name = format!(\"{fn_name_prefix}_{}\", &to_lower_snake_case(&variant_name.text()));\n \n     // Return early if we've found an existing new fn\n     let impl_def = find_struct_impl(ctx, &parent_enum, &fn_name)?;\n@@ -156,15 +157,31 @@ fn generate_enum_projection_method(\n         assist_description,\n         target,\n         |builder| {\n-            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{v} \"));\n-            let method = format!(\n-                \"    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type}{return_suffix} {{\n+            let vis = parent_enum.visibility().map_or(String::new(), |v| format!(\"{} \", v));\n+\n+            let field_type_syntax = field_type.syntax();\n+\n+            let method = if ctx.config.assist_emit_must_use\n+            {\n+                format!(\n+                    \"    #[must_use]\n+    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type_syntax}{return_suffix} {{\n+        if let Self::{variant_name}{pattern_suffix} = self {{\n+            {happy_case}({bound_name})\n+        }} else {{\n+            {sad_case}\n+        }}\n+    }}\")\n+            } else {\n+                format!(\n+                    \"    {vis}fn {fn_name}({self_param}) -> {return_prefix}{field_type_syntax}{return_suffix} {{\n         if let Self::{variant_name}{pattern_suffix} = self {{\n             {happy_case}({bound_name})\n         }} else {{\n             {sad_case}\n         }}\n-    }}\");\n+    }}\")\n+            };\n \n             add_method_to_adt(builder, &parent_enum, impl_def, &method);\n         },"}, {"sha": "92ced27c78aedf801b3c5eee80a066aea043be72", "filename": "crates/ide-assists/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Fide-assists%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Ftests.rs?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -30,6 +30,7 @@ pub(crate) const TEST_CONFIG: AssistConfig = AssistConfig {\n         skip_glob_imports: true,\n     },\n     prefer_no_std: false,\n+    assist_emit_must_use: false,\n };\n \n pub(crate) fn with_single_file(text: &str) -> (RootDatabase, FileId) {"}, {"sha": "21d7538fdc1eb6e3d4f654ef83db089662434f0b", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -56,6 +56,9 @@ mod patch_old_style;\n // parsing the old name.\n config_data! {\n     struct ConfigData {\n+        /// Whether to insert must_use derive macro while generating `as_` methods\n+        /// for enum variants.\n+        assist_emitMustUse: bool               = \"false\",\n         /// Placeholder expression to use for missing expressions in assists.\n         assist_expressionFillDefault: ExprFillDefaultDef              = \"\\\"todo\\\"\",\n \n@@ -1227,6 +1230,7 @@ impl Config {\n             allowed: None,\n             insert_use: self.insert_use_config(),\n             prefer_no_std: self.data.imports_prefer_no_std,\n+            assist_emit_must_use: self.data.assist_emitMustUse,\n         }\n     }\n "}, {"sha": "82ec1d56f2b2e83e8f81261eca624668230d98a8", "filename": "docs/user/generated_config.adoc", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/docs%2Fuser%2Fgenerated_config.adoc", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/docs%2Fuser%2Fgenerated_config.adoc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Fgenerated_config.adoc?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -1,3 +1,9 @@\n+[[rust-analyzer.assist.emitMustUse]]rust-analyzer.assist.emitMustUse (default: `false`)::\n++\n+--\n+Whether to insert must_use derive macro while generating `as_` methods\n+for enum variants.\n+--\n [[rust-analyzer.assist.expressionFillDefault]]rust-analyzer.assist.expressionFillDefault (default: `\"todo\"`)::\n +\n --"}, {"sha": "1446a6037721049105e785b5bc7d6fd7574c3607", "filename": "editors/code/package.json", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c4bdb8e516e9f927f37a324185905fb9be387f57/editors%2Fcode%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/c4bdb8e516e9f927f37a324185905fb9be387f57/editors%2Fcode%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/editors%2Fcode%2Fpackage.json?ref=c4bdb8e516e9f927f37a324185905fb9be387f57", "patch": "@@ -397,6 +397,11 @@\n                     \"type\": \"boolean\"\n                 },\n                 \"$generated-start\": {},\n+                \"rust-analyzer.assist.emitMustUse\": {\n+                    \"markdownDescription\": \"Whether to insert must_use derive macro while generating `as_` methods\\nfor enum variants.\",\n+                    \"default\": false,\n+                    \"type\": \"boolean\"\n+                },\n                 \"rust-analyzer.assist.expressionFillDefault\": {\n                     \"markdownDescription\": \"Placeholder expression to use for missing expressions in assists.\",\n                     \"default\": \"todo\","}]}