{"sha": "f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1YWIxMTJlNmIwODNhYjIwZmRjZjllMmZmZjdkZGU0YTg1OTQwYjA=", "commit": {"author": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-09T10:41:26Z"}, "committer": {"name": "James Miller", "email": "bladeon@gmail.com", "date": "2013-05-09T10:41:54Z"}, "message": "Replace init() with uninit() where appropriate", "tree": {"sha": "f7877f80e6bc634d3914139a6a44be436c79149f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f7877f80e6bc634d3914139a6a44be436c79149f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "html_url": "https://github.com/rust-lang/rust/commit/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/comments", "author": null, "committer": null, "parents": [{"sha": "050c744c23a8e01407452bc64ca63f92554afee2", "url": "https://api.github.com/repos/rust-lang/rust/commits/050c744c23a8e01407452bc64ca63f92554afee2", "html_url": "https://github.com/rust-lang/rust/commit/050c744c23a8e01407452bc64ca63f92554afee2"}], "stats": {"total": 23, "additions": 9, "deletions": 14}, "files": [{"sha": "fe5da8bae693f69bcddab5178965030a3cd4657e", "filename": "src/libcore/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibcore%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibcore%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcast.rs?ref=f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "patch": "@@ -25,7 +25,7 @@ pub mod rusti {\n \n /// Casts the value at `src` to U. The two types must have the same length.\n pub unsafe fn transmute_copy<T, U>(src: &T) -> U {\n-    let mut dest: U = unstable::intrinsics::init();\n+    let mut dest: U = unstable::intrinsics::uninit();\n     {\n         let dest_ptr: *mut u8 = rusti::transmute(&mut dest);\n         let src_ptr: *u8 = rusti::transmute(src);"}, {"sha": "ea780ff9bdd953f7316271b2acb17e10715a4333", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "patch": "@@ -591,8 +591,7 @@ pub fn pop<T>(v: &mut ~[T]) -> T {\n     }\n     let valptr = ptr::to_mut_unsafe_ptr(&mut v[ln - 1u]);\n     unsafe {\n-        // FIXME #4204: Should be uninit() - we don't need this zeroed\n-        let mut val = intrinsics::init();\n+        let mut val = intrinsics::uninit();\n         val <-> *valptr;\n         raw::set_len(v, ln - 1u);\n         val\n@@ -666,8 +665,7 @@ pub fn push_all_move<T>(v: &mut ~[T], mut rhs: ~[T]) {\n     unsafe {\n         do as_mut_buf(rhs) |p, len| {\n             for uint::range(0, len) |i| {\n-                // FIXME #4204 Should be uninit() - don't need to zero\n-                let mut x = intrinsics::init();\n+                let mut x = intrinsics::uninit();\n                 x <-> *ptr::mut_offset(p, i);\n                 push(&mut *v, x);\n             }\n@@ -683,8 +681,7 @@ pub fn truncate<T>(v: &mut ~[T], newlen: uint) {\n         unsafe {\n             // This loop is optimized out for non-drop types.\n             for uint::range(newlen, oldlen) |i| {\n-                // FIXME #4204 Should be uninit() - don't need to zero\n-                let mut dropped = intrinsics::init();\n+                let mut dropped = intrinsics::uninit();\n                 dropped <-> *ptr::mut_offset(p, i);\n             }\n         }\n@@ -709,9 +706,7 @@ pub fn dedup<T:Eq>(v: &mut ~[T]) {\n                 // last_written < next_to_read < ln\n                 if *ptr::mut_offset(p, next_to_read) ==\n                     *ptr::mut_offset(p, last_written) {\n-                    // FIXME #4204 Should be uninit() - don't need to\n-                    // zero\n-                    let mut dropped = intrinsics::init();\n+                    let mut dropped = intrinsics::uninit();\n                     dropped <-> *ptr::mut_offset(p, next_to_read);\n                 } else {\n                     last_written += 1;"}, {"sha": "2ca13c43d342e8f087c6ba7bb40f5d2a26da6425", "filename": "src/libstd/priority_queue.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibstd%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibstd%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpriority_queue.rs?ref=f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "patch": "@@ -139,7 +139,7 @@ pub impl <T:Ord> PriorityQueue<T> {\n             while pos > start {\n                 let parent = (pos - 1) >> 1;\n                 if new > self.data[parent] {\n-                    let mut x = rusti::init();\n+                    let mut x = rusti::uninit();\n                     x <-> self.data[parent];\n                     rusti::move_val_init(&mut self.data[pos], x);\n                     pos = parent;\n@@ -162,7 +162,7 @@ pub impl <T:Ord> PriorityQueue<T> {\n                 if right < end && !(self.data[child] > self.data[right]) {\n                     child = right;\n                 }\n-                let mut x = rusti::init();\n+                let mut x = rusti::uninit();\n                 x <-> self.data[child];\n                 rusti::move_val_init(&mut self.data[pos], x);\n                 pos = child;"}, {"sha": "3095bdd16d0bfacaf6b98356110c5c7d881f11d7", "filename": "src/libstd/rc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibstd%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0/src%2Flibstd%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frc.rs?ref=f5ab112e6b083ab20fdcf9e2fff7dde4a85940b0", "patch": "@@ -51,7 +51,7 @@ impl<T: Owned> Drop for Rc<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                let mut x = intrinsics::init();\n+                let mut x = intrinsics::uninit();\n                 x <-> *self.ptr;\n                 free(self.ptr as *c_void)\n             }\n@@ -159,7 +159,7 @@ impl<T: Owned> Drop for RcMut<T> {\n         unsafe {\n             (*self.ptr).count -= 1;\n             if (*self.ptr).count == 0 {\n-                let mut x = rusti::init();\n+                let mut x = rusti::uninit();\n                 x <-> *self.ptr;\n                 free(self.ptr as *c_void)\n             }"}]}