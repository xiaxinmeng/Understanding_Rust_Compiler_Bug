{"sha": "9e4ebdb9d612bc8d493f448386dbd99afb856818", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllNGViZGI5ZDYxMmJjOGQ0OTNmNDQ4Mzg2ZGJkOTlhZmI4NTY4MTg=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-18T19:37:18Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2013-07-23T22:23:02Z"}, "message": "extra: add consume iter to treemap.", "tree": {"sha": "fa1f48576962cb2417b38c704b07ac2916fb435e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fa1f48576962cb2417b38c704b07ac2916fb435e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9e4ebdb9d612bc8d493f448386dbd99afb856818", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9e4ebdb9d612bc8d493f448386dbd99afb856818", "html_url": "https://github.com/rust-lang/rust/commit/9e4ebdb9d612bc8d493f448386dbd99afb856818", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9e4ebdb9d612bc8d493f448386dbd99afb856818/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "31c180e5f5da0e27c60a3bf02da182f19c66cf8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/31c180e5f5da0e27c60a3bf02da182f19c66cf8f", "html_url": "https://github.com/rust-lang/rust/commit/31c180e5f5da0e27c60a3bf02da182f19c66cf8f"}], "stats": {"total": 63, "additions": 63, "deletions": 0}, "files": [{"sha": "4ad1f56a9ae54a77e610dc5df53f7011a9f5c4ec", "filename": "src/libextra/treemap.rs", "status": "modified", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9e4ebdb9d612bc8d493f448386dbd99afb856818/src%2Flibextra%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e4ebdb9d612bc8d493f448386dbd99afb856818/src%2Flibextra%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ftreemap.rs?ref=9e4ebdb9d612bc8d493f448386dbd99afb856818", "patch": "@@ -204,6 +204,19 @@ impl<K: TotalOrd, V> TreeMap<K, V> {\n     pub fn iter<'a>(&'a self) -> TreeMapIterator<'a, K, V> {\n         TreeMapIterator{stack: ~[], node: &self.root, remaining: self.length}\n     }\n+\n+    /// Get a lazy iterator that consumes the treemap.\n+    pub fn consume_iter(self) -> TreeMapConsumeIterator<K, V> {\n+        let TreeMap { root: root, length: length } = self;\n+        let stk = match root {\n+            None => ~[],\n+            Some(~tn) => ~[tn]\n+        };\n+        TreeMapConsumeIterator {\n+            stack: stk,\n+            remaining: length\n+        }\n+    }\n }\n \n /// Lazy forward iterator over a map\n@@ -241,6 +254,56 @@ impl<'self, K, V> Iterator<(&'self K, &'self V)> for TreeMapIterator<'self, K, V\n     }\n }\n \n+/// Lazy forward iterator over a map that consumes the map while iterating\n+pub struct TreeMapConsumeIterator<K, V> {\n+    priv stack: ~[TreeNode<K, V>],\n+    priv remaining: uint\n+}\n+\n+impl<K, V> Iterator<(K, V)> for TreeMapConsumeIterator<K,V> {\n+    #[inline]\n+    fn next(&mut self) -> Option<(K, V)> {\n+        while !self.stack.is_empty() {\n+            let TreeNode {\n+                key: key,\n+                value: value,\n+                left: left,\n+                right: right,\n+                level: level\n+            } = self.stack.pop();\n+\n+            match left {\n+                Some(~left) => {\n+                    let n = TreeNode {\n+                        key: key,\n+                        value: value,\n+                        left: None,\n+                        right: right,\n+                        level: level\n+                    };\n+                    self.stack.push(n);\n+                    self.stack.push(left);\n+                }\n+                None => {\n+                    match right {\n+                        Some(~right) => self.stack.push(right),\n+                        None => ()\n+                    }\n+                    self.remaining -= 1;\n+                    return Some((key, value))\n+                }\n+            }\n+        }\n+        None\n+    }\n+\n+    #[inline]\n+    fn size_hint(&self) -> (uint, Option<uint>) {\n+        (self.remaining, Some(self.remaining))\n+    }\n+\n+}\n+\n impl<'self, T> Iterator<&'self T> for TreeSetIterator<'self, T> {\n     /// Advance the iterator to the next node (in order). If there are no more nodes, return `None`.\n     #[inline]"}]}