{"sha": "edc096d820c549319aaa9662412beb2deec39441", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzA5NmQ4MjBjNTQ5MzE5YWFhOTY2MjQxMmJlYjJkZWVjMzk0NDE=", "commit": {"author": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-24T20:48:57Z"}, "committer": {"name": "Steve Klabnik", "email": "steve@steveklabnik.com", "date": "2015-03-31T03:12:38Z"}, "message": "Document std::borrow with examples", "tree": {"sha": "ff2acd1d648ee557cd8944ebea632d6425d8c5e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ff2acd1d648ee557cd8944ebea632d6425d8c5e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc096d820c549319aaa9662412beb2deec39441", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc096d820c549319aaa9662412beb2deec39441", "html_url": "https://github.com/rust-lang/rust/commit/edc096d820c549319aaa9662412beb2deec39441", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc096d820c549319aaa9662412beb2deec39441/comments", "author": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "committer": {"login": "steveklabnik", "id": 27786, "node_id": "MDQ6VXNlcjI3Nzg2", "avatar_url": "https://avatars.githubusercontent.com/u/27786?v=4", "gravatar_id": "", "url": "https://api.github.com/users/steveklabnik", "html_url": "https://github.com/steveklabnik", "followers_url": "https://api.github.com/users/steveklabnik/followers", "following_url": "https://api.github.com/users/steveklabnik/following{/other_user}", "gists_url": "https://api.github.com/users/steveklabnik/gists{/gist_id}", "starred_url": "https://api.github.com/users/steveklabnik/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/steveklabnik/subscriptions", "organizations_url": "https://api.github.com/users/steveklabnik/orgs", "repos_url": "https://api.github.com/users/steveklabnik/repos", "events_url": "https://api.github.com/users/steveklabnik/events{/privacy}", "received_events_url": "https://api.github.com/users/steveklabnik/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "14192d6df5cc714e5c9a3ca70b08f2514d977be2", "url": "https://api.github.com/repos/rust-lang/rust/commits/14192d6df5cc714e5c9a3ca70b08f2514d977be2", "html_url": "https://github.com/rust-lang/rust/commit/14192d6df5cc714e5c9a3ca70b08f2514d977be2"}], "stats": {"total": 56, "additions": 56, "deletions": 0}, "files": [{"sha": "63f5c838bafd0998672e34bc466d0b13a90792db", "filename": "src/libcollections/borrow.rs", "status": "modified", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/edc096d820c549319aaa9662412beb2deec39441/src%2Flibcollections%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc096d820c549319aaa9662412beb2deec39441/src%2Flibcollections%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fborrow.rs?ref=edc096d820c549319aaa9662412beb2deec39441", "patch": "@@ -40,6 +40,24 @@ use self::Cow::*;\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait Borrow<Borrowed: ?Sized> {\n     /// Immutably borrow from an owned value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::Borrow;\n+    ///\n+    /// fn check<T: Borrow<str>>(s: T) {\n+    ///     assert_eq!(\"Hello\", s.borrow());\n+    /// }\n+    ///\n+    /// let s = \"Hello\".to_string();\n+    ///\n+    /// check(s);\n+    ///\n+    /// let s = \"Hello\";\n+    ///\n+    /// check(s);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn borrow(&self) -> &Borrowed;\n }\n@@ -50,6 +68,20 @@ pub trait Borrow<Borrowed: ?Sized> {\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait BorrowMut<Borrowed: ?Sized> : Borrow<Borrowed> {\n     /// Mutably borrow from an owned value.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::BorrowMut;\n+    ///\n+    /// fn check<T: BorrowMut<[i32]>>(mut v: T) {\n+    ///     assert_eq!(&mut [1, 2, 3], v.borrow_mut());\n+    /// }\n+    ///\n+    /// let v = vec![1, 2, 3];\n+    ///\n+    /// check(v);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn borrow_mut(&mut self) -> &mut Borrowed;\n }\n@@ -171,6 +203,18 @@ impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned {\n     /// Acquire a mutable reference to the owned form of the data.\n     ///\n     /// Copies the data if it is not already owned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let mut cow: Cow<[_]> = Cow::Owned(vec![1, 2, 3]);\n+    ///\n+    /// let hello = cow.to_mut();\n+    ///\n+    /// assert_eq!(&[1, 2, 3], hello);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn to_mut(&mut self) -> &mut <B as ToOwned>::Owned {\n         match *self {\n@@ -185,6 +229,18 @@ impl<'a, B: ?Sized> Cow<'a, B> where B: ToOwned {\n     /// Extract the owned data.\n     ///\n     /// Copies the data if it is not already owned.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// use std::borrow::Cow;\n+    ///\n+    /// let cow: Cow<[_]> = Cow::Owned(vec![1, 2, 3]);\n+    ///\n+    /// let hello = cow.into_owned();\n+    ///\n+    /// assert_eq!(vec![1, 2, 3], hello);\n+    /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     pub fn into_owned(self) -> <B as ToOwned>::Owned {\n         match self {"}]}