{"sha": "d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQzNzdjZjViM2ZiYWFlNGJhYTY3YjRmMjlhOTUyYjU2NWVmMWE4MTQ=", "commit": {"author": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-07T22:00:26Z"}, "committer": {"name": "Josh Driver", "email": "keeperofdakeys@gmail.com", "date": "2016-11-07T22:00:26Z"}, "message": "Rename KNOWN_ATTRS to BUILT_ATTRS, and create KNOWN_ATTRS\n\nKNOWN_ATTRIBUTES should really be named BUILT_ATTRIBUTES,\nwhile KNOWN_ATTRIBUTES should be used to mark attributes\nas known, similar to USED_ATTRIBUTES.", "tree": {"sha": "a452a73b2fab7d8cf3d4c265642c71c9f30f159d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a452a73b2fab7d8cf3d4c265642c71c9f30f159d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "html_url": "https://github.com/rust-lang/rust/commit/d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/comments", "author": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "committer": {"login": "keeperofdakeys", "id": 141626, "node_id": "MDQ6VXNlcjE0MTYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/141626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/keeperofdakeys", "html_url": "https://github.com/keeperofdakeys", "followers_url": "https://api.github.com/users/keeperofdakeys/followers", "following_url": "https://api.github.com/users/keeperofdakeys/following{/other_user}", "gists_url": "https://api.github.com/users/keeperofdakeys/gists{/gist_id}", "starred_url": "https://api.github.com/users/keeperofdakeys/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/keeperofdakeys/subscriptions", "organizations_url": "https://api.github.com/users/keeperofdakeys/orgs", "repos_url": "https://api.github.com/users/keeperofdakeys/repos", "events_url": "https://api.github.com/users/keeperofdakeys/events{/privacy}", "received_events_url": "https://api.github.com/users/keeperofdakeys/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cae6ab1c458ade22b4c228fcd4195917c96e2465", "url": "https://api.github.com/repos/rust-lang/rust/commits/cae6ab1c458ade22b4c228fcd4195917c96e2465", "html_url": "https://github.com/rust-lang/rust/commit/cae6ab1c458ade22b4c228fcd4195917c96e2465"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "ca47db6ccee2ed81d57d89ea7c9699c98b881379", "filename": "src/librustc_lint/unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibrustc_lint%2Funused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibrustc_lint%2Funused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Funused.rs?ref=d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "patch": "@@ -19,7 +19,7 @@ use std::collections::hash_map::Entry::{Occupied, Vacant};\n \n use syntax::ast;\n use syntax::attr;\n-use syntax::feature_gate::{KNOWN_ATTRIBUTES, AttributeType};\n+use syntax::feature_gate::{BUILTIN_ATTRIBUTES, AttributeType};\n use syntax::parse::token::keywords;\n use syntax::ptr::P;\n use syntax_pos::Span;\n@@ -245,7 +245,7 @@ impl LateLintPass for UnusedAttributes {\n         debug!(\"checking attribute: {:?}\", attr);\n \n         // Note that check_name() marks the attribute as used if it matches.\n-        for &(ref name, ty, _) in KNOWN_ATTRIBUTES {\n+        for &(ref name, ty, _) in BUILTIN_ATTRIBUTES {\n             match ty {\n                 AttributeType::Whitelisted if attr.check_name(name) => {\n                     debug!(\"{:?} is Whitelisted\", name);\n@@ -267,7 +267,7 @@ impl LateLintPass for UnusedAttributes {\n             debug!(\"Emitting warning for: {:?}\", attr);\n             cx.span_lint(UNUSED_ATTRIBUTES, attr.span, \"unused attribute\");\n             // Is it a builtin attribute that must be used at the crate level?\n-            let known_crate = KNOWN_ATTRIBUTES.iter()\n+            let known_crate = BUILTIN_ATTRIBUTES.iter()\n                 .find(|&&(name, ty, _)| attr.name() == name && ty == AttributeType::CrateLevel)\n                 .is_some();\n "}, {"sha": "57a936bf9b0cf40c09b082571f186e698c28ab0a", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 25, "deletions": 1, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "patch": "@@ -32,7 +32,8 @@ use std::cell::{RefCell, Cell};\n use std::collections::HashSet;\n \n thread_local! {\n-    static USED_ATTRS: RefCell<Vec<u64>> = RefCell::new(Vec::new())\n+    static USED_ATTRS: RefCell<Vec<u64>> = RefCell::new(Vec::new());\n+    static KNOWN_ATTRS: RefCell<Vec<u64>> = RefCell::new(Vec::new());\n }\n \n enum AttrError {\n@@ -81,6 +82,29 @@ pub fn is_used(attr: &Attribute) -> bool {\n     })\n }\n \n+pub fn mark_known(attr: &Attribute) {\n+    debug!(\"Marking {:?} as known.\", attr);\n+    let AttrId(id) = attr.node.id;\n+    KNOWN_ATTRS.with(|slot| {\n+        let idx = (id / 64) as usize;\n+        let shift = id % 64;\n+        if slot.borrow().len() <= idx {\n+            slot.borrow_mut().resize(idx + 1, 0);\n+        }\n+        slot.borrow_mut()[idx] |= 1 << shift;\n+    });\n+}\n+\n+pub fn is_known(attr: &Attribute) -> bool {\n+    let AttrId(id) = attr.node.id;\n+    KNOWN_ATTRS.with(|slot| {\n+        let idx = (id / 64) as usize;\n+        let shift = id % 64;\n+        slot.borrow().get(idx).map(|bits| bits & (1 << shift) != 0)\n+            .unwrap_or(false)\n+    })\n+}\n+\n impl NestedMetaItem {\n     /// Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.\n     pub fn meta_item(&self) -> Option<&P<MetaItem>> {"}, {"sha": "f543eae81793601339f784730bfe5c6bef8746f9", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d377cf5b3fbaae4baa67b4f29a952b565ef1a814/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d377cf5b3fbaae4baa67b4f29a952b565ef1a814", "patch": "@@ -417,11 +417,11 @@ macro_rules! cfg_fn {\n }\n \n pub fn deprecated_attributes() -> Vec<&'static (&'static str, AttributeType, AttributeGate)> {\n-    KNOWN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n+    BUILTIN_ATTRIBUTES.iter().filter(|a| a.2.is_deprecated()).collect()\n }\n \n // Attributes that have a special meaning to rustc or rustdoc\n-pub const KNOWN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n+pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeGate)] = &[\n     // Normal attributes\n \n     (\"warn\", Normal, Ungated),\n@@ -790,12 +790,12 @@ impl<'a> Context<'a> {\n     fn check_attribute(&self, attr: &ast::Attribute, is_macro: bool) {\n         debug!(\"check_attribute(attr = {:?})\", attr);\n         let name = &*attr.name();\n-        for &(n, ty, ref gateage) in KNOWN_ATTRIBUTES {\n+        for &(n, ty, ref gateage) in BUILTIN_ATTRIBUTES {\n             if n == name {\n                 if let &Gated(_, ref name, ref desc, ref has_feature) = gateage {\n                     gate_feature_fn!(self, has_feature, attr.span, name, desc);\n                 }\n-                debug!(\"check_attribute: {:?} is known, {:?}, {:?}\", name, ty, gateage);\n+                debug!(\"check_attribute: {:?} is builtin, {:?}, {:?}\", name, ty, gateage);\n                 return;\n             }\n         }\n@@ -815,6 +815,8 @@ impl<'a> Context<'a> {\n                            are reserved for internal compiler diagnostics\");\n         } else if name.starts_with(\"derive_\") {\n             gate_feature!(self, custom_derive, attr.span, EXPLAIN_DERIVE_UNDERSCORE);\n+        } else if attr::is_known(attr) {\n+            debug!(\"check_attribute: {:?} is known\", name);\n         } else {\n             // Only run the custom attribute lint during regular\n             // feature gate checking. Macro gating runs"}]}