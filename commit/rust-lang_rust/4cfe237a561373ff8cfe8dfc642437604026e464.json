{"sha": "4cfe237a561373ff8cfe8dfc642437604026e464", "node_id": "C_kwDOAAsO6NoAKDRjZmUyMzdhNTYxMzczZmY4Y2ZlOGRmYzY0MjQzNzYwNDAyNmU0NjQ", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-10-06T09:38:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-10-06T09:38:58Z"}, "message": "Merge #10459\n\n10459: feat: Add generate constant assist r=Veykril a=longfangsong\n\nClose #10330.\r\n![demo(1)](https://user-images.githubusercontent.com/13777628/135885262-c80de86f-5555-4f84-9508-822243f8a876.gif)\r\n\r\n\n\nCo-authored-by: longfangsong <longfangsong@icloud.com>\nCo-authored-by: \u9f99\u65b9\u6dde <longfangsong@icloud.com>", "tree": {"sha": "d29b746bc3de1f01e07e75d6575422b29af8cfd2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d29b746bc3de1f01e07e75d6575422b29af8cfd2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cfe237a561373ff8cfe8dfc642437604026e464", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhXW6yCRBK7hj4Ov3rIwAAeGIIAIbJzJ54f0OF5BwFY5bRN84W\nKSOYHBA0lbdC5esTpFf6kRZWqEiZaWTB2MPUPl2skBHZQyCOJrMhYgXElUkUZz+R\nhEccxa3rpXv/n6m474hamEic/gShRpSgd9eNDQzT2vjSkenQFmTq8HQouwZMT0Zh\nw1hp41U69LqhfMLaZ6H7ZSnWCEMrKUN5i04R8QGb/iS9/2/k+VtncERAx5mppCHf\nMupwo0aVFc8KNX1nHcNl+ERYVcKWdp8KOX7mDpSFFjKA88LcZ8Nhq/MotZomfs1N\nsmqMHDHD3x+w7yOHtXbywW2balYP0iTrBAVQ3bP90iAKZTXD70oBqTXiFXqgNjk=\n=Reii\n-----END PGP SIGNATURE-----\n", "payload": "tree d29b746bc3de1f01e07e75d6575422b29af8cfd2\nparent 5ff992465e91346f8499ad125675e90f79c70ce0\nparent 3fde682bcfda4d2dc435330c9f0733b90d7c54c6\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1633513138 +0000\ncommitter GitHub <noreply@github.com> 1633513138 +0000\n\nMerge #10459\n\n10459: feat: Add generate constant assist r=Veykril a=longfangsong\n\nClose #10330.\r\n![demo(1)](https://user-images.githubusercontent.com/13777628/135885262-c80de86f-5555-4f84-9508-822243f8a876.gif)\r\n\r\n\n\nCo-authored-by: longfangsong <longfangsong@icloud.com>\nCo-authored-by: \u9f99\u65b9\u6dde <longfangsong@icloud.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cfe237a561373ff8cfe8dfc642437604026e464", "html_url": "https://github.com/rust-lang/rust/commit/4cfe237a561373ff8cfe8dfc642437604026e464", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cfe237a561373ff8cfe8dfc642437604026e464/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ff992465e91346f8499ad125675e90f79c70ce0", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ff992465e91346f8499ad125675e90f79c70ce0", "html_url": "https://github.com/rust-lang/rust/commit/5ff992465e91346f8499ad125675e90f79c70ce0"}, {"sha": "3fde682bcfda4d2dc435330c9f0733b90d7c54c6", "url": "https://api.github.com/repos/rust-lang/rust/commits/3fde682bcfda4d2dc435330c9f0733b90d7c54c6", "html_url": "https://github.com/rust-lang/rust/commit/3fde682bcfda4d2dc435330c9f0733b90d7c54c6"}], "stats": {"total": 143, "additions": 143, "deletions": 0}, "files": [{"sha": "52ae60e2edf643b52dd975562dddba1fa2773c8c", "filename": "crates/ide_assists/src/handlers/generate_constant.rs", "status": "added", "additions": 119, "deletions": 0, "changes": 119, "blob_url": "https://github.com/rust-lang/rust/blob/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Fhandlers%2Fgenerate_constant.rs?ref=4cfe237a561373ff8cfe8dfc642437604026e464", "patch": "@@ -0,0 +1,119 @@\n+use crate::assist_context::{AssistContext, Assists};\n+use hir::HirDisplay;\n+use ide_db::{\n+    assists::{AssistId, AssistKind},\n+    defs::NameRefClass,\n+};\n+use syntax::{\n+    ast::{self, edit::IndentLevel},\n+    AstNode,\n+};\n+\n+// Assist: generate_constant\n+//\n+// Generate a named constant.\n+//\n+// ```\n+// struct S { i: usize }\n+// impl S { pub fn new(n: usize) {} }\n+// fn main() {\n+//     let v = S::new(CAPA$0CITY);\n+// }\n+// ```\n+// ->\n+// ```\n+// struct S { i: usize }\n+// impl S { pub fn new(n: usize) {} }\n+// fn main() {\n+//     const CAPACITY: usize = $0;\n+//     let v = S::new(CAPACITY);\n+// }\n+// ```\n+\n+pub(crate) fn generate_constant(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n+    let constant_token = ctx.find_node_at_offset::<ast::NameRef>()?;\n+    let expr = constant_token.syntax().ancestors().find_map(ast::Expr::cast)?;\n+    let statement = expr.syntax().ancestors().find_map(ast::Stmt::cast)?;\n+    let ty = ctx.sema.type_of_expr(&expr)?;\n+    let scope = ctx.sema.scope(statement.syntax());\n+    let module = scope.module()?;\n+    let type_name = ty.original().display_source_code(ctx.db(), module.into()).ok()?;\n+    let indent = IndentLevel::from_node(statement.syntax());\n+    if constant_token.to_string().chars().any(|it| !(it.is_uppercase() || it == '_')) {\n+        cov_mark::hit!(not_constant_name);\n+        return None;\n+    }\n+    if NameRefClass::classify(&ctx.sema, &constant_token).is_some() {\n+        cov_mark::hit!(already_defined);\n+        return None;\n+    }\n+    let target = statement.syntax().parent()?.text_range();\n+    acc.add(\n+        AssistId(\"generate_constant\", AssistKind::QuickFix),\n+        \"Generate constant\",\n+        target,\n+        |builder| {\n+            builder.insert(\n+                statement.syntax().text_range().start(),\n+                format!(\"const {}: {} = $0;\\n{}\", constant_token, type_name, indent),\n+            );\n+        },\n+    )\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+    use crate::tests::{check_assist, check_assist_not_applicable};\n+\n+    #[test]\n+    fn test_trivial() {\n+        check_assist(\n+            generate_constant,\n+            r#\"struct S { i: usize }\n+impl S {\n+    pub fn new(n: usize) {}\n+}\n+fn main() {\n+    let v = S::new(CAPA$0CITY);\n+}\"#,\n+            r#\"struct S { i: usize }\n+impl S {\n+    pub fn new(n: usize) {}\n+}\n+fn main() {\n+    const CAPACITY: usize = $0;\n+    let v = S::new(CAPACITY);\n+}\"#,\n+        );\n+    }\n+    #[test]\n+    fn test_wont_apply_when_defined() {\n+        cov_mark::check!(already_defined);\n+        check_assist_not_applicable(\n+            generate_constant,\n+            r#\"struct S { i: usize }\n+impl S {\n+    pub fn new(n: usize) {}\n+}\n+fn main() {\n+    const CAPACITY: usize = 10;\n+    let v = S::new(CAPAC$0ITY);\n+}\"#,\n+        );\n+    }\n+    #[test]\n+    fn test_wont_apply_when_maybe_not_constant() {\n+        cov_mark::check!(not_constant_name);\n+        check_assist_not_applicable(\n+            generate_constant,\n+            r#\"struct S { i: usize }\n+impl S {\n+    pub fn new(n: usize) {}\n+}\n+fn main() {\n+    let v = S::new(capa$0city);\n+}\"#,\n+        );\n+    }\n+}"}, {"sha": "bec51c508b07794315b5ee988260faa40ab0d0e8", "filename": "crates/ide_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Flib.rs?ref=4cfe237a561373ff8cfe8dfc642437604026e464", "patch": "@@ -130,6 +130,7 @@ mod handlers {\n     mod flip_binexpr;\n     mod flip_comma;\n     mod flip_trait_bound;\n+    mod generate_constant;\n     mod generate_default_from_enum_variant;\n     mod generate_default_from_new;\n     mod generate_deref;\n@@ -205,6 +206,7 @@ mod handlers {\n             flip_binexpr::flip_binexpr,\n             flip_comma::flip_comma,\n             flip_trait_bound::flip_trait_bound,\n+            generate_constant::generate_constant,\n             generate_default_from_enum_variant::generate_default_from_enum_variant,\n             generate_default_from_new::generate_default_from_new,\n             generate_deref::generate_deref,"}, {"sha": "1daf96b827b41cfa9748105c491a8bea9b9c4060", "filename": "crates/ide_assists/src/tests/generated.rs", "status": "modified", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cfe237a561373ff8cfe8dfc642437604026e464/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Ftests%2Fgenerated.rs?ref=4cfe237a561373ff8cfe8dfc642437604026e464", "patch": "@@ -648,6 +648,28 @@ fn foo<T: Copy + Clone>() { }\n     )\n }\n \n+#[test]\n+fn doctest_generate_constant() {\n+    check_doc_test(\n+        \"generate_constant\",\n+        r#####\"\n+struct S { i: usize }\n+impl S { pub fn new(n: usize) {} }\n+fn main() {\n+    let v = S::new(CAPA$0CITY);\n+}\n+\"#####,\n+        r#####\"\n+struct S { i: usize }\n+impl S { pub fn new(n: usize) {} }\n+fn main() {\n+    const CAPACITY: usize = $0;\n+    let v = S::new(CAPACITY);\n+}\n+\"#####,\n+    )\n+}\n+\n #[test]\n fn doctest_generate_default_from_enum_variant() {\n     check_doc_test("}]}