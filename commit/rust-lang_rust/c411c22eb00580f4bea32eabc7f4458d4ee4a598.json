{"sha": "c411c22eb00580f4bea32eabc7f4458d4ee4a598", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTFjMjJlYjAwNTgwZjRiZWEzMmVhYmM3ZjQ0NThkNGVlNGE1OTg=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-01-17T05:46:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-17T05:46:39Z"}, "message": "Rollup merge of #68288 - RalfJung:fmt, r=oli-obk\n\nFix some of the rustfmt fallout in Miri\n\nre-post of https://github.com/rust-lang/rust/pull/67833 without the `rustfmt::skip`\n\nr? @oli-obk", "tree": {"sha": "b4fcff5f71595ae513c30c5adc3d5eb50eb11323", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b4fcff5f71595ae513c30c5adc3d5eb50eb11323"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c411c22eb00580f4bea32eabc7f4458d4ee4a598", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeIUo/CRBK7hj4Ov3rIwAAdHIIAGIXLvB5ZNeli/1Vi8td3um1\ngNEX8yLPiAWIBLjgHwMOtwgYuz+53eF06ReoWQg0OgWEVy7XxM8yv1Pd4d0N4+Vp\noQMjTChbHF1TSduvhIyzeQqv1S/nZzQrFrdH5MrGiDgspbKAmrZpRZS36P/jNtNB\njFwk6OLS876ZDY8DX6h3Oa/ey9odsnD7vIVDiKm7g5tScP6Z+aw5Gs16N2dSaiXc\nyQCJ1v2j++TZq5/BTRLjfPp5ylpFrqcBsGX7YL+WYNAhLmViK6A94QEojaroLp9j\nxwPTrlaxgAsrKIijk5u33y1TNm4O5BSDsaGUBBryL2TDDwPLUngufa7UdjYh4Y8=\n=2gYN\n-----END PGP SIGNATURE-----\n", "payload": "tree b4fcff5f71595ae513c30c5adc3d5eb50eb11323\nparent de01a29fbee586a13f10ee928df7c15c5a170587\nparent c781d15da32bf82977311af6f056ee2fc3506bda\nauthor Dylan DPC <dylan.dpc@gmail.com> 1579239999 +0530\ncommitter GitHub <noreply@github.com> 1579239999 +0530\n\nRollup merge of #68288 - RalfJung:fmt, r=oli-obk\n\nFix some of the rustfmt fallout in Miri\n\nre-post of https://github.com/rust-lang/rust/pull/67833 without the `rustfmt::skip`\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c411c22eb00580f4bea32eabc7f4458d4ee4a598", "html_url": "https://github.com/rust-lang/rust/commit/c411c22eb00580f4bea32eabc7f4458d4ee4a598", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c411c22eb00580f4bea32eabc7f4458d4ee4a598/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de01a29fbee586a13f10ee928df7c15c5a170587", "url": "https://api.github.com/repos/rust-lang/rust/commits/de01a29fbee586a13f10ee928df7c15c5a170587", "html_url": "https://github.com/rust-lang/rust/commit/de01a29fbee586a13f10ee928df7c15c5a170587"}, {"sha": "c781d15da32bf82977311af6f056ee2fc3506bda", "url": "https://api.github.com/repos/rust-lang/rust/commits/c781d15da32bf82977311af6f056ee2fc3506bda", "html_url": "https://github.com/rust-lang/rust/commit/c781d15da32bf82977311af6f056ee2fc3506bda"}], "stats": {"total": 54, "additions": 23, "deletions": 31}, "files": [{"sha": "42d896af8014d0720387540838d9791cdfaaa5a0", "filename": "src/librustc/mir/interpret/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Ferror.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -33,7 +33,7 @@ impl ErrorHandled {\n             ErrorHandled::Reported => {}\n             ErrorHandled::TooGeneric => bug!(\n                 \"MIR interpretation failed without reporting an error \\\n-                                              even though it was fully monomorphized\"\n+                 even though it was fully monomorphized\"\n             ),\n         }\n     }"}, {"sha": "e554b280ef78cbc8723d559869c455a66a847fb4", "filename": "src/librustc/mir/interpret/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fmod.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -403,8 +403,8 @@ impl<'tcx> AllocMap<'tcx> {\n         let next = self.next_id;\n         self.next_id.0 = self.next_id.0.checked_add(1).expect(\n             \"You overflowed a u64 by incrementing by 1... \\\n-                     You've just earned yourself a free drink if we ever meet. \\\n-                     Seriously, how did you do that?!\",\n+             You've just earned yourself a free drink if we ever meet. \\\n+             Seriously, how did you do that?!\",\n         );\n         next\n     }"}, {"sha": "0bcdf9ae3c1f20866644e42a44dbfb534a32c90a", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -580,10 +580,9 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n                 let layout = self.tcx.layout_of(ParamEnv::empty().and(ty)).unwrap();\n                 Ok((layout.size, layout.align.abi))\n             }\n-            Some(GlobalAlloc::Memory(alloc)) =>\n-            // Need to duplicate the logic here, because the global allocations have\n-            // different associated types than the interpreter-local ones.\n-            {\n+            Some(GlobalAlloc::Memory(alloc)) => {\n+                // Need to duplicate the logic here, because the global allocations have\n+                // different associated types than the interpreter-local ones.\n                 Ok((alloc.size, alloc.align))\n             }\n             Some(GlobalAlloc::Function(_)) => bug!(\"We already checked function pointers above\"),"}, {"sha": "d1c08da6cbee55da6b4c287974897bdcb9ad121b", "filename": "src/librustc_mir/interpret/operand.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Foperand.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -684,16 +684,14 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                             let variant_index = variants_start\n                                 .checked_add(variant_index_relative)\n                                 .expect(\"oveflow computing absolute variant idx\");\n-                            assert!(\n-                                (variant_index as usize)\n-                                    < rval\n-                                        .layout\n-                                        .ty\n-                                        .ty_adt_def()\n-                                        .expect(\"tagged layout for non adt\")\n-                                        .variants\n-                                        .len()\n-                            );\n+                            let variants_len = rval\n+                                .layout\n+                                .ty\n+                                .ty_adt_def()\n+                                .expect(\"tagged layout for non adt\")\n+                                .variants\n+                                .len();\n+                            assert!((variant_index as usize) < variants_len);\n                             (u128::from(variant_index), VariantIdx::from_u32(variant_index))\n                         } else {\n                             (u128::from(dataful_variant.as_u32()), dataful_variant)"}, {"sha": "4f96cb698915d25146c45e2bff6d9528bf49e772", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -432,12 +432,11 @@ where\n             // happens at run-time so that's okay.\n             let align = match self.size_and_align_of(base.meta, field_layout)? {\n                 Some((_, align)) => align,\n-                None if offset == Size::ZERO =>\n-                // An extern type at offset 0, we fall back to its static alignment.\n-                // FIXME: Once we have made decisions for how to handle size and alignment\n-                // of `extern type`, this should be adapted.  It is just a temporary hack\n-                // to get some code to work that probably ought to work.\n-                {\n+                None if offset == Size::ZERO => {\n+                    // An extern type at offset 0, we fall back to its static alignment.\n+                    // FIXME: Once we have made decisions for how to handle size and alignment\n+                    // of `extern type`, this should be adapted.  It is just a temporary hack\n+                    // to get some code to work that probably ought to work.\n                     field_layout.align.abi\n                 }\n                 None => bug!(\"Cannot compute offset for extern type field at non-0 offset\"),"}, {"sha": "aa2b3040a716f49a757207d8c33b88d1bd3386e5", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c411c22eb00580f4bea32eabc7f4458d4ee4a598/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=c411c22eb00580f4bea32eabc7f4458d4ee4a598", "patch": "@@ -114,14 +114,11 @@ fn write_path(out: &mut String, path: &Vec<PathElem>) {\n             ClosureVar(name) => write!(out, \".<closure-var({})>\", name),\n             TupleElem(idx) => write!(out, \".{}\", idx),\n             ArrayElem(idx) => write!(out, \"[{}]\", idx),\n-            Deref =>\n-            // This does not match Rust syntax, but it is more readable for long paths -- and\n+            // `.<deref>` does not match Rust syntax, but it is more readable for long paths -- and\n             // some of the other items here also are not Rust syntax.  Actually we can't\n             // even use the usual syntax because we are just showing the projections,\n             // not the root.\n-            {\n-                write!(out, \".<deref>\")\n-            }\n+            Deref => write!(out, \".<deref>\"),\n             Tag => write!(out, \".<enum-tag>\"),\n             DynDowncast => write!(out, \".<dyn-downcast>\"),\n         }\n@@ -206,9 +203,8 @@ impl<'rt, 'mir, 'tcx, M: Machine<'mir, 'tcx>> ValidityVisitor<'rt, 'mir, 'tcx, M\n             ty::Adt(def, ..) if def.is_enum() => {\n                 // we might be projecting *to* a variant, or to a field *in*a variant.\n                 match layout.variants {\n-                    layout::Variants::Single { index } =>\n-                    // Inside a variant\n-                    {\n+                    layout::Variants::Single { index } => {\n+                        // Inside a variant\n                         PathElem::Field(def.variants[index].fields[field].ident.name)\n                     }\n                     _ => bug!(),"}]}