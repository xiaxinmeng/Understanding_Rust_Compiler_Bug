{"sha": "f6cedbc744155b168e51b63a873fff98790757f6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2Y2VkYmM3NDQxNTViMTY4ZTUxYjYzYTg3M2ZmZjk4NzkwNzU3ZjY=", "commit": {"author": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-09-18T15:57:31Z"}, "committer": {"name": "Chris Denton", "email": "christophersdenton@gmail.com", "date": "2021-09-18T17:41:55Z"}, "message": "Correct Windows argument handling\n\nPreviously the command line string would have been incorrectly constructed if argv[0] contained a doublequote (`\"`) or ended in a trailing backslash (`\\`). This is a very rare edge case because, by convention, argv[0] is the path to the application and Windows file names cannot contain doublequotes.\n\nFixes #1881", "tree": {"sha": "d7d4e04ca8251dc2aa312fcb603a1b6477d3985a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d7d4e04ca8251dc2aa312fcb603a1b6477d3985a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6cedbc744155b168e51b63a873fff98790757f6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE+p/jD6jrzmnSIWJLcTRy8vRWJ94FAmFGJQwACgkQcTRy8vRW\nJ94AYhAAn/BVy4A2qxxi172OSYGfnb1/dL3SVILM07ct/PgDCUuhJmvkWSffRUyX\n5gBuycI6r1XvZJCx3YG16l9ErkruRBlkh0+VuWtl/qpHPDReyaNrdkLTAGdZKZLP\nQhw2HjiO0E3XciKrCP6favxOwquLRIWKtpOmLEvoGI2rEuvwI+SxjV3F6WrtrhYI\nxH3pijVIqvBJbQvpXe+Aj8wXjLaNiiecNtWUP0uCYhfOb/ORg7BXlSQG4eykzuVO\nxEAN88ScUTQcsEjMizPE1i81Cq8jZ77EqfuywiZCg8lj+LjFDXLpqjXnkIO2r69D\nyEi8FUsmJ8bJtmbbghztZkPSSpRGboZsg6OqKd7ogEsPUwj5STZL+KXgJfeUBgRq\nNa7U1xgrc0cCCo9OnQBwSPk1qTZ9hpqy6ssEvQkY58SvJj2Hr529Bd981cT4UR/Z\nMQOePlG4nOo1I6t4j7mOIf8Tzua+WpEvKvQgyAdM2pKb7QgZhCfEPVfbguu+QgbF\nz8DP5iKXrCSFZrcTvkwyytcfhQm1KANGQ0OOKGbFarXXMgemSFL/SgLE+HYKittL\n7Ykv2ALDjGTHErLZ8h/DhVnSQKUiHBpp5gOLHFQDTb2Sa0vM4K43KoFWDNaUOvZd\nOEQKzjzH0XahDn8ttFYKPsHD4lJiapE0ON40AV5/uuoKOntQSFk=\n=H8v2\n-----END PGP SIGNATURE-----", "payload": "tree d7d4e04ca8251dc2aa312fcb603a1b6477d3985a\nparent 6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560\nauthor Chris Denton <christophersdenton@gmail.com> 1631980651 +0100\ncommitter Chris Denton <christophersdenton@gmail.com> 1631986915 +0100\n\nCorrect Windows argument handling\n\nPreviously the command line string would have been incorrectly constructed if argv[0] contained a doublequote (`\"`) or ended in a trailing backslash (`\\`). This is a very rare edge case because, by convention, argv[0] is the path to the application and Windows file names cannot contain doublequotes.\n\nFixes #1881\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6cedbc744155b168e51b63a873fff98790757f6", "html_url": "https://github.com/rust-lang/rust/commit/f6cedbc744155b168e51b63a873fff98790757f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6cedbc744155b168e51b63a873fff98790757f6/comments", "author": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ChrisDenton", "id": 4459874, "node_id": "MDQ6VXNlcjQ0NTk4NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4459874?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ChrisDenton", "html_url": "https://github.com/ChrisDenton", "followers_url": "https://api.github.com/users/ChrisDenton/followers", "following_url": "https://api.github.com/users/ChrisDenton/following{/other_user}", "gists_url": "https://api.github.com/users/ChrisDenton/gists{/gist_id}", "starred_url": "https://api.github.com/users/ChrisDenton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ChrisDenton/subscriptions", "organizations_url": "https://api.github.com/users/ChrisDenton/orgs", "repos_url": "https://api.github.com/users/ChrisDenton/repos", "events_url": "https://api.github.com/users/ChrisDenton/events{/privacy}", "received_events_url": "https://api.github.com/users/ChrisDenton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560", "url": "https://api.github.com/repos/rust-lang/rust/commits/6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560", "html_url": "https://github.com/rust-lang/rust/commit/6cf851f6d43bff1e8ac1421cbf3c6a8d20f89560"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "e389ac7ed488e501ff84a07402f0709bd052cec9", "filename": "src/eval.rs", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/f6cedbc744155b168e51b63a873fff98790757f6/src%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6cedbc744155b168e51b63a873fff98790757f6/src%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval.rs?ref=f6cedbc744155b168e51b63a873fff98790757f6", "patch": "@@ -2,6 +2,7 @@\n \n use std::convert::TryFrom;\n use std::ffi::OsStr;\n+use std::iter;\n \n use log::info;\n \n@@ -202,17 +203,8 @@ pub fn create_ecx<'mir, 'tcx: 'mir>(\n         // Store command line as UTF-16 for Windows `GetCommandLineW`.\n         {\n             // Construct a command string with all the aguments.\n-            let mut cmd = String::new();\n-            for arg in config.args.iter() {\n-                if !cmd.is_empty() {\n-                    cmd.push(' ');\n-                }\n-                cmd.push_str(&*shell_escape::windows::escape(arg.as_str().into()));\n-            }\n-            // Don't forget `0` terminator.\n-            cmd.push(std::char::from_u32(0).unwrap());\n+            let cmd_utf16: Vec<u16> = args_to_utf16_command_string(config.args.iter());\n \n-            let cmd_utf16: Vec<u16> = cmd.encode_utf16().collect();\n             let cmd_type = tcx.mk_array(tcx.types.u16, u64::try_from(cmd_utf16.len()).unwrap());\n             let cmd_place =\n                 ecx.allocate(ecx.layout_of(cmd_type)?, MiriMemoryKind::Machine.into())?;\n@@ -353,3 +345,76 @@ pub fn eval_entry<'tcx>(\n         Err(e) => report_error(&ecx, e),\n     }\n }\n+\n+/// Turns an array of arguments into a Windows command line string.\n+///\n+/// The string will be UTF-16 encoded and NUL terminated.\n+///\n+/// Panics if the zeroth argument contains the `\"` character because doublequotes\n+/// in argv[0] cannot be encoded using the standard command line parsing rules.\n+fn args_to_utf16_command_string<I, T>(mut args: I) -> Vec<u16>\n+where\n+    I: Iterator<Item = T>,\n+    T: AsRef<str>,\n+{\n+    // Parse argv[0]. Slashes aren't escaped. Literal double quotes are not allowed.\n+    let mut cmd = if let Some(arg0) = args.next() {\n+        let arg0 = arg0.as_ref();\n+        if arg0.is_empty() {\n+            \"\\\"\\\"\".into()\n+        } else if arg0.contains('\"') {\n+            panic!(\"argv[0] cannot contain a doublequote (\\\") character\");\n+        } else {\n+            // Always surround argv[0] with quotes.\n+            let mut s = String::new();\n+            s.push('\"');\n+            s.push_str(arg0);\n+            s.push('\"');\n+            s\n+        }\n+    } else {\n+        return vec![0];\n+    };\n+\n+    // Build the other arguments.\n+    for arg in args {\n+        let arg = arg.as_ref();\n+        cmd.push(' ');\n+        if arg.is_empty() {\n+            cmd.push_str(\"\\\"\\\"\");\n+        } else if !arg.bytes().any(|c| matches!(c, b'\"' | b'\\t' | b' ')) {\n+            cmd.push_str(arg);\n+        } else {\n+            cmd.push('\"');\n+            let mut chars = arg.chars().peekable();\n+            loop {\n+                let mut nslashes = 0;\n+                while let Some(&'\\\\') = chars.peek() {\n+                    chars.next();\n+                    nslashes += 1;\n+                }\n+\n+                match chars.next() {\n+                    Some('\"') => {\n+                        cmd.extend(iter::repeat('\\\\').take(nslashes * 2 + 1));\n+                        cmd.push('\"');\n+                    }\n+                    Some(c) => {\n+                        cmd.extend(iter::repeat('\\\\').take(nslashes));\n+                        cmd.push(c);\n+                    }\n+                    None => {\n+                        cmd.extend(iter::repeat('\\\\').take(nslashes * 2));\n+                        break;\n+                    }\n+                }\n+            }\n+            cmd.push('\"');\n+        }\n+    }\n+\n+    if cmd.contains('\\0') {\n+        panic!(\"interior null in command line arguments\");\n+    }\n+    cmd.encode_utf16().chain(iter::once(0)).collect()\n+}"}]}