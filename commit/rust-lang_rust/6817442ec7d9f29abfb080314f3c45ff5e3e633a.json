{"sha": "6817442ec7d9f29abfb080314f3c45ff5e3e633a", "node_id": "C_kwDOAAsO6NoAKDY4MTc0NDJlYzdkOWYyOWFiZmIwODAzMTRmM2M0NWZmNWUzZTYzM2E", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-23T00:46:22Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-25T01:35:52Z"}, "message": "Split `NamedMatch::MatchNonterminal` in two.\n\nThe `Lrc` is only relevant within `transcribe()`. There, the `Lrc` is\nhelpful for the non-`NtTT` cases, because the entire nonterminal is\ncloned. But for the `NtTT` cases the inner token tree is cloned (a full\nclone) and so the `Lrc` is of no help.\n\nThis commit splits the `NtTT` and non-`NtTT` cases, avoiding the useless\n`Lrc` in the former case, for the following effect on macro-heavy\ncrates.\n- It reduces the total number of allocations a lot.\n- It increases the size of some of the remaining allocations.\n- It doesn't affect *peak* memory usage, because the larger allocations\n  are short-lived.\n\nThis overall gives a speed win.", "tree": {"sha": "de02bcbb8b9359321f7bce1a99f9db92ef1376dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/de02bcbb8b9359321f7bce1a99f9db92ef1376dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6817442ec7d9f29abfb080314f3c45ff5e3e633a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6817442ec7d9f29abfb080314f3c45ff5e3e633a", "html_url": "https://github.com/rust-lang/rust/commit/6817442ec7d9f29abfb080314f3c45ff5e3e633a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6817442ec7d9f29abfb080314f3c45ff5e3e633a/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "904e70a7b00f41b168add13a33bc14f200442ad0", "url": "https://api.github.com/repos/rust-lang/rust/commits/904e70a7b00f41b168add13a33bc14f200442ad0", "html_url": "https://github.com/rust-lang/rust/commit/904e70a7b00f41b168add13a33bc14f200442ad0"}], "stats": {"total": 152, "additions": 81, "deletions": 71}, "files": [{"sha": "f2090899e99a125ec923dce83fa8576f4f2da0a9", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 31, "deletions": 21, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=6817442ec7d9f29abfb080314f3c45ff5e3e633a", "patch": "@@ -105,7 +105,7 @@ type NamedMatchVec = SmallVec<[NamedMatch; 4]>;\n \n // This type is used a lot. Make sure it doesn't unintentionally get bigger.\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n-rustc_data_structures::static_assert_size!(NamedMatchVec, 72);\n+rustc_data_structures::static_assert_size!(NamedMatchVec, 168);\n \n /// Represents a single \"position\" (aka \"matcher position\", aka \"item\"), as\n /// described in the module documentation.\n@@ -278,22 +278,20 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n     })\n }\n \n-/// `NamedMatch` is a pattern-match result for a single `token::MATCH_NONTERMINAL`:\n-/// so it is associated with a single ident in a parse, and all\n-/// `MatchedNonterminal`s in the `NamedMatch` have the same non-terminal type\n-/// (expr, item, etc). Each leaf in a single `NamedMatch` corresponds to a\n-/// single `token::MATCH_NONTERMINAL` in the `TokenTree` that produced it.\n+/// `NamedMatch` is a pattern-match result for a single metavar. All\n+/// `MatchedNtNonTt`s in the `NamedMatch` have the same non-terminal type\n+/// (expr, item, etc).\n ///\n /// The in-memory structure of a particular `NamedMatch` represents the match\n /// that occurred when a particular subset of a matcher was applied to a\n /// particular token tree.\n ///\n /// The width of each `MatchedSeq` in the `NamedMatch`, and the identity of\n-/// the `MatchedNonterminal`s, will depend on the token tree it was applied\n-/// to: each `MatchedSeq` corresponds to a single `TTSeq` in the originating\n+/// the `MatchedNtNonTts`s, will depend on the token tree it was applied\n+/// to: each `MatchedSeq` corresponds to a single repetition in the originating\n /// token tree. The depth of the `NamedMatch` structure will therefore depend\n-/// only on the nesting depth of `ast::TTSeq`s in the originating\n-/// token tree it was derived from.\n+/// only on the nesting depth of repetitions in the originating token tree it\n+/// was derived from.\n ///\n /// In layman's terms: `NamedMatch` will form a tree representing nested matches of a particular\n /// meta variable. For example, if we are matching the following macro against the following\n@@ -312,24 +310,32 @@ pub(super) fn count_names(ms: &[TokenTree]) -> usize {\n /// ```rust\n /// MatchedSeq([\n ///   MatchedSeq([\n-///     MatchedNonterminal(a),\n-///     MatchedNonterminal(b),\n-///     MatchedNonterminal(c),\n-///     MatchedNonterminal(d),\n+///     MatchedNtNonTt(a),\n+///     MatchedNtNonTt(b),\n+///     MatchedNtNonTt(c),\n+///     MatchedNtNonTt(d),\n ///   ]),\n ///   MatchedSeq([\n-///     MatchedNonterminal(a),\n-///     MatchedNonterminal(b),\n-///     MatchedNonterminal(c),\n-///     MatchedNonterminal(d),\n-///     MatchedNonterminal(e),\n+///     MatchedNtNonTt(a),\n+///     MatchedNtNonTt(b),\n+///     MatchedNtNonTt(c),\n+///     MatchedNtNonTt(d),\n+///     MatchedNtNonTt(e),\n ///   ])\n /// ])\n /// ```\n #[derive(Debug, Clone)]\n crate enum NamedMatch {\n     MatchedSeq(Lrc<NamedMatchVec>),\n-    MatchedNonterminal(Lrc<Nonterminal>),\n+\n+    // This variant should never hold an `NtTT`. `MatchedNtTt` should be used\n+    // for that case.\n+    MatchedNtNonTt(Lrc<Nonterminal>),\n+\n+    // `NtTT` is handled without any cloning when transcribing, unlike other\n+    // nonterminals. Therefore, an `Lrc` isn't helpful and causes unnecessary\n+    // allocations. Hence this separate variant.\n+    MatchedNtTt(rustc_ast::tokenstream::TokenTree),\n }\n \n /// Takes a slice of token trees `ms` representing a matcher which successfully matched input\n@@ -669,7 +675,11 @@ impl<'tt> TtParser<'tt> {\n                             }\n                             Ok(nt) => nt,\n                         };\n-                        item.push_match(match_cur, MatchedNonterminal(Lrc::new(nt)));\n+                        let m = match nt {\n+                            Nonterminal::NtTT(tt) => MatchedNtTt(tt),\n+                            _ => MatchedNtNonTt(Lrc::new(nt)),\n+                        };\n+                        item.push_match(match_cur, m);\n                         item.idx += 1;\n                         item.match_cur += 1;\n                     } else {"}, {"sha": "7837de5c18dba10377aeccd9ac1ff7d91ddf99cf", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 28, "deletions": 32, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=6817442ec7d9f29abfb080314f3c45ff5e3e633a", "patch": "@@ -4,11 +4,11 @@ use crate::expand::{ensure_complete_parse, parse_ast_fragment, AstFragment, AstF\n use crate::mbe;\n use crate::mbe::macro_check;\n use crate::mbe::macro_parser::{Error, ErrorReported, Failure, Success, TtParser};\n-use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq};\n+use crate::mbe::macro_parser::{MatchedNtTt, MatchedSeq};\n use crate::mbe::transcribe::transcribe;\n \n use rustc_ast as ast;\n-use rustc_ast::token::{self, NonterminalKind, NtTT, Token, TokenKind::*};\n+use rustc_ast::token::{self, NonterminalKind, Token, TokenKind::*};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream};\n use rustc_ast::{NodeId, DUMMY_NODE_ID};\n use rustc_ast_pretty::pprust;\n@@ -470,22 +470,20 @@ pub fn compile_declarative_macro(\n         MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n-                if let MatchedNonterminal(ref nt) = *m {\n-                    if let NtTT(ref tt) = **nt {\n-                        let mut tts = vec![];\n-                        mbe::quoted::parse(\n-                            tt.clone().into(),\n-                            true,\n-                            &sess.parse_sess,\n-                            def.id,\n-                            features,\n-                            edition,\n-                            &mut tts,\n-                        );\n-                        let tt = tts.pop().unwrap();\n-                        valid &= check_lhs_nt_follows(&sess.parse_sess, features, &def, &tt);\n-                        return tt;\n-                    }\n+                if let MatchedNtTt(ref tt) = *m {\n+                    let mut tts = vec![];\n+                    mbe::quoted::parse(\n+                        tt.clone().into(),\n+                        true,\n+                        &sess.parse_sess,\n+                        def.id,\n+                        features,\n+                        edition,\n+                        &mut tts,\n+                    );\n+                    let tt = tts.pop().unwrap();\n+                    valid &= check_lhs_nt_follows(&sess.parse_sess, features, &def, &tt);\n+                    return tt;\n                 }\n                 sess.parse_sess.span_diagnostic.span_bug(def.span, \"wrong-structured lhs\")\n             })\n@@ -497,20 +495,18 @@ pub fn compile_declarative_macro(\n         MatchedSeq(ref s) => s\n             .iter()\n             .map(|m| {\n-                if let MatchedNonterminal(ref nt) = *m {\n-                    if let NtTT(ref tt) = **nt {\n-                        let mut tts = vec![];\n-                        mbe::quoted::parse(\n-                            tt.clone().into(),\n-                            false,\n-                            &sess.parse_sess,\n-                            def.id,\n-                            features,\n-                            edition,\n-                            &mut tts,\n-                        );\n-                        return tts.pop().unwrap();\n-                    }\n+                if let MatchedNtTt(ref tt) = *m {\n+                    let mut tts = vec![];\n+                    mbe::quoted::parse(\n+                        tt.clone().into(),\n+                        false,\n+                        &sess.parse_sess,\n+                        def.id,\n+                        features,\n+                        edition,\n+                        &mut tts,\n+                    );\n+                    return tts.pop().unwrap();\n                 }\n                 sess.parse_sess.span_diagnostic.span_bug(def.span, \"wrong-structured lhs\")\n             })"}, {"sha": "228ed04548df4f03f1993b20f714b1e9233d0894", "filename": "compiler/rustc_expand/src/mbe/transcribe.rs", "status": "modified", "additions": 22, "deletions": 18, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6817442ec7d9f29abfb080314f3c45ff5e3e633a/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Ftranscribe.rs?ref=6817442ec7d9f29abfb080314f3c45ff5e3e633a", "patch": "@@ -1,8 +1,8 @@\n use crate::base::ExtCtxt;\n-use crate::mbe::macro_parser::{MatchedNonterminal, MatchedSeq, NamedMatch};\n+use crate::mbe::macro_parser::{MatchedNtNonTt, MatchedNtTt, MatchedSeq, NamedMatch};\n use crate::mbe::{self, MetaVarExpr};\n use rustc_ast::mut_visit::{self, MutVisitor};\n-use rustc_ast::token::{self, NtTT, Token, TokenKind};\n+use rustc_ast::token::{self, Nonterminal, Token, TokenKind};\n use rustc_ast::tokenstream::{DelimSpan, TokenStream, TokenTree, TreeAndSpacing};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n@@ -233,25 +233,29 @@ pub(super) fn transcribe<'a>(\n                 // the meta-var.\n                 let ident = MacroRulesNormalizedIdent::new(orignal_ident);\n                 if let Some(cur_matched) = lookup_cur_matched(ident, interp, &repeats) {\n-                    if let MatchedNonterminal(nt) = cur_matched {\n-                        let token = if let NtTT(tt) = &**nt {\n+                    match cur_matched {\n+                        MatchedNtTt(ref tt) => {\n                             // `tt`s are emitted into the output stream directly as \"raw tokens\",\n                             // without wrapping them into groups.\n-                            tt.clone()\n-                        } else {\n+                            let token = tt.clone();\n+                            result.push(token.into());\n+                        }\n+                        MatchedNtNonTt(ref nt) => {\n                             // Other variables are emitted into the output stream as groups with\n                             // `Delimiter::None` to maintain parsing priorities.\n                             // `Interpolated` is currently used for such groups in rustc parser.\n+                            debug_assert!(!matches!(**nt, Nonterminal::NtTT(_)));\n                             marker.visit_span(&mut sp);\n-                            TokenTree::token(token::Interpolated(nt.clone()), sp)\n-                        };\n-                        result.push(token.into());\n-                    } else {\n-                        // We were unable to descend far enough. This is an error.\n-                        return Err(cx.struct_span_err(\n-                            sp, /* blame the macro writer */\n-                            &format!(\"variable '{}' is still repeating at this depth\", ident),\n-                        ));\n+                            let token = TokenTree::token(token::Interpolated(nt.clone()), sp);\n+                            result.push(token.into());\n+                        }\n+                        MatchedSeq(..) => {\n+                            // We were unable to descend far enough. This is an error.\n+                            return Err(cx.struct_span_err(\n+                                sp, /* blame the macro writer */\n+                                &format!(\"variable '{}' is still repeating at this depth\", ident),\n+                            ));\n+                        }\n                     }\n                 } else {\n                     // If we aren't able to match the meta-var, we push it back into the result but\n@@ -308,7 +312,7 @@ fn lookup_cur_matched<'a>(\n         let mut matched = matched;\n         for &(idx, _) in repeats {\n             match matched {\n-                MatchedNonterminal(_) => break,\n+                MatchedNtTt(_) | MatchedNtNonTt(_) => break,\n                 MatchedSeq(ref ads) => matched = ads.get(idx).unwrap(),\n             }\n         }\n@@ -398,7 +402,7 @@ fn lockstep_iter_size(\n             let name = MacroRulesNormalizedIdent::new(name);\n             match lookup_cur_matched(name, interpolations, repeats) {\n                 Some(matched) => match matched {\n-                    MatchedNonterminal(_) => LockstepIterSize::Unconstrained,\n+                    MatchedNtTt(_) | MatchedNtNonTt(_) => LockstepIterSize::Unconstrained,\n                     MatchedSeq(ref ads) => LockstepIterSize::Constraint(ads.len(), name),\n                 },\n                 _ => LockstepIterSize::Unconstrained,\n@@ -445,7 +449,7 @@ fn count_repetitions<'a>(\n         sp: &DelimSpan,\n     ) -> PResult<'a, usize> {\n         match matched {\n-            MatchedNonterminal(_) => {\n+            MatchedNtTt(_) | MatchedNtNonTt(_) => {\n                 if declared_lhs_depth == 0 {\n                     return Err(cx.struct_span_err(\n                         sp.entire(),"}]}