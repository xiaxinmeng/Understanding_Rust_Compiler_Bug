{"sha": "0f7d77363b551eb9a1dc4ae348d213180eae070d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmN2Q3NzM2M2I1NTFlYjlhMWRjNGFlMzQ4ZDIxMzE4MGVhZTA3MGQ=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-11-28T20:47:10Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2019-12-21T22:30:52Z"}, "message": "Use Arena inside hir::TraitItem.", "tree": {"sha": "1ae43b09a663e06beae5fd7ed06b57e199fa17b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae43b09a663e06beae5fd7ed06b57e199fa17b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f7d77363b551eb9a1dc4ae348d213180eae070d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f7d77363b551eb9a1dc4ae348d213180eae070d", "html_url": "https://github.com/rust-lang/rust/commit/0f7d77363b551eb9a1dc4ae348d213180eae070d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f7d77363b551eb9a1dc4ae348d213180eae070d/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "acf33f2d6bca429196692d2b557c8e53e10bb9fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/acf33f2d6bca429196692d2b557c8e53e10bb9fe", "html_url": "https://github.com/rust-lang/rust/commit/acf33f2d6bca429196692d2b557c8e53e10bb9fe"}], "stats": {"total": 188, "additions": 96, "deletions": 92}, "files": [{"sha": "6fbb8d783d45aa5c1b2b0a7141bf962a2034f663", "filename": "src/librustc/hir/check_attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fcheck_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fcheck_attr.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -107,7 +107,7 @@ impl Target {\n         }\n     }\n \n-    fn from_trait_item(trait_item: &TraitItem) -> Target {\n+    fn from_trait_item(trait_item: &TraitItem<'_>) -> Target {\n         match trait_item.kind {\n             TraitItemKind::Const(..) => Target::AssocConst,\n             TraitItemKind::Method(_, hir::TraitMethod::Required(_)) => {\n@@ -498,7 +498,7 @@ impl Visitor<'tcx> for CheckAttrVisitor<'tcx> {\n         intravisit::walk_item(self, item)\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx TraitItem<'tcx>) {\n         let target = Target::from_trait_item(trait_item);\n         self.check_attributes(trait_item.hir_id, &trait_item.attrs, &trait_item.span, target, None);\n         intravisit::walk_trait_item(self, trait_item)"}, {"sha": "6143e2281e42fab4d5f23d33449eb27fabfa6f73", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -295,7 +295,7 @@ pub trait Visitor<'v>: Sized {\n     fn visit_use(&mut self, path: &'v Path, hir_id: HirId) {\n         walk_use(self, path, hir_id)\n     }\n-    fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'v TraitItem<'v>) {\n         walk_trait_item(self, ti)\n     }\n     fn visit_trait_item_ref(&mut self, ii: &'v TraitItemRef) {\n@@ -849,9 +849,9 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n     visitor.visit_nested_body(body_id)\n }\n \n-pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem) {\n+pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v TraitItem<'v>) {\n     visitor.visit_ident(trait_item.ident);\n-    walk_list!(visitor, visit_attribute, &trait_item.attrs);\n+    walk_list!(visitor, visit_attribute, trait_item.attrs);\n     visitor.visit_generics(&trait_item.generics);\n     match trait_item.kind {\n         TraitItemKind::Const(ref ty, default) => {"}, {"sha": "723cede0be6a7dcd6b572a8878d3cec1bfd6fce8", "filename": "src/librustc/hir/itemlikevisit.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fitemlikevisit.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -46,7 +46,7 @@ use super::intravisit::Visitor;\n /// needed.\n pub trait ItemLikeVisitor<'hir> {\n     fn visit_item(&mut self, item: &'hir Item<'hir>);\n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem);\n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&mut self, impl_item: &'hir ImplItem);\n }\n \n@@ -69,7 +69,7 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n         self.visitor.visit_item(item);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'hir TraitItem<'hir>) {\n         self.visitor.visit_trait_item(trait_item);\n     }\n \n@@ -81,7 +81,7 @@ impl<'v, 'hir, V> ItemLikeVisitor<'hir> for DeepVisitor<'v, V>\n /// A parallel variant of `ItemLikeVisitor`.\n pub trait ParItemLikeVisitor<'hir> {\n     fn visit_item(&self, item: &'hir Item<'hir>);\n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem);\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>);\n     fn visit_impl_item(&self, impl_item: &'hir ImplItem);\n }\n \n@@ -99,7 +99,7 @@ impl<'hir, V> ParItemLikeVisitor<'hir> for ParDeepVisitor<V>\n         self.0.into_visitor().visit_item(item);\n     }\n \n-    fn visit_trait_item(&self, trait_item: &'hir TraitItem) {\n+    fn visit_trait_item(&self, trait_item: &'hir TraitItem<'hir>) {\n         self.0.into_visitor().visit_trait_item(trait_item);\n     }\n "}, {"sha": "d380b87916c6407005be53f0f362f55846fbb575", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -97,7 +97,7 @@ pub struct LoweringContext<'a, 'hir: 'a> {\n     /// The items being lowered are collected here.\n     items: BTreeMap<hir::HirId, hir::Item<'hir>>,\n \n-    trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem>,\n+    trait_items: BTreeMap<hir::TraitItemId, hir::TraitItem<'hir>>,\n     impl_items: BTreeMap<hir::ImplItemId, hir::ImplItem>,\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n     exported_macros: Vec<hir::MacroDef<'hir>>,"}, {"sha": "35a4f7cde6f4b7866dadbdd9c4e41ec16952010c", "filename": "src/librustc/hir/lowering/item.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering%2Fitem.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -816,14 +816,14 @@ impl LoweringContext<'_, 'hir> {\n         }\n     }\n \n-    fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem {\n+    fn lower_trait_item(&mut self, i: &AssocItem) -> hir::TraitItem<'hir> {\n         let trait_item_def_id = self.resolver.definitions().local_def_id(i.id);\n \n         let (generics, kind) = match i.kind {\n             AssocItemKind::Const(ref ty, ref default) => (\n                 self.lower_generics(&i.generics, ImplTraitContext::disallowed()),\n                 hir::TraitItemKind::Const(\n-                    self.lower_ty(ty, ImplTraitContext::disallowed()),\n+                    self.arena.alloc(self.lower_ty(ty, ImplTraitContext::disallowed()).into_inner()),\n                     default\n                         .as_ref()\n                         .map(|x| self.lower_const_body(i.span, Some(x))),\n@@ -852,12 +852,13 @@ impl LoweringContext<'_, 'hir> {\n                 (generics, hir::TraitItemKind::Method(sig, hir::TraitMethod::Provided(body_id)))\n             }\n             AssocItemKind::TyAlias(ref bounds, ref default) => {\n+                let ty = default.as_ref().map(|x| -> &'hir hir::Ty { self.arena.alloc(\n+                        self.lower_ty(x, ImplTraitContext::disallowed()).into_inner())\n+                });\n                 let generics = self.lower_generics(&i.generics, ImplTraitContext::disallowed());\n                 let kind = hir::TraitItemKind::Type(\n                     self.lower_param_bounds(bounds, ImplTraitContext::disallowed()),\n-                    default\n-                        .as_ref()\n-                        .map(|x| self.lower_ty(x, ImplTraitContext::disallowed())),\n+                    ty,\n                 );\n \n                 (generics, kind)\n@@ -868,7 +869,7 @@ impl LoweringContext<'_, 'hir> {\n         hir::TraitItem {\n             hir_id: self.lower_node_id(i.id),\n             ident: i.ident,\n-            attrs: self.lower_attrs(&i.attrs),\n+            attrs: self.lower_attrs_arena(&i.attrs),\n             generics,\n             kind,\n             span: i.span,"}, {"sha": "a9388825f168f107ca6a697a3e2f82fa43b502cd", "filename": "src/librustc/hir/map/blocks.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fblocks.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -53,7 +53,7 @@ impl MaybeFnLike for ast::ImplItem {\n     }\n }\n \n-impl MaybeFnLike for ast::TraitItem {\n+impl MaybeFnLike for ast::TraitItem<'_> {\n     fn is_fn_like(&self) -> bool {\n         match self.kind {\n             ast::TraitItemKind::Method(_, ast::TraitMethod::Provided(_)) => true,"}, {"sha": "95b44ba403af87c89500b150f50ef0d7af292b13", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -398,7 +398,7 @@ impl<'a, 'hir> Visitor<'hir> for NodeCollector<'a, 'hir> {\n         intravisit::walk_generic_param(self, param);\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'hir TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'hir TraitItem<'hir>) {\n         debug_assert_eq!(ti.hir_id.owner,\n                          self.definitions.opt_def_index(self.hir_to_node_id[&ti.hir_id]).unwrap());\n         self.with_dep_node_owner(ti.hir_id.owner, ti, |this| {"}, {"sha": "4657f8b03b01b67d5a0083beb0d3a4dfd2d10563", "filename": "src/librustc/hir/map/hir_id_validator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fhir_id_validator.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -58,7 +58,7 @@ impl<'a, 'hir> ItemLikeVisitor<'hir> for OuterVisitor<'a, 'hir> {\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_item(this, i));\n     }\n \n-    fn visit_trait_item(&mut self, i: &'hir hir::TraitItem) {\n+    fn visit_trait_item(&mut self, i: &'hir hir::TraitItem<'hir>) {\n         let mut inner_visitor = self.new_inner_visitor(self.hir_map);\n         inner_visitor.check(i.hir_id, |this| intravisit::walk_trait_item(this, i));\n     }"}, {"sha": "d15d59b221028195ff269fb02b33bfd960417dea", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -443,7 +443,7 @@ impl<'hir> Map<'hir> {\n         self.forest.krate()\n     }\n \n-    pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem {\n+    pub fn trait_item(&self, id: TraitItemId) -> &'hir TraitItem<'hir> {\n         self.read(id.hir_id);\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we\n@@ -973,7 +973,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem {\n+    pub fn expect_trait_item(&self, id: HirId) -> &'hir TraitItem<'hir> {\n         match self.find(id) {\n             Some(Node::TraitItem(item)) => item,\n             _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n@@ -1252,7 +1252,7 @@ impl Named for Item<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ForeignItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for Variant { fn name(&self) -> Name { self.ident.name } }\n impl Named for StructField { fn name(&self) -> Name { self.ident.name } }\n-impl Named for TraitItem { fn name(&self) -> Name { self.ident.name } }\n+impl Named for TraitItem<'_> { fn name(&self) -> Name { self.ident.name } }\n impl Named for ImplItem { fn name(&self) -> Name { self.ident.name } }\n \n pub fn map_crate<'hir>(sess: &crate::session::Session,"}, {"sha": "991e51e6dc3d0eef0a659eb778232090134b36d1", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -758,7 +758,7 @@ pub struct Crate<'hir> {\n     // slightly different results.\n     pub items: BTreeMap<HirId, Item<'hir>>,\n \n-    pub trait_items: BTreeMap<TraitItemId, TraitItem>,\n+    pub trait_items: BTreeMap<TraitItemId, TraitItem<'hir>>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n     pub bodies: BTreeMap<BodyId, Body>,\n     pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n@@ -779,7 +779,7 @@ impl Crate<'hir> {\n         &self.items[&id]\n     }\n \n-    pub fn trait_item(&self, id: TraitItemId) -> &TraitItem {\n+    pub fn trait_item(&self, id: TraitItemId) -> &TraitItem<'hir> {\n         &self.trait_items[&id]\n     }\n \n@@ -1897,12 +1897,12 @@ pub struct TraitItemId {\n /// either required (meaning it doesn't have an implementation, just a\n /// signature) or provided (meaning it has a default implementation).\n #[derive(RustcEncodable, RustcDecodable, Debug)]\n-pub struct TraitItem {\n+pub struct TraitItem<'hir> {\n     pub ident: Ident,\n     pub hir_id: HirId,\n-    pub attrs: HirVec<Attribute>,\n+    pub attrs: &'hir [Attribute],\n     pub generics: Generics,\n-    pub kind: TraitItemKind,\n+    pub kind: TraitItemKind<'hir>,\n     pub span: Span,\n }\n \n@@ -1918,14 +1918,14 @@ pub enum TraitMethod {\n \n /// Represents a trait method or associated constant or type\n #[derive(RustcEncodable, RustcDecodable, Debug, HashStable)]\n-pub enum TraitItemKind {\n+pub enum TraitItemKind<'hir> {\n     /// An associated constant with an optional value (otherwise `impl`s must contain a value).\n-    Const(P<Ty>, Option<BodyId>),\n+    Const(&'hir Ty, Option<BodyId>),\n     /// A method with an optional body.\n     Method(FnSig, TraitMethod),\n     /// An associated type with (possibly empty) bounds and optional concrete\n     /// type.\n-    Type(GenericBounds, Option<P<Ty>>),\n+    Type(GenericBounds, Option<&'hir Ty>),\n }\n \n // The bodies for items are stored \"out of line\", in a separate\n@@ -2789,7 +2789,7 @@ pub enum Node<'hir> {\n     Param(&'hir Param),\n     Item(&'hir Item<'hir>),\n     ForeignItem(&'hir ForeignItem<'hir>),\n-    TraitItem(&'hir TraitItem),\n+    TraitItem(&'hir TraitItem<'hir>),\n     ImplItem(&'hir ImplItem),\n     Variant(&'hir Variant),\n     Field(&'hir StructField),"}, {"sha": "d24d08575e7168600873778d523929275d462752", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -846,7 +846,7 @@ impl<'a> State<'a> {\n                       body_id)\n     }\n \n-    pub fn print_trait_item(&mut self, ti: &hir::TraitItem) {\n+    pub fn print_trait_item(&mut self, ti: &hir::TraitItem<'_>) {\n         self.ann.pre(self, AnnNode::SubItem(ti.hir_id));\n         self.hardbreak_if_not_bol();\n         self.maybe_print_comment(ti.span.lo());"}, {"sha": "149e647ca7432d7778bcfb04eb5868210684f10f", "filename": "src/librustc/ich/impls_hir.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fich%2Fimpls_hir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_hir.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -150,7 +150,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for hir::Expr {\n     }\n }\n \n-impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem {\n+impl<'a> HashStable<StableHashingContext<'a>> for hir::TraitItem<'_> {\n     fn hash_stable(&self, hcx: &mut StableHashingContext<'a>, hasher: &mut StableHasher) {\n         let hir::TraitItem {\n             hir_id: _,"}, {"sha": "f5e52c4d4b21789364e30fd501877c79c482e8f5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -264,7 +264,7 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    fn trait_item_scope_tag(item: &hir::TraitItem) -> &'static str {\n+    fn trait_item_scope_tag(item: &hir::TraitItem<'_>) -> &'static str {\n         match item.kind {\n             hir::TraitItemKind::Method(..) => \"method body\",\n             hir::TraitItemKind::Const(..) | hir::TraitItemKind::Type(..) => \"associated item\","}, {"sha": "8327977d9b0fd43fa2c2a998d07f9e9767df9d42", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -1072,7 +1072,7 @@ for LateContextAndPass<'a, 'tcx, T> {\n         hir_visit::walk_poly_trait_ref(self, t, m);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         let generics = self.context.generics.take();\n         self.context.generics = Some(&trait_item.generics);\n         self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |cx| {"}, {"sha": "3dad72543f5af85c04adb0a0663cb3b250c0ed1c", "filename": "src/librustc/lint/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Flint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Flint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -124,8 +124,8 @@ macro_rules! late_lint_methods {\n                 d: Span,\n                 e: hir::HirId\n             );\n-            fn check_trait_item(a: &$hir hir::TraitItem);\n-            fn check_trait_item_post(a: &$hir hir::TraitItem);\n+            fn check_trait_item(a: &$hir hir::TraitItem<$hir>);\n+            fn check_trait_item_post(a: &$hir hir::TraitItem<$hir>);\n             fn check_impl_item(a: &$hir hir::ImplItem);\n             fn check_impl_item_post(a: &$hir hir::ImplItem);\n             fn check_struct_def(a: &$hir hir::VariantData);\n@@ -649,7 +649,7 @@ impl intravisit::Visitor<'tcx> for LintLevelMapBuilder<'_, 'tcx> {\n         })\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         self.with_lint_attrs(trait_item.hir_id, &trait_item.attrs, |builder| {\n             intravisit::walk_trait_item(builder, trait_item);\n         });"}, {"sha": "466c7a37d0f6c7ff43a125f67df22ff2e62ffdb3", "filename": "src/librustc/middle/diagnostic_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdiagnostic_items.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -29,7 +29,7 @@ impl<'v, 'tcx> ItemLikeVisitor<'v> for DiagnosticItemCollector<'tcx> {\n         self.observe_item(&item.attrs, item.hir_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         self.observe_item(&trait_item.attrs, trait_item.hir_id);\n     }\n "}, {"sha": "dadc9261a3e0935121bf7238cc9d06946b573471", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -151,7 +151,7 @@ impl ItemLikeVisitor<'v> for LanguageItemCollector<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n         // At present, lang items are always items, not trait items.\n     }\n "}, {"sha": "643c92185c8025f17272817a4e354f0d0adcef22", "filename": "src/librustc/middle/reachable.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Freachable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Freachable.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -387,7 +387,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for CollectPrivateImplItemsVisitor<'a, 'tcx\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n         // processed in visit_item above"}, {"sha": "c6a4a926ae484b898930bd6584d5ae464cad5a02", "filename": "src/librustc/middle/resolve_lifetime.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve_lifetime.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -771,7 +771,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LifetimeContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         use self::hir::TraitItemKind::*;\n         match trait_item.kind {\n             Method(ref sig, _) => {"}, {"sha": "03c6abfbb846a22b14556008f01d7e4255b29163", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -283,7 +283,7 @@ impl<'a, 'tcx> Visitor<'tcx> for Annotator<'a, 'tcx> {\n         self.in_trait_impl = orig_in_trait_impl;\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         self.annotate(ti.hir_id, &ti.attrs, ti.span, AnnotationKind::Required, |v| {\n             intravisit::walk_trait_item(v, ti);\n         });\n@@ -368,7 +368,7 @@ impl<'a, 'tcx> Visitor<'tcx> for MissingStabilityAnnotations<'a, 'tcx> {\n         intravisit::walk_item(self, i)\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         self.check_missing_stability(ti.hir_id, ti.span, \"item\");\n         intravisit::walk_trait_item(self, ti);\n     }"}, {"sha": "1a21be66c43265d1808e655213b90134dab01efc", "filename": "src/librustc_codegen_utils/symbol_names_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names_test.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -61,7 +61,7 @@ impl hir::itemlikevisit::ItemLikeVisitor<'tcx> for SymbolNamesTest<'tcx> {\n         self.process_attrs(item.hir_id);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         self.process_attrs(trait_item.hir_id);\n     }\n "}, {"sha": "db64e736a5ce7e160f0474b086134211b9e83e0c", "filename": "src/librustc_incremental/assert_dep_graph.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_incremental%2Fassert_dep_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_dep_graph.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -167,7 +167,7 @@ impl Visitor<'tcx> for IfThisChanged<'tcx> {\n         intravisit::walk_item(self, item);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         self.process_attrs(trait_item.hir_id, &trait_item.attrs);\n         intravisit::walk_trait_item(self, trait_item);\n     }"}, {"sha": "b8f58ca2e91afb540930ba08772945d8815f35dc", "filename": "src/librustc_incremental/persist/dirty_clean.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fdirty_clean.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -536,7 +536,7 @@ impl ItemLikeVisitor<'tcx> for DirtyCleanVisitor<'tcx> {\n         self.check_item(item.hir_id, item.span);\n     }\n \n-    fn visit_trait_item(&mut self, item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, item: &hir::TraitItem<'_>) {\n         self.check_item(item.hir_id, item.span);\n     }\n "}, {"sha": "c13dd59583483576649d11b3be57e77d8b374b7e", "filename": "src/librustc_interface/proc_macro_decls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_interface%2Fproc_macro_decls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fproc_macro_decls.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -30,7 +30,7 @@ impl<'v> ItemLikeVisitor<'v> for Finder {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "0a38ca55a248ae29b2fbd334e90c02576cc86641", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -436,7 +436,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingDoc {\n         self.check_missing_docs_attrs(cx, Some(it.hir_id), &it.attrs, it.span, desc);\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, trait_item: &hir::TraitItem<'_>) {\n         if self.private_traits.contains(&trait_item.hir_id) {\n             return;\n         }"}, {"sha": "e4805f1217b71d871ac5308d2b9cf97521a8051a", "filename": "src/librustc_lint/nonstandard_style.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_lint%2Fnonstandard_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fnonstandard_style.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -331,7 +331,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonSnakeCase {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, item: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Method(_, hir::TraitMethod::Required(pnames)) = &item.kind {\n             self.check_snake_case(cx, \"trait method\", &item.ident);\n             for param_name in pnames {\n@@ -398,7 +398,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NonUpperCaseGlobals {\n         }\n     }\n \n-    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, ti: &hir::TraitItem) {\n+    fn check_trait_item(&mut self, cx: &LateContext<'_, '_>, ti: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Const(..) = ti.kind {\n             NonUpperCaseGlobals::check_upper_case(cx, \"associated constant\", &ti.ident);\n         }"}, {"sha": "14f83642f9c258ddf70cf7dce808b046764dc760", "filename": "src/librustc_metadata/foreign_modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Fforeign_modules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Fforeign_modules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fforeign_modules.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -33,6 +33,6 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n         });\n     }\n \n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n }"}, {"sha": "2fb0790cb4669546649a5ffb2e18aadbb99eb681", "filename": "src/librustc_metadata/link_args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Flink_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Flink_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Flink_args.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -45,7 +45,7 @@ impl<'tcx> ItemLikeVisitor<'tcx> for Collector {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n }\n "}, {"sha": "d8230b67037d04217894d58a16ac8bf4c8ff3d6f", "filename": "src/librustc_metadata/native_libs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Fnative_libs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Fnative_libs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fnative_libs.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -129,7 +129,7 @@ impl ItemLikeVisitor<'tcx> for Collector<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _it: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _it: &'tcx hir::ImplItem) {}\n }\n "}, {"sha": "0f168ff906fe5939927a6f45f736cce2e2901476", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -864,7 +864,7 @@ impl EncodeContext<'tcx> {\n         });\n         record!(self.per_def.visibility[def_id] <- trait_item.vis);\n         record!(self.per_def.span[def_id] <- ast_item.span);\n-        record!(self.per_def.attributes[def_id] <- &ast_item.attrs);\n+        record!(self.per_def.attributes[def_id] <- ast_item.attrs);\n         self.encode_stability(def_id);\n         self.encode_const_stability(def_id);\n         self.encode_deprecation(def_id);\n@@ -1725,7 +1725,7 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _trait_item: &'v hir::TraitItem<'v>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &'v hir::ImplItem) {\n         // handled in `visit_item` above"}, {"sha": "9645607e5ac1a728c29cd81e9ab4f4bf504d1ea3", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -59,7 +59,10 @@ pub fn mir_build(tcx: TyCtxt<'_>, def_id: DefId) -> BodyAndCache<'_> {\n             (*body_id, ty.span)\n         }\n         | Node::ImplItem(hir::ImplItem { kind: hir::ImplItemKind::Const(ty, body_id), .. })\n-        | Node::TraitItem(\n+        => {\n+            (*body_id, ty.span)\n+        }\n+        Node::TraitItem(\n             hir::TraitItem { kind: hir::TraitItemKind::Const(ty, Some(body_id)), .. }\n         ) => {\n             (*body_id, ty.span)"}, {"sha": "18b811be46594595a822a0bb0eaba728ecd8cb74", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -1059,7 +1059,7 @@ impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _: &'v hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _: &'v hir::TraitItem<'v>) {\n         // Even if there's a default body with no explicit generics,\n         // it's still generic over some `Self: Trait`, so not a root.\n     }"}, {"sha": "b36db76c7df95ed5239169a665e40583335e591d", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -417,7 +417,7 @@ impl<'v, 'k, 'tcx> ItemLikeVisitor<'v> for LifeSeeder<'k, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _item: &hir::TraitItem<'_>) {\n         // ignore: we are handling this in `visit_item` above\n     }\n \n@@ -662,7 +662,7 @@ impl Visitor<'tcx> for DeadVisitor<'tcx> {\n     }\n \n     // Overwrite so that we don't warn the trait item itself.\n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         match trait_item.kind {\n             hir::TraitItemKind::Const(_, Some(body_id)) |\n             hir::TraitItemKind::Method(_, hir::TraitMethod::Provided(body_id)) => {"}, {"sha": "ad9a924d5d37fb03fa0af1b67df3550dbbf26b7b", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n         find_item(item, self, at_root);\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &'tcx TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &'tcx TraitItem<'tcx>) {\n         // Entry fn is never a trait item.\n     }\n "}, {"sha": "5598613e5c98f5e19f24a811d91e82dd1f0aeae3", "filename": "src/librustc_passes/hir_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fhir_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Fhir_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fhir_stats.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -188,7 +188,7 @@ impl<'v> hir_visit::Visitor<'v> for StatCollector<'v> {\n         hir_visit::walk_where_predicate(self, predicate)\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'v hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'v hir::TraitItem<'v>) {\n         self.record(\"TraitItem\", Id::Node(ti.hir_id), ti);\n         hir_visit::walk_trait_item(self, ti)\n     }"}, {"sha": "24b6753c0c7ed8a38fc4447197ba2f5d0e2b0df5", "filename": "src/librustc_passes/layout_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Flayout_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_passes%2Flayout_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Flayout_test.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -40,7 +40,7 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n }\n "}, {"sha": "6da3e87262881a26be0806a0a1524a72dcf84fb0", "filename": "src/librustc_plugin_impl/build.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_plugin_impl%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_plugin_impl%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_plugin_impl%2Fbuild.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -22,7 +22,7 @@ impl<'v> ItemLikeVisitor<'v> for RegistrarFinder {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "b7c06609fa35edb83bf37b310d02a755535154f5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -1013,7 +1013,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NamePrivacyVisitor<'a, 'tcx> {\n         self.tables = orig_tables;\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, ti.hir_id, self.empty_tables));\n         intravisit::walk_trait_item(self, ti);\n@@ -1295,7 +1295,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypePrivacyVisitor<'a, 'tcx> {\n         self.current_item = orig_current_item;\n     }\n \n-    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, ti: &'tcx hir::TraitItem<'tcx>) {\n         let orig_tables =\n             mem::replace(&mut self.tables, item_tables(self.tcx, ti.hir_id, self.empty_tables));\n         intravisit::walk_trait_item(self, ti);"}, {"sha": "1f5958ef8fbf2e7af745c8b0fd361a20fca6706a", "filename": "src/librustc_traits/lowering/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_traits%2Flowering%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Flowering%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -674,7 +674,7 @@ impl Visitor<'tcx> for ClauseDumper<'tcx> {\n         intravisit::walk_item(self, item);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         self.process_attrs(trait_item.hir_id, &trait_item.attrs);\n         intravisit::walk_trait_item(self, trait_item);\n     }"}, {"sha": "3c6e6d974d9d7cd44bc40df9199aeb821b0be3ef", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -1013,7 +1013,7 @@ fn compute_all_traits(tcx: TyCtxt<'_>) -> Vec<DefId> {\n             }\n         }\n \n-        fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {}\n+        fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {}\n \n         fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {}\n     }"}, {"sha": "ce5a385b587e129594ac863d42357ea3d71902d1", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -754,7 +754,7 @@ impl ItemLikeVisitor<'tcx> for CheckItemTypesVisitor<'tcx> {\n     fn visit_item(&mut self, i: &'tcx hir::Item<'tcx>) {\n         check_item_type(self.tcx, i);\n     }\n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) { }\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }\n "}, {"sha": "207db48860f98fda7296ff7550656bddebcde1f9", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -1087,7 +1087,7 @@ impl ParItemLikeVisitor<'tcx> for CheckTypeWellFormedVisitor<'tcx> {\n         self.tcx.ensure().check_item_well_formed(def_id);\n     }\n \n-    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         debug!(\"visit_trait_item: {:?}\", trait_item);\n         let def_id = self.tcx.hir().local_def_id(trait_item.hir_id);\n         self.tcx.ensure().check_trait_item_well_formed(def_id);"}, {"sha": "950954a66ef37d29e3ee925c1c77dac10e71d770", "filename": "src/librustc_typeck/check_unused.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcheck_unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck_unused.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -38,7 +38,7 @@ impl ItemLikeVisitor<'v> for CheckVisitor<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {\n@@ -231,7 +231,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for CollectExternCrateVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "2e4c25cf0dffad29b103d3c64968f45f04f13f40", "filename": "src/librustc_typeck/coherence/inherent_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -254,7 +254,7 @@ impl ItemLikeVisitor<'v> for InherentCollect<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "11bd0209c0d204dabced73b1df9a460b94db7a55", "filename": "src/librustc_typeck/coherence/inherent_impls_overlap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Finherent_impls_overlap.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -98,7 +98,7 @@ impl ItemLikeVisitor<'v> for InherentOverlapChecker<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'v>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "85e5dad0ccd31dcaf150f3b4832d1651787e8e88", "filename": "src/librustc_typeck/coherence/orphan.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Forphan.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -218,7 +218,7 @@ impl ItemLikeVisitor<'v> for OrphanChecker<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "0a7c907fe5df9c12250203a3eceed98abd4b3c5b", "filename": "src/librustc_typeck/coherence/unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Funsafety.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -78,7 +78,7 @@ impl ItemLikeVisitor<'v> for UnsafetyChecker<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, _trait_item: &hir::TraitItem<'_>) {\n     }\n \n     fn visit_impl_item(&mut self, _impl_item: &hir::ImplItem) {"}, {"sha": "c09d56b3984b038de3e229ea989d9d574adba859", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -145,7 +145,7 @@ impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n         intravisit::walk_expr(self, expr);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &'tcx hir::TraitItem<'tcx>) {\n         convert_trait_item(self.tcx, trait_item.hir_id);\n         intravisit::walk_trait_item(self, trait_item);\n     }\n@@ -1711,7 +1711,7 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n                 intravisit::walk_impl_item(self, it);\n             }\n         }\n-        fn visit_trait_item(&mut self, it: &'tcx TraitItem) {\n+        fn visit_trait_item(&mut self, it: &'tcx TraitItem<'tcx>) {\n             debug!(\"find_existential_constraints: visiting {:?}\", it);\n             let def_id = self.tcx.hir().local_def_id(it.hir_id);\n             self.check(def_id);"}, {"sha": "b7691189865b01a74f1e6d568ea49397bb3f401a", "filename": "src/librustc_typeck/impl_wf_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fimpl_wf_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fimpl_wf_check.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -89,7 +89,7 @@ impl ItemLikeVisitor<'tcx> for ImplWfCheck<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem) { }\n+    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) { }\n \n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) { }\n }"}, {"sha": "edf83b1de1de60a0b9c5de660a1b11de0e7b778c", "filename": "src/librustc_typeck/outlives/implicit_infer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Fimplicit_infer.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -113,7 +113,7 @@ impl<'cx, 'tcx> ItemLikeVisitor<'tcx> for InferVisitor<'cx, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _trait_item: &'tcx hir::TraitItem<'tcx>) {}\n \n     fn visit_impl_item(&mut self, _impl_item: &'tcx hir::ImplItem) {}\n }"}, {"sha": "a8c4f9c0ebb519b0058187e1c22b6f61902d5f05", "filename": "src/librustc_typeck/outlives/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Foutlives%2Ftest.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -33,6 +33,6 @@ impl ItemLikeVisitor<'tcx> for OutlivesTest<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) {}\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) {}\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) {}\n }"}, {"sha": "ff29c3ca4bd6431f9741141a8794e43f64c0d261", "filename": "src/librustc_typeck/variance/constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fconstraints.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -104,7 +104,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for ConstraintContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Method(..) = trait_item.kind {\n             self.visit_node_helper(trait_item.hir_id);\n         }"}, {"sha": "4de16e715539fb48a5a7e00d9e33b932ad42b442", "filename": "src/librustc_typeck/variance/terms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Fterms.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -167,7 +167,7 @@ impl<'a, 'tcx, 'v> ItemLikeVisitor<'v> for TermsContext<'a, 'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n+    fn visit_trait_item(&mut self, trait_item: &hir::TraitItem<'_>) {\n         if let hir::TraitItemKind::Method(..) = trait_item.kind {\n             self.add_inferreds_for_item(trait_item.hir_id);\n         }"}, {"sha": "416cb91c232999a20c147138ae7bc3ba2b941697", "filename": "src/librustc_typeck/variance/test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance%2Ftest.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -29,6 +29,6 @@ impl ItemLikeVisitor<'tcx> for VarianceTest<'tcx> {\n         }\n     }\n \n-    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem) { }\n+    fn visit_trait_item(&mut self, _: &'tcx hir::TraitItem<'tcx>) { }\n     fn visit_impl_item(&mut self, _: &'tcx hir::ImplItem) { }\n }"}, {"sha": "5dd82689369777aa89ffe65fb723a2ac74fa5e39", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -70,6 +70,12 @@ impl<T: Clean<U>, U, V: Idx> Clean<IndexVec<V, U>> for IndexVec<V, T> {\n     }\n }\n \n+impl<T: Clean<U>, U> Clean<U> for &T {\n+    fn clean(&self, cx: &DocContext<'_>) -> U {\n+        (**self).clean(cx)\n+    }\n+}\n+\n impl<T: Clean<U>, U> Clean<U> for P<T> {\n     fn clean(&self, cx: &DocContext<'_>) -> U {\n         (**self).clean(cx)\n@@ -1080,7 +1086,7 @@ impl Clean<PolyTrait> for hir::PolyTraitRef {\n     }\n }\n \n-impl Clean<Item> for hir::TraitItem {\n+impl Clean<Item> for hir::TraitItem<'_> {\n     fn clean(&self, cx: &DocContext<'_>) -> Item {\n         let inner = match self.kind {\n             hir::TraitItemKind::Const(ref ty, default) => {\n@@ -2386,12 +2392,6 @@ impl Clean<Stability> for attr::Stability {\n     }\n }\n \n-impl<'a> Clean<Stability> for &'a attr::Stability {\n-    fn clean(&self, dc: &DocContext<'_>) -> Stability {\n-        (**self).clean(dc)\n-    }\n-}\n-\n impl Clean<Deprecation> for attr::Deprecation {\n     fn clean(&self, _: &DocContext<'_>) -> Deprecation {\n         Deprecation {"}, {"sha": "f5de869cf132b9134ececb9112e317fdc9be827f", "filename": "src/librustdoc/doctree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustdoc%2Fdoctree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f7d77363b551eb9a1dc4ae348d213180eae070d/src%2Flibrustdoc%2Fdoctree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fdoctree.rs?ref=0f7d77363b551eb9a1dc4ae348d213180eae070d", "patch": "@@ -179,7 +179,7 @@ pub struct Trait<'hir> {\n     pub is_auto: hir::IsAuto,\n     pub unsafety: hir::Unsafety,\n     pub name: Name,\n-    pub items: Vec<&'hir hir::TraitItem>,\n+    pub items: Vec<&'hir hir::TraitItem<'hir>>,\n     pub generics: &'hir hir::Generics,\n     pub bounds: &'hir [hir::GenericBound],\n     pub attrs: &'hir [ast::Attribute],"}]}