{"sha": "828d60574f8ecbc33fe4987913c6f713e41af1ae", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyOGQ2MDU3NGY4ZWNiYzMzZmU0OTg3OTEzYzZmNzEzZTQxYWYxYWU=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-14T14:26:03Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-09-17T17:47:45Z"}, "message": "Refactor a bit to prepare for resolving trait assoc items", "tree": {"sha": "cd51badc345665f6d1ea5eb09cb9a00ff4093b73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd51badc345665f6d1ea5eb09cb9a00ff4093b73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/828d60574f8ecbc33fe4987913c6f713e41af1ae", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/828d60574f8ecbc33fe4987913c6f713e41af1ae", "html_url": "https://github.com/rust-lang/rust/commit/828d60574f8ecbc33fe4987913c6f713e41af1ae", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/828d60574f8ecbc33fe4987913c6f713e41af1ae/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913ab1ec0ad10873134ca429c1496806a9261206", "url": "https://api.github.com/repos/rust-lang/rust/commits/913ab1ec0ad10873134ca429c1496806a9261206", "html_url": "https://github.com/rust-lang/rust/commit/913ab1ec0ad10873134ca429c1496806a9261206"}], "stats": {"total": 135, "additions": 83, "deletions": 52}, "files": [{"sha": "892208c1a98e147230001143678f7b912ca3e8f9", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -749,6 +749,10 @@ impl Const {\n         db.const_data(self)\n     }\n \n+    pub fn name(&self, db: &impl HirDatabase) -> Option<Name> {\n+        self.data(db).name().cloned()\n+    }\n+\n     pub fn infer(self, db: &impl HirDatabase) -> Arc<InferenceResult> {\n         db.infer(self.into())\n     }\n@@ -1019,3 +1023,30 @@ impl Container {\n         }\n     }\n }\n+\n+#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+pub enum AssocItem {\n+    Function(Function),\n+    Const(Const),\n+    TypeAlias(TypeAlias),\n+}\n+\n+impl From<TraitItem> for AssocItem {\n+    fn from(t: TraitItem) -> Self {\n+        match t {\n+            TraitItem::Function(f) => AssocItem::Function(f),\n+            TraitItem::Const(c) => AssocItem::Const(c),\n+            TraitItem::TypeAlias(t) => AssocItem::TypeAlias(t),\n+        }\n+    }\n+}\n+\n+impl From<crate::ImplItem> for AssocItem {\n+    fn from(i: crate::ImplItem) -> Self {\n+        match i {\n+            crate::ImplItem::Method(f) => AssocItem::Function(f),\n+            crate::ImplItem::Const(c) => AssocItem::Const(c),\n+            crate::ImplItem::TypeAlias(t) => AssocItem::TypeAlias(t),\n+        }\n+    }\n+}"}, {"sha": "db82a463c6eea0ca857d62523103038660438229", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -85,7 +85,7 @@ pub use self::{\n pub use self::code_model::{\n     docs::{DocDef, Docs, Documentation},\n     src::{HasBodySource, HasSource, Source},\n-    Adt, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n-    EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef, ModuleSource,\n-    Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Adt, AssocItem, BuiltinType, Const, ConstData, Container, Crate, CrateDependency, DefWithBody,\n+    Enum, EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n+    ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };"}, {"sha": "7f4c78859ead702a0329e439a917ca9a42ba46ca", "filename": "crates/ra_hir/src/resolve.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fresolve.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -50,7 +50,7 @@ pub(crate) enum Scope {\n     ExprScope(ExprScope),\n }\n \n-#[derive(Debug, Clone, PartialEq, Eq)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum TypeNs {\n     SelfType(ImplBlock),\n     GenericParam(u32),\n@@ -59,19 +59,19 @@ pub enum TypeNs {\n     TypeAlias(TypeAlias),\n     BuiltinType(BuiltinType),\n     Trait(Trait),\n-    // Module belong to type ns, but the resovler is used when all module paths\n+    // Module belong to type ns, but the resolver is used when all module paths\n     // are fully resolved.\n     // Module(Module)\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ResolveValueResult<'a> {\n     ValueNs(ValueNs),\n     Partial(TypeNs, usize),\n     TypeRef(&'a TypeRef),\n }\n \n-#[derive(Debug)]\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum ValueNs {\n     LocalBinding(PatId),\n     Function(Function),"}, {"sha": "4d895f0a1964bba9cf1054d5b91b4023710a62da", "filename": "crates/ra_hir/src/source_binder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_binder.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -190,7 +190,7 @@ pub enum PathResolution {\n     GenericParam(u32),\n     SelfType(crate::ImplBlock),\n     Macro(MacroDef),\n-    AssocItem(crate::ImplItem),\n+    AssocItem(crate::AssocItem),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq)]"}, {"sha": "6aaf61c0ecb47b3a3d4a3c1de2a608150f1211e9", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 27, "deletions": 30, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -48,7 +48,7 @@ use crate::{\n     resolve::{ResolveValueResult, Resolver, TypeNs, ValueNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n     type_ref::{Mutability, TypeRef},\n-    Adt, ConstData, DefWithBody, Either, FnData, Function, HasBody, ImplItem, Name, Path,\n+    Adt, AssocItem, ConstData, DefWithBody, Either, FnData, Function, HasBody, ImplItem, Name, Path,\n     StructField,\n };\n \n@@ -121,7 +121,7 @@ pub struct InferenceResult {\n     /// For each struct literal, records the variant it resolves to.\n     variant_resolutions: FxHashMap<ExprOrPatId, VariantDef>,\n     /// For each associated item record what it resolves to\n-    assoc_resolutions: FxHashMap<ExprOrPatId, ImplItem>,\n+    assoc_resolutions: FxHashMap<ExprOrPatId, AssocItem>,\n     diagnostics: Vec<InferenceDiagnostic>,\n     pub(super) type_of_expr: ArenaMap<ExprId, Ty>,\n     pub(super) type_of_pat: ArenaMap<PatId, Ty>,\n@@ -141,10 +141,10 @@ impl InferenceResult {\n     pub fn variant_resolution_for_pat(&self, id: PatId) -> Option<VariantDef> {\n         self.variant_resolutions.get(&id.into()).copied()\n     }\n-    pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<ImplItem> {\n+    pub fn assoc_resolutions_for_expr(&self, id: ExprId) -> Option<AssocItem> {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n-    pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<ImplItem> {\n+    pub fn assoc_resolutions_for_pat(&self, id: PatId) -> Option<AssocItem> {\n         self.assoc_resolutions.get(&id.into()).copied()\n     }\n     pub fn type_mismatch_for_expr(&self, expr: ExprId) -> Option<&TypeMismatch> {\n@@ -235,7 +235,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.result.variant_resolutions.insert(id, variant);\n     }\n \n-    fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: ImplItem) {\n+    fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItem) {\n         self.result.assoc_resolutions.insert(id, item);\n     }\n \n@@ -560,8 +560,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             let ty = mem::replace(&mut ty, Ty::Unknown);\n             def_or_ty = ty.iterate_impl_items(self.db, krate, |item| {\n                 match item {\n-                    crate::ImplItem::Method(_) => None,\n-                    crate::ImplItem::Const(_) => None,\n+                    crate::ImplItem::Method(_) | crate::ImplItem::Const(_) => None,\n \n                     // FIXME: Resolve associated types\n                     crate::ImplItem::TypeAlias(_) => {\n@@ -573,34 +572,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         }\n \n         let segment = path.segments.last().unwrap();\n-        let def = ty.clone().iterate_impl_items(self.db, krate, |item| {\n-            let matching_def: Option<ValueNs> = match item {\n-                crate::ImplItem::Method(func) => {\n-                    if segment.name == func.name(self.db) {\n-                        Some(ValueNs::Function(func))\n-                    } else {\n-                        None\n-                    }\n+        let def = ty.clone().iterate_impl_items(self.db, krate, |item| match item {\n+            crate::ImplItem::Method(func) => {\n+                if segment.name == func.name(self.db) {\n+                    Some(ValueNs::Function(func))\n+                } else {\n+                    None\n                 }\n+            }\n \n-                crate::ImplItem::Const(konst) => {\n-                    let data = konst.data(self.db);\n-                    if Some(&segment.name) == data.name() {\n-                        Some(ValueNs::Const(konst))\n-                    } else {\n-                        None\n-                    }\n-                }\n-                crate::ImplItem::TypeAlias(_) => None,\n-            };\n-            match matching_def {\n-                Some(_) => {\n-                    self.write_assoc_resolution(id, item);\n-                    matching_def\n+            crate::ImplItem::Const(konst) => {\n+                if konst.name(self.db).map_or(false, |n| n == segment.name) {\n+                    Some(ValueNs::Const(konst))\n+                } else {\n+                    None\n                 }\n-                None => None,\n             }\n+            crate::ImplItem::TypeAlias(_) => None,\n         })?;\n+        self.write_assoc_resolution(\n+            id,\n+            match def {\n+                ValueNs::Function(f) => AssocItem::Function(f),\n+                ValueNs::Const(c) => AssocItem::Const(c),\n+                _ => unreachable!(),\n+            },\n+        );\n         let self_types = self.find_self_types(&def, ty);\n         Some((def, self_types))\n     }"}, {"sha": "11f73ccfd02e1128137a2edb9d7249301a46b8d1", "filename": "crates/ra_ide_api/src/display/navigation_target.rs", "status": "modified", "additions": 9, "deletions": 6, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -1,4 +1,4 @@\n-use hir::{FieldSource, HasSource, ImplItem, ModuleSource};\n+use hir::{AssocItem, FieldSource, HasSource, ModuleSource};\n use ra_db::{FileId, SourceDatabase};\n use ra_syntax::{\n     algo::visit::{visitor, Visitor},\n@@ -221,11 +221,14 @@ impl NavigationTarget {\n         )\n     }\n \n-    pub(crate) fn from_impl_item(db: &RootDatabase, impl_item: hir::ImplItem) -> NavigationTarget {\n-        match impl_item {\n-            ImplItem::Method(it) => NavigationTarget::from_def_source(db, it),\n-            ImplItem::Const(it) => NavigationTarget::from_def_source(db, it),\n-            ImplItem::TypeAlias(it) => NavigationTarget::from_def_source(db, it),\n+    pub(crate) fn from_assoc_item(\n+        db: &RootDatabase,\n+        assoc_item: hir::AssocItem,\n+    ) -> NavigationTarget {\n+        match assoc_item {\n+            AssocItem::Function(it) => NavigationTarget::from_def_source(db, it),\n+            AssocItem::Const(it) => NavigationTarget::from_def_source(db, it),\n+            AssocItem::TypeAlias(it) => NavigationTarget::from_def_source(db, it),\n         }\n     }\n "}, {"sha": "503dcacff4f2ef8007d1e0a50c90c904abc12f3c", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -60,7 +60,7 @@ pub(crate) fn reference_definition(\n     match classify_name_ref(db, &analyzer, name_ref) {\n         Some(Macro(mac)) => return Exact(NavigationTarget::from_macro_def(db, mac)),\n         Some(FieldAccess(field)) => return Exact(NavigationTarget::from_field(db, field)),\n-        Some(AssocItem(assoc)) => return Exact(NavigationTarget::from_impl_item(db, assoc)),\n+        Some(AssocItem(assoc)) => return Exact(NavigationTarget::from_assoc_item(db, assoc)),\n         Some(Method(func)) => return Exact(NavigationTarget::from_def_source(db, func)),\n         Some(Def(def)) => match NavigationTarget::from_def(db, def) {\n             Some(nav) => return Exact(nav),"}, {"sha": "655bcdb16d9f3ea789c95b627a10ff785e40ffd9", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -117,9 +117,9 @@ pub(crate) fn hover(db: &RootDatabase, position: FilePosition) -> Option<RangeIn\n                 }\n             }\n             Some(AssocItem(it)) => res.extend(match it {\n-                hir::ImplItem::Method(it) => from_def_source(db, it),\n-                hir::ImplItem::Const(it) => from_def_source(db, it),\n-                hir::ImplItem::TypeAlias(it) => from_def_source(db, it),\n+                hir::AssocItem::Function(it) => from_def_source(db, it),\n+                hir::AssocItem::Const(it) => from_def_source(db, it),\n+                hir::AssocItem::TypeAlias(it) => from_def_source(db, it),\n             }),\n             Some(Def(it)) => {\n                 match it {"}, {"sha": "aff03464ae7b4377173081165e80a00557a4e554", "filename": "crates/ra_ide_api/src/name_ref_kind.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fname_ref_kind.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -8,7 +8,7 @@ pub enum NameRefKind {\n     Method(hir::Function),\n     Macro(hir::MacroDef),\n     FieldAccess(hir::StructField),\n-    AssocItem(hir::ImplItem),\n+    AssocItem(hir::AssocItem),\n     Def(hir::ModuleDef),\n     SelfType(hir::Ty),\n     Pat(AstPtr<ast::BindPat>),"}, {"sha": "3d7f91c1deeb10c78bb1b7250be565384bb2659a", "filename": "crates/ra_ide_api/src/syntax_highlighting.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/828d60574f8ecbc33fe4987913c6f713e41af1ae/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fsyntax_highlighting.rs?ref=828d60574f8ecbc33fe4987913c6f713e41af1ae", "patch": "@@ -102,9 +102,9 @@ pub(crate) fn highlight(db: &RootDatabase, file_id: FileId) -> Vec<HighlightedRa\n                         Some(Method(_)) => \"function\",\n                         Some(Macro(_)) => \"macro\",\n                         Some(FieldAccess(_)) => \"field\",\n-                        Some(AssocItem(hir::ImplItem::Method(_))) => \"function\",\n-                        Some(AssocItem(hir::ImplItem::Const(_))) => \"constant\",\n-                        Some(AssocItem(hir::ImplItem::TypeAlias(_))) => \"type\",\n+                        Some(AssocItem(hir::AssocItem::Function(_))) => \"function\",\n+                        Some(AssocItem(hir::AssocItem::Const(_))) => \"constant\",\n+                        Some(AssocItem(hir::AssocItem::TypeAlias(_))) => \"type\",\n                         Some(Def(hir::ModuleDef::Module(_))) => \"module\",\n                         Some(Def(hir::ModuleDef::Function(_))) => \"function\",\n                         Some(Def(hir::ModuleDef::Adt(_))) => \"type\","}]}