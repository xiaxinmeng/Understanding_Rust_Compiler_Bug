{"sha": "04c12952ca11b286536ac2826446f5f686b4af73", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YzEyOTUyY2ExMWIyODY1MzZhYzI4MjY0NDZmNWY2ODZiNGFmNzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-07T08:05:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-07T08:05:11Z"}, "message": "centralize and expand dyn-trait (method receiver) tests", "tree": {"sha": "6c53ad119f3a159d7c4cb3c93c12aa84d640d5d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6c53ad119f3a159d7c4cb3c93c12aa84d640d5d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04c12952ca11b286536ac2826446f5f686b4af73", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04c12952ca11b286536ac2826446f5f686b4af73", "html_url": "https://github.com/rust-lang/rust/commit/04c12952ca11b286536ac2826446f5f686b4af73", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04c12952ca11b286536ac2826446f5f686b4af73/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c77b2826953b126f3dfe752ef461f85d5a24d5a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/c77b2826953b126f3dfe752ef461f85d5a24d5a3", "html_url": "https://github.com/rust-lang/rust/commit/c77b2826953b126f3dfe752ef461f85d5a24d5a3"}], "stats": {"total": 199, "additions": 140, "deletions": 59}, "files": [{"sha": "5ce0e8f5957bed806a50861a0225e1d5541e0853", "filename": "tests/run-pass/box_box_trait.rs", "status": "removed", "additions": 0, "deletions": 29, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/c77b2826953b126f3dfe752ef461f85d5a24d5a3/tests%2Frun-pass%2Fbox_box_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77b2826953b126f3dfe752ef461f85d5a24d5a3/tests%2Frun-pass%2Fbox_box_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbox_box_trait.rs?ref=c77b2826953b126f3dfe752ef461f85d5a24d5a3", "patch": "@@ -1,29 +0,0 @@\n-struct DroppableStruct;\n-\n-static mut DROPPED: bool = false;\n-\n-impl Drop for DroppableStruct {\n-    fn drop(&mut self) {\n-        unsafe { DROPPED = true; }\n-    }\n-}\n-\n-trait MyTrait { fn dummy(&self) { } }\n-impl MyTrait for Box<DroppableStruct> {}\n-\n-struct Whatever { w: Box<dyn MyTrait+'static> }\n-\n-impl  Whatever {\n-    fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n-        Whatever { w: w }\n-    }\n-}\n-\n-fn main() {\n-    {\n-        let f = Box::new(DroppableStruct);\n-        let a = Whatever::new(Box::new(f) as Box<dyn MyTrait>);\n-        a.w.dummy();\n-    }\n-    assert!(unsafe { DROPPED });\n-}"}, {"sha": "bcff3e0b76dcc49f04f38ae75200c299c022b79a", "filename": "tests/run-pass/dyn-traits.rs", "status": "added", "additions": 140, "deletions": 0, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/04c12952ca11b286536ac2826446f5f686b4af73/tests%2Frun-pass%2Fdyn-traits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04c12952ca11b286536ac2826446f5f686b4af73/tests%2Frun-pass%2Fdyn-traits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fdyn-traits.rs?ref=04c12952ca11b286536ac2826446f5f686b4af73", "patch": "@@ -0,0 +1,140 @@\n+#![feature(unsized_locals)]\n+\n+fn ref_dyn() {\n+    struct Struct(i32);\n+\n+    trait Trait {\n+        fn method(&self);\n+    }\n+\n+    impl Trait for Struct {\n+        fn method(&self) {\n+            assert_eq!(self.0, 42);\n+        }\n+    }\n+\n+    struct Foo<T: ?Sized>(T);\n+\n+    let y: &dyn Trait = &Struct(42);\n+    y.method();\n+    let x: Foo<Struct> = Foo(Struct(42));\n+    let y: &Foo<dyn Trait> = &x;\n+    y.0.method();\n+}\n+\n+fn box_dyn() {\n+    let x: Box<dyn Fn(i32) -> i32> = Box::new(|x| x * 2);\n+    assert_eq!(x(21), 42);\n+    let mut i = 5;\n+    {\n+        let mut x: Box<dyn FnMut()> = Box::new(|| i *= 2);\n+        x(); x();\n+    }\n+    assert_eq!(i, 20);\n+}\n+\n+fn box_box_trait() {\n+    struct DroppableStruct;\n+\n+    static mut DROPPED: bool = false;\n+\n+    impl Drop for DroppableStruct {\n+        fn drop(&mut self) {\n+            unsafe { DROPPED = true; }\n+        }\n+    }\n+\n+    trait MyTrait { fn dummy(&self) { } }\n+    impl MyTrait for Box<DroppableStruct> {}\n+\n+    struct Whatever { w: Box<dyn MyTrait+'static> }\n+\n+    impl  Whatever {\n+        fn new(w: Box<dyn MyTrait+'static>) -> Whatever {\n+            Whatever { w: w }\n+        }\n+    }\n+\n+    {\n+        let f = Box::new(DroppableStruct);\n+        let a = Whatever::new(Box::new(f) as Box<dyn MyTrait>);\n+        a.w.dummy();\n+    }\n+    assert!(unsafe { DROPPED });\n+}\n+\n+fn unsized_dyn() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    struct A;\n+\n+    impl Foo for A {\n+        fn foo(self) -> String {\n+            format!(\"hello\")\n+        }\n+    }\n+\n+    let x = *(Box::new(A) as Box<dyn Foo>);\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+\n+    // I'm not sure whether we want this to work\n+    let x = Box::new(A) as Box<dyn Foo>;\n+    assert_eq!(x.foo(), format!(\"hello\"));\n+}\n+\n+fn unsized_dyn_autoderef() {\n+    pub trait Foo {\n+        fn foo(self) -> String;\n+    }\n+\n+    impl Foo for [char] {\n+        fn foo(self) -> String {\n+            self.iter().collect()\n+        }\n+    }\n+\n+    impl Foo for str {\n+        fn foo(self) -> String {\n+            self.to_owned()\n+        }\n+    }\n+\n+    impl Foo for dyn FnMut() -> String {\n+        fn foo(mut self) -> String {\n+            self()\n+        }\n+    }\n+\n+    let x = *(Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(['h', 'e', 'l', 'l', 'o']) as Box<[char]>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(\"hello\".to_owned().into_boxed_str());\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = \"hello\".to_owned().into_boxed_str();\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = *(Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>);\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+\n+    let x = Box::new(|| \"hello\".to_owned()) as Box<dyn FnMut() -> String>;\n+    assert_eq!(&x.foo() as &str, \"hello\");\n+}\n+\n+fn main() {\n+    ref_dyn();\n+    box_dyn();\n+    box_box_trait();\n+\n+    // \"exotic\" receivers\n+    unsized_dyn();\n+    unsized_dyn_autoderef();\n+}"}, {"sha": "03d2db400f01368fb26bdd55a6bd088d33c53afb", "filename": "tests/run-pass/traits.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c77b2826953b126f3dfe752ef461f85d5a24d5a3/tests%2Frun-pass%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c77b2826953b126f3dfe752ef461f85d5a24d5a3/tests%2Frun-pass%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ftraits.rs?ref=c77b2826953b126f3dfe752ef461f85d5a24d5a3", "patch": "@@ -1,30 +0,0 @@\n-struct Struct(i32);\n-\n-trait Trait {\n-    fn method(&self);\n-}\n-\n-impl Trait for Struct {\n-    fn method(&self) {\n-        assert_eq!(self.0, 42);\n-    }\n-}\n-\n-struct Foo<T: ?Sized>(T);\n-\n-fn main() {\n-    let y: &dyn Trait = &Struct(42);\n-    y.method();\n-    let x: Foo<Struct> = Foo(Struct(42));\n-    let y: &Foo<dyn Trait> = &x;\n-    y.0.method();\n-\n-    let x: Box<dyn Fn(i32) -> i32> = Box::new(|x| x * 2);\n-    assert_eq!(x(21), 42);\n-    let mut i = 5;\n-    {\n-        let mut x: Box<dyn FnMut()> = Box::new(|| i *= 2);\n-        x(); x();\n-    }\n-    assert_eq!(i, 20);\n-}"}]}