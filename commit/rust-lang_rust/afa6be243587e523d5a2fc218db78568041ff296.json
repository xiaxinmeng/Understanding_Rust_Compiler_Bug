{"sha": "afa6be243587e523d5a2fc218db78568041ff296", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmYTZiZTI0MzU4N2U1MjNkNWEyZmMyMThkYjc4NTY4MDQxZmYyOTY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-13T18:31:06Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2021-05-21T15:48:34Z"}, "message": "Update tests with expected changes", "tree": {"sha": "7e2fae0c138e3031b3f3530073f80399159964d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e2fae0c138e3031b3f3530073f80399159964d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/afa6be243587e523d5a2fc218db78568041ff296", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/afa6be243587e523d5a2fc218db78568041ff296", "html_url": "https://github.com/rust-lang/rust/commit/afa6be243587e523d5a2fc218db78568041ff296", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/afa6be243587e523d5a2fc218db78568041ff296/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3379a52dffc2d0951892edd93233b8069395de61", "url": "https://api.github.com/repos/rust-lang/rust/commits/3379a52dffc2d0951892edd93233b8069395de61", "html_url": "https://github.com/rust-lang/rust/commit/3379a52dffc2d0951892edd93233b8069395de61"}], "stats": {"total": 74, "additions": 34, "deletions": 40}, "files": [{"sha": "e7718aa2289604bceee68975f8d2f391c236c0c7", "filename": "crates/hir_ty/src/infer/unify.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/afa6be243587e523d5a2fc218db78568041ff296/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa6be243587e523d5a2fc218db78568041ff296/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Finfer%2Funify.rs?ref=afa6be243587e523d5a2fc218db78568041ff296", "patch": "@@ -295,7 +295,6 @@ impl<'a> InferenceTable<'a> {\n             |ty, _| match ty.kind(&Interner) {\n                 &TyKind::InferenceVar(tv, kind) => {\n                     if tv_stack.contains(&tv) {\n-                        cov_mark::hit!(type_var_cycles_resolve_as_possible);\n                         // recursive type\n                         return self.type_variable_table.fallback_value(tv, kind);\n                     }\n@@ -366,7 +365,6 @@ mod resolve {\n         ) -> Fallible<Ty> {\n             let var = self.var_unification_table.inference_var_root(var);\n             if self.var_stack.contains(&var) {\n-                cov_mark::hit!(type_var_cycles_resolve_as_possible);\n                 // recursive type\n                 let default = self.type_variable_table.fallback_value(var, kind).cast(&Interner);\n                 return Ok((self.fallback)(var, VariableKind::Ty(kind), default, outer_binder)\n@@ -403,7 +401,6 @@ mod resolve {\n             .intern(&Interner)\n             .cast(&Interner);\n             if self.var_stack.contains(&var) {\n-                cov_mark::hit!(type_var_cycles_resolve_as_possible);\n                 // recursive\n                 return Ok((self.fallback)(var, VariableKind::Const(ty), default, outer_binder)\n                     .assert_const_ref(&Interner)"}, {"sha": "59a16f3906cd4b25524cfad5bd613f5c971b7650", "filename": "crates/hir_ty/src/tests/regression.rs", "status": "modified", "additions": 34, "deletions": 37, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/afa6be243587e523d5a2fc218db78568041ff296/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/afa6be243587e523d5a2fc218db78568041ff296/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_ty%2Fsrc%2Ftests%2Fregression.rs?ref=afa6be243587e523d5a2fc218db78568041ff296", "patch": "@@ -86,8 +86,6 @@ fn bug_651() {\n \n #[test]\n fn recursive_vars() {\n-    cov_mark::check!(type_var_cycles_resolve_completely);\n-    cov_mark::check!(type_var_cycles_resolve_as_possible);\n     check_infer(\n         r#\"\n         fn test() {\n@@ -97,12 +95,12 @@ fn recursive_vars() {\n         \"#,\n         expect![[r#\"\n             10..47 '{     ...&y]; }': ()\n-            20..21 'y': &{unknown}\n-            24..31 'unknown': &{unknown}\n-            37..44 '[y, &y]': [&&{unknown}; 2]\n-            38..39 'y': &{unknown}\n-            41..43 '&y': &&{unknown}\n-            42..43 'y': &{unknown}\n+            20..21 'y': {unknown}\n+            24..31 'unknown': {unknown}\n+            37..44 '[y, &y]': [{unknown}; 2]\n+            38..39 'y': {unknown}\n+            41..43 '&y': &{unknown}\n+            42..43 'y': {unknown}\n         \"#]],\n     );\n }\n@@ -119,19 +117,19 @@ fn recursive_vars_2() {\n         \"#,\n         expect![[r#\"\n             10..79 '{     ...x)]; }': ()\n-            20..21 'x': &&{unknown}\n-            24..31 'unknown': &&{unknown}\n-            41..42 'y': &&{unknown}\n-            45..52 'unknown': &&{unknown}\n-            58..76 '[(x, y..., &x)]': [(&&&{unknown}, &&&{unknown}); 2]\n-            59..65 '(x, y)': (&&&{unknown}, &&&{unknown})\n-            60..61 'x': &&{unknown}\n-            63..64 'y': &&{unknown}\n-            67..75 '(&y, &x)': (&&&{unknown}, &&&{unknown})\n-            68..70 '&y': &&&{unknown}\n-            69..70 'y': &&{unknown}\n-            72..74 '&x': &&&{unknown}\n-            73..74 'x': &&{unknown}\n+            20..21 'x': {unknown}\n+            24..31 'unknown': {unknown}\n+            41..42 'y': {unknown}\n+            45..52 'unknown': {unknown}\n+            58..76 '[(x, y..., &x)]': [({unknown}, {unknown}); 2]\n+            59..65 '(x, y)': ({unknown}, {unknown})\n+            60..61 'x': {unknown}\n+            63..64 'y': {unknown}\n+            67..75 '(&y, &x)': (&{unknown}, &{unknown})\n+            68..70 '&y': &{unknown}\n+            69..70 'y': {unknown}\n+            72..74 '&x': &{unknown}\n+            73..74 'x': {unknown}\n         \"#]],\n     );\n }\n@@ -165,7 +163,6 @@ fn infer_std_crash_1() {\n \n #[test]\n fn infer_std_crash_2() {\n-    cov_mark::check!(type_var_resolves_to_int_var);\n     // caused \"equating two type variables, ...\", taken from std\n     check_infer(\n         r#\"\n@@ -257,27 +254,27 @@ fn infer_std_crash_5() {\n         expect![[r#\"\n             26..322 '{     ...   } }': ()\n             32..320 'for co...     }': ()\n-            36..43 'content': &{unknown}\n+            36..43 'content': {unknown}\n             47..60 'doesnt_matter': {unknown}\n             61..320 '{     ...     }': ()\n-            75..79 'name': &&{unknown}\n-            82..166 'if doe...     }': &&{unknown}\n+            75..79 'name': &{unknown}\n+            82..166 'if doe...     }': &{unknown}\n             85..98 'doesnt_matter': bool\n-            99..128 '{     ...     }': &&{unknown}\n-            113..118 'first': &&{unknown}\n-            134..166 '{     ...     }': &&{unknown}\n-            148..156 '&content': &&{unknown}\n-            149..156 'content': &{unknown}\n+            99..128 '{     ...     }': &{unknown}\n+            113..118 'first': &{unknown}\n+            134..166 '{     ...     }': &{unknown}\n+            148..156 '&content': &{unknown}\n+            149..156 'content': {unknown}\n             181..188 'content': &{unknown}\n             191..313 'if ICE...     }': &{unknown}\n             194..231 'ICE_RE..._VALUE': {unknown}\n             194..247 'ICE_RE...&name)': bool\n-            241..246 '&name': &&&{unknown}\n-            242..246 'name': &&{unknown}\n-            248..276 '{     ...     }': &&{unknown}\n-            262..266 'name': &&{unknown}\n-            282..313 '{     ...     }': &{unknown}\n-            296..303 'content': &{unknown}\n+            241..246 '&name': &&{unknown}\n+            242..246 'name': &{unknown}\n+            248..276 '{     ...     }': &{unknown}\n+            262..266 'name': &{unknown}\n+            282..313 '{     ...     }': {unknown}\n+            296..303 'content': {unknown}\n         \"#]],\n     );\n }\n@@ -761,7 +758,7 @@ fn issue_4885() {\n         \"#,\n         expect![[r#\"\n             136..139 'key': &K\n-            198..214 '{     ...key) }': impl Future<Output = <K as Foo<R>>::Bar>\n+            198..214 '{     ...key) }': {unknown}\n             204..207 'bar': fn bar<R, K>(&K) -> impl Future<Output = <K as Foo<R>>::Bar>\n             204..212 'bar(key)': impl Future<Output = <K as Foo<R>>::Bar>\n             208..211 'key': &K"}]}