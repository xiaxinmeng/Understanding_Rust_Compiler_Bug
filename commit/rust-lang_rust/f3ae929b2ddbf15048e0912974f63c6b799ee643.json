{"sha": "f3ae929b2ddbf15048e0912974f63c6b799ee643", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzYWU5MjliMmRkYmYxNTA0OGUwOTEyOTc0ZjYzYzZiNzk5ZWU2NDM=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-15T09:10:49Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2017-08-15T09:10:49Z"}, "message": "Rustup", "tree": {"sha": "f3d3cdd42f95414f3d5a171a9b9a870fc1f889a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3d3cdd42f95414f3d5a171a9b9a870fc1f889a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3ae929b2ddbf15048e0912974f63c6b799ee643", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3ae929b2ddbf15048e0912974f63c6b799ee643", "html_url": "https://github.com/rust-lang/rust/commit/f3ae929b2ddbf15048e0912974f63c6b799ee643", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3ae929b2ddbf15048e0912974f63c6b799ee643/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3ab06c1f77ab605a098eae7df94ef633de8fd563", "url": "https://api.github.com/repos/rust-lang/rust/commits/3ab06c1f77ab605a098eae7df94ef633de8fd563", "html_url": "https://github.com/rust-lang/rust/commit/3ab06c1f77ab605a098eae7df94ef633de8fd563"}], "stats": {"total": 117, "additions": 60, "deletions": 57}, "files": [{"sha": "86d722266017995f0af68f0f1848bd1494d5988b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -215,7 +215,7 @@ fn is_relevant_expr(tcx: TyCtxt, tables: &ty::TypeckTables, expr: &Expr) -> bool\n         ExprBreak(_, None) => false,\n         ExprCall(ref path_expr, _) => {\n             if let ExprPath(ref qpath) = path_expr.node {\n-                let fun_id = tables.qpath_def(qpath, path_expr.id).def_id();\n+                let fun_id = tables.qpath_def(qpath, path_expr.hir_id).def_id();\n                 !match_def_path(tcx, fun_id, &paths::BEGIN_PANIC)\n             } else {\n                 true"}, {"sha": "6e5a18240cb98347bca1ce2acd2c40e6b075bd65", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -318,7 +318,7 @@ fn fetch_int_literal(cx: &LateContext, lit: &Expr) -> Option<u128> {\n             }\n         },\n         ExprPath(ref qpath) => {\n-            let def = cx.tables.qpath_def(qpath, lit.id);\n+            let def = cx.tables.qpath_def(qpath, lit.hir_id);\n             if let Def::Const(def_id) = def {\n                 lookup_const_by_id(cx.tcx, cx.param_env.and((def_id, Substs::empty()))).and_then(|(l, _ty)| {\n                     let body = if let Some(id) = cx.tcx.hir.as_local_node_id(l) {"}, {"sha": "7c7dbe8088330c316eb9ba83e18216512b9c5b6b", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -122,6 +122,7 @@ impl<'a, 'tcx, 'v> Hir2Qmm<'a, 'tcx, 'v> {\n                     let mk_expr = |op| {\n                         Expr {\n                             id: DUMMY_NODE_ID,\n+                            hir_id: DUMMY_HIR_ID,\n                             span: DUMMY_SP,\n                             attrs: ThinVec::new(),\n                             node: ExprBinary(dummy_spanned(op), lhs.clone(), rhs.clone()),\n@@ -411,7 +412,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NonminimalBoolVisitor<'a, 'tcx> {\n         match e.node {\n             ExprBinary(binop, _, _) if binop.node == BiOr || binop.node == BiAnd => self.bool_expr(e),\n             ExprUnary(UnNot, ref inner) => {\n-                if self.cx.tables.node_types[&inner.id].is_bool() {\n+                if self.cx.tables.node_types()[inner.hir_id].is_bool() {\n                     self.bool_expr(e);\n                 } else {\n                     walk_expr(self, e);"}, {"sha": "2a6fa051d2ff2317295d9e3eee6d1efc84219b54", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -12,7 +12,7 @@ use std::cmp::PartialOrd;\n use std::hash::{Hash, Hasher};\n use std::mem;\n use std::rc::Rc;\n-use syntax::ast::{FloatTy, LitKind, StrStyle, NodeId};\n+use syntax::ast::{FloatTy, LitKind, StrStyle};\n use syntax::ptr::P;\n \n #[derive(Debug, Copy, Clone)]\n@@ -249,7 +249,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     /// simple constant folding: Insert an expression, get a constant or none.\n     fn expr(&mut self, e: &Expr) -> Option<Constant> {\n         match e.node {\n-            ExprPath(ref qpath) => self.fetch_path(qpath, e.id),\n+            ExprPath(ref qpath) => self.fetch_path(qpath, e.hir_id),\n             ExprBlock(ref block) => self.block(block),\n             ExprIf(ref cond, ref then, ref otherwise) => self.ifthenelse(cond, then, otherwise),\n             ExprLit(ref lit) => Some(lit_to_constant(&lit.node, self.tcx, self.tables.expr_ty(e))),\n@@ -284,7 +284,7 @@ impl<'c, 'cc> ConstEvalLateContext<'c, 'cc> {\n     }\n \n     /// lookup a possibly constant expression from a ExprPath\n-    fn fetch_path(&mut self, qpath: &QPath, id: NodeId) -> Option<Constant> {\n+    fn fetch_path(&mut self, qpath: &QPath, id: HirId) -> Option<Constant> {\n         let def = self.tables.qpath_def(qpath, id);\n         match def {\n             Def::Const(def_id) |"}, {"sha": "c7593a195ff52fc4177057d29a92529ac8ac9039", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -71,7 +71,7 @@ impl CyclomaticComplexity {\n             returns,\n             ..\n         } = helper;\n-        let ret_ty = cx.tables.node_id_to_type(expr.id);\n+        let ret_ty = cx.tables.node_id_to_type(expr.hir_id);\n         let ret_adjust = if match_type(cx, ret_ty, &paths::RESULT) {\n             returns\n         } else {\n@@ -160,7 +160,7 @@ impl<'a, 'tcx> Visitor<'tcx> for CCHelper<'a, 'tcx> {\n             },\n             ExprCall(ref callee, _) => {\n                 walk_expr(self, e);\n-                let ty = self.cx.tables.node_id_to_type(callee.id);\n+                let ty = self.cx.tables.node_id_to_type(callee.hir_id);\n                 match ty.sty {\n                     ty::TyFnDef(..) | ty::TyFnPtr(_) => {\n                         let sig = ty.fn_sig(self.cx.tcx);"}, {"sha": "dfa8ddbab6ccaa3027c9d82043788e42ec8f483d", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -120,7 +120,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let ExprPath(ref qpath) = path.node,\n             args.len() == 1,\n         ], {\n-            let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n+            let def_id = cx.tables.qpath_def(qpath, path.hir_id).def_id();\n             let lint;\n             let msg;\n             let arg = &args[0];"}, {"sha": "549b621812d43d23ee308af8c1f8d28c49593232", "filename": "clippy_lints/src/eval_order_dependence.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Feval_order_dependence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feval_order_dependence.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -67,7 +67,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for EvalOrderDependence {\n                 if let ExprPath(ref qpath) = lhs.node {\n                     if let QPath::Resolved(_, ref path) = *qpath {\n                         if path.segments.len() == 1 {\n-                            let var = cx.tables.qpath_def(qpath, lhs.id).def_id();\n+                            let var = cx.tables.qpath_def(qpath, lhs.hir_id).def_id();\n                             let mut visitor = ReadVisitor {\n                                 cx: cx,\n                                 var: var,\n@@ -304,7 +304,7 @@ impl<'a, 'tcx> Visitor<'tcx> for ReadVisitor<'a, 'tcx> {\n         match expr.node {\n             ExprPath(ref qpath) => {\n                 if let QPath::Resolved(None, ref path) = *qpath {\n-                    if path.segments.len() == 1 && self.cx.tables.qpath_def(qpath, expr.id).def_id() == self.var {\n+                    if path.segments.len() == 1 && self.cx.tables.qpath_def(qpath, expr.hir_id).def_id() == self.var {\n                         if is_in_assignment_position(self.cx, expr) {\n                             // This is a write, not a read.\n                         } else {"}, {"sha": "fb2e04a3662d2e904db5ecf0dfa1d3d8edd1568d", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -47,7 +47,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     if_let_chain!{[\n                         let ExprPath(ref qpath) = fun.node,\n                         args.len() == 2,\n-                        match_def_path(cx.tcx, resolve_node(cx, qpath, fun.id).def_id(), &paths::FMT_ARGUMENTS_NEWV1),\n+                        match_def_path(cx.tcx, resolve_node(cx, qpath, fun.hir_id).def_id(), &paths::FMT_ARGUMENTS_NEWV1),\n                         // ensure the format string is `\"{..}\"` with only one argument and no text\n                         check_static_str(cx, &args[0]),\n                         // ensure the format argument is `{}` ie. Display with no fancy option\n@@ -130,7 +130,7 @@ fn check_arg_is_display(cx: &LateContext, expr: &Expr) -> bool {\n         let ExprCall(_, ref args) = exprs[0].node,\n         args.len() == 2,\n         let ExprPath(ref qpath) = args[1].node,\n-        match_def_path(cx.tcx, resolve_node(cx, qpath, args[1].id).def_id(), &paths::DISPLAY_FMT_METHOD),\n+        match_def_path(cx.tcx, resolve_node(cx, qpath, args[1].hir_id).def_id(), &paths::DISPLAY_FMT_METHOD),\n     ], {\n         let ty = walk_ptrs_ty(cx.tables.pat_ty(&pat[0]));\n "}, {"sha": "1bb8780ea4afd3678fdcdc0d8f7a32547fbed34c", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -187,7 +187,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n                 }\n             },\n             hir::ExprMethodCall(_, _, ref args) => {\n-                let def_id = self.cx.tables.type_dependent_defs[&expr.id].def_id();\n+                let def_id = self.cx.tables.type_dependent_defs()[expr.hir_id].def_id();\n                 let base_type = self.cx.tcx.type_of(def_id);\n \n                 if type_is_unsafe_function(self.cx, base_type) {\n@@ -210,7 +210,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for DerefVisitor<'a, 'tcx> {\n impl<'a, 'tcx: 'a> DerefVisitor<'a, 'tcx> {\n     fn check_arg(&self, ptr: &hir::Expr) {\n         if let hir::ExprPath(ref qpath) = ptr.node {\n-            let def = self.cx.tables.qpath_def(qpath, ptr.id);\n+            let def = self.cx.tables.qpath_def(qpath, ptr.hir_id);\n             if self.ptrs.contains(&def.def_id()) {\n                 span_lint(\n                     self.cx,"}, {"sha": "64ba8adafe2b75e7f6310597cbd6f9c88581a674", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -139,7 +139,7 @@ impl<'a, 'tcx> hir::intravisit::Visitor<'tcx> for UsedVisitor<'a, 'tcx> {\n     fn visit_expr(&mut self, expr: &'tcx hir::Expr) {\n         if_let_chain! {[\n             let hir::ExprPath(ref qpath) = expr.node,\n-            self.id == self.cx.tables.qpath_def(qpath, expr.id).def_id(),\n+            self.id == self.cx.tables.qpath_def(qpath, expr.hir_id).def_id(),\n         ], {\n             self.used = true;\n             return;\n@@ -162,7 +162,7 @@ fn check_assign<'a, 'tcx>(\n         let hir::StmtSemi(ref expr, _) = expr.node,\n         let hir::ExprAssign(ref var, ref value) = expr.node,\n         let hir::ExprPath(ref qpath) = var.node,\n-        decl == cx.tables.qpath_def(qpath, var.id).def_id(),\n+        decl == cx.tables.qpath_def(qpath, var.hir_id).def_id(),\n     ], {\n         let mut v = UsedVisitor {\n             cx: cx,"}, {"sha": "507373fede56ae37f7a917f21c2ae634951ace7a", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -284,7 +284,8 @@ impl<'v, 't> RefVisitor<'v, 't> {\n         let last_path_segment = &last_path_segment(qpath).parameters;\n         if let AngleBracketedParameters(ref params) = *last_path_segment {\n             if params.lifetimes.is_empty() {\n-                match self.cx.tables.qpath_def(qpath, ty.id) {\n+                let hir_id = self.cx.tcx.hir.node_to_hir_id(ty.id);\n+                match self.cx.tables.qpath_def(qpath, hir_id) {\n                     Def::TyAlias(def_id) |\n                     Def::Struct(def_id) => {\n                         let generics = self.cx.tcx.generics_of(def_id);"}, {"sha": "439a82e41effd35df0dd7a202c1080581338ce5f", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -801,8 +801,8 @@ fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n                     lint_iter_method(cx, args, arg, method_name);\n                 }\n             } else if method_name == \"into_iter\" && match_trait_method(cx, arg, &paths::INTO_ITERATOR) {\n-                let def_id = cx.tables.type_dependent_defs[&arg.id].def_id();\n-                let substs = cx.tables.node_substs(arg.id);\n+                let def_id = cx.tables.type_dependent_defs()[arg.hir_id].def_id();\n+                let substs = cx.tables.node_substs(arg.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n \n                 let fn_arg_tys = method_type.fn_sig(cx.tcx).inputs();\n@@ -1053,13 +1053,13 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             let QPath::Resolved(None, ref path) = *qpath,\n             path.segments.len() == 1,\n             // our variable!\n-            self.cx.tables.qpath_def(qpath, expr.id).def_id() == self.var,\n+            self.cx.tables.qpath_def(qpath, expr.hir_id).def_id() == self.var,\n             // the indexed container is referenced by a name\n             let ExprPath(ref seqpath) = seqexpr.node,\n             let QPath::Resolved(None, ref seqvar) = *seqpath,\n             seqvar.segments.len() == 1,\n         ], {\n-            let def = self.cx.tables.qpath_def(seqpath, seqexpr.id);\n+            let def = self.cx.tables.qpath_def(seqpath, seqexpr.hir_id);\n             match def {\n                 Def::Local(..) | Def::Upvar(..) => {\n                     let def_id = def.def_id();\n@@ -1085,7 +1085,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VarVisitor<'a, 'tcx> {\n             let QPath::Resolved(None, ref path) = *qpath,\n             path.segments.len() == 1,\n         ], {\n-            if self.cx.tables.qpath_def(qpath, expr.id).def_id() == self.var {\n+            if self.cx.tables.qpath_def(qpath, expr.hir_id).def_id() == self.var {\n                 // we are not indexing anything, record that\n                 self.nonindex = true;\n             } else {\n@@ -1376,7 +1376,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n \n fn var_def_id(cx: &LateContext, expr: &Expr) -> Option<NodeId> {\n     if let ExprPath(ref qpath) = expr.node {\n-        let path_res = cx.tables.qpath_def(qpath, expr.id);\n+        let path_res = cx.tables.qpath_def(qpath, expr.hir_id);\n         if let Def::Local(def_id) = path_res {\n             let node_id = cx.tcx.hir.as_local_node_id(def_id).expect(\n                 \"That DefId should be valid\","}, {"sha": "edf477720d5884a610e0f261020756cf1ef7e35c", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprCall(ref path_expr, ref args) = e.node {\n             if let ExprPath(ref qpath) = path_expr.node {\n-                let def_id = cx.tables.qpath_def(qpath, path_expr.id).def_id();\n+                let def_id = cx.tables.qpath_def(qpath, path_expr.hir_id).def_id();\n                 if match_def_path(cx.tcx, def_id, &paths::MEM_FORGET) {\n                     let forgot_ty = cx.tables.expr_ty(&args[0]);\n "}, {"sha": "a50d77f5521fedf473265e9bff749d96b7ebe215", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -898,7 +898,7 @@ fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwr\n         let hir::ExprCall(ref fun, ref args) = new.node,\n         args.len() == 1,\n         let hir::ExprPath(ref path) = fun.node,\n-        let Def::Method(did) = cx.tables.qpath_def(path, fun.id),\n+        let Def::Method(did) = cx.tables.qpath_def(path, fun.hir_id),\n         match_def_path(cx.tcx, did, &paths::CSTRING_NEW)\n     ], {\n         span_lint_and_then(cx, TEMPORARY_CSTRING_AS_PTR, expr.span,"}, {"sha": "a86b2b300e57209d694c03c3f170b0e6aee1d274", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -62,7 +62,7 @@ enum MinMax {\n fn min_max<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(MinMax, Constant, &'a Expr)> {\n     if let ExprCall(ref path, ref args) = expr.node {\n         if let ExprPath(ref qpath) = path.node {\n-            let def_id = cx.tables.qpath_def(qpath, path.id).def_id();\n+            let def_id = cx.tables.qpath_def(qpath, path.hir_id).def_id();\n \n             if match_def_path(cx.tcx, def_id, &paths::CMP_MIN) {\n                 fetch_const(cx, args, MinMax::Min)"}, {"sha": "ef42bfe0b0284b1d6b1c3188b15f2fcb003869a9", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                     binding != \"_result\" && // FIXME: #944\n                     is_used(cx, expr) &&\n                     // don't lint if the declaration is in a macro\n-                    non_macro_local(cx, &cx.tables.qpath_def(qpath, expr.id))\n+                    non_macro_local(cx, &cx.tables.qpath_def(qpath, expr.hir_id))\n                 {\n                     Some(binding)\n                 } else {"}, {"sha": "6a7b45bfbfb3d6b9e2cffa86076fad2ec38bc474", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -47,8 +47,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UnnecessaryMutPassed {\n                 }\n             },\n             ExprMethodCall(ref path, _, ref arguments) => {\n-                let def_id = cx.tables.type_dependent_defs[&e.id].def_id();\n-                let substs = cx.tables.node_substs(e.id);\n+                let def_id = cx.tables.type_dependent_defs()[e.hir_id].def_id();\n+                let substs = cx.tables.node_substs(e.hir_id);\n                 let method_type = cx.tcx.type_of(def_id).subst(cx.tcx, substs);\n                 check_arguments(cx, arguments, method_type, &path.name.as_str())\n             },"}, {"sha": "782b4033645a24d2c93844c39c66e5a9f681a243", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -69,7 +69,7 @@ fn has_no_effect(cx: &LateContext, expr: &Expr) -> bool {\n         },\n         Expr_::ExprCall(ref callee, ref args) => {\n             if let Expr_::ExprPath(ref qpath) = callee.node {\n-                let def = cx.tables.qpath_def(qpath, callee.id);\n+                let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) |\n                     Def::Variant(..) |\n@@ -165,7 +165,7 @@ fn reduce_expression<'a>(cx: &LateContext, expr: &'a Expr) -> Option<Vec<&'a Exp\n         },\n         Expr_::ExprCall(ref callee, ref args) => {\n             if let Expr_::ExprPath(ref qpath) = callee.node {\n-                let def = cx.tables.qpath_def(qpath, callee.id);\n+                let def = cx.tables.qpath_def(qpath, callee.hir_id);\n                 match def {\n                     Def::Struct(..) |\n                     Def::Variant(..) |"}, {"sha": "e9e529cfdb46f36360ab462b4e2c20c2c01f519d", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -40,7 +40,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let ExprCall(ref fun, ref params) = ex.node,\n             params.len() == 2,\n             let ExprPath(ref qpath) = fun.node,\n-            match_def_path(cx.tcx, resolve_node(cx, qpath, fun.id).def_id(), &paths::BEGIN_PANIC),\n+            match_def_path(cx.tcx, resolve_node(cx, qpath, fun.hir_id).def_id(), &paths::BEGIN_PANIC),\n             let ExprLit(ref lit) = params[0].node,\n             is_direct_expn_of(expr.span, \"panic\").is_some(),\n             let LitKind::Str(ref string, _) = lit.node,"}, {"sha": "4a427fc79bd4dd12235860bb2fa53be9b8032a2a", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -73,7 +73,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let ExprCall(ref fun, ref args) = expr.node,\n             let ExprPath(ref qpath) = fun.node,\n         ], {\n-            let fun = resolve_node(cx, qpath, fun.id);\n+            let fun = resolve_node(cx, qpath, fun.hir_id);\n             let fun_id = fun.def_id();\n \n             // Search for `std::io::_print(..)` which is unique in a\n@@ -97,7 +97,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n                         let ExprCall(ref args_fun, ref args_args) = args[0].node,\n                         let ExprPath(ref qpath) = args_fun.node,\n                         match_def_path(cx.tcx,\n-                                       resolve_node(cx, qpath, args_fun.id).def_id(),\n+                                       resolve_node(cx, qpath, args_fun.hir_id).def_id(),\n                                        &paths::FMT_ARGUMENTS_NEWV1),\n                         args_args.len() == 2,\n                         let ExprAddrOf(_, ref match_expr) = args_args[1].node,\n@@ -125,7 +125,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             // `::std::fmt::ArgumentV1::new(__arg0, ::std::fmt::Debug::fmt)`\n             else if args.len() == 2 && match_def_path(cx.tcx, fun_id, &paths::FMT_ARGUMENTV1_NEW) {\n                 if let ExprPath(ref qpath) = args[1].node {\n-                    let def_id = cx.tables.qpath_def(qpath, args[1].id).def_id();\n+                    let def_id = cx.tables.qpath_def(qpath, args[1].hir_id).def_id();\n                     if match_def_path(cx.tcx, def_id, &paths::DEBUG_FMT_METHOD) && !is_in_debug_impl(cx, expr) &&\n                        is_expn_of(expr.span, \"panic\").is_none() {\n                         span_lint(cx, USE_DEBUG, args[0].span, \"use of `Debug`-based formatting\");"}, {"sha": "4241dd94ac9c0fd2507c51a22da6c181ebf34b4a", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -118,7 +118,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n             let ExprPath(ref qpath) = fun.node,\n             args.len() == 1,\n         ], {\n-            let def_id = cx.tables.qpath_def(qpath, fun.id).def_id();\n+            let def_id = cx.tables.qpath_def(qpath, fun.hir_id).def_id();\n             if match_def_path(cx.tcx, def_id, &paths::REGEX_NEW) ||\n                match_def_path(cx.tcx, def_id, &paths::REGEX_BUILDER_NEW) {\n                 check_regex(cx, &args[0], true);"}, {"sha": "b4857f1b61340f93868e8b61907fe47975ef24c0", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -148,7 +148,7 @@ fn check_decl<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, decl: &'tcx Decl, bindings:\n     }\n }\n \n-fn is_binding(cx: &LateContext, pat_id: NodeId) -> bool {\n+fn is_binding(cx: &LateContext, pat_id: HirId) -> bool {\n     let var_ty = cx.tables.node_id_to_type(pat_id);\n     match var_ty.sty {\n         ty::TyAdt(..) => false,\n@@ -167,7 +167,7 @@ fn check_pat<'a, 'tcx>(\n     match pat.node {\n         PatKind::Binding(_, _, ref ident, ref inner) => {\n             let name = ident.node;\n-            if is_binding(cx, pat.id) {\n+            if is_binding(cx, pat.hir_id) {\n                 let mut new_binding = true;\n                 for tup in bindings.iter_mut() {\n                     if tup.0 == name {"}, {"sha": "bcb03c79215c48f628e45cb859b87c6ce50c82b0", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -88,7 +88,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, e: &'tcx Expr) {\n         if let ExprCall(ref path_expr, ref args) = e.node {\n             if let ExprPath(ref qpath) = path_expr.node {\n-                let def_id = cx.tables.qpath_def(qpath, path_expr.id).def_id();\n+                let def_id = cx.tables.qpath_def(qpath, path_expr.hir_id).def_id();\n \n                 if match_def_path(cx.tcx, def_id, &paths::TRANSMUTE) {\n                     let from_ty = cx.tables.expr_ty(&args[0]);"}, {"sha": "ed0027af5336290ea855575dd36e4f82df174fa8", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -149,16 +149,16 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n     }\n     match ast_ty.node {\n         TyPath(ref qpath) if !is_local => {\n-            let def = cx.tables.qpath_def(qpath, ast_ty.id);\n+            let hir_id = cx.tcx.hir.node_to_hir_id(ast_ty.id);\n+            let def = cx.tables.qpath_def(qpath, hir_id);\n             if let Some(def_id) = opt_def_id(def) {\n                 if Some(def_id) == cx.tcx.lang_items.owned_box() {\n                     let last = last_path_segment(qpath);\n                     if_let_chain! {[\n                         let PathParameters::AngleBracketedParameters(ref ag) = last.parameters,\n                         let Some(vec) = ag.types.get(0),\n                         let TyPath(ref qpath) = vec.node,\n-                        let def::Def::Struct(..) = cx.tables.qpath_def(qpath, vec.id),\n-                        let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, vec.id)),\n+                        let Some(did) = opt_def_id(cx.tables.qpath_def(qpath, cx.tcx.hir.node_to_hir_id(vec.id))),\n                         match_def_path(cx.tcx, did, &paths::VEC),\n                     ], {\n                         span_help_and_lint(cx,\n@@ -202,7 +202,8 @@ fn check_ty(cx: &LateContext, ast_ty: &hir::Ty, is_local: bool) {\n         TyRptr(ref lt, MutTy { ref ty, ref mutbl }) => {\n             match ty.node {\n                 TyPath(ref qpath) => {\n-                    let def = cx.tables.qpath_def(qpath, ast_ty.id);\n+                    let hir_id = cx.tcx.hir.node_to_hir_id(ty.id);\n+                    let def = cx.tables.qpath_def(qpath, hir_id);\n                     if_let_chain! {[\n                         let Some(def_id) = opt_def_id(def),\n                         Some(def_id) == cx.tcx.lang_items.owned_box(),"}, {"sha": "d138892a0929d9d6c524e30b679f7cef810e4260", "filename": "clippy_lints/src/utils/higher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Fhigher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fhigher.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -159,7 +159,7 @@ pub fn vec_macro<'e>(cx: &LateContext, expr: &'e hir::Expr) -> Option<VecArgs<'e\n         let hir::ExprPath(ref path) = fun.node,\n         is_expn_of(fun.span, \"vec\").is_some(),\n     ], {\n-        let fun_def = resolve_node(cx, path, fun.id);\n+        let fun_def = resolve_node(cx, path, fun.hir_id);\n         return if match_def_path(cx.tcx, fun_def.def_id(), &paths::VEC_FROM_ELEM) && args.len() == 2 {\n             // `vec![elem; size]` case\n             Some(VecArgs::Repeat(&args[0], &args[1]))"}, {"sha": "7b06190b2dbe096c1e5703bb9266b219734b6977", "filename": "clippy_lints/src/utils/inspector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Finspector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finspector.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -145,7 +145,7 @@ fn has_attr(attrs: &[Attribute]) -> bool {\n fn print_decl(cx: &LateContext, decl: &hir::Decl) {\n     match decl.node {\n         hir::DeclLocal(ref local) => {\n-            println!(\"local variable of type {}\", cx.tables.node_id_to_type(local.id));\n+            println!(\"local variable of type {}\", cx.tables.node_id_to_type(local.hir_id));\n             println!(\"pattern:\");\n             print_pat(cx, &local.pat, 0);\n             if let Some(ref e) = local.init {\n@@ -161,7 +161,7 @@ fn print_expr(cx: &LateContext, expr: &hir::Expr, indent: usize) {\n     let ind = \"  \".repeat(indent);\n     println!(\"{}+\", ind);\n     println!(\"{}ty: {}\", ind, cx.tables.expr_ty(expr));\n-    println!(\"{}adjustments: {:?}\", ind, cx.tables.adjustments.get(&expr.id));\n+    println!(\"{}adjustments: {:?}\", ind, cx.tables.adjustments().get(expr.hir_id));\n     match expr.node {\n         hir::ExprBox(ref e) => {\n             println!(\"{}Box\", ind);"}, {"sha": "d62f3963bc312228586235cf03c64608e3fa78f1", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3ae929b2ddbf15048e0912974f63c6b799ee643/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=f3ae929b2ddbf15048e0912974f63c6b799ee643", "patch": "@@ -196,7 +196,7 @@ pub fn match_type(cx: &LateContext, ty: Ty, path: &[&str]) -> bool {\n \n /// Check if the method call given in `expr` belongs to given type.\n pub fn match_impl_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n-    let method_call = cx.tables.type_dependent_defs[&expr.id];\n+    let method_call = cx.tables.type_dependent_defs()[expr.hir_id];\n     let trt_id = cx.tcx.impl_of_method(method_call.def_id());\n     if let Some(trt_id) = trt_id {\n         match_def_path(cx.tcx, trt_id, path)\n@@ -207,7 +207,7 @@ pub fn match_impl_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n \n /// Check if the method call given in `expr` belongs to given trait.\n pub fn match_trait_method(cx: &LateContext, expr: &Expr, path: &[&str]) -> bool {\n-    let method_call = cx.tables.type_dependent_defs[&expr.id];\n+    let method_call = cx.tables.type_dependent_defs()[expr.hir_id];\n     let trt_id = cx.tcx.trait_of_item(method_call.def_id());\n     if let Some(trt_id) = trt_id {\n         match_def_path(cx.tcx, trt_id, path)\n@@ -347,8 +347,8 @@ pub fn implements_trait<'a, 'tcx>(\n     })\n }\n \n-/// Resolve the definition of a node from its `NodeId`.\n-pub fn resolve_node(cx: &LateContext, qpath: &QPath, id: NodeId) -> def::Def {\n+/// Resolve the definition of a node from its `HirId`.\n+pub fn resolve_node(cx: &LateContext, qpath: &QPath, id: HirId) -> def::Def {\n     cx.tables.qpath_def(qpath, id)\n }\n \n@@ -656,7 +656,7 @@ pub fn is_integer_literal(expr: &Expr, value: u128) -> bool {\n }\n \n pub fn is_adjusted(cx: &LateContext, e: &Expr) -> bool {\n-    cx.tables.adjustments.get(&e.id).is_some()\n+    cx.tables.adjustments().get(e.hir_id).is_some()\n }\n \n pub struct LimitStack {\n@@ -833,9 +833,9 @@ pub fn is_copy<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: Ty<'tcx>) -> bool {\n \n /// Return whether a pattern is refutable.\n pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n-    fn is_enum_variant(cx: &LateContext, qpath: &QPath, did: NodeId) -> bool {\n+    fn is_enum_variant(cx: &LateContext, qpath: &QPath, id: HirId) -> bool {\n         matches!(\n-            cx.tables.qpath_def(qpath, did),\n+            cx.tables.qpath_def(qpath, id),\n             def::Def::Variant(..) | def::Def::VariantCtor(..)\n         )\n     }\n@@ -851,17 +851,17 @@ pub fn is_refutable(cx: &LateContext, pat: &Pat) -> bool {\n         PatKind::Ref(ref pat, _) => is_refutable(cx, pat),\n         PatKind::Lit(..) |\n         PatKind::Range(..) => true,\n-        PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.id),\n+        PatKind::Path(ref qpath) => is_enum_variant(cx, qpath, pat.hir_id),\n         PatKind::Tuple(ref pats, _) => are_refutable(cx, pats.iter().map(|pat| &**pat)),\n         PatKind::Struct(ref qpath, ref fields, _) => {\n-            if is_enum_variant(cx, qpath, pat.id) {\n+            if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true\n             } else {\n                 are_refutable(cx, fields.iter().map(|field| &*field.node.pat))\n             }\n         },\n         PatKind::TupleStruct(ref qpath, ref pats, _) => {\n-            if is_enum_variant(cx, qpath, pat.id) {\n+            if is_enum_variant(cx, qpath, pat.hir_id) {\n                 true\n             } else {\n                 are_refutable(cx, pats.iter().map(|pat| &**pat))"}]}