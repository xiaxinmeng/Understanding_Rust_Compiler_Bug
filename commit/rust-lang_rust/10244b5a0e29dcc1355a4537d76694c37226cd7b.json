{"sha": "10244b5a0e29dcc1355a4537d76694c37226cd7b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwMjQ0YjVhMGUyOWRjYzEzNTVhNDUzN2Q3NjY5NGMzNzIyNmNkN2I=", "commit": {"author": {"name": "Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2018-10-12T10:26:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-12T10:26:39Z"}, "message": "Merge pull request #477 from RalfJung/miri-validate\n\nValidate more things", "tree": {"sha": "a419c919977fc367f20b20bb1a79cc8fd394a13c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a419c919977fc367f20b20bb1a79cc8fd394a13c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10244b5a0e29dcc1355a4537d76694c37226cd7b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbwHbfCRBK7hj4Ov3rIwAAdHIIAJUChRaBxLujOjQBz6BXTEPm\nuKe1lCCj1zk2Bt6oAHDdDn1+40BY+4CnE5hV4Md87aoq4hW9zpAen3pii+P14YqR\nmNcKMHOEQWc1xK/kkyxF/Wv4NRtNDbHPpZJYoiKsC8R4HSW6aZeZorqaTDnBHWqo\nRLujGxRcldxuPjy8WRKxuZ0pVTD99fEc5AQGw1kP6k9F/QwNjvDgrC1eYl8LYSco\nA1VlncaGE+SPYBQacsxJCeAALlALP4PfXNOsTZAXALIQAlt4L1DWR0AGQaTYjElC\nh/GTJs5R0fNOxpDadXUPKjV3QkxAq8pMs/33c0x4/vMBM67I9aCxlICRO4LSdyI=\n=x8UN\n-----END PGP SIGNATURE-----\n", "payload": "tree a419c919977fc367f20b20bb1a79cc8fd394a13c\nparent 26f9d617c347185433b77c481a5c50c55d9b72ce\nparent c9cf0344eed9a5a475c86a7a1e8be426d1f899ef\nauthor Oliver S\u0336c\u0336h\u0336n\u0336e\u0336i\u0336d\u0336e\u0336r Scherer <github35764891676564198441@oli-obk.de> 1539339999 +0200\ncommitter GitHub <noreply@github.com> 1539339999 +0200\n\nMerge pull request #477 from RalfJung/miri-validate\n\nValidate more things"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10244b5a0e29dcc1355a4537d76694c37226cd7b", "html_url": "https://github.com/rust-lang/rust/commit/10244b5a0e29dcc1355a4537d76694c37226cd7b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10244b5a0e29dcc1355a4537d76694c37226cd7b/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26f9d617c347185433b77c481a5c50c55d9b72ce", "url": "https://api.github.com/repos/rust-lang/rust/commits/26f9d617c347185433b77c481a5c50c55d9b72ce", "html_url": "https://github.com/rust-lang/rust/commit/26f9d617c347185433b77c481a5c50c55d9b72ce"}, {"sha": "c9cf0344eed9a5a475c86a7a1e8be426d1f899ef", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9cf0344eed9a5a475c86a7a1e8be426d1f899ef", "html_url": "https://github.com/rust-lang/rust/commit/c9cf0344eed9a5a475c86a7a1e8be426d1f899ef"}], "stats": {"total": 123, "additions": 67, "deletions": 56}, "files": [{"sha": "d52fd0028039d5b6aebb3a581159447ac10d6e6c", "filename": "src/lib.rs", "status": "modified", "additions": 19, "deletions": 2, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -255,9 +255,26 @@ impl<'a, 'mir, 'tcx> Machine<'a, 'mir, 'tcx> for Evaluator<'tcx> {\n \n     const STATIC_KIND: Option<MiriMemoryKind> = Some(MiriMemoryKind::MutStatic);\n \n-    #[inline(always)]\n     fn enforce_validity(ecx: &EvalContext<'a, 'mir, 'tcx, Self>) -> bool {\n-        ecx.machine.validate\n+        if !ecx.machine.validate {\n+            return false;\n+        }\n+\n+        // Some functions are whitelisted until we figure out how to fix them.\n+        // We walk up the stack a few frames to also cover their callees.\n+        const WHITELIST: &[&str] = &[\n+            // Uses mem::uninitialized\n+            \"std::ptr::read\",\n+        ];\n+        for frame in ecx.stack().iter()\n+            .rev().take(3)\n+        {\n+            let name = frame.instance.to_string();\n+            if WHITELIST.iter().any(|white| name.starts_with(white)) {\n+                return false;\n+            }\n+        }\n+        true\n     }\n \n     /// Returns Ok() when the function was handled, fail otherwise"}, {"sha": "cbf370e0236300addd9a3df43b951f29c9e12cbd", "filename": "tests/compile-fail/cast_box_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_box_int_to_fn_ptr.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n fn main() {\n     let b = Box::new(42);"}, {"sha": "2a08d9f1f9f85080fabd5bec569f188b1bb9d3ad", "filename": "tests/compile-fail/cast_int_to_fn_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcast_int_to_fn_ptr.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n fn main() {\n     let g = unsafe {"}, {"sha": "2f8fea38d8f9f984463bfa085767417327c7f400", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n #![feature(box_syntax)]\n "}, {"sha": "e6d1da1e0736a9dc2b6d5e049a5303c38cf6c54b", "filename": "tests/compile-fail/fn_ptr_offset.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Ffn_ptr_offset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffn_ptr_offset.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n use std::mem;\n "}, {"sha": "af4ad67a4f0999db940cabdb65cff97b6433b0b3", "filename": "tests/compile-fail/invalid_bool.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,9 +1,3 @@\n-//ignore-test FIXME: do some basic validation of invariants for all values in flight\n-//This does currently not get caught becuase it compiles to SwitchInt, which\n-//has no knowledge about data invariants.\n-\n fn main() {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { unreachable!() } else { unreachable!() } //~ ERROR constant evaluation error\n-    //~^ NOTE invalid boolean value read\n+    let _b = unsafe { std::mem::transmute::<u8, bool>(2) }; //~ ERROR encountered 2, but expected something in the range 0..=1\n }"}, {"sha": "2348c62559b00523cbe626d9d055e023f88690ce", "filename": "tests/compile-fail/invalid_bool2.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_bool2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_bool2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool2.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,3 +1,6 @@\n+// Validation makes this fail in the wrong place\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+\n fn main() {\n     let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n     let _x = b == true; //~ ERROR invalid boolean value read"}, {"sha": "3ff0ed60f664c53e3a247a6c8e03470deb450a06", "filename": "tests/compile-fail/invalid_char.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    assert!(std::char::from_u32(-1_i32 as u32).is_none());\n+    let _ = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 4294967295, but expected something in the range 0..=1114111\n+        'a' => {true},\n+        'b' => {false},\n+        _ => {true},\n+    };\n+}"}, {"sha": "5de2d073f3231f752d099ae670a6214b808d34a8", "filename": "tests/compile-fail/invalid_char2.rs", "status": "renamed", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_char2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_char2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_char2.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,3 +1,6 @@\n+// Validation makes this fail in the wrong place\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n     let c = unsafe { std::mem::transmute::<i32, char>(-1) };", "previous_filename": "tests/compile-fail/match_char2.rs"}, {"sha": "543a797d44f20de0fa0492bbd4fcc35f21fdcdd8", "filename": "tests/compile-fail/invalid_enum_discriminant.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,17 +1,8 @@\n-// Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n-\n #[repr(C)]\n pub enum Foo {\n     A, B, C, D\n }\n \n fn main() {\n-    let f = unsafe { std::mem::transmute::<i32, Foo>(42) };\n-    match f {\n-        Foo::A => {}, //~ ERROR invalid enum discriminant\n-        Foo::B => {},\n-        Foo::C => {},\n-        Foo::D => {},\n-    }\n+    let _f = unsafe { std::mem::transmute::<i32, Foo>(42) }; //~ ERROR encountered invalid enum discriminant 42\n }"}, {"sha": "ea94081693e1bea559248e79dd8b8b3526a4cad8", "filename": "tests/compile-fail/invalid_enum_discriminant2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_enum_discriminant2.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // Validation makes this fail in the wrong place\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n // error-pattern: invalid enum discriminant\n "}, {"sha": "e7fee1e3e36112f76d3d847daa6a885d1418cb05", "filename": "tests/compile-fail/match_char.rs", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/26f9d617c347185433b77c481a5c50c55d9b72ce/tests%2Fcompile-fail%2Fmatch_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/26f9d617c347185433b77c481a5c50c55d9b72ce/tests%2Fcompile-fail%2Fmatch_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatch_char.rs?ref=26f9d617c347185433b77c481a5c50c55d9b72ce", "patch": "@@ -1,13 +0,0 @@\n-//ignore-test FIXME: do some basic validation of invariants for all values in flight\n-//This does currently not get caught becuase it compiles to SwitchInt, which\n-//has no knowledge about data invariants.\n-\n-fn main() {\n-    assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _ = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR constant evaluation error\n-        //~^ NOTE tried to interpret an invalid 32-bit value as a char: 4294967295\n-        'a' => {true},\n-        'b' => {false},\n-        _ => {true},\n-    };\n-}"}, {"sha": "9821723deb3bc828eb4686d1a24be57649dee8a4", "filename": "tests/compile-fail/never_say_never.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_say_never.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_say_never.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_say_never.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "c5c53d4231c7c516f18c4c50db30d18e3e766d9a", "filename": "tests/compile-fail/never_transmute_humans.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_transmute_humans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_humans.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "11fc0f068de0d80104f54df2c5c5739ae61bc386", "filename": "tests/compile-fail/never_transmute_void.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fnever_transmute_void.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnever_transmute_void.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n #![feature(never_type)]\n #![allow(unreachable_code)]"}, {"sha": "d18f314c8aaa168c3d75628a17613783fd1bba15", "filename": "tests/compile-fail/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Freference_to_packed.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,5 +1,5 @@\n // This should fail even without validation\n-// compile-flags: -Zmir-emit-validate=0\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n \n #![allow(dead_code, unused_variables)]\n "}, {"sha": "69917dce8591073b314170c02ce61281d742bcd5", "filename": "tests/compile-fail/storage_dead_dangling.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstorage_dead_dangling.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,3 +1,6 @@\n+// This should fail even without validation\n+// compile-flags: -Zmir-emit-validate=0 -Zmiri-disable-validation\n+\n static mut LEAK: usize = 0;\n \n fn fill(v: &mut i32) {"}, {"sha": "82f2d10ee4bb5e94439135fc8dcda014c390b904", "filename": "tests/compile-fail/validation_cast_fn_ptr1.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr1.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    // Cast a function pointer such that on a call, the argument gets transmuted\n+    // from raw ptr to reference.  This is ABI-compatible, so it's not the call that\n+    // should fail, but validation should.\n+    fn f(_x: &i32) { }\n+\n+    let g: fn(*const i32) = unsafe { std::mem::transmute(f as fn(&i32)) };\n+\n+    g(0usize as *const i32) //~ ERROR encountered 0, but expected something greater or equal to 1\n+}"}, {"sha": "2f3b91a53e622a2b7c91db07fc6827b831595686", "filename": "tests/compile-fail/validation_cast_fn_ptr2.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidation_cast_fn_ptr2.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -0,0 +1,10 @@\n+fn main() {\n+    // Cast a function pointer such that when returning, the return value gets transmuted\n+    // from raw ptr to reference.  This is ABI-compatible, so it's not the call that\n+    // should fail, but validation should.\n+    fn f() -> *const i32 { 0usize as *const i32 }\n+\n+    let g: fn() -> &'static i32 = unsafe { std::mem::transmute(f as fn() -> *const i32) };\n+\n+    let _x = g(); //~ ERROR encountered 0, but expected something greater or equal to 1\n+}"}, {"sha": "82a2144a337ded071212f909089a1e803e25b3b1", "filename": "tests/compiletest.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -64,7 +64,6 @@ fn compile_fail(sysroot: &Path, path: &str, target: &str, host: &str, need_fullm\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     config.src_base = PathBuf::from(path.to_string());\n     flags.push(\"-Zmir-emit-validate=1\".to_owned());\n-    flags.push(\"-Zmiri-disable-validation\".to_owned());\n     config.target_rustcflags = Some(flags.join(\" \"));\n     config.target = target.to_owned();\n     config.host = host.to_owned();\n@@ -103,8 +102,6 @@ fn miri_pass(sysroot: &Path, path: &str, target: &str, host: &str, need_fullmir:\n     flags.push(\"-Dwarnings -Dunused\".to_owned()); // overwrite the -Aunused in compiletest-rs\n     if have_fullmir() {\n         flags.push(\"-Zmiri-start-fn\".to_owned());\n-        // start-fn uses ptr::read, and so fails validation\n-        flags.push(\"-Zmiri-disable-validation\".to_owned());\n     }\n     if opt {\n         flags.push(\"-Zmir-opt-level=3\".to_owned());"}, {"sha": "3ec6be65ed8b6f8bc8bb35d560a42ef3c2f0dfb5", "filename": "tests/run-pass/call_drop_through_owned_slice.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcall_drop_through_owned_slice.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -1,6 +1,3 @@\n-// FIXME validation disabled because ptr::read uses mem::uninitialized\n-// compile-flags: -Zmiri-disable-validation\n-\n struct Bar;\n \n static mut DROP_COUNT: usize = 0;"}, {"sha": "61c601ac6a903d887306a55d204b90d153a629b9", "filename": "tests/run-pass/issue-29746.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fissue-29746.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fissue-29746.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-29746.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME validation disabled because ptr::read uses mem::uninitialized\n-// compile-flags: -Zmiri-disable-validation\n-\n // zip!(a1,a2,a3,a4) is equivalent to:\n //  a1.zip(a2).zip(a3).zip(a4).map(|(((x1,x2),x3),x4)| (x1,x2,x3,x4))\n macro_rules! zip {"}, {"sha": "66f0c84e23c1a2d4064e12c507ca2485297278b2", "filename": "tests/run-pass/sendable-class.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fsendable-class.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Fsendable-class.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsendable-class.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME validation disabled because ptr::read uses mem::uninitialized\n-// compile-flags: -Zmiri-disable-validation\n-\n // Test that a class with only sendable fields can be sent\n \n use std::sync::mpsc::channel;"}, {"sha": "7644da08e4afa7cf144dbbb3a5b0142f687ac5c7", "filename": "tests/run-pass/unique-send.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Funique-send.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10244b5a0e29dcc1355a4537d76694c37226cd7b/tests%2Frun-pass%2Funique-send.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Funique-send.rs?ref=10244b5a0e29dcc1355a4537d76694c37226cd7b", "patch": "@@ -8,9 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// FIXME validation disabled because ptr::read uses mem::uninitialized\n-// compile-flags: -Zmiri-disable-validation\n-\n #![feature(box_syntax)]\n \n use std::sync::mpsc::channel;"}]}