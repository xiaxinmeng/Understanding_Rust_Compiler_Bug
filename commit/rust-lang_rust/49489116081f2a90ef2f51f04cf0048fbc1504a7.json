{"sha": "49489116081f2a90ef2f51f04cf0048fbc1504a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ5NDg5MTE2MDgxZjJhOTBlZjJmNTFmMDRjZjAwNDhmYmMxNTA0YTc=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2021-03-27T17:19:05Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-04-03T04:21:06Z"}, "message": "deps: apply rustc-ap-* v712 changes", "tree": {"sha": "7978b3aeae9907117ea59a4fb52f5906fc0c557c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7978b3aeae9907117ea59a4fb52f5906fc0c557c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/49489116081f2a90ef2f51f04cf0048fbc1504a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/49489116081f2a90ef2f51f04cf0048fbc1504a7", "html_url": "https://github.com/rust-lang/rust/commit/49489116081f2a90ef2f51f04cf0048fbc1504a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/49489116081f2a90ef2f51f04cf0048fbc1504a7/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ef57c5bf6751e5a4f548c722d6aeb28f6d86664d", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef57c5bf6751e5a4f548c722d6aeb28f6d86664d", "html_url": "https://github.com/rust-lang/rust/commit/ef57c5bf6751e5a4f548c722d6aeb28f6d86664d"}], "stats": {"total": 63, "additions": 33, "deletions": 30}, "files": [{"sha": "1befea9c805cc28757f25c168ac84a4e3a5c0ba4", "filename": "src/expr.rs", "status": "modified", "additions": 16, "deletions": 13, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -106,15 +106,18 @@ pub(crate) fn format_expr(\n             })\n         }\n         ast::ExprKind::Unary(op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n-        ast::ExprKind::Struct(ref path, ref fields, ref struct_rest) => rewrite_struct_lit(\n-            context,\n-            path,\n-            fields,\n-            struct_rest,\n-            &expr.attrs,\n-            expr.span,\n-            shape,\n-        ),\n+        ast::ExprKind::Struct(ref struct_expr) => {\n+            let ast::StructExpr { ref fields, ref path, ref rest } = **struct_expr;\n+            rewrite_struct_lit(\n+                context,\n+                path,\n+                fields,\n+                rest,\n+                &expr.attrs,\n+                expr.span,\n+                shape,\n+            )\n+        }\n         ast::ExprKind::Tup(ref items) => {\n             rewrite_tuple(context, items.iter(), expr.span, shape, items.len() == 1)\n         }\n@@ -1496,14 +1499,14 @@ fn rewrite_index(\n     }\n }\n \n-fn struct_lit_can_be_aligned(fields: &[ast::Field], has_base: bool) -> bool {\n+fn struct_lit_can_be_aligned(fields: &[ast::ExprField], has_base: bool) -> bool {\n     !has_base && fields.iter().all(|field| !field.is_shorthand)\n }\n \n fn rewrite_struct_lit<'a>(\n     context: &RewriteContext<'_>,\n     path: &ast::Path,\n-    fields: &'a [ast::Field],\n+    fields: &'a [ast::ExprField],\n     struct_rest: &ast::StructRest,\n     attrs: &[ast::Attribute],\n     span: Span,\n@@ -1512,7 +1515,7 @@ fn rewrite_struct_lit<'a>(\n     debug!(\"rewrite_struct_lit: shape {:?}\", shape);\n \n     enum StructLitField<'a> {\n-        Regular(&'a ast::Field),\n+        Regular(&'a ast::ExprField),\n         Base(&'a ast::Expr),\n         Rest(&'a Span),\n     }\n@@ -1668,7 +1671,7 @@ pub(crate) fn struct_lit_field_separator(config: &Config) -> &str {\n \n pub(crate) fn rewrite_field(\n     context: &RewriteContext<'_>,\n-    field: &ast::Field,\n+    field: &ast::ExprField,\n     shape: Shape,\n     prefix_max_width: usize,\n ) -> Option<String> {"}, {"sha": "61b49911e764c179da24e7075ae45933be09f1e8", "filename": "src/items.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -158,7 +158,7 @@ impl<'a> Item<'a> {\n #[derive(Debug)]\n enum BodyElement<'a> {\n     // Stmt(&'a ast::Stmt),\n-    // Field(&'a ast::Field),\n+    // Field(&'a ast::ExprField),\n     // Variant(&'a ast::Variant),\n     // Item(&'a ast::Item),\n     ForeignItem(&'a ast::ForeignItem),\n@@ -1274,7 +1274,7 @@ fn format_unit_struct(\n pub(crate) fn format_struct_struct(\n     context: &RewriteContext<'_>,\n     struct_parts: &StructParts<'_>,\n-    fields: &[ast::StructField],\n+    fields: &[ast::FieldDef],\n     offset: Indent,\n     one_line_width: Option<usize>,\n ) -> Option<String> {\n@@ -1411,7 +1411,7 @@ fn format_empty_struct_or_tuple(\n fn format_tuple_struct(\n     context: &RewriteContext<'_>,\n     struct_parts: &StructParts<'_>,\n-    fields: &[ast::StructField],\n+    fields: &[ast::FieldDef],\n     offset: Indent,\n ) -> Option<String> {\n     let mut result = String::with_capacity(1024);\n@@ -1631,7 +1631,7 @@ fn type_annotation_spacing(config: &Config) -> (&str, &str) {\n \n pub(crate) fn rewrite_struct_field_prefix(\n     context: &RewriteContext<'_>,\n-    field: &ast::StructField,\n+    field: &ast::FieldDef,\n ) -> Option<String> {\n     let vis = format_visibility(context, &field.vis);\n     let type_annotation_spacing = type_annotation_spacing(context.config);\n@@ -1646,15 +1646,15 @@ pub(crate) fn rewrite_struct_field_prefix(\n     })\n }\n \n-impl Rewrite for ast::StructField {\n+impl Rewrite for ast::FieldDef {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         rewrite_struct_field(context, self, shape, 0)\n     }\n }\n \n pub(crate) fn rewrite_struct_field(\n     context: &RewriteContext<'_>,\n-    field: &ast::StructField,\n+    field: &ast::FieldDef,\n     shape: Shape,\n     lhs_max_width: usize,\n ) -> Option<String> {"}, {"sha": "f1b870101e55e391f3fd016c9969de0ea55d623a", "filename": "src/overflow.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Foverflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Foverflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Foverflow.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -74,7 +74,7 @@ pub(crate) enum OverflowableItem<'a> {\n     MacroArg(&'a MacroArg),\n     NestedMetaItem(&'a ast::NestedMetaItem),\n     SegmentParam(&'a SegmentParam<'a>),\n-    StructField(&'a ast::StructField),\n+    FieldDef(&'a ast::FieldDef),\n     TuplePatField(&'a TuplePatField<'a>),\n     Ty(&'a ast::Ty),\n }\n@@ -96,7 +96,7 @@ impl<'a> OverflowableItem<'a> {\n         match self {\n             OverflowableItem::Expr(ast::Expr { attrs, .. })\n             | OverflowableItem::GenericParam(ast::GenericParam { attrs, .. }) => !attrs.is_empty(),\n-            OverflowableItem::StructField(ast::StructField { attrs, .. }) => !attrs.is_empty(),\n+            OverflowableItem::FieldDef(ast::FieldDef { attrs, .. }) => !attrs.is_empty(),\n             OverflowableItem::MacroArg(MacroArg::Expr(expr)) => !expr.attrs.is_empty(),\n             OverflowableItem::MacroArg(MacroArg::Item(item)) => !item.attrs.is_empty(),\n             _ => false,\n@@ -113,7 +113,7 @@ impl<'a> OverflowableItem<'a> {\n             OverflowableItem::MacroArg(macro_arg) => f(*macro_arg),\n             OverflowableItem::NestedMetaItem(nmi) => f(*nmi),\n             OverflowableItem::SegmentParam(sp) => f(*sp),\n-            OverflowableItem::StructField(sf) => f(*sf),\n+            OverflowableItem::FieldDef(sf) => f(*sf),\n             OverflowableItem::TuplePatField(pat) => f(*pat),\n             OverflowableItem::Ty(ty) => f(*ty),\n         }\n@@ -238,7 +238,7 @@ macro_rules! impl_into_overflowable_item_for_rustfmt_types {\n     }\n }\n \n-impl_into_overflowable_item_for_ast_node!(Expr, GenericParam, NestedMetaItem, StructField, Ty);\n+impl_into_overflowable_item_for_ast_node!(Expr, GenericParam, NestedMetaItem, FieldDef, Ty);\n impl_into_overflowable_item_for_rustfmt_types!([MacroArg], [SegmentParam, TuplePatField]);\n \n pub(crate) fn into_overflowable_list<'a, T>("}, {"sha": "5d43d169d605a79cfd41c3c4025e2db5a194831a", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::ast::{self, BindingMode, FieldPat, Pat, PatKind, RangeEnd, RangeSyntax};\n+use rustc_ast::ast::{self, BindingMode, PatField, Pat, PatKind, RangeEnd, RangeSyntax};\n use rustc_ast::ptr;\n use rustc_span::{BytePos, Span};\n \n@@ -259,7 +259,7 @@ impl Rewrite for Pat {\n \n fn rewrite_struct_pat(\n     path: &ast::Path,\n-    fields: &[ast::FieldPat],\n+    fields: &[ast::PatField],\n     ellipsis: bool,\n     span: Span,\n     context: &RewriteContext<'_>,\n@@ -334,7 +334,7 @@ fn rewrite_struct_pat(\n     Some(format!(\"{} {{{}}}\", path_str, fields_str))\n }\n \n-impl Rewrite for FieldPat {\n+impl Rewrite for PatField {\n     fn rewrite(&self, context: &RewriteContext<'_>, shape: Shape) -> Option<String> {\n         let hi_pos = if let Some(last) = self.attrs.last() {\n             last.span.hi()"}, {"sha": "7e3786b7cd94cd344660863b9f083a3d0e89b9e2", "filename": "src/spanned.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fspanned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fspanned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fspanned.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -53,7 +53,7 @@ macro_rules! implement_spanned {\n // Implement `Spanned` for structs with `attrs` field.\n implement_spanned!(ast::AssocItem);\n implement_spanned!(ast::Expr);\n-implement_spanned!(ast::Field);\n+implement_spanned!(ast::ExprField);\n implement_spanned!(ast::ForeignItem);\n implement_spanned!(ast::Item);\n implement_spanned!(ast::Local);\n@@ -143,7 +143,7 @@ impl Spanned for ast::GenericParam {\n     }\n }\n \n-impl Spanned for ast::StructField {\n+impl Spanned for ast::FieldDef {\n     fn span(&self) -> Span {\n         span_with_attrs_lo_hi!(self, self.span.lo(), self.ty.span.hi())\n     }"}, {"sha": "c4208848c6c2ab3ad6bbaf5414109ca7f5cba5dd", "filename": "src/vertical.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fvertical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/49489116081f2a90ef2f51f04cf0048fbc1504a7/src%2Fvertical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvertical.rs?ref=49489116081f2a90ef2f51f04cf0048fbc1504a7", "patch": "@@ -33,7 +33,7 @@ pub(crate) trait AlignedItem {\n     ) -> Option<String>;\n }\n \n-impl AlignedItem for ast::StructField {\n+impl AlignedItem for ast::FieldDef {\n     fn skip(&self) -> bool {\n         contains_skip(&self.attrs)\n     }\n@@ -72,7 +72,7 @@ impl AlignedItem for ast::StructField {\n     }\n }\n \n-impl AlignedItem for ast::Field {\n+impl AlignedItem for ast::ExprField {\n     fn skip(&self) -> bool {\n         contains_skip(&self.attrs)\n     }"}]}