{"sha": "ca9b050bbf786fc7f6ef56d82b1751a761efec44", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNhOWIwNTBiYmY3ODZmYzdmNmVmNTZkODJiMTc1MWE3NjFlZmVjNDQ=", "commit": {"author": {"name": "Yusuke Tanaka", "email": "yusuktan@maguro.dev", "date": "2021-01-30T05:50:28Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-08-31T23:33:06Z"}, "message": "Implement `One` option for imports_granularity (#4669)\n\nThis option merges all imports into a single `use` statement as long as\nthey have the same visibility.", "tree": {"sha": "dcbdff7230fda67713b0c9f8d76db63f55f42bab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dcbdff7230fda67713b0c9f8d76db63f55f42bab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ca9b050bbf786fc7f6ef56d82b1751a761efec44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ca9b050bbf786fc7f6ef56d82b1751a761efec44", "html_url": "https://github.com/rust-lang/rust/commit/ca9b050bbf786fc7f6ef56d82b1751a761efec44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ca9b050bbf786fc7f6ef56d82b1751a761efec44/comments", "author": {"login": "magurotuna", "id": 23649474, "node_id": "MDQ6VXNlcjIzNjQ5NDc0", "avatar_url": "https://avatars.githubusercontent.com/u/23649474?v=4", "gravatar_id": "", "url": "https://api.github.com/users/magurotuna", "html_url": "https://github.com/magurotuna", "followers_url": "https://api.github.com/users/magurotuna/followers", "following_url": "https://api.github.com/users/magurotuna/following{/other_user}", "gists_url": "https://api.github.com/users/magurotuna/gists{/gist_id}", "starred_url": "https://api.github.com/users/magurotuna/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/magurotuna/subscriptions", "organizations_url": "https://api.github.com/users/magurotuna/orgs", "repos_url": "https://api.github.com/users/magurotuna/repos", "events_url": "https://api.github.com/users/magurotuna/events{/privacy}", "received_events_url": "https://api.github.com/users/magurotuna/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e81c393663daab11238944cddfbd97541630f178", "url": "https://api.github.com/repos/rust-lang/rust/commits/e81c393663daab11238944cddfbd97541630f178", "html_url": "https://github.com/rust-lang/rust/commit/e81c393663daab11238944cddfbd97541630f178"}], "stats": {"total": 307, "additions": 288, "deletions": 19}, "files": [{"sha": "469deccc56ef34082ea41788f1c06db16deba05d", "filename": "Configurations.md", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -1679,7 +1679,7 @@ pub enum Foo {}\n How imports should be grouped into `use` statements. Imports will be merged or split to the configured level of granularity.\n \n - **Default value**: `Preserve`\n-- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`\n+- **Possible values**: `Preserve`, `Crate`, `Module`, `Item`, `One`\n - **Stable**: No\n \n #### `Preserve` (default):\n@@ -1733,6 +1733,23 @@ use qux::h;\n use qux::i;\n ```\n \n+#### `One`:\n+\n+Merge all imports into a single `use` statement as long as they have the same visibility.\n+\n+```rust\n+pub use foo::{x, y};\n+use {\n+    bar::{\n+        a,\n+        b::{self, f, g},\n+        c,\n+        d::e,\n+    },\n+    qux::{h, i},\n+};\n+```\n+\n ## `merge_imports`\n \n This option is deprecated. Use `imports_granularity = \"Crate\"` instead."}, {"sha": "db15ee97a40aca31c852963cb39b263612346bc0", "filename": "src/config/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Fconfig%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Fconfig%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconfig%2Foptions.rs?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -125,6 +125,8 @@ pub enum ImportGranularity {\n     Module,\n     /// Use one `use` statement per imported item.\n     Item,\n+    /// Use one `use` statement including all items.\n+    One,\n }\n \n #[config_type]"}, {"sha": "5ac799366894de843dd6250a97adc2786a1cc1e4", "filename": "src/imports.rs", "status": "modified", "additions": 128, "deletions": 18, "changes": 146, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -138,6 +138,29 @@ impl UseSegment {\n         }\n     }\n \n+    // Check if self == other with their aliases removed.\n+    fn equal_except_alias(&self, other: &Self) -> bool {\n+        match (self, other) {\n+            (UseSegment::Ident(ref s1, _), UseSegment::Ident(ref s2, _)) => s1 == s2,\n+            (UseSegment::Slf(_), UseSegment::Slf(_))\n+            | (UseSegment::Super(_), UseSegment::Super(_))\n+            | (UseSegment::Crate(_), UseSegment::Crate(_))\n+            | (UseSegment::Glob, UseSegment::Glob) => true,\n+            (UseSegment::List(ref list1), UseSegment::List(ref list2)) => list1 == list2,\n+            _ => false,\n+        }\n+    }\n+\n+    fn get_alias(&self) -> Option<&str> {\n+        match self {\n+            UseSegment::Ident(_, a)\n+            | UseSegment::Slf(a)\n+            | UseSegment::Super(a)\n+            | UseSegment::Crate(a) => a.as_deref(),\n+            _ => None,\n+        }\n+    }\n+\n     fn from_path_segment(\n         context: &RewriteContext<'_>,\n         path_seg: &ast::PathSegment,\n@@ -558,6 +581,7 @@ impl UseTree {\n                 SharedPrefix::Module => {\n                     self.path[..self.path.len() - 1] == other.path[..other.path.len() - 1]\n                 }\n+                SharedPrefix::One => true,\n             }\n         }\n     }\n@@ -598,7 +622,7 @@ impl UseTree {\n     fn merge(&mut self, other: &UseTree, merge_by: SharedPrefix) {\n         let mut prefix = 0;\n         for (a, b) in self.path.iter().zip(other.path.iter()) {\n-            if *a == *b {\n+            if a.equal_except_alias(b) {\n                 prefix += 1;\n             } else {\n                 break;\n@@ -633,14 +657,20 @@ fn merge_rest(\n             return Some(new_path);\n         }\n     } else if len == 1 {\n-        let rest = if a.len() == len { &b[1..] } else { &a[1..] };\n-        return Some(vec![\n-            b[0].clone(),\n-            UseSegment::List(vec![\n-                UseTree::from_path(vec![UseSegment::Slf(None)], DUMMY_SP),\n-                UseTree::from_path(rest.to_vec(), DUMMY_SP),\n-            ]),\n-        ]);\n+        let (common, rest) = if a.len() == len {\n+            (&a[0], &b[1..])\n+        } else {\n+            (&b[0], &a[1..])\n+        };\n+        let mut list = vec![UseTree::from_path(\n+            vec![UseSegment::Slf(common.get_alias().map(ToString::to_string))],\n+            DUMMY_SP,\n+        )];\n+        match rest {\n+            [UseSegment::List(rest_list)] => list.extend(rest_list.clone()),\n+            _ => list.push(UseTree::from_path(rest.to_vec(), DUMMY_SP)),\n+        }\n+        return Some(vec![b[0].clone(), UseSegment::List(list)]);\n     } else {\n         len -= 1;\n     }\n@@ -655,18 +685,54 @@ fn merge_rest(\n }\n \n fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree, merge_by: SharedPrefix) {\n-    let similar_trees = trees\n-        .iter_mut()\n-        .filter(|tree| tree.share_prefix(&use_tree, merge_by));\n+    struct SimilarTree<'a> {\n+        similarity: usize,\n+        path_len: usize,\n+        tree: &'a mut UseTree,\n+    }\n+\n+    let similar_trees = trees.iter_mut().filter_map(|tree| {\n+        if tree.share_prefix(&use_tree, merge_by) {\n+            // In the case of `SharedPrefix::One`, `similarity` is used for deciding with which\n+            // tree `use_tree` should be merge.\n+            // In other cases `similarity` won't be used, so set it to `0` as a dummy value.\n+            let similarity = if merge_by == SharedPrefix::One {\n+                tree.path\n+                    .iter()\n+                    .zip(&use_tree.path)\n+                    .take_while(|(a, b)| a.equal_except_alias(b))\n+                    .count()\n+            } else {\n+                0\n+            };\n+\n+            let path_len = tree.path.len();\n+            Some(SimilarTree {\n+                similarity,\n+                tree,\n+                path_len,\n+            })\n+        } else {\n+            None\n+        }\n+    });\n+\n     if use_tree.path.len() == 1 && merge_by == SharedPrefix::Crate {\n-        if let Some(tree) = similar_trees.min_by_key(|tree| tree.path.len()) {\n-            if tree.path.len() == 1 {\n+        if let Some(tree) = similar_trees.min_by_key(|tree| tree.path_len) {\n+            if tree.path_len == 1 {\n+                return;\n+            }\n+        }\n+    } else if merge_by == SharedPrefix::One {\n+        if let Some(sim_tree) = similar_trees.max_by_key(|tree| tree.similarity) {\n+            if sim_tree.similarity > 0 {\n+                sim_tree.tree.merge(&use_tree, merge_by);\n                 return;\n             }\n         }\n-    } else if let Some(tree) = similar_trees.max_by_key(|tree| tree.path.len()) {\n-        if tree.path.len() > 1 {\n-            tree.merge(&use_tree, merge_by);\n+    } else if let Some(sim_tree) = similar_trees.max_by_key(|tree| tree.path_len) {\n+        if sim_tree.path_len > 1 {\n+            sim_tree.tree.merge(&use_tree, merge_by);\n             return;\n         }\n     }\n@@ -880,6 +946,7 @@ impl Rewrite for UseTree {\n pub(crate) enum SharedPrefix {\n     Crate,\n     Module,\n+    One,\n }\n \n #[cfg(test)]\n@@ -904,7 +971,7 @@ mod test {\n             }\n \n             fn eat(&mut self, c: char) {\n-                assert!(self.input.next().unwrap() == c);\n+                assert_eq!(self.input.next().unwrap(), c);\n             }\n \n             fn push_segment(\n@@ -1094,6 +1161,49 @@ mod test {\n         );\n     }\n \n+    #[test]\n+    fn test_use_tree_merge_one() {\n+        test_merge!(One, [\"a\", \"b\"], [\"{a, b}\"]);\n+\n+        test_merge!(One, [\"a::{aa, ab}\", \"b\", \"a\"], [\"{a::{self, aa, ab}, b}\"]);\n+\n+        test_merge!(One, [\"a as x\", \"b as y\"], [\"{a as x, b as y}\"]);\n+\n+        test_merge!(\n+            One,\n+            [\"a::{aa as xa, ab}\", \"b\", \"a\"],\n+            [\"{a::{self, aa as xa, ab}, b}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"a\", \"a::{aa, ab::{aba, abb}}\"],\n+            [\"a::{self, aa, ab::{aba, abb}}\"]\n+        );\n+\n+        test_merge!(One, [\"a\", \"b::{ba, *}\"], [\"{a, b::{ba, *}}\"]);\n+\n+        test_merge!(One, [\"a\", \"b\", \"a::aa\"], [\"{a::{self, aa}, b}\"]);\n+\n+        test_merge!(\n+            One,\n+            [\"a::aa::aaa\", \"a::ac::aca\", \"a::aa::*\"],\n+            [\"a::{aa::{aaa, *}, ac::aca}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"a\", \"b::{ba, bb}\", \"a::{aa::*, ab::aba}\"],\n+            [\"{a::{self, aa::*, ab::aba}, b::{ba, bb}}\"]\n+        );\n+\n+        test_merge!(\n+            One,\n+            [\"b\", \"a::ac::{aca, acb}\", \"a::{aa::*, ab}\"],\n+            [\"{a::{aa::*, ab, ac::{aca, acb}}, b}\"]\n+        );\n+    }\n+\n     #[test]\n     fn test_flatten_use_trees() {\n         assert_eq!("}, {"sha": "2c58350d4feb6d8e0bf9a3cbfc15d084a0af73a7", "filename": "src/reorder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Freorder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/src%2Freorder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Freorder.rs?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -113,6 +113,7 @@ fn rewrite_reorderable_or_regroupable_items(\n                     merge_use_trees(normalized_items, SharedPrefix::Module)\n                 }\n                 ImportGranularity::Item => flatten_use_trees(normalized_items),\n+                ImportGranularity::One => merge_use_trees(normalized_items, SharedPrefix::One),\n                 ImportGranularity::Preserve => normalized_items,\n             };\n "}, {"sha": "c21707df3954578051937a642dbc98ab32333b44", "filename": "tests/source/imports_granularity_one.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/tests%2Fsource%2Fimports_granularity_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/tests%2Fsource%2Fimports_granularity_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fimports_granularity_one.rs?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -0,0 +1,60 @@\n+// rustfmt-imports_granularity: One\n+\n+use b;\n+use a::ac::{aca, acb};\n+use a::{aa::*, ab};\n+\n+use a as x;\n+use b::ba;\n+use a::{aa, ab};\n+\n+use a::aa::aaa;\n+use a::ab::aba as x;\n+use a::aa::*;\n+\n+use a::aa;\n+use a::ad::ada;\n+#[cfg(test)]\n+use a::{ab, ac::aca};\n+use b;\n+#[cfg(test)]\n+use b::{\n+    ba, bb,\n+    bc::bca::{bcaa, bcab},\n+};\n+\n+pub use a::aa;\n+pub use a::ae;\n+use a::{ab, ac, ad};\n+use b::ba;\n+pub use b::{bb, bc::bca};\n+\n+use a::aa::aaa;\n+use a::ac::{aca, acb};\n+use a::{aa::*, ab};\n+use b::{\n+    ba,\n+    bb::{self, bba},\n+};\n+\n+use crate::a;\n+use crate::b::ba;\n+use c::ca;\n+\n+use super::a;\n+use c::ca;\n+use super::b::ba;\n+\n+use crate::a;\n+use super::b;\n+use c::{self, ca};\n+\n+use a::{\n+    // some comment\n+    aa::{aaa, aab},\n+    ab,\n+    // another comment\n+    ac::aca,\n+};\n+use b as x;\n+use a::ad::ada;"}, {"sha": "78ec5e7325c50b7ed4de203d9b434b7ee62287c5", "filename": "tests/target/imports_granularity_one.rs", "status": "added", "additions": 79, "deletions": 0, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/ca9b050bbf786fc7f6ef56d82b1751a761efec44/tests%2Ftarget%2Fimports_granularity_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ca9b050bbf786fc7f6ef56d82b1751a761efec44/tests%2Ftarget%2Fimports_granularity_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fimports_granularity_one.rs?ref=ca9b050bbf786fc7f6ef56d82b1751a761efec44", "patch": "@@ -0,0 +1,79 @@\n+// rustfmt-imports_granularity: One\n+\n+use {\n+    a::{\n+        aa::*,\n+        ab,\n+        ac::{aca, acb},\n+    },\n+    b,\n+};\n+\n+use {\n+    a::{self as x, aa, ab},\n+    b::ba,\n+};\n+\n+use a::{\n+    aa::{aaa, *},\n+    ab::aba as x,\n+};\n+\n+#[cfg(test)]\n+use a::{ab, ac::aca};\n+#[cfg(test)]\n+use b::{\n+    ba, bb,\n+    bc::bca::{bcaa, bcab},\n+};\n+use {\n+    a::{aa, ad::ada},\n+    b,\n+};\n+\n+pub use {\n+    a::{aa, ae},\n+    b::{bb, bc::bca},\n+};\n+use {\n+    a::{ab, ac, ad},\n+    b::ba,\n+};\n+\n+use {\n+    a::{\n+        aa::{aaa, *},\n+        ab,\n+        ac::{aca, acb},\n+    },\n+    b::{\n+        ba,\n+        bb::{self, bba},\n+    },\n+};\n+\n+use {\n+    crate::{a, b::ba},\n+    c::ca,\n+};\n+\n+use {\n+    super::{a, b::ba},\n+    c::ca,\n+};\n+\n+use {\n+    super::b,\n+    crate::a,\n+    c::{self, ca},\n+};\n+\n+use {\n+    a::{\n+        aa::{aaa, aab},\n+        ab,\n+        ac::aca,\n+        ad::ada,\n+    },\n+    b as x,\n+};"}]}