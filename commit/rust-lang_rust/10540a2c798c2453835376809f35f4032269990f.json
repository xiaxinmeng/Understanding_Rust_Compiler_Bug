{"sha": "10540a2c798c2453835376809f35f4032269990f", "node_id": "C_kwDOAAsO6NoAKDEwNTQwYTJjNzk4YzI0NTM4MzUzNzY4MDlmMzVmNDAzMjI2OTk5MGY", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-13T11:49:11Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2023-05-13T11:52:08Z"}, "message": "implement SIMD ptr casts", "tree": {"sha": "cee60de453ead0421aab02ca000c5689bf3bb9cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cee60de453ead0421aab02ca000c5689bf3bb9cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10540a2c798c2453835376809f35f4032269990f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10540a2c798c2453835376809f35f4032269990f", "html_url": "https://github.com/rust-lang/rust/commit/10540a2c798c2453835376809f35f4032269990f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10540a2c798c2453835376809f35f4032269990f/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b22bc276f84f0dab590e533cf420013356d2d321", "url": "https://api.github.com/repos/rust-lang/rust/commits/b22bc276f84f0dab590e533cf420013356d2d321", "html_url": "https://github.com/rust-lang/rust/commit/b22bc276f84f0dab590e533cf420013356d2d321"}], "stats": {"total": 38, "additions": 33, "deletions": 5}, "files": [{"sha": "114c66253f72fc1b8bd88142c49eb7f76af667a9", "filename": "src/tools/miri/src/shims/intrinsics/simd.rs", "status": "modified", "additions": 21, "deletions": 5, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/10540a2c798c2453835376809f35f4032269990f/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10540a2c798c2453835376809f35f4032269990f/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Fshims%2Fintrinsics%2Fsimd.rs?ref=10540a2c798c2453835376809f35f4032269990f", "patch": "@@ -421,34 +421,50 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriInterpCxExt<'mir, 'tcx> {\n                 }\n             }\n             #[rustfmt::skip]\n-            \"cast\" | \"as\" => {\n+            \"cast\" | \"as\" | \"cast_ptr\" | \"expose_addr\" | \"from_exposed_addr\" => {\n                 let [op] = check_arg_count(args)?;\n                 let (op, op_len) = this.operand_to_simd(op)?;\n                 let (dest, dest_len) = this.place_to_simd(dest)?;\n \n                 assert_eq!(dest_len, op_len);\n \n+                let unsafe_cast = intrinsic_name == \"cast\";\n                 let safe_cast = intrinsic_name == \"as\";\n+                let ptr_cast = intrinsic_name == \"cast_ptr\";\n+                let expose_cast = intrinsic_name == \"expose_addr\";\n+                let from_exposed_cast = intrinsic_name == \"from_exposed_addr\";\n \n                 for i in 0..dest_len {\n                     let op = this.read_immediate(&this.mplace_index(&op, i)?.into())?;\n                     let dest = this.mplace_index(&dest, i)?;\n \n                     let val = match (op.layout.ty.kind(), dest.layout.ty.kind()) {\n                         // Int-to-(int|float): always safe\n-                        (ty::Int(_) | ty::Uint(_), ty::Int(_) | ty::Uint(_) | ty::Float(_)) =>\n+                        (ty::Int(_) | ty::Uint(_), ty::Int(_) | ty::Uint(_) | ty::Float(_)) if safe_cast || unsafe_cast =>\n                             this.int_to_int_or_float(&op, dest.layout.ty)?,\n                         // Float-to-float: always safe\n-                        (ty::Float(_), ty::Float(_)) =>\n+                        (ty::Float(_), ty::Float(_)) if safe_cast || unsafe_cast =>\n                             this.float_to_float_or_int(&op, dest.layout.ty)?,\n                         // Float-to-int in safe mode\n                         (ty::Float(_), ty::Int(_) | ty::Uint(_)) if safe_cast =>\n                             this.float_to_float_or_int(&op, dest.layout.ty)?,\n                         // Float-to-int in unchecked mode\n-                        (ty::Float(FloatTy::F32), ty::Int(_) | ty::Uint(_)) if !safe_cast =>\n+                        (ty::Float(FloatTy::F32), ty::Int(_) | ty::Uint(_)) if unsafe_cast =>\n                             this.float_to_int_unchecked(op.to_scalar().to_f32()?, dest.layout.ty)?.into(),\n-                        (ty::Float(FloatTy::F64), ty::Int(_) | ty::Uint(_)) if !safe_cast =>\n+                        (ty::Float(FloatTy::F64), ty::Int(_) | ty::Uint(_)) if unsafe_cast =>\n                             this.float_to_int_unchecked(op.to_scalar().to_f64()?, dest.layout.ty)?.into(),\n+                        // Ptr-to-ptr cast\n+                        (ty::RawPtr(..), ty::RawPtr(..)) if ptr_cast => {\n+                            this.ptr_to_ptr(&op, dest.layout.ty)?\n+                        }\n+                        // Ptr/Int casts\n+                        (ty::RawPtr(..), ty::Int(_) | ty::Uint(_)) if expose_cast => {\n+                            this.pointer_expose_address_cast(&op, dest.layout.ty)?\n+                        }\n+                        (ty::Int(_) | ty::Uint(_), ty::RawPtr(..)) if from_exposed_cast => {\n+                            this.pointer_from_exposed_address_cast(&op, dest.layout.ty)?\n+                        }\n+                        // Error otherwise\n                         _ =>\n                             throw_unsup_format!(\n                                 \"Unsupported SIMD cast from element type {from_ty} to {to_ty}\","}, {"sha": "303c99834f5d8cdf14c30e58a041ee88a59deb35", "filename": "src/tools/miri/tests/pass/portable-simd-ptrs.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/10540a2c798c2453835376809f35f4032269990f/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10540a2c798c2453835376809f35f4032269990f/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fpass%2Fportable-simd-ptrs.rs?ref=10540a2c798c2453835376809f35f4032269990f", "patch": "@@ -0,0 +1,12 @@\n+// Separate test without strict provenance\n+//@compile-flags: -Zmiri-permissive-provenance\n+#![feature(portable_simd, platform_intrinsics)]\n+use std::ptr;\n+use std::simd::*;\n+\n+fn main() {\n+    // Pointer casts\n+    let _val: Simd<*const u8, 4> = Simd::<*const i32, 4>::splat(ptr::null()).cast_ptr();\n+    let addrs = Simd::<*const i32, 4>::splat(ptr::null()).expose_addr();\n+    let _ptrs = Simd::<*const i32, 4>::from_exposed_addr(addrs);\n+}"}]}