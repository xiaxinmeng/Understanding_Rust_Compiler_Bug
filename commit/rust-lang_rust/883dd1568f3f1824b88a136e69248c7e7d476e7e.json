{"sha": "883dd1568f3f1824b88a136e69248c7e7d476e7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4M2RkMTU2OGYzZjE4MjRiODhhMTM2ZTY5MjQ4YzdlN2Q0NzZlN2U=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T17:00:35Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2021-05-14T17:00:35Z"}, "message": "internal: use more mutable APIs", "tree": {"sha": "0abf081283df9de4bb1318396b007d8fc9f93adf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0abf081283df9de4bb1318396b007d8fc9f93adf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/883dd1568f3f1824b88a136e69248c7e7d476e7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/883dd1568f3f1824b88a136e69248c7e7d476e7e", "html_url": "https://github.com/rust-lang/rust/commit/883dd1568f3f1824b88a136e69248c7e7d476e7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/883dd1568f3f1824b88a136e69248c7e7d476e7e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c21d04307edf130851aefad406bacce9edbde23", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c21d04307edf130851aefad406bacce9edbde23", "html_url": "https://github.com/rust-lang/rust/commit/6c21d04307edf130851aefad406bacce9edbde23"}], "stats": {"total": 86, "additions": 33, "deletions": 53}, "files": [{"sha": "fc7caee04b179b3d464d3eb08e130af7ce01cb9a", "filename": "crates/ide_assists/src/utils.rs", "status": "modified", "additions": 16, "deletions": 18, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fide_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fide_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_assists%2Fsrc%2Futils.rs?ref=883dd1568f3f1824b88a136e69248c7e7d476e7e", "patch": "@@ -17,7 +17,7 @@ use syntax::{\n     ast::AttrsOwner,\n     ast::NameOwner,\n     ast::{self, edit, make, ArgListOwner, GenericParamsOwner},\n-    AstNode, Direction, SmolStr,\n+    ted, AstNode, Direction, SmolStr,\n     SyntaxKind::*,\n     SyntaxNode, TextSize, T,\n };\n@@ -139,34 +139,32 @@ pub fn add_trait_assoc_items_to_impl(\n         .into_iter()\n         .map(|it| it.clone_for_update())\n         .inspect(|it| ast_transform::apply(&*ast_transform, it))\n-        .map(|it| match it {\n-            ast::AssocItem::Fn(def) => ast::AssocItem::Fn(add_body(def)),\n-            ast::AssocItem::TypeAlias(def) => ast::AssocItem::TypeAlias(def.remove_bounds()),\n-            _ => it,\n-        })\n         .map(|it| edit::remove_attrs_and_docs(&it).clone_subtree().clone_for_update());\n \n     let res = impl_.clone_for_update();\n+\n     let assoc_item_list = res.get_or_create_assoc_item_list();\n     let mut first_item = None;\n     for item in items {\n-        if first_item.is_none() {\n-            first_item = Some(item.clone())\n-        }\n-        assoc_item_list.add_item(item)\n-    }\n-    return (res, first_item.unwrap());\n-\n-    fn add_body(fn_def: ast::Fn) -> ast::Fn {\n-        match fn_def.body() {\n-            Some(_) => fn_def,\n-            None => {\n+        first_item.get_or_insert_with(|| item.clone());\n+        match &item {\n+            ast::AssocItem::Fn(fn_) if fn_.body().is_none() => {\n                 let body = make::block_expr(None, Some(make::ext::expr_todo()))\n                     .indent(edit::IndentLevel(1));\n-                fn_def.with_body(body)\n+                ted::replace(fn_.get_or_create_body().syntax(), body.clone_for_update().syntax())\n             }\n+            ast::AssocItem::TypeAlias(type_alias) => {\n+                if let Some(type_bound_list) = type_alias.type_bound_list() {\n+                    type_bound_list.remove()\n+                }\n+            }\n+            _ => {}\n         }\n+\n+        assoc_item_list.add_item(item)\n     }\n+\n+    (res, first_item.unwrap())\n }\n \n #[derive(Clone, Copy, Debug)]"}, {"sha": "4b5f5c5717f67c3c6e22fb92ff082fe68b53444d", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 1, "deletions": 35, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=883dd1568f3f1824b88a136e69248c7e7d476e7e", "patch": "@@ -13,7 +13,7 @@ use crate::{\n     ast::{\n         self,\n         make::{self, tokens},\n-        AstNode, TypeBoundsOwner,\n+        AstNode,\n     },\n     ted, AstToken, Direction, InsertPosition, NodeOrToken, SmolStr, SyntaxElement, SyntaxKind,\n     SyntaxKind::{ATTR, COMMENT, WHITESPACE},\n@@ -29,25 +29,6 @@ impl ast::BinExpr {\n     }\n }\n \n-impl ast::Fn {\n-    #[must_use]\n-    pub fn with_body(&self, body: ast::BlockExpr) -> ast::Fn {\n-        let mut to_insert: ArrayVec<SyntaxElement, 2> = ArrayVec::new();\n-        let old_body_or_semi: SyntaxElement = if let Some(old_body) = self.body() {\n-            old_body.syntax().clone().into()\n-        } else if let Some(semi) = self.semicolon_token() {\n-            to_insert.push(make::tokens::single_space().into());\n-            semi.into()\n-        } else {\n-            to_insert.push(make::tokens::single_space().into());\n-            to_insert.push(body.syntax().clone().into());\n-            return self.insert_children(InsertPosition::Last, to_insert);\n-        };\n-        to_insert.push(body.syntax().clone().into());\n-        self.replace_children(single_node(old_body_or_semi), to_insert)\n-    }\n-}\n-\n fn make_multiline<N>(node: N) -> N\n where\n     N: AstNode + Clone,\n@@ -156,21 +137,6 @@ impl ast::RecordExprFieldList {\n     }\n }\n \n-impl ast::TypeAlias {\n-    #[must_use]\n-    pub fn remove_bounds(&self) -> ast::TypeAlias {\n-        let colon = match self.colon_token() {\n-            Some(it) => it,\n-            None => return self.clone(),\n-        };\n-        let end = match self.type_bound_list() {\n-            Some(it) => it.syntax().clone().into(),\n-            None => colon.clone().into(),\n-        };\n-        self.replace_children(colon.into()..=end, iter::empty())\n-    }\n-}\n-\n impl ast::Path {\n     #[must_use]\n     pub fn with_segment(&self, segment: ast::PathSegment) -> ast::Path {"}, {"sha": "ca777d057da0aa96fa7ba5c6687bdfc1b55e2f0b", "filename": "crates/syntax/src/ast/edit_in_place.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/883dd1568f3f1824b88a136e69248c7e7d476e7e/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit_in_place.rs?ref=883dd1568f3f1824b88a136e69248c7e7d476e7e", "patch": "@@ -330,6 +330,22 @@ impl ast::AssocItemList {\n     }\n }\n \n+impl ast::Fn {\n+    pub fn get_or_create_body(&self) -> ast::BlockExpr {\n+        if self.body().is_none() {\n+            let body = make::ext::empty_block_expr().clone_for_update();\n+            match self.semicolon_token() {\n+                Some(semi) => {\n+                    ted::replace(semi, body.syntax());\n+                    ted::insert(Position::before(body.syntax), make::tokens::single_space());\n+                }\n+                None => ted::append_child(self.syntax(), body.syntax()),\n+            }\n+        }\n+        self.body().unwrap()\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use std::fmt;"}]}