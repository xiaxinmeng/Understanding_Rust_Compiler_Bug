{"sha": "3e6b84474d7cd813bda0956568966024915d0ea8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNmI4NDQ3NGQ3Y2Q4MTNiZGEwOTU2NTY4OTY2MDI0OTE1ZDBlYTg=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-21T23:31:27Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-09-21T23:31:27Z"}, "message": "Propagate `types.err` in locals further to avoid spurious knock-down errors", "tree": {"sha": "ec603328ee2a8c81882275f5deb966668c491714", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec603328ee2a8c81882275f5deb966668c491714"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e6b84474d7cd813bda0956568966024915d0ea8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b84474d7cd813bda0956568966024915d0ea8", "html_url": "https://github.com/rust-lang/rust/commit/3e6b84474d7cd813bda0956568966024915d0ea8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b84474d7cd813bda0956568966024915d0ea8/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ad1e7c46cf690b7ec6953b142430d21ca2d8799", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ad1e7c46cf690b7ec6953b142430d21ca2d8799", "html_url": "https://github.com/rust-lang/rust/commit/9ad1e7c46cf690b7ec6953b142430d21ca2d8799"}], "stats": {"total": 44, "additions": 41, "deletions": 3}, "files": [{"sha": "ac1bf8e91a149f3fc2363f43b14699679a69aca2", "filename": "src/librustc_typeck/check/coercion.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcoercion.rs?ref=3e6b84474d7cd813bda0956568966024915d0ea8", "patch": "@@ -163,7 +163,7 @@ impl<'f, 'tcx> Coerce<'f, 'tcx> {\n \n         // Just ignore error types.\n         if a.references_error() || b.references_error() {\n-            return success(vec![], b, vec![]);\n+            return success(vec![], self.fcx.tcx.types.err, vec![]);\n         }\n \n         if a.is_never() {\n@@ -821,7 +821,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n \n         let (adjustments, _) = self.register_infer_ok_obligations(ok);\n         self.apply_adjustments(expr, adjustments);\n-        Ok(target)\n+        if expr_ty.references_error() {\n+            Ok(self.tcx.types.err)\n+        } else {\n+            Ok(target)\n+        }\n     }\n \n     /// Same as `try_coerce()`, but without side-effects."}, {"sha": "75942731d8790786a3bfe0d7c13ba6e404433590", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 22, "deletions": 1, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=3e6b84474d7cd813bda0956568966024915d0ea8", "patch": "@@ -153,7 +153,7 @@ use self::method::{MethodCallee, SelfSource};\n use self::TupleArgumentsFlag::*;\n \n /// The type of a local binding, including the revealed type for anon types.\n-#[derive(Copy, Clone)]\n+#[derive(Copy, Clone, Debug)]\n pub struct LocalTy<'tcx> {\n     decl_ty: Ty<'tcx>,\n     revealed_ty: Ty<'tcx>\n@@ -3752,14 +3752,35 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         if let Some(ref init) = local.init {\n             let init_ty = self.check_decl_initializer(local, &init);\n             if init_ty.references_error() {\n+                // Override the types everywhere with `types.err` to avoid knock down errors.\n                 self.write_ty(local.hir_id, init_ty);\n+                self.write_ty(local.pat.hir_id, init_ty);\n+                self.locals.borrow_mut().insert(local.hir_id, LocalTy {\n+                    decl_ty: t,\n+                    revealed_ty: init_ty,\n+                });\n+                self.locals.borrow_mut().insert(local.pat.hir_id, LocalTy {\n+                    decl_ty: t,\n+                    revealed_ty: init_ty,\n+                });\n             }\n         }\n \n         self.check_pat_top(&local.pat, t, None);\n         let pat_ty = self.node_ty(local.pat.hir_id);\n+        debug!(\"check_decl_local pat_ty {:?}\", pat_ty);\n         if pat_ty.references_error() {\n+            // Override the types everywhere with `types.err` to avoid knock down errors.\n             self.write_ty(local.hir_id, pat_ty);\n+            self.write_ty(local.pat.hir_id, pat_ty);\n+            self.locals.borrow_mut().insert(local.hir_id, LocalTy {\n+                decl_ty: t,\n+                revealed_ty: pat_ty,\n+            });\n+            self.locals.borrow_mut().insert(local.pat.hir_id, LocalTy {\n+                decl_ty: t,\n+                revealed_ty: pat_ty,\n+            });\n         }\n     }\n "}, {"sha": "d97afc3d31d5c8712df0ea4c3d1c3518f4934d74", "filename": "src/test/ui/issues/issue-33575.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.rs?ref=3e6b84474d7cd813bda0956568966024915d0ea8", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let baz = ().foo(); //~ ERROR no method named `foo` found for type `()` in the current scope\n+    <i32 as std::str::FromStr>::from_str(&baz); // No complains about `str` being unsized\n+}"}, {"sha": "e6b74d262c340d4f04985e24d1206579378e8296", "filename": "src/test/ui/issues/issue-33575.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e6b84474d7cd813bda0956568966024915d0ea8/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-33575.stderr?ref=3e6b84474d7cd813bda0956568966024915d0ea8", "patch": "@@ -0,0 +1,9 @@\n+error[E0599]: no method named `foo` found for type `()` in the current scope\n+  --> $DIR/issue-33575.rs:2:18\n+   |\n+LL |     let baz = ().foo();\n+   |                  ^^^ method not found in `()`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0599`."}]}