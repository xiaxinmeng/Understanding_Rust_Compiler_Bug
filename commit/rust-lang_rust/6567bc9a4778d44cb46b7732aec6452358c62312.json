{"sha": "6567bc9a4778d44cb46b7732aec6452358c62312", "node_id": "C_kwDOAAsO6NoAKDY1NjdiYzlhNDc3OGQ0NGNiNDZiNzczMmFlYzY0NTIzNThjNjIzMTI", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-04-04T00:09:23Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "me@fmease.dev", "date": "2023-04-04T00:09:23Z"}, "message": "rustdoc: escape GAT args in more cases", "tree": {"sha": "65acb8ae6dc27112b1dc27c1af04d0fed483f0d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/65acb8ae6dc27112b1dc27c1af04d0fed483f0d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6567bc9a4778d44cb46b7732aec6452358c62312", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXSQFaHGAjVoD5I3F0XoHIV9o5xMFAmQrau8ACgkQ0XoHIV9o\n5xNdNxAAmK2bboSXYqxXqG5wWA/ALMGp4VFrhYf/rmIlaYGwooh4oFUdddbUPG5y\nO3ERldEIybWOPG4orlM91f0muob2OJqgT83yQL4PJiah78jCCHpXvTjqwFa7tQDB\nZFrpN2z5piOcAgktVp0qQn4Z9+xjfvBwvfo0hoQylHKSMs1pq6163jknKjam+a4p\nxfwPyXcmDDtf225Wk1bczy8MekaFSzotN4cYkw2YVer1oTkvodCgrOCpVYJ+sB6J\nLYkjtJ3jCQuXwkMMi05cH9bzcoqHCVZvX2qpM4dgRhyclWb3TZ3N8R0A4pq2izYw\n5POPC+fZPRgd1wVb2cLbMQVSkyuYQQVP8E8ZD5XFNZkHFpQ8/mSXSt4ms/uM6lhW\ni1MtIYCk0GYXZfZV/M058+bAso0RTrhD6jNFHWWK34adYOUFwYp943nRMhA+6lQH\nxqCtBwNjB0GV88bC/syJr5YzQUNMEDYv+xRHwRS9J4EUvcn6CJYnAxY2+kAK61Zf\n3z2OH0Gn0l0dt2YBKC8jTYtnMvm8Ol+tu7V78DBUWBcPoDUz0OZl/oVgs0iIUbsM\n4ZfzjTDxnuze0xLRqDaSzBLQHBFh12nUgou6XEhRq9W8nUaFXuixTkX3YGbkGi9w\nzSHlCxT39/IrMZq9PYsYqY2XVvMcL+Nh8qtgXm3HvlRQH/SWV5w=\n=cjG6\n-----END PGP SIGNATURE-----", "payload": "tree 65acb8ae6dc27112b1dc27c1af04d0fed483f0d7\nparent 480068c2359ea65df4481788b5ce717a548ce171\nauthor Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1680566963 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <me@fmease.dev> 1680566963 +0200\n\nrustdoc: escape GAT args in more cases\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6567bc9a4778d44cb46b7732aec6452358c62312", "html_url": "https://github.com/rust-lang/rust/commit/6567bc9a4778d44cb46b7732aec6452358c62312", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6567bc9a4778d44cb46b7732aec6452358c62312/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "480068c2359ea65df4481788b5ce717a548ce171", "url": "https://api.github.com/repos/rust-lang/rust/commits/480068c2359ea65df4481788b5ce717a548ce171", "html_url": "https://github.com/rust-lang/rust/commit/480068c2359ea65df4481788b5ce717a548ce171"}], "stats": {"total": 49, "additions": 33, "deletions": 16}, "files": [{"sha": "02b358e863b66eb808a4d76ce8a2f017a6147677", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 15, "deletions": 16, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/6567bc9a4778d44cb46b7732aec6452358c62312/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6567bc9a4778d44cb46b7732aec6452358c62312/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=6567bc9a4778d44cb46b7732aec6452358c62312", "patch": "@@ -1142,22 +1142,21 @@ fn fmt_type<'cx>(\n             //        the ugliness comes from inlining across crates where\n             //        everything comes in as a fully resolved QPath (hard to\n             //        look at).\n-            match href(trait_.def_id(), cx) {\n-                Ok((ref url, _, ref path)) if !f.alternate() => {\n-                    write!(\n-                        f,\n-                        \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n-                                    title=\\\"type {path}::{name}\\\">{name}</a>{args}\",\n-                        url = url,\n-                        shortty = ItemType::AssocType,\n-                        name = assoc.name,\n-                        path = join_with_double_colon(path),\n-                        args = assoc.args.print(cx),\n-                    )?;\n-                }\n-                _ => write!(f, \"{}{:#}\", assoc.name, assoc.args.print(cx))?,\n-            }\n-            Ok(())\n+            if !f.alternate() && let Ok((url, _, path)) = href(trait_.def_id(), cx) {\n+                write!(\n+                    f,\n+                    \"<a class=\\\"associatedtype\\\" href=\\\"{url}#{shortty}.{name}\\\" \\\n+                                title=\\\"type {path}::{name}\\\">{name}</a>\",\n+                    shortty = ItemType::AssocType,\n+                    name = assoc.name,\n+                    path = join_with_double_colon(&path),\n+                )\n+            } else {\n+                write!(f, \"{}\", assoc.name)\n+            }?;\n+\n+            // Carry `f.alternate()` into this display w/o branching manually.\n+            fmt::Display::fmt(&assoc.args.print(cx), f)\n         }\n     }\n }"}, {"sha": "99ae8a6c36c5203555d16b5752c9b5f7560bea79", "filename": "tests/rustdoc/generic-associated-types/issue-109488.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/6567bc9a4778d44cb46b7732aec6452358c62312/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6567bc9a4778d44cb46b7732aec6452358c62312/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc%2Fgeneric-associated-types%2Fissue-109488.rs?ref=6567bc9a4778d44cb46b7732aec6452358c62312", "patch": "@@ -0,0 +1,18 @@\n+// Make sure that we escape the arguments of the GAT projection even if we fail to compute\n+// the href of the corresponding trait (in this case it is private).\n+// Further, test that we also linkify the GAT arguments.\n+\n+// @has 'issue_109488/type.A.html'\n+// @has - '//pre[@class=\"rust item-decl\"]' '<S as Tr>::P<Option<i32>>'\n+// @has - '//pre[@class=\"rust item-decl\"]//a[@class=\"enum\"]/@href' '{{channel}}/core/option/enum.Option.html'\n+pub type A = <S as Tr>::P<Option<i32>>;\n+\n+/*private*/ trait Tr {\n+    type P<T>;\n+}\n+\n+pub struct S;\n+\n+impl Tr for S {\n+    type P<T> = ();\n+}"}]}