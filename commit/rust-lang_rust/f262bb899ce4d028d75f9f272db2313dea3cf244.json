{"sha": "f262bb899ce4d028d75f9f272db2313dea3cf244", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYyNjJiYjg5OWNlNGQwMjhkNzVmOWYyNzJkYjIzMTNkZWEzY2YyNDQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-21T03:38:10Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2016-05-21T03:38:10Z"}, "message": "Rollup merge of #33747 - postmodern:patch-2, r=Manishearth\n\nClarify the English translation of `?Sized`\n\n* It wasn't clear whether `?Sized` meant \"not `Sized`\" or \"`Sized` or not `Sized`\". According to #rust IRC, it does indeed mean \"`Sized` or not `Sized`\".\n* Use the same language as [Trait std::marker::Sized](https://doc.rust-lang.org/std/marker/trait.Sized.html) about how `Sized` is implicitly bound.\n* Refer to the syntax as `?Sized`, since it's currently the only allowed trait that can follow `?`.", "tree": {"sha": "f5b856d860ab7ccf6c5db188b76066bfe78674f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b856d860ab7ccf6c5db188b76066bfe78674f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f262bb899ce4d028d75f9f272db2313dea3cf244", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f262bb899ce4d028d75f9f272db2313dea3cf244", "html_url": "https://github.com/rust-lang/rust/commit/f262bb899ce4d028d75f9f272db2313dea3cf244", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f262bb899ce4d028d75f9f272db2313dea3cf244/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c57bb106d85d52b5c24634bcc68a4637c94c2472", "url": "https://api.github.com/repos/rust-lang/rust/commits/c57bb106d85d52b5c24634bcc68a4637c94c2472", "html_url": "https://github.com/rust-lang/rust/commit/c57bb106d85d52b5c24634bcc68a4637c94c2472"}, {"sha": "71af58accf8f773a7d410cf947940487f65ae70f", "url": "https://api.github.com/repos/rust-lang/rust/commits/71af58accf8f773a7d410cf947940487f65ae70f", "html_url": "https://github.com/rust-lang/rust/commit/71af58accf8f773a7d410cf947940487f65ae70f"}], "stats": {"total": 9, "additions": 5, "deletions": 4}, "files": [{"sha": "a23470d39fa091392200fd74fe109ea099ca2c0b", "filename": "src/doc/book/unsized-types.md", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f262bb899ce4d028d75f9f272db2313dea3cf244/src%2Fdoc%2Fbook%2Funsized-types.md", "raw_url": "https://github.com/rust-lang/rust/raw/f262bb899ce4d028d75f9f272db2313dea3cf244/src%2Fdoc%2Fbook%2Funsized-types.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Funsized-types.md?ref=f262bb899ce4d028d75f9f272db2313dea3cf244", "patch": "@@ -47,14 +47,15 @@ pointers, can use this `impl`.\n # ?Sized\n \n If you want to write a function that accepts a dynamically sized type, you\n-can use the special bound, `?Sized`:\n+can use the special bound syntax, `?Sized`:\n \n ```rust\n struct Foo<T: ?Sized> {\n     f: T,\n }\n ```\n \n-This `?`, read as \u201cT may be `Sized`\u201d,  means that this bound is special: it\n-lets us match more kinds, not less. It\u2019s almost like every `T` implicitly has\n-`T: Sized`, and the `?` undoes this default.\n+This `?Sized`, read as \u201cT may or may not be `Sized`\u201d, which allows us to match\n+both sized and unsized types. All generic type parameters implicitly\n+have the `Sized` bound, so the `?Sized` can be used to opt-out of the implicit\n+bound."}]}