{"sha": "6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZlZjBkZmE0MmY4ZmE1NTlmOThjNTFkY2Q3YzkyNmZiZjQxMGEzNjc=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-16T18:18:46Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-16T18:18:46Z"}, "message": "Rollup merge of #74159 - lcnr:const-generic-ty-decl, r=varkor\n\nforbid generic params in the type of const params\n\nimplements and closes #74152\n\nfixes #74101, closes #71169, fixes #73491, closes #62878\n\n@eddyb and I talked [on zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203405696) about this and we probably want to also forbid generic consts in the default\ntype of a parameter, e.g. `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`, this is currently still allowed\nand I will probably fix that in a followup PR.\n\nr? @varkor @eddyb", "tree": {"sha": "52c9039411769928c23db2265739eeb20c9b2d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52c9039411769928c23db2265739eeb20c9b2d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEJoGCRBK7hj4Ov3rIwAAdHIIACkzfSHywpyIiSEC09MGEqzO\nBfs4O56GN5qqYcR172oxwb2/jLtjTh+MgNhQH5X+Hw+Q5t+tDN48f19Dmr7FfLy0\n5nnsmUeiOwLI7nucV3baLBoe+ARMOOz3RUE3wBuSbamwdDLl+ZIT6VRMgwvpoLUM\nTDWrHu0r9XPBU1mJQ964+N0JdwMNxN4GL8OuiCT4LaTNQYpFPQT4Jjw3GlLdcB6y\nPlXWFtu8enk8x8gtCiwfPQ1qIhJsz6EJSzkhluUDMLsksZf3Yn/Chwl0jgR0DFUm\n0CfYjtaoKiOZoR09QsQtnq1hpM2Lwo3YkgMUbiSQBLMqhKyRmXNRluEw74/8RRM=\n=IPTl\n-----END PGP SIGNATURE-----\n", "payload": "tree 52c9039411769928c23db2265739eeb20c9b2d1f\nparent 61a3f6701b5e1d8cd87be83c2b6a8322f812c8d8\nparent 09ba0bda2caa448d381b952d2b52df1782c44966\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594923526 -0700\ncommitter GitHub <noreply@github.com> 1594923526 -0700\n\nRollup merge of #74159 - lcnr:const-generic-ty-decl, r=varkor\n\nforbid generic params in the type of const params\n\nimplements and closes #74152\n\nfixes #74101, closes #71169, fixes #73491, closes #62878\n\n@eddyb and I talked [on zulip](https://rust-lang.zulipchat.com/#narrow/stream/131828-t-compiler/topic/type.20of.20const.20parameters/near/203405696) about this and we probably want to also forbid generic consts in the default\ntype of a parameter, e.g. `struct Foo<T, U = [u8; std::mem::size_of::<T>()]>`, this is currently still allowed\nand I will probably fix that in a followup PR.\n\nr? @varkor @eddyb\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "html_url": "https://github.com/rust-lang/rust/commit/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61a3f6701b5e1d8cd87be83c2b6a8322f812c8d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/61a3f6701b5e1d8cd87be83c2b6a8322f812c8d8", "html_url": "https://github.com/rust-lang/rust/commit/61a3f6701b5e1d8cd87be83c2b6a8322f812c8d8"}, {"sha": "09ba0bda2caa448d381b952d2b52df1782c44966", "url": "https://api.github.com/repos/rust-lang/rust/commits/09ba0bda2caa448d381b952d2b52df1782c44966", "html_url": "https://github.com/rust-lang/rust/commit/09ba0bda2caa448d381b952d2b52df1782c44966"}], "stats": {"total": 307, "additions": 271, "deletions": 36}, "files": [{"sha": "6160450d766769fe4f0169b7317ed528d33f12f7", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -452,6 +452,7 @@ E0766: include_str!(\"./error_codes/E0766.md\"),\n E0767: include_str!(\"./error_codes/E0767.md\"),\n E0768: include_str!(\"./error_codes/E0768.md\"),\n E0769: include_str!(\"./error_codes/E0769.md\"),\n+E0770: include_str!(\"./error_codes/E0770.md\"),\n ;\n //  E0006, // merged with E0005\n //  E0008, // cannot bind by-move into a pattern guard"}, {"sha": "a993ce826a737e0cfada3310469bf4b408bffefa", "filename": "src/librustc_error_codes/error_codes/E0671.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0671.md?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -3,7 +3,7 @@\n Const parameters cannot depend on type parameters.\n The following is therefore invalid:\n \n-```compile_fail,E0741\n+```compile_fail,E0770\n #![feature(const_generics)]\n \n fn const_id<T, const N: T>() -> T { // error"}, {"sha": "278bf9b907b240358802d40bf5c53a59f6238035", "filename": "src/librustc_error_codes/error_codes/E0770.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0770.md?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,15 @@\n+The type of a const parameter references other generic parameters.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0770\n+#![feature(const_generics)]\n+fn foo<T, const N: T>() {} // error!\n+```\n+\n+To fix this error, use a concrete type for the const parameter:\n+\n+```\n+#![feature(const_generics)]\n+fn foo<T, const N: usize>() {}\n+```"}, {"sha": "9204f778a24b965e101fa467970df8188e956abe", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -2687,7 +2687,7 @@ pub enum Node<'hir> {\n     Crate(&'hir CrateItem<'hir>),\n }\n \n-impl Node<'_> {\n+impl<'hir> Node<'hir> {\n     pub fn ident(&self) -> Option<Ident> {\n         match self {\n             Node::TraitItem(TraitItem { ident, .. })\n@@ -2698,7 +2698,7 @@ impl Node<'_> {\n         }\n     }\n \n-    pub fn fn_decl(&self) -> Option<&FnDecl<'_>> {\n+    pub fn fn_decl(&self) -> Option<&FnDecl<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { kind: TraitItemKind::Fn(fn_sig, _), .. })\n             | Node::ImplItem(ImplItem { kind: ImplItemKind::Fn(fn_sig, _), .. })\n@@ -2722,7 +2722,7 @@ impl Node<'_> {\n         }\n     }\n \n-    pub fn generics(&self) -> Option<&Generics<'_>> {\n+    pub fn generics(&self) -> Option<&'hir Generics<'hir>> {\n         match self {\n             Node::TraitItem(TraitItem { generics, .. })\n             | Node::ImplItem(ImplItem { generics, .. }) => Some(generics),"}, {"sha": "575049c6bac2fa52ba7f1aba2abb7e78420568f0", "filename": "src/librustc_resolve/diagnostics.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fdiagnostics.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -442,6 +442,19 @@ impl<'a> Resolver<'a> {\n                 );\n                 err\n             }\n+            ResolutionError::ParamInTyOfConstArg(name) => {\n+                let mut err = struct_span_err!(\n+                    self.session,\n+                    span,\n+                    E0770,\n+                    \"the type of const parameters must not depend on other generic parameters\"\n+                );\n+                err.span_label(\n+                    span,\n+                    format!(\"the type must not depend on the parameter `{}`\", name),\n+                );\n+                err\n+            }\n             ResolutionError::SelfInTyParamDefault => {\n                 let mut err = struct_span_err!(\n                     self.session,"}, {"sha": "ed88e5496921596a15f783c79c84a648f7a617f8", "filename": "src/librustc_resolve/late.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flate.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -123,6 +123,10 @@ crate enum RibKind<'a> {\n     /// from the default of a type parameter because they're not declared\n     /// before said type parameter. Also see the `visit_generics` override.\n     ForwardTyParamBanRibKind,\n+\n+    /// We are inside of the type of a const parameter. Can't refer to any\n+    /// parameters.\n+    ConstParamTyRibKind,\n }\n \n impl RibKind<'_> {\n@@ -135,7 +139,8 @@ impl RibKind<'_> {\n             | FnItemRibKind\n             | ConstantItemRibKind\n             | ModuleRibKind(_)\n-            | MacroDefinition(_) => false,\n+            | MacroDefinition(_)\n+            | ConstParamTyRibKind => false,\n             AssocItemRibKind | ItemRibKind(_) | ForwardTyParamBanRibKind => true,\n         }\n     }\n@@ -576,7 +581,11 @@ impl<'a, 'ast> Visitor<'ast> for LateResolutionVisitor<'a, '_, 'ast> {\n                     for bound in &param.bounds {\n                         self.visit_param_bound(bound);\n                     }\n+                    self.ribs[TypeNS].push(Rib::new(ConstParamTyRibKind));\n+                    self.ribs[ValueNS].push(Rib::new(ConstParamTyRibKind));\n                     self.visit_ty(ty);\n+                    self.ribs[TypeNS].pop().unwrap();\n+                    self.ribs[ValueNS].pop().unwrap();\n                 }\n             }\n         }\n@@ -814,7 +823,8 @@ impl<'a, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n                 | ItemRibKind(..)\n                 | ConstantItemRibKind\n                 | ModuleRibKind(..)\n-                | ForwardTyParamBanRibKind => {\n+                | ForwardTyParamBanRibKind\n+                | ConstParamTyRibKind => {\n                     return false;\n                 }\n             }"}, {"sha": "c3686ca4899bcee8db67fde1ee51902820a539e3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 33, "deletions": 1, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -214,6 +214,8 @@ enum ResolutionError<'a> {\n     BindingShadowsSomethingUnacceptable(&'static str, Symbol, &'a NameBinding<'a>),\n     /// Error E0128: type parameters with a default cannot use forward-declared identifiers.\n     ForwardDeclaredTyParam, // FIXME(const_generics:defaults)\n+    /// ERROR E0770: the type of const parameters must not depend on other generic parameters.\n+    ParamInTyOfConstArg(Symbol),\n     /// Error E0735: type parameters with a default cannot use `Self`\n     SelfInTyParamDefault,\n     /// Error E0767: use of unreachable label\n@@ -2480,6 +2482,12 @@ impl<'a> Resolver<'a> {\n                             }\n                             return Res::Err;\n                         }\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(span, ParamInTyOfConstArg(rib_ident.name));\n+                            }\n+                            return Res::Err;\n+                        }\n                     }\n                 }\n                 if let Some(res_err) = res_err {\n@@ -2503,6 +2511,15 @@ impl<'a> Resolver<'a> {\n                         // This was an attempt to use a type parameter outside its scope.\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(\n+                                    span,\n+                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                );\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     if record_used {\n@@ -2527,9 +2544,24 @@ impl<'a> Resolver<'a> {\n                 }\n                 for rib in ribs {\n                     let has_generic_params = match rib.kind {\n+                        NormalRibKind\n+                        | ClosureOrAsyncRibKind\n+                        | AssocItemRibKind\n+                        | ModuleRibKind(..)\n+                        | MacroDefinition(..)\n+                        | ForwardTyParamBanRibKind\n+                        | ConstantItemRibKind => continue,\n                         ItemRibKind(has_generic_params) => has_generic_params,\n                         FnItemRibKind => HasGenericParams::Yes,\n-                        _ => continue,\n+                        ConstParamTyRibKind => {\n+                            if record_used {\n+                                self.report_error(\n+                                    span,\n+                                    ResolutionError::ParamInTyOfConstArg(rib_ident.name),\n+                                );\n+                            }\n+                            return Res::Err;\n+                        }\n                     };\n \n                     // This was an attempt to use a const parameter outside its scope."}, {"sha": "17212187e6a01816ea08b0d00002d24cc2dc47b5", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 56, "deletions": 5, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -29,7 +29,7 @@ use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::{DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::weak_lang_items;\n-use rustc_hir::{GenericParamKind, Node};\n+use rustc_hir::{GenericParamKind, HirId, Node};\n use rustc_middle::hir::map::blocks::FnLikeNode;\n use rustc_middle::hir::map::Map;\n use rustc_middle::middle::codegen_fn_attrs::{CodegenFnAttrFlags, CodegenFnAttrs};\n@@ -1155,6 +1155,35 @@ fn has_late_bound_regions<'tcx>(tcx: TyCtxt<'tcx>, node: Node<'tcx>) -> Option<S\n     }\n }\n \n+struct AnonConstInParamListDetector {\n+    in_param_list: bool,\n+    found_anon_const_in_list: bool,\n+    ct: HirId,\n+}\n+\n+impl<'v> Visitor<'v> for AnonConstInParamListDetector {\n+    type Map = intravisit::ErasedMap<'v>;\n+\n+    fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n+        NestedVisitorMap::None\n+    }\n+\n+    fn visit_generic_param(&mut self, p: &'v hir::GenericParam<'v>) {\n+        let prev = self.in_param_list;\n+        self.in_param_list = true;\n+        intravisit::walk_generic_param(self, p);\n+        self.in_param_list = prev;\n+    }\n+\n+    fn visit_anon_const(&mut self, c: &'v hir::AnonConst) {\n+        if self.in_param_list && self.ct == c.hir_id {\n+            self.found_anon_const_in_list = true;\n+        } else {\n+            intravisit::walk_anon_const(self, c)\n+        }\n+    }\n+}\n+\n fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n     use rustc_hir::*;\n \n@@ -1176,10 +1205,32 @@ fn generics_of(tcx: TyCtxt<'_>, def_id: DefId) -> ty::Generics {\n             let parent_id = tcx.hir().get_parent_item(hir_id);\n             let parent_def_id = tcx.hir().local_def_id(parent_id);\n \n-            // HACK(eddyb) this provides the correct generics when\n-            // `feature(const_generics)` is enabled, so that const expressions\n-            // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n-            if tcx.lazy_normalization() {\n+            let mut in_param_list = false;\n+            for (_parent, node) in tcx.hir().parent_iter(hir_id) {\n+                if let Some(generics) = node.generics() {\n+                    let mut visitor = AnonConstInParamListDetector {\n+                        in_param_list: false,\n+                        found_anon_const_in_list: false,\n+                        ct: hir_id,\n+                    };\n+\n+                    visitor.visit_generics(generics);\n+                    in_param_list = visitor.found_anon_const_in_list;\n+                    break;\n+                }\n+            }\n+\n+            if in_param_list {\n+                // We do not allow generic parameters in anon consts if we are inside\n+                // of a param list.\n+                //\n+                // This affects both default type bindings, e.g. `struct<T, U = [u8; std::mem::size_of::<T>()]>(T, U)`,\n+                // and the types of const parameters, e.g. `struct V<const N: usize, const M: [u8; N]>();`.\n+                None\n+            } else if tcx.lazy_normalization() {\n+                // HACK(eddyb) this provides the correct generics when\n+                // `feature(const_generics)` is enabled, so that const expressions\n+                // used with const generics, e.g. `Foo<{N+1}>`, can work at all.\n                 Some(parent_def_id.to_def_id())\n             } else {\n                 let parent_node = tcx.hir().get(tcx.hir().get_parent_node(hir_id));"}, {"sha": "5aa3617d1d7e03cfad9bca418e47bda023a0edb4", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,15 @@\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete\n+\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n+\n+pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+\n+pub struct SelfDependent<const N: [u8; N]>;\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+\n+fn main() {}"}, {"sha": "f6606aea726adc776b7706c977e3ab292bf6fbcc", "filename": "src/test/ui/const-generics/const-param-type-depends-on-const-param.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-const-param.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,24 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:9:52\n+   |\n+LL | pub struct Dependent<const N: usize, const X: [u8; N]>([(); N]);\n+   |                                                    ^ the type must not depend on the parameter `N`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-const-param.rs:12:40\n+   |\n+LL | pub struct SelfDependent<const N: [u8; N]>;\n+   |                                        ^ the type must not depend on the parameter `N`\n+\n+warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/const-param-type-depends-on-const-param.rs:1:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "db15ececfa436e26f7d67d12b7b0eb988485a24c", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,6 +1,6 @@\n use std::marker::PhantomData;\n \n struct B<T, const N: T>(PhantomData<[T; N]>); //~ ERROR const generics are unstable\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR the type of const parameters must not depend on other generic parameters\n \n fn main() {}"}, {"sha": "35996e833610ddd11e0b4498d54c7783b99607a8", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param-ungated.stderr", "status": "modified", "additions": 7, "deletions": 9, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param-ungated.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n+   |\n+LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n+   |                      ^ the type must not depend on the parameter `T`\n+\n error[E0658]: const generics are unstable\n   --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:19\n    |\n@@ -7,15 +13,7 @@ LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n    = help: add `#![feature(const_generics)]` to the crate attributes to enable\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param-ungated.rs:3:22\n-   |\n-LL | struct B<T, const N: T>(PhantomData<[T; N]>);\n-   |                      ^ `T` may not derive both `PartialEq` and `Eq`\n-   |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n-\n error: aborting due to 2 previous errors\n \n-Some errors have detailed explanations: E0658, E0741.\n+Some errors have detailed explanations: E0658, E0770.\n For more information about an error, try `rustc --explain E0658`."}, {"sha": "7fe04a43412a1edd26c4f33e141083bc7525e168", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,12 +1,13 @@\n #![feature(const_generics)]\n //~^ WARN the feature `const_generics` is incomplete\n \n-// Currently, const parameters cannot depend on type parameters, because there is no way to\n-// enforce the structural-match property on an arbitrary type parameter. This restriction\n-// may be relaxed in the future. See https://github.com/rust-lang/rfcs/pull/2000 for more\n-// details.\n+// Currently, const parameters cannot depend on other generic parameters,\n+// as our current implementation can't really support this.\n+//\n+// We may want to lift this restriction in the future.\n \n pub struct Dependent<T, const X: T>([(); X]);\n-//~^ ERROR `T` is not guaranteed to `#[derive(PartialEq, Eq)]`\n+//~^ ERROR: the type of const parameters must not depend on other generic parameters\n+//~| ERROR: parameter `T` is never used\n \n fn main() {}"}, {"sha": "d081dcbbc7a4e90db6360cea80dfe9286a3802d1", "filename": "src/test/ui/const-generics/const-param-type-depends-on-type-param.stderr", "status": "modified", "additions": 13, "deletions": 6, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-param-type-depends-on-type-param.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,3 +1,9 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+   |\n+LL | pub struct Dependent<T, const X: T>([(); X]);\n+   |                                  ^ the type must not depend on the parameter `T`\n+\n warning: the feature `const_generics` is incomplete and may not be safe to use and/or cause compiler crashes\n   --> $DIR/const-param-type-depends-on-type-param.rs:1:12\n    |\n@@ -7,14 +13,15 @@ LL | #![feature(const_generics)]\n    = note: `#[warn(incomplete_features)]` on by default\n    = note: see issue #44580 <https://github.com/rust-lang/rust/issues/44580> for more information\n \n-error[E0741]: `T` is not guaranteed to `#[derive(PartialEq, Eq)]`, so may not be used as the type of a const parameter\n-  --> $DIR/const-param-type-depends-on-type-param.rs:9:34\n+error[E0392]: parameter `T` is never used\n+  --> $DIR/const-param-type-depends-on-type-param.rs:9:22\n    |\n LL | pub struct Dependent<T, const X: T>([(); X]);\n-   |                                  ^ `T` may not derive both `PartialEq` and `Eq`\n+   |                      ^ unused parameter\n    |\n-   = note: it is not currently possible to use a type parameter as the type of a const parameter\n+   = help: consider removing `T`, referring to it in a field, or using a marker such as `std::marker::PhantomData`\n \n-error: aborting due to previous error; 1 warning emitted\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n-For more information about this error, try `rustc --explain E0741`.\n+Some errors have detailed explanations: E0392, E0770.\n+For more information about an error, try `rustc --explain E0392`."}, {"sha": "943a16cfcd6a7fb2ed02ea5ec08d53411f34e779", "filename": "src/test/ui/const-generics/issues/issue-71169.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,10 @@\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+//~^ ERROR the type of const parameters must not\n+fn main() {\n+    const DATA: [u8; 4] = *b\"ABCD\";\n+    foo::<4, DATA>();\n+    //~^ ERROR constant expression depends on\n+}"}, {"sha": "6d4cf4027c1466bfe59bb960bc8f38311fac2a8c", "filename": "src/test/ui/const-generics/issues/issue-71169.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71169.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,17 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71169.rs:4:43\n+   |\n+LL | fn foo<const LEN: usize, const DATA: [u8; LEN]>() {}\n+   |                                           ^^^ the type must not depend on the parameter `LEN`\n+\n+error: constant expression depends on a generic parameter\n+  --> $DIR/issue-71169.rs:8:14\n+   |\n+LL |     foo::<4, DATA>();\n+   |              ^^^^\n+   |\n+   = note: this may fail depending on what value the parameter takes\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "08f948239421879811e1f2ee28c42dbfc936b91e", "filename": "src/test/ui/const-generics/issues/issue-71381.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -12,6 +12,7 @@ unsafe extern \"C\" fn pass(args: PassArg) {\n impl Test {\n     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n         self.0 = Self::trampiline::<Args, IDX, FN> as _\n     }\n \n@@ -20,6 +21,7 @@ impl Test {\n         const IDX: usize,\n         const FN: unsafe extern \"C\" fn(Args),\n         //~^ ERROR: using function pointers as const generic parameters is forbidden\n+        //~| ERROR: the type of const parameters must not depend on other generic parameters\n     >(\n         args: Args,\n     ) {"}, {"sha": "fd4ebe3dead81e8d52ff256acfa45a89fea337a5", "filename": "src/test/ui/const-generics/issues/issue-71381.stderr", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71381.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,14 +1,27 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:13:82\n+   |\n+LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n+   |                                                                                  ^^^^ the type must not depend on the parameter `Args`\n+\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71381.rs:22:40\n+   |\n+LL |         const FN: unsafe extern \"C\" fn(Args),\n+   |                                        ^^^^ the type must not depend on the parameter `Args`\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71381.rs:13:61\n    |\n LL |     pub fn call_me<Args: Sized, const IDX: usize, const FN: unsafe extern \"C\" fn(Args)>(&self) {\n    |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: using function pointers as const generic parameters is forbidden\n-  --> $DIR/issue-71381.rs:21:19\n+  --> $DIR/issue-71381.rs:22:19\n    |\n LL |         const FN: unsafe extern \"C\" fn(Args),\n    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 4 previous errors\n \n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "06ff38dec66c74e8c157568fc04c4abb3d23c2cc", "filename": "src/test/ui/const-generics/issues/issue-71611.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -3,6 +3,7 @@\n \n fn func<A, const F: fn(inner: A)>(outer: A) {\n     //~^ ERROR: using function pointers as const generic parameters is forbidden\n+    //~| ERROR: the type of const parameters must not depend on other generic parameters\n     F(outer);\n }\n "}, {"sha": "e2c9f22361ebe5c5c622a21121f6b3b88c9e5e80", "filename": "src/test/ui/const-generics/issues/issue-71611.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-71611.stderr?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -1,8 +1,15 @@\n+error[E0770]: the type of const parameters must not depend on other generic parameters\n+  --> $DIR/issue-71611.rs:4:31\n+   |\n+LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n+   |                               ^ the type must not depend on the parameter `A`\n+\n error: using function pointers as const generic parameters is forbidden\n   --> $DIR/issue-71611.rs:4:21\n    |\n LL | fn func<A, const F: fn(inner: A)>(outer: A) {\n    |                     ^^^^^^^^^^^^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0770`."}, {"sha": "05e1513bb75df36a25ea5158d7eaef98ebbfc82f", "filename": "src/test/ui/const-generics/issues/issue-73491.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-73491.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+const LEN: usize = 1024;\n+\n+fn hoge<const IN: [u32; LEN]>() {}\n+\n+fn main() {}"}, {"sha": "2f427ef3a27dcc76f3ea56952eb86ed496c41a87", "filename": "src/test/ui/const-generics/issues/issue-74101.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ef0dfa42f8fa559f98c51dcd7c926fbf410a367/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-74101.rs?ref=6ef0dfa42f8fa559f98c51dcd7c926fbf410a367", "patch": "@@ -0,0 +1,9 @@\n+// check-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+fn test<const N: [u8; 1 + 2]>() {}\n+\n+struct Foo<const N: [u8; 1 + 2]>;\n+\n+fn main() {}"}]}