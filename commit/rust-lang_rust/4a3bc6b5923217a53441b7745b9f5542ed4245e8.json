{"sha": "4a3bc6b5923217a53441b7745b9f5542ed4245e8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhM2JjNmI1OTIzMjE3YTUzNDQxYjc3NDViOWY1NTQyZWQ0MjQ1ZTg=", "commit": {"author": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-12T06:25:05Z"}, "committer": {"name": "Michael Wright", "email": "mikerite@lavabit.com", "date": "2019-09-12T06:25:05Z"}, "message": "Add `unneeded-wildcard-pattern` lint", "tree": {"sha": "f0286501af0578e360319da414255ffc7414805c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0286501af0578e360319da414255ffc7414805c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a3bc6b5923217a53441b7745b9f5542ed4245e8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a3bc6b5923217a53441b7745b9f5542ed4245e8", "html_url": "https://github.com/rust-lang/rust/commit/4a3bc6b5923217a53441b7745b9f5542ed4245e8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a3bc6b5923217a53441b7745b9f5542ed4245e8/comments", "author": null, "committer": null, "parents": [{"sha": "6ca5b2053a6d48d0cf10af1dbbb9b79c9704707a", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ca5b2053a6d48d0cf10af1dbbb9b79c9704707a", "html_url": "https://github.com/rust-lang/rust/commit/6ca5b2053a6d48d0cf10af1dbbb9b79c9704707a"}], "stats": {"total": 257, "additions": 254, "deletions": 3}, "files": [{"sha": "eb710654cafa845ed0fd9a670248e23b781ef1fb", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -1188,6 +1188,7 @@ Released 2018-09-13\n [`unnecessary_operation`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation\n [`unnecessary_unwrap`]: https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_unwrap\n [`unneeded_field_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_field_pattern\n+[`unneeded_wildcard_pattern`]: https://rust-lang.github.io/rust-clippy/master/index.html#unneeded_wildcard_pattern\n [`unreadable_literal`]: https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal\n [`unsafe_removed_from_name`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_removed_from_name\n [`unsafe_vector_initialization`]: https://rust-lang.github.io/rust-clippy/master/index.html#unsafe_vector_initialization"}, {"sha": "4541af9c844e2d81c666a6af8dca6379a7f0763a", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 313 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 314 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "de4d262bddca0e16c69856c0eb1494576a278450", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -825,6 +825,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         misc_early::REDUNDANT_CLOSURE_CALL,\n         misc_early::REDUNDANT_PATTERN,\n         misc_early::UNNEEDED_FIELD_PATTERN,\n+        misc_early::UNNEEDED_WILDCARD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n         mut_reference::UNNECESSARY_MUT_PASSED,\n         mutex_atomic::MUTEX_ATOMIC,\n@@ -1044,6 +1045,7 @@ pub fn register_plugins(reg: &mut rustc_driver::plugin::Registry<'_>, conf: &Con\n         methods::USELESS_ASREF,\n         misc::SHORT_CIRCUIT_STATEMENT,\n         misc_early::REDUNDANT_CLOSURE_CALL,\n+        misc_early::UNNEEDED_WILDCARD_PATTERN,\n         misc_early::ZERO_PREFIXED_LITERAL,\n         needless_bool::BOOL_COMPARISON,\n         needless_bool::NEEDLESS_BOOL,"}, {"sha": "2e1be755d09868e92f9e3dfc60c8daf4d4d3e3cb", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 92, "deletions": 1, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -195,6 +195,40 @@ declare_clippy_lint! {\n     \"using `name @ _` in a pattern\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for tuple patterns with a wildcard\n+    /// pattern (`_`) is next to a rest pattern (`..`) pattern.\n+    ///\n+    /// **Why is this bad?** The wildcard pattern is unneeded as the rest pattern\n+    /// can match that element as well.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n+    ///\n+    /// match t {\n+    ///     TupleStruct(0, .., _) => (),\n+    ///     _ => (),\n+    /// }\n+    /// ```\n+    /// can be written as\n+    /// ```rust\n+    /// # struct TupleStruct(u32, u32, u32);\n+    /// # let t = TupleStruct(1, 2, 3);\n+    ///\n+    /// match t {\n+    ///     TupleStruct(0, ..) => (),\n+    ///     _ => (),\n+    /// }\n+    /// ```\n+    pub UNNEEDED_WILDCARD_PATTERN,\n+    complexity,\n+    \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`) pattern\"\n+}\n+\n declare_lint_pass!(MiscEarlyLints => [\n     UNNEEDED_FIELD_PATTERN,\n     DUPLICATE_UNDERSCORE_ARGUMENT,\n@@ -204,7 +238,8 @@ declare_lint_pass!(MiscEarlyLints => [\n     UNSEPARATED_LITERAL_SUFFIX,\n     ZERO_PREFIXED_LITERAL,\n     BUILTIN_TYPE_SHADOW,\n-    REDUNDANT_PATTERN\n+    REDUNDANT_PATTERN,\n+    UNNEEDED_WILDCARD_PATTERN,\n ]);\n \n // Used to find `return` statements or equivalents e.g., `?`\n@@ -326,6 +361,62 @@ impl EarlyLintPass for MiscEarlyLints {\n                 );\n             }\n         }\n+\n+        if let PatKind::TupleStruct(_, ref patterns) | PatKind::Tuple(ref patterns) = pat.node {\n+            fn span_lint(cx: &EarlyContext<'_>, span: Span, only_one: bool) {\n+                span_lint_and_sugg(\n+                    cx,\n+                    UNNEEDED_WILDCARD_PATTERN,\n+                    span,\n+                    if only_one {\n+                        \"this pattern is unneeded as the `..` pattern can match that element\"\n+                    } else {\n+                        \"these patterns are unneeded as the `..` pattern can match those elements\"\n+                    },\n+                    if only_one { \"remove it\" } else { \"remove them\" },\n+                    \"\".to_string(),\n+                    Applicability::MachineApplicable,\n+                );\n+            }\n+\n+            fn is_rest<P: std::ops::Deref<Target = Pat>>(pat: &P) -> bool {\n+                if let PatKind::Rest = pat.node {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+\n+            fn is_wild<P: std::ops::Deref<Target = Pat>>(pat: &&P) -> bool {\n+                if let PatKind::Wild = pat.node {\n+                    true\n+                } else {\n+                    false\n+                }\n+            }\n+\n+            if let Some(rest_index) = patterns.iter().position(is_rest) {\n+                if let Some((left_index, left_pat)) = patterns[..rest_index]\n+                    .iter()\n+                    .rev()\n+                    .take_while(is_wild)\n+                    .enumerate()\n+                    .last()\n+                {\n+                    span_lint(cx, left_pat.span.until(patterns[rest_index].span), left_index == 0);\n+                }\n+\n+                if let Some((right_index, right_pat)) =\n+                    patterns[rest_index + 1..].iter().take_while(is_wild).enumerate().last()\n+                {\n+                    span_lint(\n+                        cx,\n+                        patterns[rest_index].span.shrink_to_hi().to(right_pat.span),\n+                        right_index == 0,\n+                    );\n+                }\n+            }\n+        }\n     }\n \n     fn check_fn(&mut self, cx: &EarlyContext<'_>, _: FnKind<'_>, decl: &FnDecl, _: Span, _: NodeId) {"}, {"sha": "589ae6b3d35986b43be687244cf0146cc80e15fe", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 313] = [\n+pub const ALL_LINTS: [Lint; 314] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1974,6 +1974,13 @@ pub const ALL_LINTS: [Lint; 313] = [\n         deprecation: None,\n         module: \"misc_early\",\n     },\n+    Lint {\n+        name: \"unneeded_wildcard_pattern\",\n+        group: \"complexity\",\n+        desc: \"tuple patterns with a wildcard pattern (`_`) is next to a rest pattern (`..`) pattern\",\n+        deprecation: None,\n+        module: \"misc_early\",\n+    },\n     Lint {\n         name: \"unreadable_literal\",\n         group: \"style\","}, {"sha": "d0b62fa6f43554aee4649ce1f4f1f4630ccfd67a", "filename": "tests/ui/unneeded_wildcard_pattern.fixed", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.fixed?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+#![feature(stmt_expr_attributes)]\n+#![deny(clippy::unneeded_wildcard_pattern)]\n+\n+fn main() {\n+    let t = (0, 1, 2, 3);\n+\n+    if let (0, ..) = t {};\n+    if let (0, ..) = t {};\n+    if let (0, ..) = t {};\n+    if let (0, ..) = t {};\n+    if let (_, 0, ..) = t {};\n+    if let (.., 0, _) = t {};\n+    if let (0, _, _, _) = t {};\n+    if let (0, ..) = t {};\n+    if let (.., 0) = t {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let (0, ..,) = t {};\n+    }\n+\n+    struct S(usize, usize, usize, usize);\n+\n+    let s = S(0, 1, 2, 3);\n+\n+    if let S(0, ..) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(_, 0, ..) = s {};\n+    if let S(.., 0, _) = s {};\n+    if let S(0, _, _, _) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(.., 0) = s {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let S(0, ..,) = s {};\n+    }\n+}"}, {"sha": "bad158907ba97bac33153a1c7345225109324dee", "filename": "tests/ui/unneeded_wildcard_pattern.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.rs?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -0,0 +1,41 @@\n+// run-rustfix\n+#![feature(stmt_expr_attributes)]\n+#![deny(clippy::unneeded_wildcard_pattern)]\n+\n+fn main() {\n+    let t = (0, 1, 2, 3);\n+\n+    if let (0, .., _) = t {};\n+    if let (0, _, ..) = t {};\n+    if let (0, _, _, ..) = t {};\n+    if let (0, .., _, _) = t {};\n+    if let (_, 0, ..) = t {};\n+    if let (.., 0, _) = t {};\n+    if let (0, _, _, _) = t {};\n+    if let (0, ..) = t {};\n+    if let (.., 0) = t {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let (0, .., _, _,) = t {};\n+    }\n+\n+    struct S(usize, usize, usize, usize);\n+\n+    let s = S(0, 1, 2, 3);\n+\n+    if let S(0, .., _) = s {};\n+    if let S(0, _, ..) = s {};\n+    if let S(0, _, _, ..) = s {};\n+    if let S(0, .., _, _) = s {};\n+    if let S(_, 0, ..) = s {};\n+    if let S(.., 0, _) = s {};\n+    if let S(0, _, _, _) = s {};\n+    if let S(0, ..) = s {};\n+    if let S(.., 0) = s {};\n+\n+    #[rustfmt::skip]\n+    {\n+        if let S(0, .., _, _,) = s {};\n+    }\n+}"}, {"sha": "8cc2516959a3da6233e5a50ad6c2e8fde2f91e25", "filename": "tests/ui/unneeded_wildcard_pattern.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4a3bc6b5923217a53441b7745b9f5542ed4245e8/tests%2Fui%2Funneeded_wildcard_pattern.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Funneeded_wildcard_pattern.stderr?ref=4a3bc6b5923217a53441b7745b9f5542ed4245e8", "patch": "@@ -0,0 +1,68 @@\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:8:18\n+   |\n+LL |     if let (0, .., _) = t {};\n+   |                  ^^^ help: remove it\n+   |\n+note: lint level defined here\n+  --> $DIR/unneeded_wildcard_pattern.rs:3:9\n+   |\n+LL | #![deny(clippy::unneeded_wildcard_pattern)]\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:9:16\n+   |\n+LL |     if let (0, _, ..) = t {};\n+   |                ^^^ help: remove it\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:10:16\n+   |\n+LL |     if let (0, _, _, ..) = t {};\n+   |                ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:11:18\n+   |\n+LL |     if let (0, .., _, _) = t {};\n+   |                  ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:20:22\n+   |\n+LL |         if let (0, .., _, _,) = t {};\n+   |                      ^^^^^^ help: remove them\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:27:19\n+   |\n+LL |     if let S(0, .., _) = s {};\n+   |                   ^^^ help: remove it\n+\n+error: this pattern is unneeded as the `..` pattern can match that element\n+  --> $DIR/unneeded_wildcard_pattern.rs:28:17\n+   |\n+LL |     if let S(0, _, ..) = s {};\n+   |                 ^^^ help: remove it\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:29:17\n+   |\n+LL |     if let S(0, _, _, ..) = s {};\n+   |                 ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:30:19\n+   |\n+LL |     if let S(0, .., _, _) = s {};\n+   |                   ^^^^^^ help: remove them\n+\n+error: these patterns are unneeded as the `..` pattern can match those elements\n+  --> $DIR/unneeded_wildcard_pattern.rs:39:23\n+   |\n+LL |         if let S(0, .., _, _,) = s {};\n+   |                       ^^^^^^ help: remove them\n+\n+error: aborting due to 10 previous errors\n+"}]}