{"sha": "bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiMjJlYWYzOWU2ZTBhOTA0YThmMTlhMmE2NTk2MjBjMTJmMDNhMjQ=", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-01-26T00:19:57Z"}, "committer": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2021-02-04T17:01:50Z"}, "message": "tidy: Run tidy style against markdown files.", "tree": {"sha": "7e9c963d51e98c865797294f265b82efe655436a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e9c963d51e98c865797294f265b82efe655436a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "html_url": "https://github.com/rust-lang/rust/commit/bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e708cbd91c9cae4426d69270248362b423324556", "url": "https://api.github.com/repos/rust-lang/rust/commits/e708cbd91c9cae4426d69270248362b423324556", "html_url": "https://github.com/rust-lang/rust/commit/e708cbd91c9cae4426d69270248362b423324556"}], "stats": {"total": 314, "additions": 176, "deletions": 138}, "files": [{"sha": "0a7da8c80639c576b44d21ab1ad2a0ff9bbc4faf", "filename": "compiler/rustc_infer/src/infer/lexical_region_resolve/README.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Flexical_region_resolve%2FREADME.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -1,4 +1,3 @@\n-\n Lexical Region Resolution was removed in https://github.com/rust-lang/rust/pull/64790.\n \n Rust now uses Non-lexical lifetimes. For more info, please see the [borrowck"}, {"sha": "70df5170b21c1a2fa370b855021ee04a4f3c7331", "filename": "src/doc/rustc/src/exploit-mitigations.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fexploit-mitigations.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -378,7 +378,7 @@ C library default allocator<sup id=\"fnref:5\" role=\"doc-noteref\"><a\n href=\"#fn:5\" class=\"footnote\">5</a></sup> since version 1.32.0\n (2019-01-17)[39].\n \n-```ignore\n+```rust,no_run\n fn main() {\n     let mut x = Box::new([0; 1024]);\n "}, {"sha": "3e616f226ed76f908ecc8d291e4afeddfcbf0f4b", "filename": "src/doc/rustc/src/lints/levels.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flevels.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -62,7 +62,7 @@ warning: unused variable: `x`\n A 'deny' lint produces an error if you violate it. For example, this code\n runs into the `exceeding_bitshifts` lint.\n \n-```rust,ignore\n+```rust,no_run\n fn main() {\n     100u8 << 10;\n }\n@@ -232,7 +232,7 @@ pub fn foo() {}\n This is the maximum level for all lints. So for example, if we take our\n code sample from the \"deny\" lint level above:\n \n-```rust,ignore\n+```rust,no_run\n fn main() {\n     100u8 << 10;\n }"}, {"sha": "97aa2caf91508a7ce156e9b6a40d8a4de052b69d", "filename": "src/doc/rustc/src/lints/listing/index.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Flints%2Flisting%2Findex.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -2,4 +2,4 @@\n \n This section lists out all of the lints, grouped by their default lint levels.\n \n-You can also see this list by running `rustc -W help`.\n\\ No newline at end of file\n+You can also see this list by running `rustc -W help`."}, {"sha": "39a05cfe20534f2e2efdafeea18b303d9e9b1adf", "filename": "src/doc/rustc/src/what-is-rustc.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fwhat-is-rustc.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -39,7 +39,7 @@ $ .\\hello.exe # on Windows\n Note that we only ever pass `rustc` the *crate root*, not every file we wish\n to compile. For example, if we had a `main.rs` that looked like this:\n \n-```rust,ignore\n+```rust,ignore (needs-multiple-files)\n mod foo;\n \n fn main() {\n@@ -49,7 +49,7 @@ fn main() {\n \n And a `foo.rs` that had this:\n \n-```rust,ignore\n+```rust,no_run\n pub fn hello() {\n     println!(\"Hello, world!\");\n }"}, {"sha": "990a6b00d18d0db52db4093a5b6e20b810c8109d", "filename": "src/doc/rustdoc/src/advanced-features.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fadvanced-features.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -47,16 +47,15 @@ all type errors and name resolution errors with function bodies. Note that this\n work for anything outside a function body: since Rustdoc documents your types, it has to\n know what those types are! For example, this code will work regardless of the platform:\n \n-<!-- `ignore` because doc-tests are run with `rustc`, not `rustdoc` -->\n-```ignore\n+```rust,ignore (platform-specific)\n pub fn f() {\n     use std::os::windows::ffi::OsStrExt;\n }\n ```\n \n but this will not, because the unknown type is part of the function signature:\n \n-```ignore\n+```rust,ignore (platform-specific)\n pub fn f() -> std::os::windows::ffi::EncodeWide<'static> {\n     unimplemented!()\n }"}, {"sha": "8e3c62281895486707dbe55f9537f52a469bc802", "filename": "src/doc/rustdoc/src/documentation-tests.md", "status": "modified", "additions": 13, "deletions": 7, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fdocumentation-tests.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -5,12 +5,13 @@ that examples within your documentation are up to date and working.\n \n The basic idea is this:\n \n-```ignore\n+```rust,no_run\n /// # Examples\n ///\n /// ```\n /// let x = 5;\n /// ```\n+# fn f() {}\n ```\n \n The triple backticks start and end code blocks. If this were in a file named `foo.rs`,\n@@ -78,12 +79,13 @@ Sometimes, you need some setup code, or other things that would distract\n from your example, but are important to make the tests work. Consider\n an example block that looks like this:\n \n-```ignore\n+```rust,no_run\n /// ```\n /// /// Some documentation.\n /// # fn foo() {} // this function will be hidden\n /// println!(\"Hello, World!\");\n /// ```\n+# fn f() {}\n ```\n \n It will render like this:\n@@ -196,12 +198,13 @@ When writing an example, it is rarely useful to include a complete error\n handling, as it would add significant amounts of boilerplate code. Instead, you\n may want the following:\n \n-```ignore\n+```rust,no_run\n /// ```\n /// use std::io;\n /// let mut input = String::new();\n /// io::stdin().read_line(&mut input)?;\n /// ```\n+# fn f() {}\n ```\n \n The problem is that `?` returns a `Result<T, E>` and test functions don't\n@@ -210,7 +213,7 @@ return anything, so this will give a mismatched types error.\n You can get around this limitation by manually adding a `main` that returns\n `Result<T, E>`, because `Result<T, E>` implements the `Termination` trait:\n \n-```ignore\n+```rust,no_run\n /// A doc test using ?\n ///\n /// ```\n@@ -222,12 +225,13 @@ You can get around this limitation by manually adding a `main` that returns\n ///     Ok(())\n /// }\n /// ```\n+# fn f() {}\n ```\n \n Together with the `# ` from the section above, you arrive at a solution that\n appears to the reader as the initial idea but works with doc tests:\n \n-```ignore\n+```rust,no_run\n /// ```\n /// use std::io;\n /// # fn main() -> io::Result<()> {\n@@ -236,18 +240,20 @@ appears to the reader as the initial idea but works with doc tests:\n /// # Ok(())\n /// # }\n /// ```\n+# fn f() {}\n ```\n \n As of version 1.34.0, one can also omit the `fn main()`, but you will have to\n disambiguate the error type:\n \n-```ignore\n+```rust,no_run\n /// ```\n /// use std::io;\n /// let mut input = String::new();\n /// io::stdin().read_line(&mut input)?;\n /// # Ok::<(), io::Error>(())\n /// ```\n+# fn f() {}\n ```\n \n This is an unfortunate consequence of the `?` operator adding an implicit\n@@ -417,7 +423,7 @@ Another possible use of `#[cfg(doctest)]` is to test doctests that are included\n without including it in your main documentation. For example, you could write this into your\n `lib.rs` to test your README as part of your doctests:\n \n-```rust,ignore\n+```rust,no_run\n #![feature(external_doc)]\n \n #[doc(include = \"../README.md\")]"}, {"sha": "0a7dedb25a1248a7f8e55e84bbe294b5dd5313d6", "filename": "src/doc/rustdoc/src/how-to-write-documentation.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fhow-to-write-documentation.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -7,7 +7,7 @@ implementation detail, or leaves readers with unanswered questions.\n \n There are a few tenets to Rust documentation that can help guide anyone through\n the process of documenting libraries so that everyone has an ample opportunity\n-to use the code.  \n+to use the code.\n \n This chapter covers not only how to write documentation but specifically\n how to write **good** documentation.  It is important to be as clear\n@@ -19,39 +19,39 @@ then it should be documented.\n \n Documenting a crate should begin with front-page documentation.  As an\n example, the [`hashbrown`] crate level documentation summarizes the role of\n-the crate, provides links to explain technical details, and explains why you \n-would want to use the crate.  \n+the crate, provides links to explain technical details, and explains why you\n+would want to use the crate.\n \n-After introducing the crate, it is important that the front-page gives \n+After introducing the crate, it is important that the front-page gives\n an example of how to use the crate in a real world setting.  Stick to the\n library's role in the example, but do so without shortcuts to benefit users who\n-may copy and paste the example to get started. \n+may copy and paste the example to get started.\n \n [`futures`] uses inline comments to explain line by line\n-the complexities of using a [`Future`], because a person's first exposure to \n+the complexities of using a [`Future`], because a person's first exposure to\n rust's [`Future`] may be this example.\n \n-The [`backtrace`] documentation walks through the whole process, explaining \n+The [`backtrace`] documentation walks through the whole process, explaining\n changes made to the `Cargo.toml` file, passing command line arguments to the\n-compiler, and shows a quick example of backtrace in the wild.  \n+compiler, and shows a quick example of backtrace in the wild.\n \n Finally, the front-page can eventually become a comprehensive reference\n how to use a crate, like [`regex`].  In this front page, all\n-requirements are outlined, the edge cases shown, and practical examples \n+requirements are outlined, the edge cases shown, and practical examples\n provided.  The front page goes on to show how to use regular expressions\n then concludes with crate features.\n \n Don't worry about comparing your crate, which is just beginning, to other more\n developed crates.  To get the documentation to something more polished, start\n-incrementally and put in an introduction, example, and features.  Rome was not \n+incrementally and put in an introduction, example, and features.  Rome was not\n built in a day!\n \n The first lines within the `lib.rs` will compose the front-page, and they\n use a different convention than the rest of the rustdocs.  Lines should\n start with `//!` which indicate module-level or crate-level documentation.\n Here's a quick example of the difference:\n \n-```rust,ignore\n+```rust,no_run\n //! Fast and easy queue abstraction.\n //!\n //! Provides an abstraction over a queue.  When the abstraction is used\n@@ -64,13 +64,13 @@ Here's a quick example of the difference:\n /// This module makes it easy.\n pub mod easy {\n \n-    /// Use the abstract function to do this specific thing.\n-    pub fn abstract() {}\n+    /// Use the abstraction function to do this specific thing.\n+    pub fn abstraction() {}\n \n }\n ```\n \n-Ideally, this first line of documentation is a sentence without highly \n+Ideally, this first line of documentation is a sentence without highly\n technical details, but with a good description of where this crate fits\n within the rust ecosystem.  Users should know whether this crate meets their use\n case after reading this line.\n@@ -95,7 +95,7 @@ It is recommended that each item's documentation follows this basic structure:\n \n This basic structure should be straightforward to follow when writing your\n documentation; while you might think that a code example is trivial,\n-the examples are really important because they can help users understand \n+the examples are really important because they can help users understand\n what an item is, how it is used, and for what purpose it exists.\n \n Let's see an example coming from the [standard library] by taking a look at the\n@@ -133,7 +133,7 @@ for argument in env::args() {\n [`args_os`]: ./fn.args_os.html\n ``````\n \n-Everything before the first empty line will be reused to describe the component \n+Everything before the first empty line will be reused to describe the component\n in searches and module overviews.  For example, the function `std::env::args()`\n above will be shown on the [`std::env`] module documentation.  It is good\n practice to keep the summary to one line: concise writing is a goal of good\n@@ -225,7 +225,7 @@ details on the exact syntax supported.\n [commonmark markdown specification]: https://commonmark.org/\n [commonmark quick reference]: https://commonmark.org/help/\n [env::args]: https://doc.rust-lang.org/stable/std/env/fn.args.html\n-[`Future`]: https://doc.rust-lang.org/std/future/trait.Future.html \n+[`Future`]: https://doc.rust-lang.org/std/future/trait.Future.html\n [`futures`]: https://docs.rs/futures/0.3.5/futures/\n [`hashbrown`]: https://docs.rs/hashbrown/0.8.2/hashbrown/\n [`regex`]: https://docs.rs/regex/1.3.9/regex/"}, {"sha": "cce3623dc8f4912f1669435bcbf780e112cb5960", "filename": "src/doc/rustdoc/src/lints.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Flints.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -3,10 +3,11 @@\n `rustdoc` provides lints to help you writing and testing your documentation. You\n can use them like any other lints by doing this:\n \n-```rust,ignore\n+```rust\n #![allow(missing_docs)] // allows the lint, no diagnostics will be reported\n #![warn(missing_docs)] // warn if there are missing docs\n #![deny(missing_docs)] // error if there are missing docs\n+# //! Crate docs.\n ```\n \n Here is the list of the lints provided by `rustdoc`:"}, {"sha": "140b832f19a54a06c056f2d7dab8e67679acd5bc", "filename": "src/doc/rustdoc/src/passes.md", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fpasses.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -32,8 +32,9 @@ Without this pass, these items will remain in the output.\n \n When you write a doc comment like this:\n \n-```rust,ignore\n+```rust,no_run\n /// This is a documentation comment.\n+# fn f() {}\n ```\n \n There's a space between the `///` and that `T`. That spacing isn't intended\n@@ -52,9 +53,10 @@ documentation string.\n \n For example:\n \n-```rust,ignore\n+```rust,no_run\n #[doc = \"This is the first line.\"]\n #[doc = \"This is the second line.\"]\n+# fn f() {}\n ```\n \n Gets collapsed into a single doc string of\n@@ -68,7 +70,7 @@ This is the second line.\n \n This removes documentation for any non-public items, so for example:\n \n-```rust,ignore\n+```rust,no_run\n /// These are private docs.\n struct Private;\n "}, {"sha": "b0e2437392c955fc6fe62670dd9ff576c2550100", "filename": "src/doc/rustdoc/src/references.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Freferences.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -3,15 +3,15 @@\n There are many great `rustdoc` references out there.\n If you know of other great resources, please submit a pull request!\n \n-## Official \n+## Official\n \n - [Learn Rust]\n - [Rust By Example]\n - [Rust Reference]\n - [RFC 1574: More API Documentation Conventions]\n - [RFC 1946: Intra Rustdoc Links]\n \n-## Community \n+## Community\n - [API Guidelines]\n - [Github tagged RFCs]\n - [Github tagged issues]\n@@ -28,4 +28,4 @@ If you know of other great resources, please submit a pull request!\n [RFC 1946: Intra Rustdoc Links]: https://rust-lang.github.io/rfcs/1946-intra-rustdoc-links.html\n [RFC (stalled) front page styleguide]: https://github.com/rust-lang/rfcs/pull/1687\n [Rust By Example]: https://doc.rust-lang.org/stable/rust-by-example/meta/doc.html\n-[Rust Reference]: https://doc.rust-lang.org/stable/reference/comments.html#doc-comments\n\\ No newline at end of file\n+[Rust Reference]: https://doc.rust-lang.org/stable/reference/comments.html#doc-comments"}, {"sha": "52f2a3728fabb5908784e76c7d79bc588dedf979", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -7,9 +7,10 @@ The most basic function of `#[doc]` is to handle the actual documentation\n text. That is, `///` is syntax sugar for `#[doc]`. This means that these two\n are the same:\n \n-```rust,ignore\n+```rust,no_run\n /// This is a doc comment.\n #[doc = \" This is a doc comment.\"]\n+# fn f() {}\n ```\n \n (Note the leading space in the attribute version.)\n@@ -18,16 +19,18 @@ In most cases, `///` is easier to use than `#[doc]`. One case where the latter i\n when generating documentation in macros; the `collapse-docs` pass will combine multiple\n `#[doc]` attributes into a single doc comment, letting you generate code like this:\n \n-```rust,ignore\n+```rust,no_run\n #[doc = \"This is\"]\n #[doc = \" a \"]\n #[doc = \"doc comment\"]\n+# fn f() {}\n ```\n \n Which can feel more flexible. Note that this would generate this:\n \n-```rust,ignore\n+```rust,no_run\n #[doc = \"This is\\n a \\ndoc comment\"]\n+# fn f() {}\n ```\n \n but given that docs are rendered via Markdown, it will remove these newlines.\n@@ -45,7 +48,7 @@ These options control how the docs look at a crate level.\n \n This form of the `doc` attribute lets you control the favicon of your docs.\n \n-```rust,ignore\n+```rust,no_run\n #![doc(html_favicon_url = \"https://example.com/favicon.ico\")]\n ```\n \n@@ -59,7 +62,7 @@ If you don't use this attribute, there will be no favicon.\n This form of the `doc` attribute lets you control the logo in the upper\n left hand side of the docs.\n \n-```rust,ignore\n+```rust,no_run\n #![doc(html_logo_url = \"https://example.com/logo.jpg\")]\n ```\n \n@@ -73,7 +76,7 @@ If you don't use this attribute, there will be no logo.\n This form of the `doc` attribute lets you control where the \"run\" buttons\n on your documentation examples make requests to.\n \n-```rust,ignore\n+```rust,no_run\n #![doc(html_playground_url = \"https://playground.example.com/\")]\n ```\n \n@@ -88,7 +91,7 @@ When a feature is unstable, an issue number for tracking the feature must be\n given. `rustdoc` uses this number, plus the base URL given here, to link to\n the tracking issue.\n \n-```rust,ignore\n+```rust,no_run\n #![doc(issue_tracker_base_url = \"https://github.com/rust-lang/rust/issues/\")]\n ```\n \n@@ -103,7 +106,7 @@ available. If that is not available, then it will use the `html_root_url`\n value in the extern crate if it is available. If that is not available, then\n the extern items will not be linked.\n \n-```rust,ignore\n+```rust,no_run\n #![doc(html_root_url = \"https://docs.rs/serde/1.0\")]\n ```\n \n@@ -112,7 +115,7 @@ the extern items will not be linked.\n By default, `rustdoc` will include the source code of your program, with links\n to it in the docs. But if you include this:\n \n-```rust,ignore\n+```rust,no_run\n #![doc(html_no_source)]\n ```\n \n@@ -123,7 +126,7 @@ it will not.\n By default, `rustdoc` will automatically add a line with `extern crate my_crate;` into each doctest.\n But if you include this:\n \n-```rust,ignore\n+```rust,no_run\n #![doc(test(no_crate_inject))]\n ```\n \n@@ -134,7 +137,7 @@ it will not.\n This form of the `doc` attribute allows you to add arbitrary attributes to all your doctests. For\n example, if you want your doctests to fail if they produce any warnings, you could add this:\n \n-```rust,ignore\n+```rust,no_run\n #![doc(test(attr(deny(warnings))))]\n ```\n \n@@ -148,47 +151,51 @@ they are documented.\n These attributes are used on `use` statements, and control where the documentation shows\n up. For example, consider this Rust code:\n \n-```rust,ignore\n+```rust,no_run\n pub use bar::Bar;\n \n /// bar docs\n pub mod bar {\n     /// the docs for Bar\n     pub struct Bar;\n }\n+# fn main() {}\n ```\n \n The documentation will generate a \"Re-exports\" section, and say `pub use bar::Bar;`, where\n `Bar` is a link to its page.\n \n If we change the `use` line like this:\n \n-```rust,ignore\n+```rust,no_run\n #[doc(inline)]\n pub use bar::Bar;\n+# pub mod bar { pub struct Bar; }\n+# fn main() {}\n ```\n \n Instead, `Bar` will appear in a `Structs` section, just like `Bar` was defined at the\n top level, rather than `pub use`'d.\n \n Let's change our original example, by making `bar` private:\n \n-```rust,ignore\n+```rust,no_run\n pub use bar::Bar;\n \n /// bar docs\n mod bar {\n     /// the docs for Bar\n     pub struct Bar;\n }\n+# fn main() {}\n ```\n \n Here, because `bar` is not public, `Bar` wouldn't have its own page, so there's nowhere\n to link to. `rustdoc` will inline these definitions, and so we end up in the same case\n as the `#[doc(inline)]` above; `Bar` is in a `Structs` section, as if it were defined at\n the top level. If we add the `no_inline` form of the attribute:\n \n-```rust,ignore\n+```rust,no_run\n #[doc(no_inline)]\n pub use bar::Bar;\n \n@@ -197,6 +204,7 @@ mod bar {\n     /// the docs for Bar\n     pub struct Bar;\n }\n+# fn main() {}\n ```\n \n Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere."}, {"sha": "7a444d77c09d18d6ae4a1cd887b93d38294820ce", "filename": "src/doc/rustdoc/src/what-is-rustdoc.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-is-rustdoc.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -32,7 +32,7 @@ $ rustdoc src/lib.rs\n This will create a new directory, `doc`, with a website inside! In our case,\n the main page is located in `doc/lib/index.html`. If you open that up in\n a web browser, you will see a page with a search bar, and \"Crate lib\" at the\n-top, with no contents. \n+top, with no contents.\n \n ## Configuring rustdoc\n \n@@ -89,18 +89,18 @@ dependency=<path>/docs/target/debug/deps\n You can see this with `cargo doc --verbose`.\n \n It generates the correct `--crate-name` for us, as well as pointing to\n-`src/lib.rs`. But what about those other arguments? \n- - `-o` controls the *o*utput of our docs. Instead of a top-level \n- `doc` directory, notice that Cargo puts generated documentation under \n+`src/lib.rs`. But what about those other arguments?\n+ - `-o` controls the *o*utput of our docs. Instead of a top-level\n+ `doc` directory, notice that Cargo puts generated documentation under\n  `target`. That is the idiomatic place for generated files in Cargo projects.\n- - `-L` flag helps rustdoc find the dependencies your code relies on. \n+ - `-L` flag helps rustdoc find the dependencies your code relies on.\n  If our project used dependencies, we would get documentation for them as well!\n \n ## Outer and inner documentation\n \n The `///` syntax is used to document the item present after it.\n That's why it is called an outer documentation.\n-There is another syntax: `//!`, which is used to document the \n+There is another syntax: `//!`, which is used to document the\n item it is present inside. It is called an inner documentation.\n It is often used when documenting the entire crate,\n because nothing comes before it: it is the root of the crate."}, {"sha": "9683f519be12108150bf78d06f6a756aaa9d63ac", "filename": "src/doc/rustdoc/src/what-to-include.md", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fwhat-to-include.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -38,10 +38,10 @@ warning: 1 warning emitted\n \n As a library author, adding the lint `#![deny(missing_docs)]` is a great way to\n ensure the project does not drift away from being documented well, and\n-`#![warn(missing_docs)]` is a good way to move towards comprehensive \n+`#![warn(missing_docs)]` is a good way to move towards comprehensive\n documentation.  In addition to docs, `#![deny(missing_doc_code_examples)]`\n ensures each function contains a usage example.  In our example above, the\n-warning is resolved by adding crate level documentation. \n+warning is resolved by adding crate level documentation.\n \n There are more lints in the upcoming chapter [Lints][rustdoc-lints].\n \n@@ -58,17 +58,17 @@ users to figure out how to put the `async` code into their own runtime.\n \n It is preferred that `unwrap()` not be used inside an example, and some of the\n error handling components be hidden if they make the example too difficult to\n-follow.  \n+follow.\n \n ``````text\n /// Example\n /// ```rust\n /// let fourtytwo = \"42\".parse::<u32>()?;\n /// println!(\"{} + 10 = {}\", fourtytwo, fourtytwo+10);\n /// ```\n-``````  \n+``````\n \n-When rustdoc wraps that in a main function, it will fail to compile because the \n+When rustdoc wraps that in a main function, it will fail to compile because the\n `ParseIntError` trait is not implemented.  In order to help both your audience\n and your test suite, this example needs some additional code:\n \n@@ -81,17 +81,17 @@ and your test suite, this example needs some additional code:\n /// #     Ok(())\n /// # }\n /// ```\n-``````  \n+``````\n \n The example is the same on the doc page, but has that extra information\n-available to anyone trying to use your crate.  More about tests in the \n-upcoming [Documentation tests] chapter.  \n+available to anyone trying to use your crate.  More about tests in the\n+upcoming [Documentation tests] chapter.\n \n ## What to Exclude\n \n Certain parts of your public interface may be included by default in the output\n of rustdoc.  The attribute `#[doc(hidden)]` can hide implementation details\n-to encourage idiomatic use of the crate.  \n+to encourage idiomatic use of the crate.\n \n For example, an internal `macro!` that makes the crate easier to implement can\n become a footgun for users when it appears in the public documentation.  An\n@@ -101,11 +101,11 @@ detailed in the [API Guidelines].\n ## Customizing the output\n \n It is possible to pass a custom css file to `rustdoc` and style the\n-documentation.  \n+documentation.\n \n ```bash\n rustdoc --extend-css custom.css src/lib.rs\n-``` \n+```\n \n A good example of using this feature to create a dark theme is documented [on\n this blog].  Just remember, dark theme is already included in the rustdoc output\n@@ -122,4 +122,4 @@ Here is an example of a new theme, [Ayu].\n [API Guidelines]: https://rust-lang.github.io/api-guidelines/documentation.html#rustdoc-does-not-show-unhelpful-implementation-details-c-hidden\n [Documentation tests]: documentation-tests.md\n [on this blog]: https://blog.guillaume-gomez.fr/articles/2016-09-16+Generating+doc+with+rustdoc+and+a+custom+theme\n-[rustdoc-lints]: lints.md\n\\ No newline at end of file\n+[rustdoc-lints]: lints.md"}, {"sha": "3c0cd32fae172de49a857845a0560f52b9754d5c", "filename": "src/doc/unstable-book/src/compiler-flags/codegen-backend.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcodegen-backend.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcodegen-backend.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcodegen-backend.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -15,7 +15,7 @@ named `__rustc_codegen_backend` with a signature of `fn() -> Box<dyn rustc_codeg\n See also the [`hotplug_codegen_backend`](https://github.com/rust-lang/rust/tree/master/src/test/run-make-fulldeps/hotplug_codegen_backend) test\n for a full example.\n \n-```rust,ignore\n+```rust,ignore (partial-example)\n use rustc_codegen_ssa::traits::CodegenBackend;\n \n struct MyBackend;"}, {"sha": "08c16d95f4670bce556395f3d8e53b5cbb4dc4ab", "filename": "src/doc/unstable-book/src/compiler-flags/control-flow-guard.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcontrol-flow-guard.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -6,7 +6,7 @@ The tracking issue for this feature is: [#68793](https://github.com/rust-lang/ru\n \n The rustc flag `-Z control-flow-guard` enables the Windows [Control Flow Guard](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard) (CFG) platform security feature.\n \n-CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported [Windows platforms (Windows 8.1 onwards)](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete. \n+CFG is an exploit mitigation designed to enforce control-flow integrity for software running on supported [Windows platforms (Windows 8.1 onwards)](https://docs.microsoft.com/en-us/windows/win32/secbp/control-flow-guard). Specifically, CFG uses runtime checks to validate the target address of every indirect call/jump before allowing the call to complete.\n \n During compilation, the compiler identifies all indirect calls/jumps and adds CFG checks. It also emits metadata containing the relative addresses of all address-taken functions. At runtime, if the binary is run on a CFG-aware operating system, the loader uses the CFG metadata to generate a bitmap of the address space and marks those addresses that contain valid targets. On each indirect call, the inserted check determines whether the target address is marked in this bitmap. If the target is not valid, the process is terminated.\n \n@@ -35,7 +35,7 @@ The rustc flag `-Z control-flow-guard=nochecks` instructs LLVM to emit the list\n \n ## Control Flow Guard in libraries\n \n-It is strongly recommended to also enable CFG checks for all linked libraries, including the standard library. \n+It is strongly recommended to also enable CFG checks for all linked libraries, including the standard library.\n \n To enable CFG in the standard library, use the [cargo `-Z build-std` functionality][build-std] to recompile the standard library with the same configuration options as the main program.\n "}, {"sha": "71303bfaff20df96b956755ecba4d528d7fcb6f9", "filename": "src/doc/unstable-book/src/compiler-flags/profile.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fprofile.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -22,6 +22,6 @@ Once you've built and run your program, files with the `gcno` (after build) and\n You can parse them with [llvm-cov gcov](https://llvm.org/docs/CommandGuide/llvm-cov.html#llvm-cov-gcov) or [grcov](https://github.com/mozilla/grcov).\n \n Please note that `RUSTFLAGS` by default applies to everything that cargo builds and runs during a build!\n-When the `--target` flag is explicitly passed to cargo, the `RUSTFLAGS` no longer apply to build scripts and procedural macros. \n-For more fine-grained control consider passing a `RUSTC_WRAPPER` program to cargo that only adds the profiling flags to \n+When the `--target` flag is explicitly passed to cargo, the `RUSTFLAGS` no longer apply to build scripts and procedural macros.\n+For more fine-grained control consider passing a `RUSTC_WRAPPER` program to cargo that only adds the profiling flags to\n rustc for the specific crates you want to profile."}, {"sha": "ac0093f77aec22c57ae92a3b34c54293e67077ab", "filename": "src/doc/unstable-book/src/compiler-flags/report-time.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Freport-time.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -34,7 +34,7 @@ Available options:\n                 Expected format of environment variable is\n                 `VARIABLE=WARN_TIME,CRITICAL_TIME`.\n                 Not available for --format=terse\n---ensure-time \n+--ensure-time\n                 Treat excess of the test execution time limit as\n                 error.\n                 Threshold values for this option can be configured via"}, {"sha": "8b19e785c6a5bbbf31b5671aa14f41a209e0f3c2", "filename": "src/doc/unstable-book/src/compiler-flags/tls-model.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftls-model.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -11,7 +11,7 @@ Supported values for this option are:\n \n - `global-dynamic` - General Dynamic TLS Model (alternatively called Global Dynamic) is the most\n general option usable in all circumstances, even if the TLS data is defined in a shared library\n-loaded at runtime and is accessed from code outside of that library.  \n+loaded at runtime and is accessed from code outside of that library.\n This is the default for most targets.\n - `local-dynamic` - model usable if the TLS data is only accessed from the shared library or\n executable it is defined in. The TLS data may be in a library loaded after startup (via `dlopen`)."}, {"sha": "f967c11fc4d0895e637e36041bc0271dc3ce7b06", "filename": "src/doc/unstable-book/src/language-features/auto-traits.md", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fauto-traits.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -1,6 +1,6 @@\n # `auto_traits`\n \n-The tracking issue for this feature is [#13231] \n+The tracking issue for this feature is [#13231]\n \n [#13231]: https://github.com/rust-lang/rust/issues/13231\n \n@@ -9,15 +9,15 @@ The tracking issue for this feature is [#13231]\n The `auto_traits` feature gate allows you to define auto traits.\n \n Auto traits, like [`Send`] or [`Sync`] in the standard library, are marker traits\n-that are automatically implemented for every type, unless the type, or a type it contains, \n+that are automatically implemented for every type, unless the type, or a type it contains,\n has explicitly opted out via a negative impl. (Negative impls are separately controlled\n by the `negative_impls` feature.)\n \n [`Send`]: https://doc.rust-lang.org/std/marker/trait.Send.html\n [`Sync`]: https://doc.rust-lang.org/std/marker/trait.Sync.html\n \n-```rust,ignore\n-impl !Trait for Type\n+```rust,ignore (partial-example)\n+impl !Trait for Type {}\n ```\n \n Example:\n@@ -40,7 +40,7 @@ fn must_be_valid<T: Valid>(_t: T) { }\n fn main() {\n     // works\n     must_be_valid( MaybeValid(True) );\n-                \n+\n     // compiler error - trait bound not satisfied\n     // must_be_valid( MaybeValid(False) );\n }\n@@ -80,7 +80,7 @@ where\n \n Explicit impls may be either positive or negative. They take the form:\n \n-```rust,ignore\n+```rust,ignore (partial-example)\n impl<...> AutoTrait for StructName<..> { }\n impl<...> !AutoTrait for StructName<..> { }\n ```\n@@ -104,4 +104,3 @@ Auto traits cannot have any trait items, such as methods or associated types. Th\n ## Supertraits\n \n Auto traits cannot have supertraits. This is for soundness reasons, as the interaction of coinduction with implied bounds is difficult to reconcile.\n-"}, {"sha": "53ecac9314d79fa7b9dcc1551d22ed6119b2cbc2", "filename": "src/doc/unstable-book/src/language-features/custom-test-frameworks.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-test-frameworks.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-test-frameworks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcustom-test-frameworks.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -30,4 +30,3 @@ const WILL_PASS: i32 = 0;\n #[test_case]\n const WILL_FAIL: i32 = 4;\n ```\n-"}, {"sha": "5f3f1b4dd8a3189a451776ab4e024d86cd553e68", "filename": "src/doc/unstable-book/src/language-features/infer-static-outlives-requirements.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Finfer-static-outlives-requirements.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -42,4 +42,3 @@ struct Bar<T: 'static> {\n     x: T,\n }\n ```\n-"}, {"sha": "a0fb4e743d3f29f84cabdf135b1fa2df36174416", "filename": "src/doc/unstable-book/src/language-features/intrinsics.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fintrinsics.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -27,4 +27,3 @@ extern \"rust-intrinsic\" {\n ```\n \n As with any other FFI functions, these are always `unsafe` to call.\n-"}, {"sha": "d44c841d48c66bc5aa815a21800908dec56ea3db", "filename": "src/doc/unstable-book/src/language-features/lang-items.md", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Flang-items.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -15,8 +15,8 @@ For example, `Box` pointers require two lang items, one for allocation\n and one for deallocation. A freestanding program that uses the `Box`\n sugar for dynamic allocations via `malloc` and `free`:\n \n-```rust,ignore\n-#![feature(lang_items, box_syntax, start, libc, core_intrinsics)]\n+```rust,ignore (libc-is-finicky)\n+#![feature(lang_items, box_syntax, start, libc, core_intrinsics, rustc_private)]\n #![no_std]\n use core::intrinsics;\n use core::panic::PanicInfo;\n@@ -105,8 +105,8 @@ or overriding the default shim for the C `main` function with your own.\n The function marked `#[start]` is passed the command line parameters\n in the same format as C:\n \n-```rust,ignore\n-#![feature(lang_items, core_intrinsics)]\n+```rust,ignore (libc-is-finicky)\n+#![feature(lang_items, core_intrinsics, rustc_private)]\n #![feature(start)]\n #![no_std]\n use core::intrinsics;\n@@ -141,8 +141,8 @@ with `#![no_main]` and then create the appropriate symbol with the\n correct ABI and the correct name, which requires overriding the\n compiler's name mangling too:\n \n-```rust,ignore\n-#![feature(lang_items, core_intrinsics)]\n+```rust,ignore (libc-is-finicky)\n+#![feature(lang_items, core_intrinsics, rustc_private)]\n #![feature(start)]\n #![no_std]\n #![no_main]"}, {"sha": "847f25ecab132e7603d110d1aacec26c5eb3e97d", "filename": "src/doc/unstable-book/src/language-features/non-ascii-idents.md", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fnon-ascii-idents.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -19,10 +19,10 @@ const \u03a0: f64 = 3.14f64;\n \n ## Changes to the language reference\n \n-> **<sup>Lexer:<sup>**  \n-> IDENTIFIER :  \n-> &nbsp;&nbsp; &nbsp;&nbsp; XID_start XID_continue<sup>\\*</sup>  \n-> &nbsp;&nbsp; | `_` XID_continue<sup>+</sup>  \n+> **<sup>Lexer:<sup>**\\\n+> IDENTIFIER :\\\n+> &nbsp;&nbsp; &nbsp;&nbsp; XID_start XID_continue<sup>\\*</sup>\\\n+> &nbsp;&nbsp; | `_` XID_continue<sup>+</sup>\n \n An identifier is any nonempty Unicode string of the following form:\n "}, {"sha": "55c31add26d774f87dfec49785fcc5c10314eabd", "filename": "src/doc/unstable-book/src/language-features/or-patterns.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2For-patterns.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -11,7 +11,7 @@ a pattern, for example, `Some(A(0) | B(1 | 2))` becomes a valid pattern.\n \n ## Examples\n \n-```rust,ignore\n+```rust,no_run\n #![feature(or_patterns)]\n \n pub enum Foo {"}, {"sha": "44308bdfba6c325b964afaaed8afeac12045557a", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -38,7 +38,7 @@ additional checks for code style, safety, etc. Now let's write a plugin\n [`lint-plugin-test.rs`](https://github.com/rust-lang/rust/blob/master/src/test/ui-fulldeps/auxiliary/lint-plugin-test.rs)\n that warns about any item named `lintme`.\n \n-```rust,ignore\n+```rust,ignore (requires-stage-2)\n #![feature(plugin_registrar)]\n #![feature(box_syntax, rustc_private)]\n \n@@ -77,7 +77,7 @@ pub fn plugin_registrar(reg: &mut Registry) {\n \n Then code like\n \n-```rust,ignore\n+```rust,ignore (requires-plugin)\n #![feature(plugin)]\n #![plugin(lint_plugin_test)]\n "}, {"sha": "c67b806f06af4ae8cd7934af6739714430d48842", "filename": "src/doc/unstable-book/src/language-features/rustc-attrs.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Frustc-attrs.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -18,7 +18,7 @@ Options provided by `#[rustc_layout(...)]` are `debug`, `size`, `align`,\n \n ## Examples\n \n-```rust,ignore\n+```rust,compile_fail\n #![feature(rustc_attrs)]\n \n #[rustc_layout(abi, size)]"}, {"sha": "e4113d72d0914823d1835a8d2a6e8d38d43c11c7", "filename": "src/doc/unstable-book/src/language-features/unboxed-closures.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funboxed-closures.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -9,7 +9,7 @@ See Also: [`fn_traits`](../library-features/fn-traits.md)\n ----\n \n The `unboxed_closures` feature allows you to write functions using the `\"rust-call\"` ABI,\n-required for implementing the [`Fn*`] family of traits. `\"rust-call\"` functions must have \n+required for implementing the [`Fn*`] family of traits. `\"rust-call\"` functions must have\n exactly one (non self) argument, a tuple representing the argument list.\n \n [`Fn*`]: https://doc.rust-lang.org/std/ops/trait.Fn.html"}, {"sha": "d5b01a3d6168e52be8b395935886bf01aa4c74e8", "filename": "src/doc/unstable-book/src/language-features/unsized-locals.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-locals.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -30,7 +30,7 @@ fn foo(_: dyn Any) {}\n \n The RFC still forbids the following unsized expressions:\n \n-```rust,ignore\n+```rust,compile_fail\n #![feature(unsized_locals)]\n \n use std::any::Any;\n@@ -124,7 +124,7 @@ One of the objectives of this feature is to allow `Box<dyn FnOnce>`.\n \n The RFC also describes an extension to the array literal syntax: `[e; dyn n]`. In the syntax, `n` isn't necessarily a constant expression. The array is dynamically allocated on the stack and has the type of `[T]`, instead of `[T; n]`.\n \n-```rust,ignore\n+```rust,ignore (not-yet-implemented)\n #![feature(unsized_locals)]\n \n fn mergesort<T: Ord>(a: &mut [T]) {"}, {"sha": "310c8d962948a9e8da8fb34145b2d8fed89f5529", "filename": "src/doc/unstable-book/src/language-features/unsized-tuple-coercion.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Funsized-tuple-coercion.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -8,7 +8,7 @@ The tracking issue for this feature is: [#42877]\n \n This is a part of [RFC0401]. According to the RFC, there should be an implementation like this:\n \n-```rust,ignore\n+```rust,ignore (partial-example)\n impl<..., T, U: ?Sized> Unsized<(..., U)> for (..., T) where T: Unsized<U> {}\n ```\n "}, {"sha": "c0e23b834d150f7a16898b98b81de05d10dd59db", "filename": "src/doc/unstable-book/src/library-features/asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fasm.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -405,7 +405,7 @@ When required, options are specified as the final argument.\n \n The following ABNF specifies the general syntax:\n \n-```ignore\n+```text\n dir_spec := \"in\" / \"out\" / \"lateout\" / \"inout\" / \"inlateout\"\n reg_spec := <register class> / \"<explicit register>\"\n operand_expr := expr / \"_\" / expr \"=>\" expr / expr \"=>\" \"_\""}, {"sha": "73f6cfa21787e1284f5c084f75d54dd5dc9764f7", "filename": "src/doc/unstable-book/src/library-features/concat-idents.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fconcat-idents.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -19,4 +19,4 @@ fn main() {\n     let f = concat_idents!(foo, bar);\n     assert_eq!(f(), 23);\n }\n-```\n\\ No newline at end of file\n+```"}, {"sha": "c5ff68ec7d39a98f4012338e3e24dc8d16862758", "filename": "src/doc/unstable-book/src/library-features/global-asm.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fglobal-asm.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -24,15 +24,15 @@ conventions of the assembler in your toolchain.\n \n A simple usage looks like this:\n \n-```rust,ignore\n+```rust,ignore (requires-external-file)\n # #![feature(global_asm)]\n-# you also need relevant target_arch cfgs\n+# // you also need relevant target_arch cfgs\n global_asm!(include_str!(\"something_neato.s\"));\n ```\n \n And a more complicated usage looks like this:\n \n-```rust,ignore\n+```rust,no_run\n # #![feature(global_asm)]\n # #![cfg(any(target_arch = \"x86\", target_arch = \"x86_64\"))]\n "}, {"sha": "07fc16261d82048798223d6ddfe23eacb115a3fd", "filename": "src/doc/unstable-book/src/library-features/llvm-asm.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fllvm-asm.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -10,7 +10,7 @@ For extremely low-level manipulations and performance reasons, one\n might wish to control the CPU directly. Rust supports using inline\n assembly to do this via the `llvm_asm!` macro.\n \n-```rust,ignore\n+```rust,ignore (pseudo-code)\n llvm_asm!(assembly template\n    : output operands\n    : input operands"}, {"sha": "c99584e5fb39777d7b20108a4872fa07faae3fb6", "filename": "src/doc/unstable-book/src/library-features/test.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftest.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftest.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftest.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -9,7 +9,7 @@ most widely used part of the `test` crate are benchmark tests, which can test\n the performance of your code.  Let's make our `src/lib.rs` look like this\n (comments elided):\n \n-```rust,ignore\n+```rust,no_run\n #![feature(test)]\n \n extern crate test;\n@@ -83,7 +83,7 @@ the benchmark is no longer benchmarking what one expects. For example, the\n compiler might recognize that some calculation has no external effects and\n remove it entirely.\n \n-```rust,ignore\n+```rust,no_run\n #![feature(test)]\n \n extern crate test;"}, {"sha": "022640067bd11ed286ecabea3abecb4348fc41f7", "filename": "src/doc/unstable-book/src/library-features/try-trait.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Ftry-trait.md?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -16,7 +16,7 @@ macro on `Poll`, among other things.\n \n Here's an example implementation of the trait:\n \n-```rust,ignore\n+```rust,ignore (cannot-reimpl-Try)\n /// A distinct type to represent the `None` value of an `Option`.\n ///\n /// This enables using the `?` operator on `Option`; it's rarely useful alone."}, {"sha": "9f68c55ec975c1f4ded226b469c074993cd20c76", "filename": "src/tools/tidy/src/style.rs", "status": "modified", "additions": 47, "deletions": 20, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb22eaf39e6e0a904a8f19a2a659620c12f03a24/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Ftidy%2Fsrc%2Fstyle.rs?ref=bb22eaf39e6e0a904a8f19a2a659620c12f03a24", "patch": "@@ -18,6 +18,8 @@\n \n use std::path::Path;\n \n+/// Error code markdown is restricted to 80 columns because they can be\n+/// displayed on the console with --example.\n const ERROR_CODE_COLS: usize = 80;\n const COLS: usize = 100;\n \n@@ -55,9 +57,9 @@ enum LIUState {\n /// Lines of this form are allowed to be overlength, because Markdown\n /// offers no way to split a line in the middle of a URL, and the lengths\n /// of URLs to external references are beyond our control.\n-fn line_is_url(columns: usize, line: &str) -> bool {\n-    // more basic check for error_codes.rs, to avoid complexity in implementing two state machines\n-    if columns == ERROR_CODE_COLS {\n+fn line_is_url(is_error_code: bool, columns: usize, line: &str) -> bool {\n+    // more basic check for markdown, to avoid complexity in implementing two state machines\n+    if is_error_code {\n         return line.starts_with('[') && line.contains(\"]:\") && line.contains(\"http\");\n     }\n \n@@ -93,8 +95,13 @@ fn line_is_url(columns: usize, line: &str) -> bool {\n /// Returns `true` if `line` is allowed to be longer than the normal limit.\n /// Currently there is only one exception, for long URLs, but more\n /// may be added in the future.\n-fn long_line_is_ok(max_columns: usize, line: &str) -> bool {\n-    if line_is_url(max_columns, line) {\n+fn long_line_is_ok(extension: &str, is_error_code: bool, max_columns: usize, line: &str) -> bool {\n+    if extension != \"md\" || is_error_code {\n+        if line_is_url(is_error_code, max_columns, line) {\n+            return true;\n+        }\n+    } else if extension == \"md\" {\n+        // non-error code markdown is allowed to be any length\n         return true;\n     }\n \n@@ -158,8 +165,36 @@ pub fn is_in(full_path: &Path, parent_folder_to_find: &str, folder_to_find: &str\n     }\n }\n \n+fn skip_markdown_path(path: &Path) -> bool {\n+    // These aren't ready for tidy.\n+    const SKIP_MD: &[&str] = &[\n+        \"src/doc/edition-guide\",\n+        \"src/doc/embedded-book\",\n+        \"src/doc/nomicon\",\n+        \"src/doc/reference\",\n+        \"src/doc/rust-by-example\",\n+        \"src/doc/rustc-dev-guide\",\n+    ];\n+    SKIP_MD.iter().any(|p| path.ends_with(p))\n+}\n+\n+fn is_unexplained_ignore(extension: &str, line: &str) -> bool {\n+    if !line.ends_with(\"```ignore\") && !line.ends_with(\"```rust,ignore\") {\n+        return false;\n+    }\n+    if extension == \"md\" && line.trim().starts_with(\"//\") {\n+        // Markdown examples may include doc comments with ignore inside a\n+        // code block.\n+        return false;\n+    }\n+    true\n+}\n+\n pub fn check(path: &Path, bad: &mut bool) {\n-    super::walk(path, &mut super::filter_dirs, &mut |entry, contents| {\n+    fn skip(path: &Path) -> bool {\n+        super::filter_dirs(path) || skip_markdown_path(path)\n+    }\n+    super::walk(path, &mut skip, &mut |entry, contents| {\n         let file = entry.path();\n         let filename = file.file_name().unwrap().to_string_lossy();\n         let extensions = [\".rs\", \".py\", \".js\", \".sh\", \".c\", \".cpp\", \".h\", \".md\", \".css\"];\n@@ -176,13 +211,6 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     a.ends_with(\"src/doc/book\")\n             });\n \n-        if filename.ends_with(\".md\")\n-            && file.parent().unwrap().file_name().unwrap().to_string_lossy() != \"error_codes\"\n-        {\n-            // We don't want to check all \".md\" files (almost of of them aren't compliant\n-            // currently), just the long error code explanation ones.\n-            return;\n-        }\n         if is_style_file && !is_in(file, \"src\", \"librustdoc\") {\n             // We only check CSS files in rustdoc.\n             return;\n@@ -192,11 +220,10 @@ pub fn check(path: &Path, bad: &mut bool) {\n             tidy_error!(bad, \"{}: empty file\", file.display());\n         }\n \n-        let max_columns = if filename == \"error_codes.rs\" || filename.ends_with(\".md\") {\n-            ERROR_CODE_COLS\n-        } else {\n-            COLS\n-        };\n+        let extension = file.extension().unwrap().to_string_lossy();\n+        let is_error_code = extension == \"md\" && is_in(file, \"src\", \"error_codes\");\n+\n+        let max_columns = if is_error_code { ERROR_CODE_COLS } else { COLS };\n \n         let can_contain = contents.contains(\"// ignore-tidy-\")\n             || contents.contains(\"# ignore-tidy-\")\n@@ -227,7 +254,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n             };\n             if !under_rustfmt\n                 && line.chars().count() > max_columns\n-                && !long_line_is_ok(max_columns, line)\n+                && !long_line_is_ok(&extension, is_error_code, max_columns, line)\n             {\n                 suppressible_tidy_err!(\n                     err,\n@@ -280,7 +307,7 @@ pub fn check(path: &Path, bad: &mut bool) {\n                     \"copyright notices attributed to the Rust Project Developers are deprecated\"\n                 );\n             }\n-            if line.ends_with(\"```ignore\") || line.ends_with(\"```rust,ignore\") {\n+            if is_unexplained_ignore(&extension, line) {\n                 err(UNEXPLAINED_IGNORE_DOCTEST_INFO);\n             }\n             if filename.ends_with(\".cpp\") && line.contains(\"llvm_unreachable\") {"}]}