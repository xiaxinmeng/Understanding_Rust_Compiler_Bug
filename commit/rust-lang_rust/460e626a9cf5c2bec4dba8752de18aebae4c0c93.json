{"sha": "460e626a9cf5c2bec4dba8752de18aebae4c0c93", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ2MGU2MjZhOWNmNWMyYmVjNGRiYTg3NTJkZTE4YWViYWU0YzBjOTM=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-28T09:48:58Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-28T09:48:58Z"}, "message": "Rollup merge of #61230 - matklad:ub-comment, r=RalfJung\n\navoid creating Boxes of uninitalized values in RawVec\n\n`RawVec<bool>::into_box` is definitely instant UB, if not all values are initialized.\n\nSee https://gankro.github.io/blah/initialize-me-maybe/", "tree": {"sha": "63e66d375893b3bfde1e68ab0ae591d6d0773401", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63e66d375893b3bfde1e68ab0ae591d6d0773401"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/460e626a9cf5c2bec4dba8752de18aebae4c0c93", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJc7QQKCRBK7hj4Ov3rIwAAdHIIAIyLPgiA8ealS3bb+ZBE9vKD\nC35xppbhI3Aoc79ZxEK2gg7UjVsqn+JkGJik5Xs9L9YTbCaG44NEmc59rklGlrUq\nDZFZg8yECbpZMrgv8OXhD4yLysmBYvYcZ3Kp927RqY9QjPrwDOqOEO2vNHEKkBd+\nvNQzCfv5ohPG4w4B4xEx/x0tPaklVPl5B5czam4oQiR+a/xBYJRWSvV8KzuoUsH6\nzIt8h+KP7x5Yhy+9SAFGfw3nmLwYH+jp1lmud3E6mLgDpJfg3M37M6S84LBDhZcb\nF8NGqpA3B7vIvnhh+G+cWKiTrZFJepwGNNqqcspJTkTg/482Gah8lKnszjOC0uo=\n=l0XZ\n-----END PGP SIGNATURE-----\n", "payload": "tree 63e66d375893b3bfde1e68ab0ae591d6d0773401\nparent c48835ba190f04bee41ca7c901adc9a23077e787\nparent fe31ad38cb5c6fba5be871ab63082d7cdf430374\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1559036938 +0200\ncommitter GitHub <noreply@github.com> 1559036938 +0200\n\nRollup merge of #61230 - matklad:ub-comment, r=RalfJung\n\navoid creating Boxes of uninitalized values in RawVec\n\n`RawVec<bool>::into_box` is definitely instant UB, if not all values are initialized.\n\nSee https://gankro.github.io/blah/initialize-me-maybe/\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/460e626a9cf5c2bec4dba8752de18aebae4c0c93", "html_url": "https://github.com/rust-lang/rust/commit/460e626a9cf5c2bec4dba8752de18aebae4c0c93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/460e626a9cf5c2bec4dba8752de18aebae4c0c93/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c48835ba190f04bee41ca7c901adc9a23077e787", "url": "https://api.github.com/repos/rust-lang/rust/commits/c48835ba190f04bee41ca7c901adc9a23077e787", "html_url": "https://github.com/rust-lang/rust/commit/c48835ba190f04bee41ca7c901adc9a23077e787"}, {"sha": "fe31ad38cb5c6fba5be871ab63082d7cdf430374", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe31ad38cb5c6fba5be871ab63082d7cdf430374", "html_url": "https://github.com/rust-lang/rust/commit/fe31ad38cb5c6fba5be871ab63082d7cdf430374"}], "stats": {"total": 26, "additions": 15, "deletions": 11}, "files": [{"sha": "76b660fba685ce6b9716e6194f248e628a509497", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 9, "deletions": 7, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/460e626a9cf5c2bec4dba8752de18aebae4c0c93/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e626a9cf5c2bec4dba8752de18aebae4c0c93/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=460e626a9cf5c2bec4dba8752de18aebae4c0c93", "patch": "@@ -395,11 +395,10 @@ impl<T: Clone> Clone for Box<T> {\n #[stable(feature = \"box_slice_clone\", since = \"1.3.0\")]\n impl Clone for Box<str> {\n     fn clone(&self) -> Self {\n-        let len = self.len();\n-        let buf = RawVec::with_capacity(len);\n+        // this makes a copy of the data\n+        let buf: Box<[u8]> = self.as_bytes().into();\n         unsafe {\n-            ptr::copy_nonoverlapping(self.as_ptr(), buf.ptr(), len);\n-            from_boxed_utf8_unchecked(buf.into_box())\n+            from_boxed_utf8_unchecked(buf)\n         }\n     }\n }\n@@ -546,9 +545,12 @@ impl<T: Copy> From<&[T]> for Box<[T]> {\n     /// println!(\"{:?}\", boxed_slice);\n     /// ```\n     fn from(slice: &[T]) -> Box<[T]> {\n-        let mut boxed = unsafe { RawVec::with_capacity(slice.len()).into_box() };\n-        boxed.copy_from_slice(slice);\n-        boxed\n+        let len = slice.len();\n+        let buf = RawVec::with_capacity(len);\n+        unsafe {\n+            ptr::copy_nonoverlapping(slice.as_ptr(), buf.ptr(), len);\n+            buf.into_box()\n+        }\n     }\n }\n "}, {"sha": "0454a564435790e56e3eed2a621bf5499a9d0724", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/460e626a9cf5c2bec4dba8752de18aebae4c0c93/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/460e626a9cf5c2bec4dba8752de18aebae4c0c93/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=460e626a9cf5c2bec4dba8752de18aebae4c0c93", "patch": "@@ -685,12 +685,14 @@ impl<T, A: Alloc> RawVec<T, A> {\n impl<T> RawVec<T, Global> {\n     /// Converts the entire buffer into `Box<[T]>`.\n     ///\n-    /// While it is not *strictly* Undefined Behavior to call\n-    /// this procedure while some of the RawVec is uninitialized,\n-    /// it certainly makes it trivial to trigger it.\n-    ///\n     /// Note that this will correctly reconstitute any `cap` changes\n     /// that may have been performed. (see description of type for details)\n+    ///\n+    /// # Undefined Behavior\n+    ///\n+    /// All elements of `RawVec<T, Global>` must be initialized. Notice that\n+    /// the rules around uninitialized boxed values are not finalized yet,\n+    /// but until they are, it is advisable to avoid them.\n     pub unsafe fn into_box(self) -> Box<[T]> {\n         // NOTE: not calling `cap()` here, actually using the real `cap` field!\n         let slice = slice::from_raw_parts_mut(self.ptr(), self.cap);"}]}