{"sha": "deec6a96d428d20250bfad2317c00fc67e4b70f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZWM2YTk2ZDQyOGQyMDI1MGJmYWQyMzE3YzAwZmM2N2U0YjcwZjA=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-02-05T11:25:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-02-05T11:25:50Z"}, "message": "Rollup merge of #79554 - b-naber:generic-associated-types-in-trait-paths, r=jackh726\n\nGeneric associated types in trait paths\n\nThis is the second part of https://github.com/rust-lang/rust/pull/78978\n\nThis should fix:\n\nFixes #67510\nFixes #68648\nFixes #68649\nFixes #68650\nFixes #68652\nFixes #74684\nFixes #76535\nFixes #79422\nFixes #80433\n\nand implement the remaining functionality needed for https://github.com/rust-lang/rust/issues/44265\n\nr? ``@matthewjasper``", "tree": {"sha": "ddccb276fd47d1190b34019bd505e5f9bcc2ecaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ddccb276fd47d1190b34019bd505e5f9bcc2ecaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/deec6a96d428d20250bfad2317c00fc67e4b70f0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgHSs/CRBK7hj4Ov3rIwAAdHIIAAuP/29ZMkG11vdncVocPOfI\nkEWItyxLwfG0YiGkh6NrjDDP6II83EnaOjik7/2yzcl0Ll1HFyhKlmijgT/aZbuX\nLkikx/+o1LF0z5O6X8kx9Km61r/WCcSH7/4o0m/EhhBwPcWVDj2rjVcUoyGl17UN\nby3OGTSpkZsD4BYpZc0YK4BviaHtWUQVmCD8inxMcYeQ5ZJ63U6q0T872DEaEKUP\nlT2bi2IlGwgE83OUjqugieAvj+DC3qdv1Rz44Fzx0szNalLGigClBNNUkO02AJFO\nYGBPvr/dgXSqWz7lMI4va06F3eX6CFe9UYyRgErzaJtOHLrlbZUR/zK3uL0k+8E=\n=6fyk\n-----END PGP SIGNATURE-----\n", "payload": "tree ddccb276fd47d1190b34019bd505e5f9bcc2ecaf\nparent 9e5d58fb420a487ae30f38141eccdc8d79fb8d58\nparent 12d411febb37d4ddfd423415554714265609cb72\nauthor Mara Bos <m-ou.se@m-ou.se> 1612524350 +0100\ncommitter GitHub <noreply@github.com> 1612524350 +0100\n\nRollup merge of #79554 - b-naber:generic-associated-types-in-trait-paths, r=jackh726\n\nGeneric associated types in trait paths\n\nThis is the second part of https://github.com/rust-lang/rust/pull/78978\n\nThis should fix:\n\nFixes #67510\nFixes #68648\nFixes #68649\nFixes #68650\nFixes #68652\nFixes #74684\nFixes #76535\nFixes #79422\nFixes #80433\n\nand implement the remaining functionality needed for https://github.com/rust-lang/rust/issues/44265\n\nr? ``@matthewjasper``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/deec6a96d428d20250bfad2317c00fc67e4b70f0", "html_url": "https://github.com/rust-lang/rust/commit/deec6a96d428d20250bfad2317c00fc67e4b70f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/deec6a96d428d20250bfad2317c00fc67e4b70f0/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "html_url": "https://github.com/rust-lang/rust/commit/9e5d58fb420a487ae30f38141eccdc8d79fb8d58"}, {"sha": "12d411febb37d4ddfd423415554714265609cb72", "url": "https://api.github.com/repos/rust-lang/rust/commits/12d411febb37d4ddfd423415554714265609cb72", "html_url": "https://github.com/rust-lang/rust/commit/12d411febb37d4ddfd423415554714265609cb72"}], "stats": {"total": 1163, "additions": 1051, "deletions": 112}, "files": [{"sha": "f076dca5cf5f178d06f835d53681b9b7489e654d", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 32, "deletions": 7, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -1076,16 +1076,40 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     fn lower_assoc_ty_constraint(\n         &mut self,\n         constraint: &AssocTyConstraint,\n-        itctx: ImplTraitContext<'_, 'hir>,\n+        mut itctx: ImplTraitContext<'_, 'hir>,\n     ) -> hir::TypeBinding<'hir> {\n         debug!(\"lower_assoc_ty_constraint(constraint={:?}, itctx={:?})\", constraint, itctx);\n \n-        if let Some(ref gen_args) = constraint.gen_args {\n-            self.sess.span_fatal(\n-                gen_args.span(),\n-                \"generic associated types in trait paths are currently not implemented\",\n-            );\n-        }\n+        // lower generic arguments of identifier in constraint\n+        let gen_args = if let Some(ref gen_args) = constraint.gen_args {\n+            let gen_args_ctor = match gen_args {\n+                GenericArgs::AngleBracketed(ref data) => {\n+                    self.lower_angle_bracketed_parameter_data(\n+                        data,\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+                GenericArgs::Parenthesized(ref data) => {\n+                    let mut err = self.sess.struct_span_err(\n+                        gen_args.span(),\n+                        \"parenthesized generic arguments cannot be used in associated type constraints\"\n+                    );\n+                    // FIXME: try to write a suggestion here\n+                    err.emit();\n+                    self.lower_angle_bracketed_parameter_data(\n+                        &data.as_angle_bracketed_args(),\n+                        ParamMode::Explicit,\n+                        itctx.reborrow(),\n+                    )\n+                    .0\n+                }\n+            };\n+            self.arena.alloc(gen_args_ctor.into_generic_args(&self.arena))\n+        } else {\n+            self.arena.alloc(hir::GenericArgs::none())\n+        };\n \n         let kind = match constraint.kind {\n             AssocTyConstraintKind::Equality { ref ty } => {\n@@ -1182,6 +1206,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         hir::TypeBinding {\n             hir_id: self.lower_node_id(constraint.id),\n             ident: constraint.ident,\n+            gen_args,\n             kind,\n             span: constraint.span,\n         }"}, {"sha": "cb4d5ea6ee650fa0c9f38ae9a001a076741f8042", "filename": "compiler/rustc_ast_lowering/src/path.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fpath.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -362,7 +362,7 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         }\n     }\n \n-    fn lower_angle_bracketed_parameter_data(\n+    pub(crate) fn lower_angle_bracketed_parameter_data(\n         &mut self,\n         data: &AngleBracketedArgs,\n         param_mode: ParamMode,\n@@ -426,6 +426,9 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n     ) -> hir::TypeBinding<'hir> {\n         let ident = Ident::with_dummy_span(hir::FN_OUTPUT_NAME);\n         let kind = hir::TypeBindingKind::Equality { ty };\n-        hir::TypeBinding { hir_id: self.next_id(), span, ident, kind }\n+        let args = arena_vec![self;];\n+        let bindings = arena_vec![self;];\n+        let gen_args = self.arena.alloc(hir::GenericArgs { args, bindings, parenthesized: false });\n+        hir::TypeBinding { hir_id: self.next_id(), gen_args, span, ident, kind }\n     }\n }"}, {"sha": "67a15418ea4957af0a5e5f604cb65cc6c73999a6", "filename": "compiler/rustc_hir/src/hir.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir%2Fsrc%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fhir.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -2015,6 +2015,7 @@ pub struct TypeBinding<'hir> {\n     pub hir_id: HirId,\n     #[stable_hasher(project(name))]\n     pub ident: Ident,\n+    pub gen_args: &'hir GenericArgs<'hir>,\n     pub kind: TypeBindingKind<'hir>,\n     pub span: Span,\n }"}, {"sha": "f8b3f0d9b6e23227ae22abbfe5fbb0cd03f6acbe", "filename": "compiler/rustc_hir/src/intravisit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Fintravisit.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -781,6 +781,7 @@ pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(\n ) {\n     visitor.visit_id(type_binding.hir_id);\n     visitor.visit_ident(type_binding.ident);\n+    visitor.visit_generic_args(type_binding.span, type_binding.gen_args);\n     match type_binding.kind {\n         TypeBindingKind::Equality { ref ty } => {\n             visitor.visit_ty(ty);"}, {"sha": "4595855309fdac66bbf9e6fb8738fa6713e974ed", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -1840,6 +1840,7 @@ impl<'a> State<'a> {\n             for binding in generic_args.bindings.iter() {\n                 start_or_comma(self);\n                 self.print_ident(binding.ident);\n+                self.print_generic_args(binding.gen_args, false, false);\n                 self.s.space();\n                 match generic_args.bindings[0].kind {\n                     hir::TypeBindingKind::Equality { ref ty } => {"}, {"sha": "c1fa84dcb25e012f68577207e3c8b4111b1b22fa", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -1132,8 +1132,16 @@ impl<'tcx> ProjectionTy<'tcx> {\n     /// For example, if this is a projection of `<T as Iterator>::Item`,\n     /// then this function would return a `T: Iterator` trait reference.\n     pub fn trait_ref(&self, tcx: TyCtxt<'tcx>) -> ty::TraitRef<'tcx> {\n+        // FIXME: This method probably shouldn't exist at all, since it's not\n+        // clear what this method really intends to do. Be careful when\n+        // using this method since the resulting TraitRef additionally\n+        // contains the substs for the assoc_item, which strictly speaking\n+        // is not correct\n         let def_id = tcx.associated_item(self.item_def_id).container.id();\n-        ty::TraitRef { def_id, substs: self.substs.truncate_to(tcx, tcx.generics_of(def_id)) }\n+        // Include substitutions for generic arguments of associated types\n+        let assoc_item = tcx.associated_item(self.item_def_id);\n+        let substs_assoc_item = self.substs.truncate_to(tcx, tcx.generics_of(assoc_item.def_id));\n+        ty::TraitRef { def_id, substs: substs_assoc_item }\n     }\n \n     pub fn self_ty(&self) -> Ty<'tcx> {"}, {"sha": "e155f0366e19f5c006ee8644ed8824949c835f4b", "filename": "compiler/rustc_trait_selection/src/traits/object_safety.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fobject_safety.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -257,13 +257,11 @@ fn predicates_reference_self(\n }\n \n fn bounds_reference_self(tcx: TyCtxt<'_>, trait_def_id: DefId) -> SmallVec<[Span; 1]> {\n-    let trait_ref = ty::Binder::dummy(ty::TraitRef::identity(tcx, trait_def_id));\n     tcx.associated_items(trait_def_id)\n         .in_definition_order()\n         .filter(|item| item.kind == ty::AssocKind::Type)\n         .flat_map(|item| tcx.explicit_item_bounds(item.def_id))\n-        .map(|&(predicate, sp)| (predicate.subst_supertrait(tcx, &trait_ref), sp))\n-        .filter_map(|predicate| predicate_references_self(tcx, predicate))\n+        .filter_map(|pred_span| predicate_references_self(tcx, *pred_span))\n         .collect()\n }\n "}, {"sha": "5659345f0ff9cfec0c056ad870796e22f4161d25", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 104, "deletions": 62, "changes": 166, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -112,12 +112,15 @@ pub enum SizedByDefault {\n     No,\n }\n \n+#[derive(Debug)]\n struct ConvertedBinding<'a, 'tcx> {\n     item_name: Ident,\n     kind: ConvertedBindingKind<'a, 'tcx>,\n+    gen_args: &'a GenericArgs<'a>,\n     span: Span,\n }\n \n+#[derive(Debug)]\n enum ConvertedBindingKind<'a, 'tcx> {\n     Equality(Ty<'tcx>),\n     Constraint(&'a [hir::GenericBound<'a>]),\n@@ -323,6 +326,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n \n         let tcx = self.tcx();\n         let generics = tcx.generics_of(def_id);\n+        debug!(\"generics: {:?}\", generics);\n \n         if generics.has_self {\n             if generics.parent.is_some() {\n@@ -557,7 +561,12 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                         ConvertedBindingKind::Constraint(bounds)\n                     }\n                 };\n-                ConvertedBinding { item_name: binding.ident, kind, span: binding.span }\n+                ConvertedBinding {\n+                    item_name: binding.ident,\n+                    kind,\n+                    gen_args: binding.gen_args,\n+                    span: binding.span,\n+                }\n             })\n             .collect();\n \n@@ -918,60 +927,27 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         dup_bindings: &mut FxHashMap<DefId, Span>,\n         path_span: Span,\n     ) -> Result<(), ErrorReported> {\n-        let tcx = self.tcx();\n-\n-        if !speculative {\n-            // Given something like `U: SomeTrait<T = X>`, we want to produce a\n-            // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n-            // subtle in the event that `T` is defined in a supertrait of\n-            // `SomeTrait`, because in that case we need to upcast.\n-            //\n-            // That is, consider this case:\n-            //\n-            // ```\n-            // trait SubTrait: SuperTrait<i32> { }\n-            // trait SuperTrait<A> { type T; }\n-            //\n-            // ... B: SubTrait<T = foo> ...\n-            // ```\n-            //\n-            // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n-\n-            // Find any late-bound regions declared in `ty` that are not\n-            // declared in the trait-ref. These are not well-formed.\n-            //\n-            // Example:\n-            //\n-            //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n-            //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n-            if let ConvertedBindingKind::Equality(ty) = binding.kind {\n-                let late_bound_in_trait_ref =\n-                    tcx.collect_constrained_late_bound_regions(&trait_ref);\n-                let late_bound_in_ty =\n-                    tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n-                debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n-                debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+        // Given something like `U: SomeTrait<T = X>`, we want to produce a\n+        // predicate like `<U as SomeTrait>::T = X`. This is somewhat\n+        // subtle in the event that `T` is defined in a supertrait of\n+        // `SomeTrait`, because in that case we need to upcast.\n+        //\n+        // That is, consider this case:\n+        //\n+        // ```\n+        // trait SubTrait: SuperTrait<i32> { }\n+        // trait SuperTrait<A> { type T; }\n+        //\n+        // ... B: SubTrait<T = foo> ...\n+        // ```\n+        //\n+        // We want to produce `<B as SuperTrait<i32>>::T == foo`.\n \n-                // FIXME: point at the type params that don't have appropriate lifetimes:\n-                // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n-                //                         ----  ----     ^^^^^^^\n-                self.validate_late_bound_regions(\n-                    late_bound_in_trait_ref,\n-                    late_bound_in_ty,\n-                    |br_name| {\n-                        struct_span_err!(\n-                            tcx.sess,\n-                            binding.span,\n-                            E0582,\n-                            \"binding for associated type `{}` references {}, \\\n-                             which does not appear in the trait input types\",\n-                            binding.item_name,\n-                            br_name\n-                        )\n-                    },\n-                );\n-            }\n-        }\n+        debug!(\n+            \"add_predicates_for_ast_type_binding(hir_ref_id {:?}, trait_ref {:?}, binding {:?}, bounds {:?}\",\n+            hir_ref_id, trait_ref, binding, bounds\n+        );\n+        let tcx = self.tcx();\n \n         let candidate =\n             if self.trait_defines_associated_type_named(trait_ref.def_id(), binding.item_name) {\n@@ -1030,20 +1006,85 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 .or_insert(binding.span);\n         }\n \n+        // Include substitutions for generic parameters of associated types\n+        let projection_ty = candidate.map_bound(|trait_ref| {\n+            let item_segment = hir::PathSegment {\n+                ident: assoc_ty.ident,\n+                hir_id: None,\n+                res: None,\n+                args: Some(binding.gen_args),\n+                infer_args: false,\n+            };\n+\n+            let substs_trait_ref_and_assoc_item = self.create_substs_for_associated_item(\n+                tcx,\n+                path_span,\n+                assoc_ty.def_id,\n+                &item_segment,\n+                trait_ref.substs,\n+            );\n+\n+            debug!(\n+                \"add_predicates_for_ast_type_binding: substs for trait-ref and assoc_item: {:?}\",\n+                substs_trait_ref_and_assoc_item\n+            );\n+\n+            ty::ProjectionTy {\n+                item_def_id: assoc_ty.def_id,\n+                substs: substs_trait_ref_and_assoc_item,\n+            }\n+        });\n+\n+        if !speculative {\n+            // Find any late-bound regions declared in `ty` that are not\n+            // declared in the trait-ref or assoc_ty. These are not well-formed.\n+            //\n+            // Example:\n+            //\n+            //     for<'a> <T as Iterator>::Item = &'a str // <-- 'a is bad\n+            //     for<'a> <T as FnMut<(&'a u32,)>>::Output = &'a str // <-- 'a is ok\n+            if let ConvertedBindingKind::Equality(ty) = binding.kind {\n+                let late_bound_in_trait_ref =\n+                    tcx.collect_constrained_late_bound_regions(&projection_ty);\n+                let late_bound_in_ty =\n+                    tcx.collect_referenced_late_bound_regions(&ty::Binder::bind(ty));\n+                debug!(\"late_bound_in_trait_ref = {:?}\", late_bound_in_trait_ref);\n+                debug!(\"late_bound_in_ty = {:?}\", late_bound_in_ty);\n+\n+                // FIXME: point at the type params that don't have appropriate lifetimes:\n+                // struct S1<F: for<'a> Fn(&i32, &i32) -> &'a i32>(F);\n+                //                         ----  ----     ^^^^^^^\n+                self.validate_late_bound_regions(\n+                    late_bound_in_trait_ref,\n+                    late_bound_in_ty,\n+                    |br_name| {\n+                        struct_span_err!(\n+                            tcx.sess,\n+                            binding.span,\n+                            E0582,\n+                            \"binding for associated type `{}` references {}, \\\n+                             which does not appear in the trait input types\",\n+                            binding.item_name,\n+                            br_name\n+                        )\n+                    },\n+                );\n+            }\n+        }\n+\n         match binding.kind {\n             ConvertedBindingKind::Equality(ref ty) => {\n                 // \"Desugar\" a constraint like `T: Iterator<Item = u32>` this to\n                 // the \"projection predicate\" for:\n                 //\n                 // `<T as Iterator>::Item = u32`\n                 bounds.projection_bounds.push((\n-                    candidate.map_bound(|trait_ref| ty::ProjectionPredicate {\n-                        projection_ty: ty::ProjectionTy::from_ref_and_name(\n-                            tcx,\n-                            trait_ref,\n-                            binding.item_name,\n-                        ),\n-                        ty,\n+                    projection_ty.map_bound(|projection_ty| {\n+                        debug!(\n+                            \"add_predicates_for_ast_type_binding: projection_ty {:?}, substs: {:?}\",\n+                            projection_ty, projection_ty.substs\n+                        );\n+                        ty::ProjectionPredicate { projection_ty, ty }\n                     }),\n                     binding.span,\n                 ));\n@@ -1055,7 +1096,8 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                 //\n                 // Calling `skip_binder` is okay, because `add_bounds` expects the `param_ty`\n                 // parameter to have a skipped binder.\n-                let param_ty = tcx.mk_projection(assoc_ty.def_id, candidate.skip_binder().substs);\n+                let param_ty =\n+                    tcx.mk_projection(assoc_ty.def_id, projection_ty.skip_binder().substs);\n                 self.add_bounds(param_ty, ast_bounds, bounds);\n             }\n         }"}, {"sha": "2c543455b6ebdf437e1ee99545308a71a5ecf339", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,12 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'x>;\n+}\n+\n+fn main() {\n+  fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+    //~^ ERROR: use of undeclared lifetime name `'x`\n+    //~| ERROR: binding for associated type `Y` references lifetime\n+}"}, {"sha": "1c7c107d78354d60c1f22872d04eed0830c8509e", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path-undeclared-lifetime.stderr", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path-undeclared-lifetime.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,29 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0261]: use of undeclared lifetime name `'x`\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:35\n+   |\n+LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+   |        -                          ^^ undeclared lifetime\n+   |        |\n+   |        help: consider introducing lifetime `'x` here: `<'x>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0582]: binding for associated type `Y` references lifetime `'a`, which does not appear in the trait input types\n+  --> $DIR/gat-in-trait-path-undeclared-lifetime.rs:9:33\n+   |\n+LL |   fn _f(arg : Box<dyn for<'a> X<Y<'x> = &'a [u32]>>) {}\n+   |                                 ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0261, E0582.\n+For more information about an error, try `rustc --explain E0261`."}, {"sha": "2dbd1840dec55da18cf6676424d4f8251cab693c", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,30 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+#![feature(associated_type_defaults)]\n+\n+trait Foo {\n+    type A<'a> where Self: 'a;\n+}\n+\n+struct Fooy;\n+\n+impl Foo for Fooy {\n+    type A<'a> = &'a ();\n+}\n+\n+#[derive(Clone)]\n+struct Fooer<T>(T);\n+\n+impl<T> Foo for Fooer<T> {\n+    type A<'x> where T: 'x = &'x ();\n+}\n+\n+fn f(_arg : Box<dyn for<'a> Foo<A<'a> = &'a ()>>) {}\n+\n+\n+fn main() {\n+  let foo = Fooer(5);\n+  f(Box::new(foo));\n+}"}, {"sha": "f3769827f04b251808d8ed2e4a2ecacc2eeba42c", "filename": "src/test/ui/generic-associated-types/gat-in-trait-path.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-in-trait-path.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-in-trait-path.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "cff5a21052f9bc98eeca3f4551e83d5da10f88de", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,16 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Foo {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T, T1> Foo for T {\n+    type F<T1> = &[u8];\n+      //~^ ERROR: the name `T1` is already used for\n+      //~| ERROR: missing lifetime specifier\n+}\n+\n+fn main() {}"}, {"sha": "e83af1d0c739d1535dc930f44523fc60ebd11e15", "filename": "src/test/ui/generic-associated-types/gat-trait-path-generic-type-arg.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-generic-type-arg.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,32 @@\n+error[E0403]: the name `T1` is already used for a generic parameter in this item's generic parameters\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:11:12\n+   |\n+LL | impl <T, T1> Foo for T {\n+   |          -- first use of `T1`\n+LL |     type F<T1> = &[u8];\n+   |            ^^ already used\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0106]: missing lifetime specifier\n+  --> $DIR/gat-trait-path-generic-type-arg.rs:11:18\n+   |\n+LL |     type F<T1> = &[u8];\n+   |                  ^ expected named lifetime parameter\n+   |\n+help: consider introducing a named lifetime parameter\n+   |\n+LL |     type F<'a, T1> = &'a [u8];\n+   |            ^^^       ^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0106, E0403.\n+For more information about an error, try `rustc --explain E0106`."}, {"sha": "e69e355ba48e53099b4af9fdeebac414b4d09737", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,18 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'a>;\n+    //~^ ERROR missing generics for\n+    //~| ERROR missing generics for\n+\n+  fn foo<'a>(t : Self::Y<'a>) -> Self::Y<'a> { t }\n+}\n+\n+impl<T> X for T {\n+  fn foo<'a, T1: X<Y = T1>>(t : T1) -> T1::Y<'a> {\n+    t\n+  }\n+}\n+\n+fn main() {}"}, {"sha": "9c6e2ce3e17a36309a219587f09029b3b4a5c980", "filename": "src/test/ui/generic-associated-types/gat-trait-path-missing-lifetime.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-missing-lifetime.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,44 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: missing generics for associated type `X::Y`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |   type Y<'a><'a>;\n+   |         ^^^^\n+\n+error[E0107]: missing generics for associated type `X::Y`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-missing-lifetime.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |   type Y<'a><'a>;\n+   |         ^^^^\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "bb1f27a17ca4c4c837fe8f3b18ca86dcd137ca06", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,15 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+  type Y<'a>;\n+    //~^ ERROR this associated type\n+    //~| ERROR this associated type\n+}\n+\n+fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+  //~^ ERROR: lifetime in trait object type must be followed by `+`\n+  //~| ERROR: parenthesized generic arguments cannot be used\n+  //~| WARNING: trait objects without an explicit `dyn` are deprecated\n+\n+fn main() {}"}, {"sha": "20cb6d8828755be5e2bbd425d3243d43f7b8dee2", "filename": "src/test/ui/generic-associated-types/gat-trait-path-parenthesised-args.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fgat-trait-path-parenthesised-args.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,68 @@\n+error: lifetime in trait object type must be followed by `+`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                             ^^\n+\n+error: parenthesized generic arguments cannot be used in associated type constraints\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:27\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                           ^^^^^\n+\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: trait objects without an explicit `dyn` are deprecated\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:10:29\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   |                             ^^ help: use `dyn`: `dyn 'a`\n+   |\n+   = note: `#[warn(bare_trait_objects)]` on by default\n+\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^ --\n+help: add missing lifetime argument\n+   |\n+LL | fn foo<'a>(arg: Box<dyn X<Y('a'a) = &'a ()>>) {}\n+   |                             ^^\n+\n+error[E0107]: this associated type takes 0 type arguments but 1 type argument was supplied\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |     type Y<'a>;\n+   |  ________^-\n+   | |        |\n+   | |        expected 0 type arguments\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | fn foo<'a>(arg: Box<dyn X<Y('a) = &'a ()>>) {}\n+   | |_________________________________________- help: remove these generics\n+   |\n+note: associated type defined here, with 0 type parameters\n+  --> $DIR/gat-trait-path-parenthesised-args.rs:5:8\n+   |\n+LL |   type Y<'a>;\n+   |        ^\n+\n+error: aborting due to 4 previous errors; 2 warnings emitted\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "ff38b3e93eb1aec3b617b64cd22f27e8cead4c09", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,12 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type Y<'a>;\n+}\n+\n+fn _func1<'a>(_x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+\n+fn main() {}"}, {"sha": "0fbf704df76a188ad1e28995b1c4ae2095ebd5b6", "filename": "src/test/ui/generic-associated-types/issue-67510-pass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510-pass.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67510-pass.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "62b22089f917c73ac927105432d37654d1a16e95", "filename": "src/test/ui/generic-associated-types/issue-67510.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,13 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait X {\n+    type Y<'a>;\n+}\n+\n+fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+  //~^ ERROR: use of undeclared lifetime name `'a`\n+  //~| ERROR: use of undeclared lifetime name `'a`\n+\n+\n+fn main() {}"}, {"sha": "12755c56974f2a82e08d711ef268865d6370e3e6", "filename": "src/test/ui/generic-associated-types/issue-67510.stderr", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-67510.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,32 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-67510.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-67510.rs:8:21\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |     -               ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error[E0261]: use of undeclared lifetime name `'a`\n+  --> $DIR/issue-67510.rs:8:26\n+   |\n+LL | fn f(x: Box<dyn X<Y<'a>=&'a ()>>) {}\n+   |     -                    ^^ undeclared lifetime\n+   |     |\n+   |     help: consider introducing lifetime `'a` here: `<'a>`\n+   |\n+   = help: if you want to experiment with in-band lifetime bindings, add `#![feature(in_band_lifetimes)]` to the crate attributes\n+\n+error: aborting due to 2 previous errors; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0261`."}, {"sha": "f294b22f73c6715efad3de35dfddf4ebf4dc074a", "filename": "src/test/ui/generic-associated-types/issue-68648-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,26 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: for<'b> Fun<F<'b> = T>>(t: T) -> T::F<'a> {\n+    T::identity(t)\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "322a8f9e13f811209bb3ca880756be8e6c6971a7", "filename": "src/test/ui/generic-associated-types/issue-68648-1.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-1.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68648-1.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "e55bfcd4ba295f7bf77f0dceaea1c6cd6796b3c9", "filename": "src/test/ui/generic-associated-types/issue-68648-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,24 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+    T::identity(())\n+      //~^ ERROR: mismatched types\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "b51e0bca9f7a96eb58779fa5d03d4679c2010b98", "filename": "src/test/ui/generic-associated-types/issue-68648-2.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68648-2.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,23 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68648-2.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0308]: mismatched types\n+  --> $DIR/issue-68648-2.rs:15:17\n+   |\n+LL | fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+   |            - this type parameter\n+LL |     T::identity(())\n+   |                 ^^ expected type parameter `T`, found `()`\n+   |\n+   = note: expected type parameter `T`\n+                   found unit type `()`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "396315302f74c6b0a4b337bb7f94015bdd57c6d3", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,25 @@\n+// check-pass\n+\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>;\n+\n+    fn identity<'a>(t: Self::F<'a>) -> Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = Self;\n+}\n+\n+fn bug<'a, T: Fun<F<'a> = T>>(t: T) -> T::F<'a> {\n+    T::identity(t)\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(x);\n+}"}, {"sha": "e4a2f8d2a640190c28ddf045c2c74fe19cb77d34", "filename": "src/test/ui/generic-associated-types/issue-68649-pass.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-68649-pass.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,11 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-68649-pass.rs:3:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a483da863ff00200d457eda40af404232223b8a3", "filename": "src/test/ui/generic-associated-types/issue-74684-1.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,26 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>: ?Sized;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = [u8];\n+}\n+\n+fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n+    let a = [0; 1];\n+    let _x = T::identity(&a);\n+      //~^ ERROR: `a` does not live long enough\n+    todo!()\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(Box::new(x));\n+}"}, {"sha": "651da696827c3c3ccd51c81c98b69e55bb9633f4", "filename": "src/test/ui/generic-associated-types/issue-74684-1.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-1.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,27 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74684-1.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0597]: `a` does not live long enough\n+  --> $DIR/issue-74684-1.rs:16:26\n+   |\n+LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(_ : Box<T>) -> &'static T::F<'a> {\n+   |        -- lifetime `'a` defined here\n+LL |     let a = [0; 1];\n+LL |     let _x = T::identity(&a);\n+   |              ------------^^-\n+   |              |           |\n+   |              |           borrowed value does not live long enough\n+   |              argument requires that `a` is borrowed for `'a`\n+...\n+LL | }\n+   | - `a` dropped here while still borrowed\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0597`."}, {"sha": "0caf19cb030389096432280999d475d3c1910479", "filename": "src/test/ui/generic-associated-types/issue-74684-2.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,26 @@\n+#![feature(generic_associated_types)]\n+  //~^ WARNING: the feature `generic_associated_types` is incomplete\n+\n+trait Fun {\n+    type F<'a>: ?Sized;\n+\n+    fn identity<'a>(t: &'a Self::F<'a>) -> &'a Self::F<'a> { t }\n+}\n+\n+impl <T> Fun for T {\n+    type F<'a> = i32;\n+}\n+\n+fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n+    let a = [0; 1];\n+    let x = T::identity(&a);\n+    todo!()\n+}\n+\n+\n+fn main() {\n+    let x = 10;\n+\n+    bug(Box::new(x));\n+      //~^ ERROR: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+}"}, {"sha": "8c3484f9a7300251493aa6b42b31f3d7c52f6e20", "filename": "src/test/ui/generic-associated-types/issue-74684-2.stderr", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-74684-2.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,21 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-74684-2.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0271]: type mismatch resolving `<{integer} as Fun>::F<'_> == [u8]`\n+  --> $DIR/issue-74684-2.rs:24:5\n+   |\n+LL | fn bug<'a, T: ?Sized + Fun<F<'a> = [u8]>>(t: Box<T>) -> &'static T::F<'a> {\n+   |                            ------------ required by this bound in `bug`\n+...\n+LL |     bug(Box::new(x));\n+   |     ^^^ expected slice `[u8]`, found `i32`\n+\n+error: aborting due to previous error; 1 warning emitted\n+\n+For more information about this error, try `rustc --explain E0271`."}, {"sha": "2b4757d8d15edcf8a245263c2b695a6222da93c6", "filename": "src/test/ui/generic-associated-types/issue-76535.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,41 @@\n+#![feature(generic_associated_types)]\n+ //~^ WARNING the feature\n+\n+pub trait SubTrait {}\n+\n+pub trait SuperTrait {\n+    type SubType<'a>: SubTrait;\n+      //~^ ERROR missing generics for associated\n+\n+    fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+}\n+\n+pub struct SubStruct<'a> {\n+    sup: &'a mut SuperStruct,\n+}\n+\n+impl<'a> SubTrait for SubStruct<'a> {}\n+\n+pub struct SuperStruct {\n+    value: u8,\n+}\n+\n+impl SuperStruct {\n+    pub fn new(value: u8) -> SuperStruct {\n+        SuperStruct { value }\n+    }\n+}\n+\n+impl SuperTrait for SuperStruct {\n+    type SubType<'a> = SubStruct<'a>;\n+\n+    fn get_sub<'a>(&'a mut self) -> Self::SubType<'a> {\n+        SubStruct { sup: self }\n+    }\n+}\n+\n+fn main() {\n+    let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+      //~^ ERROR the trait\n+      //~| ERROR the trait\n+}"}, {"sha": "ce4875af9c012a04fb3c8900cae4a57d00c253ed", "filename": "src/test/ui/generic-associated-types/issue-76535.stderr", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-76535.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,63 @@\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/issue-76535.rs:1:12\n+   |\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: missing generics for associated type `SuperTrait::SubType`\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-76535.rs:7:10\n+   |\n+LL |     type SubType<'a>: SubTrait;\n+   |          ^^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type SubType<'a><'a>: SubTrait;\n+   |                 ^^^^\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:14\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `get_sub` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:10:37\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+...\n+LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n+\n+error[E0038]: the trait `SuperTrait` cannot be made into an object\n+  --> $DIR/issue-76535.rs:38:57\n+   |\n+LL |     let sub: Box<dyn SuperTrait<SubType = SubStruct>> = Box::new(SuperStruct::new(0));\n+   |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `SuperTrait` cannot be made into an object\n+   |\n+   = help: consider moving `get_sub` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-76535.rs:10:37\n+   |\n+LL | pub trait SuperTrait {\n+   |           ---------- this trait cannot be made into an object...\n+...\n+LL |     fn get_sub<'a>(&'a mut self) -> Self::SubType<'a>;\n+   |                                     ^^^^^^^^^^^^^^^^^ ...because method `get_sub` references the `Self` type in its return type\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn SuperTrait<SubType = SubStruct<'_>>>>` for `Box<SuperStruct>`\n+   = note: required by cast to type `Box<dyn SuperTrait<SubType = SubStruct<'_>>>`\n+\n+error: aborting due to 3 previous errors; 1 warning emitted\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "26b38430dd9a5e24de357e1417fd132c3d728588", "filename": "src/test/ui/generic-associated-types/issue-79422.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,47 @@\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+trait RefCont<'a, T> {\n+    fn t(&'a self) -> &'a T;\n+}\n+\n+impl<'a, T> RefCont<'a, T> for &'a T {\n+    fn t(&'a self) -> &'a T {\n+        self\n+    }\n+}\n+\n+impl<'a, T> RefCont<'a, T> for Box<T> {\n+    fn t(&'a self) -> &'a T {\n+        self.as_ref()\n+    }\n+}\n+\n+trait MapLike<K, V> {\n+    type VRefCont<'a>: RefCont<'a, V>;\n+      //~^ ERROR missing generics\n+    fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+}\n+\n+impl<K: Ord, V: 'static> MapLike<K, V> for std::collections::BTreeMap<K, V> {\n+    type VRefCont<'a> = &'a V;\n+    fn get<'a>(&'a self, key: &K) -> Option<&'a V> {\n+        std::collections::BTreeMap::get(self, key)\n+    }\n+}\n+\n+struct Source;\n+\n+impl<K, V: Default> MapLike<K, V> for Source {\n+    type VRefCont<'a> = Box<V>;\n+    fn get<'a>(&self, _: &K) -> Option<Box<V>> {\n+        Some(Box::new(V::default()))\n+    }\n+}\n+\n+fn main() {\n+    let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+        as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+      //~^ ERROR the trait\n+      //~^^^ ERROR the trait\n+}"}, {"sha": "d2e12962715f0e0eb886521428fba5b13d8eb2a1", "filename": "src/test/ui/generic-associated-types/issue-79422.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-79422.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,54 @@\n+error[E0107]: missing generics for associated type `MapLike::VRefCont`\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-79422.rs:21:10\n+   |\n+LL |     type VRefCont<'a>: RefCont<'a, V>;\n+   |          ^^^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type VRefCont<'a><'a>: RefCont<'a, V>;\n+   |                  ^^^^\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:44:12\n+   |\n+LL |         as Box<dyn MapLike<u8, u8, VRefCont = dyn RefCont<'_, u8>>>;\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `get` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:23:38\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+...\n+LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n+\n+error[E0038]: the trait `MapLike` cannot be made into an object\n+  --> $DIR/issue-79422.rs:43:13\n+   |\n+LL |     let m = Box::new(std::collections::BTreeMap::<u8, u8>::new())\n+   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ `MapLike` cannot be made into an object\n+   |\n+   = help: consider moving `get` to another trait\n+note: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\n+  --> $DIR/issue-79422.rs:23:38\n+   |\n+LL | trait MapLike<K, V> {\n+   |       ------- this trait cannot be made into an object...\n+...\n+LL |     fn get<'a>(&'a self, key: &K) -> Option<Self::VRefCont<'a>>;\n+   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^ ...because method `get` references the `Self` type in its return type\n+   = note: required because of the requirements on the impl of `CoerceUnsized<Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>>` for `Box<BTreeMap<u8, u8>>`\n+   = note: required by cast to type `Box<dyn MapLike<u8, u8, VRefCont = (dyn RefCont<'_, u8> + 'static)>>`\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors have detailed explanations: E0038, E0107.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "7c1673edc51a4bf522a08ef66c1c288e6f861066", "filename": "src/test/ui/generic-associated-types/issue-80433-reduced.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433-reduced.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,24 @@\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(generic_associated_types)]\n+\n+struct E {}\n+\n+trait TestMut {\n+    type Output<'a>;\n+    fn test_mut(&mut self) -> Self::Output<'static>;\n+}\n+\n+impl TestMut for E {\n+    type Output<'a> = usize;\n+    fn test_mut(&mut self) -> Self::Output<'static> {\n+        todo!()\n+    }\n+}\n+\n+fn test_simpler<'a>(_: impl TestMut<Output<'a> = usize>) {}\n+\n+fn main() {\n+    test_simpler(E {});\n+}"}, {"sha": "ea65f05de23d74ee763cbb38cbcccbfaa0396322", "filename": "src/test/ui/generic-associated-types/issue-80433.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,35 @@\n+#![feature(generic_associated_types)]\n+#![allow(incomplete_features)]\n+\n+#[derive(Default)]\n+struct E<T> {\n+    data: T,\n+}\n+\n+trait TestMut {\n+    type Output<'a>;\n+      //~^ ERROR missing generics\n+    fn test_mut<'a>(&'a mut self) -> Self::Output<'a>;\n+}\n+\n+impl<T> TestMut for E<T>\n+where\n+    T: 'static,\n+{\n+    type Output<'a> = &'a mut T;\n+    fn test_mut<'a>(&'a mut self) -> Self::Output<'a> {\n+        &mut self.data\n+    }\n+}\n+\n+fn test_simpler<'a>(dst: &'a mut impl TestMut<Output = &'a mut f32>)\n+{\n+    for n in 0i16..100 {\n+        *dst.test_mut() = n.into();\n+    }\n+}\n+\n+fn main() {\n+    let mut t1: E<f32> = Default::default();\n+    test_simpler(&mut t1);\n+}"}, {"sha": "5398920fafdb03ed7249ac34734294b2bf3efd95", "filename": "src/test/ui/generic-associated-types/issue-80433.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fissue-80433.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -0,0 +1,19 @@\n+error[E0107]: missing generics for associated type `TestMut::Output`\n+  --> $DIR/issue-80433.rs:10:10\n+   |\n+LL |     type Output<'a>;\n+   |          ^^^^^^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/issue-80433.rs:10:10\n+   |\n+LL |     type Output<'a>;\n+   |          ^^^^^^ --\n+help: use angle brackets to add missing lifetime argument\n+   |\n+LL |     type Output<'a><'a>;\n+   |                ^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "2d38770bcdff84acd99a9cb4d0e222ea013057bf", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.rs?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -1,10 +1,14 @@\n #![feature(generic_associated_types)]\n+  //~^ the feature `generic_associated_types` is incomplete\n \n trait X {\n     type Y<'a>;\n+      //~^ ERROR this associated type\n+      //~| ERROR this associated type\n }\n \n const _: () = {\n   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-      //~^  ERROR: generic associated types in trait paths are currently not implemented\n };\n+\n+fn main() {}"}, {"sha": "60b8fb9bcaa2314afc466828023eb6d76090d8c0", "filename": "src/test/ui/generic-associated-types/parse/trait-path-type-error-once-implemented.stderr", "status": "modified", "additions": 46, "deletions": 5, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/deec6a96d428d20250bfad2317c00fc67e4b70f0/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-type-error-once-implemented.stderr?ref=deec6a96d428d20250bfad2317c00fc67e4b70f0", "patch": "@@ -1,8 +1,49 @@\n-error: generic associated types in trait paths are currently not implemented\n-  --> $DIR/trait-path-type-error-once-implemented.rs:8:30\n+warning: the feature `generic_associated_types` is incomplete and may not be safe to use and/or cause compiler crashes\n+  --> $DIR/trait-path-type-error-once-implemented.rs:1:12\n    |\n-LL |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n-   |                              ^^^\n+LL | #![feature(generic_associated_types)]\n+   |            ^^^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+   = note: see issue #44265 <https://github.com/rust-lang/rust/issues/44265> for more information\n+\n+error[E0107]: this associated type takes 1 lifetime argument but 0 lifetime arguments were supplied\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ expected 1 lifetime argument\n+   |\n+note: associated type defined here, with 1 lifetime parameter: `'a`\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^ --\n+help: add missing lifetime argument\n+   |\n+LL |   fn f2<'a>(arg : Box<dyn X<Y<'a1> = &'a ()>>) {}\n+   |                               ^^\n+\n+error[E0107]: this associated type takes 0 const arguments but 1 const argument was supplied\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |       type Y<'a>;\n+   |  __________^-\n+   | |          |\n+   | |          expected 0 const arguments\n+LL | |\n+LL | |\n+LL | | }\n+LL | |\n+LL | | const _: () = {\n+LL | |   fn f2<'a>(arg : Box<dyn X<Y<1> = &'a ()>>) {}\n+   | |________________________________- help: remove these generics\n+   |\n+note: associated type defined here, with 0 const parameters\n+  --> $DIR/trait-path-type-error-once-implemented.rs:5:10\n+   |\n+LL |     type Y<'a>;\n+   |          ^\n \n-error: aborting due to previous error\n+error: aborting due to 2 previous errors; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0107`."}, {"sha": "02d53d5faeec5ae7eca25957f382476010b5315c", "filename": "src/test/ui/generic-associated-types/parse/trait-path-unimplemented.rs", "status": "removed", "additions": 0, "deletions": 17, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/9e5d58fb420a487ae30f38141eccdc8d79fb8d58/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9e5d58fb420a487ae30f38141eccdc8d79fb8d58/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.rs?ref=9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "patch": "@@ -1,17 +0,0 @@\n-#![feature(generic_associated_types)]\n-\n-trait X {\n-    type Y<'a>;\n-}\n-\n-const _: () = {\n-  fn f1<'a>(arg : Box<dyn X<Y<'a> = &'a ()>>) {}\n-      //~^  ERROR: generic associated types in trait paths are currently not implemented\n-};\n-\n-const _: () = {\n-  fn f1<'a>(arg : Box<dyn X<Y('a) = &'a ()>>) {}\n-      //~^  ERROR: lifetime in trait object type must be followed by `+`\n-};\n-\n-fn main() {}"}, {"sha": "1fba9cebd249102dd147136ea193554ce2f32fae", "filename": "src/test/ui/generic-associated-types/parse/trait-path-unimplemented.stderr", "status": "removed", "additions": 0, "deletions": 14, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9e5d58fb420a487ae30f38141eccdc8d79fb8d58/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9e5d58fb420a487ae30f38141eccdc8d79fb8d58/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fparse%2Ftrait-path-unimplemented.stderr?ref=9e5d58fb420a487ae30f38141eccdc8d79fb8d58", "patch": "@@ -1,14 +0,0 @@\n-error: lifetime in trait object type must be followed by `+`\n-  --> $DIR/trait-path-unimplemented.rs:13:31\n-   |\n-LL |   fn f1<'a>(arg : Box<dyn X<Y('a) = &'a ()>>) {}\n-   |                               ^^\n-\n-error: generic associated types in trait paths are currently not implemented\n-  --> $DIR/trait-path-unimplemented.rs:8:30\n-   |\n-LL |   fn f1<'a>(arg : Box<dyn X<Y<'a> = &'a ()>>) {}\n-   |                              ^^^^\n-\n-error: aborting due to 2 previous errors\n-"}]}