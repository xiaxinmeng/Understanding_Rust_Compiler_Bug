{"sha": "be935b2b56dcbda5a5918d8c600552b0adbb3a96", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJlOTM1YjJiNTZkY2JkYTVhNTkxOGQ4YzYwMDU1MmIwYWRiYjNhOTY=", "commit": {"author": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-07T13:33:40Z"}, "committer": {"name": "Paul Daniel Faria", "email": "Nashenas88@users.noreply.github.com", "date": "2020-08-08T15:29:56Z"}, "message": "Apply unsafe semantic highlighting to union field access", "tree": {"sha": "6ecdb8cfd62ac5d08d4746e17604b6ccd1ad6d21", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6ecdb8cfd62ac5d08d4746e17604b6ccd1ad6d21"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be935b2b56dcbda5a5918d8c600552b0adbb3a96", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be935b2b56dcbda5a5918d8c600552b0adbb3a96", "html_url": "https://github.com/rust-lang/rust/commit/be935b2b56dcbda5a5918d8c600552b0adbb3a96", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be935b2b56dcbda5a5918d8c600552b0adbb3a96/comments", "author": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nashenas88", "id": 1673130, "node_id": "MDQ6VXNlcjE2NzMxMzA=", "avatar_url": "https://avatars.githubusercontent.com/u/1673130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nashenas88", "html_url": "https://github.com/Nashenas88", "followers_url": "https://api.github.com/users/Nashenas88/followers", "following_url": "https://api.github.com/users/Nashenas88/following{/other_user}", "gists_url": "https://api.github.com/users/Nashenas88/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nashenas88/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nashenas88/subscriptions", "organizations_url": "https://api.github.com/users/Nashenas88/orgs", "repos_url": "https://api.github.com/users/Nashenas88/repos", "events_url": "https://api.github.com/users/Nashenas88/events{/privacy}", "received_events_url": "https://api.github.com/users/Nashenas88/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bf033e54814919f2214ca4e9b73cebc5ba7d86d", "html_url": "https://github.com/rust-lang/rust/commit/3bf033e54814919f2214ca4e9b73cebc5ba7d86d"}], "stats": {"total": 72, "additions": 59, "deletions": 13}, "files": [{"sha": "bfe6143ca500d99b07fb94cf9e4a0a703563b957", "filename": "crates/ra_ide/src/syntax_highlighting.rs", "status": "modified", "additions": 56, "deletions": 10, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/be935b2b56dcbda5a5918d8c600552b0adbb3a96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be935b2b56dcbda5a5918d8c600552b0adbb3a96/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fsyntax_highlighting.rs?ref=be935b2b56dcbda5a5918d8c600552b0adbb3a96", "patch": "@@ -4,7 +4,7 @@ mod injection;\n #[cfg(test)]\n mod tests;\n \n-use hir::{Name, Semantics};\n+use hir::{Name, Semantics, VariantDef};\n use ra_ide_db::{\n     defs::{classify_name, classify_name_ref, Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -455,6 +455,18 @@ fn macro_call_range(macro_call: &ast::MacroCall) -> Option<TextRange> {\n     Some(TextRange::new(range_start, range_end))\n }\n \n+fn is_possibly_unsafe(name_ref: &ast::NameRef) -> bool {\n+    name_ref\n+        .syntax()\n+        .parent()\n+        .and_then(|parent| {\n+            ast::FieldExpr::cast(parent.clone())\n+                .map(|_| true)\n+                .or_else(|| ast::RecordPatField::cast(parent).map(|_| true))\n+        })\n+        .unwrap_or(false)\n+}\n+\n fn highlight_element(\n     sema: &Semantics<RootDatabase>,\n     bindings_shadow_count: &mut FxHashMap<Name, u32>,\n@@ -484,10 +496,19 @@ fn highlight_element(\n \n             match name_kind {\n                 Some(NameClass::Definition(def)) => {\n-                    highlight_name(db, def) | HighlightModifier::Definition\n+                    highlight_name(db, def, false) | HighlightModifier::Definition\n+                }\n+                Some(NameClass::ConstReference(def)) => highlight_name(db, def, false),\n+                Some(NameClass::FieldShorthand { field, .. }) => {\n+                    let mut h = HighlightTag::Field.into();\n+                    if let Definition::Field(field) = field {\n+                        if let VariantDef::Union(_) = field.parent_def(db) {\n+                            h |= HighlightModifier::Unsafe;\n+                        }\n+                    }\n+\n+                    h\n                 }\n-                Some(NameClass::ConstReference(def)) => highlight_name(db, def),\n-                Some(NameClass::FieldShorthand { .. }) => HighlightTag::Field.into(),\n                 None => highlight_name_by_syntax(name) | HighlightModifier::Definition,\n             }\n         }\n@@ -498,6 +519,7 @@ fn highlight_element(\n         }\n         NAME_REF => {\n             let name_ref = element.into_node().and_then(ast::NameRef::cast).unwrap();\n+            let possibly_unsafe = is_possibly_unsafe(&name_ref);\n             match classify_name_ref(sema, &name_ref) {\n                 Some(name_kind) => match name_kind {\n                     NameRefClass::Definition(def) => {\n@@ -508,11 +530,13 @@ fn highlight_element(\n                                 binding_hash = Some(calc_binding_hash(&name, *shadow_count))\n                             }\n                         };\n-                        highlight_name(db, def)\n+                        highlight_name(db, def, possibly_unsafe)\n                     }\n                     NameRefClass::FieldShorthand { .. } => HighlightTag::Field.into(),\n                 },\n-                None if syntactic_name_ref_highlighting => highlight_name_ref_by_syntax(name_ref),\n+                None if syntactic_name_ref_highlighting => {\n+                    highlight_name_ref_by_syntax(name_ref, sema)\n+                }\n                 None => HighlightTag::UnresolvedReference.into(),\n             }\n         }\n@@ -652,10 +676,19 @@ fn is_child_of_impl(element: &SyntaxElement) -> bool {\n     }\n }\n \n-fn highlight_name(db: &RootDatabase, def: Definition) -> Highlight {\n+fn highlight_name(db: &RootDatabase, def: Definition, possibly_unsafe: bool) -> Highlight {\n     match def {\n         Definition::Macro(_) => HighlightTag::Macro,\n-        Definition::Field(_) => HighlightTag::Field,\n+        Definition::Field(field) => {\n+            let mut h = HighlightTag::Field.into();\n+            if possibly_unsafe {\n+                if let VariantDef::Union(_) = field.parent_def(db) {\n+                    h |= HighlightModifier::Unsafe;\n+                }\n+            }\n+\n+            return h;\n+        }\n         Definition::ModuleDef(def) => match def {\n             hir::ModuleDef::Module(_) => HighlightTag::Module,\n             hir::ModuleDef::Function(func) => {\n@@ -724,7 +757,7 @@ fn highlight_name_by_syntax(name: ast::Name) -> Highlight {\n     tag.into()\n }\n \n-fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n+fn highlight_name_ref_by_syntax(name: ast::NameRef, sema: &Semantics<RootDatabase>) -> Highlight {\n     let default = HighlightTag::UnresolvedReference;\n \n     let parent = match name.syntax().parent() {\n@@ -734,7 +767,20 @@ fn highlight_name_ref_by_syntax(name: ast::NameRef) -> Highlight {\n \n     let tag = match parent.kind() {\n         METHOD_CALL_EXPR => HighlightTag::Function,\n-        FIELD_EXPR => HighlightTag::Field,\n+        FIELD_EXPR => {\n+            let h = HighlightTag::Field;\n+            let is_union = ast::FieldExpr::cast(parent)\n+                .and_then(|field_expr| {\n+                    let field = sema.resolve_field(&field_expr)?;\n+                    Some(if let VariantDef::Union(_) = field.parent_def(sema.db) {\n+                        true\n+                    } else {\n+                        false\n+                    })\n+                })\n+                .unwrap_or(false);\n+            return if is_union { h | HighlightModifier::Unsafe } else { h.into() };\n+        }\n         PATH_SEGMENT => {\n             let path = match parent.parent().and_then(ast::Path::cast) {\n                 Some(it) => it,"}, {"sha": "cfc872832ae3d71a37a0b2dd874ad1dad93bad65", "filename": "crates/ra_ide/test_data/highlight_unsafe.html", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/be935b2b56dcbda5a5918d8c600552b0adbb3a96/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "raw_url": "https://github.com/rust-lang/rust/raw/be935b2b56dcbda5a5918d8c600552b0adbb3a96/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Ftest_data%2Fhighlight_unsafe.html?ref=be935b2b56dcbda5a5918d8c600552b0adbb3a96", "patch": "@@ -53,10 +53,10 @@\n     <span class=\"keyword\">let</span> <span class=\"variable declaration\">u</span> <span class=\"operator\">=</span> <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span><span class=\"punctuation\">;</span>\n     <span class=\"keyword unsafe\">unsafe</span> <span class=\"punctuation\">{</span>\n         <span class=\"function unsafe\">unsafe_fn</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n-        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field\">b</span><span class=\"punctuation\">;</span>\n+        <span class=\"keyword\">let</span> <span class=\"variable declaration\">b</span> <span class=\"operator\">=</span> <span class=\"variable\">u</span><span class=\"punctuation\">.</span><span class=\"field unsafe\">b</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword control\">match</span> <span class=\"variable\">u</span> <span class=\"punctuation\">{</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n-            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">b</span><span class=\"punctuation\">:</span> <span class=\"numeric_literal\">0</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n+            <span class=\"union\">Union</span> <span class=\"punctuation\">{</span> <span class=\"field unsafe\">a</span> <span class=\"punctuation\">}</span> <span class=\"operator\">=&gt;</span> <span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">,</span>\n         <span class=\"punctuation\">}</span>\n         <span class=\"struct\">HasUnsafeFn</span><span class=\"punctuation\">.</span><span class=\"function unsafe\">unsafe_method</span><span class=\"punctuation\">(</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>\n         <span class=\"keyword\">let</span> <span class=\"variable declaration\">y</span> <span class=\"operator\">=</span> <span class=\"operator unsafe\">*</span><span class=\"punctuation\">(</span><span class=\"variable\">x</span><span class=\"punctuation\">)</span><span class=\"punctuation\">;</span>"}]}