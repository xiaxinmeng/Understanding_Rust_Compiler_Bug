{"sha": "4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed", "node_id": "C_kwDOAAsO6NoAKDQ2MjBiOWY4MjMwZjBjMmI0ZTZlMWU1MTZiNWNlYmI0ZDUwZmEzZWQ", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-24T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2022-05-25T08:34:35Z"}, "message": "rustc_codegen_ssa: derive copy and clone for various enums", "tree": {"sha": "dd33af3ed39ec4889e1ad66dc76a37b59acefa96", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd33af3ed39ec4889e1ad66dc76a37b59acefa96"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed", "html_url": "https://github.com/rust-lang/rust/commit/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f0f6e365cbcbdc5576f4ce3cfe5dae1c75daae0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f0f6e365cbcbdc5576f4ce3cfe5dae1c75daae0", "html_url": "https://github.com/rust-lang/rust/commit/8f0f6e365cbcbdc5576f4ce3cfe5dae1c75daae0"}], "stats": {"total": 21, "additions": 2, "deletions": 19}, "files": [{"sha": "479328a557cfaf8a4b3b836c447f5ce70706bb43", "filename": "src/builder.rs", "status": "modified", "additions": 2, "deletions": 19, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=4620b9f8230f0c2b4e6e1e516b5cebb4d50fa3ed", "patch": "@@ -61,23 +61,6 @@ enum ExtremumOperation {\n     Min,\n }\n \n-trait EnumClone {\n-    fn clone(&self) -> Self;\n-}\n-\n-impl EnumClone for AtomicOrdering {\n-    fn clone(&self) -> Self {\n-        match *self {\n-            AtomicOrdering::Unordered => AtomicOrdering::Unordered,\n-            AtomicOrdering::Relaxed => AtomicOrdering::Relaxed,\n-            AtomicOrdering::Acquire => AtomicOrdering::Acquire,\n-            AtomicOrdering::Release => AtomicOrdering::Release,\n-            AtomicOrdering::AcquireRelease => AtomicOrdering::AcquireRelease,\n-            AtomicOrdering::SequentiallyConsistent => AtomicOrdering::SequentiallyConsistent,\n-        }\n-    }\n-}\n-\n pub struct Builder<'a: 'gcc, 'gcc, 'tcx> {\n     pub cx: &'a CodegenCx<'gcc, 'tcx>,\n     pub block: Block<'gcc>,\n@@ -102,9 +85,9 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             match order {\n                 // TODO(antoyo): does this make sense?\n                 AtomicOrdering::AcquireRelease | AtomicOrdering::Release => AtomicOrdering::Acquire,\n-                _ => order.clone(),\n+                _ => order,\n             };\n-        let previous_value = self.atomic_load(dst.get_type(), dst, load_ordering.clone(), Size::from_bytes(size));\n+        let previous_value = self.atomic_load(dst.get_type(), dst, load_ordering, Size::from_bytes(size));\n         let previous_var = func.new_local(None, previous_value.get_type(), \"previous_value\");\n         let return_value = func.new_local(None, previous_value.get_type(), \"return_value\");\n         self.llbb().add_assignment(None, previous_var, previous_value);"}]}