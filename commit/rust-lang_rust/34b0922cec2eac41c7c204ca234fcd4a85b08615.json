{"sha": "34b0922cec2eac41c7c204ca234fcd4a85b08615", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0YjA5MjJjZWMyZWFjNDFjN2MyMDRjYTIzNGZjZDRhODViMDg2MTU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-14T10:09:43Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-06-14T10:09:43Z"}, "message": "fix running a Miri that was built in bootstrap", "tree": {"sha": "59f3f8b8d2711d4a040eb6b7274b2263f000bafe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/59f3f8b8d2711d4a040eb6b7274b2263f000bafe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34b0922cec2eac41c7c204ca234fcd4a85b08615", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34b0922cec2eac41c7c204ca234fcd4a85b08615", "html_url": "https://github.com/rust-lang/rust/commit/34b0922cec2eac41c7c204ca234fcd4a85b08615", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34b0922cec2eac41c7c204ca234fcd4a85b08615/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac2f6cbcde00eebcb696143e76177c1600f63410", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac2f6cbcde00eebcb696143e76177c1600f63410", "html_url": "https://github.com/rust-lang/rust/commit/ac2f6cbcde00eebcb696143e76177c1600f63410"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "5a425baf0f61fb62ad1aa9127412b8af554ba988", "filename": "src/bin/miri.rs", "status": "modified", "additions": 23, "deletions": 15, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/34b0922cec2eac41c7c204ca234fcd4a85b08615/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34b0922cec2eac41c7c204ca234fcd4a85b08615/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=34b0922cec2eac41c7c204ca234fcd4a85b08615", "patch": "@@ -102,21 +102,26 @@ fn init_late_loggers() {\n \n /// Returns the \"default sysroot\" that Miri will use if no `--sysroot` flag is set.\n /// Should be a compile-time constant.\n-fn compile_time_sysroot() -> String {\n+fn compile_time_sysroot() -> Option<String> {\n+    if option_env!(\"RUSTC_STAGE\").is_some() {\n+        // This is being built as part of rustc, and gets shipped with rustup.\n+        // We can rely on the sysroot computation in librustc.\n+        return None;\n+    }\n+    // For builds outside rustc, we need to ensure that we got a sysroot\n+    // that gets used as a default.  The sysroot computation in librustc would\n+    // end up somewhere in the build dir.\n     // Taken from PR <https://github.com/Manishearth/rust-clippy/pull/911>.\n     let home = option_env!(\"RUSTUP_HOME\").or(option_env!(\"MULTIRUST_HOME\"));\n     let toolchain = option_env!(\"RUSTUP_TOOLCHAIN\").or(option_env!(\"MULTIRUST_TOOLCHAIN\"));\n-    match (home, toolchain) {\n+    Some(match (home, toolchain) {\n         (Some(home), Some(toolchain)) => format!(\"{}/toolchains/{}\", home, toolchain),\n         _ => {\n             option_env!(\"RUST_SYSROOT\")\n-                .expect(\n-                    \"could not find sysroot. Either set `MIRI_SYSROOT` at run-time, or at \\\n-                     build-time specify `RUST_SYSROOT` env var or use rustup or multirust\",\n-                )\n+                .expect(\"To build Miri without rustup, set the `RUST_SYSROOT` env var at build time\")\n                 .to_owned()\n         }\n-    }\n+    })\n }\n \n fn main() {\n@@ -165,14 +170,17 @@ fn main() {\n         }\n     }\n \n-    // Determine sysroot.\n-    let sysroot_flag = \"--sysroot\".to_string();\n-    if !rustc_args.contains(&sysroot_flag) {\n-        // We need to *always* set a --sysroot, as the \"default\" rustc uses is\n-        // somewhere in the directory miri was built in.\n-        // If no --sysroot is given, fall back to env vars that are read at *compile-time*.\n-        rustc_args.push(sysroot_flag);\n-        rustc_args.push(compile_time_sysroot());\n+    // Determine sysroot if needed.  Make sure we always call `compile_time_sysroot`\n+    // as that also does some sanity-checks of the environment we were built in.\n+    // FIXME: Ideally we'd turn a bad build env into a compile-time error, but\n+    // CTFE does not seem powerful enough for that yet.\n+    if let Some(sysroot) = compile_time_sysroot() {\n+        let sysroot_flag = \"--sysroot\".to_string();\n+        if !rustc_args.contains(&sysroot_flag) {\n+            // We need to overwrite the default that librustc would compute.\n+            rustc_args.push(sysroot_flag);\n+            rustc_args.push(sysroot);\n+        }\n     }\n \n     // Finally, add the default flags all the way in the beginning, but after the binary name."}]}