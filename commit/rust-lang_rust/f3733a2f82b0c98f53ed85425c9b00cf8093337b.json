{"sha": "f3733a2f82b0c98f53ed85425c9b00cf8093337b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYzNzMzYTJmODJiMGM5OGY1M2VkODU0MjVjOWIwMGNmODA5MzMzN2I=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-02T02:12:19Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-08-02T19:57:25Z"}, "message": "make `everybody_loops` keep item declarations", "tree": {"sha": "f5b2ba402ecfbf7cb2f20baa1ec49b1974520c53", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f5b2ba402ecfbf7cb2f20baa1ec49b1974520c53"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f3733a2f82b0c98f53ed85425c9b00cf8093337b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f3733a2f82b0c98f53ed85425c9b00cf8093337b", "html_url": "https://github.com/rust-lang/rust/commit/f3733a2f82b0c98f53ed85425c9b00cf8093337b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f3733a2f82b0c98f53ed85425c9b00cf8093337b/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed8d14db99fc79909274454c02073bc5bd0c0df2", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed8d14db99fc79909274454c02073bc5bd0c0df2", "html_url": "https://github.com/rust-lang/rust/commit/ed8d14db99fc79909274454c02073bc5bd0c0df2"}], "stats": {"total": 95, "additions": 71, "deletions": 24}, "files": [{"sha": "44fac8ae0a09aab4915f61d101d38e30057b8d7f", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f3733a2f82b0c98f53ed85425c9b00cf8093337b/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3733a2f82b0c98f53ed85425c9b00cf8093337b/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=f3733a2f82b0c98f53ed85425c9b00cf8093337b", "patch": "@@ -20,6 +20,7 @@\n \n #![feature(box_syntax)]\n #![cfg_attr(unix, feature(libc))]\n+#![feature(option_replace)]\n #![feature(quote)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_sort_by_cached_key)]"}, {"sha": "1e74ae10403a895fd69ce47aa60ead2303a33f5b", "filename": "src/librustc_driver/pretty.rs", "status": "modified", "additions": 70, "deletions": 24, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/f3733a2f82b0c98f53ed85425c9b00cf8093337b/src%2Flibrustc_driver%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f3733a2f82b0c98f53ed85425c9b00cf8093337b/src%2Flibrustc_driver%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fpretty.rs?ref=f3733a2f82b0c98f53ed85425c9b00cf8093337b", "patch": "@@ -33,6 +33,7 @@ use syntax::fold::{self, Folder};\n use syntax::print::{pprust};\n use syntax::print::pprust::PrintState;\n use syntax::ptr::P;\n+use syntax::util::ThinVec;\n use syntax::util::small_vector::SmallVector;\n use syntax_pos::{self, FileName};\n \n@@ -650,12 +651,17 @@ impl UserIdentifiedItem {\n // [#34511]: https://github.com/rust-lang/rust/issues/34511#issuecomment-322340401\n pub struct ReplaceBodyWithLoop<'a> {\n     within_static_or_const: bool,\n+    nested_blocks: Option<Vec<ast::Block>>,\n     sess: &'a Session,\n }\n \n impl<'a> ReplaceBodyWithLoop<'a> {\n     pub fn new(sess: &'a Session) -> ReplaceBodyWithLoop<'a> {\n-        ReplaceBodyWithLoop { within_static_or_const: false, sess }\n+        ReplaceBodyWithLoop {\n+            within_static_or_const: false,\n+            nested_blocks: None,\n+            sess\n+        }\n     }\n \n     fn run<R, F: FnOnce(&mut Self) -> R>(&mut self, is_const: bool, action: F) -> R {\n@@ -740,41 +746,81 @@ impl<'a> fold::Folder for ReplaceBodyWithLoop<'a> {\n     }\n \n     fn fold_block(&mut self, b: P<ast::Block>) -> P<ast::Block> {\n-        fn expr_to_block(rules: ast::BlockCheckMode,\n+        fn stmt_to_block(rules: ast::BlockCheckMode,\n                          recovered: bool,\n-                         e: Option<P<ast::Expr>>,\n-                         sess: &Session) -> P<ast::Block> {\n-            P(ast::Block {\n-                stmts: e.map(|e| {\n-                        ast::Stmt {\n-                            id: sess.next_node_id(),\n-                            span: e.span,\n-                            node: ast::StmtKind::Expr(e),\n-                        }\n-                    })\n-                    .into_iter()\n-                    .collect(),\n+                         s: Option<ast::Stmt>,\n+                         sess: &Session) -> ast::Block {\n+            ast::Block {\n+                stmts: s.into_iter().collect(),\n                 rules,\n                 id: sess.next_node_id(),\n                 span: syntax_pos::DUMMY_SP,\n                 recovered,\n-            })\n+            }\n         }\n \n-        if !self.within_static_or_const {\n-\n-            let empty_block = expr_to_block(BlockCheckMode::Default, false, None, self.sess);\n-            let loop_expr = P(ast::Expr {\n-                node: ast::ExprKind::Loop(empty_block, None),\n-                id: self.sess.next_node_id(),\n+        fn block_to_stmt(b: ast::Block, sess: &Session) -> ast::Stmt {\n+            let expr = P(ast::Expr {\n+                id: sess.next_node_id(),\n+                node: ast::ExprKind::Block(P(b), None),\n                 span: syntax_pos::DUMMY_SP,\n-                attrs: ast::ThinVec::new(),\n+                attrs: ThinVec::new(),\n             });\n \n-            expr_to_block(b.rules, b.recovered, Some(loop_expr), self.sess)\n+            ast::Stmt {\n+                id: sess.next_node_id(),\n+                node: ast::StmtKind::Expr(expr),\n+                span: syntax_pos::DUMMY_SP,\n+            }\n+        }\n+\n+        let empty_block = stmt_to_block(BlockCheckMode::Default, false, None, self.sess);\n+        let loop_expr = P(ast::Expr {\n+            node: ast::ExprKind::Loop(P(empty_block), None),\n+            id: self.sess.next_node_id(),\n+            span: syntax_pos::DUMMY_SP,\n+            attrs: ast::ThinVec::new(),\n+        });\n+\n+        let loop_stmt = ast::Stmt {\n+            id: self.sess.next_node_id(),\n+            span: syntax_pos::DUMMY_SP,\n+            node: ast::StmtKind::Expr(loop_expr),\n+        };\n \n-        } else {\n+        if self.within_static_or_const {\n             fold::noop_fold_block(b, self)\n+        } else {\n+            b.map(|b| {\n+                let old_blocks = self.nested_blocks.replace(vec![]);\n+\n+                let mut stmts = b.stmts.into_iter()\n+                                       .flat_map(|s| self.fold_stmt(s))\n+                                       .filter(|s| s.is_item())\n+                                       .collect::<Vec<ast::Stmt>>();\n+\n+                // we put a Some in there earlier with that replace(), so this is valid\n+                let new_blocks = self.nested_blocks.take().unwrap();\n+                self.nested_blocks = old_blocks;\n+                stmts.extend(new_blocks.into_iter().map(|b| block_to_stmt(b, &self.sess)));\n+\n+                let mut new_block = ast::Block {\n+                    stmts,\n+                    ..b\n+                };\n+\n+                if let Some(old_blocks) = self.nested_blocks.as_mut() {\n+                    //push our fresh block onto the cache and yield an empty block with `loop {}`\n+                    old_blocks.push(new_block);\n+\n+                    stmt_to_block(b.rules, b.recovered, Some(loop_stmt), self.sess)\n+                } else {\n+                    //push `loop {}` onto the end of our fresh block and yield that\n+                    new_block.stmts.push(loop_stmt);\n+\n+                    new_block\n+                }\n+            })\n         }\n     }\n "}]}