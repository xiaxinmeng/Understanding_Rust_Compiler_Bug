{"sha": "df74f2cde95e99bd6148dbb59de956871ab4fc8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRmNzRmMmNkZTk1ZTk5YmQ2MTQ4ZGJiNTlkZTk1Njg3MWFiNGZjOGU=", "commit": {"author": {"name": "Josh Matthews", "email": "josh@joshmatthews.net", "date": "2011-07-13T14:18:40Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-07-16T22:56:28Z"}, "message": "Fix error line display slicing.", "tree": {"sha": "e24c9295b50f2f03139ed28b92821e2d7fc06627", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e24c9295b50f2f03139ed28b92821e2d7fc06627"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/df74f2cde95e99bd6148dbb59de956871ab4fc8e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/df74f2cde95e99bd6148dbb59de956871ab4fc8e", "html_url": "https://github.com/rust-lang/rust/commit/df74f2cde95e99bd6148dbb59de956871ab4fc8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/df74f2cde95e99bd6148dbb59de956871ab4fc8e/comments", "author": {"login": "jdm", "id": 27658, "node_id": "MDQ6VXNlcjI3NjU4", "avatar_url": "https://avatars.githubusercontent.com/u/27658?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jdm", "html_url": "https://github.com/jdm", "followers_url": "https://api.github.com/users/jdm/followers", "following_url": "https://api.github.com/users/jdm/following{/other_user}", "gists_url": "https://api.github.com/users/jdm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jdm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jdm/subscriptions", "organizations_url": "https://api.github.com/users/jdm/orgs", "repos_url": "https://api.github.com/users/jdm/repos", "events_url": "https://api.github.com/users/jdm/events{/privacy}", "received_events_url": "https://api.github.com/users/jdm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "652da4ca55e5b579570083231a11680e9f889b11", "url": "https://api.github.com/repos/rust-lang/rust/commits/652da4ca55e5b579570083231a11680e9f889b11", "html_url": "https://github.com/rust-lang/rust/commit/652da4ca55e5b579570083231a11680e9f889b11"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "333c8fb8e2f18cbf7559d96e6be557911d86e07b", "filename": "src/comp/syntax/codemap.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/df74f2cde95e99bd6148dbb59de956871ab4fc8e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/df74f2cde95e99bd6148dbb59de956871ab4fc8e/src%2Fcomp%2Fsyntax%2Fcodemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fcodemap.rs?ref=df74f2cde95e99bd6148dbb59de956871ab4fc8e", "patch": "@@ -85,7 +85,7 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n             //        get access to the necessary lines.\n             auto rdr = ioivec::file_reader(lines.name);\n             auto file = str::unsafe_from_bytes_ivec(rdr.read_whole_stream());\n-            auto fm = codemap::get_filemap(cm, lines.name);\n+            auto fm = get_filemap(cm, lines.name);\n \n             // arbitrarily only print up to six lines of the error\n             auto max_lines = 6u;\n@@ -99,7 +99,7 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n             for (uint line in display_lines) {\n                 ioivec::stdout().write_str(#fmt(\"%s:%u \", fm.name,\n                                                 line + 1u));\n-                auto s = codemap::get_line(fm, line as int, file);\n+                auto s = get_line(fm, line as int, file);\n                 if (!str::ends_with(s, \"\\n\")) {\n                     s += \"\\n\";\n                 }\n@@ -119,6 +119,7 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n             // If there's one line at fault we can easily point to the problem\n             if (ivec::len(lines.lines) == 1u) {\n                 auto lo = codemap::lookup_pos(cm, option::get(sp).lo);\n+                auto lo = lookup_pos(cm, option::get(sp).lo);\n                 auto digits = 0u;\n                 auto num = lines.lines.(0) / 10u;\n \n@@ -131,7 +132,7 @@ fn emit_diagnostic(&option::t[span] sp, &str msg, &str kind, u8 color,\n                 while (left > 0u) { str::push_char(s, ' '); left -= 1u; }\n \n                 s += \"^\";\n-                auto hi = codemap::lookup_pos(cm, option::get(sp).hi);\n+                auto hi = lookup_pos(cm, option::get(sp).hi);\n                 if (hi.col != lo.col) {\n                     // the ^ already takes up one space\n                     auto width = hi.col - lo.col - 1u;\n@@ -170,13 +171,14 @@ fn span_to_lines(span sp, codemap::codemap cm) -> @file_lines {\n }\n \n fn get_line(filemap fm, int line, &str file) -> str {\n+    let uint begin = fm.lines.(line) - fm.lines.(0);\n     let uint end;\n     if ((line as uint) + 1u >= ivec::len(fm.lines)) {\n         end = str::byte_len(file);\n     } else {\n-        end = fm.lines.(line + 1);\n+        end = fm.lines.(line + 1) - fm.lines.(0);\n     }\n-    ret str::slice(file, fm.lines.(line), end);\n+    ret str::slice(file, begin, end);\n }\n \n fn get_filemap(codemap cm, str filename) -> filemap {"}]}