{"sha": "13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDk0ZDVmYTgxMjlhMzRmNWM3N2ExYmNkNzY5ODNmNWFlZDI0MzQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T19:48:14Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T19:48:14Z"}, "message": "Auto merge of #43559 - Nashenas88:nll-region-renumberer, r=arielb1\n\nNon-lexical lifetimes region renumberer\n\nRegenerates region variables for all regions in a cloned MIR in the nll mir pass. This is part of the work for #43234.", "tree": {"sha": "e08167816a7432adf3b96b80e7291de81b73ab20", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e08167816a7432adf3b96b80e7291de81b73ab20"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "html_url": "https://github.com/rust-lang/rust/commit/13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d94d5fa8129a34f5c77a1bcd76983f5aed2434/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6179602bea71607a9ea63197eca423fcce5f7b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6179602bea71607a9ea63197eca423fcce5f7b0", "html_url": "https://github.com/rust-lang/rust/commit/b6179602bea71607a9ea63197eca423fcce5f7b0"}, {"sha": "0d29cd4c80a9cc042d34ea31d70ff42830df0001", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d29cd4c80a9cc042d34ea31d70ff42830df0001", "html_url": "https://github.com/rust-lang/rust/commit/0d29cd4c80a9cc042d34ea31d70ff42830df0001"}], "stats": {"total": 128, "additions": 114, "deletions": 14}, "files": [{"sha": "a6d115bf0391280e17c162b01ca146d9858b5674", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13d94d5fa8129a34f5c77a1bcd76983f5aed2434/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d94d5fa8129a34f5c77a1bcd76983f5aed2434/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "patch": "@@ -753,6 +753,7 @@ macro_rules! make_mir_visitor {\n make_mir_visitor!(Visitor,);\n make_mir_visitor!(MutVisitor,mut);\n \n+#[derive(Copy, Clone, Debug)]\n pub enum Lookup {\n     Loc(Location),\n     Src(SourceInfo),"}, {"sha": "fb4764c4962682bef62e135f33050ff536f09465", "filename": "src/librustc_mir/transform/nll.rs", "status": "modified", "additions": 113, "deletions": 14, "changes": 127, "blob_url": "https://github.com/rust-lang/rust/blob/13d94d5fa8129a34f5c77a1bcd76983f5aed2434/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d94d5fa8129a34f5c77a1bcd76983f5aed2434/src%2Flibrustc_mir%2Ftransform%2Fnll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fnll.rs?ref=13d94d5fa8129a34f5c77a1bcd76983f5aed2434", "patch": "@@ -8,26 +8,119 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-use rustc::ty::TyCtxt;\n-use rustc::mir::Mir;\n-use rustc::mir::visit::MutVisitor;\n+use rustc::ty::TypeFoldable;\n+use rustc::ty::subst::{Kind, Substs};\n+use rustc::ty::{Ty, TyCtxt, ClosureSubsts, RegionVid, RegionKind};\n+use rustc::mir::{Mir, Location, Rvalue, BasicBlock, Statement, StatementKind};\n+use rustc::mir::visit::{MutVisitor, Lookup};\n use rustc::mir::transform::{MirPass, MirSource};\n+use rustc::infer::{self, InferCtxt};\n+use syntax_pos::DUMMY_SP;\n+use std::collections::HashMap;\n \n #[allow(dead_code)]\n-struct NLLVisitor<'a, 'tcx: 'a> {\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+struct NLLVisitor<'a, 'gcx: 'a + 'tcx, 'tcx: 'a> {\n+    lookup_map: HashMap<RegionVid, Lookup>,\n+    infcx: InferCtxt<'a, 'gcx, 'tcx>,\n }\n \n-impl<'a, 'tcx> NLLVisitor<'a, 'tcx> {\n-    pub fn new(tcx: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n+impl<'a, 'gcx, 'tcx> NLLVisitor<'a, 'gcx, 'tcx> {\n+    pub fn new(infcx: InferCtxt<'a, 'gcx, 'tcx>) -> Self {\n         NLLVisitor {\n-            tcx: tcx\n+            infcx: infcx,\n+            lookup_map: HashMap::new(),\n+        }\n+    }\n+\n+    pub fn into_results(self) -> HashMap<RegionVid, Lookup> {\n+        self.lookup_map\n+    }\n+\n+    fn renumber_regions<T>(&self, value: &T) -> T where T: TypeFoldable<'tcx> {\n+        self.infcx.tcx.fold_regions(value, &mut false, |_region, _depth| {\n+            self.infcx.next_region_var(infer::MiscVariable(DUMMY_SP))\n+        })\n+    }\n+\n+    fn store_region(&mut self, region: &RegionKind, lookup: Lookup) {\n+        if let RegionKind::ReVar(rid) = *region {\n+            self.lookup_map.entry(rid).or_insert(lookup);\n+        }\n+    }\n+\n+    fn store_ty_regions(&mut self, ty: &Ty<'tcx>, lookup: Lookup) {\n+        for region in ty.regions() {\n+            self.store_region(region, lookup);\n+        }\n+    }\n+\n+    fn store_kind_regions(&mut self, kind: &'tcx Kind, lookup: Lookup) {\n+        if let Some(ty) = kind.as_type() {\n+            self.store_ty_regions(&ty, lookup);\n+        } else if let Some(region) = kind.as_region() {\n+            self.store_region(region, lookup);\n         }\n     }\n }\n \n-impl<'a, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'tcx> {\n-    // FIXME: Nashenas88: implement me!\n+impl<'a, 'gcx, 'tcx> MutVisitor<'tcx> for NLLVisitor<'a, 'gcx, 'tcx> {\n+    fn visit_ty(&mut self, ty: &mut Ty<'tcx>, lookup: Lookup) {\n+        let old_ty = *ty;\n+        *ty = self.renumber_regions(&old_ty);\n+        self.store_ty_regions(ty, lookup);\n+    }\n+\n+    fn visit_substs(&mut self, substs: &mut &'tcx Substs<'tcx>, location: Location) {\n+        *substs = self.renumber_regions(&{*substs});\n+        let lookup = Lookup::Loc(location);\n+        for kind in *substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n+    }\n+\n+    fn visit_rvalue(&mut self, rvalue: &mut Rvalue<'tcx>, location: Location) {\n+        match *rvalue {\n+            Rvalue::Ref(ref mut r, _, _) => {\n+                let old_r = *r;\n+                *r = self.renumber_regions(&old_r);\n+                let lookup = Lookup::Loc(location);\n+                self.store_region(r, lookup);\n+            }\n+            Rvalue::Use(..) |\n+            Rvalue::Repeat(..) |\n+            Rvalue::Len(..) |\n+            Rvalue::Cast(..) |\n+            Rvalue::BinaryOp(..) |\n+            Rvalue::CheckedBinaryOp(..) |\n+            Rvalue::UnaryOp(..) |\n+            Rvalue::Discriminant(..) |\n+            Rvalue::NullaryOp(..) |\n+            Rvalue::Aggregate(..) => {\n+                // These variants don't contain regions.\n+            }\n+        }\n+        self.super_rvalue(rvalue, location);\n+    }\n+\n+    fn visit_closure_substs(&mut self,\n+                            substs: &mut ClosureSubsts<'tcx>,\n+                            location: Location) {\n+        *substs = self.renumber_regions(substs);\n+        let lookup = Lookup::Loc(location);\n+        for kind in substs.substs {\n+            self.store_kind_regions(kind, lookup);\n+        }\n+    }\n+\n+    fn visit_statement(&mut self,\n+                       block: BasicBlock,\n+                       statement: &mut Statement<'tcx>,\n+                       location: Location) {\n+        if let StatementKind::EndRegion(_) = statement.kind {\n+            statement.kind = StatementKind::Nop;\n+        }\n+        self.super_statement(block, statement, location);\n+    }\n }\n \n // MIR Pass for non-lexical lifetimes\n@@ -38,10 +131,16 @@ impl MirPass for NLL {\n                           tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                           _: MirSource,\n                           mir: &mut Mir<'tcx>) {\n-        if tcx.sess.opts.debugging_opts.nll {\n-            // Clone mir so we can mutate it without disturbing the rest\n-            // of the compiler\n-            NLLVisitor::new(tcx).visit_mir(&mut mir.clone());\n+        if !tcx.sess.opts.debugging_opts.nll {\n+            return;\n         }\n+\n+        tcx.infer_ctxt().enter(|infcx| {\n+            // Clone mir so we can mutate it without disturbing the rest of the compiler\n+            let mut renumbered_mir = mir.clone();\n+            let mut visitor = NLLVisitor::new(infcx);\n+            visitor.visit_mir(&mut renumbered_mir);\n+            let _results = visitor.into_results();\n+        })\n     }\n }\n\\ No newline at end of file"}]}