{"sha": "366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2NmM2NmUxNzFiOTRlZjc4Y2U3YjhkYWYyNTMwZGJkYzMwZWFkYjk=", "commit": {"author": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-22T21:04:16Z"}, "committer": {"name": "nham", "email": "hamann.nick@gmail.com", "date": "2014-07-22T21:04:16Z"}, "message": "Implement PartialEq, Eq for TrieMap, TrieSet", "tree": {"sha": "904105d996aa3344ee8e81fb237d7dc79873957f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/904105d996aa3344ee8e81fb237d7dc79873957f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "comment_count": 9, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "html_url": "https://github.com/rust-lang/rust/commit/366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/366c66e171b94ef78ce7b8daf2530dbdc30eadb9/comments", "author": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nham", "id": 546409, "node_id": "MDQ6VXNlcjU0NjQwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/546409?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nham", "html_url": "https://github.com/nham", "followers_url": "https://api.github.com/users/nham/followers", "following_url": "https://api.github.com/users/nham/following{/other_user}", "gists_url": "https://api.github.com/users/nham/gists{/gist_id}", "starred_url": "https://api.github.com/users/nham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nham/subscriptions", "organizations_url": "https://api.github.com/users/nham/orgs", "repos_url": "https://api.github.com/users/nham/repos", "events_url": "https://api.github.com/users/nham/events{/privacy}", "received_events_url": "https://api.github.com/users/nham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9e83d29f30046292f43e982893517f9aee47fa48", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e83d29f30046292f43e982893517f9aee47fa48", "html_url": "https://github.com/rust-lang/rust/commit/9e83d29f30046292f43e982893517f9aee47fa48"}], "stats": {"total": 64, "additions": 46, "deletions": 18}, "files": [{"sha": "424cda92c12d45b60acf71afe5d53331d3aa4ed0", "filename": "src/libcollections/trie.rs", "status": "modified", "additions": 46, "deletions": 18, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/366c66e171b94ef78ce7b8daf2530dbdc30eadb9/src%2Flibcollections%2Ftrie.rs", "raw_url": "https://github.com/rust-lang/rust/raw/366c66e171b94ef78ce7b8daf2530dbdc30eadb9/src%2Flibcollections%2Ftrie.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftrie.rs?ref=366c66e171b94ef78ce7b8daf2530dbdc30eadb9", "patch": "@@ -41,6 +41,15 @@ pub struct TrieMap<T> {\n     length: uint\n }\n \n+impl<T: PartialEq> PartialEq for TrieMap<T> {\n+    fn eq(&self, other: &TrieMap<T>) -> bool {\n+        self.len() == other.len() &&\n+            self.iter().zip(other.iter()).all(|(a, b)| a == b)\n+    }\n+}\n+\n+impl<T: Eq> Eq for TrieMap<T> {}\n+\n impl<T> Collection for TrieMap<T> {\n     /// Return the number of elements in the map\n     #[inline]\n@@ -302,7 +311,7 @@ impl<S: Writer, T: Hash<S>> Hash<S> for TrieMap<T> {\n }\n \n #[allow(missing_doc)]\n-#[deriving(Hash)]\n+#[deriving(Hash, PartialEq, Eq)]\n pub struct TrieSet {\n     map: TrieMap<()>\n }\n@@ -671,6 +680,7 @@ mod test_map {\n     use std::prelude::*;\n     use std::iter::range_step;\n     use std::uint;\n+    use std::hash;\n \n     use {MutableMap, Map};\n     use super::{TrieMap, TrieNode, Internal, External, Nothing};\n@@ -943,6 +953,41 @@ mod test_map {\n         assert!(m_lower.iter().all(|(_, &x)| x == 0));\n         assert!(m_upper.iter().all(|(_, &x)| x == 0));\n     }\n+\n+    #[test]\n+    fn test_eq() {\n+        let mut a = TrieMap::new();\n+        let mut b = TrieMap::new();\n+\n+        assert!(a == b);\n+        assert!(a.insert(0, 5i));\n+        assert!(a != b);\n+        assert!(b.insert(0, 4i));\n+        assert!(a != b);\n+        assert!(a.insert(5, 19));\n+        assert!(a != b);\n+        assert!(!b.insert(0, 5));\n+        assert!(a != b);\n+        assert!(b.insert(5, 19));\n+        assert!(a == b);\n+    }\n+\n+    #[test]\n+    fn test_hash() {\n+      let mut x = TrieMap::new();\n+      let mut y = TrieMap::new();\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+      x.insert(1, 'a');\n+      x.insert(2, 'b');\n+      x.insert(3, 'c');\n+\n+      y.insert(3, 'c');\n+      y.insert(2, 'b');\n+      y.insert(1, 'a');\n+\n+      assert!(hash::hash(&x) == hash::hash(&y));\n+    }\n }\n \n #[cfg(test)]\n@@ -1059,7 +1104,6 @@ mod bench_map {\n mod test_set {\n     use std::prelude::*;\n     use std::uint;\n-    use std::hash;\n \n     use {MutableSet, Set};\n     use super::TrieSet;\n@@ -1093,20 +1137,4 @@ mod test_set {\n             assert!(set.contains(x));\n         }\n     }\n-\n-    #[test]\n-    fn test_hash() {\n-      let mut x = TrieSet::new();\n-      let mut y = TrieSet::new();\n-\n-      x.insert(1);\n-      x.insert(2);\n-      x.insert(3);\n-\n-      y.insert(3);\n-      y.insert(2);\n-      y.insert(1);\n-\n-      assert!(hash::hash(&x) == hash::hash(&y));\n-    }\n }"}]}