{"sha": "d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyY2I1YThjMzVjZDQwOTA5ZjA5N2JkYmJjNTlmYzg3MGYwYThlOTE=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-08-30T00:41:25Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-16T18:57:19Z"}, "message": "Move lint emitter to its own method", "tree": {"sha": "fb270082ba95fbf93e14e5e2c4e42c45ecdc0843", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fb270082ba95fbf93e14e5e2c4e42c45ecdc0843"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91", "html_url": "https://github.com/rust-lang/rust/commit/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "916936c77488d0a75cc254b5bdc9a787c8ed8768", "url": "https://api.github.com/repos/rust-lang/rust/commits/916936c77488d0a75cc254b5bdc9a787c8ed8768", "html_url": "https://github.com/rust-lang/rust/commit/916936c77488d0a75cc254b5bdc9a787c8ed8768"}], "stats": {"total": 45, "additions": 27, "deletions": 18}, "files": [{"sha": "48ff7fff5edfe1ba260bc3edcb5a9d857482c863", "filename": "src/librustc_mir/hair/pattern/_match.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2F_match.rs?ref=d2cb5a8c35cd40909f097bdbbc59fc870f0a8e91", "patch": "@@ -1739,24 +1739,7 @@ fn split_grouped_constructors<'p, 'tcx>(\n                 let mut borders: Vec<_> = row_borders.chain(ctor_borders).collect();\n                 borders.sort_unstable();\n \n-                if let (true, Some(hir_id)) = (!overlaps.is_empty(), hir_id) {\n-                    let mut err = tcx.struct_span_lint_hir(\n-                        lint::builtin::OVERLAPPING_PATTERNS,\n-                        hir_id,\n-                        ctor_range.span,\n-                        \"multiple patterns covering the same range\",\n-                    );\n-                    err.span_label(ctor_range.span, \"overlapping patterns\");\n-                    for int_range in overlaps {\n-                        // Use the real type for user display of the ranges:\n-                        err.span_label(int_range.span, &format!(\n-                            \"this range overlaps on `{}`\",\n-                            IntRange::range_to_ctor(tcx, ty, int_range.range, DUMMY_SP)\n-                                .display(tcx),\n-                        ));\n-                    }\n-                    err.emit();\n-                }\n+                lint_unreachable_patterns(tcx, hir_id, ctor_range, ty, overlaps);\n \n                 // We're going to iterate through every pair of borders, making sure that each\n                 // represents an interval of nonnegative length, and convert each such interval\n@@ -1787,6 +1770,32 @@ fn split_grouped_constructors<'p, 'tcx>(\n     split_ctors\n }\n \n+fn lint_unreachable_patterns(\n+    tcx: TyCtxt<'tcx>,\n+    hir_id: Option<HirId>,\n+    ctor_range: IntRange<'tcx>,\n+    ty: Ty<'tcx>,\n+    overlaps: Vec<IntRange<'tcx>>,\n+) {\n+    if let (true, Some(hir_id)) = (!overlaps.is_empty(), hir_id) {\n+        let mut err = tcx.struct_span_lint_hir(\n+            lint::builtin::OVERLAPPING_PATTERNS,\n+            hir_id,\n+            ctor_range.span,\n+            \"multiple patterns covering the same range\",\n+        );\n+        err.span_label(ctor_range.span, \"overlapping patterns\");\n+        for int_range in overlaps {\n+            // Use the real type for user display of the ranges:\n+            err.span_label(int_range.span, &format!(\n+                \"this range overlaps on `{}`\",\n+                IntRange::range_to_ctor(tcx, ty, int_range.range, DUMMY_SP).display(tcx),\n+            ));\n+        }\n+        err.emit();\n+    }\n+}\n+\n fn constructor_covered_by_range<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     param_env: ty::ParamEnv<'tcx>,"}]}