{"sha": "24dc0521324830dd4a64f528413a1650493ced7a", "node_id": "C_kwDOAAsO6NoAKDI0ZGMwNTIxMzI0ODMwZGQ0YTY0ZjUyODQxM2ExNjUwNDkzY2VkN2E", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-09T22:39:50Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-20T23:58:22Z"}, "message": "Delete Decoder::read_seq_elt", "tree": {"sha": "7e0bf96c84f05fded3158ca268ce552c779d2c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7e0bf96c84f05fded3158ca268ce552c779d2c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24dc0521324830dd4a64f528413a1650493ced7a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24dc0521324830dd4a64f528413a1650493ced7a", "html_url": "https://github.com/rust-lang/rust/commit/24dc0521324830dd4a64f528413a1650493ced7a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24dc0521324830dd4a64f528413a1650493ced7a/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d8595e0d78377a39882b1b9cad8159adb365d69", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d8595e0d78377a39882b1b9cad8159adb365d69", "html_url": "https://github.com/rust-lang/rust/commit/2d8595e0d78377a39882b1b9cad8159adb365d69"}], "stats": {"total": 29, "additions": 9, "deletions": 20}, "files": [{"sha": "2ac5d5431a5b6e728c44238753fb865318494d45", "filename": "compiler/rustc_query_system/src/dep_graph/serialized.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fserialized.rs?ref=24dc0521324830dd4a64f528413a1650493ced7a", "patch": "@@ -133,7 +133,7 @@ impl<'a, K: DepKind + Decodable<opaque::Decoder<'a>>> Decodable<opaque::Decoder<\n             d.read_seq(|d, len| {\n                 let start = edge_list_data.len().try_into().unwrap();\n                 for _ in 0..len {\n-                    let edge = d.read_seq_elt(Decodable::decode);\n+                    let edge = Decodable::decode(d);\n                     edge_list_data.push(edge);\n                 }\n                 let end = edge_list_data.len().try_into().unwrap();"}, {"sha": "e53a6dc47b40ae5c760d945810c39dd76b803b47", "filename": "compiler/rustc_serialize/src/collection_impls.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fcollection_impls.rs?ref=24dc0521324830dd4a64f528413a1650493ced7a", "patch": "@@ -18,7 +18,7 @@ impl<S: Encoder, A: Array<Item: Encodable<S>>> Encodable<S> for SmallVec<A> {\n \n impl<D: Decoder, A: Array<Item: Decodable<D>>> Decodable<D> for SmallVec<A> {\n     fn decode(d: &mut D) -> SmallVec<A> {\n-        d.read_seq(|d, len| (0..len).map(|_| d.read_seq_elt(|d| Decodable::decode(d))).collect())\n+        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n     }\n }\n \n@@ -35,7 +35,7 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for LinkedList<T> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for LinkedList<T> {\n     fn decode(d: &mut D) -> LinkedList<T> {\n-        d.read_seq(|d, len| (0..len).map(|_| d.read_seq_elt(|d| Decodable::decode(d))).collect())\n+        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n     }\n }\n \n@@ -52,7 +52,7 @@ impl<S: Encoder, T: Encodable<S>> Encodable<S> for VecDeque<T> {\n \n impl<D: Decoder, T: Decodable<D>> Decodable<D> for VecDeque<T> {\n     fn decode(d: &mut D) -> VecDeque<T> {\n-        d.read_seq(|d, len| (0..len).map(|_| d.read_seq_elt(|d| Decodable::decode(d))).collect())\n+        d.read_seq(|d, len| (0..len).map(|_| Decodable::decode(d)).collect())\n     }\n }\n \n@@ -112,7 +112,7 @@ where\n         d.read_seq(|d, len| {\n             let mut set = BTreeSet::new();\n             for _ in 0..len {\n-                set.insert(d.read_seq_elt(|d| Decodable::decode(d)));\n+                set.insert(Decodable::decode(d));\n             }\n             set\n         })\n@@ -191,7 +191,7 @@ where\n             let state = Default::default();\n             let mut set = HashSet::with_capacity_and_hasher(len, state);\n             for _ in 0..len {\n-                set.insert(d.read_seq_elt(|d| Decodable::decode(d)));\n+                set.insert(Decodable::decode(d));\n             }\n             set\n         })\n@@ -260,7 +260,7 @@ where\n             let state = Default::default();\n             let mut set = indexmap::IndexSet::with_capacity_and_hasher(len, state);\n             for _ in 0..len {\n-                set.insert(d.read_seq_elt(|d| Decodable::decode(d)));\n+                set.insert(Decodable::decode(d));\n             }\n             set\n         })"}, {"sha": "9a45bc56ce17af55a2f10b8a8d7cd0c140300746", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24dc0521324830dd4a64f528413a1650493ced7a/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=24dc0521324830dd4a64f528413a1650493ced7a", "patch": "@@ -230,14 +230,6 @@ pub trait Decoder {\n         f(self, len)\n     }\n \n-    #[inline]\n-    fn read_seq_elt<T, F>(&mut self, f: F) -> T\n-    where\n-        F: FnOnce(&mut Self) -> T,\n-    {\n-        f(self)\n-    }\n-\n     fn read_map<T, F>(&mut self, f: F) -> T\n     where\n         F: FnOnce(&mut Self, usize) -> T,\n@@ -449,10 +441,7 @@ impl<D: Decoder, T: Decodable<D>> Decodable<D> for Vec<T> {\n             unsafe {\n                 let ptr: *mut T = vec.as_mut_ptr();\n                 for i in 0..len {\n-                    std::ptr::write(\n-                        ptr.offset(i as isize),\n-                        d.read_seq_elt(|d| Decodable::decode(d)),\n-                    );\n+                    std::ptr::write(ptr.offset(i as isize), Decodable::decode(d));\n                 }\n                 vec.set_len(len);\n             }\n@@ -474,7 +463,7 @@ impl<D: Decoder, const N: usize> Decodable<D> for [u8; N] {\n             assert!(len == N);\n             let mut v = [0u8; N];\n             for i in 0..len {\n-                v[i] = d.read_seq_elt(|d| Decodable::decode(d));\n+                v[i] = Decodable::decode(d);\n             }\n             v\n         })"}]}