{"sha": "ff855547f463aecb0c86f8f78ebc605ef097664b", "node_id": "C_kwDOAAsO6NoAKGZmODU1NTQ3ZjQ2M2FlY2IwYzg2ZjhmNzhlYmM2MDVlZjA5NzY2NGI", "commit": {"author": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-05-07T03:20:58Z"}, "committer": {"name": "Ben Kimock", "email": "kimockb@gmail.com", "date": "2023-05-07T03:22:32Z"}, "message": "Rename InstCombine to InstSimplify", "tree": {"sha": "ec64c766c0cbefd7c35d2edac9de2b5ae2b26b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec64c766c0cbefd7c35d2edac9de2b5ae2b26b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff855547f463aecb0c86f8f78ebc605ef097664b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff855547f463aecb0c86f8f78ebc605ef097664b", "html_url": "https://github.com/rust-lang/rust/commit/ff855547f463aecb0c86f8f78ebc605ef097664b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff855547f463aecb0c86f8f78ebc605ef097664b/comments", "author": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "saethlin", "id": 12105168, "node_id": "MDQ6VXNlcjEyMTA1MTY4", "avatar_url": "https://avatars.githubusercontent.com/u/12105168?v=4", "gravatar_id": "", "url": "https://api.github.com/users/saethlin", "html_url": "https://github.com/saethlin", "followers_url": "https://api.github.com/users/saethlin/followers", "following_url": "https://api.github.com/users/saethlin/following{/other_user}", "gists_url": "https://api.github.com/users/saethlin/gists{/gist_id}", "starred_url": "https://api.github.com/users/saethlin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/saethlin/subscriptions", "organizations_url": "https://api.github.com/users/saethlin/orgs", "repos_url": "https://api.github.com/users/saethlin/repos", "events_url": "https://api.github.com/users/saethlin/events{/privacy}", "received_events_url": "https://api.github.com/users/saethlin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a77c552485a19245a266bc03c450676c666b605f", "url": "https://api.github.com/repos/rust-lang/rust/commits/a77c552485a19245a266bc03c450676c666b605f", "html_url": "https://github.com/rust-lang/rust/commit/a77c552485a19245a266bc03c450676c666b605f"}], "stats": {"total": 200, "additions": 100, "deletions": 100}, "files": [{"sha": "6bff535586ad30f996167a5a2d0f621f3e1fee27", "filename": "compiler/rustc_mir_transform/src/instsimplify.rs", "status": "renamed", "additions": 25, "deletions": 25, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Finstsimplify.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,6 +1,6 @@\n //! Performs various peephole optimizations.\n \n-use crate::simplify::combine_duplicate_switch_targets;\n+use crate::simplify::simplify_duplicate_switch_targets;\n use crate::MirPass;\n use rustc_hir::Mutability;\n use rustc_middle::mir::*;\n@@ -10,15 +10,15 @@ use rustc_middle::ty::{self, ParamEnv, SubstsRef, Ty, TyCtxt};\n use rustc_span::symbol::Symbol;\n use rustc_target::abi::FieldIdx;\n \n-pub struct InstCombine;\n+pub struct InstSimplify;\n \n-impl<'tcx> MirPass<'tcx> for InstCombine {\n+impl<'tcx> MirPass<'tcx> for InstSimplify {\n     fn is_enabled(&self, sess: &rustc_session::Session) -> bool {\n         sess.mir_opt_level() > 0\n     }\n \n     fn run_pass(&self, tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n-        let ctx = InstCombineContext {\n+        let ctx = InstSimplifyContext {\n             tcx,\n             local_decls: &body.local_decls,\n             param_env: tcx.param_env_reveal_all_normalized(body.source.def_id()),\n@@ -27,43 +27,43 @@ impl<'tcx> MirPass<'tcx> for InstCombine {\n             for statement in block.statements.iter_mut() {\n                 match statement.kind {\n                     StatementKind::Assign(box (_place, ref mut rvalue)) => {\n-                        ctx.combine_bool_cmp(&statement.source_info, rvalue);\n-                        ctx.combine_ref_deref(&statement.source_info, rvalue);\n-                        ctx.combine_len(&statement.source_info, rvalue);\n-                        ctx.combine_cast(&statement.source_info, rvalue);\n+                        ctx.simplify_bool_cmp(&statement.source_info, rvalue);\n+                        ctx.simplify_ref_deref(&statement.source_info, rvalue);\n+                        ctx.simplify_len(&statement.source_info, rvalue);\n+                        ctx.simplify_cast(&statement.source_info, rvalue);\n                     }\n                     _ => {}\n                 }\n             }\n \n-            ctx.combine_primitive_clone(\n+            ctx.simplify_primitive_clone(\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n-            ctx.combine_intrinsic_assert(\n+            ctx.simplify_intrinsic_assert(\n                 &mut block.terminator.as_mut().unwrap(),\n                 &mut block.statements,\n             );\n-            combine_duplicate_switch_targets(block.terminator.as_mut().unwrap());\n+            simplify_duplicate_switch_targets(block.terminator.as_mut().unwrap());\n         }\n     }\n }\n \n-struct InstCombineContext<'tcx, 'a> {\n+struct InstSimplifyContext<'tcx, 'a> {\n     tcx: TyCtxt<'tcx>,\n     local_decls: &'a LocalDecls<'tcx>,\n     param_env: ParamEnv<'tcx>,\n }\n \n-impl<'tcx> InstCombineContext<'tcx, '_> {\n-    fn should_combine(&self, source_info: &SourceInfo, rvalue: &Rvalue<'tcx>) -> bool {\n+impl<'tcx> InstSimplifyContext<'tcx, '_> {\n+    fn should_simplify(&self, source_info: &SourceInfo, rvalue: &Rvalue<'tcx>) -> bool {\n         self.tcx.consider_optimizing(|| {\n-            format!(\"InstCombine - Rvalue: {:?} SourceInfo: {:?}\", rvalue, source_info)\n+            format!(\"InstSimplify - Rvalue: {:?} SourceInfo: {:?}\", rvalue, source_info)\n         })\n     }\n \n     /// Transform boolean comparisons into logical operations.\n-    fn combine_bool_cmp(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n+    fn simplify_bool_cmp(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         match rvalue {\n             Rvalue::BinaryOp(op @ (BinOp::Eq | BinOp::Ne), box (a, b)) => {\n                 let new = match (op, self.try_eval_bool(a), self.try_eval_bool(b)) {\n@@ -94,7 +94,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n                     _ => None,\n                 };\n \n-                if let Some(new) = new && self.should_combine(source_info, rvalue) {\n+                if let Some(new) = new && self.should_simplify(source_info, rvalue) {\n                     *rvalue = new;\n                 }\n             }\n@@ -109,14 +109,14 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n     }\n \n     /// Transform \"&(*a)\" ==> \"a\".\n-    fn combine_ref_deref(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n+    fn simplify_ref_deref(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         if let Rvalue::Ref(_, _, place) = rvalue {\n             if let Some((base, ProjectionElem::Deref)) = place.as_ref().last_projection() {\n                 if rvalue.ty(self.local_decls, self.tcx) != base.ty(self.local_decls, self.tcx).ty {\n                     return;\n                 }\n \n-                if !self.should_combine(source_info, rvalue) {\n+                if !self.should_simplify(source_info, rvalue) {\n                     return;\n                 }\n \n@@ -129,11 +129,11 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n     }\n \n     /// Transform \"Len([_; N])\" ==> \"N\".\n-    fn combine_len(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n+    fn simplify_len(&self, source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         if let Rvalue::Len(ref place) = *rvalue {\n             let place_ty = place.ty(self.local_decls, self.tcx).ty;\n             if let ty::Array(_, len) = *place_ty.kind() {\n-                if !self.should_combine(source_info, rvalue) {\n+                if !self.should_simplify(source_info, rvalue) {\n                     return;\n                 }\n \n@@ -144,7 +144,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         }\n     }\n \n-    fn combine_cast(&self, _source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n+    fn simplify_cast(&self, _source_info: &SourceInfo, rvalue: &mut Rvalue<'tcx>) {\n         if let Rvalue::Cast(kind, operand, cast_ty) = rvalue {\n             let operand_ty = operand.ty(self.local_decls, self.tcx);\n             if operand_ty == *cast_ty {\n@@ -196,7 +196,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         }\n     }\n \n-    fn combine_primitive_clone(\n+    fn simplify_primitive_clone(\n         &self,\n         terminator: &mut Terminator<'tcx>,\n         statements: &mut Vec<Statement<'tcx>>,\n@@ -239,7 +239,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n \n         if !self.tcx.consider_optimizing(|| {\n             format!(\n-                \"InstCombine - Call: {:?} SourceInfo: {:?}\",\n+                \"InstSimplify - Call: {:?} SourceInfo: {:?}\",\n                 (fn_def_id, fn_substs),\n                 terminator.source_info\n             )\n@@ -262,7 +262,7 @@ impl<'tcx> InstCombineContext<'tcx, '_> {\n         terminator.kind = TerminatorKind::Goto { target: destination_block };\n     }\n \n-    fn combine_intrinsic_assert(\n+    fn simplify_intrinsic_assert(\n         &self,\n         terminator: &mut Terminator<'tcx>,\n         _statements: &mut Vec<Statement<'tcx>>,", "previous_filename": "compiler/rustc_mir_transform/src/instcombine.rs"}, {"sha": "f25a9f042c4f3afee7559829bc962504e2ce8b98", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -73,7 +73,7 @@ mod ffi_unwind_calls;\n mod function_item_references;\n mod generator;\n mod inline;\n-mod instcombine;\n+mod instsimplify;\n mod large_enums;\n mod lower_intrinsics;\n mod lower_slice_len;\n@@ -547,7 +547,7 @@ fn run_optimization_passes<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n             &match_branches::MatchBranchSimplification,\n             // inst combine is after MatchBranchSimplification to clean up Ne(_1, false)\n             &multiple_return_terminators::MultipleReturnTerminators,\n-            &instcombine::InstCombine,\n+            &instsimplify::InstSimplify,\n             &separate_const_switch::SeparateConstSwitch,\n             &simplify::SimplifyLocals::BeforeConstProp,\n             &copy_prop::CopyProp,"}, {"sha": "1b96df3aed5be8020b89ee764697fa4d7a08b54b", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -278,7 +278,7 @@ impl<'a, 'tcx> CfgSimplifier<'a, 'tcx> {\n     }\n }\n \n-pub fn combine_duplicate_switch_targets(terminator: &mut Terminator<'_>) {\n+pub fn simplify_duplicate_switch_targets(terminator: &mut Terminator<'_>) {\n     if let TerminatorKind::SwitchInt { targets, .. } = &mut terminator.kind {\n         let otherwise = targets.otherwise();\n         if targets.iter().any(|t| t.1 == otherwise) {\n@@ -310,7 +310,7 @@ pub fn remove_duplicate_unreachable_blocks<'tcx>(tcx: TyCtxt<'tcx>, body: &mut B\n                 }\n             }\n \n-            combine_duplicate_switch_targets(terminator);\n+            simplify_duplicate_switch_targets(terminator);\n \n             self.super_terminator(terminator, location);\n         }"}, {"sha": "5cbd7f98b6be3b301c65c9d334b50ff5ab29e737", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1555,7 +1555,7 @@ options! {\n         \"emit Retagging MIR statements, interpreted e.g., by miri; implies -Zmir-opt-level=0 \\\n         (default: no)\"),\n     mir_enable_passes: Vec<(String, bool)> = (Vec::new(), parse_list_with_polarity, [TRACKED],\n-        \"use like `-Zmir-enable-passes=+DestProp,-InstCombine`. Forces the specified passes to be \\\n+        \"use like `-Zmir-enable-passes=+DestinationPropagation,-InstSimplify`. Forces the specified passes to be \\\n         enabled, overriding all other checks. Passes that are not specified are enabled or \\\n         disabled by other flags as usual.\"),\n     mir_keep_place_mention: bool = (false, parse_bool, [TRACKED],"}, {"sha": "6c9df8f042b79fd924e7c4558c96cf194550405d", "filename": "tests/mir-opt/bool_compare.opt1.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt1.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt1` before InstCombine\n-+ // MIR for `opt1` after InstCombine\n+- // MIR for `opt1` before InstSimplify\n++ // MIR for `opt1` after InstSimplify\n   \n   fn opt1(_1: bool) -> u32 {\n       debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10", "previous_filename": "tests/mir-opt/bool_compare.opt1.InstCombine.diff"}, {"sha": "9fb3982654abbdf1ea82439ae08c5ebd336ad124", "filename": "tests/mir-opt/bool_compare.opt2.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt2.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt2` before InstCombine\n-+ // MIR for `opt2` after InstCombine\n+- // MIR for `opt2` before InstSimplify\n++ // MIR for `opt2` after InstSimplify\n   \n   fn opt2(_1: bool) -> u32 {\n       debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10", "previous_filename": "tests/mir-opt/bool_compare.opt2.InstCombine.diff"}, {"sha": "3a47da86735e349b62eeec5b9a74367c7711a602", "filename": "tests/mir-opt/bool_compare.opt3.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt3.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt3` before InstCombine\n-+ // MIR for `opt3` after InstCombine\n+- // MIR for `opt3` before InstSimplify\n++ // MIR for `opt3` after InstSimplify\n   \n   fn opt3(_1: bool) -> u32 {\n       debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10", "previous_filename": "tests/mir-opt/bool_compare.opt3.InstCombine.diff"}, {"sha": "5319c987d418bbdda8903ef7b1fd9a026a693ec4", "filename": "tests/mir-opt/bool_compare.opt4.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.opt4.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt4` before InstCombine\n-+ // MIR for `opt4` after InstCombine\n+- // MIR for `opt4` before InstSimplify\n++ // MIR for `opt4` after InstSimplify\n   \n   fn opt4(_1: bool) -> u32 {\n       debug x => _1;                       // in scope 0 at $DIR/bool_compare.rs:+0:9: +0:10", "previous_filename": "tests/mir-opt/bool_compare.opt4.InstCombine.diff"}, {"sha": "080f7f72d116056dfa8f1ee283aede65ecf52d22", "filename": "tests/mir-opt/bool_compare.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fbool_compare.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fbool_compare.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,21 +1,21 @@\n-// unit-test: InstCombine\n+// unit-test: InstSimplify\n \n-// EMIT_MIR bool_compare.opt1.InstCombine.diff\n+// EMIT_MIR bool_compare.opt1.InstSimplify.diff\n fn opt1(x: bool) -> u32 {\n     if x != true { 0 } else { 1 }\n }\n \n-// EMIT_MIR bool_compare.opt2.InstCombine.diff\n+// EMIT_MIR bool_compare.opt2.InstSimplify.diff\n fn opt2(x: bool) -> u32 {\n     if true != x { 0 } else { 1 }\n }\n \n-// EMIT_MIR bool_compare.opt3.InstCombine.diff\n+// EMIT_MIR bool_compare.opt3.InstSimplify.diff\n fn opt3(x: bool) -> u32 {\n     if x == false { 0 } else { 1 }\n }\n \n-// EMIT_MIR bool_compare.opt4.InstCombine.diff\n+// EMIT_MIR bool_compare.opt4.InstSimplify.diff\n fn opt4(x: bool) -> u32 {\n     if false == x { 0 } else { 1 }\n }"}, {"sha": "a641b69deb0815dfa936ab402d107afa309565e7", "filename": "tests/mir-opt/casts.redundant.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.redundant.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `redundant` before InstCombine\n-+ // MIR for `redundant` after InstCombine\n+- // MIR for `redundant` before InstSimplify\n++ // MIR for `redundant` after InstSimplify\n   \n   fn redundant(_1: *const &u8) -> *const &u8 {\n       debug x => _1;                       // in scope 0 at $DIR/casts.rs:+0:30: +0:31", "previous_filename": "tests/mir-opt/casts.redundant.InstCombine.diff"}, {"sha": "413b0e09d3fde19b02aca37a9c80a86318eae07f", "filename": "tests/mir-opt/casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcasts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcasts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcasts.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,6 +1,6 @@\n #![crate_type = \"lib\"]\n \n-// EMIT_MIR casts.redundant.InstCombine.diff\n+// EMIT_MIR casts.redundant.InstSimplify.diff\n // EMIT_MIR casts.redundant.PreCodegen.after.mir\n pub fn redundant<'a, 'b: 'a>(x: *const &'a u8) -> *const &'a u8 {\n     generic_cast::<&'a u8, &'b u8>(x) as *const &'a u8"}, {"sha": "0777007cefa687c26657e946c9ae927685d628d7", "filename": "tests/mir-opt/combine_array_len.norm2.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.norm2.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `norm2` before InstCombine\n-+ // MIR for `norm2` after InstCombine\n+- // MIR for `norm2` before InstSimplify\n++ // MIR for `norm2` after InstSimplify\n   \n   fn norm2(_1: [f32; 2]) -> f32 {\n       debug x => _1;                       // in scope 0 at $DIR/combine_array_len.rs:+0:10: +0:11", "previous_filename": "tests/mir-opt/combine_array_len.norm2.InstCombine.diff"}, {"sha": "970cafafcf042269682a08627662b39dad5399b6", "filename": "tests/mir-opt/combine_array_len.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_array_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_array_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_array_len.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32 compiled with panic=abort by default\n-// unit-test: InstCombine\n-// EMIT_MIR combine_array_len.norm2.InstCombine.diff\n+// unit-test: InstSimplify\n+// EMIT_MIR combine_array_len.norm2.InstSimplify.diff\n \n fn norm2(x: [f32; 2]) -> f32 {\n     let a = x[0];"}, {"sha": "1deee9dd6d2f25110c1abdff3dd63e1614683b83", "filename": "tests/mir-opt/combine_clone_of_primitives.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,7 +1,7 @@\n-// unit-test: InstCombine\n+// unit-test: InstSimplify\n // ignore-wasm32 compiled with panic=abort by default\n \n-// EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff\n+// EMIT_MIR combine_clone_of_primitives.{impl#0}-clone.InstSimplify.diff\n \n #[derive(Clone)]\n struct MyThing<T> {"}, {"sha": "bb0811a7abb2d146f6d2c25aa9601f2656e63d8e", "filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_clone_of_primitives.%7Bimpl%230%7D-clone.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstCombine\n-+ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstCombine\n+- // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` before InstSimplify\n++ // MIR for `<impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone` after InstSimplify\n   \n   fn <impl at $DIR/combine_clone_of_primitives.rs:6:10: 6:15>::clone(_1: &MyThing<T>) -> MyThing<T> {\n       debug self => _1;                    // in scope 0 at $DIR/combine_clone_of_primitives.rs:+0:10: +0:15", "previous_filename": "tests/mir-opt/combine_clone_of_primitives.{impl#0}-clone.InstCombine.diff"}, {"sha": "c5907e7cf180ef500647f460e4673eabad9fc70b", "filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.adt_transmutes.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `adt_transmutes` before InstCombine\n-+ // MIR for `adt_transmutes` after InstCombine\n+- // MIR for `adt_transmutes` before InstSimplify\n++ // MIR for `adt_transmutes` after InstSimplify\n   \n   fn adt_transmutes() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:32: +0:32", "previous_filename": "tests/mir-opt/combine_transmutes.adt_transmutes.InstCombine.diff"}, {"sha": "57d9f4b14023ea7a876158e8a2ace5b002518c53", "filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.identity_transmutes.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `identity_transmutes` before InstCombine\n-+ // MIR for `identity_transmutes` after InstCombine\n+- // MIR for `identity_transmutes` before InstSimplify\n++ // MIR for `identity_transmutes` after InstSimplify\n   \n   fn identity_transmutes() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:37: +0:37", "previous_filename": "tests/mir-opt/combine_transmutes.identity_transmutes.InstCombine.diff"}, {"sha": "ec7c982c151e97074d64fa9d3ee70893f49e553c", "filename": "tests/mir-opt/combine_transmutes.integer_transmutes.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.integer_transmutes.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `integer_transmutes` before InstCombine\n-+ // MIR for `integer_transmutes` after InstCombine\n+- // MIR for `integer_transmutes` before InstSimplify\n++ // MIR for `integer_transmutes` after InstSimplify\n   \n   fn integer_transmutes() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/combine_transmutes.rs:+0:36: +0:36", "previous_filename": "tests/mir-opt/combine_transmutes.integer_transmutes.InstCombine.diff"}, {"sha": "7088488c1b8563a543e6588e9390a98541911e00", "filename": "tests/mir-opt/combine_transmutes.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fcombine_transmutes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fcombine_transmutes.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,4 +1,4 @@\n-// unit-test: InstCombine\n+// unit-test: InstSimplify\n // compile-flags: -C panic=abort\n \n #![crate_type = \"lib\"]\n@@ -8,15 +8,15 @@\n use std::intrinsics::mir::*;\n use std::mem::{MaybeUninit, ManuallyDrop, transmute};\n \n-// EMIT_MIR combine_transmutes.identity_transmutes.InstCombine.diff\n+// EMIT_MIR combine_transmutes.identity_transmutes.InstSimplify.diff\n pub unsafe fn identity_transmutes() {\n     // These are nops and should be removed\n     let _a = transmute::<i32, i32>(1);\n     let _a = transmute::<Vec<i32>, Vec<i32>>(Vec::new());\n }\n \n #[custom_mir(dialect = \"runtime\", phase = \"initial\")]\n-// EMIT_MIR combine_transmutes.integer_transmutes.InstCombine.diff\n+// EMIT_MIR combine_transmutes.integer_transmutes.InstSimplify.diff\n pub unsafe fn integer_transmutes() {\n     mir! {\n         {\n@@ -30,7 +30,7 @@ pub unsafe fn integer_transmutes() {\n     }\n }\n \n-// EMIT_MIR combine_transmutes.adt_transmutes.InstCombine.diff\n+// EMIT_MIR combine_transmutes.adt_transmutes.InstSimplify.diff\n pub unsafe fn adt_transmutes() {\n     let _a: u8 = transmute(EnumNoRepr::A);\n     let _a: i8 = transmute(EnumNoRepr::B);"}, {"sha": "9821d1b1e9220f251f8276e8d7482e37321b2b80", "filename": "tests/mir-opt/const_prop/slice_len.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fconst_prop%2Fslice_len.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,6 +1,6 @@\n // ignore-wasm32 compiled with panic=abort by default\n // unit-test: ConstProp\n-// compile-flags: -Zmir-enable-passes=+InstCombine\n+// compile-flags: -Zmir-enable-passes=+InstSimplify\n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n \n // EMIT_MIR slice_len.main.ConstProp.diff"}, {"sha": "cadf05152a43f02d5ffd13c9d3226f94687e69a0", "filename": "tests/mir-opt/dont_yeet_assert.generic.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.generic.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `generic` before InstCombine\n-+ // MIR for `generic` after InstCombine\n+- // MIR for `generic` before InstSimplify\n++ // MIR for `generic` after InstSimplify\n   \n   fn generic() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/dont_yeet_assert.rs:+0:21: +0:21", "previous_filename": "tests/mir-opt/dont_yeet_assert.generic.InstCombine.diff"}, {"sha": "38cc5a293e870a6bf34883c5f31808f30e35af6c", "filename": "tests/mir-opt/dont_yeet_assert.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fdont_yeet_assert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fdont_yeet_assert.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,11 +1,11 @@\n // compile-flags: --crate-type=lib\n-// unit-test: InstCombine\n+// unit-test: InstSimplify\n \n #![feature(core_intrinsics)]\n \n // Want to make sure this assertion isn't compiled away in generic code.\n \n-// EMIT_MIR dont_yeet_assert.generic.InstCombine.diff\n+// EMIT_MIR dont_yeet_assert.generic.InstSimplify.diff\n pub fn generic<T>() {\n     core::intrinsics::assert_mem_uninitialized_valid::<&T>();\n }"}, {"sha": "4ef4132008eaa96bf2b1557ef741f252cdb97936", "filename": "tests/mir-opt/equal_true.opt.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fequal_true.opt.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fequal_true.opt.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fequal_true.opt.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt` before InstCombine\n-+ // MIR for `opt` after InstCombine\n+- // MIR for `opt` before InstSimplify\n++ // MIR for `opt` after InstSimplify\n   \n   fn opt(_1: bool) -> i32 {\n       debug x => _1;                       // in scope 0 at $DIR/equal_true.rs:+0:8: +0:9", "previous_filename": "tests/mir-opt/equal_true.opt.InstCombine.diff"}, {"sha": "fbb5d8d37db8df79dc940fe201faa25bb2f1d6a3", "filename": "tests/mir-opt/equal_true.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fequal_true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fequal_true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fequal_true.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,6 +1,6 @@\n-// unit-test InstCombine\n+// unit-test InstSimplify\n \n-// EMIT_MIR equal_true.opt.InstCombine.diff\n+// EMIT_MIR equal_true.opt.InstSimplify.diff\n \n fn opt(x: bool) -> i32 {\n     if x == true { 0 } else { 1 }"}, {"sha": "04ba8dd8e4dd2e3076795805bf7d4a8d36d57250", "filename": "tests/mir-opt/instsimplify_duplicate_switch_targets.assert_zero.InstSimplify.diff", "status": "renamed", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.assert_zero.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.assert_zero.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.assert_zero.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,21 +1,21 @@\n-- // MIR for `assert_zero` before InstCombine\n-+ // MIR for `assert_zero` after InstCombine\n+- // MIR for `assert_zero` before InstSimplify\n++ // MIR for `assert_zero` after InstSimplify\n   \n   fn assert_zero(_1: u8) -> u8 {\n-      let mut _0: u8;                      // return place in scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+0:37: +0:39\n+      let mut _0: u8;                      // return place in scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+0:37: +0:39\n   \n       bb0: {\n--         switchInt(_1) -> [0: bb2, 1: bb1, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n-+         switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+3:13: +7:14\n+-         switchInt(_1) -> [0: bb2, 1: bb1, otherwise: bb1]; // scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+3:13: +7:14\n++         switchInt(_1) -> [0: bb2, otherwise: bb1]; // scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+3:13: +7:14\n       }\n   \n       bb1: {\n-          unreachable;                     // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+10:13: +10:26\n+          unreachable;                     // scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+10:13: +10:26\n       }\n   \n       bb2: {\n-          _0 = _1;                         // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+13:13: +13:20\n-          return;                          // scope 0 at $DIR/instcombine_duplicate_switch_targets.rs:+14:13: +14:21\n+          _0 = _1;                         // scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+13:13: +13:20\n+          return;                          // scope 0 at $DIR/instsimplify_duplicate_switch_targets.rs:+14:13: +14:21\n       }\n   }\n   ", "previous_filename": "tests/mir-opt/instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff"}, {"sha": "3e280a40fda3a8526a29cb1b50b1c9b5a22c4a93", "filename": "tests/mir-opt/instsimplify_duplicate_switch_targets.rs", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Finstsimplify_duplicate_switch_targets.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -3,9 +3,9 @@\n \n use std::intrinsics::mir::*;\n \n-// unit-test: InstCombine\n+// unit-test: InstSimplify\n \n-// EMIT_MIR instcombine_duplicate_switch_targets.assert_zero.InstCombine.diff\n+// EMIT_MIR instsimplify_duplicate_switch_targets.assert_zero.InstSimplify.diff\n #[custom_mir(dialect = \"runtime\", phase = \"post-cleanup\")]\n pub unsafe fn assert_zero(x: u8) -> u8 {\n     mir!(", "previous_filename": "tests/mir-opt/instcombine_duplicate_switch_targets.rs"}, {"sha": "a59f4a43aede4d0b1d67c393483719a75ecf9b15", "filename": "tests/mir-opt/intrinsic_asserts.generic.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.generic.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `generic` before InstCombine\n-+ // MIR for `generic` after InstCombine\n+- // MIR for `generic` before InstSimplify\n++ // MIR for `generic` after InstSimplify\n   \n   fn generic() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:21: +0:21", "previous_filename": "tests/mir-opt/intrinsic_asserts.generic.InstCombine.diff"}, {"sha": "195e8bd4eae0f84e8cd888330e71073b9463197a", "filename": "tests/mir-opt/intrinsic_asserts.panics.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.panics.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `panics` before InstCombine\n-+ // MIR for `panics` after InstCombine\n+- // MIR for `panics` before InstSimplify\n++ // MIR for `panics` after InstSimplify\n   \n   fn panics() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:17: +0:17", "previous_filename": "tests/mir-opt/intrinsic_asserts.panics.InstCombine.diff"}, {"sha": "a4a65074caa1c23f2b27b0bf6b23ecc3e05ab0d2", "filename": "tests/mir-opt/intrinsic_asserts.removable.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.removable.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `removable` before InstCombine\n-+ // MIR for `removable` after InstCombine\n+- // MIR for `removable` before InstSimplify\n++ // MIR for `removable` after InstSimplify\n   \n   fn removable() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/intrinsic_asserts.rs:+0:20: +0:20", "previous_filename": "tests/mir-opt/intrinsic_asserts.removable.InstCombine.diff"}, {"sha": "302d4bda188a67720b9f1c04fc9d3db4e14a1c8f", "filename": "tests/mir-opt/intrinsic_asserts.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fintrinsic_asserts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fintrinsic_asserts.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -2,7 +2,7 @@\n #![feature(core_intrinsics)]\n \n // All these assertions pass, so all the intrinsic calls should be deleted.\n-// EMIT_MIR intrinsic_asserts.removable.InstCombine.diff\n+// EMIT_MIR intrinsic_asserts.removable.InstSimplify.diff\n pub fn removable() {\n     core::intrinsics::assert_inhabited::<()>();\n     core::intrinsics::assert_zero_valid::<u8>();\n@@ -12,15 +12,15 @@ pub fn removable() {\n enum Never {}\n \n // These assertions all diverge, so their target blocks should become None.\n-// EMIT_MIR intrinsic_asserts.panics.InstCombine.diff\n+// EMIT_MIR intrinsic_asserts.panics.InstSimplify.diff\n pub fn panics() {\n     core::intrinsics::assert_inhabited::<Never>();\n     core::intrinsics::assert_zero_valid::<&u8>();\n     core::intrinsics::assert_mem_uninitialized_valid::<&u8>();\n }\n \n // Whether or not these asserts pass isn't known, so they shouldn't be modified.\n-// EMIT_MIR intrinsic_asserts.generic.InstCombine.diff\n+// EMIT_MIR intrinsic_asserts.generic.InstSimplify.diff\n pub fn generic<T>() {\n     core::intrinsics::assert_inhabited::<T>();\n     core::intrinsics::assert_zero_valid::<T>();"}, {"sha": "914d7ceb29a9a0b164f2324872e0e007b862a646", "filename": "tests/mir-opt/issue_78192.f.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fissue_78192.f.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fissue_78192.f.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_78192.f.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `f` before InstCombine\n-+ // MIR for `f` after InstCombine\n+- // MIR for `f` before InstSimplify\n++ // MIR for `f` after InstSimplify\n   \n   fn f(_1: &T) -> *const T {\n       debug a => _1;                       // in scope 0 at $DIR/issue_78192.rs:+0:13: +0:14", "previous_filename": "tests/mir-opt/issue_78192.f.InstCombine.diff"}, {"sha": "95142a3e4633213e8ced150df188e329354b789a", "filename": "tests/mir-opt/issue_78192.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fissue_78192.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fissue_78192.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fissue_78192.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -8,4 +8,4 @@ fn main() {\n     f(&2);\n }\n \n-// EMIT_MIR issue_78192.f.InstCombine.diff\n+// EMIT_MIR issue_78192.f.InstSimplify.diff"}, {"sha": "8e7776a0bbcaec02253de1f8ce7cd624a643f69d", "filename": "tests/mir-opt/not_equal_false.opt.InstSimplify.diff", "status": "renamed", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fnot_equal_false.opt.InstSimplify.diff", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fnot_equal_false.opt.InstSimplify.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnot_equal_false.opt.InstSimplify.diff?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-- // MIR for `opt` before InstCombine\n-+ // MIR for `opt` after InstCombine\n+- // MIR for `opt` before InstSimplify\n++ // MIR for `opt` after InstSimplify\n   \n   fn opt(_1: bool) -> u32 {\n       debug x => _1;                       // in scope 0 at $DIR/not_equal_false.rs:+0:8: +0:9", "previous_filename": "tests/mir-opt/not_equal_false.opt.InstCombine.diff"}, {"sha": "e056073290005c87faaefe7e04628770c62f57f4", "filename": "tests/mir-opt/not_equal_false.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fnot_equal_false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fmir-opt%2Fnot_equal_false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Fnot_equal_false.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,5 +1,5 @@\n-// unit-test: InstCombine\n-// EMIT_MIR not_equal_false.opt.InstCombine.diff\n+// unit-test: InstSimplify\n+// EMIT_MIR not_equal_false.opt.InstSimplify.diff\n \n fn opt(x: bool) -> u32 {\n     if x != false { 0 } else { 1 }"}, {"sha": "98f82b792fccc431ed2bac9dacd1dc196b8f278b", "filename": "tests/ui/lint/invalid_value-polymorphic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff855547f463aecb0c86f8f78ebc605ef097664b/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Flint%2Finvalid_value-polymorphic.rs?ref=ff855547f463aecb0c86f8f78ebc605ef097664b", "patch": "@@ -1,4 +1,4 @@\n-// compile-flags: --crate-type=lib -Zmir-enable-passes=+InstCombine\n+// compile-flags: --crate-type=lib -Zmir-enable-passes=+InstSimplify\n // build-pass\n \n #![feature(core_intrinsics)]"}]}