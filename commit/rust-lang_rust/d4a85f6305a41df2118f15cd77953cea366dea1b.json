{"sha": "d4a85f6305a41df2118f15cd77953cea366dea1b", "node_id": "C_kwDOAAsO6NoAKGQ0YTg1ZjYzMDVhNDFkZjIxMThmMTVjZDc3OTUzY2VhMzY2ZGVhMWI", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-20T14:39:17Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-04-20T14:39:17Z"}, "message": "add another test for #2068", "tree": {"sha": "e15e8272c19fad60e18d1447781c6b1952601dfe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e15e8272c19fad60e18d1447781c6b1952601dfe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4a85f6305a41df2118f15cd77953cea366dea1b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4a85f6305a41df2118f15cd77953cea366dea1b", "html_url": "https://github.com/rust-lang/rust/commit/d4a85f6305a41df2118f15cd77953cea366dea1b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4a85f6305a41df2118f15cd77953cea366dea1b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c9039de613478cfe806ff287504b313424b619a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9039de613478cfe806ff287504b313424b619a5", "html_url": "https://github.com/rust-lang/rust/commit/c9039de613478cfe806ff287504b313424b619a5"}], "stats": {"total": 14, "additions": 14, "deletions": 0}, "files": [{"sha": "45b2004e33538d51c374a1529bf8c40f22be6f61", "filename": "tests/run-pass/issue-miri-2068-2.rs", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d4a85f6305a41df2118f15cd77953cea366dea1b/tests%2Frun-pass%2Fissue-miri-2068-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4a85f6305a41df2118f15cd77953cea366dea1b/tests%2Frun-pass%2Fissue-miri-2068-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fissue-miri-2068-2.rs?ref=d4a85f6305a41df2118f15cd77953cea366dea1b", "patch": "@@ -0,0 +1,14 @@\n+// compile-flags: -Zmiri-disable-validation\n+\n+use std::mem::MaybeUninit;\n+\n+fn main() { unsafe {\n+    let mut x = MaybeUninit::<i64>::uninit();\n+    // Put in a ptr.\n+    x.as_mut_ptr().cast::<&i32>().write_unaligned(&0);\n+    // Overwrite parts of that pointer with 'uninit' through a Scalar.\n+    let ptr = x.as_mut_ptr().cast::<i32>();\n+    *ptr = MaybeUninit::uninit().assume_init();\n+    // Reading this back should hence work fine.\n+    let _c = *ptr;\n+} }"}]}