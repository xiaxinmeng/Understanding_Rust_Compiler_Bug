{"sha": "0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "node_id": "C_kwDOAAsO6NoAKDBiYzM0MGY3NTY0YTdhMDQ2YjNhY2FhNjlkNmFhMTY1M2VkMjdkNjY", "commit": {"author": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-07T21:00:39Z"}, "committer": {"name": "jackh726", "email": "jack.huey@umassmed.edu", "date": "2021-10-16T23:04:39Z"}, "message": "Error initial pass", "tree": {"sha": "1fa5c76c216162b72b580834fcbb344dcafd48f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1fa5c76c216162b72b580834fcbb344dcafd48f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "html_url": "https://github.com/rust-lang/rust/commit/0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0bc340f7564a7a046b3acaa69d6aa1653ed27d66/comments", "author": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jackh726", "id": 31162821, "node_id": "MDQ6VXNlcjMxMTYyODIx", "avatar_url": "https://avatars.githubusercontent.com/u/31162821?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jackh726", "html_url": "https://github.com/jackh726", "followers_url": "https://api.github.com/users/jackh726/followers", "following_url": "https://api.github.com/users/jackh726/following{/other_user}", "gists_url": "https://api.github.com/users/jackh726/gists{/gist_id}", "starred_url": "https://api.github.com/users/jackh726/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jackh726/subscriptions", "organizations_url": "https://api.github.com/users/jackh726/orgs", "repos_url": "https://api.github.com/users/jackh726/repos", "events_url": "https://api.github.com/users/jackh726/events{/privacy}", "received_events_url": "https://api.github.com/users/jackh726/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e89811b46323f432544f9c4006e40d5e5d7663f", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e89811b46323f432544f9c4006e40d5e5d7663f", "html_url": "https://github.com/rust-lang/rust/commit/4e89811b46323f432544f9c4006e40d5e5d7663f"}], "stats": {"total": 145, "additions": 139, "deletions": 6}, "files": [{"sha": "cb4d640f98bd9d4eb10f78a1a1417f7b78752554", "filename": "compiler/rustc_typeck/src/check/wfcheck.rs", "status": "modified", "additions": 98, "deletions": 6, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/0bc340f7564a7a046b3acaa69d6aa1653ed27d66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc340f7564a7a046b3acaa69d6aa1653ed27d66/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fwfcheck.rs?ref=0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "patch": "@@ -11,16 +11,17 @@ use rustc_hir::intravisit::Visitor;\n use rustc_hir::itemlikevisit::ParItemLikeVisitor;\n use rustc_hir::lang_items::LangItem;\n use rustc_hir::ItemKind;\n+use rustc_infer::infer::TyCtxtInferExt;\n use rustc_middle::hir::map as hir_map;\n-use rustc_middle::ty::subst::{InternalSubsts, Subst};\n+use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts, Subst};\n use rustc_middle::ty::trait_def::TraitSpecializationKind;\n-use rustc_middle::ty::{\n-    self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, WithConstness,\n-};\n+use rustc_middle::ty::{self, AdtKind, GenericParamDefKind, ToPredicate, Ty, TyCtxt, TypeFoldable, TypeVisitor, WithConstness};\n+use rustc_session::lint;\n use rustc_session::parse::feature_err;\n use rustc_span::symbol::{sym, Ident, Symbol};\n-use rustc_span::Span;\n-use rustc_trait_selection::traits::query::evaluate_obligation::InferCtxtExt;\n+use rustc_span::{DUMMY_SP, Span};\n+use rustc_trait_selection::traits::query::evaluate_obligation::{InferCtxtExt as _};\n+use rustc_trait_selection::traits::query::outlives_bounds::{InferCtxtExt as _};\n use rustc_trait_selection::traits::{self, ObligationCause, ObligationCauseCode, WellFormedLoc};\n \n use std::convert::TryInto;\n@@ -253,6 +254,97 @@ pub fn check_trait_item(tcx: TyCtxt<'_>, def_id: LocalDefId) {\n                 .emit();\n         }\n     }\n+\n+    // Require that the user writes as where clauses on GATs the implicit\n+    // outlives bounds involving trait parameters in trait functions and\n+    // lifetimes passed as GAT substs. See `self-outlives-lint` test.\n+    let item = tcx.associated_item(trait_item.def_id);\n+    let generics: &ty::Generics = tcx.generics_of(trait_item.def_id);\n+    if matches!(item.kind, ty::AssocKind::Type) && generics.params.len() > 0 {\n+        let associated_items: &ty::AssocItems<'_> = tcx.associated_items(encl_trait_def_id);\n+        associated_items\n+            .in_definition_order()\n+            .filter(|item| matches!(item.kind, ty::AssocKind::Fn))\n+            .for_each(|item| {\n+                tcx.infer_ctxt().enter(|infcx| {\n+                    let sig: ty::Binder<'_, ty::FnSig<'_>> = tcx.fn_sig(item.def_id);\n+                    let sig = infcx.replace_bound_vars_with_placeholders(sig);\n+                    let output = sig.output();\n+                    let mut visitor = RegionsInGATs {\n+                        tcx,\n+                        gat: trait_item.def_id.to_def_id(),\n+                        regions: FxHashSet::default(),\n+                    };\n+                    output.visit_with(&mut visitor);\n+                    for input in sig.inputs() {\n+                        let bounds = infcx.implied_outlives_bounds(ty::ParamEnv::empty(), hir_id, input, DUMMY_SP);\n+                        debug!(?bounds);\n+                        let mut clauses = FxHashSet::default();\n+                        for bound in bounds {\n+                            match bound {\n+                                traits::query::OutlivesBound::RegionSubParam(r, p) => {\n+                                    for idx in visitor.regions.iter().filter(|(proj_r, _)| proj_r == &r).map(|r| r.1) {\n+                                        let param_r = tcx.mk_region(ty::RegionKind::ReEarlyBound(ty::EarlyBoundRegion {\n+                                            def_id: generics.params[idx].def_id,\n+                                            index: idx as u32,\n+                                            name: generics.params[idx].name,\n+                                        }));\n+                                        let clause = ty::PredicateKind::TypeOutlives(ty::OutlivesPredicate(tcx.mk_ty(ty::Param(p)), param_r));\n+                                        let clause = tcx.mk_predicate(ty::Binder::dummy(clause));\n+                                        clauses.insert(clause);\n+                                    }\n+                                }\n+                                _ => {}\n+                            }\n+                        }\n+                        debug!(?clauses);\n+                        if !clauses.is_empty() {\n+                            let written_predicates: ty::GenericPredicates<'_> = tcx.predicates_of(trait_item.def_id);\n+                            for clause in clauses {\n+                                let found = written_predicates.predicates.iter().find(|p| p.0 == clause).is_some();\n+                                debug!(?clause, ?found);\n+                                let mut error = tcx.sess.struct_span_err(\n+                                    trait_item.generics.span,\n+                                    &format!(\"Missing bound: {}\", clause),\n+                                );\n+                                error.emit();\n+                            }\n+                        }\n+                    }\n+                })\n+            });\n+    }\n+}\n+\n+struct RegionsInGATs<'tcx> {\n+    tcx: TyCtxt<'tcx>,\n+    gat: DefId,\n+    // Which region appears and which parameter index its subsituted for\n+    regions: FxHashSet<(ty::Region<'tcx>, usize)>,\n+}\n+\n+impl<'tcx> TypeVisitor<'tcx> for RegionsInGATs<'tcx> {\n+    type BreakTy = !;\n+\n+    fn visit_ty(&mut self, t: Ty<'tcx>) -> ControlFlow<Self::BreakTy> {\n+        match t.kind() {\n+            ty::Projection(p) if p.item_def_id == self.gat => {\n+                let (_, substs) = p.trait_ref_and_own_substs(self.tcx);\n+                self.regions.extend(substs.iter().enumerate().filter_map(|(idx, subst)| {\n+                    match subst.unpack() {\n+                        GenericArgKind::Lifetime(lt) => Some((lt, idx)),\n+                        _ => None,\n+                    }\n+                }));\n+            }\n+            _ => {}\n+        }\n+        t.super_visit_with(self)\n+    }\n+\n+    fn tcx_for_anon_const_substs(&self) -> Option<TyCtxt<'tcx>> {\n+        Some(self.tcx)\n+    }\n }\n \n fn could_be_self(trait_def_id: LocalDefId, ty: &hir::Ty<'_>) -> bool {"}, {"sha": "43870a88479d5547fb143bf507cb4fa9370b68e9", "filename": "src/test/ui/generic-associated-types/self-outlives-lint.rs", "status": "added", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/0bc340f7564a7a046b3acaa69d6aa1653ed27d66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0bc340f7564a7a046b3acaa69d6aa1653ed27d66/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgeneric-associated-types%2Fself-outlives-lint.rs?ref=0bc340f7564a7a046b3acaa69d6aa1653ed27d66", "patch": "@@ -0,0 +1,41 @@\n+#![feature(generic_associated_types)]\n+\n+// check-fail\n+\n+trait Iterable {\n+    type Item<'x>;\n+    fn iter<'a>(&'a self) -> Self::Item<'a>;\n+}\n+\n+/*\n+impl<T> Iterable for T {\n+    type Item<'a> = &'a T;\n+    fn iter<'a>(&'a self) -> Self::Item<'a> {\n+        self\n+    }\n+}\n+*/\n+\n+trait Deserializer<T> {\n+    type Out<'x>;\n+    fn deserialize<'a>(&self, input: &'a T) -> Self::Out<'a>;\n+}\n+\n+/*\n+impl<T> Deserializer<T> for () {\n+    type Out<'a> = &'a T;\n+    fn deserialize<'a>(&self, input: &'a T) -> Self::Out<'a> { input }\n+}\n+*/\n+\n+trait Deserializer2<T> {\n+    type Out<'x>;\n+    fn deserialize2<'a, 'b: 'a>(&self, input: &'a T, input2: &'b T) -> Self::Out<'a>;\n+}\n+\n+trait Deserializer3<T, U> {\n+    type Out<'x, 'y>;\n+    fn deserialize2<'a, 'b>(&self, input: &'a T, input2: &'b U) -> Self::Out<'a, 'b>;\n+}\n+\n+fn main() {}"}]}