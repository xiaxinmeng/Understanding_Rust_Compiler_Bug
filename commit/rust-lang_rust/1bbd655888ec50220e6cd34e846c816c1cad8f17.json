{"sha": "1bbd655888ec50220e6cd34e846c816c1cad8f17", "node_id": "C_kwDOAAsO6NoAKDFiYmQ2NTU4ODhlYzUwMjIwZTZjZDM0ZTg0NmM4MTZjMWNhZDhmMTc", "commit": {"author": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-06T22:04:25Z"}, "committer": {"name": "Bryan Garza", "email": "1396101+bryangarza@users.noreply.github.com", "date": "2023-01-24T00:01:37Z"}, "message": "Improve efficiency of has_back_edge(...)", "tree": {"sha": "0c70e62ed5b06b30be9d93245cb70c51d7a9ffad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c70e62ed5b06b30be9d93245cb70c51d7a9ffad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bbd655888ec50220e6cd34e846c816c1cad8f17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bbd655888ec50220e6cd34e846c816c1cad8f17", "html_url": "https://github.com/rust-lang/rust/commit/1bbd655888ec50220e6cd34e846c816c1cad8f17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bbd655888ec50220e6cd34e846c816c1cad8f17/comments", "author": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bryangarza", "id": 1396101, "node_id": "MDQ6VXNlcjEzOTYxMDE=", "avatar_url": "https://avatars.githubusercontent.com/u/1396101?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bryangarza", "html_url": "https://github.com/bryangarza", "followers_url": "https://api.github.com/users/bryangarza/followers", "following_url": "https://api.github.com/users/bryangarza/following{/other_user}", "gists_url": "https://api.github.com/users/bryangarza/gists{/gist_id}", "starred_url": "https://api.github.com/users/bryangarza/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bryangarza/subscriptions", "organizations_url": "https://api.github.com/users/bryangarza/orgs", "repos_url": "https://api.github.com/users/bryangarza/repos", "events_url": "https://api.github.com/users/bryangarza/events{/privacy}", "received_events_url": "https://api.github.com/users/bryangarza/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7618163a1caf0d6dfa5618c8369742720c90ef6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7618163a1caf0d6dfa5618c8369742720c90ef6b", "html_url": "https://github.com/rust-lang/rust/commit/7618163a1caf0d6dfa5618c8369742720c90ef6b"}], "stats": {"total": 28, "additions": 18, "deletions": 10}, "files": [{"sha": "0a21a4249c8295b94ab4b2f7db068a58e8da9ba7", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bbd655888ec50220e6cd34e846c816c1cad8f17/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbd655888ec50220e6cd34e846c816c1cad8f17/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=1bbd655888ec50220e6cd34e846c816c1cad8f17", "patch": "@@ -304,13 +304,18 @@ fn compress(\n     }\n }\n \n+/// Tracks the list of dominators for each node.\n #[derive(Clone, Debug)]\n pub struct Dominators<N: Idx> {\n     post_order_rank: IndexVec<N, usize>,\n+    // Even though we track only the immediate dominator of each node, it's\n+    // possible to get its full list of dominators by looking up the dominator\n+    // of each dominator. (See the `impl Iterator for Iter` definition).\n     immediate_dominators: IndexVec<N, Option<N>>,\n }\n \n impl<Node: Idx> Dominators<Node> {\n+    /// Whether the given Node has an immediate dominator.\n     pub fn is_reachable(&self, node: Node) -> bool {\n         self.immediate_dominators[node].is_some()\n     }\n@@ -320,6 +325,8 @@ impl<Node: Idx> Dominators<Node> {\n         self.immediate_dominators[node].unwrap()\n     }\n \n+    /// Provides an iterator over each dominator up the CFG, for the given Node.\n+    /// See the `impl Iterator for Iter` definition to understand how this works.\n     pub fn dominators(&self, node: Node) -> Iter<'_, Node> {\n         assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n         Iter { dominators: self, node: Some(node) }"}, {"sha": "7d127032179b4b83de5908eb50f4f3aaeb40c912", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1bbd655888ec50220e6cd34e846c816c1cad8f17/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bbd655888ec50220e6cd34e846c816c1cad8f17/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=1bbd655888ec50220e6cd34e846c816c1cad8f17", "patch": "@@ -2,8 +2,9 @@\n //! (thus indicating there is a loop in the CFG), or whose terminator is a function call.\n use crate::MirPass;\n \n+use rustc_data_structures::graph::dominators::Dominators;\n use rustc_middle::mir::{\n-    BasicBlock, BasicBlockData, BasicBlocks, Body, Statement, StatementKind, TerminatorKind,\n+    BasicBlock, BasicBlockData, Body, Statement, StatementKind, TerminatorKind,\n };\n use rustc_middle::ty::TyCtxt;\n \n@@ -12,13 +13,14 @@ pub struct CtfeLimit;\n impl<'tcx> MirPass<'tcx> for CtfeLimit {\n     #[instrument(skip(self, _tcx, body))]\n     fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let doms = body.basic_blocks.dominators();\n         let indices: Vec<BasicBlock> = body\n             .basic_blocks\n             .iter_enumerated()\n             .filter_map(|(node, node_data)| {\n                 if matches!(node_data.terminator().kind, TerminatorKind::Call { .. })\n                     // Back edges in a CFG indicate loops\n-                    || has_back_edge(&body.basic_blocks, node, &node_data)\n+                    || has_back_edge(&doms, node, &node_data)\n                 {\n                     Some(node)\n                 } else {\n@@ -37,17 +39,16 @@ impl<'tcx> MirPass<'tcx> for CtfeLimit {\n }\n \n fn has_back_edge(\n-    basic_blocks: &BasicBlocks<'_>,\n+    doms: &Dominators<BasicBlock>,\n     node: BasicBlock,\n     node_data: &BasicBlockData<'_>,\n ) -> bool {\n-    let doms = basic_blocks.dominators();\n-    basic_blocks.indices().any(|potential_dom| {\n-        doms.is_reachable(potential_dom)\n-            && doms.is_reachable(node)\n-            && doms.is_dominated_by(node, potential_dom)\n-            && node_data.terminator().successors().into_iter().any(|succ| succ == potential_dom)\n-    })\n+    if !doms.is_reachable(node) {\n+        return false;\n+    }\n+    // Check if any of the dominators of the node are also the node's successor.\n+    doms.dominators(node)\n+        .any(|dom| node_data.terminator().successors().into_iter().any(|succ| succ == dom))\n }\n \n fn insert_counter(basic_block_data: &mut BasicBlockData<'_>) {"}]}