{"sha": "cc7a82659404886ed0992dd085a7c5547ba66020", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjN2E4MjY1OTQwNDg4NmVkMDk5MmRkMDg1YTdjNTU0N2JhNjYwMjA=", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2018-07-26T15:18:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-07-26T15:18:37Z"}, "message": "Rollup merge of #52695 - oli-obk:const_err_panic, r=petrochenkov\n\nHide some lints which are not quite right the way they are reported to the user\n\nfixes #52603", "tree": {"sha": "89ca4ad95ccbd0f1427f70b28d05cc6e7e6944c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89ca4ad95ccbd0f1427f70b28d05cc6e7e6944c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc7a82659404886ed0992dd085a7c5547ba66020", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJbWeZOCRBK7hj4Ov3rIwAAdHIIAKJm27l0UswTT2cKzj7lQv4P\nnNLcBeRIztsqId2tXZwLppxnJ0UN/YM7h3qDtyA3NzBHRNCXr9zcsH1wa2UOXngi\ndV2/Hko4lcnupV0goykQD6u7KBV1vAgRpux2heK24j2CvEaw5HRjYPJPXUMhjgIN\nLOLnicyNp2h2+2CpnkuRXzYFrfyGTEOh2MIDLVIt1U8WfdWe3KiTNRePoU/oVFds\n3YQ3SjtA1UH+VpFMNmweGY5OPnNYF3Yh4ZRR1AIGg/zuzV3P9i0Mp95bJQRUVkTU\naPJJVvDfiFc5dC1CSaf1Qn0lvwEfcVZgwekpLaSUgnfuP2/qlvc+Xf9EeeMlcWI=\n=UQSi\n-----END PGP SIGNATURE-----\n", "payload": "tree 89ca4ad95ccbd0f1427f70b28d05cc6e7e6944c4\nparent 55fa4c73745320a004f352422f1e83654bdf5fc9\nparent ef5fba0067d35bf287476401671111c1f189e4bc\nauthor Mark Rousskov <mark.simulacrum@gmail.com> 1532618317 -0600\ncommitter GitHub <noreply@github.com> 1532618317 -0600\n\nRollup merge of #52695 - oli-obk:const_err_panic, r=petrochenkov\n\nHide some lints which are not quite right the way they are reported to the user\n\nfixes #52603\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc7a82659404886ed0992dd085a7c5547ba66020", "html_url": "https://github.com/rust-lang/rust/commit/cc7a82659404886ed0992dd085a7c5547ba66020", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc7a82659404886ed0992dd085a7c5547ba66020/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55fa4c73745320a004f352422f1e83654bdf5fc9", "url": "https://api.github.com/repos/rust-lang/rust/commits/55fa4c73745320a004f352422f1e83654bdf5fc9", "html_url": "https://github.com/rust-lang/rust/commit/55fa4c73745320a004f352422f1e83654bdf5fc9"}, {"sha": "ef5fba0067d35bf287476401671111c1f189e4bc", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5fba0067d35bf287476401671111c1f189e4bc", "html_url": "https://github.com/rust-lang/rust/commit/ef5fba0067d35bf287476401671111c1f189e4bc"}], "stats": {"total": 128, "additions": 117, "deletions": 11}, "files": [{"sha": "c8d4ce88f27c14e5673e7ec2b1e6aa3e4020531f", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 93, "deletions": 11, "changes": 104, "blob_url": "https://github.com/rust-lang/rust/blob/cc7a82659404886ed0992dd085a7c5547ba66020/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc7a82659404886ed0992dd085a7c5547ba66020/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=cc7a82659404886ed0992dd085a7c5547ba66020", "patch": "@@ -144,18 +144,100 @@ impl<'b, 'a, 'tcx:'b> ConstPropagator<'b, 'a, 'tcx> {\n         };\n         let r = match f(self) {\n             Ok(val) => Some(val),\n-            Err(err) => {\n-                match err.kind {\n+            Err(error) => {\n+                let (stacktrace, span) = self.ecx.generate_stacktrace(None);\n+                let diagnostic = ConstEvalErr { span, error, stacktrace };\n+                use rustc::mir::interpret::EvalErrorKind::*;\n+                match diagnostic.error.kind {\n                     // don't report these, they make no sense in a const prop context\n-                    EvalErrorKind::MachineError(_) => {},\n-                    _ => {\n-                        let (frames, span) = self.ecx.generate_stacktrace(None);\n-                        let err = ConstEvalErr {\n-                            span,\n-                            error: err,\n-                            stacktrace: frames,\n-                        };\n-                        err.report_as_lint(\n+                    | MachineError(_)\n+                    // at runtime these transformations might make sense\n+                    // FIXME: figure out the rules and start linting\n+                    | FunctionPointerTyMismatch(..)\n+                    // fine at runtime, might be a register address or sth\n+                    | ReadBytesAsPointer\n+                    // fine at runtime\n+                    | ReadForeignStatic\n+                    | Unimplemented(_)\n+                    // don't report const evaluator limits\n+                    | StackFrameLimitReached\n+                    | NoMirFor(..)\n+                    | InlineAsm\n+                    => {},\n+\n+                    | InvalidMemoryAccess\n+                    | DanglingPointerDeref\n+                    | DoubleFree\n+                    | InvalidFunctionPointer\n+                    | InvalidBool\n+                    | InvalidDiscriminant\n+                    | PointerOutOfBounds { .. }\n+                    | InvalidNullPointerUsage\n+                    | MemoryLockViolation { .. }\n+                    | MemoryAcquireConflict { .. }\n+                    | ValidationFailure(..)\n+                    | InvalidMemoryLockRelease { .. }\n+                    | DeallocatedLockedMemory { .. }\n+                    | InvalidPointerMath\n+                    | ReadUndefBytes\n+                    | DeadLocal\n+                    | InvalidBoolOp(_)\n+                    | DerefFunctionPointer\n+                    | ExecuteMemory\n+                    | Intrinsic(..)\n+                    | InvalidChar(..)\n+                    | AbiViolation(_)\n+                    | AlignmentCheckFailed{..}\n+                    | CalledClosureAsFunction\n+                    | VtableForArgumentlessMethod\n+                    | ModifiedConstantMemory\n+                    | AssumptionNotHeld\n+                    // FIXME: should probably be removed and turned into a bug! call\n+                    | TypeNotPrimitive(_)\n+                    | ReallocatedWrongMemoryKind(_, _)\n+                    | DeallocatedWrongMemoryKind(_, _)\n+                    | ReallocateNonBasePtr\n+                    | DeallocateNonBasePtr\n+                    | IncorrectAllocationInformation(..)\n+                    | UnterminatedCString(_)\n+                    | HeapAllocZeroBytes\n+                    | HeapAllocNonPowerOfTwoAlignment(_)\n+                    | Unreachable\n+                    | ReadFromReturnPointer\n+                    | GeneratorResumedAfterReturn\n+                    | GeneratorResumedAfterPanic\n+                    | ReferencedConstant(_)\n+                    | InfiniteLoop\n+                    => {\n+                        // FIXME: report UB here\n+                    },\n+\n+                    | OutOfTls\n+                    | TlsOutOfBounds\n+                    | PathNotFound(_)\n+                    => bug!(\"these should not be in rustc, but in miri's machine errors\"),\n+\n+                    | Layout(_)\n+                    | UnimplementedTraitSelection\n+                    | TypeckError\n+                    | TooGeneric\n+                    | CheckMatchError\n+                    // these are just noise\n+                    => {},\n+\n+                    // non deterministic\n+                    | ReadPointerAsBytes\n+                    // FIXME: implement\n+                    => {},\n+\n+                    | Panic\n+                    | BoundsCheck{..}\n+                    | Overflow(_)\n+                    | OverflowNeg\n+                    | DivisionByZero\n+                    | RemainderByZero\n+                    => {\n+                        diagnostic.report_as_lint(\n                             self.ecx.tcx,\n                             \"this expression will panic at runtime\",\n                             lint_root,"}, {"sha": "bea4fb76ed166f52ff3a34c564d6ddedb4a27d09", "filename": "src/test/ui/const-eval/const_prop_errors.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cc7a82659404886ed0992dd085a7c5547ba66020/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc7a82659404886ed0992dd085a7c5547ba66020/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-eval%2Fconst_prop_errors.rs?ref=cc7a82659404886ed0992dd085a7c5547ba66020", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+pub trait Foo {\n+    fn foo(self) -> u32;\n+}\n+\n+impl<T> Foo for T {\n+    fn foo(self) -> u32 {\n+        fn bar<T>() { loop {} }\n+        bar::<T> as u32\n+    }\n+}\n+\n+fn main() {}"}]}