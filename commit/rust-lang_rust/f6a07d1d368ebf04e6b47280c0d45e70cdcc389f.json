{"sha": "f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "node_id": "C_kwDOAAsO6NoAKGY2YTA3ZDFkMzY4ZWJmMDRlNmI0NzI4MGMwZDQ1ZTcwY2RjYzM4OWY", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-09-14T18:10:51Z"}, "message": "Auto merge of #101212 - eholk:dyn-star, r=compiler-errors\n\nInitial implementation of dyn*\n\nThis PR adds extremely basic and incomplete support for [dyn*](https://smallcultfollowing.com/babysteps//blog/2022/03/29/dyn-can-we-make-dyn-sized/). The goal is to get something in tree behind a flag to make collaboration easier, and also to make sure the implementation so far is not unreasonable. This PR does quite a few things:\n\n* Introduce `dyn_star` feature flag\n* Adds parsing for `dyn* Trait` types\n* Defines `dyn* Trait` as a sized type\n* Adds support for explicit casts, like `42usize as dyn* Debug`\n  * Including const evaluation of such casts\n* Adds codegen for drop glue so things are cleaned up properly when a `dyn* Trait` object goes out of scope\n* Adds codegen for method calls, at least for methods that take `&self`\n\nQuite a bit is still missing, but this gives us a starting point. Note that this is never intended to become stable surface syntax for Rust, but rather `dyn*` is planned to be used as an implementation detail for async functions in dyn traits.\n\nJoint work with `@nikomatsakis` and `@compiler-errors.`\n\nr? `@bjorn3`", "tree": {"sha": "93b452f880db69ba695e21d4c7a7295701b6f6b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93b452f880db69ba695e21d4c7a7295701b6f6b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "html_url": "https://github.com/rust-lang/rust/commit/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf043f6a168485ef8bae85af2616acd90d7485f4", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf043f6a168485ef8bae85af2616acd90d7485f4", "html_url": "https://github.com/rust-lang/rust/commit/cf043f6a168485ef8bae85af2616acd90d7485f4"}, {"sha": "27e91b65d565a21b11a0f31fdd2c61a582ea966e", "url": "https://api.github.com/repos/rust-lang/rust/commits/27e91b65d565a21b11a0f31fdd2c61a582ea966e", "html_url": "https://github.com/rust-lang/rust/commit/27e91b65d565a21b11a0f31fdd2c61a582ea966e"}], "stats": {"total": 15, "additions": 9, "deletions": 6}, "files": [{"sha": "8bdadf2440231d6c6604a9995a873eb44fb2fcd1", "filename": "clippy_lints/src/transmute/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute%2Futils.rs?ref=f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "patch": "@@ -2,7 +2,7 @@ use rustc_hir::Expr;\n use rustc_lint::LateContext;\n use rustc_middle::ty::{cast::CastKind, Ty};\n use rustc_span::DUMMY_SP;\n-use rustc_typeck::check::{cast::CastCheck, FnCtxt, Inherited};\n+use rustc_typeck::check::{cast::{self, CastCheckResult}, FnCtxt, Inherited};\n \n // check if the component types of the transmuted collection and the result have different ABI,\n // size or alignment\n@@ -53,7 +53,7 @@ fn check_cast<'tcx>(cx: &LateContext<'tcx>, e: &'tcx Expr<'_>, from_ty: Ty<'tcx>\n             \"Newly created FnCtxt contained errors\"\n         );\n \n-        if let Ok(check) = CastCheck::new(\n+        if let CastCheckResult::Deferred(check) = cast::check_cast(\n             &fn_ctxt, e, from_ty, to_ty,\n             // We won't show any error to the user, so we don't care what the span is here.\n             DUMMY_SP, DUMMY_SP,"}, {"sha": "8835b9329095818d14b610eb0bbdb68f57010995", "filename": "clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "patch": "@@ -82,7 +82,7 @@ fn check_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>, span: Span) -> McfResult {\n             ty::FnPtr(..) => {\n                 return Err((span, \"function pointers in const fn are unstable\".into()));\n             },\n-            ty::Dynamic(preds, _) => {\n+            ty::Dynamic(preds, _, _) => {\n                 for pred in preds.iter() {\n                     match pred.skip_binder() {\n                         ty::ExistentialPredicate::AutoTrait(_) | ty::ExistentialPredicate::Projection(_) => {\n@@ -161,6 +161,10 @@ fn check_rvalue<'tcx>(\n         Rvalue::Cast(CastKind::PointerExposeAddress, _, _) => {\n             Err((span, \"casting pointers to ints is unstable in const fn\".into()))\n         },\n+        Rvalue::Cast(CastKind::DynStar, _, _) => {\n+            // FIXME(dyn-star)\n+            unimplemented!()\n+        },\n         // binops are fine on integers\n         Rvalue::BinaryOp(_, box (lhs, rhs)) | Rvalue::CheckedBinaryOp(_, box (lhs, rhs)) => {\n             check_operand(tcx, lhs, span, body)?;\n@@ -221,7 +225,6 @@ fn check_statement<'tcx>(\n             check_operand(tcx, src, span, body)?;\n             check_operand(tcx, count, span, body)\n         },\n-\n         // These are all NOPs\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)"}, {"sha": "a8ad6cf4f6a3c9e3b7134ade39d808fd907d072d", "filename": "clippy_utils/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_utils%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6a07d1d368ebf04e6b47280c0d45e70cdcc389f/clippy_utils%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fty.rs?ref=f6a07d1d368ebf04e6b47280c0d45e70cdcc389f", "patch": "@@ -201,7 +201,7 @@ pub fn is_must_use_ty<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> bool {\n             }\n             false\n         },\n-        ty::Dynamic(binder, _) => {\n+        ty::Dynamic(binder, _, _) => {\n             for predicate in binder.iter() {\n                 if let ty::ExistentialPredicate::Trait(ref trait_ref) = predicate.skip_binder() {\n                     if cx.tcx.has_attr(trait_ref.def_id, sym::must_use) {\n@@ -579,7 +579,7 @@ pub fn ty_sig<'tcx>(cx: &LateContext<'tcx>, ty: Ty<'tcx>) -> Option<ExprFnSig<'t\n         ty::FnDef(id, subs) => Some(ExprFnSig::Sig(cx.tcx.bound_fn_sig(id).subst(cx.tcx, subs), Some(id))),\n         ty::Opaque(id, _) => sig_from_bounds(cx, ty, cx.tcx.item_bounds(id), cx.tcx.opt_parent(id)),\n         ty::FnPtr(sig) => Some(ExprFnSig::Sig(sig, None)),\n-        ty::Dynamic(bounds, _) => {\n+        ty::Dynamic(bounds, _, _) => {\n             let lang_items = cx.tcx.lang_items();\n             match bounds.principal() {\n                 Some(bound)"}]}