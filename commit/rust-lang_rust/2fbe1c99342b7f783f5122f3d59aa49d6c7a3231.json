{"sha": "2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmYmUxYzk5MzQyYjdmNzgzZjUxMjJmM2Q1OWFhNDlkNmM3YTMyMzE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-08-20T12:36:36Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-08-20T12:36:36Z"}, "message": "Merge #9960\n\n9960: internal: Use ExpandResult in all TokenExpanders r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "8594dfb80eac86090e472f04569cc7a17be89080", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8594dfb80eac86090e472f04569cc7a17be89080"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhH6HUCRBK7hj4Ov3rIwAAx+4IALBLaa3Bmr2CO6OgY34Wx0om\nbg3XI+pdNlhMGNBIEbMDzNdUV3BJ0EvsHFhlTbqsm7SC4ceDLGxDlDisdU2Vd7Uh\nFOnlLBY8pKxB0SR39wR6nYucUmfWoo5MeVBrkvdXipqMo+Oiu0nYfwehlzYrPsiD\nf/meY124UkAWdCkhtnhqYE2Bj3p8LbbqeFYyPQ+NTxjz6NQqZR/xbIGq+2R/VUy9\nboEZTVzy9+laddT5NIXpuPsTksw5rWhZThbzGoY/EDtjFi4HXpyGOmSf4iyVBVwg\nTpwgszkN7YyksGWija5dcEaQ4QUi42ihtjujX+syQ90cI+Aiu3kG7deI565jvu0=\n=rTEA\n-----END PGP SIGNATURE-----\n", "payload": "tree 8594dfb80eac86090e472f04569cc7a17be89080\nparent da5a5ba3786d19da13172d388b3f819eabd36b9d\nparent 82728eb7576c46576dfcd3c6b4edc99bd8766572\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1629462996 +0000\ncommitter GitHub <noreply@github.com> 1629462996 +0000\n\nMerge #9960\n\n9960: internal: Use ExpandResult in all TokenExpanders r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "html_url": "https://github.com/rust-lang/rust/commit/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da5a5ba3786d19da13172d388b3f819eabd36b9d", "url": "https://api.github.com/repos/rust-lang/rust/commits/da5a5ba3786d19da13172d388b3f819eabd36b9d", "html_url": "https://github.com/rust-lang/rust/commit/da5a5ba3786d19da13172d388b3f819eabd36b9d"}, {"sha": "82728eb7576c46576dfcd3c6b4edc99bd8766572", "url": "https://api.github.com/repos/rust-lang/rust/commits/82728eb7576c46576dfcd3c6b4edc99bd8766572", "html_url": "https://github.com/rust-lang/rust/commit/82728eb7576c46576dfcd3c6b4edc99bd8766572"}], "stats": {"total": 95, "additions": 37, "deletions": 58}, "files": [{"sha": "6257050d802135d248ba923a4e305841639bb265", "filename": "crates/hir_expand/src/builtin_attr.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_attr.rs?ref=2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "patch": "@@ -1,5 +1,6 @@\n //! Builtin attributes.\n \n+use mbe::ExpandResult;\n use syntax::ast;\n \n use crate::{db::AstDatabase, name, AstId, CrateId, MacroCallId, MacroDefId, MacroDefKind};\n@@ -18,7 +19,7 @@ macro_rules! register_builtin {\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n                 item: &tt::Subtree,\n-            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+            ) -> ExpandResult<tt::Subtree> {\n                 let expander = match *self {\n                     $( BuiltinAttrExpander::$variant => $expand, )*\n                 };\n@@ -64,6 +65,6 @@ fn dummy_attr_expand(\n     _id: MacroCallId,\n     _tt: &tt::Subtree,\n     item: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n-    Ok(item.clone())\n+) -> ExpandResult<tt::Subtree> {\n+    ExpandResult::ok(item.clone())\n }"}, {"sha": "57a5fb49726ec5a374852e1e9829bc56fb774e8e", "filename": "crates/hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "patch": "@@ -2,6 +2,7 @@\n \n use log::debug;\n \n+use mbe::ExpandResult;\n use parser::FragmentKind;\n use syntax::{\n     ast::{self, AstNode, GenericParamsOwner, ModuleItemOwner, NameOwner},\n@@ -23,7 +24,7 @@ macro_rules! register_builtin {\n                 db: &dyn AstDatabase,\n                 id: MacroCallId,\n                 tt: &tt::Subtree,\n-            ) -> Result<tt::Subtree, mbe::ExpandError> {\n+            ) -> ExpandResult<tt::Subtree> {\n                 let expander = match *self {\n                     $( BuiltinDeriveExpander::$trait => $expand, )*\n                 };\n@@ -147,11 +148,11 @@ fn make_type_args(n: usize, bound: Vec<tt::TokenTree>) -> Vec<tt::TokenTree> {\n     result\n }\n \n-fn expand_simple_derive(\n-    tt: &tt::Subtree,\n-    trait_path: tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n-    let info = parse_adt(tt)?;\n+fn expand_simple_derive(tt: &tt::Subtree, trait_path: tt::Subtree) -> ExpandResult<tt::Subtree> {\n+    let info = match parse_adt(tt) {\n+        Ok(info) => info,\n+        Err(e) => return ExpandResult::only_err(e),\n+    };\n     let name = info.name;\n     let trait_path_clone = trait_path.token_trees.clone();\n     let bound = (quote! { : ##trait_path_clone }).token_trees;\n@@ -161,7 +162,7 @@ fn expand_simple_derive(\n     let expanded = quote! {\n         impl ##type_params ##trait_path for #name ##type_args {}\n     };\n-    Ok(expanded)\n+    ExpandResult::ok(expanded)\n }\n \n fn find_builtin_crate(db: &dyn AstDatabase, id: MacroCallId) -> tt::TokenTree {\n@@ -186,7 +187,7 @@ fn copy_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::marker::Copy })\n }\n@@ -195,7 +196,7 @@ fn clone_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::clone::Clone })\n }\n@@ -204,7 +205,7 @@ fn default_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::default::Default })\n }\n@@ -213,7 +214,7 @@ fn debug_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::fmt::Debug })\n }\n@@ -222,16 +223,12 @@ fn hash_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::hash::Hash })\n }\n \n-fn eq_expand(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-    tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+fn eq_expand(db: &dyn AstDatabase, id: MacroCallId, tt: &tt::Subtree) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::Eq })\n }\n@@ -240,7 +237,7 @@ fn partial_eq_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::PartialEq })\n }\n@@ -249,7 +246,7 @@ fn ord_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::Ord })\n }\n@@ -258,7 +255,7 @@ fn partial_ord_expand(\n     db: &dyn AstDatabase,\n     id: MacroCallId,\n     tt: &tt::Subtree,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+) -> ExpandResult<tt::Subtree> {\n     let krate = find_builtin_crate(db, id);\n     expand_simple_derive(tt, quote! { #krate::cmp::PartialOrd })\n }"}, {"sha": "f2b1895046ac271196bcaa4f5922258ac2200ea9", "filename": "crates/hir_expand/src/db.rs", "status": "modified", "additions": 7, "deletions": 17, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fdb.rs?ref=2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "patch": "@@ -53,19 +53,16 @@ impl TokenExpander {\n             TokenExpander::MacroRules { mac, .. } => mac.expand(tt),\n             TokenExpander::MacroDef { mac, .. } => mac.expand(tt),\n             TokenExpander::Builtin(it) => it.expand(db, id, tt),\n-            // FIXME switch these to ExpandResult as well\n             TokenExpander::BuiltinAttr(it) => match db.macro_arg(id) {\n-                Some(macro_arg) => it.expand(db, id, tt, &macro_arg.0).into(),\n-                None => mbe::ExpandResult::only_err(\n-                    mbe::ExpandError::Other(\"No item argument for attribute\".to_string()).into(),\n-                ),\n+                Some(macro_arg) => it.expand(db, id, tt, &macro_arg.0),\n+                None => mbe::ExpandResult::str_err(\"No item argument for attribute\".to_string()),\n             },\n-            TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt).into(),\n+            TokenExpander::BuiltinDerive(it) => it.expand(db, id, tt),\n             TokenExpander::ProcMacro(_) => {\n                 // We store the result in salsa db to prevent non-deterministic behavior in\n                 // some proc-macro implementation\n                 // See #4315 for details\n-                db.expand_proc_macro(id).into()\n+                db.expand_proc_macro(id)\n             }\n         }\n     }\n@@ -133,7 +130,7 @@ pub trait AstDatabase: SourceDatabase {\n     /// proc macros, since they are not deterministic in general, and\n     /// non-determinism breaks salsa in a very, very, very bad way. @edwin0cheng\n     /// heroically debugged this once!\n-    fn expand_proc_macro(&self, call: MacroCallId) -> Result<tt::Subtree, mbe::ExpandError>;\n+    fn expand_proc_macro(&self, call: MacroCallId) -> ExpandResult<tt::Subtree>;\n     /// Firewall query that returns the error from the `macro_expand` query.\n     fn macro_expand_error(&self, macro_call: MacroCallId) -> Option<ExpandError>;\n \n@@ -379,18 +376,11 @@ fn macro_expand_error(db: &dyn AstDatabase, macro_call: MacroCallId) -> Option<E\n     db.macro_expand(macro_call).err\n }\n \n-fn expand_proc_macro(\n-    db: &dyn AstDatabase,\n-    id: MacroCallId,\n-) -> Result<tt::Subtree, mbe::ExpandError> {\n+fn expand_proc_macro(db: &dyn AstDatabase, id: MacroCallId) -> ExpandResult<tt::Subtree> {\n     let loc: MacroCallLoc = db.lookup_intern_macro(id);\n     let macro_arg = match db.macro_arg(id) {\n         Some(it) => it,\n-        None => {\n-            return Err(\n-                tt::ExpansionError::Unknown(\"No arguments for proc-macro\".to_string()).into()\n-            )\n-        }\n+        None => return ExpandResult::str_err(\"No arguments for proc-macro\".to_string()),\n     };\n \n     let expander = match loc.def.kind {"}, {"sha": "f5e67a693d46edad3b24563426526547fd8f7e41", "filename": "crates/hir_expand/src/input.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Finput.rs?ref=2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "patch": "@@ -62,8 +62,7 @@ fn remove_attr_invoc(item: ast::Item, attr_index: usize) -> ast::Item {\n \n #[cfg(test)]\n mod tests {\n-    use base_db::fixture::WithFixture;\n-    use base_db::SourceDatabase;\n+    use base_db::{fixture::WithFixture, SourceDatabase};\n     use expect_test::{expect, Expect};\n \n     use crate::test_db::TestDB;"}, {"sha": "1e5fff07d5129bb155c00fe1f23841a3ae0c7df5", "filename": "crates/hir_expand/src/proc_macro.rs", "status": "modified", "additions": 8, "deletions": 16, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2fbe1c99342b7f783f5122f3d59aa49d6c7a3231/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir_expand%2Fsrc%2Fproc_macro.rs?ref=2fbe1c99342b7f783f5122f3d59aa49d6c7a3231", "patch": "@@ -2,22 +2,14 @@\n \n use crate::db::AstDatabase;\n use base_db::{CrateId, ProcMacroId};\n+use mbe::ExpandResult;\n \n #[derive(Debug, Clone, Copy, Eq, PartialEq, Hash)]\n pub struct ProcMacroExpander {\n     krate: CrateId,\n     proc_macro_id: Option<ProcMacroId>,\n }\n \n-macro_rules! err {\n-    ($fmt:literal, $($tt:tt),*) => {\n-        mbe::ExpandError::ProcMacroError(tt::ExpansionError::Unknown(format!($fmt, $($tt),*)))\n-    };\n-    ($fmt:literal) => {\n-        mbe::ExpandError::ProcMacroError(tt::ExpansionError::Unknown($fmt.to_string()))\n-    }\n-}\n-\n impl ProcMacroExpander {\n     pub fn new(krate: CrateId, proc_macro_id: ProcMacroId) -> Self {\n         Self { krate, proc_macro_id: Some(proc_macro_id) }\n@@ -38,21 +30,21 @@ impl ProcMacroExpander {\n         calling_crate: CrateId,\n         tt: &tt::Subtree,\n         attr_arg: Option<&tt::Subtree>,\n-    ) -> Result<tt::Subtree, mbe::ExpandError> {\n+    ) -> ExpandResult<tt::Subtree> {\n         match self.proc_macro_id {\n             Some(id) => {\n                 let krate_graph = db.crate_graph();\n-                let proc_macro = krate_graph[self.krate]\n-                    .proc_macro\n-                    .get(id.0 as usize)\n-                    .ok_or_else(|| err!(\"No derive macro found.\"))?;\n+                let proc_macro = match krate_graph[self.krate].proc_macro.get(id.0 as usize) {\n+                    Some(proc_macro) => proc_macro,\n+                    None => return ExpandResult::str_err(\"No derive macro found.\".to_string()),\n+                };\n \n                 // Proc macros have access to the environment variables of the invoking crate.\n                 let env = &krate_graph[calling_crate].env;\n \n-                proc_macro.expander.expand(tt, attr_arg, env).map_err(mbe::ExpandError::from)\n+                proc_macro.expander.expand(tt, attr_arg, env).map_err(mbe::ExpandError::from).into()\n             }\n-            None => Err(mbe::ExpandError::UnresolvedProcMacro),\n+            None => ExpandResult::only_err(mbe::ExpandError::UnresolvedProcMacro),\n         }\n     }\n }"}]}