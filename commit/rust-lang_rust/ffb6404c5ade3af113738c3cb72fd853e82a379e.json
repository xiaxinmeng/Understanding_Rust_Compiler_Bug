{"sha": "ffb6404c5ade3af113738c3cb72fd853e82a379e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmYjY0MDRjNWFkZTNhZjExMzczOGMzY2I3MmZkODUzZTgyYTM3OWU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-21T13:31:02Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-08-21T14:50:42Z"}, "message": "Adjust callbacks in the libraries for the new type of extern fns\n\ncc #3678", "tree": {"sha": "1d23b3e18b9b6da03291111a039cf3e9aca7f717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d23b3e18b9b6da03291111a039cf3e9aca7f717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ffb6404c5ade3af113738c3cb72fd853e82a379e", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb6404c5ade3af113738c3cb72fd853e82a379e", "html_url": "https://github.com/rust-lang/rust/commit/ffb6404c5ade3af113738c3cb72fd853e82a379e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ffb6404c5ade3af113738c3cb72fd853e82a379e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82a9abbf624daaaca0c9761ee1bea6097472975c", "url": "https://api.github.com/repos/rust-lang/rust/commits/82a9abbf624daaaca0c9761ee1bea6097472975c", "html_url": "https://github.com/rust-lang/rust/commit/82a9abbf624daaaca0c9761ee1bea6097472975c"}], "stats": {"total": 201, "additions": 168, "deletions": 33}, "files": [{"sha": "09ef7f22be5912b4d34c9d3f22c13e68b05d6844", "filename": "src/libextra/rl.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibextra%2Frl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibextra%2Frl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Frl.rs?ref=ffb6404c5ade3af113738c3cb72fd853e82a379e", "patch": "@@ -16,27 +16,31 @@ use std::libc::{c_char, c_int};\n use std::local_data;\n use std::str;\n \n+#[cfg(stage0)]\n pub mod rustrt {\n     use std::libc::{c_char, c_int};\n \n-    #[cfg(stage0)]\n-    mod macro_hack {\n-    #[macro_escape];\n-    macro_rules! externfn(\n-        (fn $name:ident ($($arg_name:ident : $arg_ty:ty),*) $(-> $ret_ty:ty),*) => (\n-            extern {\n-                fn $name($($arg_name : $arg_ty),*) $(-> $ret_ty),*;\n-            }\n-        )\n-    )\n+    extern {\n+        fn linenoise(prompt: *c_char) -> *c_char;\n+        fn linenoiseHistoryAdd(line: *c_char) -> c_int;\n+        fn linenoiseHistorySetMaxLen(len: c_int) -> c_int;\n+        fn linenoiseHistorySave(file: *c_char) -> c_int;\n+        fn linenoiseHistoryLoad(file: *c_char) -> c_int;\n+        fn linenoiseSetCompletionCallback(callback: *u8);\n+        fn linenoiseAddCompletion(completions: *(), line: *c_char);\n     }\n+}\n+\n+#[cfg(not(stage0))]\n+pub mod rustrt {\n+    use std::libc::{c_char, c_int};\n \n     externfn!(fn linenoise(prompt: *c_char) -> *c_char)\n     externfn!(fn linenoiseHistoryAdd(line: *c_char) -> c_int)\n     externfn!(fn linenoiseHistorySetMaxLen(len: c_int) -> c_int)\n     externfn!(fn linenoiseHistorySave(file: *c_char) -> c_int)\n     externfn!(fn linenoiseHistoryLoad(file: *c_char) -> c_int)\n-    externfn!(fn linenoiseSetCompletionCallback(callback: *u8))\n+    externfn!(fn linenoiseSetCompletionCallback(callback: extern \"C\" fn(*i8, *())))\n     externfn!(fn linenoiseAddCompletion(completions: *(), line: *c_char))\n }\n "}, {"sha": "5f232c7881a62c87bf235cb77fd2938d7093ff85", "filename": "src/libstd/ptr.rs", "status": "modified", "additions": 41, "deletions": 0, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fptr.rs?ref=ffb6404c5ade3af113738c3cb72fd853e82a379e", "patch": "@@ -369,6 +369,47 @@ impl<T> Eq for *const T {\n     fn ne(&self, other: &*const T) -> bool { !self.eq(other) }\n }\n \n+// Equality for extern \"C\" fn pointers\n+#[cfg(not(test))]\n+mod externfnpointers {\n+    use cast;\n+    use cmp::Eq;\n+\n+    impl<_R> Eq for extern \"C\" fn() -> _R {\n+        #[inline]\n+        fn eq(&self, other: &extern \"C\" fn() -> _R) -> bool {\n+            let self_: *() = unsafe { cast::transmute(*self) };\n+            let other_: *() = unsafe { cast::transmute(*other) };\n+            self_ == other_\n+        }\n+        #[inline]\n+        fn ne(&self, other: &extern \"C\" fn() -> _R) -> bool {\n+            !self.eq(other)\n+        }\n+    }\n+    macro_rules! fnptreq(\n+        ($($p:ident),*) => {\n+            impl<_R,$($p),*> Eq for extern \"C\" fn($($p),*) -> _R {\n+                #[inline]\n+                fn eq(&self, other: &extern \"C\" fn($($p),*) -> _R) -> bool {\n+                    let self_: *() = unsafe { cast::transmute(*self) };\n+                    let other_: *() = unsafe { cast::transmute(*other) };\n+                    self_ == other_\n+                }\n+                #[inline]\n+                fn ne(&self, other: &extern \"C\" fn($($p),*) -> _R) -> bool {\n+                    !self.eq(other)\n+                }\n+            }\n+        }\n+    )\n+    fnptreq!(A)\n+    fnptreq!(A,B)\n+    fnptreq!(A,B,C)\n+    fnptreq!(A,B,C,D)\n+    fnptreq!(A,B,C,D,E)\n+}\n+\n // Comparison for pointers\n #[cfg(not(test))]\n impl<T> Ord for *const T {"}, {"sha": "12ba39a6dcd67c9195636a2b0a6d92b95e130cdc", "filename": "src/libstd/rt/task.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Frt%2Ftask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Frt%2Ftask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Ftask.rs?ref=ffb6404c5ade3af113738c3cb72fd853e82a379e", "patch": "@@ -445,8 +445,17 @@ impl Unwinder {\n         }\n \n         extern {\n+            #[cfg(not(stage0))]\n             #[rust_stack]\n-            fn rust_try(f: *u8, code: *c_void, data: *c_void) -> uintptr_t;\n+            fn rust_try(f: extern \"C\" fn(*c_void, *c_void),\n+                        code: *c_void,\n+                        data: *c_void) -> uintptr_t;\n+\n+            #[cfg(stage0)]\n+            #[rust_stack]\n+            fn rust_try(f: *u8,\n+                        code: *c_void,\n+                        data: *c_void) -> uintptr_t;\n         }\n     }\n "}, {"sha": "71387b09a8d0a5bf628b77859a2a5a791d893ca8", "filename": "src/libstd/rt/uv/uvll.rs", "status": "modified", "additions": 102, "deletions": 21, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ffb6404c5ade3af113738c3cb72fd853e82a379e/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fuv%2Fuvll.rs?ref=ffb6404c5ade3af113738c3cb72fd853e82a379e", "patch": "@@ -31,6 +31,8 @@\n \n use c_str::ToCStr;\n use libc::{size_t, c_int, c_uint, c_void, c_char, uintptr_t};\n+#[cfg(not(stage0))]\n+use libc::ssize_t;\n use libc::{malloc, free};\n use libc;\n use prelude::*;\n@@ -63,17 +65,78 @@ pub type uv_idle_t = c_void;\n pub type uv_tcp_t = c_void;\n pub type uv_udp_t = c_void;\n pub type uv_connect_t = c_void;\n+pub type uv_connection_t = c_void;\n pub type uv_write_t = c_void;\n pub type uv_async_t = c_void;\n pub type uv_timer_t = c_void;\n pub type uv_stream_t = c_void;\n pub type uv_fs_t = c_void;\n pub type uv_udp_send_t = c_void;\n \n+#[cfg(stage0)]\n pub type uv_idle_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_alloc_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_read_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_udp_send_cb = *u8;\n+#[cfg(stage0)]\n pub type uv_udp_recv_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_close_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_walk_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_async_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_connect_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_connection_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_timer_cb = *u8;\n+#[cfg(stage0)]\n+pub type uv_write_cb = *u8;\n+\n+#[cfg(not(stage0))]\n+pub type uv_idle_cb = extern \"C\" fn(handle: *uv_idle_t,\n+                                    status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_alloc_cb = extern \"C\" fn(stream: *uv_stream_t,\n+                                     suggested_size: size_t) -> uv_buf_t;\n+#[cfg(not(stage0))]\n+pub type uv_read_cb = extern \"C\" fn(stream: *uv_stream_t,\n+                                    nread: ssize_t,\n+                                    buf: uv_buf_t);\n+#[cfg(not(stage0))]\n+pub type uv_udp_send_cb = extern \"C\" fn(req: *uv_udp_send_t,\n+                                        status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_udp_recv_cb = extern \"C\" fn(handle: *uv_udp_t,\n+                                        nread: ssize_t,\n+                                        buf: uv_buf_t,\n+                                        addr: *sockaddr,\n+                                        flags: c_uint);\n+#[cfg(not(stage0))]\n+pub type uv_close_cb = extern \"C\" fn(handle: *uv_handle_t);\n+#[cfg(not(stage0))]\n+pub type uv_walk_cb = extern \"C\" fn(handle: *uv_handle_t,\n+                                    arg: *c_void);\n+#[cfg(not(stage0))]\n+pub type uv_async_cb = extern \"C\" fn(handle: *uv_async_t,\n+                                     status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_connect_cb = extern \"C\" fn(handle: *uv_connect_t,\n+                                       status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_connection_cb = extern \"C\" fn(handle: *uv_connection_t,\n+                                          status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_timer_cb = extern \"C\" fn(handle: *uv_timer_t,\n+                                     status: c_int);\n+#[cfg(not(stage0))]\n+pub type uv_write_cb = extern \"C\" fn(handle: *uv_write_t,\n+                                     status: c_int);\n \n pub type sockaddr = c_void;\n pub type sockaddr_in = c_void;\n@@ -191,13 +254,13 @@ pub unsafe fn run(loop_handle: *c_void) {\n     rust_uv_run(loop_handle);\n }\n \n-pub unsafe fn close<T>(handle: *T, cb: *u8) {\n+pub unsafe fn close<T>(handle: *T, cb: uv_close_cb) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     rust_uv_close(handle as *c_void, cb);\n }\n \n-pub unsafe fn walk(loop_handle: *c_void, cb: *u8, arg: *c_void) {\n+pub unsafe fn walk(loop_handle: *c_void, cb: uv_walk_cb, arg: *c_void) {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     rust_uv_walk(loop_handle, cb, arg);\n@@ -332,14 +395,14 @@ pub unsafe fn tcp_init(loop_handle: *c_void, handle: *uv_tcp_t) -> c_int {\n }\n \n pub unsafe fn tcp_connect(connect_ptr: *uv_connect_t, tcp_handle_ptr: *uv_tcp_t,\n-                          addr_ptr: *sockaddr_in, after_connect_cb: *u8) -> c_int {\n+                          addr_ptr: *sockaddr_in, after_connect_cb: uv_connect_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_tcp_connect(connect_ptr, tcp_handle_ptr, after_connect_cb, addr_ptr);\n }\n \n pub unsafe fn tcp_connect6(connect_ptr: *uv_connect_t, tcp_handle_ptr: *uv_tcp_t,\n-                           addr_ptr: *sockaddr_in6, after_connect_cb: *u8) -> c_int {\n+                           addr_ptr: *sockaddr_in6, after_connect_cb: uv_connect_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_tcp_connect6(connect_ptr, tcp_handle_ptr, after_connect_cb, addr_ptr);\n@@ -387,7 +450,8 @@ pub unsafe fn tcp_simultaneous_accepts(handle: *uv_tcp_t, enable: c_int) -> c_in\n     return rust_uv_tcp_simultaneous_accepts(handle, enable);\n }\n \n-pub unsafe fn listen<T>(stream: *T, backlog: c_int, cb: *u8) -> c_int {\n+pub unsafe fn listen<T>(stream: *T, backlog: c_int,\n+                        cb: uv_connection_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_listen(stream as *c_void, backlog, cb);\n@@ -399,14 +463,19 @@ pub unsafe fn accept(server: *c_void, client: *c_void) -> c_int {\n     return rust_uv_accept(server as *c_void, client as *c_void);\n }\n \n-pub unsafe fn write<T>(req: *uv_write_t, stream: *T, buf_in: &[uv_buf_t], cb: *u8) -> c_int {\n+pub unsafe fn write<T>(req: *uv_write_t,\n+                       stream: *T,\n+                       buf_in: &[uv_buf_t],\n+                       cb: uv_write_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     let buf_ptr = vec::raw::to_ptr(buf_in);\n     let buf_cnt = buf_in.len() as i32;\n     return rust_uv_write(req as *c_void, stream as *c_void, buf_ptr, buf_cnt, cb);\n }\n-pub unsafe fn read_start(stream: *uv_stream_t, on_alloc: uv_alloc_cb, on_read: *u8) -> c_int {\n+pub unsafe fn read_start(stream: *uv_stream_t,\n+                         on_alloc: uv_alloc_cb,\n+                         on_read: uv_read_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_read_start(stream as *c_void, on_alloc, on_read);\n@@ -435,7 +504,9 @@ pub unsafe fn err_name(err: *uv_err_t) -> *c_char {\n     return rust_uv_err_name(err);\n }\n \n-pub unsafe fn async_init(loop_handle: *c_void, async_handle: *uv_async_t, cb: *u8) -> c_int {\n+pub unsafe fn async_init(loop_handle: *c_void,\n+                         async_handle: *uv_async_t,\n+                         cb: uv_async_cb) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n     return rust_uv_async_init(loop_handle, async_handle, cb);\n@@ -460,7 +531,8 @@ pub unsafe fn timer_init(loop_ptr: *c_void, timer_ptr: *uv_timer_t) -> c_int {\n \n     return rust_uv_timer_init(loop_ptr, timer_ptr);\n }\n-pub unsafe fn timer_start(timer_ptr: *uv_timer_t, cb: *u8, timeout: u64,\n+pub unsafe fn timer_start(timer_ptr: *uv_timer_t,\n+                          cb: uv_timer_cb, timeout: u64,\n                           repeat: u64) -> c_int {\n     #[fixed_stack_segment]; #[inline(never)];\n \n@@ -634,8 +706,8 @@ extern {\n     fn rust_uv_loop_new() -> *c_void;\n     fn rust_uv_loop_delete(lp: *c_void);\n     fn rust_uv_run(loop_handle: *c_void);\n-    fn rust_uv_close(handle: *c_void, cb: *u8);\n-    fn rust_uv_walk(loop_handle: *c_void, cb: *u8, arg: *c_void);\n+    fn rust_uv_close(handle: *c_void, cb: uv_close_cb);\n+    fn rust_uv_walk(loop_handle: *c_void, cb: uv_walk_cb, arg: *c_void);\n \n     fn rust_uv_idle_new() -> *uv_idle_t;\n     fn rust_uv_idle_delete(handle: *uv_idle_t);\n@@ -644,7 +716,9 @@ extern {\n     fn rust_uv_idle_stop(handle: *uv_idle_t) -> c_int;\n \n     fn rust_uv_async_send(handle: *uv_async_t);\n-    fn rust_uv_async_init(loop_handle: *c_void, async_handle: *uv_async_t, cb: *u8) -> c_int;\n+    fn rust_uv_async_init(loop_handle: *c_void,\n+                          async_handle: *uv_async_t,\n+                          cb: uv_async_cb) -> c_int;\n     fn rust_uv_tcp_init(loop_handle: *c_void, handle_ptr: *uv_tcp_t) -> c_int;\n     fn rust_uv_buf_init(out_buf: *uv_buf_t, base: *u8, len: size_t);\n     fn rust_uv_last_error(loop_handle: *c_void) -> uv_err_t;\n@@ -658,10 +732,12 @@ extern {\n     fn rust_uv_ip6_name(src: *sockaddr_in6, dst: *u8, size: size_t) -> c_int;\n     fn rust_uv_ip4_port(src: *sockaddr_in) -> c_uint;\n     fn rust_uv_ip6_port(src: *sockaddr_in6) -> c_uint;\n-    fn rust_uv_tcp_connect(req: *uv_connect_t, handle: *uv_tcp_t, cb: *u8,\n+    fn rust_uv_tcp_connect(req: *uv_connect_t, handle: *uv_tcp_t,\n+                           cb: uv_connect_cb,\n                            addr: *sockaddr_in) -> c_int;\n     fn rust_uv_tcp_bind(tcp_server: *uv_tcp_t, addr: *sockaddr_in) -> c_int;\n-    fn rust_uv_tcp_connect6(req: *uv_connect_t, handle: *uv_tcp_t, cb: *u8,\n+    fn rust_uv_tcp_connect6(req: *uv_connect_t, handle: *uv_tcp_t,\n+                            cb: uv_connect_cb,\n                             addr: *sockaddr_in6) -> c_int;\n     fn rust_uv_tcp_bind6(tcp_server: *uv_tcp_t, addr: *sockaddr_in6) -> c_int;\n     fn rust_uv_tcp_getpeername(tcp_handle_ptr: *uv_tcp_t, name: *sockaddr_storage) -> c_int;\n@@ -674,10 +750,12 @@ extern {\n     fn rust_uv_udp_bind(server: *uv_udp_t, addr: *sockaddr_in, flags: c_uint) -> c_int;\n     fn rust_uv_udp_bind6(server: *uv_udp_t, addr: *sockaddr_in6, flags: c_uint) -> c_int;\n     fn rust_uv_udp_send(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n-                        buf_cnt: c_int, addr: *sockaddr_in, cb: *u8) -> c_int;\n+                        buf_cnt: c_int, addr: *sockaddr_in, cb: uv_udp_send_cb) -> c_int;\n     fn rust_uv_udp_send6(req: *uv_udp_send_t, handle: *uv_udp_t, buf_in: *uv_buf_t,\n-                         buf_cnt: c_int, addr: *sockaddr_in6, cb: *u8) -> c_int;\n-    fn rust_uv_udp_recv_start(server: *uv_udp_t, on_alloc: *u8, on_recv: *u8) -> c_int;\n+                         buf_cnt: c_int, addr: *sockaddr_in6, cb: uv_udp_send_cb) -> c_int;\n+    fn rust_uv_udp_recv_start(server: *uv_udp_t,\n+                              on_alloc: uv_alloc_cb,\n+                              on_recv: uv_udp_recv_cb) -> c_int;\n     fn rust_uv_udp_recv_stop(server: *uv_udp_t) -> c_int;\n     fn rust_uv_get_udp_handle_from_send_req(req: *uv_udp_send_t) -> *uv_udp_t;\n     fn rust_uv_udp_getsockname(handle: *uv_udp_t, name: *sockaddr_storage) -> c_int;\n@@ -693,14 +771,17 @@ extern {\n     fn rust_uv_malloc_sockaddr_storage() -> *sockaddr_storage;\n     fn rust_uv_free_sockaddr_storage(ss: *sockaddr_storage);\n \n-    fn rust_uv_listen(stream: *c_void, backlog: c_int, cb: *u8) -> c_int;\n+    fn rust_uv_listen(stream: *c_void, backlog: c_int,\n+                      cb: uv_connection_cb) -> c_int;\n     fn rust_uv_accept(server: *c_void, client: *c_void) -> c_int;\n     fn rust_uv_write(req: *c_void, stream: *c_void, buf_in: *uv_buf_t, buf_cnt: c_int,\n-                     cb: *u8) -> c_int;\n-    fn rust_uv_read_start(stream: *c_void, on_alloc: *u8, on_read: *u8) -> c_int;\n+                     cb: uv_write_cb) -> c_int;\n+    fn rust_uv_read_start(stream: *c_void,\n+                          on_alloc: uv_alloc_cb,\n+                          on_read: uv_read_cb) -> c_int;\n     fn rust_uv_read_stop(stream: *c_void) -> c_int;\n     fn rust_uv_timer_init(loop_handle: *c_void, timer_handle: *uv_timer_t) -> c_int;\n-    fn rust_uv_timer_start(timer_handle: *uv_timer_t, cb: *u8, timeout: libc::uint64_t,\n+    fn rust_uv_timer_start(timer_handle: *uv_timer_t, cb: uv_timer_cb, timeout: libc::uint64_t,\n                            repeat: libc::uint64_t) -> c_int;\n     fn rust_uv_timer_stop(handle: *uv_timer_t) -> c_int;\n "}]}