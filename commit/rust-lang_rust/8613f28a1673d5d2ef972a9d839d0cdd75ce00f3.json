{"sha": "8613f28a1673d5d2ef972a9d839d0cdd75ce00f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg2MTNmMjhhMTY3M2Q1ZDJlZjk3MmE5ZDgzOWQwY2RkNzVjZTAwZjM=", "commit": {"author": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-17T16:12:26Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2011-09-17T16:13:05Z"}, "message": "In trans, replace another impossible case with a precondition", "tree": {"sha": "991ef81e11f0325baf27edf95c34bd9786c3bd66", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/991ef81e11f0325baf27edf95c34bd9786c3bd66"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3", "html_url": "https://github.com/rust-lang/rust/commit/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3/comments", "author": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1002623201c0368af2120885189fcdc979bff6fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/1002623201c0368af2120885189fcdc979bff6fe", "html_url": "https://github.com/rust-lang/rust/commit/1002623201c0368af2120885189fcdc979bff6fe"}], "stats": {"total": 19, "additions": 8, "deletions": 11}, "files": [{"sha": "61040ba44a8f305565df5aff347f41b267f4ad3a", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 11, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8613f28a1673d5d2ef972a9d839d0cdd75ce00f3/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=8613f28a1673d5d2ef972a9d839d0cdd75ce00f3", "patch": "@@ -224,18 +224,19 @@ fn type_of_inner(cx: @crate_ctxt, sp: span, t: ty::t)\n     ret llty;\n }\n \n-fn type_of_tag(cx: @crate_ctxt, sp: span, did: ast::def_id, t: ty::t) ->\n-   TypeRef {\n+fn type_of_tag(cx: @crate_ctxt, sp: span, did: ast::def_id, t: ty::t)\n+    -> TypeRef {\n     let degen = std::vec::len(ty::tag_variants(cx.tcx, did)) == 1u;\n-    if ty::type_has_dynamic_size(cx.tcx, t) {\n-        if degen { ret T_i8(); } else { ret T_opaque_tag(cx.tn); }\n-    } else {\n+    if check type_has_static_size(cx, t) {\n         let size = static_size_of_tag(cx, sp, t);\n         if !degen { ret T_tag(cx.tn, size); }\n         // LLVM does not like 0-size arrays, apparently\n         if size == 0u { size = 1u; }\n         ret T_array(T_i8(), size);\n     }\n+    else {\n+        if degen { ret T_i8(); } else { ret T_opaque_tag(cx.tn); }\n+    }\n }\n \n fn type_of_ty_param_kinds_and_ty(lcx: @local_ctxt, sp: span,\n@@ -503,12 +504,8 @@ fn simplify_type(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n \n \n // Computes the size of the data part of a non-dynamically-sized tag.\n-fn static_size_of_tag(cx: @crate_ctxt, sp: span, t: ty::t) -> uint {\n-    if ty::type_has_dynamic_size(cx.tcx, t) {\n-        cx.tcx.sess.span_fatal(sp,\n-                               \"dynamically sized type passed to \\\n-                               static_size_of_tag()\");\n-    }\n+fn static_size_of_tag(cx: @crate_ctxt, sp: span, t: ty::t)\n+    : type_has_static_size(cx, t) -> uint {\n     if cx.tag_sizes.contains_key(t) { ret cx.tag_sizes.get(t); }\n     alt ty::struct(cx.tcx, t) {\n       ty::ty_tag(tid, subtys) {"}]}