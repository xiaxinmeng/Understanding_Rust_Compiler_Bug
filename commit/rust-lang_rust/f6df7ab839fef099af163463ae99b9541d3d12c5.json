{"sha": "f6df7ab839fef099af163463ae99b9541d3d12c5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY2ZGY3YWI4MzlmZWYwOTlhZjE2MzQ2M2FlOTliOTU0MWQzZDEyYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-01T06:51:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-10-01T06:51:31Z"}, "message": "auto merge of #9617 : crabtw/rust/softfp, r=alexcrichton\n\nThis change adds --soft-float option for generating\r\nsoftware floating point library calls.\r\nIt also implies using soft float ABI, that is the same as llc.\r\n\r\nIt is useful for targets that have no FPU.", "tree": {"sha": "274bbb217c96de54b0b95a7d3242a4e6465c14da", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/274bbb217c96de54b0b95a7d3242a4e6465c14da"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f6df7ab839fef099af163463ae99b9541d3d12c5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f6df7ab839fef099af163463ae99b9541d3d12c5", "html_url": "https://github.com/rust-lang/rust/commit/f6df7ab839fef099af163463ae99b9541d3d12c5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f6df7ab839fef099af163463ae99b9541d3d12c5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8", "html_url": "https://github.com/rust-lang/rust/commit/1dbc467fd957a0daf3fd935ccce0fc9ea5d1dcd8"}, {"sha": "350b5438cd0b2a9ed33c0cdb1b36d7e4cbe1ab2b", "url": "https://api.github.com/repos/rust-lang/rust/commits/350b5438cd0b2a9ed33c0cdb1b36d7e4cbe1ab2b", "html_url": "https://github.com/rust-lang/rust/commit/350b5438cd0b2a9ed33c0cdb1b36d7e4cbe1ab2b"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "b3d38fc074a31d62f944b8d487f7adfb41bfaac4", "filename": "mk/platform.mk", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6df7ab839fef099af163463ae99b9541d3d12c5/mk%2Fplatform.mk", "raw_url": "https://github.com/rust-lang/rust/raw/f6df7ab839fef099af163463ae99b9541d3d12c5/mk%2Fplatform.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Fplatform.mk?ref=f6df7ab839fef099af163463ae99b9541d3d12c5", "patch": "@@ -343,7 +343,7 @@ CFG_PATH_MUNGE_mips-unknown-linux-gnu := true\n CFG_LDPATH_mips-unknown-linux-gnu :=\n CFG_RUN_mips-unknown-linux-gnu=\n CFG_RUN_TARG_mips-unknown-linux-gnu=\n-RUSTC_FLAGS_mips-unknown-linux-gnu := --linker=$(CXX_mips-unknown-linux-gnu) --target-cpu mips32r2 --target-feature +mips32r2,+o32\n+RUSTC_FLAGS_mips-unknown-linux-gnu := --linker=$(CXX_mips-unknown-linux-gnu) --target-cpu mips32r2 --target-feature +mips32r2,+o32 -Z soft-float\n \n # i686-pc-mingw32 configuration\n CC_i686-pc-mingw32=$(CC)"}, {"sha": "dfa7a2a7a1000d9c1eb28ab7c4a2707bc0c30594", "filename": "src/librustc/back/link.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Flink.rs?ref=f6df7ab839fef099af163463ae99b9541d3d12c5", "patch": "@@ -264,6 +264,7 @@ pub mod write {\n               session::Default => lib::llvm::CodeGenLevelDefault,\n               session::Aggressive => lib::llvm::CodeGenLevelAggressive,\n             };\n+            let use_softfp = sess.opts.debugging_opts & session::use_softfp != 0;\n \n             let tm = do sess.targ_cfg.target_strs.target_triple.with_c_str |T| {\n                 do sess.opts.target_cpu.with_c_str |CPU| {\n@@ -273,7 +274,8 @@ pub mod write {\n                             lib::llvm::CodeModelDefault,\n                             lib::llvm::RelocPIC,\n                             OptLevel,\n-                            true\n+                            true,\n+                            use_softfp\n                         )\n                     }\n                 }"}, {"sha": "aa321a11548b9713c8eb9ddbb857930de3d50eeb", "filename": "src/librustc/driver/session.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Fdriver%2Fsession.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fsession.rs?ref=f6df7ab839fef099af163463ae99b9541d3d12c5", "patch": "@@ -80,6 +80,7 @@ pub static print_llvm_passes:       uint = 1 << 26;\n pub static no_vectorize_loops:      uint = 1 << 27;\n pub static no_vectorize_slp:        uint = 1 << 28;\n pub static no_prepopulate_passes:   uint = 1 << 29;\n+pub static use_softfp:              uint = 1 << 30;\n \n pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n     ~[(~\"verbose\", ~\"in general, enable more debug printouts\", verbose),\n@@ -135,6 +136,7 @@ pub fn debugging_opts_map() -> ~[(~str, ~str, uint)] {\n      (~\"no-vectorize-slp\",\n       ~\"Don't run LLVM's SLP vectorization passes\",\n       no_vectorize_slp),\n+     (~\"soft-float\", ~\"Generate software floating point library calls\", use_softfp),\n     ]\n }\n "}, {"sha": "8e77f98eeba1291a437399005f93fc80255f41d5", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=f6df7ab839fef099af163463ae99b9541d3d12c5", "patch": "@@ -2149,7 +2149,8 @@ pub mod llvm {\n                                            Model: CodeGenModel,\n                                            Reloc: RelocMode,\n                                            Level: CodeGenOptLevel,\n-                                           EnableSegstk: bool) -> TargetMachineRef;\n+                                           EnableSegstk: bool,\n+                                           UseSoftFP: bool) -> TargetMachineRef;\n         pub fn LLVMRustDisposeTargetMachine(T: TargetMachineRef);\n         pub fn LLVMRustAddAnalysisPasses(T: TargetMachineRef,\n                                          PM: PassManagerRef,"}, {"sha": "8d0b447fa4a1e4bbcdf90a532bebba3912e34d51", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/f6df7ab839fef099af163463ae99b9541d3d12c5/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=f6df7ab839fef099af163463ae99b9541d3d12c5", "patch": "@@ -67,7 +67,8 @@ LLVMRustCreateTargetMachine(const char *triple,\n                             CodeModel::Model CM,\n                             Reloc::Model RM,\n                             CodeGenOpt::Level OptLevel,\n-                            bool EnableSegmentedStacks) {\n+                            bool EnableSegmentedStacks,\n+                            bool UseSoftFloat) {\n     std::string Error;\n     Triple Trip(Triple::normalize(triple));\n     const llvm::Target *TheTarget = TargetRegistry::lookupTarget(Trip.getTriple(),\n@@ -84,6 +85,10 @@ LLVMRustCreateTargetMachine(const char *triple,\n     Options.FloatABIType =\n          (Trip.getEnvironment() == Triple::GNUEABIHF) ? FloatABI::Hard :\n                                                         FloatABI::Default;\n+    Options.UseSoftFloat = UseSoftFloat;\n+    if (UseSoftFloat) {\n+        Options.FloatABIType = FloatABI::Soft;\n+    }\n \n     TargetMachine *TM = TheTarget->createTargetMachine(Trip.getTriple(),\n                                                        cpu,"}]}