{"sha": "61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "node_id": "C_kwDOAAsO6NoAKDYxY2FiNzcwYmQ1NWZkYzNkOWQ2YWM4NmE5ZTBjY2Y3ZGRiYjNmNTE", "commit": {"author": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-05T10:13:51Z"}, "committer": {"name": "b-naber", "email": "bn263@gmx.de", "date": "2021-12-05T11:43:39Z"}, "message": "allow for failure of subst_normalize_erasing_regions in const_eval", "tree": {"sha": "ad18eb3063d4260554b9870291cb5fdcd8c8df0d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ad18eb3063d4260554b9870291cb5fdcd8c8df0d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "html_url": "https://github.com/rust-lang/rust/commit/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/comments", "author": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "committer": {"login": "b-naber", "id": 71934879, "node_id": "MDQ6VXNlcjcxOTM0ODc5", "avatar_url": "https://avatars.githubusercontent.com/u/71934879?v=4", "gravatar_id": "", "url": "https://api.github.com/users/b-naber", "html_url": "https://github.com/b-naber", "followers_url": "https://api.github.com/users/b-naber/followers", "following_url": "https://api.github.com/users/b-naber/following{/other_user}", "gists_url": "https://api.github.com/users/b-naber/gists{/gist_id}", "starred_url": "https://api.github.com/users/b-naber/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/b-naber/subscriptions", "organizations_url": "https://api.github.com/users/b-naber/orgs", "repos_url": "https://api.github.com/users/b-naber/repos", "events_url": "https://api.github.com/users/b-naber/events{/privacy}", "received_events_url": "https://api.github.com/users/b-naber/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "887999d163bace7e79370b952bdd1f930ff4cdd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/887999d163bace7e79370b952bdd1f930ff4cdd5", "html_url": "https://github.com/rust-lang/rust/commit/887999d163bace7e79370b952bdd1f930ff4cdd5"}], "stats": {"total": 78, "additions": 67, "deletions": 11}, "files": [{"sha": "d46950ed90315c24f2d87d7c7fa6ecabbe7ac0ec", "filename": "compiler/rustc_const_eval/src/interpret/eval_context.rs", "status": "modified", "additions": 17, "deletions": 6, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Feval_context.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -7,14 +7,15 @@ use rustc_hir::{self as hir, def_id::DefId, definitions::DefPathData};\n use rustc_index::vec::IndexVec;\n use rustc_macros::HashStable;\n use rustc_middle::mir;\n+use rustc_middle::mir::interpret::{InterpError, InvalidProgramInfo};\n use rustc_middle::ty::layout::{self, LayoutError, LayoutOf, LayoutOfHelpers, TyAndLayout};\n use rustc_middle::ty::{\n     self, query::TyCtxtAt, subst::SubstsRef, ParamEnv, Ty, TyCtxt, TypeFoldable,\n };\n use rustc_mir_dataflow::storage::AlwaysLiveLocals;\n use rustc_query_system::ich::StableHashingContext;\n use rustc_session::Limit;\n-use rustc_span::{Pos, Span};\n+use rustc_span::{Pos, Span, DUMMY_SP};\n use rustc_target::abi::{Align, HasDataLayout, Size, TargetDataLayout};\n \n use super::{\n@@ -508,7 +509,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n     pub(super) fn subst_from_current_frame_and_normalize_erasing_regions<T: TypeFoldable<'tcx>>(\n         &self,\n         value: T,\n-    ) -> T {\n+    ) -> Result<T, InterpError<'tcx>> {\n         self.subst_from_frame_and_normalize_erasing_regions(self.frame(), value)\n     }\n \n@@ -518,8 +519,18 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         &self,\n         frame: &Frame<'mir, 'tcx, M::PointerTag, M::FrameExtra>,\n         value: T,\n-    ) -> T {\n-        frame.instance.subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n+    ) -> Result<T, InterpError<'tcx>> {\n+        frame\n+            .instance\n+            .try_subst_mir_and_normalize_erasing_regions(*self.tcx, self.param_env, value)\n+            .or_else(|e| {\n+                self.tcx.sess.delay_span_bug(\n+                    DUMMY_SP,\n+                    format!(\"failed to normalize {}\", e.get_type_for_failure()).as_str(),\n+                );\n+\n+                Err(InterpError::InvalidProgram(InvalidProgramInfo::TooGeneric))\n+            })\n     }\n \n     /// The `substs` are assumed to already be in our interpreter \"universe\" (param_env).\n@@ -554,7 +565,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n                 let layout = from_known_layout(self.tcx, self.param_env, layout, || {\n                     let local_ty = frame.body.local_decls[local].ty;\n                     let local_ty =\n-                        self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty);\n+                        self.subst_from_frame_and_normalize_erasing_regions(frame, local_ty)?;\n                     self.layout_of(local_ty)\n                 })?;\n                 if let Some(state) = frame.locals.get(local) {\n@@ -702,7 +713,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         for const_ in &body.required_consts {\n             let span = const_.span;\n             let const_ =\n-                self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal);\n+                self.subst_from_current_frame_and_normalize_erasing_regions(const_.literal)?;\n             self.mir_const_to_op(&const_, None).map_err(|err| {\n                 // If there was an error, set the span of the current frame to this constant.\n                 // Avoiding doing this when evaluation succeeds."}, {"sha": "e82ce73c814ff1a65f9aae47b180b1f61c1d326d", "filename": "compiler/rustc_const_eval/src/interpret/operand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Foperand.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -512,7 +512,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             self.param_env,\n             self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(\n                 place.ty(&self.frame().body.local_decls, *self.tcx).ty\n-            ))?,\n+            )?)?,\n             op.layout,\n         ));\n         Ok(op)\n@@ -534,7 +534,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Constant(ref constant) => {\n                 let val =\n-                    self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal);\n+                    self.subst_from_current_frame_and_normalize_erasing_regions(constant.literal)?;\n                 // This can still fail:\n                 // * During ConstProp, with `TooGeneric` or since the `requried_consts` were not all\n                 //   checked yet."}, {"sha": "4c95da896a2230a11d6793e3bf18e468d12a0173", "filename": "compiler/rustc_const_eval/src/interpret/place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fplace.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -643,7 +643,7 @@ where\n             self.param_env,\n             self.layout_of(self.subst_from_current_frame_and_normalize_erasing_regions(\n                 place.ty(&self.frame().body.local_decls, *self.tcx).ty\n-            ))?,\n+            )?)?,\n             place_ty.layout,\n         ));\n         Ok(place_ty)"}, {"sha": "992cef1cb6aa0cb8151138beeea64c094f4b4839", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -276,7 +276,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             }\n \n             NullaryOp(null_op, ty) => {\n-                let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty);\n+                let ty = self.subst_from_current_frame_and_normalize_erasing_regions(ty)?;\n                 let layout = self.layout_of(ty)?;\n                 if layout.is_unsized() {\n                     // FIXME: This should be a span_bug (#80742)\n@@ -302,7 +302,8 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n \n             Cast(cast_kind, ref operand, cast_ty) => {\n                 let src = self.eval_operand(operand, None)?;\n-                let cast_ty = self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty);\n+                let cast_ty =\n+                    self.subst_from_current_frame_and_normalize_erasing_regions(cast_ty)?;\n                 self.cast(&src, cast_kind, cast_ty, &dest)?;\n             }\n "}, {"sha": "2d301262730642aeaefefc3a59f290a82ba507f8", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -7,6 +7,7 @@ use rustc_hir::def::Namespace;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::lang_items::LangItem;\n use rustc_macros::HashStable;\n+use rustc_middle::ty::normalize_erasing_regions::NormalizationError;\n \n use std::fmt;\n \n@@ -575,6 +576,23 @@ impl<'tcx> Instance<'tcx> {\n         }\n     }\n \n+    #[inline(always)]\n+    pub fn try_subst_mir_and_normalize_erasing_regions<T>(\n+        &self,\n+        tcx: TyCtxt<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        v: T,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx> + Clone,\n+    {\n+        if let Some(substs) = self.substs_for_mir_body() {\n+            tcx.try_subst_and_normalize_erasing_regions(substs, param_env, v)\n+        } else {\n+            tcx.try_normalize_erasing_regions(param_env, v)\n+        }\n+    }\n+\n     /// Returns a new `Instance` where generic parameters in `instance.substs` are replaced by\n     /// identity parameters if they are determined to be unused in `instance.def`.\n     pub fn polymorphize(self, tcx: TyCtxt<'tcx>) -> Self {"}, {"sha": "c472d4a5a4dc2524762c8dc55076edbd4dd7f9f5", "filename": "compiler/rustc_middle/src/ty/normalize_erasing_regions.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fnormalize_erasing_regions.rs?ref=61cab770bd55fdc3d9d6ac86a9e0ccf7ddbb3f51", "patch": "@@ -115,6 +115,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     /// Monomorphizes a type from the AST by first applying the\n     /// in-scope substitutions and then normalizing any associated\n     /// types.\n+    /// Panics if normalization fails. In case normalization might fail\n+    /// use `try_subst_and_normalize_erasing_regions` instead.\n     pub fn subst_and_normalize_erasing_regions<T>(\n         self,\n         param_substs: SubstsRef<'tcx>,\n@@ -134,6 +136,30 @@ impl<'tcx> TyCtxt<'tcx> {\n         let substituted = value.subst(self, param_substs);\n         self.normalize_erasing_regions(param_env, substituted)\n     }\n+\n+    /// Monomorphizes a type from the AST by first applying the\n+    /// in-scope substitutions and then trying to normalize any associated\n+    /// types. Contrary to `subst_and_normalize_erasing_regions` this does\n+    /// not assume that normalization succeeds.\n+    pub fn try_subst_and_normalize_erasing_regions<T>(\n+        self,\n+        param_substs: SubstsRef<'tcx>,\n+        param_env: ty::ParamEnv<'tcx>,\n+        value: T,\n+    ) -> Result<T, NormalizationError<'tcx>>\n+    where\n+        T: TypeFoldable<'tcx>,\n+    {\n+        debug!(\n+            \"subst_and_normalize_erasing_regions(\\\n+             param_substs={:?}, \\\n+             value={:?}, \\\n+             param_env={:?})\",\n+            param_substs, value, param_env,\n+        );\n+        let substituted = value.subst(self, param_substs);\n+        self.try_normalize_erasing_regions(param_env, substituted)\n+    }\n }\n \n struct NormalizeAfterErasingRegionsFolder<'tcx> {"}]}