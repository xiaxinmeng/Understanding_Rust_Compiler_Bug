{"sha": "505ff71ac1c427f1777805bfced50c8938029bcb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNWZmNzFhYzFjNDI3ZjE3Nzc4MDViZmNlZDUwYzg5MzgwMjliY2I=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-09-15T23:33:41Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2017-09-22T21:48:02Z"}, "message": "Record semantic types for all syntactic types in bodies", "tree": {"sha": "534bc0be9fcab81e4c179fc117b6e7d6ac1151ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/534bc0be9fcab81e4c179fc117b6e7d6ac1151ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/505ff71ac1c427f1777805bfced50c8938029bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/505ff71ac1c427f1777805bfced50c8938029bcb", "html_url": "https://github.com/rust-lang/rust/commit/505ff71ac1c427f1777805bfced50c8938029bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/505ff71ac1c427f1777805bfced50c8938029bcb/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b9b50e712e583423e7204747271ff56a3975f78", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b9b50e712e583423e7204747271ff56a3975f78", "html_url": "https://github.com/rust-lang/rust/commit/5b9b50e712e583423e7204747271ff56a3975f78"}], "stats": {"total": 76, "additions": 62, "deletions": 14}, "files": [{"sha": "3171bd41f92dc1c8c4cb29bce11eb32c828809c8", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 30, "deletions": 14, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=505ff71ac1c427f1777805bfced50c8938029bcb", "patch": "@@ -76,6 +76,8 @@ pub trait AstConv<'gcx, 'tcx> {\n     /// used to help suppress derived errors typeck might otherwise\n     /// report.\n     fn set_tainted_by_errors(&self);\n+\n+    fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, span: Span);\n }\n \n struct ConvertedBinding<'tcx> {\n@@ -975,6 +977,14 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 }\n             }\n             Def::Err => {\n+                for segment in &path.segments {\n+                    for ty in &segment.parameters.types {\n+                        self.ast_ty_to_ty(ty);\n+                    }\n+                    for binding in &segment.parameters.bindings {\n+                        self.ast_ty_to_ty(&binding.ty);\n+                    }\n+                }\n                 self.set_tainted_by_errors();\n                 return self.tcx().types.err;\n             }\n@@ -1115,6 +1125,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n             }\n         };\n \n+        self.record_ty(ast_ty.hir_id, result_ty, ast_ty.span);\n         result_ty\n     }\n \n@@ -1124,8 +1135,10 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                      -> Ty<'tcx>\n     {\n         match ty.node {\n-            hir::TyInfer if expected_ty.is_some() => expected_ty.unwrap(),\n-            hir::TyInfer => self.ty_infer(ty.span),\n+            hir::TyInfer if expected_ty.is_some() => {\n+                self.record_ty(ty.hir_id, expected_ty.unwrap(), ty.span);\n+                expected_ty.unwrap()\n+            }\n             _ => self.ast_ty_to_ty(ty),\n         }\n     }\n@@ -1214,19 +1227,22 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n \n         let expected_ret_ty = expected_sig.as_ref().map(|e| e.output());\n \n-        let is_infer = match decl.output {\n-            hir::Return(ref output) if output.node == hir::TyInfer => true,\n-            hir::DefaultReturn(..) => true,\n-            _ => false\n-        };\n-\n         let output_ty = match decl.output {\n-            _ if is_infer && expected_ret_ty.is_some() =>\n-                expected_ret_ty.unwrap(),\n-            _ if is_infer => self.ty_infer(decl.output.span()),\n-            hir::Return(ref output) =>\n-                self.ast_ty_to_ty(&output),\n-            hir::DefaultReturn(..) => bug!(),\n+            hir::Return(ref output) => {\n+                if let (&hir::TyInfer, Some(expected_ret_ty)) = (&output.node, expected_ret_ty) {\n+                    self.record_ty(output.hir_id, expected_ret_ty, output.span);\n+                    expected_ret_ty\n+                } else {\n+                    self.ast_ty_to_ty(&output)\n+                }\n+            }\n+            hir::DefaultReturn(span) => {\n+                if let Some(expected_ret_ty) = expected_ret_ty {\n+                    expected_ret_ty\n+                } else {\n+                    self.ty_infer(span)\n+                }\n+            }\n         };\n \n         debug!(\"ty_of_closure: output_ty={:?}\", output_ty);"}, {"sha": "edbdfc1a7d4bce1128e0e00ac39c3f978170d874", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=505ff71ac1c427f1777805bfced50c8938029bcb", "patch": "@@ -1665,6 +1665,10 @@ impl<'a, 'gcx, 'tcx> AstConv<'gcx, 'tcx> for FnCtxt<'a, 'gcx, 'tcx> {\n     fn set_tainted_by_errors(&self) {\n         self.infcx.set_tainted_by_errors()\n     }\n+\n+    fn record_ty(&self, hir_id: hir::HirId, ty: Ty<'tcx>, _span: Span) {\n+        self.write_ty(hir_id, ty)\n+    }\n }\n \n /// Controls whether the arguments are tupled. This is used for the call"}, {"sha": "3c650718a4bfd72e4709afd1053a90ff14c5c171", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=505ff71ac1c427f1777805bfced50c8938029bcb", "patch": "@@ -207,6 +207,13 @@ impl<'cx, 'gcx, 'tcx> Visitor<'gcx> for WritebackCx<'cx, 'gcx, 'tcx> {\n         let var_ty = self.resolve(&var_ty, &l.span);\n         self.write_ty_to_tables(l.hir_id, var_ty);\n     }\n+\n+    fn visit_ty(&mut self, hir_ty: &'gcx hir::Ty) {\n+        intravisit::walk_ty(self, hir_ty);\n+        let ty = self.fcx.node_ty(hir_ty.hir_id);\n+        let ty = self.resolve(&ty, &hir_ty.span);\n+        self.write_ty_to_tables(hir_ty.hir_id, ty);\n+    }\n }\n \n impl<'cx, 'gcx, 'tcx> WritebackCx<'cx, 'gcx, 'tcx> {"}, {"sha": "a36594cb6e557dec4f3ceef5d80dceb6f15027a1", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=505ff71ac1c427f1777805bfced50c8938029bcb", "patch": "@@ -221,6 +221,10 @@ impl<'a, 'tcx> AstConv<'tcx, 'tcx> for ItemCtxt<'a, 'tcx> {\n     fn set_tainted_by_errors(&self) {\n         // no obvious place to track this, just let it go\n     }\n+\n+    fn record_ty(&self, _hir_id: hir::HirId, _ty: Ty<'tcx>, _span: Span) {\n+        // no place to record types from signatures?\n+    }\n }\n \n fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,"}, {"sha": "8f26777b441d4e5849befc3c6fa855f053501db0", "filename": "src/test/compile-fail/type-path-err-node-types.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Ftest%2Fcompile-fail%2Ftype-path-err-node-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/505ff71ac1c427f1777805bfced50c8938029bcb/src%2Ftest%2Fcompile-fail%2Ftype-path-err-node-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftype-path-err-node-types.rs?ref=505ff71ac1c427f1777805bfced50c8938029bcb", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Type arguments of unresolved types should have their types recorded\n+\n+fn main() {\n+    let _: Nonexistent<u8, Assoc = u16>; //~ ERROR cannot find type `Nonexistent` in this scope\n+\n+    let _ = |a, b: _| -> _ { 0 };\n+}"}]}