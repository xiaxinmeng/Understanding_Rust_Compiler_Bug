{"sha": "5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVjY2I3NjQ0YmUwZjBhYjA0YTc2YmY4OGM5M2NlY2I2M2IxYmEyMGQ=", "commit": {"author": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-06T18:59:33Z"}, "committer": {"name": "Cameron Zwarich", "email": "zwarich@mozilla.com", "date": "2014-06-06T18:59:33Z"}, "message": "Add a move reason to the Move ConsumeMode.\n\nCurrently it is not possible to distinguish moves caused by captures\nin the ExprUseVisitor interface. Since check_Loans needs to make that\ndistinction for generating good diagnostics, this is necessary for\ncheck_loans to switch to ExprUseVisitor.", "tree": {"sha": "637304235d1e437d28e5dcea2a01fcdb438213b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/637304235d1e437d28e5dcea2a01fcdb438213b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "html_url": "https://github.com/rust-lang/rust/commit/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d/comments", "author": null, "committer": null, "parents": [{"sha": "f63fad5d60f451013a6787fec4db12b77cab018c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f63fad5d60f451013a6787fec4db12b77cab018c", "html_url": "https://github.com/rust-lang/rust/commit/f63fad5d60f451013a6787fec4db12b77cab018c"}], "stats": {"total": 26, "additions": 17, "deletions": 9}, "files": [{"sha": "5192ddc793b6dfcd5be7a8689177c741f3146e94", "filename": "src/librustc/middle/borrowck/gather_loans/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fgather_loans%2Fmod.rs?ref=5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "patch": "@@ -76,7 +76,7 @@ impl<'a> euv::Delegate for GatherLoanCtxt<'a> {\n \n         match mode {\n             euv::Copy => { return; }\n-            euv::Move => { }\n+            euv::Move(_) => { }\n         }\n \n         gather_moves::gather_move_from_expr(\n@@ -95,7 +95,7 @@ impl<'a> euv::Delegate for GatherLoanCtxt<'a> {\n \n         match mode {\n             euv::Copy => { return; }\n-            euv::Move => { }\n+            euv::Move(_) => { }\n         }\n \n         gather_moves::gather_move_from_pat("}, {"sha": "cd71d95bee9481f5744f1f604397a1f4ecc7c839", "filename": "src/librustc/middle/expr_use_visitor.rs", "status": "modified", "additions": 15, "deletions": 7, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fexpr_use_visitor.rs?ref=5ccb7644be0f0ab04a76bf88c93cecb63b1ba20d", "patch": "@@ -80,8 +80,15 @@ pub enum LoanCause {\n \n #[deriving(PartialEq,Show)]\n pub enum ConsumeMode {\n-    Copy,    // reference to x where x has a type that copies\n-    Move,    // reference to x where x has a type that moves\n+    Copy,                // reference to x where x has a type that copies\n+    Move(MoveReason),    // reference to x where x has a type that moves\n+}\n+\n+#[deriving(PartialEq,Show)]\n+pub enum MoveReason {\n+    DirectRefMove,\n+    PatBindingMove,\n+    CaptureMove,\n }\n \n #[deriving(PartialEq,Show)]\n@@ -161,7 +168,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                         consume_id: ast::NodeId,\n                         consume_span: Span,\n                         cmt: mc::cmt) {\n-        let mode = copy_or_move(self.tcx(), cmt.ty);\n+        let mode = copy_or_move(self.tcx(), cmt.ty, DirectRefMove);\n         self.delegate.consume(consume_id, consume_span, cmt, mode);\n     }\n \n@@ -729,7 +736,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n                                              r, bk, RefBinding);\n                     }\n                     ast::PatIdent(ast::BindByValue(_), _, _) => {\n-                        let mode = copy_or_move(typer.tcx(), cmt_pat.ty);\n+                        let mode = copy_or_move(typer.tcx(), cmt_pat.ty, PatBindingMove);\n                         delegate.consume_pat(pat, cmt_pat, mode);\n                     }\n                     _ => {\n@@ -835,7 +842,8 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n             let cmt_var = return_if_err!(self.cat_captured_var(closure_expr.id,\n                                                                closure_expr.span,\n                                                                freevar.def));\n-            self.delegate_consume(closure_expr.id, freevar.span, cmt_var);\n+            let mode = copy_or_move(self.tcx(), cmt_var.ty, CaptureMove);\n+            self.delegate.consume(closure_expr.id, freevar.span, cmt_var, mode);\n         }\n     }\n \n@@ -852,7 +860,7 @@ impl<'d,'t,TYPER:mc::Typer> ExprUseVisitor<'d,'t,TYPER> {\n     }\n }\n \n-fn copy_or_move(tcx: &ty::ctxt, ty: ty::t) -> ConsumeMode {\n-    if ty::type_moves_by_default(tcx, ty) { Move } else { Copy }\n+fn copy_or_move(tcx: &ty::ctxt, ty: ty::t, move_reason: MoveReason) -> ConsumeMode {\n+    if ty::type_moves_by_default(tcx, ty) { Move(move_reason) } else { Copy }\n }\n "}]}