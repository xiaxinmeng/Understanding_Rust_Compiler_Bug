{"sha": "c09c038e11d8ed84a965179903891628dd72573f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWMwMzhlMTFkOGVkODRhOTY1MTc5OTAzODkxNjI4ZGQ3MjU3M2Y=", "commit": {"author": {"name": "Robert Gawdzik \u2622", "email": "rgawdzik@hotmail.com", "date": "2014-08-26T06:56:22Z"}, "committer": {"name": "Robert Gawdzik \u2622", "email": "rgawdzik@hotmail.com", "date": "2014-08-27T00:45:02Z"}, "message": "Added a note for usage of abs with ::MIN.", "tree": {"sha": "e76770afda772456d242fe1fe0e7cce2df2fe748", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e76770afda772456d242fe1fe0e7cce2df2fe748"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09c038e11d8ed84a965179903891628dd72573f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09c038e11d8ed84a965179903891628dd72573f", "html_url": "https://github.com/rust-lang/rust/commit/c09c038e11d8ed84a965179903891628dd72573f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09c038e11d8ed84a965179903891628dd72573f/comments", "author": null, "committer": null, "parents": [{"sha": "1cad4089ba0dc46248da2459af904e38243f294d", "url": "https://api.github.com/repos/rust-lang/rust/commits/1cad4089ba0dc46248da2459af904e38243f294d", "html_url": "https://github.com/rust-lang/rust/commit/1cad4089ba0dc46248da2459af904e38243f294d"}], "stats": {"total": 8, "additions": 6, "deletions": 2}, "files": [{"sha": "6d6ca59ce01eda067a5d8e5b70c51510543c9a83", "filename": "src/libcore/num/mod.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c09c038e11d8ed84a965179903891628dd72573f/src%2Flibcore%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09c038e11d8ed84a965179903891628dd72573f/src%2Flibcore%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fnum%2Fmod.rs?ref=c09c038e11d8ed84a965179903891628dd72573f", "patch": "@@ -160,6 +160,8 @@ pub trait Signed: Num + Neg<Self> {\n     /// Computes the absolute value.\n     ///\n     /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`.\n+    ///\n+    /// For signed integers, `::MIN` will be returned if the number is `::MIN`.\n     fn abs(&self) -> Self;\n \n     /// The positive difference of two numbers.\n@@ -176,7 +178,7 @@ pub trait Signed: Num + Neg<Self> {\n     /// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n     /// * `NaN` if the number is `NaN`\n     ///\n-    /// For `int`:\n+    /// For signed integers:\n     ///\n     /// * `0` if the number is zero\n     /// * `1` if the number is positive\n@@ -272,6 +274,8 @@ signed_float_impl!(f64, f64::NAN, f64::INFINITY, f64::NEG_INFINITY,\n /// Computes the absolute value.\n ///\n /// For `f32` and `f64`, `NaN` will be returned if the number is `NaN`\n+///\n+/// For signed integers, `::MIN` will be returned if the number is `::MIN`.\n #[inline(always)]\n pub fn abs<T: Signed>(value: T) -> T {\n     value.abs()\n@@ -294,7 +298,7 @@ pub fn abs_sub<T: Signed>(x: T, y: T) -> T {\n /// * `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n /// * `NaN` if the number is `NaN`\n ///\n-/// For int:\n+/// For signed integers:\n ///\n /// * `0` if the number is zero\n /// * `1` if the number is positive"}]}