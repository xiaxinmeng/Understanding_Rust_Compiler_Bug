{"sha": "c43b1a09e034f978317bf087214f8f4cde80ba40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0M2IxYTA5ZTAzNGY5NzgzMTdiZjA4NzIxNGY4ZjRjZGU4MGJhNDA=", "commit": {"author": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-15T22:56:20Z"}, "committer": {"name": "Wesley Wiser", "email": "wwiser@gmail.com", "date": "2018-03-19T23:45:35Z"}, "message": "Convert SerializedDepGraph to be a struct-of-arrays\n\nFixes #47326", "tree": {"sha": "312b6ef0dfa61b5861216cec15ce8ae50a35bcdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/312b6ef0dfa61b5861216cec15ce8ae50a35bcdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c43b1a09e034f978317bf087214f8f4cde80ba40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c43b1a09e034f978317bf087214f8f4cde80ba40", "html_url": "https://github.com/rust-lang/rust/commit/c43b1a09e034f978317bf087214f8f4cde80ba40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c43b1a09e034f978317bf087214f8f4cde80ba40/comments", "author": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "committer": {"login": "wesleywiser", "id": 831192, "node_id": "MDQ6VXNlcjgzMTE5Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/831192?v=4", "gravatar_id": "", "url": "https://api.github.com/users/wesleywiser", "html_url": "https://github.com/wesleywiser", "followers_url": "https://api.github.com/users/wesleywiser/followers", "following_url": "https://api.github.com/users/wesleywiser/following{/other_user}", "gists_url": "https://api.github.com/users/wesleywiser/gists{/gist_id}", "starred_url": "https://api.github.com/users/wesleywiser/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/wesleywiser/subscriptions", "organizations_url": "https://api.github.com/users/wesleywiser/orgs", "repos_url": "https://api.github.com/users/wesleywiser/repos", "events_url": "https://api.github.com/users/wesleywiser/events{/privacy}", "received_events_url": "https://api.github.com/users/wesleywiser/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5508b27145cfb82896ae838e6aca0cd48750796f", "url": "https://api.github.com/repos/rust-lang/rust/commits/5508b27145cfb82896ae838e6aca0cd48750796f", "html_url": "https://github.com/rust-lang/rust/commit/5508b27145cfb82896ae838e6aca0cd48750796f"}], "stats": {"total": 30, "additions": 20, "deletions": 10}, "files": [{"sha": "d60c22064d3a0cd0ee3900a1dec51d175e28ea58", "filename": "src/librustc/dep_graph/graph.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fgraph.rs?ref=c43b1a09e034f978317bf087214f8f4cde80ba40", "patch": "@@ -476,10 +476,8 @@ impl DepGraph {\n             fingerprints.resize(current_dep_graph.nodes.len(), Fingerprint::ZERO);\n         }\n \n-        let nodes: IndexVec<_, (DepNode, Fingerprint)> =\n-            current_dep_graph.nodes.iter_enumerated().map(|(idx, &dep_node)| {\n-            (dep_node, fingerprints[idx])\n-        }).collect();\n+        let fingerprints = fingerprints.clone().convert_index_type();\n+        let nodes = current_dep_graph.nodes.clone().convert_index_type();\n \n         let total_edge_count: usize = current_dep_graph.edges.iter()\n                                                              .map(|v| v.len())\n@@ -503,6 +501,7 @@ impl DepGraph {\n \n         SerializedDepGraph {\n             nodes,\n+            fingerprints,\n             edge_list_indices,\n             edge_list_data,\n         }"}, {"sha": "669a99019aa60176de63f093266766a75d8638a4", "filename": "src/librustc/dep_graph/prev.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fprev.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fprev.rs?ref=c43b1a09e034f978317bf087214f8f4cde80ba40", "patch": "@@ -23,7 +23,7 @@ impl PreviousDepGraph {\n     pub fn new(data: SerializedDepGraph) -> PreviousDepGraph {\n         let index: FxHashMap<_, _> = data.nodes\n             .iter_enumerated()\n-            .map(|(idx, &(dep_node, _))| (dep_node, idx))\n+            .map(|(idx, &dep_node)| (dep_node, idx))\n             .collect();\n         PreviousDepGraph { data, index }\n     }\n@@ -41,7 +41,7 @@ impl PreviousDepGraph {\n \n     #[inline]\n     pub fn index_to_node(&self, dep_node_index: SerializedDepNodeIndex) -> DepNode {\n-        self.data.nodes[dep_node_index].0\n+        self.data.nodes[dep_node_index]\n     }\n \n     #[inline]\n@@ -58,14 +58,14 @@ impl PreviousDepGraph {\n     pub fn fingerprint_of(&self, dep_node: &DepNode) -> Option<Fingerprint> {\n         self.index\n             .get(dep_node)\n-            .map(|&node_index| self.data.nodes[node_index].1)\n+            .map(|&node_index| self.data.fingerprints[node_index])\n     }\n \n     #[inline]\n     pub fn fingerprint_by_index(&self,\n                                 dep_node_index: SerializedDepNodeIndex)\n                                 -> Fingerprint {\n-        self.data.nodes[dep_node_index].1\n+        self.data.fingerprints[dep_node_index]\n     }\n \n     pub fn node_count(&self) -> usize {"}, {"sha": "60fc813a25d51eda38da1293b1a8943a89c35225", "filename": "src/librustc/dep_graph/serialized.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc%2Fdep_graph%2Fserialized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fserialized.rs?ref=c43b1a09e034f978317bf087214f8f4cde80ba40", "patch": "@@ -20,7 +20,10 @@ newtype_index!(SerializedDepNodeIndex);\n #[derive(Debug, RustcEncodable, RustcDecodable)]\n pub struct SerializedDepGraph {\n     /// The set of all DepNodes in the graph\n-    pub nodes: IndexVec<SerializedDepNodeIndex, (DepNode, Fingerprint)>,\n+    pub nodes: IndexVec<SerializedDepNodeIndex, DepNode>,\n+    /// The set of all Fingerprints in the graph. Each Fingerprint corresponds to\n+    /// the DepNode at the same index in the nodes vector.\n+    pub fingerprints: IndexVec<SerializedDepNodeIndex, Fingerprint>,\n     /// For each DepNode, stores the list of edges originating from that\n     /// DepNode. Encoded as a [start, end) pair indexing into edge_list_data,\n     /// which holds the actual DepNodeIndices of the target nodes.\n@@ -35,6 +38,7 @@ impl SerializedDepGraph {\n     pub fn new() -> SerializedDepGraph {\n         SerializedDepGraph {\n             nodes: IndexVec::new(),\n+            fingerprints: IndexVec::new(),\n             edge_list_indices: IndexVec::new(),\n             edge_list_data: Vec::new(),\n         }"}, {"sha": "cbb3ff5171592be599cc292b6e07b477c627a949", "filename": "src/librustc_data_structures/indexed_vec.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc_data_structures%2Findexed_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc_data_structures%2Findexed_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_vec.rs?ref=c43b1a09e034f978317bf087214f8f4cde80ba40", "patch": "@@ -503,6 +503,13 @@ impl<I: Idx, T> IndexVec<I, T> {\n             (c1, c2)\n         }\n     }\n+\n+    pub fn convert_index_type<Ix: Idx>(self) -> IndexVec<Ix, T> {\n+        IndexVec {\n+            raw: self.raw,\n+            _marker: PhantomData,\n+        }\n+    }\n }\n \n impl<I: Idx, T: Clone> IndexVec<I, T> {"}, {"sha": "a5bc1106ba0b00fc24264b5378cd5711274e69ea", "filename": "src/librustc_incremental/persist/save.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c43b1a09e034f978317bf087214f8f4cde80ba40/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fpersist%2Fsave.rs?ref=c43b1a09e034f978317bf087214f8f4cde80ba40", "patch": "@@ -162,7 +162,7 @@ fn encode_dep_graph(tcx: TyCtxt,\n \n         let mut counts: FxHashMap<_, Stat> = FxHashMap();\n \n-        for (i, &(node, _)) in serialized_graph.nodes.iter_enumerated() {\n+        for (i, &node) in serialized_graph.nodes.iter_enumerated() {\n             let stat = counts.entry(node.kind).or_insert(Stat {\n                 kind: node.kind,\n                 node_counter: 0,"}]}