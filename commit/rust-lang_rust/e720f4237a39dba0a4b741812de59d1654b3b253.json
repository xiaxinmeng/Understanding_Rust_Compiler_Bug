{"sha": "e720f4237a39dba0a4b741812de59d1654b3b253", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3MjBmNDIzN2EzOWRiYTBhNGI3NDE4MTJkZTU5ZDE2NTRiM2IyNTM=", "commit": {"author": {"name": "Ryan Scheel", "email": "Ryan.havvy@gmail.com", "date": "2020-08-02T05:56:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-08-02T05:56:25Z"}, "message": "See also X-Link mem::{swap, take, replace}", "tree": {"sha": "057c2f2155388ab58a13a0fbfe0e862e88ec4f5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057c2f2155388ab58a13a0fbfe0e862e88ec4f5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e720f4237a39dba0a4b741812de59d1654b3b253", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfJlWJCRBK7hj4Ov3rIwAAdHIIAGuQcW+ycHMuY3K+tW8WUdX8\n0mpQK6NJroo1U6Ic6g0N6uJEH23I1nqTYZxVoerwx/QKJ1lseurBam8K7zn4gCq4\nmzD84XsGMo7vqgX3m8hmgkDwWh2QYRksiJco8eRdGXeeyNexwt6IRz3Tr52rni0w\nlNdipr7LQFcX4nTTxNv7AAccpjUi1VhiIHaUsw5LW912MHB8riCrTCEw/NULKdBh\nmutbtJTbH9Hl4D6v3PvGJBb9DGmmrbGKrszaCIYRMgrpWd9DrEqZk5NaEx/h33B7\nxh89X8WQMbqjcrskWvnoL3/NIv7q6dw0WtipXp2Sy7Cotgo/IwZd5A6Gqns0/Lk=\n=Eg0q\n-----END PGP SIGNATURE-----\n", "payload": "tree 057c2f2155388ab58a13a0fbfe0e862e88ec4f5f\nparent 8141873e6d50a0a0829fd756b0a16a92b27cfe22\nauthor Ryan Scheel <Ryan.havvy@gmail.com> 1596347785 -0700\ncommitter GitHub <noreply@github.com> 1596347785 -0700\n\nSee also X-Link mem::{swap, take, replace}"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e720f4237a39dba0a4b741812de59d1654b3b253", "html_url": "https://github.com/rust-lang/rust/commit/e720f4237a39dba0a4b741812de59d1654b3b253", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e720f4237a39dba0a4b741812de59d1654b3b253/comments", "author": {"login": "Havvy", "id": 731722, "node_id": "MDQ6VXNlcjczMTcyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/731722?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Havvy", "html_url": "https://github.com/Havvy", "followers_url": "https://api.github.com/users/Havvy/followers", "following_url": "https://api.github.com/users/Havvy/following{/other_user}", "gists_url": "https://api.github.com/users/Havvy/gists{/gist_id}", "starred_url": "https://api.github.com/users/Havvy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Havvy/subscriptions", "organizations_url": "https://api.github.com/users/Havvy/orgs", "repos_url": "https://api.github.com/users/Havvy/repos", "events_url": "https://api.github.com/users/Havvy/events{/privacy}", "received_events_url": "https://api.github.com/users/Havvy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8141873e6d50a0a0829fd756b0a16a92b27cfe22", "url": "https://api.github.com/repos/rust-lang/rust/commits/8141873e6d50a0a0829fd756b0a16a92b27cfe22", "html_url": "https://github.com/rust-lang/rust/commit/8141873e6d50a0a0829fd756b0a16a92b27cfe22"}], "stats": {"total": 16, "additions": 16, "deletions": 0}, "files": [{"sha": "9107c570a897097bf542773ae5c58c402a020805", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e720f4237a39dba0a4b741812de59d1654b3b253/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e720f4237a39dba0a4b741812de59d1654b3b253/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=e720f4237a39dba0a4b741812de59d1654b3b253", "patch": "@@ -670,6 +670,9 @@ pub unsafe fn uninitialized<T>() -> T {\n \n /// Swaps the values at two mutable locations, without deinitializing either one.\n ///\n+/// * If you want to swap with a default or dummy value, see [`take`].\n+/// * If you want to swap with a passed value, returning the old value, see [`replace`].\n+///\n /// # Examples\n ///\n /// ```\n@@ -683,6 +686,9 @@ pub unsafe fn uninitialized<T>() -> T {\n /// assert_eq!(42, x);\n /// assert_eq!(5, y);\n /// ```\n+///\n+/// [`replace`]: fn.replace.html\n+/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub fn swap<T>(x: &mut T, y: &mut T) {\n@@ -695,6 +701,9 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n \n /// Replaces `dest` with the default value of `T`, returning the previous `dest` value.\n ///\n+/// * If you want to replace the values of two variables, see [`swap`].\n+/// * If you want to replace with a passed value instead of the default value, see [`replace`].\n+///\n /// # Examples\n ///\n /// A simple example:\n@@ -747,6 +756,8 @@ pub fn swap<T>(x: &mut T, y: &mut T) {\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n+/// [`replace`]: fn.replace.html\n+/// [`swap`]: fn.swap.html\n #[inline]\n #[stable(feature = \"mem_take\", since = \"1.40.0\")]\n pub fn take<T: Default>(dest: &mut T) -> T {\n@@ -757,6 +768,9 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n ///\n /// Neither value is dropped.\n ///\n+/// * If you want to replace the values of two variables, see [`swap`].\n+/// * If you want to replace with a default value, see [`take`].\n+///\n /// # Examples\n ///\n /// A simple example:\n@@ -810,6 +824,8 @@ pub fn take<T: Default>(dest: &mut T) -> T {\n /// ```\n ///\n /// [`Clone`]: ../../std/clone/trait.Clone.html\n+/// [`swap`]: fn.swap.html\n+/// [`take`]: fn.take.html\n #[inline]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[must_use = \"if you don't need the old value, you can just assign the new value directly\"]"}]}