{"sha": "24f91e878244990595649120f402cc13263ae54f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ZjkxZTg3ODI0NDk5MDU5NTY0OTEyMGY0MDJjYzEzMjYzYWU1NGY=", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-06-27T19:13:33Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2018-07-01T23:46:07Z"}, "message": "Move find_use stuff to it's own file", "tree": {"sha": "5c6604b97a24057a516770d05954e29c38eae93b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5c6604b97a24057a516770d05954e29c38eae93b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/24f91e878244990595649120f402cc13263ae54f", "comment_count": 0, "verification": {"verified": false, "reason": "unknown_key", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEmNHc6jmXzkUyxd4xiMlBzaHUZDIFAls5Z78ACgkQiMlBzaHU\nZDLWEg/7B4JnyS4z15Yp6p+j9xEv0CSD2Bq8RgiqySC3FA7P7DJjO/8QZsG5y0hf\nklacCvn5HWa2rprQXqTtM9N3ezyiRwg2jWAbZ84mlXPPaU+FMqCs9R7/5tdCQDnw\n8nh3cDqmTCF+oIh3q8MaoffwTmIDGArfuFUCrAzWOgUwtketeOIHMIjEQ8ifVqb3\n9jED1Y2feaFBoVi6Sqvt2dDqUq+1FJ+wutKCyR30XMSq0URixSbDUDTtUeE8jo8M\nFB0/peAxgZ9CHAMb5GwT5IKfnx2zEpl22S173JfdbRWFlYuXlk5zCpSbtAMZXOBE\npSZ8h/xVkMUrrhsfTVcTvxLcTc+VbhNQ7tmYDm+AZEeTYj6JHCebBexwD6Q5nLg0\njLgXnbxg02QA4Ipa1WcL1+PMNx2Ji6Jrp4mTIDydDEKPfIU0KWKVZIi9t1OUYKmO\n/1xfhLOCZfDkC2dPNz0rCaLmQ7GqYHF2WmApxyDGsIZZX9aezthOK2yRkb4eDvfG\nFFXnuMLMgBYFGJ4W/P7V83HKBn84JjDBoKC4/WlJyFbllAaXI3/8RtaAy3Xq/Z6B\nYLXcEEdR4H2UDjzsSnRrC2/xNknmAjQy6cEBXK8OZzCp4AN07K/x4KrJUo6BcwlR\nZRDC/fhRZBWVvPmP2lMEtVl1hwgzQal9r58db1/rSj5e/0nnJN0=\n=wVMS\n-----END PGP SIGNATURE-----", "payload": "tree 5c6604b97a24057a516770d05954e29c38eae93b\nparent b2d16f3b966766cd654c756bcec5f8f8d0a39c20\nauthor Santiago Pastorino <spastorino@gmail.com> 1530126813 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1530488767 -0300\n\nMove find_use stuff to it's own file\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/24f91e878244990595649120f402cc13263ae54f", "html_url": "https://github.com/rust-lang/rust/commit/24f91e878244990595649120f402cc13263ae54f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/24f91e878244990595649120f402cc13263ae54f/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b2d16f3b966766cd654c756bcec5f8f8d0a39c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/b2d16f3b966766cd654c756bcec5f8f8d0a39c20", "html_url": "https://github.com/rust-lang/rust/commit/b2d16f3b966766cd654c756bcec5f8f8d0a39c20"}], "stats": {"total": 281, "additions": 148, "deletions": 133}, "files": [{"sha": "58e9d814826bf0e7b9d291e13931af5fc7c04a5c", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/find_use.rs", "status": "added", "additions": 142, "deletions": 0, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/24f91e878244990595649120f402cc13263ae54f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f91e878244990595649120f402cc13263ae54f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Ffind_use.rs?ref=24f91e878244990595649120f402cc13263ae54f", "patch": "@@ -0,0 +1,142 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+use borrow_check::borrow_set::BorrowData;\n+use borrow_check::nll::region_infer::RegionInferenceContext;\n+use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n+use rustc::mir::{Local, Location, Mir};\n+use rustc_data_structures::fx::FxHashSet;\n+use util::liveness::{self, DefUse, LivenessMode};\n+\n+crate fn regular_use<'gcx, 'tcx>(\n+    mir: &'gcx Mir,\n+    regioncx: &'tcx RegionInferenceContext,\n+    borrow: &'tcx BorrowData,\n+    start_point: Location,\n+    local: Local,\n+) -> Option<Location> {\n+    let mut uf = UseFinder {\n+        mir,\n+        regioncx,\n+        borrow,\n+        start_point,\n+        local,\n+        liveness_mode: LivenessMode {\n+            include_regular_use: true,\n+            include_drops: false,\n+        },\n+    };\n+\n+    uf.find()\n+}\n+\n+crate fn drop_use<'gcx, 'tcx>(\n+    mir: &'gcx Mir,\n+    regioncx: &'tcx RegionInferenceContext,\n+    borrow: &'tcx BorrowData,\n+    start_point: Location,\n+    local: Local,\n+) -> Option<Location> {\n+    let mut uf = UseFinder {\n+        mir,\n+        regioncx,\n+        borrow,\n+        start_point,\n+        local,\n+        liveness_mode: LivenessMode {\n+            include_regular_use: false,\n+            include_drops: true,\n+        },\n+    };\n+\n+    uf.find()\n+}\n+\n+struct UseFinder<'gcx, 'tcx> {\n+    mir: &'gcx Mir<'gcx>,\n+    regioncx: &'tcx RegionInferenceContext<'tcx>,\n+    borrow: &'tcx BorrowData<'tcx>,\n+    start_point: Location,\n+    local: Local,\n+    liveness_mode: LivenessMode,\n+}\n+\n+impl<'gcx, 'tcx> UseFinder<'gcx, 'tcx> {\n+    fn find(&mut self) -> Option<Location> {\n+        let mut stack = vec![];\n+        let mut visited = FxHashSet();\n+\n+        stack.push(self.start_point);\n+        while let Some(p) = stack.pop() {\n+            if !self.regioncx.region_contains_point(self.borrow.region, p) {\n+                continue;\n+            }\n+\n+            if !visited.insert(p) {\n+                continue;\n+            }\n+\n+            let block_data = &self.mir[p.block];\n+            let (defined, used) = self.def_use(p, block_data.visitable(p.statement_index));\n+\n+            if used {\n+                return Some(p);\n+            } else if !defined {\n+                if p.statement_index < block_data.statements.len() {\n+                    stack.push(Location {\n+                        statement_index: p.statement_index + 1,\n+                        ..p\n+                    });\n+                } else {\n+                    stack.extend(block_data.terminator().successors().map(|&basic_block| {\n+                        Location {\n+                            statement_index: 0,\n+                            block: basic_block,\n+                        }\n+                    }));\n+                }\n+            }\n+        }\n+\n+        None\n+    }\n+\n+    fn def_use(&self, location: Location, thing: &dyn MirVisitable<'tcx>) -> (bool, bool) {\n+        let mut visitor = DefUseVisitor {\n+            defined: false,\n+            used: false,\n+            local: self.local,\n+            liveness_mode: self.liveness_mode,\n+        };\n+\n+        thing.apply(location, &mut visitor);\n+\n+        (visitor.defined, visitor.used)\n+    }\n+}\n+\n+struct DefUseVisitor {\n+    defined: bool,\n+    used: bool,\n+    local: Local,\n+    liveness_mode: LivenessMode,\n+}\n+\n+impl<'tcx> Visitor<'tcx> for DefUseVisitor {\n+    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n+        if local == self.local {\n+            match liveness::categorize(context, self.liveness_mode) {\n+                Some(DefUse::Def) => self.defined = true,\n+                Some(DefUse::Use) => self.used = true,\n+                None => (),\n+            }\n+        }\n+    }\n+}"}, {"sha": "acc164b14c31f07f3a3c0df00f8df8cafa2870d9", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 6, "deletions": 133, "changes": 139, "blob_url": "https://github.com/rust-lang/rust/blob/24f91e878244990595649120f402cc13263ae54f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/24f91e878244990595649120f402cc13263ae54f/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=24f91e878244990595649120f402cc13263ae54f", "patch": "@@ -9,13 +9,12 @@\n // except according to those terms.\n \n use borrow_check::borrow_set::BorrowData;\n-use borrow_check::nll::region_infer::{Cause, RegionInferenceContext};\n+use borrow_check::nll::region_infer::Cause;\n use borrow_check::{Context, MirBorrowckCtxt, WriteKind};\n-use rustc::mir::visit::{MirVisitable, PlaceContext, Visitor};\n-use rustc::mir::{Local, Location, Mir, Place};\n-use rustc_data_structures::fx::FxHashSet;\n+use rustc::mir::Place;\n use rustc_errors::DiagnosticBuilder;\n-use util::liveness::{self, DefUse, LivenessMode};\n+\n+mod find_use;\n \n impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// Adds annotations to `err` explaining *why* the borrow contains the\n@@ -45,7 +44,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let borrow_region_vid = regioncx.to_region_vid(borrow.region);\n         if let Some(cause) = regioncx.why_region_contains_point(borrow_region_vid, context.loc) {\n             match cause {\n-                Cause::LiveVar(local, location) => match find_regular_use(\n+                Cause::LiveVar(local, location) => match find_use::regular_use(\n                     mir, regioncx, borrow, location, local,\n                 ) {\n                     Some(p) => {\n@@ -60,7 +59,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     }\n                 },\n \n-                Cause::DropVar(local, location) => match find_drop_use(\n+                Cause::DropVar(local, location) => match find_use::drop_use(\n                     mir, regioncx, borrow, location, local,\n                 ) {\n                     Some(p) => match &mir.local_decls[local].name {\n@@ -124,129 +123,3 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n     }\n }\n-\n-fn find_regular_use<'gcx, 'tcx>(\n-    mir: &'gcx Mir,\n-    regioncx: &'tcx RegionInferenceContext,\n-    borrow: &'tcx BorrowData,\n-    start_point: Location,\n-    local: Local,\n-) -> Option<Location> {\n-    let mut uf = UseFinder {\n-        mir,\n-        regioncx,\n-        borrow,\n-        start_point,\n-        local,\n-        liveness_mode: LivenessMode {\n-            include_regular_use: true,\n-            include_drops: false,\n-        },\n-    };\n-\n-    uf.find()\n-}\n-\n-fn find_drop_use<'gcx, 'tcx>(\n-    mir: &'gcx Mir,\n-    regioncx: &'tcx RegionInferenceContext,\n-    borrow: &'tcx BorrowData,\n-    start_point: Location,\n-    local: Local,\n-) -> Option<Location> {\n-    let mut uf = UseFinder {\n-        mir,\n-        regioncx,\n-        borrow,\n-        start_point,\n-        local,\n-        liveness_mode: LivenessMode {\n-            include_regular_use: false,\n-            include_drops: true,\n-        },\n-    };\n-\n-    uf.find()\n-}\n-\n-struct UseFinder<'gcx, 'tcx> {\n-    mir: &'gcx Mir<'gcx>,\n-    regioncx: &'tcx RegionInferenceContext<'tcx>,\n-    borrow: &'tcx BorrowData<'tcx>,\n-    start_point: Location,\n-    local: Local,\n-    liveness_mode: LivenessMode,\n-}\n-\n-impl<'gcx, 'tcx> UseFinder<'gcx, 'tcx> {\n-    fn find(&mut self) -> Option<Location> {\n-        let mut stack = vec![];\n-        let mut visited = FxHashSet();\n-\n-        stack.push(self.start_point);\n-        while let Some(p) = stack.pop() {\n-            if !self.regioncx.region_contains_point(self.borrow.region, p) {\n-                continue;\n-            }\n-\n-            if !visited.insert(p) {\n-                continue;\n-            }\n-\n-            let block_data = &self.mir[p.block];\n-            let (defined, used) = self.def_use(p, block_data.visitable(p.statement_index));\n-\n-            if used {\n-                return Some(p);\n-            } else if !defined {\n-                if p.statement_index < block_data.statements.len() {\n-                    stack.push(Location {\n-                        statement_index: p.statement_index + 1,\n-                        ..p\n-                    });\n-                } else {\n-                    stack.extend(block_data.terminator().successors().map(|&basic_block| {\n-                        Location {\n-                            statement_index: 0,\n-                            block: basic_block,\n-                        }\n-                    }));\n-                }\n-            }\n-        }\n-\n-        None\n-    }\n-\n-    fn def_use(&self, location: Location, thing: &dyn MirVisitable<'tcx>) -> (bool, bool) {\n-        let mut visitor = DefUseVisitor {\n-            defined: false,\n-            used: false,\n-            local: self.local,\n-            liveness_mode: self.liveness_mode,\n-        };\n-\n-        thing.apply(location, &mut visitor);\n-\n-        (visitor.defined, visitor.used)\n-    }\n-}\n-\n-struct DefUseVisitor {\n-    defined: bool,\n-    used: bool,\n-    local: Local,\n-    liveness_mode: LivenessMode,\n-}\n-\n-impl<'tcx> Visitor<'tcx> for DefUseVisitor {\n-    fn visit_local(&mut self, &local: &Local, context: PlaceContext<'tcx>, _: Location) {\n-        if local == self.local {\n-            match liveness::categorize(context, self.liveness_mode) {\n-                Some(DefUse::Def) => self.defined = true,\n-                Some(DefUse::Use) => self.used = true,\n-                None => (),\n-            }\n-        }\n-    }\n-}"}]}