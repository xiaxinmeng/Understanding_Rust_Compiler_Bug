{"sha": "3713fd3dce39e94fb5903554300df1db63a5c422", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM3MTNmZDNkY2UzOWU5NGZiNTkwMzU1NDMwMGRmMWRiNjNhNWM0MjI=", "commit": {"author": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-18T14:35:50Z"}, "committer": {"name": "mcarton", "email": "cartonmartin+git@gmail.com", "date": "2016-01-18T14:35:50Z"}, "message": "Check types in the CMP_OWNED lint", "tree": {"sha": "7cb2bb997f5e63d3f2d5b063f54e16fba1d3c359", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7cb2bb997f5e63d3f2d5b063f54e16fba1d3c359"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3713fd3dce39e94fb5903554300df1db63a5c422", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3713fd3dce39e94fb5903554300df1db63a5c422", "html_url": "https://github.com/rust-lang/rust/commit/3713fd3dce39e94fb5903554300df1db63a5c422", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3713fd3dce39e94fb5903554300df1db63a5c422/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5ab5a8801e05d6acc06413c26021dd4ceb5606ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/5ab5a8801e05d6acc06413c26021dd4ceb5606ad", "html_url": "https://github.com/rust-lang/rust/commit/5ab5a8801e05d6acc06413c26021dd4ceb5606ad"}], "stats": {"total": 37, "additions": 25, "deletions": 12}, "files": [{"sha": "254b68deb1194f6ed8687155d53694ae9d615377", "filename": "src/methods.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmethods.rs?ref=3713fd3dce39e94fb5903554300df1db63a5c422", "patch": "@@ -318,7 +318,7 @@ fn lint_or_fun_call(cx: &LateContext, expr: &Expr, name: &str, args: &[P<Expr>])\n                         return false;\n                     };\n \n-                    if implements_trait(cx, arg_ty, default_trait_id) {\n+                    if implements_trait(cx, arg_ty, default_trait_id, None) {\n                         span_lint(cx, OR_FUN_CALL, span,\n                                   &format!(\"use of `{}` followed by a call to `{}`\", name, path))\n                             .span_suggestion(span, \"try this\","}, {"sha": "52234fd61af1bf5a7a9fc07c58808a3b10032906", "filename": "src/misc.rs", "status": "modified", "additions": 20, "deletions": 9, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmisc.rs?ref=3713fd3dce39e94fb5903554300df1db63a5c422", "patch": "@@ -11,7 +11,7 @@ use rustc::middle::const_eval::eval_const_expr_partial;\n use rustc::middle::const_eval::EvalHint::ExprTypeChecked;\n \n use utils::{get_item_name, match_path, snippet, get_parent_expr, span_lint};\n-use utils::{span_help_and_lint, walk_ptrs_ty, is_integer_literal};\n+use utils::{span_help_and_lint, walk_ptrs_ty, is_integer_literal, implements_trait};\n \n /// **What it does:** This lint checks for function arguments and let bindings denoted as `ref`. It is `Warn` by default.\n ///\n@@ -210,26 +210,26 @@ impl LateLintPass for CmpOwned {\n     fn check_expr(&mut self, cx: &LateContext, expr: &Expr) {\n         if let ExprBinary(ref cmp, ref left, ref right) = expr.node {\n             if is_comparison_binop(cmp.node) {\n-                check_to_owned(cx, left, right.span, true, cmp.span);\n-                check_to_owned(cx, right, left.span, false, cmp.span)\n+                check_to_owned(cx, left, right, true, cmp.span);\n+                check_to_owned(cx, right, left, false, cmp.span)\n             }\n         }\n     }\n }\n \n-fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, op: Span) {\n-    let snip = match expr.node {\n+fn check_to_owned(cx: &LateContext, expr: &Expr, other: &Expr, left: bool, op: Span) {\n+    let (arg_ty, snip) = match expr.node {\n         ExprMethodCall(Spanned{node: ref name, ..}, _, ref args) if args.len() == 1 => {\n             if name.as_str() == \"to_string\" || name.as_str() == \"to_owned\" && is_str_arg(cx, args) {\n-                snippet(cx, args[0].span, \"..\")\n+                (cx.tcx.expr_ty(&args[0]), snippet(cx, args[0].span, \"..\"))\n             } else {\n                 return;\n             }\n         }\n         ExprCall(ref path, ref v) if v.len() == 1 => {\n             if let ExprPath(None, ref path) = path.node {\n                 if match_path(path, &[\"String\", \"from_str\"]) || match_path(path, &[\"String\", \"from\"]) {\n-                    snippet(cx, v[0].span, \"..\")\n+                    (cx.tcx.expr_ty(&v[0]), snippet(cx, v[0].span, \"..\"))\n                 } else {\n                     return;\n                 }\n@@ -239,6 +239,17 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, o\n         }\n         _ => return,\n     };\n+\n+    let other_ty = cx.tcx.expr_ty(other);\n+    let partial_eq_trait_id = match cx.tcx.lang_items.eq_trait() {\n+        Some(id) => id,\n+        None => return,\n+    };\n+\n+    if !implements_trait(cx, arg_ty, partial_eq_trait_id, Some(vec![other_ty])) {\n+        return;\n+    }\n+\n     if left {\n         span_lint(cx,\n                   CMP_OWNED,\n@@ -247,14 +258,14 @@ fn check_to_owned(cx: &LateContext, expr: &Expr, other_span: Span, left: bool, o\n                             compare without allocation\",\n                            snip,\n                            snippet(cx, op, \"==\"),\n-                           snippet(cx, other_span, \"..\")));\n+                           snippet(cx, other.span, \"..\")));\n     } else {\n         span_lint(cx,\n                   CMP_OWNED,\n                   expr.span,\n                   &format!(\"this creates an owned instance just for comparison. Consider using `{} {} {}` to \\\n                             compare without allocation\",\n-                           snippet(cx, other_span, \"..\"),\n+                           snippet(cx, other.span, \"..\"),\n                            snippet(cx, op, \"==\"),\n                            snip));\n     }"}, {"sha": "65a7bc86031cadb53ecfa38e2f41a439c5374fdc", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713fd3dce39e94fb5903554300df1db63a5c422/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=3713fd3dce39e94fb5903554300df1db63a5c422", "patch": "@@ -242,14 +242,14 @@ pub fn get_trait_def_id(cx: &LateContext, path: &[&str]) -> Option<DefId> {\n \n /// Check whether a type implements a trait.\n /// See also `get_trait_def_id`.\n-pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId) -> bool {\n+pub fn implements_trait<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, ty: ty::Ty<'tcx>, trait_id: DefId, ty_params: Option<Vec<ty::Ty<'tcx>>>) -> bool {\n     cx.tcx.populate_implementations_for_trait_if_necessary(trait_id);\n \n     let infcx = infer::new_infer_ctxt(cx.tcx, &cx.tcx.tables, None);\n     let obligation = traits::predicate_for_trait_def(cx.tcx,\n                                                      traits::ObligationCause::dummy(),\n                                                      trait_id, 0, ty,\n-                                                     vec![]);\n+                                                     ty_params.unwrap_or_default());\n \n     traits::SelectionContext::new(&infcx).evaluate_obligation_conservatively(&obligation)\n }"}, {"sha": "c4c9ee60fab589d098d30f83c2b585c37fede8af", "filename": "tests/compile-fail/cmp_owned.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3713fd3dce39e94fb5903554300df1db63a5c422/tests%2Fcompile-fail%2Fcmp_owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3713fd3dce39e94fb5903554300df1db63a5c422/tests%2Fcompile-fail%2Fcmp_owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcmp_owned.rs?ref=3713fd3dce39e94fb5903554300df1db63a5c422", "patch": "@@ -21,4 +21,6 @@ fn main() {\n     // as of 2015-08-14\n \n     x != String::from(\"foo\"); //~ERROR this creates an owned instance\n+\n+    42.to_string() == \"42\";\n }"}]}