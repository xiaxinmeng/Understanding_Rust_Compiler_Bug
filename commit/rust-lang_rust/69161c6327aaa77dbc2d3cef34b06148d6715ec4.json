{"sha": "69161c6327aaa77dbc2d3cef34b06148d6715ec4", "node_id": "C_kwDOAAsO6NoAKDY5MTYxYzYzMjdhYWE3N2RiYzJkM2NlZjM0YjA2MTQ4ZDY3MTVlYzQ", "commit": {"author": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-10T06:46:40Z"}, "committer": {"name": "Jaeyong Sung", "email": "jaeyong0201@gmail.com", "date": "2022-03-10T06:46:40Z"}, "message": "fix to lint Self::function", "tree": {"sha": "8dc6cda51021468ef6cf03e61a28465ec516e263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8dc6cda51021468ef6cf03e61a28465ec516e263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/69161c6327aaa77dbc2d3cef34b06148d6715ec4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEErNAvdl6JhsmcOZwWK4aJjMsqVIYFAmIpntAACgkQK4aJjMsq\nVIb09hAAmivSLaOeHiw94H1+xeqZeevITw+WhniO3nYTBdi+c/9nuroeaEbjuwBH\nItKDk9+a+BNBZlmSiIuPRp2/0foBaLyz/ZM7UsXn5wSTieLLpDr0kJ7TBf6WdDZG\nV/lPHZyMC6V2vs9J1MZj4b9p5Mcl5IYUk1t6m/wK38iFYSK7fGOrnkyHc1ftl/tt\nyuF/7adCEO8n895YWLg42t6PTNZfkPkAt070mAXln3cWA5y7vdJVG6Aqw1cW3crB\nXxk/6oX2Hjy0HmS1es6bZvZxbc1fJGXZjzaefqrWsyfc5tYvv+s51VbO5BQsYoaK\nLQcBFWavNUTkwLdHVBkwEDrwNC9uU7nDB+XCm8vkLFkTv8bNwbrkGicDvaCooDcB\nwNiHai3hWKVCRQGCG0GIXSUQzvOCLacsmAOOlSaPZv/pfNjRibqhlDFqKYLjiVMq\nKEMWSmm+pfZJH+ihg9WP70ucYSWW8tCHQ5k11E71dcN8oFdNoA0TIn5LxcpeWwTf\nlq2or1zeU4kFeqOz/HmlVIhVQ4ZVs58J9ZwvsKs13gR2bpaq5MyOML4wMahMIW/C\nno80Zo0hdDVWtDSuTctcGAx+KYf7EzYM3oGUFHZBkBfUmCYpNn3PrHETf7TQS0q2\njCzkQaIOr1kA21xEpLyKpomAKh1G3Olz798+KhvWp/pI3rb+dFg=\n=a9YP\n-----END PGP SIGNATURE-----", "payload": "tree 8dc6cda51021468ef6cf03e61a28465ec516e263\nparent e4766776d24a17cc1500c8e420a00c4c0e05423b\nauthor Jaeyong Sung <jaeyong0201@gmail.com> 1646894800 +0900\ncommitter Jaeyong Sung <jaeyong0201@gmail.com> 1646894800 +0900\n\nfix to lint Self::function\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/69161c6327aaa77dbc2d3cef34b06148d6715ec4", "html_url": "https://github.com/rust-lang/rust/commit/69161c6327aaa77dbc2d3cef34b06148d6715ec4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/69161c6327aaa77dbc2d3cef34b06148d6715ec4/comments", "author": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "committer": {"login": "buttercrab", "id": 34997549, "node_id": "MDQ6VXNlcjM0OTk3NTQ5", "avatar_url": "https://avatars.githubusercontent.com/u/34997549?v=4", "gravatar_id": "", "url": "https://api.github.com/users/buttercrab", "html_url": "https://github.com/buttercrab", "followers_url": "https://api.github.com/users/buttercrab/followers", "following_url": "https://api.github.com/users/buttercrab/following{/other_user}", "gists_url": "https://api.github.com/users/buttercrab/gists{/gist_id}", "starred_url": "https://api.github.com/users/buttercrab/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/buttercrab/subscriptions", "organizations_url": "https://api.github.com/users/buttercrab/orgs", "repos_url": "https://api.github.com/users/buttercrab/repos", "events_url": "https://api.github.com/users/buttercrab/events{/privacy}", "received_events_url": "https://api.github.com/users/buttercrab/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4766776d24a17cc1500c8e420a00c4c0e05423b", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4766776d24a17cc1500c8e420a00c4c0e05423b", "html_url": "https://github.com/rust-lang/rust/commit/e4766776d24a17cc1500c8e420a00c4c0e05423b"}], "stats": {"total": 119, "additions": 80, "deletions": 39}, "files": [{"sha": "7ec110295dc8177b4ea08480355782d2b191f5f4", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 58, "deletions": 38, "changes": 96, "blob_url": "https://github.com/rust-lang/rust/blob/69161c6327aaa77dbc2d3cef34b06148d6715ec4/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69161c6327aaa77dbc2d3cef34b06148d6715ec4/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=69161c6327aaa77dbc2d3cef34b06148d6715ec4", "patch": "@@ -5,12 +5,13 @@ use itertools::{izip, Itertools};\n use rustc_ast::{walk_list, Label, Mutability};\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::Applicability;\n-use rustc_hir::def::Res;\n+use rustc_hir::def::{DefKind, Res};\n+use rustc_hir::def_id::DefId;\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n use rustc_hir::intravisit::{walk_expr, FnKind, Visitor};\n use rustc_hir::{\n-    Arm, Block, Body, Expr, ExprKind, Guard, HirId, Let, Local, Pat, PatKind, Path, PathSegment, QPath, Stmt, StmtKind,\n-    UnOp,\n+    Arm, Block, Body, Expr, ExprKind, Guard, HirId, ImplicitSelfKind, Let, Local, Pat, PatKind, Path, PathSegment,\n+    QPath, Stmt, StmtKind, TyKind, UnOp,\n };\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::ty;\n@@ -94,13 +95,15 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n         &mut self,\n         cx: &LateContext<'tcx>,\n         kind: FnKind<'tcx>,\n-        _: &'tcx rustc_hir::FnDecl<'tcx>,\n+        decl: &'tcx rustc_hir::FnDecl<'tcx>,\n         body: &'tcx Body<'tcx>,\n         _: Span,\n         id: HirId,\n     ) {\n         if let FnKind::ItemFn(ident, ..) | FnKind::Method(ident, ..) = kind {\n-            let data = cx.tcx.def_path(cx.tcx.hir().local_def_id(id).to_def_id()).data;\n+            let def_id = id.owner.to_def_id();\n+            let data = cx.tcx.def_path(def_id).data;\n+\n             if data.len() > 1 {\n                 match data.get(data.len() - 2) {\n                     Some(DisambiguatedDefPathData {\n@@ -111,6 +114,8 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 }\n             }\n \n+            let has_self = !matches!(decl.implicit_self, ImplicitSelfKind::None);\n+\n             let ty_res = cx.typeck_results();\n             let param_span = body\n                 .params\n@@ -122,10 +127,7 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                     });\n                     v\n                 })\n-                .skip(match kind {\n-                    FnKind::Method(..) => 1,\n-                    _ => 0,\n-                })\n+                .skip(if has_self { 1 } else { 0 })\n                 .filter(|(_, _, ident)| !ident.name.as_str().starts_with('_'))\n                 .collect_vec();\n \n@@ -139,7 +141,9 @@ impl<'tcx> LateLintPass<'tcx> for OnlyUsedInRecursion {\n                 break_vars: FxHashMap::default(),\n                 params,\n                 fn_ident: ident,\n+                fn_def_id: def_id,\n                 is_method: matches!(kind, FnKind::Method(..)),\n+                has_self,\n                 ty_res,\n                 ty_ctx: cx.tcx,\n             };\n@@ -242,7 +246,9 @@ pub struct SideEffectVisit<'tcx> {\n     break_vars: FxHashMap<Ident, Vec<(HirId, bool)>>,\n     params: Vec<&'tcx Pat<'tcx>>,\n     fn_ident: Ident,\n+    fn_def_id: DefId,\n     is_method: bool,\n+    has_self: bool,\n     ty_res: &'tcx TypeckResults<'tcx>,\n     ty_ctx: TyCtxt<'tcx>,\n }\n@@ -479,41 +485,55 @@ impl<'tcx> SideEffectVisit<'tcx> {\n         let mut ret_vars = std::mem::take(&mut self.ret_vars);\n         self.add_side_effect(ret_vars.clone());\n \n+        let mut is_recursive = false;\n+\n         if_chain! {\n-            if !self.is_method;\n+            if !self.has_self;\n             if let ExprKind::Path(QPath::Resolved(_, path)) = callee.kind;\n-            if let Res::Def(..) = path.res;\n-            if path.segments.len() == 1;\n-            let ident = path.segments.last().unwrap().ident;\n-            if ident == self.fn_ident;\n+            if let Res::Def(DefKind::Fn, def_id) = path.res;\n+            if self.fn_def_id == def_id;\n             then {\n-                izip!(self.params.clone(), args)\n-                    .for_each(|(pat, expr)| {\n-                        self.visit_pat_expr(pat, expr, true);\n-                        self.ret_vars.clear();\n-                    });\n-            } else {\n-                // This would set arguments used in closure that does not have side-effect.\n-                // Closure itself can be detected whether there is a side-effect, but the\n-                // value of variable that is holding closure can change.\n-                // So, we just check the variables.\n-                self.ret_vars = args\n-                    .iter()\n-                    .flat_map(|expr| {\n-                        self.visit_expr(expr);\n-                        std::mem::take(&mut self.ret_vars)\n-                    })\n-                    .collect_vec()\n-                    .into_iter()\n-                    .map(|id| {\n-                        self.has_side_effect.insert(id.0);\n-                        id\n-                    })\n-                    .collect();\n-                self.contains_side_effect = true;\n+                is_recursive = true;\n+            }\n+        }\n+\n+        if_chain! {\n+            if !self.has_self && self.is_method;\n+            if let ExprKind::Path(QPath::TypeRelative(ty, segment)) = callee.kind;\n+            if segment.ident == self.fn_ident;\n+            if let TyKind::Path(QPath::Resolved(_, path)) = ty.kind;\n+            if let Res::SelfTy(..) = path.res;\n+            then {\n+                is_recursive = true;\n             }\n         }\n \n+        if is_recursive {\n+            izip!(self.params.clone(), args).for_each(|(pat, expr)| {\n+                self.visit_pat_expr(pat, expr, true);\n+                self.ret_vars.clear();\n+            });\n+        } else {\n+            // This would set arguments used in closure that does not have side-effect.\n+            // Closure itself can be detected whether there is a side-effect, but the\n+            // value of variable that is holding closure can change.\n+            // So, we just check the variables.\n+            self.ret_vars = args\n+                .iter()\n+                .flat_map(|expr| {\n+                    self.visit_expr(expr);\n+                    std::mem::take(&mut self.ret_vars)\n+                })\n+                .collect_vec()\n+                .into_iter()\n+                .map(|id| {\n+                    self.has_side_effect.insert(id.0);\n+                    id\n+                })\n+                .collect();\n+            self.contains_side_effect = true;\n+        }\n+\n         self.ret_vars.append(&mut ret_vars);\n     }\n "}, {"sha": "5768434f988ebf8b141fc4ee5e67a3971df67f29", "filename": "tests/ui/only_used_in_recursion.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/69161c6327aaa77dbc2d3cef34b06148d6715ec4/tests%2Fui%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/69161c6327aaa77dbc2d3cef34b06148d6715ec4/tests%2Fui%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion.rs?ref=69161c6327aaa77dbc2d3cef34b06148d6715ec4", "patch": "@@ -104,4 +104,19 @@ fn ignore2(a: usize, _b: usize) -> usize {\n     if a == 1 { 1 } else { ignore2(a - 1, _b) }\n }\n \n+fn f1(a: u32) -> u32 {\n+    a\n+}\n+\n+fn f2(a: u32) -> u32 {\n+    f1(a)\n+}\n+\n+fn inner_fn(a: u32) -> u32 {\n+    fn inner_fn(a: u32) -> u32 {\n+        a\n+    }\n+    inner_fn(a)\n+}\n+\n fn main() {}"}, {"sha": "6fe9361bf5feb2eee0d903887ae911f3673f5706", "filename": "tests/ui/only_used_in_recursion.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/69161c6327aaa77dbc2d3cef34b06148d6715ec4/tests%2Fui%2Fonly_used_in_recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/69161c6327aaa77dbc2d3cef34b06148d6715ec4/tests%2Fui%2Fonly_used_in_recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fonly_used_in_recursion.stderr?ref=69161c6327aaa77dbc2d3cef34b06148d6715ec4", "patch": "@@ -66,11 +66,17 @@ error: parameter is only used in recursion\n LL |     fn method2(&self, a: usize, b: usize) -> usize {\n    |                                 ^ help: if this is intentional, prefix with an underscore: `_b`\n \n+error: parameter is only used in recursion\n+  --> $DIR/only_used_in_recursion.rs:90:24\n+   |\n+LL |     fn hello(a: usize, b: usize) -> usize {\n+   |                        ^ help: if this is intentional, prefix with an underscore: `_b`\n+\n error: parameter is only used in recursion\n   --> $DIR/only_used_in_recursion.rs:94:32\n    |\n LL |     fn hello2(&self, a: usize, b: usize) -> usize {\n    |                                ^ help: if this is intentional, prefix with an underscore: `_b`\n \n-error: aborting due to 12 previous errors\n+error: aborting due to 13 previous errors\n "}]}