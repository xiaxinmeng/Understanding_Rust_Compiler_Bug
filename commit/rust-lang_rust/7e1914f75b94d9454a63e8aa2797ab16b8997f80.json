{"sha": "7e1914f75b94d9454a63e8aa2797ab16b8997f80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdlMTkxNGY3NWI5NGQ5NDU0YTYzZThhYTI3OTdhYjE2Yjg5OTdmODA=", "commit": {"author": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:07:16Z"}, "committer": {"name": "ljedrz", "email": "ljedrz@gmail.com", "date": "2019-03-10T12:07:16Z"}, "message": "hir: replace NodeId with HirId in trait_impls", "tree": {"sha": "f6c205090dee0a85e02c223fa51e9db9a892dc47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f6c205090dee0a85e02c223fa51e9db9a892dc47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7e1914f75b94d9454a63e8aa2797ab16b8997f80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7e1914f75b94d9454a63e8aa2797ab16b8997f80", "html_url": "https://github.com/rust-lang/rust/commit/7e1914f75b94d9454a63e8aa2797ab16b8997f80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7e1914f75b94d9454a63e8aa2797ab16b8997f80/comments", "author": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ljedrz", "id": 3750347, "node_id": "MDQ6VXNlcjM3NTAzNDc=", "avatar_url": "https://avatars.githubusercontent.com/u/3750347?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ljedrz", "html_url": "https://github.com/ljedrz", "followers_url": "https://api.github.com/users/ljedrz/followers", "following_url": "https://api.github.com/users/ljedrz/following{/other_user}", "gists_url": "https://api.github.com/users/ljedrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/ljedrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ljedrz/subscriptions", "organizations_url": "https://api.github.com/users/ljedrz/orgs", "repos_url": "https://api.github.com/users/ljedrz/repos", "events_url": "https://api.github.com/users/ljedrz/events{/privacy}", "received_events_url": "https://api.github.com/users/ljedrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "913ad6d1f092c70049934ba538d342d295d35997", "url": "https://api.github.com/repos/rust-lang/rust/commits/913ad6d1f092c70049934ba538d342d295d35997", "html_url": "https://github.com/rust-lang/rust/commit/913ad6d1f092c70049934ba538d342d295d35997"}], "stats": {"total": 29, "additions": 15, "deletions": 14}, "files": [{"sha": "d3fa7ce283d12fd58223726d84e9a8a4848529b1", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -89,7 +89,7 @@ pub struct LoweringContext<'a> {\n     bodies: BTreeMap<hir::BodyId, hir::Body>,\n     exported_macros: Vec<hir::MacroDef>,\n \n-    trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n+    trait_impls: BTreeMap<DefId, Vec<hir::HirId>>,\n     trait_auto_impl: BTreeMap<DefId, NodeId>,\n \n     modules: BTreeMap<NodeId, hir::ModuleItems>,\n@@ -2967,6 +2967,7 @@ impl<'a> LoweringContext<'a> {\n                 // method, it will not be considered an in-band\n                 // lifetime to be added, but rather a reference to a\n                 // parent lifetime.\n+                let lowered_trait_impl_id = self.lower_node_id(id).hir_id;\n                 let (generics, (trait_ref, lowered_ty)) = self.add_in_band_defs(\n                     ast_generics,\n                     def_id,\n@@ -2978,7 +2979,8 @@ impl<'a> LoweringContext<'a> {\n \n                         if let Some(ref trait_ref) = trait_ref {\n                             if let Def::Trait(def_id) = trait_ref.path.def {\n-                                this.trait_impls.entry(def_id).or_default().push(id);\n+                                this.trait_impls.entry(def_id).or_default().push(\n+                                    lowered_trait_impl_id);\n                             }\n                         }\n "}, {"sha": "44091eb4395be6801674f35b15a50632e069f152", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -555,7 +555,7 @@ impl<'hir> Map<'hir> {\n         }\n     }\n \n-    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [NodeId] {\n+    pub fn trait_impls(&self, trait_did: DefId) -> &'hir [HirId] {\n         self.dep_graph.read(DepNode::new_no_params(DepKind::AllLocalTraitImpls));\n \n         // N.B., intentionally bypass `self.forest.krate()` so that we"}, {"sha": "ef72d0187b6b619b7bfa4cd00785934d7475cd12", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -723,7 +723,7 @@ pub struct Crate {\n     pub trait_items: BTreeMap<TraitItemId, TraitItem>,\n     pub impl_items: BTreeMap<ImplItemId, ImplItem>,\n     pub bodies: BTreeMap<BodyId, Body>,\n-    pub trait_impls: BTreeMap<DefId, Vec<NodeId>>,\n+    pub trait_impls: BTreeMap<DefId, Vec<HirId>>,\n     pub trait_auto_impl: BTreeMap<DefId, NodeId>,\n \n     /// A list of the body ids written out in the order in which they"}, {"sha": "a45b5b5b8470aff0930f33cb86f7298d6504ab71", "filename": "src/librustc/ty/trait_def.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fty%2Ftrait_def.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc%2Fty%2Ftrait_def.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ftrait_def.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -179,8 +179,8 @@ pub(super) fn trait_impls_of_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             }\n         }\n \n-        for &node_id in tcx.hir().trait_impls(trait_id) {\n-            add_impl(tcx.hir().local_def_id(node_id));\n+        for &hir_id in tcx.hir().trait_impls(trait_id) {\n+            add_impl(tcx.hir().local_def_id_from_hir_id(hir_id));\n         }\n     }\n "}, {"sha": "2cb2dd50d75050d460149ff75f169277e9cea79e", "filename": "src/librustc_typeck/coherence/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fbuiltin.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -37,7 +37,7 @@ impl<'a, 'tcx> Checker<'a, 'tcx> {\n     {\n         if Some(self.trait_def_id) == trait_def_id {\n             for &impl_id in self.tcx.hir().trait_impls(self.trait_def_id) {\n-                let impl_def_id = self.tcx.hir().local_def_id(impl_id);\n+                let impl_def_id = self.tcx.hir().local_def_id_from_hir_id(impl_id);\n                 f(self.tcx, impl_def_id);\n             }\n         }"}, {"sha": "bf7284d8445ff0a1513ff07bded17655f334ba4e", "filename": "src/librustc_typeck/coherence/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcoherence%2Fmod.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -5,22 +5,21 @@\n // done by the orphan and overlap modules. Then we build up various\n // mappings. That mapping code resides here.\n \n+use crate::hir::HirId;\n use crate::hir::def_id::{DefId, LOCAL_CRATE};\n use rustc::traits;\n use rustc::ty::{self, TyCtxt, TypeFoldable};\n use rustc::ty::query::Providers;\n use rustc::util::common::time;\n \n-use syntax::ast;\n-\n mod builtin;\n mod inherent_impls;\n mod inherent_impls_overlap;\n mod orphan;\n mod unsafety;\n \n-fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir().local_def_id(node_id);\n+fn check_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_id: HirId) {\n+    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n \n     // If there are no traits, then this implementation must have a\n     // base type.\n@@ -160,8 +159,8 @@ pub fn check_coherence<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n /// Overlap: no two impls for the same trait are implemented for the\n /// same type. Likewise, no two inherent impls for a given type\n /// constructor provide a method with the same name.\n-fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, node_id: ast::NodeId) {\n-    let impl_def_id = tcx.hir().local_def_id(node_id);\n+fn check_impl_overlap<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, hir_id: HirId) {\n+    let impl_def_id = tcx.hir().local_def_id_from_hir_id(hir_id);\n     let trait_ref = tcx.impl_trait_ref(impl_def_id).unwrap();\n     let trait_def_id = trait_ref.def_id;\n "}, {"sha": "611291c2688f58cbfcea26214d99709f05392d5b", "filename": "src/librustdoc/passes/collect_trait_impls.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7e1914f75b94d9454a63e8aa2797ab16b8997f80/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_trait_impls.rs?ref=7e1914f75b94d9454a63e8aa2797ab16b8997f80", "patch": "@@ -119,7 +119,7 @@ pub fn collect_trait_impls(krate: Crate, cx: &DocContext<'_>) -> Crate {\n     // doesn't work with it anyway, so pull them from the HIR map instead\n     for &trait_did in cx.all_traits.iter() {\n         for &impl_node in cx.tcx.hir().trait_impls(trait_did) {\n-            let impl_did = cx.tcx.hir().local_def_id(impl_node);\n+            let impl_did = cx.tcx.hir().local_def_id_from_hir_id(impl_node);\n             inline::build_impl(cx, impl_did, &mut new_items);\n         }\n     }"}]}