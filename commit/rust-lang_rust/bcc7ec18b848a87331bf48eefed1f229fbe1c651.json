{"sha": "bcc7ec18b848a87331bf48eefed1f229fbe1c651", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJjYzdlYzE4Yjg0OGE4NzMzMWJmNDhlZWZlZDFmMjI5ZmJlMWM2NTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T23:56:39Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-01T23:56:39Z"}, "message": "Remove the catch-all in type.ml, add cases for every stmt (a couple more handled; mostly still stubs).", "tree": {"sha": "5e408bd1fd0cef593a703b504bd7165a454f53f1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e408bd1fd0cef593a703b504bd7165a454f53f1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcc7ec18b848a87331bf48eefed1f229fbe1c651", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcc7ec18b848a87331bf48eefed1f229fbe1c651", "html_url": "https://github.com/rust-lang/rust/commit/bcc7ec18b848a87331bf48eefed1f229fbe1c651", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcc7ec18b848a87331bf48eefed1f229fbe1c651/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "91384386209b0b122f88f675a4b095a8ae46a238", "url": "https://api.github.com/repos/rust-lang/rust/commits/91384386209b0b122f88f675a4b095a8ae46a238", "html_url": "https://github.com/rust-lang/rust/commit/91384386209b0b122f88f675a4b095a8ae46a238"}], "stats": {"total": 63, "additions": 55, "deletions": 8}, "files": [{"sha": "76129e575a3dea562bcda1061dee7bb058aefaeb", "filename": "src/boot/me/type.ml", "status": "modified", "additions": 55, "deletions": 8, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/bcc7ec18b848a87331bf48eefed1f229fbe1c651/src%2Fboot%2Fme%2Ftype.ml", "raw_url": "https://github.com/rust-lang/rust/raw/bcc7ec18b848a87331bf48eefed1f229fbe1c651/src%2Fboot%2Fme%2Ftype.ml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fboot%2Fme%2Ftype.ml?ref=bcc7ec18b848a87331bf48eefed1f229fbe1c651", "patch": "@@ -1164,6 +1164,10 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n           unify_lval rval_ctx callee callee_tv;\n       in\n \n+      let set_auto_deref lv b =\n+        Hashtbl.replace cx.ctxt_auto_deref_lval (lval_base_id lv) b;\n+      in\n+\n       let ty t = ref (TYSPEC_resolved ([||], t)) in\n       let any _ = ref TYSPEC_all in\n \n@@ -1227,7 +1231,7 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               (* Force-override the 'auto-deref' judgment that was cached \n                * in cx.ctxt_auto_deref_lval by preceding unify_expr call.\n                *)\n-              Hashtbl.replace cx.ctxt_auto_deref_lval (lval_base_id dst) false;\n+              set_auto_deref dst false;\n               unify_lval lval_ctx dst tv;\n \n         | Ast.STMT_call (out, callee, args) ->\n@@ -1248,14 +1252,13 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n                    check_callable out_tv callee args)\n                 check_calls\n \n-        | Ast.STMT_while { Ast.while_lval = (_, expr) } ->\n+        | Ast.STMT_while { Ast.while_lval = (_, expr) }\n+        | Ast.STMT_do_while { Ast.while_lval = (_, expr) } ->\n             unify_expr rval_ctx expr (ty Ast.TY_bool)\n \n         | Ast.STMT_if { Ast.if_test = if_test } ->\n             unify_expr rval_ctx if_test (ty Ast.TY_bool);\n \n-        | Ast.STMT_decl _ -> ()\n-\n         | Ast.STMT_ret atom_opt\n         | Ast.STMT_put atom_opt ->\n             begin\n@@ -1314,10 +1317,54 @@ let process_crate (cx:ctxt) (crate:Ast.crate) : unit =\n               unify_lval lval_ctx lval lval_tv;\n               Array.iter (fun _ -> push_pat_tv lval_tv) arms\n \n-        (* FIXME (issue #52): plenty more to handle here. *)\n-        | _ ->\n-            log cx \"warning: not typechecking stmt %s\\n\"\n-              (Ast.sprintf_stmt () stmt)\n+        | Ast.STMT_join lval ->\n+            unify_lval rval_ctx lval (ty Ast.TY_task);\n+\n+        | Ast.STMT_init_box (dst, v) ->\n+            let tv = any() in\n+              unify_atom rval_ctx v tv;\n+              unify_lval { init_ctx with box_ok = true } dst tv\n+\n+        (* FIXME (issue #52): Finish these. *)\n+        (* Fake-typecheck a few comm-related statements for now, just enough\n+         * to supply the auto-deref contexts; we will need new tyspecs for\n+         * port and channel constraints.\n+         *)\n+\n+        | Ast.STMT_recv (dst, port) ->\n+            set_auto_deref dst rval_ctx.box_ok;\n+            set_auto_deref port rval_ctx.box_ok;\n+\n+        | Ast.STMT_send (chan, v) ->\n+            set_auto_deref chan rval_ctx.box_ok;\n+            set_auto_deref v rval_ctx.box_ok;\n+\n+        | Ast.STMT_init_chan (dst, port_opt) ->\n+            begin\n+              match port_opt with\n+                  None -> ()\n+                | Some port -> set_auto_deref port rval_ctx.box_ok\n+            end;\n+            set_auto_deref dst init_ctx.box_ok\n+\n+        | Ast.STMT_init_port dst ->\n+            set_auto_deref dst init_ctx.box_ok\n+\n+\n+        (* Nothing to typecheck on these. *)\n+        | Ast.STMT_block _\n+        | Ast.STMT_decl _\n+        | Ast.STMT_yield\n+        | Ast.STMT_fail -> ()\n+\n+        (* Unimplemented. *)\n+        | Ast.STMT_check_if _\n+        | Ast.STMT_prove _\n+        | Ast.STMT_note _\n+        | Ast.STMT_alt_port _\n+        | Ast.STMT_alt_type _\n+        | Ast.STMT_put_each _\n+        | Ast.STMT_slice _ -> err None \"Unimplemented typecheck for stmt\"\n     in\n \n     let visit_stmt_pre (stmt:Ast.stmt) : unit ="}]}