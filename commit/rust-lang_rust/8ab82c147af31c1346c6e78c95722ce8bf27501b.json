{"sha": "8ab82c147af31c1346c6e78c95722ce8bf27501b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhYjgyYzE0N2FmMzFjMTM0NmM2ZTc4Yzk1NzIyY2U4YmYyNzUwMWI=", "commit": {"author": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-26T14:23:13Z"}, "committer": {"name": "csmoe", "email": "csmoe@msn.com", "date": "2019-09-29T16:17:46Z"}, "message": "introduce from_ref helper for replacement", "tree": {"sha": "5bbe7ad09183387af0e07304a63040736d333349", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5bbe7ad09183387af0e07304a63040736d333349"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ab82c147af31c1346c6e78c95722ce8bf27501b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ab82c147af31c1346c6e78c95722ce8bf27501b", "html_url": "https://github.com/rust-lang/rust/commit/8ab82c147af31c1346c6e78c95722ce8bf27501b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ab82c147af31c1346c6e78c95722ce8bf27501b/comments", "author": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "csmoe", "id": 35686186, "node_id": "MDQ6VXNlcjM1Njg2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/35686186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/csmoe", "html_url": "https://github.com/csmoe", "followers_url": "https://api.github.com/users/csmoe/followers", "following_url": "https://api.github.com/users/csmoe/following{/other_user}", "gists_url": "https://api.github.com/users/csmoe/gists{/gist_id}", "starred_url": "https://api.github.com/users/csmoe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/csmoe/subscriptions", "organizations_url": "https://api.github.com/users/csmoe/orgs", "repos_url": "https://api.github.com/users/csmoe/repos", "events_url": "https://api.github.com/users/csmoe/events{/privacy}", "received_events_url": "https://api.github.com/users/csmoe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d046ffddc4bd50e04ffc3ff9f766e2ac71f74d50", "url": "https://api.github.com/repos/rust-lang/rust/commits/d046ffddc4bd50e04ffc3ff9f766e2ac71f74d50", "html_url": "https://github.com/rust-lang/rust/commit/d046ffddc4bd50e04ffc3ff9f766e2ac71f74d50"}], "stats": {"total": 99, "additions": 86, "deletions": 13}, "files": [{"sha": "3e4dfccf34dd509217980417b0c3e71b034ed190", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n \n         let ty_msg = match local_visitor.found_ty {\n             Some(ty::TyS { kind: ty::Closure(def_id, substs), .. }) => {\n-                let fn_sig = substs.closure_sig(*def_id, self.tcx);\n+                let fn_sig = ty::ClosureSubsts::from_ref(substs).closure_sig(*def_id, self.tcx);\n                 let args = closure_args(&fn_sig);\n                 let ret = fn_sig.output().skip_binder().to_string();\n                 format!(\" for the closure `fn({}) -> {}`\", args, ret)"}, {"sha": "ff7cd59720fb248f6c1ac23f98347a41c0362d2f", "filename": "src/librustc/infer/opaque_types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fopaque_types%2Fmod.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -722,7 +722,7 @@ where\n             ty::Closure(def_id, ref substs) => {\n                 // Skip lifetime parameters of the enclosing item(s)\n \n-                for upvar_ty in substs.upvar_tys(def_id, self.tcx) {\n+                for upvar_ty in ty::ClosureSubsts::from_ref(substs).upvar_tys(def_id, self.tcx) {\n                     upvar_ty.visit_with(self);\n                 }\n \n@@ -886,7 +886,7 @@ impl TypeFolder<'tcx> for ReverseMapper<'tcx> {\n \n                 let generics = self.tcx.generics_of(def_id);\n                 let substs =\n-                    self.tcx.mk_substs(substs.substs.iter().enumerate().map(|(index, &kind)| {\n+                    self.tcx.mk_substs(substs.iter().enumerate().map(|(index, &kind)| {\n                         if index < generics.parent_count {\n                             // Accommodate missing regions in the parent kinds...\n                             self.fold_kind_mapping_missing_regions_to_empty(kind)"}, {"sha": "5595047831cdb17b8b96c00f0364e452ea19bdfb", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -745,7 +745,7 @@ impl<'a, 'tcx> MemCategorizationContext<'a, 'tcx> {\n                     // During upvar inference we may not know the\n                     // closure kind, just use the LATTICE_BOTTOM value.\n                     Some(infcx) =>\n-                        infcx.closure_kind(closure_def_id, closure_substs)\n+                        infcx.closure_kind(closure_def_id, ty::ClosureSubsts::from_ref(closure_substs))\n                              .unwrap_or(ty::ClosureKind::LATTICE_BOTTOM),\n \n                     None =>"}, {"sha": "4d025fe73183de9563f5ba48149060a2677f486d", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -3370,17 +3370,18 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         )?);\n \n         // FIXME: chalk\n+\n         if !self.tcx().sess.opts.debugging_opts.chalk {\n             obligations.push(Obligation::new(\n                 obligation.cause.clone(),\n                 obligation.param_env,\n-                ty::Predicate::ClosureKind(closure_def_id, substs, kind),\n+                ty::Predicate::ClosureKind(closure_def_id, ty::ClosureSubsts::from_ref(substs.clone()), kind),\n             ));\n         }\n \n         Ok(VtableClosureData {\n             closure_def_id,\n-            substs: substs.clone(),\n+            substs: ty::ClosureSubsts::from_ref(substs),\n             nested: obligations,\n         })\n     }\n@@ -3869,7 +3870,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n         closure_def_id: DefId,\n-        substs: ty::ClosureSubsts<'tcx>,\n+        substs: SubstsRef<'tcx>,\n     ) -> ty::PolyTraitRef<'tcx> {\n         debug!(\n             \"closure_trait_ref_unnormalized(obligation={:?}, closure_def_id={:?}, substs={:?})\","}, {"sha": "05c6ec6f97a5102401d912a04426293ff7c9ae00", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 6, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -158,7 +158,7 @@ pub enum TyKind<'tcx> {\n \n     /// The anonymous type of a closure. Used to represent the type of\n     /// `|a| a`.\n-    Closure(DefId, ClosureSubsts<'tcx>),\n+    Closure(DefId, SubstsRef<'tcx>),\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n@@ -317,13 +317,18 @@ pub struct ClosureSubsts<'tcx> {\n \n /// Struct returned by `split()`. Note that these are subslices of the\n /// parent slice and not canonical substs themselves.\n-struct SplitClosureSubsts<'tcx> {\n-    closure_kind_ty: Ty<'tcx>,\n-    closure_sig_ty: Ty<'tcx>,\n-    upvar_kinds: &'tcx [GenericArg<'tcx>],\n+pub(crate) struct SplitClosureSubsts<'tcx> {\n+    pub(crate) closure_kind_ty: Ty<'tcx>,\n+    pub(crate) closure_sig_ty: Ty<'tcx>,\n+    pub(crate) upvar_kinds: &'tcx [GenericArg<'tcx>],\n }\n \n impl<'tcx> ClosureSubsts<'tcx> {\n+    // FIXME(csmoe): remove this method once the migration is done.\n+    pub fn from_ref(substs: SubstsRef<'tcx>) -> Self {\n+        Self { substs }\n+    }\n+\n     /// Divides the closure substs into their respective\n     /// components. Single source of truth with respect to the\n     /// ordering.\n@@ -2147,7 +2152,7 @@ impl<'tcx> TyS<'tcx> {\n             Adt(_, substs) | Opaque(_, substs) => {\n                 out.extend(substs.regions())\n             }\n-            Closure(_, ClosureSubsts { ref substs }) |\n+            Closure(_, ref substs ) |\n             Generator(_, GeneratorSubsts { ref substs }, _) => {\n                 out.extend(substs.regions())\n             }"}, {"sha": "e17a715e9570ea5201f0c2bffd343e80abd54153", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ab82c147af31c1346c6e78c95722ce8bf27501b/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=8ab82c147af31c1346c6e78c95722ce8bf27501b", "patch": "@@ -5,6 +5,7 @@ use crate::infer::canonical::Canonical;\n use crate::ty::{self, Lift, List, Ty, TyCtxt, InferConst, ParamConst};\n use crate::ty::fold::{TypeFoldable, TypeFolder, TypeVisitor};\n use crate::mir::interpret::ConstValue;\n+use crate::ty::sty::SplitClosureSubsts;\n \n use rustc_serialize::{self, Encodable, Encoder, Decodable, Decoder};\n use syntax_pos::{Span, DUMMY_SP};\n@@ -379,6 +380,72 @@ impl<'a, 'tcx> InternalSubsts<'tcx> {\n     pub fn truncate_to(&self, tcx: TyCtxt<'tcx>, generics: &ty::Generics) -> SubstsRef<'tcx> {\n         tcx.mk_substs(self.iter().take(generics.count()).cloned())\n     }\n+\n+    /// Divides the closure substs into their respective\n+    /// components. Single source of truth with respect to the\n+    /// ordering.\n+    fn split(self, def_id: DefId, tcx: TyCtxt<'_>) -> SplitClosureSubsts<'tcx> {\n+        let generics = tcx.generics_of(def_id);\n+        let parent_len = generics.parent_count;\n+        SplitClosureSubsts {\n+            closure_kind_ty: self.substs.type_at(parent_len),\n+            closure_sig_ty: self.substs.type_at(parent_len + 1),\n+            upvar_kinds: &self.substs[parent_len + 2..],\n+        }\n+    }\n+\n+    #[inline]\n+    pub fn upvar_tys(\n+        &self,\n+        def_id: DefId,\n+        tcx: TyCtxt<'_>,\n+    ) -> impl Iterator<Item = Ty<'tcx>> + 'tcx {\n+        let SplitClosureSubsts { upvar_kinds, .. } = self.split(def_id, tcx);\n+        upvar_kinds.iter().map(|t| {\n+            if let UnpackedKind::Type(ty) = t.unpack() {\n+                ty\n+            } else {\n+                bug!(\"upvar should be type\")\n+            }\n+        })\n+    }\n+\n+    /// Returns the closure kind for this closure; may return a type\n+    /// variable during inference. To get the closure kind during\n+    /// inference, use `infcx.closure_kind(def_id, substs)`.\n+    pub fn closure_kind_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_kind_ty\n+    }\n+\n+    /// Returns the type representing the closure signature for this\n+    /// closure; may contain type variables during inference. To get\n+    /// the closure signature during inference, use\n+    /// `infcx.fn_sig(def_id)`.\n+    pub fn closure_sig_ty(self, def_id: DefId, tcx: TyCtxt<'_>) -> Ty<'tcx> {\n+        self.split(def_id, tcx).closure_sig_ty\n+    }\n+\n+    /// Returns the closure kind for this closure; only usable outside\n+    /// of an inference context, because in that context we know that\n+    /// there are no type variables.\n+    ///\n+    /// If you have an inference context, use `infcx.closure_kind()`.\n+    pub fn closure_kind(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::ClosureKind {\n+        self.split(def_id, tcx).closure_kind_ty.to_opt_closure_kind().unwrap()\n+    }\n+\n+    /// Extracts the signature from the closure; only usable outside\n+    /// of an inference context, because in that context we know that\n+    /// there are no type variables.\n+    ///\n+    /// If you have an inference context, use `infcx.closure_sig()`.\n+    pub fn closure_sig(self, def_id: DefId, tcx: TyCtxt<'tcx>) -> ty::PolyFnSig<'tcx> {\n+        let ty = self.closure_sig_ty(def_id, tcx);\n+        match ty.kind {\n+            ty::FnPtr(sig) => sig,\n+            _ => bug!(\"closure_sig_ty is not a fn-ptr: {:?}\", ty.kind),\n+        }\n+    }\n }\n \n impl<'tcx> TypeFoldable<'tcx> for SubstsRef<'tcx> {"}]}