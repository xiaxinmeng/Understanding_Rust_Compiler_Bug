{"sha": "4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjYjdiMGYyYWY5Nzg3YWJlMWM3M2ZjMzkyMmU5YjQyNmE5NmUwZWY=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T12:01:47Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-25T14:16:42Z"}, "message": "Add AST definitions for struct/variant fields etc.\n\nFixes #117", "tree": {"sha": "80e0ec0685f17b6470a7ff3b1f47abd1f9b6b9ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/80e0ec0685f17b6470a7ff3b1f47abd1f9b6b9ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "html_url": "https://github.com/rust-lang/rust/commit/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6fcd38cc81bdcc9921da767872dfce65ee7d2d27", "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcd38cc81bdcc9921da767872dfce65ee7d2d27", "html_url": "https://github.com/rust-lang/rust/commit/6fcd38cc81bdcc9921da767872dfce65ee7d2d27"}], "stats": {"total": 268, "additions": 256, "deletions": 12}, "files": [{"sha": "5dbf9b221aad80fa7ba270494291128b7903fc76", "filename": "crates/ra_syntax/src/ast.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast.rs?ref=4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "patch": "@@ -363,3 +363,34 @@ impl<'a, N: AstNode<'a>> Iterator for AstChildren<'a, N> {\n         }\n     }\n }\n+\n+#[derive(Debug, Clone, PartialEq, Eq)]\n+pub enum StructFlavor<'a> {\n+    Tuple(PosFieldList<'a>),\n+    Named(NamedFieldDefList<'a>),\n+    Unit,\n+}\n+\n+impl<'a> StructFlavor<'a> {\n+    fn from_node<N: AstNode<'a>>(node: N) -> StructFlavor<'a> {\n+        if let Some(nfdl) = child_opt::<_, NamedFieldDefList>(node) {\n+            StructFlavor::Named(nfdl)\n+        } else if let Some(pfl) = child_opt::<_, PosFieldList>(node) {\n+            StructFlavor::Tuple(pfl)\n+        } else {\n+            StructFlavor::Unit\n+        }\n+    }\n+}\n+\n+impl<'a> StructDef<'a> {\n+    pub fn flavor(self) -> StructFlavor<'a> {\n+        StructFlavor::from_node(self)\n+    }\n+}\n+\n+impl<'a> EnumVariant<'a> {\n+    pub fn flavor(self) -> StructFlavor<'a> {\n+        StructFlavor::from_node(self)\n+    }\n+}"}, {"sha": "35a9770a6f9420a853b27ceff41522f12a1a84e4", "filename": "crates/ra_syntax/src/ast/generated.rs", "status": "modified", "additions": 218, "deletions": 7, "changes": 225, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated.rs?ref=4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "patch": "@@ -806,7 +806,94 @@ impl<'a> ast::NameOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for EnumDef<'a> {}\n impl<'a> ast::DocCommentsOwner<'a> for EnumDef<'a> {}\n-impl<'a> EnumDef<'a> {}\n+impl<'a> EnumDef<'a> {\n+    pub fn variant_list(self) -> Option<EnumVariantList<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// EnumVariant\n+#[derive(Debug, Clone, Copy,)]\n+pub struct EnumVariantNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type EnumVariant<'a> = EnumVariantNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<EnumVariantNode<R1>> for EnumVariantNode<R2> {\n+    fn eq(&self, other: &EnumVariantNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for EnumVariantNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for EnumVariantNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for EnumVariant<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            ENUM_VARIANT => Some(EnumVariant { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> EnumVariantNode<R> {\n+    pub fn borrowed(&self) -> EnumVariant {\n+        EnumVariantNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> EnumVariantNode {\n+        EnumVariantNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> ast::NameOwner<'a> for EnumVariant<'a> {}\n+impl<'a> EnumVariant<'a> {\n+    pub fn expr(self) -> Option<Expr<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// EnumVariantList\n+#[derive(Debug, Clone, Copy,)]\n+pub struct EnumVariantListNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type EnumVariantList<'a> = EnumVariantListNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<EnumVariantListNode<R1>> for EnumVariantListNode<R2> {\n+    fn eq(&self, other: &EnumVariantListNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for EnumVariantListNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for EnumVariantListNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for EnumVariantList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            ENUM_VARIANT_LIST => Some(EnumVariantList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> EnumVariantListNode<R> {\n+    pub fn borrowed(&self) -> EnumVariantList {\n+        EnumVariantListNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> EnumVariantListNode {\n+        EnumVariantListNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> EnumVariantList<'a> {\n+    pub fn variants(self) -> impl Iterator<Item = EnumVariant<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // Expr\n #[derive(Debug, Clone, Copy, PartialEq, Eq)]\n@@ -2189,7 +2276,52 @@ impl<R: TreeRoot<RaTypes>> NamedFieldDefNode<R> {\n \n impl<'a> ast::NameOwner<'a> for NamedFieldDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for NamedFieldDef<'a> {}\n-impl<'a> NamedFieldDef<'a> {}\n+impl<'a> NamedFieldDef<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// NamedFieldDefList\n+#[derive(Debug, Clone, Copy,)]\n+pub struct NamedFieldDefListNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type NamedFieldDefList<'a> = NamedFieldDefListNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<NamedFieldDefListNode<R1>> for NamedFieldDefListNode<R2> {\n+    fn eq(&self, other: &NamedFieldDefListNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for NamedFieldDefListNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for NamedFieldDefListNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for NamedFieldDefList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            NAMED_FIELD_DEF_LIST => Some(NamedFieldDefList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> NamedFieldDefListNode<R> {\n+    pub fn borrowed(&self) -> NamedFieldDefList {\n+        NamedFieldDefListNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> NamedFieldDefListNode {\n+        NamedFieldDefListNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> NamedFieldDefList<'a> {\n+    pub fn fields(self) -> impl Iterator<Item = NamedFieldDef<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n \n // NamedFieldList\n #[derive(Debug, Clone, Copy,)]\n@@ -2830,6 +2962,89 @@ impl<R: TreeRoot<RaTypes>> PointerTypeNode<R> {\n \n impl<'a> PointerType<'a> {}\n \n+// PosField\n+#[derive(Debug, Clone, Copy,)]\n+pub struct PosFieldNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type PosField<'a> = PosFieldNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<PosFieldNode<R1>> for PosFieldNode<R2> {\n+    fn eq(&self, other: &PosFieldNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for PosFieldNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for PosFieldNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for PosField<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            POS_FIELD => Some(PosField { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> PosFieldNode<R> {\n+    pub fn borrowed(&self) -> PosField {\n+        PosFieldNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> PosFieldNode {\n+        PosFieldNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> ast::AttrsOwner<'a> for PosField<'a> {}\n+impl<'a> PosField<'a> {\n+    pub fn type_ref(self) -> Option<TypeRef<'a>> {\n+        super::child_opt(self)\n+    }\n+}\n+\n+// PosFieldList\n+#[derive(Debug, Clone, Copy,)]\n+pub struct PosFieldListNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n+    pub(crate) syntax: SyntaxNode<R>,\n+}\n+pub type PosFieldList<'a> = PosFieldListNode<RefRoot<'a>>;\n+\n+impl<R1: TreeRoot<RaTypes>, R2: TreeRoot<RaTypes>> PartialEq<PosFieldListNode<R1>> for PosFieldListNode<R2> {\n+    fn eq(&self, other: &PosFieldListNode<R1>) -> bool { self.syntax == other.syntax }\n+}\n+impl<R: TreeRoot<RaTypes>> Eq for PosFieldListNode<R> {}\n+impl<R: TreeRoot<RaTypes>> Hash for PosFieldListNode<R> {\n+    fn hash<H: Hasher>(&self, state: &mut H) { self.syntax.hash(state) }\n+}\n+\n+impl<'a> AstNode<'a> for PosFieldList<'a> {\n+    fn cast(syntax: SyntaxNodeRef<'a>) -> Option<Self> {\n+        match syntax.kind() {\n+            POS_FIELD_LIST => Some(PosFieldList { syntax }),\n+            _ => None,\n+        }\n+    }\n+    fn syntax(self) -> SyntaxNodeRef<'a> { self.syntax }\n+}\n+\n+impl<R: TreeRoot<RaTypes>> PosFieldListNode<R> {\n+    pub fn borrowed(&self) -> PosFieldList {\n+        PosFieldListNode { syntax: self.syntax.borrowed() }\n+    }\n+    pub fn owned(&self) -> PosFieldListNode {\n+        PosFieldListNode { syntax: self.syntax.owned() }\n+    }\n+}\n+\n+\n+impl<'a> PosFieldList<'a> {\n+    pub fn fields(self) -> impl Iterator<Item = PosField<'a>> + 'a {\n+        super::children(self)\n+    }\n+}\n+\n // PrefixExpr\n #[derive(Debug, Clone, Copy,)]\n pub struct PrefixExprNode<R: TreeRoot<RaTypes> = OwnedRoot> {\n@@ -3438,11 +3653,7 @@ impl<'a> ast::NameOwner<'a> for StructDef<'a> {}\n impl<'a> ast::TypeParamsOwner<'a> for StructDef<'a> {}\n impl<'a> ast::AttrsOwner<'a> for StructDef<'a> {}\n impl<'a> ast::DocCommentsOwner<'a> for StructDef<'a> {}\n-impl<'a> StructDef<'a> {\n-    pub fn fields(self) -> impl Iterator<Item = NamedFieldDef<'a>> + 'a {\n-        super::children(self)\n-    }\n-}\n+impl<'a> StructDef<'a> {}\n \n // StructLit\n #[derive(Debug, Clone, Copy,)]"}, {"sha": "e4e41d0776e208d61fc4e87d5aeaf516f52fd70e", "filename": "crates/ra_syntax/src/grammar.ron", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "raw_url": "https://github.com/rust-lang/rust/raw/4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fgrammar.ron?ref=4cb7b0f2af9787abe1c73fc3922e9b426a96e0ef", "patch": "@@ -261,18 +261,20 @@ Grammar(\n                 \"TypeParamsOwner\",\n                 \"AttrsOwner\",\n                 \"DocCommentsOwner\"\n-            ],\n-            collections: [\n-                [\"fields\", \"NamedFieldDef\"]\n             ]\n         ),\n-        \"NamedFieldDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"] ),\n+        \"NamedFieldDefList\": (collections: [[\"fields\", \"NamedFieldDef\"]]),\n+        \"NamedFieldDef\": ( traits: [\"NameOwner\", \"AttrsOwner\"], options: [\"TypeRef\"] ),\n+        \"PosFieldList\": (collections: [[\"fields\", \"PosField\"]]),\n+        \"PosField\": ( traits: [\"AttrsOwner\"], options: [\"TypeRef\"]),\n         \"EnumDef\": ( traits: [\n             \"NameOwner\",\n             \"TypeParamsOwner\",\n             \"AttrsOwner\",\n             \"DocCommentsOwner\"\n-        ] ),\n+        ], options: [[\"variant_list\", \"EnumVariantList\"]] ),\n+        \"EnumVariantList\": ( collections: [[\"variants\", \"EnumVariant\"]] ),\n+        \"EnumVariant\": ( traits: [\"NameOwner\"], options: [\"Expr\"] ),\n         \"TraitDef\": ( traits: [\"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\"] ),\n         \"Module\": (\n             traits: [\"NameOwner\", \"AttrsOwner\", \"DocCommentsOwner\" ],"}]}