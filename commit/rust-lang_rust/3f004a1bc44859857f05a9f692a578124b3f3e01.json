{"sha": "3f004a1bc44859857f05a9f692a578124b3f3e01", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNmMDA0YTFiYzQ0ODU5ODU3ZjA1YTlmNjkyYTU3ODEyNGIzZjNlMDE=", "commit": {"author": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-09-17T12:40:36Z"}, "committer": {"name": "Georg Semmler", "email": "georg_semmler_05@web.de", "date": "2019-09-17T12:40:36Z"}, "message": "Fix re-rebalance coherence implementation for fundamental types\n\nFixes #64412", "tree": {"sha": "5acc439ceaeb6d16fc618bb3d980b92d7bac9b72", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5acc439ceaeb6d16fc618bb3d980b92d7bac9b72"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3f004a1bc44859857f05a9f692a578124b3f3e01", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQEzBAABCgAdFiEEt/EOFp+yWvA8Dk28qHvO5SBc5IkFAl2A1HAACgkQqHvO5SBc\n5IlI1Af/fRHRPnSV+NE5kbTswX7BuJ+XxL7idYbM4YlJkDZR7uT6fLnRmwq0ALZ6\nvqipw+rqA7boi9TldImydk4TPNGyL8areghMplSKu7wQt/CW61nFxIzLWDlS1twu\n1pGSGkkqKs0HeYeOSUP/kCdCEMJ82QltfIIPf1AWbOpIu3AASdu6gqB/7eY9VwBN\n7MNcXv9GVmjfStQvZvxO6l1uNVi/ExvTQt373ta+Fv1iE/oXyZvoTkebrU0C2AXw\nbeIALjKJuUzaUKTQCYA4dxprj/FJ2IUDadjQgrQHBXCDo5Xd3s+hR+uJO66J2bwB\nNriWblkMNyOZ7x0GSiVzRZxisUQ2Cg==\n=xyF1\n-----END PGP SIGNATURE-----", "payload": "tree 5acc439ceaeb6d16fc618bb3d980b92d7bac9b72\nparent e69d1b67b6603e0635c553eff693a0606d282d75\nauthor Georg Semmler <georg_semmler_05@web.de> 1568724036 +0200\ncommitter Georg Semmler <georg_semmler_05@web.de> 1568724036 +0200\n\nFix re-rebalance coherence implementation for fundamental types\n\nFixes #64412\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3f004a1bc44859857f05a9f692a578124b3f3e01", "html_url": "https://github.com/rust-lang/rust/commit/3f004a1bc44859857f05a9f692a578124b3f3e01", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3f004a1bc44859857f05a9f692a578124b3f3e01/comments", "author": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "committer": {"login": "weiznich", "id": 1674512, "node_id": "MDQ6VXNlcjE2NzQ1MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/1674512?v=4", "gravatar_id": "", "url": "https://api.github.com/users/weiznich", "html_url": "https://github.com/weiznich", "followers_url": "https://api.github.com/users/weiznich/followers", "following_url": "https://api.github.com/users/weiznich/following{/other_user}", "gists_url": "https://api.github.com/users/weiznich/gists{/gist_id}", "starred_url": "https://api.github.com/users/weiznich/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/weiznich/subscriptions", "organizations_url": "https://api.github.com/users/weiznich/orgs", "repos_url": "https://api.github.com/users/weiznich/repos", "events_url": "https://api.github.com/users/weiznich/events{/privacy}", "received_events_url": "https://api.github.com/users/weiznich/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e69d1b67b6603e0635c553eff693a0606d282d75", "url": "https://api.github.com/repos/rust-lang/rust/commits/e69d1b67b6603e0635c553eff693a0606d282d75", "html_url": "https://github.com/rust-lang/rust/commit/e69d1b67b6603e0635c553eff693a0606d282d75"}], "stats": {"total": 34, "additions": 30, "deletions": 4}, "files": [{"sha": "bc6bcb1f76f96128b14450ff2eb081fd909ba7a1", "filename": "src/librustc/traits/coherence.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Flibrustc%2Ftraits%2Fcoherence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fcoherence.rs?ref=3f004a1bc44859857f05a9f692a578124b3f3e01", "patch": "@@ -378,7 +378,15 @@ fn orphan_check_trait_ref<'tcx>(\n         //      Let Ti be the first such type.\n         //     - No uncovered type parameters P1..=Pn may appear in T0..Ti (excluding Ti)\n         //\n-        for input_ty in trait_ref.input_types() {\n+        fn uncover_fundamental_ty(ty: Ty<'_>) -> Vec<Ty<'_>> {\n+            if fundamental_ty(ty) {\n+                ty.walk_shallow().flat_map(|ty| uncover_fundamental_ty(ty)).collect()\n+            } else {\n+                vec![ty]\n+            }\n+        }\n+\n+        for input_ty in trait_ref.input_types().flat_map(uncover_fundamental_ty) {\n             debug!(\"orphan_check_trait_ref: check ty `{:?}`\", input_ty);\n             if ty_is_local(tcx, input_ty, in_crate) {\n                 debug!(\"orphan_check_trait_ref: ty_is_local `{:?}`\", input_ty);"}, {"sha": "54425b6d708aa33a7db33ef4c50c0a9e8f4bfe53", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.rs?ref=3f004a1bc44859857f05a9f692a578124b3f3e01", "patch": "@@ -2,7 +2,6 @@\n \n // compile-flags:--crate-name=test\n // aux-build:coherence_lib.rs\n-// check-pass\n \n extern crate coherence_lib as lib;\n use lib::*;\n@@ -11,11 +10,11 @@ use std::rc::Rc;\n struct Local;\n \n impl<T> Remote1<Local> for Box<T> {\n-    // FIXME(#64412) -- this is expected to error\n+    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n }\n \n impl<T> Remote1<Local> for &T {\n-    // FIXME(#64412) -- this is expected to error\n+    //~^ ERROR type parameter `T` must be used as the type parameter for some local type\n }\n \n fn main() {}"}, {"sha": "7859665a7bb580dd65f2656087cbabbc7f7d219d", "filename": "src/test/ui/coherence/impl[t]-foreign[local]-for-fundamental[t].stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3f004a1bc44859857f05a9f692a578124b3f3e01/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcoherence%2Fimpl%5Bt%5D-foreign%5Blocal%5D-for-fundamental%5Bt%5D.stderr?ref=3f004a1bc44859857f05a9f692a578124b3f3e01", "patch": "@@ -0,0 +1,19 @@\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:12:1\n+   |\n+LL | impl<T> Remote1<Local> for Box<T> {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error[E0210]: type parameter `T` must be used as the type parameter for some local type (e.g., `MyStruct<T>`)\n+  --> $DIR/impl[t]-foreign[local]-for-fundamental[t].rs:16:1\n+   |\n+LL | impl<T> Remote1<Local> for &T {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ type parameter `T` must be used as the type parameter for some local type\n+   |\n+   = note: only traits defined in the current crate can be implemented for a type parameter\n+\n+error: aborting due to 2 previous errors\n+\n+For more information about this error, try `rustc --explain E0210`."}]}