{"sha": "9a3b0a05888f7ad002b67bbe61739695967ce929", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlhM2IwYTA1ODg4ZjdhZDAwMmI2N2JiZTYxNzM5Njk1OTY3Y2U5Mjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T18:30:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-04-28T18:30:01Z"}, "message": "Auto merge of #5543 - matthiaskrgr:rustup_45, r=flip1995\n\nrustup https://github.com/rust-lang/rust/pull/71292/\n\ncc https://github.com/rust-lang/rust/issues/71608\n\n---\n\nchangelog: none", "tree": {"sha": "68e46491ef72369726d9d206bb86265b40f4ee24", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/68e46491ef72369726d9d206bb86265b40f4ee24"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9a3b0a05888f7ad002b67bbe61739695967ce929", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9a3b0a05888f7ad002b67bbe61739695967ce929", "html_url": "https://github.com/rust-lang/rust/commit/9a3b0a05888f7ad002b67bbe61739695967ce929", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9a3b0a05888f7ad002b67bbe61739695967ce929/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c4d5661137933dfe93c03b0f9e514d97bafdada", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c4d5661137933dfe93c03b0f9e514d97bafdada", "html_url": "https://github.com/rust-lang/rust/commit/2c4d5661137933dfe93c03b0f9e514d97bafdada"}, {"sha": "bdc9528e7ca3ab774a6d030c15c7f4062dd961d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdc9528e7ca3ab774a6d030c15c7f4062dd961d3", "html_url": "https://github.com/rust-lang/rust/commit/bdc9528e7ca3ab774a6d030c15c7f4062dd961d3"}], "stats": {"total": 26, "additions": 16, "deletions": 10}, "files": [{"sha": "1ec60a0e6e67ac9e00c42e4920d438fafd25ad8c", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -77,7 +77,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BoxedLocal {\n \n         let fn_def_id = cx.tcx.hir().local_def_id(hir_id);\n         cx.tcx.infer_ctxt().enter(|infcx| {\n-            ExprUseVisitor::new(&mut v, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables).consume_body(body);\n+            ExprUseVisitor::new(&mut v, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n         });\n \n         for node in v.set {"}, {"sha": "c24a24733d7f3bfacd908e5a175eaac03a9cdda5", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -489,7 +489,12 @@ fn is_mutable_pat(cx: &LateContext<'_, '_>, pat: &hir::Pat<'_>, tys: &mut FxHash\n     }\n     let def_id = pat.hir_id.owner.to_def_id();\n     if cx.tcx.has_typeck_tables(def_id) {\n-        is_mutable_ty(cx, &cx.tcx.typeck_tables_of(def_id).pat_ty(pat), pat.span, tys)\n+        is_mutable_ty(\n+            cx,\n+            &cx.tcx.typeck_tables_of(def_id.expect_local()).pat_ty(pat),\n+            pat.span,\n+            tys,\n+        )\n     } else {\n         false\n     }\n@@ -606,7 +611,7 @@ impl<'a, 'tcx> intravisit::Visitor<'tcx> for StaticMutVisitor<'a, 'tcx> {\n                     if self.cx.tcx.has_typeck_tables(def_id)\n                         && is_mutable_ty(\n                             self.cx,\n-                            self.cx.tcx.typeck_tables_of(def_id).expr_ty(arg),\n+                            self.cx.tcx.typeck_tables_of(def_id.expect_local()).expr_ty(arg),\n                             arg.span,\n                             &mut tys,\n                         )"}, {"sha": "f7c7fd82d833b6c71a93c7b3b97fc854d93f9af7", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -1695,7 +1695,7 @@ fn check_for_mutation(\n     };\n     let def_id = body.hir_id.owner.to_def_id();\n     cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(&mut delegate, &infcx, def_id, cx.param_env, cx.tables).walk_expr(body);\n+        ExprUseVisitor::new(&mut delegate, &infcx, def_id.expect_local(), cx.param_env, cx.tables).walk_expr(body);\n     });\n     delegate.mutation_span()\n }"}, {"sha": "a21818701dacc2fd059bb7387a3dc3f572adc4ea", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -135,8 +135,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n         } = {\n             let mut ctx = MovedVariablesCtxt::default();\n             cx.tcx.infer_ctxt().enter(|infcx| {\n-                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id.to_def_id(), cx.param_env, cx.tables)\n-                    .consume_body(body);\n+                euv::ExprUseVisitor::new(&mut ctx, &infcx, fn_def_id, cx.param_env, cx.tables).consume_body(body);\n             });\n             ctx\n         };"}, {"sha": "04b4b42376193c7dd31c1ce552db5bf49888a89e", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -293,7 +293,9 @@ pub fn qpath_res(cx: &LateContext<'_, '_>, qpath: &hir::QPath<'_>, id: hir::HirI\n         hir::QPath::Resolved(_, path) => path.res,\n         hir::QPath::TypeRelative(..) => {\n             if cx.tcx.has_typeck_tables(id.owner.to_def_id()) {\n-                cx.tcx.typeck_tables_of(id.owner.to_def_id()).qpath_res(qpath, id)\n+                cx.tcx\n+                    .typeck_tables_of(id.owner.to_def_id().expect_local())\n+                    .qpath_res(qpath, id)\n             } else {\n                 Res::Err\n             }\n@@ -436,7 +438,7 @@ pub fn method_chain_args<'a>(expr: &'a Expr<'_>, methods: &[&str]) -> Option<Vec\n pub fn is_entrypoint_fn(cx: &LateContext<'_, '_>, def_id: DefId) -> bool {\n     cx.tcx\n         .entry_fn(LOCAL_CRATE)\n-        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id)\n+        .map_or(false, |(entry_fn_def_id, _)| def_id == entry_fn_def_id.to_def_id())\n }\n \n /// Gets the name of the item the expression is in, if available."}, {"sha": "c14da6aacea047de74149e8d09921aa20ca1e33f", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -19,7 +19,7 @@ pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a,\n     };\n     let def_id = expr.hir_id.owner.to_def_id();\n     cx.tcx.infer_ctxt().enter(|infcx| {\n-        ExprUseVisitor::new(&mut delegate, &infcx, def_id, cx.param_env, cx.tables).walk_expr(expr);\n+        ExprUseVisitor::new(&mut delegate, &infcx, def_id.expect_local(), cx.param_env, cx.tables).walk_expr(expr);\n     });\n \n     if delegate.skip {"}, {"sha": "f3038861cee2431c41795dd5db020f0fcedc16fd", "filename": "clippy_lints/src/wildcard_imports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9a3b0a05888f7ad002b67bbe61739695967ce929/clippy_lints%2Fsrc%2Fwildcard_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwildcard_imports.rs?ref=9a3b0a05888f7ad002b67bbe61739695967ce929", "patch": "@@ -85,7 +85,7 @@ impl LateLintPass<'_, '_> for WildcardImports {\n             if let ItemKind::Use(use_path, UseKind::Glob) = &item.kind;\n             // don't lint prelude glob imports\n             if !use_path.segments.iter().last().map_or(false, |ps| ps.ident.as_str() == \"prelude\");\n-            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner.to_def_id());\n+            let used_imports = cx.tcx.names_imported_by_glob_use(item.hir_id.owner);\n             if !used_imports.is_empty(); // Already handled by `unused_imports`\n             then {\n                 let mut applicability = Applicability::MachineApplicable;"}]}