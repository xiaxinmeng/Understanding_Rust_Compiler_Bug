{"sha": "0034e6199e1ff234715aea73cdd31c9f149f334e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAwMzRlNjE5OWUxZmYyMzQ3MTVhZWE3M2NkZDMxYzlmMTQ5ZjMzNGU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-14T23:50:44Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-23T13:47:19Z"}, "message": "bindings_after_at: harden tests wrt. promotion", "tree": {"sha": "ccad1131e40828f94fcd366c924878e4ac611730", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ccad1131e40828f94fcd366c924878e4ac611730"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0034e6199e1ff234715aea73cdd31c9f149f334e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0034e6199e1ff234715aea73cdd31c9f149f334e", "html_url": "https://github.com/rust-lang/rust/commit/0034e6199e1ff234715aea73cdd31c9f149f334e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0034e6199e1ff234715aea73cdd31c9f149f334e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9ab36037a45814b642d7e9641d2f95788ce37d6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/9ab36037a45814b642d7e9641d2f95788ce37d6b", "html_url": "https://github.com/rust-lang/rust/commit/9ab36037a45814b642d7e9641d2f95788ce37d6b"}], "stats": {"total": 328, "additions": 235, "deletions": 93}, "files": [{"sha": "ba1c8e132f25d180ea71ef0fa532145ca795aa14", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -6,6 +6,9 @@\n fn main() {\n     struct U; // Not copy!\n \n+    // Prevent promotion:\n+    fn u() -> U { U }\n+\n     let a @ b = U;\n     //~^ ERROR cannot bind by-move with sub-bindings\n     //~| ERROR use of moved value\n@@ -14,6 +17,10 @@ fn main() {\n     //~^ ERROR cannot bind by-move with sub-bindings\n     //~| ERROR use of moved value\n \n+    let a @ (b, c) = (u(), u());\n+    //~^ ERROR cannot bind by-move with sub-bindings\n+    //~| ERROR use of moved value\n+\n     match Ok(U) {\n         a @ Ok(b) | a @ Err(b) => {}\n         //~^ ERROR cannot bind by-move with sub-bindings"}, {"sha": "f08692264e231c1e64aa6843d4c7e23f43746475", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 24, "deletions": 9, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -7,31 +7,37 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:9:9\n+  --> $DIR/borrowck-move-and-move.rs:12:9\n    |\n LL |     let a @ b = U;\n    |         ^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:13:9\n+  --> $DIR/borrowck-move-and-move.rs:16:9\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:18:9\n+  --> $DIR/borrowck-move-and-move.rs:20:9\n+   |\n+LL |     let a @ (b, c) = (u(), u());\n+   |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n+\n+error[E0007]: cannot bind by-move with sub-bindings\n+  --> $DIR/borrowck-move-and-move.rs:25:9\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-move-and-move.rs:18:21\n+  --> $DIR/borrowck-move-and-move.rs:25:21\n    |\n LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:9:13\n+  --> $DIR/borrowck-move-and-move.rs:12:13\n    |\n LL |     let a @ b = U;\n    |         ----^   - move occurs because value has type `main::U`, which does not implement the `Copy` trait\n@@ -40,7 +46,7 @@ LL |     let a @ b = U;\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:13:17\n+  --> $DIR/borrowck-move-and-move.rs:16:17\n    |\n LL |     let a @ (b, c) = (U, U);\n    |         --------^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -49,7 +55,16 @@ LL |     let a @ (b, c) = (U, U);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:18:16\n+  --> $DIR/borrowck-move-and-move.rs:20:17\n+   |\n+LL |     let a @ (b, c) = (u(), u());\n+   |         --------^-   ---------- move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n+   |         |       |\n+   |         |       value used here after move\n+   |         value moved here\n+\n+error[E0382]: use of moved value\n+  --> $DIR/borrowck-move-and-move.rs:25:16\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -60,7 +75,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-move-and-move.rs:18:29\n+  --> $DIR/borrowck-move-and-move.rs:25:29\n    |\n LL |     match Ok(U) {\n    |           ----- move occurs because value has type `std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n@@ -70,7 +85,7 @@ LL |         a @ Ok(b) | a @ Err(b) => {}\n    |                     |       value used here after move\n    |                     value moved here\n \n-error: aborting due to 8 previous errors\n+error: aborting due to 10 previous errors\n \n Some errors have detailed explanations: E0007, E0382.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "cf765f579e0023ffa4e182f50775cab060b53d95", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -7,6 +7,8 @@\n #[derive(Copy, Clone)]\n struct C;\n \n+fn c() -> C { C }\n+\n fn main() {\n     let a @ box &b = Box::new(&C);\n     //~^ ERROR cannot bind by-move with sub-bindings\n@@ -21,14 +23,23 @@ fn main() {\n     drop(b);\n     drop(a);\n \n+    let ref a @ box b = Box::new(c()); // OK; the type is `Copy`.\n+    drop(b);\n+    drop(b);\n+    drop(a);\n+\n     struct NC;\n \n+    fn nc() -> NC { NC }\n+\n     let ref a @ box b = Box::new(NC); //~ ERROR cannot bind by-move and by-ref in the same pattern\n \n     let ref a @ box ref b = Box::new(NC); // OK.\n     drop(a);\n     drop(b);\n \n+    let ref a @ box ref mut b = Box::new(nc());\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref a @ box ref mut b = Box::new(NC);"}, {"sha": "19cd0b7c1d39a555205a4ccad10ad7965124b400", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-at-and-box.stderr", "status": "modified", "additions": 21, "deletions": 12, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-at-and-box.stderr?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -7,19 +7,19 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:11:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:13:9\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-at-and-box.rs:15:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:9\n    |\n LL |     let a @ box b = Box::new(C);\n    |         ^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0009]: cannot bind by-move and by-ref in the same pattern\n-  --> $DIR/borrowck-pat-at-and-box.rs:26:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:35:21\n    |\n LL |     let ref a @ box b = Box::new(NC);\n    |         ------------^\n@@ -28,7 +28,16 @@ LL |     let ref a @ box b = Box::new(NC);\n    |         by-ref pattern here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:32:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:41:9\n+   |\n+LL |     let ref a @ box ref mut b = Box::new(nc());\n+   |         -----^^^^^^^---------\n+   |         |           |\n+   |         |           mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -37,7 +46,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:34:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:45:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -46,7 +55,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:9\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         -----^^^^^^^---------\n@@ -55,7 +64,7 @@ LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:9\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:9\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ---------^^^^^^^-----\n@@ -64,7 +73,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         mutable borrow occurs here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:11:18\n+  --> $DIR/borrowck-pat-at-and-box.rs:13:18\n    |\n LL |     let a @ box &b = Box::new(&C);\n    |         ---------^   ------------ move occurs because value has type `std::boxed::Box<&C>`, which does not implement the `Copy` trait\n@@ -73,7 +82,7 @@ LL |     let a @ box &b = Box::new(&C);\n    |         value moved here\n \n error[E0382]: use of moved value\n-  --> $DIR/borrowck-pat-at-and-box.rs:15:17\n+  --> $DIR/borrowck-pat-at-and-box.rs:17:17\n    |\n LL |     let a @ box b = Box::new(C);\n    |         --------^   ----------- move occurs because value has type `std::boxed::Box<C>`, which does not implement the `Copy` trait\n@@ -82,7 +91,7 @@ LL |     let a @ box b = Box::new(C);\n    |         value moved here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:37:21\n+  --> $DIR/borrowck-pat-at-and-box.rs:48:21\n    |\n LL |     let ref a @ box ref mut b = Box::new(NC);\n    |         ------------^^^^^^^^^\n@@ -94,7 +103,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-at-and-box.rs:43:25\n+  --> $DIR/borrowck-pat-at-and-box.rs:54:25\n    |\n LL |     let ref mut a @ box ref b = Box::new(NC);\n    |         ----------------^^^^^\n@@ -105,7 +114,7 @@ LL |     let ref mut a @ box ref b = Box::new(NC);\n LL |     *a = Box::new(NC);\n    |     -- mutable borrow later used here\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n Some errors have detailed explanations: E0007, E0009, E0382, E0502.\n For more information about an error, try `rustc --explain E0007`."}, {"sha": "4cdbfd636f352c4f4f792de322622c762a723df4", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-copy-bindings-in-at.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-copy-bindings-in-at.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -9,19 +9,21 @@\n #[derive(Copy, Clone)]\n struct C;\n \n+fn mk_c() -> C { C }\n+\n #[derive(Copy, Clone)]\n struct P<A, B>(A, B);\n \n enum E<A, B> { L(A), R(B) }\n \n fn main() {\n     let a @ b @ c @ d = C;\n-    let a @ (b, c) = (C, C);\n-    let a @ P(b, P(c, d)) = P(C, P(C, C));\n+    let a @ (b, c) = (C, mk_c());\n+    let a @ P(b, P(c, d)) = P(mk_c(), P(C, C));\n     let a @ [b, c] = [C, C];\n-    let a @ [b, .., c] = [C, C, C];\n+    let a @ [b, .., c] = [C, mk_c(), C];\n     let a @ &(b, c) = &(C, C);\n-    let a @ &(b, &P(c, d)) = &(C, &P(C, C));\n+    let a @ &(b, &P(c, d)) = &(mk_c(), &P(C, C));\n \n     use self::E::*;\n     match L(C) {\n@@ -31,7 +33,7 @@ fn main() {\n             drop(a);\n         }\n     }\n-    match R(&L(&C)) {\n+    match R(&L(&mk_c())) {\n         L(L(&a)) | L(R(&a)) | R(L(&a)) | R(R(&a)) => {\n             let a: C = a;\n             drop(a);"}, {"sha": "5852e30722909c0a1e1901ba175d8ec3420acc66", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -4,7 +4,7 @@\n fn main() {\n     match Some(\"hi\".to_string()) {\n         ref op_string_ref @ Some(s) => {},\n-        //~^ ERROR E0009\n+        //~^ ERROR cannot bind by-move and by-ref in the same pattern [E0009]\n         None => {},\n     }\n }"}, {"sha": "3c501ad8f8a5007ca915217b357545322a8ec998", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-both-sides.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-both-sides.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -9,27 +9,35 @@\n fn main() {\n     struct U; // Not copy!\n \n+    // Promotion:\n     let ref a @ ref b = U;\n     let _: &U = a;\n     let _: &U = b;\n \n-    let ref a @ (ref b, [ref c, ref d]) = (U, [U, U]);\n+    // Prevent promotion:\n+    fn u() -> U { U }\n+\n+    let ref a @ ref b = u();\n+    let _: &U = a;\n+    let _: &U = b;\n+\n+    let ref a @ (ref b, [ref c, ref d]) = (u(), [u(), u()]);\n     let _: &(U, [U; 2]) = a;\n     let _: &U = b;\n     let _: &U = c;\n     let _: &U = d;\n \n-    let a @ (b, [c, d]) = &(U, [U, U]);\n+    let a @ (b, [c, d]) = &(u(), [u(), u()]);\n     let _: &(U, [U; 2]) = a;\n     let _: &U = b;\n     let _: &U = c;\n     let _: &U = d;\n \n-    let ref a @ &ref b = &U;\n+    let ref a @ &ref b = &u();\n     let _: &&U = a;\n     let _: &U = b;\n \n-    match Ok(U) {\n+    match Ok(u()) {\n         ref a @ Ok(ref b) | ref a @ Err(ref b) => {\n             let _: &Result<U, U> = a;\n             let _: &U = b;"}, {"sha": "54b4e1cae85c91e8e6d7a311a841aff1c54e4681", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -19,6 +19,9 @@ fn main() {\n \n     struct U;\n \n+    // Prevent promotion:\n+    fn u() -> U { U }\n+\n     let ref a @ ref mut b = U;\n     //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n     let ref mut a @ ref b = U;\n@@ -28,6 +31,17 @@ fn main() {\n     let ref mut a @ (ref b, ref c) = (U, U);\n     //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n \n+    let ref mut a @ ref b = u();\n+    //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n+    //~| ERROR cannot borrow `_` as immutable because it is also borrowed as mutable\n+    *a = u();\n+    drop(b);\n+    let ref a @ ref mut b = u();\n+    //~^ ERROR cannot borrow `a` as mutable because it is also borrowed as immutable\n+    //~| ERROR cannot borrow `_` as mutable because it is also borrowed as immutable\n+    *b = u();\n+    drop(a);\n+\n     let ref mut a @ ref b = U;\n     //~^ ERROR cannot borrow `a` as immutable because it is also borrowed as mutable\n     *a = U;"}, {"sha": "04944c1d528d0c3bfed7ab52bc757790f224fa13", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-and-ref.stderr", "status": "modified", "additions": 75, "deletions": 33, "changes": 108, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-and-ref.stderr?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -16,7 +16,7 @@ LL |         ref mut z @ &mut Some(ref a) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:22:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:25:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -25,7 +25,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:24:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:27:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -34,7 +34,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:26:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:29:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -44,7 +44,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:28:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -54,7 +54,25 @@ LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:31:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:9\n+   |\n+LL |     let ref mut a @ ref b = u();\n+   |         ---------^^^-----\n+   |         |           |\n+   |         |           immutable borrow occurs here\n+   |         mutable borrow occurs here\n+\n+error: cannot borrow `a` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:9\n+   |\n+LL |     let ref a @ ref mut b = u();\n+   |         -----^^^---------\n+   |         |       |\n+   |         |       mutable borrow occurs here\n+   |         immutable borrow occurs here\n+\n+error: cannot borrow `a` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:45:9\n    |\n LL |     let ref mut a @ ref b = U;\n    |         ---------^^^-----\n@@ -63,7 +81,7 @@ LL |     let ref mut a @ ref b = U;\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:35:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:49:9\n    |\n LL |     let ref a @ ref mut b = U;\n    |         -----^^^---------\n@@ -72,7 +90,7 @@ LL |     let ref a @ ref mut b = U;\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         ---------^^^^^^-----^\n@@ -81,7 +99,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:41:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:55:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 ---------^^^^^^^-----^\n@@ -90,7 +108,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) => {\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----^^^^^^---------^\n@@ -99,7 +117,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 -----^^^^^^^---------^\n@@ -108,7 +126,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |         -----^^^^^^---------^\n@@ -117,7 +135,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -126,7 +144,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false }\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |         ---------^^^^^^-----^\n@@ -135,7 +153,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -144,7 +162,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); fa\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |         -----^^^^^^---------^\n@@ -153,7 +171,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:33\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                 -----^^^^^^^---------^\n@@ -162,7 +180,7 @@ LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false\n    |                                 immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:9\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |         ---------^^^^^^-----^\n@@ -171,7 +189,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |         mutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:33\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:33\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                 ---------^^^^^^^-----^\n@@ -180,7 +198,7 @@ LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false\n    |                                 mutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:103:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -190,7 +208,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -200,7 +218,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:9\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         -----^^^^---------^^---------^\n@@ -210,7 +228,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         immutable borrow occurs here\n \n error: cannot borrow `a` as immutable because it is also borrowed as mutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:106:9\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:120:9\n    |\n LL |     let ref mut a @ (ref b, ref c) = (U, U);\n    |         ---------^^^^-----^^-----^\n@@ -231,8 +249,32 @@ LL |         ref mut z @ &mut Some(ref a) => {\n LL |             **z = None;\n    |             ---------- mutable borrow later used here\n \n+error[E0502]: cannot borrow `_` as immutable because it is also borrowed as mutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:34:21\n+   |\n+LL |     let ref mut a @ ref b = u();\n+   |         ------------^^^^^\n+   |         |           |\n+   |         |           immutable borrow occurs here\n+   |         mutable borrow occurs here\n+...\n+LL |     *a = u();\n+   |     -------- mutable borrow later used here\n+\n+error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:39:17\n+   |\n+LL |     let ref a @ ref mut b = u();\n+   |         --------^^^^^^^^^\n+   |         |       |\n+   |         |       mutable borrow occurs here\n+   |         immutable borrow occurs here\n+...\n+LL |     drop(a);\n+   |          - immutable borrow later used here\n+\n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:20\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:20\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |         -----------^^^^^^^^^-\n@@ -244,7 +286,7 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:50:45\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:64:45\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) => {\n    |                                 ------------^^^^^^^^^-\n@@ -256,39 +298,39 @@ LL |             drop(a);\n    |                  - immutable borrow later used here\n \n error[E0594]: cannot assign to `*b`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:61:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:61\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { *b = U; false } => {}\n    |                                                             ^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0594]: cannot assign to `*a`, as it is immutable for the pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:68:61\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:61\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { *a = Err(U); false } => {}\n    |                                                             ^^^^^^^^^^^ cannot assign\n    |\n    = note: variables bound in patterns are immutable until the end of the pattern guard\n \n error[E0507]: cannot move out of `b` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:75:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:89:66\n    |\n LL |         ref a @ Ok(ref mut b) | ref a @ Err(ref mut b) if { drop(b); false } => {}\n    |                                                                  ^ move occurs because `b` has type `&mut main::U`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0507]: cannot move out of `a` in pattern guard\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:82:66\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:96:66\n    |\n LL |         ref mut a @ Ok(ref b) | ref mut a @ Err(ref b) if { drop(a); false } => {}\n    |                                                                  ^ move occurs because `a` has type `&mut std::result::Result<main::U, main::U>`, which does not implement the `Copy` trait\n    |\n    = note: variables bound in patterns cannot be moved from until after the end of the pattern guard\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -300,7 +342,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:94:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:108:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -312,7 +354,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:18\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:18\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         ---------^^^^^^^^^------------\n@@ -324,7 +366,7 @@ LL |     drop(a);\n    |          - immutable borrow later used here\n \n error[E0502]: cannot borrow `_` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:101:29\n+  --> $DIR/borrowck-pat-ref-mut-and-ref.rs:115:29\n    |\n LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n    |         --------------------^^^^^^^^^-\n@@ -335,7 +377,7 @@ LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n LL |     drop(a);\n    |          - immutable borrow later used here\n \n-error: aborting due to 34 previous errors\n+error: aborting due to 38 previous errors\n \n Some errors have detailed explanations: E0502, E0507, E0594.\n For more information about an error, try `rustc --explain E0502`."}, {"sha": "487ac4b852b6e11052fcee7fb712575ae387db79", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.rs?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -6,6 +6,8 @@\n fn main() {\n     struct U;\n \n+    fn u() -> U { U }\n+\n     let ref mut a @ ref mut b = U;\n     //~^ ERROR cannot borrow `a` as mutable more than once at a time\n     //~| ERROR cannot borrow `_` as mutable more than once at a time\n@@ -34,6 +36,16 @@ fn main() {\n         ]\n     ) = (U, [U, U, U]);\n \n+    let ref mut a @ (\n+        //~^ ERROR cannot borrow `a` as mutable more than once at a time\n+            ref mut b,\n+            [\n+                ref mut c,\n+                ref mut d,\n+                ref e,\n+            ]\n+        ) = (u(), [u(), u(), u()]);\n+\n     let a @ (ref mut b, ref mut c) = (U, U);\n     //~^ ERROR cannot bind by-move with sub-bindings\n     //~| ERROR borrow of moved value"}, {"sha": "011e18be8b2946e26c3ed4f7330e67d0fa070f98", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 51, "deletions": 29, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0034e6199e1ff234715aea73cdd31c9f149f334e/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=0034e6199e1ff234715aea73cdd31c9f149f334e", "patch": "@@ -7,7 +7,7 @@ LL | #![feature(bindings_after_at)]\n    = note: `#[warn(incomplete_features)]` on by default\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:9:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -16,7 +16,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:13:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:15:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -25,7 +25,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:16:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:18:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -34,7 +34,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:19:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -43,7 +43,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:23:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:25:9\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ---------^^^---------\n@@ -52,7 +52,7 @@ LL |     let ref mut a @ ref mut b = U;\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:27:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:29:9\n    |\n LL |       let ref mut a @ (\n    |           ^--------\n@@ -73,32 +73,54 @@ LL | |         ]\n LL | |     ) = (U, [U, U, U]);\n    | |_____^\n \n+error: cannot borrow `a` as mutable more than once at a time\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:39:9\n+   |\n+LL |       let ref mut a @ (\n+   |           ^--------\n+   |           |\n+   |  _________first mutable borrow occurs here\n+   | |\n+LL | |\n+LL | |             ref mut b,\n+   | |             --------- another mutable borrow occurs here\n+LL | |             [\n+LL | |                 ref mut c,\n+   | |                 --------- another mutable borrow occurs here\n+LL | |                 ref mut d,\n+   | |                 --------- another mutable borrow occurs here\n+LL | |                 ref e,\n+   | |                 ----- also borrowed as immutable here\n+LL | |             ]\n+LL | |         ) = (u(), [u(), u(), u()]);\n+   | |_________^\n+\n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:49:9\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:57:9\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error[E0007]: cannot bind by-move with sub-bindings\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:48:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:60:9\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ binds an already bound by-move value by moving it\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -107,7 +129,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:65:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -116,7 +138,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:59:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -125,7 +147,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:59:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:71:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -134,7 +156,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -143,7 +165,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -152,7 +174,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:9\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:9\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------^^^^^^---------^\n@@ -161,7 +183,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         first mutable borrow occurs here\n \n error: cannot borrow `a` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:37\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:37\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ---------^^^^^^^---------^\n@@ -170,7 +192,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     first mutable borrow occurs here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:9:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:11:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -182,7 +204,7 @@ LL |     drop(a);\n    |          - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:19:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:21:21\n    |\n LL |     let ref mut a @ ref mut b = U;\n    |         ------------^^^^^^^^^\n@@ -194,7 +216,7 @@ LL |     *a = U;\n    |     ------ first borrow later used here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:37:25\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:49:25\n    |\n LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         ----------------^^^^^^^^^-   ------ move occurs because value has type `(main::U, main::U)`, which does not implement the `Copy` trait\n@@ -203,7 +225,7 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:41:21\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:53:21\n    |\n LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         ------------^--   -------- move occurs because value has type `&mut (main::U, [main::U; 2])`, which does not implement the `Copy` trait\n@@ -212,7 +234,7 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:45:18\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:57:18\n    |\n LL |     let a @ &mut ref mut b = &mut U;\n    |         ---------^^^^^^^^^   ------ move occurs because value has type `&mut main::U`, which does not implement the `Copy` trait\n@@ -221,7 +243,7 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         value moved here\n \n error[E0382]: borrow of moved value\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:48:30\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:60:30\n    |\n LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         ---------------------^^^^^^^^^-   ----------- move occurs because value has type `&mut (main::U, main::U)`, which does not implement the `Copy` trait\n@@ -230,7 +252,7 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         value moved here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -242,7 +264,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:66:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -254,7 +276,7 @@ LL |             *a = Err(U);\n    |             ----------- first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:24\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:24\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |         ---------------^^^^^^^^^-\n@@ -266,7 +288,7 @@ LL |             drop(a);\n    |                  - first borrow later used here\n \n error[E0499]: cannot borrow `_` as mutable more than once at a time\n-  --> $DIR/borrowck-pat-ref-mut-twice.rs:78:53\n+  --> $DIR/borrowck-pat-ref-mut-twice.rs:90:53\n    |\n LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n    |                                     ----------------^^^^^^^^^-\n@@ -277,7 +299,7 @@ LL |         ref mut a @ Ok(ref mut b) | ref mut a @ Err(ref mut b) => {\n LL |             drop(a);\n    |                  - first borrow later used here\n \n-error: aborting due to 28 previous errors\n+error: aborting due to 29 previous errors\n \n Some errors have detailed explanations: E0007, E0382, E0499.\n For more information about an error, try `rustc --explain E0007`."}]}