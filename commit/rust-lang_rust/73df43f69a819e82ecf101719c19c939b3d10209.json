{"sha": "73df43f69a819e82ecf101719c19c939b3d10209", "node_id": "C_kwDOAAsO6NoAKDczZGY0M2Y2OWE4MTllODJlY2YxMDE3MTljMTljOTM5YjNkMTAyMDk", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-04T13:19:00Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2022-05-04T13:29:25Z"}, "message": "Implement old to new config patching", "tree": {"sha": "427a0729ee5bbbb01ac7264eb390c753d86923f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/427a0729ee5bbbb01ac7264eb390c753d86923f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73df43f69a819e82ecf101719c19c939b3d10209", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73df43f69a819e82ecf101719c19c939b3d10209", "html_url": "https://github.com/rust-lang/rust/commit/73df43f69a819e82ecf101719c19c939b3d10209", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73df43f69a819e82ecf101719c19c939b3d10209/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "url": "https://api.github.com/repos/rust-lang/rust/commits/291f94e22e4ef3a9c61dbd40728c9f8cef34f886", "html_url": "https://github.com/rust-lang/rust/commit/291f94e22e4ef3a9c61dbd40728c9f8cef34f886"}], "stats": {"total": 118, "additions": 118, "deletions": 0}, "files": [{"sha": "4d7db826c54490d437c20b456baafa2e9bd3d600", "filename": "crates/rust-analyzer/src/config.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/73df43f69a819e82ecf101719c19c939b3d10209/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73df43f69a819e82ecf101719c19c939b3d10209/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig.rs?ref=73df43f69a819e82ecf101719c19c939b3d10209", "patch": "@@ -35,6 +35,8 @@ use crate::{\n     lsp_ext::{self, supports_utf8, WorkspaceSymbolSearchKind, WorkspaceSymbolSearchScope},\n };\n \n+mod patch_old_style;\n+\n // Conventions for configuration keys to preserve maximal extendability without breakage:\n //  - Toggles (be it binary true/false or with more options in-between) should almost always suffix as `_enable`\n //    This has the benefit of namespaces being extensible, and if the suffix doesn't fit later it can be changed without breakage.\n@@ -592,6 +594,7 @@ impl Config {\n                 .into_iter()\n                 .map(AbsPathBuf::assert)\n                 .collect();\n+        patch_old_style::patch_json_for_outdated_configs(&mut json);\n         self.data = ConfigData::from_json(json, &mut errors);\n         self.snippets.clear();\n         for (name, def) in self.data.completion_snippets_custom.iter() {"}, {"sha": "277364cefa0cc14370b2b80ce4c3fcb5daf9049f", "filename": "crates/rust-analyzer/src/config/patch_old_style.rs", "status": "added", "additions": 115, "deletions": 0, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/73df43f69a819e82ecf101719c19c939b3d10209/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73df43f69a819e82ecf101719c19c939b3d10209/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fconfig%2Fpatch_old_style.rs?ref=73df43f69a819e82ecf101719c19c939b3d10209", "patch": "@@ -0,0 +1,115 @@\n+//! See [`patch_json_for_outdated_configs`]\n+use serde_json::{json, Value};\n+\n+/// This function patches the json config to the new expected keys.\n+/// That is we try to load old known config keys here and convert them to the new ones.\n+/// See https://github.com/rust-lang/rust-analyzer/pull/12010\n+pub(super) fn patch_json_for_outdated_configs(json: &mut Value) {\n+    let copy = json.clone();\n+\n+    macro_rules! patch {\n+        ($(\n+            $($src:ident).+ -> $($dst:ident).+ ;\n+        )+) => { $(\n+            if let Some(it) = copy.pointer(concat!($(\"/\", stringify!($src)),+)).cloned() {\n+                let mut last = it;\n+                for segment in [$(stringify!($dst)),+].into_iter().rev() {\n+                    last = Value::Object(serde_json::Map::from_iter(std::iter::once((segment.to_string(), last))));\n+                }\n+\n+                merge(json, last);\n+            }\n+        )+ };\n+    }\n+\n+    patch! {\n+        assist.allowMergingIntoGlobImports -> imports.merge.glob;\n+        assist.exprFillDefault -> assist.expressionFillDefault;\n+        assist.importEnforceGranularity -> imports.granularity.enforce;\n+        assist.importGranularity -> imports.granularity.group;\n+        assist.importMergeBehavior -> imports.granularity.group;\n+        assist.importMergeBehaviour -> imports.granularity.group;\n+        assist.importGroup -> imports.group.enable;\n+        assist.importPrefix -> imports.prefix;\n+        cache.warmup -> primeCaches.enable;\n+        cargo.loadOutDirsFromCheck -> cargo.buildScripts.enable;\n+        cargo.runBuildScripts -> cargo.runBuildScripts.overrideCommand;\n+        cargo.runBuildScriptsCommand -> cargo.runBuildScripts.overrideCommand;\n+        cargo.useRustcWrapperForBuildScripts -> cargo.runBuildScripts.useRustcWrapper;\n+        completion.snippets -> completion.snippets.custom;\n+        diagnostics.enableExperimental -> diagnostics.experimental.enable;\n+        experimental.procAttrMacros -> procMacro.attributes.enable;\n+        highlighting.strings -> semanticHighlighting.strings.enable;\n+        highlightRelated.breakPoints -> semanticHighlighting.breakPoints.enable;\n+        highlightRelated.exitPoints -> semanticHighlighting.exitPoints.enable;\n+        highlightRelated.yieldPoints -> semanticHighlighting.yieldPoints.enable;\n+        highlightRelated.references -> semanticHighlighting.references.enable;\n+        hover.documentation -> hover.documentation.enable;\n+        hover.linksInHover -> hover.links.enable;\n+        hoverActions.linksInHover -> hover.links.enable;\n+        hoverActions.debug -> hoverActions.debug.enable;\n+        hoverActions.enable -> hoverActions.enable.enable;\n+        hoverActions.gotoTypeDef -> hoverActions.gotoTypeDef.enable;\n+        hoverActions.implementations -> hoverActions.implementations.enable;\n+        hoverActions.references -> hoverActions.references.enable;\n+        hoverActions.run -> hoverActions.run.enable;\n+        inlayHints.chainingHints -> inlayHints.chainingHints.enable;\n+        inlayHints.closureReturnTypeHints -> inlayHints.closureReturnTypeHints.enable;\n+        inlayHints.hideNamedConstructorHints -> inlayHints.typeHints.hideNamedConstructorHints;\n+        inlayHints.parameterHints -> inlayHints.parameterHints.enable;\n+        inlayHints.reborrowHints -> inlayHints.reborrowHints.enable;\n+        inlayHints.typeHints -> inlayHints.typeHints.enable;\n+        lruCapacity -> lru.capacity;\n+        runnables.cargoExtraArgs -> runnables.extraArgs ;\n+        runnables.overrideCargo -> runnables.command ;\n+        rustcSource -> rustc.source;\n+        rustfmt.enableRangeFormatting -> rustfmt.rangeFormatting.enable;\n+    }\n+\n+    // callInfo_full -> signatureInfo_detail, signatureInfo_documentation_enable\n+    if let Some(Value::Bool(b)) = copy.pointer(\"/callInfo/full\") {\n+        let sig_info = match b {\n+            true => json!({ \"signatureInfo\": {\n+                \"documentation\": {\"enable\": true}},\n+                \"detail\": \"full\"\n+            }),\n+            false => json!({ \"signatureInfo\": {\n+                \"documentation\": {\"enable\": false}},\n+                \"detail\": \"parameters\"\n+            }),\n+        };\n+        merge(json, sig_info);\n+    }\n+\n+    // cargo_allFeatures, cargo_features -> cargo_features\n+    if let Some(Value::Bool(true)) = copy.pointer(\"/cargo/allFeatures\") {\n+        merge(json, json!({ \"cargo\": { \"features\": \"all\" } }));\n+    }\n+\n+    // checkOnSave_allFeatures, checkOnSave_features -> checkOnSave_features\n+    if let Some(Value::Bool(true)) = copy.pointer(\"/checkOnSave/allFeatures\") {\n+        merge(json, json!({ \"checkOnSave\": { \"features\": \"all\" } }));\n+    }\n+\n+    // completion_addCallArgumentSnippets completion_addCallParenthesis -> completion_callable_snippets\n+    let res = match (\n+        copy.pointer(\"/completion/addCallArgumentSnippets\"),\n+        copy.pointer(\"/completion/addCallParenthesis\"),\n+    ) {\n+        (Some(Value::Bool(true)), Some(Value::Bool(true))) => json!(\"fill_arguments\"),\n+        (Some(Value::Bool(true)), _) => json!(\"add_parentheses\"),\n+        (_, _) => json!(null),\n+    };\n+    merge(json, json!({ \"completion\": { \"callable\": {\"snippets\": res }} }));\n+}\n+\n+fn merge(dst: &mut Value, src: Value) {\n+    match (dst, src) {\n+        (Value::Object(dst), Value::Object(src)) => {\n+            for (k, v) in src {\n+                merge(dst.entry(k).or_insert(v.clone()), v)\n+            }\n+        }\n+        (dst, src) => *dst = src,\n+    }\n+}"}]}