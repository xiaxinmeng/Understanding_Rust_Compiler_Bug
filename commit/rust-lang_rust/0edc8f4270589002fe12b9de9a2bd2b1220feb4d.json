{"sha": "0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZGM4ZjQyNzA1ODkwMDJmZTEyYjlkZTlhMmJkMmIxMjIwZmViNGQ=", "commit": {"author": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-02T08:17:12Z"}, "committer": {"name": "John K\u00e5re Alsaker", "email": "john.kare.alsaker@gmail.com", "date": "2018-05-08T14:21:58Z"}, "message": "Store generator movability outside GeneratorInterior", "tree": {"sha": "2069b31875e8bad17b80e860354dddf1d4ac94e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2069b31875e8bad17b80e860354dddf1d4ac94e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "html_url": "https://github.com/rust-lang/rust/commit/0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/comments", "author": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Zoxc", "id": 25784, "node_id": "MDQ6VXNlcjI1Nzg0", "avatar_url": "https://avatars.githubusercontent.com/u/25784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Zoxc", "html_url": "https://github.com/Zoxc", "followers_url": "https://api.github.com/users/Zoxc/followers", "following_url": "https://api.github.com/users/Zoxc/following{/other_user}", "gists_url": "https://api.github.com/users/Zoxc/gists{/gist_id}", "starred_url": "https://api.github.com/users/Zoxc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Zoxc/subscriptions", "organizations_url": "https://api.github.com/users/Zoxc/orgs", "repos_url": "https://api.github.com/users/Zoxc/repos", "events_url": "https://api.github.com/users/Zoxc/events{/privacy}", "received_events_url": "https://api.github.com/users/Zoxc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "697a989ec05ad7445bacd68983fd807e159ea717", "url": "https://api.github.com/repos/rust-lang/rust/commits/697a989ec05ad7445bacd68983fd807e159ea717", "html_url": "https://github.com/rust-lang/rust/commit/697a989ec05ad7445bacd68983fd807e159ea717"}], "stats": {"total": 188, "additions": 108, "deletions": 80}, "files": [{"sha": "29a0632511c32111f403a9d6543e58b16cce6781", "filename": "src/librustc/ich/impls_mir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fich%2Fimpls_mir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_mir.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -483,10 +483,11 @@ for mir::AggregateKind<'gcx> {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n             }\n-            mir::AggregateKind::Generator(def_id, ref substs, ref interior) => {\n+            mir::AggregateKind::Generator(def_id, ref substs, ref interior, movability) => {\n                 def_id.hash_stable(hcx, hasher);\n                 substs.hash_stable(hcx, hasher);\n                 interior.hash_stable(hcx, hasher);\n+                movability.hash_stable(hcx, hasher);\n             }\n         }\n     }"}, {"sha": "96ef8591645aaabf85c28cb81aa48c3e0b9eb965", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -518,7 +518,7 @@ for ::middle::const_val::ErrKind<'gcx> {\n \n impl_stable_hash_for!(struct ty::ClosureSubsts<'tcx> { substs });\n \n-impl_stable_hash_for!(struct ty::GeneratorInterior<'tcx> { witness, movable });\n+impl_stable_hash_for!(struct ty::GeneratorInterior<'tcx> { witness });\n \n impl_stable_hash_for!(struct ty::GenericPredicates<'tcx> {\n     parent,\n@@ -908,10 +908,11 @@ for ty::TypeVariants<'gcx>\n                 def_id.hash_stable(hcx, hasher);\n                 closure_substs.hash_stable(hcx, hasher);\n             }\n-            TyGenerator(def_id, closure_substs, interior) => {\n+            TyGenerator(def_id, closure_substs, interior, movability) => {\n                 def_id.hash_stable(hcx, hasher);\n                 closure_substs.hash_stable(hcx, hasher);\n                 interior.hash_stable(hcx, hasher);\n+                movability.hash_stable(hcx, hasher);\n             }\n             TyGeneratorWitness(types) => {\n                 types.hash_stable(hcx, hasher)"}, {"sha": "907ffc6760605ab08c9960c6d97db7df11966442", "filename": "src/librustc/mir/mod.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fmod.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -1641,7 +1641,7 @@ pub enum AggregateKind<'tcx> {\n     Adt(&'tcx AdtDef, usize, &'tcx Substs<'tcx>, Option<usize>),\n \n     Closure(DefId, ClosureSubsts<'tcx>),\n-    Generator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>),\n+    Generator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>, hir::GeneratorMovability),\n }\n \n #[derive(Copy, Clone, Debug, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n@@ -1804,7 +1804,7 @@ impl<'tcx> Debug for Rvalue<'tcx> {\n                         }\n                     }),\n \n-                    AggregateKind::Generator(def_id, _, _) => ty::tls::with(|tcx| {\n+                    AggregateKind::Generator(def_id, _, _, _) => ty::tls::with(|tcx| {\n                         if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n                             let name = format!(\"[generator@{:?}]\", tcx.hir.span(node_id));\n                             let mut struct_fmt = fmt.debug_struct(&name);\n@@ -2375,10 +2375,11 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                         AggregateKind::Adt(def, v, substs.fold_with(folder), n),\n                     AggregateKind::Closure(id, substs) =>\n                         AggregateKind::Closure(id, substs.fold_with(folder)),\n-                    AggregateKind::Generator(id, substs, interior) =>\n+                    AggregateKind::Generator(id, substs, interior, movablity) =>\n                         AggregateKind::Generator(id,\n                                                  substs.fold_with(folder),\n-                                                 interior.fold_with(folder)),\n+                                                 interior.fold_with(folder),\n+                                                 movablity),\n                 };\n                 Aggregate(kind, fields.fold_with(folder))\n             }\n@@ -2405,7 +2406,7 @@ impl<'tcx> TypeFoldable<'tcx> for Rvalue<'tcx> {\n                     AggregateKind::Tuple => false,\n                     AggregateKind::Adt(_, _, substs, _) => substs.visit_with(visitor),\n                     AggregateKind::Closure(_, substs) => substs.visit_with(visitor),\n-                    AggregateKind::Generator(_, substs, interior) => substs.visit_with(visitor) ||\n+                    AggregateKind::Generator(_, substs, interior, _) => substs.visit_with(visitor) ||\n                         interior.visit_with(visitor),\n                 }) || fields.visit_with(visitor)\n             }"}, {"sha": "33af199d758888e9c3bc893a994b363e773bc765", "filename": "src/librustc/mir/tcx.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftcx.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -186,8 +186,8 @@ impl<'tcx> Rvalue<'tcx> {\n                     AggregateKind::Closure(did, substs) => {\n                         tcx.mk_closure_from_closure_substs(did, substs)\n                     }\n-                    AggregateKind::Generator(did, substs, interior) => {\n-                        tcx.mk_generator(did, substs, interior)\n+                    AggregateKind::Generator(did, substs, interior, movability) => {\n+                        tcx.mk_generator(did, substs, interior, movability)\n                     }\n                 }\n             }"}, {"sha": "6aed5076c1f16aafdd593efee4b2bd59b69310c5", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -595,8 +595,9 @@ macro_rules! make_mir_visitor {\n                                 self.visit_closure_substs(closure_substs, location);\n                             }\n                             AggregateKind::Generator(ref $($mutability)* def_id,\n-                                                   ref $($mutability)* closure_substs,\n-                                                   ref $($mutability)* interior) => {\n+                                                     ref $($mutability)* closure_substs,\n+                                                     ref $($mutability)* interior,\n+                                                     _movability) => {\n                                 self.visit_def_id(def_id, location);\n                                 self.visit_closure_substs(closure_substs, location);\n                                 self.visit_generator_interior(interior, location);"}, {"sha": "82643c315b99d3b7a3dd648f307aab87687be1cb", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -2280,7 +2280,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 substs.upvar_tys(def_id, self.tcx()).collect()\n             }\n \n-            ty::TyGenerator(def_id, ref substs, interior) => {\n+            ty::TyGenerator(def_id, ref substs, interior, _) => {\n                 substs.upvar_tys(def_id, self.tcx()).chain(iter::once(interior.witness)).collect()\n             }\n \n@@ -2756,7 +2756,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         // type/region parameters\n         let self_ty = self.infcx.shallow_resolve(obligation.self_ty().skip_binder());\n         let (closure_def_id, substs) = match self_ty.sty {\n-            ty::TyGenerator(id, substs, _) => (id, substs),\n+            ty::TyGenerator(id, substs, _, _) => (id, substs),\n             _ => bug!(\"closure candidate for non-closure {:?}\", obligation)\n         };\n "}, {"sha": "6ed243361c0937737cc82060d4b446ee3234edc3", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -2453,9 +2453,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     pub fn mk_generator(self,\n                         id: DefId,\n                         closure_substs: ClosureSubsts<'tcx>,\n-                        interior: GeneratorInterior<'tcx>)\n+                        interior: GeneratorInterior<'tcx>,\n+                        movability: hir::GeneratorMovability)\n                         -> Ty<'tcx> {\n-        self.mk_ty(TyGenerator(id, closure_substs, interior))\n+        self.mk_ty(TyGenerator(id, closure_substs, interior, movability))\n     }\n \n     pub fn mk_generator_witness(self, types: ty::Binder<&'tcx Slice<Ty<'tcx>>>) -> Ty<'tcx> {"}, {"sha": "2b6901f74def9e48162b2bd4f953e041af63fc11", "filename": "src/librustc/ty/fast_reject.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Ffast_reject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Ffast_reject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Ffast_reject.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -90,7 +90,7 @@ pub fn simplify_type<'a, 'gcx, 'tcx>(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n         ty::TyClosure(def_id, _) => {\n             Some(ClosureSimplifiedType(def_id))\n         }\n-        ty::TyGenerator(def_id, _, _) => {\n+        ty::TyGenerator(def_id, _, _, _) => {\n             Some(GeneratorSimplifiedType(def_id))\n         }\n         ty::TyGeneratorWitness(ref tys) => {"}, {"sha": "acc17a08a80d77385bd0179553de5108948b05ca", "filename": "src/librustc/ty/flags.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fflags.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -87,7 +87,7 @@ impl FlagComputation {\n                 }\n             }\n \n-            &ty::TyGenerator(_, ref substs, ref interior) => {\n+            &ty::TyGenerator(_, ref substs, ref interior, _) => {\n                 self.add_flags(TypeFlags::HAS_TY_CLOSURE);\n                 self.add_flags(TypeFlags::HAS_LOCAL_NAMES);\n                 self.add_substs(&substs.substs);"}, {"sha": "b58c4138597d262cd906beeb3b9132745be1f869", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -369,7 +369,7 @@ pub fn characteristic_def_id_of_type(ty: Ty) -> Option<DefId> {\n \n         ty::TyFnDef(def_id, _) |\n         ty::TyClosure(def_id, _) |\n-        ty::TyGenerator(def_id, _, _) |\n+        ty::TyGenerator(def_id, _, _, _) |\n         ty::TyForeign(def_id) => Some(def_id),\n \n         ty::TyBool |"}, {"sha": "7b91040b8e7de6826f4dfcb69a9e2f79a849dbe8", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -599,7 +599,7 @@ impl<'a, 'tcx> LayoutCx<'tcx, TyCtxt<'a, 'tcx, 'tcx>> {\n             }\n \n             // Tuples, generators and closures.\n-            ty::TyGenerator(def_id, ref substs, _) => {\n+            ty::TyGenerator(def_id, ref substs, _, _) => {\n                 let tys = substs.field_tys(def_id, tcx);\n                 univariant(&tys.map(|ty| self.layout_of(ty)).collect::<Result<Vec<_>, _>>()?,\n                     &ReprOptions::default(),\n@@ -1603,7 +1603,7 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 substs.upvar_tys(def_id, tcx).nth(i).unwrap()\n             }\n \n-            ty::TyGenerator(def_id, ref substs, _) => {\n+            ty::TyGenerator(def_id, ref substs, _, _) => {\n                 substs.field_tys(def_id, tcx).nth(i).unwrap()\n             }\n "}, {"sha": "4eb736789f3cdf031aa6340e7839f8a642c1c6e9", "filename": "src/librustc/ty/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Foutlives.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            ty::TyGenerator(def_id, ref substs, _) => {\n+            ty::TyGenerator(def_id, ref substs, _, _) => {\n                 // Same as the closure case\n                 for upvar_ty in substs.upvar_tys(def_id, *self) {\n                     self.compute_components(upvar_ty, out);"}, {"sha": "ed0835418a484fb0029032eb79fc4526d758a15b", "filename": "src/librustc/ty/relate.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Frelate.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -415,16 +415,16 @@ pub fn super_relate_tys<'a, 'gcx, 'tcx, R>(relation: &mut R,\n             Ok(tcx.mk_dynamic(relation.relate(a_obj, b_obj)?, region_bound))\n         }\n \n-        (&ty::TyGenerator(a_id, a_substs, a_interior),\n-         &ty::TyGenerator(b_id, b_substs, b_interior))\n+        (&ty::TyGenerator(a_id, a_substs, a_interior, movability),\n+         &ty::TyGenerator(b_id, b_substs, b_interior, _))\n             if a_id == b_id =>\n         {\n             // All TyGenerator types with the same id represent\n             // the (anonymous) type of the same generator expression. So\n             // all of their regions should be equated.\n             let substs = relation.relate(&a_substs, &b_substs)?;\n             let interior = relation.relate(&a_interior, &b_interior)?;\n-            Ok(tcx.mk_generator(a_id, substs, interior))\n+            Ok(tcx.mk_generator(a_id, substs, interior, movability))\n         }\n \n         (&ty::TyGeneratorWitness(a_types), &ty::TyGeneratorWitness(b_types)) =>\n@@ -618,9 +618,8 @@ impl<'tcx> Relate<'tcx> for ty::GeneratorInterior<'tcx> {\n                            -> RelateResult<'tcx, ty::GeneratorInterior<'tcx>>\n         where R: TypeRelation<'a, 'gcx, 'tcx>, 'gcx: 'a+'tcx, 'tcx: 'a\n     {\n-        assert_eq!(a.movable, b.movable);\n         let witness = relation.relate(&a.witness, &b.witness)?;\n-        Ok(ty::GeneratorInterior { witness, movable: a.movable })\n+        Ok(ty::GeneratorInterior { witness })\n     }\n }\n "}, {"sha": "6df3b5dc2bd1f1c2ababeae2e1fad1aea4afaeeb", "filename": "src/librustc/ty/structural_impls.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fstructural_impls.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -313,7 +313,7 @@ impl<'a, 'tcx> Lift<'tcx> for ty::GeneratorInterior<'a> {\n     type Lifted = ty::GeneratorInterior<'tcx>;\n     fn lift_to_tcx<'b, 'gcx>(&self, tcx: TyCtxt<'b, 'gcx, 'tcx>) -> Option<Self::Lifted> {\n         tcx.lift(&self.witness).map(|witness| {\n-            ty::GeneratorInterior { witness, movable: self.movable }\n+            ty::GeneratorInterior { witness }\n         })\n     }\n }\n@@ -867,8 +867,12 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyRef(ref r, tm) => {\n                 ty::TyRef(r.fold_with(folder), tm.fold_with(folder))\n             }\n-            ty::TyGenerator(did, substs, interior) => {\n-                ty::TyGenerator(did, substs.fold_with(folder), interior.fold_with(folder))\n+            ty::TyGenerator(did, substs, interior, movability) => {\n+                ty::TyGenerator(\n+                    did,\n+                    substs.fold_with(folder),\n+                    interior.fold_with(folder),\n+                    movability)\n             }\n             ty::TyGeneratorWitness(types) => ty::TyGeneratorWitness(types.fold_with(folder)),\n             ty::TyClosure(did, substs) => ty::TyClosure(did, substs.fold_with(folder)),\n@@ -902,7 +906,7 @@ impl<'tcx> TypeFoldable<'tcx> for Ty<'tcx> {\n             ty::TyFnDef(_, substs) => substs.visit_with(visitor),\n             ty::TyFnPtr(ref f) => f.visit_with(visitor),\n             ty::TyRef(r, ref tm) => r.visit_with(visitor) || tm.visit_with(visitor),\n-            ty::TyGenerator(_did, ref substs, ref interior) => {\n+            ty::TyGenerator(_did, ref substs, ref interior, _) => {\n                 substs.visit_with(visitor) || interior.visit_with(visitor)\n             }\n             ty::TyGeneratorWitness(ref types) => types.visit_with(visitor),\n@@ -981,7 +985,7 @@ BraceStructTypeFoldableImpl! {\n \n BraceStructTypeFoldableImpl! {\n     impl<'tcx> TypeFoldable<'tcx> for ty::GeneratorInterior<'tcx> {\n-        witness, movable,\n+        witness,\n     }\n }\n "}, {"sha": "b2c715bf7b9768ca8bf58dfa543f33ac6aef8fcc", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -139,7 +139,7 @@ pub enum TypeVariants<'tcx> {\n \n     /// The anonymous type of a generator. Used to represent the type of\n     /// `|a| yield a`.\n-    TyGenerator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>),\n+    TyGenerator(DefId, ClosureSubsts<'tcx>, GeneratorInterior<'tcx>, hir::GeneratorMovability),\n \n     /// A type representin the types stored inside a generator.\n     /// This should only appear in GeneratorInteriors.\n@@ -420,7 +420,6 @@ impl<'a, 'gcx, 'tcx> ClosureSubsts<'tcx> {\n #[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, RustcEncodable, RustcDecodable)]\n pub struct GeneratorInterior<'tcx> {\n     pub witness: Ty<'tcx>,\n-    pub movable: bool,\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, RustcEncodable, RustcDecodable)]\n@@ -1605,7 +1604,7 @@ impl<'a, 'gcx, 'tcx> TyS<'tcx> {\n             TyAdt(_, substs) | TyAnon(_, substs) => {\n                 substs.regions().collect()\n             }\n-            TyClosure(_, ref substs) | TyGenerator(_, ref substs, _) => {\n+            TyClosure(_, ref substs) | TyGenerator(_, ref substs, _, _) => {\n                 substs.substs.regions().collect()\n             }\n             TyProjection(ref data) => {"}, {"sha": "12421715ed56e1f2f3eb7db626120713022552ef", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -667,7 +667,7 @@ impl<'a, 'gcx, 'tcx, W> TypeVisitor<'tcx> for TypeIdHasher<'a, 'gcx, 'tcx, W>\n             TyRawPtr(m) |\n             TyRef(_, m) => self.hash(m.mutbl),\n             TyClosure(def_id, _) |\n-            TyGenerator(def_id, _, _) |\n+            TyGenerator(def_id, _, _, _) |\n             TyAnon(def_id, _) |\n             TyFnDef(def_id, _) => self.def_id(def_id),\n             TyAdt(d, _) => self.def_id(d.did),"}, {"sha": "d3fa376d6a889b18e33c972e7c0eae9babaa0b93", "filename": "src/librustc/ty/walk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fwalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Fty%2Fwalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwalk.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -118,7 +118,7 @@ fn push_subtypes<'tcx>(stack: &mut TypeWalkerStack<'tcx>, parent_ty: Ty<'tcx>) {\n         ty::TyClosure(_, ref substs) => {\n             stack.extend(substs.substs.types().rev());\n         }\n-        ty::TyGenerator(_, ref substs, ref interior) => {\n+        ty::TyGenerator(_, ref substs, ref interior, _) => {\n             stack.push(interior.witness);\n             stack.extend(substs.substs.types().rev());\n         }"}, {"sha": "770357e549d7d36366285f53a09ea321bc2147b2", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -1110,9 +1110,9 @@ define_print! {\n                     })\n                 }\n                 TyStr => write!(f, \"str\"),\n-                TyGenerator(did, substs, interior) => ty::tls::with(|tcx| {\n+                TyGenerator(did, substs, interior, movability) => ty::tls::with(|tcx| {\n                     let upvar_tys = substs.upvar_tys(did, tcx);\n-                    if interior.movable {\n+                    if movability == hir::GeneratorMovability::Movable {\n                         write!(f, \"[generator\")?;\n                     } else {\n                         write!(f, \"[static generator\")?;"}, {"sha": "f68c164751d6f884bdf16ad7d8e59053b71f4970", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -777,7 +777,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     self.describe_field_from_ty(&tnm.ty, field)\n                 }\n                 ty::TyArray(ty, _) | ty::TySlice(ty) => self.describe_field_from_ty(&ty, field),\n-                ty::TyClosure(def_id, _) | ty::TyGenerator(def_id, _, _) => {\n+                ty::TyClosure(def_id, _) | ty::TyGenerator(def_id, _, _, _) => {\n                     // Convert the def-id into a node-id. node-ids are only valid for\n                     // the local code in the current crate, so this returns an `Option` in case\n                     // the closure comes from another crate. But in that case we wouldn't"}, {"sha": "664d4214ca8931bf1cad23258f2f88ac3be3ced8", "filename": "src/librustc_mir/borrow_check/nll/region_infer/annotation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fannotation.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -30,7 +30,7 @@ impl<'gcx, 'tcx> RegionInferenceContext<'tcx> {\n                     &substs.substs[..]\n                 ));\n             }\n-            DefiningTy::Generator(def_id, substs, interior) => {\n+            DefiningTy::Generator(def_id, substs, interior, _) => {\n                 err.note(&format!(\n                     \"defining type: {:?} with closure substs {:#?} and interior {:?}\",\n                     def_id,"}, {"sha": "6c4c4a171efea99285103d62e66b2aee24988b2b", "filename": "src/librustc_mir/borrow_check/nll/type_check/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Ftype_check%2Fmod.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -528,7 +528,7 @@ impl<'a, 'b, 'gcx, 'tcx> TypeVerifier<'a, 'b, 'gcx, 'tcx> {\n                         }),\n                     }\n                 }\n-                ty::TyGenerator(def_id, substs, _) => {\n+                ty::TyGenerator(def_id, substs, _, _) => {\n                     // Try pre-transform fields first (upvars and current state)\n                     if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field.index()) {\n                         return Ok(ty);\n@@ -1254,7 +1254,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                     }),\n                 }\n             }\n-            AggregateKind::Generator(def_id, substs, _) => {\n+            AggregateKind::Generator(def_id, substs, _, _) => {\n                 // Try pre-transform fields first (upvars and current state)\n                 if let Some(ty) = substs.pre_transforms_tys(def_id, tcx).nth(field_index) {\n                     Ok(ty)\n@@ -1497,7 +1497,7 @@ impl<'a, 'gcx, 'tcx> TypeChecker<'a, 'gcx, 'tcx> {\n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n             }\n \n-            AggregateKind::Generator(def_id, substs, _) => {\n+            AggregateKind::Generator(def_id, substs, _, _) => {\n                 tcx.predicates_of(*def_id).instantiate(tcx, substs.substs)\n             }\n "}, {"sha": "0e519a37e577e908383125039941665a4f2f8d27", "filename": "src/librustc_mir/borrow_check/nll/universal_regions.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Funiversal_regions.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -22,7 +22,7 @@\n //! The code in this file doesn't *do anything* with those results; it\n //! just returns them for other code to use.\n \n-use rustc::hir::{BodyOwnerKind, HirId};\n+use rustc::hir::{self, BodyOwnerKind, HirId};\n use rustc::hir::def_id::DefId;\n use rustc::infer::{InferCtxt, NLLRegionVariableOrigin};\n use rustc::infer::region_constraints::GenericKind;\n@@ -116,7 +116,10 @@ pub enum DefiningTy<'tcx> {\n     /// The MIR is a generator. The signature is that generators take\n     /// no parameters and return the result of\n     /// `ClosureSubsts::generator_return_ty`.\n-    Generator(DefId, ty::ClosureSubsts<'tcx>, ty::GeneratorInterior<'tcx>),\n+    Generator(DefId,\n+              ty::ClosureSubsts<'tcx>,\n+              ty::GeneratorInterior<'tcx>,\n+              hir::GeneratorMovability),\n \n     /// The MIR is a fn item with the given def-id and substs. The signature\n     /// of the function can be bound then with the `fn_sig` query.\n@@ -508,7 +511,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         );\n \n         let yield_ty = match defining_ty {\n-            DefiningTy::Generator(def_id, substs, _) => {\n+            DefiningTy::Generator(def_id, substs, _, _) => {\n                 Some(substs.generator_yield_ty(def_id, self.infcx.tcx))\n             }\n             _ => None,\n@@ -550,8 +553,8 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n \n                 match defining_ty.sty  {\n                     ty::TyClosure(def_id, substs) => DefiningTy::Closure(def_id, substs),\n-                    ty::TyGenerator(def_id, substs, interior) => {\n-                        DefiningTy::Generator(def_id, substs, interior)\n+                    ty::TyGenerator(def_id, substs, interior, movability) => {\n+                        DefiningTy::Generator(def_id, substs, interior, movability)\n                     }\n                     ty::TyFnDef(def_id, substs) => DefiningTy::FnDef(def_id, substs),\n                     _ => span_bug!(\n@@ -587,7 +590,7 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n         let closure_base_def_id = tcx.closure_base_def_id(self.mir_def_id);\n         let identity_substs = Substs::identity_for_item(gcx, closure_base_def_id);\n         let fr_substs = match defining_ty {\n-            DefiningTy::Closure(_, substs) | DefiningTy::Generator(_, substs, _) => {\n+            DefiningTy::Closure(_, substs) | DefiningTy::Generator(_, substs, _, _) => {\n                 // In the case of closures, we rely on the fact that\n                 // the first N elements in the ClosureSubsts are\n                 // inherited from the `closure_base_def_id`.\n@@ -648,10 +651,10 @@ impl<'cx, 'gcx, 'tcx> UniversalRegionsBuilder<'cx, 'gcx, 'tcx> {\n                 )\n             }\n \n-            DefiningTy::Generator(def_id, substs, interior) => {\n+            DefiningTy::Generator(def_id, substs, interior, movability) => {\n                 assert_eq!(self.mir_def_id, def_id);\n                 let output = substs.generator_return_ty(def_id, tcx);\n-                let generator_ty = tcx.mk_generator(def_id, substs, interior);\n+                let generator_ty = tcx.mk_generator(def_id, substs, interior, movability);\n                 let inputs_and_output = self.infcx.tcx.intern_type_list(&[generator_ty, output]);\n                 ty::Binder::dummy(inputs_and_output)\n             }"}, {"sha": "593c43e1ab40f92a173618ddfbd9b8eb69e479aa", "filename": "src/librustc_mir/build/expr/as_rvalue.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Fas_rvalue.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -185,12 +185,13 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n                 block.and(Rvalue::Aggregate(box AggregateKind::Tuple, fields))\n             }\n-            ExprKind::Closure { closure_id, substs, upvars, interior } => { // see (*) above\n+            ExprKind::Closure { closure_id, substs, upvars, interior } => {\n+                // see (*) above\n                 let mut operands: Vec<_> =\n                     upvars.into_iter()\n                           .map(|upvar| unpack!(block = this.as_operand(block, scope, upvar)))\n                           .collect();\n-                let result = if let Some(interior) = interior {\n+                let result = if let Some((interior, movability)) = interior {\n                     // Add the state operand since it follows the upvars in the generator\n                     // struct. See librustc_mir/transform/generator.rs for more details.\n                     operands.push(Operand::Constant(box Constant {\n@@ -203,7 +204,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                             }),\n                         },\n                     }));\n-                    box AggregateKind::Generator(closure_id, substs, interior)\n+                    box AggregateKind::Generator(closure_id, substs, interior, movability)\n                 } else {\n                     box AggregateKind::Closure(closure_id, substs)\n                 };"}, {"sha": "966092ac5df065cb322f83c368262adffc988906", "filename": "src/librustc_mir/hair/cx/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fcx%2Fexpr.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -472,7 +472,9 @@ fn make_mirror_unadjusted<'a, 'gcx, 'tcx>(cx: &mut Cx<'a, 'gcx, 'tcx>,\n             let closure_ty = cx.tables().expr_ty(expr);\n             let (def_id, substs, interior) = match closure_ty.sty {\n                 ty::TyClosure(def_id, substs) => (def_id, substs, None),\n-                ty::TyGenerator(def_id, substs, interior) => (def_id, substs, Some(interior)),\n+                ty::TyGenerator(def_id, substs, interior, movability) =>{\n+                    (def_id, substs, Some((interior, movability)))\n+                }\n                 _ => {\n                     span_bug!(expr.span, \"closure expr w/o closure type: {:?}\", closure_ty);\n                 }"}, {"sha": "0b6a1e3f52db08d06f8a770499ae5a8c139768cc", "filename": "src/librustc_mir/hair/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fmod.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -268,7 +268,7 @@ pub enum ExprKind<'tcx> {\n         closure_id: DefId,\n         substs: ClosureSubsts<'tcx>,\n         upvars: Vec<ExprRef<'tcx>>,\n-        interior: Option<GeneratorInterior<'tcx>>,\n+        interior: Option<(GeneratorInterior<'tcx>, hir::GeneratorMovability)>,\n     },\n     Literal {\n         literal: Literal<'tcx>,"}, {"sha": "7b152bc12867dbaaef1c67bd1fa187208deb713b", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -376,7 +376,7 @@ impl<'a, 'tcx> DefPathBasedNames<'a, 'tcx> {\n                     self.push_type_name(sig.output(), output);\n                 }\n             },\n-            ty::TyGenerator(def_id, ref closure_substs, _) |\n+            ty::TyGenerator(def_id, ref closure_substs, _, _) |\n             ty::TyClosure(def_id, ref closure_substs) => {\n                 self.push_def_path(def_id, output);\n                 let generics = self.tcx.generics_of(self.tcx.closure_base_def_id(def_id));"}, {"sha": "a86e077927c0d008683c9a12d9a112b1af524663", "filename": "src/librustc_mir/shim.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fshim.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -166,7 +166,7 @@ fn build_drop_shim<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     debug!(\"build_drop_shim(def_id={:?}, ty={:?})\", def_id, ty);\n \n     // Check if this is a generator, if so, return the drop glue for it\n-    if let Some(&ty::TyS { sty: ty::TyGenerator(gen_def_id, substs, _), .. }) = ty {\n+    if let Some(&ty::TyS { sty: ty::TyGenerator(gen_def_id, substs, _, _), .. }) = ty {\n         let mir = &**tcx.optimized_mir(gen_def_id).generator_drop.as_ref().unwrap();\n         return mir.subst(tcx, substs.substs);\n     }"}, {"sha": "32d68962a0d344f583c953a4b873296744503bc6", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -127,7 +127,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                 &AggregateKind::Tuple |\n                 &AggregateKind::Adt(..) => {}\n                 &AggregateKind::Closure(def_id, _) |\n-                &AggregateKind::Generator(def_id, _, _) => {\n+                &AggregateKind::Generator(def_id, _, _, _) => {\n                     let UnsafetyCheckResult {\n                         violations, unsafe_blocks\n                     } = self.tcx.unsafety_check_result(def_id);"}, {"sha": "168f24f2cee2af0b9508cd49aee4c1e2794a13c9", "filename": "src/librustc_mir/transform/generator.rs", "status": "modified", "additions": 14, "deletions": 5, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fgenerator.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -465,6 +465,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                             source: MirSource,\n                             upvars: Vec<Ty<'tcx>>,\n                             interior: GeneratorInterior<'tcx>,\n+                            movable: bool,\n                             mir: &mut Mir<'tcx>)\n     -> (HashMap<Local, (Ty<'tcx>, usize)>,\n         GeneratorLayout<'tcx>,\n@@ -474,7 +475,7 @@ fn compute_layout<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let (live_locals, storage_liveness) = locals_live_across_suspend_points(tcx,\n                                                                             mir,\n                                                                             source,\n-                                                                            interior.movable);\n+                                                                            movable);\n     // Erase regions from the types passed in from typeck so we can compare them with\n     // MIR types\n     let allowed_upvars = tcx.erase_regions(&upvars);\n@@ -853,9 +854,11 @@ impl MirPass for StateTransform {\n         let gen_ty = mir.local_decls.raw[1].ty;\n \n         // Get the interior types and substs which typeck computed\n-        let (upvars, interior) = match gen_ty.sty {\n-            ty::TyGenerator(_, substs, interior) => {\n-                (substs.upvar_tys(def_id, tcx).collect(), interior)\n+        let (upvars, interior, movable) = match gen_ty.sty {\n+            ty::TyGenerator(_, substs, interior, movability) => {\n+                (substs.upvar_tys(def_id, tcx).collect(),\n+                 interior,\n+                 movability == hir::GeneratorMovability::Movable)\n             }\n             _ => bug!(),\n         };\n@@ -874,7 +877,13 @@ impl MirPass for StateTransform {\n         // Extract locals which are live across suspension point into `layout`\n         // `remap` gives a mapping from local indices onto generator struct indices\n         // `storage_liveness` tells us which locals have live storage at suspension points\n-        let (remap, layout, storage_liveness) = compute_layout(tcx, source, upvars, interior, mir);\n+        let (remap, layout, storage_liveness) = compute_layout(\n+            tcx,\n+            source,\n+            upvars,\n+            interior,\n+            movable,\n+            mir);\n \n         let state_field = mir.upvar_decls.len();\n "}, {"sha": "1c04fe170a16d133371ce9866dc74899b30c8c07", "filename": "src/librustc_mir/util/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Felaborate_drops.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -787,7 +787,7 @@ impl<'l, 'b, 'tcx, D> DropCtxt<'l, 'b, 'tcx, D>\n             // This should only happen for the self argument on the resume function.\n             // It effetively only contains upvars until the generator transformation runs.\n             // See librustc_mir/transform/generator.rs for more details.\n-            ty::TyGenerator(def_id, substs, _) => {\n+            ty::TyGenerator(def_id, substs, _, _) => {\n                 let tys : Vec<_> = substs.upvar_tys(def_id, self.tcx()).collect();\n                 self.open_drop_for_tuple(&tys)\n             }"}, {"sha": "ddee5558c0feef9fbfdfe9c7d9e5331de16bb02b", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -418,11 +418,12 @@ impl<'cx, 'gcx, 'tcx> Visitor<'tcx> for ExtraComments<'cx, 'gcx, 'tcx> {\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n                 }\n \n-                AggregateKind::Generator(def_id, substs, interior) => {\n+                AggregateKind::Generator(def_id, substs, interior, movability) => {\n                     self.push(&format!(\"generator\"));\n                     self.push(&format!(\"+ def_id: {:?}\", def_id));\n                     self.push(&format!(\"+ substs: {:#?}\", substs));\n                     self.push(&format!(\"+ interior: {:?}\", interior));\n+                    self.push(&format!(\"+ movability: {:?}\", movability));\n                 }\n \n                 _ => {}"}, {"sha": "8e4f82d2e1e1ee3baf77efb5308beda610f41977", "filename": "src/librustc_traits/dropck_outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_traits%2Fdropck_outlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_traits%2Fdropck_outlives.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -193,7 +193,7 @@ fn dtorck_constraint_for_ty<'a, 'gcx, 'tcx>(\n             .map(|ty| dtorck_constraint_for_ty(tcx, span, for_ty, depth + 1, ty))\n             .collect(),\n \n-        ty::TyGenerator(def_id, substs, _interior) => {\n+        ty::TyGenerator(def_id, substs, _interior, _movability) => {\n             // rust-lang/rust#49918: types can be constructed, stored\n             // in the interior, and sit idle when generator yields\n             // (and is subsequently dropped)."}, {"sha": "004fb0f08f93d4d3c3c5ae4091b903e975e78eb3", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -421,7 +421,7 @@ pub fn ty_fn_sig<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                 sig.abi\n             ))\n         }\n-        ty::TyGenerator(def_id, substs, _) => {\n+        ty::TyGenerator(def_id, substs, _, _) => {\n             let tcx = cx.tcx;\n             let sig = substs.generator_poly_sig(def_id, cx.tcx);\n "}, {"sha": "a025057faaf3ad279ee07f18bb59ca8d2bcee73f", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -591,7 +591,7 @@ pub fn type_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                                    unique_type_id,\n                                    usage_site_span).finalize(cx)\n         }\n-        ty::TyGenerator(def_id, substs, _) => {\n+        ty::TyGenerator(def_id, substs, _, _) => {\n             let upvar_tys : Vec<_> = substs.field_tys(def_id, cx.tcx).map(|t| {\n                 cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), t)\n             }).collect();"}, {"sha": "ab01984aa0fcb9d3298689df562f2140b7bc54a3", "filename": "src/librustc_trans/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_trans%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fmod.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -577,7 +577,7 @@ fn arg_local_refs<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n \n             let upvar_tys = match closure_layout.ty.sty {\n                 ty::TyClosure(def_id, substs) |\n-                ty::TyGenerator(def_id, substs, _) => substs.upvar_tys(def_id, tcx),\n+                ty::TyGenerator(def_id, substs, _, _) => substs.upvar_tys(def_id, tcx),\n                 _ => bug!(\"upvar_decls with non-closure arg0 type `{}`\", closure_layout.ty)\n             };\n "}, {"sha": "cbe66746a2966caa14d3ba0d1fb96f999edef66f", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -116,7 +116,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n         let substs = ty::ClosureSubsts { substs };\n         let closure_type = self.tcx.mk_closure(expr_def_id, substs);\n \n-        if let Some(GeneratorTypes { yield_ty, interior }) = generator_types {\n+        if let Some(GeneratorTypes { yield_ty, interior, movability }) = generator_types {\n             self.demand_eqtype(\n                 expr.span,\n                 yield_ty,\n@@ -127,7 +127,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n                 liberated_sig.output(),\n                 substs.generator_return_ty(expr_def_id, self.tcx),\n             );\n-            return self.tcx.mk_generator(expr_def_id, substs, interior);\n+            return self.tcx.mk_generator(expr_def_id, substs, interior, movability);\n         }\n \n         debug!("}, {"sha": "25c226e4591f692d68daa157cad37b3deea69605", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -1009,7 +1009,10 @@ struct GeneratorTypes<'tcx> {\n     yield_ty: ty::Ty<'tcx>,\n \n     /// Types that are captured (see `GeneratorInterior` for more).\n-    interior: ty::GeneratorInterior<'tcx>\n+    interior: ty::GeneratorInterior<'tcx>,\n+\n+    /// Indicates if the generator is movable or static (immovable)\n+    movability: hir::GeneratorMovability,\n }\n \n /// Helper used for fns and closures. Does the grungy work of checking a function\n@@ -1085,12 +1088,13 @@ fn check_fn<'a, 'gcx, 'tcx>(inherited: &'a Inherited<'a, 'gcx, 'tcx>,\n     // resolve_generator_interiors relies on this property.\n     let gen_ty = if can_be_generator.is_some() && body.is_generator {\n         let witness = fcx.next_ty_var(TypeVariableOrigin::MiscVariable(span));\n-        let interior = ty::GeneratorInterior {\n-            witness,\n-            movable: can_be_generator.unwrap() == hir::GeneratorMovability::Movable,\n-        };\n+        let interior = ty::GeneratorInterior { witness };\n         fcx.deferred_generator_interiors.borrow_mut().push((body.id(), interior));\n-        Some(GeneratorTypes { yield_ty: fcx.yield_ty.unwrap(), interior: interior })\n+        Some(GeneratorTypes {\n+            yield_ty: fcx.yield_ty.unwrap(),\n+            interior: interior,\n+            movability: can_be_generator.unwrap(),\n+        })\n     } else {\n         None\n     };"}, {"sha": "5008b5d79bf41a8b748b2cf1980c3e7e9d10c0b2", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0edc8f4270589002fe12b9de9a2bd2b1220feb4d/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=0edc8f4270589002fe12b9de9a2bd2b1220feb4d", "patch": "@@ -110,7 +110,8 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n \n         // Extract the type of the closure.\n         let (closure_def_id, closure_substs) = match self.node_ty(closure_hir_id).sty {\n-            ty::TyClosure(def_id, substs) | ty::TyGenerator(def_id, substs, _) => (def_id, substs),\n+            ty::TyClosure(def_id, substs) |\n+            ty::TyGenerator(def_id, substs, _, _) => (def_id, substs),\n             ref t => {\n                 span_bug!(\n                     span,"}]}