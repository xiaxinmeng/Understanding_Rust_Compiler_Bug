{"sha": "618768492f0c731fcb770dc2d178abe840846419", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYxODc2ODQ5MmYwYzczMWZjYjc3MGRjMmQxNzhhYmU4NDA4NDY0MTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-05T12:41:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-09-05T12:41:41Z"}, "message": "Auto merge of #64172 - Centril:rollup-8i8oh54, r=Centril\n\nRollup of 11 pull requests\n\nSuccessful merges:\n\n - #62848 (Use unicode-xid crate instead of libcore)\n - #63774 (Fix `window.hashchange is not a function`)\n - #63930 (Account for doc comments coming from proc macros without spans)\n - #64003 (place: Passing `align` = `layout.align.abi`, when also passing `layout`)\n - #64030 (Fix unlock ordering in SGX synchronization primitives)\n - #64041 (use TokenStream rather than &[TokenTree] for built-in macros)\n - #64051 (Add x86_64-linux-kernel target)\n - #64063 (Fix const_err with `-(-0.0)`)\n - #64083 (Point at appropriate arm on type error on if/else/match with one non-! arm)\n - #64100 (Fix const eval bug breaking run-pass tests in Miri)\n - #64157 (Opaque type locations in error message for clarity.)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "03b29a334b63823cf779ad069df33cbb620518ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03b29a334b63823cf779ad069df33cbb620518ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/618768492f0c731fcb770dc2d178abe840846419", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/618768492f0c731fcb770dc2d178abe840846419", "html_url": "https://github.com/rust-lang/rust/commit/618768492f0c731fcb770dc2d178abe840846419", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/618768492f0c731fcb770dc2d178abe840846419/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97767238814fd4bd3ce8a3972184b29fefb4923e", "url": "https://api.github.com/repos/rust-lang/rust/commits/97767238814fd4bd3ce8a3972184b29fefb4923e", "html_url": "https://github.com/rust-lang/rust/commit/97767238814fd4bd3ce8a3972184b29fefb4923e"}, {"sha": "afc7e0e9d3945dbb9799752e3a83c749fdd26320", "url": "https://api.github.com/repos/rust-lang/rust/commits/afc7e0e9d3945dbb9799752e3a83c749fdd26320", "html_url": "https://github.com/rust-lang/rust/commit/afc7e0e9d3945dbb9799752e3a83c749fdd26320"}], "stats": {"total": 1763, "additions": 1006, "deletions": 757}, "files": [{"sha": "243a326646c382c3b3d2e66984ec2d3e7658bdd8", "filename": "Cargo.lock", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1011,6 +1011,7 @@ dependencies = [\n name = \"fmt_macros\"\n version = \"0.0.0\"\n dependencies = [\n+ \"rustc_lexer\",\n  \"syntax_pos\",\n ]\n \n@@ -2372,7 +2373,7 @@ version = \"0.4.30\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"cf3d2011ab5c909338f7887f4fc896d35932e29146c12c8d01da6b22a80ba759\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -3290,7 +3291,7 @@ dependencies = [\n name = \"rustc_lexer\"\n version = \"0.1.0\"\n dependencies = [\n- \"unicode-xid\",\n+ \"unicode-xid 0.2.0\",\n ]\n \n [[package]]\n@@ -3368,6 +3369,7 @@ dependencies = [\n  \"rustc_apfloat\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_lexer\",\n  \"rustc_target\",\n  \"serialize\",\n  \"smallvec\",\n@@ -3976,7 +3978,7 @@ checksum = \"641e117d55514d6d918490e47102f7e08d096fdde360247e4a10f7a91a8478d3\"\n dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -3988,7 +3990,7 @@ dependencies = [\n  \"proc-macro2\",\n  \"quote\",\n  \"syn\",\n- \"unicode-xid\",\n+ \"unicode-xid 0.1.0\",\n ]\n \n [[package]]\n@@ -4017,6 +4019,7 @@ dependencies = [\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_errors\",\n+ \"rustc_lexer\",\n  \"rustc_target\",\n  \"smallvec\",\n  \"syntax\",\n@@ -4532,6 +4535,12 @@ version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.2.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c\"\n+\n [[package]]\n name = \"unicode_categories\"\n version = \"0.1.1\""}, {"sha": "68877b48433d5462d3581d202f483a87d90224f3", "filename": "src/doc/unstable-book/src/language-features/plugin.md", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fplugin.md?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -57,12 +57,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -78,7 +78,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}, {"sha": "a69eb0f6d4b20fb1b05e621f4b962f1eb7c465d0", "filename": "src/libcore/char/methods.rs", "status": "modified", "additions": 0, "deletions": 23, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Fchar%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Fchar%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fchar%2Fmethods.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -547,29 +547,6 @@ impl char {\n         }\n     }\n \n-    /// Returns `true` if this `char` satisfies the `XID_Start` Unicode property, and false\n-    /// otherwise.\n-    ///\n-    /// `XID_Start` is a Unicode Derived Property specified in\n-    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n-    /// mostly similar to `ID_Start` but modified for closure under `NFKx`.\n-    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n-    pub fn is_xid_start(self) -> bool {\n-        derived_property::XID_Start(self)\n-    }\n-\n-    /// Returns `true` if this `char` satisfies the `XID_Continue` Unicode property, and false\n-    /// otherwise.\n-    ///\n-    /// `XID_Continue` is a Unicode Derived Property specified in\n-    /// [UAX #31](http://unicode.org/reports/tr31/#NFKC_Modifications),\n-    /// mostly similar to `ID_Continue` but modified for closure under NFKx.\n-    #[unstable(feature = \"unicode_internals\", issue = \"0\")]\n-    #[inline]\n-    pub fn is_xid_continue(self) -> bool {\n-        derived_property::XID_Continue(self)\n-    }\n-\n     /// Returns `true` if this `char` is lowercase.\n     ///\n     /// 'Lowercase' is defined according to the terms of the Unicode Derived Core"}, {"sha": "a3ec9fd51f064cb90b5d325221bba48b313487a5", "filename": "src/libcore/unicode/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -13,8 +13,3 @@ pub mod derived_property {\n pub mod conversions {\n     pub use crate::unicode::tables::conversions::{to_lower, to_upper};\n }\n-\n-// For use in libsyntax\n-pub mod property {\n-    pub use crate::unicode::tables::property::Pattern_White_Space;\n-}"}, {"sha": "5b5be485431217849a1c4e87e0fb98467d01cd04", "filename": "src/libcore/unicode/tables.rs", "status": "modified", "additions": 0, "deletions": 375, "changes": 375, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Ftables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Ftables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Ftables.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -890,384 +890,9 @@ pub(crate) mod derived_property {\n         Uppercase_table.lookup(c)\n     }\n \n-    const XID_Continue_table: &super::BoolTrie = &super::BoolTrie {\n-        r1: [\n-            0x03ff000000000000, 0x07fffffe87fffffe, 0x04a0040000000000, 0xff7fffffff7fffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,\n-            0xffffffffffffffff, 0xb8dfffffffffffff, 0xfffffffbffffd7c0, 0xffbfffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffcfb, 0xffffffffffffffff,\n-            0xfffeffffffffffff, 0xffffffff027fffff, 0xbffffffffffe01ff, 0x000787ffffff00b6,\n-            0xffffffff07ff0000, 0xffffc3ffffffffff, 0xffffffffffffffff, 0x9ffffdff9fefffff,\n-            0xffffffffffff0000, 0xffffffffffffe7ff, 0x0003ffffffffffff, 0x243fffffffffffff\n-        ],\n-        r2: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-            24, 25, 26, 27, 28, 29, 30, 31, 4, 32, 33, 34, 4, 4, 4, 4, 4, 35, 36, 37, 38, 39, 40,\n-            41, 42, 4, 4, 4, 4, 4, 4, 4, 4, 43, 44, 45, 46, 47, 4, 48, 49, 50, 51, 52, 53, 54, 55,\n-            56, 57, 58, 59, 60, 4, 61, 4, 62, 63, 64, 65, 66, 4, 4, 4, 67, 4, 4, 4, 4, 68, 69, 70,\n-            71, 72, 73, 74, 75, 76, 77, 78, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 79, 80, 4, 81, 82, 83, 84, 85, 60, 60, 60, 60, 60, 60, 60, 60, 86,\n-            42, 87, 88, 89, 4, 90, 91, 60, 60, 60, 60, 60, 60, 60, 60, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 52, 60, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 92, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 93, 94, 4, 4, 4, 4, 95, 96, 4, 97, 98, 4, 99, 100, 101, 62, 4, 102, 103,\n-            104, 4, 105, 106, 107, 4, 108, 109, 110, 4, 111, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 112, 113, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60,\n-            60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 60, 4, 4, 4, 4, 4, 103, 4, 114,\n-            115, 116, 97, 117, 4, 118, 4, 4, 119, 120, 121, 122, 123, 124, 4, 125, 126, 127, 128,\n-            129\n-        ],\n-        r3: &[\n-            0x00003fffffffffff, 0x000007ff0fffffff, 0x3fdfffff00000000, 0xfffffffbfff80000,\n-            0xffffffffffffffff, 0xfffeffcfffffffff, 0xf3c5fdfffff99fef, 0x5003ffcfb080799f,\n-            0xd36dfdfffff987ee, 0x003fffc05e023987, 0xf3edfdfffffbbfee, 0xfe00ffcf00013bbf,\n-            0xf3edfdfffff99fee, 0x0002ffcfb0c0399f, 0xc3ffc718d63dc7ec, 0x0000ffc000813dc7,\n-            0xe3fffdfffffddfff, 0x0000ffcf07603ddf, 0xf3effdfffffddfef, 0x0006ffcf40603ddf,\n-            0xfffffffffffddfef, 0xfc00ffcf80f07ddf, 0x2ffbfffffc7fffec, 0x000cffc0ff5f847f,\n-            0x07fffffffffffffe, 0x0000000003ff7fff, 0x3fffffaffffff7d6, 0x00000000f3ff3f5f,\n-            0xc2a003ff03000001, 0xfffe1ffffffffeff, 0x1ffffffffeffffdf, 0x0000000000000040,\n-            0xffffffffffff03ff, 0xffffffff3fffffff, 0xf7ffffffffff20bf, 0xffffffff3d7f3dff,\n-            0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0003fe00e7ffffff,\n-            0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,\n-            0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x001fffff001fdfff, 0x000ddfff000fffff,\n-            0x000003ff308fffff, 0xffffffff03ff3800, 0x01ffffffffffffff, 0xffff07ffffffffff,\n-            0x003fffffffffffff, 0x0fff0fff7fffffff, 0x001f3fffffffffc0, 0xffff0fffffffffff,\n-            0x0000000007ff03ff, 0xffffffff0fffffff, 0x9fffffff7fffffff, 0x3fff008003ff03ff,\n-            0x0000000000000000, 0x000ff80003ff0fff, 0x000fffffffffffff, 0x00ffffffffffffff,\n-            0x3fffffffffffe3ff, 0xe7ffffffffff01ff, 0x07fffffffff70000, 0xfbffffffffffffff,\n-            0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff, 0x1fdc1fff0fcf1fdc,\n-            0x8000000000000000, 0x8002000000100001, 0x000000001fff0000, 0x0001ffe21fff0000,\n-            0xf3fffd503f2ffc84, 0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff,\n-            0xffffffff7fffffff, 0x000ff81fffffffff, 0xffff20bfffffffff, 0x800080ffffffffff,\n-            0x7f7f7f7f007fffff, 0xffffffff7f7f7f7f, 0x1f3efffe000000e0, 0xfffffffee67fffff,\n-            0xf7ffffffffffffff, 0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000,\n-            0x0000ffffffffffff, 0x0000000000001fff, 0x3fffffffffff0000, 0x00000fffffff1fff,\n-            0xbff0ffffffffffff, 0x0003ffffffffffff, 0xfffffffcff800000, 0xfffffffffffff9ff,\n-            0xff8000000000007c, 0x000000ffffffffff, 0xe8ffffff03ff003f, 0xffff3fffffffffff,\n-            0x1fffffff000fffff, 0x7fffffff03ff8001, 0x007fffffffffffff, 0xfc7fffff03ff3fff,\n-            0x007cffff38000007, 0xffff7f7f007e7e7e, 0xffff00fff7ffffff, 0x03ff37ffffffffff,\n-            0xffff000fffffffff, 0x0ffffffffffff87f, 0x0000000003ffffff, 0x5f7ffdffe0f8007f,\n-            0xffffffffffffffdb, 0xfffffffffff80000, 0xfffffff03fffffff, 0x3fffffffffffffff,\n-            0xffffffffffff0000, 0xfffffffffffcffff, 0x03ff0000000000ff, 0x0018ffff0000ffff,\n-            0xaa8a00000000e000, 0x1fffffffffffffff, 0x87fffffe03ff0000, 0xffffffc007fffffe,\n-            0x7fffffffffffffff, 0x000000001cfcfcfc\n-        ],\n-        r4: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 13,\n-            14, 7, 15, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n-        ],\n-        r5: &[\n-            0, 1, 2, 3, 4, 5, 4, 6, 4, 4, 7, 8, 9, 10, 11, 12, 2, 2, 13, 14, 15, 16, 4, 4, 2, 2, 2,\n-            2, 17, 18, 4, 4, 19, 20, 21, 22, 23, 4, 24, 4, 25, 26, 27, 28, 29, 30, 31, 4, 2, 32, 33,\n-            33, 34, 4, 4, 4, 4, 4, 4, 4, 35, 36, 4, 37, 2, 38, 3, 39, 40, 41, 2, 42, 43, 4, 44, 45,\n-            46, 47, 4, 4, 2, 48, 2, 49, 4, 4, 50, 51, 2, 52, 53, 54, 55, 4, 4, 4, 3, 4, 56, 57, 4,\n-            4, 58, 59, 60, 61, 62, 53, 4, 4, 4, 4, 63, 64, 65, 4, 66, 67, 68, 4, 4, 4, 4, 37, 4, 4,\n-            4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 69, 4, 2, 70, 2, 2, 2, 71, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 70, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 72, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 2, 2, 2, 2, 2, 2, 2, 2, 53, 73, 4, 74, 17, 75, 76, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2,\n-            4, 4, 2, 77, 78, 79, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 80, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 33, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 21, 81, 2, 2, 2, 2,\n-            2, 82, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 83, 84, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 85, 86, 4, 4, 87, 4, 4, 4, 4, 4, 4, 2, 88, 89, 90, 91, 92, 2, 2, 2, 2, 93, 94, 95,\n-            96, 97, 98, 4, 4, 4, 4, 4, 4, 4, 4, 99, 100, 101, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 102, 4, 4, 4, 103, 104, 4, 4, 4, 4, 4, 105, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 106, 2, 107, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 108, 109, 110, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 111, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 11,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 112, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 113, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 114, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 115, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\n-        ],\n-        r6: &[\n-            0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,\n-            0x0000000000000000, 0x001fffffffffffff, 0x2000000000000000, 0xffffffff1fffffff,\n-            0x000000010001ffff, 0xffffe000ffffffff, 0x07ffffffffff07ff, 0xffffffff3fffffff,\n-            0x00000000003eff0f, 0xffff03ff3fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff,\n-            0x0000000fffffffff, 0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f,\n-            0x007fffff003fffff, 0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff,\n-            0xc0ffffffffffffff, 0x873ffffffeeff06f, 0x1fffffff00000000, 0x000000001fffffff,\n-            0x0000007ffffffeff, 0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff,\n-            0x00000000000001ff, 0x0007ffffffffffff, 0x03ff00ffffffffff, 0xffff00801fffffff,\n-            0x000000000001ffff, 0x007fffff00000000, 0x8000ffc00000007f, 0x03ff01ffffff0000,\n-            0xffdfffffffffffff, 0x004fffffffff0070, 0x0000000017ff1e1f, 0x40fffffffffbffff,\n-            0xffff01ffbfffbd7f, 0x03ff07ffffffffff, 0xfbedfdfffff99fef, 0x001f1fcfe081399f,\n-            0x00000000c3ff07ff, 0x0000000003ff00bf, 0xff3fffffffffffff, 0x000000003f000001,\n-            0x0000000003ff0011, 0x01ffffffffffffff, 0x00000000000003ff, 0x03ff0fffe7ffffff,\n-            0xffffffff00000000, 0x800003ffffffffff, 0xfffffcff00000000, 0x0000001bfcffffff,\n-            0x7fffffffffffffff, 0xffffffffffff0080, 0x0000000023ffffff, 0xff7ffffffffffdff,\n-            0xfffc000003ff0001, 0x007ffefffffcffff, 0xb47ffffffffffb7f, 0xfffffdbf03ff00ff,\n-            0x000003ff01fb7fff, 0x0000000003ffffff, 0x00007fffffffffff, 0x000000000000000f,\n-            0x000000000000007f, 0x000003ff7fffffff, 0x001f3fffffff0000, 0xe0fffff803ff000f,\n-            0x000000000000ffff, 0xffffffffffff87ff, 0x00000000ffff80ff, 0x0000000b00000000,\n-            0x00ffffffffffffff, 0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff,\n-            0x0000000063ff01ff, 0xf807e3e000000000, 0x00003c0000000fe7, 0x000000000000001c,\n-            0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,\n-            0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,\n-            0xffff7fffffff7fff, 0xfffffdfffffffdff, 0xffffffffffffcff7, 0xf87fffffffffffff,\n-            0x00201fffffffffff, 0x0000fffef8000010, 0x000007dbf9ffff7f, 0x3fff1fffffffffff,\n-            0x00000000000043ff, 0x03ffffffffffffff, 0x00000000007f001f, 0x0000000003ff0fff,\n-            0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x00000000007fffff,\n-            0xffff0003ffffffff, 0x00000001ffffffff, 0x000000003fffffff, 0x0000ffffffffffff\n-        ],\n-    };\n-\n-    pub fn XID_Continue(c: char) -> bool {\n-        XID_Continue_table.lookup(c)\n-    }\n-\n-    const XID_Start_table: &super::BoolTrie = &super::BoolTrie {\n-        r1: [\n-            0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,\n-            0x0000000000000000, 0xb8df000000000000, 0xfffffffbffffd740, 0xffbfffffffffffff,\n-            0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffc03, 0xffffffffffffffff,\n-            0xfffeffffffffffff, 0xffffffff027fffff, 0x00000000000001ff, 0x000787ffffff0000,\n-            0xffffffff00000000, 0xfffec000000007ff, 0xffffffffffffffff, 0x9c00c060002fffff,\n-            0x0000fffffffd0000, 0xffffffffffffe000, 0x0002003fffffffff, 0x043007fffffffc00\n-        ],\n-        r2: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23,\n-            24, 23, 25, 26, 27, 28, 29, 3, 30, 31, 32, 33, 34, 34, 34, 34, 34, 35, 36, 37, 38, 39,\n-            40, 41, 42, 34, 34, 34, 34, 34, 34, 34, 34, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,\n-            54, 55, 56, 57, 58, 59, 60, 3, 61, 62, 63, 64, 65, 66, 67, 68, 34, 34, 34, 3, 34, 34,\n-            34, 34, 69, 70, 71, 72, 3, 73, 74, 3, 75, 76, 77, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 78,\n-            79, 34, 80, 81, 82, 83, 84, 3, 3, 3, 3, 3, 3, 3, 3, 85, 42, 86, 87, 88, 34, 89, 90, 3,\n-            3, 3, 3, 3, 3, 3, 3, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 53, 3, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 91, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 92, 93, 34, 34, 34, 34, 94,\n-            95, 96, 91, 97, 34, 98, 99, 100, 48, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110,\n-            111, 112, 34, 113, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34,\n-            34, 34, 34, 114, 115, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,\n-            3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 34, 34, 34, 34, 34,\n-            116, 34, 117, 118, 119, 120, 121, 34, 122, 34, 34, 123, 124, 125, 126, 3, 127, 34, 128,\n-            129, 130, 131, 132\n-        ],\n-        r3: &[\n-            0x00000110043fffff, 0x000007ff01ffffff, 0x3fdfffff00000000, 0x0000000000000000,\n-            0x23fffffffffffff0, 0xfffe0003ff010000, 0x23c5fdfffff99fe1, 0x10030003b0004000,\n-            0x036dfdfffff987e0, 0x001c00005e000000, 0x23edfdfffffbbfe0, 0x0200000300010000,\n-            0x23edfdfffff99fe0, 0x00020003b0000000, 0x03ffc718d63dc7e8, 0x0000000000010000,\n-            0x23fffdfffffddfe0, 0x0000000307000000, 0x23effdfffffddfe1, 0x0006000340000000,\n-            0x27fffffffffddfe0, 0xfc00000380704000, 0x2ffbfffffc7fffe0, 0x000000000000007f,\n-            0x0005fffffffffffe, 0x2005ffaffffff7d6, 0x00000000f000005f, 0x0000000000000001,\n-            0x00001ffffffffeff, 0x0000000000001f00, 0x800007ffffffffff, 0xffe1c0623c3f0000,\n-            0xffffffff00004003, 0xf7ffffffffff20bf, 0xffffffffffffffff, 0xffffffff3d7f3dff,\n-            0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0000000007ffffff,\n-            0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,\n-            0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x0003ffff0003dfff, 0x0001dfff0003ffff,\n-            0x000fffffffffffff, 0x0000000010800000, 0xffffffff00000000, 0x01ffffffffffffff,\n-            0xffff05ffffffffff, 0x003fffffffffffff, 0x000000007fffffff, 0x001f3fffffff0000,\n-            0xffff0fffffffffff, 0x00000000000003ff, 0xffffffff007fffff, 0x00000000001fffff,\n-            0x0000008000000000, 0x000fffffffffffe0, 0x0000000000000fe0, 0xfc00c001fffffff8,\n-            0x0000003fffffffff, 0x0000000fffffffff, 0x3ffffffffc00e000, 0xe7ffffffffff01ff,\n-            0x046fde0000000000, 0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff,\n-            0x1fdc1fff0fcf1fdc, 0x8002000000000000, 0x000000001fff0000, 0xf3fffd503f2ffc84,\n-            0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff, 0xffffffff7fffffff,\n-            0x000c781fffffffff, 0xffff20bfffffffff, 0x000080ffffffffff, 0x7f7f7f7f007fffff,\n-            0x000000007f7f7f7f, 0x1f3e03fe000000e0, 0xfffffffee07fffff, 0xf7ffffffffffffff,\n-            0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000, 0x0000ffffffffffff,\n-            0x0000000000001fff, 0x3fffffffffff0000, 0x00000c00ffff1fff, 0x80007fffffffffff,\n-            0xffffffff3fffffff, 0xfffffffcff800000, 0xfffffffffffff9ff, 0xff8000000000007c,\n-            0x00000007fffff7bb, 0x000ffffffffffffc, 0x68fc000000000000, 0xffff003ffffffc00,\n-            0x1fffffff0000007f, 0x0007fffffffffff0, 0x7c00ffdf00008000, 0x000001ffffffffff,\n-            0xc47fffff00000ff7, 0x3e62ffffffffffff, 0x001c07ff38000005, 0xffff7f7f007e7e7e,\n-            0xffff00fff7ffffff, 0x00000007ffffffff, 0xffff000fffffffff, 0x0ffffffffffff87f,\n-            0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7ffdffa0f8007f, 0xffffffffffffffdb,\n-            0x0003ffffffffffff, 0xfffffffffff80000, 0xfffffff03fffffff, 0x3fffffffffffffff,\n-            0xffffffffffff0000, 0xfffffffffffcffff, 0x03ff0000000000ff, 0xaa8a000000000000,\n-            0x1fffffffffffffff, 0x07fffffe00000000, 0xffffffc007fffffe, 0x7fffffff3fffffff,\n-            0x000000001cfcfcfc\n-        ],\n-        r4: [\n-            0, 1, 2, 3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 12, 13,\n-            14, 7, 15, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,\n-            5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5\n-        ],\n-        r5: &[\n-            0, 1, 2, 3, 4, 5, 4, 4, 4, 4, 6, 7, 8, 9, 10, 11, 2, 2, 12, 13, 14, 15, 4, 4, 2, 2, 2,\n-            2, 16, 17, 4, 4, 18, 19, 20, 21, 22, 4, 23, 4, 24, 25, 26, 27, 28, 29, 30, 4, 2, 31, 32,\n-            32, 15, 4, 4, 4, 4, 4, 4, 4, 33, 34, 4, 35, 36, 4, 37, 38, 39, 40, 41, 42, 43, 4, 44,\n-            20, 45, 46, 4, 4, 5, 47, 48, 49, 4, 4, 50, 51, 48, 52, 53, 4, 54, 4, 4, 4, 55, 4, 56,\n-            57, 4, 4, 58, 59, 60, 61, 62, 63, 4, 4, 4, 4, 64, 65, 66, 4, 67, 68, 69, 4, 4, 4, 4, 70,\n-            4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 71, 4, 2, 50, 2, 2, 2, 72, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 50, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 73, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 63, 20, 4, 74, 48, 75, 66, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 2, 4, 4, 2, 76, 77, 78, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 79, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            32, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 20, 80, 2,\n-            2, 2, 2, 2, 81, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 82, 83, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 84, 85, 86, 87, 88, 2, 2, 2, 2, 89, 90,\n-            91, 92, 93, 94, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 95, 96, 4, 4, 4, 4, 4, 55, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 97, 2, 98, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 99, 100, 101, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 102, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 2, 2, 2, 10, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 103,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\n-            2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 104, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 105, 4, 4, 4, 4, 4, 4,\n-            4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4\n-        ],\n-        r6: &[\n-            0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,\n-            0x0000000000000000, 0x001fffffffffffff, 0xffffffff1fffffff, 0x000000000001ffff,\n-            0xffffe000ffffffff, 0x003fffffffff07ff, 0xffffffff3fffffff, 0x00000000003eff0f,\n-            0xffff00003fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff, 0x0000000fffffffff,\n-            0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f, 0x007fffff003fffff,\n-            0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff, 0xc0ffffffffffffff,\n-            0x003ffffffeef0001, 0x1fffffff00000000, 0x000000001fffffff, 0x0000001ffffffeff,\n-            0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff, 0x00000000000001ff,\n-            0x0007ffffffffffff, 0xffff00801fffffff, 0x000000000000003f, 0x007fffff00000000,\n-            0x00fffffffffffff8, 0x0000fffffffffff8, 0x000001ffffff0000, 0x0000007ffffffff8,\n-            0x0047ffffffff0010, 0x0007fffffffffff8, 0x000000001400001e, 0x00000ffffffbffff,\n-            0xffff01ffbfffbd7f, 0x23edfdfffff99fe0, 0x00000003e0010000, 0x0000000080000780,\n-            0x0000ffffffffffff, 0x00000000000000b0, 0x00007fffffffffff, 0x000000000f000000,\n-            0x0000000000000010, 0x010007ffffffffff, 0x0000000007ffffff, 0x00000fffffffffff,\n-            0xffffffff00000000, 0x80000000ffffffff, 0xfffffcff00000000, 0x0000000a0001ffff,\n-            0x0407fffffffff801, 0xfffffffff0010000, 0x00000000200003ff, 0x01ffffffffffffff,\n-            0x00007ffffffffdff, 0xfffc000000000001, 0x000000000000ffff, 0x0001fffffffffb7f,\n-            0xfffffdbf00000040, 0x00000000010003ff, 0x0007ffff00000000, 0x0000000003ffffff,\n-            0x000000000000000f, 0x000000000000007f, 0x00003fffffff0000, 0xe0fffff80000000f,\n-            0x00000000000107ff, 0x00000000fff80000, 0x0000000b00000000, 0x00ffffffffffffff,\n-            0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff, 0x0000000003ff01ff,\n-            0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,\n-            0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,\n-            0xffff7fffffff7fff, 0xfffffdfffffffdff, 0x0000000000000ff7, 0x3f801fffffffffff,\n-            0x0000000000004000, 0x000000000000001f, 0x000000000000080f, 0x0af7fe96ffffffef,\n-            0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x00000000007fffff, 0xffff0003ffffffff,\n-            0x00000001ffffffff, 0x000000003fffffff\n-        ],\n-    };\n-\n-    pub fn XID_Start(c: char) -> bool {\n-        XID_Start_table.lookup(c)\n-    }\n-\n }\n \n pub(crate) mod property {\n-    const Pattern_White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n-        r1: &[\n-            0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n-            1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3\n-        ],\n-        r2: &[\n-            0x0000000100003e00, 0x0000000000000000, 0x0000000000000020, 0x000003000000c000\n-        ],\n-    };\n-\n-    pub fn Pattern_White_Space(c: char) -> bool {\n-        Pattern_White_Space_table.lookup(c)\n-    }\n-\n     const White_Space_table: &super::SmallBoolTrie = &super::SmallBoolTrie {\n         r1: &[\n             0, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}, {"sha": "89894f7932d79fac161d5673d6b7778d9dd710f4", "filename": "src/libcore/unicode/unicode.py", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Funicode.py", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibcore%2Funicode%2Funicode.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Funicode%2Funicode.py?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -728,7 +728,7 @@ def generate_property_module(mod, grouped_categories, category_subset):\n \n     yield \"pub(crate) mod %s {\\n\" % mod\n     for cat in sorted(category_subset):\n-        if cat in (\"Cc\", \"White_Space\", \"Pattern_White_Space\"):\n+        if cat in (\"Cc\", \"White_Space\"):\n             generator = generate_small_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n         else:\n             generator = generate_bool_trie(\"%s_table\" % cat, grouped_categories[cat])\n@@ -841,19 +841,18 @@ def main():\n     unicode_data = load_unicode_data(get_path(UnicodeFiles.UNICODE_DATA))\n     load_special_casing(get_path(UnicodeFiles.SPECIAL_CASING), unicode_data)\n \n-    want_derived = {\"XID_Start\", \"XID_Continue\", \"Alphabetic\", \"Lowercase\", \"Uppercase\",\n+    want_derived = {\"Alphabetic\", \"Lowercase\", \"Uppercase\",\n                     \"Cased\", \"Case_Ignorable\", \"Grapheme_Extend\"}\n     derived = load_properties(get_path(UnicodeFiles.DERIVED_CORE_PROPERTIES), want_derived)\n \n     props = load_properties(get_path(UnicodeFiles.PROPS),\n-                            {\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\",\n-                             \"Pattern_White_Space\"})\n+                            {\"White_Space\", \"Join_Control\", \"Noncharacter_Code_Point\"})\n \n     # Category tables\n     for (name, categories, category_subset) in (\n             (\"general_category\", unicode_data.general_categories, [\"N\", \"Cc\"]),\n             (\"derived_property\", derived, want_derived),\n-            (\"property\", props, [\"White_Space\", \"Pattern_White_Space\"])\n+            (\"property\", props, [\"White_Space\"])\n     ):\n         for fragment in generate_property_module(name, categories, category_subset):\n             buf.write(fragment)"}, {"sha": "fff4ec716dfdad4e3453f7217bbbaf118fd4a4d0", "filename": "src/libfmt_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibfmt_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibfmt_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2FCargo.toml?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -10,4 +10,4 @@ path = \"lib.rs\"\n \n [dependencies]\n syntax_pos = { path = \"../libsyntax_pos\" }\n-\n+rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "f9c1be20b8bc132aed7ac28364713e714427a797", "filename": "src/libfmt_macros/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibfmt_macros%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibfmt_macros%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfmt_macros%2Flib.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -597,12 +597,11 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n-    /// Parses a word starting at the current position. A word is considered to\n-    /// be an alphabetic character followed by any number of alphanumeric\n-    /// characters.\n+    /// Parses a word starting at the current position. A word is the same as\n+    /// Rust identifier, except that it can't start with `_` character.\n     fn word(&mut self) -> &'a str {\n         let start = match self.cur.peek() {\n-            Some(&(pos, c)) if c.is_xid_start() => {\n+            Some(&(pos, c)) if c != '_' && rustc_lexer::is_id_start(c) => {\n                 self.cur.next();\n                 pos\n             }\n@@ -611,7 +610,7 @@ impl<'a> Parser<'a> {\n             }\n         };\n         while let Some(&(pos, c)) = self.cur.peek() {\n-            if c.is_xid_continue() {\n+            if rustc_lexer::is_id_continue(c) {\n                 self.cur.next();\n             } else {\n                 return &self.input[start..pos];"}, {"sha": "5883be6e26883b636527e0f5821979aecda787d5", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1136,12 +1136,19 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n         if let Some((expected, found)) = expected_found {\n             match (terr, is_simple_error, expected == found) {\n                 (&TypeError::Sorts(ref values), false, true) => {\n+                    let sort_string = | a_type: Ty<'tcx> |\n+                        if let ty::Opaque(def_id, _) = a_type.sty {\n+                            format!(\" (opaque type at {})\", self.tcx.sess.source_map()\n+                                .mk_substr_filename(self.tcx.def_span(def_id)))\n+                        } else {\n+                            format!(\" ({})\", a_type.sort_string(self.tcx))\n+                        };\n                     diag.note_expected_found_extra(\n                         &\"type\",\n                         expected,\n                         found,\n-                        &format!(\" ({})\", values.expected.sort_string(self.tcx)),\n-                        &format!(\" ({})\", values.found.sort_string(self.tcx)),\n+                        &sort_string(values.expected),\n+                        &sort_string(values.found),\n                     );\n                 }\n                 (_, false, _) => {"}, {"sha": "e13a5ecc2ebfdf3c8549ffd404d52db3b99a5991", "filename": "src/librustc_codegen_llvm/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fbuilder.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -561,7 +561,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n \n         let align = dest.align.restrict_for_offset(dest.layout.field(self.cx(), 0).size);\n         cg_elem.val.store(&mut body_bx,\n-            PlaceRef::new_sized(current, cg_elem.layout, align));\n+            PlaceRef::new_sized_aligned(current, cg_elem.layout, align));\n \n         let next = body_bx.inbounds_gep(current, &[self.const_usize(1)]);\n         body_bx.br(header_bx.llbb());"}, {"sha": "6fbea9646b8a9fe524514000c23c70a6f3ee8f17", "filename": "src/librustc_codegen_llvm/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fcommon.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -349,7 +349,7 @@ impl ConstMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             )};\n             self.const_bitcast(llval, llty)\n         };\n-        PlaceRef::new_sized(llval, layout, alloc.align)\n+        PlaceRef::new_sized(llval, layout)\n     }\n \n     fn const_ptrcast(&self, val: &'ll Value, ty: &'ll Type) -> &'ll Value {"}, {"sha": "fc0b9ffd11d8389a1a4394c654af7bf1d14d93cb", "filename": "src/librustc_codegen_llvm/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fintrinsic.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -101,7 +101,7 @@ impl IntrinsicCallMethods<'tcx> for Builder<'a, 'll, 'tcx> {\n         let name = &*tcx.item_name(def_id).as_str();\n \n         let llret_ty = self.layout_of(ret_ty).llvm_type(self);\n-        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align.abi);\n+        let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout);\n \n         let simple = get_simple_intrinsic(self, name);\n         let llval = match name {"}, {"sha": "c41e46398467a7e37d4becd8edde36a8731705d2", "filename": "src/librustc_codegen_ssa/mir/block.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fblock.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -988,7 +988,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n \n         // Handle both by-ref and immediate tuples.\n         if let Ref(llval, None, align) = tuple.val {\n-            let tuple_ptr = PlaceRef::new_sized(llval, tuple.layout, align);\n+            let tuple_ptr = PlaceRef::new_sized_aligned(llval, tuple.layout, align);\n             for i in 0..tuple.layout.fields.count() {\n                 let field_ptr = tuple_ptr.project_field(bx, i);\n                 let field = bx.load_operand(field_ptr);\n@@ -1202,7 +1202,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n         let llty = bx.backend_type(src.layout);\n         let cast_ptr = bx.pointercast(dst.llval, bx.type_ptr_to(llty));\n         let align = src.layout.align.abi.min(dst.align);\n-        src.val.store(bx, PlaceRef::new_sized(cast_ptr, src.layout, align));\n+        src.val.store(bx, PlaceRef::new_sized_aligned(cast_ptr, src.layout, align));\n     }\n \n "}, {"sha": "8acb3ba06267e96b04b51e3c4268bfb8a8bc1106", "filename": "src/librustc_codegen_ssa/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -289,7 +289,7 @@ pub fn codegen_mir<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n                 if local == mir::RETURN_PLACE && fx.fn_ty.ret.is_indirect() {\n                     debug!(\"alloc: {:?} (return place) -> place\", local);\n                     let llretptr = bx.get_param(0);\n-                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout, layout.align.abi))\n+                    LocalRef::Place(PlaceRef::new_sized(llretptr, layout))\n                 } else if memory_locals.contains(local) {\n                     debug!(\"alloc: {:?} -> place\", local);\n                     if layout.is_unsized() {\n@@ -548,7 +548,7 @@ fn arg_local_refs<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n             let llarg = bx.get_param(llarg_idx);\n             bx.set_value_name(llarg, &name);\n             llarg_idx += 1;\n-            PlaceRef::new_sized(llarg, arg.layout, arg.layout.align.abi)\n+            PlaceRef::new_sized(llarg, arg.layout)\n         } else if arg.is_unsized_indirect() {\n             // As the storage for the indirect argument lives during\n             // the whole function call, we just copy the fat pointer."}, {"sha": "a8ab3ea10ed166b363ff1c200e5c834f1e9f1f53", "filename": "src/librustc_codegen_ssa/mir/operand.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Foperand.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -485,7 +485,6 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         bx.load_operand(PlaceRef::new_sized(\n                             bx.cx().const_undef(bx.cx().type_ptr_to(bx.cx().backend_type(layout))),\n                             layout,\n-                            layout.align.abi,\n                         ))\n                     })\n             }"}, {"sha": "b8e10d34302920bf146d76469c3d97827e91da80", "filename": "src/librustc_codegen_ssa/mir/place.rs", "status": "modified", "additions": 17, "deletions": 5, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Fplace.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -30,6 +30,19 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n     pub fn new_sized(\n         llval: V,\n         layout: TyLayout<'tcx>,\n+    ) -> PlaceRef<'tcx, V> {\n+        assert!(!layout.is_unsized());\n+        PlaceRef {\n+            llval,\n+            llextra: None,\n+            layout,\n+            align: layout.align.abi\n+        }\n+    }\n+\n+    pub fn new_sized_aligned(\n+        llval: V,\n+        layout: TyLayout<'tcx>,\n         align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!layout.is_unsized());\n@@ -45,14 +58,13 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         bx: &mut Bx,\n         llval: V,\n         layout: TyLayout<'tcx>,\n-        align: Align,\n     ) -> PlaceRef<'tcx, V> {\n         assert!(!bx.cx().type_has_metadata(layout.ty));\n         PlaceRef {\n             llval,\n             llextra: None,\n             layout,\n-            align\n+            align: layout.align.abi\n         }\n     }\n \n@@ -64,7 +76,7 @@ impl<'a, 'tcx, V: CodegenObject> PlaceRef<'tcx, V> {\n         debug!(\"alloca({:?}: {:?})\", name, layout);\n         assert!(!layout.is_unsized(), \"tried to statically allocate unsized place\");\n         let tmp = bx.alloca(bx.cx().backend_type(layout), name, layout.align.abi);\n-        Self::new_sized(tmp, layout, layout.align.abi)\n+        Self::new_sized(tmp, layout)\n     }\n \n     /// Returns a place for an indirect reference to an unsized place.\n@@ -482,7 +494,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         let llval = bx.cx().const_undef(\n                             bx.cx().type_ptr_to(bx.cx().backend_type(layout))\n                         );\n-                        PlaceRef::new_sized(llval, layout, layout.align.abi)\n+                        PlaceRef::new_sized(llval, layout)\n                     }\n                 }\n             }\n@@ -498,7 +510,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                 // with a static that is an extern_type.\n                 let layout = cx.layout_of(self.monomorphize(&ty));\n                 let static_ = bx.get_static(*def_id);\n-                PlaceRef::new_thin_place(bx, static_, layout, layout.align.abi)\n+                PlaceRef::new_thin_place(bx, static_, layout)\n             },\n             mir::PlaceRef {\n                 base,"}, {"sha": "e0ad2527229badb3eaa4df852f26db1084c07e11", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -71,7 +71,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                         scratch.storage_dead(&mut bx);\n                     }\n                     OperandValue::Ref(llref, None, align) => {\n-                        let source = PlaceRef::new_sized(llref, operand.layout, align);\n+                        let source = PlaceRef::new_sized_aligned(llref, operand.layout, align);\n                         base::coerce_unsized_into(&mut bx, source, dest);\n                     }\n                     OperandValue::Ref(_, Some(_), _) => {"}, {"sha": "675d3065c5b28b77f755d28580d9747b36ba7c6e", "filename": "src/librustc_lexer/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_lexer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_lexer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2FCargo.toml?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -4,12 +4,12 @@ name = \"rustc_lexer\"\n version = \"0.1.0\"\n edition = \"2018\"\n \n-# Note that this crate purposefully does not depend on other rustc crates\n-[dependencies]\n-unicode-xid = { version = \"0.1.0\", optional = true }\n-\n # Note: do not remove this blank `[lib]` section.\n # This will be used when publishing this crate as `rustc-ap-rustc_lexer`.\n [lib]\n doctest = false\n name = \"rustc_lexer\"\n+\n+# Note that this crate purposefully does not depend on other rustc crates\n+[dependencies]\n+unicode-xid = \"0.2.0\""}, {"sha": "30a5175d8cdb092d59dc19e16080f48e15df19f9", "filename": "src/librustc_lexer/src/lib.rs", "status": "modified", "additions": 72, "deletions": 70, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_lexer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lexer%2Fsrc%2Flib.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,6 +1,5 @@\n-// We want to be able to build this crate with a stable compiler, so feature\n-// flags should be optional.\n-#![cfg_attr(not(feature = \"unicode-xid\"), feature(unicode_internals))]\n+// We want to be able to build this crate with a stable compiler, so no\n+// `#![feature]` attributes should be added.\n \n mod cursor;\n pub mod unescape;\n@@ -103,6 +102,62 @@ pub fn tokenize(mut input: &str) -> impl Iterator<Item = Token> + '_ {\n     })\n }\n \n+// See [UAX #31](http://unicode.org/reports/tr31) for definitions of these\n+// classes.\n+\n+/// True if `c` is considered a whitespace according to Rust language definition.\n+pub fn is_whitespace(c: char) -> bool {\n+    // This is Pattern_White_Space.\n+    //\n+    // Note that this set is stable (ie, it doesn't change with different\n+    // Unicode versions), so it's ok to just hard-code the values.\n+\n+    match c {\n+        // Usual ASCII suspects\n+        | '\\u{0009}' // \\t\n+        | '\\u{000A}' // \\n\n+        | '\\u{000B}' // vertical tab\n+        | '\\u{000C}' // form feed\n+        | '\\u{000D}' // \\r\n+        | '\\u{0020}' // space\n+\n+        // NEXT LINE from latin1\n+        | '\\u{0085}'\n+\n+        // Bidi markers\n+        | '\\u{200E}' // LEFT-TO-RIGHT MARK\n+        | '\\u{200F}' // RIGHT-TO-LEFT MARK\n+\n+        // Dedicated whitespace characters from Unicode\n+        | '\\u{2028}' // LINE SEPARATOR\n+        | '\\u{2029}' // PARAGRAPH SEPARATOR\n+            => true,\n+        _ => false,\n+    }\n+}\n+\n+/// True if `c` is valid as a first character of an identifier.\n+pub fn is_id_start(c: char) -> bool {\n+    // This is XID_Start OR '_' (which formally is not a XID_Start).\n+    // We also add fast-path for ascii idents\n+    ('a' <= c && c <= 'z')\n+        || ('A' <= c && c <= 'Z')\n+        || c == '_'\n+        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n+}\n+\n+/// True if `c` is valid as a non-first character of an identifier.\n+pub fn is_id_continue(c: char) -> bool {\n+    // This is exactly XID_Continue.\n+    // We also add fast-path for ascii idents\n+    ('a' <= c && c <= 'z')\n+        || ('A' <= c && c <= 'Z')\n+        || ('0' <= c && c <= '9')\n+        || c == '_'\n+        || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n+}\n+\n+\n impl Cursor<'_> {\n     fn advance_token(&mut self) -> Token {\n         let first_char = self.bump().unwrap();\n@@ -112,9 +167,9 @@ impl Cursor<'_> {\n                 '*' => self.block_comment(),\n                 _ => Slash,\n             },\n-            c if character_properties::is_whitespace(c) => self.whitespace(),\n+            c if is_whitespace(c) => self.whitespace(),\n             'r' => match (self.nth_char(0), self.nth_char(1)) {\n-                ('#', c1) if character_properties::is_id_start(c1) => self.raw_ident(),\n+                ('#', c1) if is_id_start(c1) => self.raw_ident(),\n                 ('#', _) | ('\"', _) => {\n                     let (n_hashes, started, terminated) = self.raw_double_quoted_string();\n                     let suffix_start = self.len_consumed();\n@@ -159,7 +214,7 @@ impl Cursor<'_> {\n                 }\n                 _ => self.ident(),\n             },\n-            c if character_properties::is_id_start(c) => self.ident(),\n+            c if is_id_start(c) => self.ident(),\n             c @ '0'..='9' => {\n                 let literal_kind = self.number(c);\n                 let suffix_start = self.len_consumed();\n@@ -247,8 +302,8 @@ impl Cursor<'_> {\n     }\n \n     fn whitespace(&mut self) -> TokenKind {\n-        debug_assert!(character_properties::is_whitespace(self.prev()));\n-        while character_properties::is_whitespace(self.nth_char(0)) {\n+        debug_assert!(is_whitespace(self.prev()));\n+        while is_whitespace(self.nth_char(0)) {\n             self.bump();\n         }\n         Whitespace\n@@ -258,19 +313,19 @@ impl Cursor<'_> {\n         debug_assert!(\n             self.prev() == 'r'\n                 && self.nth_char(0) == '#'\n-                && character_properties::is_id_start(self.nth_char(1))\n+                && is_id_start(self.nth_char(1))\n         );\n         self.bump();\n         self.bump();\n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n         RawIdent\n     }\n \n     fn ident(&mut self) -> TokenKind {\n-        debug_assert!(character_properties::is_id_start(self.prev()));\n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        debug_assert!(is_id_start(self.prev()));\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n         Ident\n@@ -315,7 +370,7 @@ impl Cursor<'_> {\n             // integer literal followed by field/method access or a range pattern\n             // (`0..2` and `12.foo()`)\n             '.' if self.nth_char(1) != '.'\n-                && !character_properties::is_id_start(self.nth_char(1)) =>\n+                && !is_id_start(self.nth_char(1)) =>\n             {\n                 // might have stuff after the ., and if it does, it needs to start\n                 // with a number\n@@ -345,15 +400,15 @@ impl Cursor<'_> {\n     fn lifetime_or_char(&mut self) -> TokenKind {\n         debug_assert!(self.prev() == '\\'');\n         let mut starts_with_number = false;\n-        if (character_properties::is_id_start(self.nth_char(0))\n+        if (is_id_start(self.nth_char(0))\n             || self.nth_char(0).is_digit(10) && {\n                 starts_with_number = true;\n                 true\n             })\n             && self.nth_char(1) != '\\''\n         {\n             self.bump();\n-            while character_properties::is_id_continue(self.nth_char(0)) {\n+            while is_id_continue(self.nth_char(0)) {\n                 self.bump();\n             }\n \n@@ -495,66 +550,13 @@ impl Cursor<'_> {\n     }\n \n     fn eat_literal_suffix(&mut self) {\n-        if !character_properties::is_id_start(self.nth_char(0)) {\n+        if !is_id_start(self.nth_char(0)) {\n             return;\n         }\n         self.bump();\n \n-        while character_properties::is_id_continue(self.nth_char(0)) {\n+        while is_id_continue(self.nth_char(0)) {\n             self.bump();\n         }\n     }\n }\n-\n-pub mod character_properties {\n-    // this is Pattern_White_Space\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_whitespace(c: char) -> bool {\n-        match c {\n-            '\\u{0009}' | '\\u{000A}' | '\\u{000B}' | '\\u{000C}' | '\\u{000D}' | '\\u{0020}'\n-            | '\\u{0085}' | '\\u{200E}' | '\\u{200F}' | '\\u{2028}' | '\\u{2029}' => true,\n-            _ => false,\n-        }\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_whitespace(c: char) -> bool {\n-        core::unicode::property::Pattern_White_Space(c)\n-    }\n-\n-    // this is XID_Start OR '_' (which formally is not a XID_Start)\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_id_start(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || c == '_'\n-            || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_start(c))\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_id_start(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || c == '_'\n-            || (c > '\\x7f' && c.is_xid_start())\n-    }\n-\n-    // this is XID_Continue\n-    #[cfg(feature = \"unicode-xid\")]\n-    pub fn is_id_continue(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || ('0' <= c && c <= '9')\n-            || c == '_'\n-            || (c > '\\x7f' && unicode_xid::UnicodeXID::is_xid_continue(c))\n-    }\n-\n-    #[cfg(not(feature = \"unicode-xid\"))]\n-    pub fn is_id_continue(c: char) -> bool {\n-        ('a' <= c && c <= 'z')\n-            || ('A' <= c && c <= 'Z')\n-            || ('0' <= c && c <= '9')\n-            || c == '_'\n-            || (c > '\\x7f' && c.is_xid_continue())\n-    }\n-}"}, {"sha": "f430f01542efe4f23fadf7677ec5dbeba013abb1", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1354,7 +1354,7 @@ impl EncodeContext<'tcx> {\n         let def_id = self.tcx.hir().local_def_id(macro_def.hir_id);\n         Entry {\n             kind: EntryKind::MacroDef(self.lazy(MacroDef {\n-                body: pprust::tokens_to_string(macro_def.body.clone()),\n+                body: pprust::tts_to_string(macro_def.body.clone()),\n                 legacy: macro_def.legacy,\n             })),\n             visibility: self.lazy(ty::Visibility::Public),"}, {"sha": "e02736078b5711d0e7e66e8b9d5857b0834d2234", "filename": "src/librustc_mir/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2FCargo.toml?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -20,6 +20,7 @@ rustc = { path = \"../librustc\" }\n rustc_target = { path = \"../librustc_target\" }\n rustc_data_structures = { path = \"../librustc_data_structures\" }\n rustc_errors = { path = \"../librustc_errors\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_serialize = { path = \"../libserialize\", package = \"serialize\" }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }"}, {"sha": "0d13db2f5a413a9d0b9084bff7d0727e4ebabebd", "filename": "src/librustc_mir/borrow_check/move_errors.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmove_errors.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,5 +1,3 @@\n-use core::unicode::property::Pattern_White_Space;\n-\n use rustc::mir::*;\n use rustc::ty;\n use rustc_errors::{DiagnosticBuilder,Applicability};\n@@ -526,7 +524,7 @@ impl<'a, 'tcx> MirBorrowckCtxt<'a, 'tcx> {\n                         let suggestion;\n                         let to_remove;\n                         if pat_snippet.starts_with(\"mut\")\n-                            && pat_snippet[\"mut\".len()..].starts_with(Pattern_White_Space)\n+                            && pat_snippet[\"mut\".len()..].starts_with(rustc_lexer::is_whitespace)\n                         {\n                             suggestion = pat_snippet[\"mut\".len()..].trim_start();\n                             to_remove = \"&mut\";"}, {"sha": "8f2ce80aafa22de5ec997a495a963933c8464e4f", "filename": "src/librustc_mir/borrow_check/mutability_errors.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmutability_errors.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,4 +1,3 @@\n-use core::unicode::property::Pattern_White_Space;\n use rustc::hir;\n use rustc::hir::Node;\n use rustc::mir::{self, BindingForm, ClearCrossCrate, Local, Location, Body};\n@@ -715,7 +714,7 @@ fn annotate_struct_field(\n fn suggest_ref_mut(tcx: TyCtxt<'_>, binding_span: Span) -> Option<String> {\n     let hi_src = tcx.sess.source_map().span_to_snippet(binding_span).ok()?;\n     if hi_src.starts_with(\"ref\")\n-        && hi_src[\"ref\".len()..].starts_with(Pattern_White_Space)\n+        && hi_src[\"ref\".len()..].starts_with(rustc_lexer::is_whitespace)\n     {\n         let replacement = format!(\"ref mut{}\", &hi_src[\"ref\".len()..]);\n         Some(replacement)"}, {"sha": "f358bb00f4d12a744d5969a00d25572ef18b3c00", "filename": "src/librustc_mir/interpret/place.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Finterpret%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fplace.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -585,8 +585,9 @@ where\n         use rustc::mir::StaticKind;\n \n         Ok(match place_static.kind {\n-            StaticKind::Promoted(promoted, _) => {\n-                let instance = self.frame().instance;\n+            StaticKind::Promoted(promoted, promoted_substs) => {\n+                let substs = self.subst_from_frame_and_normalize_erasing_regions(promoted_substs);\n+                let instance = ty::Instance::new(place_static.def_id, substs);\n                 self.const_eval_raw(GlobalId {\n                     instance,\n                     promoted: Some(promoted),"}, {"sha": "e4b186736e2a199e822868d3519abab101e553bc", "filename": "src/librustc_mir/transform/const_prop.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fconst_prop.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -405,13 +405,16 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                 }\n \n                 let arg = self.eval_operand(arg, source_info)?;\n+                let oflo_check = self.tcx.sess.overflow_checks();\n                 let val = self.use_ecx(source_info, |this| {\n                     let prim = this.ecx.read_immediate(arg)?;\n                     match op {\n                         UnOp::Neg => {\n-                            // Need to do overflow check here: For actual CTFE, MIR\n-                            // generation emits code that does this before calling the op.\n-                            if prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n+                            // We check overflow in debug mode already\n+                            // so should only check in release mode.\n+                            if !oflo_check\n+                            && prim.layout.ty.is_signed()\n+                            && prim.to_bits()? == (1 << (prim.layout.size.bits() - 1)) {\n                                 throw_panic!(OverflowNeg)\n                             }\n                         }\n@@ -485,7 +488,9 @@ impl<'mir, 'tcx> ConstPropagator<'mir, 'tcx> {\n                         Scalar::from_bool(overflow).into(),\n                     )\n                 } else {\n-                    if overflow {\n+                    // We check overflow in debug mode already\n+                    // so should only check in release mode.\n+                    if !self.tcx.sess.overflow_checks() && overflow {\n                         let err = err_panic!(Overflow(op)).into();\n                         let _: Option<()> = self.use_ecx(source_info, |_| Err(err));\n                         return None;"}, {"sha": "fae44836fa821721b1e743cb8452c2dd085195d2", "filename": "src/librustc_target/spec/linux_kernel_base.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Flinux_kernel_base.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,26 @@\n+use crate::spec::{LinkArgs, LinkerFlavor, PanicStrategy, RelroLevel, TargetOptions};\n+use std::default::Default;\n+\n+pub fn opts() -> TargetOptions {\n+    let mut pre_link_args = LinkArgs::new();\n+    pre_link_args.insert(\n+        LinkerFlavor::Gcc,\n+        vec![\"-Wl,--as-needed\".to_string(), \"-Wl,-z,noexecstack\".to_string()],\n+    );\n+\n+    TargetOptions {\n+        disable_redzone: true,\n+        panic_strategy: PanicStrategy::Abort,\n+        stack_probes: true,\n+        eliminate_frame_pointer: false,\n+        linker_is_gnu: true,\n+        position_independent_executables: true,\n+        needs_plt: true,\n+        relro_level: RelroLevel::Full,\n+        relocation_model: \"static\".to_string(),\n+        target_family: Some(\"unix\".to_string()),\n+        pre_link_args,\n+\n+        ..Default::default()\n+    }\n+}"}, {"sha": "503d8a08b6f4ff507687f800af0cd2812aaea5e9", "filename": "src/librustc_target/spec/mod.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -53,6 +53,7 @@ mod freebsd_base;\n mod haiku_base;\n mod hermit_base;\n mod linux_base;\n+mod linux_kernel_base;\n mod linux_musl_base;\n mod openbsd_base;\n mod netbsd_base;\n@@ -386,6 +387,8 @@ supported_targets! {\n     (\"thumbv7neon-linux-androideabi\", thumbv7neon_linux_androideabi),\n     (\"aarch64-linux-android\", aarch64_linux_android),\n \n+    (\"x86_64-linux-kernel\", x86_64_linux_kernel),\n+\n     (\"aarch64-unknown-freebsd\", aarch64_unknown_freebsd),\n     (\"armv6-unknown-freebsd\", armv6_unknown_freebsd),\n     (\"armv7-unknown-freebsd\", armv7_unknown_freebsd),"}, {"sha": "a80b021208ed736185c4c1b3b35b1af015df038f", "filename": "src/librustc_target/spec/x86_64_linux_kernel.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_linux_kernel.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,31 @@\n+// This defines the amd64 target for the Linux Kernel. See the linux-kernel-base module for\n+// generic Linux kernel options.\n+\n+use crate::spec::{LinkerFlavor, Target, TargetResult};\n+\n+pub fn target() -> TargetResult {\n+    let mut base = super::linux_kernel_base::opts();\n+    base.cpu = \"x86-64\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.features =\n+        \"-mmx,-sse,-sse2,-sse3,-ssse3,-sse4.1,-sse4.2,-3dnow,-3dnowa,-avx,-avx2,+soft-float\"\n+            .to_string();\n+    base.code_model = Some(\"kernel\".to_string());\n+    base.pre_link_args.get_mut(&LinkerFlavor::Gcc).unwrap().push(\"-m64\".to_string());\n+\n+    Ok(Target {\n+        // FIXME: Some dispute, the linux-on-clang folks think this should use \"Linux\"\n+        llvm_target: \"x86_64-elf\".to_string(),\n+        target_endian: \"little\".to_string(),\n+        target_pointer_width: \"64\".to_string(),\n+        target_c_int_width: \"32\".to_string(),\n+        data_layout: \"e-m:e-i64:64-f80:128-n8:16:32:64-S128\".to_string(),\n+        target_os: \"none\".to_string(),\n+        target_env: \"gnu\".to_string(),\n+        target_vendor: \"unknown\".to_string(),\n+        arch: \"x86_64\".to_string(),\n+        linker_flavor: LinkerFlavor::Gcc,\n+\n+        options: base,\n+    })\n+}"}, {"sha": "d8d01624f1d56d836f4954efc781ca4da6cb9a5c", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 37, "deletions": 6, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -3687,6 +3687,40 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    /// If `expr` is a `match` expression that has only one non-`!` arm, use that arm's tail\n+    /// expression's `Span`, otherwise return `expr.span`. This is done to give better errors\n+    /// when given code like the following:\n+    /// ```text\n+    /// if false { return 0i32; } else { 1u32 }\n+    /// //                               ^^^^ point at this instead of the whole `if` expression\n+    /// ```\n+    fn get_expr_coercion_span(&self, expr: &hir::Expr) -> syntax_pos::Span {\n+        if let hir::ExprKind::Match(_, arms, _) = &expr.node {\n+            let arm_spans: Vec<Span> = arms.iter().filter_map(|arm| {\n+                self.in_progress_tables\n+                    .and_then(|tables| tables.borrow().node_type_opt(arm.body.hir_id))\n+                    .and_then(|arm_ty| {\n+                        if arm_ty.is_never() {\n+                            None\n+                        } else {\n+                            Some(match &arm.body.node {\n+                                // Point at the tail expression when possible.\n+                                hir::ExprKind::Block(block, _) => block.expr\n+                                    .as_ref()\n+                                    .map(|e| e.span)\n+                                    .unwrap_or(block.span),\n+                                _ => arm.body.span,\n+                            })\n+                        }\n+                    })\n+            }).collect();\n+            if arm_spans.len() == 1 {\n+                return arm_spans[0];\n+            }\n+        }\n+        expr.span\n+    }\n+\n     fn check_block_with_expected(\n         &self,\n         blk: &'tcx hir::Block,\n@@ -3746,12 +3780,9 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             let coerce = ctxt.coerce.as_mut().unwrap();\n             if let Some(tail_expr_ty) = tail_expr_ty {\n                 let tail_expr = tail_expr.unwrap();\n-                let cause = self.cause(tail_expr.span,\n-                                       ObligationCauseCode::BlockTailExpression(blk.hir_id));\n-                coerce.coerce(self,\n-                              &cause,\n-                              tail_expr,\n-                              tail_expr_ty);\n+                let span = self.get_expr_coercion_span(tail_expr);\n+                let cause = self.cause(span, ObligationCauseCode::BlockTailExpression(blk.hir_id));\n+                coerce.coerce(self, &cause, tail_expr, tail_expr_ty);\n             } else {\n                 // Subtle: if there is no explicit tail expression,\n                 // that is typically equivalent to a tail expression"}, {"sha": "309e5575ee403d0082a95b838192f3faf94750af", "filename": "src/librustdoc/html/static/main.js", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fmain.js?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -344,7 +344,7 @@ if (!DOMTokenList.prototype.remove) {\n             var set_fragment = function(name) {\n                 if (browserSupportsHistoryApi()) {\n                     history.replaceState(null, null, \"#\" + name);\n-                    window.hashchange();\n+                    highlightSourceLines(null);\n                 } else {\n                     location.replace(\"#\" + name);\n                 }"}, {"sha": "301946733dc55a24b7f3f12e26e41bf0cb81c3df", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -33,6 +33,7 @@ extern crate rustc_interface;\n extern crate rustc_metadata;\n extern crate rustc_target;\n extern crate rustc_typeck;\n+extern crate rustc_lexer;\n extern crate serialize;\n extern crate syntax;\n extern crate syntax_pos;"}, {"sha": "32044e48b6f99207f94a071ea0d396724922a7a0", "filename": "src/librustdoc/passes/check_code_block_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcheck_code_block_syntax.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -81,7 +81,7 @@ impl<'a, 'tcx> SyntaxChecker<'a, 'tcx> {\n                 // We couldn't calculate the span of the markdown block that had the error, so our\n                 // diagnostics are going to be a bit lacking.\n                 let mut diag = self.cx.sess().struct_span_warn(\n-                    super::span_of_attrs(&item.attrs),\n+                    super::span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n                     \"doc comment contains an invalid Rust code block\",\n                 );\n "}, {"sha": "2951b2ccb2af91c062b96099e64ff15e99dc9a2b", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -465,7 +465,7 @@ fn resolution_failure(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut diag = cx.tcx.struct_span_lint_hir(\n         lint::builtin::INTRA_DOC_LINK_RESOLUTION_FAILURE,\n@@ -517,7 +517,7 @@ fn ambiguity_error(\n         }\n     };\n     let attrs = &item.attrs;\n-    let sp = span_of_attrs(attrs);\n+    let sp = span_of_attrs(attrs).unwrap_or(item.source.span());\n \n     let mut msg = format!(\"`{}` is \", path_str);\n "}, {"sha": "49a34c7e46281a1bd12048917a0b4a902fd5098b", "filename": "src/librustdoc/passes/mod.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Fpasses%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fmod.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -339,7 +339,7 @@ pub fn look_for_tests<'tcx>(\n     find_testable_code(&dox, &mut tests, ErrorCodes::No);\n \n     if check_missing_code == true && tests.found_tests == 0 {\n-        let sp = span_of_attrs(&item.attrs).substitute_dummy(item.source.span());\n+        let sp = span_of_attrs(&item.attrs).unwrap_or(item.source.span());\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::MISSING_DOC_CODE_EXAMPLES,\n             hir_id,\n@@ -352,20 +352,23 @@ pub fn look_for_tests<'tcx>(\n         let mut diag = cx.tcx.struct_span_lint_hir(\n             lint::builtin::PRIVATE_DOC_TESTS,\n             hir_id,\n-            span_of_attrs(&item.attrs),\n+            span_of_attrs(&item.attrs).unwrap_or(item.source.span()),\n             \"Documentation test in private item\");\n         diag.emit();\n     }\n }\n \n /// Returns a span encompassing all the given attributes.\n-crate fn span_of_attrs(attrs: &clean::Attributes) -> Span {\n+crate fn span_of_attrs(attrs: &clean::Attributes) -> Option<Span> {\n     if attrs.doc_strings.is_empty() {\n-        return DUMMY_SP;\n+        return None;\n     }\n     let start = attrs.doc_strings[0].span();\n+    if start == DUMMY_SP {\n+        return None;\n+    }\n     let end = attrs.doc_strings.last().expect(\"No doc strings provided\").span();\n-    start.to(end)\n+    Some(start.to(end))\n }\n \n /// Attempts to match a range of bytes from parsed markdown to a `Span` in the source code.\n@@ -391,7 +394,7 @@ crate fn source_span_for_markdown_range(\n     let snippet = cx\n         .sess()\n         .source_map()\n-        .span_to_snippet(span_of_attrs(attrs))\n+        .span_to_snippet(span_of_attrs(attrs)?)\n         .ok()?;\n \n     let starting_line = markdown[..md_range.start].matches('\\n').count();\n@@ -441,10 +444,8 @@ crate fn source_span_for_markdown_range(\n         }\n     }\n \n-    let sp = span_of_attrs(attrs).from_inner(InnerSpan::new(\n+    Some(span_of_attrs(attrs)?.from_inner(InnerSpan::new(\n         md_range.start + start_bytes,\n         md_range.end + start_bytes + end_bytes,\n-    ));\n-\n-    Some(sp)\n+    )))\n }"}, {"sha": "000d2843adce396917c80f7b4f7f3efd66c92f36", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -763,8 +763,8 @@ impl Tester for Collector {\n             // We use these headings as test names, so it's good if\n             // they're valid identifiers.\n             let name = name.chars().enumerate().map(|(i, c)| {\n-                    if (i == 0 && c.is_xid_start()) ||\n-                        (i != 0 && c.is_xid_continue()) {\n+                    if (i == 0 && rustc_lexer::is_id_start(c)) ||\n+                        (i != 0 && rustc_lexer::is_id_continue(c)) {\n                         c\n                     } else {\n                         '_'"}, {"sha": "cc1c04a83e752859343e4afcf8c6ebb281ac84c0", "filename": "src/libstd/sys/sgx/condvar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fcondvar.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -27,8 +27,7 @@ impl Condvar {\n \n     pub unsafe fn wait(&self, mutex: &Mutex) {\n         let guard = self.inner.lock();\n-        mutex.unlock();\n-        WaitQueue::wait(guard);\n+        WaitQueue::wait(guard, || mutex.unlock());\n         mutex.lock()\n     }\n "}, {"sha": "662da8b3f66850f1a72add0674ad5006e0c84e57", "filename": "src/libstd/sys/sgx/mutex.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fmutex.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -22,7 +22,7 @@ impl Mutex {\n         let mut guard = self.inner.lock();\n         if *guard.lock_var() {\n             // Another thread has the lock, wait\n-            WaitQueue::wait(guard)\n+            WaitQueue::wait(guard, ||{})\n             // Another thread has passed the lock to us\n         } else {\n             // We are just now obtaining the lock\n@@ -83,7 +83,7 @@ impl ReentrantMutex {\n         match guard.lock_var().owner {\n             Some(tcs) if tcs != thread::current() => {\n                 // Another thread has the lock, wait\n-                WaitQueue::wait(guard);\n+                WaitQueue::wait(guard, ||{});\n                 // Another thread has passed the lock to us\n             },\n             _ => {"}, {"sha": "e2f94b1d928e10db38416f8c874fd88fb08c652d", "filename": "src/libstd/sys/sgx/rwlock.rs", "status": "modified", "additions": 20, "deletions": 14, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Frwlock.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -31,7 +31,7 @@ impl RWLock {\n         if *wguard.lock_var() || !wguard.queue_empty() {\n             // Another thread has or is waiting for the write lock, wait\n             drop(wguard);\n-            WaitQueue::wait(rguard);\n+            WaitQueue::wait(rguard, ||{});\n             // Another thread has passed the lock to us\n         } else {\n             // No waiting writers, acquire the read lock\n@@ -62,7 +62,7 @@ impl RWLock {\n         if *wguard.lock_var() || rguard.lock_var().is_some() {\n             // Another thread has the lock, wait\n             drop(rguard);\n-            WaitQueue::wait(wguard);\n+            WaitQueue::wait(wguard, ||{});\n             // Another thread has passed the lock to us\n         } else {\n             // We are just now obtaining the lock\n@@ -97,6 +97,7 @@ impl RWLock {\n             if let Ok(mut wguard) = WaitQueue::notify_one(wguard) {\n                 // A writer was waiting, pass the lock\n                 *wguard.lock_var_mut() = true;\n+                wguard.drop_after(rguard);\n             } else {\n                 // No writers were waiting, the lock is released\n                 rtassert!(rguard.queue_empty());\n@@ -117,21 +118,26 @@ impl RWLock {\n         rguard: SpinMutexGuard<'_, WaitVariable<Option<NonZeroUsize>>>,\n         wguard: SpinMutexGuard<'_, WaitVariable<bool>>,\n     ) {\n-        if let Err(mut wguard) = WaitQueue::notify_one(wguard) {\n-            // No writers waiting, release the write lock\n-            *wguard.lock_var_mut() = false;\n-            if let Ok(mut rguard) = WaitQueue::notify_all(rguard) {\n-                // One or more readers were waiting, pass the lock to them\n-                if let NotifiedTcs::All { count } = rguard.notified_tcs() {\n-                    *rguard.lock_var_mut() = Some(count)\n+        match WaitQueue::notify_one(wguard) {\n+            Err(mut wguard) => {\n+                // No writers waiting, release the write lock\n+                *wguard.lock_var_mut() = false;\n+                if let Ok(mut rguard) = WaitQueue::notify_all(rguard) {\n+                    // One or more readers were waiting, pass the lock to them\n+                    if let NotifiedTcs::All { count } = rguard.notified_tcs() {\n+                        *rguard.lock_var_mut() = Some(count)\n+                    } else {\n+                        unreachable!() // called notify_all\n+                    }\n+                    rguard.drop_after(wguard);\n                 } else {\n-                    unreachable!() // called notify_all\n+                    // No readers waiting, the lock is released\n                 }\n-            } else {\n-                // No readers waiting, the lock is released\n+            },\n+            Ok(wguard) => {\n+                // There was a thread waiting for write, just pass the lock\n+                wguard.drop_after(rguard);\n             }\n-        } else {\n-            // There was a thread waiting for write, just pass the lock\n         }\n     }\n "}, {"sha": "3cb40e509b6b2973b93d0a8c1fa0a08df3b6f8a1", "filename": "src/libstd/sys/sgx/waitqueue.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fwaitqueue.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -98,6 +98,12 @@ impl<'a, T> WaitGuard<'a, T> {\n     pub fn notified_tcs(&self) -> NotifiedTcs {\n         self.notified_tcs\n     }\n+\n+    /// Drop this `WaitGuard`, after dropping another `guard`.\n+    pub fn drop_after<U>(self, guard: U) {\n+        drop(guard);\n+        drop(self);\n+    }\n }\n \n impl<'a, T> Deref for WaitGuard<'a, T> {\n@@ -140,7 +146,7 @@ impl WaitQueue {\n     /// until a wakeup event.\n     ///\n     /// This function does not return until this thread has been awoken.\n-    pub fn wait<T>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>) {\n+    pub fn wait<T, F: FnOnce()>(mut guard: SpinMutexGuard<'_, WaitVariable<T>>, before_wait: F) {\n         // very unsafe: check requirements of UnsafeList::push\n         unsafe {\n             let mut entry = UnsafeListEntry::new(SpinMutex::new(WaitEntry {\n@@ -149,6 +155,7 @@ impl WaitQueue {\n             }));\n             let entry = guard.queue.inner.push(&mut entry);\n             drop(guard);\n+            before_wait();\n             while !entry.lock().wake {\n                 // don't panic, this would invalidate `entry` during unwinding\n                 let eventset = rtunwrap!(Ok, usercalls::wait(EV_UNPARK, WAIT_INDEFINITE));\n@@ -545,7 +552,7 @@ mod tests {\n             assert!(WaitQueue::notify_one(wq2.lock()).is_ok());\n         });\n \n-        WaitQueue::wait(locked);\n+        WaitQueue::wait(locked, ||{});\n \n         t1.join().unwrap();\n     }"}, {"sha": "5de39c8d14d17d2af304947be1489049c0914f49", "filename": "src/libsyntax/diagnostics/plugin.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fdiagnostics%2Fplugin.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -6,7 +6,7 @@ use crate::ext::base::{ExtCtxt, MacEager, MacResult};\n use crate::parse::token::{self, Token};\n use crate::ptr::P;\n use crate::symbol::kw;\n-use crate::tokenstream::{TokenTree};\n+use crate::tokenstream::{TokenTree, TokenStream};\n \n use smallvec::smallvec;\n use syntax_pos::Span;\n@@ -27,12 +27,11 @@ pub type ErrorMap = BTreeMap<Name, ErrorInfo>;\n \n pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                    span: Span,\n-                                   token_tree: &[TokenTree])\n+                                   tts: TokenStream)\n                                    -> Box<dyn MacResult+'cx> {\n-    let code = match token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => code,\n+    assert_eq!(tts.len(), 1);\n+    let code = match tts.into_trees().next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n         _ => unreachable!()\n     };\n \n@@ -62,20 +61,21 @@ pub fn expand_diagnostic_used<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                        span: Span,\n-                                       token_tree: &[TokenTree])\n+                                       tts: TokenStream)\n                                        -> Box<dyn MacResult+'cx> {\n-    let (code, description) = match  token_tree {\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. })\n-        ] => {\n-            (*code, None)\n-        },\n-        [\n-            TokenTree::Token(Token { kind: token::Ident(code, _), .. }),\n-            TokenTree::Token(Token { kind: token::Comma, .. }),\n-            TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..})\n-        ] => {\n-            (*code, Some(*symbol))\n+    assert!(tts.len() == 1 || tts.len() == 3);\n+    let mut cursor = tts.into_trees();\n+    let code = match cursor.next() {\n+        Some(TokenTree::Token(Token { kind: token::Ident(code, _), .. })) => code,\n+        _ => unreachable!()\n+    };\n+    let description = match  (cursor.next(), cursor.next()) {\n+        (None, None) => None,\n+        (\n+            Some(TokenTree::Token(Token { kind: token::Comma, .. })),\n+            Some(TokenTree::Token(Token { kind: token::Literal(token::Lit { symbol, .. }), ..}))\n+        ) => {\n+            Some(symbol)\n         },\n         _ => unreachable!()\n     };\n@@ -121,12 +121,12 @@ pub fn expand_register_diagnostic<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_build_diagnostic_array<'cx>(ecx: &'cx mut ExtCtxt<'_>,\n                                           span: Span,\n-                                          token_tree: &[TokenTree])\n+                                          tts: TokenStream)\n                                           -> Box<dyn MacResult+'cx> {\n-    assert_eq!(token_tree.len(), 3);\n-    let ident = match &token_tree[2] {\n+    assert_eq!(tts.len(), 3);\n+    let ident = match tts.into_trees().nth(2) {\n         // DIAGNOSTICS ident.\n-        &TokenTree::Token(Token { kind: token::Ident(name, _), span })\n+        Some(TokenTree::Token(Token { kind: token::Ident(name, _), span }))\n         => Ident::new(name, span),\n         _ => unreachable!()\n     };"}, {"sha": "109ba041016c6c4eecb1dfe2a5694c8210d4ced3", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 12, "deletions": 15, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -10,7 +10,7 @@ use crate::parse::token;\n use crate::ptr::P;\n use crate::symbol::{kw, sym, Ident, Symbol};\n use crate::{ThinVec, MACRO_ARGUMENTS};\n-use crate::tokenstream::{self, TokenStream, TokenTree};\n+use crate::tokenstream::{self, TokenStream};\n use crate::visit::Visitor;\n \n use errors::{DiagnosticBuilder, DiagnosticId};\n@@ -235,18 +235,18 @@ pub trait TTMacroExpander {\n }\n \n pub type MacroExpanderFn =\n-    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    for<'cx> fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n                 -> Box<dyn MacResult+'cx>;\n \n impl<F> TTMacroExpander for F\n-    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, &[tokenstream::TokenTree])\n+    where F: for<'cx> Fn(&'cx mut ExtCtxt<'_>, Span, TokenStream)\n     -> Box<dyn MacResult+'cx>\n {\n     fn expand<'cx>(\n         &self,\n         ecx: &'cx mut ExtCtxt<'_>,\n         span: Span,\n-        input: TokenStream,\n+        mut input: TokenStream,\n     ) -> Box<dyn MacResult+'cx> {\n         struct AvoidInterpolatedIdents;\n \n@@ -268,10 +268,8 @@ impl<F> TTMacroExpander for F\n                 mut_visit::noop_visit_mac(mac, self)\n             }\n         }\n-\n-        let input: Vec<_> =\n-            input.trees().map(|mut tt| { AvoidInterpolatedIdents.visit_tt(&mut tt); tt }).collect();\n-        (*self)(ecx, span, &input)\n+        AvoidInterpolatedIdents.visit_tts(&mut input);\n+        (*self)(ecx, span, input)\n     }\n }\n \n@@ -677,7 +675,7 @@ impl SyntaxExtension {\n     }\n \n     pub fn dummy_bang(edition: Edition) -> SyntaxExtension {\n-        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: &[TokenTree])\n+        fn expander<'cx>(_: &'cx mut ExtCtxt<'_>, span: Span, _: TokenStream)\n                          -> Box<dyn MacResult + 'cx> {\n             DummyResult::any(span)\n         }\n@@ -811,9 +809,8 @@ impl<'a> ExtCtxt<'a> {\n     pub fn monotonic_expander<'b>(&'b mut self) -> expand::MacroExpander<'b, 'a> {\n         expand::MacroExpander::new(self, true)\n     }\n-\n-    pub fn new_parser_from_tts(&self, tts: &[tokenstream::TokenTree]) -> parser::Parser<'a> {\n-        parse::stream_to_parser(self.parse_sess, tts.iter().cloned().collect(), MACRO_ARGUMENTS)\n+    pub fn new_parser_from_tts(&self, stream: TokenStream) -> parser::Parser<'a> {\n+        parse::stream_to_parser(self.parse_sess, stream, MACRO_ARGUMENTS)\n     }\n     pub fn source_map(&self) -> &'a SourceMap { self.parse_sess.source_map() }\n     pub fn parse_sess(&self) -> &'a parse::ParseSess { self.parse_sess }\n@@ -1019,7 +1016,7 @@ pub fn expr_to_string(cx: &mut ExtCtxt<'_>, expr: P<ast::Expr>, err_msg: &str)\n /// done as rarely as possible).\n pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n                       sp: Span,\n-                      tts: &[tokenstream::TokenTree],\n+                      tts: TokenStream,\n                       name: &str) {\n     if !tts.is_empty() {\n         cx.span_err(sp, &format!(\"{} takes no arguments\", name));\n@@ -1030,7 +1027,7 @@ pub fn check_zero_tts(cx: &ExtCtxt<'_>,\n /// expect exactly one string literal, or emit an error and return `None`.\n pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n                                sp: Span,\n-                               tts: &[tokenstream::TokenTree],\n+                               tts: TokenStream,\n                                name: &str)\n                                -> Option<String> {\n     let mut p = cx.new_parser_from_tts(tts);\n@@ -1053,7 +1050,7 @@ pub fn get_single_str_from_tts(cx: &mut ExtCtxt<'_>,\n /// parsing error, emit a non-fatal error and return `None`.\n pub fn get_exprs_from_tts(cx: &mut ExtCtxt<'_>,\n                           sp: Span,\n-                          tts: &[tokenstream::TokenTree]) -> Option<Vec<P<ast::Expr>>> {\n+                          tts: TokenStream) -> Option<Vec<P<ast::Expr>>> {\n     let mut p = cx.new_parser_from_tts(tts);\n     let mut es = Vec::new();\n     while p.token != token::Eof {"}, {"sha": "4fd0c367288bfa86a35fac6d240b38fce3188177", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -701,7 +701,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n         path: &Path,\n         span: Span,\n     ) -> AstFragment {\n-        let mut parser = self.cx.new_parser_from_tts(&toks.into_trees().collect::<Vec<_>>());\n+        let mut parser = self.cx.new_parser_from_tts(toks);\n         match parser.parse_ast_fragment(kind, false) {\n             Ok(fragment) => {\n                 parser.ensure_complete_parse(path, kind.name(), span);"}, {"sha": "544ec789d80a9d62d7ed9a74465adfb4c67a3008", "filename": "src/libsyntax/ext/proc_macro_server.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fproc_macro_server.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -322,8 +322,7 @@ impl Ident {\n     fn is_valid(string: &str) -> bool {\n         let mut chars = string.chars();\n         if let Some(start) = chars.next() {\n-            (start == '_' || start.is_xid_start())\n-                && chars.all(|cont| cont == '_' || cont.is_xid_continue())\n+            rustc_lexer::is_id_start(start) && chars.all(rustc_lexer::is_id_continue)\n         } else {\n             false\n         }"}, {"sha": "37305055e62a3199a0a119bd9f18f5524a8c8746", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -356,11 +356,7 @@ pub fn tt_to_string(tt: tokenstream::TokenTree) -> String {\n     to_string(|s| s.print_tt(tt, false))\n }\n \n-pub fn tts_to_string(tts: &[tokenstream::TokenTree]) -> String {\n-    tokens_to_string(tts.iter().cloned().collect())\n-}\n-\n-pub fn tokens_to_string(tokens: TokenStream) -> String {\n+pub fn tts_to_string(tokens: TokenStream) -> String {\n     to_string(|s| s.print_tts(tokens, false))\n }\n "}, {"sha": "9b90b31f2d2a2e37542e39ec35af04ef3354c996", "filename": "src/libsyntax/tests.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftests.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -63,7 +63,7 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n             (None, None) => return true,\n             (None, _) => return false,\n             (Some(&a), None) => {\n-                if is_pattern_whitespace(a) {\n+                if rustc_lexer::is_whitespace(a) {\n                     break // trailing whitespace check is out of loop for borrowck\n                 } else {\n                     return false\n@@ -72,11 +72,11 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n             (Some(&a), Some(&b)) => (a, b)\n         };\n \n-        if is_pattern_whitespace(a) && is_pattern_whitespace(b) {\n+        if rustc_lexer::is_whitespace(a) && rustc_lexer::is_whitespace(b) {\n             // skip whitespace for a and b\n             scan_for_non_ws_or_end(&mut a_iter);\n             scan_for_non_ws_or_end(&mut b_iter);\n-        } else if is_pattern_whitespace(a) {\n+        } else if rustc_lexer::is_whitespace(a) {\n             // skip whitespace for a\n             scan_for_non_ws_or_end(&mut a_iter);\n         } else if a == b {\n@@ -88,20 +88,16 @@ crate fn matches_codepattern(a : &str, b : &str) -> bool {\n     }\n \n     // check if a has *only* trailing whitespace\n-    a_iter.all(is_pattern_whitespace)\n+    a_iter.all(rustc_lexer::is_whitespace)\n }\n \n /// Advances the given peekable `Iterator` until it reaches a non-whitespace character\n fn scan_for_non_ws_or_end<I: Iterator<Item = char>>(iter: &mut Peekable<I>) {\n-    while iter.peek().copied().map(|c| is_pattern_whitespace(c)) == Some(true) {\n+    while iter.peek().copied().map(|c| rustc_lexer::is_whitespace(c)) == Some(true) {\n         iter.next();\n     }\n }\n \n-fn is_pattern_whitespace(c: char) -> bool {\n-    rustc_lexer::character_properties::is_whitespace(c)\n-}\n-\n /// Identify a position in the text by the Nth occurrence of a string.\n struct Position {\n     string: &'static str,"}, {"sha": "480553586197e37edd97df27b8cbf96dc7e81922", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -506,7 +506,7 @@ impl Cursor {\n \n impl fmt::Display for TokenStream {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        f.write_str(&pprust::tokens_to_string(self.clone()))\n+        f.write_str(&pprust::tts_to_string(self.clone()))\n     }\n }\n "}, {"sha": "791ee94b4fa774ed1f683f57d969f1e85e6f1c21", "filename": "src/libsyntax_ext/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2FCargo.toml?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -18,3 +18,4 @@ rustc_target = { path = \"../librustc_target\" }\n smallvec = { version = \"0.6.7\", features = [\"union\", \"may_dangle\"] }\n syntax = { path = \"../libsyntax\" }\n syntax_pos = { path = \"../libsyntax_pos\" }\n+rustc_lexer = { path = \"../librustc_lexer\" }"}, {"sha": "328b307361d9e077496e7d120d0fc4e89476b161", "filename": "src/libsyntax_ext/asm.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fasm.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -8,13 +8,12 @@ use errors::DiagnosticBuilder;\n \n use syntax::ast;\n use syntax::ext::base::{self, *};\n-use syntax::parse;\n use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax::symbol::{kw, sym, Symbol};\n use syntax::ast::AsmDialect;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::{self, TokenStream};\n use syntax::{span_err, struct_span_err};\n \n enum State {\n@@ -43,7 +42,7 @@ const OPTIONS: &[Symbol] = &[sym::volatile, sym::alignstack, sym::intel];\n \n pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut inline_asm = match parse_inline_asm(cx, sp, tts) {\n         Ok(Some(inline_asm)) => inline_asm,\n@@ -71,20 +70,20 @@ pub fn expand_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_inline_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<Option<ast::InlineAsm>, DiagnosticBuilder<'a>> {\n     // Split the tts before the first colon, to avoid `asm!(\"x\": y)`  being\n     // parsed as `asm!(z)` with `z = \"x\": y` which is type ascription.\n-    let first_colon = tts.iter()\n+    let first_colon = tts.trees()\n         .position(|tt| {\n-            match *tt {\n+            match tt {\n                 tokenstream::TokenTree::Token(Token { kind: token::Colon, .. }) |\n                 tokenstream::TokenTree::Token(Token { kind: token::ModSep, .. }) => true,\n                 _ => false,\n             }\n         })\n         .unwrap_or(tts.len());\n-    let mut p = cx.new_parser_from_tts(&tts[first_colon..]);\n+    let mut p = cx.new_parser_from_tts(tts.trees().skip(first_colon).collect());\n     let mut asm = kw::Invalid;\n     let mut asm_str_style = None;\n     let mut outputs = Vec::new();\n@@ -110,7 +109,8 @@ fn parse_inline_asm<'a>(\n                     ));\n                 }\n                 // Nested parser, stop before the first colon (see above).\n-                let mut p2 = cx.new_parser_from_tts(&tts[..first_colon]);\n+                let mut p2 =\n+                    cx.new_parser_from_tts(tts.trees().take(first_colon).collect());\n \n                 if p2.token == token::Eof {\n                     let mut err =\n@@ -129,12 +129,8 @@ fn parse_inline_asm<'a>(\n                 // This is most likely malformed.\n                 if p2.token != token::Eof {\n                     let mut extra_tts = p2.parse_all_token_trees()?;\n-                    extra_tts.extend(tts[first_colon..].iter().cloned());\n-                    p = parse::stream_to_parser(\n-                        cx.parse_sess,\n-                        extra_tts.into_iter().collect(),\n-                        Some(\"inline assembly\"),\n-                    );\n+                    extra_tts.extend(tts.trees().skip(first_colon));\n+                    p = cx.new_parser_from_tts(extra_tts.into_iter().collect());\n                 }\n \n                 asm = s;"}, {"sha": "001996e1db718a0f69c0bb2665d58eecc7022c60", "filename": "src/libsyntax_ext/assert.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fassert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fassert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fassert.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -13,7 +13,7 @@ use syntax_pos::{Span, DUMMY_SP};\n pub fn expand_assert<'cx>(\n     cx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn MacResult + 'cx> {\n     let Assert { cond_expr, custom_message } = match parse_assert(cx, sp, tts) {\n         Ok(assert) => assert,\n@@ -59,9 +59,9 @@ struct Assert {\n fn parse_assert<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[TokenTree]\n+    stream: TokenStream\n ) -> Result<Assert, DiagnosticBuilder<'a>> {\n-    let mut parser = cx.new_parser_from_tts(tts);\n+    let mut parser = cx.new_parser_from_tts(stream);\n \n     if parser.token == token::Eof {\n         let mut err = cx.struct_span_err(sp, \"macro requires a boolean expression as an argument\");"}, {"sha": "0342e442df2e9135699389c8c2e7fd71bf9df659", "filename": "src/libsyntax_ext/cfg.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcfg.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -7,14 +7,14 @@ use errors::DiagnosticBuilder;\n use syntax::ast;\n use syntax::ext::base::{self, *};\n use syntax::attr;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax::parse::token;\n use syntax_pos::Span;\n \n pub fn expand_cfg(\n     cx: &mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let sp = cx.with_legacy_ctxt(sp);\n \n@@ -33,7 +33,7 @@ pub fn expand_cfg(\n fn parse_cfg<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Result<ast::MetaItem, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "24f3a66d4ae19efeb8347196a42943b0ab13f2c8", "filename": "src/libsyntax_ext/compile_error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fcompile_error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fcompile_error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fcompile_error.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -2,11 +2,11 @@\n \n use syntax::ext::base::{self, *};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n pub fn expand_compile_error<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"compile_error!\") {\n         None => return DummyResult::any(sp),"}, {"sha": "fc56dff65e4e2f1e196769496db869393679284c", "filename": "src/libsyntax_ext/concat.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fconcat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fconcat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,14 +1,14 @@\n use syntax::ast;\n use syntax::ext::base::{self, DummyResult};\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::string::String;\n \n-pub fn expand_syntax_ext(\n+pub fn expand_concat(\n     cx: &mut base::ExtCtxt<'_>,\n     sp: syntax_pos::Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'static> {\n     let es = match base::get_exprs_from_tts(cx, sp, tts) {\n         Some(e) => e,"}, {"sha": "6391b62b58dc931073406def3f21ffe916849b95", "filename": "src/libsyntax_ext/concat_idents.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fconcat_idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fconcat_idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fconcat_idents.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -6,29 +6,29 @@ use syntax::parse::token::{self, Token};\n use syntax::ptr::P;\n use syntax_pos::Span;\n use syntax_pos::symbol::Symbol;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n-pub fn expand_syntax_ext<'cx>(cx: &'cx mut ExtCtxt<'_>,\n-                              sp: Span,\n-                              tts: &[TokenTree])\n-                              -> Box<dyn base::MacResult + 'cx> {\n+pub fn expand_concat_idents<'cx>(cx: &'cx mut ExtCtxt<'_>,\n+                                 sp: Span,\n+                                 tts: TokenStream)\n+                                 -> Box<dyn base::MacResult + 'cx> {\n     if tts.is_empty() {\n         cx.span_err(sp, \"concat_idents! takes 1 or more arguments.\");\n         return DummyResult::any(sp);\n     }\n \n     let mut res_str = String::new();\n-    for (i, e) in tts.iter().enumerate() {\n+    for (i, e) in tts.into_trees().enumerate() {\n         if i & 1 == 1 {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Comma, .. }) => {}\n                 _ => {\n                     cx.span_err(sp, \"concat_idents! expecting comma.\");\n                     return DummyResult::any(sp);\n                 }\n             }\n         } else {\n-            match *e {\n+            match e {\n                 TokenTree::Token(Token { kind: token::Ident(name, _), .. }) =>\n                     res_str.push_str(&name.as_str()),\n                 _ => {"}, {"sha": "179b7fe00a97ab31f8a1506a570bbc67905a30a9", "filename": "src/libsyntax_ext/env.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fenv.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -7,13 +7,13 @@ use syntax::ast::{self, Ident, GenericArg};\n use syntax::ext::base::{self, *};\n use syntax::symbol::{kw, sym, Symbol};\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use std::env;\n \n pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     let var = match get_single_str_from_tts(cx, sp, tts, \"option_env!\") {\n         None => return DummyResult::any(sp),\n@@ -45,7 +45,7 @@ pub fn expand_option_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n \n pub fn expand_env<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                        sp: Span,\n-                       tts: &[tokenstream::TokenTree])\n+                       tts: TokenStream)\n                        -> Box<dyn base::MacResult + 'cx> {\n     let mut exprs = match get_exprs_from_tts(cx, sp, tts) {\n         Some(ref exprs) if exprs.is_empty() => {"}, {"sha": "ad275f421af494ab49f937f397cb36a07513b38a", "filename": "src/libsyntax_ext/format.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -11,7 +11,7 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax::symbol::{Symbol, sym};\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos::{MultiSpan, Span};\n \n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n@@ -126,7 +126,7 @@ struct Context<'a, 'b> {\n fn parse_args<'a>(\n     ecx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream,\n ) -> Result<(P<ast::Expr>, Vec<P<ast::Expr>>, FxHashMap<Symbol, usize>), DiagnosticBuilder<'a>> {\n     let mut args = Vec::<P<ast::Expr>>::new();\n     let mut names = FxHashMap::<Symbol, usize>::default();\n@@ -794,7 +794,7 @@ impl<'a, 'b> Context<'a, 'b> {\n fn expand_format_args_impl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     mut sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n     nl: bool,\n ) -> Box<dyn base::MacResult + 'cx> {\n     sp = ecx.with_def_site_ctxt(sp);\n@@ -812,15 +812,15 @@ fn expand_format_args_impl<'cx>(\n pub fn expand_format_args<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, false)\n }\n \n pub fn expand_format_args_nl<'cx>(\n     ecx: &'cx mut ExtCtxt<'_>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree],\n+    tts: TokenStream,\n ) -> Box<dyn base::MacResult + 'cx> {\n     expand_format_args_impl(ecx, sp, tts, true)\n }"}, {"sha": "6140f0df58af9be3c595ab3b8676378ebcd6d73d", "filename": "src/libsyntax_ext/global_asm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fglobal_asm.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -16,12 +16,12 @@ use syntax::ext::base::{self, *};\n use syntax::parse::token;\n use syntax::ptr::P;\n use syntax_pos::Span;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use smallvec::smallvec;\n \n pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n                               sp: Span,\n-                              tts: &[tokenstream::TokenTree]) -> Box<dyn base::MacResult + 'cx> {\n+                              tts: TokenStream) -> Box<dyn base::MacResult + 'cx> {\n     match parse_global_asm(cx, sp, tts) {\n         Ok(Some(global_asm)) => {\n             MacEager::items(smallvec![P(ast::Item {\n@@ -45,7 +45,7 @@ pub fn expand_global_asm<'cx>(cx: &'cx mut ExtCtxt<'_>,\n fn parse_global_asm<'a>(\n     cx: &mut ExtCtxt<'a>,\n     sp: Span,\n-    tts: &[tokenstream::TokenTree]\n+    tts: TokenStream\n ) -> Result<Option<ast::GlobalAsm>, DiagnosticBuilder<'a>> {\n     let mut p = cx.new_parser_from_tts(tts);\n "}, {"sha": "26ef80b2b06df741f82aeaa432660e0a898c7215", "filename": "src/libsyntax_ext/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flib.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -67,8 +67,8 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         cfg: cfg::expand_cfg,\n         column: source_util::expand_column,\n         compile_error: compile_error::expand_compile_error,\n-        concat_idents: concat_idents::expand_syntax_ext,\n-        concat: concat::expand_syntax_ext,\n+        concat_idents: concat_idents::expand_concat_idents,\n+        concat: concat::expand_concat,\n         env: env::expand_env,\n         file: source_util::expand_file,\n         format_args_nl: format::expand_format_args_nl,\n@@ -78,7 +78,7 @@ pub fn register_builtin_macros(resolver: &mut dyn syntax::ext::base::Resolver, e\n         include_str: source_util::expand_include_str,\n         include: source_util::expand_include,\n         line: source_util::expand_line,\n-        log_syntax: log_syntax::expand_syntax_ext,\n+        log_syntax: log_syntax::expand_log_syntax,\n         module_path: source_util::expand_mod,\n         option_env: env::expand_option_env,\n         stringify: source_util::expand_stringify,"}, {"sha": "92130bfaf68e35f6ae359e26e0f4635af3ec2767", "filename": "src/libsyntax_ext/log_syntax.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Flog_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Flog_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Flog_syntax.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,11 +1,11 @@\n use syntax::ext::base;\n use syntax::print;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n use syntax_pos;\n \n-pub fn expand_syntax_ext<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n+pub fn expand_log_syntax<'cx>(_cx: &'cx mut base::ExtCtxt<'_>,\n                               sp: syntax_pos::Span,\n-                              tts: &[tokenstream::TokenTree])\n+                              tts: TokenStream)\n                               -> Box<dyn base::MacResult + 'cx> {\n     println!(\"{}\", print::pprust::tts_to_string(tts));\n "}, {"sha": "9dc9d66b86f1d31f8f11e429f404d6da397b2b35", "filename": "src/libsyntax_ext/source_util.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fsource_util.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -4,7 +4,7 @@ use syntax::parse::{self, token, DirectoryOwnership};\n use syntax::print::pprust;\n use syntax::ptr::P;\n use syntax::symbol::Symbol;\n-use syntax::tokenstream;\n+use syntax::tokenstream::TokenStream;\n \n use smallvec::SmallVec;\n use syntax_pos::{self, Pos, Span};\n@@ -16,7 +16,7 @@ use rustc_data_structures::sync::Lrc;\n // a given file into the current one.\n \n /// line!(): expands to the current line number\n-pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"line!\");\n \n@@ -27,7 +27,7 @@ pub fn expand_line(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n }\n \n /* column!(): expands to the current column number */\n-pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"column!\");\n \n@@ -40,7 +40,7 @@ pub fn expand_column(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTr\n /// file!(): expands to the current filename */\n /// The source_file (`loc.file`) contains a bunch more information we could spit\n /// out if we wanted.\n-pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                    -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"file!\");\n \n@@ -49,13 +49,13 @@ pub fn expand_file(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree\n     base::MacEager::expr(cx.expr_str(topmost, Symbol::intern(&loc.file.name.to_string())))\n }\n \n-pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_stringify(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                         -> Box<dyn base::MacResult+'static> {\n     let s = pprust::tts_to_string(tts);\n     base::MacEager::expr(cx.expr_str(sp, Symbol::intern(&s)))\n }\n \n-pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                   -> Box<dyn base::MacResult+'static> {\n     base::check_zero_tts(cx, sp, tts, \"module_path!\");\n     let mod_path = &cx.current_expansion.module.mod_path;\n@@ -67,7 +67,7 @@ pub fn expand_mod(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree]\n /// include! : parse the given file as an expr\n /// This is generally a bad idea because it's going to behave\n /// unhygienically.\n-pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                            -> Box<dyn base::MacResult+'cx> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include!\") {\n         Some(f) => f,\n@@ -105,7 +105,7 @@ pub fn expand_include<'cx>(cx: &'cx mut ExtCtxt<'_>, sp: Span, tts: &[tokenstrea\n }\n \n // include_str! : read the given file, insert it as a literal string expr\n-pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                           -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_str!\") {\n         Some(f) => f,\n@@ -130,7 +130,7 @@ pub fn expand_include_str(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::To\n     }\n }\n \n-pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: &[tokenstream::TokenTree])\n+pub fn expand_include_bytes(cx: &mut ExtCtxt<'_>, sp: Span, tts: TokenStream)\n                             -> Box<dyn base::MacResult+'static> {\n     let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,"}, {"sha": "d83c24046d9e5f08b0480df8c6d8cc8f1f0d75e3", "filename": "src/libsyntax_ext/trace_macros.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Ftrace_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Flibsyntax_ext%2Ftrace_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Ftrace_macros.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,20 +1,27 @@\n use syntax::ext::base::{self, ExtCtxt};\n use syntax::symbol::kw;\n use syntax_pos::Span;\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n \n pub fn expand_trace_macros(cx: &mut ExtCtxt<'_>,\n                            sp: Span,\n-                           tt: &[TokenTree])\n+                           tt: TokenStream)\n                            -> Box<dyn base::MacResult + 'static> {\n-    match tt {\n-        [TokenTree::Token(token)] if token.is_keyword(kw::True) => {\n-            cx.set_trace_macros(true);\n-        }\n-        [TokenTree::Token(token)] if token.is_keyword(kw::False) => {\n-            cx.set_trace_macros(false);\n-        }\n-        _ => cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\"),\n+    let mut cursor = tt.into_trees();\n+    let mut err = false;\n+    let value = match &cursor.next() {\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::True) => true,\n+        Some(TokenTree::Token(token)) if token.is_keyword(kw::False) => false,\n+        _ => {\n+            err = true;\n+            false\n+        },\n+    };\n+    err |= cursor.next().is_some();\n+    if err {\n+        cx.span_err(sp, \"trace_macros! accepts only `true` or `false`\")\n+    } else {\n+        cx.set_trace_macros(value);\n     }\n \n     base::DummyResult::any_valid(sp)"}, {"sha": "5c4a01ee3a74a5e18c59c10b6a318e73da165447", "filename": "src/test/rustdoc/auxiliary/through-proc-macro-aux.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fthrough-proc-macro-aux.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,20 @@\n+// force-host\n+// no-prefer-dynamic\n+#![crate_type = \"proc-macro\"]\n+#![crate_name=\"some_macros\"]\n+\n+extern crate proc_macro;\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn first(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    item // This doesn't erase the spans.\n+}\n+\n+#[proc_macro_attribute]\n+pub fn second(_attr: TokenStream, item: TokenStream) -> TokenStream {\n+    // Make a new `TokenStream` to erase the spans:\n+    let mut out: TokenStream = TokenStream::new();\n+    out.extend(item);\n+    out\n+}"}, {"sha": "348c9eea2dcbf89ca1627a3f6e439f90aed5f8c4", "filename": "src/test/rustdoc/through-proc-macro.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fthrough-proc-macro.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,12 @@\n+// aux-build:through-proc-macro-aux.rs\n+// build-aux-docs\n+#![warn(intra_doc_link_resolution_failure)]\n+extern crate some_macros;\n+\n+#[some_macros::second]\n+pub enum Boom {\n+    /// [Oooops]\n+    Bam,\n+}\n+\n+fn main() {}"}, {"sha": "2b57e9289b5255324b90632f9953d8dc7a11f471", "filename": "src/test/ui-fulldeps/auxiliary/roman-numerals.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fauxiliary%2Froman-numerals.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -15,12 +15,12 @@ extern crate rustc;\n extern crate rustc_driver;\n \n use syntax::parse::token::{self, Token};\n-use syntax::tokenstream::TokenTree;\n+use syntax::tokenstream::{TokenTree, TokenStream};\n use syntax::ext::base::{ExtCtxt, MacResult, DummyResult, MacEager};\n use syntax_pos::Span;\n use rustc_driver::plugin::Registry;\n \n-fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n+fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: TokenStream)\n         -> Box<dyn MacResult + 'static> {\n \n     static NUMERALS: &'static [(&'static str, usize)] = &[\n@@ -36,7 +36,7 @@ fn expand_rn(cx: &mut ExtCtxt, sp: Span, args: &[TokenTree])\n         return DummyResult::any(sp);\n     }\n \n-    let text = match args[0] {\n+    let text = match args.into_trees().next().unwrap() {\n         TokenTree::Token(Token { kind: token::Ident(s, _), .. }) => s.to_string(),\n         _ => {\n             cx.span_err(sp, \"argument should be a single identifier\");"}, {"sha": "ecbcc2a4b496f882e1414066a7e75dff2884adab", "filename": "src/test/ui/consts/const-err2.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -5,6 +5,7 @@\n \n #![feature(rustc_attrs)]\n #![allow(exceeding_bitshifts)]\n+\n #![deny(const_err)]\n \n fn black_box<T>(_: T) {\n@@ -21,7 +22,7 @@ fn main() {\n     let d = 42u8 - (42u8 + 1);\n     //~^ ERROR const_err\n     let _e = [5u8][1];\n-    //~^ ERROR const_err\n+    //~^ ERROR index out of bounds\n     black_box(a);\n     black_box(b);\n     black_box(c);"}, {"sha": "1d84d44dc27b3c834400ad29840aae4a0e9d54d3", "filename": "src/test/ui/consts/const-err2.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err2.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,35 +1,35 @@\n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:15:13\n+  --> $DIR/const-err2.rs:16:13\n    |\n LL |     let a = -std::i8::MIN;\n    |             ^^^^^^^^^^^^^ attempt to negate with overflow\n    |\n note: lint level defined here\n-  --> $DIR/const-err2.rs:8:9\n+  --> $DIR/const-err2.rs:9:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:17:13\n+  --> $DIR/const-err2.rs:18:13\n    |\n LL |     let b = 200u8 + 200u8 + 200u8;\n    |             ^^^^^^^^^^^^^ attempt to add with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:19:13\n+  --> $DIR/const-err2.rs:20:13\n    |\n LL |     let c = 200u8 * 4;\n    |             ^^^^^^^^^ attempt to multiply with overflow\n \n error: this expression will panic at runtime\n-  --> $DIR/const-err2.rs:21:13\n+  --> $DIR/const-err2.rs:22:13\n    |\n LL |     let d = 42u8 - (42u8 + 1);\n    |             ^^^^^^^^^^^^^^^^^ attempt to subtract with overflow\n \n error: index out of bounds: the len is 1 but the index is 1\n-  --> $DIR/const-err2.rs:23:14\n+  --> $DIR/const-err2.rs:24:14\n    |\n LL |     let _e = [5u8][1];\n    |              ^^^^^^^^"}, {"sha": "a9cf04cda7a5aed0be90fdfdd085e39b30b7d1f6", "filename": "src/test/ui/consts/const-err3.rs", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,30 @@\n+// needed because negating int::MIN will behave differently between\n+// optimized compilation and unoptimized compilation and thus would\n+// lead to different lints being emitted\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![feature(rustc_attrs)]\n+#![allow(exceeding_bitshifts)]\n+\n+#![deny(const_err)]\n+\n+fn black_box<T>(_: T) {\n+    unimplemented!()\n+}\n+\n+fn main() {\n+    let a = -std::i8::MIN;\n+    //~^ ERROR const_err\n+    let b = 200u8 + 200u8 + 200u8;\n+    //~^ ERROR const_err\n+    let c = 200u8 * 4;\n+    //~^ ERROR const_err\n+    let d = 42u8 - (42u8 + 1);\n+    //~^ ERROR const_err\n+    let _e = [5u8][1];\n+    //~^ ERROR const_err\n+    black_box(a);\n+    black_box(b);\n+    black_box(c);\n+    black_box(d);\n+}"}, {"sha": "0602707be70408458efe8ba4b1f7f4882e7cab05", "filename": "src/test/ui/consts/const-err3.stderr", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-err3.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,38 @@\n+error: attempt to negate with overflow\n+  --> $DIR/const-err3.rs:16:13\n+   |\n+LL |     let a = -std::i8::MIN;\n+   |             ^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/const-err3.rs:9:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to add with overflow\n+  --> $DIR/const-err3.rs:18:13\n+   |\n+LL |     let b = 200u8 + 200u8 + 200u8;\n+   |             ^^^^^^^^^^^^^\n+\n+error: attempt to multiply with overflow\n+  --> $DIR/const-err3.rs:20:13\n+   |\n+LL |     let c = 200u8 * 4;\n+   |             ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/const-err3.rs:22:13\n+   |\n+LL |     let d = 42u8 - (42u8 + 1);\n+   |             ^^^^^^^^^^^^^^^^^\n+\n+error: index out of bounds: the len is 1 but the index is 1\n+  --> $DIR/const-err3.rs:24:14\n+   |\n+LL |     let _e = [5u8][1];\n+   |              ^^^^^^^^\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "45941398f4b66bfd9c7f5b489ccec99140faa946", "filename": "src/test/ui/consts/const-eval/promoted_errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -5,7 +5,7 @@\n fn main() {\n     println!(\"{}\", 0u32 - 1);\n     let _x = 0u32 - 1;\n-    //~^ ERROR this expression will panic at runtime [const_err]\n+    //~^ ERROR const_err\n     println!(\"{}\", 1/(1-1));\n     //~^ ERROR attempt to divide by zero [const_err]\n     //~| ERROR reaching this expression at runtime will panic or abort [const_err]"}, {"sha": "7adb394144bdd93bc5eea640da8fdd8c3d0a3178", "filename": "src/test/ui/consts/const-eval/promoted_errors2.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,22 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+fn main() {\n+    println!(\"{}\", 0u32 - 1);\n+    //~^ ERROR attempt to subtract with overflow\n+    let _x = 0u32 - 1;\n+    //~^ ERROR attempt to subtract with overflow\n+    println!(\"{}\", 1/(1-1));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(1-1);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+    println!(\"{}\", 1/(false as u32));\n+    //~^ ERROR attempt to divide by zero [const_err]\n+    //~| ERROR reaching this expression at runtime will panic or abort [const_err]\n+    let _x = 1/(false as u32);\n+    //~^ ERROR const_err\n+    //~| ERROR const_err\n+}"}, {"sha": "2819e6e8fdbe0dd7b351e2e4761473c54ac95f44", "filename": "src/test/ui/consts/const-eval/promoted_errors2.stderr", "status": "added", "additions": 68, "deletions": 0, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fpromoted_errors2.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,68 @@\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:6:20\n+   |\n+LL |     println!(\"{}\", 0u32 - 1);\n+   |                    ^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/promoted_errors2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to subtract with overflow\n+  --> $DIR/promoted_errors2.rs:8:14\n+   |\n+LL |     let _x = 0u32 - 1;\n+   |              ^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:10:20\n+   |\n+LL |     println!(\"{}\", 1/(1-1));\n+   |                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:13:14\n+   |\n+LL |     let _x = 1/(1-1);\n+   |              ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^\n+\n+error: reaching this expression at runtime will panic or abort\n+  --> $DIR/promoted_errors2.rs:16:20\n+   |\n+LL |     println!(\"{}\", 1/(false as u32));\n+   |                    ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/promoted_errors2.rs:19:14\n+   |\n+LL |     let _x = 1/(false as u32);\n+   |              ^^^^^^^^^^^^^^^^ attempt to divide by zero\n+\n+error: aborting due to 10 previous errors\n+"}, {"sha": "38911c3dcf69298c4dc2c21a2018865d4a0a3e6d", "filename": "src/test/ui/consts/issue-64059-2.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059-2.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,6 @@\n+// compile-flags: -C overflow-checks=on -O\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "c4c895fef66cff0695daeeceb28dcd49f6ef2cb3", "filename": "src/test/ui/consts/issue-64059.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-64059.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,5 @@\n+// run-pass\n+\n+fn main() {\n+    let _ = -(-0.0);\n+}"}, {"sha": "4637814b277a4fa253d5b1fd92298d488de731c6", "filename": "src/test/ui/issues/issue-8460-const.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,3 +1,5 @@\n+// compile-flags: -O\n+\n #![deny(const_err)]\n \n use std::{isize, i8, i16, i32, i64};"}, {"sha": "7e5a22e651ee53b1991674ca656f70d5c6cf20b9", "filename": "src/test/ui/issues/issue-8460-const.stderr", "status": "modified", "additions": 41, "deletions": 41, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -1,245 +1,245 @@\n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n    |\n note: lint level defined here\n-  --> $DIR/issue-8460-const.rs:1:9\n+  --> $DIR/issue-8460-const.rs:3:9\n    |\n LL | #![deny(const_err)]\n    |         ^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:7:36\n+  --> $DIR/issue-8460-const.rs:9:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:10:36\n+  --> $DIR/issue-8460-const.rs:12:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:13:36\n+  --> $DIR/issue-8460-const.rs:15:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:16:36\n+  --> $DIR/issue-8460-const.rs:18:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide with overflow\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:19:36\n+  --> $DIR/issue-8460-const.rs:21:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to divide with overflow\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:22:36\n+  --> $DIR/issue-8460-const.rs:24:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:25:36\n+  --> $DIR/issue-8460-const.rs:27:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:28:36\n+  --> $DIR/issue-8460-const.rs:30:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:31:36\n+  --> $DIR/issue-8460-const.rs:33:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to divide by zero\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:34:36\n+  --> $DIR/issue-8460-const.rs:36:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to divide by zero\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:37:36\n+  --> $DIR/issue-8460-const.rs:39:36\n    |\n LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:40:36\n+  --> $DIR/issue-8460-const.rs:42:36\n    |\n LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:43:36\n+  --> $DIR/issue-8460-const.rs:45:36\n    |\n LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:46:36\n+  --> $DIR/issue-8460-const.rs:48:36\n    |\n LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with overflow\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:49:36\n+  --> $DIR/issue-8460-const.rs:51:36\n    |\n LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n    |                                    ^^^^^^^^^^^^^ attempt to calculate the remainder with overflow\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:52:36\n+  --> $DIR/issue-8460-const.rs:54:36\n    |\n LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n    |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:55:36\n+  --> $DIR/issue-8460-const.rs:57:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n    |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:58:36\n+  --> $DIR/issue-8460-const.rs:60:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:61:36\n+  --> $DIR/issue-8460-const.rs:63:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n \n error: attempt to calculate the remainder with a divisor of zero\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^\n \n error: this expression will panic at runtime\n-  --> $DIR/issue-8460-const.rs:64:36\n+  --> $DIR/issue-8460-const.rs:66:36\n    |\n LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n    |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero"}, {"sha": "c3f53e3298b2b40eb4c68c2d2d2499a20aad6459", "filename": "src/test/ui/issues/issue-8460-const2.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,59 @@\n+// compile-flags: -C overflow-checks=on -O\n+\n+#![deny(const_err)]\n+\n+use std::{isize, i8, i16, i32, i64};\n+use std::thread;\n+\n+fn main() {\n+    assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+    //~^ ERROR attempt to divide with overflow\n+    assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+    //~^ ERROR attempt to divide by zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with overflow\n+    assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+    assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+    //~^ ERROR attempt to calculate the remainder with a divisor of zero\n+    //~| ERROR this expression will panic at runtime\n+}"}, {"sha": "b688ec136779487dbca7b86cd1bddbcde4c21e60", "filename": "src/test/ui/issues/issue-8460-const2.stderr", "status": "added", "additions": 188, "deletions": 0, "changes": 188, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8460-const2.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -0,0 +1,188 @@\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:9:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+   |\n+note: lint level defined here\n+  --> $DIR/issue-8460-const2.rs:3:9\n+   |\n+LL | #![deny(const_err)]\n+   |         ^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:11:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:13:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:15:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide with overflow\n+  --> $DIR/issue-8460-const2.rs:17:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN / -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:19:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize / 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:22:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 / 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:25:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:28:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to divide by zero\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:31:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 / 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to divide by zero\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:34:36\n+   |\n+LL |     assert!(thread::spawn(move|| { isize::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:36:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i8::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:38:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i16::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:40:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i32::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with overflow\n+  --> $DIR/issue-8460-const2.rs:42:36\n+   |\n+LL |     assert!(thread::spawn(move|| { i64::MIN % -1; }).join().is_err());\n+   |                                    ^^^^^^^^^^^^^\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:44:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1isize % 0; }).join().is_err());\n+   |                                    ^^^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:47:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i8 % 0; }).join().is_err());\n+   |                                    ^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:50:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i16 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:53:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i32 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: attempt to calculate the remainder with a divisor of zero\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^\n+\n+error: this expression will panic at runtime\n+  --> $DIR/issue-8460-const2.rs:56:36\n+   |\n+LL |     assert!(thread::spawn(move|| { 1i64 % 0; }).join().is_err());\n+   |                                    ^^^^^^^^ attempt to calculate the remainder with a divisor of zero\n+\n+error: aborting due to 30 previous errors\n+"}, {"sha": "58109be447e0727d3e86b7360400f4355cd94a4f", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.rs?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -17,10 +17,10 @@ fn bar() -> impl std::fmt::Display {\n \n fn baz() -> impl std::fmt::Display {\n     if false {\n-    //~^ ERROR mismatched types\n         return 0i32;\n     } else {\n         1u32\n+        //~^ ERROR mismatched types\n     }\n }\n \n@@ -33,4 +33,33 @@ fn qux() -> impl std::fmt::Display {\n     }\n }\n \n+fn bat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => return 0i32,\n+        _ => 1u32,\n+        //~^ ERROR mismatched types\n+    }\n+}\n+\n+fn can() -> impl std::fmt::Display {\n+    match 13 {\n+    //~^ ERROR mismatched types\n+        0 => return 0i32,\n+        1 => 1u32,\n+        _ => 2u32,\n+    }\n+}\n+\n+fn cat() -> impl std::fmt::Display {\n+    match 13 {\n+        0 => {\n+            return 0i32;\n+        }\n+        _ => {\n+            1u32\n+            //~^ ERROR mismatched types\n+        }\n+    }\n+}\n+\n fn main() {}"}, {"sha": "314ff84ae3c4696dc1c79ec4296836f4edc551ed", "filename": "src/test/ui/point-to-type-err-cause-on-impl-trait-return.stderr", "status": "modified", "additions": 56, "deletions": 12, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpoint-to-type-err-cause-on-impl-trait-return.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -29,18 +29,16 @@ LL |         return 1u32;\n               found type `u32`\n \n error[E0308]: mismatched types\n-  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:19:5\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:22:9\n    |\n-LL |   fn baz() -> impl std::fmt::Display {\n-   |               ---------------------- expected because this return type...\n-LL | /     if false {\n-LL | |\n-LL | |         return 0i32;\n-   | |                ---- ...is found to be `i32` here\n-LL | |     } else {\n-LL | |         1u32\n-LL | |     }\n-   | |_____^ expected i32, found u32\n+LL | fn baz() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     if false {\n+LL |         return 0i32;\n+   |                ---- ...is found to be `i32` here\n+LL |     } else {\n+LL |         1u32\n+   |         ^^^^ expected i32, found u32\n    |\n    = note: expected type `i32`\n               found type `u32`\n@@ -61,6 +59,52 @@ LL | |     }\n    = note: expected type `i32`\n               found type `u32`\n \n-error: aborting due to 4 previous errors\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:39:14\n+   |\n+LL | fn bat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+LL |     match 13 {\n+LL |         0 => return 0i32,\n+   |                     ---- ...is found to be `i32` here\n+LL |         _ => 1u32,\n+   |              ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:45:5\n+   |\n+LL |   fn can() -> impl std::fmt::Display {\n+   |               ---------------------- expected because this return type...\n+LL | /     match 13 {\n+LL | |\n+LL | |         0 => return 0i32,\n+   | |                     ---- ...is found to be `i32` here\n+LL | |         1 => 1u32,\n+LL | |         _ => 2u32,\n+LL | |     }\n+   | |_____^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/point-to-type-err-cause-on-impl-trait-return.rs:59:13\n+   |\n+LL | fn cat() -> impl std::fmt::Display {\n+   |             ---------------------- expected because this return type...\n+...\n+LL |             return 0i32;\n+   |                    ---- ...is found to be `i32` here\n+...\n+LL |             1u32\n+   |             ^^^^ expected i32, found u32\n+   |\n+   = note: expected type `i32`\n+              found type `u32`\n+\n+error: aborting due to 7 previous errors\n \n For more information about this error, try `rustc --explain E0308`."}, {"sha": "450cbd4799fdc05b8ad5e8119f10ad1adb319f92", "filename": "src/test/ui/suggestions/opaque-type-error.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/618768492f0c731fcb770dc2d178abe840846419/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fopaque-type-error.stderr?ref=618768492f0c731fcb770dc2d178abe840846419", "patch": "@@ -10,8 +10,8 @@ LL | |         thing_two()\n LL | |     }.await\n    | |_____- if and else have incompatible types\n    |\n-   = note: expected type `impl std::future::Future` (opaque type)\n-              found type `impl std::future::Future` (opaque type)\n+   = note: expected type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:8:19>)\n+              found type `impl std::future::Future` (opaque type at <$DIR/opaque-type-error.rs:12:19>)\n    = note: distinct uses of `impl Trait` result in different opaque types\n    = help: if both `Future`s have the same `Output` type, consider `.await`ing on both of them\n "}]}