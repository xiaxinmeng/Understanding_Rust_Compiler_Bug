{"sha": "e4b9625b87c4d3b5845ea5660cf84739de224192", "node_id": "C_kwDOAAsO6NoAKGU0Yjk2MjViODdjNGQzYjU4NDVlYTU2NjBjZjg0NzM5ZGUyMjQxOTI", "commit": {"author": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-06-17T09:53:29Z"}, "committer": {"name": "Alan Egerton", "email": "eggyal@gmail.com", "date": "2022-07-05T21:25:15Z"}, "message": "Add #[derive(TypeVisitable)]", "tree": {"sha": "932111ee5ad67cb91e90508f290f5649b62cd9cf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/932111ee5ad67cb91e90508f290f5649b62cd9cf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e4b9625b87c4d3b5845ea5660cf84739de224192", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEm/Nz5g9hEBdpmKVOB8rDzKfgZD8FAmLErEUACgkQB8rDzKfg\nZD/gZBAAik2M26Pito8LG7NRFR5OxCmKdliNzVLLJc7kTctglZkOZ6J7JL4H7Fyf\n/1kmwKacAkdrHrQYm3koFHIaQOBWQ5iyoUKjyo+YiZsV94H1Q24+LJhDlopbGL6E\nQpWuykb9u4pG8E3gph1cMGUGumefNrlrBdmUvEScxva/6HYwYOcmj9HCpLvshmpa\nhTrvXF1jbKHalSzsgcQsKKsSq/xDoNg9zXi4MvqFCOoTHmWGHg7cXN3VjOj9a2c3\nk2NYaLqoCxw7R/TYy2oPriEzSowjUUn6Zb7S+K1d23JpucouO1nbArYiPsaC3nHK\nidRqVNEYo1hAwyJh7KMYHWS5VuX6KubZcSOCaPdEiCI+Z7WGDKrsOzSBk/89Xlx5\nrDtUfTs0YpK46OEVIyyTj4MSK3DSrXr6WT22nl0oagd0SdEtXVeDQajTLVsahmV4\nFZlK1MGJNBiw1D1oRhIyf+NsDcgFyaHfJFAX6+tvixsIrrJ+8csIiKQmI8aheMbq\nYYyKJ5YJHjqb+l/ngHqauSoXIB9KX793On+RqYtAIKhrkTV9kkEaTjNXbXtFpuX3\nF9O43+nHtDYTE/Iztx557V8U5jURAacH9PyQ8t/6Su9NwEa/XFyzLGv9aTpMizrc\nivbRbS2BJtHKQkVxyr90AAo0sSnC8OpfwtyxBz46rxC3RP+DujY=\n=cQdt\n-----END PGP SIGNATURE-----", "payload": "tree 932111ee5ad67cb91e90508f290f5649b62cd9cf\nparent bca894909cdb49b510dc6f60edbfa1465a948d09\nauthor Alan Egerton <eggyal@gmail.com> 1655459609 +0100\ncommitter Alan Egerton <eggyal@gmail.com> 1657056315 +0100\n\nAdd #[derive(TypeVisitable)]\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e4b9625b87c4d3b5845ea5660cf84739de224192", "html_url": "https://github.com/rust-lang/rust/commit/e4b9625b87c4d3b5845ea5660cf84739de224192", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e4b9625b87c4d3b5845ea5660cf84739de224192/comments", "author": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eggyal", "id": 3089613, "node_id": "MDQ6VXNlcjMwODk2MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3089613?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eggyal", "html_url": "https://github.com/eggyal", "followers_url": "https://api.github.com/users/eggyal/followers", "following_url": "https://api.github.com/users/eggyal/following{/other_user}", "gists_url": "https://api.github.com/users/eggyal/gists{/gist_id}", "starred_url": "https://api.github.com/users/eggyal/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eggyal/subscriptions", "organizations_url": "https://api.github.com/users/eggyal/orgs", "repos_url": "https://api.github.com/users/eggyal/repos", "events_url": "https://api.github.com/users/eggyal/events{/privacy}", "received_events_url": "https://api.github.com/users/eggyal/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bca894909cdb49b510dc6f60edbfa1465a948d09", "url": "https://api.github.com/repos/rust-lang/rust/commits/bca894909cdb49b510dc6f60edbfa1465a948d09", "html_url": "https://github.com/rust-lang/rust/commit/bca894909cdb49b510dc6f60edbfa1465a948d09"}], "stats": {"total": 404, "additions": 183, "deletions": 221}, "files": [{"sha": "d96cc28980871cec51d971119729ac4a219ba739", "filename": "compiler/rustc_infer/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -318,7 +318,7 @@ pub struct InferCtxt<'a, 'tcx> {\n }\n \n /// See the `error_reporting` module for more details.\n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable)]\n pub enum ValuePairs<'tcx> {\n     Regions(ExpectedFound<ty::Region<'tcx>>),\n     Terms(ExpectedFound<ty::Term<'tcx>>),"}, {"sha": "c5747ecf702a70e76b1648173bb005a4363e799c", "filename": "compiler/rustc_infer/src/infer/region_constraints/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fregion_constraints%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -165,7 +165,7 @@ pub struct Verify<'tcx> {\n     pub bound: VerifyBound<'tcx>,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub enum GenericKind<'tcx> {\n     Param(ty::ParamTy),\n     Projection(ty::ProjectionTy<'tcx>),\n@@ -272,7 +272,7 @@ pub enum VerifyBound<'tcx> {\n ///     }\n /// }\n /// ```\n-#[derive(Debug, Copy, Clone, TypeFoldable)]\n+#[derive(Debug, Copy, Clone, TypeFoldable, TypeVisitable)]\n pub struct VerifyIfEq<'tcx> {\n     /// Type which must match the generic `G`\n     pub ty: Ty<'tcx>,"}, {"sha": "932e597509f9990631cb4d05b8b5d73a87282c0e", "filename": "compiler/rustc_infer/src/traits/project.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Ftraits%2Fproject.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -20,7 +20,7 @@ pub struct MismatchedProjectionTypes<'tcx> {\n     pub err: ty::error::TypeError<'tcx>,\n }\n \n-#[derive(Clone, TypeFoldable)]\n+#[derive(Clone, TypeFoldable, TypeVisitable)]\n pub struct Normalized<'tcx, T> {\n     pub value: T,\n     pub obligations: Vec<PredicateObligation<'tcx>>,"}, {"sha": "ab1d6a439cd2d753616f6f9879fb207e52cc0f1c", "filename": "compiler/rustc_macros/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Flib.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -18,6 +18,7 @@ mod query;\n mod serialize;\n mod symbols;\n mod type_foldable;\n+mod type_visitable;\n \n #[proc_macro]\n pub fn rustc_queries(input: TokenStream) -> TokenStream {\n@@ -121,6 +122,7 @@ decl_derive!([TyEncodable] => serialize::type_encodable_derive);\n decl_derive!([MetadataDecodable] => serialize::meta_decodable_derive);\n decl_derive!([MetadataEncodable] => serialize::meta_encodable_derive);\n decl_derive!([TypeFoldable, attributes(type_foldable)] => type_foldable::type_foldable_derive);\n+decl_derive!([TypeVisitable, attributes(type_visitable)] => type_visitable::type_visitable_derive);\n decl_derive!([Lift, attributes(lift)] => lift::lift_derive);\n decl_derive!(\n     [SessionDiagnostic, attributes("}, {"sha": "23e619221aab7e289f0decb098302e4e315df55d", "filename": "compiler/rustc_macros/src/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_foldable.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -11,11 +11,6 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n     }\n \n     s.add_bounds(synstructure::AddBounds::Generics);\n-    let body_visit = s.each(|bind| {\n-        quote! {\n-            ::rustc_middle::ty::fold::TypeFoldable::visit_with(#bind, __folder)?;\n-        }\n-    });\n     s.bind_with(|_| synstructure::BindStyle::Move);\n     let body_fold = s.each_variant(|vi| {\n         let bindings = vi.bindings();\n@@ -36,14 +31,6 @@ pub fn type_foldable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::\n             ) -> Result<Self, __F::Error> {\n                 Ok(match self { #body_fold })\n             }\n-\n-            fn visit_with<__F: ::rustc_middle::ty::fold::TypeVisitor<'tcx>>(\n-                &self,\n-                __folder: &mut __F\n-            ) -> ::std::ops::ControlFlow<__F::BreakTy> {\n-                match *self { #body_visit }\n-                ::std::ops::ControlFlow::CONTINUE\n-            }\n         },\n     )\n }"}, {"sha": "14e6aa6e0c17baec8b57e251f08a96980c71b11a", "filename": "compiler/rustc_macros/src/type_visitable.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Ftype_visitable.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -0,0 +1,33 @@\n+use quote::quote;\n+use syn::parse_quote;\n+\n+pub fn type_visitable_derive(mut s: synstructure::Structure<'_>) -> proc_macro2::TokenStream {\n+    if let syn::Data::Union(_) = s.ast().data {\n+        panic!(\"cannot derive on union\")\n+    }\n+\n+    if !s.ast().generics.lifetimes().any(|lt| lt.lifetime.ident == \"tcx\") {\n+        s.add_impl_generic(parse_quote! { 'tcx });\n+    }\n+\n+    s.add_bounds(synstructure::AddBounds::Generics);\n+    let body_visit = s.each(|bind| {\n+        quote! {\n+            ::rustc_middle::ty::visit::TypeVisitable::visit_with(#bind, __visitor)?;\n+        }\n+    });\n+    s.bind_with(|_| synstructure::BindStyle::Move);\n+\n+    s.bound_impl(\n+        quote!(::rustc_middle::ty::visit::TypeVisitable<'tcx>),\n+        quote! {\n+            fn visit_with<__V: ::rustc_middle::ty::visit::TypeVisitor<'tcx>>(\n+                &self,\n+                __visitor: &mut __V\n+            ) -> ::std::ops::ControlFlow<__V::BreakTy> {\n+                match *self { #body_visit }\n+                ::std::ops::ControlFlow::CONTINUE\n+            }\n+        },\n+    )\n+}"}, {"sha": "83d3b0100b844b0efadcef26f6966bf95aa5968f", "filename": "compiler/rustc_middle/src/hir/place.rs", "status": "modified", "additions": 10, "deletions": 38, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fhir%2Fplace.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -4,18 +4,8 @@ use crate::ty::Ty;\n use rustc_hir::HirId;\n use rustc_target::abi::VariantIdx;\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum PlaceBase {\n     /// A temporary variable.\n     Rvalue,\n@@ -27,18 +17,8 @@ pub enum PlaceBase {\n     Upvar(ty::UpvarId),\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ProjectionKind {\n     /// A dereference of a pointer, reference or `Box<T>` of the given type.\n     Deref,\n@@ -58,18 +38,8 @@ pub enum ProjectionKind {\n     Subslice,\n }\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Projection<'tcx> {\n     /// Type after the projection is applied.\n     pub ty: Ty<'tcx>,\n@@ -81,7 +51,8 @@ pub struct Projection<'tcx> {\n /// A `Place` represents how a value is located in memory.\n ///\n /// This is an HIR version of [`rustc_middle::mir::Place`].\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Place<'tcx> {\n     /// The type of the `PlaceBase`\n     pub base_ty: Ty<'tcx>,\n@@ -94,7 +65,8 @@ pub struct Place<'tcx> {\n /// A `PlaceWithHirId` represents how a value is located in memory.\n ///\n /// This is an HIR version of [`rustc_middle::mir::Place`].\n-#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct PlaceWithHirId<'tcx> {\n     /// `HirId` of the expression or pattern producing this value.\n     pub hir_id: HirId,"}, {"sha": "77b43576af72c10ece8a5f5c7c5a7db7463c1038", "filename": "compiler/rustc_middle/src/infer/canonical.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fcanonical.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -34,7 +34,7 @@ use std::ops::Index;\n /// variables have been rewritten to \"canonical vars\". These are\n /// numbered starting from 0 in order of first appearance.\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct Canonical<'tcx, V> {\n     pub max_universe: ty::UniverseIndex,\n     pub variables: CanonicalVarInfos<'tcx>,\n@@ -53,7 +53,7 @@ pub type CanonicalVarInfos<'tcx> = &'tcx List<CanonicalVarInfo<'tcx>>;\n /// variables. You will need to supply it later to instantiate the\n /// canonicalized query response.\n #[derive(Clone, Debug, PartialEq, Eq, Hash, TyDecodable, TyEncodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalVarValues<'tcx> {\n     pub var_values: IndexVec<BoundVar, GenericArg<'tcx>>,\n }\n@@ -173,7 +173,7 @@ pub enum CanonicalTyVarKind {\n /// After we execute a query with a canonicalized key, we get back a\n /// `Canonical<QueryResponse<..>>`. You can use\n /// `instantiate_query_result` to access the data in this result.\n-#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct QueryResponse<'tcx, R> {\n     pub var_values: CanonicalVarValues<'tcx>,\n     pub region_constraints: QueryRegionConstraints<'tcx>,\n@@ -187,7 +187,7 @@ pub struct QueryResponse<'tcx, R> {\n     pub value: R,\n }\n \n-#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct QueryRegionConstraints<'tcx> {\n     pub outlives: Vec<QueryOutlivesConstraint<'tcx>>,\n     pub member_constraints: Vec<MemberConstraint<'tcx>>,"}, {"sha": "55e00c4c0d8ef813093915356477db9dbc2e2e61", "filename": "compiler/rustc_middle/src/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Finfer%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -13,7 +13,7 @@ use rustc_span::Span;\n /// ```text\n /// R0 member of [O1..On]\n /// ```\n-#[derive(Debug, Clone, HashStable, TypeFoldable, Lift)]\n+#[derive(Debug, Clone, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct MemberConstraint<'tcx> {\n     /// The `DefId` of the opaque type causing this constraint: used for error reporting.\n     pub opaque_type_def_id: DefId,"}, {"sha": "efa9464529e71ca14473852c3b6abb4cffdb04db", "filename": "compiler/rustc_middle/src/mir/coverage.rs", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fcoverage.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -100,7 +100,7 @@ impl From<InjectedExpressionId> for ExpressionOperandId {\n     }\n }\n \n-#[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable, TypeVisitable)]\n pub enum CoverageKind {\n     Counter {\n         function_source_hash: u64,\n@@ -148,18 +148,8 @@ impl Debug for CoverageKind {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    TyEncodable,\n-    TyDecodable,\n-    Hash,\n-    HashStable,\n-    TypeFoldable,\n-    PartialEq,\n-    Eq,\n-    PartialOrd,\n-    Ord\n-)]\n+#[derive(Clone, TyEncodable, TyDecodable, Hash, HashStable, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CodeRegion {\n     pub file_name: Symbol,\n     pub start_line: u32,\n@@ -178,7 +168,8 @@ impl Debug for CodeRegion {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum Op {\n     Subtract,\n     Add,"}, {"sha": "7e9393e5e74768cdd0f7fd5bdd74f7fd62c450ed", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -136,7 +136,7 @@ impl MirPhase {\n \n /// Where a specific `mir::Body` comes from.\n #[derive(Copy, Clone, Debug, PartialEq, Eq)]\n-#[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable)]\n+#[derive(HashStable, TyEncodable, TyDecodable, TypeFoldable, TypeVisitable)]\n pub struct MirSource<'tcx> {\n     pub instance: InstanceDef<'tcx>,\n \n@@ -166,7 +166,7 @@ impl<'tcx> MirSource<'tcx> {\n     }\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct GeneratorInfo<'tcx> {\n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n@@ -183,7 +183,7 @@ pub struct GeneratorInfo<'tcx> {\n }\n \n /// The lowered representation of a single function.\n-#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Body<'tcx> {\n     /// A list of basic blocks. References to basic block use a newtyped index type [`BasicBlock`]\n     /// that indexes into this vector.\n@@ -601,7 +601,7 @@ impl<'tcx> IndexMut<BasicBlock> for Body<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub enum ClearCrossCrate<T> {\n     Clear,\n     Set(T),\n@@ -807,7 +807,7 @@ pub struct BlockTailInfo {\n ///\n /// This can be a binding declared by the user, a temporary inserted by the compiler, a function\n /// argument, or the return place.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct LocalDecl<'tcx> {\n     /// Whether this is a mutable binding (i.e., `let x` or `let mut x`).\n     ///\n@@ -942,7 +942,7 @@ static_assert_size!(LocalDecl<'_>, 56);\n ///\n /// Not used for non-StaticRef temporaries, the return place, or anonymous\n /// function parameters.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum LocalInfo<'tcx> {\n     /// A user-defined local variable or function parameter\n     ///\n@@ -1081,7 +1081,7 @@ impl<'tcx> LocalDecl<'tcx> {\n     }\n }\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum VarDebugInfoContents<'tcx> {\n     /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n     /// based on a `Local`, not a `Static`, and contains no indexing.\n@@ -1099,7 +1099,7 @@ impl<'tcx> Debug for VarDebugInfoContents<'tcx> {\n }\n \n /// Debug information pertaining to a user variable.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct VarDebugInfo<'tcx> {\n     pub name: Symbol,\n \n@@ -1155,7 +1155,7 @@ impl BasicBlock {\n // BasicBlockData\n \n /// See [`BasicBlock`] for documentation on what basic blocks are at a high level.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct BasicBlockData<'tcx> {\n     /// List of statements in this block.\n     pub statements: Vec<Statement<'tcx>>,\n@@ -1392,7 +1392,7 @@ impl<O: fmt::Debug> fmt::Debug for AssertKind<O> {\n ///////////////////////////////////////////////////////////////////////////\n // Statements\n \n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Statement<'tcx> {\n     pub source_info: SourceInfo,\n     pub kind: StatementKind<'tcx>,\n@@ -1758,7 +1758,7 @@ impl SourceScope {\n     }\n }\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct SourceScopeData<'tcx> {\n     pub span: Span,\n     pub parent_scope: Option<SourceScope>,\n@@ -2524,7 +2524,7 @@ impl<'tcx> ConstantKind<'tcx> {\n /// The first will lead to the constraint `w: &'1 str` (for some\n /// inferred region `'1`). The second will lead to the constraint `w:\n /// &'static str`.\n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct UserTypeProjections {\n     pub contents: Vec<(UserTypeProjection, Span)>,\n }"}, {"sha": "620f0380d53b777088a599ec6283083194caffe9", "filename": "compiler/rustc_middle/src/mir/query.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fquery.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -161,7 +161,7 @@ rustc_index::newtype_index! {\n }\n \n /// The layout of generator state.\n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct GeneratorLayout<'tcx> {\n     /// The type of every local stored inside the generator.\n     pub field_tys: IndexVec<GeneratorSavedLocal, Ty<'tcx>>,"}, {"sha": "3e96f1bb2f78e4b4c1f3ac26e31ae1ec2038ad98", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -179,7 +179,8 @@ pub enum BorrowKind {\n /// Not all of these are allowed at every [`MirPhase`]. Check the documentation there to see which\n /// ones you do not have to worry about. The MIR validator will generally enforce such restrictions,\n /// causing an ICE if they are violated.\n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum StatementKind<'tcx> {\n     /// Assign statements roughly correspond to an assignment in Rust proper (`x = ...`) except\n     /// without the possibility of dropping the previous value (that must be done separately, if at\n@@ -376,13 +377,15 @@ pub enum FakeReadCause {\n     ForIndex,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct Coverage {\n     pub kind: CoverageKind,\n     pub code_region: Option<CodeRegion>,\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CopyNonOverlapping<'tcx> {\n     pub src: Operand<'tcx>,\n     pub dst: Operand<'tcx>,\n@@ -672,7 +675,8 @@ pub enum AssertKind<O> {\n     ResumedAfterPanic(GeneratorKind),\n }\n \n-#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, PartialEq, TyEncodable, TyDecodable, Hash, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum InlineAsmOperand<'tcx> {\n     In {\n         reg: InlineAsmRegOrRegClass,"}, {"sha": "c99faf80187edae9195e4777e1269534c54ef64b", "filename": "compiler/rustc_middle/src/mir/tcx.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftcx.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -9,7 +9,7 @@ use crate::ty::{self, Ty, TyCtxt};\n use rustc_hir as hir;\n use rustc_target::abi::VariantIdx;\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct PlaceTy<'tcx> {\n     pub ty: Ty<'tcx>,\n     /// Downcast to a particular variant of an enum or a generator, if included."}, {"sha": "03c11c2863fbbd6728a10f135266b26be4a45c89", "filename": "compiler/rustc_middle/src/thir.rs", "status": "modified", "additions": 2, "deletions": 12, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fthir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fthir.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -191,18 +191,8 @@ pub enum StmtKind<'tcx> {\n #[cfg(all(target_arch = \"x86_64\", target_pointer_width = \"64\"))]\n rustc_data_structures::static_assert_size!(Expr<'_>, 104);\n \n-#[derive(\n-    Clone,\n-    Debug,\n-    Copy,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    HashStable,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable\n-)]\n+#[derive(Clone, Debug, Copy, PartialEq, Eq, Hash, HashStable, TyEncodable, TyDecodable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct LocalVarId(pub hir::HirId);\n \n /// A THIR expression."}, {"sha": "6d4af8bea628100b74e7c58f97b14a35289e428b", "filename": "compiler/rustc_middle/src/traits/chalk.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fchalk.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -390,7 +390,7 @@ impl<'tcx> chalk_ir::interner::HasInterner for RustInterner<'tcx> {\n }\n \n /// A chalk environment and goal.\n-#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, Debug, HashStable, TypeFoldable, TypeVisitable)]\n pub struct ChalkEnvironmentAndGoal<'tcx> {\n     pub environment: &'tcx ty::List<ty::Predicate<'tcx>>,\n     pub goal: ty::Predicate<'tcx>,"}, {"sha": "eee44df8645efedadbc4ae6d1f5555324351d367", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -523,7 +523,7 @@ pub struct DerivedObligationCause<'tcx> {\n     pub parent_code: InternedObligationCauseCode<'tcx>,\n }\n \n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub enum SelectionError<'tcx> {\n     /// The trait is not implemented.\n     Unimplemented,\n@@ -592,7 +592,8 @@ pub type SelectionResult<'tcx, T> = Result<Option<T>, SelectionError<'tcx>>;\n /// ### The type parameter `N`\n ///\n /// See explanation on `ImplSourceUserDefinedData`.\n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ImplSource<'tcx, N> {\n     /// ImplSource identifying a particular impl.\n     UserDefined(ImplSourceUserDefinedData<'tcx, N>),\n@@ -753,14 +754,16 @@ impl<'tcx, N> ImplSource<'tcx, N> {\n /// is `Obligation`, as one might expect. During codegen, however, this\n /// is `()`, because codegen only requires a shallow resolution of an\n /// impl, and nested obligations are satisfied later.\n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceUserDefinedData<'tcx, N> {\n     pub impl_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceGeneratorData<'tcx, N> {\n     pub generator_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -769,7 +772,8 @@ pub struct ImplSourceGeneratorData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceClosureData<'tcx, N> {\n     pub closure_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -778,13 +782,15 @@ pub struct ImplSourceClosureData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceAutoImplData<N> {\n     pub trait_def_id: DefId,\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -798,12 +804,14 @@ pub struct ImplSourceTraitUpcastingData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceBuiltinData<N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(PartialEq, Eq, Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(PartialEq, Eq, Clone, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceObjectData<'tcx, N> {\n     /// `Foo` upcast to the obligation trait. This will be some supertrait of `Foo`.\n     pub upcast_trait_ref: ty::PolyTraitRef<'tcx>,\n@@ -817,7 +825,8 @@ pub struct ImplSourceObjectData<'tcx, N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceFnPointerData<'tcx, N> {\n     pub fn_ty: Ty<'tcx>,\n     pub nested: Vec<N>,\n@@ -830,12 +839,14 @@ pub struct ImplSourceDiscriminantKindData;\n #[derive(Clone, Debug, PartialEq, Eq, TyEncodable, TyDecodable, HashStable)]\n pub struct ImplSourcePointeeData;\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceConstDestructData<N> {\n     pub nested: Vec<N>,\n }\n \n-#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, PartialEq, Eq, TyEncodable, TyDecodable, HashStable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ImplSourceTraitAliasData<'tcx, N> {\n     pub alias_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "937b166d484b388c7bea7114e321bab4aeab6b59", "filename": "compiler/rustc_middle/src/traits/query.rs", "status": "modified", "additions": 13, "deletions": 8, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fquery.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -24,7 +24,8 @@ pub mod type_op {\n     use rustc_hir::def_id::DefId;\n     use std::fmt;\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct AscribeUserType<'tcx> {\n         pub mir_ty: Ty<'tcx>,\n         pub def_id: DefId,\n@@ -37,19 +38,22 @@ pub mod type_op {\n         }\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Eq<'tcx> {\n         pub a: Ty<'tcx>,\n         pub b: Ty<'tcx>,\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Subtype<'tcx> {\n         pub sub: Ty<'tcx>,\n         pub sup: Ty<'tcx>,\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct ProvePredicate<'tcx> {\n         pub predicate: Predicate<'tcx>,\n     }\n@@ -60,7 +64,8 @@ pub mod type_op {\n         }\n     }\n \n-    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, TypeFoldable, Lift)]\n+    #[derive(Copy, Clone, Debug, Hash, PartialEq, Eq, HashStable, Lift)]\n+    #[derive(TypeFoldable, TypeVisitable)]\n     pub struct Normalize<T> {\n         pub value: T,\n     }\n@@ -107,7 +112,7 @@ impl<'tcx> From<TypeError<'tcx>> for NoSolution {\n     }\n }\n \n-#[derive(Clone, Debug, Default, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, Default, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct DropckOutlivesResult<'tcx> {\n     pub kinds: Vec<GenericArg<'tcx>>,\n     pub overflows: Vec<Ty<'tcx>>,\n@@ -208,7 +213,7 @@ pub struct MethodAutoderefBadTy<'tcx> {\n }\n \n /// Result from the `normalize_projection_ty` query.\n-#[derive(Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct NormalizationResult<'tcx> {\n     /// Result of normalization.\n     pub normalized_ty: Ty<'tcx>,\n@@ -221,7 +226,7 @@ pub struct NormalizationResult<'tcx> {\n /// case they are called implied bounds). They are fed to the\n /// `OutlivesEnv` which in turn is supplied to the region checker and\n /// other parts of the inference system.\n-#[derive(Clone, Debug, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable, Lift)]\n pub enum OutlivesBound<'tcx> {\n     RegionSubRegion(ty::Region<'tcx>, ty::Region<'tcx>),\n     RegionSubParam(ty::Region<'tcx>, ty::ParamTy),"}, {"sha": "e5eaf960a99ffdbd041a34647c6a4da6c7f91638", "filename": "compiler/rustc_middle/src/traits/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fselect.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -103,7 +103,7 @@ pub type EvaluationCache<'tcx> = Cache<\n /// required for associated types to work in default impls, as the bounds\n /// are visible both as projection bounds and as where-clauses from the\n /// parameter environment.\n-#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable)]\n+#[derive(PartialEq, Eq, Debug, Clone, TypeFoldable, TypeVisitable)]\n pub enum SelectionCandidate<'tcx> {\n     BuiltinCandidate {\n         /// `false` if there are no *further* obligations."}, {"sha": "d36cf2fe3f8d050da22ebbb93513e873b201bf28", "filename": "compiler/rustc_middle/src/ty/adjustment.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fadjustment.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -77,7 +77,7 @@ pub enum PointerCast {\n ///    At some point, of course, `Box` should move out of the compiler, in which\n ///    case this is analogous to transforming a struct. E.g., `Box<[i32; 4]>` ->\n ///    `Box<[i32]>` is an `Adjust::Unsize` with the target `Box<[i32]>`.\n-#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub struct Adjustment<'tcx> {\n     pub kind: Adjust<'tcx>,\n     pub target: Ty<'tcx>,\n@@ -89,7 +89,7 @@ impl<'tcx> Adjustment<'tcx> {\n     }\n }\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum Adjust<'tcx> {\n     /// Go from ! to any type.\n     NeverToAny,\n@@ -107,7 +107,8 @@ pub enum Adjust<'tcx> {\n /// call, with the signature `&'a T -> &'a U` or `&'a mut T -> &'a mut U`.\n /// The target type is `U` in both cases, with the region and mutability\n /// being those shared by both the receiver and the returned reference.\n-#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct OverloadedDeref<'tcx> {\n     pub region: ty::Region<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -165,7 +166,8 @@ impl From<AutoBorrowMutability> for hir::Mutability {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(Copy, Clone, PartialEq, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum AutoBorrow<'tcx> {\n     /// Converts from T to &T.\n     Ref(ty::Region<'tcx>, AutoBorrowMutability),"}, {"sha": "f5ce43f3afb69bbc0f13f25c48f682a4e3d2bb15", "filename": "compiler/rustc_middle/src/ty/closure.rs", "status": "modified", "additions": 12, "deletions": 17, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fclosure.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -18,26 +18,17 @@ use self::BorrowKind::*;\n // This represents accessing self in the closure structure\n pub const CAPTURE_STRUCT_LOCAL: mir::Local = mir::Local::from_u32(1);\n \n-#[derive(\n-    Clone,\n-    Copy,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    HashStable\n-)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct UpvarPath {\n     pub hir_id: hir::HirId,\n }\n \n /// Upvars do not get their own `NodeId`. Instead, we use the pair of\n /// the original var ID (that is, the root variable that is referenced\n /// by the upvar) and the ID of the closure expression.\n-#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct UpvarId {\n     pub var_path: UpvarPath,\n     pub closure_expr_id: LocalDefId,\n@@ -51,7 +42,8 @@ impl UpvarId {\n \n /// Information describing the capture of an upvar. This is computed\n /// during `typeck`, specifically by `regionck`.\n-#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum UpvarCapture {\n     /// Upvar is captured by value. This is always true when the\n     /// closure is labeled `move`, but can also be true in other cases\n@@ -139,7 +131,8 @@ impl<'tcx> ClosureKind {\n }\n \n /// A composite describing a `Place` that is captured by a closure.\n-#[derive(PartialEq, Clone, Debug, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CapturedPlace<'tcx> {\n     /// The `Place` that is captured.\n     pub place: HirPlace<'tcx>,\n@@ -284,7 +277,8 @@ pub fn is_ancestor_or_same_capture(\n /// Part of `MinCaptureInformationMap`; describes the capture kind (&, &mut, move)\n /// for a particular capture as well as identifying the part of the source code\n /// that triggered this capture to occur.\n-#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, TypeFoldable, HashStable)]\n+#[derive(PartialEq, Clone, Debug, Copy, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct CaptureInfo {\n     /// Expr Id pointing to use that resulted in selecting the current capture kind\n     ///\n@@ -362,7 +356,8 @@ pub fn place_to_string_for_capture<'tcx>(tcx: TyCtxt<'tcx>, place: &HirPlace<'tc\n     curr_string\n }\n \n-#[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, TypeFoldable, Copy, HashStable)]\n+#[derive(Clone, PartialEq, Debug, TyEncodable, TyDecodable, Copy, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum BorrowKind {\n     /// Data must be immutable and is aliasable.\n     ImmBorrow,"}, {"sha": "1468e1407ffb1cc63ba4b49cfc625d30a80bf40c", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -390,7 +390,7 @@ impl<'a, V> LocalTableInContextMut<'a, V> {\n /// Here, we would store the type `T`, the span of the value `x`, the \"scope-span\" for\n /// the scope that contains `x`, the expr `T` evaluated from, and the span of `foo.await`.\n #[derive(TyEncodable, TyDecodable, Clone, Debug, Eq, Hash, PartialEq, HashStable)]\n-#[derive(TypeFoldable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct GeneratorInteriorTypeCause<'tcx> {\n     /// Type of the captured binding.\n     pub ty: Ty<'tcx>,\n@@ -871,7 +871,7 @@ rustc_index::newtype_index! {\n pub type CanonicalUserTypeAnnotations<'tcx> =\n     IndexVec<UserTypeAnnotationIndex, CanonicalUserTypeAnnotation<'tcx>>;\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, Lift)]\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct CanonicalUserTypeAnnotation<'tcx> {\n     pub user_ty: CanonicalUserType<'tcx>,\n     pub span: Span,\n@@ -931,7 +931,7 @@ impl<'tcx> CanonicalUserType<'tcx> {\n /// from constants that are named via paths, like `Foo::<A>::new` and\n /// so forth.\n #[derive(Copy, Clone, Debug, PartialEq, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub enum UserType<'tcx> {\n     Ty(Ty<'tcx>),\n "}, {"sha": "9796b152911b7ffa136d5875c252d04e4895d0ba", "filename": "compiler/rustc_middle/src/ty/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Ferror.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -13,7 +13,7 @@ use rustc_target::spec::abi;\n use std::borrow::Cow;\n use std::fmt;\n \n-#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable)]\n+#[derive(Clone, Copy, Debug, PartialEq, Eq, TypeFoldable, TypeVisitable)]\n pub struct ExpectedFound<T> {\n     pub expected: T,\n     pub found: T,\n@@ -30,7 +30,7 @@ impl<T> ExpectedFound<T> {\n }\n \n // Data structures used in type unification\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub enum TypeError<'tcx> {\n     Mismatch,\n     ConstnessMismatch(ExpectedFound<ty::BoundConstness>),"}, {"sha": "40db2895453c9a750f0a8dc53862682a01146d12", "filename": "compiler/rustc_middle/src/ty/instance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Finstance.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -25,7 +25,7 @@ pub struct Instance<'tcx> {\n }\n \n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug)]\n-#[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+#[derive(TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum InstanceDef<'tcx> {\n     /// A user-defined callable item.\n     ///"}, {"sha": "d755bb8fde8a7c4eb41c819accf739887cbd9bcd", "filename": "compiler/rustc_middle/src/ty/mod.rs", "status": "modified", "additions": 19, "deletions": 49, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fmod.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -206,32 +206,22 @@ impl MainDefinition {\n /// The \"header\" of an impl is everything outside the body: a Self type, a trait\n /// ref (in the case of a trait impl), and a set of predicates (from the\n /// bounds / where-clauses).\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct ImplHeader<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,\n     pub trait_ref: Option<TraitRef<'tcx>>,\n     pub predicates: Vec<Predicate<'tcx>>,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub enum ImplSubject<'tcx> {\n     Trait(TraitRef<'tcx>),\n     Inherent(Ty<'tcx>),\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    PartialEq,\n-    Eq,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    HashStable,\n-    Debug,\n-    TypeFoldable\n-)]\n+#[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable, HashStable, Debug)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub enum ImplPolarity {\n     /// `impl Trait for Type`\n     Positive,\n@@ -307,18 +297,8 @@ impl fmt::Display for BoundConstness {\n     }\n }\n \n-#[derive(\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    Copy,\n-    Hash,\n-    TyEncodable,\n-    TyDecodable,\n-    HashStable,\n-    TypeFoldable\n-)]\n+#[derive(Clone, Debug, PartialEq, Eq, Copy, Hash, TyEncodable, TyDecodable, HashStable)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct ClosureSizeProfileData<'tcx> {\n     /// Tuple containing the types of closure captures before the feature `capture_disjoint_fields`\n     pub before_feature_tys: Ty<'tcx>,\n@@ -618,7 +598,7 @@ impl rustc_errors::IntoDiagnosticArg for Predicate<'_> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum PredicateKind<'tcx> {\n     /// Corresponds to `where Foo: Bar<A, B, C>`. `Foo` here would be\n     /// the `Self` type of the trait reference and `A`, `B`, and `C`\n@@ -790,7 +770,7 @@ impl<'tcx> Predicate<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct TraitPredicate<'tcx> {\n     pub trait_ref: TraitRef<'tcx>,\n \n@@ -869,7 +849,7 @@ impl<'tcx> PolyTraitPredicate<'tcx> {\n }\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct OutlivesPredicate<A, B>(pub A, pub B); // `A: B`\n pub type RegionOutlivesPredicate<'tcx> = OutlivesPredicate<ty::Region<'tcx>, ty::Region<'tcx>>;\n pub type TypeOutlivesPredicate<'tcx> = OutlivesPredicate<Ty<'tcx>, ty::Region<'tcx>>;\n@@ -880,7 +860,7 @@ pub type PolyTypeOutlivesPredicate<'tcx> = ty::Binder<'tcx, TypeOutlivesPredicat\n /// whether the `a` type is the type that we should label as \"expected\" when\n /// presenting user diagnostics.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct SubtypePredicate<'tcx> {\n     pub a_is_expected: bool,\n     pub a: Ty<'tcx>,\n@@ -890,15 +870,15 @@ pub type PolySubtypePredicate<'tcx> = ty::Binder<'tcx, SubtypePredicate<'tcx>>;\n \n /// Encodes that we have to coerce *from* the `a` type to the `b` type.\n #[derive(Clone, Copy, PartialEq, Eq, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct CoercePredicate<'tcx> {\n     pub a: Ty<'tcx>,\n     pub b: Ty<'tcx>,\n }\n pub type PolyCoercePredicate<'tcx> = ty::Binder<'tcx, CoercePredicate<'tcx>>;\n \n #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum Term<'tcx> {\n     Ty(Ty<'tcx>),\n     Const(Const<'tcx>),\n@@ -946,7 +926,7 @@ impl<'tcx> Term<'tcx> {\n /// Form #2 eventually yields one of these `ProjectionPredicate`\n /// instances to normalize the LHS.\n #[derive(Copy, Clone, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ProjectionPredicate<'tcx> {\n     pub projection_ty: ProjectionTy<'tcx>,\n     pub term: Term<'tcx>,\n@@ -1090,7 +1070,7 @@ impl<'tcx> Predicate<'tcx> {\n /// `[[], [U:Bar<T>]]`. Now if there were some particular reference\n /// like `Foo<isize,usize>`, then the `InstantiatedPredicates` would be `[[],\n /// [usize:Bar<isize>]]`.\n-#[derive(Clone, Debug, TypeFoldable)]\n+#[derive(Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct InstantiatedPredicates<'tcx> {\n     pub predicates: Vec<Predicate<'tcx>>,\n     pub spans: Vec<Span>,\n@@ -1106,24 +1086,14 @@ impl<'tcx> InstantiatedPredicates<'tcx> {\n     }\n }\n \n-#[derive(\n-    Copy,\n-    Clone,\n-    Debug,\n-    PartialEq,\n-    Eq,\n-    HashStable,\n-    TyEncodable,\n-    TyDecodable,\n-    TypeFoldable,\n-    Lift\n-)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, HashStable, TyEncodable, TyDecodable, Lift)]\n+#[derive(TypeFoldable, TypeVisitable)]\n pub struct OpaqueTypeKey<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable, HashStable, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, HashStable, TyEncodable, TyDecodable)]\n pub struct OpaqueHiddenType<'tcx> {\n     /// The span of this particular definition of the opaque type. So\n     /// for example:\n@@ -1259,7 +1229,7 @@ pub type PlaceholderConst<'tcx> = Placeholder<BoundConst<'tcx>>;\n /// except that instead of a `Ty` we bundle the `DefId` of the const parameter.\n /// Meaning that we need to use `type_of(const_param_did)` if `const_param_did` is `Some`\n /// to get the type of `did`.\n-#[derive(Copy, Clone, Debug, TypeFoldable, Lift, TyEncodable, TyDecodable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable, Lift, TyEncodable, TyDecodable)]\n #[derive(PartialEq, Eq, PartialOrd, Ord)]\n #[derive(Hash, HashStable)]\n pub struct WithOptConstParam<T> {\n@@ -1575,7 +1545,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TypeFoldable, TypeVisitable)]\n pub struct ParamEnvAnd<'tcx, T> {\n     pub param_env: ParamEnv<'tcx>,\n     pub value: T,"}, {"sha": "6c6fbc401ff4ae1070b78f091df572537b358949", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -2388,7 +2388,7 @@ macro_rules! define_print_and_forward_display {\n /// Wrapper type for `ty::TraitRef` which opts-in to pretty printing only\n /// the trait path. That is, it will print `Trait<U>` instead of\n /// `<T as Trait<U>>`.\n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitRefPrintOnlyTraitPath<'tcx>(ty::TraitRef<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n@@ -2400,7 +2400,7 @@ impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitPath<'tcx> {\n /// Wrapper type for `ty::TraitRef` which opts-in to pretty printing only\n /// the trait name. That is, it will print `Trait` instead of\n /// `<T as Trait<U>>`.\n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitRefPrintOnlyTraitName<'tcx>(ty::TraitRef<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitRefPrintOnlyTraitName<'tcx> {\n@@ -2425,7 +2425,7 @@ impl<'tcx> ty::Binder<'tcx, ty::TraitRef<'tcx>> {\n     }\n }\n \n-#[derive(Copy, Clone, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, TypeFoldable, TypeVisitable, Lift)]\n pub struct TraitPredPrintModifiersAndPath<'tcx>(ty::TraitPredicate<'tcx>);\n \n impl<'tcx> fmt::Debug for TraitPredPrintModifiersAndPath<'tcx> {"}, {"sha": "818affa7113a17c5abb644ad7ab36db2692b1854", "filename": "compiler/rustc_middle/src/ty/relate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Frelate.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -345,7 +345,7 @@ impl<'tcx> Relate<'tcx> for ty::ExistentialTraitRef<'tcx> {\n     }\n }\n \n-#[derive(Copy, Debug, Clone, TypeFoldable)]\n+#[derive(Copy, Debug, Clone, TypeFoldable, TypeVisitable)]\n struct GeneratorWitness<'tcx>(&'tcx ty::List<Ty<'tcx>>);\n \n impl<'tcx> Relate<'tcx> for GeneratorWitness<'tcx> {"}, {"sha": "dc08b4898b583485bc1b8f76b2729a7418977867", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -38,7 +38,7 @@ pub type TyKind<'tcx> = IrTyKind<TyCtxt<'tcx>>;\n pub type RegionKind<'tcx> = IrRegionKind<TyCtxt<'tcx>>;\n \n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct TypeAndMut<'tcx> {\n     pub ty: Ty<'tcx>,\n     pub mutbl: hir::Mutability,\n@@ -201,7 +201,7 @@ static_assert_size!(TyKind<'_>, 32);\n /// * `GR`: The \"return type\", which is the type of value returned upon\n ///   completion of the generator.\n /// * `GW`: The \"generator witness\".\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct ClosureSubsts<'tcx> {\n     /// Lifetime and type parameters from the enclosing function,\n     /// concatenated with a tuple containing the types of the upvars.\n@@ -328,7 +328,7 @@ impl<'tcx> ClosureSubsts<'tcx> {\n }\n \n /// Similar to `ClosureSubsts`; see the above documentation for more.\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct GeneratorSubsts<'tcx> {\n     pub substs: SubstsRef<'tcx>,\n }\n@@ -608,7 +608,7 @@ impl<'tcx> UpvarSubsts<'tcx> {\n /// type of the constant. The reason that `R` is represented as an extra type parameter\n /// is the same reason that [`ClosureSubsts`] have `CS` and `U` as type parameters:\n /// inline const can reference lifetimes that are internal to the creating function.\n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct InlineConstSubsts<'tcx> {\n     /// Generic parameters from the enclosing item,\n     /// concatenated with the inferred type of the constant.\n@@ -655,7 +655,7 @@ impl<'tcx> InlineConstSubsts<'tcx> {\n }\n \n #[derive(Debug, Copy, Clone, PartialEq, PartialOrd, Ord, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub enum ExistentialPredicate<'tcx> {\n     /// E.g., `Iterator`.\n     Trait(ExistentialTraitRef<'tcx>),\n@@ -781,7 +781,7 @@ impl<'tcx> List<ty::Binder<'tcx, ExistentialPredicate<'tcx>>> {\n /// Trait references also appear in object types like `Foo<U>`, but in\n /// that case the `Self` parameter is absent from the substitutions.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct TraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -853,7 +853,7 @@ impl<'tcx> PolyTraitRef<'tcx> {\n /// The substitutions don't include the erased `Self`, only trait\n /// type and lifetime parameters (`[X, Y]` and `['a, 'b]` above).\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ExistentialTraitRef<'tcx> {\n     pub def_id: DefId,\n     pub substs: SubstsRef<'tcx>,\n@@ -1143,7 +1143,7 @@ impl<'tcx, T> Binder<'tcx, Option<T>> {\n /// Represents the projection of an associated type. In explicit UFCS\n /// form this would be written `<T as Trait<..>>::N`.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ProjectionTy<'tcx> {\n     /// The parameters of the associated item.\n     pub substs: SubstsRef<'tcx>,\n@@ -1192,7 +1192,7 @@ impl<'tcx> ProjectionTy<'tcx> {\n     }\n }\n \n-#[derive(Copy, Clone, Debug, TypeFoldable)]\n+#[derive(Copy, Clone, Debug, TypeFoldable, TypeVisitable)]\n pub struct GenSig<'tcx> {\n     pub resume_ty: Ty<'tcx>,\n     pub yield_ty: Ty<'tcx>,\n@@ -1208,7 +1208,7 @@ pub type PolyGenSig<'tcx> = Binder<'tcx, GenSig<'tcx>>;\n /// - `output`: is the return type.\n /// - `c_variadic`: indicates whether this is a C-variadic function.\n #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct FnSig<'tcx> {\n     pub inputs_and_output: &'tcx List<Ty<'tcx>>,\n     pub c_variadic: bool,\n@@ -1385,7 +1385,7 @@ impl From<BoundVar> for BoundTy {\n \n /// A `ProjectionPredicate` for an `ExistentialTraitRef`.\n #[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Hash, Debug, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable)]\n pub struct ExistentialProjection<'tcx> {\n     pub item_def_id: DefId,\n     pub substs: SubstsRef<'tcx>,"}, {"sha": "72afada46f7848457316b57b2827d61b26261049", "filename": "compiler/rustc_middle/src/ty/subst.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsubst.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -722,7 +722,7 @@ impl<'a, 'tcx> SubstFolder<'a, 'tcx> {\n /// Stores the user-given substs to reach some fully qualified path\n /// (e.g., `<T>::Item` or `<T as Trait>::Item`).\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct UserSubsts<'tcx> {\n     /// The substitutions for the item as given by the user.\n     pub substs: SubstsRef<'tcx>,\n@@ -749,7 +749,7 @@ pub struct UserSubsts<'tcx> {\n /// the self type, giving `Foo<?A>`. Finally, we unify that with\n /// the self type here, which contains `?A` to be `&'static u32`\n #[derive(Copy, Clone, Debug, PartialEq, Eq, Hash, TyEncodable, TyDecodable)]\n-#[derive(HashStable, TypeFoldable, Lift)]\n+#[derive(HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct UserSelfTy<'tcx> {\n     pub impl_def_id: DefId,\n     pub self_ty: Ty<'tcx>,"}, {"sha": "2a3319f0f26fbc15d29da71fe9c07d7f5f5fcf78", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/implied_outlives_bounds.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Fimplied_outlives_bounds.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::Fallible;\n use rustc_infer::traits::query::OutlivesBound;\n use rustc_middle::ty::{self, ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct ImpliedOutlivesBounds<'tcx> {\n     pub ty: Ty<'tcx>,\n }"}, {"sha": "b63382429d0aa394baa4e4cee2464f781274e2b0", "filename": "compiler/rustc_trait_selection/src/traits/query/type_op/outlives.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e4b9625b87c4d3b5845ea5660cf84739de224192/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fquery%2Ftype_op%2Foutlives.rs?ref=e4b9625b87c4d3b5845ea5660cf84739de224192", "patch": "@@ -3,7 +3,7 @@ use crate::traits::query::dropck_outlives::{trivial_dropck_outlives, DropckOutli\n use crate::traits::query::Fallible;\n use rustc_middle::ty::{ParamEnvAnd, Ty, TyCtxt};\n \n-#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, Lift)]\n+#[derive(Copy, Clone, Debug, HashStable, TypeFoldable, TypeVisitable, Lift)]\n pub struct DropckOutlives<'tcx> {\n     dropped_ty: Ty<'tcx>,\n }"}]}