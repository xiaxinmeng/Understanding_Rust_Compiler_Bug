{"sha": "151efb2198e74c994fec255b8f78c62900989544", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1MWVmYjIxOThlNzRjOTk0ZmVjMjU1YjhmNzhjNjI5MDA5ODk1NDQ=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2019-11-02T20:43:23Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-11-02T20:43:23Z"}, "message": "Merge #2162\n\n2162: Move diagnostics to hir_expand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "fba691ea156533fe490d4dfec04b262ae2f73f7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fba691ea156533fe490d4dfec04b262ae2f73f7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/151efb2198e74c994fec255b8f78c62900989544", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJdveprCRBK7hj4Ov3rIwAAdHIIAGddcYxlsrYRnd07zjGD1Fgx\nMDO4GrhNEBZ+E/09aupry5NjeX49HOqKEDPVodrbSdD2+156UdiETrS+AlpuPRoy\n2ZcRKuE70IMEQaCE3vMLqZgUSmXK/gYilSBkofzV1ElvcVLa8II7QH7jIxZigggp\nGIH/XXbLJMMSUeHlC106ibMIzNrUVb/StuJvsCH1q/Fjv0YRZbz4GZDflnPhcVH9\npFmKkWlZ9qMYj4KwIj4C0HlZPx53MaK+ip/44Pv49QF/r8nY/tCHGfXsuVsqs3QX\naYtRD35brAkKNe2l407yKxpXrIS8gUskVsQfrEclCt89kqhT/P4eGqWSpQHAwyY=\n=lLQP\n-----END PGP SIGNATURE-----\n", "payload": "tree fba691ea156533fe490d4dfec04b262ae2f73f7d\nparent 2d142a17efed6a1445cdc86f2f4abb329f54a140\nparent 13735d91a78ba51fb202cb7dde1dfe25420afe9a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1572727403 +0000\ncommitter GitHub <noreply@github.com> 1572727403 +0000\n\nMerge #2162\n\n2162: Move diagnostics to hir_expand r=matklad a=matklad\n\n\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/151efb2198e74c994fec255b8f78c62900989544", "html_url": "https://github.com/rust-lang/rust/commit/151efb2198e74c994fec255b8f78c62900989544", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/151efb2198e74c994fec255b8f78c62900989544/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d142a17efed6a1445cdc86f2f4abb329f54a140", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d142a17efed6a1445cdc86f2f4abb329f54a140", "html_url": "https://github.com/rust-lang/rust/commit/2d142a17efed6a1445cdc86f2f4abb329f54a140"}, {"sha": "13735d91a78ba51fb202cb7dde1dfe25420afe9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/13735d91a78ba51fb202cb7dde1dfe25420afe9a", "html_url": "https://github.com/rust-lang/rust/commit/13735d91a78ba51fb202cb7dde1dfe25420afe9a"}], "stats": {"total": 239, "additions": 130, "deletions": 109}, "files": [{"sha": "5b78bdfef389e99b1df5c23f36525e45ebf9f824", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -11,14 +11,16 @@ use hir_def::{\n     type_ref::{Mutability, TypeRef},\n     CrateModuleId, LocalEnumVariantId, LocalStructFieldId, ModuleId,\n };\n-use hir_expand::name::{self, AsName};\n+use hir_expand::{\n+    diagnostics::DiagnosticSink,\n+    name::{self, AsName},\n+};\n use ra_db::{CrateId, Edition};\n use ra_syntax::ast::{self, NameOwner, TypeAscriptionOwner};\n \n use crate::{\n     adt::VariantDef,\n     db::{AstDatabase, DefDatabase, HirDatabase},\n-    diagnostics::DiagnosticSink,\n     expr::{validation::ExprValidator, Body, BodySourceMap},\n     generics::HasGenericParams,\n     ids::{"}, {"sha": "bd0c3c226aa474ebe284668c2251343bc832ee8e", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -10,7 +10,7 @@ use crate::{\n     ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n };\n \n-pub use hir_def::Source;\n+pub use hir_expand::Source;\n \n pub trait HasSource {\n     type Ast;"}, {"sha": "a33af8f467534346c52b17ad7f9facd21d30cb46", "filename": "crates/ra_hir/src/diagnostics.rs", "status": "modified", "additions": 6, "deletions": 75, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdiagnostics.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -1,82 +1,13 @@\n //! FIXME: write short doc here\n \n-use std::{any::Any, fmt};\n+use std::any::Any;\n \n-use ra_syntax::{ast, AstNode, AstPtr, SyntaxNode, SyntaxNodePtr, TextRange};\n+use ra_syntax::{ast, AstNode, AstPtr, SyntaxNodePtr};\n use relative_path::RelativePathBuf;\n \n-use crate::{db::HirDatabase, HirFileId, Name, Source};\n-\n-/// Diagnostic defines hir API for errors and warnings.\n-///\n-/// It is used as a `dyn` object, which you can downcast to a concrete\n-/// diagnostic. DiagnosticSink are structured, meaning that they include rich\n-/// information which can be used by IDE to create fixes. DiagnosticSink are\n-/// expressed in terms of macro-expanded syntax tree nodes (so, it's a bad idea\n-/// to diagnostic in a salsa value).\n-///\n-/// Internally, various subsystems of hir produce diagnostics specific to a\n-/// subsystem (typically, an `enum`), which are safe to store in salsa but do not\n-/// include source locations. Such internal diagnostic are transformed into an\n-/// instance of `Diagnostic` on demand.\n-pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n-    fn message(&self) -> String;\n-    fn source(&self) -> Source<SyntaxNodePtr>;\n-    fn highlight_range(&self) -> TextRange {\n-        self.source().ast.range()\n-    }\n-    fn as_any(&self) -> &(dyn Any + Send + 'static);\n-}\n-\n-pub trait AstDiagnostic {\n-    type AST;\n-    fn ast(&self, db: &impl HirDatabase) -> Self::AST;\n-}\n-\n-impl dyn Diagnostic {\n-    pub fn syntax_node(&self, db: &impl HirDatabase) -> SyntaxNode {\n-        let node = db.parse_or_expand(self.source().file_id).unwrap();\n-        self.source().ast.to_node(&node)\n-    }\n-\n-    pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n-        self.as_any().downcast_ref()\n-    }\n-}\n+use crate::{db::AstDatabase, HirFileId, Name, Source};\n \n-pub struct DiagnosticSink<'a> {\n-    callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n-    default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n-}\n-\n-impl<'a> DiagnosticSink<'a> {\n-    pub fn new(cb: impl FnMut(&dyn Diagnostic) + 'a) -> DiagnosticSink<'a> {\n-        DiagnosticSink { callbacks: Vec::new(), default_callback: Box::new(cb) }\n-    }\n-\n-    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> DiagnosticSink<'a> {\n-        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n-            Some(d) => {\n-                cb(d);\n-                Ok(())\n-            }\n-            None => Err(()),\n-        };\n-        self.callbacks.push(Box::new(cb));\n-        self\n-    }\n-\n-    pub(crate) fn push(&mut self, d: impl Diagnostic) {\n-        let d: &dyn Diagnostic = &d;\n-        for cb in self.callbacks.iter_mut() {\n-            match cb(d) {\n-                Ok(()) => return,\n-                Err(()) => (),\n-            }\n-        }\n-        (self.default_callback)(d)\n-    }\n-}\n+pub use hir_expand::diagnostics::{AstDiagnostic, Diagnostic, DiagnosticSink};\n \n #[derive(Debug)]\n pub struct NoSuchField {\n@@ -139,7 +70,7 @@ impl Diagnostic for MissingFields {\n impl AstDiagnostic for MissingFields {\n     type AST = ast::RecordFieldList;\n \n-    fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.source().file_id).unwrap();\n         let node = self.source().ast.to_node(&root);\n         ast::RecordFieldList::cast(node).unwrap()\n@@ -167,7 +98,7 @@ impl Diagnostic for MissingOkInTailExpr {\n impl AstDiagnostic for MissingOkInTailExpr {\n     type AST = ast::Expr;\n \n-    fn ast(&self, db: &impl HirDatabase) -> Self::AST {\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST {\n         let root = db.parse_or_expand(self.file).unwrap();\n         let node = self.source().ast.to_node(&root);\n         ast::Expr::cast(node).unwrap()"}, {"sha": "3054f1dcedf405270db5e98109734d55d5666e31", "filename": "crates/ra_hir/src/expr/validation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fvalidation.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -3,12 +3,13 @@\n use std::sync::Arc;\n \n use hir_def::path::known;\n+use hir_expand::diagnostics::DiagnosticSink;\n use ra_syntax::ast;\n use rustc_hash::FxHashSet;\n \n use crate::{\n     db::HirDatabase,\n-    diagnostics::{DiagnosticSink, MissingFields, MissingOkInTailExpr},\n+    diagnostics::{MissingFields, MissingOkInTailExpr},\n     expr::AstPtr,\n     ty::{ApplicationTy, InferenceResult, Ty, TypeCtor},\n     Adt, Function, Name, Path,"}, {"sha": "0ba17e5710d307e31d43d068fa4fe5313d2a3fe1", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -62,7 +62,7 @@ pub use crate::{\n     adt::VariantDef,\n     code_model::{\n         docs::{DocDef, Docs, Documentation},\n-        src::{HasBodySource, HasSource, Source},\n+        src::{HasBodySource, HasSource},\n         Adt, AssocItem, Const, ConstData, Container, Crate, CrateDependency, DefWithBody, Enum,\n         EnumVariant, FieldSource, FnData, Function, HasBody, MacroDef, Module, ModuleDef,\n         ModuleSource, Static, Struct, StructField, Trait, TypeAlias, Union,\n@@ -85,4 +85,4 @@ pub use hir_def::{\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };\n-pub use hir_expand::{either::Either, name::Name};\n+pub use hir_expand::{either::Either, name::Name, Source};"}, {"sha": "4c89c8d384381ddb4773602f04fa339632f8474a", "filename": "crates/ra_hir/src/mock.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fmock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fmock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fmock.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -2,6 +2,7 @@\n \n use std::{panic, sync::Arc};\n \n+use hir_expand::diagnostics::DiagnosticSink;\n use parking_lot::Mutex;\n use ra_cfg::CfgOptions;\n use ra_db::{\n@@ -12,7 +13,7 @@ use relative_path::{RelativePath, RelativePathBuf};\n use rustc_hash::FxHashMap;\n use test_utils::{extract_offset, parse_fixture, CURSOR_MARKER};\n \n-use crate::{db, debug::HirDebugHelper, diagnostics::DiagnosticSink};\n+use crate::{db, debug::HirDebugHelper};\n \n pub const WORKSPACE: SourceRootId = SourceRootId(0);\n "}, {"sha": "32a6ab47495fb372efe32c3bed2fe698a8db4995", "filename": "crates/ra_hir/src/nameres.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -55,6 +55,7 @@ mod tests;\n use std::sync::Arc;\n \n use hir_def::{builtin_type::BuiltinType, CrateModuleId};\n+use hir_expand::diagnostics::DiagnosticSink;\n use once_cell::sync::Lazy;\n use ra_arena::Arena;\n use ra_db::{Edition, FileId};\n@@ -65,7 +66,6 @@ use test_utils::tested_by;\n \n use crate::{\n     db::{AstDatabase, DefDatabase},\n-    diagnostics::DiagnosticSink,\n     ids::MacroDefId,\n     nameres::diagnostics::DefDiagnostic,\n     Adt, AstId, Crate, HirFileId, MacroDef, Module, ModuleDef, Name, Path, PathKind, Trait,\n@@ -513,12 +513,13 @@ impl CrateDefMap {\n }\n \n mod diagnostics {\n+    use hir_expand::diagnostics::DiagnosticSink;\n     use ra_syntax::{ast, AstPtr};\n     use relative_path::RelativePathBuf;\n \n     use crate::{\n         db::{AstDatabase, DefDatabase},\n-        diagnostics::{DiagnosticSink, UnresolvedModule},\n+        diagnostics::UnresolvedModule,\n         nameres::CrateModuleId,\n         AstId,\n     };"}, {"sha": "2370e8d4f52fa5f7555ecc9a096186764480fb2d", "filename": "crates/ra_hir/src/ty/infer.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Finfer.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -25,7 +25,7 @@ use hir_def::{\n     path::known,\n     type_ref::{Mutability, TypeRef},\n };\n-use hir_expand::name;\n+use hir_expand::{diagnostics::DiagnosticSink, name};\n use ra_arena::map::ArenaMap;\n use ra_prof::profile;\n use test_utils::tested_by;\n@@ -40,7 +40,6 @@ use crate::{\n     adt::VariantDef,\n     code_model::TypeAlias,\n     db::HirDatabase,\n-    diagnostics::DiagnosticSink,\n     expr::{BindingAnnotation, Body, ExprId, PatId},\n     resolve::{Resolver, TypeNs},\n     ty::infer::diagnostics::InferenceDiagnostic,\n@@ -719,12 +718,9 @@ impl Expectation {\n }\n \n mod diagnostics {\n-    use crate::{\n-        db::HirDatabase,\n-        diagnostics::{DiagnosticSink, NoSuchField},\n-        expr::ExprId,\n-        Function, HasSource,\n-    };\n+    use hir_expand::diagnostics::DiagnosticSink;\n+\n+    use crate::{db::HirDatabase, diagnostics::NoSuchField, expr::ExprId, Function, HasSource};\n \n     #[derive(Debug, PartialEq, Eq, Clone)]\n     pub(super) enum InferenceDiagnostic {"}, {"sha": "6d66f481d3f81de2bccebdda7612ca5cec044ed2", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 1, "deletions": 16, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -19,19 +19,13 @@ pub mod nameres;\n \n use std::hash::{Hash, Hasher};\n \n-use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId};\n+use hir_expand::{ast_id_map::FileAstId, db::AstDatabase, AstId, HirFileId, Source};\n use ra_arena::{impl_arena_id, RawId};\n use ra_db::{salsa, CrateId, FileId};\n use ra_syntax::{ast, AstNode, SyntaxNode};\n \n use crate::{builtin_type::BuiltinType, db::InternDatabase};\n \n-#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n-pub struct Source<T> {\n-    pub file_id: HirFileId,\n-    pub ast: T,\n-}\n-\n pub enum ModuleSource {\n     SourceFile(ast::SourceFile),\n     Module(ast::Module),\n@@ -94,15 +88,6 @@ impl ModuleSource {\n     }\n }\n \n-impl<T> Source<T> {\n-    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n-        Source { file_id: self.file_id, ast: f(self.ast) }\n-    }\n-    pub fn file_syntax(&self, db: &impl AstDatabase) -> SyntaxNode {\n-        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n-    }\n-}\n-\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct ModuleId {\n     pub krate: CrateId,"}, {"sha": "201884b95745ac21b1d52c613af8ba1345b40517", "filename": "crates/ra_hir_expand/src/diagnostics.rs", "status": "added", "additions": 85, "deletions": 0, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fdiagnostics.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -0,0 +1,85 @@\n+//! Semantic errors and warnings.\n+//!\n+//! The `Diagnostic` trait defines a trait object which can represent any\n+//! diagnostic.\n+//!\n+//! `DiagnosticSink` struct is used as an emitter for diagnostic. When creating\n+//! a `DiagnosticSink`, you supply a callback which can react to a `dyn\n+//! Diagnostic` or to any concrete diagnostic (downcasting is sued internally).\n+//!\n+//! Because diagnostics store file offsets, it's a bad idea to store them\n+//! directly in salsa. For this reason, every hir subsytem defines it's own\n+//! strongly-typed closed set of diagnostics which use hir ids internally, are\n+//! stored in salsa and do *not* implement the `Diagnostic` trait. Instead, a\n+//! subsystem provides a separate, non-query-based API which can walk all stored\n+//! values and transform them into instances of `Diagnostic`.\n+\n+use std::{any::Any, fmt};\n+\n+use ra_syntax::{SyntaxNode, SyntaxNodePtr, TextRange};\n+\n+use crate::{db::AstDatabase, Source};\n+\n+pub trait Diagnostic: Any + Send + Sync + fmt::Debug + 'static {\n+    fn message(&self) -> String;\n+    fn source(&self) -> Source<SyntaxNodePtr>;\n+    fn highlight_range(&self) -> TextRange {\n+        self.source().ast.range()\n+    }\n+    fn as_any(&self) -> &(dyn Any + Send + 'static);\n+}\n+\n+pub trait AstDiagnostic {\n+    type AST;\n+    fn ast(&self, db: &impl AstDatabase) -> Self::AST;\n+}\n+\n+impl dyn Diagnostic {\n+    pub fn syntax_node(&self, db: &impl AstDatabase) -> SyntaxNode {\n+        let node = db.parse_or_expand(self.source().file_id).unwrap();\n+        self.source().ast.to_node(&node)\n+    }\n+\n+    pub fn downcast_ref<D: Diagnostic>(&self) -> Option<&D> {\n+        self.as_any().downcast_ref()\n+    }\n+}\n+\n+pub struct DiagnosticSink<'a> {\n+    callbacks: Vec<Box<dyn FnMut(&dyn Diagnostic) -> Result<(), ()> + 'a>>,\n+    default_callback: Box<dyn FnMut(&dyn Diagnostic) + 'a>,\n+}\n+\n+impl<'a> DiagnosticSink<'a> {\n+    /// FIXME: split `new` and `on` into a separate builder type\n+    pub fn new(cb: impl FnMut(&dyn Diagnostic) + 'a) -> DiagnosticSink<'a> {\n+        DiagnosticSink { callbacks: Vec::new(), default_callback: Box::new(cb) }\n+    }\n+\n+    pub fn on<D: Diagnostic, F: FnMut(&D) + 'a>(mut self, mut cb: F) -> DiagnosticSink<'a> {\n+        let cb = move |diag: &dyn Diagnostic| match diag.downcast_ref::<D>() {\n+            Some(d) => {\n+                cb(d);\n+                Ok(())\n+            }\n+            None => Err(()),\n+        };\n+        self.callbacks.push(Box::new(cb));\n+        self\n+    }\n+\n+    pub fn push(&mut self, d: impl Diagnostic) {\n+        let d: &dyn Diagnostic = &d;\n+        self._push(d);\n+    }\n+\n+    fn _push(&mut self, d: &dyn Diagnostic) {\n+        for cb in self.callbacks.iter_mut() {\n+            match cb(d) {\n+                Ok(()) => return,\n+                Err(()) => (),\n+            }\n+        }\n+        (self.default_callback)(d)\n+    }\n+}"}, {"sha": "dd07a16b4cad2296b7e00c55549673c627feda45", "filename": "crates/ra_hir_expand/src/lib.rs", "status": "modified", "additions": 20, "deletions": 1, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/151efb2198e74c994fec255b8f78c62900989544/crates%2Fra_hir_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Flib.rs?ref=151efb2198e74c994fec255b8f78c62900989544", "patch": "@@ -9,11 +9,15 @@ pub mod ast_id_map;\n pub mod either;\n pub mod name;\n pub mod hygiene;\n+pub mod diagnostics;\n \n use std::hash::{Hash, Hasher};\n \n use ra_db::{salsa, CrateId, FileId};\n-use ra_syntax::ast::{self, AstNode};\n+use ra_syntax::{\n+    ast::{self, AstNode},\n+    SyntaxNode,\n+};\n \n use crate::ast_id_map::FileAstId;\n \n@@ -151,3 +155,18 @@ impl<N: AstNode> AstId<N> {\n         db.ast_id_map(self.file_id).get(self.file_ast_id).to_node(&root)\n     }\n }\n+\n+#[derive(Debug, PartialEq, Eq, Clone, Copy)]\n+pub struct Source<T> {\n+    pub file_id: HirFileId,\n+    pub ast: T,\n+}\n+\n+impl<T> Source<T> {\n+    pub fn map<F: FnOnce(T) -> U, U>(self, f: F) -> Source<U> {\n+        Source { file_id: self.file_id, ast: f(self.ast) }\n+    }\n+    pub fn file_syntax(&self, db: &impl db::AstDatabase) -> SyntaxNode {\n+        db.parse_or_expand(self.file_id).expect(\"source created from invalid file\")\n+    }\n+}"}]}