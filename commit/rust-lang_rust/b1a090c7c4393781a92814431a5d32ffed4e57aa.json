{"sha": "b1a090c7c4393781a92814431a5d32ffed4e57aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIxYTA5MGM3YzQzOTM3ODFhOTI4MTQ0MzFhNWQzMmZmZWQ0ZTU3YWE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:17:33Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-03T02:17:33Z"}, "message": "rt: Remove unused arguments in rust_scheduler", "tree": {"sha": "caff9dc6f15b48187b15087d88c7124079dbe4cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/caff9dc6f15b48187b15087d88c7124079dbe4cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b1a090c7c4393781a92814431a5d32ffed4e57aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b1a090c7c4393781a92814431a5d32ffed4e57aa", "html_url": "https://github.com/rust-lang/rust/commit/b1a090c7c4393781a92814431a5d32ffed4e57aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b1a090c7c4393781a92814431a5d32ffed4e57aa/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6c632c71c6f86752fb626501d5368070e3e37385", "url": "https://api.github.com/repos/rust-lang/rust/commits/6c632c71c6f86752fb626501d5368070e3e37385", "html_url": "https://github.com/rust-lang/rust/commit/6c632c71c6f86752fb626501d5368070e3e37385"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "2d5e84f531e168b08f3464c3a5bcd99e93a75e91", "filename": "src/rt/rust_scheduler.cpp", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b1a090c7c4393781a92814431a5d32ffed4e57aa/src%2Frt%2Frust_scheduler.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/b1a090c7c4393781a92814431a5d32ffed4e57aa/src%2Frt%2Frust_scheduler.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.cpp?ref=b1a090c7c4393781a92814431a5d32ffed4e57aa", "patch": "@@ -112,7 +112,7 @@ rust_scheduler::number_of_live_tasks() {\n  * Delete any dead tasks.\n  */\n void\n-rust_scheduler::reap_dead_tasks(int id) {\n+rust_scheduler::reap_dead_tasks() {\n     I(this, lock.lock_held_by_current_thread());\n     if (dead_tasks.length() == 0) {\n         return;\n@@ -157,7 +157,7 @@ rust_scheduler::reap_dead_tasks(int id) {\n  * Returns NULL if no tasks can be scheduled.\n  */\n rust_task *\n-rust_scheduler::schedule_task(int id) {\n+rust_scheduler::schedule_task() {\n     I(this, this);\n     // FIXME: in the face of failing tasks, this is not always right.\n     // I(this, n_live_tasks() > 0);\n@@ -222,15 +222,15 @@ rust_scheduler::start_main_loop() {\n         DLOG(this, dom, \"worker %d, number_of_live_tasks = %d, total = %d\",\n              id, number_of_live_tasks(), kernel->live_tasks);\n \n-        rust_task *scheduled_task = schedule_task(id);\n+        rust_task *scheduled_task = schedule_task();\n \n         if (scheduled_task == NULL) {\n             log_state();\n             DLOG(this, task,\n                  \"all tasks are blocked, scheduler id %d yielding ...\",\n                  id);\n             lock.timed_wait(10);\n-            reap_dead_tasks(id);\n+            reap_dead_tasks();\n             DLOG(this, task,\n                  \"scheduler %d resuming ...\", id);\n             continue;\n@@ -263,7 +263,7 @@ rust_scheduler::start_main_loop() {\n              scheduled_task->user.rust_sp,\n              id);\n \n-        reap_dead_tasks(id);\n+        reap_dead_tasks();\n     }\n \n     A(this, newborn_tasks.is_empty(), \"Should have no newborn tasks\");"}, {"sha": "283055a4454a0d82690f08075a70e02d83d71da5", "filename": "src/rt/rust_scheduler.h", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b1a090c7c4393781a92814431a5d32ffed4e57aa/src%2Frt%2Frust_scheduler.h", "raw_url": "https://github.com/rust-lang/rust/raw/b1a090c7c4393781a92814431a5d32ffed4e57aa/src%2Frt%2Frust_scheduler.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_scheduler.h?ref=b1a090c7c4393781a92814431a5d32ffed4e57aa", "patch": "@@ -102,8 +102,8 @@ struct rust_scheduler : public kernel_owned<rust_scheduler>,\n     rust_crate_cache *get_cache();\n     size_t number_of_live_tasks();\n \n-    void reap_dead_tasks(int id);\n-    rust_task *schedule_task(int id);\n+    void reap_dead_tasks();\n+    rust_task *schedule_task();\n \n     void start_main_loop();\n "}]}