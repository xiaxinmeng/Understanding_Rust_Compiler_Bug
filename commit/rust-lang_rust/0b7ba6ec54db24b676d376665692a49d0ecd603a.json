{"sha": "0b7ba6ec54db24b676d376665692a49d0ecd603a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBiN2JhNmVjNTRkYjI0YjY3NmQzNzY2NjU2OTJhNDlkMGVjZDYwM2E=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-04T02:32:44Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2019-09-05T18:43:35Z"}, "message": "std: Improve downstream codegen in `Command::env`\n\nThis commit rejiggers the generics used in the implementation of\n`Command::env` with the purpose of reducing the amount of codegen that\nneeds to happen in consumer crates, instead preferring to generate code\ninto libstd.\n\nThis was found when profiling the compile times of the `cc` crate where\nthe binary rlib produced had a lot of `BTreeMap` code compiled into it\nbut the crate doesn't actually use `BTreeMap`. It turns out that\n`Command::env` is generic enough to codegen the entire implementation in\ncalling crates, but in this case there's no performance concern so it's\nfine to compile the code into the standard library.\n\nThis change is done by removing the generic on the `CommandEnv` map\nwhich is intended to handle case-insensitive variables on Windows.\nInstead now a generic isn't used but rather a `use` statement defined\nper-platform is used.\n\nWith this commit a debug build of `Command::new(\"foo\").env(\"a\", \"b\")`\ndrops from 21k lines of LLVM IR to 10k.", "tree": {"sha": "25df682f7c109db23c0e59dacd72af3aa58610df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25df682f7c109db23c0e59dacd72af3aa58610df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b7ba6ec54db24b676d376665692a49d0ecd603a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ba6ec54db24b676d376665692a49d0ecd603a", "html_url": "https://github.com/rust-lang/rust/commit/0b7ba6ec54db24b676d376665692a49d0ecd603a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b7ba6ec54db24b676d376665692a49d0ecd603a/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "618768492f0c731fcb770dc2d178abe840846419", "url": "https://api.github.com/repos/rust-lang/rust/commits/618768492f0c731fcb770dc2d178abe840846419", "html_url": "https://github.com/rust-lang/rust/commit/618768492f0c731fcb770dc2d178abe840846419"}], "stats": {"total": 126, "additions": 56, "deletions": 70}, "files": [{"sha": "03a59d6d7c83205262773822e6ba650b08a729bf", "filename": "src/libstd/sys/cloudabi/shims/process.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcloudabi%2Fshims%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -4,14 +4,16 @@ use crate::io;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n+\n+pub use crate::ffi::OsString as EnvKey;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Command {\n-    env: CommandEnv<DefaultEnvKey>,\n+    env: CommandEnv,\n }\n \n // passed back to std::process with the pipes connected to the child, if any\n@@ -37,7 +39,7 @@ impl Command {\n \n     pub fn arg(&mut self, _arg: &OsStr) {}\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n "}, {"sha": "edf933d10e07433f52f9ae280b89b1b7d16e5658", "filename": "src/libstd/sys/sgx/process.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fsgx%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -4,14 +4,16 @@ use crate::io;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n+\n+pub use crate::ffi::OsString as EnvKey;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Command {\n-    env: CommandEnv<DefaultEnvKey>\n+    env: CommandEnv,\n }\n \n // passed back to std::process with the pipes connected to the child, if any\n@@ -38,7 +40,7 @@ impl Command {\n     pub fn arg(&mut self, _arg: &OsStr) {\n     }\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n "}, {"sha": "056a20345f404013977ff836c6e51eabfa91652f", "filename": "src/libstd/sys/unix/process/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fmod.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -1,5 +1,6 @@\n pub use self::process_common::{Command, ExitStatus, ExitCode, Stdio, StdioPipes};\n pub use self::process_inner::Process;\n+pub use crate::ffi::OsString as EnvKey;\n \n mod process_common;\n #[cfg(not(target_os = \"fuchsia\"))]"}, {"sha": "72e66cc8e724000d335f41c3e24fba4ae89800ad", "filename": "src/libstd/sys/unix/process/process_common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess%2Fprocess_common.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -7,7 +7,7 @@ use crate::ptr;\n use crate::sys::fd::FileDesc;\n use crate::sys::fs::{File, OpenOptions};\n use crate::sys::pipe::{self, AnonPipe};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n use crate::collections::BTreeMap;\n \n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n@@ -69,7 +69,7 @@ pub struct Command {\n     program: CString,\n     args: Vec<CString>,\n     argv: Argv,\n-    env: CommandEnv<DefaultEnvKey>,\n+    env: CommandEnv,\n \n     cwd: Option<CString>,\n     uid: Option<uid_t>,\n@@ -201,7 +201,7 @@ impl Command {\n         self.stderr = Some(stderr);\n     }\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n \n@@ -271,7 +271,7 @@ impl CStringArray {\n     }\n }\n \n-fn construct_envp(env: BTreeMap<DefaultEnvKey, OsString>, saw_nul: &mut bool) -> CStringArray {\n+fn construct_envp(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray {\n     let mut result = CStringArray::with_capacity(env.len());\n     for (k, v) in env {\n         let mut k: OsString = k.into();"}, {"sha": "509140229fd3a846394fe1282f3057d863e4cbdf", "filename": "src/libstd/sys/vxworks/process/process_common.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fvxworks%2Fprocess%2Fprocess_common.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -7,11 +7,13 @@ use crate::ptr;\n use crate::sys::fd::FileDesc;\n use crate::sys::fs::{File, OpenOptions};\n use crate::sys::pipe::{self, AnonPipe};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n use crate::collections::BTreeMap;\n \n use libc::{c_int, gid_t, uid_t, c_char, EXIT_SUCCESS, EXIT_FAILURE};\n \n+pub use crate::ffi::OsString as EnvKey;\n+\n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n@@ -37,7 +39,7 @@ pub struct Command {\n     program: CString,\n     args: Vec<CString>,\n     argv: Argv,\n-    env: CommandEnv<DefaultEnvKey>,\n+    env: CommandEnv,\n \n     cwd: Option<CString>,\n     uid: Option<uid_t>,\n@@ -170,7 +172,7 @@ impl Command {\n         self.stderr = Some(stderr);\n     }\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n \n@@ -240,7 +242,7 @@ impl CStringArray {\n     }\n }\n \n-fn construct_envp(env: BTreeMap<DefaultEnvKey, OsString>, saw_nul: &mut bool) -> CStringArray {\n+fn construct_envp(env: BTreeMap<OsString, OsString>, saw_nul: &mut bool) -> CStringArray {\n     let mut result = CStringArray::with_capacity(env.len());\n     for (k, v) in env {\n         let mut k: OsString = k.into();"}, {"sha": "1c4d028b7618bf6230a73d9c5ac8eb7892196b29", "filename": "src/libstd/sys/wasi/process.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasi%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -4,14 +4,16 @@ use crate::io;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n+\n+pub use crate::ffi::OsString as EnvKey;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Command {\n-    env: CommandEnv<DefaultEnvKey>\n+    env: CommandEnv\n }\n \n // passed back to std::process with the pipes connected to the child, if any\n@@ -38,7 +40,7 @@ impl Command {\n     pub fn arg(&mut self, _arg: &OsStr) {\n     }\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n "}, {"sha": "edf933d10e07433f52f9ae280b89b1b7d16e5658", "filename": "src/libstd/sys/wasm/process.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -4,14 +4,16 @@ use crate::io;\n use crate::sys::fs::File;\n use crate::sys::pipe::AnonPipe;\n use crate::sys::{unsupported, Void};\n-use crate::sys_common::process::{CommandEnv, DefaultEnvKey};\n+use crate::sys_common::process::CommandEnv;\n+\n+pub use crate::ffi::OsString as EnvKey;\n \n ////////////////////////////////////////////////////////////////////////////////\n // Command\n ////////////////////////////////////////////////////////////////////////////////\n \n pub struct Command {\n-    env: CommandEnv<DefaultEnvKey>\n+    env: CommandEnv,\n }\n \n // passed back to std::process with the pipes connected to the child, if any\n@@ -38,7 +40,7 @@ impl Command {\n     pub fn arg(&mut self, _arg: &OsStr) {\n     }\n \n-    pub fn env_mut(&mut self) -> &mut CommandEnv<DefaultEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n "}, {"sha": "8658deb854635405a8d8665b6f7958e8b8885bdf", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -19,7 +19,7 @@ use crate::sys::pipe::{self, AnonPipe};\n use crate::sys::stdio;\n use crate::sys::cvt;\n use crate::sys_common::{AsInner, FromInner, IntoInner};\n-use crate::sys_common::process::{CommandEnv, EnvKey};\n+use crate::sys_common::process::CommandEnv;\n use crate::borrow::Borrow;\n \n use libc::{c_void, EXIT_SUCCESS, EXIT_FAILURE};\n@@ -30,30 +30,28 @@ use libc::{c_void, EXIT_SUCCESS, EXIT_FAILURE};\n \n #[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]\n #[doc(hidden)]\n-pub struct WindowsEnvKey(OsString);\n+pub struct EnvKey(OsString);\n \n-impl From<OsString> for WindowsEnvKey {\n+impl From<OsString> for EnvKey {\n     fn from(k: OsString) -> Self {\n         let mut buf = k.into_inner().into_inner();\n         buf.make_ascii_uppercase();\n-        WindowsEnvKey(FromInner::from_inner(FromInner::from_inner(buf)))\n+        EnvKey(FromInner::from_inner(FromInner::from_inner(buf)))\n     }\n }\n \n-impl From<WindowsEnvKey> for OsString {\n-    fn from(k: WindowsEnvKey) -> Self { k.0 }\n+impl From<EnvKey> for OsString {\n+    fn from(k: EnvKey) -> Self { k.0 }\n }\n \n-impl Borrow<OsStr> for WindowsEnvKey {\n+impl Borrow<OsStr> for EnvKey {\n     fn borrow(&self) -> &OsStr { &self.0 }\n }\n \n-impl AsRef<OsStr> for WindowsEnvKey {\n+impl AsRef<OsStr> for EnvKey {\n     fn as_ref(&self) -> &OsStr { &self.0 }\n }\n \n-impl EnvKey for WindowsEnvKey {}\n-\n \n fn ensure_no_nuls<T: AsRef<OsStr>>(str: T) -> io::Result<T> {\n     if str.as_ref().encode_wide().any(|b| b == 0) {\n@@ -66,7 +64,7 @@ fn ensure_no_nuls<T: AsRef<OsStr>>(str: T) -> io::Result<T> {\n pub struct Command {\n     program: OsString,\n     args: Vec<OsString>,\n-    env: CommandEnv<WindowsEnvKey>,\n+    env: CommandEnv,\n     cwd: Option<OsString>,\n     flags: u32,\n     detach: bool, // not currently exposed in std::process\n@@ -110,7 +108,7 @@ impl Command {\n     pub fn arg(&mut self, arg: &OsStr) {\n         self.args.push(arg.to_os_string())\n     }\n-    pub fn env_mut(&mut self) -> &mut CommandEnv<WindowsEnvKey> {\n+    pub fn env_mut(&mut self) -> &mut CommandEnv {\n         &mut self.env\n     }\n     pub fn cwd(&mut self, dir: &OsStr) {\n@@ -498,7 +496,7 @@ fn make_command_line(prog: &OsStr, args: &[OsString]) -> io::Result<Vec<u16>> {\n     }\n }\n \n-fn make_envp(maybe_env: Option<BTreeMap<WindowsEnvKey, OsString>>)\n+fn make_envp(maybe_env: Option<BTreeMap<EnvKey, OsString>>)\n              -> io::Result<(*mut c_void, Vec<u16>)> {\n     // On Windows we pass an \"environment block\" which is not a char**, but\n     // rather a concatenation of null-terminated k=v\\0 sequences, with a final"}, {"sha": "bdf66fca35970bcc2da56803380f8c5a5f33d25f", "filename": "src/libstd/sys_common/process.rs", "status": "modified", "additions": 14, "deletions": 37, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys_common%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b7ba6ec54db24b676d376665692a49d0ecd603a/src%2Flibstd%2Fsys_common%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fprocess.rs?ref=0b7ba6ec54db24b676d376665692a49d0ecd603a", "patch": "@@ -1,47 +1,20 @@\n #![allow(dead_code)]\n #![unstable(feature = \"process_internals\", issue = \"0\")]\n \n-use crate::ffi::{OsStr, OsString};\n-use crate::env;\n use crate::collections::BTreeMap;\n-use crate::borrow::Borrow;\n-\n-pub trait EnvKey:\n-    From<OsString> + Into<OsString> +\n-    Borrow<OsStr> + Borrow<Self> + AsRef<OsStr> +\n-    Ord + Clone {}\n-\n-// Implement a case-sensitive environment variable key\n-#[derive(Clone, Debug, Eq, PartialEq, Ord, PartialOrd)]\n-pub struct DefaultEnvKey(OsString);\n-\n-impl From<OsString> for DefaultEnvKey {\n-    fn from(k: OsString) -> Self { DefaultEnvKey(k) }\n-}\n-\n-impl From<DefaultEnvKey> for OsString {\n-    fn from(k: DefaultEnvKey) -> Self { k.0 }\n-}\n-\n-impl Borrow<OsStr> for DefaultEnvKey {\n-    fn borrow(&self) -> &OsStr { &self.0 }\n-}\n-\n-impl AsRef<OsStr> for DefaultEnvKey {\n-    fn as_ref(&self) -> &OsStr { &self.0 }\n-}\n-\n-impl EnvKey for DefaultEnvKey {}\n+use crate::env;\n+use crate::ffi::{OsStr, OsString};\n+use crate::sys::process::EnvKey;\n \n // Stores a set of changes to an environment\n #[derive(Clone, Debug)]\n-pub struct CommandEnv<K> {\n+pub struct CommandEnv {\n     clear: bool,\n     saw_path: bool,\n-    vars: BTreeMap<K, Option<OsString>>\n+    vars: BTreeMap<EnvKey, Option<OsString>>\n }\n \n-impl<K: EnvKey> Default for CommandEnv<K> {\n+impl Default for CommandEnv {\n     fn default() -> Self {\n         CommandEnv {\n             clear: false,\n@@ -51,10 +24,10 @@ impl<K: EnvKey> Default for CommandEnv<K> {\n     }\n }\n \n-impl<K: EnvKey> CommandEnv<K> {\n+impl CommandEnv {\n     // Capture the current environment with these changes applied\n-    pub fn capture(&self) -> BTreeMap<K, OsString> {\n-        let mut result = BTreeMap::<K, OsString>::new();\n+    pub fn capture(&self) -> BTreeMap<EnvKey, OsString> {\n+        let mut result = BTreeMap::<EnvKey, OsString>::new();\n         if !self.clear {\n             for (k, v) in env::vars_os() {\n                 result.insert(k.into(), v);\n@@ -90,7 +63,7 @@ impl<K: EnvKey> CommandEnv<K> {\n         !self.clear && self.vars.is_empty()\n     }\n \n-    pub fn capture_if_changed(&self) -> Option<BTreeMap<K, OsString>> {\n+    pub fn capture_if_changed(&self) -> Option<BTreeMap<EnvKey, OsString>> {\n         if self.is_unchanged() {\n             None\n         } else {\n@@ -103,6 +76,7 @@ impl<K: EnvKey> CommandEnv<K> {\n         self.maybe_saw_path(&key);\n         self.vars.insert(key.to_owned().into(), Some(value.to_owned()));\n     }\n+\n     pub fn remove(&mut self, key: &OsStr) {\n         self.maybe_saw_path(&key);\n         if self.clear {\n@@ -111,13 +85,16 @@ impl<K: EnvKey> CommandEnv<K> {\n             self.vars.insert(key.to_owned().into(), None);\n         }\n     }\n+\n     pub fn clear(&mut self) {\n         self.clear = true;\n         self.vars.clear();\n     }\n+\n     pub fn have_changed_path(&self) -> bool {\n         self.saw_path || self.clear\n     }\n+\n     fn maybe_saw_path(&mut self, key: &OsStr) {\n         if !self.saw_path && key == \"PATH\" {\n             self.saw_path = true;"}]}