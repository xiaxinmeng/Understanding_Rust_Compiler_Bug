{"sha": "9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "node_id": "C_kwDOAAsO6NoAKDkzMjNhMGQxYmVmOWIwNzA4ZTI1ZjBhOGFiYWY1ZTVmODg1OTlmOGQ", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2022-01-16T15:58:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-16T15:58:18Z"}, "message": "Rollup merge of #92746 - estebank:question-mark-in-type, r=davidtwco\n\nParse `Ty?` as `Option<Ty>` and provide structured suggestion\n\nSwift has specific syntax that desugars to `Option<T>` similar to our\n`?` operator, which means that people might try to use it in Rust. Parse\nit and gracefully recover.", "tree": {"sha": "6b4a7fe7ebdf25c0ed07bddc513162b8073c5245", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6b4a7fe7ebdf25c0ed07bddc513162b8073c5245"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh5ECaCRBK7hj4Ov3rIwAAFmkIAFT2cE6TNYYPXV3xJQ0g+vI0\nf+c8u4CV8Q0nRUHR8mD0cGRjeJM3B6/Q84XXdiqQb9khOpMc+t0enUZFe42MqjX+\n3oOWWSs6BATKvb+bLqbaIgqg0ysCJO+Sg/dK6p0QK+EQhSwkF1ZrRGsy8fZeCx4s\nMfrjQ2XUOYvjmaXS/Bd5ID37CtpG+wQp67iRv1jpKDpgRjbBm3YzxpqFMAdpby/v\ndue6fWniWV03WlDe1rcAEodD3Rv6o5ZImpagE0GrR1Ce1hP4r+ZHup0nTVEtUOT8\nermzIV7FHuWcjzIUNrcrfd5HxVUs77U376XIHTZBHCLd1Qc7AJpIGw/Y+5cKPFY=\n=OmpT\n-----END PGP SIGNATURE-----\n", "payload": "tree 6b4a7fe7ebdf25c0ed07bddc513162b8073c5245\nparent 9835b90c91e7012f27fc78a60599aab0011d2336\nparent cfc0bd12581651e5d0f51d0d4c2d8306cc13cb51\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1642348698 +0100\ncommitter GitHub <noreply@github.com> 1642348698 +0100\n\nRollup merge of #92746 - estebank:question-mark-in-type, r=davidtwco\n\nParse `Ty?` as `Option<Ty>` and provide structured suggestion\n\nSwift has specific syntax that desugars to `Option<T>` similar to our\n`?` operator, which means that people might try to use it in Rust. Parse\nit and gracefully recover.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "html_url": "https://github.com/rust-lang/rust/commit/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9835b90c91e7012f27fc78a60599aab0011d2336", "url": "https://api.github.com/repos/rust-lang/rust/commits/9835b90c91e7012f27fc78a60599aab0011d2336", "html_url": "https://github.com/rust-lang/rust/commit/9835b90c91e7012f27fc78a60599aab0011d2336"}, {"sha": "cfc0bd12581651e5d0f51d0d4c2d8306cc13cb51", "url": "https://api.github.com/repos/rust-lang/rust/commits/cfc0bd12581651e5d0f51d0d4c2d8306cc13cb51", "html_url": "https://github.com/rust-lang/rust/commit/cfc0bd12581651e5d0f51d0d4c2d8306cc13cb51"}], "stats": {"total": 162, "additions": 125, "deletions": 37}, "files": [{"sha": "612d4508565129a2342d014e0c8d1b4a5d696712", "filename": "compiler/rustc_parse/src/parser/diagnostics.rs", "status": "modified", "additions": 29, "deletions": 1, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fdiagnostics.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -1,5 +1,5 @@\n use super::pat::Expected;\n-use super::ty::AllowPlus;\n+use super::ty::{AllowPlus, IsAsCast};\n use super::{\n     BlockMode, Parser, PathStyle, RecoverColon, RecoverComma, Restrictions, SemiColonMode, SeqSep,\n     TokenExpectType, TokenType,\n@@ -1032,6 +1032,34 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Swift lets users write `Ty?` to mean `Option<Ty>`. Parse the construct and recover from it.\n+    pub(super) fn maybe_recover_from_question_mark(\n+        &mut self,\n+        ty: P<Ty>,\n+        is_as_cast: IsAsCast,\n+    ) -> P<Ty> {\n+        if let IsAsCast::Yes = is_as_cast {\n+            return ty;\n+        }\n+        if self.token == token::Question {\n+            self.bump();\n+            self.struct_span_err(self.prev_token.span, \"invalid `?` in type\")\n+                .span_label(self.prev_token.span, \"`?` is only allowed on expressions, not types\")\n+                .multipart_suggestion(\n+                    \"if you meant to express that the type might not contain a value, use the `Option` wrapper type\",\n+                    vec![\n+                        (ty.span.shrink_to_lo(), \"Option<\".to_string()),\n+                        (self.prev_token.span, \">\".to_string()),\n+                    ],\n+                    Applicability::MachineApplicable,\n+                )\n+                .emit();\n+            self.mk_ty(ty.span.to(self.prev_token.span), TyKind::Err)\n+        } else {\n+            ty\n+        }\n+    }\n+\n     pub(super) fn maybe_recover_from_bad_type_plus(\n         &mut self,\n         allow_plus: AllowPlus,"}, {"sha": "cd3846d5a224ef33934f5192650515c41ce22020", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -682,7 +682,7 @@ impl<'a> Parser<'a> {\n         // Save the state of the parser before parsing type normally, in case there is a\n         // LessThan comparison after this cast.\n         let parser_snapshot_before_type = self.clone();\n-        let cast_expr = match self.parse_ty_no_plus() {\n+        let cast_expr = match self.parse_as_cast_ty() {\n             Ok(rhs) => mk_expr(self, lhs, rhs),\n             Err(mut type_err) => {\n                 // Rewind to before attempting to parse the type with generics, to recover\n@@ -808,7 +808,7 @@ impl<'a> Parser<'a> {\n                 \"casts cannot be followed by {}\",\n                 match with_postfix.kind {\n                     ExprKind::Index(_, _) => \"indexing\",\n-                    ExprKind::Try(_) => \"?\",\n+                    ExprKind::Try(_) => \"`?`\",\n                     ExprKind::Field(_, _) => \"a field access\",\n                     ExprKind::MethodCall(_, _, _) => \"a method call\",\n                     ExprKind::Call(_, _) => \"a function call\","}, {"sha": "566b77a5e9e555f841b8010f72619ec5ad1738eb", "filename": "compiler/rustc_parse/src/parser/ty.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fty.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -44,6 +44,11 @@ pub(super) enum RecoverQPath {\n     No,\n }\n \n+pub(super) enum IsAsCast {\n+    Yes,\n+    No,\n+}\n+\n /// Signals whether parsing a type should recover `->`.\n ///\n /// More specifically, when parsing a function like:\n@@ -100,6 +105,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -113,6 +119,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             Some(ty_params),\n+            IsAsCast::No,\n         )\n     }\n \n@@ -126,6 +133,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -142,9 +150,22 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::Yes,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n+    /// Parses a type following an `as` cast. Similar to `parse_ty_no_plus`, but signaling origin\n+    /// for better diagnostics involving `?`.\n+    pub(super) fn parse_as_cast_ty(&mut self) -> PResult<'a, P<Ty>> {\n+        self.parse_ty_common(\n+            AllowPlus::No,\n+            AllowCVariadic::No,\n+            RecoverQPath::Yes,\n+            RecoverReturnSign::Yes,\n+            None,\n+            IsAsCast::Yes,\n+        )\n+    }\n     /// Parse a type without recovering `:` as `->` to avoid breaking code such as `where fn() : for<'a>`\n     pub(super) fn parse_ty_for_where_clause(&mut self) -> PResult<'a, P<Ty>> {\n         self.parse_ty_common(\n@@ -153,6 +174,7 @@ impl<'a> Parser<'a> {\n             RecoverQPath::Yes,\n             RecoverReturnSign::OnlyFatArrow,\n             None,\n+            IsAsCast::No,\n         )\n     }\n \n@@ -171,6 +193,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n+                IsAsCast::No,\n             )?;\n             FnRetTy::Ty(ty)\n         } else if recover_return_sign.can_recover(&self.token.kind) {\n@@ -191,6 +214,7 @@ impl<'a> Parser<'a> {\n                 recover_qpath,\n                 recover_return_sign,\n                 None,\n+                IsAsCast::No,\n             )?;\n             FnRetTy::Ty(ty)\n         } else {\n@@ -205,6 +229,7 @@ impl<'a> Parser<'a> {\n         recover_qpath: RecoverQPath,\n         recover_return_sign: RecoverReturnSign,\n         ty_generics: Option<&Generics>,\n+        is_as_cast: IsAsCast,\n     ) -> PResult<'a, P<Ty>> {\n         let allow_qpath_recovery = recover_qpath == RecoverQPath::Yes;\n         maybe_recover_from_interpolated_ty_qpath!(self, allow_qpath_recovery);\n@@ -280,6 +305,7 @@ impl<'a> Parser<'a> {\n         // Try to recover from use of `+` with incorrect priority.\n         self.maybe_report_ambiguous_plus(allow_plus, impl_dyn_multi, &ty);\n         self.maybe_recover_from_bad_type_plus(allow_plus, &ty)?;\n+        let ty = self.maybe_recover_from_question_mark(ty, is_as_cast);\n         self.maybe_recover_from_bad_qpath(ty, allow_qpath_recovery)\n     }\n "}, {"sha": "23f245a51681b559cdfc627ae0a7cd7fd1420030", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -117,9 +117,9 @@ static bar2: &[i32] = &(&[1i32,2,3]: &[i32; 3][0..1]);\n \n pub fn cast_then_try() -> Result<u64,u64> {\n     Err(0u64) as Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by ?\n+    //~^ ERROR: casts cannot be followed by `?`\n     Err(0u64): Result<u64,u64>?;\n-    //~^ ERROR: casts cannot be followed by ?\n+    //~^ ERROR: casts cannot be followed by `?`\n     Ok(1)\n }\n "}, {"sha": "e96b67da3364df8b9204fb8ff2a6c75515a1a8b5", "filename": "src/test/ui/parser/issues/issue-35813-postfix-after-cast.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-35813-postfix-after-cast.stderr?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -265,7 +265,7 @@ help: try surrounding the expression in parentheses\n LL | static bar2: &[i32] = &((&[1i32,2,3]: &[i32; 3])[0..1]);\n    |                         +                      +\n \n-error: casts cannot be followed by ?\n+error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:119:5\n    |\n LL |     Err(0u64) as Result<u64,u64>?;\n@@ -276,7 +276,7 @@ help: try surrounding the expression in parentheses\n LL |     (Err(0u64) as Result<u64,u64>)?;\n    |     +                            +\n \n-error: casts cannot be followed by ?\n+error: casts cannot be followed by `?`\n   --> $DIR/issue-35813-postfix-after-cast.rs:121:5\n    |\n LL |     Err(0u64): Result<u64,u64>?;"}, {"sha": "9fa8086c2c9bf4af8b6fe37ae05539cbae98d8a0", "filename": "src/test/ui/parser/issues/issue-84148-1.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -1,4 +1,3 @@\n fn f(t:for<>t?)\n-//~^ ERROR: expected parameter name\n-//~| ERROR: expected one of\n-//~| ERROR: expected one of\n+//~^ ERROR: expected one of\n+//~| ERROR: invalid `?` in type"}, {"sha": "9261067c22158c032256790ebe7e93eaf29065fe", "filename": "src/test/ui/parser/issues/issue-84148-1.stderr", "status": "modified", "additions": 7, "deletions": 11, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-1.stderr?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -1,23 +1,19 @@\n-error: expected parameter name, found `?`\n+error: invalid `?` in type\n   --> $DIR/issue-84148-1.rs:1:14\n    |\n LL | fn f(t:for<>t?)\n-   |              ^ expected parameter name\n-\n-error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n-  --> $DIR/issue-84148-1.rs:1:14\n+   |              ^ `?` is only allowed on expressions, not types\n    |\n-LL | fn f(t:for<>t?)\n-   |              ^\n-   |              |\n-   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n-   |              help: missing `,`\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn f(t:Option<for<>t>)\n+   |        +++++++      ~\n \n error: expected one of `->`, `where`, or `{`, found `<eof>`\n   --> $DIR/issue-84148-1.rs:1:15\n    |\n LL | fn f(t:for<>t?)\n    |               ^ expected one of `->`, `where`, or `{`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 2 previous errors\n "}, {"sha": "2f6a7facfb271d8653c41957b67b06666a93f9bf", "filename": "src/test/ui/parser/issues/issue-84148-2.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -1,4 +1,3 @@\n // error-pattern: this file contains an unclosed delimiter\n-// error-pattern: expected parameter name\n-// error-pattern: expected one of\n+// error-pattern: invalid `?` in type\n fn f(t:for<>t?"}, {"sha": "71d543f9b73447804f775612ac98fc8050996fcf", "filename": "src/test/ui/parser/issues/issue-84148-2.stderr", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissues%2Fissue-84148-2.stderr?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -1,31 +1,27 @@\n error: this file contains an unclosed delimiter\n-  --> $DIR/issue-84148-2.rs:4:16\n+  --> $DIR/issue-84148-2.rs:3:16\n    |\n LL | fn f(t:for<>t?\n    |     -          ^\n    |     |\n    |     unclosed delimiter\n \n-error: expected parameter name, found `?`\n-  --> $DIR/issue-84148-2.rs:4:14\n+error: invalid `?` in type\n+  --> $DIR/issue-84148-2.rs:3:14\n    |\n LL | fn f(t:for<>t?\n-   |              ^ expected parameter name\n-\n-error: expected one of `(`, `)`, `+`, `,`, `::`, or `<`, found `?`\n-  --> $DIR/issue-84148-2.rs:4:14\n+   |              ^ `?` is only allowed on expressions, not types\n    |\n-LL | fn f(t:for<>t?\n-   |              ^\n-   |              |\n-   |              expected one of `(`, `)`, `+`, `,`, `::`, or `<`\n-   |              help: missing `,`\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn f(t:Option<for<>t>\n+   |        +++++++      ~\n \n error: expected one of `->`, `where`, or `{`, found `<eof>`\n-  --> $DIR/issue-84148-2.rs:4:16\n+  --> $DIR/issue-84148-2.rs:3:16\n    |\n LL | fn f(t:for<>t?\n    |                ^ expected one of `->`, `where`, or `{`\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}, {"sha": "6ea24484e033eaf353212c446a7077130bdd946d", "filename": "src/test/ui/parser/trailing-question-in-type.fixed", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.fixed?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn foo() -> Option<i32> { //~ ERROR invalid `?` in type\n+    let x: Option<i32> = Some(1); //~ ERROR invalid `?` in type\n+    x\n+}\n+\n+fn main() {\n+    let _: Option<i32> = foo();\n+}"}, {"sha": "b1c508365cff5aefd697c852bd0d42b54e21edf2", "filename": "src/test/ui/parser/trailing-question-in-type.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.rs?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -0,0 +1,10 @@\n+// run-rustfix\n+\n+fn foo() -> i32? { //~ ERROR invalid `?` in type\n+    let x: i32? = Some(1); //~ ERROR invalid `?` in type\n+    x\n+}\n+\n+fn main() {\n+    let _: Option<i32> = foo();\n+}"}, {"sha": "a3cd419c0c718a940d11ecb1443d088a703803fb", "filename": "src/test/ui/parser/trailing-question-in-type.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Ftrailing-question-in-type.stderr?ref=9323a0d1bef9b0708e25f0a8abaf5e5f88599f8d", "patch": "@@ -0,0 +1,24 @@\n+error: invalid `?` in type\n+  --> $DIR/trailing-question-in-type.rs:3:16\n+   |\n+LL | fn foo() -> i32? {\n+   |                ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL | fn foo() -> Option<i32> {\n+   |             +++++++   ~\n+\n+error: invalid `?` in type\n+  --> $DIR/trailing-question-in-type.rs:4:15\n+   |\n+LL |     let x: i32? = Some(1);\n+   |               ^ `?` is only allowed on expressions, not types\n+   |\n+help: if you meant to express that the type might not contain a value, use the `Option` wrapper type\n+   |\n+LL |     let x: Option<i32> = Some(1);\n+   |            +++++++   ~\n+\n+error: aborting due to 2 previous errors\n+"}]}