{"sha": "e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU0NzhjZWRiMGFiMGJkYjdlMDBhM2E2MGE2OTQ2OTE1YWYwZmRkNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T18:49:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-11T18:49:50Z"}, "message": "auto merge of #6385 : huonw/rust/rustc-dtor-struct-match, r=nikomatsakis\n\n**Caveat**: With the current commit, this check only works for `match`s, the checks (incorrectly) do not run for patterns in `let`s, and invalid/unsafe code compiles.\r\n\r\nI don't know how to fix this, I experimented with some things to try to make let patterns and match patterns run on the same code (since this would presumably fix many of the other unsoundness issues of let-patterns, e.g. #6225), but I don't understand enough of the code. (I think I heard someone talking about a fix for `let` being in progress?)\r\n\r\nFixes #6344 and #6341.", "tree": {"sha": "33adb76318393876fa8c9f78964873807b38deb7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33adb76318393876fa8c9f78964873807b38deb7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "html_url": "https://github.com/rust-lang/rust/commit/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "url": "https://api.github.com/repos/rust-lang/rust/commits/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5", "html_url": "https://github.com/rust-lang/rust/commit/96de2b0273e828edf45d4b3e6c4dc5c3cf665fd5"}, {"sha": "912a352712b1b97009a11e3c3f7c4ba7360d9eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/912a352712b1b97009a11e3c3f7c4ba7360d9eaf", "html_url": "https://github.com/rust-lang/rust/commit/912a352712b1b97009a11e3c3f7c4ba7360d9eaf"}], "stats": {"total": 155, "additions": 132, "deletions": 23}, "files": [{"sha": "893940d8ac60d10765c89f10371ce3f98c336756", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 38, "deletions": 16, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -822,43 +822,65 @@ pub fn check_legality_of_move_bindings(cx: @MatchCheckCtxt,\n             }\n         }\n \n-        // Now check to ensure that any move binding is not behind an @ or &.\n-        // This is always illegal.\n+        // Now check to ensure that any move binding is not behind an\n+        // @ or &, or within a struct with a destructor.  This is\n+        // always illegal.\n         let vt = visit::mk_vt(@visit::Visitor {\n-            visit_pat: |pat, behind_bad_pointer: bool, v| {\n+            visit_pat: |pat, (behind_bad_pointer, behind_dtor_struct): (bool, bool), v| {\n                 match pat.node {\n                     pat_ident(_, _, sub) => {\n                         debug!(\"(check legality of move) checking pat \\\n-                                ident with behind_bad_pointer %?\",\n-                                behind_bad_pointer);\n+                                ident with behind_bad_pointer %? and behind_dtor_struct %?\",\n+                               behind_bad_pointer, behind_dtor_struct);\n \n-                        if behind_bad_pointer &&\n+                        if behind_bad_pointer || behind_dtor_struct &&\n                             cx.moves_map.contains(&pat.id)\n                         {\n-                            cx.tcx.sess.span_err(\n-                                pat.span,\n-                                \"by-move pattern \\\n-                                 bindings may not occur \\\n-                                 behind @ or & bindings\");\n+                            let msg = if behind_bad_pointer {\n+                                \"by-move pattern bindings may not occur behind @ or & bindings\"\n+                            } else {\n+                                \"cannot bind by-move within struct (it has a destructor)\"\n+                            };\n+                            cx.tcx.sess.span_err(pat.span, msg);\n                         }\n \n                         match sub {\n                             None => {}\n                             Some(subpat) => {\n-                                (v.visit_pat)(subpat, behind_bad_pointer, v);\n+                                (v.visit_pat)(subpat,\n+                                              (behind_bad_pointer, behind_dtor_struct),\n+                                              v);\n                             }\n                         }\n                     }\n \n                     pat_box(subpat) | pat_region(subpat) => {\n-                        (v.visit_pat)(subpat, true, v);\n+                        (v.visit_pat)(subpat, (true, behind_dtor_struct), v);\n                     }\n \n-                    _ => visit::visit_pat(pat, behind_bad_pointer, v)\n+                    pat_struct(_, ref fields, _) => {\n+                        let behind_dtor_struct = behind_dtor_struct ||\n+                            (match cx.tcx.def_map.find(&pat.id) {\n+                                Some(&def_struct(id)) => {\n+                                    ty::has_dtor(cx.tcx, id)\n+                                }\n+                                _ => false\n+                            });\n+                        debug!(\"(check legality of move) checking pat \\\n+                                struct with behind_bad_pointer %? and behind_dtor_struct %?\",\n+                               behind_bad_pointer, behind_dtor_struct);\n+\n+                        for fields.each |fld| {\n+                            (v.visit_pat)(fld.pat, (behind_bad_pointer,\n+                                                    behind_dtor_struct), v)\n+                        }\n+                    }\n+\n+                    _ => visit::visit_pat(pat, (behind_bad_pointer, behind_dtor_struct), v)\n                 }\n             },\n-            .. *visit::default_visitor::<bool>()\n+            .. *visit::default_visitor::<(bool, bool)>()\n         });\n-        (vt.visit_pat)(*pat, false, vt);\n+        (vt.visit_pat)(*pat, (false, false), vt);\n     }\n }"}, {"sha": "a1a098bc5760e8fe676b69ebd3e53e502d631684", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -340,12 +340,6 @@ pub fn check_struct_pat(pcx: &pat_ctxt, pat_id: ast::node_id, span: span,\n         }\n     }\n \n-    // Forbid pattern-matching structs with destructors.\n-    if ty::has_dtor(tcx, class_id) {\n-        tcx.sess.span_err(span, \"deconstructing struct not allowed in pattern \\\n-                                 (it has a destructor)\");\n-    }\n-\n     check_struct_pat_fields(pcx, span, path, fields, class_fields, class_id,\n                             substitutions, etc);\n }"}, {"sha": "c363f172d2f46440d5199ea5fa3b19b7f98a5696", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-let.rs", "status": "renamed", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-let.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -1,3 +1,4 @@\n+// xfail-test #3024\n // Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -19,7 +20,7 @@ impl Drop for X {\n }\n \n fn unwrap(x: X) -> ~str {\n-    let X { x: y } = x; //~ ERROR deconstructing struct not allowed in pattern\n+    let X { x: y } = x; //~ ERROR cannot bind by-move within struct\n     y\n }\n ", "previous_filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct.rs"}, {"sha": "40305ba8b95c92f5344394f52ed60efe6cc04391", "filename": "src/test/compile-fail/disallowed-deconstructing-destructing-struct-match.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdisallowed-deconstructing-destructing-struct-match.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+struct X {\n+    x: ~str,\n+}\n+\n+impl Drop for X {\n+    fn finalize(&self) {\n+        error!(\"value: %s\", self.x);\n+    }\n+}\n+\n+fn main() {\n+    let x = X { x: ~\"hello\" };\n+\n+    match x {\n+        X { x: y } => error!(\"contents: %s\", y)\n+        //~^ ERROR cannot bind by-move within struct\n+    }\n+}"}, {"sha": "394345556fcf31eb72db1c6118ead6e5626dc117", "filename": "src/test/run-pass/issue-6341.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6341.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6341.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#[deriving(Eq)]\n+struct A { x: uint }\n+\n+impl Drop for A {\n+    fn finalize(&self) {}\n+}\n+\n+fn main() {}\n\\ No newline at end of file"}, {"sha": "916131b6b711c6353da3c70a19b452518b8794a6", "filename": "src/test/run-pass/issue-6344-let.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-let.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -0,0 +1,22 @@\n+// xfail-test #3874\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct A { x: uint }\n+\n+impl Drop for A {\n+    fn finalize(&self) {}\n+}\n+\n+fn main() {\n+    let a = A { x: 0 };\n+\n+    let A { x: ref x } = a;\n+    debug!(\"%?\", x)\n+}"}, {"sha": "5bf57aa711692b3535d3f480cb1e9a0f60ea24eb", "filename": "src/test/run-pass/issue-6344-match.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-6344-match.rs?ref=e478cedb0ab0bdb7e00a3a60a6946915af0fdd5a", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+struct A { x: uint }\n+\n+impl Drop for A {\n+    fn finalize(&self) {}\n+}\n+\n+fn main() {\n+    let a = A { x: 0 };\n+\n+    match a {\n+        A { x : ref x } => {\n+            debug!(\"%?\", x)\n+        }\n+    }\n+}"}]}