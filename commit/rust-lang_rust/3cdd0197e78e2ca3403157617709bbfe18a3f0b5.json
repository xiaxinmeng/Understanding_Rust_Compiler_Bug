{"sha": "3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "node_id": "C_kwDOAAsO6NoAKDNjZGQwMTk3ZTc4ZTJjYTM0MDMxNTc2MTc3MDliYmZlMThhM2YwYjU", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T04:11:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T04:11:27Z"}, "message": "Auto merge of #106227 - bryangarza:ctfe-limit, r=oli-obk\n\nUse stable metric for const eval limit instead of current terminator-based logic\n\nThis patch adds a `MirPass` that inserts a new MIR instruction `ConstEvalCounter` to any loops and function calls in the CFG. This instruction is used during Const Eval to count against the `const_eval_limit`, and emit the `StepLimitReached` error, replacing the current logic which uses Terminators only.\n\nThe new method of counting loops and function calls should be more stable across compiler versions (i.e., not cause crates that compiled successfully before, to no longer compile when changes to the MIR generation/optimization are made).\n\nAlso see: #103877", "tree": {"sha": "f1408419d2d0288c966e40cbb9e455cb5da51603", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1408419d2d0288c966e40cbb9e455cb5da51603"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "html_url": "https://github.com/rust-lang/rust/commit/3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "html_url": "https://github.com/rust-lang/rust/commit/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2"}, {"sha": "bdb815a22ab00450dcc010a99309c24c475432a6", "url": "https://api.github.com/repos/rust-lang/rust/commits/bdb815a22ab00450dcc010a99309c24c475432a6", "html_url": "https://github.com/rust-lang/rust/commit/bdb815a22ab00450dcc010a99309c24c475432a6"}], "stats": {"total": 420, "additions": 400, "deletions": 20}, "files": [{"sha": "2821677c5371f7857044cd535e24bd14bfd7ca59", "filename": "compiler/rustc_borrowck/src/dataflow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdataflow.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -393,6 +393,7 @@ impl<'tcx> rustc_mir_dataflow::GenKillAnalysis<'tcx> for Borrows<'_, 'tcx> {\n             | mir::StatementKind::AscribeUserType(..)\n             | mir::StatementKind::Coverage(..)\n             | mir::StatementKind::Intrinsic(..)\n+            | mir::StatementKind::ConstEvalCounter\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "6217676d5c150f5f977ff22735f65ca1d817a86f", "filename": "compiler/rustc_borrowck/src/invalidation.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Finvalidation.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -91,7 +91,8 @@ impl<'cx, 'tcx> Visitor<'tcx> for InvalidationGenerator<'cx, 'tcx> {\n                     LocalMutationIsAllowed::Yes,\n                 );\n             }\n-            StatementKind::Nop\n+            StatementKind::ConstEvalCounter\n+            | StatementKind::Nop\n             | StatementKind::Retag { .. }\n             | StatementKind::Deinit(..)\n             | StatementKind::SetDiscriminant { .. } => {"}, {"sha": "bc81abe4005c919467114d502173cf017e0ab308", "filename": "compiler/rustc_borrowck/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Flib.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -609,7 +609,8 @@ impl<'cx, 'tcx> rustc_mir_dataflow::ResultsVisitor<'cx, 'tcx> for MirBorrowckCtx\n             StatementKind::AscribeUserType(..)\n             // Doesn't have any language semantics\n             | StatementKind::Coverage(..)\n-            // Does not actually affect borrowck\n+            // These do not actually affect borrowck\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::StorageLive(..) => {}\n             StatementKind::StorageDead(local) => {\n                 self.access_place("}, {"sha": "06087b0c579d8c293349d82e0e847fb5a2b50da5", "filename": "compiler/rustc_borrowck/src/type_check/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Ftype_check%2Fmod.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1258,6 +1258,7 @@ impl<'a, 'tcx> TypeChecker<'a, 'tcx> {\n             | StatementKind::StorageDead(..)\n             | StatementKind::Retag { .. }\n             | StatementKind::Coverage(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n             StatementKind::Deinit(..) | StatementKind::SetDiscriminant { .. } => {\n                 bug!(\"Statement not allowed in this MIR phase\")"}, {"sha": "dffb2ed8f4f392544f5d551d1ea7105c853e55db", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -794,6 +794,7 @@ fn codegen_stmt<'tcx>(\n         StatementKind::StorageLive(_)\n         | StatementKind::StorageDead(_)\n         | StatementKind::Deinit(_)\n+        | StatementKind::ConstEvalCounter\n         | StatementKind::Nop\n         | StatementKind::FakeRead(..)\n         | StatementKind::Retag { .. }"}, {"sha": "49c4f1aaaefc69a9e52a68792f55f76b68471281", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -530,6 +530,7 @@ pub(crate) fn mir_operand_get_const_val<'tcx>(\n                         | StatementKind::Retag(_, _)\n                         | StatementKind::AscribeUserType(_, _)\n                         | StatementKind::Coverage(_)\n+                        | StatementKind::ConstEvalCounter\n                         | StatementKind::Nop => {}\n                     }\n                 }"}, {"sha": "60fbceb344d88dd360120d8d2594375b74793c60", "filename": "compiler/rustc_codegen_ssa/src/mir/statement.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fstatement.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -91,6 +91,7 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             mir::StatementKind::FakeRead(..)\n             | mir::StatementKind::Retag { .. }\n             | mir::StatementKind::AscribeUserType(..)\n+            | mir::StatementKind::ConstEvalCounter\n             | mir::StatementKind::Nop => {}\n         }\n     }"}, {"sha": "a5bc121485d8cde6a3beb7dd0b1a601b32e1c445", "filename": "compiler/rustc_const_eval/src/const_eval/machine.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Fconst_eval%2Fmachine.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -561,8 +561,8 @@ impl<'mir, 'tcx> interpret::Machine<'mir, 'tcx> for CompileTimeInterpreter<'mir,\n         throw_unsup_format!(\"pointer arithmetic or comparison is not supported at compile-time\");\n     }\n \n-    fn before_terminator(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n-        // The step limit has already been hit in a previous call to `before_terminator`.\n+    fn increment_const_eval_counter(ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        // The step limit has already been hit in a previous call to `increment_const_eval_counter`.\n         if ecx.machine.steps_remaining == 0 {\n             return Ok(());\n         }"}, {"sha": "76ed7b80f8d81b7a69c553a2597450cd5710572a", "filename": "compiler/rustc_const_eval/src/interpret/machine.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fmachine.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -244,12 +244,18 @@ pub trait Machine<'mir, 'tcx>: Sized {\n     }\n \n     /// Called before a basic block terminator is executed.\n-    /// You can use this to detect endlessly running programs.\n     #[inline]\n     fn before_terminator(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n         Ok(())\n     }\n \n+    /// Called when the interpreter encounters a `StatementKind::ConstEvalCounter` instruction.\n+    /// You can use this to detect long or endlessly running programs.\n+    #[inline]\n+    fn increment_const_eval_counter(_ecx: &mut InterpCx<'mir, 'tcx, Self>) -> InterpResult<'tcx> {\n+        Ok(())\n+    }\n+\n     /// Called before a global allocation is accessed.\n     /// `def_id` is `Some` if this is the \"lazy\" allocation of a static.\n     #[inline]"}, {"sha": "d101937fd7406cc64f214f60b0c1073024b87bc3", "filename": "compiler/rustc_const_eval/src/interpret/step.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Finterpret%2Fstep.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -129,6 +129,10 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // FIXME(#73156): Handle source code coverage in const eval\n             Coverage(..) => {}\n \n+            ConstEvalCounter => {\n+                M::increment_const_eval_counter(self)?;\n+            }\n+\n             // Defined to do nothing. These are added by optimization passes, to avoid changing the\n             // size of MIR constantly.\n             Nop => {}"}, {"sha": "f47e3e86ebe2e0a0eedf3b14903e62d986c2c341", "filename": "compiler/rustc_const_eval/src/transform/check_consts/check.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -693,6 +693,7 @@ impl<'tcx> Visitor<'tcx> for Checker<'_, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "a2f2457487a4fc35974cb12a8f9e9e8af998320e", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -761,6 +761,7 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n             StatementKind::StorageLive(..)\n             | StatementKind::StorageDead(..)\n             | StatementKind::Coverage(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n "}, {"sha": "0a21a4249c8295b94ab4b2f7db068a58e8da9ba7", "filename": "compiler/rustc_data_structures/src/graph/dominators/mod.rs", "status": "modified", "additions": 48, "deletions": 1, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fgraph%2Fdominators%2Fmod.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -135,7 +135,47 @@ pub fn dominators<G: ControlFlowGraph>(graph: G) -> Dominators<G::Node> {\n         // This loop computes the semi[w] for w.\n         semi[w] = w;\n         for v in graph.predecessors(pre_order_to_real[w]) {\n-            // Reachable vertices may have unreachable predecessors, so ignore any of them\n+            // TL;DR: Reachable vertices may have unreachable predecessors, so ignore any of them.\n+            //\n+            // Ignore blocks which are not connected to the entry block.\n+            //\n+            // The algorithm that was used to traverse the graph and build the\n+            // `pre_order_to_real` and `real_to_pre_order` vectors does so by\n+            // starting from the entry block and following the successors.\n+            // Therefore, any blocks not reachable from the entry block will be\n+            // set to `None` in the `pre_order_to_real` vector.\n+            //\n+            // For example, in this graph, A and B should be skipped:\n+            //\n+            //           \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n+            //           \u2502     \u2502\n+            //           \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n+            //              \u2502\n+            //           \u250c\u2500\u2500\u25bc\u2500\u2500\u2510              \u250c\u2500\u2500\u2500\u2500\u2500\u2510\n+            //           \u2502     \u2502              \u2502  A  \u2502\n+            //           \u2514\u2500\u2500\u252c\u2500\u2500\u2518              \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n+            //              \u2502                    \u2502\n+            //      \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510            \u2502\n+            //      \u2502               \u2502            \u2502\n+            //   \u250c\u2500\u2500\u25bc\u2500\u2500\u2510         \u250c\u2500\u2500\u25bc\u2500\u2500\u2510      \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n+            //   \u2502     \u2502         \u2502     \u2502      \u2502  B  \u2502\n+            //   \u2514\u2500\u2500\u252c\u2500\u2500\u2518         \u2514\u2500\u2500\u252c\u2500\u2500\u2518      \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n+            //      \u2502               \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2518\n+            //   \u250c\u2500\u2500\u25bc\u2500\u2500\u2510                   \u2502\n+            //   \u2502     \u2502                   \u2502\n+            //   \u2514\u2500\u2500\u252c\u2500\u2500\u2518                \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n+            //      \u2502                   \u2502     \u2502\n+            //      \u2502                   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n+            //   \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n+            //   \u2502     \u2502\n+            //   \u2514\u2500\u2500\u252c\u2500\u2500\u2518\n+            //      \u2502\n+            //   \u250c\u2500\u2500\u25bc\u2500\u2500\u2510\n+            //   \u2502     \u2502\n+            //   \u2514\u2500\u2500\u2500\u2500\u2500\u2518\n+            //\n+            // ...this may be the case if a MirPass modifies the CFG to remove\n+            // or rearrange certain blocks/edges.\n             let Some(v) = real_to_pre_order[v] else {\n                 continue\n             };\n@@ -264,13 +304,18 @@ fn compress(\n     }\n }\n \n+/// Tracks the list of dominators for each node.\n #[derive(Clone, Debug)]\n pub struct Dominators<N: Idx> {\n     post_order_rank: IndexVec<N, usize>,\n+    // Even though we track only the immediate dominator of each node, it's\n+    // possible to get its full list of dominators by looking up the dominator\n+    // of each dominator. (See the `impl Iterator for Iter` definition).\n     immediate_dominators: IndexVec<N, Option<N>>,\n }\n \n impl<Node: Idx> Dominators<Node> {\n+    /// Whether the given Node has an immediate dominator.\n     pub fn is_reachable(&self, node: Node) -> bool {\n         self.immediate_dominators[node].is_some()\n     }\n@@ -280,6 +325,8 @@ impl<Node: Idx> Dominators<Node> {\n         self.immediate_dominators[node].unwrap()\n     }\n \n+    /// Provides an iterator over each dominator up the CFG, for the given Node.\n+    /// See the `impl Iterator for Iter` definition to understand how this works.\n     pub fn dominators(&self, node: Node) -> Iter<'_, Node> {\n         assert!(self.is_reachable(node), \"node {node:?} is not reachable\");\n         Iter { dominators: self, node: Some(node) }"}, {"sha": "52a4e0e74181f78092fb85230051352b995a23ac", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -802,6 +802,7 @@ fn test_unstable_options_tracking_hash() {\n     tracked!(teach, true);\n     tracked!(thinlto, Some(true));\n     tracked!(thir_unsafeck, true);\n+    tracked!(tiny_const_eval_limit, true);\n     tracked!(tls_model, Some(TlsModel::GeneralDynamic));\n     tracked!(trait_solver, TraitSolver::Chalk);\n     tracked!(translate_remapped_path_to_local_path, false);"}, {"sha": "552af589bec59b12f3b2f40516f7ef7f6dce5b37", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1463,6 +1463,7 @@ impl Debug for Statement<'_> {\n             }\n             Coverage(box ref coverage) => write!(fmt, \"Coverage::{:?}\", coverage.kind),\n             Intrinsic(box ref intrinsic) => write!(fmt, \"{intrinsic}\"),\n+            ConstEvalCounter => write!(fmt, \"ConstEvalCounter\"),\n             Nop => write!(fmt, \"nop\"),\n         }\n     }"}, {"sha": "1610ae1ce1480937d3b6fc1e8b155b6f4480f871", "filename": "compiler/rustc_middle/src/mir/spanview.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fspanview.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -250,6 +250,7 @@ pub fn statement_kind_name(statement: &Statement<'_>) -> &'static str {\n         AscribeUserType(..) => \"AscribeUserType\",\n         Coverage(..) => \"Coverage\",\n         Intrinsic(..) => \"Intrinsic\",\n+        ConstEvalCounter => \"ConstEvalCounter\",\n         Nop => \"Nop\",\n     }\n }"}, {"sha": "549bc65d6d79c7858a144fd038c107f1a07d85e5", "filename": "compiler/rustc_middle/src/mir/syntax.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fsyntax.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -355,6 +355,12 @@ pub enum StatementKind<'tcx> {\n     /// This avoids adding a new block and a terminator for simple intrinsics.\n     Intrinsic(Box<NonDivergingIntrinsic<'tcx>>),\n \n+    /// Instructs the const eval interpreter to increment a counter; this counter is used to track\n+    /// how many steps the interpreter has taken. It is used to prevent the user from writing const\n+    /// code that runs for too long or infinitely. Other than in the const eval interpreter, this\n+    /// is a no-op.\n+    ConstEvalCounter,\n+\n     /// No-op. Useful for deleting instructions without affecting statement indices.\n     Nop,\n }"}, {"sha": "3ddac5e11fbc53bea3811686fdee4076d6d7a89e", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -427,6 +427,7 @@ macro_rules! make_mir_visitor {\n                             }\n                         }\n                     }\n+                    StatementKind::ConstEvalCounter => {}\n                     StatementKind::Nop => {}\n                 }\n             }"}, {"sha": "b63b9e754cf466a963adc68740971e5f6fa0e0ff", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -77,6 +77,8 @@ use std::iter;\n use std::mem;\n use std::ops::{Bound, Deref};\n \n+const TINY_CONST_EVAL_LIMIT: Limit = Limit(20);\n+\n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n     fn new(sess: &'tcx Session, data: Mmap, start_pos: usize) -> Self\n@@ -1104,7 +1106,11 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn const_eval_limit(self) -> Limit {\n-        self.limits(()).const_eval_limit\n+        if self.sess.opts.unstable_opts.tiny_const_eval_limit {\n+            TINY_CONST_EVAL_LIMIT\n+        } else {\n+            self.limits(()).const_eval_limit\n+        }\n     }\n \n     pub fn all_traits(self) -> impl Iterator<Item = DefId> + 'tcx {"}, {"sha": "2890fa32cc915fdf540f2ee66ce73d7afc44c31b", "filename": "compiler/rustc_mir_dataflow/src/impls/liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fliveness.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -271,6 +271,7 @@ impl<'a, 'tcx> Analysis<'tcx> for MaybeTransitiveLiveLocals<'a> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => None,\n         };\n         if let Some(destination) = destination {"}, {"sha": "fcf0ce9d82118815eadbb0229be5bac3e49afe21", "filename": "compiler/rustc_mir_dataflow/src/impls/storage_liveness.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fimpls%2Fstorage_liveness.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -141,6 +141,7 @@ impl<'mir, 'tcx> crate::GenKillAnalysis<'tcx> for MaybeRequiresStorage<'mir, 'tc\n             StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::FakeRead(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::Retag(..)\n             | StatementKind::Intrinsic(..)"}, {"sha": "0195693a7cb0e6d9bf8639e83d8e96a5b59797a3", "filename": "compiler/rustc_mir_dataflow/src/move_paths/builder.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fmove_paths%2Fbuilder.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -331,6 +331,7 @@ impl<'b, 'a, 'tcx> Gatherer<'b, 'a, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "6bdbda909d7bdf02da963730db84fa2a3d2be991", "filename": "compiler/rustc_mir_dataflow/src/value_analysis.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_dataflow%2Fsrc%2Fvalue_analysis.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -84,7 +84,8 @@ pub trait ValueAnalysis<'tcx> {\n             StatementKind::Retag(..) => {\n                 // We don't track references.\n             }\n-            StatementKind::Nop\n+            StatementKind::ConstEvalCounter\n+            | StatementKind::Nop\n             | StatementKind::FakeRead(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::AscribeUserType(..) => (),"}, {"sha": "8afa53313fc2840e838cc13e8d5d4170a3151de3", "filename": "compiler/rustc_mir_transform/src/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcheck_unsafety.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -104,6 +104,7 @@ impl<'tcx> Visitor<'tcx> for UnsafetyChecker<'_, 'tcx> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {\n                 // safe (at least as emitted during MIR construction)\n             }"}, {"sha": "f973c1ed28f4a639b7bd17351a76f6ace8f34499", "filename": "compiler/rustc_mir_transform/src/coverage/spans.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fcoverage%2Fspans.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -802,6 +802,8 @@ pub(super) fn filtered_statement_span(statement: &Statement<'_>) -> Option<Span>\n         | StatementKind::StorageDead(_)\n         // Coverage should not be encountered, but don't inject coverage coverage\n         | StatementKind::Coverage(_)\n+        // Ignore `ConstEvalCounter`s\n+        | StatementKind::ConstEvalCounter\n         // Ignore `Nop`s\n         | StatementKind::Nop => None,\n "}, {"sha": "7d127032179b4b83de5908eb50f4f3aaeb40c912", "filename": "compiler/rustc_mir_transform/src/ctfe_limit.rs", "status": "added", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fctfe_limit.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,59 @@\n+//! A pass that inserts the `ConstEvalCounter` instruction into any blocks that have a back edge\n+//! (thus indicating there is a loop in the CFG), or whose terminator is a function call.\n+use crate::MirPass;\n+\n+use rustc_data_structures::graph::dominators::Dominators;\n+use rustc_middle::mir::{\n+    BasicBlock, BasicBlockData, Body, Statement, StatementKind, TerminatorKind,\n+};\n+use rustc_middle::ty::TyCtxt;\n+\n+pub struct CtfeLimit;\n+\n+impl<'tcx> MirPass<'tcx> for CtfeLimit {\n+    #[instrument(skip(self, _tcx, body))]\n+    fn run_pass(&self, _tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>) {\n+        let doms = body.basic_blocks.dominators();\n+        let indices: Vec<BasicBlock> = body\n+            .basic_blocks\n+            .iter_enumerated()\n+            .filter_map(|(node, node_data)| {\n+                if matches!(node_data.terminator().kind, TerminatorKind::Call { .. })\n+                    // Back edges in a CFG indicate loops\n+                    || has_back_edge(&doms, node, &node_data)\n+                {\n+                    Some(node)\n+                } else {\n+                    None\n+                }\n+            })\n+            .collect();\n+        for index in indices {\n+            insert_counter(\n+                body.basic_blocks_mut()\n+                    .get_mut(index)\n+                    .expect(\"basic_blocks index {index} should exist\"),\n+            );\n+        }\n+    }\n+}\n+\n+fn has_back_edge(\n+    doms: &Dominators<BasicBlock>,\n+    node: BasicBlock,\n+    node_data: &BasicBlockData<'_>,\n+) -> bool {\n+    if !doms.is_reachable(node) {\n+        return false;\n+    }\n+    // Check if any of the dominators of the node are also the node's successor.\n+    doms.dominators(node)\n+        .any(|dom| node_data.terminator().successors().into_iter().any(|succ| succ == dom))\n+}\n+\n+fn insert_counter(basic_block_data: &mut BasicBlockData<'_>) {\n+    basic_block_data.statements.push(Statement {\n+        source_info: basic_block_data.terminator().source_info,\n+        kind: StatementKind::ConstEvalCounter,\n+    });\n+}"}, {"sha": "9dbfb089dc665428340c5fc4272e4f494a3def45", "filename": "compiler/rustc_mir_transform/src/dead_store_elimination.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdead_store_elimination.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -53,6 +53,7 @@ pub fn eliminate<'tcx>(tcx: TyCtxt<'tcx>, body: &mut Body<'tcx>, borrowed: &BitS\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::Coverage(_)\n                 | StatementKind::Intrinsic(_)\n+                | StatementKind::ConstEvalCounter\n                 | StatementKind::Nop => (),\n \n                 StatementKind::FakeRead(_) | StatementKind::AscribeUserType(_, _) => {"}, {"sha": "20ffb0ab3340444c185b7e835de6cff6bcada14e", "filename": "compiler/rustc_mir_transform/src/dest_prop.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdest_prop.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -577,6 +577,7 @@ impl WriteInfo {\n                 self.add_place(**place);\n             }\n             StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageLive(_)"}, {"sha": "5624e312da1cbe8eeabe9cbc82d219ebea390f86", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1657,6 +1657,7 @@ impl<'tcx> Visitor<'tcx> for EnsureGeneratorFieldAssignmentsNeverAlias<'_> {\n             | StatementKind::AscribeUserType(..)\n             | StatementKind::Coverage(..)\n             | StatementKind::Intrinsic(..)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }"}, {"sha": "6858fa8e524f20bb5ccddee0f0589e5fcfcc4906", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -55,6 +55,7 @@ mod const_goto;\n mod const_prop;\n mod const_prop_lint;\n mod coverage;\n+mod ctfe_limit;\n mod dataflow_const_prop;\n mod dead_store_elimination;\n mod deaggregator;\n@@ -410,6 +411,8 @@ fn inner_mir_for_ctfe(tcx: TyCtxt<'_>, def: ty::WithOptConstParam<LocalDefId>) -\n         }\n     }\n \n+    pm::run_passes(tcx, &mut body, &[&ctfe_limit::CtfeLimit], None);\n+\n     debug_assert!(!body.has_free_regions(), \"Free regions in MIR for CTFE\");\n \n     body"}, {"sha": "e3a03aa08af4bdf87db93f780da21ff176657674", "filename": "compiler/rustc_mir_transform/src/remove_noop_landing_pads.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fremove_noop_landing_pads.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -35,6 +35,7 @@ impl RemoveNoopLandingPads {\n                 | StatementKind::StorageDead(_)\n                 | StatementKind::AscribeUserType(..)\n                 | StatementKind::Coverage(..)\n+                | StatementKind::ConstEvalCounter\n                 | StatementKind::Nop => {\n                     // These are all noops in a landing pad\n                 }"}, {"sha": "a24d2d34d791b96e53a654610d52ef95f5ce035e", "filename": "compiler/rustc_mir_transform/src/separate_const_switch.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fseparate_const_switch.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -250,6 +250,7 @@ fn is_likely_const<'tcx>(mut tracked_place: Place<'tcx>, block: &BasicBlockData<\n             | StatementKind::Coverage(_)\n             | StatementKind::StorageDead(_)\n             | StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n         }\n     }\n@@ -318,6 +319,7 @@ fn find_determining_place<'tcx>(\n             | StatementKind::AscribeUserType(_, _)\n             | StatementKind::Coverage(_)\n             | StatementKind::Intrinsic(_)\n+            | StatementKind::ConstEvalCounter\n             | StatementKind::Nop => {}\n \n             // If the discriminant is set, it is always set"}, {"sha": "7b6fa2baf2f950db187ab6b0d2934277282a9165", "filename": "compiler/rustc_mir_transform/src/simplify.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fsimplify.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -517,7 +517,7 @@ impl<'tcx> Visitor<'tcx> for UsedLocals {\n                 self.super_statement(statement, location);\n             }\n \n-            StatementKind::Nop => {}\n+            StatementKind::ConstEvalCounter | StatementKind::Nop => {}\n \n             StatementKind::StorageLive(_local) | StatementKind::StorageDead(_local) => {}\n "}, {"sha": "0db4d85ff4b679f4934bfe5a0ee7edef577454fe", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1618,6 +1618,8 @@ options! {\n         \"measure time of each LLVM pass (default: no)\"),\n     time_passes: bool = (false, parse_bool, [UNTRACKED],\n         \"measure time of each rustc pass (default: no)\"),\n+    tiny_const_eval_limit: bool = (false, parse_bool, [TRACKED],\n+        \"sets a tiny, non-configurable limit for const eval; useful for compiler tests\"),\n     #[rustc_lint_opt_deny_field_access(\"use `Session::tls_model` instead of this field\")]\n     tls_model: Option<TlsModel> = (None, parse_tls_model, [TRACKED],\n         \"choose the TLS model to use (`rustc --print tls-models` for details)\"),"}, {"sha": "51c5fd69c63776b82ba8e0a6d173a364320a0634", "filename": "src/doc/unstable-book/src/compiler-flags/tiny-const-eval-limit.md", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Ftiny-const-eval-limit.md?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,6 @@\n+# `tiny-const-eval-limit`\n+\n+--------------------\n+\n+The `-Ztiny-const-eval-limit` compiler flag sets a tiny, non-configurable limit for const eval.\n+This flag should only be used by const eval tests in the rustc test suite."}, {"sha": "727058780752e226ce6c06381e30570a5e228325", "filename": "src/tools/clippy/clippy_utils/src/qualify_min_const_fn.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fclippy%2Fclippy_utils%2Fsrc%2Fqualify_min_const_fn.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -240,6 +240,7 @@ fn check_statement<'tcx>(\n         | StatementKind::Retag { .. }\n         | StatementKind::AscribeUserType(..)\n         | StatementKind::Coverage(..)\n+        | StatementKind::ConstEvalCounter\n         | StatementKind::Nop => Ok(()),\n     }\n }"}, {"sha": "4f07fca82d1ebfb860461506cf7ba25986b0d7a2", "filename": "tests/rustdoc-ui/z-help.stdout", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Frustdoc-ui%2Fz-help.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Frustdoc-ui%2Fz-help.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frustdoc-ui%2Fz-help.stdout?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -173,6 +173,7 @@\n     -Z                                 threads=val -- use a thread pool with N threads\n     -Z                        time-llvm-passes=val -- measure time of each LLVM pass (default: no)\n     -Z                             time-passes=val -- measure time of each rustc pass (default: no)\n+    -Z                   tiny-const-eval-limit=val -- sets a tiny, non-configurable limit for const eval; useful for compiler tests\n     -Z                               tls-model=val -- choose the TLS model to use (`rustc --print tls-models` for details)\n     -Z                            trace-macros=val -- for every macro invocation, print its name and arguments (default: no)\n     -Z                       track-diagnostics=val -- tracks where in rustc a diagnostic was emitted"}, {"sha": "f30bfaf3f958ce5349428b3185c6a175a28222ea", "filename": "tests/ui/consts/const-eval/infinite_loop.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Finfinite_loop.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1,8 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/infinite_loop.rs:6:15\n+  --> $DIR/infinite_loop.rs:6:9\n    |\n-LL |         while n != 0 {\n-   |               ^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | /         while n != 0 {\n+LL | |\n+LL | |             n = if n % 2 == 0 { n/2 } else { 3*n + 1 };\n+LL | |         }\n+   | |_________^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to previous error\n "}, {"sha": "307c1a66834105e316e559ebd2607a5cc75c6f54", "filename": "tests/ui/consts/const-eval/issue-52475.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -2,8 +2,8 @@ fn main() {\n     let _ = [(); {\n         let mut x = &0;\n         let mut n = 0;\n-        while n < 5 {\n-            n = (n + 1) % 5; //~ ERROR evaluation of constant value failed\n+        while n < 5 { //~ ERROR evaluation of constant value failed [E0080]\n+            n = (n + 1) % 5;\n             x = &0; // Materialize a new AllocId\n         }\n         0"}, {"sha": "3aa6bd277ddcbdd3f201f281b512d9604b688cc2", "filename": "tests/ui/consts/const-eval/issue-52475.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fissue-52475.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1,8 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/issue-52475.rs:6:17\n+  --> $DIR/issue-52475.rs:5:9\n    |\n-LL |             n = (n + 1) % 5;\n-   |                 ^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | /         while n < 5 {\n+LL | |             n = (n + 1) % 5;\n+LL | |             x = &0; // Materialize a new AllocId\n+LL | |         }\n+   | |_________^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to previous error\n "}, {"sha": "c59596238e1404e955ea21cee425caf0b1648758", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-fn-call.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,36 @@\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n+\n+const fn foo() {}\n+\n+const fn call_foo() -> u32 {\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+    foo();\n+\n+    foo();\n+    foo();\n+    foo();\n+    foo(); //~ ERROR evaluation of constant value failed [E0080]\n+    0\n+}\n+\n+const X: u32 = call_foo();\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "ed70975af341db10e70a78b2f9c93884b6b0efae", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-fn-call.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-fn-call.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,20 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-fn-call.rs:28:5\n+   |\n+LL |     foo();\n+   |     ^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `call_foo`\n+  --> $DIR/ctfe-fn-call.rs:28:5\n+   |\n+LL |     foo();\n+   |     ^^^^^\n+note: inside `X`\n+  --> $DIR/ctfe-fn-call.rs:32:16\n+   |\n+LL | const X: u32 = call_foo();\n+   |                ^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "c10b8d83791193558d67f2a9bec809d9f3adecf2", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,19 @@\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n+\n+const fn labelled_loop(n: u32) -> u32 {\n+    let mut i = 0;\n+    'mylabel: loop { //~ ERROR evaluation of constant value failed [E0080]\n+        if i > n {\n+            break 'mylabel\n+        }\n+        i += 1;\n+    }\n+    0\n+}\n+\n+const X: u32 = labelled_loop(19);\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "d9404edd5b1082ab3bd25c62d7a3defe14c6f243", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-labelled-loop.stderr", "status": "added", "additions": 30, "deletions": 0, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-labelled-loop.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,30 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-labelled-loop.rs:6:5\n+   |\n+LL | /     'mylabel: loop {\n+LL | |         if i > n {\n+LL | |             break 'mylabel\n+LL | |         }\n+LL | |         i += 1;\n+LL | |     }\n+   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `labelled_loop`\n+  --> $DIR/ctfe-labelled-loop.rs:6:5\n+   |\n+LL | /     'mylabel: loop {\n+LL | |         if i > n {\n+LL | |             break 'mylabel\n+LL | |         }\n+LL | |         i += 1;\n+LL | |     }\n+   | |_____^\n+note: inside `X`\n+  --> $DIR/ctfe-labelled-loop.rs:15:16\n+   |\n+LL | const X: u32 = labelled_loop(19);\n+   |                ^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "80ff835f3e8dde38db1c6a7979be89e0743a61ce", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-recursion.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,16 @@\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n+\n+const fn recurse(n: u32) -> u32 {\n+    if n == 0 {\n+        n\n+    } else {\n+        recurse(n - 1) //~ ERROR evaluation of constant value failed [E0080]\n+    }\n+}\n+\n+const X: u32 = recurse(19);\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "ed9a31119427a8405a0623b89ea204c769f9f3f4", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-recursion.stderr", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-recursion.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,25 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `recurse`\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^\n+note: [... 18 additional calls inside `recurse` ...]\n+  --> $DIR/ctfe-recursion.rs:8:9\n+   |\n+LL |         recurse(n - 1)\n+   |         ^^^^^^^^^^^^^^\n+note: inside `X`\n+  --> $DIR/ctfe-recursion.rs:12:16\n+   |\n+LL | const X: u32 = recurse(19);\n+   |                ^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "ca0eec93c5dac5ddbe945fa9a5eea2a90bf8133d", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,15 @@\n+// check-fail\n+// compile-flags: -Z tiny-const-eval-limit\n+const fn simple_loop(n: u32) -> u32 {\n+    let mut index = 0;\n+    while index < n { //~ ERROR evaluation of constant value failed [E0080]\n+        index = index + 1;\n+    }\n+    0\n+}\n+\n+const X: u32 = simple_loop(19);\n+\n+fn main() {\n+    println!(\"{X}\");\n+}"}, {"sha": "83ff275de70491a318af4c69f0904a3b53807f50", "filename": "tests/ui/consts/const-eval/stable-metric/ctfe-simple-loop.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fctfe-simple-loop.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,24 @@\n+error[E0080]: evaluation of constant value failed\n+  --> $DIR/ctfe-simple-loop.rs:5:5\n+   |\n+LL | /     while index < n {\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+   |\n+note: inside `simple_loop`\n+  --> $DIR/ctfe-simple-loop.rs:5:5\n+   |\n+LL | /     while index < n {\n+LL | |         index = index + 1;\n+LL | |     }\n+   | |_____^\n+note: inside `X`\n+  --> $DIR/ctfe-simple-loop.rs:11:16\n+   |\n+LL | const X: u32 = simple_loop(19);\n+   |                ^^^^^^^^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0080`."}, {"sha": "0b0f361809f207ebe75e20766fe5731da652b398", "filename": "tests/ui/consts/const-eval/stable-metric/dominators-edge-case.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fdominators-edge-case.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fdominators-edge-case.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst-eval%2Fstable-metric%2Fdominators-edge-case.rs?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -0,0 +1,19 @@\n+// check-pass\n+//\n+// Exercising an edge case which was found during Stage 2 compilation.\n+// Compilation would fail for this code when running the `CtfeLimit`\n+// MirPass (specifically when looking up the dominators).\n+#![crate_type=\"lib\"]\n+\n+const DUMMY: Expr = Expr::Path(ExprPath {\n+    attrs: Vec::new(),\n+    path: Vec::new(),\n+});\n+\n+pub enum Expr {\n+    Path(ExprPath),\n+}\n+pub struct ExprPath {\n+    pub attrs: Vec<()>,\n+    pub path: Vec<()>,\n+}"}, {"sha": "a8e8ae9bb088a07737324dd98aeaf9a3ad2762df", "filename": "tests/ui/consts/const_limit/const_eval_limit_reached.stderr", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3cdd0197e78e2ca3403157617709bbfe18a3f0b5/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fconsts%2Fconst_limit%2Fconst_eval_limit_reached.stderr?ref=3cdd0197e78e2ca3403157617709bbfe18a3f0b5", "patch": "@@ -1,8 +1,11 @@\n error[E0080]: evaluation of constant value failed\n-  --> $DIR/const_eval_limit_reached.rs:6:11\n+  --> $DIR/const_eval_limit_reached.rs:6:5\n    |\n-LL |     while x != 1000 {\n-   |           ^^^^^^^^^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n+LL | /     while x != 1000 {\n+LL | |\n+LL | |         x += 1;\n+LL | |     }\n+   | |_____^ exceeded interpreter step limit (see `#[const_eval_limit]`)\n \n error: aborting due to previous error\n "}]}