{"sha": "57e720d2cd09b6befc5b6eed66b65352fc9ff537", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3ZTcyMGQyY2QwOWI2YmVmYzViNmVlZDY2YjY1MzUyZmM5ZmY1Mzc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T01:22:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-10T01:22:43Z"}, "message": "Auto merge of #43730 - nrc:driver-shim, r=eddyb\n\nMake the driver API a little more useful for a tools shim\n\nExample use case: https://github.com/nrc/rls-rustc", "tree": {"sha": "9ae9fd95d4d0c7bc573c45d8de65c79c40c3a6dd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9ae9fd95d4d0c7bc573c45d8de65c79c40c3a6dd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/57e720d2cd09b6befc5b6eed66b65352fc9ff537", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/57e720d2cd09b6befc5b6eed66b65352fc9ff537", "html_url": "https://github.com/rust-lang/rust/commit/57e720d2cd09b6befc5b6eed66b65352fc9ff537", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/57e720d2cd09b6befc5b6eed66b65352fc9ff537/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "875bcf5c5f7efcbf72e000d256b24293555edf53", "url": "https://api.github.com/repos/rust-lang/rust/commits/875bcf5c5f7efcbf72e000d256b24293555edf53", "html_url": "https://github.com/rust-lang/rust/commit/875bcf5c5f7efcbf72e000d256b24293555edf53"}, {"sha": "a9a181d4dcac6d5e347ef7157e91877fac648c56", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9a181d4dcac6d5e347ef7157e91877fac648c56", "html_url": "https://github.com/rust-lang/rust/commit/a9a181d4dcac6d5e347ef7157e91877fac648c56"}], "stats": {"total": 71, "additions": 45, "deletions": 26}, "files": [{"sha": "22f98454f6c4a39f9038a5a84203812d703f2a30", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 15, "deletions": 8, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=57e720d2cd09b6befc5b6eed66b65352fc9ff537", "patch": "@@ -89,7 +89,7 @@ pub fn compile_input(sess: &Session,\n     // large chunks of memory alive and we want to free them as soon as\n     // possible to keep the peak memory usage low\n     let (outputs, trans) = {\n-        let krate = match phase_1_parse_input(sess, input) {\n+        let krate = match phase_1_parse_input(control, sess, input) {\n             Ok(krate) => krate,\n             Err(mut parse_error) => {\n                 parse_error.emit();\n@@ -296,9 +296,13 @@ pub struct CompileController<'a> {\n     pub after_llvm: PhaseController<'a>,\n     pub compilation_done: PhaseController<'a>,\n \n+    // FIXME we probably want to group the below options together and offer a\n+    // better API, rather than this ad-hoc approach.\n     pub make_glob_map: MakeGlobMap,\n     // Whether the compiler should keep the ast beyond parsing.\n     pub keep_ast: bool,\n+    // -Zcontinue-parse-after-error\n+    pub continue_parse_after_error: bool,\n }\n \n impl<'a> CompileController<'a> {\n@@ -312,6 +316,7 @@ impl<'a> CompileController<'a> {\n             compilation_done: PhaseController::basic(),\n             make_glob_map: MakeGlobMap::No,\n             keep_ast: false,\n+            continue_parse_after_error: false,\n         }\n     }\n }\n@@ -484,20 +489,22 @@ impl<'a, 'tcx> CompileState<'a, 'tcx> {\n     }\n \n     fn state_when_compilation_done(input: &'a Input,\n-                                    session: &'tcx Session,\n-                                    out_dir: &'a Option<PathBuf>,\n-                                    out_file: &'a Option<PathBuf>)\n-                                    -> Self {\n+                                   session: &'tcx Session,\n+                                   out_dir: &'a Option<PathBuf>,\n+                                   out_file: &'a Option<PathBuf>)\n+                                   -> Self {\n         CompileState {\n             out_file: out_file.as_ref().map(|s| &**s),\n             ..CompileState::empty(input, session, out_dir)\n         }\n     }\n }\n \n-pub fn phase_1_parse_input<'a>(sess: &'a Session, input: &Input) -> PResult<'a, ast::Crate> {\n-    let continue_after_error = sess.opts.debugging_opts.continue_parse_after_error;\n-    sess.diagnostic().set_continue_after_error(continue_after_error);\n+pub fn phase_1_parse_input<'a>(control: &CompileController,\n+                               sess: &'a Session,\n+                               input: &Input)\n+                               -> PResult<'a, ast::Crate> {\n+    sess.diagnostic().set_continue_after_error(control.continue_parse_after_error);\n \n     let krate = time(sess.time_passes(), \"parsing\", || {\n         match *input {"}, {"sha": "a3c2957ff90d83199116738b56895c1a98153e2c", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 21, "deletions": 15, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=57e720d2cd09b6befc5b6eed66b65352fc9ff537", "patch": "@@ -518,7 +518,8 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n                         -> CompileController<'a> {\n         let mut control = CompileController::basic();\n \n-        control.keep_ast = sess.opts.debugging_opts.keep_ast || save_analysis(sess);\n+        control.keep_ast = sess.opts.debugging_opts.keep_ast;\n+        control.continue_parse_after_error = sess.opts.debugging_opts.continue_parse_after_error;\n \n         if let Some((ppm, opt_uii)) = parse_pretty(sess, matches) {\n             if ppm.needs_ast_map(&opt_uii) {\n@@ -574,19 +575,7 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n         }\n \n         if save_analysis(sess) {\n-            control.after_analysis.callback = box |state| {\n-                time(state.session.time_passes(), \"save analysis\", || {\n-                    save::process_crate(state.tcx.unwrap(),\n-                                        state.expanded_crate.unwrap(),\n-                                        state.analysis.unwrap(),\n-                                        state.crate_name.unwrap(),\n-                                        None,\n-                                        DumpHandler::new(state.out_dir,\n-                                                         state.crate_name.unwrap()))\n-                });\n-            };\n-            control.after_analysis.run_callback_on_error = true;\n-            control.make_glob_map = resolve::MakeGlobMap::Yes;\n+            enable_save_analysis(&mut control);\n         }\n \n         if sess.print_fuel_crate.is_some() {\n@@ -603,6 +592,23 @@ impl<'a> CompilerCalls<'a> for RustcDefaultCalls {\n     }\n }\n \n+pub fn enable_save_analysis(control: &mut CompileController) {\n+    control.keep_ast = true;\n+    control.after_analysis.callback = box |state| {\n+        time(state.session.time_passes(), \"save analysis\", || {\n+            save::process_crate(state.tcx.unwrap(),\n+                                state.expanded_crate.unwrap(),\n+                                state.analysis.unwrap(),\n+                                state.crate_name.unwrap(),\n+                                None,\n+                                DumpHandler::new(state.out_dir,\n+                                                 state.crate_name.unwrap()))\n+        });\n+    };\n+    control.after_analysis.run_callback_on_error = true;\n+    control.make_glob_map = resolve::MakeGlobMap::Yes;\n+}\n+\n fn save_analysis(sess: &Session) -> bool {\n     sess.opts.debugging_opts.save_analysis\n }\n@@ -1215,7 +1221,7 @@ pub fn diagnostics_registry() -> errors::registry::Registry {\n     Registry::new(&all_errors)\n }\n \n-fn get_args() -> Vec<String> {\n+pub fn get_args() -> Vec<String> {\n     env::args_os().enumerate()\n         .map(|(i, arg)| arg.into_string().unwrap_or_else(|arg| {\n              early_error(ErrorOutputType::default(),"}, {"sha": "8668ab301543b6aa3826190472437f030e51ce0c", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=57e720d2cd09b6befc5b6eed66b65352fc9ff537", "patch": "@@ -119,7 +119,9 @@ fn test_env<F>(source_string: &str,\n         name: driver::anon_src(),\n         input: source_string.to_string(),\n     };\n-    let krate = driver::phase_1_parse_input(&sess, &input).unwrap();\n+    let krate = driver::phase_1_parse_input(&driver::CompileController::basic(),\n+                                            &sess,\n+                                            &input).unwrap();\n     let driver::ExpansionResult { defs, resolutions, mut hir_forest, .. } = {\n         driver::phase_2_configure_and_expand(&sess,\n                                              &cstore,"}, {"sha": "e101e29fc6fbb8d86877264ac88dbd6891cef641", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=57e720d2cd09b6befc5b6eed66b65352fc9ff537", "patch": "@@ -155,7 +155,9 @@ pub fn run_core(search_paths: SearchPaths,\n     target_features::add_configuration(&mut cfg, &sess);\n     sess.parse_sess.config = cfg;\n \n-    let krate = panictry!(driver::phase_1_parse_input(&sess, &input));\n+    let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n+                                                      &sess,\n+                                                      &input));\n \n     let name = link::find_crate_name(Some(&sess), &krate.attrs, &input);\n "}, {"sha": "b1e92b5190f375941a9e1e0c15097f3e96733094", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/57e720d2cd09b6befc5b6eed66b65352fc9ff537/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=57e720d2cd09b6befc5b6eed66b65352fc9ff537", "patch": "@@ -91,7 +91,9 @@ pub fn run(input: &str,\n     sess.parse_sess.config =\n         config::build_configuration(&sess, config::parse_cfgspecs(cfgs.clone()));\n \n-    let krate = panictry!(driver::phase_1_parse_input(&sess, &input));\n+    let krate = panictry!(driver::phase_1_parse_input(&driver::CompileController::basic(),\n+                                                      &sess,\n+                                                      &input));\n     let driver::ExpansionResult { defs, mut hir_forest, .. } = {\n         phase_2_configure_and_expand(\n             &sess, &cstore, krate, None, \"rustdoc-test\", None, MakeGlobMap::No, |_| Ok(())"}]}