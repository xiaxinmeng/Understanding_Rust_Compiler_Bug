{"sha": "3e4dfaf97af127ed85ecac809fe4dbaad4c7531c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNGRmYWY5N2FmMTI3ZWQ4NWVjYWM4MDlmZTRkYmFhZDRjNzUzMWM=", "commit": {"author": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-25T12:46:15Z"}, "committer": {"name": "Jade", "email": "software@lfcode.ca", "date": "2021-05-25T12:46:15Z"}, "message": "feat: go to implementation on trait functions\n\nFix #8537.\n\nGIF:\nhttps://user-images.githubusercontent.com/6652840/119501981-45a45c00-bd1e-11eb-8336-9145f2888643.gif", "tree": {"sha": "703e4be5b26d7e4042f5bb67e70d133d27f882aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/703e4be5b26d7e4042f5bb67e70d133d27f882aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c", "html_url": "https://github.com/rust-lang/rust/commit/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c/comments", "author": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lf-", "id": 6652840, "node_id": "MDQ6VXNlcjY2NTI4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6652840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lf-", "html_url": "https://github.com/lf-", "followers_url": "https://api.github.com/users/lf-/followers", "following_url": "https://api.github.com/users/lf-/following{/other_user}", "gists_url": "https://api.github.com/users/lf-/gists{/gist_id}", "starred_url": "https://api.github.com/users/lf-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lf-/subscriptions", "organizations_url": "https://api.github.com/users/lf-/orgs", "repos_url": "https://api.github.com/users/lf-/repos", "events_url": "https://api.github.com/users/lf-/events{/privacy}", "received_events_url": "https://api.github.com/users/lf-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff585e4730a867e7bb68c65ff45867a501841ae4", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff585e4730a867e7bb68c65ff45867a501841ae4", "html_url": "https://github.com/rust-lang/rust/commit/ff585e4730a867e7bb68c65ff45867a501841ae4"}], "stats": {"total": 46, "additions": 45, "deletions": 1}, "files": [{"sha": "5a8d3c3f98fd89a4d1a2a8dcd89013009b44dde8", "filename": "crates/ide/src/goto_implementation.rs", "status": "modified", "additions": 45, "deletions": 1, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4dfaf97af127ed85ecac809fe4dbaad4c7531c/crates%2Fide%2Fsrc%2Fgoto_implementation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_implementation.rs?ref=3e4dfaf97af127ed85ecac809fe4dbaad4c7531c", "patch": "@@ -1,4 +1,4 @@\n-use hir::{Impl, Semantics};\n+use hir::{AsAssocItem, Impl, Semantics};\n use ide_db::{\n     defs::{Definition, NameClass, NameRefClass},\n     RootDatabase,\n@@ -36,6 +36,7 @@ pub(crate) fn goto_implementation(\n         }\n         ast::NameLike::Lifetime(_) => None,\n     }?;\n+\n     let def = match def {\n         Definition::ModuleDef(def) => def,\n         _ => return None,\n@@ -48,6 +49,12 @@ pub(crate) fn goto_implementation(\n             let module = sema.to_module_def(position.file_id)?;\n             impls_for_ty(&sema, builtin.ty(sema.db, module))\n         }\n+        hir::ModuleDef::Function(f) => {\n+            let assoc = f.as_assoc_item(sema.db)?;\n+            let name = assoc.name(sema.db)?;\n+            let trait_ = assoc.containing_trait(sema.db)?;\n+            impls_for_trait_fn(&sema, trait_, name)\n+        }\n         _ => return None,\n     };\n     Some(RangeInfo { range: node.syntax().text_range(), info: navs })\n@@ -64,6 +71,23 @@ fn impls_for_trait(sema: &Semantics<RootDatabase>, trait_: hir::Trait) -> Vec<Na\n         .collect()\n }\n \n+fn impls_for_trait_fn(\n+    sema: &Semantics<RootDatabase>,\n+    trait_: hir::Trait,\n+    fun_name: hir::Name,\n+) -> Vec<NavigationTarget> {\n+    Impl::all_for_trait(sema.db, trait_)\n+        .into_iter()\n+        .filter_map(|imp| {\n+            let item = imp.items(sema.db).iter().find_map(|itm| {\n+                let itm_name = itm.name(sema.db)?;\n+                (itm_name == fun_name).then(|| itm.clone())\n+            })?;\n+            item.try_to_nav(sema.db)\n+        })\n+        .collect()\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ide_db::base_db::FileRange;\n@@ -259,6 +283,26 @@ fn foo(_: bool$0) {{}}\n #[lang = \"bool\"]\n impl bool {}\n    //^^^^\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn goto_implementation_trait_functions() {\n+        check(\n+            r#\"\n+trait Tr {\n+    fn f$0();\n+}\n+\n+struct S;\n+\n+impl Tr for S {\n+    fn f() {\n+     //^\n+        println!(\"Hello, world!\");\n+    }\n+}\n \"#,\n         );\n     }"}]}