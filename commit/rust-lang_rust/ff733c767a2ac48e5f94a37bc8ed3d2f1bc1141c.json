{"sha": "ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZmNzMzYzc2N2EyYWM0OGU1Zjk0YTM3YmM4ZWQzZDJmMWJjMTE0MWM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T00:16:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-03-29T00:16:48Z"}, "message": "auto merge of #13162 : alexcrichton/rust/attr-syntax, r=brson\n\nThis is the rebasing of #13068 with a fix for #13067 as the first commit.", "tree": {"sha": "f398acb54f2432247f3c174555010b3055cd7133", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f398acb54f2432247f3c174555010b3055cd7133"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "html_url": "https://github.com/rust-lang/rust/commit/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2", "html_url": "https://github.com/rust-lang/rust/commit/cbfc0a5e33eb3d97a2995d120536b8dadc0cc0a2"}, {"sha": "451e8c1c6178750a4c1789f40749562164a980b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/451e8c1c6178750a4c1789f40749562164a980b7", "html_url": "https://github.com/rust-lang/rust/commit/451e8c1c6178750a4c1789f40749562164a980b7"}], "stats": {"total": 1385, "additions": 714, "deletions": 671}, "files": [{"sha": "1491555fea08c37aed84136930b290cd8d008a9f", "filename": "src/compiletest/compiletest.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fcompiletest%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fcompiletest%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcompiletest%2Fcompiletest.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_type = \"bin\"];\n-#[feature(phase)];\n+#![crate_type = \"bin\"]\n+#![feature(phase)]\n \n-#[allow(non_camel_case_types)];\n-#[deny(warnings)];\n+#![allow(non_camel_case_types)]\n+#![deny(warnings)]\n \n extern crate test;\n extern crate getopts;"}, {"sha": "cd857afb5c40fd359c9a0f13e020d0b648ae6d25", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -15,15 +15,15 @@\n //! of individual objects while the arena itself is still alive. The benefit\n //! of an arena is very fast allocation; just a pointer bump.\n \n-#[crate_id = \"arena#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[allow(missing_doc)];\n-#[feature(managed_boxes)];\n+#![crate_id = \"arena#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![allow(missing_doc)]\n+#![feature(managed_boxes)]\n \n extern crate collections;\n "}, {"sha": "8a78e4fde75bda12b93d6926c13cb697401286f5", "filename": "src/libcollections/bitv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fbitv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fbitv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbitv.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n \n use std::cmp;"}, {"sha": "a83804828e8b51ede4adbe25e542df2d769bbe55", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -12,15 +12,15 @@\n  * Collection types.\n  */\n \n-#[crate_id = \"collections#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#![crate_id = \"collections#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n-#[feature(macro_rules, managed_boxes, default_type_params, phase)];\n+#![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n extern crate rand;\n "}, {"sha": "3d2f260d3809cd881ab7c53aaec96294e36ddebf", "filename": "src/libcollections/priority_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fpriority_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fpriority_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fpriority_queue.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! A priority queue implemented with a binary heap\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::clone::Clone;\n use std::mem::{move_val_init, init, replace, swap};"}, {"sha": "fb7921b315ff5cdf6c4ca55495868dc985587b65", "filename": "src/libcollections/smallintmap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fsmallintmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibcollections%2Fsmallintmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fsmallintmap.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n  * are O(highest integer key).\n  */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::iter::{Enumerate, FilterMap, Rev};\n use std::mem::replace;"}, {"sha": "2e2224bde842cf73d2e22eab451a04f3c6429672", "filename": "src/libflate/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibflate%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibflate%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibflate%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,15 +14,15 @@ Simple compression\n \n */\n \n-#[crate_id = \"flate#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(phase)];\n-#[deny(deprecated_owned_vector)];\n+#![crate_id = \"flate#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(phase)]\n+#![deny(deprecated_owned_vector)]\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n "}, {"sha": "bf327c1bc2753ac39c595a717fca7394e442b261", "filename": "src/libfourcc/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibfourcc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibfourcc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibfourcc%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -39,16 +39,16 @@ fn main() {\n \n */\n \n-#[crate_id = \"fourcc#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[deny(deprecated_owned_vector)];\n-#[feature(macro_registrar, managed_boxes)];\n+#![crate_id = \"fourcc#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![deny(deprecated_owned_vector)]\n+#![feature(macro_registrar, managed_boxes)]\n \n extern crate syntax;\n "}, {"sha": "e47e7ddec20381fbbec861e1c9ef5f78fd84c6ac", "filename": "src/libgetopts/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgetopts%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgetopts%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgetopts%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -76,16 +76,16 @@\n //! }\n //! ~~~\n \n-#[crate_id = \"getopts#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(globs, phase)];\n-#[deny(missing_doc)];\n-#[deny(deprecated_owned_vector)];\n+#![crate_id = \"getopts#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(globs, phase)]\n+#![deny(missing_doc)]\n+#![deny(deprecated_owned_vector)]\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n "}, {"sha": "ec7b5b262f5ec8c27077fb3873be741f97310c21", "filename": "src/libglob/lib.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibglob%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibglob%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibglob%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -23,13 +23,13 @@\n  * `glob`/`fnmatch` functions.\n  */\n \n-#[crate_id = \"glob#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#![crate_id = \"glob#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n use std::cell::Cell;\n use std::{cmp, os, path};"}, {"sha": "f0e7e7fbf6df26086af96438c22cf273719404f3", "filename": "src/libgreen/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgreen%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgreen%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -184,17 +184,17 @@\n //! pool.shutdown();\n //! ```\n \n-#[crate_id = \"green#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#![crate_id = \"green#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n // NB this does *not* include globs, please keep it that way.\n-#[feature(macro_rules, phase)];\n-#[allow(visible_private_types)];\n+#![feature(macro_rules, phase)]\n+#![allow(visible_private_types)]\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n #[cfg(test)] extern crate rustuv;"}, {"sha": "599ef8d407711ed41c1140cd21d52d0c80f0df15", "filename": "src/libgreen/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgreen%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibgreen%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibgreen%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // FIXME: this file probably shouldn't exist\n \n-#[macro_escape];\n+#![macro_escape]\n \n use std::fmt;\n "}, {"sha": "3ed0d598dd8e0196669cba9b99264a05519e84bd", "filename": "src/libhexfloat/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibhexfloat%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibhexfloat%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibhexfloat%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -36,16 +36,16 @@ fn main() {\n \n */\n \n-#[crate_id = \"hexfloat#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[deny(deprecated_owned_vector)];\n-#[feature(macro_registrar, managed_boxes)];\n+#![crate_id = \"hexfloat#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![deny(deprecated_owned_vector)]\n+#![feature(macro_registrar, managed_boxes)]\n \n extern crate syntax;\n "}, {"sha": "8013ebe6511072a23e015024272b24cd84fc58d2", "filename": "src/liblog/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliblog%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliblog%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -105,16 +105,16 @@ if logging is disabled, none of the components of the log will be executed.\n \n */\n \n-#[crate_id = \"log#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(macro_rules)];\n-#[deny(missing_doc, deprecated_owned_vector)];\n+#![crate_id = \"log#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![feature(macro_rules)]\n+#![deny(missing_doc, deprecated_owned_vector)]\n \n extern crate sync;\n "}, {"sha": "e57deb77a89eec4dafe65b69d4013e9dd2a1a1d0", "filename": "src/liblog/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliblog%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliblog%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblog%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Logging macros\n \n-#[macro_escape];\n+#![macro_escape]\n \n /// The standard logging macro\n ///"}, {"sha": "d06ca15f30c3bd97348e0aa9391fac97a21a836d", "filename": "src/libnative/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnative%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnative%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnative%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -41,15 +41,15 @@\n //! }\n //! ```\n \n-#[crate_id = \"native#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[deny(unused_result, unused_must_use)];\n-#[allow(non_camel_case_types)];\n+#![crate_id = \"native#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![deny(unused_result, unused_must_use)]\n+#![allow(non_camel_case_types)]\n \n // NB this crate explicitly does *not* allow glob imports, please seriously\n //    consider whether they're needed before adding that feature here (the"}, {"sha": "3dcd73568c6f304735e4770bdc5ef7d6ebfb153e", "filename": "src/libnum/complex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnum%2Fcomplex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnum%2Fcomplex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Fcomplex.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -190,7 +190,7 @@ impl<T: ToStrRadix + Num + Ord> ToStrRadix for Cmplx<T> {\n \n #[cfg(test)]\n mod test {\n-    #[allow(non_uppercase_statics)];\n+    #![allow(non_uppercase_statics)]\n \n     use super::{Complex64, Cmplx};\n     use std::num::{Zero,One,Float};"}, {"sha": "453dd3c0834c25fec8a7226701c8705d6a8accaa", "filename": "src/libnum/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnum%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibnum%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibnum%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,17 +8,17 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n-#[crate_id = \"num#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#![crate_id = \"num#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n-#[deny(deprecated_owned_vector)];\n+#![deny(deprecated_owned_vector)]\n \n extern crate rand;\n "}, {"sha": "f8183b08ce9dc4729aed34e7e1923bacf772da49", "filename": "src/librand/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrand%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrand%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrand%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -62,15 +62,15 @@ println!(\"{:?}\", tuple_ptr)\n ```\n */\n \n-#[crate_id = \"rand#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"dylib\"];\n-#[crate_type = \"rlib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(macro_rules, managed_boxes, phase)];\n+#![crate_id = \"rand#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![feature(macro_rules, managed_boxes, phase)]\n \n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;"}, {"sha": "f046069bc0b5aacb4a512ba2755127e60e5b1bd4", "filename": "src/librustc/back/target_strs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fback%2Ftarget_strs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fback%2Ftarget_strs.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n pub struct t {\n     module_asm: ~str,"}, {"sha": "14ac2143e55140d68470e857b93804604b21cd7f", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // Code that generates a test runner to run all the tests in a crate\n \n-#[allow(dead_code)];\n-#[allow(unused_imports)];\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n \n use driver::session::Session;\n use front::config;"}, {"sha": "f187ff641c23a5ff30091c07d9668f092eb56c46", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -18,18 +18,18 @@ This API is completely unstable and subject to change.\n \n */\n \n-#[crate_id = \"rustc#0.10-pre\"];\n-#[comment = \"The Rust compiler\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"dylib\"];\n-#[crate_type = \"rlib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+#![crate_id = \"rustc#0.10-pre\"]\n+#![comment = \"The Rust compiler\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+      html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n-#[allow(deprecated)];\n-#[feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n-          default_type_params, phase)];\n+#![allow(deprecated)]\n+#![feature(macro_rules, globs, struct_variant, managed_boxes, quote,\n+           default_type_params, phase)]\n \n extern crate flate;\n extern crate arena;"}, {"sha": "cfd605d33b597d71a6e1815cdd1dbbae6931f064", "filename": "src/librustc/lib/llvm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib%2Fllvm.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_pattern_statics)];\n-#[allow(non_camel_case_types)];\n+#![allow(non_uppercase_pattern_statics)]\n+#![allow(non_camel_case_types)]\n \n use std::c_str::ToCStr;\n use std::cell::RefCell;"}, {"sha": "5a36a610e27eb9a1ad90cec6d2d5ae587340bfa3", "filename": "src/librustc/metadata/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcommon.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use std::cast;\n use syntax::crateid::CrateId;"}, {"sha": "5575bb5182630b153c858b55745c25706b0d49b7", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n //! Validates all used crates and extern libraries and loads their metadata\n "}, {"sha": "81ebb97760147d1fc365bef03a207fb8dbb2718f", "filename": "src/librustc/metadata/csearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcsearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcsearch.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // Searching for information from the cstore\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use metadata::common::*;\n use metadata::cstore;"}, {"sha": "63a385631830d1cc183ced8c82d9050a87a3930f", "filename": "src/librustc/metadata/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcstore.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n // The crate store - a central repo for information collected about external\n // crates and libraries"}, {"sha": "5e058291b4437ec257b87a4f5aae390e2f589b6b", "filename": "src/librustc/metadata/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fdecoder.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // Decoding metadata from a single crate's metadata\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::svh::Svh;\n use metadata::cstore::crate_metadata;"}, {"sha": "abadd4aedb11d5fce711e501b0c7330c4f8b22a3", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // Metadata encoding\n \n-#[allow(unused_must_use)]; // everything is just a MemWriter, can't fail\n-#[allow(non_camel_case_types)];\n+#![allow(unused_must_use)] // everything is just a MemWriter, can't fail\n+#![allow(non_camel_case_types)]\n \n use back::svh::Svh;\n use metadata::common::*;"}, {"sha": "8bb4942e06fd5471df2eda95f04f88ebf2b6d4e9", "filename": "src/librustc/metadata/filesearch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ffilesearch.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use std::cell::RefCell;\n use std::os;"}, {"sha": "7ff36f13b75b95993b6b0603f6918e156fb7132a", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@\n // tjc note: Would be great to have a `match check` macro equivalent\n // for some of these\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::ty;\n "}, {"sha": "446e42224ddd3d41378efc5ea87184861e545be5", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // Type encoding\n \n-#[allow(unused_must_use)]; // as with encoding, everything is a no-fail MemWriter\n-#[allow(non_camel_case_types)];\n+#![allow(unused_must_use)] // as with encoding, everything is a no-fail MemWriter\n+#![allow(non_camel_case_types)]\n \n use std::cell::RefCell;\n use collections::HashMap;"}, {"sha": "8873f1cfd3346e40003301df893e9e349808e5e2", "filename": "src/librustc/middle/astencode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fastencode.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n // FIXME: remove this after snapshot, and Results are handled\n-#[allow(unused_must_use)];\n+#![allow(unused_must_use)]\n \n use c = metadata::common;\n use cstore = metadata::cstore;"}, {"sha": "30b965082ca0f53953fa24bfe5144fcad76f4986", "filename": "src/librustc/middle/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fborrowck%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n /*! See doc.rs for a thorough explanation of the borrow checker */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use mc = middle::mem_categorization;\n use middle::ty;"}, {"sha": "2c2fe87c9bed1816ae928245a6e97fec3a7a7950", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::const_eval::{compare_const_vals, lookup_const_by_id};\n use middle::const_eval::{eval_const_expr, const_val, const_bool, const_float};"}, {"sha": "7fadfff21d119bb95223e5024c66d85f95fffa51", "filename": "src/librustc/middle/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fconst_eval.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use metadata::csearch;\n use middle::astencode;"}, {"sha": "c2ea2f4596442da887b9fb4b5e7b46b42ea1ced1", "filename": "src/librustc/middle/freevars.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ffreevars.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ffreevars.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // A pass that annotates for each loops and functions with the free\n // variables that they contain.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::resolve;\n use middle::ty;"}, {"sha": "4a9b990feb39feb2c576ca6179538c8fde29648a", "filename": "src/librustc/middle/lint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flint.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -33,7 +33,7 @@\n //! modify the Context visitor appropriately. If you're adding lints from the\n //! Context itself, span_lint should be used instead of add_lint.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use driver::session;\n use metadata::csearch;"}, {"sha": "acccbe164c35e0ec36dc362b00e9349e1355fea5", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -60,7 +60,7 @@\n  * tied to `x`. The type of `x'` will be a borrowed pointer.\n  */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::ty;\n use middle::typeck;"}, {"sha": "0f283ca2f897e3aa55dfbb82ca70c0032af624aa", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use driver::session::Session;\n use metadata::csearch;"}, {"sha": "6e692443300f5a0251e269495cb2169d117d48fb", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -192,7 +192,7 @@\n  *\n  */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::abi;\n use driver::session::FullDebugInfo;"}, {"sha": "f1aa40fac59cb31f0082f1728a623d7bc55cdf12", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -23,7 +23,7 @@\n //     but one TypeRef corresponds to many `ty::t`s; for instance, tup(int, int,\n //     int) and rec(x=int, y=int, z=int) will have the same TypeRef.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::link::{mangle_exported_name};\n use back::{link, abi};"}, {"sha": "ee2c6454aeedbc6c71f1dc98ac6b4d01d7dcfcbd", "filename": "src/librustc/middle/trans/cabi_arm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_arm.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_pattern_statics)];\n+#![allow(non_uppercase_pattern_statics)]\n \n use lib::llvm::{llvm, Integer, Pointer, Float, Double, Struct, Array};\n use lib::llvm::StructRetAttribute;"}, {"sha": "cbcecb2220dc005695424ec86298d4c526fb89b9", "filename": "src/librustc/middle/trans/cabi_mips.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_mips.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_pattern_statics)];\n+#![allow(non_uppercase_pattern_statics)]\n \n use std::libc::c_uint;\n use std::cmp;"}, {"sha": "0ed87ef8092ea0cbbb25c60e88806c79d09bd5c6", "filename": "src/librustc/middle/trans/cabi_x86_64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcabi_x86_64.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // The classification code for the x86_64 ABI is taken from the clay language\n // https://github.com/jckarter/clay/blob/master/compiler/src/externals.cpp\n \n-#[allow(non_uppercase_pattern_statics)];\n+#![allow(non_uppercase_pattern_statics)]\n \n use lib::llvm::{llvm, Integer, Pointer, Float, Double};\n use lib::llvm::{Struct, Array, Attribute};"}, {"sha": "86413406ba561a339225e340f11fcfd0b442a1ab", "filename": "src/librustc/middle/trans/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fcommon.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n //! Code that is useful in various trans modules.\n "}, {"sha": "f1cd46923d71d433f805a763e145f4a56addf600", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -31,7 +31,7 @@\n  * See doc.rs for more comments.\n  */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::abi;\n use lib::llvm::{ValueRef, llvm};"}, {"sha": "95c0b08d400eac12b1537b1a523b0d7336943f97", "filename": "src/librustc/middle/trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fintrinsic.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_pattern_statics)];\n+#![allow(non_uppercase_pattern_statics)]\n \n use arena::TypedArena;\n use lib::llvm::{SequentiallyConsistent, Acquire, Release, Xchg};"}, {"sha": "313280cb7a8cc7eddb52e9f07167c65e6da937c1", "filename": "src/librustc/middle/trans/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n+#![macro_escape]\n \n macro_rules! unpack_datum(\n     ($bcx: ident, $inp: expr) => ("}, {"sha": "c30dde3a1e2fb86c2a921c21469ca15723814d3e", "filename": "src/librustc/middle/trans/tvec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftvec.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::abi;\n use lib;"}, {"sha": "ca6c0afc8b5e0c890f9f1d00f4d4679cb2ec52a1", "filename": "src/librustc/middle/trans/type_.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_pattern_statics)];\n+#![allow(non_uppercase_pattern_statics)]\n \n use lib::llvm::{llvm, TypeRef, Bool, False, True, TypeKind};\n use lib::llvm::{Float, Double, X86_FP80, PPC_FP128, FP128};"}, {"sha": "a78520c8f6bfd7ab86d9e96a50aefc14f4e8daec", "filename": "src/librustc/middle/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Ftype_of.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::trans::adt;\n use middle::trans::common::*;"}, {"sha": "a86348947f1381bafa3d5be0942c35142ffc6747", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use back::svh::Svh;\n use driver::session::Session;"}, {"sha": "a4b78bc3db2cc07b87b2658f372e9e720d22c82d", "filename": "src/librustc/middle/typeck/check/_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2F_match.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use middle::pat_util::{PatIdMap, pat_id_map, pat_is_binding, pat_is_const};\n use middle::ty;"}, {"sha": "d3e81f07f7dc1236a648129b2518e4a71aee58ec", "filename": "src/librustc/middle/typeck/infer/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n+#![macro_escape]\n \n macro_rules! if_ok(\n     ($inp: expr) => ("}, {"sha": "8084b712e5330deaa74d2eb908d69e7dd7e55041", "filename": "src/librustc/middle/typeck/infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Finfer%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n /*! See doc.rs for documentation */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n pub use middle::ty::IntVarValue;\n pub use middle::typeck::infer::resolve::resolve_and_force_all_but_regions;"}, {"sha": "e68bb70fc9adb684af28ef51bcdac6e152750b03", "filename": "src/librustc/middle/typeck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -59,7 +59,7 @@ independently:\n \n */\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use driver::session;\n "}, {"sha": "c264916ab42df439e0e25a3f4ca166c1f2d7dd30", "filename": "src/librustc/util/common.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustc%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fcommon.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use syntax::ast;\n use syntax::codemap::{Span};"}, {"sha": "c2524d2b545f787911106a094340f8b3c0b2942d", "filename": "src/librustdoc/flock.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Fflock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Fflock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fflock.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@\n //! green/native threading. This is just a bare-bones enough solution for\n //! librustdoc, it is not production quality at all.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n pub use self::imp::Lock;\n "}, {"sha": "c52a6267657b377919b43bb9f4aba7dd0be8395f", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -24,7 +24,7 @@\n //! // ... something using html\n //! ```\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use std::cast;\n use std::fmt;"}, {"sha": "944cc08f2e37dbe35c885422b3b81e6d3a7b05e8", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"rustdoc#0.10-pre\"];\n-#[desc = \"rustdoc, the Rust documentation extractor\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"dylib\"];\n-#[crate_type = \"rlib\"];\n+#![crate_id = \"rustdoc#0.10-pre\"]\n+#![desc = \"rustdoc, the Rust documentation extractor\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n \n-#[feature(globs, struct_variant, managed_boxes, macro_rules, phase)];\n+#![feature(globs, struct_variant, managed_boxes, macro_rules, phase)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "aa345ca32aa7e2424a4fdfcc79b0c1d7ebfe5112", "filename": "src/librustuv/homing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fhoming.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fhoming.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fhoming.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -31,7 +31,7 @@\n //! This enqueueing is done with a concurrent queue from libstd, and the\n //! signalling is achieved with an async handle.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n use std::cast;\n use std::rt::local::Local;"}, {"sha": "427dd87a0a189d60e5d7fff4675c98874cd328c5", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -34,14 +34,14 @@ via `close` and `delete` methods.\n \n */\n \n-#[crate_id = \"rustuv#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-\n-#[feature(macro_rules)];\n-#[deny(unused_result, unused_must_use)];\n-#[allow(visible_private_types)];\n+#![crate_id = \"rustuv#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+\n+#![feature(macro_rules)]\n+#![deny(unused_result, unused_must_use)]\n+#![allow(visible_private_types)]\n \n #[cfg(test)] extern crate green;\n #[cfg(test)] extern crate realrustuv = \"rustuv\";"}, {"sha": "a51b842f139706e732c0dd58040b791233b05c58", "filename": "src/librustuv/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n+#![macro_escape]\n \n use std::fmt;\n "}, {"sha": "ad0de0b46c9cff02f165b07eb8ce9e44f5a5305e", "filename": "src/librustuv/queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fqueue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fqueue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fqueue.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -18,7 +18,7 @@\n //! event loop alive we use uv_ref and uv_unref in order to control when the\n //! async handle is active or not.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n use std::cast;\n use std::libc::{c_void, c_int};"}, {"sha": "578f90dee9aa7479fd7f01346699ae3a3a163278", "filename": "src/librustuv/uvll.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fuvll.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibrustuv%2Fuvll.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Fuvll.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -27,7 +27,7 @@\n  * the mappings should be added in this module.\n  */\n \n-#[allow(non_camel_case_types)]; // C types\n+#![allow(non_camel_case_types)] // C types\n \n use std::libc::{size_t, c_int, c_uint, c_void, c_char, c_double};\n use std::libc::{ssize_t, sockaddr, free, addrinfo};"}, {"sha": "c30c0075e355b760bff19fddf16fb9b0330db5c5", "filename": "src/libsemver/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsemver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsemver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsemver%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -28,14 +28,14 @@\n //! An example version number with all five components is\n //! `0.8.1-rc.3.0+20130922.linux`.\n \n-#[crate_id = \"semver#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[deny(deprecated_owned_vector)];\n+#![crate_id = \"semver#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![deny(deprecated_owned_vector)]\n \n use std::char;\n use std::cmp;"}, {"sha": "cf1720041cc4f87187729242cdfc62e43c63e957", "filename": "src/libserialize/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Febml.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::io;\n use std::str;"}, {"sha": "59a80f0f43224dece00e447c6e1d61527bc248e0", "filename": "src/libserialize/json.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Fjson.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Fjson.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Fjson.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,8 +11,8 @@\n // Rust JSON serialization library\n // Copyright (c) 2011 Google Inc.\n \n-#[forbid(non_camel_case_types)];\n-#[allow(missing_doc)];\n+#![forbid(non_camel_case_types)]\n+#![allow(missing_doc)]\n \n /*!\n JSON parsing and serialization"}, {"sha": "46a635c5aafcee64981fe20c793c5368d233207e", "filename": "src/libserialize/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibserialize%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibserialize%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,14 +14,14 @@\n Core encoding and decoding interfaces.\n */\n \n-#[crate_id = \"serialize#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(macro_rules, managed_boxes, default_type_params, phase)];\n+#![crate_id = \"serialize#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(macro_rules, managed_boxes, default_type_params, phase)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "2e51931f15a1336a046bf3a4dee3e5f978f1f05c", "filename": "src/libstd/cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcleanup.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc(hidden)];\n+#![doc(hidden)]\n \n use ptr;\n use raw;"}, {"sha": "a8d5aa6e38ee198b01fa73d75aa666008e425142", "filename": "src/libstd/cmp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcmp.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -20,7 +20,7 @@ and `Eq` to overload the `==` and `!=` operators.\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n /**\n * Trait for values that can be compared for equality and inequality."}, {"sha": "ef8894a258cdceccc6494d1fe41465c08538516c", "filename": "src/libstd/comm/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcomm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcomm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -252,7 +252,7 @@ use sync::arc::UnsafeArc;\n pub use comm::select::{Select, Handle};\n \n macro_rules! test (\n-    { fn $name:ident() $b:block $($a:attr)*} => (\n+    { fn $name:ident() $b:block $(#[$a:meta])*} => (\n         mod $name {\n             #[allow(unused_imports)];\n \n@@ -265,8 +265,8 @@ macro_rules! test (\n \n             fn f() $b\n \n-            $($a)* #[test] fn uv() { f() }\n-            $($a)* #[test] fn native() {\n+            $(#[$a])* #[test] fn uv() { f() }\n+            $(#[$a])* #[test] fn native() {\n                 use native;\n                 let (tx, rx) = channel();\n                 native::task::spawn(proc() { tx.send(f()) });"}, {"sha": "23bbb5a56119e6fce8a5be92199ac425a664188e", "filename": "src/libstd/comm/select.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcomm%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fcomm%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcomm%2Fselect.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -43,7 +43,7 @@\n //! }\n //! ```\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n use cast;\n use cell::Cell;"}, {"sha": "2a2515754b46c77c69e1b6046489b8ccdd0a3cbd", "filename": "src/libstd/fmt/rt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Ffmt%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Ffmt%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Frt.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,8 +14,8 @@\n //! These definitions are similar to their `ct` equivalents, but differ in that\n //! these can be statically allocated and are slightly optimized for the runtime\n \n-#[allow(missing_doc)];\n-#[doc(hidden)];\n+#![allow(missing_doc)]\n+#![doc(hidden)]\n \n use fmt::parse;\n use option::Option;"}, {"sha": "06a864f9a10ec141997d6138d332ecf709b2410f", "filename": "src/libstd/gc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fgc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fgc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fgc.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -16,7 +16,7 @@ collector is task-local so `Gc<T>` is not sendable.\n \n */\n \n-#[allow(experimental)];\n+#![allow(experimental)]\n \n use kinds::marker;\n use clone::Clone;"}, {"sha": "5e63f59f7618806be2f7e6256a320b7a79a4b463", "filename": "src/libstd/hash/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fhash%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -61,7 +61,7 @@\n  * ```\n  */\n \n-#[allow(unused_must_use)];\n+#![allow(unused_must_use)]\n \n use container::Container;\n use io::Writer;"}, {"sha": "988140d38d43d0ce4e0d4539842e219fe0a4d9de", "filename": "src/libstd/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fintrinsics.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -41,7 +41,7 @@ A quick refresher on memory ordering:\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n // This is needed to prevent duplicate lang item definitions.\n #[cfg(test)]"}, {"sha": "0275d9ba8d943c64b4da9239dd56a6eead0883b6", "filename": "src/libstd/io/extensions.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fextensions.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Utility mixins that apply to all Readers and Writers\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n // FIXME: Not sure how this should be structured\n // FIXME: Iteration should probably be considered separately"}, {"sha": "c1833e6b116aa89c086b267166f93cb92a053988", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -208,7 +208,7 @@ responding to errors that may occur while attempting to read the numbers.\n \n */\n \n-#[deny(unused_must_use)];\n+#![deny(unused_must_use)]\n \n use cast;\n use char::Char;"}, {"sha": "f16db6e76c9b9dbc5e18f239ea239521acf8b612", "filename": "src/libstd/io/net/addrinfo.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Faddrinfo.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -17,7 +17,7 @@ getaddrinfo()\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use io::IoResult;\n use io::net::ip::{SocketAddr, IpAddr};"}, {"sha": "8cb205ab67e7c453bc2de7ff42f3cc104b4a16e2", "filename": "src/libstd/io/net/ip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Fip.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n //! This module contains functions useful for parsing, formatting, and\n //! manipulating IP addresses.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use container::Container;\n use fmt;"}, {"sha": "61943eb3d6fb800ec56016c8555f77c140b97932", "filename": "src/libstd/io/net/tcp.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Ftcp.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -17,7 +17,7 @@\n //! A TCP connection implements the `Reader` and `Writer` traits, while the TCP\n //! listener (socket server) implements the `Listener` and `Acceptor` traits.\n \n-#[deny(missing_doc)];\n+#![deny(missing_doc)]\n \n use clone::Clone;\n use io::IoResult;"}, {"sha": "73bb6b56298267cb9abdb0db45c27e0726f9286b", "filename": "src/libstd/io/net/unix.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fnet%2Funix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fnet%2Funix.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -22,7 +22,7 @@ instances as clients.\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use prelude::*;\n "}, {"sha": "43b53ca95dce611d4c26989d655957ca25133c2a", "filename": "src/libstd/io/pipe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fpipe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fpipe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fpipe.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n //! Currently these aren't particularly useful, there only exists bindings\n //! enough so that pipes can be created to child processes.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use prelude::*;\n use io::IoResult;"}, {"sha": "0ce35018a9c6239c45b59eb001afe6f1ea327454", "filename": "src/libstd/io/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fprocess.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Bindings for executing child processes\n \n-#[deny(missing_doc)];\n+#![deny(missing_doc)]\n \n use prelude::*;\n "}, {"sha": "d5bd7ad24f89feb6ac7922ec15d20240882667b6", "filename": "src/libstd/io/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fio%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Ftest.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n /*! Various utility functions useful for writing I/O tests */\n \n-#[macro_escape];\n+#![macro_escape]\n \n use libc;\n use os;\n@@ -19,7 +19,7 @@ use std::io::net::ip::*;\n use sync::atomics::{AtomicUint, INIT_ATOMIC_UINT, Relaxed};\n \n macro_rules! iotest (\n-    { fn $name:ident() $b:block $($a:attr)* } => (\n+    { fn $name:ident() $b:block $(#[$a:meta])* } => (\n         mod $name {\n             #[allow(unused_imports)];\n \n@@ -43,8 +43,8 @@ macro_rules! iotest (\n \n             fn f() $b\n \n-            $($a)* #[test] fn green() { f() }\n-            $($a)* #[test] fn native() {\n+            $(#[$a])* #[test] fn green() { f() }\n+            $(#[$a])* #[test] fn native() {\n                 use native;\n                 let (tx, rx) = channel();\n                 native::task::spawn(proc() { tx.send(f()) });"}, {"sha": "c130b89b6d455f039d53cdd56974e226f8a879f0", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -43,21 +43,21 @@\n //!\n //!     use std::prelude::*;\n \n-#[crate_id = \"std#0.10-pre\"];\n-#[comment = \"The Rust standard library\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n-          simd, linkage, default_type_params, phase)];\n+#![crate_id = \"std#0.10-pre\"]\n+#![comment = \"The Rust standard library\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(macro_rules, globs, asm, managed_boxes, thread_local, link_args,\n+           simd, linkage, default_type_params, phase)]\n \n // Don't link to std. We are std.\n-#[no_std];\n+#![no_std]\n \n-#[deny(missing_doc)];\n+#![deny(missing_doc)]\n \n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top"}, {"sha": "a310b95a21351219928da9466ed89f4dc7af3632", "filename": "src/libstd/libc.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Flibc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Flibc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flibc.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -62,10 +62,10 @@\n * dissolved.\n */\n \n-#[allow(non_camel_case_types)];\n-#[allow(non_uppercase_statics)];\n-#[allow(missing_doc)];\n-#[allow(uppercase_variables)];\n+#![allow(non_camel_case_types)]\n+#![allow(non_uppercase_statics)]\n+#![allow(missing_doc)]\n+#![allow(uppercase_variables)]\n \n // Initial glob-exports mean that all the contents of all the modules\n // wind up exported, if you're interested in writing platform-specific code."}, {"sha": "9b1c5a406cf69a7ad94ac39244ffab61688c3268", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@\n //! library. Each macro is available for use when linking against the standard\n //! library.\n \n-#[macro_escape];\n+#![macro_escape]\n \n /// The entry point for failure of rust tasks.\n ///"}, {"sha": "0e709445770d93bfcbacacb2f37e7103d95c679d", "filename": "src/libstd/mem.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmem.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n //! This module contains functions for querying the size and alignment of\n //! types, initializing and manipulating memory.\n \n-#[allow(missing_doc)]; // FIXME\n+#![allow(missing_doc)] // FIXME\n \n use cast;\n use ptr;"}, {"sha": "32864f14c9631fb9daa0dfbb3ac72c5b3c72ab96", "filename": "src/libstd/num/cmath.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fcmath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fcmath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fcmath.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n-#[allow(dead_code)];\n+#![allow(missing_doc)]\n+#![allow(dead_code)]\n \n //! Bindings for the C math library (for basic mathematic functions)\n "}, {"sha": "99484f41de13de84b76aa829a3b01a3ba097458b", "filename": "src/libstd/num/f32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff32.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for 32-bits floats (`f32` type)\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use prelude::*;\n "}, {"sha": "4029e111b0860267007a835eab7c08234538d9b4", "filename": "src/libstd/num/f64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ff64.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for 64-bits floats (`f64` type)\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use prelude::*;\n "}, {"sha": "3e403219a4fbaffdc207d8c2015ba88431a4e67f", "filename": "src/libstd/num/float_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Ffloat_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Ffloat_macros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n-#[doc(hidden)];\n+#![macro_escape]\n+#![doc(hidden)]\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({"}, {"sha": "42710a8b459d089e09d23fe57907972bb5bdea00", "filename": "src/libstd/num/i16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi16.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 16-bits integers (`i16` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "69d4b0639f732af609d60f60b80068480bfb8b85", "filename": "src/libstd/num/i32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi32.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 32-bits integers (`i32` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "1f7066c25db3b649e228e1d949cc4096896f671a", "filename": "src/libstd/num/i64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi64.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 64-bits integers (`i64` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "061ffddf2312e98fea2b4eb2f6b571937216c44c", "filename": "src/libstd/num/i8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fi8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fi8.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for signed 8-bits integers (`i8` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "66b204ee8bdc78b95b95295e82cc482c4e78d120", "filename": "src/libstd/num/int.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for architecture-sized signed integers (`int` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "1d2c38f22bb175de92f9263a016ed0e5542c6d60", "filename": "src/libstd/num/int_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fint_macros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n-#[doc(hidden)];\n+#![macro_escape]\n+#![doc(hidden)]\n \n macro_rules! int_module (($T:ty, $bits:expr) => (\n "}, {"sha": "feff0e7e6c0e5321c0097331609050c8153f9994", "filename": "src/libstd/num/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n //! These are implemented for the primitive numeric types in `std::{u8, u16,\n //! u32, u64, uint, i8, i16, i32, i64, int, f32, f64, float}`.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use clone::Clone;\n use cmp::{Eq, Ord};"}, {"sha": "dc49da415a49158a78ece6ebc2cf8f6f2b703b90", "filename": "src/libstd/num/strconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fstrconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fstrconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fstrconv.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use clone::Clone;\n use container::Container;"}, {"sha": "ca473e9517e45cf57c4dcdbd27aca6bf24278b86", "filename": "src/libstd/num/u16.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu16.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu16.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu16.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 16-bits integers (`u16` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "2a0b9aac667af5d7c451cba1658cc1f4fe3add23", "filename": "src/libstd/num/u32.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu32.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 32-bits integers (`u32` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "2cfc5da95e8baa7fe2da9e761160d0f7c4a67ddf", "filename": "src/libstd/num/u64.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu64.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 64-bits integer (`u64` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "30ed13a5952b45bf5cac90d81bb5471594fa5d35", "filename": "src/libstd/num/u8.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fu8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fu8.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for unsigned 8-bits integers (`u8` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "6751fdb5d252c5df51f67a03bbf55f5871fdc6b5", "filename": "src/libstd/num/uint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fuint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fuint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations and constants for architecture-sized unsigned integers (`uint` type)\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n use prelude::*;\n "}, {"sha": "ece30e72e06824f604afee7fcf3fa7e5bb5917d5", "filename": "src/libstd/num/uint_macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fnum%2Fuint_macros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnum%2Fuint_macros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n-#[doc(hidden)];\n+#![macro_escape]\n+#![doc(hidden)]\n \n macro_rules! uint_module (($T:ty, $T_SIGNED:ty, $bits:expr) => (\n "}, {"sha": "b84ba6a501c2adec80f0750a7f6de4019021b910", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -26,7 +26,7 @@\n  * to write OS-ignorant code by default.\n  */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n #[cfg(target_os = \"macos\")]\n #[cfg(windows)]"}, {"sha": "a641787dfd15c7a94cae9a4ab818d61a06bed829", "filename": "src/libstd/path/windows.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fpath%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fpath%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath%2Fwindows.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -637,7 +637,7 @@ impl Path {\n     /// See str_components() for details.\n     pub fn components<'a>(&'a self) -> Components<'a> {\n         fn convert<'a>(x: Option<&'a str>) -> &'a [u8] {\n-            #[inline];\n+            #![inline]\n             x.unwrap().as_bytes()\n         }\n         self.str_components().map(convert)\n@@ -647,7 +647,7 @@ impl Path {\n     /// See str_components() for details.\n     pub fn rev_components<'a>(&'a self) -> RevComponents<'a> {\n         fn convert<'a>(x: Option<&'a str>) -> &'a [u8] {\n-            #[inline];\n+            #![inline]\n             x.unwrap().as_bytes()\n         }\n         self.rev_str_components().map(convert)"}, {"sha": "d776b05bcd9de59210d545917f036c8a73f1d63d", "filename": "src/libstd/raw.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fraw.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n //! Contains struct definitions for the layout of compiler built-in types.\n //!"}, {"sha": "183318cbfdb42347e21bf06eb9ee2eacbe4ee254", "filename": "src/libstd/reflect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Freflect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Freflect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Freflect.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@ Runtime type reflection\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use intrinsics::{Disr, Opaque, TyDesc, TyVisitor};\n use mem;"}, {"sha": "e15ca3c0320d68ba3a9100b8a957b214a8ddddde", "filename": "src/libstd/repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frepr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@ More runtime type reflection\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use cast::transmute;\n use char;"}, {"sha": "96f95622b9213dbe139cc40a05034ab18235574e", "filename": "src/libstd/rt/backtrace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fbacktrace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fbacktrace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbacktrace.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use char::Char;\n use container::Container;"}, {"sha": "9e772d8ad23850cb7920fd1d09d4975bdf668c98", "filename": "src/libstd/rt/bookkeeping.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fbookkeeping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fbookkeeping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fbookkeeping.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -18,8 +18,8 @@\n //! each respective runtime to make sure that they call increment() and\n //! decrement() manually.\n \n-#[experimental]; // this is a massive code smell\n-#[doc(hidden)];\n+#![experimental] // this is a massive code smell\n+#![doc(hidden)]\n \n use sync::atomics;\n use unstable::mutex::{StaticNativeMutex, NATIVE_MUTEX_INIT};"}, {"sha": "e9a925fb897fb27e043d6f6d9853e7d1092a3d59", "filename": "src/libstd/rt/libunwind.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Flibunwind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Flibunwind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flibunwind.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n //! Unwind library interface\n \n-#[allow(non_camel_case_types)];\n-#[allow(dead_code)]; // these are just bindings\n+#![allow(non_camel_case_types)]\n+#![allow(dead_code)] // these are just bindings\n \n use libc;\n "}, {"sha": "30068712977b695452b0094f9313d14fe33ac773", "filename": "src/libstd/rt/local_ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Flocal_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Flocal_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Flocal_ptr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -15,7 +15,7 @@\n //! XXX: Add runtime checks for usage of inconsistent pointer types.\n //! and for overwriting an existing pointer.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n use cast;\n use ops::Drop;"}, {"sha": "74675c85b96b30d2fbaa584e073cf21f614fc2e5", "filename": "src/libstd/rt/macros.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmacros.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n //! These macros call functions which are only accessible in the `rt` module, so\n //! they aren't defined anywhere outside of the `rt` module.\n \n-#[macro_escape];\n+#![macro_escape]\n \n macro_rules! rterrln (\n     ($($arg:tt)*) => ( {"}, {"sha": "5e2f8efd2e35c08d2ebea13ae537aeb5837824f8", "filename": "src/libstd/rt/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -52,7 +52,7 @@ Several modules in `core` are clients of `rt`:\n */\n \n // FIXME: this should not be here.\n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use any::Any;\n use kinds::Send;"}, {"sha": "1802016e3b38ad76c872c799080db7823ff9de53", "filename": "src/libstd/rt/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@\n //! These functions operate outside of the rust runtime, creating threads\n //! which are not used for scheduling in any way.\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use cast;\n use kinds::Send;"}, {"sha": "2f567e91b4cdb232805614bdb7c481b8738add1c", "filename": "src/libstd/rt/thread_local_storage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Frt%2Fthread_local_storage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fthread_local_storage.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n #[cfg(unix)]\n use libc::c_int;"}, {"sha": "b5055dfe8b37c036e99fc9a860df7c5a7614eaff", "filename": "src/libstd/slice.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fslice.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -99,7 +99,7 @@ There are a number of free functions that create or take vectors, for example:\n \n */\n \n-#[warn(non_camel_case_types)];\n+#![warn(non_camel_case_types)]\n \n use cast;\n use cast::transmute;"}, {"sha": "0e640d3a66262a4ed8e9477a410f886eb5b365ad", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -4008,7 +4008,7 @@ mod tests {\n \n     #[test]\n     fn test_add() {\n-        #[allow(unnecessary_allocation)];\n+        #![allow(unnecessary_allocation)]\n         macro_rules! t (\n             ($s1:expr, $s2:expr, $e:expr) => { {\n                 let s1 = $s1;"}, {"sha": "6cc2f85bd95429374ba9fd2e2b891c3863e06abb", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -105,7 +105,7 @@\n //! }\n //! ```\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use intrinsics;\n use cast;"}, {"sha": "dfa962cdb80bd67c7e5787006b6f9d99a0fac1c8", "filename": "src/libstd/sync/mpmc_bounded_queue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpmc_bounded_queue.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -25,7 +25,7 @@\n  * policies, either expressed or implied, of Dmitry Vyukov.\n  */\n \n-#[allow(missing_doc, dead_code)];\n+#![allow(missing_doc, dead_code)]\n \n // http://www.1024cores.net/home/lock-free-algorithms/queues/bounded-mpmc-queue\n "}, {"sha": "732b006b245616377bac704f014cce407e4fc96f", "filename": "src/libstd/tuple.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftuple.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! Operations on tuples\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use clone::Clone;\n #[cfg(not(test))] use cmp::*;"}, {"sha": "c98861a0fe76b1972c9d3d54af3688d6567806fa", "filename": "src/libstd/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funicode.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // The following code was generated by \"src/etc/unicode.py\"\n \n-#[allow(missing_doc)];\n-#[allow(non_uppercase_statics)];\n+#![allow(missing_doc)]\n+#![allow(non_uppercase_statics)]\n \n fn bsearch_range_table(c: char, r: &'static [(char,char)]) -> bool {\n     use cmp::{Equal, Less, Greater};"}, {"sha": "ddbf650e64a97b29f5e3e6304c0306fe2b627420", "filename": "src/libstd/unstable/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmod.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[doc(hidden)];\n+#![doc(hidden)]\n \n use prelude::*;\n use libc::uintptr_t;"}, {"sha": "eda2df487aa6419a4279875a03f45db6c9b9f86f", "filename": "src/libstd/unstable/mutex.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fmutex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fmutex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fmutex.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -56,7 +56,7 @@\n //! } // `lock` is deallocated here\n //! ```\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n use option::{Option, None, Some};\n use ops::Drop;"}, {"sha": "01200833b195d699d7f0738ed25d136499d683e7", "filename": "src/libstd/unstable/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibstd%2Funstable%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Funstable%2Fsimd.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n //! SIMD vectors\n \n-#[allow(non_camel_case_types)];\n+#![allow(non_camel_case_types)]\n \n #[experimental]\n #[simd]"}, {"sha": "6413dccd96c95d7499d9efc72f8c096aa0b09261", "filename": "src/libsync/comm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Fcomm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Fcomm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Fcomm.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -14,7 +14,7 @@ Higher level communication abstractions.\n \n */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::comm;\n "}, {"sha": "94e78729aeea6bfcf6556affe8ca26b376d1c561", "filename": "src/libsync/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ffuture.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -24,7 +24,7 @@\n  * ```\n  */\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::mem::replace;\n "}, {"sha": "fa219009d41d5db2ba605ecd46f709c827709026", "filename": "src/libsync/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -12,15 +12,15 @@\n  * Concurrency-enabled mechanisms and primitives.\n  */\n \n-#[crate_id = \"sync#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(phase)];\n-#[deny(missing_doc, deprecated_owned_vector)];\n+#![crate_id = \"sync#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(phase)]\n+#![deny(missing_doc, deprecated_owned_vector)]\n \n #[cfg(test)]\n #[phase(syntax, link)] extern crate log;"}, {"sha": "d29e857cca656a5f0a5472272c302b837a4de073", "filename": "src/libsync/task_pool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Ftask_pool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsync%2Ftask_pool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsync%2Ftask_pool.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n /// A task pool abstraction. Useful for achieving predictable CPU\n /// parallelism."}, {"sha": "0d90093a40f3f8aa6518312151dd16c1459bef71", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -441,7 +441,7 @@ pub fn parse_nt(p: &mut Parser, name: &str) -> Nonterminal {\n       \"path\" => {\n         token::NtPath(~p.parse_path(LifetimeAndTypesWithoutColons).path)\n       }\n-      \"attr\" => token::NtAttr(@p.parse_attribute(false)),\n+      \"meta\" => token::NtMeta(p.parse_meta_item()),\n       \"tt\" => {\n         p.quote_depth += 1u; //but in theory, non-quoted tts might be useful\n         let res = token::NtTT(@p.parse_token_tree());"}, {"sha": "86795b6623c7c6b9dfa4f6c4e02d8de5cce7fe2d", "filename": "src/libsyntax/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -18,17 +18,17 @@ This API is completely unstable and subject to change.\n \n */\n \n-#[crate_id = \"syntax#0.10-pre\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"dylib\"];\n-#[crate_type = \"rlib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(macro_rules, globs, managed_boxes, default_type_params, phase,\n-          quote)];\n-#[allow(deprecated)];\n+#![crate_id = \"syntax#0.10-pre\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"dylib\"]\n+#![crate_type = \"rlib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![feature(macro_rules, globs, managed_boxes, default_type_params, phase,\n+           quote)]\n+#![allow(deprecated)]\n \n extern crate serialize;\n extern crate term;"}, {"sha": "ddb6ddb64b433e64223e3e1184454c5253522700", "filename": "src/libsyntax/parse/attr.rs", "status": "modified", "additions": 10, "deletions": 14, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fattr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -34,9 +34,6 @@ impl<'a> ParserAttr for Parser<'a> {\n             debug!(\"parse_outer_attributes: self.token={:?}\",\n                    self.token);\n             match self.token {\n-              token::INTERPOLATED(token::NtAttr(..)) => {\n-                attrs.push(self.parse_attribute(false));\n-              }\n               token::POUND => {\n                 attrs.push(self.parse_attribute(false));\n               }\n@@ -66,11 +63,6 @@ impl<'a> ParserAttr for Parser<'a> {\n         debug!(\"parse_attributes: permit_inner={:?} self.token={:?}\",\n                permit_inner, self.token);\n         let (span, value, mut style) = match self.token {\n-            INTERPOLATED(token::NtAttr(attr)) => {\n-                assert!(attr.node.style == ast::AttrOuter);\n-                self.bump();\n-                (attr.span, attr.node.value, ast::AttrOuter)\n-            }\n             token::POUND => {\n                 let lo = self.span.lo;\n                 self.bump();\n@@ -101,9 +93,8 @@ impl<'a> ParserAttr for Parser<'a> {\n         };\n \n         if permit_inner && self.eat(&token::SEMI) {\n-            // NOTE: uncomment this after a stage0 snap\n-            //self.warn(\"This uses the old attribute syntax. Semicolons\n-            //  are not longer required.\");\n+            self.span_warn(span, \"this inner attribute syntax is deprecated. \\\n+                           The new syntax is `#![foo]`, with a bang and no semicolon.\");\n             style = ast::AttrInner;\n         }\n \n@@ -133,9 +124,6 @@ impl<'a> ParserAttr for Parser<'a> {\n         let mut next_outer_attrs: Vec<ast::Attribute> = Vec::new();\n         loop {\n             let attr = match self.token {\n-                token::INTERPOLATED(token::NtAttr(..)) => {\n-                    self.parse_attribute(true)\n-                }\n                 token::POUND => {\n                     self.parse_attribute(true)\n                 }\n@@ -163,6 +151,14 @@ impl<'a> ParserAttr for Parser<'a> {\n     // | IDENT = lit\n     // | IDENT meta_seq\n     fn parse_meta_item(&mut self) -> @ast::MetaItem {\n+        match self.token {\n+            token::INTERPOLATED(token::NtMeta(e)) => {\n+                self.bump();\n+                return e\n+            }\n+            _ => {}\n+        }\n+\n         let lo = self.span.lo;\n         let ident = self.parse_ident();\n         let name = self.id_to_interned_str(ident);"}, {"sha": "aee843bd857060281c23ea5fe6ea87663820664e", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[macro_escape];\n+#![macro_escape]\n \n use abi;\n use abi::AbiSet;\n@@ -811,6 +811,9 @@ impl<'a> Parser<'a> {\n     pub fn warn(&mut self, m: &str) {\n         self.sess.span_diagnostic.span_warn(self.span, m)\n     }\n+    pub fn span_warn(&mut self, sp: Span, m: &str) {\n+        self.sess.span_diagnostic.span_warn(sp, m)\n+    }\n     pub fn span_err(&mut self, sp: Span, m: &str) {\n         self.sess.span_diagnostic.span_err(sp, m)\n     }"}, {"sha": "e3eb1f1f7116eb8465af6bce45f7bd4d8867f0c9", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -113,7 +113,7 @@ pub enum Nonterminal {\n     NtExpr(@ast::Expr),\n     NtTy(  P<ast::Ty>),\n     NtIdent(~ast::Ident, bool),\n-    NtAttr(@ast::Attribute), // #[foo]\n+    NtMeta(@ast::MetaItem), // stuff inside brackets for attributes\n     NtPath(~ast::Path),\n     NtTT(  @ast::TokenTree), // needs @ed to break a circularity\n     NtMatchers(Vec<ast::Matcher> )\n@@ -129,7 +129,7 @@ impl fmt::Show for Nonterminal {\n             NtExpr(..) => f.pad(\"NtExpr(..)\"),\n             NtTy(..) => f.pad(\"NtTy(..)\"),\n             NtIdent(..) => f.pad(\"NtIdent(..)\"),\n-            NtAttr(..) => f.pad(\"NtAttr(..)\"),\n+            NtMeta(..) => f.pad(\"NtMeta(..)\"),\n             NtPath(..) => f.pad(\"NtPath(..)\"),\n             NtTT(..) => f.pad(\"NtTT(..)\"),\n             NtMatchers(..) => f.pad(\"NtMatchers(..)\"),\n@@ -241,15 +241,15 @@ pub fn to_str(t: &Token) -> ~str {\n       INTERPOLATED(ref nt) => {\n         match nt {\n             &NtExpr(e) => ::print::pprust::expr_to_str(e),\n-            &NtAttr(e) => ::print::pprust::attribute_to_str(e),\n+            &NtMeta(e) => ::print::pprust::meta_item_to_str(e),\n             _ => {\n                 ~\"an interpolated \" +\n                     match *nt {\n                         NtItem(..) => ~\"item\",\n                         NtBlock(..) => ~\"block\",\n                         NtStmt(..) => ~\"statement\",\n                         NtPat(..) => ~\"pattern\",\n-                        NtAttr(..) => fail!(\"should have been handled\"),\n+                        NtMeta(..) => fail!(\"should have been handled\"),\n                         NtExpr(..) => fail!(\"should have been handled above\"),\n                         NtTy(..) => ~\"type\",\n                         NtIdent(..) => ~\"identifier\","}, {"sha": "50f2118f0c4e01c7aafe223c9fad36236d02ea06", "filename": "src/libterm/lib.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibterm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibterm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,17 +10,17 @@\n \n //! Simple ANSI color library\n \n-#[crate_id = \"term#0.10-pre\"];\n-#[comment = \"Simple ANSI color library\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n+#![crate_id = \"term#0.10-pre\"]\n+#![comment = \"Simple ANSI color library\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n \n-#[feature(macro_rules)];\n-#[deny(missing_doc)];\n+#![feature(macro_rules)]\n+#![deny(missing_doc)]\n \n extern crate collections;\n "}, {"sha": "edaa55a66031975f169887cc5703218079ad6943", "filename": "src/libterm/terminfo/parser/compiled.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibterm%2Fterminfo%2Fparser%2Fcompiled.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(non_uppercase_statics)];\n+#![allow(non_uppercase_statics)]\n \n //! ncurses-compatible compiled terminfo format parsing (term(5))\n "}, {"sha": "9084201fe99a311cef151ec1fff5b1019be01e5b", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -23,17 +23,17 @@\n // running tests while providing a base that other test frameworks may\n // build off of.\n \n-#[crate_id = \"test#0.10-pre\"];\n-#[comment = \"Rust internal test library only used by rustc\"];\n-#[license = \"MIT/ASL2\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(asm, macro_rules)];\n-#[deny(deprecated_owned_vector)];\n+#![crate_id = \"test#0.10-pre\"]\n+#![comment = \"Rust internal test library only used by rustc\"]\n+#![license = \"MIT/ASL2\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![feature(asm, macro_rules)]\n+#![deny(deprecated_owned_vector)]\n \n extern crate collections;\n extern crate getopts;"}, {"sha": "3740967bc144cdca747a8801cd8a478e6bc9e54e", "filename": "src/libtest/stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtest%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtest%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Fstats.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(missing_doc)];\n+#![allow(missing_doc)]\n \n use std::hash::Hash;\n use std::io;"}, {"sha": "261e4e25aff317d95741616756900476812b8a85", "filename": "src/libtime/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtime%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibtime%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtime%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"time#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(phase)];\n-#[deny(deprecated_owned_vector)];\n+#![crate_id = \"time#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(phase)]\n+#![deny(deprecated_owned_vector)]\n \n #[cfg(test)] #[phase(syntax, link)] extern crate log;\n extern crate serialize;"}, {"sha": "b729a7a69e21e0b7d019548f6e5d816a92cac963", "filename": "src/liburl/lib.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliburl%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Fliburl%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliburl%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,14 +10,14 @@\n \n //! Types/fns concerning URLs (see RFC 3986)\n \n-#[crate_id = \"url#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(default_type_params)];\n+#![crate_id = \"url#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(default_type_params)]\n \n extern crate collections;\n "}, {"sha": "1a6b00bee562489b07e68c6f221bf218bd6623e1", "filename": "src/libuuid/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibuuid%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibuuid%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibuuid%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -54,15 +54,15 @@ Examples of string representations:\n \n */\n \n-#[crate_id = \"uuid#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-\n-#[feature(default_type_params)];\n+#![crate_id = \"uuid#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+\n+#![feature(default_type_params)]\n \n // test harness access\n #[cfg(test)]"}, {"sha": "a078a770e86d55f837dd65a23b98d5b0fb9a1a68", "filename": "src/libworkcache/lib.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibworkcache%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Flibworkcache%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibworkcache%2Flib.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,15 +8,15 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id = \"workcache#0.10-pre\"];\n-#[crate_type = \"rlib\"];\n-#[crate_type = \"dylib\"];\n-#[license = \"MIT/ASL2\"];\n-#[doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n-      html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n-      html_root_url = \"http://static.rust-lang.org/doc/master\")];\n-#[feature(phase)];\n-#[allow(visible_private_types)];\n+#![crate_id = \"workcache#0.10-pre\"]\n+#![crate_type = \"rlib\"]\n+#![crate_type = \"dylib\"]\n+#![license = \"MIT/ASL2\"]\n+#![doc(html_logo_url = \"http://www.rust-lang.org/logos/rust-logo-128x128-blk-v2.png\",\n+       html_favicon_url = \"http://www.rust-lang.org/favicon.ico\",\n+       html_root_url = \"http://static.rust-lang.org/doc/master\")]\n+#![feature(phase)]\n+#![allow(visible_private_types)]\n \n #[phase(syntax, link)] extern crate log;\n extern crate serialize;"}, {"sha": "1bd52d1d1e2473e0b6cf3ba944152708224387b4", "filename": "src/test/auxiliary/struct_variant_xc_aux.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fstruct_variant_xc_aux.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[crate_id=\"struct_variant_xc_aux#0.1\"];\n-#[crate_type = \"lib\"];\n+#![crate_id=\"struct_variant_xc_aux#0.1\"]\n+#![crate_type = \"lib\"]\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n pub enum Enum {\n     Variant { arg: u8 }"}, {"sha": "dfd9fd698c975147423d414d1caf61be0cb8d195", "filename": "src/test/compile-fail/asm-in-bad-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-in-bad-modifier.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n fn foo(x: int) { println!(\"{}\", x); }\n "}, {"sha": "36896667281ddaf3d7e8506a55319d68165eb790", "filename": "src/test/compile-fail/asm-misplaced-option.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-misplaced-option.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,9 +11,9 @@\n // ignore-fast #[feature] doesn't work with check-fast\n // ignore-android\n \n-#[feature(asm)];\n+#![feature(asm)]\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n #[cfg(target_arch = \"x86\")]\n #[cfg(target_arch = \"x86_64\")]"}, {"sha": "ae5c67c365ffd9ba6c55b4ffce758d881478370c", "filename": "src/test/compile-fail/asm-out-assign-imm.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-assign-imm.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n fn foo(x: int) { println!(\"{}\", x); }\n "}, {"sha": "01aa01e09ce6bbf41845d9efbb3e0fc3b281d479", "filename": "src/test/compile-fail/asm-out-no-modifier.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-no-modifier.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n fn foo(x: int) { println!(\"{}\", x); }\n "}, {"sha": "a63a59ff423b61cff57f722fcc654b82ad3c4f18", "filename": "src/test/compile-fail/asm-out-read-uninit.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fasm-out-read-uninit.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // ignore-fast #[feature] doesn't work with check-fast\n-#[feature(asm)];\n+#![feature(asm)]\n \n fn foo(x: int) { println!(\"{}\", x); }\n "}, {"sha": "4ab07f4fa9918e14fd7a60f1cffc2d740585dc3e", "filename": "src/test/compile-fail/attr-bad-crate-attr.rc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fattr-bad-crate-attr.rc?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,5 +10,5 @@\n \n // error-pattern: expected item\n \n-#[attr = \"val\"];\n+#![attr = \"val\"]\n #[attr = \"val\"] // Unterminated"}, {"sha": "8c8c0d9cfb6202426fd6c2ba05bbfec3842171ce", "filename": "src/test/compile-fail/auto-ref-slice-plus-ref.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fauto-ref-slice-plus-ref.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn main() {\n "}, {"sha": "ae9fe6112210b5c78311d438b0dcee8e85bd187f", "filename": "src/test/compile-fail/autoderef-full-lval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fautoderef-full-lval.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct clam {\n     x: @int,"}, {"sha": "1b72e46842862402fece711c937863082d89d209", "filename": "src/test/compile-fail/bad-mid-path-type-params.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbad-mid-path-type-params.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-tidy-linelength\n \n-#[no_std];\n+#![no_std]\n \n struct S<T> {\n     contents: T,"}, {"sha": "9d234e0aaa6328073ce3c9aabe13dec9aaf7ff3f", "filename": "src/test/compile-fail/borrowck-lend-flow-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-lend-flow-match.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // ignore-pretty -- comments are unfaithfully preserved\n \n-#[allow(unused_variable)];\n-#[allow(dead_assignment)];\n+#![allow(unused_variable)]\n+#![allow(dead_assignment)]\n \n fn cond() -> bool { fail!() }\n fn link<'a>(v: &'a uint, w: &mut &'a uint) -> bool { *w = v; true }"}, {"sha": "a6063ffefd4570b437710bf65b5a9618c992021b", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Point {\n     x: int,"}, {"sha": "2461f1ab396046b81149ff380238ed8271fee7df", "filename": "src/test/compile-fail/borrowck-loan-rcvr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct point { x: int, y: int }\n "}, {"sha": "f6ca6ac42b2fe5cc6ebd61bba94928be3cf3a3b9", "filename": "src/test/compile-fail/borrowck-move-subcomponent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-move-subcomponent.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // Tests that the borrow checker checks all components of a path when moving\n // out.\n \n-#[no_std];\n+#![no_std]\n \n struct S {\n   x : ~int"}, {"sha": "82189c6b7c1f1b7fa4e1e240ec275b555b7cba66", "filename": "src/test/compile-fail/borrowck-report-with-custom-diagnostic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-report-with-custom-diagnostic.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n fn main() {\n     // Original borrow ends at end of function\n     let mut x = 1u;"}, {"sha": "c4064c6fcace6effa4cca9cb87ee59d62ad33fa8", "filename": "src/test/compile-fail/box-static-bound.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbox-static-bound.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn f<T>(x: T) -> @T {\n     @x  //~ ERROR value may contain references"}, {"sha": "f4e9521d6b65e66a763895250ef5c36fe43e59c9", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -7,7 +7,7 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // Verifies all possible restrictions for static items values.\n "}, {"sha": "01c6256173f03c5411436d8b2b273145c6247e12", "filename": "src/test/compile-fail/cleanup-rvalue-scopes-cf.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcleanup-rvalue-scopes-cf.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // Test that the borrow checker prevents pointers to temporaries\n // with statement lifetimes from escaping.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n use std::ops::Drop;\n "}, {"sha": "7d8741c98e2e73474d7f207bd87fcd6d523ea232", "filename": "src/test/compile-fail/deriving-primitive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-primitive.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n use std::num::FromPrimitive;\n use std::int;"}, {"sha": "7babb8ea1b9e8479fd5173dc48e95dcc8467b2fe", "filename": "src/test/compile-fail/deriving-span-Clone-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "65404f155f10f4dad0f496b56e963700ecf4ccbf", "filename": "src/test/compile-fail/deriving-span-Clone-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "0ca429e07e9f65f483e4a9446ee5ecb04ea5ba5c", "filename": "src/test/compile-fail/deriving-span-Clone-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "e78e59baf1b1f75c79a7ead19e21a8d9bfb17fe8", "filename": "src/test/compile-fail/deriving-span-Clone-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Clone-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "95132d9a5c7189a2bf8b597ec003a7bfccda5a40", "filename": "src/test/compile-fail/deriving-span-Default-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "670f6e8ea5252d06d20df614ec9fbc6834b8e5d3", "filename": "src/test/compile-fail/deriving-span-Default-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Default-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "9e23493e37fddd031da8384ba48f577397fab1d6", "filename": "src/test/compile-fail/deriving-span-Eq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "d4962c8a76b3502bf5e6f02d3e6b3524278aa8ed", "filename": "src/test/compile-fail/deriving-span-Eq-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "39c9c23e8f5b1e87114696bec1df214e6c494d46", "filename": "src/test/compile-fail/deriving-span-Eq-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "a9a9a1b30713a12edf14350bd5c41232a6b6b673", "filename": "src/test/compile-fail/deriving-span-Eq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Eq-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "745ef501021714ee5cca0c52fd38707bf5ca655b", "filename": "src/test/compile-fail/deriving-span-Hash-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "3cd867d118622ae36aed0fad410e547c4ab6d377", "filename": "src/test/compile-fail/deriving-span-Hash-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "e26bdd8d0899d9127077dbadce3a6fa495accded", "filename": "src/test/compile-fail/deriving-span-Hash-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "7554db6dae35619abd796335ff2ef28accdadfa4", "filename": "src/test/compile-fail/deriving-span-Hash-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Hash-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "900fa0dcb6cd3cbe1e2a70bf2641cd837f2acb51", "filename": "src/test/compile-fail/deriving-span-Ord-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "feb97dee79becd368087ccc1b5f39586b1f399a1", "filename": "src/test/compile-fail/deriving-span-Ord-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "c0396b0822e8825800b0a651919fdbfe801893fd", "filename": "src/test/compile-fail/deriving-span-Ord-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "26610d7e1fac4219aeeb38c50660aa3eecd13e26", "filename": "src/test/compile-fail/deriving-span-Ord-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Ord-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "e1b112bb023c5508dc67924e7197754f81a54b12", "filename": "src/test/compile-fail/deriving-span-Rand-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "746a2aac88e8cf2bee22e35106e59c336e5b68fc", "filename": "src/test/compile-fail/deriving-span-Rand-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "397b2adfcc84657831b261d749ba2df8006b1eb7", "filename": "src/test/compile-fail/deriving-span-Rand-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "be6b7dcbb8f8169ec4bc2f617653164bb41db4e2", "filename": "src/test/compile-fail/deriving-span-Rand-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Rand-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "d50f1c692782ccba20b235f885feb092fde5a18b", "filename": "src/test/compile-fail/deriving-span-Show-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "ada1abe8fbb6060b12d85bea316d07e62ef568c1", "filename": "src/test/compile-fail/deriving-span-Show-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8d74af6ad0b8fe7683755899bca9a266b83b3ee5", "filename": "src/test/compile-fail/deriving-span-Show-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "6e421ca58f5140cf18278c57cb76fb0d0a0b777c", "filename": "src/test/compile-fail/deriving-span-Show-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Show-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "8880d04ce41bf09555f5595b1400566d991326ab", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "d0d8ef62f1e1624b5fab1bdfad21aebe41ddb9b9", "filename": "src/test/compile-fail/deriving-span-TotalEq-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "53d7e0cbe3a11b7896596ae30b61427dda2f7385", "filename": "src/test/compile-fail/deriving-span-TotalEq-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "538ffdcd770ba47b8972a2e7f8d9015c2c13f1e3", "filename": "src/test/compile-fail/deriving-span-TotalEq-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalEq-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq)]"}, {"sha": "d0adb542fc58ceebc6ede487f5d3206be929acc5", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "0fc204f61014725734d572cb37f268ac0338a1e6", "filename": "src/test/compile-fail/deriving-span-TotalOrd-enum.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "69cf5d2d8efb71ab28d3a1347637aaa460810b54", "filename": "src/test/compile-fail/deriving-span-TotalOrd-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "230e5b7ed998900d96d32f69cedf6e1048051501", "filename": "src/test/compile-fail/deriving-span-TotalOrd-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-TotalOrd-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n #[deriving(Eq, Ord, TotalEq)]"}, {"sha": "f32db20ef3fe71700222a72e767afead9cde246c", "filename": "src/test/compile-fail/deriving-span-Zero-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "66488b0ac66732385edd310a65b4320cac908613", "filename": "src/test/compile-fail/deriving-span-Zero-tuple-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fderiving-span-Zero-tuple-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // This file was auto-generated using 'src/etc/generate-keyword-span-tests.py'\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n extern crate rand;\n \n "}, {"sha": "1ce6cf55ac3f3c664b7ec68cfdc7a9e8f6aac937", "filename": "src/test/compile-fail/drop-on-non-struct.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdrop-on-non-struct.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n \n type Foo = Vec<u8>;"}, {"sha": "064a3b9b168be722c920abca67ac296850515ba1", "filename": "src/test/compile-fail/dup-struct-enum-struct-variant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdup-struct-enum-struct-variant.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n enum Foo { C { a: int, b: int } }\n struct C { a: int, b: int }         //~ ERROR error: duplicate definition of type `C`"}, {"sha": "5a68afaceb93a59f3f694ea13d8a82f43ae271b5", "filename": "src/test/compile-fail/gated-bad-feature.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-bad-feature.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,16 +8,16 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(\n+#![feature(\n     foo_bar_baz,\n     foo(bar),\n     foo = \"baz\"\n-)];\n+)]\n //~^^^ ERROR: malformed feature\n //~^^^ ERROR: malformed feature\n \n-#[feature]; //~ ERROR: malformed feature\n-#[feature = \"foo\"]; //~ ERROR: malformed feature\n+#![feature] //~ ERROR: malformed feature\n+#![feature = \"foo\"] //~ ERROR: malformed feature\n \n-#[feature(test_removed_feature)]; //~ ERROR: feature has been removed\n-#[feature(test_accepted_feature)]; //~ WARNING: feature has added\n+#![feature(test_removed_feature)] //~ ERROR: feature has been removed\n+#![feature(test_accepted_feature)] //~ WARNING: feature has added"}, {"sha": "4c8b5de4c864bb2f3064a86df30fc2ffcbb964bd", "filename": "src/test/compile-fail/gated-default-type-param-usage.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-default-type-param-usage.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // aux-build:default_type_params_xc.rs\n \n-#[deny(default_type_param_usage)];\n+#![deny(default_type_param_usage)]\n \n extern crate default_type_params_xc;\n "}, {"sha": "174554a08321dfabd5cf7bc25bcdca236b24752d", "filename": "src/test/compile-fail/gated-non-ascii-idents.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgated-non-ascii-idents.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // ignore-fast feature doesn't work.\n \n-#[feature(struct_variant)];\n+#![feature(struct_variant)]\n \n extern crate b\u00e4z; //~ ERROR non-ascii idents\n "}, {"sha": "d6a47ffd7863b8bb65be0a2989a5fd8fb75e8745", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct Foo<A, B, C = (A, B)>;\n "}, {"sha": "b0040878d628c0eba68d001bc2ae8afd74d84234", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct Heap;\n "}, {"sha": "0b6480fc17dcc79eceb27a4daa357b47ea28ab2a", "filename": "src/test/compile-fail/generic-non-trailing-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct Heap;\n "}, {"sha": "d1fa40bd22cd5fa67e8b5fe026d47e2bab68d383", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct Heap;\n "}, {"sha": "2f3f91a9c3d715cc0f7b9ca4e6b4078da95d8c4e", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct Heap;\n "}, {"sha": "424a92d74eec8b2bc86c2eb4bfc67a5ac1c1645c", "filename": "src/test/compile-fail/generic-type-params-forward-mention.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>;"}, {"sha": "e3d624e9452bae41de8e05b875b2dfe5cc209751", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(default_type_params)];\n+#![feature(default_type_params)]\n \n struct A;\n struct B;"}, {"sha": "aae5e0194a1d1d025a7add145aed42afeb5ecbd3", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // Make sure that globs only bring in public things.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use bar::*;\n "}, {"sha": "010cde769d7551d6663687511c0c4763eba9a471", "filename": "src/test/compile-fail/hygienic-label-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! foo {\n     () => { break 'x; }"}, {"sha": "78d8fce38d5a67ce19a244da9dd998ab164d1f42", "filename": "src/test/compile-fail/hygienic-label-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! foo {\n     ($e: expr) => { 'x: loop { $e } }"}, {"sha": "439132fa152bbdb3a97a7ddb34d94d44c53ef58d", "filename": "src/test/compile-fail/hygienic-label-3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-3.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! foo {\n     () => { break 'x; }"}, {"sha": "dfda458652704c92924b454e0b1426dcb9cdcaba", "filename": "src/test/compile-fail/hygienic-label-4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fhygienic-label-4.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! foo {\n     ($e: expr) => { 'x: for _ in range(0,1) { $e } }"}, {"sha": "4b6b6c2fe7677069b35d955529aae7ad2437bb14", "filename": "src/test/compile-fail/invalid-crate-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Finvalid-crate-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Finvalid-crate-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finvalid-crate-type.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // regression test for issue 11256\n-#[crate_type=\"foo\"];    //~ ERROR invalid `crate_type` value\n+#![crate_type=\"foo\"]    //~ ERROR invalid `crate_type` value\n \n fn main() {\n     return"}, {"sha": "f79a8fffd922d8b1e83f6613489666cf89e7a4fd", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use unresolved::*; //~ ERROR unresolved import. maybe a missing\n //~^ ERROR failed to resolve import"}, {"sha": "d34fb10e9dd58261a0098a75b8ac188089d1c2c3", "filename": "src/test/compile-fail/issue-2063-resource.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2063-resource.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n // test that autoderef of a type like this does not\n // cause compiler to loop.  Note that no instances"}, {"sha": "b12e6799e6a7945920ad22b8b01cd5d08155f40d", "filename": "src/test/compile-fail/issue-2150.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-2150.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unreachable_code)];\n-#[allow(unused_variable)];\n-#[allow(dead_code)];\n-#[allow(deprecated_owned_vector)];\n+#![deny(unreachable_code)]\n+#![allow(unused_variable)]\n+#![allow(dead_code)]\n+#![allow(deprecated_owned_vector)]\n \n \n fn fail_len(v: Vec<int> ) -> uint {"}, {"sha": "e3b145411baa661fcdd759d8a933e1a47d26eff1", "filename": "src/test/compile-fail/issue-3668.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3668.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct P { child: Option<@P> }\n trait PTrait {"}, {"sha": "d28b2dd9904f3d2a3df5abd7dafbe33fbfcfa0f0", "filename": "src/test/compile-fail/issue-3763.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-3763.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n mod my_mod {\n     pub struct MyStruct {"}, {"sha": "373e7339b693988fd2f18a5e234384929036b654", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n // ensures that 'use foo:*' doesn't import non-public item\n "}, {"sha": "7959078359cf0984a2bef0607cc1392db7037bc4", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n // ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n // module 'foo'\n \n-#[feature(globs)];\n+#![feature(globs)]\n \n use m1::*;\n "}, {"sha": "fedb064d2e5f5705b005e414a3f2c283a0da4460", "filename": "src/test/compile-fail/issue-5060-fail.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5060-fail.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! print_hd_tl (\n     ($field_hd:ident, $($field_tl:ident),+) => ({"}, {"sha": "600b28048b4fba1d24ab53a6a67d66bc289cf60a", "filename": "src/test/compile-fail/issue-6804.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-6804.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n // Matching against NaN should result in a warning\n "}, {"sha": "d62c27edf51da175171816562dacdc1ce22daedd", "filename": "src/test/compile-fail/issue-7061.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7061.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct BarStruct;\n "}, {"sha": "7e8d431bf19209c153bb481d591a064e58bc1256", "filename": "src/test/compile-fail/issue-7246.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7246.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unreachable_code)];\n-#[allow(dead_code)];\n+#![deny(unreachable_code)]\n+#![allow(dead_code)]\n \n use std::ptr;\n pub unsafe fn g() {"}, {"sha": "ca66905688ad9cfd8f4df8755a606e229bae2ddc", "filename": "src/test/compile-fail/issue-7364.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-7364.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::RefCell;\n "}, {"sha": "45b45dbaf5da4edf25cdc495ff0fccca20e714e0", "filename": "src/test/compile-fail/issue-897-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-897-2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unreachable_code)];\n+#![deny(unreachable_code)]\n \n fn g() -> ! { fail!(); }\n fn f() -> ! {"}, {"sha": "d4010346998cfafd7464e5e4655367009d2b1971", "filename": "src/test/compile-fail/kindck-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-copy.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n \n // Test which of the builtin types are considered POD.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::rc::Rc;\n "}, {"sha": "0e1190d2c124e1073b0c09997e1a12d2a9cdaa4b", "filename": "src/test/compile-fail/kindck-destructor-owned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-destructor-owned.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Foo {\n     f: @int,"}, {"sha": "51687fffd1150aece3de8a17722204e5bef73f8e", "filename": "src/test/compile-fail/kindck-nonsendable-1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-nonsendable-1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn foo(_x: @uint) {}\n "}, {"sha": "edbeebe882e51930b1d61808bbeb9a92896cf399", "filename": "src/test/compile-fail/linkage2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flinkage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(linkage)];\n+#![feature(linkage)]\n \n extern {\n     #[linkage = \"extern_weak\"] static foo: i32;"}, {"sha": "11ae2fcf9409a355a6e0b131192b110c9c9ed1f7", "filename": "src/test/compile-fail/linkage3.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flinkage3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flinkage3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flinkage3.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(linkage)];\n+#![feature(linkage)]\n \n extern {\n     #[linkage = \"foo\"] static foo: *i32;"}, {"sha": "46199fa0280f855a79dbfa5620bf0bb83b321b24", "filename": "src/test/compile-fail/lint-allocation.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-allocation.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unnecessary_allocation)];\n+#![deny(unnecessary_allocation)]\n \n fn f(_: &int) {}\n fn g(_: &mut int) {}"}, {"sha": "441a8410700bfeff4a32a3309354bc443cca9d2d", "filename": "src/test/compile-fail/lint-change-warnings.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-change-warnings.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(warnings)];\n-#[allow(dead_code)];\n+#![deny(warnings)]\n+#![allow(dead_code)]\n \n fn main() {\n     while true {} //~ ERROR: infinite"}, {"sha": "e968bd601c572dae5f44a0c5d6c9e7fb4406d174", "filename": "src/test/compile-fail/lint-ctypes-enum.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes-enum.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(ctypes)];\n-#[allow(dead_code)];\n+#![deny(ctypes)]\n+#![allow(dead_code)]\n \n enum Z { }\n enum U { A }"}, {"sha": "352a31cf67b2d230100dc9b210abe0b59453a077", "filename": "src/test/compile-fail/lint-ctypes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-ctypes.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(ctypes)];\n+#![deny(ctypes)]\n \n use std::libc;\n "}, {"sha": "04326403376f867fb8309dbabea900863b906bb3", "filename": "src/test/compile-fail/lint-dead-code-1.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,13 +8,13 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_std];\n-#[allow(unused_variable)];\n-#[allow(non_camel_case_types)];\n-#[allow(visible_private_types)];\n-#[deny(dead_code)];\n+#![no_std]\n+#![allow(unused_variable)]\n+#![allow(non_camel_case_types)]\n+#![allow(visible_private_types)]\n+#![deny(dead_code)]\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n pub use foo2::Bar2;\n mod foo {"}, {"sha": "1563850c64135667a6abaf4d3648f4ac32563d11", "filename": "src/test/compile-fail/lint-dead-code-2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_variable)];\n-#[deny(dead_code)];\n+#![allow(unused_variable)]\n+#![deny(dead_code)]\n \n struct Foo;\n "}, {"sha": "7c8a4c2a22cc2818948a61a6ce43f7924923d513", "filename": "src/test/compile-fail/lint-dead-code-3.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-dead-code-3.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_variable)];\n-#[allow(non_camel_case_types)];\n-#[deny(dead_code)];\n+#![allow(unused_variable)]\n+#![allow(non_camel_case_types)]\n+#![deny(dead_code)]\n \n-#[crate_type=\"lib\"];\n+#![crate_type=\"lib\"]\n \n struct Foo; //~ ERROR: code is never used\n impl Foo {"}, {"sha": "acc916a03910b92e734fdf58e1f07674f6b9bc4e", "filename": "src/test/compile-fail/lint-deprecated-owned-vector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-owned-vector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-deprecated-owned-vector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-deprecated-owned-vector.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(deprecated_owned_vector)];\n+#![deny(deprecated_owned_vector)]\n \n fn main() {\n     ~[1]; //~ ERROR use of deprecated `~[]`"}, {"sha": "abe4d08903dc32d81fe50832d7edb3db44428e14", "filename": "src/test/compile-fail/lint-heap-memory.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-heap-memory.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-#[forbid(heap_memory)];\n-#[allow(dead_code)];\n-#[allow(deprecated_owned_vector)];\n+#![feature(managed_boxes)]\n+#![forbid(heap_memory)]\n+#![allow(dead_code)]\n+#![allow(deprecated_owned_vector)]\n \n struct Foo {\n     x: @int //~ ERROR type uses managed"}, {"sha": "eaef43a90836d992f4783b73d22a320ae453018f", "filename": "src/test/compile-fail/lint-impl-fn.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-impl-fn.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(while_true)];\n-#[allow(dead_code)];\n+#![allow(while_true)]\n+#![allow(dead_code)]\n \n struct A(int);\n "}, {"sha": "d9a79d7597592c286ad66b9a024ab941fd4e019c", "filename": "src/test/compile-fail/lint-managed-heap-memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-managed-heap-memory.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n-#[forbid(managed_heap_memory)];\n+#![feature(managed_boxes)]\n+#![forbid(managed_heap_memory)]\n \n struct Foo {\n     x: @int //~ ERROR type uses managed"}, {"sha": "d422dfc513d26424b420d0d2920b35e10a0609d9", "filename": "src/test/compile-fail/lint-misplaced-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-misplaced-attr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,10 +11,10 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#[deny(attribute_usage)];\n+#![deny(attribute_usage)]\n \n mod a {\n-    #[crate_type = \"bin\"]; //~ ERROR: crate-level attribute\n+    #![crate_type = \"bin\"] //~ ERROR: crate-level attribute\n }\n \n #[crate_type = \"bin\"] fn main() {} //~ ERROR: crate-level attribute"}, {"sha": "1abfbf43e79b407b8dfe11b3680282b15b056bde", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,13 +10,13 @@\n \n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n-#[feature(struct_variant)];\n-#[feature(globs)];\n-#[deny(missing_doc)];\n-#[allow(dead_code)];\n+#![feature(struct_variant)]\n+#![feature(globs)]\n+#![deny(missing_doc)]\n+#![allow(dead_code)]\n \n //! Some garbage docs for the crate here\n-#[doc=\"More garbage\"];\n+#![doc=\"More garbage\"]\n \n struct Foo {\n     a: int,"}, {"sha": "57b051e1beac581a2c98210c8dda076094e868c8", "filename": "src/test/compile-fail/lint-non-camel-case-types.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-camel-case-types.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[forbid(non_camel_case_types)];\n-#[allow(dead_code)];\n+#![forbid(non_camel_case_types)]\n+#![allow(dead_code)]\n \n struct foo { //~ ERROR type `foo` should have a camel case identifier\n     bar: int,"}, {"sha": "6eca7c3ed3d544b556aa2fed2a039886bec173ed", "filename": "src/test/compile-fail/lint-non-uppercase-statics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-non-uppercase-statics.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[forbid(non_uppercase_statics)];\n-#[allow(dead_code)];\n+#![forbid(non_uppercase_statics)]\n+#![allow(dead_code)]\n \n static foo: int = 1; //~ ERROR static constant should have an uppercase identifier\n "}, {"sha": "8b70953146da783ddc8ec4bfb40f7d2723e7f461", "filename": "src/test/compile-fail/lint-obsolete-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-obsolete-attr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,8 +11,8 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#[deny(attribute_usage)];\n-#[allow(dead_code)];\n+#![deny(attribute_usage)]\n+#![allow(dead_code)]\n \n #[abi=\"stdcall\"] extern {} //~ ERROR: obsolete attribute\n "}, {"sha": "859dd127b97202c79c8df1248775908d4d46c3da", "filename": "src/test/compile-fail/lint-owned-heap-memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-owned-heap-memory.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[forbid(owned_heap_memory)];\n+#![forbid(owned_heap_memory)]\n \n struct Foo {\n     x: ~int //~ ERROR type uses owned"}, {"sha": "7006a2837508ddd333e7ad9e016dd69be0181a47", "filename": "src/test/compile-fail/lint-qualification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-qualification.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unnecessary_qualification)];\n+#![deny(unnecessary_qualification)]\n \n mod foo {\n     pub fn bar() {}"}, {"sha": "d3fdd508f4559de165fc4d8e21545368249f42cd", "filename": "src/test/compile-fail/lint-raw-ptr-deriving.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-raw-ptr-deriving.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n-#[allow(dead_code)];\n-#[deny(raw_pointer_deriving)];\n+#![feature(struct_variant)]\n+#![allow(dead_code)]\n+#![deny(raw_pointer_deriving)]\n \n #[deriving(Clone)]\n struct Foo {"}, {"sha": "4ebd9f1cefdb4905084cb0895aecd3196fca646b", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,11 +11,11 @@\n // ignore-fast aux-build\n // aux-build:lint_stability.rs\n \n-#[feature(globs)];\n-#[deny(unstable)];\n-#[deny(deprecated)];\n-#[deny(experimental)];\n-#[allow(dead_code)];\n+#![feature(globs)]\n+#![deny(unstable)]\n+#![deny(deprecated)]\n+#![deny(experimental)]\n+#![allow(dead_code)]\n \n mod cross_crate {\n     extern crate lint_stability;"}, {"sha": "8cca39a7a257e65f4d2fa44dbb65387482733dd3", "filename": "src/test/compile-fail/lint-type-limits.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-limits.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)];\n+#![allow(dead_code)]\n \n // compile-flags: -D type-limits\n fn main() { }"}, {"sha": "e5a5c7dd1c7c26a589bc9cc82ed2b68cfbfb7f1e", "filename": "src/test/compile-fail/lint-type-overflow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-type-overflow.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n //\n \n-#[deny(type_overflow)];\n+#![deny(type_overflow)]\n \n fn test(x: i8) {\n     println!(\"x {}\", x);"}, {"sha": "dbbf91f725dc0f97b1600ecf2cba3470be625383", "filename": "src/test/compile-fail/lint-unknown-attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-attr.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,9 +11,9 @@\n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n \n-#[deny(attribute_usage)];\n+#![deny(attribute_usage)]\n \n-#[mutable_doc]; //~ ERROR: unknown crate attribute\n+#![mutable_doc] //~ ERROR: unknown crate attribute\n \n #[dance] mod a {} //~ ERROR: unknown attribute\n "}, {"sha": "6252e01749bd218a2184820e3e70e85368daa5e7", "filename": "src/test/compile-fail/lint-unknown-feature.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unknown-feature.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unknown_features)];\n+#![deny(unknown_features)]\n \n-#[feature(this_is_not_a_feature)]; //~ ERROR: unknown feature\n+#![feature(this_is_not_a_feature)] //~ ERROR: unknown feature\n \n fn main() {}"}, {"sha": "644c5d9fb3d575dde92cb001ac4b05d9af1bc7de", "filename": "src/test/compile-fail/lint-unnecessary-casts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-casts.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[forbid(unnecessary_typecast)];\n+#![forbid(unnecessary_typecast)]\n \n fn foo_i32(_: i32) {}\n "}, {"sha": "b2abe025794bf728aa6133da685a9feb1c19f381", "filename": "src/test/compile-fail/lint-unnecessary-parens.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unnecessary-parens.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unnecessary_parens)];\n+#![deny(unnecessary_parens)]\n \n fn foo() -> int {\n     return (1); //~ ERROR unnecessary parentheses around `return` value"}, {"sha": "a4c50781a774b7a22a4005c736eb1bb691c8df96", "filename": "src/test/compile-fail/lint-unsafe-block.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unsafe-block.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(unused_unsafe)];\n-#[allow(dead_code)];\n-#[deny(unsafe_block)];\n-#[feature(macro_rules)];\n+#![allow(unused_unsafe)]\n+#![allow(dead_code)]\n+#![deny(unsafe_block)]\n+#![feature(macro_rules)]\n \n unsafe fn allowed() {}\n "}, {"sha": "62ea337656d77522feead4d39ba79844f08aa007", "filename": "src/test/compile-fail/lint-unused-import-tricky-globs.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-globs.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[deny(unused_imports)];\n-#[allow(dead_code)];\n+#![feature(globs)]\n+#![deny(unused_imports)]\n+#![allow(dead_code)]\n \n mod A {\n     pub fn p() {}"}, {"sha": "39e344da115e1cd45aa6ecfff6c22335ebb43fc6", "filename": "src/test/compile-fail/lint-unused-import-tricky-names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-import-tricky-names.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unused_imports)];\n-#[allow(non_camel_case_types)];\n-#[allow(dead_code)];\n+#![deny(unused_imports)]\n+#![allow(non_camel_case_types)]\n+#![allow(dead_code)]\n \n // Regression test for issue #6633\n mod issue6633 {"}, {"sha": "0e89094aace6249506a9eb23a1e7b3cc8d02fdf7", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[deny(unused_imports)];\n-#[allow(dead_code)];\n-#[allow(deprecated_owned_vector)];\n+#![feature(globs)]\n+#![deny(unused_imports)]\n+#![allow(dead_code)]\n+#![allow(deprecated_owned_vector)]\n \n use cal = bar::c::cc;\n "}, {"sha": "84c484a91e2c4f4f78cc7180efff3a956c353a79", "filename": "src/test/compile-fail/lint-unused-mut-self.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-self.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_assignment)];\n-#[allow(unused_variable)];\n-#[allow(dead_code)];\n-#[deny(unused_mut)];\n+#![allow(dead_assignment)]\n+#![allow(unused_variable)]\n+#![allow(dead_code)]\n+#![deny(unused_mut)]\n \n struct Foo;\n impl Foo {"}, {"sha": "b372720467e3f88ccb07e301d6394b8a751beb05", "filename": "src/test/compile-fail/lint-unused-mut-variables.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-mut-variables.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,11 +10,11 @@\n \n // Exercise the unused_mut attribute in some positive and negative cases\n \n-#[allow(dead_assignment)];\n-#[allow(unused_variable)];\n-#[allow(dead_code)];\n-#[allow(deprecated_owned_vector)];\n-#[deny(unused_mut)];\n+#![allow(dead_assignment)]\n+#![allow(unused_variable)]\n+#![allow(dead_code)]\n+#![allow(deprecated_owned_vector)]\n+#![deny(unused_mut)]\n \n \n fn main() {"}, {"sha": "ecea33cbe8efd9f4d7efb9b09bc50620b353069d", "filename": "src/test/compile-fail/lint-unused-unsafe.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-unsafe.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,9 +10,9 @@\n \n // Exercise the unused_unsafe attribute in some positive and negative cases\n \n-#[allow(dead_code)];\n-#[deny(unused_unsafe)];\n-#[allow(deprecated_owned_vector)];\n+#![allow(dead_code)]\n+#![deny(unused_unsafe)]\n+#![allow(deprecated_owned_vector)]\n \n \n mod foo {"}, {"sha": "386b4019485a91cc66a59795371b175bb33cbaae", "filename": "src/test/compile-fail/lint-uppercase-variables.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-uppercase-variables.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(uppercase_variables)];\n+#![deny(uppercase_variables)]\n \n use std::io::File;\n use std::io::IoError;"}, {"sha": "484bb1532d1570e5a9f1f4577eebfc6cb8122115", "filename": "src/test/compile-fail/lint-visible-private-types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-visible-private-types.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,10 +8,10 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(struct_variant)];\n-#[deny(visible_private_types)];\n-#[allow(dead_code)];\n-#[crate_type=\"lib\"];\n+#![feature(struct_variant)]\n+#![deny(visible_private_types)]\n+#![allow(dead_code)]\n+#![crate_type=\"lib\"]\n \n struct Private<T>;\n pub struct Public<T>;"}, {"sha": "cba0a1da7e65709bdf11d7bfa77bbd72bc2a24c9", "filename": "src/test/compile-fail/liveness-dead.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-dead.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[allow(dead_code)];\n-#[deny(dead_assignment)];\n+#![allow(dead_code)]\n+#![deny(dead_assignment)]\n \n fn f1(x: &mut int) {\n     *x = 1; // no error"}, {"sha": "8a6585f8bbc41e2322d5337e4c1493267d1bc633", "filename": "src/test/compile-fail/liveness-return-last-stmt-semi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-return-last-stmt-semi.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,7 +10,7 @@\n //\n // regression test for #8005\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! test ( () => { fn foo() -> int { 1i; } } )\n                                              //~^ ERROR not all control paths return a value"}, {"sha": "ee44872d1220143a7e252409f7ea0614194b98f4", "filename": "src/test/compile-fail/liveness-unused.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fliveness-unused.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,9 +8,9 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[deny(unused_variable)];\n-#[deny(dead_assignment)];\n-#[allow(dead_code, non_camel_case_types)];\n+#![deny(unused_variable)]\n+#![deny(dead_assignment)]\n+#![allow(dead_code, non_camel_case_types)]\n \n fn f1(x: int) {\n     //~^ ERROR unused variable: `x`"}, {"sha": "6f4c450940e0f5b47947b87f138383acd6bd3612", "filename": "src/test/compile-fail/macro-crate-unexported-macro.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unexported-macro.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n // ignore-android\n // ignore-cross-compile #12102\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_crate_test;"}, {"sha": "84c915f267ec26fd78c3ccc59f2f804c37a501fe", "filename": "src/test/compile-fail/macro-crate-unknown-crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-crate-unknown-crate.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate doesnt_exist; //~ ERROR can't find crate"}, {"sha": "43ba2c8a8a5e74dcc019a2d628740ac3116ae773", "filename": "src/test/compile-fail/macro-incomplete-parse.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-incomplete-parse.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! ignored_item {\n     () => {"}, {"sha": "ae804ea7ece409251ad952111d03ca86bf64f791", "filename": "src/test/compile-fail/macro-inner-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-inner-attributes.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! test ( ($nm:ident,\n-                     $a:attr,\n-                     $i:item) => (mod $nm { $a; $i }); )\n+                     #[$a:meta],\n+                     $i:item) => (mod $nm { #![$a] $i }); )\n \n test!(a,\n       #[cfg(qux)],"}, {"sha": "e41f1bd369a884bde84f45219dcfb45262eb0f6e", "filename": "src/test/compile-fail/macro-outer-attributes.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacro-outer-attributes.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,11 +8,11 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(macro_rules)];\n+#![feature(macro_rules)]\n \n macro_rules! test ( ($nm:ident,\n-                     $a:attr,\n-                     $i:item) => (mod $nm { $a $i }); )\n+                     #[$a:meta],\n+                     $i:item) => (mod $nm { #[$a] $i }); )\n \n test!(a,\n       #[cfg(qux)],"}, {"sha": "4cfa5b8926c2d35e1576ae89503963f4dd998203", "filename": "src/test/compile-fail/macros-nonfatal-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,8 +11,8 @@\n // test that errors in a (selection) of macros don't kill compilation\n // immediately, so that we get more errors listed at a time.\n \n-#[feature(asm)];\n-#[feature(trace_macros)];\n+#![feature(asm)]\n+#![feature(trace_macros)]\n \n #[deriving(Default, //~ ERROR\n            Rand, //~ ERROR"}, {"sha": "f77ea2db8c02b4ebeb3b95190e04ac7ec35c84bc", "filename": "src/test/compile-fail/match-static-const-lc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmatch-static-const-lc.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -10,8 +10,8 @@\n \n // Issue #7526: lowercase static constants in patterns look like bindings\n \n-#[allow(dead_code)];\n-#[deny(non_uppercase_pattern_statics)];\n+#![allow(dead_code)]\n+#![deny(non_uppercase_pattern_statics)]\n \n pub static a : int = 97;\n "}, {"sha": "710d9d1ca200ed2e701920fcf7c687601a1ebd6b", "filename": "src/test/compile-fail/moves-based-on-type-exprs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmoves-based-on-type-exprs.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // Tests that references to move-by-default values trigger moves when\n // they occur as part of various kinds of expressions.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n struct Foo<A> { f: A }\n fn guard(_s: ~str) -> bool {fail!()}"}, {"sha": "fecc597b8fd2fff6ec0fd2acbdb3e647ee1bd1be", "filename": "src/test/compile-fail/no-implicit-prelude.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-implicit-prelude.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[no_implicit_prelude];\n+#![no_implicit_prelude]\n \n // Test that things from the prelude aren't in scope. Use many of them\n // so that renaming some things won't magically make this test fail"}, {"sha": "825a8fc604c6ffff8e95cb37188ccad88fb83143", "filename": "src/test/compile-fail/no-send-res-ports.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-send-res-ports.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::task;\n "}, {"sha": "bef909917d22a39c2f79fc1f546f3b08f780af06", "filename": "src/test/compile-fail/no_crate_type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno_crate_type.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n // regresion test for issue 11256\n-#[crate_type];  //~ ERROR `crate_type` requires a value\n+#![crate_type]  //~ ERROR `crate_type` requires a value\n \n fn main() {\n     return"}, {"sha": "fd0da8ba9cf38ae5a02a90ac602a1b4dd56b1c37", "filename": "src/test/compile-fail/occurs-check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Foccurs-check.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n fn main() {\n     let f; //~ ERROR cyclic type of infinite size"}, {"sha": "9d0de6b37538e290fa7d6636dfad722d4a5d8011", "filename": "src/test/compile-fail/once-cant-call-twice-on-heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-heap.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-#[feature(once_fns)];\n+#![feature(once_fns)]\n extern crate sync;\n use sync::Arc;\n "}, {"sha": "45cfa8836963937522cae6613a8ed02accf75f6a", "filename": "src/test/compile-fail/once-cant-call-twice-on-stack.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-cant-call-twice-on-stack.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,7 +11,7 @@\n // Testing guarantees provided by once functions.\n // This program would segfault if it were legal.\n \n-#[feature(once_fns)];\n+#![feature(once_fns)]\n extern crate sync;\n use sync::Arc;\n "}, {"sha": "7594deda3b2d854a70442450f0ce2b475e6b4207", "filename": "src/test/compile-fail/once-fn-subtyping.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fonce-fn-subtyping.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(once_fns)];\n+#![feature(once_fns)]\n fn main() {\n     let f: once || = ||();\n     let g: || = f;  //~ ERROR mismatched types"}, {"sha": "9bfc7fc34bb5b25408a99de50822b53b25afdb89", "filename": "src/test/compile-fail/phase-syntax-doesnt-resolve.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fphase-syntax-doesnt-resolve.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -13,7 +13,7 @@\n // ignore-android\n // ignore-cross-compile #12102\n \n-#[feature(phase)];\n+#![feature(phase)]\n \n #[phase(syntax)]\n extern crate macro_crate_test;"}, {"sha": "0589d58a4c25d7b03a72bcc3492caf1d4d788157", "filename": "src/test/compile-fail/pinned-deep-copy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpinned-deep-copy.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(managed_boxes)];\n+#![feature(managed_boxes)]\n \n use std::cell::Cell;\n "}, {"sha": "cb11a50055f7dbfa5f9ddeb0ad71690a0e3c9c64", "filename": "src/test/compile-fail/privacy-ns1.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,9 +11,9 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#[feature(globs)];\n-#[allow(dead_code)];\n-#[allow(unused_imports)];\n+#![feature(globs)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n \n // public type, private value\n pub mod foo1 {"}, {"sha": "c75b12165c090040864ff39d1cc248ddaa685834", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -11,9 +11,9 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#[feature(globs)];\n-#[allow(dead_code)];\n-#[allow(unused_imports)];\n+#![feature(globs)]\n+#![allow(dead_code)]\n+#![allow(unused_imports)]\n \n // public type, private value\n pub mod foo1 {"}, {"sha": "0aba36eebee8a7804d78fe71330d38d5603badb0", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[no_std]; // makes debugging this test *a lot* easier (during resolve)\n+#![feature(globs)]\n+#![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n mod bar {\n     // shouln't bring in too much"}, {"sha": "df4e401dfa53fd0d7d7989c3cc16f14a7481a75e", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[no_std]; // makes debugging this test *a lot* easier (during resolve)\n+#![feature(globs)]\n+#![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that globs don't leak in regular `use` statements.\n "}, {"sha": "f8d8ba2ab1aa389b26513dce91102b72f9c7cba7", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[no_std]; // makes debugging this test *a lot* easier (during resolve)\n+#![feature(globs)]\n+#![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private\n // when  they're used."}, {"sha": "18a94cb86c84781554208feef04e6d92781aac2b", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=ff733c767a2ac48e5f94a37bc8ed3d2f1bc1141c", "patch": "@@ -8,8 +8,8 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#[feature(globs)];\n-#[no_std]; // makes debugging this test *a lot* easier (during resolve)\n+#![feature(globs)]\n+#![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private\n // when  they're used."}]}