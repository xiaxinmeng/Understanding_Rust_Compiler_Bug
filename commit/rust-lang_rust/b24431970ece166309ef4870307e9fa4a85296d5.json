{"sha": "b24431970ece166309ef4870307e9fa4a85296d5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDQzMTk3MGVjZTE2NjMwOWVmNDg3MDMwN2U5ZmE0YTg1Mjk2ZDU=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:42:00Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-06T02:42:00Z"}, "message": "rollup merge of #20568: huonw/ungate-AT-globs\n\nThese aren't in their final form, but are all aiming to be part of 1.0, so at the very least encouraging usage now to find the bugs is nice.\n\nAlso, the widespread roll-out of associated types in the standard library indicates they're getting good, and it's lame to have to activate a feature in essentially every crate ever.", "tree": {"sha": "bedba778d92b8df9eafbb7376943b30bcbe59a71", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bedba778d92b8df9eafbb7376943b30bcbe59a71"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b24431970ece166309ef4870307e9fa4a85296d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b24431970ece166309ef4870307e9fa4a85296d5", "html_url": "https://github.com/rust-lang/rust/commit/b24431970ece166309ef4870307e9fa4a85296d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b24431970ece166309ef4870307e9fa4a85296d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cda6acb2f10e159fc6d3cb1112f2011f7bcdb206", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda6acb2f10e159fc6d3cb1112f2011f7bcdb206", "html_url": "https://github.com/rust-lang/rust/commit/cda6acb2f10e159fc6d3cb1112f2011f7bcdb206"}, {"sha": "3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e9d5938cc4030de2e8c8e140633cc4d7d58733c", "html_url": "https://github.com/rust-lang/rust/commit/3e9d5938cc4030de2e8c8e140633cc4d7d58733c"}], "stats": {"total": 446, "additions": 37, "deletions": 409}, "files": [{"sha": "b029b4757c1404aa9596fbc5d47ce26e19701f84", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -272,7 +272,6 @@ pub fn phase_2_configure_and_expand(sess: &Session,\n             }\n             let cfg = syntax::ext::expand::ExpansionConfig {\n                 crate_name: crate_name.to_string(),\n-                deriving_hash_type_parameter: sess.features.borrow().default_type_params,\n                 enable_quotes: sess.features.borrow().quote,\n                 recursion_limit: sess.recursion_limit.get(),\n             };"}, {"sha": "8a9334be985f70b04d177ec6402b734bd4b066e3", "filename": "src/librustc_llvm/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_llvm%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_llvm%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_llvm%2Flib.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -24,6 +24,7 @@\n #![feature(globs)]\n #![feature(link_args)]\n #![feature(unboxed_closures)]\n+#![feature(old_orphan_check)]\n \n extern crate libc;\n "}, {"sha": "adbcf8c2e8e4bd2ec8d939863bb1c26a2b608ab9", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -19,6 +19,7 @@\n #![feature(globs, phase, slicing_syntax)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(associated_types)]\n+#![feature(old_orphan_check)]\n \n #[phase(plugin, link)] extern crate log;\n #[phase(plugin, link)] extern crate syntax;"}, {"sha": "183b8c5c830ef0f29f71ab43c683120f755190cb", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -361,14 +361,6 @@ fn create_substs_for_ast_path<'tcx>(\n                                            supplied_ty_param_count)[]);\n     }\n \n-    if supplied_ty_param_count > required_ty_param_count\n-        && !this.tcx().sess.features.borrow().default_type_params {\n-        span_err!(this.tcx().sess, span, E0108,\n-            \"default type parameters are experimental and possibly buggy\");\n-        span_help!(this.tcx().sess, span,\n-            \"add #![feature(default_type_params)] to the crate attributes to enable\");\n-    }\n-\n     let mut substs = Substs::new_type(types, regions);\n \n     match self_ty {"}, {"sha": "844bd80d1610a4674e91f01293ab5881dd5dade1", "filename": "src/libsyntax/ext/deriving/hash.rs", "status": "modified", "additions": 7, "deletions": 13, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fhash.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -25,20 +25,14 @@ pub fn expand_deriving_hash<F>(cx: &mut ExtCtxt,\n     F: FnOnce(P<Item>),\n {\n \n-    let (path, generics, args) = if cx.ecfg.deriving_hash_type_parameter {\n-        (Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n-                    vec!(box Literal(Path::new_local(\"__S\"))), true),\n-         LifetimeBounds {\n-             lifetimes: Vec::new(),\n-             bounds: vec!((\"__S\",\n-                           vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n-         },\n-         Path::new_local(\"__S\"))\n-    } else {\n-        (Path::new(vec!(\"std\", \"hash\", \"Hash\")),\n-         LifetimeBounds::empty(),\n-         Path::new(vec!(\"std\", \"hash\", \"sip\", \"SipState\")))\n+    let path = Path::new_(vec!(\"std\", \"hash\", \"Hash\"), None,\n+                          vec!(box Literal(Path::new_local(\"__S\"))), true);\n+    let generics = LifetimeBounds {\n+        lifetimes: Vec::new(),\n+        bounds: vec!((\"__S\",\n+                      vec!(Path::new(vec!(\"std\", \"hash\", \"Writer\"))))),\n     };\n+    let args = Path::new_local(\"__S\");\n     let inline = cx.meta_word(span, InternedString::new(\"inline\"));\n     let attrs = vec!(cx.attribute(span, inline));\n     let hash_trait_def = TraitDef {"}, {"sha": "b3e839b4fb648710ec4defcfd311779decccc2ca", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1161,7 +1161,6 @@ fn new_span(cx: &ExtCtxt, sp: Span) -> Span {\n \n pub struct ExpansionConfig {\n     pub crate_name: String,\n-    pub deriving_hash_type_parameter: bool,\n     pub enable_quotes: bool,\n     pub recursion_limit: uint,\n }\n@@ -1170,7 +1169,6 @@ impl ExpansionConfig {\n     pub fn default(crate_name: String) -> ExpansionConfig {\n         ExpansionConfig {\n             crate_name: crate_name,\n-            deriving_hash_type_parameter: false,\n             enable_quotes: false,\n             recursion_limit: 64,\n         }"}, {"sha": "2802ad3c3e3ddd1bb1dcc12890b8d518b68c3692", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 4, "deletions": 50, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -36,7 +36,7 @@ use std::ascii::AsciiExt;\n \n // if you change this list without updating src/doc/reference.md, @cmr will be sad\n static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n-    (\"globs\", Active),\n+    (\"globs\", Accepted),\n     (\"macro_rules\", Active),\n     (\"struct_variant\", Accepted),\n     (\"asm\", Active),\n@@ -54,7 +54,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"lang_items\", Active),\n \n     (\"simd\", Active),\n-    (\"default_type_params\", Active),\n+    (\"default_type_params\", Accepted),\n     (\"quote\", Active),\n     (\"link_llvm_intrinsics\", Active),\n     (\"linkage\", Active),\n@@ -67,7 +67,7 @@ static KNOWN_FEATURES: &'static [(&'static str, Status)] = &[\n     (\"import_shadowing\", Active),\n     (\"advanced_slice_patterns\", Active),\n     (\"tuple_indexing\", Accepted),\n-    (\"associated_types\", Active),\n+    (\"associated_types\", Accepted),\n     (\"visible_private_types\", Active),\n     (\"slicing_syntax\", Active),\n \n@@ -112,7 +112,6 @@ enum Status {\n /// A set of features to be used by later passes.\n #[derive(Copy)]\n pub struct Features {\n-    pub default_type_params: bool,\n     pub unboxed_closures: bool,\n     pub rustc_diagnostic_macros: bool,\n     pub import_shadowing: bool,\n@@ -125,7 +124,6 @@ pub struct Features {\n impl Features {\n     pub fn new() -> Features {\n         Features {\n-            default_type_params: false,\n             unboxed_closures: false,\n             rustc_diagnostic_macros: false,\n             import_shadowing: false,\n@@ -232,13 +230,7 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n \n     fn visit_view_item(&mut self, i: &ast::ViewItem) {\n         match i.node {\n-            ast::ViewItemUse(ref path) => {\n-                if let ast::ViewPathGlob(..) = path.node {\n-                    self.gate_feature(\"globs\", path.span,\n-                                      \"glob import statements are \\\n-                                       experimental and possibly buggy\");\n-                }\n-            }\n+            ast::ViewItemUse(..) => {}\n             ast::ViewItemExternCrate(..) => {\n                 for attr in i.attrs.iter() {\n                     if attr.name().get() == \"phase\"{\n@@ -313,18 +305,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n                                        many unsafe patterns and may be \\\n                                        removed in the future\");\n                 }\n-\n-                for item in items.iter() {\n-                    match *item {\n-                        ast::MethodImplItem(_) => {}\n-                        ast::TypeImplItem(ref typedef) => {\n-                            self.gate_feature(\"associated_types\",\n-                                              typedef.span,\n-                                              \"associated types are \\\n-                                               experimental\")\n-                        }\n-                    }\n-                }\n             }\n \n             _ => {}\n@@ -333,17 +313,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_item(self, i);\n     }\n \n-    fn visit_trait_item(&mut self, trait_item: &ast::TraitItem) {\n-        match *trait_item {\n-            ast::RequiredMethod(_) | ast::ProvidedMethod(_) => {}\n-            ast::TypeTraitItem(ref ti) => {\n-                self.gate_feature(\"associated_types\",\n-                                  ti.ty_param.span,\n-                                  \"associated types are experimental\")\n-            }\n-        }\n-    }\n-\n     fn visit_foreign_item(&mut self, i: &ast::ForeignItem) {\n         if attr::contains_name(i.attrs[], \"linkage\") {\n             self.gate_feature(\"linkage\", i.span,\n@@ -379,20 +348,6 @@ impl<'a, 'v> Visitor<'v> for PostExpansionVisitor<'a> {\n         visit::walk_expr(self, e);\n     }\n \n-    fn visit_generics(&mut self, generics: &ast::Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            match type_parameter.default {\n-                Some(ref ty) => {\n-                    self.gate_feature(\"default_type_params\", ty.span,\n-                                      \"default type parameters are \\\n-                                       experimental and possibly buggy\");\n-                }\n-                None => {}\n-            }\n-        }\n-        visit::walk_generics(self, generics);\n-    }\n-\n     fn visit_attribute(&mut self, attr: &ast::Attribute) {\n         if attr::contains_name(slice::ref_slice(attr), \"lang\") {\n             self.gate_feature(\"lang_items\",\n@@ -498,7 +453,6 @@ fn check_crate_inner<F>(cm: &CodeMap, span_handler: &SpanHandler, krate: &ast::C\n     check(&mut cx, krate);\n \n     (Features {\n-        default_type_params: cx.has_feature(\"default_type_params\"),\n         unboxed_closures: cx.has_feature(\"unboxed_closures\"),\n         rustc_diagnostic_macros: cx.has_feature(\"rustc_diagnostic_macros\"),\n         import_shadowing: cx.has_feature(\"import_shadowing\"),"}, {"sha": "44fbcf2150a4bf9050ad727622351f4806cd10d4", "filename": "src/test/auxiliary/associated-types-cc-lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fassociated-types-cc-lib.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -12,7 +12,6 @@\n // cross-crate scenario.\n \n #![crate_type=\"lib\"]\n-#![feature(associated_types)]\n \n pub trait Bar {\n     type T;"}, {"sha": "d12f716decf9925dfe4e53cb1e58f034dab283f8", "filename": "src/test/auxiliary/default_type_params_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fdefault_type_params_xc.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n pub struct Heap;\n \n pub struct FakeHeap;"}, {"sha": "c3f7f2d1aa1666ede0d3c29d0e33584c5cbc7f46", "filename": "src/test/auxiliary/issue-16643.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue-16643.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue-16643.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types)]\n \n pub struct TreeBuilder<H>;\n "}, {"sha": "7a378b06df9e175ceac52066671a93b94ce8825e", "filename": "src/test/auxiliary/issue_20389.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue_20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_20389.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n pub trait T {\n     type C;\n }"}, {"sha": "8a212f6e5a9c5050b055fa29cd6fd0cd9e87f992", "filename": "src/test/auxiliary/issue_2316_b.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fissue_2316_b.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![allow(unused_imports)]\n-#![feature(globs)]\n \n extern crate issue_2316_a;\n "}, {"sha": "39c4e83c4b9dae3f2ac57aa24a419872a67c342a", "filename": "src/test/auxiliary/macro_crate_test.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fmacro_crate_test.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,7 @@\n \n // force-host\n \n-#![feature(globs, plugin_registrar, macro_rules, quote)]\n+#![feature(plugin_registrar, macro_rules, quote)]\n \n extern crate syntax;\n extern crate rustc;"}, {"sha": "7412c17fd45b28cf3b32854f39f94866ff241bcd", "filename": "src/test/auxiliary/namespaced_enum_emulate_flat.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fnamespaced_enum_emulate_flat.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs)]\n \n pub use Foo::*;\n \n@@ -34,5 +33,3 @@ pub mod nest {\n         pub fn foo() {}\n     }\n }\n-\n-"}, {"sha": "caa9bbe5736e4adb55d0c7620dfe996b0feef5dc", "filename": "src/test/auxiliary/overloaded_autoderef_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Foverloaded_autoderef_xc.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {"}, {"sha": "5ad1d244c926d378875b8a1b2e27bc38bcffd8ea", "filename": "src/test/auxiliary/syntax-extension-with-dll-deps-2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fsyntax-extension-with-dll-deps-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,7 @@\n // force-host\n \n #![crate_type = \"dylib\"]\n-#![feature(plugin_registrar, quote, globs)]\n+#![feature(plugin_registrar, quote)]\n \n extern crate \"syntax-extension-with-dll-deps-1\" as other;\n extern crate syntax;"}, {"sha": "cbd2ac69c789415114f21ea2408fb8eae84d8ac8", "filename": "src/test/auxiliary/trait_inheritance_overloading_xc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Ftrait_inheritance_overloading_xc.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n "}, {"sha": "9128930651f25ec6fd77ea6a1a7821ca214ba09b", "filename": "src/test/bench/shootout-fasta.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-fasta.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-fasta.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -38,7 +38,7 @@\n // ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n // OF THE POSSIBILITY OF SUCH DAMAGE.\n \n-#![feature(associated_types, slicing_syntax)]\n+#![feature(slicing_syntax)]\n \n use std::cmp::min;\n use std::io::{BufferedWriter, File};"}, {"sha": "28d7488c9bf8f837f3458d0d2f0d9b0d180a0c58", "filename": "src/test/bench/shootout-k-nucleotide.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(associated_types, slicing_syntax)]\n+#![feature(slicing_syntax)]\n \n use std::ascii::OwnedAsciiExt;\n use std::iter::repeat;"}, {"sha": "ca3d10afa5d47e38ee02e001c62f916844cece64", "filename": "src/test/bench/shootout-meteor.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-meteor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-meteor.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -40,8 +40,6 @@\n \n // no-pretty-expanded FIXME #15189\n \n-#![feature(associated_types)]\n-\n use std::iter::repeat;\n use std::sync::Arc;\n use std::sync::mpsc::channel;"}, {"sha": "77bae87c7dd219e01d674909604b5be9db8c9c68", "filename": "src/test/bench/shootout-reverse-complement.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-reverse-complement.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -40,7 +40,7 @@\n \n // ignore-android see #10393 #13206\n \n-#![feature(associated_types, slicing_syntax, unboxed_closures)]\n+#![feature(slicing_syntax, unboxed_closures)]\n \n extern crate libc;\n "}, {"sha": "f67f65ec2ef93a4bd05ba744aa014a5f8e455d3c", "filename": "src/test/compile-fail/associated-types-ICE-when-projecting-out-of-err.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-ICE-when-projecting-out-of-err.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -12,7 +12,7 @@\n // just propagate the error.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types, default_type_params, lang_items)]\n+#![feature(lang_items)]\n #![no_std]\n \n #[lang=\"sized\"]"}, {"sha": "918826bb390cbe8320a658faa63fb01cc84bfc9d", "filename": "src/test/compile-fail/associated-types-bound-failure.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-bound-failure.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait ToInt {\n     fn to_int(&self) -> int;\n }"}, {"sha": "58dbb9863254afd1419252f02b58943a571a4be3", "filename": "src/test/compile-fail/associated-types-eq-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check that unsupported syntax\n // does not ICE.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "e298d05d11dad1baa4e49763b64ed886d4102f98", "filename": "src/test/compile-fail/associated-types-eq-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check we get an error when an\n // equality constraint is used in a qualified path.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "0f18a84cd1ae317186030e7b9639379d31fe4bd8", "filename": "src/test/compile-fail/associated-types-eq-3.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-3.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test equality constraints on associated types. Check we get type errors\n // where we should.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "ef56fdeb051835ce3965e9d062c973811cddf85d", "filename": "src/test/compile-fail/associated-types-eq-expr-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-expr-path.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n     fn bar() -> int;"}, {"sha": "2532977b1ca24c021f87535c3d93736838d9ea12", "filename": "src/test/compile-fail/associated-types-eq-hr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-eq-hr.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Check testing of equality constraints in a higher-ranked context.\n \n-#![feature(associated_types)]\n-\n pub trait TheTrait<T> {\n     type A;\n "}, {"sha": "9c173515793f44f84c47038fb8a51f0de08e8aa6", "filename": "src/test/compile-fail/associated-types-for-unimpl-trait.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-for-unimpl-trait.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -22,4 +20,3 @@ trait Other {\n \n fn main() {\n }\n-"}, {"sha": "3999e9cbe753d1d90ab8294ada23d1d1be274f6a", "filename": "src/test/compile-fail/associated-types-in-ambiguous-context.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-in-ambiguous-context.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -26,4 +24,3 @@ trait Grab {\n \n fn main() {\n }\n-"}, {"sha": "371f97e867a2976b9a149cff2917c348d79bc868", "filename": "src/test/compile-fail/associated-types-incomplete-object.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-incomplete-object.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Check that the user gets an errror if they omit a binding from an\n // object type.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     type B;"}, {"sha": "a00aa8364bde2adeed76ab24a99771fd61a49e2c", "filename": "src/test/compile-fail/associated-types-issue-20346.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-issue-20346.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that we reliably check the value of the associated type.\n \n #![crate_type = \"lib\"]\n-#![feature(associated_types)]\n #![no_implicit_prelude]\n \n use std::option::Option::{self, None, Some};"}, {"sha": "98f2355f9be1a40e109ffa72eeb4d7694876c071", "filename": "src/test/compile-fail/associated-types-no-suitable-bound.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-bound.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -26,4 +24,3 @@ impl Struct {\n \n fn main() {\n }\n-"}, {"sha": "a3f2850b29464589d86e4c28f38112be3065f0f2", "filename": "src/test/compile-fail/associated-types-no-suitable-supertrait.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-no-suitable-supertrait.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n // Check that we get an error when you use `<Self as Get>::Value` in\n // the trait definition but `Self` does not, in fact, implement `Get`.\n "}, {"sha": "ab061ca4d8da62fcec0bcf48dccc22e5906168bd", "filename": "src/test/compile-fail/associated-types-path-1.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test that we have one and only one associated type per ref.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n }\n@@ -23,4 +21,3 @@ pub fn f1<T>(a: T, x: T::A) {} //~ERROR associated type `A` not found\n pub fn f2<T: Foo + Bar>(a: T, x: T::A) {} //~ERROR ambiguous associated type `A`\n \n pub fn main() {}\n-"}, {"sha": "ef85fc22fe7d442808835d106899d4d229ff0fe2", "filename": "src/test/compile-fail/associated-types-path-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-path-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test type checking of uses of associated types via sugary paths.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n }"}, {"sha": "c5245840c4285a34404cc83b348801b94640aaeb", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-explicit.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-explicit.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test you can't use a higher-ranked trait bound inside of a qualified\n // path (just won't parse).\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "1f1ab4ca4b6d86d6e8870de4c9eb75492d79238e", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn-body.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn-body.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked\n // trait-bound in the context of a function body.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "0920bfab32b97f20ad9267f91d5b8d1acf6a4496", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-fn.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-fn.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a function signature.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "0acb0f4853bc201b5da3d8ac434494cd99a9e841", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-struct.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-struct.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a struct definition.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "21e92c53058d66b241aac2425cf8a31299571377", "filename": "src/test/compile-fail/associated-types-project-from-hrtb-in-trait-method.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-project-from-hrtb-in-trait-method.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Check projection of an associated type out of a higher-ranked trait-bound\n // in the context of a method definition in a trait.\n \n-#![feature(associated_types)]\n-\n pub trait Foo<T> {\n     type A;\n "}, {"sha": "968634669446a2cf0816fa0c082a64963c998fcd", "filename": "src/test/compile-fail/associated-types-unconstrained.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unconstrained.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Check that an associated type cannot be bound in an expression path.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n     fn bar() -> int;"}, {"sha": "5ae2f65fb2e47746c70da215771e79b1e9775298", "filename": "src/test/compile-fail/associated-types-unsized.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fassociated-types-unsized.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Sized? Value;\n     fn get(&self) -> <Self as Get>::Value;\n@@ -21,4 +19,3 @@ fn foo<T:Get>(t: T) {\n \n fn main() {\n }\n-"}, {"sha": "c525a67c7e9f887a3bc1f8aca2e06c8050a614e1", "filename": "src/test/compile-fail/binop-consume-args.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-consume-args.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test that binary operators consume their arguments\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops::{Add, Sub, Mul, Div, Rem, BitAnd, BitXor, BitOr, Shl, Shr};\n \n fn add<A: Add<B, Output=()>, B>(lhs: A, rhs: B) {"}, {"sha": "ffc38cc0a6005557eb0f2c17214fb03005848aae", "filename": "src/test/compile-fail/binop-move-semantics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbinop-move-semantics.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test that move restrictions are enforced on overloaded binary operations\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops::Add;\n \n fn double_move<T: Add<Output=()>>(x: T) {"}, {"sha": "66bcfc23808354d98635c3c004b9740bedc04ebe", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref-mut.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {"}, {"sha": "abab9e57ffe34e7c181b674070c6598859e8a3a5", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-auto-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-auto-deref.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Rc<T> {"}, {"sha": "dda7e4d10474b48838a575d1f33f2a3ed9282550", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref-mut.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when DerefMut\n // is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n struct Own<T> {"}, {"sha": "001a5232b127fe05fb8d8c4366071806809d1166", "filename": "src/test/compile-fail/borrowck-borrow-overloaded-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-borrow-overloaded-deref.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test how overloaded deref interacts with borrows when only\n // Deref and not DerefMut is implemented.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Rc<T> {"}, {"sha": "924d70e9f46c6c880ace78b9d48ec97cb8444516", "filename": "src/test/compile-fail/borrowck-loan-in-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-in-overloaded-op.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Add;\n \n #[derive(Clone)]"}, {"sha": "5aa2deb44f192b23f8dbf6851ad7f7f42982d1c7", "filename": "src/test/compile-fail/borrowck-loan-rcvr-overloaded-op.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-loan-rcvr-overloaded-op.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops::Add;\n \n #[derive(Copy)]"}, {"sha": "53fb935755cf05e66010a12f45d7c1e9d86086f2", "filename": "src/test/compile-fail/borrowck-overloaded-index-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct MyVec<T> {"}, {"sha": "416e67dac0ced8f8e2c1383bc663957c284b5b8f", "filename": "src/test/compile-fail/borrowck-overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index-autoderef.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that we still see borrowck errors of various kinds when using\n // indexing and autoderef in combination.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -95,5 +93,3 @@ fn test9(mut f: Box<Bar>, g: Bar, s: String) {\n \n fn main() {\n }\n-\n-"}, {"sha": "80b68dbf519eefb62325a0f1383778e1a4d2cb9c", "filename": "src/test/compile-fail/borrowck-overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck-overloaded-index.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -70,5 +68,3 @@ fn main() {\n     s[2] = 20;\n     //~^ ERROR cannot assign to immutable dereference (dereference is implicit, due to indexing)\n }\n-\n-"}, {"sha": "e297ecaac233e49da769b1e22cde3f875ce57f6d", "filename": "src/test/compile-fail/dst-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdst-index.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // can't be used as rvalues\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n use std::fmt::Show;\n "}, {"sha": "a8b1911426c42dbeb498adb12120e6cdcfacceff", "filename": "src/test/compile-fail/generic-impl-less-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-less-params-with-defaults.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Foo<A, B, C = (A, B)>;\n \n impl<A, B, C = (A, B)> Foo<A, B, C> {"}, {"sha": "696235333a123004cbf946184d1ece2bda559a9c", "filename": "src/test/compile-fail/generic-impl-more-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-impl-more-params-with-defaults.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "0cfb05b9332a4ae5d5481d9baa7ae2183fc736cb", "filename": "src/test/compile-fail/generic-non-trailing-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-non-trailing-defaults.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<A = Heap, T>; //~ ERROR type parameters with a default must be trailing"}, {"sha": "f25d8f99b8d5449d45dcfa1c5734662a212ed92c", "filename": "src/test/compile-fail/generic-type-less-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-less-params-with-defaults.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "ee3e1818779f355dae149578bc16f234c39bbd79", "filename": "src/test/compile-fail/generic-type-more-params-with-defaults.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-more-params-with-defaults.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Heap;\n \n struct Vec<T, A = Heap>;"}, {"sha": "eda1b014fa7a4a54dc01eec1cdfea22c687f7174", "filename": "src/test/compile-fail/generic-type-params-forward-mention.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-forward-mention.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n // Ensure that we get an error and not an ICE for this problematic case.\n struct Foo<T = Option<U>, U = bool>;\n //~^ ERROR type parameters with a default cannot use forward declared identifiers"}, {"sha": "5bdee543d738de77c87f5226a46b09855f41e62d", "filename": "src/test/compile-fail/generic-type-params-name-repr.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fgeneric-type-params-name-repr.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct A;\n struct B;\n struct C;"}, {"sha": "d8258a72ce35ba801eb82dac21370484110081c5", "filename": "src/test/compile-fail/glob-resolve1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fglob-resolve1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Make sure that globs only bring in public things.\n \n-#![feature(globs)]\n-\n use bar::*;\n \n mod bar {"}, {"sha": "21aa811ea718869f6350e1686e6565936f66c318", "filename": "src/test/compile-fail/import-glob-0.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-0.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: unresolved name\n \n-#![feature(globs)]\n-\n use module_of_many_things::*;\n \n mod module_of_many_things {"}, {"sha": "fda7b190d72b4ff8b1c0eb91438917ff1800f6ff", "filename": "src/test/compile-fail/import-glob-circular.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-circular.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: unresolved\n \n-#![feature(globs)]\n-\n mod circ1 {\n     pub use circ2::f2;\n     pub fn f1() { println!(\"f1\"); }"}, {"sha": "eac5a98140f8903b11e146153794e9adff603cbc", "filename": "src/test/compile-fail/import-shadow-1.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::*;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "8b0809fd55a8a0e3188805a51f2b69f270ed6652", "filename": "src/test/compile-fail/import-shadow-2.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "cef481af6ba5f319310996e01056878c4753c5f2", "filename": "src/test/compile-fail/import-shadow-3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-3.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::Baz;\n use bar::*; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "919eea0e04601f9e3be3f6d9b5ff7227b21061a2", "filename": "src/test/compile-fail/import-shadow-4.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-4.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::*;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "df17b7f0a2057b69fe259b752c5dff3d68fe1ea6", "filename": "src/test/compile-fail/import-shadow-5.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-5.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::Baz;\n use bar::Baz; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "94269043b02052b75a5e9e3bfa3fab87edd35ac5", "filename": "src/test/compile-fail/import-shadow-6.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-6.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use qux::*;\n use foo::*; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "b3bac380710cda4ebed6656fd5490692cabbbc2f", "filename": "src/test/compile-fail/import-shadow-7.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-shadow-7.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that import shadowing using globs causes errors\n \n #![no_implicit_prelude]\n-#![feature(globs)]\n \n use foo::*;\n use qux::*; //~ERROR a type named `Baz` has already been imported in this module"}, {"sha": "f0b9e796ae62dd62b3f2b7ce01c17b6fe7fc93f7", "filename": "src/test/compile-fail/infinite-autoderef.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Finfinite-autoderef.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // error-pattern: reached the recursion limit while auto-dereferencing\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Foo;"}, {"sha": "f2d858391cea2ae5b10f0d298ec7318e5ef92ba1", "filename": "src/test/compile-fail/issue-1697.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-1697.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Testing that we don't fail abnormally after hitting the errors\n \n-#![feature(globs)]\n-\n use unresolved::*; //~ ERROR unresolved import `unresolved::*`. Maybe a missing `extern crate unres\n \n fn main() {}"}, {"sha": "37bb1cb1911e5a9fd3fab55154cf285a4d0cdfcd", "filename": "src/test/compile-fail/issue-18389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18389.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n #![feature(unboxed_closures)]\n-#![feature(associated_types)]\n \n use std::any::Any;\n use std::intrinsics::TypeId;"}, {"sha": "0d1a1f16c2c932d34ea64707065193248aac1b05", "filename": "src/test/compile-fail/issue-18566.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18566.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct MyPtr<'a>(&'a mut uint);"}, {"sha": "95782630efc82e622f19cc7c126f8581d7dfa7d9", "filename": "src/test/compile-fail/issue-18611.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18611.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n fn add_state(op: <int as HasState>::State) {\n //~^ ERROR the trait `HasState` is not implemented for the type `int`\n }"}, {"sha": "3a9de74104364156b4279f01008e421ff32ae11f", "filename": "src/test/compile-fail/issue-18819.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-18819.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type Item;\n }"}, {"sha": "70fe6b9b6a868acac98a548e29fd31dcb6b60a48", "filename": "src/test/compile-fail/issue-19883.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-19883.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait From<Src> {\n     type Output;\n "}, {"sha": "b52f2b1b13857231b830f69492590d09114311eb", "filename": "src/test/compile-fail/issue-20005.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-20005.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait From<Src> {\n     type Result;\n "}, {"sha": "289e9855525ac14873a090a2a25a7ac4b3333ecf", "filename": "src/test/compile-fail/issue-4366-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n-\n // ensures that 'use foo:*' doesn't import non-public item\n \n use m1::*;\n@@ -36,4 +34,3 @@ mod m1 {\n fn main() {\n     foo(); //~ ERROR: unresolved name\n }\n-"}, {"sha": "289aa21e1cba54000cc5ec17cc9606d1187a7b9d", "filename": "src/test/compile-fail/issue-4366.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-4366.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -13,8 +13,6 @@\n // ensures that 'use foo:*' doesn't import non-public 'use' statements in the\n // module 'foo'\n \n-#![feature(globs)]\n-\n use m1::*;\n \n mod foo {"}, {"sha": "7e3f1171e252f5ba77908738ee02269cef1c017b", "filename": "src/test/compile-fail/issue-8208.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-8208.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,10 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n-\n use self::*; //~ ERROR: unresolved import\n \n fn main() {\n }\n-"}, {"sha": "e50f636050c536b8fe5231f764187d42a781b2cc", "filename": "src/test/compile-fail/lint-missing-doc.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-missing-doc.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,6 @@\n \n // When denying at the crate level, be sure to not get random warnings from the\n // injected intrinsics by the compiler.\n-#![feature(globs)]\n #![deny(missing_docs)]\n #![allow(dead_code)]\n #![allow(missing_copy_implementations)]"}, {"sha": "6d59f2c650184013e3b1076fbd618abdb4b6db65", "filename": "src/test/compile-fail/lint-stability.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-stability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-stability.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -13,7 +13,7 @@\n // aux-build:stability_cfg1.rs\n // aux-build:stability_cfg2.rs\n \n-#![feature(globs, phase)]\n+#![feature(phase)]\n #![deny(unstable)]\n #![deny(deprecated)]\n #![deny(experimental)]"}, {"sha": "a77de551f5d2cf6418c0b15ddc80d848bb680d5b", "filename": "src/test/compile-fail/lint-unused-extern-crate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-extern-crate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:lint-unused-extern-crate.rs\n \n-#![feature(globs)]\n #![deny(unused_extern_crates)]\n #![allow(unused_variables)]\n "}, {"sha": "b5c0dce6e531ee8800b8cf37a60622d56cb16330", "filename": "src/test/compile-fail/lint-unused-imports.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Flint-unused-imports.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![deny(unused_imports)]\n #![allow(dead_code)]\n "}, {"sha": "2f0588b261e54c08eaded6acb19e6f527b442d83", "filename": "src/test/compile-fail/name-clash-nullary.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fname-clash-nullary.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n-\n // error-pattern:declaration of `None` shadows\n use std::option::*;\n "}, {"sha": "4fcb31d36865aa55793ad1d2bdf537a2fff63111", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls-xcrate.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls-xcrate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n // aux-build:namespaced_enums.rs\n-#![feature(globs)]\n-\n extern crate namespaced_enums;\n \n mod m {\n@@ -25,4 +23,3 @@ pub fn main() {\n     bar(); //~ ERROR unresolved name `bar`\n     m::bar(); //~ ERROR unresolved name `m::bar`\n }\n-"}, {"sha": "602ec9ba762802aff39a439c2845bce82171d603", "filename": "src/test/compile-fail/namespaced-enum-glob-import-no-impls.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fnamespaced-enum-glob-import-no-impls.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs)]\n \n mod m2 {\n     pub enum Foo {"}, {"sha": "5952f05b7bc4c7b36426147ec6f8db3f7b695953", "filename": "src/test/compile-fail/privacy-ns1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#![feature(globs)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n@@ -64,4 +63,3 @@ fn test_glob3() {\n \n fn main() {\n }\n-"}, {"sha": "7fe0574ab7d9a663902dd9433fcc6a01145f3b4c", "filename": "src/test/compile-fail/privacy-ns2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy-ns2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#![feature(globs)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n@@ -88,4 +87,3 @@ fn test_list3() {\n \n fn main() {\n }\n-"}, {"sha": "ffee00642acf6f800b01ce594e68182e1058f379", "filename": "src/test/compile-fail/privacy1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, lang_items)]\n+#![feature(lang_items)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang=\"sized\"]"}, {"sha": "b38d7aedf841ccb5f3b3bdbd8405dfbbf00cbd82", "filename": "src/test/compile-fail/privacy2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that globs don't leak in regular `use` statements.\n@@ -34,4 +33,3 @@ fn test2() {\n }\n \n #[start] fn main(_: int, _: *const *const u8) -> int { 3 }\n-"}, {"sha": "5ec10d5a4caa94458364e3c251d3d99817240231", "filename": "src/test/compile-fail/privacy3.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy3.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n // Test to make sure that private items imported through globs remain private"}, {"sha": "7bfeb8886453044a382d1059f3f76a4bae8304e1", "filename": "src/test/compile-fail/privacy4.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy4.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, lang_items)]\n+#![feature(lang_items)]\n #![no_std] // makes debugging this test *a lot* easier (during resolve)\n \n #[lang = \"sized\"] pub trait Sized for Sized? {}"}, {"sha": "d58e89e7767e813e0c380b0a34bf3d1c96355399", "filename": "src/test/compile-fail/static-reference-to-fn-2.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstatic-reference-to-fn-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n struct StateMachineIter<'a> {\n     statefn: &'a StateMachineFunc<'a>\n }\n@@ -61,4 +59,3 @@ fn main() {\n     println!(\"{}\",it.next());\n     println!(\"{}\",it.next());\n }\n-"}, {"sha": "5ebabc2e3548c1032eb007b08db97dc2e9b09d48", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,6 @@\n \n // Issue #8380\n \n-#![feature(globs)]\n \n use std::sync::atomic::*;\n use std::ptr;"}, {"sha": "a7861c4b90d673fbdb9ac09d2e1504ab5be7c480", "filename": "src/test/compile-fail/unboxed-closure-sugar-default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-default.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,7 @@\n // Test interaction between unboxed closure sugar and default type\n // parameters (should be exactly as if angle brackets were used).\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n trait Foo<T,U,V=T> {"}, {"sha": "df53ecdac7c2630653769cfe22ed9d9f417051a3", "filename": "src/test/compile-fail/unboxed-closure-sugar-region.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-region.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -12,7 +12,7 @@\n // parameters (should be exactly as if angle brackets were used\n // and regions omitted).\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n #![allow(dead_code)]\n \n use std::kinds::marker;"}, {"sha": "e6fbcf2d38f2b2b317d5e6ce35e860a124c02984", "filename": "src/test/compile-fail/wrong-mul-method-signature.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fwrong-mul-method-signature.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -13,8 +13,6 @@\n // (In this case the mul method should take &f64 and not f64)\n // See: #11450\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops::Mul;\n \n struct Vec1 {"}, {"sha": "6712b3b0659088e731147e0e4fd54bcc4287d6d3", "filename": "src/test/run-fail/glob-use-std.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-fail%2Fglob-use-std.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Fglob-use-std.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -15,7 +15,6 @@\n // Expanded pretty printing causes resolve conflicts.\n \n // error-pattern:panic works\n-#![feature(globs)]\n \n use std::*;\n "}, {"sha": "3314b613201595442e4373c320795b189bc380ad", "filename": "src/test/run-pass/associated-types-basic.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-basic.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type T;\n }\n@@ -23,4 +21,3 @@ fn main() {\n     let y: int = 44;\n     assert_eq!(x * 2, y);\n }\n-"}, {"sha": "caf7d31a5fd45c2f8fbf8b051265da9d3da07563", "filename": "src/test/run-pass/associated-types-binding-in-where-clause.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-binding-in-where-clause.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "c34a19e1d8242206ad82a45c896fc67f933e7609", "filename": "src/test/run-pass/associated-types-bound.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-bound.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait ToInt {\n     fn to_int(&self) -> int;\n }"}, {"sha": "58aa351ba9c41c27d45c2cad8596fdea9b52988d", "filename": "src/test/run-pass/associated-types-cc.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-cc.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -13,8 +13,6 @@\n // Test that we are able to reference cross-crate traits that employ\n // associated types.\n \n-#![feature(associated_types)]\n-\n extern crate \"associated-types-cc-lib\" as bar;\n \n use bar::Bar;"}, {"sha": "46cf9110476d039ed7ed799331c44a313659dff5", "filename": "src/test/run-pass/associated-types-conditional-dispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-conditional-dispatch.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -14,8 +14,6 @@\n // `Target=[A]`, then the impl marked with `(*)` is seen to conflict\n // with all the others.\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops::Deref;\n \n pub trait MyEq<Sized? U=Self> for Sized? {"}, {"sha": "68b49af0d3b696539321500bea230ad9d8e3457e", "filename": "src/test/run-pass/associated-types-constant-type.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-constant-type.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait SignedUnsigned {\n     type Opposite;\n     fn convert(self) -> Self::Opposite;\n@@ -39,4 +37,3 @@ fn main() {\n     let x = get(22);\n     assert_eq!(22u, x);\n }\n-"}, {"sha": "0ec8a3661906f7aaee7806a151ba4718339eb7da", "filename": "src/test/run-pass/associated-types-eq-obj.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-eq-obj.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types inside of an object type\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "388a2d734473153f9b4c602bd59d99efa6cc51df", "filename": "src/test/run-pass/associated-types-impl-redirect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-impl-redirect.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -16,7 +16,7 @@\n \n // ignore-pretty -- FIXME(#17362)\n \n-#![feature(associated_types, lang_items, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n use std::kinds::Sized;"}, {"sha": "0ae61037154728837200000a2174cbc53e907154", "filename": "src/test/run-pass/associated-types-in-default-method.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-default-method.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -35,5 +33,3 @@ fn main() {\n     };\n     assert_eq!(*s.grab(), 100);\n }\n-\n-"}, {"sha": "4104f520a0c5d714827f33f6cd384c9aedfafa3e", "filename": "src/test/run-pass/associated-types-in-fn.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-fn.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -36,4 +34,3 @@ fn main() {\n     };\n     assert_eq!(*grab(&s), 100);\n }\n-"}, {"sha": "59f05e1184285c531c284be909093d127822a38b", "filename": "src/test/run-pass/associated-types-in-impl-generics.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-impl-generics.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -44,4 +42,3 @@ fn main() {\n     };\n     assert_eq!(*s.grab(), 100);\n }\n-"}, {"sha": "951497709fd69955e6c7408b4f2f38e27bf12a51", "filename": "src/test/run-pass/associated-types-in-inherent-method.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-in-inherent-method.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -38,4 +36,3 @@ fn main() {\n     };\n     assert_eq!(*Struct::grab(&s), 100);\n }\n-"}, {"sha": "d35b7331d4dbfa757b68f2d072decf3dc1e0991f", "filename": "src/test/run-pass/associated-types-issue-20371.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-issue-20371.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,6 @@\n // Test that we are able to have an impl that defines an associated type\n // before the actual trait.\n \n-#![feature(associated_types)]\n impl X for f64 { type Y = int; }\n trait X {type Y; }\n fn main() {}"}, {"sha": "00237e2fb0f0f87790fa8af314572cf1bdebf1bd", "filename": "src/test/run-pass/associated-types-normalize-in-bounds-ufcs.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds-ufcs.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-#![feature(associated_types)]\n-\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n "}, {"sha": "dcfdba5e746c38e5a404f7fabdc1b751ba798a44", "filename": "src/test/run-pass/associated-types-normalize-in-bounds.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-normalize-in-bounds.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that we normalize associated types that appear in bounds; if\n // we didn't, the call to `self.split2()` fails to type check.\n \n-#![feature(associated_types)]\n-\n struct Splits<'a, T, P>;\n struct SplitsN<I>;\n "}, {"sha": "24dae20b3e77e976a4b3d67b25e7753802afc901", "filename": "src/test/run-pass/associated-types-projection-bound-in-supertraits.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-projection-bound-in-supertraits.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -13,8 +13,6 @@\n // this case, the `Result=Self` binding in the supertrait listing of\n // `Int` was being ignored.\n \n-#![feature(associated_types)]\n-\n trait Not {\n     type Result;\n "}, {"sha": "abbde16faefca14ffa4d81a441ad1cf9ba037c82", "filename": "src/test/run-pass/associated-types-qualified-path-with-trait-with-type-parameters.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-qualified-path-with-trait-with-type-parameters.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo<T> {\n     type Bar;\n     fn get_bar() -> <Self as Foo<T>>::Bar;"}, {"sha": "e7a8061a3467aa4f6d8479fa2788829fccce42d4", "filename": "src/test/run-pass/associated-types-resolve-lifetime.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-resolve-lifetime.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get<T> {\n     fn get(&self) -> T;\n }"}, {"sha": "b9b6d14f8a071decd2a4edef6644d4cfbcb4622e", "filename": "src/test/run-pass/associated-types-return.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-return.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test equality constraints on associated types in a where clause.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> <Self as Foo>::A;"}, {"sha": "9e388dc3d347e7932e2cb7fcdd589dba8c0760a7", "filename": "src/test/run-pass/associated-types-simple.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-simple.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Get {\n     type Value;\n     fn get(&self) -> &<Self as Get>::Value;\n@@ -32,4 +30,3 @@ fn main() {\n     };\n     assert_eq!(*s.get(), 100);\n }\n-"}, {"sha": "880554b61b2ffa7fb751691b182bd16589dffcf7", "filename": "src/test/run-pass/associated-types-sugar-path.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-sugar-path.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test paths to associated types using the type-parameter-only sugar.\n \n-#![feature(associated_types)]\n-\n pub trait Foo {\n     type A;\n     fn boo(&self) -> Self::A;"}, {"sha": "abbe250b6279a17051edf12a87281d7a6d367eb0", "filename": "src/test/run-pass/associated-types-where-clause-impl-ambiguity.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fassociated-types-where-clause-impl-ambiguity.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -16,7 +16,7 @@\n \n // ignore-pretty -- FIXME(#17362) pretty prints with `<<` which lexes wrong\n \n-#![feature(associated_types, lang_items, unboxed_closures)]\n+#![feature(lang_items, unboxed_closures)]\n #![no_implicit_prelude]\n \n use std::kinds::Sized;"}, {"sha": "0a12df53de2327013b9e5f7d41c9fb2794a0edbd", "filename": "src/test/run-pass/dst-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref-mut.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n pub struct Arr {"}, {"sha": "8ef8f1a868d51650f976fbdd5a8e1df479bce72e", "filename": "src/test/run-pass/dst-deref.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-deref.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test that a custom deref with a fat pointer return type does not ICE\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n pub struct Arr {"}, {"sha": "d1823359af1351c438d6fd425c7752aafdf13316", "filename": "src/test/run-pass/dst-index.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fdst-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fdst-index.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that overloaded index expressions with DST result types\n // work and don't ICE.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n use std::fmt::Show;\n "}, {"sha": "2dcf6bf6d090757d0bd84950c8ea7358d08928ba", "filename": "src/test/run-pass/eq-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Feq-multidispatch.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n #[derive(PartialEq)]\n struct Bar;\n struct Baz;"}, {"sha": "da0a3e9e107e6cad55d8a7f935b0fa73e50d5aeb", "filename": "src/test/run-pass/export-glob-imports-target.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fexport-glob-imports-target.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -14,8 +13,6 @@\n \n // Modified to not use export since it's going away. --pcw\n \n-#![feature(globs)]\n-\n mod foo {\n     use foo::bar::*;\n     pub mod bar {"}, {"sha": "a673a67089a3a2289225b0572a44b05ea52cb3cd", "filename": "src/test/run-pass/fixup-deref-mut.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ffixup-deref-mut.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Deref, DerefMut};\n \n // Generic unique/owned smaht pointer.\n@@ -55,4 +53,3 @@ fn test2(mut x: Own<Own<Own<Point>>>) {\n }\n \n fn main() {}\n-"}, {"sha": "ed8c6e73255bb49dba6d56d7076a1798b1d5aceb", "filename": "src/test/run-pass/generic-default-type-params-cross-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params-cross-crate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // aux-build:default_type_params_xc.rs\n \n-#![feature(default_type_params)]\n-\n extern crate default_type_params_xc;\n \n struct Vec<T, A = default_type_params_xc::Heap>;"}, {"sha": "5ec478d39e34fd90140171c6aa72f4e564f7e577", "filename": "src/test/run-pass/generic-default-type-params.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fgeneric-default-type-params.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n struct Foo<A = (int, char)> {\n     a: A\n }"}, {"sha": "a57b8de629eb54d14a46e014ec35795d789495e3", "filename": "src/test/run-pass/import-glob-0.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-0.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n-\n use module_of_many_things::*;\n use dug::too::greedily::and::too::deep::*;\n "}, {"sha": "24d90741bbca4c5a45319d1b10197363bf8468a6", "filename": "src/test/run-pass/import-glob-crate.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-glob-crate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![allow(dead_assignment)]\n \n use std::mem::*;"}, {"sha": "3c28354dedcada0355805aa7bb053f4cc3fdb97e", "filename": "src/test/run-pass/import-in-block.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fimport-in-block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fimport-in-block.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n-\n pub fn main() {\n     use std::mem::replace;\n     let mut x = 5i;"}, {"sha": "2b0f7cc7d7d3214dad905b149475b645f79303ac", "filename": "src/test/run-pass/intrinsics-integer.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-integer.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, intrinsics)]\n+#![feature(intrinsics)]\n \n mod rusti {\n     extern \"rust-intrinsic\" {"}, {"sha": "523e7ab02d4a3481228a1d663a428d250118b660", "filename": "src/test/run-pass/intrinsics-math.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fintrinsics-math.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs, macro_rules, intrinsics)]\n+#![feature(macro_rules, intrinsics)]\n \n macro_rules! assert_approx_eq(\n     ($a:expr, $b:expr) => ({"}, {"sha": "4a07b5fc432c2bd99770e7cc59877eb09a695e6d", "filename": "src/test/run-pass/issue-11709.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-11709.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-11709.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -15,8 +15,6 @@\n // when this bug was opened. The cases where the compiler\n // panics before the fix have a comment.\n \n-#![feature(default_type_params)]\n-\n use std::thunk::Thunk;\n \n struct S {x:()}"}, {"sha": "21b54ba0e793b2807261ac09ac89a8c7694fea8e", "filename": "src/test/run-pass/issue-13167.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-13167.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13167.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::slice;\n \n pub struct PhfMapEntries<'a, T: 'a> {"}, {"sha": "3c76a827fb2958e546f145bd2e865bc489602b7e", "filename": "src/test/run-pass/issue-13264.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-13264.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13264.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct Root {"}, {"sha": "21bda93ecec650f978b4b35f42cfa4b58e813377", "filename": "src/test/run-pass/issue-14919.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-14919.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14919.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Matcher {\n     fn next_match(&mut self) -> Option<(uint, uint)>;\n }"}, {"sha": "549ed08aaf37a54130f49bcf1c6e3dbd4ba74416", "filename": "src/test/run-pass/issue-14933.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-14933.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-14933.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-14933.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n pub type BigRat<T = int> = T;\n \n fn main() {}"}, {"sha": "e404f5fa11874e71fea79a36064e9fbd0308ed6b", "filename": "src/test/run-pass/issue-15734.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-15734.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-15734.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,7 +11,7 @@\n // If `Index` used an associated type for its output, this test would\n // work more smoothly.\n \n-#![feature(associated_types, old_orphan_check)]\n+#![feature(old_orphan_check)]\n \n use std::ops::Index;\n "}, {"sha": "e01de3a3262edefbe1f725de31b0c2839ee95f18", "filename": "src/test/run-pass/issue-16596.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16596.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16596.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait MatrixRow {}\n \n struct Mat;"}, {"sha": "72e948e613b2e2b70f2cd2b1362bc06003186cd4", "filename": "src/test/run-pass/issue-16597.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16597.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16597.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // compile-flags:--test\n // ignore-pretty turns out the pretty-printer doesn't handle gensym'd things...\n \n-#![feature(globs)]\n-\n mod test {\n     use super::*;\n "}, {"sha": "6ef4f868d215094faf76c687bd6be2ec5949d4d2", "filename": "src/test/run-pass/issue-16774.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-16774.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-16774.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::ops::{Deref, DerefMut};\n "}, {"sha": "b4bd55da597578a8b2ca860b3eba0137406b7489", "filename": "src/test/run-pass/issue-17732.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-17732.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17732.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n trait Person {\n     type string;\n }"}, {"sha": "da6c83142eab62c3a20244c07b8b4354adc93bbe", "filename": "src/test/run-pass/issue-17897.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-17897.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-17897.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::thunk::Thunk;\n "}, {"sha": "a2152db6884ac9fd269c26296cf286d438e85f22", "filename": "src/test/run-pass/issue-18188.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-18188.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-18188.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::thunk::Thunk;\n "}, {"sha": "83ba322ba30134d0580affe0d79308742ef92c20", "filename": "src/test/run-pass/issue-19081.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19081.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19081.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // ignore-pretty -- FIXME(#17362) pretty prints as `Hash<<Self as Hasher...` which fails to parse\n \n-#![feature(associated_types)]\n-\n pub trait Hasher {\n     type State;\n "}, {"sha": "d95f74ef2a2ba8217c4b5ee48e5b5253240444b5", "filename": "src/test/run-pass/issue-19121.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19121.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19121.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that a partially specified trait object with unspecified associated\n // type does not ICE.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type A;\n }"}, {"sha": "3436871b4d1fef7f16331e5b8041ef09e454faec", "filename": "src/test/run-pass/issue-19129-1.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19129-1.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Trait<Input> {\n     type Output;\n "}, {"sha": "d6b3a1908b82d6cb78b2619126ac7e56191199ef", "filename": "src/test/run-pass/issue-19129-2.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19129-2.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Trait<Input> {\n     type Output;\n "}, {"sha": "91bc645b2d486a4a2bce680b492d399af05e29ab", "filename": "src/test/run-pass/issue-19479.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19479.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19479.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n trait Base {}\n trait AssocA {\n     type X: Base;"}, {"sha": "43116f63641ded4b5e868cce3731a7fc33e0a4a3", "filename": "src/test/run-pass/issue-19631.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19631.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait PoolManager {\n     type C;\n }"}, {"sha": "01a073a6889aedf28a7fee91eaa3e1f09d4ef3a2", "filename": "src/test/run-pass/issue-19632.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19632.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19632.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait PoolManager {\n     type C;\n }"}, {"sha": "a9ce6c7a9eb48bc7f399de8ecd60d20aae7ee8d8", "filename": "src/test/run-pass/issue-19850.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-19850.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-19850.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that `<Type as Trait>::Output` and `Self::Output` are accepted as type annotations in let\n // bindings\n \n-#![feature(associated_types)]\n-\n trait Int {\n     fn one() -> Self;\n     fn leading_zeros(self) -> uint;"}, {"sha": "374460487d8f211dead321386806720688fe59ab", "filename": "src/test/run-pass/issue-20009.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-20009.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20009.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Check that associated types are `Sized`\n \n-#![feature(associated_types)]\n-\n trait Trait {\n     type Output;\n "}, {"sha": "877cec48b5dc77c54e72542dd48e4f01df9ec246", "filename": "src/test/run-pass/issue-20389.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-20389.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20389.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:issue_20389.rs\n \n-#![feature(associated_types)]\n extern crate issue_20389;\n \n struct Foo;"}, {"sha": "18c59dc9adc8e828b05dd79d570aa3a57042b0b8", "filename": "src/test/run-pass/issue-2526-a.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-2526-a.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,6 @@\n \n // aux-build:issue-2526.rs\n \n-#![feature(globs)]\n #![allow(unused_imports)]\n \n extern crate issue_2526;"}, {"sha": "c3cfaf22dee05607b61e269bf86760f62768d7a2", "filename": "src/test/run-pass/issue-3609.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-3609.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3609.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(default_type_params)]\n-\n use std::thread::Thread;\n use std::sync::mpsc::Sender;\n use std::thunk::Invoke;"}, {"sha": "43852fb33240090ddadb1314559108aa80ad0d64", "filename": "src/test/run-pass/issue-3743.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-3743.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-3743.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,7 @@\n \n // If `Mul` used an associated type for its output, this test would\n // work more smoothly.\n-#![feature(associated_types, default_type_params, old_orphan_check)]\n+#![feature(old_orphan_check)]\n \n use std::ops::Mul;\n "}, {"sha": "0ff265e483efe226a29873ce9a495c3ad9822ddf", "filename": "src/test/run-pass/issue-7663.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fissue-7663.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-7663.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n #![allow(unused_imports, dead_code)]\n \n mod test1 {"}, {"sha": "e4a8ec19eb8e84ce231739a702cff4bf956f3e92", "filename": "src/test/run-pass/namespaced-enum-emulate-flat.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-emulate-flat.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs)]\n \n pub use Foo::*;\n use nest::{Bar, D, E, F};"}, {"sha": "e5317c2f57302ae63ee84e3ff237f5a18ee783b1", "filename": "src/test/run-pass/namespaced-enum-glob-import-xcrate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import-xcrate.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n // aux-build:namespaced_enums.rs\n-#![feature(globs)]\n \n extern crate namespaced_enums;\n "}, {"sha": "c48be3af248f0982577fa3671a5ee3712b8dd168", "filename": "src/test/run-pass/namespaced-enum-glob-import.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fnamespaced-enum-glob-import.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -7,7 +7,6 @@\n // <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n-#![feature(globs)]\n \n mod m2 {\n     pub enum Foo {"}, {"sha": "8e5750005e2e9e60f88597d555daf90a488bb206", "filename": "src/test/run-pass/operator-multidispatch.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-multidispatch.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test that we can overload the `+` operator for points so that two\n // points can be added, and a point can be added to an integer.\n \n-#![feature(associated_types, default_type_params)]\n-\n use std::ops;\n \n #[derive(Show,PartialEq,Eq)]"}, {"sha": "c20b7336deb325e3a2f27240d7cbc30f02951b4e", "filename": "src/test/run-pass/operator-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foperator-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foperator-overloading.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp;\n use std::ops;\n "}, {"sha": "f0646853b6be8824223ea0c3a551ff736992d2dc", "filename": "src/test/run-pass/overloaded-autoderef-count.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-count.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n "}, {"sha": "de37173810f044d0d4cb1dd1946d29d8a305a98e", "filename": "src/test/run-pass/overloaded-autoderef-indexing.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-indexing.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefArray<'a, T:'a> {"}, {"sha": "c34aed42c970fe5e4120e40a86910e222b700b00", "filename": "src/test/run-pass/overloaded-autoderef-order.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-order.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::rc::Rc;\n use std::ops::Deref;\n "}, {"sha": "be2b309b8217ffa78f8931ceff6925ea25c03b4b", "filename": "src/test/run-pass/overloaded-autoderef-vtable.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-autoderef-vtable.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::Deref;\n \n struct DerefWithHelper<H, T> {"}, {"sha": "56887636d5dfbc9baa8ffa62d889482be7c2b1f8", "filename": "src/test/run-pass/overloaded-calls-param-vtables.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-calls-param-vtables.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,7 +10,7 @@\n \n // Tests that nested vtables work with overloaded calls.\n \n-#![feature(default_type_params, unboxed_closures)]\n+#![feature(unboxed_closures)]\n \n use std::ops::Fn;\n use std::ops::Add;\n@@ -27,4 +27,3 @@ fn main() {\n     // ICE trigger\n     G(1i);\n }\n-"}, {"sha": "5cd76879798cb77e14f96f658377269f21c84915", "filename": "src/test/run-pass/overloaded-deref-count.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-deref-count.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cell::Cell;\n use std::ops::{Deref, DerefMut};\n use std::vec::Vec;"}, {"sha": "aac0b5e06d004fde8c98838ea36752d4425d4155", "filename": "src/test/run-pass/overloaded-index-assoc-list.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-assoc-list.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test overloading of the `[]` operator.  In particular test that it\n // takes its argument *by reference*.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct AssociationList<K,V> {"}, {"sha": "bc67c0afc7b520d5f6e2b87d28f9bfad4ec865d3", "filename": "src/test/run-pass/overloaded-index-autoderef.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-autoderef.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -10,8 +10,6 @@\n \n // Test overloaded indexing combined with autoderef.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -84,4 +82,3 @@ fn main() {\n     assert_eq!(f[1].get(), 5);\n     assert_eq!(f[1].get_from_ref(), 5);\n }\n-"}, {"sha": "487fb93c9fee8f3a09135d7503989ade445b6158", "filename": "src/test/run-pass/overloaded-index-in-field.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index-in-field.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -11,8 +11,6 @@\n // Test using overloaded indexing when the \"map\" is stored in a\n // field. This caused problems at some point.\n \n-#![feature(associated_types)]\n-\n use std::ops::Index;\n \n struct Foo {\n@@ -55,4 +53,3 @@ fn main() {\n     } };\n     assert_eq!(f.foo[1].get(), 2);\n }\n-"}, {"sha": "0afdb24a81cc0dbf64dd86b437faeb4af54fa4bd", "filename": "src/test/run-pass/overloaded-index.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Foverloaded-index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Foverloaded-index.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::ops::{Index, IndexMut};\n \n struct Foo {\n@@ -75,4 +73,3 @@ fn main() {\n     assert_eq!(f[1].get(), 5);\n     assert_eq!(f[1].get_from_ref(), 5);\n }\n-"}, {"sha": "5649c4c784dafdab7a19cb563ab3dbe76e10a544", "filename": "src/test/run-pass/parse-assoc-type-lt.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fparse-assoc-type-lt.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n trait Foo {\n     type T;\n     fn foo() -> Box<<Self as Foo>::T>;"}, {"sha": "f3380352f5fa946c96a52c215461adffebb508eb", "filename": "src/test/run-pass/privacy-ns.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fprivacy-ns.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -12,7 +12,6 @@\n // Check we do the correct privacy checks when we import a name and there is an\n // item with that name in both the value and type namespaces.\n \n-#![feature(globs)]\n #![allow(dead_code)]\n #![allow(unused_imports)]\n \n@@ -115,4 +114,3 @@ fn test_glob3() {\n \n fn main() {\n }\n-"}, {"sha": "22ca737d421987ac99cfe78fcc3b5c17083b3543", "filename": "src/test/run-pass/reexport-star.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Freexport-star.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Freexport-star.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexport-star.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n \n mod a {\n     pub fn f() {}"}, {"sha": "d3464f01203ac5f3adb5cb24587be0eb7ff622aa", "filename": "src/test/run-pass/regions-no-bound-in-argument-cleanup.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fregions-no-bound-in-argument-cleanup.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types, unsafe_destructor)]\n+#![feature(unsafe_destructor)]\n \n pub struct Foo<T>;\n "}, {"sha": "e89d5c9922dfafce12ab7e7c2753bf1a071462d6", "filename": "src/test/run-pass/simd-generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Fsimd-generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsimd-generics.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n \n-#![feature(associated_types, simd)]\n+#![feature(simd)]\n \n use std::ops;\n "}, {"sha": "2eff97d31b25d4875a39ce06c9127b2f9b8a51c8", "filename": "src/test/run-pass/tag-exports.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftag-exports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftag-exports.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -1,4 +1,3 @@\n-\n // Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n@@ -9,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(globs)]\n \n use alder::*;\n "}, {"sha": "2598679f92107c52cc7009dc98bd0a368490b01e", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -16,7 +16,7 @@\n // one test task to ensure that errors are timeouts, not file descriptor\n // exhaustion.\n \n-#![feature(macro_rules, globs)]\n+#![feature(macro_rules)]\n #![allow(experimental)]\n #![reexport_test_harness_main = \"test_main\"]\n "}, {"sha": "43494458518cd9205e2ecaac2d195fe3882d41b8", "filename": "src/test/run-pass/trait-inheritance-overloading.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b24431970ece166309ef4870307e9fa4a85296d5/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftrait-inheritance-overloading.rs?ref=b24431970ece166309ef4870307e9fa4a85296d5", "patch": "@@ -8,8 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(associated_types)]\n-\n use std::cmp::PartialEq;\n use std::ops::{Add, Sub, Mul};\n "}]}