{"sha": "cec1679cf60304a0992c491ed39834b48c460337", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlYzE2NzljZjYwMzA0YTA5OTJjNDkxZWQzOTgzNGI0OGM0NjAzMzc=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T00:52:27Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-02-18T00:52:27Z"}, "message": "rustdoc: Simplify attr pass", "tree": {"sha": "3c5341300a450008f9e0b401e24eb149a098d964", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c5341300a450008f9e0b401e24eb149a098d964"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cec1679cf60304a0992c491ed39834b48c460337", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cec1679cf60304a0992c491ed39834b48c460337", "html_url": "https://github.com/rust-lang/rust/commit/cec1679cf60304a0992c491ed39834b48c460337", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cec1679cf60304a0992c491ed39834b48c460337/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22de9292c6c514500d2ba99d5305a4a1b4d6160b", "url": "https://api.github.com/repos/rust-lang/rust/commits/22de9292c6c514500d2ba99d5305a4a1b4d6160b", "html_url": "https://github.com/rust-lang/rust/commit/22de9292c6c514500d2ba99d5305a4a1b4d6160b"}], "stats": {"total": 406, "additions": 99, "deletions": 307}, "files": [{"sha": "aaabe303b983f8ca7cc464eb2ef69cda77b35d1a", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 37, "deletions": 190, "changes": 227, "blob_url": "https://github.com/rust-lang/rust/blob/cec1679cf60304a0992c491ed39834b48c460337/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec1679cf60304a0992c491ed39834b48c460337/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=cec1679cf60304a0992c491ed39834b48c460337", "patch": "@@ -9,25 +9,21 @@ import rustc::syntax::ast;\n import rustc::front::attr;\n import core::tuple;\n \n-export crate_attrs, mod_attrs, fn_attrs, arg_attrs,\n-       const_attrs, enum_attrs, variant_attrs, res_attrs,\n-       iface_attrs, method_attrs, impl_attrs, type_attrs;\n-export parse_crate, parse_mod, parse_fn, parse_const,\n-       parse_enum, parse_variant, parse_res,\n-       parse_iface, parse_method, parse_impl, parse_type;\n+export crate_attrs, basic_attrs, fn_attrs, arg_attrs,\n+       variant_attrs, res_attrs, method_attrs;\n+export parse_crate, parse_basic, parse_fn,\n+       parse_variant, parse_res, parse_method;\n \n type crate_attrs = {\n     name: option<str>\n };\n \n-type mod_attrs = {\n+type basic_attrs = {\n     brief: option<str>,\n     desc: option<str>\n };\n \n type fn_attrs = {\n-    brief: option<str>,\n-    desc: option<str>,\n     args: [arg_attrs],\n     return: option<str>,\n     failure: option<str>\n@@ -38,43 +34,16 @@ type arg_attrs = {\n     desc: str\n };\n \n-type const_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n-type enum_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n type variant_attrs = {\n     desc: option<str>\n };\n \n type res_attrs = {\n-    brief: option<str>,\n-    desc: option<str>,\n     args: [arg_attrs]\n };\n \n-type iface_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n-type impl_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n type method_attrs = fn_attrs;\n \n-type type_attrs = {\n-    brief: option<str>,\n-    desc: option<str>\n-};\n-\n #[cfg(test)]\n mod test {\n \n@@ -174,40 +143,36 @@ fn parse_basic(\n     )\n }\n \n-fn parse_mod(attrs: [ast::attribute]) -> mod_attrs {\n-    parse_basic(attrs)\n-}\n-\n #[test]\n-fn parse_mod_should_handle_undocumented_mods() {\n+fn parse_basic_should_handle_undocumented_mods() {\n     let source = \"\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_mod(attrs);\n+    let attrs = parse_basic(attrs);\n     assert attrs.brief == none;\n     assert attrs.desc == none;\n }\n \n #[test]\n-fn parse_mod_should_parse_simple_doc_attributes() {\n+fn parse_basic_should_parse_simple_doc_attributes() {\n     let source = \"#[doc = \\\"basic\\\"]\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_mod(attrs);\n+    let attrs = parse_basic(attrs);\n     assert attrs.desc == some(\"basic\");\n }\n \n #[test]\n-fn parse_mod_should_parse_the_brief_description() {\n+fn parse_basic_should_parse_the_brief_description() {\n     let source = \"#[doc(brief = \\\"short\\\")]\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_mod(attrs);\n+    let attrs = parse_basic(attrs);\n     assert attrs.brief == some(\"short\");\n }\n \n #[test]\n-fn parse_mod_should_parse_the_long_description() {\n+fn parse_basic_should_parse_the_long_description() {\n     let source = \"#[doc(desc = \\\"description\\\")]\";\n     let attrs = test::parse_attributes(source);\n-    let attrs = parse_mod(attrs);\n+    let attrs = parse_basic(attrs);\n     assert attrs.desc == some(\"description\");\n }\n \n@@ -246,37 +211,35 @@ fn parse_short_doc_or<T>(\n     }\n }\n \n-fn parse_fn(\n-    attrs: [ast::attribute]\n-) -> fn_attrs {\n+fn parse_long_doc<T>(\n+    attrs: [ast::attribute],\n+    parse_long: fn&(doc_items: [@ast::meta_item]) -> T\n+) -> T {\n+    alt doc_meta(attrs) {\n+      some(meta) {\n+        alt attr::get_meta_item_list(meta) {\n+          some(list) {\n+            parse_long(list)\n+          }\n+          none {\n+            parse_long([])\n+          }\n+        }\n+      }\n+      none { parse_long([]) }\n+    }\n+}\n \n-    parse_short_doc_or(\n-        attrs,\n-        {|desc|\n-            {\n-                brief: none,\n-                desc: desc,\n-                args: [],\n-                return: none,\n-                failure: none\n-            }\n-        },\n-        parse_fn_long_doc\n-    )\n+fn parse_fn(attrs: [ast::attribute]) -> fn_attrs {\n+    parse_long_doc(attrs, parse_fn_long_doc)\n }\n \n-fn parse_fn_long_doc(\n-    items: [@ast::meta_item],\n-    brief: option<str>,\n-    desc: option<str>\n-) -> fn_attrs {\n+fn parse_fn_long_doc(items: [@ast::meta_item]) -> fn_attrs {\n     let return = attr::meta_item_value_from_list(items, \"return\");\n     let failure = attr::meta_item_value_from_list(items, \"failure\");\n     let args = parse_args(items);\n \n     {\n-        brief: brief,\n-        desc: desc,\n         args: args,\n         return: return,\n         failure: failure\n@@ -304,36 +267,10 @@ fn parse_fn_should_handle_undocumented_functions() {\n     let source = \"\";\n     let attrs = test::parse_attributes(source);\n     let attrs = parse_fn(attrs);\n-    assert attrs.brief == none;\n-    assert attrs.desc == none;\n     assert attrs.return == none;\n     assert vec::len(attrs.args) == 0u;\n }\n \n-#[test]\n-fn parse_fn_should_parse_simple_doc_attributes() {\n-    let source = \"#[doc = \\\"basic\\\"]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_fn(attrs);\n-    assert attrs.desc == some(\"basic\");\n-}\n-\n-#[test]\n-fn parse_fn_should_parse_the_brief_description() {\n-    let source = \"#[doc(brief = \\\"short\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_fn(attrs);\n-    assert attrs.brief == some(\"short\");\n-}\n-\n-#[test]\n-fn parse_fn_should_parse_the_long_description() {\n-    let source = \"#[doc(desc = \\\"description\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_fn(attrs);\n-    assert attrs.desc == some(\"description\");\n-}\n-\n #[test]\n fn parse_fn_should_parse_the_return_value_description() {\n     let source = \"#[doc(return = \\\"return value\\\")]\";\n@@ -359,48 +296,6 @@ fn parse_fn_should_parse_failure_conditions() {\n     assert attrs.failure == some(\"it's the fail\");\n }\n \n-fn parse_const(attrs: [ast::attribute]) -> const_attrs {\n-    parse_basic(attrs)\n-}\n-\n-#[test]\n-fn should_parse_const_short_doc() {\n-    let source = \"#[doc = \\\"description\\\"]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_const(attrs);\n-    assert attrs.desc == some(\"description\");\n-}\n-\n-#[test]\n-fn should_parse_const_long_doc() {\n-    let source = \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_const(attrs);\n-    assert attrs.brief == some(\"a\");\n-    assert attrs.desc == some(\"b\");\n-}\n-\n-fn parse_enum(attrs: [ast::attribute]) -> enum_attrs {\n-    parse_basic(attrs)\n-}\n-\n-#[test]\n-fn should_parse_enum_short_doc() {\n-    let source = \"#[doc = \\\"description\\\"]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_enum(attrs);\n-    assert attrs.desc == some(\"description\");\n-}\n-\n-#[test]\n-fn should_parse_enum_long_doc() {\n-    let source = \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_enum(attrs);\n-    assert attrs.brief == some(\"a\");\n-    assert attrs.desc == some(\"b\");\n-}\n-\n fn parse_variant(attrs: [ast::attribute]) -> variant_attrs {\n     parse_short_doc_or(\n         attrs,\n@@ -446,52 +341,16 @@ fn should_parse_variant_long_doc() {\n     assert attrs.desc == some(\"a\");\n }\n \n-fn parse_res(\n-    attrs: [ast::attribute]\n-) -> res_attrs {\n-\n-    parse_short_doc_or(\n-        attrs,\n-        {|desc|\n-            {\n-                brief: none,\n-                desc: desc,\n-                args: []\n-            }\n-        },\n-        parse_res_long_doc\n-    )\n+fn parse_res(attrs: [ast::attribute]) -> res_attrs {\n+    parse_long_doc(attrs, parse_res_long_doc)\n }\n \n-fn parse_res_long_doc(\n-    items: [@ast::meta_item],\n-    brief: option<str>,\n-    desc: option<str>\n-) -> res_attrs {\n+fn parse_res_long_doc(items: [@ast::meta_item]) -> res_attrs {\n     {\n-        brief: brief,\n-        desc: desc,\n         args: parse_args(items)\n     }\n }\n \n-#[test]\n-fn should_parse_resource_short_desc() {\n-    let source = \"#[doc = \\\"a\\\"]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_res(attrs);\n-    assert attrs.desc == some(\"a\");\n-}\n-\n-#[test]\n-fn should_parse_resource_long_desc() {\n-    let source = \"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\";\n-    let attrs = test::parse_attributes(source);\n-    let attrs = parse_res(attrs);\n-    assert attrs.brief == some(\"a\");\n-    assert attrs.desc == some(\"b\");\n-}\n-\n #[test]\n fn shoulde_parse_resource_arg() {\n     let source = \"#[doc(args(a = \\\"b\\\"))]\";\n@@ -501,18 +360,6 @@ fn shoulde_parse_resource_arg() {\n     assert attrs.args[0].desc == \"b\";\n }\n \n-fn parse_iface(attrs: [ast::attribute]) -> iface_attrs {\n-    parse_basic(attrs)\n-}\n-\n fn parse_method(attrs: [ast::attribute]) -> method_attrs {\n     parse_fn(attrs)\n }\n-\n-fn parse_impl(attrs: [ast::attribute]) -> impl_attrs {\n-    parse_basic(attrs)\n-}\n-\n-fn parse_type(attrs: [ast::attribute]) -> type_attrs {\n-    parse_basic(attrs)\n-}\n\\ No newline at end of file"}, {"sha": "a0201cbcd04219340de34236fa729dc429136337", "filename": "src/rustdoc/attr_pass.rs", "status": "modified", "additions": 62, "deletions": 117, "changes": 179, "blob_url": "https://github.com/rust-lang/rust/blob/cec1679cf60304a0992c491ed39834b48c460337/src%2Frustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cec1679cf60304a0992c491ed39834b48c460337/src%2Frustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_pass.rs?ref=cec1679cf60304a0992c491ed39834b48c460337", "patch": "@@ -21,14 +21,12 @@ fn run(\n ) -> doc::cratedoc {\n     let fold = fold::fold({\n         fold_crate: fold_crate,\n-        fold_mod: fold_mod,\n+        fold_item: fold_item,\n         fold_fn: fold_fn,\n-        fold_const: fold_const,\n         fold_enum: fold_enum,\n         fold_res: fold_res,\n         fold_iface: fold_iface,\n-        fold_impl: fold_impl,\n-        fold_type: fold_type\n+        fold_impl: fold_impl\n         with *fold::default_seq_fold(srv)\n     });\n     fold.fold_crate(fold, doc)\n@@ -64,6 +62,30 @@ fn should_replace_top_module_name_with_crate_name() {\n     assert doc.topmod.name() == \"bond\";\n }\n \n+fn fold_item(\n+    fold: fold::fold<astsrv::srv>,\n+    doc: doc::itemdoc\n+) -> doc::itemdoc {\n+\n+    let srv = fold.ctxt;\n+    let doc = fold::default_seq_fold_item(fold, doc);\n+\n+    let attrs = if doc.id == ast::crate_node_id {\n+        // This is the top-level mod, use the crate attributes\n+        astsrv::exec(srv) {|ctxt|\n+            attr_parser::parse_basic(ctxt.ast.node.attrs)\n+        }\n+    } else {\n+        parse_item_attrs(srv, doc.id, attr_parser::parse_basic)\n+    };\n+\n+    {\n+        brief: attrs.brief,\n+        desc: attrs.desc\n+        with doc\n+    }\n+}\n+\n fn parse_item_attrs<T>(\n     srv: astsrv::srv,\n     id: doc::ast_id,\n@@ -79,42 +101,14 @@ fn parse_item_attrs<T>(\n     }\n }\n \n-fn fold_mod(fold: fold::fold<astsrv::srv>, doc: doc::moddoc) -> doc::moddoc {\n-    let srv = fold.ctxt;\n-    let attrs = if doc.id() == ast::crate_node_id {\n-        // This is the top-level mod, use the crate attributes\n-        astsrv::exec(srv) {|ctxt|\n-            attr_parser::parse_mod(ctxt.ast.node.attrs)\n-        }\n-    } else {\n-        parse_item_attrs(srv, doc.id(), attr_parser::parse_mod)\n-    };\n-    let doc = fold::default_seq_fold_mod(fold, doc);\n-    ret merge_mod_attrs(doc, attrs);\n-\n-    fn merge_mod_attrs(\n-        doc: doc::moddoc,\n-        attrs: attr_parser::mod_attrs\n-    ) -> doc::moddoc {\n-        {\n-            item: {\n-                brief: attrs.brief,\n-                desc: attrs.desc\n-                with doc.item\n-            }\n-            with doc\n-        }\n-    }\n-}\n-\n #[test]\n-fn fold_mod_should_extract_mod_attributes() {\n+fn should_should_extract_mod_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"] mod a { }\");\n     assert doc.topmod.mods()[0].desc() == some(\"test\");\n }\n \n #[test]\n-fn fold_mod_should_extract_top_mod_attributes() {\n+fn should_extract_top_mod_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"];\");\n     assert doc.topmod.desc() == some(\"test\");\n }\n@@ -126,6 +120,7 @@ fn fold_fn(\n \n     let srv = fold.ctxt;\n \n+    let doc = fold::default_seq_fold_fn(fold, doc);\n     let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_fn);\n     ret merge_fn_attrs(doc, attrs);\n \n@@ -134,11 +129,6 @@ fn fold_fn(\n         attrs: attr_parser::fn_attrs\n     ) -> doc::fndoc {\n         ret {\n-            item: {\n-                brief: attrs.brief,\n-                desc: attrs.desc\n-                with doc.item\n-            },\n             args: merge_arg_attrs(doc.args, attrs.args),\n             return: merge_ret_attrs(doc.return, attrs.return),\n             failure: attrs.failure\n@@ -179,19 +169,19 @@ fn merge_ret_attrs(\n }\n \n #[test]\n-fn fold_fn_should_extract_fn_attributes() {\n+fn should_extract_fn_attributes() {\n     let doc = test::mk_doc(\"#[doc = \\\"test\\\"] fn a() -> int { }\");\n     assert doc.topmod.fns()[0].desc() == some(\"test\");\n }\n \n #[test]\n-fn fold_fn_should_extract_arg_attributes() {\n+fn should_extract_fn_arg_attributes() {\n     let doc = test::mk_doc(\"#[doc(args(a = \\\"b\\\"))] fn c(a: bool) { }\");\n     assert doc.topmod.fns()[0].args[0].desc == some(\"b\");\n }\n \n #[test]\n-fn fold_fn_should_extract_return_attributes() {\n+fn should_extract_fn_return_attributes() {\n     let source = \"#[doc(return = \\\"what\\\")] fn a() -> int { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n@@ -202,7 +192,7 @@ fn fold_fn_should_extract_return_attributes() {\n }\n \n #[test]\n-fn fold_fn_should_preserve_sig() {\n+fn should_preserve_fn_sig() {\n     let source = \"fn a() -> int { }\";\n     let srv = astsrv::mk_srv_from_str(source);\n     let doc = extract::from_srv(srv, \"\");\n@@ -213,30 +203,13 @@ fn fold_fn_should_preserve_sig() {\n }\n \n #[test]\n-fn fold_fn_should_extract_failure_conditions() {\n+fn should_extract_fn_failure_conditions() {\n     let doc = test::mk_doc(\"#[doc(failure = \\\"what\\\")] fn a() { }\");\n     assert doc.topmod.fns()[0].failure == some(\"what\");\n }\n \n-fn fold_const(\n-    fold: fold::fold<astsrv::srv>,\n-    doc: doc::constdoc\n-) -> doc::constdoc {\n-    let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_const);\n-\n-    {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        }\n-        with doc\n-    }\n-}\n-\n #[test]\n-fn fold_const_should_extract_docs() {\n+fn should_extract_const_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"foo\\\", desc = \\\"bar\\\")]\\\n                             const a: bool = true;\");\n     assert doc.topmod.consts()[0].brief() == some(\"foo\");\n@@ -248,14 +221,9 @@ fn fold_enum(\n     doc: doc::enumdoc\n ) -> doc::enumdoc {\n     let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_enum);\n+    let doc = fold::default_seq_fold_enum(fold, doc);\n \n     {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        },\n         variants: vec::map(doc.variants) {|variant|\n             let attrs = astsrv::exec(srv) {|ctxt|\n                 alt check ctxt.ast_map.get(doc.id()) {\n@@ -282,15 +250,15 @@ fn fold_enum(\n }\n \n #[test]\n-fn fold_enum_should_extract_docs() {\n+fn should_extract_enum_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n                             enum a { v }\");\n     assert doc.topmod.enums()[0].brief() == some(\"a\");\n     assert doc.topmod.enums()[0].desc() == some(\"b\");\n }\n \n #[test]\n-fn fold_enum_should_extract_variant_docs() {\n+fn should_extract_variant_docs() {\n     let doc = test::mk_doc(\"enum a { #[doc = \\\"c\\\"] v }\");\n     assert doc.topmod.enums()[0].variants[0].desc == some(\"c\");\n }\n@@ -301,14 +269,10 @@ fn fold_res(\n ) -> doc::resdoc {\n \n     let srv = fold.ctxt;\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_fn);\n+    let doc = fold::default_seq_fold_res(fold, doc);\n+    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_res);\n \n     {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        },\n         args: vec::map(doc.args) {|doc|\n             alt vec::find(attrs.args) {|attr|\n                 attr.name == doc.name\n@@ -327,15 +291,15 @@ fn fold_res(\n }\n \n #[test]\n-fn fold_res_should_extract_docs() {\n+fn should_extract_res_docs() {\n     let doc = test::mk_doc(\"#[doc(brief = \\\"a\\\", desc = \\\"b\\\")]\\\n                             resource r(b: bool) { }\");\n     assert doc.topmod.resources()[0].brief() == some(\"a\");\n     assert doc.topmod.resources()[0].desc() == some(\"b\");\n }\n \n #[test]\n-fn fold_res_should_extract_arg_docs() {\n+fn should_extract_res_arg_docs() {\n     let doc = test::mk_doc(\"#[doc(args(a = \\\"b\\\"))]\\\n                             resource r(a: bool) { }\");\n     assert doc.topmod.resources()[0].args[0].name == \"a\";\n@@ -348,14 +312,8 @@ fn fold_iface(\n ) -> doc::ifacedoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_iface(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_iface);\n \n     {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        },\n         methods: merge_method_attrs(srv, doc.id(), doc.methods)\n         with doc\n     }\n@@ -366,21 +324,31 @@ fn merge_method_attrs(\n     item_id: doc::ast_id,\n     docs: [doc::methoddoc]\n ) -> [doc::methoddoc] {\n+\n+    type method_attrs = (attr_parser::basic_attrs,\n+                         attr_parser::method_attrs);\n+\n     // Create an assoc list from method name to attributes\n-    let attrs = astsrv::exec(srv) {|ctxt|\n+    let attrs: [(str, method_attrs)] = astsrv::exec(srv) {|ctxt|\n         alt ctxt.ast_map.get(item_id) {\n           ast_map::node_item(@{\n             node: ast::item_iface(_, methods), _\n           }, _) {\n             vec::map(methods) {|method|\n-                (method.ident, attr_parser::parse_method(method.attrs))\n+                (method.ident,\n+                 (attr_parser::parse_basic(method.attrs),\n+                  attr_parser::parse_method(method.attrs)\n+                 ))\n             }\n           }\n           ast_map::node_item(@{\n             node: ast::item_impl(_, _, _, methods), _\n           }, _) {\n             vec::map(methods) {|method|\n-                (method.ident, attr_parser::parse_method(method.attrs))\n+                (method.ident,\n+                 (attr_parser::parse_basic(method.attrs),\n+                  attr_parser::parse_method(method.attrs)\n+                  ))\n             }\n           }\n           _ { fail \"unexpected item\" }\n@@ -389,14 +357,15 @@ fn merge_method_attrs(\n \n     vec::map2(docs, attrs) {|doc, attrs|\n         assert doc.name == tuple::first(attrs);\n-        let attrs = tuple::second(attrs);\n+        let basic_attrs = tuple::first(tuple::second(attrs));\n+        let method_attrs = tuple::second(tuple::second(attrs));\n \n         {\n-            brief: attrs.brief,\n-            desc: attrs.desc,\n-            args: merge_arg_attrs(doc.args, attrs.args),\n-            return: merge_ret_attrs(doc.return, attrs.return),\n-            failure: attrs.failure\n+            brief: basic_attrs.brief,\n+            desc: basic_attrs.desc,\n+            args: merge_arg_attrs(doc.args, method_attrs.args),\n+            return: merge_ret_attrs(doc.return, method_attrs.return),\n+            failure: method_attrs.failure\n             with doc\n         }\n     }\n@@ -434,14 +403,8 @@ fn fold_impl(\n ) -> doc::impldoc {\n     let srv = fold.ctxt;\n     let doc = fold::default_seq_fold_impl(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_impl);\n \n     {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        },\n         methods: merge_method_attrs(srv, doc.id(), doc.methods)\n         with doc\n     }\n@@ -473,24 +436,6 @@ fn should_extract_impl_method_docs() {\n     assert doc.topmod.impls()[0].methods[0].failure == some(\"failure\");\n }\n \n-fn fold_type(\n-    fold: fold::fold<astsrv::srv>,\n-    doc: doc::tydoc\n-) -> doc::tydoc {\n-    let srv = fold.ctxt;\n-    let doc = fold::default_seq_fold_type(fold, doc);\n-    let attrs = parse_item_attrs(srv, doc.id(), attr_parser::parse_type);\n-\n-    {\n-        item: {\n-            brief: attrs.brief,\n-            desc: attrs.desc\n-            with doc.item\n-        }\n-        with doc\n-    }\n-}\n-\n #[test]\n fn should_extract_type_docs() {\n     let doc = test::mk_doc("}]}