{"sha": "70980929b480d6c13e23d79ad8de2ff0afbce60c", "node_id": "C_kwDOAAsO6NoAKDcwOTgwOTI5YjQ4MGQ2YzEzZTIzZDc5YWQ4ZGUyZmYwYWZiY2U2MGM", "commit": {"author": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-06T19:24:33Z"}, "committer": {"name": "Nilstrieb", "email": "48135649+Nilstrieb@users.noreply.github.com", "date": "2023-06-06T19:24:33Z"}, "message": "Respect `RUST_BACKTRACE` for delayed bugs\n\nSometimes, especially with MIR validation, the backtraces from delayed\nbugs are noise and make it harder to look at them. Respect the\nenvironment variable and don't print it when the user doesn't want it.", "tree": {"sha": "5eafda170c15633e0b74c194371684f227be4a40", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5eafda170c15633e0b74c194371684f227be4a40"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/70980929b480d6c13e23d79ad8de2ff0afbce60c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/70980929b480d6c13e23d79ad8de2ff0afbce60c", "html_url": "https://github.com/rust-lang/rust/commit/70980929b480d6c13e23d79ad8de2ff0afbce60c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/70980929b480d6c13e23d79ad8de2ff0afbce60c/comments", "author": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Nilstrieb", "id": 48135649, "node_id": "MDQ6VXNlcjQ4MTM1NjQ5", "avatar_url": "https://avatars.githubusercontent.com/u/48135649?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Nilstrieb", "html_url": "https://github.com/Nilstrieb", "followers_url": "https://api.github.com/users/Nilstrieb/followers", "following_url": "https://api.github.com/users/Nilstrieb/following{/other_user}", "gists_url": "https://api.github.com/users/Nilstrieb/gists{/gist_id}", "starred_url": "https://api.github.com/users/Nilstrieb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Nilstrieb/subscriptions", "organizations_url": "https://api.github.com/users/Nilstrieb/orgs", "repos_url": "https://api.github.com/users/Nilstrieb/repos", "events_url": "https://api.github.com/users/Nilstrieb/events{/privacy}", "received_events_url": "https://api.github.com/users/Nilstrieb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e4106065bf1bb515935d5d024e8d9c86454e2b22", "url": "https://api.github.com/repos/rust-lang/rust/commits/e4106065bf1bb515935d5d024e8d9c86454e2b22", "html_url": "https://github.com/rust-lang/rust/commit/e4106065bf1bb515935d5d024e8d9c86454e2b22"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "7a297ea0d5f8285c18a54395ade361965c9a4bd7", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/70980929b480d6c13e23d79ad8de2ff0afbce60c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/70980929b480d6c13e23d79ad8de2ff0afbce60c/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=70980929b480d6c13e23d79ad8de2ff0afbce60c", "patch": "@@ -383,7 +383,7 @@ pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee, Noted};\n pub use diagnostic_impls::{\n     DiagnosticArgFromDisplay, DiagnosticSymbolList, LabelKind, SingleLabelManySpans,\n };\n-use std::backtrace::Backtrace;\n+use std::backtrace::{Backtrace, BacktraceStatus};\n \n /// A handler deals with errors and other compiler output.\n /// Certain errors (fatal, bug, unimpl) may cause immediate exit,\n@@ -1331,7 +1331,7 @@ impl HandlerInner {\n             // once *any* errors were emitted (and truncate `delayed_span_bugs`\n             // when an error is first emitted, also), but maybe there's a case\n             // in which that's not sound? otherwise this is really inefficient.\n-            let backtrace = std::backtrace::Backtrace::force_capture();\n+            let backtrace = std::backtrace::Backtrace::capture();\n             self.delayed_span_bugs\n                 .push(DelayedDiagnostic::with_backtrace(diagnostic.clone(), backtrace));\n \n@@ -1620,7 +1620,7 @@ impl HandlerInner {\n         if self.flags.report_delayed_bugs {\n             self.emit_diagnostic(&mut diagnostic);\n         }\n-        let backtrace = std::backtrace::Backtrace::force_capture();\n+        let backtrace = std::backtrace::Backtrace::capture();\n         self.delayed_good_path_bugs.push(DelayedDiagnostic::with_backtrace(diagnostic, backtrace));\n     }\n \n@@ -1739,7 +1739,17 @@ impl DelayedDiagnostic {\n     }\n \n     fn decorate(mut self) -> Diagnostic {\n-        self.inner.note(format!(\"delayed at {}\\n{}\", self.inner.emitted_at, self.note));\n+        match self.note.status() {\n+            BacktraceStatus::Captured => {\n+                self.inner.note(format!(\"delayed at {}\\n{}\", self.inner.emitted_at, self.note));\n+            }\n+            // Avoid the needless newline when no backtrace has been captured,\n+            // the display impl should just be a single line.\n+            _ => {\n+                self.inner.note(format!(\"delayed at {} - {}\", self.inner.emitted_at, self.note));\n+            }\n+        }\n+\n         self.inner\n     }\n }"}]}