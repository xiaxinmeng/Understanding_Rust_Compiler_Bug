{"sha": "5402ef3d2755bfd55668ad0c750a35eeb242f12f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0MDJlZjNkMjc1NWJmZDU1NjY4YWQwYzc1MGEzNWVlYjI0MmYxMmY=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-30T00:34:35Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-01-30T00:34:35Z"}, "message": "Merge branch 'devonhollowood-for-loop-over-option'\n\nConflicts:\n\tREADME.md", "tree": {"sha": "7eb8e5ef400fd716f6f3767a0970bdde1ef19a4c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7eb8e5ef400fd716f6f3767a0970bdde1ef19a4c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5402ef3d2755bfd55668ad0c750a35eeb242f12f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5402ef3d2755bfd55668ad0c750a35eeb242f12f", "html_url": "https://github.com/rust-lang/rust/commit/5402ef3d2755bfd55668ad0c750a35eeb242f12f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5402ef3d2755bfd55668ad0c750a35eeb242f12f/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5192956952dbf8b4b3ec073fc31d5d3caea7158a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5192956952dbf8b4b3ec073fc31d5d3caea7158a", "html_url": "https://github.com/rust-lang/rust/commit/5192956952dbf8b4b3ec073fc31d5d3caea7158a"}, {"sha": "405d7c691e2ad6b21e044b39c736b1e1a7db99cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/405d7c691e2ad6b21e044b39c736b1e1a7db99cf", "html_url": "https://github.com/rust-lang/rust/commit/405d7c691e2ad6b21e044b39c736b1e1a7db99cf"}], "stats": {"total": 134, "additions": 130, "deletions": 4}, "files": [{"sha": "ec1dd7f6dbb3a7f93cf665565d71912e79197b59", "filename": "README.md", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5402ef3d2755bfd55668ad0c750a35eeb242f12f/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/5402ef3d2755bfd55668ad0c750a35eeb242f12f/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=5402ef3d2755bfd55668ad0c750a35eeb242f12f", "patch": "@@ -6,7 +6,7 @@ A collection of lints to catch common mistakes and improve your Rust code.\n [Jump to usage instructions](#usage)\n \n ##Lints\n-There are 102 lints included in this crate:\n+There are 104 lints included in this crate:\n \n name                                                                                                           | default | meaning\n ---------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n@@ -37,6 +37,8 @@ name\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                         | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                     | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n [float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                         | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                   | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n+[for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                   | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                     | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                   | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n [inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                 | warn    | `#[inline(always)]` is a bad idea in most cases"}, {"sha": "82bd2d39a1294c469c33a87ce91d09d34b69ebbf", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5402ef3d2755bfd55668ad0c750a35eeb242f12f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402ef3d2755bfd55668ad0c750a35eeb242f12f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=5402ef3d2755bfd55668ad0c750a35eeb242f12f", "patch": "@@ -194,6 +194,8 @@ pub fn plugin_registrar(reg: &mut Registry) {\n         loops::EMPTY_LOOP,\n         loops::EXPLICIT_COUNTER_LOOP,\n         loops::EXPLICIT_ITER_LOOP,\n+        loops::FOR_LOOP_OVER_OPTION,\n+        loops::FOR_LOOP_OVER_RESULT,\n         loops::ITER_NEXT_LOOP,\n         loops::NEEDLESS_RANGE_LOOP,\n         loops::REVERSE_RANGE_LOOP,"}, {"sha": "74ff9edcb6b786acc185b72a1980f1db6b5cd5c1", "filename": "src/loops.rs", "status": "modified", "additions": 54, "deletions": 3, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5402ef3d2755bfd55668ad0c750a35eeb242f12f/src%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402ef3d2755bfd55668ad0c750a35eeb242f12f/src%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Floops.rs?ref=5402ef3d2755bfd55668ad0c750a35eeb242f12f", "patch": "@@ -11,7 +11,7 @@ use std::collections::{HashSet, HashMap};\n \n use utils::{snippet, span_lint, get_parent_expr, match_trait_method, match_type, in_external_macro, expr_block,\n             span_help_and_lint, is_integer_literal, get_enclosing_block};\n-use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH};\n+use utils::{HASHMAP_PATH, VEC_PATH, LL_PATH, OPTION_PATH, RESULT_PATH};\n \n /// **What it does:** This lint checks for looping over the range of `0..len` of some collection just to get the values by index. It is `Warn` by default.\n ///\n@@ -48,6 +48,26 @@ declare_lint!{ pub EXPLICIT_ITER_LOOP, Warn,\n declare_lint!{ pub ITER_NEXT_LOOP, Warn,\n                \"for-looping over `_.next()` which is probably not intended\" }\n \n+/// **What it does:** This lint checks for `for` loops over `Option` values. It is `Warn` by default.\n+///\n+/// **Why is this bad?** Readability. This is more clearly expressed as an `if let`.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `for x in option { .. }`. This should be `if let Some(x) = option { .. }`.\n+declare_lint!{ pub FOR_LOOP_OVER_OPTION, Warn,\n+               \"for-looping over an `Option`, which is more clearly expressed as an `if let`\" }\n+\n+/// **What it does:** This lint checks for `for` loops over `Result` values. It is `Warn` by default.\n+///\n+/// **Why is this bad?** Readability. This is more clearly expressed as an `if let`.\n+///\n+/// **Known problems:** None\n+///\n+/// **Example:** `for x in result { .. }`. This should be `if let Ok(x) = result { .. }`.\n+declare_lint!{ pub FOR_LOOP_OVER_RESULT, Warn,\n+               \"for-looping over a `Result`, which is more clearly expressed as an `if let`\" }\n+\n /// **What it does:** This lint detects `loop + match` combinations that are easier written as a `while let` loop. It is `Warn` by default.\n ///\n /// **Why is this bad?** The `while let` loop is usually shorter and more readable\n@@ -248,7 +268,7 @@ impl LateLintPass for LoopsPass {\n fn check_for_loop(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Expr, expr: &Expr) {\n     check_for_loop_range(cx, pat, arg, body, expr);\n     check_for_loop_reverse_range(cx, arg, expr);\n-    check_for_loop_explicit_iter(cx, arg, expr);\n+    check_for_loop_arg(cx, pat, arg, expr);\n     check_for_loop_explicit_counter(cx, arg, body, expr);\n }\n \n@@ -373,7 +393,8 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n     }\n }\n \n-fn check_for_loop_explicit_iter(cx: &LateContext, arg: &Expr, expr: &Expr) {\n+fn check_for_loop_arg(cx: &LateContext, pat: &Pat, arg: &Expr, expr: &Expr) {\n+    let mut next_loop_linted = false; // whether or not ITER_NEXT_LOOP lint was used\n     if let ExprMethodCall(ref method, _, ref args) = arg.node {\n         // just the receiver, no arguments\n         if args.len() == 1 {\n@@ -401,10 +422,40 @@ fn check_for_loop_explicit_iter(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                           expr.span,\n                           \"you are iterating over `Iterator::next()` which is an Option; this will compile but is \\\n                            probably not what you want\");\n+                next_loop_linted = true;\n             }\n         }\n     }\n+    if !next_loop_linted {\n+        check_arg_type(cx, pat, arg);\n+    }\n+}\n \n+/// Check for `for` loops over `Option`s and `Results`\n+fn check_arg_type(cx: &LateContext, pat: &Pat, arg: &Expr) {\n+    let ty = cx.tcx.expr_ty(arg);\n+    if match_type(cx, ty, &OPTION_PATH) {\n+        span_help_and_lint(\n+            cx,\n+            FOR_LOOP_OVER_OPTION,\n+            arg.span,\n+            &format!(\"for loop over `{0}`, which is an `Option`. This is more readably written as \\\n+                      an `if let` statement.\", snippet(cx, arg.span, \"_\")),\n+            &format!(\"consider replacing `for {0} in {1}` with `if let Some({0}) = {1}`\",\n+                     snippet(cx, pat.span, \"_\"), snippet(cx, arg.span, \"_\"))\n+        );\n+    }\n+    else if match_type(cx, ty, &RESULT_PATH) {\n+        span_help_and_lint(\n+            cx,\n+            FOR_LOOP_OVER_RESULT,\n+            arg.span,\n+            &format!(\"for loop over `{0}`, which is a `Result`. This is more readably written as \\\n+                      an `if let` statement.\", snippet(cx, arg.span, \"_\")),\n+            &format!(\"consider replacing `for {0} in {1}` with `if let Ok({0}) = {1}`\",\n+                     snippet(cx, pat.span, \"_\"), snippet(cx, arg.span, \"_\"))\n+        );\n+    }\n }\n \n fn check_for_loop_explicit_counter(cx: &LateContext, arg: &Expr, body: &Expr, expr: &Expr) {"}, {"sha": "1fcbbf54d1f24622c94229058a06510f769356e4", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 71, "deletions": 0, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/5402ef3d2755bfd55668ad0c750a35eeb242f12f/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5402ef3d2755bfd55668ad0c750a35eeb242f12f/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=5402ef3d2755bfd55668ad0c750a35eeb242f12f", "patch": "@@ -3,6 +3,75 @@\n \n use std::collections::*;\n \n+#[deny(clippy)]\n+fn for_loop_over_option_and_result() {\n+    let option = Some(1);\n+    let result = option.ok_or(\"x not found\");\n+    let v = vec![0,1,2];\n+\n+    // check FOR_LOOP_OVER_OPTION lint\n+\n+    for x in option {\n+        //~^ ERROR for loop over `option`, which is an `Option`.\n+        //~| HELP consider replacing `for x in option` with `if let Some(x) = option`\n+        println!(\"{}\", x);\n+    }\n+\n+    // check FOR_LOOP_OVER_RESULT lint\n+\n+    for x in result {\n+        //~^ ERROR for loop over `result`, which is a `Result`.\n+        //~| HELP consider replacing `for x in result` with `if let Ok(x) = result`\n+        println!(\"{}\", x);\n+    }\n+\n+    for x in option.ok_or(\"x not found\") {\n+        //~^ ERROR for loop over `option.ok_or(\"x not found\")`, which is a `Result`.\n+        //~| HELP consider replacing `for x in option.ok_or(\"x not found\")` with `if let Ok(x) = option.ok_or(\"x not found\")`\n+        println!(\"{}\", x);\n+    }\n+\n+    // make sure LOOP_OVER_NEXT lint takes precedence when next() is the last call in the chain\n+\n+    for x in v.iter().next() {\n+        //~^ ERROR you are iterating over `Iterator::next()` which is an Option\n+        println!(\"{}\", x);\n+    }\n+\n+    // make sure we lint when next() is not the last call in the chain\n+\n+    for x in v.iter().next().and(Some(0)) {\n+        //~^ ERROR for loop over `v.iter().next().and(Some(0))`, which is an `Option`\n+        //~| HELP consider replacing `for x in v.iter().next().and(Some(0))` with `if let Some(x) = v.iter().next().and(Some(0))`\n+        println!(\"{}\", x);\n+    }\n+\n+    for x in v.iter().next().ok_or(\"x not found\") {\n+        //~^ ERROR for loop over `v.iter().next().ok_or(\"x not found\")`, which is a `Result`\n+        //~| HELP consider replacing `for x in v.iter().next().ok_or(\"x not found\")` with `if let Ok(x) = v.iter().next().ok_or(\"x not found\")`\n+        println!(\"{}\", x);\n+    }\n+\n+    // check for false positives\n+\n+    // for loop false positive\n+    for x in v {\n+        println!(\"{}\", x);\n+    }\n+\n+    // while let false positive for Option\n+    while let Some(x) = option {\n+        println!(\"{}\", x);\n+        break;\n+    }\n+\n+    // while let false positive for Option\n+    while let Ok(x) = result {\n+        println!(\"{}\", x);\n+        break;\n+    }\n+}\n+\n struct Unrelated(Vec<u8>);\n impl Unrelated {\n     fn next(&self) -> std::slice::Iter<u8> {\n@@ -209,4 +278,6 @@ fn main() {\n     let mut index = 0;\n     for _v in &vec { index += 1 }\n     println!(\"index: {}\", index);\n+\n+    for_loop_over_option_and_result();\n }"}]}