{"sha": "29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZWQ0OWZiMGFlYWI0NDRhZGNmZTE2ZWYzZDA0ZTVlOTEwZmIwOGQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T20:07:35Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-10-15T20:07:35Z"}, "message": "Auto merge of #45215 - alexcrichton:thin-lto-reference-more, r=michaelwoerister\n\nrustc: Fix some ThinLTO internalization\n\nFirst the `addPreservedGUID` function forgot to take care of \"alias\" summaries.\nI'm not 100% sure what this is but the current code now matches upstream. Next\nthe `computeDeadSymbols` return value wasn't actually being used, but it needed\nto be used! Together these should...\n\nCloses #45195", "tree": {"sha": "612a8d9d8aab8b4498c7e57d179f63e499f18663", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/612a8d9d8aab8b4498c7e57d179f63e499f18663"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "html_url": "https://github.com/rust-lang/rust/commit/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e", "html_url": "https://github.com/rust-lang/rust/commit/c4f489af912bea9ca9f0fa0378d7c0acacf6c59e"}, {"sha": "2e1c4cd0f51c28b8cfc003fda67f6641bb4335f2", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e1c4cd0f51c28b8cfc003fda67f6641bb4335f2", "html_url": "https://github.com/rust-lang/rust/commit/2e1c4cd0f51c28b8cfc003fda67f6641bb4335f2"}], "stats": {"total": 77, "additions": 67, "deletions": 10}, "files": [{"sha": "01d3d656dfe19677600d6e9fd2f419de4af0934e", "filename": "src/librustc_trans/back/lto.rs", "status": "modified", "additions": 19, "deletions": 1, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Flibrustc_trans%2Fback%2Flto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Flibrustc_trans%2Fback%2Flto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Flto.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "patch": "@@ -130,6 +130,7 @@ pub fn run(cgcx: &CodegenContext,\n         .filter_map(symbol_filter)\n         .collect::<Vec<CString>>();\n     timeline.record(\"whitelist\");\n+    info!(\"{} symbols to preserve in this crate\", symbol_white_list.len());\n \n     // If we're performing LTO for the entire crate graph, then for each of our\n     // upstream dependencies, find the corresponding rlib and load the bitcode\n@@ -437,7 +438,24 @@ fn run_pass_manager(cgcx: &CodegenContext,\n         assert!(!pass.is_null());\n         llvm::LLVMRustAddPass(pm, pass);\n \n-        with_llvm_pmb(llmod, config, &mut |b| {\n+        // When optimizing for LTO we don't actually pass in `-O0`, but we force\n+        // it to always happen at least with `-O1`.\n+        //\n+        // With ThinLTO we mess around a lot with symbol visibility in a way\n+        // that will actually cause linking failures if we optimize at O0 which\n+        // notable is lacking in dead code elimination. To ensure we at least\n+        // get some optimizations and correctly link we forcibly switch to `-O1`\n+        // to get dead code elimination.\n+        //\n+        // Note that in general this shouldn't matter too much as you typically\n+        // only turn on ThinLTO when you're compiling with optimizations\n+        // otherwise.\n+        let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n+        let opt_level = match opt_level {\n+            llvm::CodeGenOptLevel::None => llvm::CodeGenOptLevel::Less,\n+            level => level,\n+        };\n+        with_llvm_pmb(llmod, config, opt_level, &mut |b| {\n             if thin {\n                 if !llvm::LLVMRustPassManagerBuilderPopulateThinLTOPassManager(b, pm) {\n                     panic!(\"this version of LLVM does not support ThinLTO\");"}, {"sha": "f7e0ad029afafd8a87717553e4340db00c35c38a", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "patch": "@@ -217,7 +217,7 @@ pub struct ModuleConfig {\n     passes: Vec<String>,\n     /// Some(level) to optimize at a certain level, or None to run\n     /// absolutely no optimizations (used for the metadata module).\n-    opt_level: Option<llvm::CodeGenOptLevel>,\n+    pub opt_level: Option<llvm::CodeGenOptLevel>,\n \n     /// Some(level) to optimize binary size, or None to not affect program size.\n     opt_size: Option<llvm::CodeGenOptSize>,\n@@ -507,7 +507,8 @@ unsafe fn optimize(cgcx: &CodegenContext,\n         if !config.no_prepopulate_passes {\n             llvm::LLVMRustAddAnalysisPasses(tm, fpm, llmod);\n             llvm::LLVMRustAddAnalysisPasses(tm, mpm, llmod);\n-            with_llvm_pmb(llmod, &config, &mut |b| {\n+            let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n+            with_llvm_pmb(llmod, &config, opt_level, &mut |b| {\n                 llvm::LLVMPassManagerBuilderPopulateFunctionPassManager(b, fpm);\n                 llvm::LLVMPassManagerBuilderPopulateModulePassManager(b, mpm);\n             })\n@@ -1842,16 +1843,17 @@ pub fn run_assembler(sess: &Session, outputs: &OutputFilenames) {\n \n pub unsafe fn with_llvm_pmb(llmod: ModuleRef,\n                             config: &ModuleConfig,\n+                            opt_level: llvm::CodeGenOptLevel,\n                             f: &mut FnMut(llvm::PassManagerBuilderRef)) {\n     // Create the PassManagerBuilder for LLVM. We configure it with\n     // reasonable defaults and prepare it to actually populate the pass\n     // manager.\n     let builder = llvm::LLVMPassManagerBuilderCreate();\n-    let opt_level = config.opt_level.unwrap_or(llvm::CodeGenOptLevel::None);\n     let opt_size = config.opt_size.unwrap_or(llvm::CodeGenOptSizeNone);\n     let inline_threshold = config.inline_threshold;\n \n-    llvm::LLVMRustConfigurePassManagerBuilder(builder, opt_level,\n+    llvm::LLVMRustConfigurePassManagerBuilder(builder,\n+                                              opt_level,\n                                               config.merge_functions,\n                                               config.vectorize_slp,\n                                               config.vectorize_loop);"}, {"sha": "1287b94159a57f23ff80fbe32b395a946f250d9c", "filename": "src/rustllvm/PassWrapper.cpp", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Frustllvm%2FPassWrapper.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Frustllvm%2FPassWrapper.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustllvm%2FPassWrapper.cpp?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "patch": "@@ -901,9 +901,7 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n       }\n     }\n \n-    GlobalValueSummary *GVSummary = Summary.get();\n-    if (isa<FunctionSummary>(GVSummary)) {\n-      FunctionSummary *FS = cast<FunctionSummary>(GVSummary);\n+    if (auto *FS = dyn_cast<FunctionSummary>(Summary.get())) {\n       for (auto &Call: FS->calls()) {\n         if (Call.first.isGUID()) {\n           addPreservedGUID(Index, Preserved, Call.first.getGUID());\n@@ -916,6 +914,10 @@ addPreservedGUID(const ModuleSummaryIndex &Index,\n         addPreservedGUID(Index, Preserved, GUID);\n       }\n     }\n+    if (auto *AS = dyn_cast<AliasSummary>(Summary.get())) {\n+      auto GUID = AS->getAliasee().getOriginalName();\n+      addPreservedGUID(Index, Preserved, GUID);\n+    }\n   }\n }\n \n@@ -963,12 +965,13 @@ LLVMRustCreateThinLTOData(LLVMRustThinLTOModule *modules,\n   // combined index\n   //\n   // This is copied from `lib/LTO/ThinLTOCodeGenerator.cpp`\n-  computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n+  auto DeadSymbols = computeDeadSymbols(Ret->Index, Ret->GUIDPreservedSymbols);\n   ComputeCrossModuleImport(\n     Ret->Index,\n     Ret->ModuleToDefinedGVSummaries,\n     Ret->ImportLists,\n-    Ret->ExportLists\n+    Ret->ExportLists,\n+    &DeadSymbols\n   );\n \n   // Resolve LinkOnce/Weak symbols, this has to be computed early be cause it"}, {"sha": "cdb3f49cae88beb68f73134ec2fa53f25dcfe081", "filename": "src/test/run-pass/thinlto/auxiliary/dylib.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fdylib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fdylib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fdylib.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: -Z thinlto -C codegen-units=8\n+\n+#[inline]\n+pub fn foo(b: u8) {\n+    b.to_string();\n+}"}, {"sha": "ccbb0e7a7186332cd7101a834e46352e50777bc8", "filename": "src/test/run-pass/thinlto/auxiliary/thin-lto-inlines-aux.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fthin-lto-inlines-aux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fthin-lto-inlines-aux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fauxiliary%2Fthin-lto-inlines-aux.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "previous_filename": "src/test/run-pass/auxiliary/thin-lto-inlines-aux.rs"}, {"sha": "3f54519d0d8ceb23a17463a84419a31065a0ce73", "filename": "src/test/run-pass/thinlto/dylib-works.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fdylib-works.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:dylib.rs\n+// min-llvm-version 4.0\n+\n+extern crate dylib;\n+\n+fn main() {\n+    dylib::foo(1);\n+}"}, {"sha": "3135a682d869d827f2133d1370cfca69f3d52776", "filename": "src/test/run-pass/thinlto/thin-lto-inlines.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "previous_filename": "src/test/run-pass/thin-lto-inlines.rs"}, {"sha": "ed899d2b115b6b2c80cddebe804cf49df8913c3a", "filename": "src/test/run-pass/thinlto/thin-lto-inlines2.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29ed49fb0aeab444adcfe16ef3d04e5e910fb08d/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fthinlto%2Fthin-lto-inlines2.rs?ref=29ed49fb0aeab444adcfe16ef3d04e5e910fb08d", "previous_filename": "src/test/run-pass/thin-lto-inlines2.rs"}]}