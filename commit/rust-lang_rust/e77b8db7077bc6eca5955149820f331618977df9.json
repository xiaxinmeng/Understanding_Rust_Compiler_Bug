{"sha": "e77b8db7077bc6eca5955149820f331618977df9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3N2I4ZGI3MDc3YmM2ZWNhNTk1NTE0OTgyMGYzMzE2MTg5NzdkZjk=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-16T22:02:46Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-01-17T05:12:34Z"}, "message": "rustdoc: Convert fn return type to retdoc record", "tree": {"sha": "6dcb935d031f3ca123deb39080d9ac7820af28cc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6dcb935d031f3ca123deb39080d9ac7820af28cc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e77b8db7077bc6eca5955149820f331618977df9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e77b8db7077bc6eca5955149820f331618977df9", "html_url": "https://github.com/rust-lang/rust/commit/e77b8db7077bc6eca5955149820f331618977df9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e77b8db7077bc6eca5955149820f331618977df9/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63dcc64275134a7f20628fc564bffcf510efff87", "url": "https://api.github.com/repos/rust-lang/rust/commits/63dcc64275134a7f20628fc564bffcf510efff87", "html_url": "https://github.com/rust-lang/rust/commit/63dcc64275134a7f20628fc564bffcf510efff87"}], "stats": {"total": 20, "additions": 14, "deletions": 6}, "files": [{"sha": "fc520ee4d3a230b5eae877cfdb523f789aebab41", "filename": "src/rustdoc/attr_parser.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fattr_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fattr_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fattr_parser.rs?ref=e77b8db7077bc6eca5955149820f331618977df9", "patch": "@@ -112,7 +112,10 @@ fn parse_fn_(\n         name: name,\n         brief: _brief,\n         desc: desc,\n-        return: return,\n+        return: some({\n+            desc: return,\n+            ty: none,\n+        }),\n         args: argdocs }\n }\n \n@@ -176,7 +179,7 @@ mod tests {\n         let source = \"#[doc(return = \\\"return value\\\")]\";\n         let attrs = parse_attributes(source);\n         let doc = parse_fn(\"f\", 0, attrs);\n-        assert doc.return == some(\"return value\");\n+        assert option::get(doc.return).desc == some(\"return value\");\n     }\n \n     #[test]"}, {"sha": "51db29d3526552a53523b28c978cb67d47633fab", "filename": "src/rustdoc/doc.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fdoc.rs?ref=e77b8db7077bc6eca5955149820f331618977df9", "patch": "@@ -15,10 +15,15 @@ type fndoc = ~{\n     name: str,\n     brief: str,\n     desc: option::t<str>,\n-    return: option::t<str>,\n+    return: option<retdoc>,\n     args: [(str, str)]\n };\n \n+type retdoc = {\n+    desc: option<str>,\n+    ty: option<str>\n+};\n+\n // Just to break the structural recursive types\n tag modlist = [moddoc];\n tag fnlist = [fndoc];"}, {"sha": "81945969e16951a3ea90e45d399f803c4cf3dbd5", "filename": "src/rustdoc/gen.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fgen.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e77b8db7077bc6eca5955149820f331618977df9/src%2Frustdoc%2Fgen.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frustdoc%2Fgen.rs?ref=e77b8db7077bc6eca5955149820f331618977df9", "patch": "@@ -100,12 +100,12 @@ fn write_fndoc(ctxt: ctxt, ident: str, doc: doc::fndoc, decl: ast::fn_decl) {\n     }\n     for (arg, desc) in doc.args {\n         ctxt.w.write_str(\"### Argument `\" + arg + \"`: \");\n-        ctxt.w.write_str(desc);\n+        ctxt.w.write_str(desc)\n     }\n     ctxt.w.write_line(\"### Returns `\" + pprust::ty_to_str(decl.output) + \"`\");\n     alt doc.return {\n-        some(_r) { ctxt.w.write_line(_r); }\n-        none. { }\n+      some({desc: some(d), _}) { ctxt.w.write_line(d); }\n+      _ { }\n     }\n }\n "}]}