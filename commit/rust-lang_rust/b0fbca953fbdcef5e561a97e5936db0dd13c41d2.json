{"sha": "b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZmJjYTk1M2ZiZGNlZjVlNTYxYTk3ZTU5MzZkYjBkZDEzYzQxZDI=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2018-12-19T12:49:32Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2019-03-15T11:25:10Z"}, "message": "rustc: integrate LocalPathPrinter's behavior into FmtPrinter.", "tree": {"sha": "dbf2ea07d50e1073e5d48af8ab66f5c47d5df2e5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dbf2ea07d50e1073e5d48af8ab66f5c47d5df2e5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "html_url": "https://github.com/rust-lang/rust/commit/b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0fbca953fbdcef5e561a97e5936db0dd13c41d2/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f8aaa04e02c74209e3ea355d8888cbc59a8fb64", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f8aaa04e02c74209e3ea355d8888cbc59a8fb64", "html_url": "https://github.com/rust-lang/rust/commit/9f8aaa04e02c74209e3ea355d8888cbc59a8fb64"}], "stats": {"total": 102, "additions": 63, "deletions": 39}, "files": [{"sha": "de0c3ee7fff8e8bd70c01745c484db484b39ab4a", "filename": "src/librustc/ty/print.rs", "status": "modified", "additions": 49, "deletions": 18, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b0fbca953fbdcef5e561a97e5936db0dd13c41d2/src%2Flibrustc%2Fty%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fbca953fbdcef5e561a97e5936db0dd13c41d2/src%2Flibrustc%2Fty%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint.rs?ref=b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "patch": "@@ -11,7 +11,7 @@ use rustc_data_structures::fx::FxHashSet;\n use syntax::symbol::InternedString;\n \n use std::cell::Cell;\n-use std::fmt;\n+use std::fmt::{self, Write as _};\n use std::ops::Deref;\n \n thread_local! {\n@@ -145,6 +145,7 @@ pub trait Print<'tcx, P> {\n pub trait Printer: Sized {\n     type Path;\n \n+    #[must_use]\n     fn print_def_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         def_id: DefId,\n@@ -153,6 +154,7 @@ pub trait Printer: Sized {\n     ) -> Self::Path {\n         self.default_print_def_path(def_id, substs, ns)\n     }\n+    #[must_use]\n     fn print_impl_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n         impl_def_id: DefId,\n@@ -162,15 +164,26 @@ pub trait Printer: Sized {\n         self.default_print_impl_path(impl_def_id, substs, ns)\n     }\n \n+    #[must_use]\n     fn path_crate(self: &mut PrintCx<'_, '_, '_, Self>, cnum: CrateNum) -> Self::Path;\n+    #[must_use]\n     fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path;\n+    #[must_use]\n     fn path_append(\n         self: &mut PrintCx<'_, '_, '_, Self>,\n         path: Self::Path,\n         text: &str,\n     ) -> Self::Path;\n }\n \n+#[must_use]\n+pub struct PrettyPath {\n+    pub empty: bool,\n+}\n+\n+/// Trait for printers that pretty-print using `fmt::Write` to the printer.\n+pub trait PrettyPrinter: Printer<Path = Result<PrettyPath, fmt::Error>> + fmt::Write {}\n+\n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     // HACK(eddyb) get rid of `def_path_str` and/or pass `Namespace` explicitly always\n     // (but also some things just print a `DefId` generally so maybe we need this?)\n@@ -202,7 +215,10 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         if FORCE_ABSOLUTE.with(|force| force.get()) {\n             PrintCx::new(self, AbsolutePathPrinter).print_def_path(def_id, substs, ns)\n         } else {\n-            PrintCx::new(self, LocalPathPrinter).print_def_path(def_id, substs, ns)\n+            let mut s = String::new();\n+            let _ = PrintCx::new(self, FmtPrinter { fmt: &mut s })\n+                .print_def_path(def_id, substs, ns);\n+            s\n         }\n     }\n \n@@ -442,10 +458,7 @@ pub struct FmtPrinter<F: fmt::Write> {\n     pub fmt: F,\n }\n \n-// FIXME(eddyb) integrate into `FmtPrinter`.\n-struct LocalPathPrinter;\n-\n-impl LocalPathPrinter {\n+impl<F: fmt::Write> FmtPrinter<F> {\n     /// If possible, this returns a global path resolving to `def_id` that is visible\n     /// from at least one local module and returns true. If the crate defining `def_id` is\n     /// declared with an `extern crate`, the path is guaranteed to use the `extern crate`.\n@@ -582,8 +595,14 @@ impl LocalPathPrinter {\n     }\n }\n \n-impl Printer for LocalPathPrinter {\n-    type Path = String;\n+impl<F: fmt::Write> fmt::Write for FmtPrinter<F> {\n+    fn write_str(&mut self, s: &str) -> fmt::Result {\n+        self.fmt.write_str(s)\n+    }\n+}\n+\n+impl<F: fmt::Write> Printer for FmtPrinter<F> {\n+    type Path = Result<PrettyPath, fmt::Error>;\n \n     fn print_def_path(\n         self: &mut PrintCx<'_, '_, 'tcx, Self>,\n@@ -612,7 +631,6 @@ impl Printer for LocalPathPrinter {\n             // If no type info is available, fall back to\n             // pretty printing some span information. This should\n             // only occur very early in the compiler pipeline.\n-            // FIXME(eddyb) this should just be using `tcx.def_span(impl_def_id)`\n             let parent_def_id = self.tcx.parent(impl_def_id).unwrap();\n             let path = self.print_def_path(parent_def_id, None, ns);\n             let span = self.tcx.def_span(impl_def_id);\n@@ -627,26 +645,39 @@ impl Printer for LocalPathPrinter {\n             if self.tcx.sess.rust_2018() {\n                 // We add the `crate::` keyword on Rust 2018, only when desired.\n                 if SHOULD_PREFIX_WITH_CRATE.with(|flag| flag.get()) {\n-                    return keywords::Crate.name().to_string();\n+                    write!(self.printer, \"{}\", keywords::Crate.name())?;\n+                    return Ok(PrettyPath { empty: false });\n                 }\n             }\n-            String::new()\n+            Ok(PrettyPath { empty: true })\n         } else {\n-            self.tcx.crate_name(cnum).to_string()\n+            write!(self.printer, \"{}\", self.tcx.crate_name(cnum))?;\n+            Ok(PrettyPath { empty: false })\n         }\n     }\n     fn path_impl(self: &mut PrintCx<'_, '_, '_, Self>, text: &str) -> Self::Path {\n-        text.to_string()\n+        write!(self.printer, \"{}\", text)?;\n+        Ok(PrettyPath { empty: false })\n     }\n     fn path_append(\n         self: &mut PrintCx<'_, '_, '_, Self>,\n-        mut path: Self::Path,\n+        path: Self::Path,\n         text: &str,\n     ) -> Self::Path {\n-        if !path.is_empty() {\n-            path.push_str(\"::\");\n+        let path = path?;\n+\n+        // FIXME(eddyb) this shouldn't happen, but is currently\n+        // the case for `extern { ... }` \"foreign modules\".\n+        if text.is_empty() {\n+            return Ok(path);\n         }\n-        path.push_str(text);\n-        path\n+\n+        if !path.empty {\n+            write!(self.printer, \"::\")?;\n+        }\n+        write!(self.printer, \"{}\", text)?;\n+        Ok(PrettyPath { empty: false })\n     }\n }\n+\n+impl<F: fmt::Write> PrettyPrinter for FmtPrinter<F> {}"}, {"sha": "39e26f13233b34e360fd3c42efbe62d779c6ac33", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/b0fbca953fbdcef5e561a97e5936db0dd13c41d2/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0fbca953fbdcef5e561a97e5936db0dd13c41d2/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=b0fbca953fbdcef5e561a97e5936db0dd13c41d2", "patch": "@@ -10,11 +10,11 @@ use crate::ty::{Param, Bound, RawPtr, Ref, Never, Tuple};\n use crate::ty::{Closure, Generator, GeneratorWitness, Foreign, Projection, Opaque};\n use crate::ty::{Placeholder, UnnormalizedProjection, Dynamic, Int, Uint, Infer};\n use crate::ty::{self, ParamConst, Ty, TypeFoldable};\n-use crate::ty::print::{FmtPrinter, PrintCx, Print};\n+use crate::ty::print::{FmtPrinter, PrettyPrinter, PrintCx, Print};\n use crate::mir::interpret::ConstValue;\n \n use std::cell::Cell;\n-use std::fmt;\n+use std::fmt::{self, Write as _};\n use std::iter;\n use std::usize;\n \n@@ -193,18 +193,18 @@ macro_rules! gen_display_debug {\n }\n macro_rules! gen_print_impl {\n     ( ($($x:tt)+) $target:ty, ($self:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl<$($x)+, F: fmt::Write> Print<'tcx, FmtPrinter<F>> for $target {\n+        impl<$($x)+, P: PrettyPrinter> Print<'tcx, P> for $target {\n             type Output = fmt::Result;\n-            fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, FmtPrinter<F>>) -> fmt::Result {\n+            fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, P>) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n             }\n         }\n     };\n     ( () $target:ty, ($self:ident, $cx:ident) $disp:block $dbg:block ) => {\n-        impl<F: fmt::Write> Print<'tcx, FmtPrinter<F>> for $target {\n+        impl<P: PrettyPrinter> Print<'tcx, P> for $target {\n             type Output = fmt::Result;\n-            fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, FmtPrinter<F>>) -> fmt::Result {\n+            fn print(&$self, $cx: &mut PrintCx<'_, '_, 'tcx, P>) -> fmt::Result {\n                 if $cx.is_debug $dbg\n                 else $disp\n             }\n@@ -235,7 +235,7 @@ macro_rules! define_print {\n     ( $generic:tt $target:ty,\n       ($self:ident, $cx:ident) { display $disp:block } ) => {\n         gen_print_impl! { $generic $target, ($self, $cx) yes $disp no {\n-            write!($cx.printer.fmt, \"{:?}\", $self)\n+            write!($cx.printer, \"{:?}\", $self)\n         } }\n     };\n }\n@@ -246,7 +246,7 @@ macro_rules! define_print_multi {\n }\n macro_rules! print_inner {\n     ( $cx:expr, write ($($data:expr),+) ) => {\n-        write!($cx.printer.fmt, $($data),+)\n+        write!($cx.printer, $($data),+)\n     };\n     ( $cx:expr, $kind:ident ($data:expr) ) => {\n         $data.$kind($cx)\n@@ -258,7 +258,7 @@ macro_rules! print {\n     };\n }\n \n-impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n+impl<P: PrettyPrinter> PrintCx<'a, 'gcx, 'tcx, P> {\n     fn fn_sig(\n         &mut self,\n         inputs: &[Ty<'tcx>],\n@@ -409,7 +409,7 @@ impl<F: fmt::Write> PrintCx<'a, 'gcx, 'tcx, FmtPrinter<F>> {\n     }\n \n     fn in_binder<T>(&mut self, value: &ty::Binder<T>) -> fmt::Result\n-        where T: Print<'tcx, FmtPrinter<F>, Output = fmt::Result> + TypeFoldable<'tcx>\n+        where T: Print<'tcx, P, Output = fmt::Result> + TypeFoldable<'tcx>\n     {\n         fn name_by_region_index(index: usize) -> InternedString {\n             match index {\n@@ -494,13 +494,6 @@ pub fn parameterized<F: fmt::Write>(\n     })\n }\n \n-impl<'a, 'tcx, P, T: Print<'tcx, P>> Print<'tcx, P> for &'a T {\n-    type Output = T::Output;\n-    fn print(&self, cx: &mut PrintCx<'_, '_, 'tcx, P>) -> Self::Output {\n-        (*self).print(cx)\n-    }\n-}\n-\n define_print! {\n     ('tcx) &'tcx ty::List<ty::ExistentialPredicate<'tcx>>, (self, cx) {\n         display {\n@@ -581,15 +574,15 @@ impl fmt::Debug for ty::GenericParamDef {\n \n impl fmt::Debug for ty::TraitDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |cx| {\n+        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n             print!(cx, write(\"{}\", cx.tcx.def_path_str(self.def_id)))\n         })\n     }\n }\n \n impl fmt::Debug for ty::AdtDef {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |cx| {\n+        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n             print!(cx, write(\"{}\", cx.tcx.def_path_str(self.did)))\n         })\n     }\n@@ -605,7 +598,7 @@ impl<'tcx> fmt::Debug for ty::ClosureUpvar<'tcx> {\n \n impl fmt::Debug for ty::UpvarId {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        PrintCx::with(FmtPrinter { fmt: f }, |cx| {\n+        PrintCx::with(FmtPrinter { fmt: f }, |mut cx| {\n             print!(cx, write(\"UpvarId({:?};`{}`;{:?})\",\n                 self.var_path.hir_id,\n                 cx.tcx.hir().name_by_hir_id(self.var_path.hir_id),\n@@ -928,7 +921,7 @@ define_print! {\n define_print! {\n     () ty::Variance, (self, cx) {\n         debug {\n-            cx.printer.fmt.write_str(match *self {\n+            cx.printer.write_str(match *self {\n                 ty::Covariant => \"+\",\n                 ty::Contravariant => \"-\",\n                 ty::Invariant => \"o\","}]}