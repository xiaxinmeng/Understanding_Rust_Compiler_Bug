{"sha": "4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "node_id": "C_kwDOAAsO6NoAKDRjODBmNTBmYzZkY2U0ZTM1ZWViZTFiZWFhZGQ1ZmMzZWNmZTZmNTI", "commit": {"author": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-10-30T19:38:37Z"}, "committer": {"name": "Jhonny Bill Mena", "email": "jhonnybillm@gmail.com", "date": "2022-11-04T05:17:02Z"}, "message": "UPDATE - Complete link.rs migration to new diagnostics infraestructure", "tree": {"sha": "a967a73204feb63b25c27c40971ed00cd1680665", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a967a73204feb63b25c27c40971ed00cd1680665"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "html_url": "https://github.com/rust-lang/rust/commit/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/comments", "author": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JhonnyBillM", "id": 18747072, "node_id": "MDQ6VXNlcjE4NzQ3MDcy", "avatar_url": "https://avatars.githubusercontent.com/u/18747072?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JhonnyBillM", "html_url": "https://github.com/JhonnyBillM", "followers_url": "https://api.github.com/users/JhonnyBillM/followers", "following_url": "https://api.github.com/users/JhonnyBillM/following{/other_user}", "gists_url": "https://api.github.com/users/JhonnyBillM/gists{/gist_id}", "starred_url": "https://api.github.com/users/JhonnyBillM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JhonnyBillM/subscriptions", "organizations_url": "https://api.github.com/users/JhonnyBillM/orgs", "repos_url": "https://api.github.com/users/JhonnyBillM/repos", "events_url": "https://api.github.com/users/JhonnyBillM/events{/privacy}", "received_events_url": "https://api.github.com/users/JhonnyBillM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6718ea1cff98da785c10079cac1c1ecc30c12d52", "url": "https://api.github.com/repos/rust-lang/rust/commits/6718ea1cff98da785c10079cac1c1ecc30c12d52", "html_url": "https://github.com/rust-lang/rust/commit/6718ea1cff98da785c10079cac1c1ecc30c12d52"}], "stats": {"total": 308, "additions": 227, "deletions": 81}, "files": [{"sha": "4c58d0b53f08d65c512c1cfd59e1abaac21b4760", "filename": "compiler/rustc_codegen_ssa/src/back/link.rs", "status": "modified", "additions": 43, "deletions": 80, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flink.rs?ref=4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "patch": "@@ -919,29 +919,17 @@ fn link_natively<'a>(\n                         )\n                         .is_some();\n \n-                        sess.note_without_error(\"`link.exe` returned an unexpected error\");\n+                        sess.emit_note(errors::LinkExeUnexpectedError);\n                         if is_vs_installed && has_linker {\n                             // the linker is broken\n-                            sess.note_without_error(\n-                                \"the Visual Studio build tools may need to be repaired \\\n-                                using the Visual Studio installer\",\n-                            );\n-                            sess.note_without_error(\n-                                \"or a necessary component may be missing from the \\\n-                                \\\"C++ build tools\\\" workload\",\n-                            );\n+                            sess.emit_note(errors::RepairVSBuildTools);\n+                            sess.emit_note(errors::MissingCppBuildToolComponent);\n                         } else if is_vs_installed {\n                             // the linker is not installed\n-                            sess.note_without_error(\n-                                \"in the Visual Studio installer, ensure the \\\n-                                \\\"C++ build tools\\\" workload is selected\",\n-                            );\n+                            sess.emit_note(errors::SelectCppBuildToolWorkload);\n                         } else {\n                             // visual studio is not installed\n-                            sess.note_without_error(\n-                                \"you may need to install Visual Studio build tools with the \\\n-                                \\\"C++ build tools\\\" workload\",\n-                            );\n+                            sess.emit_note(errors::VisualStudioNotInstalled);\n                         }\n                     }\n                 }\n@@ -954,35 +942,20 @@ fn link_natively<'a>(\n         Err(e) => {\n             let linker_not_found = e.kind() == io::ErrorKind::NotFound;\n \n-            let mut linker_error = {\n-                if linker_not_found {\n-                    sess.struct_err(&format!(\"linker `{}` not found\", linker_path.display()))\n-                } else {\n-                    sess.struct_err(&format!(\n-                        \"could not exec the linker `{}`\",\n-                        linker_path.display()\n-                    ))\n-                }\n-            };\n-\n-            linker_error.note(&e.to_string());\n-\n-            if !linker_not_found {\n-                linker_error.note(&format!(\"{:?}\", &cmd));\n+            if linker_not_found {\n+                sess.emit_err(errors::LinkerNotFound { linker_path, error: e });\n+            } else {\n+                sess.emit_err(errors::UnableToExeLinker {\n+                    linker_path,\n+                    error: e,\n+                    command_formatted: format!(\"{:?}\", &cmd),\n+                });\n             }\n \n-            linker_error.emit();\n-\n             if sess.target.is_like_msvc && linker_not_found {\n-                sess.note_without_error(\n-                    \"the msvc targets depend on the msvc linker \\\n-                     but `link.exe` was not found\",\n-                );\n-                sess.note_without_error(\n-                    \"please ensure that Visual Studio 2017 or later, or Build Tools \\\n-                     for Visual Studio were installed with the Visual C++ option.\",\n-                );\n-                sess.note_without_error(\"VS Code is a different product, and is not sufficient.\");\n+                sess.emit_note(errors::MsvcMissingLinker);\n+                sess.emit_note(errors::CheckInstalledVisualStudio);\n+                sess.emit_note(errors::UnsufficientVSCodeProduct);\n             }\n             sess.abort_if_errors();\n         }\n@@ -1007,15 +980,13 @@ fn link_natively<'a>(\n                     if !prog.status.success() {\n                         let mut output = prog.stderr.clone();\n                         output.extend_from_slice(&prog.stdout);\n-                        sess.struct_warn(&format!(\n-                            \"processing debug info with `dsymutil` failed: {}\",\n-                            prog.status\n-                        ))\n-                        .note(&escape_string(&output))\n-                        .emit();\n+                        sess.emit_warning(errors::ProcessingDymutilFailed {\n+                            status: prog.status,\n+                            output: escape_string(&output),\n+                        });\n                     }\n                 }\n-                Err(e) => sess.fatal(&format!(\"unable to run `dsymutil`: {}\", e)),\n+                Err(error) => sess.emit_fatal(errors::UnableToRunDsymutil { error }),\n             }\n         }\n \n@@ -1092,21 +1063,21 @@ fn strip_symbols_with_external_utility<'a>(\n             if !prog.status.success() {\n                 let mut output = prog.stderr.clone();\n                 output.extend_from_slice(&prog.stdout);\n-                sess.struct_warn(&format!(\n-                    \"stripping debug info with `{}` failed: {}\",\n-                    util, prog.status\n-                ))\n-                .note(&escape_string(&output))\n-                .emit();\n+                sess.emit_warning(errors::StrippingDebuInfoFailed {\n+                    util,\n+                    status: prog.status,\n+                    output: escape_string(&output),\n+                });\n             }\n         }\n-        Err(e) => sess.fatal(&format!(\"unable to run `{}`: {}\", util, e)),\n+        Err(error) => sess.emit_fatal(errors::UnableToRun { util, error }),\n     }\n }\n \n fn escape_string(s: &[u8]) -> String {\n     match str::from_utf8(s) {\n         Ok(s) => s.to_owned(),\n+        // FIXME: return a type that can conform to IntoDiagnosticArg\n         Err(_) => format!(\"Non-UTF-8 output: {}\", s.escape_ascii()),\n     }\n }\n@@ -1251,7 +1222,7 @@ pub fn linker_and_flavor(sess: &Session) -> (PathBuf, LinkerFlavor) {\n             )),\n             (Some(linker), None) => {\n                 let stem = linker.file_stem().and_then(|stem| stem.to_str()).unwrap_or_else(|| {\n-                    sess.fatal(\"couldn't extract file stem from specified linker\")\n+                    sess.emit_fatal(errors::LinkerFileStem);\n                 });\n \n                 let flavor = if stem == \"emcc\" {\n@@ -1378,13 +1349,9 @@ fn print_native_static_libs(sess: &Session, all_native_libs: &[NativeLib]) {\n         })\n         .collect();\n     if !lib_args.is_empty() {\n-        sess.note_without_error(\n-            \"Link against the following native artifacts when linking \\\n-                                 against this static library. The order and any duplication \\\n-                                 can be significant on some platforms.\",\n-        );\n+        sess.emit_note(errors::StaticLibraryNativeArtifacts);\n         // Prefix for greppability\n-        sess.note_without_error(&format!(\"native-static-libs: {}\", &lib_args.join(\" \")));\n+        sess.emit_note(errors::NativeStaticLibs { arguments: lib_args.join(\" \") });\n     }\n }\n \n@@ -1688,14 +1655,14 @@ fn add_link_script(cmd: &mut dyn Linker, sess: &Session, tmpdir: &Path, crate_ty\n     match (crate_type, &sess.target.link_script) {\n         (CrateType::Cdylib | CrateType::Executable, Some(script)) => {\n             if !sess.target.linker_flavor.is_gnu() {\n-                sess.fatal(\"can only use link script when linking with GNU-like linker\");\n+                sess.emit_fatal(errors::LinkScriptUnavailable);\n             }\n \n             let file_name = [\"rustc\", &sess.target.llvm_target, \"linkfile.ld\"].join(\"-\");\n \n             let path = tmpdir.join(file_name);\n-            if let Err(e) = fs::write(&path, script.as_ref()) {\n-                sess.fatal(&format!(\"failed to write link script to {}: {}\", path.display(), e));\n+            if let Err(error) = fs::write(&path, script.as_ref()) {\n+                sess.emit_fatal(errors::LinkScriptWriteFailure { path, error });\n             }\n \n             cmd.arg(\"--script\");\n@@ -1841,8 +1808,8 @@ fn add_linked_symbol_object(\n \n     let path = tmpdir.join(\"symbols.o\");\n     let result = std::fs::write(&path, file.write().unwrap());\n-    if let Err(e) = result {\n-        sess.fatal(&format!(\"failed to write {}: {}\", path.display(), e));\n+    if let Err(error) = result {\n+        sess.emit_fatal(errors::FailedToWrite { path, error });\n     }\n     cmd.add_object(&path);\n }\n@@ -2299,14 +2266,10 @@ fn collect_natvis_visualizers(\n                 visualizer_paths.push(visualizer_out_file);\n             }\n             Err(error) => {\n-                sess.warn(\n-                    format!(\n-                        \"Unable to write debugger visualizer file `{}`: {} \",\n-                        visualizer_out_file.display(),\n-                        error\n-                    )\n-                    .as_str(),\n-                );\n+                sess.emit_warning(errors::UnableToWriteDebuggerVisualizer {\n+                    path: visualizer_out_file,\n+                    error,\n+                });\n             }\n         };\n     }\n@@ -2641,7 +2604,7 @@ fn add_upstream_rust_crates<'a>(\n                 || !codegen_results.crate_info.is_no_builtins.contains(&cnum);\n \n             let mut archive = archive_builder_builder.new_archive_builder(sess);\n-            if let Err(e) = archive.add_archive(\n+            if let Err(error) = archive.add_archive(\n                 cratepath,\n                 Box::new(move |f| {\n                     if f == METADATA_FILENAME {\n@@ -2681,7 +2644,7 @@ fn add_upstream_rust_crates<'a>(\n                     false\n                 }),\n             ) {\n-                sess.fatal(&format!(\"failed to build archive from rlib: {}\", e));\n+                sess.emit_fatal(errors::RlibArchiveBuildFailure { error });\n             }\n             if archive.build(&dst) {\n                 link_upstream(&dst);\n@@ -2919,7 +2882,7 @@ fn add_gcc_ld_path(cmd: &mut dyn Linker, sess: &Session, flavor: LinkerFlavor) {\n                 }\n             }\n         } else {\n-            sess.fatal(\"option `-Z gcc-ld` is used even though linker flavor is not gcc\");\n+            sess.emit_fatal(errors::OptionGccOnly);\n         }\n     }\n }"}, {"sha": "71fac123725cf02994b58b082a3a6e494fc03f1c", "filename": "compiler/rustc_codegen_ssa/src/errors.rs", "status": "modified", "additions": 130, "deletions": 0, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Ferrors.rs?ref=4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "patch": "@@ -354,3 +354,133 @@ impl IntoDiagnostic<'_> for LinkingFailed<'_> {\n         diag\n     }\n }\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_link_exe_unexpected_error)]\n+pub struct LinkExeUnexpectedError;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_repair_vs_build_tools)]\n+pub struct RepairVSBuildTools;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_missing_cpp_build_tool_component)]\n+pub struct MissingCppBuildToolComponent;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_select_cpp_build_tool_workload)]\n+pub struct SelectCppBuildToolWorkload;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_visual_studio_not_installed)]\n+pub struct VisualStudioNotInstalled;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_linker_not_found)]\n+#[note]\n+pub struct LinkerNotFound {\n+    pub linker_path: PathBuf,\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unable_to_exe_linker)]\n+#[note]\n+#[note(command_note)]\n+pub struct UnableToExeLinker {\n+    pub linker_path: PathBuf,\n+    pub error: Error,\n+    pub command_formatted: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_msvc_missing_linker)]\n+pub struct MsvcMissingLinker;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_check_installed_visual_studio)]\n+pub struct CheckInstalledVisualStudio;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unsufficient_vs_code_product)]\n+pub struct UnsufficientVSCodeProduct;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_processing_dymutil_failed)]\n+#[note]\n+pub struct ProcessingDymutilFailed {\n+    pub status: ExitStatus,\n+    pub output: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unable_to_run_dsymutil)]\n+#[note]\n+pub struct UnableToRunDsymutil {\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_stripping_debu_info_failed)]\n+#[note]\n+pub struct StrippingDebuInfoFailed<'a> {\n+    pub util: &'a str,\n+    pub status: ExitStatus,\n+    pub output: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unable_to_run)]\n+pub struct UnableToRun<'a> {\n+    pub util: &'a str,\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_linker_file_stem)]\n+pub struct LinkerFileStem;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_static_library_native_artifacts)]\n+pub struct StaticLibraryNativeArtifacts;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_native_static_libs)]\n+pub struct NativeStaticLibs {\n+    pub arguments: String,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_link_script_unavailable)]\n+pub struct LinkScriptUnavailable;\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_link_script_write_failure)]\n+pub struct LinkScriptWriteFailure {\n+    pub path: PathBuf,\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_failed_to_write)]\n+pub struct FailedToWrite {\n+    pub path: PathBuf,\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_unable_to_write_debugger_visualizer)]\n+pub struct UnableToWriteDebuggerVisualizer {\n+    pub path: PathBuf,\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_rlib_archive_build_failure)]\n+pub struct RlibArchiveBuildFailure {\n+    pub error: Error,\n+}\n+\n+#[derive(Diagnostic)]\n+#[diag(codegen_ssa_option_gcc_only)]\n+pub struct OptionGccOnly;"}, {"sha": "2e5c72ee6452a19c8204df8d1a8f6be423fece15", "filename": "compiler/rustc_error_messages/locales/en-US/codegen_ssa.ftl", "status": "modified", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fcodegen_ssa.ftl?ref=4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "patch": "@@ -119,3 +119,54 @@ codegen_ssa_thorin_object_read = {$error}\n codegen_ssa_thorin_object_write = {$error}\n codegen_ssa_thorin_gimli_read = {$error}\n codegen_ssa_thorin_gimli_write = {$error}\n+\n+codegen_ssa_link_exe_unexpected_error = `link.exe` returned an unexpected error\n+\n+codegen_ssa_repair_vs_build_tools = the Visual Studio build tools may need to be repaired using the Visual Studio installer\n+\n+codegen_ssa_missing_cpp_build_tool_component = or a necessary component may be missing from the \"C++ build tools\" workload\n+\n+codegen_ssa_select_cpp_build_tool_workload = in the Visual Studio installer, ensure the \"C++ build tools\" workload is selected\n+\n+codegen_ssa_visual_studio_not_installed = you may need to install Visual Studio build tools with the \"C++ build tools\" workload\n+\n+codegen_ssa_linker_not_found = linker `{$linker_path}` not found\n+    .note = {$error}\n+\n+codegen_ssa_unable_to_exe_linker = could not exec the linker `{$linker_path}`\n+    .note = {$error}\n+    .command_note = {$command_formatted}\n+\n+codegen_ssa_msvc_missing_linker = the msvc targets depend on the msvc linker but `link.exe` was not found\n+\n+codegen_ssa_check_installed_visual_studio = please ensure that Visual Studio 2017 or later, or Build Tools for Visual Studio were installed with the Visual C++ option.\n+\n+codegen_ssa_unsufficient_vs_code_product = VS Code is a different product, and is not sufficient.\n+\n+codegen_ssa_processing_dymutil_failed = processing debug info with `dsymutil` failed: {$status}\n+    .note = {$output}\n+\n+codegen_ssa_unable_to_run_dsymutil = unable to run `dsymutil`: {$error}\n+\n+codegen_ssa_stripping_debu_info_failed = stripping debug info with `{$util}` failed: {$status}\n+    .note = {$output}\n+\n+codegen_ssa_unable_to_run = unable to run `{$util}`: {$error}\n+\n+codegen_ssa_linker_file_stem = couldn't extract file stem from specified linker\n+\n+codegen_ssa_static_library_native_artifacts = Link against the following native artifacts when linking against this static library. The order and any duplication can be significant on some platforms.\n+\n+codegen_ssa_native_static_libs = native-static-libs: {$arguments}\n+\n+codegen_ssa_link_script_unavailable = can only use link script when linking with GNU-like linker\n+\n+codegen_ssa_link_script_write_failure = failed to write link script to {$path}: {$error}\n+\n+codegen_ssa_failed_to_write = failed to write {$path}: {$error}\n+\n+codegen_ssa_unable_to_write_debugger_visualizer = Unable to write debugger visualizer file `{$path}`: {$error}\n+\n+codegen_ssa_rlib_archive_build_failure = failed to build archive from rlib: {$error}\n+\n+codegen_ssa_option_gcc_only = option `-Z gcc-ld` is used even though linker flavor is not gcc"}, {"sha": "4f32e236b2dbbef1c7a1072ebcf7991fda4be032", "filename": "compiler/rustc_errors/src/diagnostic_impls.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_impls.rs?ref=4c80f50fc6dce4e35eebe1beaadd5fc3ecfe6f52", "patch": "@@ -13,6 +13,7 @@ use std::borrow::Cow;\n use std::fmt;\n use std::num::ParseIntError;\n use std::path::{Path, PathBuf};\n+use std::process::ExitStatus;\n \n pub struct DiagnosticArgFromDisplay<'a>(pub &'a dyn fmt::Display);\n \n@@ -66,7 +67,8 @@ into_diagnostic_arg_using_display!(\n     ParseIntError,\n     StackProtector,\n     &TargetTriple,\n-    SplitDebuginfo\n+    SplitDebuginfo,\n+    ExitStatus,\n );\n \n impl IntoDiagnosticArg for bool {"}]}