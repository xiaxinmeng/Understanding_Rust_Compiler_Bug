{"sha": "3902b836e742e1e914218b1178244dfe2fdb4c84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM5MDJiODM2ZTc0MmUxZTkxNDIxOGIxMTc4MjQ0ZGZlMmZkYjRjODQ=", "commit": {"author": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T04:54:35Z"}, "committer": {"name": "cgm616", "email": "cgm616@me.com", "date": "2017-11-03T04:54:35Z"}, "message": "Update tests", "tree": {"sha": "2e5f80f41165058a2440b742d249c5543a573af1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2e5f80f41165058a2440b742d249c5543a573af1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3902b836e742e1e914218b1178244dfe2fdb4c84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3902b836e742e1e914218b1178244dfe2fdb4c84", "html_url": "https://github.com/rust-lang/rust/commit/3902b836e742e1e914218b1178244dfe2fdb4c84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3902b836e742e1e914218b1178244dfe2fdb4c84/comments", "author": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cgm616", "id": 2502394, "node_id": "MDQ6VXNlcjI1MDIzOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2502394?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cgm616", "html_url": "https://github.com/cgm616", "followers_url": "https://api.github.com/users/cgm616/followers", "following_url": "https://api.github.com/users/cgm616/following{/other_user}", "gists_url": "https://api.github.com/users/cgm616/gists{/gist_id}", "starred_url": "https://api.github.com/users/cgm616/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cgm616/subscriptions", "organizations_url": "https://api.github.com/users/cgm616/orgs", "repos_url": "https://api.github.com/users/cgm616/repos", "events_url": "https://api.github.com/users/cgm616/events{/privacy}", "received_events_url": "https://api.github.com/users/cgm616/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76e765aeda1ad2b6901b1255a6baa434bad76f1b", "url": "https://api.github.com/repos/rust-lang/rust/commits/76e765aeda1ad2b6901b1255a6baa434bad76f1b", "html_url": "https://github.com/rust-lang/rust/commit/76e765aeda1ad2b6901b1255a6baa434bad76f1b"}], "stats": {"total": 436, "additions": 99, "deletions": 337}, "files": [{"sha": "6ecb3963154688353278132b8cc45fcb07769936", "filename": "tests/ui/methods.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3902b836e742e1e914218b1178244dfe2fdb4c84/tests%2Fui%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3902b836e742e1e914218b1178244dfe2fdb4c84/tests%2Fui%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.rs?ref=3902b836e742e1e914218b1178244dfe2fdb4c84", "patch": "@@ -14,12 +14,12 @@ use std::iter::FromIterator;\n use std::rc::{self, Rc};\n use std::sync::{self, Arc};\n \n-struct T;\n+pub struct T;\n \n impl T {\n     pub fn add(self, other: T) -> T { self }\n-    pub(crate) fn drop(&mut self) { }\n \n+    pub(crate) fn drop(&mut self) { } // no error, not public interfact\n     fn neg(self) -> Self { self } // no error, private function\n     fn eq(&self, other: T) -> bool { true } // no error, private function\n "}, {"sha": "469f81c657a807fd40a18e121f2f9d6a57b08cb6", "filename": "tests/ui/methods.stderr", "status": "modified", "additions": 97, "deletions": 335, "changes": 432, "blob_url": "https://github.com/rust-lang/rust/blob/3902b836e742e1e914218b1178244dfe2fdb4c84/tests%2Fui%2Fmethods.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3902b836e742e1e914218b1178244dfe2fdb4c84/tests%2Fui%2Fmethods.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmethods.stderr?ref=3902b836e742e1e914218b1178244dfe2fdb4c84", "patch": "@@ -50,12 +50,6 @@ error: defining a method called `add` on this type; consider implementing the `s\n    |\n    = note: `-D should-implement-trait` implied by `-D warnings`\n \n-error: defining a method called `drop` on this type; consider implementing the `std::ops::Drop` trait or choosing a less ambiguous name\n-  --> $DIR/methods.rs:21:5\n-   |\n-21 |     pub(crate) fn drop(&mut self) { }\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n error: methods called `into_*` usually take self by value; consider choosing a less ambiguous name\n   --> $DIR/methods.rs:31:17\n    |\n@@ -227,515 +221,283 @@ help: try using and_then instead\n     |\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:159:13\n+   --> $DIR/methods.rs:162:13\n     |\n-159 |       let _ = res.map(|x| x + 1)\n+162 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-160 | |\n-161 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n+163 | |\n+164 | |                .unwrap_or_else(|e| 0); // should lint even though this call is on a separate line\n     | |_____________________________________^\n     |\n     = note: `-D result-map-unwrap-or-else` implied by `-D warnings`\n     = note: replace `map(|x| x + 1).unwrap_or_else(|e| 0)` with `ok().map_or_else(|e| 0, |x| x + 1)`\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:163:13\n+   --> $DIR/methods.rs:166:13\n     |\n-163 |       let _ = res.map(|x| {\n+166 |       let _ = res.map(|x| {\n     |  _____________^\n-164 | |                         x + 1\n-165 | |                     }\n-166 | |               ).unwrap_or_else(|e| 0);\n+167 | |                         x + 1\n+168 | |                     }\n+169 | |               ).unwrap_or_else(|e| 0);\n     | |_____________________________________^\n \n error: called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling `ok().map_or_else(g, f)` instead\n-   --> $DIR/methods.rs:167:13\n+   --> $DIR/methods.rs:170:13\n     |\n-167 |       let _ = res.map(|x| x + 1)\n+170 |       let _ = res.map(|x| x + 1)\n     |  _____________^\n-168 | |                .unwrap_or_else(|e|\n-169 | |                     0\n-170 | |                 );\n+171 | |                .unwrap_or_else(|e|\n+172 | |                     0\n+173 | |                 );\n     | |_________________^\n \n error: unnecessary structure name repetition\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:176:24\n-    |\n-176 |     fn filter(self) -> IteratorFalsePositives {\n-    |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:180:22\n-    |\n-180 |     fn next(self) -> IteratorFalsePositives {\n-    |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:200:32\n+   --> $DIR/methods.rs:199:24\n     |\n-200 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n-    |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n-\n-error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:210:13\n-    |\n-210 |     let _ = v.iter().filter(|&x| *x < 0).next();\n-=======\n-   --> $DIR/methods.rs:196:24\n-    |\n-196 |     fn filter(self) -> IteratorFalsePositives {\n+199 |     fn filter(self) -> IteratorFalsePositives {\n     |                        ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:200:22\n+   --> $DIR/methods.rs:203:22\n     |\n-200 |     fn next(self) -> IteratorFalsePositives {\n+203 |     fn next(self) -> IteratorFalsePositives {\n     |                      ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:220:32\n+   --> $DIR/methods.rs:223:32\n     |\n-220 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n+223 |     fn skip(self, _: usize) -> IteratorFalsePositives {\n     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-   --> $DIR/methods.rs:230:13\n+   --> $DIR/methods.rs:233:13\n     |\n-230 |     let _ = v.iter().filter(|&x| *x < 0).next();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+233 |     let _ = v.iter().filter(|&x| *x < 0).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D filter-next` implied by `-D warnings`\n     = note: replace `filter(|&x| *x < 0).next()` with `find(|&x| *x < 0)`\n \n error: called `filter(p).next()` on an `Iterator`. This is more succinctly expressed by calling `.find(p)` instead.\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:213:13\n+   --> $DIR/methods.rs:236:13\n     |\n-213 |       let _ = v.iter().filter(|&x| {\n+236 |       let _ = v.iter().filter(|&x| {\n     |  _____________^\n-214 | |                                 *x < 0\n-215 | |                             }\n-216 | |                    ).next();\n+237 | |                                 *x < 0\n+238 | |                             }\n+239 | |                    ).next();\n     | |___________________________^\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:228:13\n-    |\n-228 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n-=======\n-   --> $DIR/methods.rs:233:13\n-    |\n-233 |       let _ = v.iter().filter(|&x| {\n-    |  _____________^\n-234 | |                                 *x < 0\n-235 | |                             }\n-236 | |                    ).next();\n-    | |___________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:248:13\n+   --> $DIR/methods.rs:251:13\n     |\n-248 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+251 |     let _ = v.iter().find(|&x| *x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D search-is-some` implied by `-D warnings`\n     = note: replace `find(|&x| *x < 0).is_some()` with `any(|&x| *x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with find. This is more succinctly expressed by calling `any()`.\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:231:13\n+   --> $DIR/methods.rs:254:13\n     |\n-231 |       let _ = v.iter().find(|&x| {\n+254 |       let _ = v.iter().find(|&x| {\n     |  _____________^\n-232 | |                               *x < 0\n-233 | |                           }\n-234 | |                    ).is_some();\n+255 | |                               *x < 0\n+256 | |                           }\n+257 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:237:13\n-    |\n-237 |     let _ = v.iter().position(|&x| x < 0).is_some();\n-=======\n-   --> $DIR/methods.rs:251:13\n-    |\n-251 |       let _ = v.iter().find(|&x| {\n-    |  _____________^\n-252 | |                               *x < 0\n-253 | |                           }\n-254 | |                    ).is_some();\n-    | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:257:13\n+   --> $DIR/methods.rs:260:13\n     |\n-257 |     let _ = v.iter().position(|&x| x < 0).is_some();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+260 |     let _ = v.iter().position(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `position(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with position. This is more succinctly expressed by calling `any()`.\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:240:13\n-    |\n-240 |       let _ = v.iter().position(|&x| {\n-    |  _____________^\n-241 | |                                   x < 0\n-242 | |                               }\n-243 | |                    ).is_some();\n-    | |______________________________^\n-\n-error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:246:13\n-    |\n-246 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n-=======\n-   --> $DIR/methods.rs:260:13\n+   --> $DIR/methods.rs:263:13\n     |\n-260 |       let _ = v.iter().position(|&x| {\n+263 |       let _ = v.iter().position(|&x| {\n     |  _____________^\n-261 | |                                   x < 0\n-262 | |                               }\n-263 | |                    ).is_some();\n+264 | |                                   x < 0\n+265 | |                               }\n+266 | |                    ).is_some();\n     | |______________________________^\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-   --> $DIR/methods.rs:266:13\n+   --> $DIR/methods.rs:269:13\n     |\n-266 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+269 |     let _ = v.iter().rposition(|&x| x < 0).is_some();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: replace `rposition(|&x| x < 0).is_some()` with `any(|&x| x < 0)`\n \n error: called `is_some()` after searching an `Iterator` with rposition. This is more succinctly expressed by calling `any()`.\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:249:13\n+   --> $DIR/methods.rs:272:13\n     |\n-249 |       let _ = v.iter().rposition(|&x| {\n+272 |       let _ = v.iter().rposition(|&x| {\n     |  _____________^\n-250 | |                                    x < 0\n-251 | |                                }\n-252 | |                    ).is_some();\n+273 | |                                    x < 0\n+274 | |                                }\n+275 | |                    ).is_some();\n     | |______________________________^\n \n error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:266:21\n+   --> $DIR/methods.rs:289:21\n     |\n-266 |         fn new() -> Foo { Foo }\n+289 |         fn new() -> Foo { Foo }\n     |                     ^^^ help: use the applicable keyword: `Self`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:284:5\n-    |\n-284 |     with_constructor.unwrap_or(make());\n-=======\n-   --> $DIR/methods.rs:269:13\n-    |\n-269 |       let _ = v.iter().rposition(|&x| {\n-    |  _____________^\n-270 | |                                    x < 0\n-271 | |                                }\n-272 | |                    ).is_some();\n-    | |______________________________^\n-\n-error: unnecessary structure name repetition\n-   --> $DIR/methods.rs:286:21\n-    |\n-286 |         fn new() -> Foo { Foo }\n-    |                     ^^^ help: use the applicable keyword: `Self`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:304:5\n+   --> $DIR/methods.rs:307:5\n     |\n-304 |     with_constructor.unwrap_or(make());\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+307 |     with_constructor.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_constructor.unwrap_or_else(make)`\n     |\n     = note: `-D or-fun-call` implied by `-D warnings`\n \n error: use of `unwrap_or` followed by a call to `new`\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:287:5\n-    |\n-287 |     with_new.unwrap_or(Vec::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:290:5\n-    |\n-290 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:293:5\n-    |\n-293 |     with_err.unwrap_or(make());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:296:5\n-    |\n-296 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:299:5\n-    |\n-299 |     with_default_trait.unwrap_or(Default::default());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:302:5\n-    |\n-302 |     with_default_type.unwrap_or(u64::default());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:305:5\n-    |\n-305 |     with_vec.unwrap_or(vec![]);\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n-\n-error: use of `unwrap_or` followed by a function call\n    --> $DIR/methods.rs:310:5\n     |\n-310 |     without_default.unwrap_or(Foo::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n-\n-error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:313:5\n-    |\n-313 |     map.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n-\n-error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:316:5\n-    |\n-316 |     btree.entry(42).or_insert(String::new());\n-    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n-\n-error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:319:13\n-    |\n-319 |     let _ = stringy.unwrap_or(\"\".to_owned());\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n-\n-error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:330:23\n-    |\n-330 |         let bad_vec = some_vec.iter().nth(3);\n-=======\n-   --> $DIR/methods.rs:307:5\n-    |\n-307 |     with_new.unwrap_or(Vec::new());\n+310 |     with_new.unwrap_or(Vec::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_new.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:310:5\n+   --> $DIR/methods.rs:313:5\n     |\n-310 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n+313 |     with_const_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_const_args.unwrap_or_else(|| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:313:5\n+   --> $DIR/methods.rs:316:5\n     |\n-313 |     with_err.unwrap_or(make());\n+316 |     with_err.unwrap_or(make());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err.unwrap_or_else(|_| make())`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:316:5\n+   --> $DIR/methods.rs:319:5\n     |\n-316 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n+319 |     with_err_args.unwrap_or(Vec::with_capacity(12));\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_err_args.unwrap_or_else(|_| Vec::with_capacity(12))`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:319:5\n+   --> $DIR/methods.rs:322:5\n     |\n-319 |     with_default_trait.unwrap_or(Default::default());\n+322 |     with_default_trait.unwrap_or(Default::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_trait.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a call to `default`\n-   --> $DIR/methods.rs:322:5\n+   --> $DIR/methods.rs:325:5\n     |\n-322 |     with_default_type.unwrap_or(u64::default());\n+325 |     with_default_type.unwrap_or(u64::default());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_default_type.unwrap_or_default()`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:325:5\n+   --> $DIR/methods.rs:328:5\n     |\n-325 |     with_vec.unwrap_or(vec![]);\n+328 |     with_vec.unwrap_or(vec![]);\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `with_vec.unwrap_or_else(|| < [ _ ] > :: into_vec ( box [ $ ( $ x ) , * ] ))`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:330:5\n+   --> $DIR/methods.rs:333:5\n     |\n-330 |     without_default.unwrap_or(Foo::new());\n+333 |     without_default.unwrap_or(Foo::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `without_default.unwrap_or_else(Foo::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:333:5\n+   --> $DIR/methods.rs:336:5\n     |\n-333 |     map.entry(42).or_insert(String::new());\n+336 |     map.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `map.entry(42).or_insert_with(String::new)`\n \n error: use of `or_insert` followed by a function call\n-   --> $DIR/methods.rs:336:5\n+   --> $DIR/methods.rs:339:5\n     |\n-336 |     btree.entry(42).or_insert(String::new());\n+339 |     btree.entry(42).or_insert(String::new());\n     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `btree.entry(42).or_insert_with(String::new)`\n \n error: use of `unwrap_or` followed by a function call\n-   --> $DIR/methods.rs:339:13\n+   --> $DIR/methods.rs:342:13\n     |\n-339 |     let _ = stringy.unwrap_or(\"\".to_owned());\n+342 |     let _ = stringy.unwrap_or(\"\".to_owned());\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `stringy.unwrap_or_else(|| \"\".to_owned())`\n \n error: called `.iter().nth()` on a Vec. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:350:23\n+   --> $DIR/methods.rs:353:23\n     |\n-350 |         let bad_vec = some_vec.iter().nth(3);\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+353 |         let bad_vec = some_vec.iter().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-nth` implied by `-D warnings`\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:331:26\n+   --> $DIR/methods.rs:354:26\n     |\n-331 |         let bad_slice = &some_vec[..].iter().nth(3);\n+354 |         let bad_slice = &some_vec[..].iter().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:332:31\n+   --> $DIR/methods.rs:355:31\n     |\n-332 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n+355 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:333:29\n+   --> $DIR/methods.rs:356:29\n     |\n-333 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n+356 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:338:23\n+   --> $DIR/methods.rs:361:23\n     |\n-338 |         let bad_vec = some_vec.iter_mut().nth(3);\n+361 |         let bad_vec = some_vec.iter_mut().nth(3);\n     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:341:26\n+   --> $DIR/methods.rs:364:26\n     |\n-341 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n+364 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:344:29\n+   --> $DIR/methods.rs:367:29\n     |\n-344 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n+367 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:356:13\n+   --> $DIR/methods.rs:379:13\n     |\n-356 |     let _ = some_vec.iter().skip(42).next();\n-=======\n-   --> $DIR/methods.rs:351:26\n-    |\n-351 |         let bad_slice = &some_vec[..].iter().nth(3);\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a slice. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:352:31\n-    |\n-352 |         let bad_boxed_slice = boxed_slice.iter().nth(3);\n-    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter().nth()` on a VecDeque. Calling `.get()` is both faster and more readable\n-   --> $DIR/methods.rs:353:29\n-    |\n-353 |         let bad_vec_deque = some_vec_deque.iter().nth(3);\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a Vec. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:358:23\n-    |\n-358 |         let bad_vec = some_vec.iter_mut().nth(3);\n-    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a slice. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:361:26\n-    |\n-361 |         let bad_slice = &some_vec[..].iter_mut().nth(3);\n-    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `.iter_mut().nth()` on a VecDeque. Calling `.get_mut()` is both faster and more readable\n-   --> $DIR/methods.rs:364:29\n-    |\n-364 |         let bad_vec_deque = some_vec_deque.iter_mut().nth(3);\n-    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:376:13\n-    |\n-376 |     let _ = some_vec.iter().skip(42).next();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+379 |     let _ = some_vec.iter().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n     |\n     = note: `-D iter-skip-next` implied by `-D warnings`\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-<<<<<<< HEAD\n-   --> $DIR/methods.rs:357:13\n-    |\n-357 |     let _ = some_vec.iter().cycle().skip(42).next();\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:358:13\n-    |\n-358 |     let _ = (1..10).skip(10).next();\n-    |             ^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:359:14\n-    |\n-359 |     let _ = &some_vec[..].iter().skip(3).next();\n-    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-\n-error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:368:13\n-    |\n-368 |     let _ = opt.unwrap();\n-=======\n-   --> $DIR/methods.rs:377:13\n+   --> $DIR/methods.rs:380:13\n     |\n-377 |     let _ = some_vec.iter().cycle().skip(42).next();\n+380 |     let _ = some_vec.iter().cycle().skip(42).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:378:13\n+   --> $DIR/methods.rs:381:13\n     |\n-378 |     let _ = (1..10).skip(10).next();\n+381 |     let _ = (1..10).skip(10).next();\n     |             ^^^^^^^^^^^^^^^^^^^^^^^\n \n error: called `skip(x).next()` on an iterator. This is more succinctly expressed by calling `nth(x)`\n-   --> $DIR/methods.rs:379:14\n+   --> $DIR/methods.rs:382:14\n     |\n-379 |     let _ = &some_vec[..].iter().skip(3).next();\n+382 |     let _ = &some_vec[..].iter().skip(3).next();\n     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: used unwrap() on an Option value. If you don't want to handle the None case gracefully, consider using expect() to provide a better panic message\n-   --> $DIR/methods.rs:388:13\n+   --> $DIR/methods.rs:391:13\n     |\n-388 |     let _ = opt.unwrap();\n->>>>>>> 47be6927239cc8dabeb59764581fc4ac73327f22\n+391 |     let _ = opt.unwrap();\n     |             ^^^^^^^^^^^^\n     |\n     = note: `-D option-unwrap-used` implied by `-D warnings`"}]}