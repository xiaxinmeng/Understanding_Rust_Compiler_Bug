{"sha": "0f9ba992910b724bd198a196b5e408785911fdfc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmOWJhOTkyOTEwYjcyNGJkMTk4YTE5NmI1ZTQwODc4NTkxMWZkZmM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T10:38:04Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-04-28T10:38:04Z"}, "message": "Auto merge of #33161 - jseyfried:parse_tuple_struct_field_vis, r=nikomatsakis\n\nParse `pub(restricted)` visibilities on tuple struct fields\n\nParse `pub(restricted)` on tuple struct fields (cc #32409).\n\nr? @nikomatsakis", "tree": {"sha": "c74f1c5fd4ec59d0f9693d379877884cfeda8589", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c74f1c5fd4ec59d0f9693d379877884cfeda8589"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f9ba992910b724bd198a196b5e408785911fdfc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f9ba992910b724bd198a196b5e408785911fdfc", "html_url": "https://github.com/rust-lang/rust/commit/0f9ba992910b724bd198a196b5e408785911fdfc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f9ba992910b724bd198a196b5e408785911fdfc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "009a64916e7f51df7e4e4e1df603eb4be1c7a6d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/009a64916e7f51df7e4e4e1df603eb4be1c7a6d8", "html_url": "https://github.com/rust-lang/rust/commit/009a64916e7f51df7e4e4e1df603eb4be1c7a6d8"}, {"sha": "78a8127ff0138dbda870e78d68809f455eec5f20", "url": "https://api.github.com/repos/rust-lang/rust/commits/78a8127ff0138dbda870e78d68809f455eec5f20", "html_url": "https://github.com/rust-lang/rust/commit/78a8127ff0138dbda870e78d68809f455eec5f20"}], "stats": {"total": 115, "additions": 108, "deletions": 7}, "files": [{"sha": "671a11b57dec1db4e9b35867cbfa3a2c22a625fe", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=0f9ba992910b724bd198a196b5e408785911fdfc", "patch": "@@ -5218,8 +5218,25 @@ impl<'a> Parser<'a> {\n             |p| {\n                 let attrs = p.parse_outer_attributes()?;\n                 let lo = p.span.lo;\n-                let vis = p.parse_visibility(false)?;\n-                let ty = p.parse_ty_sum()?;\n+                let mut vis = p.parse_visibility(false)?;\n+                let ty_is_interpolated =\n+                    p.token.is_interpolated() || p.look_ahead(1, |t| t.is_interpolated());\n+                let mut ty = p.parse_ty_sum()?;\n+\n+                // Handle `pub(path) type`, in which `vis` will be `pub` and `ty` will be `(path)`.\n+                if vis == Visibility::Public && !ty_is_interpolated &&\n+                   p.token != token::Comma && p.token != token::CloseDelim(token::Paren) {\n+                    ty = if let TyKind::Paren(ref path_ty) = ty.node {\n+                        if let TyKind::Path(None, ref path) = path_ty.node {\n+                            vis = Visibility::Restricted { path: P(path.clone()), id: path_ty.id };\n+                            Some(p.parse_ty_sum()?)\n+                        } else {\n+                            None\n+                        }\n+                    } else {\n+                        None\n+                    }.unwrap_or(ty);\n+                }\n                 Ok(StructField {\n                     span: mk_sp(lo, p.span.hi),\n                     vis: vis,\n@@ -5263,15 +5280,29 @@ impl<'a> Parser<'a> {\n         self.parse_single_struct_field(vis, attrs)\n     }\n \n-    fn parse_visibility(&mut self, allow_restricted: bool) -> PResult<'a, Visibility> {\n+    // If `allow_path` is false, just parse the `pub` in `pub(path)` (but still parse `pub(crate)`)\n+    fn parse_visibility(&mut self, allow_path: bool) -> PResult<'a, Visibility> {\n+        let pub_crate = |this: &mut Self| {\n+            let span = this.last_span;\n+            this.expect(&token::CloseDelim(token::Paren))?;\n+            Ok(Visibility::Crate(span))\n+        };\n+\n         if !self.eat_keyword(keywords::Pub) {\n             Ok(Visibility::Inherited)\n-        } else if !allow_restricted || !self.eat(&token::OpenDelim(token::Paren)) {\n+        } else if !allow_path {\n+            // Look ahead to avoid eating the `(` in `pub(path)` while still parsing `pub(crate)`\n+            if self.token == token::OpenDelim(token::Paren) &&\n+               self.look_ahead(1, |t| t.is_keyword(keywords::Crate)) {\n+                self.bump(); self.bump();\n+                pub_crate(self)\n+            } else {\n+                Ok(Visibility::Public)\n+            }\n+        } else if !self.eat(&token::OpenDelim(token::Paren)) {\n             Ok(Visibility::Public)\n         } else if self.eat_keyword(keywords::Crate) {\n-            let span = self.last_span;\n-            self.expect(&token::CloseDelim(token::Paren))?;\n-            Ok(Visibility::Crate(span))\n+            pub_crate(self)\n         } else {\n             let path = self.parse_path(PathStyle::Mod)?;\n             self.expect(&token::CloseDelim(token::Paren))?;"}, {"sha": "9cc53386d465c50484f6e57d926a1a0ca96299b5", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest.rs?ref=0f9ba992910b724bd198a196b5e408785911fdfc", "patch": "@@ -0,0 +1,18 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted, type_macros)]\n+\n+mod foo {\n+    type T = ();\n+    struct S1(pub(foo) (), pub(T), pub(crate) (), pub(((), T)));\n+    struct S2(pub((foo)) ()); //~ ERROR expected one of `+` or `,`, found `(`\n+                              //~| ERROR expected one of `+`, `;`, or `where`, found `(`\n+}"}, {"sha": "01466c6a85a5ae5c94e7887bd22c68e308668b3e", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest2.rs?ref=0f9ba992910b724bd198a196b5e408785911fdfc", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted, type_macros)]\n+\n+macro_rules! define_struct {\n+    ($t:ty) => {\n+        struct S1(pub $t);\n+        struct S2(pub (foo) ());\n+        struct S3(pub $t ()); //~ ERROR expected one of `+` or `,`, found `(`\n+                              //~| ERROR expected one of `+`, `;`, or `where`, found `(`\n+    }\n+}\n+\n+mod foo {\n+    define_struct! { (foo) }\n+}"}, {"sha": "ef187a1daed37106f6529f2df1a46deeb012cfe6", "filename": "src/test/compile-fail/privacy/restricted/tuple-struct-fields/test3.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Ftuple-struct-fields%2Ftest3.rs?ref=0f9ba992910b724bd198a196b5e408785911fdfc", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(pub_restricted, type_macros)]\n+\n+macro_rules! define_struct {\n+    ($t:ty) => {\n+        struct S1(pub($t));\n+        struct S2(pub (foo) ());\n+        struct S3(pub($t) ()); //~ ERROR expected one of `+` or `,`, found `(`\n+                               //~| ERROR expected one of `+`, `;`, or `where`, found `(`\n+    }\n+}\n+\n+mod foo {\n+    define_struct! { foo }\n+}"}, {"sha": "ab423620d6866ff64e0e3e81160395251d9b91b0", "filename": "src/test/compile-fail/privacy/restricted/ty-params.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0f9ba992910b724bd198a196b5e408785911fdfc/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivacy%2Frestricted%2Fty-params.rs?ref=0f9ba992910b724bd198a196b5e408785911fdfc", "patch": "@@ -17,4 +17,8 @@ macro_rules! m {\n struct S<T>(T);\n m!{ S<u8> } //~ ERROR type or lifetime parameters in visibility path\n \n+mod foo {\n+    struct S(pub(foo<T>) ()); //~ ERROR type or lifetime parameters in visibility path\n+}\n+\n fn main() {}"}]}