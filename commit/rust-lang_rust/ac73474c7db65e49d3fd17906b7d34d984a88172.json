{"sha": "ac73474c7db65e49d3fd17906b7d34d984a88172", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjNzM0NzRjN2RiNjVlNDlkM2ZkMTc5MDZiN2QzNGQ5ODRhODgxNzI=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-17T01:33:30Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-08-17T01:33:30Z"}, "message": "Add explanation for `&mut self` method call when expecting `-> Self`\n\nWhen a user tries to use a method as if it returned a new value of the\nsame type as its receiver, we will emit a type error. Try to detect this\nand provide extra explanation that the method modifies the receiver\nin-place.\n\nThis has confused people in the wild, like in\nhttps://users.rust-lang.org/t/newbie-why-the-commented-line-stops-the-snippet-from-compiling/47322", "tree": {"sha": "5428acdf9993ec6a7ac028624d2eaab10deb2aa9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5428acdf9993ec6a7ac028624d2eaab10deb2aa9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ac73474c7db65e49d3fd17906b7d34d984a88172", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ac73474c7db65e49d3fd17906b7d34d984a88172", "html_url": "https://github.com/rust-lang/rust/commit/ac73474c7db65e49d3fd17906b7d34d984a88172", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ac73474c7db65e49d3fd17906b7d34d984a88172/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "url": "https://api.github.com/repos/rust-lang/rust/commits/3df25ae186e89c885d9a71cd37fbd7a37e39fc85", "html_url": "https://github.com/rust-lang/rust/commit/3df25ae186e89c885d9a71cd37fbd7a37e39fc85"}], "stats": {"total": 70, "additions": 70, "deletions": 0}, "files": [{"sha": "3c367774d68ab85569221df21454e93dc890dbf2", "filename": "src/librustc_typeck/check/demand.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fdemand.rs?ref=ac73474c7db65e49d3fd17906b7d34d984a88172", "patch": "@@ -35,6 +35,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         self.suggest_boxing_when_appropriate(err, expr, expected, expr_ty);\n         self.suggest_missing_await(err, expr, expected, expr_ty);\n         self.note_need_for_fn_pointer(err, expected, expr_ty);\n+        self.note_internal_mutation_in_method(err, expr, expected, expr_ty);\n     }\n \n     // Requires that the two types unify, and prints an error message if"}, {"sha": "6dd7f0661b8938d8ffa786cc03fe5d8f66472698", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=ac73474c7db65e49d3fd17906b7d34d984a88172", "patch": "@@ -5176,6 +5176,51 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         }\n     }\n \n+    fn note_internal_mutation_in_method(\n+        &self,\n+        err: &mut DiagnosticBuilder<'_>,\n+        expr: &hir::Expr<'_>,\n+        expected: Ty<'tcx>,\n+        found: Ty<'tcx>,\n+    ) {\n+        if found != self.tcx.types.unit {\n+            return;\n+        }\n+        if let ExprKind::MethodCall(path_segment, _, [rcvr, ..], _) = expr.kind {\n+            if self\n+                .typeck_results\n+                .borrow()\n+                .expr_ty_adjusted_opt(rcvr)\n+                .map_or(true, |ty| expected.peel_refs() != ty.peel_refs())\n+            {\n+                return;\n+            }\n+            let mut sp = MultiSpan::from_span(path_segment.ident.span);\n+            sp.push_span_label(\n+                path_segment.ident.span,\n+                format!(\n+                    \"this call modifies {} in-place\",\n+                    match rcvr.kind {\n+                        ExprKind::Path(QPath::Resolved(\n+                            None,\n+                            hir::Path { segments: [segment], .. },\n+                        )) => format!(\"`{}`\", segment.ident),\n+                        _ => \"its receiver\".to_string(),\n+                    }\n+                ),\n+            );\n+            sp.push_span_label(\n+                rcvr.span,\n+                \"you probably want to use this value after calling the method...\".to_string(),\n+            );\n+            err.span_note(\n+                sp,\n+                &format!(\"method `{}` modifies its receiver in-place\", path_segment.ident),\n+            );\n+            err.note(&format!(\"...instead of the `()` output of method `{}`\", path_segment.ident));\n+        }\n+    }\n+\n     /// When encountering an `impl Future` where `BoxFuture` is expected, suggest `Box::pin`.\n     fn suggest_calling_boxed_future_when_appropriate(\n         &self,"}, {"sha": "cb92ab87a8ff723ab76c6d6ddb6f5b02936e77a3", "filename": "src/test/ui/suggestions/chain-method-call-mutation-in-place.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.rs?ref=ac73474c7db65e49d3fd17906b7d34d984a88172", "patch": "@@ -0,0 +1,4 @@\n+fn main() {}\n+fn foo(mut s: String) -> String {\n+    s.push_str(\"asdf\") //~ ERROR mismatched types\n+}"}, {"sha": "63e3bb78954cf298e86fc8e54b56729312963873", "filename": "src/test/ui/suggestions/chain-method-call-mutation-in-place.stderr", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/ac73474c7db65e49d3fd17906b7d34d984a88172/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fchain-method-call-mutation-in-place.stderr?ref=ac73474c7db65e49d3fd17906b7d34d984a88172", "patch": "@@ -0,0 +1,20 @@\n+error[E0308]: mismatched types\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:5\n+   |\n+LL | fn foo(mut s: String) -> String {\n+   |                          ------ expected `std::string::String` because of return type\n+LL |     s.push_str(\"asdf\")\n+   |     ^^^^^^^^^^^^^^^^^^ expected struct `std::string::String`, found `()`\n+   |\n+note: method `push_str` modifies its receiver in-place\n+  --> $DIR/chain-method-call-mutation-in-place.rs:3:7\n+   |\n+LL |     s.push_str(\"asdf\")\n+   |     - ^^^^^^^^ this call modifies `s` in-place\n+   |     |\n+   |     you probably want to use this value after calling the method...\n+   = note: ...instead of the `()` output of method `push_str`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}]}