{"sha": "1f9853ca27d259c28b73096656d52cccf5c14f9f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmOTg1M2NhMjdkMjU5YzI4YjczMDk2NjU2ZDUyY2NjZjVjMTRmOWY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2017-04-26T10:48:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-04-26T10:48:16Z"}, "message": "Merge pull request #161 from oli-obk/master\n\nAddress clippy lints", "tree": {"sha": "3264ae30704acebe9d475507c91f1ea2961d78e6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3264ae30704acebe9d475507c91f1ea2961d78e6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f9853ca27d259c28b73096656d52cccf5c14f9f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f9853ca27d259c28b73096656d52cccf5c14f9f", "html_url": "https://github.com/rust-lang/rust/commit/1f9853ca27d259c28b73096656d52cccf5c14f9f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f9853ca27d259c28b73096656d52cccf5c14f9f/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c0d2d011dd791ececfbb2abcb858ddb9bb579fed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c0d2d011dd791ececfbb2abcb858ddb9bb579fed", "html_url": "https://github.com/rust-lang/rust/commit/c0d2d011dd791ececfbb2abcb858ddb9bb579fed"}, {"sha": "538c271e0594ce6b1cc8ee420eaba0e70286ea65", "url": "https://api.github.com/repos/rust-lang/rust/commits/538c271e0594ce6b1cc8ee420eaba0e70286ea65", "html_url": "https://github.com/rust-lang/rust/commit/538c271e0594ce6b1cc8ee420eaba0e70286ea65"}], "stats": {"total": 18, "additions": 7, "deletions": 11}, "files": [{"sha": "28a08a8c209469abaeb65824e0b068886ade54b8", "filename": "src/eval_context.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=1f9853ca27d259c28b73096656d52cccf5c14f9f", "patch": "@@ -1285,9 +1285,9 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n             ty::TyRef(_, ref tam) |\n             ty::TyRawPtr(ref tam) if self.type_is_sized(tam.ty) => PrimValKind::Ptr,\n \n-            ty::TyAdt(ref def, _) if def.is_box() => PrimValKind::Ptr,\n+            ty::TyAdt(def, _) if def.is_box() => PrimValKind::Ptr,\n \n-            ty::TyAdt(ref def, substs) => {\n+            ty::TyAdt(def, substs) => {\n                 use rustc::ty::layout::Layout::*;\n                 match *self.type_layout(ty)? {\n                     CEnum { discr, signed, .. } => {\n@@ -1954,12 +1954,8 @@ pub fn needs_drop_glue<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, t: Ty<'tcx>) -> bo\n             if !typ.needs_drop(tcx, &env) && type_is_sized(tcx, typ) {\n                 tcx.infer_ctxt((), traits::Reveal::All).enter(|infcx| {\n                     let layout = t.layout(&infcx).unwrap();\n-                    if layout.size(&tcx.data_layout).bytes() == 0 {\n-                        // `Box<ZeroSizeType>` does not allocate.\n-                        false\n-                    } else {\n-                        true\n-                    }\n+                    // `Box<ZeroSizeType>` does not allocate.\n+                    layout.size(&tcx.data_layout).bytes() != 0\n                 })\n             } else {\n                 true"}, {"sha": "0f1ce103b0c44f702e133d81c2e6166e22125a21", "filename": "src/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flvalue.rs?ref=1f9853ca27d259c28b73096656d52cccf5c14f9f", "patch": "@@ -322,7 +322,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let pointee_type = match base_ty.sty {\n                     ty::TyRawPtr(ref tam) |\n                     ty::TyRef(_, ref tam) => tam.ty,\n-                    ty::TyAdt(ref def, _) if def.is_box() => base_ty.boxed_ty(),\n+                    ty::TyAdt(def, _) if def.is_box() => base_ty.boxed_ty(),\n                     _ => bug!(\"can only deref pointer types\"),\n                 };\n "}, {"sha": "f2440d3d7267297f8ef26dfcb4aada5ef3dcc513", "filename": "src/memory.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=1f9853ca27d259c28b73096656d52cccf5c14f9f", "patch": "@@ -202,7 +202,7 @@ impl<'a, 'tcx> Memory<'a, 'tcx> {\n         if size == 0 {\n             return Ok(Pointer::zst_ptr());\n         }\n-        assert!(align != 0);\n+        assert_ne!(align, 0);\n \n         if self.memory_size - self.memory_usage < size {\n             return Err(EvalError::OutOfMemory {"}, {"sha": "0c0239f592695b529ba269a1efdd14d256ce5db1", "filename": "src/terminator/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Fterminator%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f9853ca27d259c28b73096656d52cccf5c14f9f/src%2Fterminator%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fterminator%2Fmod.rs?ref=1f9853ca27d259c28b73096656d52cccf5c14f9f", "patch": "@@ -298,7 +298,7 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n                 let pointee_type = match ty.sty {\n                     ty::TyRawPtr(ref tam) |\n                     ty::TyRef(_, ref tam) => tam.ty,\n-                    ty::TyAdt(ref def, _) if def.is_box() => ty.boxed_ty(),\n+                    ty::TyAdt(def, _) if def.is_box() => ty.boxed_ty(),\n                     _ => bug!(\"can only deref pointer types\"),\n                 };\n                 self.drop(val, instance, pointee_type, span)"}]}