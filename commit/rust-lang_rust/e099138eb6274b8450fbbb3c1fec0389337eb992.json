{"sha": "e099138eb6274b8450fbbb3c1fec0389337eb992", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOTkxMzhlYjYyNzRiODQ1MGZiYmIzYzFmZWMwMzg5MzM3ZWI5OTI=", "commit": {"author": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-26T22:31:45Z"}, "committer": {"name": "Stein Somers", "email": "git@steinsomers.be", "date": "2020-10-27T10:19:02Z"}, "message": "BTreeMap: stop mistaking node for an orderly place", "tree": {"sha": "520cf043981dab60bacbc75a673452481eeeda26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/520cf043981dab60bacbc75a673452481eeeda26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e099138eb6274b8450fbbb3c1fec0389337eb992", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e099138eb6274b8450fbbb3c1fec0389337eb992", "html_url": "https://github.com/rust-lang/rust/commit/e099138eb6274b8450fbbb3c1fec0389337eb992", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e099138eb6274b8450fbbb3c1fec0389337eb992/comments", "author": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ssomers", "id": 10174877, "node_id": "MDQ6VXNlcjEwMTc0ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/10174877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ssomers", "html_url": "https://github.com/ssomers", "followers_url": "https://api.github.com/users/ssomers/followers", "following_url": "https://api.github.com/users/ssomers/following{/other_user}", "gists_url": "https://api.github.com/users/ssomers/gists{/gist_id}", "starred_url": "https://api.github.com/users/ssomers/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ssomers/subscriptions", "organizations_url": "https://api.github.com/users/ssomers/orgs", "repos_url": "https://api.github.com/users/ssomers/repos", "events_url": "https://api.github.com/users/ssomers/events{/privacy}", "received_events_url": "https://api.github.com/users/ssomers/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "824f900a96d752da2d882863c65f9736e5f2b347", "url": "https://api.github.com/repos/rust-lang/rust/commits/824f900a96d752da2d882863c65f9736e5f2b347", "html_url": "https://github.com/rust-lang/rust/commit/824f900a96d752da2d882863c65f9736e5f2b347"}], "stats": {"total": 63, "additions": 22, "deletions": 41}, "files": [{"sha": "f6921e67636d9aa6ee0ff47daa506e42641b81b8", "filename": "library/alloc/src/collections/btree/map/tests.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e099138eb6274b8450fbbb3c1fec0389337eb992/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e099138eb6274b8450fbbb3c1fec0389337eb992/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fmap%2Ftests.rs?ref=e099138eb6274b8450fbbb3c1fec0389337eb992", "patch": "@@ -42,7 +42,7 @@ fn test_all_refs<'a, T: 'a>(dummy: &mut T, iter: impl Iterator<Item = &'a mut T>\n     }\n }\n \n-impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n+impl<K, V> BTreeMap<K, V> {\n     /// Panics if the map (or the code navigating it) is corrupted.\n     fn check(&self)\n     where\n@@ -54,14 +54,14 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n             assert!(root_node.ascend().is_err());\n             root_node.assert_back_pointers();\n \n-            let counted = root_node.assert_ascending();\n-            assert_eq!(self.length, counted);\n             assert_eq!(self.length, root_node.calc_length());\n \n             root_node.assert_min_len(if root_node.height() > 0 { 1 } else { 0 });\n         } else {\n             assert_eq!(self.length, 0);\n         }\n+\n+        self.assert_ascending();\n     }\n \n     /// Returns the height of the root, if any.\n@@ -79,10 +79,28 @@ impl<'a, K: 'a, V: 'a> BTreeMap<K, V> {\n             String::from(\"not yet allocated\")\n         }\n     }\n+\n+    /// Asserts that the keys are in strictly ascending order.\n+    fn assert_ascending(&self)\n+    where\n+        K: Copy + Debug + Ord,\n+    {\n+        let mut num_seen = 0;\n+        let mut keys = self.keys();\n+        if let Some(mut previous) = keys.next() {\n+            num_seen = 1;\n+            for next in keys {\n+                assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n+                previous = next;\n+                num_seen += 1;\n+            }\n+        }\n+        assert_eq!(num_seen, self.len());\n+    }\n }\n \n impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal> {\n-    pub fn assert_min_len(self, min_len: usize) {\n+    fn assert_min_len(self, min_len: usize) {\n         assert!(self.len() >= min_len, \"{} < {}\", self.len(), min_len);\n         if let node::ForceResult::Internal(node) = self.force() {\n             for idx in 0..=node.len() {"}, {"sha": "38c75de34eeebb8a16242a04c77856467a97f284", "filename": "library/alloc/src/collections/btree/node/tests.rs", "status": "modified", "additions": 0, "deletions": 37, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/e099138eb6274b8450fbbb3c1fec0389337eb992/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e099138eb6274b8450fbbb3c1fec0389337eb992/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fnode%2Ftests.rs?ref=e099138eb6274b8450fbbb3c1fec0389337eb992", "patch": "@@ -17,43 +17,6 @@ impl<'a, K: 'a, V: 'a> NodeRef<marker::Immut<'a>, K, V, marker::LeafOrInternal>\n         }\n     }\n \n-    /// Asserts that the keys are in strictly ascending order.\n-    /// Returns how many keys it encountered.\n-    pub fn assert_ascending(self) -> usize\n-    where\n-        K: Copy + Debug + Ord,\n-    {\n-        struct SeriesChecker<T> {\n-            num_seen: usize,\n-            previous: Option<T>,\n-        }\n-        impl<T: Copy + Debug + Ord> SeriesChecker<T> {\n-            fn is_ascending(&mut self, next: T) {\n-                if let Some(previous) = self.previous {\n-                    assert!(previous < next, \"{:?} >= {:?}\", previous, next);\n-                }\n-                self.previous = Some(next);\n-                self.num_seen += 1;\n-            }\n-        }\n-\n-        let mut checker = SeriesChecker { num_seen: 0, previous: None };\n-        self.visit_nodes_in_order(|pos| match pos {\n-            navigate::Position::Leaf(node) => {\n-                for idx in 0..node.len() {\n-                    let key = *unsafe { node.key_at(idx) };\n-                    checker.is_ascending(key);\n-                }\n-            }\n-            navigate::Position::InternalKV(kv) => {\n-                let key = *kv.into_kv().0;\n-                checker.is_ascending(key);\n-            }\n-            navigate::Position::Internal(_) => {}\n-        });\n-        checker.num_seen\n-    }\n-\n     pub fn dump_keys(self) -> String\n     where\n         K: Debug,"}]}