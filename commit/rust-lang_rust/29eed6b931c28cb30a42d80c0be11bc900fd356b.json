{"sha": "29eed6b931c28cb30a42d80c0be11bc900fd356b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ZWVkNmI5MzFjMjhjYjMwYTQyZDgwYzBiZTExYmM5MDBmZDM1NmI=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-17T17:11:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-18T11:37:14Z"}, "message": "make liballoc internal test suite mostly pass in Miri", "tree": {"sha": "08fb73cb179f72af7a76e3ac50de3a0c67fb8fb0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/08fb73cb179f72af7a76e3ac50de3a0c67fb8fb0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29eed6b931c28cb30a42d80c0be11bc900fd356b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29eed6b931c28cb30a42d80c0be11bc900fd356b", "html_url": "https://github.com/rust-lang/rust/commit/29eed6b931c28cb30a42d80c0be11bc900fd356b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29eed6b931c28cb30a42d80c0be11bc900fd356b/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c3d3c1777041200bb7ed7a65b6562d62899778c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c3d3c1777041200bb7ed7a65b6562d62899778c", "html_url": "https://github.com/rust-lang/rust/commit/3c3d3c1777041200bb7ed7a65b6562d62899778c"}], "stats": {"total": 16, "additions": 15, "deletions": 1}, "files": [{"sha": "ddc6481eec78e9d703b4a26499cd60cac93b8cca", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=29eed6b931c28cb30a42d80c0be11bc900fd356b", "patch": "@@ -252,6 +252,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg(not(miri))] // Miri does not support benchmarks\n     fn alloc_owned_small(b: &mut Bencher) {\n         b.iter(|| {\n             let _: Box<_> = box 10;"}, {"sha": "cb390aa419ed4038316bcea971a6b4450a7189e5", "filename": "src/liballoc/collections/linked_list.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fcollections%2Flinked_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Flinked_list.rs?ref=29eed6b931c28cb30a42d80c0be11bc900fd356b", "patch": "@@ -1354,6 +1354,7 @@ mod tests {\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    #[cfg(not(miri))] // Miri does not support threads\n     fn test_send() {\n         let n = list_from(&[1, 2, 3]);\n         thread::spawn(move || {\n@@ -1371,6 +1372,7 @@ mod tests {\n         for _ in 0..25 {\n             fuzz_test(3);\n             fuzz_test(16);\n+            #[cfg(not(miri))] // Miri is too slow\n             fuzz_test(189);\n         }\n     }"}, {"sha": "2ecc1df17ded5c039e31741d62bffb2dca0e0320", "filename": "src/liballoc/collections/vec_deque.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fcollections%2Fvec_deque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fcollections%2Fvec_deque.rs?ref=29eed6b931c28cb30a42d80c0be11bc900fd356b", "patch": "@@ -2799,6 +2799,7 @@ mod tests {\n     use super::VecDeque;\n \n     #[bench]\n+    #[cfg(not(miri))] // Miri does not support benchmarks\n     fn bench_push_back_100(b: &mut test::Bencher) {\n         let mut deq = VecDeque::with_capacity(101);\n         b.iter(|| {\n@@ -2811,6 +2812,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg(not(miri))] // Miri does not support benchmarks\n     fn bench_push_front_100(b: &mut test::Bencher) {\n         let mut deq = VecDeque::with_capacity(101);\n         b.iter(|| {\n@@ -2823,6 +2825,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg(not(miri))] // Miri does not support benchmarks\n     fn bench_pop_back_100(b: &mut test::Bencher) {\n         let mut deq = VecDeque::<i32>::with_capacity(101);\n \n@@ -2836,6 +2839,7 @@ mod tests {\n     }\n \n     #[bench]\n+    #[cfg(not(miri))] // Miri does not support benchmarks\n     fn bench_pop_front_100(b: &mut test::Bencher) {\n         let mut deq = VecDeque::<i32>::with_capacity(101);\n \n@@ -3090,6 +3094,11 @@ mod tests {\n     fn test_vec_from_vecdeque() {\n         use crate::vec::Vec;\n \n+        #[cfg(not(miri))] // Miri is too slow\n+        let max_pwr = 7;\n+        #[cfg(miri)]\n+        let max_pwr = 5;\n+\n         fn create_vec_and_test_convert(cap: usize, offset: usize, len: usize) {\n             let mut vd = VecDeque::with_capacity(cap);\n             for _ in 0..offset {\n@@ -3103,7 +3112,7 @@ mod tests {\n             assert!(vec.into_iter().eq(vd));\n         }\n \n-        for cap_pwr in 0..7 {\n+        for cap_pwr in 0..max_pwr {\n             // Make capacity as a (2^x)-1, so that the ring size is 2^x\n             let cap = (2i32.pow(cap_pwr) - 1) as usize;\n "}, {"sha": "466e806663c7f331d9baaee713c8a16947d551bf", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29eed6b931c28cb30a42d80c0be11bc900fd356b/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=29eed6b931c28cb30a42d80c0be11bc900fd356b", "patch": "@@ -1678,6 +1678,7 @@ mod tests {\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    #[cfg(not(miri))] // Miri does not support threads\n     fn manually_share_arc() {\n         let v = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n         let arc_v = Arc::new(v);\n@@ -1982,6 +1983,7 @@ mod tests {\n \n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n+    #[cfg(not(miri))] // Miri does not support threads\n     fn test_weak_count_locked() {\n         let mut a = Arc::new(atomic::AtomicBool::new(false));\n         let a2 = a.clone();"}]}