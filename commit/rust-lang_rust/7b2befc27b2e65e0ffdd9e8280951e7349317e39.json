{"sha": "7b2befc27b2e65e0ffdd9e8280951e7349317e39", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdiMmJlZmMyN2IyZTY1ZTBmZmRkOWU4MjgwOTUxZTczNDkzMTdlMzk=", "commit": {"author": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-08T18:38:43Z"}, "committer": {"name": "Fabian Wolff", "email": "fabian.wolff@alumni.ethz.ch", "date": "2021-06-08T18:41:16Z"}, "message": "Check the number of generic lifetime and const parameters of intrinsics", "tree": {"sha": "e7da0467d4ddff4056842a309e83b65f9e612a58", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e7da0467d4ddff4056842a309e83b65f9e612a58"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7b2befc27b2e65e0ffdd9e8280951e7349317e39", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7b2befc27b2e65e0ffdd9e8280951e7349317e39", "html_url": "https://github.com/rust-lang/rust/commit/7b2befc27b2e65e0ffdd9e8280951e7349317e39", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7b2befc27b2e65e0ffdd9e8280951e7349317e39/comments", "author": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "FabianWolff", "id": 16052130, "node_id": "MDQ6VXNlcjE2MDUyMTMw", "avatar_url": "https://avatars.githubusercontent.com/u/16052130?v=4", "gravatar_id": "", "url": "https://api.github.com/users/FabianWolff", "html_url": "https://github.com/FabianWolff", "followers_url": "https://api.github.com/users/FabianWolff/followers", "following_url": "https://api.github.com/users/FabianWolff/following{/other_user}", "gists_url": "https://api.github.com/users/FabianWolff/gists{/gist_id}", "starred_url": "https://api.github.com/users/FabianWolff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/FabianWolff/subscriptions", "organizations_url": "https://api.github.com/users/FabianWolff/orgs", "repos_url": "https://api.github.com/users/FabianWolff/repos", "events_url": "https://api.github.com/users/FabianWolff/events{/privacy}", "received_events_url": "https://api.github.com/users/FabianWolff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a50d72158e08e02cfc051b863017bdbd2c45b637", "url": "https://api.github.com/repos/rust-lang/rust/commits/a50d72158e08e02cfc051b863017bdbd2c45b637", "html_url": "https://github.com/rust-lang/rust/commit/a50d72158e08e02cfc051b863017bdbd2c45b637"}], "stats": {"total": 144, "additions": 116, "deletions": 28}, "files": [{"sha": "42cd2aa185315ee165f677a8aa63376de580bbbb", "filename": "compiler/rustc_error_codes/src/error_codes/E0094.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "raw_url": "https://github.com/rust-lang/rust/raw/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_codes%2Fsrc%2Ferror_codes%2FE0094.md?ref=7b2befc27b2e65e0ffdd9e8280951e7349317e39", "patch": "@@ -1,4 +1,5 @@\n-An invalid number of type parameters was given to an intrinsic function.\n+An invalid number of generic type, lifetime, or const parameters was\n+given to an intrinsic function.\n \n Erroneous code example:\n "}, {"sha": "7a7ecb06132b97fbe127008c722fc51032a6b537", "filename": "compiler/rustc_typeck/src/check/intrinsic.rs", "status": "modified", "additions": 62, "deletions": 24, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fintrinsic.rs?ref=7b2befc27b2e65e0ffdd9e8280951e7349317e39", "patch": "@@ -3,11 +3,11 @@\n \n use crate::errors::{\n     SimdShuffleMissingLength, UnrecognizedAtomicOperation, UnrecognizedIntrinsicFunction,\n-    WrongNumberOfTypeArgumentsToInstrinsic,\n+    WrongNumberOfGenericArgumentsToInstrinsic,\n };\n use crate::require_same_types;\n \n-use rustc_errors::struct_span_err;\n+use rustc_errors::{pluralize, struct_span_err};\n use rustc_hir as hir;\n use rustc_middle::traits::{ObligationCause, ObligationCauseCode};\n use rustc_middle::ty::subst::Subst;\n@@ -21,36 +21,68 @@ fn equate_intrinsic_type<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     it: &hir::ForeignItem<'_>,\n     n_tps: usize,\n+    n_lts: usize,\n     sig: ty::PolyFnSig<'tcx>,\n ) {\n-    match it.kind {\n-        hir::ForeignItemKind::Fn(..) => {}\n+    let (gen_lts, gen_tys, gen_cns, span) = match &it.kind {\n+        hir::ForeignItemKind::Fn(.., generics) => {\n+            let mut gen_lts = 0;\n+            let mut gen_tys = 0;\n+            let mut gen_cns = 0;\n+\n+            for param in generics.params {\n+                match param.kind {\n+                    hir::GenericParamKind::Lifetime { .. } => {\n+                        gen_lts += 1;\n+                    }\n+                    hir::GenericParamKind::Type { .. } => {\n+                        gen_tys += 1;\n+                    }\n+                    hir::GenericParamKind::Const { .. } => {\n+                        gen_cns += 1;\n+                    }\n+                }\n+            }\n+\n+            (gen_lts, gen_tys, gen_cns, generics.span)\n+        }\n         _ => {\n             struct_span_err!(tcx.sess, it.span, E0622, \"intrinsic must be a function\")\n                 .span_label(it.span, \"expected a function\")\n                 .emit();\n             return;\n         }\n-    }\n-\n-    let i_n_tps = tcx.generics_of(it.def_id).own_counts().types;\n-    if i_n_tps != n_tps {\n-        let span = match it.kind {\n-            hir::ForeignItemKind::Fn(_, _, ref generics) => generics.span,\n-            _ => bug!(),\n-        };\n+    };\n \n-        tcx.sess.emit_err(WrongNumberOfTypeArgumentsToInstrinsic {\n+    if gen_lts != n_lts {\n+        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n+            span,\n+            found: gen_lts,\n+            expected: n_lts,\n+            expected_pluralize: pluralize!(n_lts),\n+            descr: \"lifetime\",\n+        });\n+    } else if gen_tys != n_tps {\n+        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n             span,\n-            found: i_n_tps,\n+            found: gen_tys,\n             expected: n_tps,\n+            expected_pluralize: pluralize!(n_tps),\n+            descr: \"type\",\n         });\n-        return;\n+    } else if gen_cns != 0 {\n+        tcx.sess.emit_err(WrongNumberOfGenericArgumentsToInstrinsic {\n+            span,\n+            found: gen_cns,\n+            expected: 0,\n+            expected_pluralize: pluralize!(0),\n+            descr: \"const\",\n+        });\n+    } else {\n+        let fty = tcx.mk_fn_ptr(sig);\n+        let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n+        require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n     }\n-\n-    let fty = tcx.mk_fn_ptr(sig);\n-    let cause = ObligationCause::new(it.span, it.hir_id(), ObligationCauseCode::IntrinsicType);\n-    require_same_types(tcx, &cause, tcx.mk_fn_ptr(tcx.fn_sig(it.def_id)), fty);\n }\n \n /// Returns `true` if the given intrinsic is unsafe to call or not.\n@@ -121,7 +153,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n         })\n     };\n \n-    let (n_tps, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n+    let (n_tps, n_lts, inputs, output, unsafety) = if name_str.starts_with(\"atomic_\") {\n         let split: Vec<&str> = name_str.split('_').collect();\n         assert!(split.len() >= 2, \"Atomic intrinsic in an incorrect format\");\n \n@@ -143,7 +175,7 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, hir::Unsafety::Unsafe)\n+        (n_tps, 0, inputs, output, hir::Unsafety::Unsafe)\n     } else {\n         let unsafety = intrinsic_operation_unsafety(intrinsic_name);\n         let (n_tps, inputs, output) = match intrinsic_name {\n@@ -372,11 +404,17 @@ pub fn check_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>) {\n                 return;\n             }\n         };\n-        (n_tps, inputs, output, unsafety)\n+        (\n+            n_tps,\n+            if matches!(intrinsic_name, sym::va_copy) { 1 } else { 0 },\n+            inputs,\n+            output,\n+            unsafety,\n+        )\n     };\n     let sig = tcx.mk_fn_sig(inputs.into_iter(), output, false, unsafety, Abi::RustIntrinsic);\n     let sig = ty::Binder::bind_with_vars(sig, bound_vars);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, n_lts, sig)\n }\n \n /// Type-check `extern \"platform-intrinsic\" { ... }` functions.\n@@ -472,5 +510,5 @@ pub fn check_platform_intrinsic_type(tcx: TyCtxt<'_>, it: &hir::ForeignItem<'_>)\n         Abi::PlatformIntrinsic,\n     );\n     let sig = ty::Binder::dummy(sig);\n-    equate_intrinsic_type(tcx, it, n_tps, sig)\n+    equate_intrinsic_type(tcx, it, n_tps, 0, sig)\n }"}, {"sha": "bc686a025a650b67801a65dd22a42f50b6069187", "filename": "compiler/rustc_typeck/src/errors.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2befc27b2e65e0ffdd9e8280951e7349317e39/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Ferrors.rs?ref=7b2befc27b2e65e0ffdd9e8280951e7349317e39", "patch": "@@ -24,13 +24,15 @@ pub struct UnrecognizedAtomicOperation<'a> {\n \n #[derive(SessionDiagnostic)]\n #[error = \"E0094\"]\n-pub struct WrongNumberOfTypeArgumentsToInstrinsic {\n-    #[message = \"intrinsic has wrong number of type \\\n+pub struct WrongNumberOfGenericArgumentsToInstrinsic<'a> {\n+    #[message = \"intrinsic has wrong number of {descr} \\\n                          parameters: found {found}, expected {expected}\"]\n-    #[label = \"expected {expected} type parameter\"]\n+    #[label = \"expected {expected} {descr} parameter{expected_pluralize}\"]\n     pub span: Span,\n     pub found: usize,\n     pub expected: usize,\n+    pub expected_pluralize: &'a str,\n+    pub descr: &'a str,\n }\n \n #[derive(SessionDiagnostic)]"}, {"sha": "61aa15be47f633a52b27f1c20895c0a63f2dd8f0", "filename": "src/test/ui/simd-intrinsic/issue-85855.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7b2befc27b2e65e0ffdd9e8280951e7349317e39/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7b2befc27b2e65e0ffdd9e8280951e7349317e39/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.rs?ref=7b2befc27b2e65e0ffdd9e8280951e7349317e39", "patch": "@@ -0,0 +1,20 @@\n+// Check that appropriate errors are reported if an intrinsic is defined\n+// with the wrong number of generic lifetime/type/const parameters, and\n+// that no ICE occurs in these cases.\n+\n+#![feature(platform_intrinsics)]\n+#![crate_type=\"lib\"]\n+\n+extern \"platform-intrinsic\" {\n+    fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of lifetime parameters\n+\n+    fn simd_add<'a, T>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of lifetime parameters\n+\n+    fn simd_sub<T, U>(x: T, y: U);\n+    //~^ ERROR: intrinsic has wrong number of type parameters\n+\n+    fn simd_mul<T, const N: usize>(x: T, y: T);\n+    //~^ ERROR: intrinsic has wrong number of const parameters\n+}"}, {"sha": "7dfdecb9520a79a845fe120d57040d896c884209", "filename": "src/test/ui/simd-intrinsic/issue-85855.stderr", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7b2befc27b2e65e0ffdd9e8280951e7349317e39/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7b2befc27b2e65e0ffdd9e8280951e7349317e39/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsimd-intrinsic%2Fissue-85855.stderr?ref=7b2befc27b2e65e0ffdd9e8280951e7349317e39", "patch": "@@ -0,0 +1,27 @@\n+error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:9:27\n+   |\n+LL |     fn simd_saturating_add<'a, T: 'a>(x: T, y: T);\n+   |                           ^^^^^^^^^^^ expected 0 lifetime parameters\n+\n+error[E0094]: intrinsic has wrong number of lifetime parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:12:16\n+   |\n+LL |     fn simd_add<'a, T>(x: T, y: T);\n+   |                ^^^^^^^ expected 0 lifetime parameters\n+\n+error[E0094]: intrinsic has wrong number of type parameters: found 2, expected 1\n+  --> $DIR/issue-85855.rs:15:16\n+   |\n+LL |     fn simd_sub<T, U>(x: T, y: U);\n+   |                ^^^^^^ expected 1 type parameter\n+\n+error[E0094]: intrinsic has wrong number of const parameters: found 1, expected 0\n+  --> $DIR/issue-85855.rs:18:16\n+   |\n+LL |     fn simd_mul<T, const N: usize>(x: T, y: T);\n+   |                ^^^^^^^^^^^^^^^^^^^ expected 0 const parameters\n+\n+error: aborting due to 4 previous errors\n+\n+For more information about this error, try `rustc --explain E0094`."}]}