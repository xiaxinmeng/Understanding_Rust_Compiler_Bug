{"sha": "a434ecef51bc8cf20b626267ef90c2887aa5116a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE0MzRlY2VmNTFiYzhjZjIwYjYyNjI2N2VmOTBjMjg4N2FhNTExNmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T16:55:01Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T16:55:01Z"}, "message": "Merge #5212\n\n5212: Fix module renaming r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "5937a337fcd51d4c5a556fd96d232c1bdd5112c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5937a337fcd51d4c5a556fd96d232c1bdd5112c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a434ecef51bc8cf20b626267ef90c2887aa5116a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/2LlCRBK7hj4Ov3rIwAAdHIIAE+qNroOt0nchSZnwXWtIiaJ\nd9P0ShginoadwEGORKWxR0HnSVa+WZwI9sE9DqmiaOuVF+o/HD0HjlJq4VK/4xhp\nHybJ142qGfSoE3oWBKcUYZy20ugtRH/gW0vC+dMOBgmXwsqi/8+8u6EAwVCM7q8A\nac3jLjA37Cl8DJyxTlWQZJ3klLHHJNFwtKvWAlfp3SbE0UxS+ufF+ZXt98kqjpBs\nK7P9xvyWmiN2KtKBqAg3dt9onbfEWtDe3vE2sEjdWEl+rTfsNqFN//B6CmEdIQxJ\nmOsU7WByjY4bF2IvFqVwnwXdqDdneuvi4g5msoT16jivgZ22tD1P5a7tq3MBkic=\n=MctD\n-----END PGP SIGNATURE-----\n", "payload": "tree 5937a337fcd51d4c5a556fd96d232c1bdd5112c6\nparent 82bfaef7df35c659afd2611f8d975c084375bf46\nparent f4a3bc30b82490ae97840b35b23b43ecadee4d8b\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593795301 +0000\ncommitter GitHub <noreply@github.com> 1593795301 +0000\n\nMerge #5212\n\n5212: Fix module renaming r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a434ecef51bc8cf20b626267ef90c2887aa5116a", "html_url": "https://github.com/rust-lang/rust/commit/a434ecef51bc8cf20b626267ef90c2887aa5116a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a434ecef51bc8cf20b626267ef90c2887aa5116a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82bfaef7df35c659afd2611f8d975c084375bf46", "url": "https://api.github.com/repos/rust-lang/rust/commits/82bfaef7df35c659afd2611f8d975c084375bf46", "html_url": "https://github.com/rust-lang/rust/commit/82bfaef7df35c659afd2611f8d975c084375bf46"}, {"sha": "f4a3bc30b82490ae97840b35b23b43ecadee4d8b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f4a3bc30b82490ae97840b35b23b43ecadee4d8b", "html_url": "https://github.com/rust-lang/rust/commit/f4a3bc30b82490ae97840b35b23b43ecadee4d8b"}], "stats": {"total": 1043, "additions": 489, "deletions": 554}, "files": [{"sha": "8735ec53cf2ae379ffed0b2f82c08c2d061025d6", "filename": "crates/ra_ide/src/references/rename.rs", "status": "modified", "additions": 489, "deletions": 554, "changes": 1043, "blob_url": "https://github.com/rust-lang/rust/blob/a434ecef51bc8cf20b626267ef90c2887aa5116a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a434ecef51bc8cf20b626267ef90c2887aa5116a/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences%2Frename.rs?ref=a434ecef51bc8cf20b626267ef90c2887aa5116a", "patch": "@@ -116,8 +116,7 @@ fn rename_mod(\n             } else {\n                 format!(\"{}.rs\", new_name)\n             };\n-            let move_file =\n-                FileSystemEdit::MoveFile { src: file_id, anchor: position.file_id, dst };\n+            let move_file = FileSystemEdit::MoveFile { src: file_id, anchor: file_id, dst };\n             file_system_edits.push(move_file);\n         }\n         ModuleSource::Module(..) => {}\n@@ -271,370 +270,321 @@ fn rename_reference(\n \n #[cfg(test)]\n mod tests {\n-    use insta::assert_debug_snapshot;\n+    use expect::{expect, Expect};\n     use ra_text_edit::TextEditBuilder;\n     use stdx::trim_indent;\n     use test_utils::{assert_eq_text, mark};\n \n     use crate::{mock_analysis::analysis_and_position, FileId};\n \n+    fn check(new_name: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+        let ra_fixture_after = &trim_indent(ra_fixture_after);\n+        let (analysis, position) = analysis_and_position(ra_fixture_before);\n+        let source_change = analysis.rename(position, new_name).unwrap();\n+        let mut text_edit_builder = TextEditBuilder::default();\n+        let mut file_id: Option<FileId> = None;\n+        if let Some(change) = source_change {\n+            for edit in change.info.source_file_edits {\n+                file_id = Some(edit.file_id);\n+                for indel in edit.edit.into_iter() {\n+                    text_edit_builder.replace(indel.delete, indel.insert);\n+                }\n+            }\n+        }\n+        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n+        text_edit_builder.finish().apply(&mut result);\n+        assert_eq_text!(ra_fixture_after, &*result);\n+    }\n+\n+    fn check_expect(new_name: &str, ra_fixture: &str, expect: Expect) {\n+        let (analysis, position) = analysis_and_position(ra_fixture);\n+        let source_change = analysis.rename(position, new_name).unwrap().unwrap();\n+        expect.assert_debug_eq(&source_change)\n+    }\n+\n     #[test]\n     fn test_rename_to_underscore() {\n-        test_rename(\n-            r#\"\n-    fn main() {\n-        let i<|> = 1;\n-    }\"#,\n-            \"_\",\n-            r#\"\n-    fn main() {\n-        let _ = 1;\n-    }\"#,\n-        );\n+        check(\"_\", r#\"fn main() { let i<|> = 1; }\"#, r#\"fn main() { let _ = 1; }\"#);\n     }\n \n     #[test]\n     fn test_rename_to_raw_identifier() {\n-        test_rename(\n-            r#\"\n-    fn main() {\n-        let i<|> = 1;\n-    }\"#,\n-            \"r#fn\",\n-            r#\"\n-    fn main() {\n-        let r#fn = 1;\n-    }\"#,\n-        );\n+        check(\"r#fn\", r#\"fn main() { let i<|> = 1; }\"#, r#\"fn main() { let r#fn = 1; }\"#);\n     }\n \n     #[test]\n     fn test_rename_to_invalid_identifier() {\n-        let (analysis, position) = analysis_and_position(\n-            \"\n-    fn main() {\n-        let i<|> = 1;\n-    }\",\n-        );\n+        let (analysis, position) = analysis_and_position(r#\"fn main() { let i<|> = 1; }\"#);\n         let new_name = \"invalid!\";\n         let source_change = analysis.rename(position, new_name).unwrap();\n         assert!(source_change.is_none());\n     }\n \n     #[test]\n     fn test_rename_for_local() {\n-        test_rename(\n+        check(\n+            \"k\",\n             r#\"\n-    fn main() {\n-        let mut i = 1;\n-        let j = 1;\n-        i = i<|> + j;\n+fn main() {\n+    let mut i = 1;\n+    let j = 1;\n+    i = i<|> + j;\n \n-        {\n-            i = 0;\n-        }\n+    { i = 0; }\n \n-        i = 5;\n-    }\"#,\n-            \"k\",\n+    i = 5;\n+}\n+\"#,\n             r#\"\n-    fn main() {\n-        let mut k = 1;\n-        let j = 1;\n-        k = k + j;\n+fn main() {\n+    let mut k = 1;\n+    let j = 1;\n+    k = k + j;\n \n-        {\n-            k = 0;\n-        }\n+    { k = 0; }\n \n-        k = 5;\n-    }\"#,\n+    k = 5;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_args() {\n-        test_rename(\n-            r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let a<|> = \"test\";\n-        foo!(a);\n-    }\"#,\n+        check(\n             \"b\",\n             r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let b = \"test\";\n-        foo!(b);\n-    }\"#,\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a<|> = \"test\";\n+    foo!(a);\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let b = \"test\";\n+    foo!(b);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_args_rev() {\n-        test_rename(\n-            r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let a = \"test\";\n-        foo!(a<|>);\n-    }\"#,\n+        check(\n             \"b\",\n             r#\"\n-    macro_rules! foo {($i:ident) => {$i} }\n-    fn main() {\n-        let b = \"test\";\n-        foo!(b);\n-    }\"#,\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let a = \"test\";\n+    foo!(a<|>);\n+}\n+\"#,\n+            r#\"\n+macro_rules! foo {($i:ident) => {$i} }\n+fn main() {\n+    let b = \"test\";\n+    foo!(b);\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_define_fn() {\n-        test_rename(\n-            r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(foo);\n-    fn main() {\n-        fo<|>o();\n-    }\"#,\n+        check(\n             \"bar\",\n             r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(bar);\n-    fn main() {\n-        bar();\n-    }\"#,\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(foo);\n+fn main() {\n+    fo<|>o();\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(bar);\n+fn main() {\n+    bar();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_macro_define_fn_rev() {\n-        test_rename(\n-            r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(fo<|>o);\n-    fn main() {\n-        foo();\n-    }\"#,\n+        check(\n             \"bar\",\n             r#\"\n-    macro_rules! define_fn {($id:ident) => { fn $id{} }}\n-    define_fn!(bar);\n-    fn main() {\n-        bar();\n-    }\"#,\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(fo<|>o);\n+fn main() {\n+    foo();\n+}\n+\"#,\n+            r#\"\n+macro_rules! define_fn {($id:ident) => { fn $id{} }}\n+define_fn!(bar);\n+fn main() {\n+    bar();\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_for_param_inside() {\n-        test_rename(\n-            r#\"\n-    fn foo(i : u32) -> u32 {\n-        i<|>\n-    }\"#,\n-            \"j\",\n-            r#\"\n-    fn foo(j : u32) -> u32 {\n-        j\n-    }\"#,\n-        );\n+        check(\"j\", r#\"fn foo(i : u32) -> u32 { i<|> }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_refs_for_fn_param() {\n-        test_rename(\n-            r#\"\n-    fn foo(i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n-            \"new_name\",\n-            r#\"\n-    fn foo(new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n-        );\n+        check(\"j\", r#\"fn foo(i<|> : u32) -> u32 { i }\"#, r#\"fn foo(j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_for_mut_param() {\n-        test_rename(\n-            r#\"\n-    fn foo(mut i<|> : u32) -> u32 {\n-        i\n-    }\"#,\n-            \"new_name\",\n-            r#\"\n-    fn foo(mut new_name : u32) -> u32 {\n-        new_name\n-    }\"#,\n-        );\n+        check(\"j\", r#\"fn foo(mut i<|> : u32) -> u32 { i }\"#, r#\"fn foo(mut j : u32) -> u32 { j }\"#);\n     }\n \n     #[test]\n     fn test_rename_struct_field() {\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n+struct Foo { i<|>: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { i: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { i: i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { j: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { j: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { j: i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_struct_field_for_shorthand() {\n         mark::check!(test_rename_struct_field_for_shorthand);\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n+struct Foo { i<|>: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { j: i32 }\n \n-    impl Foo {\n-        fn new(i: i32) -> Self {\n-            Self { j: i }\n-        }\n+impl Foo {\n+    fn new(i: i32) -> Self {\n+        Self { j: i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_local_for_field_shorthand() {\n         mark::check!(test_rename_local_for_field_shorthand);\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn new(i<|>: i32) -> Self {\n-            Self { i }\n-        }\n+impl Foo {\n+    fn new(i<|>: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn new(j: i32) -> Self {\n-            Self { i: j }\n-        }\n+impl Foo {\n+    fn new(j: i32) -> Self {\n+        Self { i: j }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_field_shorthand_correct_struct() {\n-        test_rename(\n-            r#\"\n-    struct Foo {\n-        i<|>: i32,\n-    }\n-\n-    struct Bar {\n-        i: i32,\n-    }\n-\n-    impl Bar {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n-    }\n-    \"#,\n+        check(\n             \"j\",\n             r#\"\n-    struct Foo {\n-        j: i32,\n-    }\n+struct Foo { i<|>: i32 }\n+struct Bar { i: i32 }\n \n-    struct Bar {\n-        i: i32,\n+impl Bar {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n+}\n+\"#,\n+            r#\"\n+struct Foo { j: i32 }\n+struct Bar { i: i32 }\n \n-    impl Bar {\n-        fn new(i: i32) -> Self {\n-            Self { i }\n-        }\n+impl Bar {\n+    fn new(i: i32) -> Self {\n+        Self { i }\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_shadow_local_for_struct_shorthand() {\n-        test_rename(\n+        check(\n+            \"j\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    fn baz(i<|>: i32) -> Self {\n-         let x = Foo { i };\n-         {\n-             let i = 0;\n-             Foo { i }\n-         }\n+fn baz(i<|>: i32) -> Self {\n+     let x = Foo { i };\n+     {\n+         let i = 0;\n+         Foo { i }\n      }\n-    \"#,\n-            \"j\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    fn baz(j: i32) -> Self {\n-         let x = Foo { i: j };\n-         {\n-             let i = 0;\n-             Foo { i }\n-         }\n+fn baz(j: i32) -> Self {\n+     let x = Foo { i: j };\n+     {\n+         let i = 0;\n+         Foo { i }\n      }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_mod() {\n-        let (analysis, position) = analysis_and_position(\n+        check_expect(\n+            \"foo2\",\n             r#\"\n //- /lib.rs\n mod bar;\n@@ -643,53 +593,49 @@ mod bar;\n mod foo<|>;\n \n //- /bar/foo.rs\n-// emtpy\n-            \"#,\n-        );\n-        let new_name = \"foo2\";\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        assert_debug_snapshot!(&source_change,\n-@r###\"\n-        Some(\n-            RangeInfo {\n-                range: 4..7,\n-                info: SourceChange {\n-                    source_file_edits: [\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                2,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"foo2\",\n-                                        delete: 4..7,\n-                                    },\n-                                ],\n+// empty\n+\"#,\n+            expect![[r#\"\n+                RangeInfo {\n+                    range: 4..7,\n+                    info: SourceChange {\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    2,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"foo2\",\n+                                            delete: 4..7,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                    ],\n-                    file_system_edits: [\n-                        MoveFile {\n-                            src: FileId(\n-                                3,\n-                            ),\n-                            anchor: FileId(\n-                                2,\n-                            ),\n-                            dst: \"foo2.rs\",\n-                        },\n-                    ],\n-                    is_snippet: false,\n-                },\n-            },\n-        )\n-        \"###);\n+                        ],\n+                        file_system_edits: [\n+                            MoveFile {\n+                                src: FileId(\n+                                    3,\n+                                ),\n+                                anchor: FileId(\n+                                    3,\n+                                ),\n+                                dst: \"foo2.rs\",\n+                            },\n+                        ],\n+                        is_snippet: false,\n+                    },\n+                }\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_rename_mod_in_use_tree() {\n-        let (analysis, position) = analysis_and_position(\n+        check_expect(\n+            \"quux\",\n             r#\"\n //- /main.rs\n pub mod foo;\n@@ -701,140 +647,173 @@ pub struct FooContent;\n \n //- /bar.rs\n use crate::foo<|>::FooContent;\n-            \"#,\n-        );\n-        let new_name = \"qux\";\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        assert_debug_snapshot!(&source_change,\n-@r###\"\n-        Some(\n-            RangeInfo {\n-                range: 11..14,\n-                info: SourceChange {\n-                    source_file_edits: [\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                1,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"qux\",\n-                                        delete: 8..11,\n-                                    },\n-                                ],\n+\"#,\n+            expect![[r#\"\n+                RangeInfo {\n+                    range: 11..14,\n+                    info: SourceChange {\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"quux\",\n+                                            delete: 8..11,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                3,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"qux\",\n-                                        delete: 11..14,\n-                                    },\n-                                ],\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    3,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"quux\",\n+                                            delete: 11..14,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                    ],\n-                    file_system_edits: [\n-                        MoveFile {\n-                            src: FileId(\n-                                2,\n-                            ),\n-                            anchor: FileId(\n-                                3,\n-                            ),\n-                            dst: \"qux.rs\",\n-                        },\n-                    ],\n-                    is_snippet: false,\n-                },\n-            },\n-        )\n-        \"###);\n+                        ],\n+                        file_system_edits: [\n+                            MoveFile {\n+                                src: FileId(\n+                                    2,\n+                                ),\n+                                anchor: FileId(\n+                                    2,\n+                                ),\n+                                dst: \"quux.rs\",\n+                            },\n+                        ],\n+                        is_snippet: false,\n+                    },\n+                }\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_rename_mod_in_dir() {\n-        let (analysis, position) = analysis_and_position(\n+        check_expect(\n+            \"foo2\",\n             r#\"\n //- /lib.rs\n mod fo<|>o;\n //- /foo/mod.rs\n // emtpy\n-            \"#,\n-        );\n-        let new_name = \"foo2\";\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        assert_debug_snapshot!(&source_change,\n-        @r###\"\n-        Some(\n-            RangeInfo {\n-                range: 4..7,\n-                info: SourceChange {\n-                    source_file_edits: [\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                1,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"foo2\",\n-                                        delete: 4..7,\n-                                    },\n-                                ],\n+\"#,\n+            expect![[r#\"\n+                RangeInfo {\n+                    range: 4..7,\n+                    info: SourceChange {\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"foo2\",\n+                                            delete: 4..7,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                    ],\n-                    file_system_edits: [\n-                        MoveFile {\n-                            src: FileId(\n-                                2,\n-                            ),\n-                            anchor: FileId(\n-                                1,\n-                            ),\n-                            dst: \"../foo2/mod.rs\",\n-                        },\n-                    ],\n-                    is_snippet: false,\n-                },\n-            },\n-        )\n-        \"###\n-               );\n+                        ],\n+                        file_system_edits: [\n+                            MoveFile {\n+                                src: FileId(\n+                                    2,\n+                                ),\n+                                anchor: FileId(\n+                                    2,\n+                                ),\n+                                dst: \"../foo2/mod.rs\",\n+                            },\n+                        ],\n+                        is_snippet: false,\n+                    },\n+                }\n+            \"#]],\n+        );\n     }\n \n     #[test]\n-    fn test_module_rename_in_path() {\n-        test_rename(\n+    fn test_rename_unusually_nested_mod() {\n+        check_expect(\n+            \"bar\",\n             r#\"\n-    mod <|>foo {\n-        pub fn bar() {}\n+//- /lib.rs\n+mod outer { mod fo<|>o; }\n+\n+//- /outer/foo.rs\n+// emtpy\n+\"#,\n+            expect![[r#\"\n+                RangeInfo {\n+                    range: 16..19,\n+                    info: SourceChange {\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"bar\",\n+                                            delete: 16..19,\n+                                        },\n+                                    ],\n+                                },\n+                            },\n+                        ],\n+                        file_system_edits: [\n+                            MoveFile {\n+                                src: FileId(\n+                                    2,\n+                                ),\n+                                anchor: FileId(\n+                                    2,\n+                                ),\n+                                dst: \"bar.rs\",\n+                            },\n+                        ],\n+                        is_snippet: false,\n+                    },\n+                }\n+            \"#]],\n+        );\n     }\n \n-    fn main() {\n-        foo::bar();\n-    }\"#,\n+    #[test]\n+    fn test_module_rename_in_path() {\n+        check(\n             \"baz\",\n             r#\"\n-    mod baz {\n-        pub fn bar() {}\n-    }\n+mod <|>foo { pub fn bar() {} }\n \n-    fn main() {\n-        baz::bar();\n-    }\"#,\n+fn main() { foo::bar(); }\n+\"#,\n+            r#\"\n+mod baz { pub fn bar() {} }\n+\n+fn main() { baz::bar(); }\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_rename_mod_filename_and_path() {\n-        let (analysis, position) = analysis_and_position(\n+        check_expect(\n+            \"foo2\",\n             r#\"\n //- /lib.rs\n mod bar;\n@@ -847,229 +826,185 @@ pub mod foo<|>;\n \n //- /bar/foo.rs\n // pub fn fun() {}\n-            \"#,\n-        );\n-        let new_name = \"foo2\";\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        assert_debug_snapshot!(&source_change,\n-@r###\"\n-        Some(\n-            RangeInfo {\n-                range: 8..11,\n-                info: SourceChange {\n-                    source_file_edits: [\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                2,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"foo2\",\n-                                        delete: 8..11,\n-                                    },\n-                                ],\n+\"#,\n+            expect![[r#\"\n+                RangeInfo {\n+                    range: 8..11,\n+                    info: SourceChange {\n+                        source_file_edits: [\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    2,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"foo2\",\n+                                            delete: 8..11,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                        SourceFileEdit {\n-                            file_id: FileId(\n-                                1,\n-                            ),\n-                            edit: TextEdit {\n-                                indels: [\n-                                    Indel {\n-                                        insert: \"foo2\",\n-                                        delete: 27..30,\n-                                    },\n-                                ],\n+                            SourceFileEdit {\n+                                file_id: FileId(\n+                                    1,\n+                                ),\n+                                edit: TextEdit {\n+                                    indels: [\n+                                        Indel {\n+                                            insert: \"foo2\",\n+                                            delete: 27..30,\n+                                        },\n+                                    ],\n+                                },\n                             },\n-                        },\n-                    ],\n-                    file_system_edits: [\n-                        MoveFile {\n-                            src: FileId(\n-                                3,\n-                            ),\n-                            anchor: FileId(\n-                                2,\n-                            ),\n-                            dst: \"foo2.rs\",\n-                        },\n-                    ],\n-                    is_snippet: false,\n-                },\n-            },\n-        )\n-        \"###);\n+                        ],\n+                        file_system_edits: [\n+                            MoveFile {\n+                                src: FileId(\n+                                    3,\n+                                ),\n+                                anchor: FileId(\n+                                    3,\n+                                ),\n+                                dst: \"foo2.rs\",\n+                            },\n+                        ],\n+                        is_snippet: false,\n+                    },\n+                }\n+            \"#]],\n+        );\n     }\n \n     #[test]\n     fn test_enum_variant_from_module_1() {\n-        test_rename(\n+        check(\n+            \"Baz\",\n             r#\"\n-    mod foo {\n-        pub enum Foo {\n-            Bar<|>,\n-        }\n-    }\n+mod foo {\n+    pub enum Foo { Bar<|> }\n+}\n \n-    fn func(f: foo::Foo) {\n-        match f {\n-            foo::Foo::Bar => {}\n-        }\n+fn func(f: foo::Foo) {\n+    match f {\n+        foo::Foo::Bar => {}\n     }\n-    \"#,\n-            \"Baz\",\n+}\n+\"#,\n             r#\"\n-    mod foo {\n-        pub enum Foo {\n-            Baz,\n-        }\n-    }\n+mod foo {\n+    pub enum Foo { Baz }\n+}\n \n-    fn func(f: foo::Foo) {\n-        match f {\n-            foo::Foo::Baz => {}\n-        }\n+fn func(f: foo::Foo) {\n+    match f {\n+        foo::Foo::Baz => {}\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_enum_variant_from_module_2() {\n-        test_rename(\n+        check(\n+            \"baz\",\n             r#\"\n-    mod foo {\n-        pub struct Foo {\n-            pub bar<|>: uint,\n-        }\n-    }\n+mod foo {\n+    pub struct Foo { pub bar<|>: uint }\n+}\n \n-    fn foo(f: foo::Foo) {\n-        let _ = f.bar;\n-    }\n-    \"#,\n-            \"baz\",\n+fn foo(f: foo::Foo) {\n+    let _ = f.bar;\n+}\n+\"#,\n             r#\"\n-    mod foo {\n-        pub struct Foo {\n-            pub baz: uint,\n-        }\n-    }\n+mod foo {\n+    pub struct Foo { pub baz: uint }\n+}\n \n-    fn foo(f: foo::Foo) {\n-        let _ = f.baz;\n-    }\n-    \"#,\n+fn foo(f: foo::Foo) {\n+    let _ = f.baz;\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_parameter_to_self() {\n-        test_rename(\n+        check(\n+            \"self\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo<|>: &mut Foo) -> i32 {\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo<|>: &mut Foo) -> i32 {\n+        foo.i\n     }\n-    \"#,\n-            \"self\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&mut self) -> i32 {\n-            self.i\n-        }\n+impl Foo {\n+    fn f(&mut self) -> i32 {\n+        self.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_self_to_parameter() {\n-        test_rename(\n+        check(\n+            \"foo\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&mut <|>self) -> i32 {\n-            self.i\n-        }\n+impl Foo {\n+    fn f(&mut <|>self) -> i32 {\n+        self.i\n     }\n-    \"#,\n-            \"foo\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo: &mut Foo) -> i32 {\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo: &mut Foo) -> i32 {\n+        foo.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn test_self_in_path_to_parameter() {\n-        test_rename(\n+        check(\n+            \"foo\",\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(&self) -> i32 {\n-            let self_var = 1;\n-            self<|>.i\n-        }\n+impl Foo {\n+    fn f(&self) -> i32 {\n+        let self_var = 1;\n+        self<|>.i\n     }\n-    \"#,\n-            \"foo\",\n+}\n+\"#,\n             r#\"\n-    struct Foo {\n-        i: i32,\n-    }\n+struct Foo { i: i32 }\n \n-    impl Foo {\n-        fn f(foo: &Foo) -> i32 {\n-            let self_var = 1;\n-            foo.i\n-        }\n+impl Foo {\n+    fn f(foo: &Foo) -> i32 {\n+        let self_var = 1;\n+        foo.i\n     }\n-    \"#,\n+}\n+\"#,\n         );\n     }\n-\n-    fn test_rename(ra_fixture_before: &str, new_name: &str, ra_fixture_after: &str) {\n-        let ra_fixture_after = &trim_indent(ra_fixture_after);\n-        let (analysis, position) = analysis_and_position(ra_fixture_before);\n-        let source_change = analysis.rename(position, new_name).unwrap();\n-        let mut text_edit_builder = TextEditBuilder::default();\n-        let mut file_id: Option<FileId> = None;\n-        if let Some(change) = source_change {\n-            for edit in change.info.source_file_edits {\n-                file_id = Some(edit.file_id);\n-                for indel in edit.edit.into_iter() {\n-                    text_edit_builder.replace(indel.delete, indel.insert);\n-                }\n-            }\n-        }\n-        let mut result = analysis.file_text(file_id.unwrap()).unwrap().to_string();\n-        text_edit_builder.finish().apply(&mut result);\n-        assert_eq_text!(ra_fixture_after, &*result);\n-    }\n }"}]}