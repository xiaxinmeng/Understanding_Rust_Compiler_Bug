{"sha": "0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "node_id": "C_kwDOAAsO6NoAKDBiOWMwYzUwODhiYzZkMTE0NTUwNDNhMWU2YzY1YjA1M2Y4YWNjNDM", "commit": {"author": {"name": "tamasfe", "email": "me@tamasfe.dev", "date": "2023-04-01T13:26:03Z"}, "committer": {"name": "tamasfe", "email": "me@tamasfe.dev", "date": "2023-04-01T13:26:03Z"}, "message": "feat(syntax): RTN in bounds\n\nLimited syntactic support for experimental return type notations.\nhttps://github.com/rust-lang/rust/issues/109417", "tree": {"sha": "ec9259abbf9e79d7a1f8daa78b8b1edb703bccaf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec9259abbf9e79d7a1f8daa78b8b1edb703bccaf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEaKPRjDl8Nf9/jotXI3MEfSfKTkcFAmQoMOsACgkQI3MEfSfK\nTkeVvw/7BH644ai3Hdar3gZAzk3Dqp0a34xP6ZUTPkJCF1K1wDL+r3iBg45VAWIP\n0NUWNrIOdyfAZT9f81nvk094lFfPIeZTJtZNl78Oc2wHu5/17adBsksdagxxjm2f\nKPHcM+3+/BSOBdfYD+HKfJNIRXFJeJYEbIBGprPoMdf/8MpaBTgYyt6b+4lLPW0M\nFj6REMlKvPZs2VI80EGC6P/ZUcT5DeyLIl0Ks5c70i4LsI3LsKTFjK43T/RbfcxZ\n50sSf8Ah+uS9lRXWYxsiepfslWHlRrDw2a4y4HH//B6afJUJ+eyxfERExKTASc0k\nx5R3CHJugYN5/SXt9oBB8mIMxxtRF+VUgw58aBv8ishUMNvnTyxi8M5H0mKna/ju\n2ICdfAT3lZ2etF+qjSTNMHcYJI21ZfS8WIxPJwcQQIRnWjLeBcS7zpX7FLAMvzk0\nY5vGBy9QOO59QHgRyZJBBAGeUfegBQFyoiGF+Eaa+z8FtyhxeUcBH6MTLgk0B1fE\nWrpGolBGZyJa5LZ8YGuK8A4Q1B5ltss4+nu/iRqQOxTouRxezCseO+wbXurjmqbK\nC8WN/5CnC4C8uJmdAFL2dZoPrGvBYnFTC9yjUtYmmjFvqMeu8tUUayxWxiTQoQqK\nQwlPPI0jVkH1/Gw+0PU3GyYdEJnf4hwwKDTmDijSe+Nl2aHP1/g=\n=XYAN\n-----END PGP SIGNATURE-----", "payload": "tree ec9259abbf9e79d7a1f8daa78b8b1edb703bccaf\nparent ffb04ae32de66ca9d12646e5e559ec8ff318c8b1\nauthor tamasfe <me@tamasfe.dev> 1680355563 +0200\ncommitter tamasfe <me@tamasfe.dev> 1680355563 +0200\n\nfeat(syntax): RTN in bounds\n\nLimited syntactic support for experimental return type notations.\nhttps://github.com/rust-lang/rust/issues/109417\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "html_url": "https://github.com/rust-lang/rust/commit/0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/comments", "author": {"login": "tamasfe", "id": 25967296, "node_id": "MDQ6VXNlcjI1OTY3Mjk2", "avatar_url": "https://avatars.githubusercontent.com/u/25967296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasfe", "html_url": "https://github.com/tamasfe", "followers_url": "https://api.github.com/users/tamasfe/followers", "following_url": "https://api.github.com/users/tamasfe/following{/other_user}", "gists_url": "https://api.github.com/users/tamasfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasfe/subscriptions", "organizations_url": "https://api.github.com/users/tamasfe/orgs", "repos_url": "https://api.github.com/users/tamasfe/repos", "events_url": "https://api.github.com/users/tamasfe/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasfe/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tamasfe", "id": 25967296, "node_id": "MDQ6VXNlcjI1OTY3Mjk2", "avatar_url": "https://avatars.githubusercontent.com/u/25967296?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tamasfe", "html_url": "https://github.com/tamasfe", "followers_url": "https://api.github.com/users/tamasfe/followers", "following_url": "https://api.github.com/users/tamasfe/following{/other_user}", "gists_url": "https://api.github.com/users/tamasfe/gists{/gist_id}", "starred_url": "https://api.github.com/users/tamasfe/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tamasfe/subscriptions", "organizations_url": "https://api.github.com/users/tamasfe/orgs", "repos_url": "https://api.github.com/users/tamasfe/repos", "events_url": "https://api.github.com/users/tamasfe/events{/privacy}", "received_events_url": "https://api.github.com/users/tamasfe/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ffb04ae32de66ca9d12646e5e559ec8ff318c8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/ffb04ae32de66ca9d12646e5e559ec8ff318c8b1", "html_url": "https://github.com/rust-lang/rust/commit/ffb04ae32de66ca9d12646e5e559ec8ff318c8b1"}], "stats": {"total": 105, "additions": 103, "deletions": 2}, "files": [{"sha": "6c7e1c25d614541e878bfa10ca7aec45e3dd01fd", "filename": "crates/hir-def/src/path/lower.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fpath%2Flower.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -218,6 +218,9 @@ pub(super) fn lower_generic_args(\n                 let arg = ConstRefOrPath::from_expr_opt(arg.expr());\n                 args.push(GenericArg::Const(arg))\n             }\n+            ast::GenericArg::ReturnTypeArg(_) => {\n+                // TODO: return type notation is experimental, we don't do anything with it yet.\n+            }\n         }\n     }\n "}, {"sha": "55794954a829961b6bc724738b42172f1b940d01", "filename": "crates/parser/src/grammar/generic_args.rs", "status": "modified", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fgrammar%2Fgeneric_args.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -76,6 +76,7 @@ fn generic_arg(p: &mut Parser<'_>) -> bool {\n                 }\n             }\n         }\n+        IDENT if p.nth(1) == T!['('] && p.nth_at(2, T![..]) => return_type_arg(p),\n         _ if p.at_ts(types::TYPE_FIRST) => type_arg(p),\n         _ => return false,\n     }\n@@ -139,3 +140,20 @@ fn type_arg(p: &mut Parser<'_>) {\n     types::type_(p);\n     m.complete(p, TYPE_ARG);\n }\n+\n+// test return_type_arg\n+// type T = S<foo(..): Send>;\n+pub(super) fn return_type_arg(p: &mut Parser<'_>) {\n+    let m = p.start();\n+    p.expect(IDENT);\n+    p.expect(T!['(']);\n+    p.expect(T![..]);\n+    p.expect(T![')']);\n+    if !p.at(T![:]) {\n+        p.error(\"expected :\");\n+        m.abandon(p);\n+        return;\n+    }\n+    generic_params::bounds(p);\n+    m.complete(p, RETURN_TYPE_ARG);\n+}"}, {"sha": "2af6e1b9867cf91d002685f090bdeb04686c62bc", "filename": "crates/parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -245,6 +245,7 @@ pub enum SyntaxKind {\n     GENERIC_PARAM,\n     LIFETIME_PARAM,\n     TYPE_PARAM,\n+    RETURN_TYPE_ARG,\n     CONST_PARAM,\n     GENERIC_ARG_LIST,\n     LIFETIME,"}, {"sha": "26d474f54f47f7f1b7b255394771ec45530e9619", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rast", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rast?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -0,0 +1,33 @@\n+SOURCE_FILE\n+  TYPE_ALIAS\n+    TYPE_KW \"type\"\n+    WHITESPACE \" \"\n+    NAME\n+      IDENT \"T\"\n+    WHITESPACE \" \"\n+    EQ \"=\"\n+    WHITESPACE \" \"\n+    PATH_TYPE\n+      PATH\n+        PATH_SEGMENT\n+          NAME_REF\n+            IDENT \"S\"\n+          GENERIC_ARG_LIST\n+            L_ANGLE \"<\"\n+            RETURN_TYPE_ARG\n+              IDENT \"foo\"\n+              L_PAREN \"(\"\n+              DOT2 \"..\"\n+              R_PAREN \")\"\n+              COLON \":\"\n+              WHITESPACE \" \"\n+              TYPE_BOUND_LIST\n+                TYPE_BOUND\n+                  PATH_TYPE\n+                    PATH\n+                      PATH_SEGMENT\n+                        NAME_REF\n+                          IDENT \"Send\"\n+            R_ANGLE \">\"\n+    SEMICOLON \";\"\n+  WHITESPACE \"\\n\""}, {"sha": "2a9ff270839f8b2b5ac1a13c61df2efffb288954", "filename": "crates/parser/test_data/parser/inline/ok/0206_return_type_arg.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fparser%2Ftest_data%2Fparser%2Finline%2Fok%2F0206_return_type_arg.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -0,0 +1 @@\n+type T = S<foo(..): Send>;"}, {"sha": "08c8749e36c7c159eb3fdcfacd4cf050fba53146", "filename": "crates/syntax/rust.ungram", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Frust.ungram?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -46,6 +46,7 @@ GenericArg =\n | AssocTypeArg\n | LifetimeArg\n | ConstArg\n+| ReturnTypeArg\n \n TypeArg =\n   Type\n@@ -59,6 +60,9 @@ LifetimeArg =\n ConstArg =\n   Expr\n \n+ReturnTypeArg =\n+  NameRef '(' '..' ')' ':' TypeBoundList\n+\n MacroCall =\n   Attr* Path '!' TokenTree ';'?\n "}, {"sha": "6aa7efd83246268fdf4355ecb9bddf33f54ba52d", "filename": "crates/syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 42, "deletions": 2, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -142,6 +142,18 @@ impl ConstArg {\n     pub fn expr(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n \n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ReturnTypeArg {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::HasTypeBounds for ReturnTypeArg {}\n+impl ReturnTypeArg {\n+    pub fn name_ref(&self) -> Option<NameRef> { support::child(&self.syntax) }\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n+    pub fn dotdot_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![..]) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n+}\n+\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeBoundList {\n     pub(crate) syntax: SyntaxNode,\n@@ -1516,6 +1528,7 @@ pub enum GenericArg {\n     AssocTypeArg(AssocTypeArg),\n     LifetimeArg(LifetimeArg),\n     ConstArg(ConstArg),\n+    ReturnTypeArg(ReturnTypeArg),\n }\n \n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n@@ -1865,6 +1878,17 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for ReturnTypeArg {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == RETURN_TYPE_ARG }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for TypeBoundList {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == TYPE_BOUND_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -3219,16 +3243,20 @@ impl From<LifetimeArg> for GenericArg {\n impl From<ConstArg> for GenericArg {\n     fn from(node: ConstArg) -> GenericArg { GenericArg::ConstArg(node) }\n }\n+impl From<ReturnTypeArg> for GenericArg {\n+    fn from(node: ReturnTypeArg) -> GenericArg { GenericArg::ReturnTypeArg(node) }\n+}\n impl AstNode for GenericArg {\n     fn can_cast(kind: SyntaxKind) -> bool {\n-        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG)\n+        matches!(kind, TYPE_ARG | ASSOC_TYPE_ARG | LIFETIME_ARG | CONST_ARG | RETURN_TYPE_ARG)\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n             TYPE_ARG => GenericArg::TypeArg(TypeArg { syntax }),\n             ASSOC_TYPE_ARG => GenericArg::AssocTypeArg(AssocTypeArg { syntax }),\n             LIFETIME_ARG => GenericArg::LifetimeArg(LifetimeArg { syntax }),\n             CONST_ARG => GenericArg::ConstArg(ConstArg { syntax }),\n+            RETURN_TYPE_ARG => GenericArg::ReturnTypeArg(ReturnTypeArg { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3239,6 +3267,7 @@ impl AstNode for GenericArg {\n             GenericArg::AssocTypeArg(it) => &it.syntax,\n             GenericArg::LifetimeArg(it) => &it.syntax,\n             GenericArg::ConstArg(it) => &it.syntax,\n+            GenericArg::ReturnTypeArg(it) => &it.syntax,\n         }\n     }\n }\n@@ -4170,7 +4199,13 @@ impl AstNode for AnyHasTypeBounds {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         matches!(\n             kind,\n-            ASSOC_TYPE_ARG | TRAIT | TYPE_ALIAS | LIFETIME_PARAM | TYPE_PARAM | WHERE_PRED\n+            ASSOC_TYPE_ARG\n+                | RETURN_TYPE_ARG\n+                | TRAIT\n+                | TYPE_ALIAS\n+                | LIFETIME_PARAM\n+                | TYPE_PARAM\n+                | WHERE_PRED\n         )\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -4333,6 +4368,11 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for ReturnTypeArg {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for TypeBoundList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)"}, {"sha": "caef6a7953971bef3e987ec45000ef83ddc3d53e", "filename": "crates/syntax/src/tests/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0b9c0c5088bc6d11455043a1e6c65b053f8acc43/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Ftests%2Fast_src.rs?ref=0b9c0c5088bc6d11455043a1e6c65b053f8acc43", "patch": "@@ -199,6 +199,7 @@ pub(crate) const KINDS_SRC: KindsSrc<'_> = KindsSrc {\n         \"GENERIC_PARAM\",\n         \"LIFETIME_PARAM\",\n         \"TYPE_PARAM\",\n+        \"RETURN_TYPE_ARG\",\n         \"CONST_PARAM\",\n         \"GENERIC_ARG_LIST\",\n         \"LIFETIME\","}]}