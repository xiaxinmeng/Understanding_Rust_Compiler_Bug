{"sha": "c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZDJlY2ViNDU4OGU1ZmU1N2JlNGNiZDQxZGJhYjc4OWY5ZWNiMjk=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-20T23:17:26Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-01-20T23:17:26Z"}, "message": "Teach resolve about linear for loops.", "tree": {"sha": "7aa80804b7680cb5a5eb04247c1edacdbc3f1d83", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7aa80804b7680cb5a5eb04247c1edacdbc3f1d83"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29", "html_url": "https://github.com/rust-lang/rust/commit/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8af013077c01901426f7cb829a98c7f1fbe6613", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8af013077c01901426f7cb829a98c7f1fbe6613", "html_url": "https://github.com/rust-lang/rust/commit/a8af013077c01901426f7cb829a98c7f1fbe6613"}], "stats": {"total": 28, "additions": 26, "deletions": 2}, "files": [{"sha": "9e082ae47b110234b0d26cc5536056018a7db85c", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 26, "deletions": 2, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=c9d2eceb4588e5fe57be4cbd41dbab789f9ecb29", "patch": "@@ -18,6 +18,7 @@ import std._vec;\n tag scope {\n     scope_crate(@ast.crate);\n     scope_item(@ast.item);\n+    scope_loop(@ast.decl); // there's only 1 decl per loop.\n     scope_block(ast.block);\n     scope_arm(ast.arm);\n }\n@@ -317,6 +318,17 @@ fn lookup_name_wrapped(&env e, ast.ident i) -> option.t[tup(@env, def_wrap)] {\n                 }\n             }\n \n+            case (scope_loop(?d)) {\n+                alt (d.node) {\n+                    case (ast.decl_local(?local)) {\n+                        if (_str.eq(local.ident, i)) {\n+                            auto lc = ast.def_local(local.id);\n+                            ret some(def_wrap_other(lc));\n+                        }\n+                    }\n+                }\n+            }\n+\n             case (scope_block(?b)) {\n                 alt (b.node.index.find(i)) {\n                     case (some[uint](?ix)) {\n@@ -494,6 +506,16 @@ fn update_env_for_block(&env e, &ast.block b) -> env {\n     ret rec(scopes = cons[scope](scope_block(b), @e.scopes) with e);\n }\n \n+fn update_env_for_expr(&env e, @ast.expr x) -> env {\n+    alt (x.node) {\n+        case (ast.expr_for(?d, _, _, _)) {\n+            ret rec(scopes = cons[scope](scope_loop(d), @e.scopes) with e);\n+        }\n+        case (_) { }\n+    }\n+    ret e;\n+}\n+\n fn update_env_for_arm(&env e, &ast.arm p) -> env {\n     ret rec(scopes = cons[scope](scope_arm(p), @e.scopes) with e);\n }\n@@ -507,7 +529,8 @@ fn resolve_imports(session.session sess, @ast.crate crate) -> @ast.crate {\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),\n-                update_env_for_arm = bind update_env_for_arm(_,_)\n+                update_env_for_arm = bind update_env_for_arm(_,_),\n+                update_env_for_expr = bind update_env_for_expr(_,_)\n                 with *fld );\n \n     auto e = rec(scopes = nil[scope],\n@@ -528,7 +551,8 @@ fn resolve_crate(session.session sess, @ast.crate crate) -> @ast.crate {\n                 update_env_for_crate = bind update_env_for_crate(_,_),\n                 update_env_for_item = bind update_env_for_item(_,_),\n                 update_env_for_block = bind update_env_for_block(_,_),\n-                update_env_for_arm = bind update_env_for_arm(_,_)\n+                update_env_for_arm = bind update_env_for_arm(_,_),\n+                update_env_for_expr = bind update_env_for_expr(_,_)\n                 with *fld );\n \n     auto e = rec(scopes = nil[scope],"}]}