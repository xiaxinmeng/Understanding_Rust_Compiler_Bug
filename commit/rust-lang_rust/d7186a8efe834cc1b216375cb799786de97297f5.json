{"sha": "d7186a8efe834cc1b216375cb799786de97297f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ3MTg2YThlZmU4MzRjYzFiMjE2Mzc1Y2I3OTk3ODZkZTk3Mjk3ZjU=", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2021-06-09T03:04:06Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-09T03:04:06Z"}, "message": "Rollup merge of #86124 - Aaron1011:ambig-macro-name, r=varkor\n\nInclude macro name in 'local ambiguity' error\n\nCurrently, we only point at the span of the macro argument. When the\nmacro call is itself generated by another macro, this can make it\ndifficult or impossible to determine which macro is responsible for\nproducing the error.", "tree": {"sha": "bdfa64836b5a5333656f3e2577fbc09c3cdb0f4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdfa64836b5a5333656f3e2577fbc09c3cdb0f4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d7186a8efe834cc1b216375cb799786de97297f5", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgwC+mCRBK7hj4Ov3rIwAAic4IAI6vUBogqDbs8aKpyaObMRKl\nm+8adsn1Dib8gQShwZVWQyBJEpYhNkhQk1cspJxAbQmVUvP6Ray+efxHgi3yauaI\n7hx3cNUYmPk5orMusj6oq/YofOxzswQ20ny6Vaa1zX42Bvnp/v3qrlJSTywjdBDV\nKBBV28R3oyiJ0hB3fUJqU6wLXQJRkun1yLtdcaNh69OzVAvP8Leyb6qEV6L0TFp5\nKLaH0AAw6Ski6DmxD15Yfm0A2dIN647FOHp4uTCNAw1g5EzEAdPEFYoBIc7ZZXQ8\nrVApN3RudhLSNO0GDs2wy2FHloaQDf9vUW8ar9JIwTivzYaUopZKve1yufYSyGw=\n=t3+U\n-----END PGP SIGNATURE-----\n", "payload": "tree bdfa64836b5a5333656f3e2577fbc09c3cdb0f4a\nparent c961a0fc88d92b8d7df34eb50ee96b3b8093add8\nparent 822f800ad74c7d43fc8b9170558e144726c3f777\nauthor Yuki Okushi <jtitor@2k36.org> 1623207846 +0900\ncommitter GitHub <noreply@github.com> 1623207846 +0900\n\nRollup merge of #86124 - Aaron1011:ambig-macro-name, r=varkor\n\nInclude macro name in 'local ambiguity' error\n\nCurrently, we only point at the span of the macro argument. When the\nmacro call is itself generated by another macro, this can make it\ndifficult or impossible to determine which macro is responsible for\nproducing the error.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d7186a8efe834cc1b216375cb799786de97297f5", "html_url": "https://github.com/rust-lang/rust/commit/d7186a8efe834cc1b216375cb799786de97297f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d7186a8efe834cc1b216375cb799786de97297f5/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c961a0fc88d92b8d7df34eb50ee96b3b8093add8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c961a0fc88d92b8d7df34eb50ee96b3b8093add8", "html_url": "https://github.com/rust-lang/rust/commit/c961a0fc88d92b8d7df34eb50ee96b3b8093add8"}, {"sha": "822f800ad74c7d43fc8b9170558e144726c3f777", "url": "https://api.github.com/repos/rust-lang/rust/commits/822f800ad74c7d43fc8b9170558e144726c3f777", "html_url": "https://github.com/rust-lang/rust/commit/822f800ad74c7d43fc8b9170558e144726c3f777"}], "stats": {"total": 20, "additions": 13, "deletions": 7}, "files": [{"sha": "efed41de23a89ebf23b7f0c86841db93167d20f5", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=d7186a8efe834cc1b216375cb799786de97297f5", "patch": "@@ -1,6 +1,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n+#![feature(format_args_capture)]\n #![feature(iter_zip)]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]"}, {"sha": "a7434d73abe68ea7ec514b8650eee802313ce095", "filename": "compiler/rustc_expand/src/mbe/macro_parser.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_parser.rs?ref=d7186a8efe834cc1b216375cb799786de97297f5", "patch": "@@ -85,6 +85,7 @@ use smallvec::{smallvec, SmallVec};\n \n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::sync::Lrc;\n+use rustc_span::symbol::Ident;\n use std::borrow::Cow;\n use std::collections::hash_map::Entry::{Occupied, Vacant};\n use std::mem;\n@@ -615,7 +616,11 @@ fn inner_parse_loop<'root, 'tt>(\n \n /// Use the given sequence of token trees (`ms`) as a matcher. Match the token\n /// stream from the given `parser` against it and return the match.\n-pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> NamedParseResult {\n+pub(super) fn parse_tt(\n+    parser: &mut Cow<'_, Parser<'_>>,\n+    ms: &[TokenTree],\n+    macro_name: Ident,\n+) -> NamedParseResult {\n     // A queue of possible matcher positions. We initialize it with the matcher position in which\n     // the \"dot\" is before the first token of the first token tree in `ms`. `inner_parse_loop` then\n     // processes all of these possible matcher positions and produces possible next positions into\n@@ -711,7 +716,7 @@ pub(super) fn parse_tt(parser: &mut Cow<'_, Parser<'_>>, ms: &[TokenTree]) -> Na\n             return Error(\n                 parser.token.span,\n                 format!(\n-                    \"local ambiguity: multiple parsing options: {}\",\n+                    \"local ambiguity when calling macro `{macro_name}`: multiple parsing options: {}\",\n                     match next_items.len() {\n                         0 => format!(\"built-in NTs {}.\", nts),\n                         1 => format!(\"built-in NTs {} or 1 other option.\", nts),"}, {"sha": "abad190b072ab3081cc8ce064bdd659c147e55c8", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d7186a8efe834cc1b216375cb799786de97297f5/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=d7186a8efe834cc1b216375cb799786de97297f5", "patch": "@@ -245,7 +245,7 @@ fn generic_extension<'cx>(\n         // are not recorded. On the first `Success(..)`ful matcher, the spans are merged.\n         let mut gated_spans_snapshot = mem::take(&mut *sess.gated_spans.spans.borrow_mut());\n \n-        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt) {\n+        match parse_tt(&mut Cow::Borrowed(&parser), lhs_tt, name) {\n             Success(named_matches) => {\n                 // The matcher was `Success(..)`ful.\n                 // Merge the gated spans from parsing the matcher with the pre-existing ones.\n@@ -338,7 +338,7 @@ fn generic_extension<'cx>(\n                 _ => continue,\n             };\n             if let Success(_) =\n-                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt)\n+                parse_tt(&mut Cow::Borrowed(&parser_from_cx(sess, arg.clone())), lhs_tt, name)\n             {\n                 if comma_span.is_dummy() {\n                     err.note(\"you might be missing a comma\");\n@@ -432,7 +432,7 @@ pub fn compile_declarative_macro(\n     ];\n \n     let parser = Parser::new(&sess.parse_sess, body, true, rustc_parse::MACRO_ARGUMENTS);\n-    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram) {\n+    let argument_map = match parse_tt(&mut Cow::Borrowed(&parser), &argument_gram, def.ident) {\n         Success(m) => m,\n         Failure(token, msg) => {\n             let s = parse_failure_msg(&token);"}, {"sha": "68b278fd3c88685c217711f147c56b5ca589433a", "filename": "src/test/ui/macros/local-ambiguity-multiple-parsing-options.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d7186a8efe834cc1b216375cb799786de97297f5/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d7186a8efe834cc1b216375cb799786de97297f5/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Flocal-ambiguity-multiple-parsing-options.stderr?ref=d7186a8efe834cc1b216375cb799786de97297f5", "patch": "@@ -1,10 +1,10 @@\n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:7:12\n    |\n LL | ambiguity!(error);\n    |            ^^^^^\n \n-error: local ambiguity: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n+error: local ambiguity when calling macro `ambiguity`: multiple parsing options: built-in NTs ident ('i') or ident ('j').\n   --> $DIR/local-ambiguity-multiple-parsing-options.rs:8:12\n    |\n LL | ambiguity!(error);"}]}