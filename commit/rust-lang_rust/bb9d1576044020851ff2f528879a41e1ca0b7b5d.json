{"sha": "bb9d1576044020851ff2f528879a41e1ca0b7b5d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJiOWQxNTc2MDQ0MDIwODUxZmYyZjUyODg3OWE0MWUxY2EwYjdiNWQ=", "commit": {"author": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-08-25T21:39:50Z"}, "committer": {"name": "Joshua Nelson", "email": "jyn514@gmail.com", "date": "2020-09-05T17:48:19Z"}, "message": "Address my own review comments\n\n- Remove unneeded lifetime parameter\n- Comment why some code doesn't use `check_full_res`", "tree": {"sha": "2a5e3520f16dd5fc1d7774280258723bea7ed6fa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a5e3520f16dd5fc1d7774280258723bea7ed6fa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bb9d1576044020851ff2f528879a41e1ca0b7b5d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bb9d1576044020851ff2f528879a41e1ca0b7b5d", "html_url": "https://github.com/rust-lang/rust/commit/bb9d1576044020851ff2f528879a41e1ca0b7b5d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bb9d1576044020851ff2f528879a41e1ca0b7b5d/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2ca6f11663709bcbc113d3dd223ae51442460e15", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ca6f11663709bcbc113d3dd223ae51442460e15", "html_url": "https://github.com/rust-lang/rust/commit/2ca6f11663709bcbc113d3dd223ae51442460e15"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "b35ec2e73cb2768f90deb93a71d2b2e79dc858ae", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/bb9d1576044020851ff2f528879a41e1ca0b7b5d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bb9d1576044020851ff2f528879a41e1ca0b7b5d/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=bb9d1576044020851ff2f528879a41e1ca0b7b5d", "patch": "@@ -399,6 +399,7 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n                     } else {\n                         // See if it only broke because of the namespace.\n                         let kind = cx.enter_resolver(|resolver| {\n+                            // NOTE: this doesn't use `check_full_res` because we explicitly want to ignore `TypeNS` (we already checked it)\n                             for &ns in &[MacroNS, ValueNS] {\n                                 match resolver\n                                     .resolve_str_path_error(DUMMY_SP, &path_root, ns, module_id)\n@@ -563,9 +564,15 @@ impl<'a, 'tcx> LinkCollector<'a, 'tcx> {\n         }\n     }\n \n-    // used for reporting better errors\n+    /// Used for reporting better errors.\n+    ///\n+    /// Returns whether the link resolved 'fully' in another namespace.\n+    /// 'fully' here means that all parts of the link resolved, not just some path segments.\n+    /// This returns the `Res` even if it was erroneous for some reason\n+    /// (such as having invalid URL fragments or being in the wrong namespace).\n     fn check_full_res(\n         &self,\n+        // TODO: is this parameter actually needed, since we return results for the wrong namespace?\n         ns: Namespace,\n         path_str: &str,\n         base_node: Option<DefId>,\n@@ -1609,10 +1616,10 @@ fn anchor_failure(\n     });\n }\n \n-fn ambiguity_error<'a>(\n+fn ambiguity_error(\n     cx: &DocContext<'_>,\n     item: &Item,\n-    path_str: &'a str,\n+    path_str: &str,\n     dox: &str,\n     link_range: Option<Range<usize>>,\n     candidates: Vec<Res>,"}]}