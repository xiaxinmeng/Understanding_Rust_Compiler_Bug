{"sha": "e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1YmNiNjllNGY4OGM3NTM2YjEwMzlhODgxODE2Y2I4ZjFjMWY4Njc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:39:53Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-23T13:39:53Z"}, "message": "Hide ImportId", "tree": {"sha": "85f8b45861da7737b73e5961c53e7297045f2a5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/85f8b45861da7737b73e5961c53e7297045f2a5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "html_url": "https://github.com/rust-lang/rust/commit/e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3bdb0349061a8a62c8490336efe7549c5525bb90", "url": "https://api.github.com/repos/rust-lang/rust/commits/3bdb0349061a8a62c8490336efe7549c5525bb90", "html_url": "https://github.com/rust-lang/rust/commit/3bdb0349061a8a62c8490336efe7549c5525bb90"}], "stats": {"total": 47, "additions": 26, "deletions": 21}, "files": [{"sha": "50c9a79fc00cc72ea0193873973f7330bfaae150", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 11, "deletions": 15, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "patch": "@@ -9,7 +9,7 @@ use hir_def::{\n     body::scope::ExprScopes,\n     builtin_type::BuiltinType,\n     docs::Documentation,\n-    nameres::per_ns::PerNs,\n+    nameres::{per_ns::PerNs, raw::ImportId},\n     resolver::{HasResolver, TypeNs},\n     type_ref::TypeRef,\n     ContainerId, CrateModuleId, HasModule, ImplId, LocalEnumVariantId, LocalStructFieldId, Lookup,\n@@ -30,7 +30,7 @@ use crate::{\n         TypeAliasId,\n     },\n     ty::{InferenceResult, Namespace, TraitRef},\n-    Either, HasSource, ImportId, Name, Source, Ty,\n+    Either, HasSource, Name, Source, Ty,\n };\n \n /// hir::Crate describes a single crate. It's the main interface with which\n@@ -129,17 +129,6 @@ impl Module {\n         })\n     }\n \n-    /// Returns the syntax of the last path segment corresponding to this import\n-    pub fn import_source(\n-        self,\n-        db: &impl HirDatabase,\n-        import: ImportId,\n-    ) -> Either<ast::UseTree, ast::ExternCrateItem> {\n-        let src = self.definition_source(db);\n-        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n-        source_map.get(&src.value, import)\n-    }\n-\n     /// Returns the crate this module is part of.\n     pub fn krate(self) -> Crate {\n         Crate { crate_id: self.id.krate }\n@@ -189,11 +178,13 @@ impl Module {\n     }\n \n     /// Returns a `ModuleScope`: a set of items, visible in this module.\n-    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<ImportId>)> {\n+    pub fn scope(self, db: &impl HirDatabase) -> Vec<(Name, ScopeDef, Option<Import>)> {\n         db.crate_def_map(self.id.krate)[self.id.module_id]\n             .scope\n             .entries()\n-            .map(|(name, res)| (name.clone(), res.def.into(), res.import))\n+            .map(|(name, res)| {\n+                (name.clone(), res.def.into(), res.import.map(|id| Import { parent: self, id }))\n+            })\n             .collect()\n     }\n \n@@ -236,6 +227,11 @@ impl Module {\n     }\n }\n \n+pub struct Import {\n+    pub(crate) parent: Module,\n+    pub(crate) id: ImportId,\n+}\n+\n #[derive(Debug, Clone, Copy, PartialEq, Eq, Hash)]\n pub struct StructField {\n     pub(crate) parent: VariantDef,"}, {"sha": "ceb3daa277793ae3f9642ffced734402ed3a6443", "filename": "crates/ra_hir/src/code_model/src.rs", "status": "modified", "additions": 11, "deletions": 1, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model%2Fsrc.rs?ref=e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "patch": "@@ -8,7 +8,7 @@ use crate::{\n     db::{AstDatabase, DefDatabase, HirDatabase},\n     ids::AstItemDef,\n     Const, Enum, EnumVariant, FieldSource, Function, HasBody, MacroDef, Module, ModuleSource,\n-    Static, Struct, StructField, Trait, TypeAlias, Union,\n+    Static, Struct, StructField, Trait, TypeAlias, Union, Import\n };\n \n pub use hir_expand::Source;\n@@ -113,6 +113,16 @@ impl HasSource for MacroDef {\n         Source { file_id: self.id.ast_id.file_id(), value: self.id.ast_id.to_node(db) }\n     }\n }\n+impl HasSource for Import {\n+    type Ast = Either<ast::UseTree, ast::ExternCrateItem>;\n+\n+    /// Returns the syntax of the last path segment corresponding to this import\n+    fn source(self, db: &(impl DefDatabase + AstDatabase)) -> Source<Self::Ast> {\n+        let src = self.parent.definition_source(db);\n+        let (_, source_map) = db.raw_items_with_source_map(src.file_id);\n+        src.with_value(source_map.get(&src.value, self.id))\n+    }\n+}\n \n pub trait HasBodySource: HasBody + HasSource\n where"}, {"sha": "e51d4d063cb1569863804c7fa888088ef8e52b31", "filename": "crates/ra_hir/src/lib.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Flib.rs?ref=e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "patch": "@@ -53,8 +53,8 @@ pub use crate::{\n         src::{HasBodySource, HasSource},\n         Adt, AssocItem, AttrDef, Const, Container, Crate, CrateDependency, DefWithBody, Docs, Enum,\n         EnumVariant, FieldSource, Function, GenericDef, GenericParam, HasAttrs, HasBody, ImplBlock,\n-        Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct, StructField,\n-        Trait, TypeAlias, Union, VariantDef,\n+        Import, Local, MacroDef, Module, ModuleDef, ModuleSource, ScopeDef, Static, Struct,\n+        StructField, Trait, TypeAlias, Union, VariantDef,\n     },\n     expr::ExprScopes,\n     from_source::FromSource,\n@@ -70,7 +70,6 @@ pub use crate::{\n pub use hir_def::{\n     builtin_type::BuiltinType,\n     docs::Documentation,\n-    nameres::raw::ImportId,\n     path::{Path, PathKind},\n     type_ref::Mutability,\n };"}, {"sha": "63e25e0bf10dfa802c1f12e4514b1e1c2dd8d9cb", "filename": "crates/ra_ide_api/src/completion/complete_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5bcb69e4f88c7536b1039a881816cb8f1c1f867/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_path.rs?ref=e5bcb69e4f88c7536b1039a881816cb8f1c1f867", "patch": "@@ -1,6 +1,6 @@\n //! FIXME: write short doc here\n \n-use hir::{Adt, Either, PathResolution};\n+use hir::{Adt, Either, HasSource, PathResolution};\n use ra_syntax::AstNode;\n use test_utils::tested_by;\n \n@@ -27,7 +27,7 @@ pub(super) fn complete_path(acc: &mut Completions, ctx: &CompletionContext) {\n                 }\n                 if Some(module) == ctx.module {\n                     if let Some(import) = import {\n-                        if let Either::A(use_tree) = module.import_source(ctx.db, import) {\n+                        if let Either::A(use_tree) = import.source(ctx.db).value {\n                             if use_tree.syntax().text_range().contains_inclusive(ctx.offset) {\n                                 // for `use self::foo<|>`, don't suggest `foo` as a completion\n                                 tested_by!(dont_complete_current_use);"}]}