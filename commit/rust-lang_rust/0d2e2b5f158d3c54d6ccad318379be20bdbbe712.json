{"sha": "0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkMmUyYjVmMTU4ZDNjNTRkNmNjYWQzMTgzNzliZTIwYmRiYmU3MTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T09:55:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-19T09:55:30Z"}, "message": "Auto merge of #6935 - matthiaskrgr:qmark_marco, r=flip1995\n\nneedless_question_mark: don't lint if Some(..) is inside a macro def and the ? is not.\n\nThe suggestion would fail to apply.\n\nFixes #6921\n\nchangelog: needless_question_mark: don't lint if Some(..) is inside a macro def and the ? is not.", "tree": {"sha": "f4559e730cf935b79cad288e44a8842139103f78", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4559e730cf935b79cad288e44a8842139103f78"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "html_url": "https://github.com/rust-lang/rust/commit/0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36aee1c52663472870d2fe43658b27a74e1e6f9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36aee1c52663472870d2fe43658b27a74e1e6f9a", "html_url": "https://github.com/rust-lang/rust/commit/36aee1c52663472870d2fe43658b27a74e1e6f9a"}, {"sha": "b42ec5e04d51e2fa16a689ce61128533559f09ff", "url": "https://api.github.com/repos/rust-lang/rust/commits/b42ec5e04d51e2fa16a689ce61128533559f09ff", "html_url": "https://github.com/rust-lang/rust/commit/b42ec5e04d51e2fa16a689ce61128533559f09ff"}], "stats": {"total": 70, "additions": 68, "deletions": 2}, "files": [{"sha": "9852633b7342e48b8448d0c8228b2f9a3189581b", "filename": "clippy_lints/src/needless_question_mark.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/clippy_lints%2Fsrc%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_question_mark.rs?ref=0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "patch": "@@ -1,7 +1,7 @@\n use clippy_utils::diagnostics::span_lint_and_sugg;\n use clippy_utils::source::snippet;\n use clippy_utils::ty::is_type_diagnostic_item;\n-use clippy_utils::{is_ok_ctor, is_some_ctor, meets_msrv};\n+use clippy_utils::{differing_macro_contexts, is_ok_ctor, is_some_ctor, meets_msrv};\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::{Body, Expr, ExprKind, LangItem, MatchSource, QPath};\n@@ -173,6 +173,11 @@ fn is_some_or_ok_call<'a>(\n             // question mark operator\n             let inner_expr = &args[0];\n \n+            // if the inner expr is inside macro but the outer one is not, do not lint (#6921)\n+            if  differing_macro_contexts(expr.span, inner_expr.span) {\n+                return None;\n+            }\n+\n             let inner_ty = cx.typeck_results().expr_ty(inner_expr);\n             let outer_ty = cx.typeck_results().expr_ty(expr);\n "}, {"sha": "fd8433870bb1b8e6bd07e4e45e4ef06b48d6f14f", "filename": "tests/ui/needless_question_mark.fixed", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.fixed?ref=0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "patch": "@@ -167,3 +167,28 @@ mod question_mark_both {\n         needless_question_mark_result();\n     }\n }\n+\n+// #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n+// the suggestion fails to apply; do not lint\n+macro_rules! some_in_macro {\n+    ($expr:expr) => {\n+        || -> _ { Some($expr) }()\n+    };\n+}\n+\n+pub fn test1() {\n+    let x = Some(3);\n+    let _x = some_in_macro!(x?);\n+}\n+\n+// this one is ok because both the ? and the Some are both inside the macro def\n+macro_rules! some_and_qmark_in_macro {\n+    ($expr:expr) => {\n+        || -> Option<_> { Some($expr) }()\n+    };\n+}\n+\n+pub fn test2() {\n+    let x = Some(3);\n+    let _x = some_and_qmark_in_macro!(x?);\n+}"}, {"sha": "36d45ac7e03e29789c7a43cde1150c57ce2a928e", "filename": "tests/ui/needless_question_mark.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.rs?ref=0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "patch": "@@ -167,3 +167,28 @@ mod question_mark_both {\n         needless_question_mark_result();\n     }\n }\n+\n+// #6921 if a macro wraps an expr in Some(  ) and the ? is in the macro use,\n+// the suggestion fails to apply; do not lint\n+macro_rules! some_in_macro {\n+    ($expr:expr) => {\n+        || -> _ { Some($expr) }()\n+    };\n+}\n+\n+pub fn test1() {\n+    let x = Some(3);\n+    let _x = some_in_macro!(x?);\n+}\n+\n+// this one is ok because both the ? and the Some are both inside the macro def\n+macro_rules! some_and_qmark_in_macro {\n+    ($expr:expr) => {\n+        || -> Option<_> { Some(Some($expr)?) }()\n+    };\n+}\n+\n+pub fn test2() {\n+    let x = Some(3);\n+    let _x = some_and_qmark_in_macro!(x?);\n+}"}, {"sha": "7cbf1e505adf63dff27f884fb4315c971bb1a1a3", "filename": "tests/ui/needless_question_mark.stderr", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/0d2e2b5f158d3c54d6ccad318379be20bdbbe712/tests%2Fui%2Fneedless_question_mark.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneedless_question_mark.stderr?ref=0d2e2b5f158d3c54d6ccad318379be20bdbbe712", "patch": "@@ -84,5 +84,16 @@ error: question mark operator is useless here\n LL |         Ok(to.magic?) // should be triggered\n    |         ^^^^^^^^^^^^^ help: try: `to.magic`\n \n-error: aborting due to 14 previous errors\n+error: question mark operator is useless here\n+  --> $DIR/needless_question_mark.rs:187:27\n+   |\n+LL |         || -> Option<_> { Some(Some($expr)?) }()\n+   |                           ^^^^^^^^^^^^^^^^^^ help: try: `Some($expr)`\n+...\n+LL |     let _x = some_and_qmark_in_macro!(x?);\n+   |              ---------------------------- in this macro invocation\n+   |\n+   = note: this error originates in a macro (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 15 previous errors\n "}]}