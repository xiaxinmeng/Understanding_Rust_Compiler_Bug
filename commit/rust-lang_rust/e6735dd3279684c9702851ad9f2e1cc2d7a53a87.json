{"sha": "e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU2NzM1ZGQzMjc5Njg0Yzk3MDI4NTFhZDlmMmUxY2MyZDdhNTNhODc=", "commit": {"author": {"name": "Oliver Schneider", "email": "oli-obk@users.noreply.github.com", "date": "2018-05-06T13:41:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-05-06T13:41:24Z"}, "message": "Merge pull request #2729 from mikerite/fix_compilation_20180505\n\nFixes compilation for rust nightly 2018-05-05", "tree": {"sha": "e9b3b8eb61011a2f8c6591b57e9eb4e1f62aca69", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9b3b8eb61011a2f8c6591b57e9eb4e1f62aca69"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJa7wYECRBK7hj4Ov3rIwAAdHIIABT7Sv8K8ayUCKXJ5ORmQzVE\nvibcIYBGkKjrONo7EfJ5r6Xe2YR6ZVzwWNrVq5hx4IMvJVBhBvB8UCMYUGNVEpqP\nu0M5RmKHLT/rkqI2JIxgbidUpHmg5CTzxX3fcmBKS9NpsBxbFLnWOtvaz3CSbeR0\n4N61HAs3nsPykVMFAv1XBfcjlDqQymMETg0LgLeKW5BCr66CxkTTOs0Bgqqgow6E\n56mc783+pTfGhod63Bx8AdszkWGWedj/EqxvbbphwQEXdJFy9nqlZtsOlkad65P6\nETNW7ZpY60bFNEavOwjz9LhZPZTErFbgOpVfUILKJgVCuiLw6kzM6GVMjna/570=\n=5CwS\n-----END PGP SIGNATURE-----\n", "payload": "tree e9b3b8eb61011a2f8c6591b57e9eb4e1f62aca69\nparent 66165c680003645b4eb6aec2eb250ea8aa22a837\nparent 1477f348582ee6a55ecb9fc00e1cd5c14f5c3c90\nauthor Oliver Schneider <oli-obk@users.noreply.github.com> 1525614084 +0200\ncommitter GitHub <noreply@github.com> 1525614084 +0200\n\nMerge pull request #2729 from mikerite/fix_compilation_20180505\n\nFixes compilation for rust nightly 2018-05-05"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "html_url": "https://github.com/rust-lang/rust/commit/e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "66165c680003645b4eb6aec2eb250ea8aa22a837", "url": "https://api.github.com/repos/rust-lang/rust/commits/66165c680003645b4eb6aec2eb250ea8aa22a837", "html_url": "https://github.com/rust-lang/rust/commit/66165c680003645b4eb6aec2eb250ea8aa22a837"}, {"sha": "1477f348582ee6a55ecb9fc00e1cd5c14f5c3c90", "url": "https://api.github.com/repos/rust-lang/rust/commits/1477f348582ee6a55ecb9fc00e1cd5c14f5c3c90", "html_url": "https://github.com/rust-lang/rust/commit/1477f348582ee6a55ecb9fc00e1cd5c14f5c3c90"}], "stats": {"total": 58, "additions": 29, "deletions": 29}, "files": [{"sha": "795ef2f99252386939ccd9df66c0015e2d6d4d5e", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "patch": "@@ -3,7 +3,7 @@ use rustc::hir::intravisit as visit;\n use rustc::hir::map::Node::{NodeExpr, NodeStmt};\n use rustc::lint::*;\n use rustc::middle::expr_use_visitor::*;\n-use rustc::middle::mem_categorization::{cmt, Categorization};\n+use rustc::middle::mem_categorization::{cmt_, Categorization};\n use rustc::ty::{self, Ty};\n use rustc::ty::layout::LayoutOf;\n use rustc::util::nodemap::NodeSet;\n@@ -86,16 +86,16 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Pass {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, mode: ConsumeMode) {\n+    fn consume(&mut self, _: NodeId, _: Span, cmt: &cmt_<'tcx>, mode: ConsumeMode) {\n         if let Categorization::Local(lid) = cmt.cat {\n             if let Move(DirectRefMove) = mode {\n                 // moved out or in. clearly can't be localized\n                 self.set.remove(&lid);\n             }\n         }\n     }\n-    fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {}\n-    fn consume_pat(&mut self, consume_pat: &Pat, cmt: cmt<'tcx>, _: ConsumeMode) {\n+    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: MatchMode) {}\n+    fn consume_pat(&mut self, consume_pat: &Pat, cmt: &cmt_<'tcx>, _: ConsumeMode) {\n         let map = &self.cx.tcx.hir;\n         if map.is_argument(consume_pat.id) {\n             // Skip closure arguments\n@@ -135,7 +135,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n             }\n         }\n     }\n-    fn borrow(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, _: ty::Region, _: ty::BorrowKind, loan_cause: LoanCause) {\n+    fn borrow(&mut self, _: NodeId, _: Span, cmt: &cmt_<'tcx>, _: ty::Region, _: ty::BorrowKind, loan_cause: LoanCause) {\n         if let Categorization::Local(lid) = cmt.cat {\n             match loan_cause {\n                 // x.foo()\n@@ -157,7 +157,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}\n-    fn mutate(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: MutateMode) {}\n+    fn mutate(&mut self, _: NodeId, _: Span, _: &cmt_<'tcx>, _: MutateMode) {}\n }\n \n impl<'a, 'tcx> EscapeDelegate<'a, 'tcx> {"}, {"sha": "df5e4b885bcef1a68e78164159b3ef1000a70fe2", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "patch": "@@ -10,7 +10,7 @@ use rustc::middle::region;\n // use rustc::middle::region::CodeExtent;\n use rustc::middle::expr_use_visitor::*;\n use rustc::middle::mem_categorization::Categorization;\n-use rustc::middle::mem_categorization::cmt;\n+use rustc::middle::mem_categorization::cmt_;\n use rustc::ty::{self, Ty};\n use rustc::ty::subst::Subst;\n use std::collections::{HashMap, HashSet};\n@@ -1412,13 +1412,13 @@ struct MutatePairDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutatePairDelegate {\n-    fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: NodeId, _: Span, _: &cmt_<'tcx>, _: ConsumeMode) {}\n \n-    fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {}\n+    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: MatchMode) {}\n \n-    fn consume_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: ConsumeMode) {}\n+    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n+    fn borrow(&mut self, _: NodeId, sp: Span, cmt: &cmt_<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             if let Categorization::Local(id) = cmt.cat {\n                 if Some(id) == self.node_id_low {\n@@ -1431,7 +1431,7 @@ impl<'tcx> Delegate<'tcx> for MutatePairDelegate {\n         }\n     }\n \n-    fn mutate(&mut self, _: NodeId, sp: Span, cmt: cmt<'tcx>, _: MutateMode) {\n+    fn mutate(&mut self, _: NodeId, sp: Span, cmt: &cmt_<'tcx>, _: MutateMode) {\n         if let Categorization::Local(id) = cmt.cat {\n             if Some(id) == self.node_id_low {\n                 self.span_low = Some(sp)\n@@ -2255,19 +2255,19 @@ impl<'tcx> MutVarsDelegate {\n \n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: NodeId, _: Span, _: cmt<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: NodeId, _: Span, _: &cmt_<'tcx>, _: ConsumeMode) {}\n \n-    fn matched_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: MatchMode) {}\n+    fn matched_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: MatchMode) {}\n \n-    fn consume_pat(&mut self, _: &Pat, _: cmt<'tcx>, _: ConsumeMode) {}\n+    fn consume_pat(&mut self, _: &Pat, _: &cmt_<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n+    fn borrow(&mut self, _: NodeId, _: Span, cmt: &cmt_<'tcx>, _: ty::Region, bk: ty::BorrowKind, _: LoanCause) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             self.update(&cmt.cat)\n         }\n     }\n \n-    fn mutate(&mut self, _: NodeId, _: Span, cmt: cmt<'tcx>, _: MutateMode) {\n+    fn mutate(&mut self, _: NodeId, _: Span, cmt: &cmt_<'tcx>, _: MutateMode) {\n         self.update(&cmt.cat)\n     }\n "}, {"sha": "d2836ffc2d6d31bcbc060fc9b6ef09829cfff710", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e6735dd3279684c9702851ad9f2e1cc2d7a53a87/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=e6735dd3279684c9702851ad9f2e1cc2d7a53a87", "patch": "@@ -308,15 +308,15 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n         }\n     }\n \n-    fn move_common(&mut self, _consume_id: NodeId, _span: Span, cmt: mc::cmt<'tcx>) {\n+    fn move_common(&mut self, _consume_id: NodeId, _span: Span, cmt: &mc::cmt_<'tcx>) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if let mc::Categorization::Local(vid) = cmt.cat {\n             self.moved_vars.insert(vid);\n         }\n     }\n \n-    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt<'tcx>) {\n+    fn non_moving_pat(&mut self, matched_pat: &Pat, cmt: &mc::cmt_<'tcx>) {\n         let cmt = unwrap_downcast_or_interior(cmt);\n \n         if let mc::Categorization::Local(vid) = cmt.cat {\n@@ -367,41 +367,41 @@ impl<'a, 'tcx> MovedVariablesCtxt<'a, 'tcx> {\n }\n \n impl<'a, 'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt<'a, 'tcx> {\n-    fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+    fn consume(&mut self, consume_id: NodeId, consume_span: Span, cmt: &mc::cmt_<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move(_) = mode {\n             self.move_common(consume_id, consume_span, cmt);\n         }\n     }\n \n-    fn matched_pat(&mut self, matched_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::MatchMode) {\n+    fn matched_pat(&mut self, matched_pat: &Pat, cmt: &mc::cmt_<'tcx>, mode: euv::MatchMode) {\n         if let euv::MatchMode::MovingMatch = mode {\n             self.move_common(matched_pat.id, matched_pat.span, cmt);\n         } else {\n             self.non_moving_pat(matched_pat, cmt);\n         }\n     }\n \n-    fn consume_pat(&mut self, consume_pat: &Pat, cmt: mc::cmt<'tcx>, mode: euv::ConsumeMode) {\n+    fn consume_pat(&mut self, consume_pat: &Pat, cmt: &mc::cmt_<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move(_) = mode {\n             self.move_common(consume_pat.id, consume_pat.span, cmt);\n         }\n     }\n \n-    fn borrow(&mut self, _: NodeId, _: Span, _: mc::cmt<'tcx>, _: ty::Region, _: ty::BorrowKind, _: euv::LoanCause) {}\n+    fn borrow(&mut self, _: NodeId, _: Span, _: &mc::cmt_<'tcx>, _: ty::Region, _: ty::BorrowKind, _: euv::LoanCause) {}\n \n-    fn mutate(&mut self, _: NodeId, _: Span, _: mc::cmt<'tcx>, _: euv::MutateMode) {}\n+    fn mutate(&mut self, _: NodeId, _: Span, _: &mc::cmt_<'tcx>, _: euv::MutateMode) {}\n \n     fn decl_without_init(&mut self, _: NodeId, _: Span) {}\n }\n \n \n-fn unwrap_downcast_or_interior(mut cmt: mc::cmt) -> mc::cmt {\n+fn unwrap_downcast_or_interior<'a, 'tcx>(mut cmt: &'a mc::cmt_<'tcx>) -> mc::cmt_<'tcx> {\n     loop {\n-        match cmt.cat.clone() {\n-            mc::Categorization::Downcast(c, _) | mc::Categorization::Interior(c, _) => {\n+        match cmt.cat {\n+            mc::Categorization::Downcast(ref c, _) | mc::Categorization::Interior(ref c, _) => {\n                 cmt = c;\n             },\n-            _ => return cmt,\n+            _ => return (*cmt).clone(),\n         }\n-    }\n+    };\n }"}]}