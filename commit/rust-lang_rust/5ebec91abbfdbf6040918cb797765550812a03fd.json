{"sha": "5ebec91abbfdbf6040918cb797765550812a03fd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVlYmVjOTFhYmJmZGJmNjA0MDkxOGNiNzk3NzY1NTUwODEyYTAzZmQ=", "commit": {"author": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-24T00:00:00Z"}, "committer": {"name": "Tomasz Mi\u0105sko", "email": "tomasz.miasko@gmail.com", "date": "2020-01-27T11:08:53Z"}, "message": "compiletest: Parse EarlyProps from a reader", "tree": {"sha": "842af33e342f9a59ba59a52fdab91f373443b88f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/842af33e342f9a59ba59a52fdab91f373443b88f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ebec91abbfdbf6040918cb797765550812a03fd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ebec91abbfdbf6040918cb797765550812a03fd", "html_url": "https://github.com/rust-lang/rust/commit/5ebec91abbfdbf6040918cb797765550812a03fd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ebec91abbfdbf6040918cb797765550812a03fd/comments", "author": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmiasko", "id": 51362316, "node_id": "MDQ6VXNlcjUxMzYyMzE2", "avatar_url": "https://avatars.githubusercontent.com/u/51362316?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmiasko", "html_url": "https://github.com/tmiasko", "followers_url": "https://api.github.com/users/tmiasko/followers", "following_url": "https://api.github.com/users/tmiasko/following{/other_user}", "gists_url": "https://api.github.com/users/tmiasko/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmiasko/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmiasko/subscriptions", "organizations_url": "https://api.github.com/users/tmiasko/orgs", "repos_url": "https://api.github.com/users/tmiasko/repos", "events_url": "https://api.github.com/users/tmiasko/events{/privacy}", "received_events_url": "https://api.github.com/users/tmiasko/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6137fb730d59141ff2f5744b6cf36e29ef74e94", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6137fb730d59141ff2f5744b6cf36e29ef74e94", "html_url": "https://github.com/rust-lang/rust/commit/a6137fb730d59141ff2f5744b6cf36e29ef74e94"}], "stats": {"total": 14, "additions": 10, "deletions": 4}, "files": [{"sha": "029afd1b38f798bd6de86711c45924a6000362d5", "filename": "src/tools/compiletest/src/header.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ebec91abbfdbf6040918cb797765550812a03fd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ebec91abbfdbf6040918cb797765550812a03fd/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fheader.rs?ref=5ebec91abbfdbf6040918cb797765550812a03fd", "patch": "@@ -34,6 +34,11 @@ pub struct EarlyProps {\n \n impl EarlyProps {\n     pub fn from_file(config: &Config, testfile: &Path) -> Self {\n+        let file = File::open(testfile).unwrap();\n+        Self::from_reader(config, testfile, file)\n+    }\n+\n+    pub fn from_reader<R: Read>(config: &Config, testfile: &Path, rdr: R) -> Self {\n         let mut props = EarlyProps {\n             ignore: false,\n             should_fail: false,\n@@ -45,7 +50,7 @@ impl EarlyProps {\n         let rustc_has_profiler_support = env::var_os(\"RUSTC_PROFILER_SUPPORT\").is_some();\n         let rustc_has_sanitizer_support = env::var_os(\"RUSTC_SANITIZER_SUPPORT\").is_some();\n \n-        iter_header(testfile, None, &mut |ln| {\n+        iter_header(testfile, None, rdr, &mut |ln| {\n             // we should check if any only-<platform> exists and if it exists\n             // and does not matches the current platform, skip the test\n             if !props.ignore {\n@@ -392,7 +397,8 @@ impl TestProps {\n     /// `//[foo]`), then the property is ignored unless `cfg` is\n     /// `Some(\"foo\")`.\n     fn load_from(&mut self, testfile: &Path, cfg: Option<&str>, config: &Config) {\n-        iter_header(testfile, cfg, &mut |ln| {\n+        let file = File::open(testfile).unwrap();\n+        iter_header(testfile, cfg, file, &mut |ln| {\n             if let Some(ep) = config.parse_error_pattern(ln) {\n                 self.error_patterns.push(ep);\n             }\n@@ -617,7 +623,7 @@ impl TestProps {\n     }\n }\n \n-fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n+fn iter_header<R: Read>(testfile: &Path, cfg: Option<&str>, rdr: R, it: &mut dyn FnMut(&str)) {\n     if testfile.is_dir() {\n         return;\n     }\n@@ -628,7 +634,7 @@ fn iter_header(testfile: &Path, cfg: Option<&str>, it: &mut dyn FnMut(&str)) {\n     // It took me like 2 days to debug why compile-flags weren\u2019t taken into account for my test :)\n     let comment_with_brace = comment.to_string() + \"[\";\n \n-    let mut rdr = BufReader::new(File::open(testfile).unwrap());\n+    let mut rdr = BufReader::new(rdr);\n     let mut ln = String::new();\n \n     loop {"}]}