{"sha": "8f5ef6172c520df95779e5da509989e8233053bf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhmNWVmNjE3MmM1MjBkZjk1Nzc5ZTVkYTUwOTk4OWU4MjMzMDUzYmY=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T18:10:08Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2019-12-20T18:10:08Z"}, "message": "Remove to_addr and to_addr_maybe_unsized", "tree": {"sha": "06262d6c4884d8b9fdb1d819ba0f40018434a89b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/06262d6c4884d8b9fdb1d819ba0f40018434a89b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f5ef6172c520df95779e5da509989e8233053bf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f5ef6172c520df95779e5da509989e8233053bf", "html_url": "https://github.com/rust-lang/rust/commit/8f5ef6172c520df95779e5da509989e8233053bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f5ef6172c520df95779e5da509989e8233053bf/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "696053e69f398ecd395e6a74fd58ba634368f57f", "url": "https://api.github.com/repos/rust-lang/rust/commits/696053e69f398ecd395e6a74fd58ba634368f57f", "html_url": "https://github.com/rust-lang/rust/commit/696053e69f398ecd395e6a74fd58ba634368f57f"}], "stats": {"total": 35, "additions": 12, "deletions": 23}, "files": [{"sha": "c626ddfc18411f000759e6913206a720074f7f08", "filename": "src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=8f5ef6172c520df95779e5da509989e8233053bf", "patch": "@@ -611,7 +611,8 @@ pub fn codegen_drop<'tcx>(fx: &mut FunctionCx<'_, 'tcx, impl Backend>, drop_plac\n         let drop_fn_ty = drop_fn.ty(fx.tcx);\n         match ty.kind {\n             ty::Dynamic(..) => {\n-                let (ptr, vtable) = drop_place.to_addr_maybe_unsized(fx);\n+                let (ptr, vtable) = drop_place.to_ptr_maybe_unsized(fx);\n+                let ptr = ptr.get_addr(fx);\n                 let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n \n                 let fn_sig = fx.tcx.normalize_erasing_late_bound_regions("}, {"sha": "d37f05cd98652c0028e5722085ec29e32ef62600", "filename": "src/abi/pass_mode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fpass_mode.rs?ref=8f5ef6172c520df95779e5da509989e8233053bf", "patch": "@@ -119,7 +119,7 @@ pub fn adjust_arg_for_abi<'tcx>(\n             let (a, b) = arg.load_scalar_pair(fx);\n             Pair(a, b)\n         }\n-        PassMode::ByRef => Single(arg.force_stack(fx)),\n+        PassMode::ByRef => Single(arg.force_stack(fx).get_addr(fx)),\n     }\n }\n "}, {"sha": "d566a5176649677b2aa126d1e4baf5301311bce0", "filename": "src/abi/returning.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Freturning.rs?ref=8f5ef6172c520df95779e5da509989e8233053bf", "patch": "@@ -58,7 +58,7 @@ pub fn codegen_with_call_return_arg<'tcx, B: Backend, T>(\n     let return_ptr = match output_pass_mode {\n         PassMode::NoPass => None,\n         PassMode::ByRef => match ret_place {\n-            Some(ret_place) => Some(ret_place.to_addr(fx)),\n+            Some(ret_place) => Some(ret_place.to_ptr(fx).get_addr(fx)),\n             None => Some(fx.bcx.ins().iconst(fx.pointer_type, 43)),\n         },\n         PassMode::ByVal(_) | PassMode::ByValPair(_, _) => None,"}, {"sha": "44118edb6fd52cc72e6828d0d6572e084dd3bcc8", "filename": "src/intrinsics.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics.rs?ref=8f5ef6172c520df95779e5da509989e8233053bf", "patch": "@@ -598,7 +598,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n \n         transmute, <src_ty, dst_ty> (c from) {\n             assert_eq!(from.layout().ty, src_ty);\n-            let addr = Pointer::new(from.force_stack(fx));\n+            let addr = from.force_stack(fx);\n             let dst_layout = fx.layout_of(dst_ty);\n             ret.write_cvalue(fx, CValue::by_ref(addr, dst_layout))\n         };\n@@ -633,7 +633,7 @@ pub fn codegen_intrinsic_call<'tcx>(\n                     fx.bcx.def_var(mir_var(var), val);\n                 }\n                 _ => {\n-                    let addr = ret.to_addr(fx);\n+                    let addr = ret.to_ptr(fx).get_addr(fx);\n                     let layout = ret.layout();\n                     fx.bcx.emit_small_memset(fx.module.target_config(), addr, 0, layout.size.bytes(), 1);\n                 }"}, {"sha": "df690468ccbbc8cfc3fb3c1a940291ec695b2a10", "filename": "src/value_and_place.rs", "status": "modified", "additions": 6, "deletions": 18, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f5ef6172c520df95779e5da509989e8233053bf/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=8f5ef6172c520df95779e5da509989e8233053bf", "patch": "@@ -88,14 +88,14 @@ impl<'tcx> CValue<'tcx> {\n         self.1\n     }\n \n-    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n+    pub fn force_stack<'a>(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Pointer {\n         let layout = self.1;\n         match self.0 {\n-            CValueInner::ByRef(ptr) => ptr.get_addr(fx),\n+            CValueInner::ByRef(ptr) => ptr,\n             CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => {\n                 let cplace = CPlace::new_stack_slot(fx, layout.ty);\n                 cplace.write_cvalue(fx, self);\n-                cplace.to_addr(fx)\n+                cplace.to_ptr(fx)\n             }\n         }\n     }\n@@ -331,10 +331,6 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn to_addr(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>) -> Value {\n-        self.to_ptr(fx).get_addr(fx)\n-    }\n-\n     pub fn to_ptr_maybe_unsized(\n         self,\n         fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n@@ -355,14 +351,6 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n-    pub fn to_addr_maybe_unsized(\n-        self,\n-        fx: &mut FunctionCx<'_, 'tcx, impl Backend>,\n-    ) -> (Value, Option<Value>) {\n-        let (ptr, extra) = self.to_ptr_maybe_unsized(fx);\n-        (ptr.get_addr(fx), extra)\n-    }\n-\n     pub fn write_cvalue(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, from: CValue<'tcx>) {\n         use rustc::hir::Mutability::*;\n \n@@ -533,15 +521,15 @@ impl<'tcx> CPlace<'tcx> {\n \n     pub fn write_place_ref(self, fx: &mut FunctionCx<'_, 'tcx, impl Backend>, dest: CPlace<'tcx>) {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n-            let (value, extra) = self.to_addr_maybe_unsized(fx);\n+            let (ptr, extra) = self.to_ptr_maybe_unsized(fx);\n             let ptr = CValue::by_val_pair(\n-                value,\n+                ptr.get_addr(fx),\n                 extra.expect(\"unsized type without metadata\"),\n                 dest.layout(),\n             );\n             dest.write_cvalue(fx, ptr);\n         } else {\n-            let ptr = CValue::by_val(self.to_addr(fx), dest.layout());\n+            let ptr = CValue::by_val(self.to_ptr(fx).get_addr(fx), dest.layout());\n             dest.write_cvalue(fx, ptr);\n         }\n     }"}]}