{"sha": "4fba02c7e99758da1773069dca2afaa7f2e9cd31", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYmEwMmM3ZTk5NzU4ZGExNzczMDY5ZGNhMmFmYWE3ZjJlOWNkMzE=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-07T23:39:08Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-09-12T00:31:38Z"}, "message": "Invoke upcall_fail\n\nThis allows landing pads to be generated around fail statements\n\nIssue #236", "tree": {"sha": "d3a082d0fc8e2989439714c96cd17abb34447e28", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d3a082d0fc8e2989439714c96cd17abb34447e28"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fba02c7e99758da1773069dca2afaa7f2e9cd31", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fba02c7e99758da1773069dca2afaa7f2e9cd31", "html_url": "https://github.com/rust-lang/rust/commit/4fba02c7e99758da1773069dca2afaa7f2e9cd31", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fba02c7e99758da1773069dca2afaa7f2e9cd31/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c9eee8aa42891ac2a165eb3bbae9c16e4ee438d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c9eee8aa42891ac2a165eb3bbae9c16e4ee438d", "html_url": "https://github.com/rust-lang/rust/commit/4c9eee8aa42891ac2a165eb3bbae9c16e4ee438d"}], "stats": {"total": 25, "additions": 21, "deletions": 4}, "files": [{"sha": "a78b452a4bd769cb46837eeaf72e36d90a7dd840", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 15, "deletions": 4, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4fba02c7e99758da1773069dca2afaa7f2e9cd31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fba02c7e99758da1773069dca2afaa7f2e9cd31/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=4fba02c7e99758da1773069dca2afaa7f2e9cd31", "patch": "@@ -3794,14 +3794,25 @@ fn trans_call(in_cx: &@block_ctxt, f: &@ast::expr,\n     ret rslt(bcx, retval);\n }\n \n+fn invoke(bcx: &@block_ctxt, llfn: ValueRef,\n+          llargs: &[ValueRef]) -> result {\n+    ret invoke_(bcx, llfn, llargs, Invoke);\n+}\n+\n fn invoke_fastcall(bcx: &@block_ctxt, llfn: ValueRef,\n                    llargs: &[ValueRef]) -> result {\n+    ret invoke_(bcx, llfn, llargs, FastInvoke);\n+}\n \n+fn invoke_(bcx: &@block_ctxt, llfn: ValueRef,\n+           llargs: &[ValueRef],\n+           invoker: fn(&@block_ctxt, ValueRef, &[ValueRef],\n+                       BasicBlockRef, BasicBlockRef) -> ValueRef) -> result {\n     let normal_bcx = new_sub_block_ctxt(bcx, \"normal return\");\n     let unwind_bcx = new_sub_block_ctxt(bcx, \"unwind\");\n-    let retval = FastInvoke(bcx, llfn, llargs,\n-                            normal_bcx.llbb,\n-                            unwind_bcx.llbb);\n+    let retval = invoker(bcx, llfn, llargs,\n+                         normal_bcx.llbb,\n+                         unwind_bcx.llbb);\n     trans_landing_pad(unwind_bcx);\n     ret rslt(normal_bcx, retval);\n }\n@@ -4291,7 +4302,7 @@ fn trans_fail_value(cx: &@block_ctxt, sp_opt: &option::t<span>,\n     let V_str = PointerCast(cx, V_fail_str, T_ptr(T_i8()));\n     V_filename = PointerCast(cx, V_filename, T_ptr(T_i8()));\n     let args = [cx.fcx.lltaskptr, V_str, V_filename, C_int(V_line)];\n-    Call(cx, bcx_ccx(cx).upcalls._fail, args);\n+    let cx = invoke(cx, bcx_ccx(cx).upcalls._fail, args).bcx;\n     Unreachable(cx);\n     ret rslt(cx, C_nil());\n }"}, {"sha": "2d4f138e715f2a3db12cb86368eb90c6ff4a39c9", "filename": "src/test/run-fail/unwind-fail.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/4fba02c7e99758da1773069dca2afaa7f2e9cd31/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fba02c7e99758da1773069dca2afaa7f2e9cd31/src%2Ftest%2Frun-fail%2Funwind-fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-fail%2Funwind-fail.rs?ref=4fba02c7e99758da1773069dca2afaa7f2e9cd31", "patch": "@@ -0,0 +1,6 @@\n+// error-pattern:fail\n+\n+fn main() {\n+    @0;\n+    fail;\n+}\n\\ No newline at end of file"}]}