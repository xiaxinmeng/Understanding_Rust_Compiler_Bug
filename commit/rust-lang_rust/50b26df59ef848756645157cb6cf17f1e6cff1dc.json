{"sha": "50b26df59ef848756645157cb6cf17f1e6cff1dc", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwYjI2ZGY1OWVmODQ4NzU2NjQ1MTU3Y2I2Y2YxN2YxZTZjZmYxZGM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-19T01:11:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-05-19T01:11:27Z"}, "message": "auto merge of #14122 : dagitses/rust/master, r=alexcrichton\n\nThis is my first patch and hopefully nothing controversial: just a straightforward forwarding of TreeMap::move_iter() as TreeSet::move_iter().", "tree": {"sha": "3f3ac0552309f8300354cd901164089c40079a84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f3ac0552309f8300354cd901164089c40079a84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/50b26df59ef848756645157cb6cf17f1e6cff1dc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/50b26df59ef848756645157cb6cf17f1e6cff1dc", "html_url": "https://github.com/rust-lang/rust/commit/50b26df59ef848756645157cb6cf17f1e6cff1dc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/50b26df59ef848756645157cb6cf17f1e6cff1dc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86b34bca0fa41380f83ce0ad9312bfa7bedfe770", "url": "https://api.github.com/repos/rust-lang/rust/commits/86b34bca0fa41380f83ce0ad9312bfa7bedfe770", "html_url": "https://github.com/rust-lang/rust/commit/86b34bca0fa41380f83ce0ad9312bfa7bedfe770"}, {"sha": "4353e44563151325557593ad6b5352cfacfe8d1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4353e44563151325557593ad6b5352cfacfe8d1c", "html_url": "https://github.com/rust-lang/rust/commit/4353e44563151325557593ad6b5352cfacfe8d1c"}], "stats": {"total": 37, "additions": 37, "deletions": 0}, "files": [{"sha": "bb4ca36709c258b419cde5fe8e78021f3c2c2c75", "filename": "src/libcollections/treemap.rs", "status": "modified", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/50b26df59ef848756645157cb6cf17f1e6cff1dc/src%2Flibcollections%2Ftreemap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/50b26df59ef848756645157cb6cf17f1e6cff1dc/src%2Flibcollections%2Ftreemap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Ftreemap.rs?ref=50b26df59ef848756645157cb6cf17f1e6cff1dc", "patch": "@@ -12,6 +12,7 @@\n //! trees. The only requirement for the types is that the key implements\n //! `TotalOrd`.\n \n+use std::iter;\n use std::iter::{Peekable};\n use std::cmp::Ordering;\n use std::mem::{replace, swap};\n@@ -618,6 +619,12 @@ impl<T: TotalOrd> TreeSet<T> {\n         RevSetItems{iter: self.map.rev_iter()}\n     }\n \n+    /// Get a lazy iterator that consumes the set.\n+    #[inline]\n+    pub fn move_iter(self) -> MoveSetItems<T> {\n+        self.map.move_iter().map(|(value, _)| value)\n+    }\n+\n     /// Get a lazy iterator pointing to the first value not less than `v` (greater or equal).\n     /// If all elements in the set are less than `v` empty iterator is returned.\n     #[inline]\n@@ -665,6 +672,9 @@ pub struct RevSetItems<'a, T> {\n     iter: RevEntries<'a, T, ()>\n }\n \n+/// Lazy forward iterator over a set that consumes the set while iterating\n+pub type MoveSetItems<T> = iter::Map<'static, (T, ()), T, MoveEntries<T, ()>>;\n+\n /// Lazy iterator producing elements in the set difference (in-order)\n pub struct DifferenceItems<'a, T> {\n     a: Peekable<&'a T, SetItems<'a, T>>,\n@@ -1542,6 +1552,33 @@ mod test_set {\n         }\n     }\n \n+    #[test]\n+    fn test_move_iter() {\n+        let s: TreeSet<int> = range(0, 5).collect();\n+\n+        let mut n = 0;\n+        for x in s.move_iter() {\n+            assert_eq!(x, n);\n+            n += 1;\n+        }\n+    }\n+\n+    #[test]\n+    fn test_move_iter_size_hint() {\n+        let s: TreeSet<int> = vec!(0, 1).move_iter().collect();\n+\n+        let mut it = s.move_iter();\n+\n+        assert_eq!(it.size_hint(), (2, Some(2)));\n+        assert!(it.next() != None);\n+\n+        assert_eq!(it.size_hint(), (1, Some(1)));\n+        assert!(it.next() != None);\n+\n+        assert_eq!(it.size_hint(), (0, Some(0)));\n+        assert_eq!(it.next(), None);\n+    }\n+\n     #[test]\n     fn test_clone_eq() {\n       let mut m = TreeSet::new();"}]}