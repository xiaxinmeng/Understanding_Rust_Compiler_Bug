{"sha": "25c545114a1bc08b7b18b1a65266aae255ff2094", "node_id": "C_kwDOAAsO6NoAKDI1YzU0NTExNGExYmMwOGI3YjE4YjFhNjUyNjZhYWUyNTVmZjIwOTQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T14:19:50Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-05-12T14:19:50Z"}, "message": "Auto merge of #2890 - oli-obk:ui_test, r=RalfJung\n\nAdd `./miri run-dep` for running a file with test dependencies available\n\nfixes #2443", "tree": {"sha": "34cddc1283835ab78f9adc37a0b39256ac51be32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34cddc1283835ab78f9adc37a0b39256ac51be32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/25c545114a1bc08b7b18b1a65266aae255ff2094", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/25c545114a1bc08b7b18b1a65266aae255ff2094", "html_url": "https://github.com/rust-lang/rust/commit/25c545114a1bc08b7b18b1a65266aae255ff2094", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/25c545114a1bc08b7b18b1a65266aae255ff2094/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd5f8b4f70b403413ea44ea6e81a228412b47829", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd5f8b4f70b403413ea44ea6e81a228412b47829", "html_url": "https://github.com/rust-lang/rust/commit/cd5f8b4f70b403413ea44ea6e81a228412b47829"}, {"sha": "2f187343b9959f67fd058773fe18ede4e04d1383", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f187343b9959f67fd058773fe18ede4e04d1383", "html_url": "https://github.com/rust-lang/rust/commit/2f187343b9959f67fd058773fe18ede4e04d1383"}], "stats": {"total": 79, "additions": 58, "deletions": 21}, "files": [{"sha": "737423a2cd16421e826d93905846b6b1387e0d1f", "filename": "src/tools/miri/Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.lock?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -820,9 +820,9 @@ dependencies = [\n \n [[package]]\n name = \"ui_test\"\n-version = \"0.9.0\"\n+version = \"0.10.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"95033b0e41b8018013d99a6f1486c1ae5bd080378ced60c5f797e93842423b33\"\n+checksum = \"191a442639ea102fa62671026047e51d574bfda44b7fdf32151d7314624c1cd2\"\n dependencies = [\n  \"bstr\",\n  \"cargo-platform\","}, {"sha": "5987b0df8d660fa432c889996a71232f991a2f68", "filename": "src/tools/miri/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2FCargo.toml?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -39,7 +39,7 @@ libloading = \"0.7\"\n \n [dev-dependencies]\n colored = \"2\"\n-ui_test = \"0.9\"\n+ui_test = \"0.10\"\n rustc_version = \"0.4\"\n # Features chosen to match those required by env_logger, to avoid rebuilds\n regex = { version = \"1.5.5\", default-features = false, features = [\"perf\", \"std\"] }"}, {"sha": "48a46a76a12979ee25016e974beb871cf0973dc2", "filename": "src/tools/miri/miri", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2Fmiri", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2Fmiri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fmiri?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -306,7 +306,7 @@ test|bless)\n     # Only in root project as `cargo-miri` has no tests.\n     $CARGO test $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml \"$@\"\n     ;;\n-run)\n+run|run-dep)\n     # Scan for \"--target\" to overwrite the \"MIRI_TEST_TARGET\" env var so\n     # that we set the MIRI_SYSROOT up the right way.\n     FOUND_TARGET_OPT=0\n@@ -323,11 +323,17 @@ run)\n         # Make sure Miri actually uses this target.\n         MIRIFLAGS=\"$MIRIFLAGS --target $MIRI_TEST_TARGET\"\n     fi\n+\n     # First build and get a sysroot.\n     $CARGO build $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml\n     find_sysroot\n     # Then run the actual command.\n-    exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    \n+    if [ \"$COMMAND\" = \"run-dep\" ]; then\n+        exec $CARGO test --test compiletest $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- --miri-run-dep-mode $MIRIFLAGS \"$@\"\n+    else\n+        exec $CARGO run $CARGO_EXTRA_FLAGS --manifest-path \"$MIRIDIR\"/Cargo.toml -- $MIRIFLAGS \"$@\"\n+    fi\n     ;;\n fmt)\n     find \"$MIRIDIR\" -not \\( -name target -prune \\) -name '*.rs' \\"}, {"sha": "fa06c4b6a12881fac4e2e00fa81fd351756c2088", "filename": "src/tools/miri/tests/compiletest.rs", "status": "modified", "additions": 47, "deletions": 16, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/25c545114a1bc08b7b18b1a65266aae255ff2094/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Ftests%2Fcompiletest.rs?ref=25c545114a1bc08b7b18b1a65266aae255ff2094", "patch": "@@ -1,5 +1,6 @@\n use colored::*;\n use regex::bytes::Regex;\n+use std::ffi::OsString;\n use std::path::{Path, PathBuf};\n use std::{env, process::Command};\n use ui_test::status_emitter::StatusEmitter;\n@@ -45,7 +46,7 @@ fn build_so_for_c_ffi_tests() -> PathBuf {\n     so_file_path\n }\n \n-fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+fn test_config(target: &str, path: &str, mode: Mode, with_dependencies: bool) -> Config {\n     // Miri is rustc-like, so we create a default builder for rustc and modify it\n     let mut program = CommandBuilder::rustc();\n     program.program = miri_path();\n@@ -103,6 +104,26 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         ..Config::default()\n     };\n \n+    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n+\n+    if with_dependencies && use_std {\n+        config.dependencies_crate_manifest_path =\n+            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n+        config.dependency_builder.args = vec![\n+            \"run\".into(),\n+            \"--manifest-path\".into(),\n+            \"cargo-miri/Cargo.toml\".into(),\n+            \"--\".into(),\n+            \"miri\".into(),\n+            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n+        ];\n+    }\n+    config\n+}\n+\n+fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> Result<()> {\n+    let mut config = test_config(target, path, mode, with_dependencies);\n+\n     // Handle command-line arguments.\n     let mut after_dashdash = false;\n     config.path_filter.extend(std::env::args().skip(1).filter(|arg| {\n@@ -126,21 +147,6 @@ fn run_tests(mode: Mode, path: &str, target: &str, with_dependencies: bool) -> R\n         }\n     }));\n \n-    let use_std = env::var_os(\"MIRI_NO_STD\").is_none();\n-\n-    if with_dependencies && use_std {\n-        config.dependencies_crate_manifest_path =\n-            Some(Path::new(\"test_dependencies\").join(\"Cargo.toml\"));\n-        config.dependency_builder.args = vec![\n-            \"run\".into(),\n-            \"--manifest-path\".into(),\n-            \"cargo-miri/Cargo.toml\".into(),\n-            \"--\".into(),\n-            \"miri\".into(),\n-            \"run\".into(), // There is no `cargo miri build` so we just use `cargo miri run`.\n-        ];\n-    }\n-\n     eprintln!(\"   Compiler: {}\", config.program.display());\n     ui_test::run_tests_generic(\n         config,\n@@ -226,8 +232,18 @@ fn get_target() -> String {\n \n fn main() -> Result<()> {\n     ui_test::color_eyre::install()?;\n+\n     let target = get_target();\n \n+    let mut args = std::env::args_os();\n+\n+    // Skip the program name and check whether this is a `./miri run-dep` invocation\n+    if let Some(first) = args.nth(1) {\n+        if first == \"--miri-run-dep-mode\" {\n+            return run_dep_mode(target, args);\n+        }\n+    }\n+\n     // Add a test env var to do environment communication tests.\n     env::set_var(\"MIRI_ENV_VAR_TEST\", \"0\");\n     // Let the tests know where to store temp files (they might run for a different target, which can make this hard to find).\n@@ -250,6 +266,21 @@ fn main() -> Result<()> {\n     Ok(())\n }\n \n+fn run_dep_mode(target: String, mut args: impl Iterator<Item = OsString>) -> Result<()> {\n+    let path = args.next().expect(\"./miri run-dep must be followed by a file name\");\n+    let mut config = test_config(&target, \"\", Mode::Yolo, /* with dependencies */ true);\n+    config.program.args.remove(0); // remove the `--error-format=json` argument\n+    config.program.args.push(\"--color\".into());\n+    config.program.args.push(\"always\".into());\n+    let mut cmd = ui_test::test_command(config, Path::new(&path))?;\n+    // Separate the arguments to the `cargo miri` invocation from\n+    // the arguments to the interpreted prog\n+    cmd.arg(\"--\");\n+    cmd.args(args);\n+    println!(\"{cmd:?}\");\n+    if cmd.spawn()?.wait()?.success() { Ok(()) } else { std::process::exit(1) }\n+}\n+\n /// This is a custom renderer for `ui_test` output that does not emit github actions\n /// `group`s, while still producing regular github actions messages on test failures.\n struct TextAndGha;"}]}