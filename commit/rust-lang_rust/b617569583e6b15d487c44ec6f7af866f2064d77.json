{"sha": "b617569583e6b15d487c44ec6f7af866f2064d77", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTc1Njk1ODNlNmIxNWQ0ODdjNDRlYzZmN2FmODY2ZjIwNjRkNzc=", "commit": {"author": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-09-30T05:14:09Z"}, "committer": {"name": "Jason Toffaletti", "email": "jason@topsy.com", "date": "2013-09-30T06:05:40Z"}, "message": "reduce heap allocations for MemoryMap", "tree": {"sha": "a888b06f9b54546dfdfbfe7967d52fb5e607da84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a888b06f9b54546dfdfbfe7967d52fb5e607da84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b617569583e6b15d487c44ec6f7af866f2064d77", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b617569583e6b15d487c44ec6f7af866f2064d77", "html_url": "https://github.com/rust-lang/rust/commit/b617569583e6b15d487c44ec6f7af866f2064d77", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b617569583e6b15d487c44ec6f7af866f2064d77/comments", "author": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "committer": {"login": "toffaletti", "id": 145012, "node_id": "MDQ6VXNlcjE0NTAxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/145012?v=4", "gravatar_id": "", "url": "https://api.github.com/users/toffaletti", "html_url": "https://github.com/toffaletti", "followers_url": "https://api.github.com/users/toffaletti/followers", "following_url": "https://api.github.com/users/toffaletti/following{/other_user}", "gists_url": "https://api.github.com/users/toffaletti/gists{/gist_id}", "starred_url": "https://api.github.com/users/toffaletti/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/toffaletti/subscriptions", "organizations_url": "https://api.github.com/users/toffaletti/orgs", "repos_url": "https://api.github.com/users/toffaletti/repos", "events_url": "https://api.github.com/users/toffaletti/events{/privacy}", "received_events_url": "https://api.github.com/users/toffaletti/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "80b6056f5d4ae6b527b36c502cc074c2518a3f7d", "url": "https://api.github.com/repos/rust-lang/rust/commits/80b6056f5d4ae6b527b36c502cc074c2518a3f7d", "html_url": "https://github.com/rust-lang/rust/commit/80b6056f5d4ae6b527b36c502cc074c2518a3f7d"}], "stats": {"total": 14, "additions": 7, "deletions": 7}, "files": [{"sha": "7df98c1d1e8b0541585b0f7f301d1a66d3891cd9", "filename": "src/libstd/os.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/b617569583e6b15d487c44ec6f7af866f2064d77/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b617569583e6b15d487c44ec6f7af866f2064d77/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=b617569583e6b15d487c44ec6f7af866f2064d77", "patch": "@@ -1398,7 +1398,7 @@ impl to_str::ToStr for MapError {\n \n #[cfg(unix)]\n impl MemoryMap {\n-    pub fn new(min_len: uint, options: ~[MapOption]) -> Result<~MemoryMap, MapError> {\n+    pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::off_t;\n@@ -1441,7 +1441,7 @@ impl MemoryMap {\n                 code => ErrUnknown(code)\n             })\n         } else {\n-            Ok(~MemoryMap {\n+            Ok(MemoryMap {\n                data: r as *mut u8,\n                len: len,\n                kind: if fd == -1 {\n@@ -1478,7 +1478,7 @@ impl Drop for MemoryMap {\n \n #[cfg(windows)]\n impl MemoryMap {\n-    pub fn new(min_len: uint, options: ~[MapOption]) -> Result<~MemoryMap, MapError> {\n+    pub fn new(min_len: uint, options: &[MapOption]) -> Result<MemoryMap, MapError> {\n         #[fixed_stack_segment]; #[inline(never)];\n \n         use libc::types::os::arch::extra::{LPVOID, DWORD, SIZE_T, HANDLE};\n@@ -1524,7 +1524,7 @@ impl MemoryMap {\n             };\n             match r as uint {\n                 0 => Err(ErrVirtualAlloc(errno())),\n-                _ => Ok(~MemoryMap {\n+                _ => Ok(MemoryMap {\n                    data: r as *mut u8,\n                    len: len,\n                    kind: MapVirtual\n@@ -1560,7 +1560,7 @@ impl MemoryMap {\n                                             0);\n                 match r as uint {\n                     0 => Err(ErrMapViewOfFile(errno())),\n-                    _ => Ok(~MemoryMap {\n+                    _ => Ok(MemoryMap {\n                        data: r as *mut u8,\n                        len: len,\n                        kind: MapFile(mapping as *c_void)\n@@ -1996,7 +1996,7 @@ mod tests {\n     fn memory_map_rw() {\n         use result::{Ok, Err};\n \n-        let chunk = match os::MemoryMap::new(16, ~[\n+        let chunk = match os::MemoryMap::new(16, [\n             os::MapReadable,\n             os::MapWritable\n         ]) {\n@@ -2050,7 +2050,7 @@ mod tests {\n             }\n             fd\n         };\n-        let chunk = match MemoryMap::new(size / 2, ~[\n+        let chunk = match MemoryMap::new(size / 2, [\n             MapReadable,\n             MapWritable,\n             MapFd(fd),"}]}