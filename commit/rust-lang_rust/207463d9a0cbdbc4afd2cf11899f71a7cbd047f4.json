{"sha": "207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIwNzQ2M2Q5YTBjYmRiYzRhZmQyY2YxMTg5OWY3MWE3Y2JkMDQ3ZjQ=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T08:37:31Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2016-03-21T08:37:31Z"}, "message": "Add array indexing for-loop test.", "tree": {"sha": "c921ef40d7282a335f99699ca9a4f32328aac79b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c921ef40d7282a335f99699ca9a4f32328aac79b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "html_url": "https://github.com/rust-lang/rust/commit/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2994732a81b9f5803dd154d4e24b6024f6c6e851", "url": "https://api.github.com/repos/rust-lang/rust/commits/2994732a81b9f5803dd154d4e24b6024f6c6e851", "html_url": "https://github.com/rust-lang/rust/commit/2994732a81b9f5803dd154d4e24b6024f6c6e851"}], "stats": {"total": 61, "additions": 39, "deletions": 22}, "files": [{"sha": "cd0ee4f687892f81696b837328ec1d2e3ffc41d3", "filename": "src/memory.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "patch": "@@ -100,36 +100,44 @@ impl Memory {\n     }\n \n     fn get_bytes_mut(&mut self, ptr: Pointer, size: usize) -> EvalResult<&mut [u8]> {\n+        try!(self.clear_relocations(ptr, size));\n         let alloc = try!(self.get_mut(ptr.alloc_id));\n-        try!(alloc.check_no_relocations(ptr.offset, ptr.offset + size));\n         Ok(&mut alloc.bytes[ptr.offset..ptr.offset + size])\n     }\n \n+    fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n+        let start = ptr.offset.saturating_sub(self.pointer_size - 1);\n+        let end = ptr.offset + size;\n+        let alloc = try!(self.get_mut(ptr.alloc_id));\n+        let keys: Vec<_> = alloc.relocations\n+            .range(Included(&start), Excluded(&end))\n+            .map(|(&k, _)| k)\n+            .collect();\n+        for k in keys {\n+            alloc.relocations.remove(&k);\n+        }\n+        Ok(())\n+    }\n+\n+    fn copy_relocations(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<()> {\n+        let relocations: Vec<_> = try!(self.get_mut(src.alloc_id)).relocations\n+            .range(Included(&src.offset), Excluded(&(src.offset + size)))\n+            .map(|(&offset, &alloc_id)| {\n+                // Update relocation offsets for the new positions in the destination allocation.\n+                (offset + dest.offset - src.offset, alloc_id)\n+            }).collect();\n+        try!(self.get_mut(dest.alloc_id)).relocations.extend(relocations);\n+        Ok(())\n+    }\n+\n     pub fn copy(&mut self, src: Pointer, dest: Pointer, size: usize) -> EvalResult<()> {\n-        let (src_bytes, mut relocations) = {\n+        let src_bytes = {\n             let alloc = try!(self.get_mut(src.alloc_id));\n             try!(alloc.check_relocation_edges(src.offset, src.offset + size));\n-            let bytes = alloc.bytes[src.offset..src.offset + size].as_mut_ptr();\n-\n-            let relocations: Vec<(usize, AllocId)> = alloc.relocations\n-                .range(Included(&src.offset), Excluded(&(src.offset + size)))\n-                .map(|(&k, &v)| (k, v))\n-                .collect();\n-\n-            (bytes, relocations)\n+            alloc.bytes[src.offset..src.offset + size].as_mut_ptr()\n         };\n-\n-        // Update relocation offsets for the new positions in the destination allocation.\n-        for &mut (ref mut offset, _) in &mut relocations {\n-            *offset += dest.offset;\n-            *offset -= src.offset;\n-        }\n-\n         let dest_bytes = try!(self.get_bytes_mut(dest, size)).as_mut_ptr();\n \n-        // TODO(tsion): Clear the destination range's existing relocations.\n-        try!(self.get_mut(dest.alloc_id)).relocations.extend(relocations);\n-\n         // SAFE: The above indexing would have panicked if there weren't at least `size` bytes\n         // behind `src` and `dest`. Also, we use the overlapping-safe `ptr::copy` if `src` and\n         // `dest` could possibly overlap.\n@@ -141,7 +149,7 @@ impl Memory {\n             }\n         }\n \n-        Ok(())\n+        self.copy_relocations(src, dest, size)\n     }\n \n     pub fn write_bytes(&mut self, ptr: Pointer, src: &[u8]) -> EvalResult<()> {\n@@ -160,7 +168,6 @@ impl Memory {\n         }\n     }\n \n-    // TODO(tsion): Detect invalid writes here and elsewhere.\n     pub fn write_ptr(&mut self, dest: Pointer, ptr_val: Pointer) -> EvalResult<()> {\n         {\n             let size = self.pointer_size;"}, {"sha": "cd4c91c220a0e47da760cd555ed2faba2783eddf", "filename": "test/arrays.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4/test%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/207463d9a0cbdbc4afd2cf11899f71a7cbd047f4/test%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test%2Farrays.rs?ref=207463d9a0cbdbc4afd2cf11899f71a7cbd047f4", "patch": "@@ -27,3 +27,13 @@ fn index() -> i32 {\n     let a = [0, 10, 20, 30];\n     a[2]\n }\n+\n+#[miri_run]\n+fn index_for_loop() -> usize {\n+    let mut sum = 0;\n+    let a = [0, 10, 20, 30];\n+    for i in 0..a.len() {\n+        sum += a[i];\n+    }\n+    sum\n+}"}]}