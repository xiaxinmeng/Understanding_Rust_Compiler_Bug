{"sha": "3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjNDg1Nzk1NTE3ZDFmNWE2ZWJmZmY2MzY4ZGZhZTdhN2NkODViODU=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T11:24:39Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-11-25T22:55:54Z"}, "message": "more panicking comments", "tree": {"sha": "a82b02113c7c47a5c7945a20f361bedc978cd2d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a82b02113c7c47a5c7945a20f361bedc978cd2d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "html_url": "https://github.com/rust-lang/rust/commit/3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3c485795517d1f5a6ebfff6368dfae7a7cd85b85/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "08f779cb4b481be58eeb5ecc421f69503780e8b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/08f779cb4b481be58eeb5ecc421f69503780e8b1", "html_url": "https://github.com/rust-lang/rust/commit/08f779cb4b481be58eeb5ecc421f69503780e8b1"}], "stats": {"total": 13, "additions": 8, "deletions": 5}, "files": [{"sha": "5a8d647396ddab6b3f5512f0d35e69b43332b355", "filename": "src/libcore/panicking.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3c485795517d1f5a6ebfff6368dfae7a7cd85b85/src%2Flibcore%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c485795517d1f5a6ebfff6368dfae7a7cd85b85/src%2Flibcore%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fpanicking.rs?ref=3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "patch": "@@ -11,13 +11,13 @@\n //! ```\n //!\n //! This definition allows for panicking with any general message, but it does not\n-//! allow for failing with a `Box<Any>` value. The reason for this is that libcore\n-//! is not allowed to allocate.\n+//! allow for failing with a `Box<Any>` value. (`PanicInfo` just contains a `&(dyn Any + Send)`,\n+//! for which we fill in a dummy value in `PanicInfo::internal_constructor`.)\n+//! The reason for this is that libcore is not allowed to allocate.\n //!\n //! This module contains a few other panicking functions, but these are just the\n //! necessary lang items for the compiler. All panics are funneled through this\n-//! one function. Currently, the actual symbol is declared in the standard\n-//! library, but the location of this may change over time.\n+//! one function. The actual symbol is declared through the `#[panic_handler]` attribute.\n \n // ignore-tidy-undocumented-unsafe\n \n@@ -72,6 +72,7 @@ pub fn panic_fmt(fmt: fmt::Arguments<'_>, location: &Location<'_>) -> ! {\n     }\n \n     // NOTE This function never crosses the FFI boundary; it's a Rust-to-Rust call\n+    // that gets resolved to the `#[panic_handler]` function.\n     extern \"Rust\" {\n         #[lang = \"panic_impl\"]\n         fn panic_impl(pi: &PanicInfo<'_>) -> !;"}, {"sha": "cb035f48d90f436e79b77398606f8c5615f338e2", "filename": "src/libstd/panicking.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3c485795517d1f5a6ebfff6368dfae7a7cd85b85/src%2Flibstd%2Fpanicking.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3c485795517d1f5a6ebfff6368dfae7a7cd85b85/src%2Flibstd%2Fpanicking.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanicking.rs?ref=3c485795517d1f5a6ebfff6368dfae7a7cd85b85", "patch": "@@ -455,7 +455,9 @@ fn rust_panic_with_hook(payload: &mut dyn BoxMeUp,\n         match HOOK {\n             // Some platforms know that printing to stderr won't ever actually\n             // print anything, and if that's the case we can skip the default\n-            // hook.\n+            // hook. Since string formatting happens lazily when calling `payload`\n+            // methods, this means that with libpanic_abort, we don't format\n+            // the string at all!\n             Hook::Default if panic_output().is_none() => {}\n             Hook::Default => {\n                 info.set_payload(payload.get());"}]}