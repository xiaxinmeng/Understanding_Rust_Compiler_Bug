{"sha": "302867cf48db284cc666fff7c2953f6f94f30aac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMwMjg2N2NmNDhkYjI4NGNjNjY2ZmZmN2MyOTUzZjZmOTRmMzBhYWM=", "commit": {"author": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-11T15:23:25Z"}, "committer": {"name": "Ryan Levick", "email": "me@ryanlevick.com", "date": "2021-03-11T15:23:25Z"}, "message": "Clean up handling of child process", "tree": {"sha": "d11f99fb8ef19c7b45499917b3ebc95e6b80a9b5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d11f99fb8ef19c7b45499917b3ebc95e6b80a9b5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/302867cf48db284cc666fff7c2953f6f94f30aac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/302867cf48db284cc666fff7c2953f6f94f30aac", "html_url": "https://github.com/rust-lang/rust/commit/302867cf48db284cc666fff7c2953f6f94f30aac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/302867cf48db284cc666fff7c2953f6f94f30aac/comments", "author": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rylev", "id": 1327285, "node_id": "MDQ6VXNlcjEzMjcyODU=", "avatar_url": "https://avatars.githubusercontent.com/u/1327285?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rylev", "html_url": "https://github.com/rylev", "followers_url": "https://api.github.com/users/rylev/followers", "following_url": "https://api.github.com/users/rylev/following{/other_user}", "gists_url": "https://api.github.com/users/rylev/gists{/gist_id}", "starred_url": "https://api.github.com/users/rylev/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rylev/subscriptions", "organizations_url": "https://api.github.com/users/rylev/orgs", "repos_url": "https://api.github.com/users/rylev/repos", "events_url": "https://api.github.com/users/rylev/events{/privacy}", "received_events_url": "https://api.github.com/users/rylev/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0201e2bbde001aced41352d5437028a915e5556e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0201e2bbde001aced41352d5437028a915e5556e", "html_url": "https://github.com/rust-lang/rust/commit/0201e2bbde001aced41352d5437028a915e5556e"}], "stats": {"total": 28, "additions": 9, "deletions": 19}, "files": [{"sha": "269f810192eb5c121aceb440446f7d83f4cf0e14", "filename": "src/bootstrap/bin/rustc.rs", "status": "modified", "additions": 9, "deletions": 19, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/302867cf48db284cc666fff7c2953f6f94f30aac/src%2Fbootstrap%2Fbin%2Frustc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/302867cf48db284cc666fff7c2953f6f94f30aac/src%2Fbootstrap%2Fbin%2Frustc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbin%2Frustc.rs?ref=302867cf48db284cc666fff7c2953f6f94f30aac", "patch": "@@ -17,7 +17,7 @@\n \n use std::env;\n use std::path::PathBuf;\n-use std::process::Command;\n+use std::process::{Child, Command};\n use std::str::FromStr;\n use std::time::Instant;\n \n@@ -171,19 +171,8 @@ fn main() {\n             let is_test = args.iter().any(|a| a == \"--test\");\n             // If the user requested resource usage data, then\n             // include that in addition to the timing output.\n-            let rusage_data = env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| {\n-                #[cfg(windows)]\n-                {\n-                    use std::os::windows::io::AsRawHandle;\n-                    let handle = child.as_raw_handle();\n-                    format_rusage_data(handle)\n-                }\n-                #[cfg(not(windows))]\n-                {\n-                    let _child = child;\n-                    format_rusage_data()\n-                }\n-            });\n+            let rusage_data =\n+                env::var_os(\"RUSTC_PRINT_STEP_RUSAGE\").and_then(|_| format_rusage_data(child));\n             eprintln!(\n                 \"[RUSTC-TIMING] {} test:{} {}.{:03}{}{}\",\n                 crate_name,\n@@ -221,15 +210,16 @@ fn main() {\n }\n \n #[cfg(all(not(unix), not(windows)))]\n-/// getrusage is not available on non-unix platforms. So for now, we do not\n-/// bother trying to make a shim for it.\n-fn format_rusage_data() -> Option<String> {\n+// In the future we can add this for more platforms\n+fn format_rusage_data(_child: Child) -> Option<String> {\n     None\n }\n \n #[cfg(windows)]\n-fn format_rusage_data(handle: std::os::windows::raw::HANDLE) -> Option<String> {\n+fn format_rusage_data(child: Child) -> Option<String> {\n+    use std::os::windows::io::AsRawHandle;\n     use winapi::um::{processthreadsapi, psapi, timezoneapi};\n+    let handle = child.as_raw_handle();\n     macro_rules! try_bool {\n         ($e:expr) => {\n             if $e != 1 {\n@@ -295,7 +285,7 @@ fn format_rusage_data(handle: std::os::windows::raw::HANDLE) -> Option<String> {\n /// fields. Note that we are focusing mainly on data that we believe to be\n /// supplied on Linux (the `rusage` struct has other fields in it but they are\n /// currently unsupported by Linux).\n-fn format_rusage_data() -> Option<String> {\n+fn format_rusage_data(_child: Child) -> Option<String> {\n     let rusage: libc::rusage = unsafe {\n         let mut recv = std::mem::zeroed();\n         // -1 is RUSAGE_CHILDREN, which means to get the rusage for all children"}]}