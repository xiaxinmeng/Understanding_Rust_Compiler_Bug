{"sha": "1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkYmMwYzk4NjkwNzFkZjM1MWRkNDBhMjhlMGUzZDc4YzUxMDViZmE=", "commit": {"author": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-12T00:00:41Z"}, "committer": {"name": "Christian Poveda", "email": "git@christianpoveda.xyz", "date": "2020-02-19T22:48:15Z"}, "message": "remove hack for panics", "tree": {"sha": "a023558ff5363103c50c21083d5893c191d94c6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a023558ff5363103c50c21083d5893c191d94c6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "comment_count": 0, "verification": {"verified": false, "reason": "bad_email", "signature": "-----BEGIN PGP SIGNATURE-----\n\niHUEABYIAB0WIQRsB8A/3NrzTlMMjT0nUl7150IKUAUCXk27LwAKCRAnUl7150IK\nUNyBAQDiz+AcknziegYAR75FsvM/U9hqPQu6I2twh2Vmv/EVmAEA1dQHRoplnQlU\nGEXeM5vD93hOxuOA/IJbmWGdOjfTeAE=\n=kfny\n-----END PGP SIGNATURE-----", "payload": "tree a023558ff5363103c50c21083d5893c191d94c6c\nparent b81949358540fd4da759b943f8a2d7382fc2a0e3\nauthor Christian Poveda <git@christianpoveda.xyz> 1581465641 -0500\ncommitter Christian Poveda <git@christianpoveda.xyz> 1582152495 -0500\n\nremove hack for panics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "html_url": "https://github.com/rust-lang/rust/commit/1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/comments", "author": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pvdrz", "id": 31802960, "node_id": "MDQ6VXNlcjMxODAyOTYw", "avatar_url": "https://avatars.githubusercontent.com/u/31802960?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pvdrz", "html_url": "https://github.com/pvdrz", "followers_url": "https://api.github.com/users/pvdrz/followers", "following_url": "https://api.github.com/users/pvdrz/following{/other_user}", "gists_url": "https://api.github.com/users/pvdrz/gists{/gist_id}", "starred_url": "https://api.github.com/users/pvdrz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pvdrz/subscriptions", "organizations_url": "https://api.github.com/users/pvdrz/orgs", "repos_url": "https://api.github.com/users/pvdrz/repos", "events_url": "https://api.github.com/users/pvdrz/events{/privacy}", "received_events_url": "https://api.github.com/users/pvdrz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b81949358540fd4da759b943f8a2d7382fc2a0e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/b81949358540fd4da759b943f8a2d7382fc2a0e3", "html_url": "https://github.com/rust-lang/rust/commit/b81949358540fd4da759b943f8a2d7382fc2a0e3"}], "stats": {"total": 68, "additions": 37, "deletions": 31}, "files": [{"sha": "14e08f5181f527e151d3c1294a4320dfc29a819f", "filename": "src/shims/foreign_items.rs", "status": "modified", "additions": 14, "deletions": 21, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items.rs?ref=1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "patch": "@@ -170,17 +170,10 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         };\n \n         // Next: functions that return.\n-        match link_name {\n-            \"__rust_maybe_catch_panic\" => {\n-                this.handle_catch_panic(args, dest, ret)?;\n-                return Ok(None);\n-            }\n-\n-            _ => this.emulate_foreign_item_by_name(link_name, args, dest)?,\n-        };\n-\n-        this.dump_place(*dest);\n-        this.go_to_block(ret);\n+        if this.emulate_foreign_item_by_name(link_name, args, dest, ret)? {\n+            this.dump_place(*dest);\n+            this.go_to_block(ret);\n+        }\n \n         Ok(None)\n     }\n@@ -190,7 +183,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         link_name: &str,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n         // Here we dispatch all the shims for foreign functions. If you have a platform specific\n@@ -293,6 +287,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(new_ptr, dest)?;\n             }\n \n+            \"__rust_maybe_catch_panic\" => {\n+                this.handle_catch_panic(args, dest, ret)?;\n+                return Ok(false);\n+            }\n+\n             \"memcmp\" => {\n                 let left = this.read_scalar(args[0])?.not_undef()?;\n                 let right = this.read_scalar(args[1])?.not_undef()?;\n@@ -330,12 +329,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 }\n             }\n \n-\n-            \"rename\" => {\n-                let result = this.rename(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n-            }\n-\n             \"strlen\" => {\n                 let ptr = this.read_scalar(args[0])?.not_undef()?;\n                 let n = this.memory.read_c_str(ptr)?.len();\n@@ -442,13 +435,13 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             }\n \n             _ => match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n-                \"linux\" | \"macos\" => posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n-                \"windows\" => windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                \"linux\" | \"macos\" => return posix::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                \"windows\" => return windows::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                 target => throw_unsup_format!(\"The {} target platform is not supported\", target),\n             }\n         };\n \n-        Ok(())\n+        Ok(true)\n     }\n \n     /// Evaluates the scalar at the specified path. Returns Some(val)"}, {"sha": "746a0f25ebb1fbdd66806505ced30fd819c505ef", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "patch": "@@ -2,6 +2,7 @@ mod linux;\n mod macos;\n \n use crate::*;\n+use rustc::mir;\n use rustc::ty::layout::{Align, LayoutOf, Size};\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n@@ -11,7 +12,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         link_name: &str,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let tcx = &{ this.tcx.tcx };\n \n@@ -97,6 +99,11 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n                 this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n             }\n \n+            \"rename\" => {\n+                let result = this.rename(args[0], args[1])?;\n+                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+            }\n+\n             \"posix_memalign\" => {\n                 let ret = this.deref_operand(args[0])?;\n                 let align = this.read_scalar(args[1])?.to_machine_usize(this)?;\n@@ -325,14 +332,14 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             _ => {\n                 match this.tcx.sess.target.target.target_os.to_lowercase().as_str() {\n-                    \"linux\" => linux::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n-                    \"macos\" => macos::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest)?,\n+                    \"linux\" => return linux::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n+                    \"macos\" => return macos::EvalContextExt::emulate_foreign_item_by_name(this, link_name, args, dest, ret),\n                     _ => unreachable!(),\n                 }\n             }\n         };\n \n-        Ok(())\n+        Ok(true)\n     }\n }\n "}, {"sha": "27e42b0082e5a3e79573e4d7209ef5ab8d4a7b12", "filename": "src/shims/foreign_items/posix/linux.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Flinux.rs?ref=1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "patch": "@@ -1,4 +1,5 @@\n use crate::*;\n+use rustc::mir;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -7,7 +8,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         link_name: &str,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n         match link_name {\n@@ -83,6 +85,6 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         };\n \n-        Ok(())\n+        Ok(true)\n     }\n }"}, {"sha": "274248e8b54f7489f3bc14ccd4b69ff92a2a4f04", "filename": "src/shims/foreign_items/posix/macos.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix%2Fmacos.rs?ref=1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "patch": "@@ -1,4 +1,5 @@\n use crate::*;\n+use rustc::mir;\n \n impl<'mir, 'tcx> EvalContextExt<'mir, 'tcx> for crate::MiriEvalContext<'mir, 'tcx> {}\n pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx> {\n@@ -7,7 +8,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         link_name: &str,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n \n         match link_name {\n@@ -108,7 +110,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         };\n \n-        Ok(())\n+        Ok(true)\n     }\n }\n "}, {"sha": "b0d323439714a4d28ccc98ecd77350c4694a6aab", "filename": "src/shims/foreign_items/windows.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fwindows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1dbc0c9869071df351dd40a28e0e3d78c5105bfa/src%2Fshims%2Fforeign_items%2Fwindows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fwindows.rs?ref=1dbc0c9869071df351dd40a28e0e3d78c5105bfa", "patch": "@@ -1,4 +1,5 @@\n use crate::*;\n+use rustc::mir;\n use rustc::ty::layout::Size;\n use std::iter;\n \n@@ -9,7 +10,8 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n         link_name: &str,\n         args: &[OpTy<'tcx, Tag>],\n         dest: PlaceTy<'tcx, Tag>,\n-    ) -> InterpResult<'tcx> {\n+        _ret: mir::BasicBlock,\n+    ) -> InterpResult<'tcx, bool> {\n         let this = self.eval_context_mut();\n         let tcx = &{ this.tcx.tcx };\n \n@@ -197,7 +199,7 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n             _ => throw_unsup_format!(\"can't call foreign function: {}\", link_name),\n         }\n \n-        Ok(())\n+        Ok(true)\n     }\n }\n "}]}