{"sha": "cc284dad30de4990516eeccf60f24e613fd78a2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNjMjg0ZGFkMzBkZTQ5OTA1MTZlZWNjZjYwZjI0ZTYxM2ZkNzhhMmE=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T19:16:28Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2019-04-09T19:16:28Z"}, "message": "Merge #1122\n\n1122: Add explicit type assist. r=matklad a=marcogroppo\n\nThis assist can be used to specify the explicit type in let statements. For example `let num = 1;` becomes `let num: i32 = 1;`. \r\n\r\nThe assist is applicable only if the inferred type is fully known.\r\n\n\nCo-authored-by: Marco Groppo <marco.groppo@gmail.com>", "tree": {"sha": "ab1b62d318b44bec3706a30401d5b4213f8618a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ab1b62d318b44bec3706a30401d5b4213f8618a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cc284dad30de4990516eeccf60f24e613fd78a2a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cc284dad30de4990516eeccf60f24e613fd78a2a", "html_url": "https://github.com/rust-lang/rust/commit/cc284dad30de4990516eeccf60f24e613fd78a2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cc284dad30de4990516eeccf60f24e613fd78a2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fc2d4373b2c4e96bebf320a84270eee3afe34aa", "html_url": "https://github.com/rust-lang/rust/commit/2fc2d4373b2c4e96bebf320a84270eee3afe34aa"}, {"sha": "c5f8f3b1f423781e09bb5f63e33d772ee59fab77", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5f8f3b1f423781e09bb5f63e33d772ee59fab77", "html_url": "https://github.com/rust-lang/rust/commit/c5f8f3b1f423781e09bb5f63e33d772ee59fab77"}], "stats": {"total": 127, "additions": 126, "deletions": 1}, "files": [{"sha": "1dc59bb87127e726e1f7deab335cc998bbdbf702", "filename": "crates/ra_assists/src/add_explicit_type.rs", "status": "added", "additions": 93, "deletions": 0, "changes": 93, "blob_url": "https://github.com/rust-lang/rust/blob/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fadd_explicit_type.rs?ref=cc284dad30de4990516eeccf60f24e613fd78a2a", "patch": "@@ -0,0 +1,93 @@\n+use hir::{\n+    HirDisplay, Ty,\n+    db::HirDatabase,\n+    source_binder::function_from_child_node,\n+};\n+use ra_syntax::{\n+    SyntaxKind,\n+    ast::{LetStmt, PatKind, NameOwner, AstNode}\n+};\n+\n+use crate::{AssistCtx, Assist, AssistId};\n+\n+/// Add explicit type assist.\n+pub(crate) fn add_explicit_type(mut ctx: AssistCtx<impl HirDatabase>) -> Option<Assist> {\n+    let stmt = ctx.node_at_offset::<LetStmt>()?;\n+    let expr = stmt.initializer()?;\n+    let pat = stmt.pat()?;\n+    // Must be a binding\n+    let pat = match pat.kind() {\n+        PatKind::BindPat(bind_pat) => bind_pat,\n+        _ => return None,\n+    };\n+    let pat_range = pat.syntax().range();\n+    // The binding must have a name\n+    let name = pat.name()?;\n+    let name_range = name.syntax().range();\n+    // Assist not applicable if the type has already been specified\n+    if stmt.syntax().children_with_tokens().any(|child| child.kind() == SyntaxKind::COLON) {\n+        return None;\n+    }\n+    // Infer type\n+    let db = ctx.db;\n+    let func = function_from_child_node(db, ctx.frange.file_id, pat.syntax())?;\n+    let inference_res = func.infer(db);\n+    let source_map = func.body_source_map(db);\n+    let expr_id = source_map.node_expr(expr.into())?;\n+    let ty = inference_res[expr_id].clone();\n+    // Assist not applicable if the type is unknown\n+    if is_unknown(&ty) {\n+        return None;\n+    }\n+\n+    ctx.add_action(AssistId(\"add_explicit_type\"), \"add explicit type\", |edit| {\n+        edit.target(pat_range);\n+        edit.insert(name_range.end(), format!(\": {}\", ty.display(db)));\n+    });\n+    ctx.build()\n+}\n+\n+/// Returns true if any type parameter is unknown\n+fn is_unknown(ty: &Ty) -> bool {\n+    match ty {\n+        Ty::Unknown => true,\n+        Ty::Apply(a_ty) => a_ty.parameters.iter().any(is_unknown),\n+        _ => false,\n+    }\n+}\n+\n+#[cfg(test)]\n+mod tests {\n+    use super::*;\n+\n+    use crate::helpers::{ check_assist, check_assist_target, check_assist_not_applicable };\n+\n+    #[test]\n+    fn add_explicit_type_target() {\n+        check_assist_target(add_explicit_type, \"fn f() { let a<|> = 1; }\", \"a\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_works_for_simple_expr() {\n+        check_assist(\n+            add_explicit_type,\n+            \"fn f() { let a<|> = 1; }\",\n+            \"fn f() { let a<|>: i32 = 1; }\",\n+        );\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_ty_not_inferred() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|> = None; }\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_ty_already_specified() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: i32 = 1; }\");\n+    }\n+\n+    #[test]\n+    fn add_explicit_type_not_applicable_if_specified_ty_is_tuple() {\n+        check_assist_not_applicable(add_explicit_type, \"fn f() { let a<|>: (i32, i32) = (3, 4); }\");\n+    }\n+}"}, {"sha": "ded401b63ddb53a60ea4c56dd0948a09ddbd2228", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cc284dad30de4990516eeccf60f24e613fd78a2a/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=cc284dad30de4990516eeccf60f24e613fd78a2a", "patch": "@@ -86,6 +86,7 @@ where\n }\n \n mod add_derive;\n+mod add_explicit_type;\n mod add_impl;\n mod flip_comma;\n mod flip_binexpr;\n@@ -103,6 +104,7 @@ mod add_missing_impl_members;\n fn all_assists<DB: HirDatabase>() -> &'static [fn(AssistCtx<DB>) -> Option<Assist>] {\n     &[\n         add_derive::add_derive,\n+        add_explicit_type::add_explicit_type,\n         add_impl::add_impl,\n         change_visibility::change_visibility,\n         fill_match_arms::fill_match_arms,"}, {"sha": "09a7f5a437978f0ea510bdfb65f31f11f866bb14", "filename": "docs/user/features.md", "status": "modified", "additions": 31, "deletions": 1, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/cc284dad30de4990516eeccf60f24e613fd78a2a/docs%2Fuser%2Ffeatures.md", "raw_url": "https://github.com/rust-lang/rust/raw/cc284dad30de4990516eeccf60f24e613fd78a2a/docs%2Fuser%2Ffeatures.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fuser%2Ffeatures.md?ref=cc284dad30de4990516eeccf60f24e613fd78a2a", "patch": "@@ -333,10 +333,40 @@ impl VariantData {\n ```rust\n // before:\n use algo:<|>:visitor::{Visitor, visit};\n-//after:\n+// after:\n use algo::{<|>visitor::{Visitor, visit}};\n ```\n \n+- Flip binary expression\n+\n+```rust\n+// before:\n+fn foo() {\n+    if 1 <<|> 2 {\n+        println!(\"Who would have thought?\");\n+    }\n+}\n+// after:\n+fn foo() {\n+    if 2 ><|> 1 {\n+        println!(\"Who would have thought?\");\n+    }\n+}\n+```\n+\n+- Add explicit type\n+\n+```rust\n+// before:\n+fn foo() {\n+    let t<|> = (&2, Some(1));\n+}\n+// after:\n+fn foo() {\n+    let t<|>: (&i32, Option<i32>) = (&2, Some(1));\n+}\n+```\n+\n ### Magic Completions\n \n In addition to usual reference completion, rust-analyzer provides some \u2728magic\u2728"}]}