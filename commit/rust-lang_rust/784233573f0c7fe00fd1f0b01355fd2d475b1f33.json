{"sha": "784233573f0c7fe00fd1f0b01355fd2d475b1f33", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4NDIzMzU3M2YwYzdmZTAwZmQxZjBiMDEzNTVmZDJkNDc1YjFmMzM=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-04-30T18:03:16Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-04-30T18:03:16Z"}, "message": "Merge pull request #718 from RalfJung/stacked-borrows-2\n\nSharedReadOnly reborrows are never weak", "tree": {"sha": "9a31d3167f103f875a7a9d49dbf799858916c177", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9a31d3167f103f875a7a9d49dbf799858916c177"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/784233573f0c7fe00fd1f0b01355fd2d475b1f33", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcyI3kCRBK7hj4Ov3rIwAAdHIIAJDvTOfOgsPbo02xJ7hxh5JH\nY9+DxIuHmKIceSl0h2T5vgHt/NCrKF074kQPxY1eShg2/E0qfXPiGXqS8Jp8UGUh\nQAJ3nPKuxu3swiJ/MXh217nUhYBCKlUNy2pABQMkoB6SBXMMmwv0xnkr3XXukDz8\nmY8dQ6pqy8cZtn3cFpf6WJPxLQrxG8B4adTVRTsl9EvYBbcivxE+FRhcFq16nLsz\nBd9/h4mH7GrqCOLk8fQkMyy6hjTSGH4eSNqJvrJ345mFWM1Ajnz+dBpZ5NqzFFXU\nfmbfJnslgjnZaEvNpnNZ9Nv8OX+zETEqNngasf+4MwmNOon9Q45Akac4PgdGR+0=\n=6phH\n-----END PGP SIGNATURE-----\n", "payload": "tree 9a31d3167f103f875a7a9d49dbf799858916c177\nparent 048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94\nparent 17643af868c0310ec23c64d729e2f75ff19f21c7\nauthor Ralf Jung <post@ralfj.de> 1556647396 +0200\ncommitter GitHub <noreply@github.com> 1556647396 +0200\n\nMerge pull request #718 from RalfJung/stacked-borrows-2\n\nSharedReadOnly reborrows are never weak"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/784233573f0c7fe00fd1f0b01355fd2d475b1f33", "html_url": "https://github.com/rust-lang/rust/commit/784233573f0c7fe00fd1f0b01355fd2d475b1f33", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/784233573f0c7fe00fd1f0b01355fd2d475b1f33/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94", "url": "https://api.github.com/repos/rust-lang/rust/commits/048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94", "html_url": "https://github.com/rust-lang/rust/commit/048ce3cb1cb1e7ef6f95f5850f298ab2fe5fde94"}, {"sha": "17643af868c0310ec23c64d729e2f75ff19f21c7", "url": "https://api.github.com/repos/rust-lang/rust/commits/17643af868c0310ec23c64d729e2f75ff19f21c7", "html_url": "https://github.com/rust-lang/rust/commit/17643af868c0310ec23c64d729e2f75ff19f21c7"}], "stats": {"total": 5, "additions": 4, "deletions": 1}, "files": [{"sha": "2b4034d7313784a693a560d30304ca55d1398fdf", "filename": "src/stacked_borrows.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/784233573f0c7fe00fd1f0b01355fd2d475b1f33/src%2Fstacked_borrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/784233573f0c7fe00fd1f0b01355fd2d475b1f33/src%2Fstacked_borrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fstacked_borrows.rs?ref=784233573f0c7fe00fd1f0b01355fd2d475b1f33", "patch": "@@ -400,6 +400,9 @@ impl<'tcx> Stack {\n         // Either way, we ensure that we insert the new item in a way that between\n         // `derived_from` and the new one, there are only items *compatible with* `derived_from`.\n         let new_idx = if weak {\n+            // A weak SharedReadOnly reborrow might be added below other items, violating the\n+            // invariant that only SharedReadOnly can sit on top of SharedReadOnly.\n+            assert!(new.perm != Permission::SharedReadOnly, \"Weak SharedReadOnly reborrows don't work\");\n             // A very liberal reborrow because the new pointer does not expect any kind of aliasing guarantee.\n             // Just insert new permission as child of old permission, and maintain everything else.\n             // This inserts \"as far down as possible\", which is good because it makes this pointer as\n@@ -581,8 +584,8 @@ trait EvalContextPrivExt<'a, 'mir, 'tcx: 'a+'mir>: crate::MiriEvalContextExt<'a,\n                 // We need a frozen-sensitive reborrow.\n                 return this.visit_freeze_sensitive(place, size, |cur_ptr, size, frozen| {\n                     // We are only ever `SharedReadOnly` inside the frozen bits.\n-                    let weak = !frozen || kind != RefKind::Shared; // `RefKind::Raw` is always weak, as is `SharedReadWrite`.\n                     let perm = if frozen { Permission::SharedReadOnly } else { Permission::SharedReadWrite };\n+                    let weak = perm == Permission::SharedReadWrite;\n                     let item = Item { perm, tag: new_tag, protector };\n                     alloc.extra.for_each(cur_ptr, size, |stack, global| {\n                         stack.reborrow(cur_ptr.tag, force_weak || weak, item, global)"}]}