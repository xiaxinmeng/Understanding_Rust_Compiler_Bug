{"sha": "dc8b6b4be4a7123ad700a95afa469c88d6ce97eb", "node_id": "C_kwDOAAsO6NoAKGRjOGI2YjRiZTRhNzEyM2FkNzAwYTk1YWZhNDY5Yzg4ZDZjZTk3ZWI", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-07-14T19:00:02Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-03-31T11:46:40Z"}, "message": "Move lower_crate outside the LoweringContext.", "tree": {"sha": "01530664db3bff43b1f32b5b81186929185cba4e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/01530664db3bff43b1f32b5b81186929185cba4e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb", "html_url": "https://github.com/rust-lang/rust/commit/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b598d3f75c1802cae68c6967fe7ea2a83e437ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b598d3f75c1802cae68c6967fe7ea2a83e437ae", "html_url": "https://github.com/rust-lang/rust/commit/4b598d3f75c1802cae68c6967fe7ea2a83e437ae"}], "stats": {"total": 80, "additions": 39, "deletions": 41}, "files": [{"sha": "3b30d0122497b490bffb05c94131191def02e735", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 39, "deletions": 41, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dc8b6b4be4a7123ad700a95afa469c88d6ce97eb/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=dc8b6b4be4a7123ad700a95afa469c88d6ce97eb", "patch": "@@ -332,6 +332,28 @@ impl FnDeclKind {\n     }\n }\n \n+/// Compute the hash for the HIR of the full crate.\n+/// This hash will then be part of the crate_hash which is stored in the metadata.\n+fn compute_hir_hash(\n+    resolver: &mut dyn ResolverAstLowering,\n+    owners: &IndexVec<LocalDefId, hir::MaybeOwner<&hir::OwnerInfo<'_>>>,\n+) -> Fingerprint {\n+    let mut hir_body_nodes: Vec<_> = owners\n+        .iter_enumerated()\n+        .filter_map(|(def_id, info)| {\n+            let info = info.as_owner()?;\n+            let def_path_hash = resolver.definitions().def_path_hash(def_id);\n+            Some((def_path_hash, info))\n+        })\n+        .collect();\n+    hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n+\n+    let mut stable_hasher = StableHasher::new();\n+    let mut hcx = resolver.create_stable_hashing_context();\n+    hir_body_nodes.hash_stable(&mut hcx, &mut stable_hasher);\n+    stable_hasher.finish()\n+}\n+\n pub fn lower_crate<'a, 'hir>(\n     sess: &'a Session,\n     krate: &'a Crate,\n@@ -343,7 +365,7 @@ pub fn lower_crate<'a, 'hir>(\n \n     let owners =\n         IndexVec::from_fn_n(|_| hir::MaybeOwner::Phantom, resolver.definitions().def_index_count());\n-    LoweringContext {\n+    let mut lctx = LoweringContext {\n         sess,\n         resolver,\n         nt_to_tokenstream,\n@@ -371,8 +393,22 @@ pub fn lower_crate<'a, 'hir>(\n         allow_try_trait: Some([sym::try_trait_v2][..].into()),\n         allow_gen_future: Some([sym::gen_future][..].into()),\n         allow_into_future: Some([sym::into_future][..].into()),\n-    }\n-    .lower_crate(krate)\n+    };\n+\n+    // Lower the root module manually.\n+    debug_assert_eq!(lctx.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n+    lctx.with_hir_id_owner(CRATE_NODE_ID, |lctx| {\n+        let module = lctx.lower_mod(&krate.items, krate.spans.inner_span);\n+        lctx.lower_attrs(hir::CRATE_HIR_ID, &krate.attrs);\n+        hir::OwnerNode::Crate(lctx.arena.alloc(module))\n+    });\n+\n+    visit::walk_crate(&mut item::ItemLowerer { lctx: &mut lctx }, krate);\n+    let owners = lctx.owners;\n+\n+    let hir_hash = compute_hir_hash(resolver, &owners);\n+    let krate = hir::Crate { owners, hir_hash };\n+    arena.alloc(krate)\n }\n \n #[derive(Copy, Clone, PartialEq)]\n@@ -441,44 +477,6 @@ enum AnonymousLifetimeMode {\n }\n \n impl<'a, 'hir> LoweringContext<'a, 'hir> {\n-    fn lower_crate(mut self, c: &Crate) -> &'hir hir::Crate<'hir> {\n-        debug_assert_eq!(self.resolver.local_def_id(CRATE_NODE_ID), CRATE_DEF_ID);\n-\n-        visit::walk_crate(&mut item::ItemLowerer { lctx: &mut self }, c);\n-\n-        self.with_hir_id_owner(CRATE_NODE_ID, |lctx| {\n-            let module = lctx.lower_mod(&c.items, c.spans.inner_span);\n-            lctx.lower_attrs(hir::CRATE_HIR_ID, &c.attrs);\n-            hir::OwnerNode::Crate(lctx.arena.alloc(module))\n-        });\n-\n-        let hir_hash = self.compute_hir_hash();\n-\n-        let krate = hir::Crate { owners: self.owners, hir_hash };\n-        self.arena.alloc(krate)\n-    }\n-\n-    /// Compute the hash for the HIR of the full crate.\n-    /// This hash will then be part of the crate_hash which is stored in the metadata.\n-    fn compute_hir_hash(&mut self) -> Fingerprint {\n-        let definitions = self.resolver.definitions();\n-        let mut hir_body_nodes: Vec<_> = self\n-            .owners\n-            .iter_enumerated()\n-            .filter_map(|(def_id, info)| {\n-                let info = info.as_owner()?;\n-                let def_path_hash = definitions.def_path_hash(def_id);\n-                Some((def_path_hash, info))\n-            })\n-            .collect();\n-        hir_body_nodes.sort_unstable_by_key(|bn| bn.0);\n-\n-        let mut stable_hasher = StableHasher::new();\n-        let mut hcx = self.resolver.create_stable_hashing_context();\n-        hir_body_nodes.hash_stable(&mut hcx, &mut stable_hasher);\n-        stable_hasher.finish()\n-    }\n-\n     fn with_hir_id_owner(\n         &mut self,\n         owner: NodeId,"}]}