{"sha": "8e783da2228ec256d15bb6af0f7e1053fc1e040e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlNzgzZGEyMjI4ZWMyNTZkMTViYjZhZjBmN2UxMDUzZmMxZTA0MGU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-06T21:03:14Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-04-15T11:06:29Z"}, "message": "encapsulate ReserveOrActivateIndex into the borrows dataflow", "tree": {"sha": "24bf5d9cd23cea3882a8b4c3ca13d52200860e42", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24bf5d9cd23cea3882a8b4c3ca13d52200860e42"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e783da2228ec256d15bb6af0f7e1053fc1e040e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e783da2228ec256d15bb6af0f7e1053fc1e040e", "html_url": "https://github.com/rust-lang/rust/commit/8e783da2228ec256d15bb6af0f7e1053fc1e040e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e783da2228ec256d15bb6af0f7e1053fc1e040e/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f7b74f832b33280e685dd8b89ef218c27c746e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f7b74f832b33280e685dd8b89ef218c27c746e3", "html_url": "https://github.com/rust-lang/rust/commit/5f7b74f832b33280e685dd8b89ef218c27c746e3"}], "stats": {"total": 27, "additions": 13, "deletions": 14}, "files": [{"sha": "e4a4360a8051ddfec90c30571a0f57e61fdc4e61", "filename": "src/librustc_mir/borrow_check/mod.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/8e783da2228ec256d15bb6af0f7e1053fc1e040e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e783da2228ec256d15bb6af0f7e1053fc1e040e/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fmod.rs?ref=8e783da2228ec256d15bb6af0f7e1053fc1e040e", "patch": "@@ -37,7 +37,7 @@ use dataflow::MoveDataParamEnv;\n use dataflow::{DataflowResultsConsumer};\n use dataflow::{MaybeInitializedPlaces, MaybeUninitializedPlaces};\n use dataflow::{EverInitializedPlaces, MovingOutStatements};\n-use dataflow::{Borrows, ReserveOrActivateIndex};\n+use dataflow::Borrows;\n use dataflow::indexes::BorrowIndex;\n use dataflow::move_paths::{IllegalMoveOriginKind, MoveError};\n use dataflow::move_paths::{HasMoveData, LookupResult, MoveData, MovePathIndex};\n@@ -66,6 +66,8 @@ pub fn provide(providers: &mut Providers) {\n     };\n }\n \n+struct IsActive(bool);\n+\n fn mir_borrowck<'a, 'tcx>(\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     def_id: DefId,\n@@ -846,22 +848,21 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             context,\n             (sd, place_span.0),\n             flow_state,\n-            |this, index, borrow| match (rw, borrow.kind) {\n+            |this, borrow_index, is_active, borrow| match (rw, borrow.kind) {\n                 // Obviously an activation is compatible with its own\n                 // reservation (or even prior activating uses of same\n                 // borrow); so don't check if they interfere.\n                 //\n                 // NOTE: *reservations* do conflict with themselves;\n                 // thus aren't injecting unsoundenss w/ this check.)\n-                (Activation(_, activating), _) if activating == index.borrow_index() => {\n+                (Activation(_, activating), _) if activating == borrow_index => {\n                     debug!(\n                         \"check_access_for_conflict place_span: {:?} sd: {:?} rw: {:?} \\\n-                         skipping {:?} b/c activation of same borrow_index: {:?}\",\n+                         skipping {:?} b/c activation of same borrow_index\",\n                         place_span,\n                         sd,\n                         rw,\n-                        (index, borrow),\n-                        index.borrow_index()\n+                        (borrow_index, borrow),\n                     );\n                     Control::Continue\n                 }\n@@ -872,7 +873,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n                 (Read(kind), BorrowKind::Unique) | (Read(kind), BorrowKind::Mut { .. }) => {\n                     // Reading from mere reservations of mutable-borrows is OK.\n-                    if this.allow_two_phase_borrow(borrow.kind) && index.is_reservation() {\n+                    if this.allow_two_phase_borrow(borrow.kind) && !is_active.0 {\n                         return Control::Continue;\n                     }\n \n@@ -2216,18 +2217,16 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n     /// \"Current borrow\" here means a borrow that reaches the point in\n     /// the control-flow where the access occurs.\n     ///\n-    /// The borrow's phase is represented by the ReserveOrActivateIndex\n-    /// passed to the callback: one can call `is_reservation()` and\n-    /// `is_activation()` to determine what phase the borrow is\n-    /// currently in, when such distinction matters.\n+    /// The borrow's phase is represented by the IsActive parameter\n+    /// passed to the callback.\n     fn each_borrow_involving_path<F>(\n         &mut self,\n         _context: Context,\n         access_place: (ShallowOrDeep, &Place<'tcx>),\n         flow_state: &Flows<'cx, 'gcx, 'tcx>,\n         mut op: F,\n     ) where\n-        F: FnMut(&mut Self, ReserveOrActivateIndex, &BorrowData<'tcx>) -> Control,\n+        F: FnMut(&mut Self, BorrowIndex, IsActive, &BorrowData<'tcx>) -> Control,\n     {\n         let (access, place) = access_place;\n \n@@ -2247,7 +2246,8 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n                     \"each_borrow_involving_path: {:?} @ {:?} vs. {:?}/{:?}\",\n                     i, borrowed, place, access\n                 );\n-                let ctrl = op(self, i, borrowed);\n+                let is_active = IsActive(i.is_activation());\n+                let ctrl = op(self, i.borrow_index(), is_active, borrowed);\n                 if ctrl == Control::Break {\n                     return;\n                 }"}, {"sha": "85458c7d6848848174a9eab94fb1ea47bf610a8a", "filename": "src/librustc_mir/dataflow/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8e783da2228ec256d15bb6af0f7e1053fc1e040e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e783da2228ec256d15bb6af0f7e1053fc1e040e/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fmod.rs?ref=8e783da2228ec256d15bb6af0f7e1053fc1e040e", "patch": "@@ -31,7 +31,6 @@ pub use self::impls::{DefinitelyInitializedPlaces, MovingOutStatements};\n pub use self::impls::EverInitializedPlaces;\n pub use self::impls::borrows::Borrows;\n pub use self::impls::HaveBeenBorrowedLocals;\n-pub(crate) use self::impls::borrows::{ReserveOrActivateIndex};\n pub use self::at_location::{FlowAtLocation, FlowsAtLocation};\n pub(crate) use self::drop_flag_effects::*;\n "}]}