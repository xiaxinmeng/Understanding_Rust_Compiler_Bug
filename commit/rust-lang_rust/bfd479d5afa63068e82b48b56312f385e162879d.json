{"sha": "bfd479d5afa63068e82b48b56312f385e162879d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmZDQ3OWQ1YWZhNjMwNjhlODJiNDhiNTYzMTJmMzg1ZTE2Mjg3OWQ=", "commit": {"author": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2021-07-26T00:50:31Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-26T00:50:31Z"}, "message": "Merge pull request #4920 from calebcartwright/subtree-sync\n\nsubtree sync", "tree": {"sha": "536b8ba724ea62296c96bc4999000135713c17b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/536b8ba724ea62296c96bc4999000135713c17b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfd479d5afa63068e82b48b56312f385e162879d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg/gbXCRBK7hj4Ov3rIwAA4ZoIAHe+P0mEc0JvikoO/B4OpCTw\nK+0Xs8O8rWLFyEzq5SYguhngHW+63ph4sYmeH+cOKEQy4rhsT82ccZpGILMJOCud\nWdIaepDbbzGo9hYPM8DYRZdlpbBvOe9KeCOVEPu23QiUShDWDQu6qE4fe8ccOe7q\nQOWOIvkMjAWnnB+6z0jI7T5+WGXmpdXyJuooEsUW7lVudXT29La0Qkdp/eryHgmw\nQNVK2P8OD9BXMEIDUJfG2BvOYQnrFXs4VrsCm6Kp1OfWrZq9/KEQ+KNBE45/ZTkw\nHgCerkpnqjuN5L+w9LlkxNvOy4YbSYEqbUGnz3G8DtDJJUucL+5a+djTQoEU5Ts=\n=3Zni\n-----END PGP SIGNATURE-----\n", "payload": "tree 536b8ba724ea62296c96bc4999000135713c17b1\nparent 7872306edf2e11a69aaffb9434088fd66b46a863\nparent 277feac1f97324dffea0bfc3816ef8d3f73026f3\nauthor Caleb Cartwright <calebcartwright@users.noreply.github.com> 1627260631 -0500\ncommitter GitHub <noreply@github.com> 1627260631 -0500\n\nMerge pull request #4920 from calebcartwright/subtree-sync\n\nsubtree sync"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfd479d5afa63068e82b48b56312f385e162879d", "html_url": "https://github.com/rust-lang/rust/commit/bfd479d5afa63068e82b48b56312f385e162879d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfd479d5afa63068e82b48b56312f385e162879d/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7872306edf2e11a69aaffb9434088fd66b46a863", "url": "https://api.github.com/repos/rust-lang/rust/commits/7872306edf2e11a69aaffb9434088fd66b46a863", "html_url": "https://github.com/rust-lang/rust/commit/7872306edf2e11a69aaffb9434088fd66b46a863"}, {"sha": "277feac1f97324dffea0bfc3816ef8d3f73026f3", "url": "https://api.github.com/repos/rust-lang/rust/commits/277feac1f97324dffea0bfc3816ef8d3f73026f3", "html_url": "https://github.com/rust-lang/rust/commit/277feac1f97324dffea0bfc3816ef8d3f73026f3"}], "stats": {"total": 205, "additions": 153, "deletions": 52}, "files": [{"sha": "68354b6ceaf25aa1a973050c358bac6baaf823fe", "filename": "CHANGELOG.md", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -176,7 +176,7 @@ https://rust-lang.github.io/rustfmt/?version=v1.4.33&search=#imports_granularity\n \n ### Changed\n \n-- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506)) \n+- Original comment indentation for trailing comments within an `if` is now taken into account when determining the indentation level to use for the trailing comment in formatted code. This does not modify any existing code formatted with rustfmt; it simply gives the programmer discretion to specify whether the comment is associated to the `else` block, or if the trailing comment is just a member of the `if` block. ([#1575](https://github.com/rust-lang/rustfmt/issues/1575), [#4120](https://github.com/rust-lang/rustfmt/issues/4120), [#4506](https://github.com/rust-lang/rustfmt/issues/4506))\n \n In this example the `// else comment` refers to the `else`:\n ```rust\n@@ -213,7 +213,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Fixed\n - Formatting of empty blocks with attributes which only contained comments is no longer butchered.([#4475](https://github.com/rust-lang/rustfmt/issues/4475), [#4467](https://github.com/rust-lang/rustfmt/issues/4467), [#4452](https://github.com/rust-lang/rustfmt/issues/4452#issuecomment-705886282), [#4522](https://github.com/rust-lang/rustfmt/issues/4522))\n-- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872)) \n+- Indentation of trailing comments in non-empty extern blocks is now correct. ([#4120](https://github.com/rust-lang/rustfmt/issues/4120#issuecomment-696491872))\n \n ### Install/Download Options\n - **crates.io package** - *pending*\n@@ -297,7 +297,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n - Fix aligning comments of different group\n - Fix flattening imports with a single `self`.\n - Fix removing attributes on function parameters.\n-- Fix removing `impl` keyword from opaque type. \n+- Fix removing `impl` keyword from opaque type.\n \n ## [1.4.8] 2019-09-08\n \n@@ -329,7 +329,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n - Add `--message-format` command line option to `cargo-fmt`.\n - Add `-l,--files-with-diff` command line option to `rustfmt`.\n-- Add `json` emit mode. \n+- Add `json` emit mode.\n \n ### Fixed\n \n@@ -380,7 +380,7 @@ if toks.eat_token(Token::Word(\"modify\"))? && toks.eat_token(Token::Word(\"labels\"\n \n ### Added\n \n-- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt \n+- Add new attribute `rustfmt::skip::attributes` to prevent rustfmt\n from formatting an attribute #3665\n \n ### Changed"}, {"sha": "3a04fb28f7cbfb839ff8320933a92f6608ba9b52", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -42,7 +42,7 @@ unicode-segmentation = \"1.0.0\"\n regex = \"1.0\"\n term = \"0.6\"\n diff = \"0.1\"\n-log = \"0.4\"\n+log = \"0.4.14\"\n env_logger = \"0.6\"\n getopts = \"0.2\"\n derive-new = \"0.5\""}, {"sha": "9daa70653797657d6488a952e1f56f3c7f4d3411", "filename": "Configurations.md", "status": "modified", "additions": 16, "deletions": 16, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/Configurations.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/Configurations.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Configurations.md?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -17,27 +17,27 @@ To enable unstable options, set `unstable_features = true` in `rustfmt.toml` or\n \n Below you find a detailed visual guide on all the supported configuration options of rustfmt:\n \n-## `array_width` \n+## `array_width`\n \n Maximum width of an array literal before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `array_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n-## `attr_fn_like_width` \n+## `attr_fn_like_width`\n \n Maximum width of the args of a function-like attributes before falling back to vertical formatting.\n \n - **Default value**: `70`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `attr_fn_like_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -295,15 +295,15 @@ where\n }\n ```\n \n-## `chain_width` \n+## `chain_width`\n \n Maximum width of a chain to fit on one line.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `chain_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -751,15 +751,15 @@ trait Lorem {\n }\n ```\n \n-## `fn_call_width` \n+## `fn_call_width`\n \n Maximum width of the args of a function call before falling back to vertical formatting.\n \n - **Default value**: `60`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `fn_call_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2124,15 +2124,15 @@ Don't reformat out of line modules\n - **Possible values**: `true`, `false`\n - **Stable**: No (tracking issue: #3389)\n \n-## `single_line_if_else_max_width` \n+## `single_line_if_else_max_width`\n \n Maximum line length for single line if-else expressions. A value of `0` (zero) results in if-else expressions always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `50`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `single_line_if_else_max_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2313,27 +2313,27 @@ fn main() {\n \n See also: [`indent_style`](#indent_style).\n \n-## `struct_lit_width` \n+## `struct_lit_width`\n \n Maximum width in the body of a struct literal before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `18`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_lit_width` will take precedence.\n \n See also [`max_width`](#max_width), [`use_small_heuristics`](#use_small_heuristics), and [`struct_lit_single_line`](#struct_lit_single_line)\n \n-## `struct_variant_width` \n+## `struct_variant_width`\n \n Maximum width in the body of a struct variant before falling back to vertical formatting. A value of `0` (zero) results in struct literals always being broken into multiple lines. Note this occurs when `use_small_heuristics` is set to `Off`.\n \n - **Default value**: `35`\n - **Possible values**: any positive integer that is less than or equal to the value specified for [`max_width`](#max_width)\n - **Stable**: Yes\n \n-By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence. \n+By default this option is set as a percentage of [`max_width`](#max_width) provided by [`use_small_heuristics`](#use_small_heuristics), but a value set directly for `struct_variant_width` will take precedence.\n \n See also [`max_width`](#max_width) and [`use_small_heuristics`](#use_small_heuristics)\n \n@@ -2530,7 +2530,7 @@ fn main() {\n \n This option can be used to simplify the management and bulk updates of the granular width configuration settings ([`fn_call_width`](#fn_call_width), [`attr_fn_like_width`](#attr_fn_like_width), [`struct_lit_width`](#struct_lit_width), [`struct_variant_width`](#struct_variant_width), [`array_width`](#array_width), [`chain_width`](#chain_width), [`single_line_if_else_max_width`](#single_line_if_else_max_width)), that respectively control when formatted constructs are multi-lined/vertical based on width.\n \n-Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`. \n+Note that explicitly provided values for the width configuration settings take precedence and override the calculated values determined by `use_small_heuristics`.\n \n - **Default value**: `\"Default\"`\n - **Possible values**: `\"Default\"`, `\"Off\"`, `\"Max\"`\n@@ -2595,7 +2595,7 @@ fn main() {\n ```\n \n #### `Off`:\n-When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics. \n+When `use_small_heuristics` is set to `Off`, the granular width settings are functionally disabled and ignored. See the documentation for the respective width config options for specifics.\n \n ```rust\n enum Lorem {"}, {"sha": "1b77dad11f0fe9b397de1f4ddc28f1452d4dd7a2", "filename": "Contributing.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/Contributing.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/Contributing.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Contributing.md?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -38,7 +38,7 @@ colourised diff will be printed so that the offending line(s) can quickly be\n identified.\n \n Without explicit settings, the tests will be run using rustfmt's default\n-configuration. It is possible to run a test using non-default settings in several \n+configuration. It is possible to run a test using non-default settings in several\n ways. Firstly, you can include configuration parameters in comments at the top\n of the file. For example: to use 3 spaces per tab, start your test with\n `// rustfmt-tab_spaces: 3`. Just remember that the comment is part of the input,"}, {"sha": "7a4dcf8773b61a85b7fc6fcc6dd08c9a91b55a00", "filename": "Design.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/Design.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/Design.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Design.md?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -150,8 +150,8 @@ for its configuration.\n \n Our visitor keeps track of the desired current indent due to blocks (\n `block_indent`). Each `visit_*` method reformats code according to this indent,\n-`config.comment_width()` and `config.max_width()`. Most reformatting that is done \n-in the `visit_*` methods is a bit hacky and is meant to be temporary until it can \n+`config.comment_width()` and `config.max_width()`. Most reformatting that is done\n+in the `visit_*` methods is a bit hacky and is meant to be temporary until it can\n be done properly.\n \n There are a bunch of methods called `rewrite_*`. They do the bulk of the"}, {"sha": "500a9f9a37c8cb58f4f718ae1a829a3a6a1b0f3e", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -180,13 +180,13 @@ needs to be specified in `rustfmt.toml`, e.g., with `edition = \"2018\"`.\n \n * For things you do not want rustfmt to mangle, use `#[rustfmt::skip]`\n * To prevent rustfmt from formatting a macro or an attribute,\n-  use `#[rustfmt::skip::macros(target_macro_name)]` or \n+  use `#[rustfmt::skip::macros(target_macro_name)]` or\n   `#[rustfmt::skip::attributes(target_attribute_name)]`\n \n   Example:\n \n     ```rust\n-    #![rustfmt::skip::attributes(custom_attribute)]   \n+    #![rustfmt::skip::attributes(custom_attribute)]\n \n     #[custom_attribute(formatting , here , should , be , Skipped)]\n     #[rustfmt::skip::macros(html)]"}, {"sha": "0269e3ee4af931437a9e6c5d9c81bd172c1fb193", "filename": "ci/integration.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/ci%2Fintegration.sh", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/ci%2Fintegration.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ci%2Fintegration.sh?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -15,7 +15,7 @@ set -ex\n # it again.\n #\n #which cargo-fmt || cargo install --force\n-CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force \n+CFG_RELEASE=nightly CFG_RELEASE_CHANNEL=nightly cargo install --path . --force\n \n echo \"Integration tests for: ${INTEGRATION}\"\n cargo fmt -- --version"}, {"sha": "56d1917e2b61b211eb8ae3112f07e93ea1cdf0c9", "filename": "docs/index.html", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/docs%2Findex.html", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/docs%2Findex.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Findex.html?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -85,7 +85,7 @@\n                 outputHtml() {\n                   const ast = this.configurationDescriptions\n                                   .filter(({ head, text, stable }) => {\n-                                    \n+\n                                     if (\n                                       text.includes(this.searchCondition) === false &&\n                                       head.includes(this.searchCondition) === false\n@@ -105,7 +105,7 @@\n               },\n               created: async function() {\n                 const res = await axios.get(ConfigurationMdUrl);\n-                const { \n+                const {\n                   about,\n                   configurationAbout,\n                   configurationDescriptions\n@@ -144,7 +144,7 @@\n                   const lastIndex = stack.length - 1;\n                   stack[lastIndex].push(next);\n                   return stack;\n-                }, \n+                },\n                 [[]]);\n               });\n             }\n@@ -179,7 +179,7 @@\n                 configurationAbout, ...configurationDescriptions\n               ] = configurations;\n               configurationAbout.value.links = {};\n-              \n+\n               return {\n                 about,\n                 configurationAbout: configurationAbout.value,"}, {"sha": "bca9f77f959e3aa5c118552babd65338b99325c0", "filename": "src/expr.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -107,7 +107,9 @@ pub(crate) fn format_expr(\n         }\n         ast::ExprKind::Unary(op, ref subexpr) => rewrite_unary_op(context, op, subexpr, shape),\n         ast::ExprKind::Struct(ref struct_expr) => {\n-            let ast::StructExpr { fields, path, rest } = &**struct_expr;\n+            let ast::StructExpr {\n+                fields, path, rest, ..\n+            } = &**struct_expr;\n             rewrite_struct_lit(context, path, fields, rest, &expr.attrs, expr.span, shape)\n         }\n         ast::ExprKind::Tup(ref items) => {"}, {"sha": "e0403574eebc1d73a361c70e144fe67920c4a40a", "filename": "src/formatting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fformatting.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -34,7 +34,7 @@ impl<'b, T: Write + 'b> Session<'b, T> {\n             return Err(ErrorKind::VersionMismatch);\n         }\n \n-        rustc_span::with_session_globals(self.config.edition().into(), || {\n+        rustc_span::create_session_if_not_set_then(self.config.edition().into(), |_| {\n             if self.config.disable_all_formatting() {\n                 // When the input is from stdin, echo back the input.\n                 if let Input::Text(ref buf) = input {"}, {"sha": "420484c0ba11e50e5529cdc4ffbd13ea6fa752f0", "filename": "src/items.rs", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -6,7 +6,7 @@ use std::cmp::{max, min, Ordering};\n use regex::Regex;\n use rustc_ast::visit;\n use rustc_ast::{ast, ptr};\n-use rustc_span::{symbol, BytePos, Span, DUMMY_SP};\n+use rustc_span::{symbol, BytePos, Span};\n \n use crate::attr::filter_inline_attrs;\n use crate::comment::{\n@@ -31,12 +31,7 @@ use crate::stmt::Stmt;\n use crate::utils::*;\n use crate::vertical::rewrite_with_alignment;\n use crate::visitor::FmtVisitor;\n-\n-const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n-    kind: ast::VisibilityKind::Inherited,\n-    span: DUMMY_SP,\n-    tokens: None,\n-};\n+use crate::DEFAULT_VISIBILITY;\n \n fn type_annotation_separator(config: &Config) -> &str {\n     colon_spaces(config)\n@@ -976,7 +971,7 @@ impl<'a> StructParts<'a> {\n         format_header(context, self.prefix, self.ident, self.vis, offset)\n     }\n \n-    fn from_variant(variant: &'a ast::Variant) -> Self {\n+    pub(crate) fn from_variant(variant: &'a ast::Variant) -> Self {\n         StructParts {\n             prefix: \"\",\n             ident: variant.ident,"}, {"sha": "ce8a45eea65312dd5fee34d9918b852e9ce10114", "filename": "src/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -1,6 +1,7 @@\n #![feature(rustc_private)]\n #![deny(rust_2018_idioms)]\n #![warn(unreachable_pub)]\n+#![recursion_limit = \"256\"]\n \n #[macro_use]\n extern crate derive_new;\n@@ -31,7 +32,7 @@ use std::rc::Rc;\n \n use ignore;\n use rustc_ast::ast;\n-use rustc_span::symbol;\n+use rustc_span::{symbol, DUMMY_SP};\n use thiserror::Error;\n \n use crate::comment::LineClasses;\n@@ -95,6 +96,11 @@ mod types;\n mod vertical;\n pub(crate) mod visitor;\n \n+const DEFAULT_VISIBILITY: ast::Visibility = ast::Visibility {\n+    kind: ast::VisibilityKind::Inherited,\n+    span: DUMMY_SP,\n+    tokens: None,\n+};\n /// The various errors that can occur during formatting. Note that not all of\n /// these can currently be propagated to clients.\n #[derive(Error, Debug)]"}, {"sha": "5de0575b5cd66a56a466466608cdf47b9b8600a9", "filename": "src/modules.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fmodules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fmodules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -318,7 +318,7 @@ impl<'ast, 'sess, 'c> ModResolver<'ast, 'sess> {\n             self.directory = directory;\n         }\n         match (sub_mod.ast_mod_kind, sub_mod.items) {\n-            (Some(Cow::Borrowed(ast::ModKind::Loaded(items, ast::Inline::No, _))), _) => {\n+            (Some(Cow::Borrowed(ast::ModKind::Loaded(items, _, _))), _) => {\n                 self.visit_mod_from_ast(&items)\n             }\n             (Some(Cow::Owned(..)), Cow::Owned(items)) => self.visit_mod_outside_ast(items),"}, {"sha": "fa0ef260991d7355af6d0bcc30b098381bad8233", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -45,7 +45,7 @@ fn is_short_pattern_inner(pat: &ast::Pat) -> bool {\n         | ast::PatKind::Path(..)\n         | ast::PatKind::Range(..) => false,\n         ast::PatKind::Tuple(ref subpats) => subpats.len() <= 1,\n-        ast::PatKind::TupleStruct(ref path, ref subpats) => {\n+        ast::PatKind::TupleStruct(_, ref path, ref subpats) => {\n             path.segments.len() <= 1 && subpats.len() <= 1\n         }\n         ast::PatKind::Box(ref p) | ast::PatKind::Ref(ref p, _) | ast::PatKind::Paren(ref p) => {\n@@ -226,7 +226,7 @@ impl Rewrite for Pat {\n             PatKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Expr, q_self.as_ref(), path, shape)\n             }\n-            PatKind::TupleStruct(ref path, ref pat_vec) => {\n+            PatKind::TupleStruct(_, ref path, ref pat_vec) => {\n                 let path_str = rewrite_path(context, PathContext::Expr, None, path, shape)?;\n                 rewrite_tuple_pat(pat_vec, Some(path_str), self.span, context, shape)\n             }\n@@ -244,7 +244,7 @@ impl Rewrite for Pat {\n                     .collect();\n                 Some(format!(\"[{}]\", rw.join(\", \")))\n             }\n-            PatKind::Struct(ref path, ref fields, ellipsis) => {\n+            PatKind::Struct(_, ref path, ref fields, ellipsis) => {\n                 rewrite_struct_pat(path, fields, ellipsis, self.span, context, shape)\n             }\n             PatKind::MacCall(ref mac) => {"}, {"sha": "cb52346a13a41c0ad9c94991925d7f53bfc2974a", "filename": "src/test/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftest%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftest%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -16,6 +16,7 @@ use crate::source_file;\n use crate::{is_nightly_channel, FormatReport, FormatReportFormatterBuilder, Input, Session};\n \n mod configuration_snippet;\n+mod mod_resolver;\n mod parser;\n \n const DIFF_CONTEXT_SIZE: usize = 3;"}, {"sha": "e0b55e3efb2c4f5714f09abad473ff7b498aaa96", "filename": "src/test/mod_resolver.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftest%2Fmod_resolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftest%2Fmod_resolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmod_resolver.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -0,0 +1,25 @@\n+use std::io;\n+use std::path::PathBuf;\n+\n+use super::read_config;\n+\n+use crate::{FileName, Input, Session};\n+\n+#[test]\n+fn nested_out_of_line_mods_loaded() {\n+    // See also https://github.com/rust-lang/rustfmt/issues/4874\n+    let filename = \"tests/mod-resolver/issue-4874/main.rs\";\n+    let input_file = PathBuf::from(filename);\n+    let config = read_config(&input_file);\n+    let mut session = Session::<io::Stdout>::new(config, None);\n+    let report = session\n+        .format(Input::File(filename.into()))\n+        .expect(\"Should not have had any execution errors\");\n+    let errors_by_file = &report.internal.borrow().0;\n+    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n+        \"tests/mod-resolver/issue-4874/bar/baz.rs\",\n+    ))));\n+    assert!(errors_by_file.contains_key(&FileName::Real(PathBuf::from(\n+        \"tests/mod-resolver/issue-4874/foo/qux.rs\",\n+    ))));\n+}"}, {"sha": "974c0c5990c7ddb38f015d1aae4ccccd35645a69", "filename": "src/types.rs", "status": "modified", "additions": 56, "deletions": 3, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -1,15 +1,15 @@\n use std::iter::ExactSizeIterator;\n use std::ops::Deref;\n \n-use rustc_ast::ast::{self, FnRetTy, Mutability};\n-use rustc_span::{symbol::kw, BytePos, Pos, Span};\n+use rustc_ast::ast::{self, AttrVec, FnRetTy, Mutability};\n+use rustc_span::{symbol::kw, symbol::Ident, BytePos, Pos, Span};\n \n-use crate::comment::{combine_strs_with_missing_comments, contains_comment};\n use crate::config::lists::*;\n use crate::config::{IndentStyle, TypeDensity, Version};\n use crate::expr::{\n     format_expr, rewrite_assign_rhs, rewrite_call, rewrite_tuple, rewrite_unary_prefix, ExprType,\n };\n+use crate::items::StructParts;\n use crate::lists::{\n     definitive_tactic, itemize_list, write_list, ListFormatting, ListItem, Separator,\n };\n@@ -24,6 +24,11 @@ use crate::utils::{\n     colon_spaces, extra_offset, first_line_width, format_extern, format_mutability,\n     last_line_extendable, last_line_width, mk_sp, rewrite_ident,\n };\n+use crate::DEFAULT_VISIBILITY;\n+use crate::{\n+    comment::{combine_strs_with_missing_comments, contains_comment},\n+    items::format_struct_struct,\n+};\n \n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub(crate) enum PathContext {\n@@ -764,6 +769,54 @@ impl Rewrite for ast::Ty {\n             ast::TyKind::Tup(ref items) => {\n                 rewrite_tuple(context, items.iter(), self.span, shape, items.len() == 1)\n             }\n+            ast::TyKind::AnonymousStruct(ref fields, recovered) => {\n+                let ident = Ident::new(\n+                    kw::Struct,\n+                    mk_sp(self.span.lo(), self.span.lo() + BytePos(6)),\n+                );\n+                let data = ast::VariantData::Struct(fields.clone(), recovered);\n+                let variant = ast::Variant {\n+                    attrs: AttrVec::new(),\n+                    id: self.id,\n+                    span: self.span,\n+                    vis: DEFAULT_VISIBILITY,\n+                    ident,\n+                    data,\n+                    disr_expr: None,\n+                    is_placeholder: false,\n+                };\n+                format_struct_struct(\n+                    &context,\n+                    &StructParts::from_variant(&variant),\n+                    fields,\n+                    shape.indent,\n+                    None,\n+                )\n+            }\n+            ast::TyKind::AnonymousUnion(ref fields, recovered) => {\n+                let ident = Ident::new(\n+                    kw::Union,\n+                    mk_sp(self.span.lo(), self.span.lo() + BytePos(5)),\n+                );\n+                let data = ast::VariantData::Struct(fields.clone(), recovered);\n+                let variant = ast::Variant {\n+                    attrs: AttrVec::new(),\n+                    id: self.id,\n+                    span: self.span,\n+                    vis: DEFAULT_VISIBILITY,\n+                    ident,\n+                    data,\n+                    disr_expr: None,\n+                    is_placeholder: false,\n+                };\n+                format_struct_struct(\n+                    &context,\n+                    &StructParts::from_variant(&variant),\n+                    fields,\n+                    shape.indent,\n+                    None,\n+                )\n+            }\n             ast::TyKind::Path(ref q_self, ref path) => {\n                 rewrite_path(context, PathContext::Type, q_self.as_ref(), path, shape)\n             }"}, {"sha": "614cda5f911c2354bcb5e9ebac60d78e44941d2d", "filename": "src/utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -6,7 +6,7 @@ use rustc_ast::ast::{\n };\n use rustc_ast::ptr;\n use rustc_ast_pretty::pprust;\n-use rustc_span::{sym, symbol, BytePos, ExpnId, Span, Symbol, SyntaxContext};\n+use rustc_span::{sym, symbol, BytePos, LocalExpnId, Span, Symbol, SyntaxContext};\n use unicode_width::UnicodeWidthStr;\n \n use crate::comment::{filter_normal_code, CharClasses, FullCodeCharKind, LineClasses};\n@@ -675,7 +675,7 @@ pub(crate) trait NodeIdExt {\n \n impl NodeIdExt for NodeId {\n     fn root() -> NodeId {\n-        NodeId::placeholder_from_expn_id(ExpnId::root())\n+        NodeId::placeholder_from_expn_id(LocalExpnId::ROOT)\n     }\n }\n "}, {"sha": "d31b675ea260dbe8ac393d7623b2fb4bd6cfa160", "filename": "tests/mod-resolver/issue-4874/bar/baz.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-4874%2Fbar%2Fbaz.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -0,0 +1,5 @@\n+fn \n+     fail_fmt_check\n+   (\n+\n+   ) {}\n\\ No newline at end of file"}, {"sha": "246d847869a126e1fd790142cf0fb2d9d54e91a3", "filename": "tests/mod-resolver/issue-4874/foo.rs", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-4874%2Ffoo.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -0,0 +1 @@\n+mod qux;\n\\ No newline at end of file"}, {"sha": "d8bb610a64db1837b3104c650047281ea0c630a2", "filename": "tests/mod-resolver/issue-4874/foo/qux.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-4874%2Ffoo%2Fqux.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -0,0 +1,5 @@\n+ fn \n+ badly_formatted\n+    (\n+\n+    ) {}\n\\ No newline at end of file"}, {"sha": "3609415b1468b3a7b8266bb711a894c22e5c0b92", "filename": "tests/mod-resolver/issue-4874/main.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfd479d5afa63068e82b48b56312f385e162879d/tests%2Fmod-resolver%2Fissue-4874%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmod-resolver%2Fissue-4874%2Fmain.rs?ref=bfd479d5afa63068e82b48b56312f385e162879d", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    println!(\"Hello, world!\");\n+}\n+\n+mod foo;\n+mod bar {\n+    mod baz;\n+}\n\\ No newline at end of file"}]}