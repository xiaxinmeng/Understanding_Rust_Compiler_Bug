{"sha": "eaf1df26e9903772d40df30dd70c75c38d8cb887", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhZjFkZjI2ZTk5MDM3NzJkNDBkZjMwZGQ3MGM3NWMzOGQ4Y2I4ODc=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T12:14:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-03-02T12:40:40Z"}, "message": "rename syntax-mapping -> source-map", "tree": {"sha": "4e7a6f4bb15caf4e134305ab1c4ba749e9e1d5b0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4e7a6f4bb15caf4e134305ab1c4ba749e9e1d5b0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eaf1df26e9903772d40df30dd70c75c38d8cb887", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eaf1df26e9903772d40df30dd70c75c38d8cb887", "html_url": "https://github.com/rust-lang/rust/commit/eaf1df26e9903772d40df30dd70c75c38d8cb887", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eaf1df26e9903772d40df30dd70c75c38d8cb887/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "592b906604d60a86af74c5dbb3bf40b2ddcf8061", "url": "https://api.github.com/repos/rust-lang/rust/commits/592b906604d60a86af74c5dbb3bf40b2ddcf8061", "html_url": "https://github.com/rust-lang/rust/commit/592b906604d60a86af74c5dbb3bf40b2ddcf8061"}], "stats": {"total": 64, "additions": 32, "deletions": 32}, "files": [{"sha": "81b11956a1a7708945b9def56c8118711d71a6fe", "filename": "crates/ra_assists/src/fill_match_arms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Ffill_match_arms.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -23,7 +23,7 @@ pub(crate) fn fill_match_arms(mut ctx: AssistCtx<impl HirDatabase>) -> Option<As\n     let function =\n         source_binder::function_from_child_node(ctx.db, ctx.frange.file_id, expr.syntax())?;\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n+    let syntax_mapping = function.body_source_map(ctx.db);\n     let node_expr = syntax_mapping.node_expr(expr)?;\n     let match_expr_ty = infer_result[node_expr].clone();\n     let enum_def = match match_expr_ty {"}, {"sha": "f8521e89540651b502a9876631c5e1c90b77d9a3", "filename": "crates/ra_hir/src/code_model_api.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model_api.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -9,7 +9,7 @@ use crate::{\n     HirDatabase, PersistentHirDatabase,\n     type_ref::TypeRef,\n     nameres::{ModuleScope, Namespace, lower::ImportId},\n-    expr::{Body, BodySyntaxMapping},\n+    expr::{Body, BodySourceMap},\n     ty::InferenceResult,\n     adt::{EnumVariantId, StructFieldId, VariantDef},\n     generics::GenericParams,\n@@ -483,8 +483,8 @@ impl Function {\n         self.signature(db).name.clone()\n     }\n \n-    pub fn body_syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {\n-        db.body_syntax_mapping(*self)\n+    pub fn body_source_map(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_source_map(*self)\n     }\n \n     pub fn body(&self, db: &impl HirDatabase) -> Arc<Body> {\n@@ -497,7 +497,7 @@ impl Function {\n \n     pub fn scopes(&self, db: &impl HirDatabase) -> ScopesWithSyntaxMapping {\n         let scopes = db.expr_scopes(*self);\n-        let syntax_mapping = db.body_syntax_mapping(*self);\n+        let syntax_mapping = db.body_source_map(*self);\n         ScopesWithSyntaxMapping { scopes, syntax_mapping }\n     }\n "}, {"sha": "cb1c245618435a26bedae3846092316c0ff1c218", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -108,8 +108,8 @@ pub trait HirDatabase: PersistentHirDatabase {\n     #[salsa::invoke(crate::expr::body_hir)]\n     fn body_hir(&self, func: Function) -> Arc<crate::expr::Body>;\n \n-    #[salsa::invoke(crate::expr::body_syntax_mapping)]\n-    fn body_syntax_mapping(&self, func: Function) -> Arc<crate::expr::BodySyntaxMapping>;\n+    #[salsa::invoke(crate::expr::body_source_map)]\n+    fn body_source_map(&self, func: Function) -> Arc<crate::expr::BodySourceMap>;\n \n     #[salsa::invoke(crate::ty::method_resolution::CrateImplBlocks::impls_in_crate_query)]\n     fn impls_in_crate(&self, krate: Crate) -> Arc<CrateImplBlocks>;"}, {"sha": "b1398411bce13320e9798d29595709faec948021", "filename": "crates/ra_hir/src/expr.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -49,7 +49,7 @@ pub struct Body {\n /// a structure that is agnostic to the actual positions of expressions in the\n /// file, so that we don't recompute types whenever some whitespace is typed.\n #[derive(Debug, Eq, PartialEq)]\n-pub struct BodySyntaxMapping {\n+pub struct BodySourceMap {\n     body: Arc<Body>,\n     expr_syntax_mapping: FxHashMap<SyntaxNodePtr, ExprId>,\n     expr_syntax_mapping_back: ArenaMap<ExprId, SyntaxNodePtr>,\n@@ -78,8 +78,8 @@ impl Body {\n         self.pats.iter()\n     }\n \n-    pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySyntaxMapping> {\n-        db.body_syntax_mapping(self.owner)\n+    pub fn syntax_mapping(&self, db: &impl HirDatabase) -> Arc<BodySourceMap> {\n+        db.body_source_map(self.owner)\n     }\n }\n \n@@ -119,7 +119,7 @@ impl Index<PatId> for Body {\n     }\n }\n \n-impl BodySyntaxMapping {\n+impl BodySourceMap {\n     pub fn expr_syntax(&self, expr: ExprId) -> Option<SyntaxNodePtr> {\n         self.expr_syntax_mapping_back.get(expr).cloned()\n     }\n@@ -468,7 +468,7 @@ impl Pat {\n // Queries\n \n pub(crate) fn body_hir(db: &impl HirDatabase, func: Function) -> Arc<Body> {\n-    Arc::clone(&body_syntax_mapping(db, func).body)\n+    Arc::clone(&body_source_map(db, func).body)\n }\n \n struct ExprCollector {\n@@ -910,15 +910,15 @@ impl ExprCollector {\n         self.body_expr = Some(body);\n     }\n \n-    fn into_body_syntax_mapping(self) -> BodySyntaxMapping {\n+    fn into_body_source_map(self) -> BodySourceMap {\n         let body = Body {\n             owner: self.owner,\n             exprs: self.exprs,\n             pats: self.pats,\n             params: self.params,\n             body_expr: self.body_expr.expect(\"A body should have been collected\"),\n         };\n-        BodySyntaxMapping {\n+        BodySourceMap {\n             body: Arc::new(body),\n             expr_syntax_mapping: self.expr_syntax_mapping,\n             expr_syntax_mapping_back: self.expr_syntax_mapping_back,\n@@ -928,18 +928,18 @@ impl ExprCollector {\n     }\n }\n \n-pub(crate) fn body_syntax_mapping(db: &impl HirDatabase, func: Function) -> Arc<BodySyntaxMapping> {\n+pub(crate) fn body_source_map(db: &impl HirDatabase, func: Function) -> Arc<BodySourceMap> {\n     let mut collector = ExprCollector::new(func);\n \n     // TODO: consts, etc.\n     collector.collect_fn_body(&func.source(db).1);\n \n-    Arc::new(collector.into_body_syntax_mapping())\n+    Arc::new(collector.into_body_source_map())\n }\n \n #[cfg(test)]\n-pub(crate) fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> BodySyntaxMapping {\n+pub(crate) fn collect_fn_body_syntax(function: Function, node: &ast::FnDef) -> BodySourceMap {\n     let mut collector = ExprCollector::new(function);\n     collector.collect_fn_body(node);\n-    collector.into_body_syntax_mapping()\n+    collector.into_body_source_map()\n }"}, {"sha": "bb919dcfaa684d61437ce5c2c1cd229663ed9a10", "filename": "crates/ra_hir/src/expr/scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fexpr%2Fscope.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -11,7 +11,7 @@ use ra_arena::{Arena, RawId, impl_arena_id};\n \n use crate::{\n     Name, AsName, Function,\n-    expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySyntaxMapping},\n+    expr::{PatId, ExprId, Pat, Expr, Body, Statement, BodySourceMap},\n     HirDatabase,\n };\n \n@@ -109,7 +109,7 @@ impl ExprScopes {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ScopesWithSyntaxMapping {\n-    pub syntax_mapping: Arc<BodySyntaxMapping>,\n+    pub syntax_mapping: Arc<BodySourceMap>,\n     pub scopes: Arc<ExprScopes>,\n }\n "}, {"sha": "2fdfb54f44c9f3ac45abf3141017818a16291be3", "filename": "crates/ra_hir/src/ty/tests.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftests.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -1045,11 +1045,11 @@ fn test() {\n \n fn type_at_pos(db: &MockDatabase, pos: FilePosition) -> String {\n     let func = source_binder::function_from_position(db, pos).unwrap();\n-    let body_syntax_mapping = func.body_syntax_mapping(db);\n+    let body_source_map = func.body_source_map(db);\n     let inference_result = func.infer(db);\n     let (_, syntax) = func.source(db);\n     let node = algo::find_node_at_offset::<ast::Expr>(syntax.syntax(), pos.offset).unwrap();\n-    let expr = body_syntax_mapping.node_expr(node).unwrap();\n+    let expr = body_source_map.node_expr(node).unwrap();\n     let ty = &inference_result[expr];\n     ty.to_string()\n }\n@@ -1061,17 +1061,17 @@ fn infer(content: &str) -> String {\n     for fn_def in source_file.syntax().descendants().filter_map(ast::FnDef::cast) {\n         let func = source_binder::function_from_source(&db, file_id, fn_def).unwrap();\n         let inference_result = func.infer(&db);\n-        let body_syntax_mapping = func.body_syntax_mapping(&db);\n+        let body_source_map = func.body_source_map(&db);\n         let mut types = Vec::new();\n         for (pat, ty) in inference_result.type_of_pat.iter() {\n-            let syntax_ptr = match body_syntax_mapping.pat_syntax(pat) {\n+            let syntax_ptr = match body_source_map.pat_syntax(pat) {\n                 Some(sp) => sp,\n                 None => continue,\n             };\n             types.push((syntax_ptr, ty));\n         }\n         for (expr, ty) in inference_result.type_of_expr.iter() {\n-            let syntax_ptr = match body_syntax_mapping.expr_syntax(expr) {\n+            let syntax_ptr = match body_source_map.expr_syntax(expr) {\n                 Some(sp) => sp,\n                 None => continue,\n             };"}, {"sha": "3fe54d47b70b073e6870a0dbe87d215f362f6dd9", "filename": "crates/ra_ide_api/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fchange.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -225,6 +225,6 @@ impl RootDatabase {\n \n         self.query(hir::db::LowerModuleQuery).sweep(sweep);\n         self.query(hir::db::LowerModuleSourceMapQuery).sweep(sweep);\n-        self.query(hir::db::BodySyntaxMappingQuery).sweep(sweep);\n+        self.query(hir::db::BodySourceMapQuery).sweep(sweep);\n     }\n }"}, {"sha": "cf6a6a388504e88ef3228679d7f0667d373e20a1", "filename": "crates/ra_ide_api/src/completion/complete_dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_dot.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -9,7 +9,7 @@ pub(super) fn complete_dot(acc: &mut Completions, ctx: &CompletionContext) {\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n+    let syntax_mapping = function.body_source_map(ctx.db);\n     let expr = match syntax_mapping.node_expr(receiver) {\n         Some(expr) => expr,\n         None => return,"}, {"sha": "573953bdaf082e5b4e6111dbaf25b507ba8cf555", "filename": "crates/ra_ide_api/src/completion/complete_struct_literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fcompletion%2Fcomplete_struct_literal.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -9,7 +9,7 @@ pub(super) fn complete_struct_literal(acc: &mut Completions, ctx: &CompletionCon\n         _ => return,\n     };\n     let infer_result = function.infer(ctx.db);\n-    let syntax_mapping = function.body_syntax_mapping(ctx.db);\n+    let syntax_mapping = function.body_source_map(ctx.db);\n     let expr = match syntax_mapping.node_expr(struct_lit.into()) {\n         Some(expr) => expr,\n         None => return,"}, {"sha": "9957a5393116b8208410c661052c6db7c79b0a48", "filename": "crates/ra_ide_api/src/goto_definition.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fgoto_definition.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -54,7 +54,7 @@ pub(crate) fn reference_definition(\n         if let Some(method_call) = name_ref.syntax().parent().and_then(ast::MethodCallExpr::cast) {\n             tested_by!(goto_definition_works_for_methods);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let syntax_mapping = function.body_source_map(db);\n             let expr = ast::Expr::cast(method_call.syntax()).unwrap();\n             if let Some(func) =\n                 syntax_mapping.node_expr(expr).and_then(|it| infer_result.method_resolution(it))\n@@ -66,7 +66,7 @@ pub(crate) fn reference_definition(\n         if let Some(field_expr) = name_ref.syntax().parent().and_then(ast::FieldExpr::cast) {\n             tested_by!(goto_definition_works_for_fields);\n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let syntax_mapping = function.body_source_map(db);\n             let expr = ast::Expr::cast(field_expr.syntax()).unwrap();\n             if let Some(field) =\n                 syntax_mapping.node_expr(expr).and_then(|it| infer_result.field_resolution(it))\n@@ -80,7 +80,7 @@ pub(crate) fn reference_definition(\n             tested_by!(goto_definition_works_for_named_fields);\n \n             let infer_result = function.infer(db);\n-            let syntax_mapping = function.body_syntax_mapping(db);\n+            let syntax_mapping = function.body_source_map(db);\n \n             let struct_lit = field_expr.syntax().ancestors().find_map(ast::StructLit::cast);\n "}, {"sha": "cceec91b99fa9c55da823e2e5d90ca391ef7d3d7", "filename": "crates/ra_ide_api/src/hover.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eaf1df26e9903772d40df30dd70c75c38d8cb887/crates%2Fra_ide_api%2Fsrc%2Fhover.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_api%2Fsrc%2Fhover.rs?ref=eaf1df26e9903772d40df30dd70c75c38d8cb887", "patch": "@@ -132,7 +132,7 @@ pub(crate) fn type_of(db: &RootDatabase, frange: FileRange) -> Option<String> {\n     let parent_fn = node.ancestors().find_map(ast::FnDef::cast)?;\n     let function = hir::source_binder::function_from_source(db, frange.file_id, parent_fn)?;\n     let infer = function.infer(db);\n-    let syntax_mapping = function.body_syntax_mapping(db);\n+    let syntax_mapping = function.body_source_map(db);\n     if let Some(expr) = ast::Expr::cast(node).and_then(|e| syntax_mapping.node_expr(e)) {\n         Some(infer[expr].to_string())\n     } else if let Some(pat) = ast::Pat::cast(node).and_then(|p| syntax_mapping.node_pat(p)) {"}]}