{"sha": "c751961d290e4da3caae3d5f1d01435accea6c6c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM3NTE5NjFkMjkwZTRkYTNjYWFlM2Q1ZjFkMDE0MzVhY2NlYTZjNmM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-09T21:46:37Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-09T22:20:53Z"}, "message": "Extend support of `_` in type parameters\n\n - Account for `impl Trait<_>`.\n - Provide a reasonable `Span` for empty `Generics` in `impl`s.\n - Account for `fn foo<_>(_: _) {}` to suggest `fn foo<T>(_: T) {}`.\n - Fix #67995.", "tree": {"sha": "70b707e8c48c174568b25ceb59e6496e512552ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b707e8c48c174568b25ceb59e6496e512552ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c751961d290e4da3caae3d5f1d01435accea6c6c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c751961d290e4da3caae3d5f1d01435accea6c6c", "html_url": "https://github.com/rust-lang/rust/commit/c751961d290e4da3caae3d5f1d01435accea6c6c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c751961d290e4da3caae3d5f1d01435accea6c6c/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed6468da160bd67a2ce0573427f09a98daff8c07", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed6468da160bd67a2ce0573427f09a98daff8c07", "html_url": "https://github.com/rust-lang/rust/commit/ed6468da160bd67a2ce0573427f09a98daff8c07"}], "stats": {"total": 103, "additions": 91, "deletions": 12}, "files": [{"sha": "075583711f5d3e8f9b129364cd1a0f9143327557", "filename": "src/librustc_parse/parser/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fgenerics.rs?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -156,7 +156,7 @@ impl<'a> Parser<'a> {\n             self.expect_gt()?;\n             (params, span_lo.to(self.prev_span))\n         } else {\n-            (vec![], self.prev_span.between(self.token.span))\n+            (vec![], self.prev_span.shrink_to_hi())\n         };\n         Ok(ast::Generics {\n             params,"}, {"sha": "12dcf0391da1e312f458786180436d301a892394", "filename": "src/librustc_parse/parser/item.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_parse%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fitem.rs?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -555,7 +555,11 @@ impl<'a> Parser<'a> {\n         let mut generics = if self.choose_generics_over_qpath() {\n             self.parse_generics()?\n         } else {\n-            Generics::default()\n+            let mut generics = Generics::default();\n+            // impl A for B {}\n+            //    /\\ this is where `generics.span` should point when there are no type params.\n+            generics.span = self.prev_span.shrink_to_hi();\n+            generics\n         };\n \n         // Disambiguate `impl !Trait for Type { ... }` and `impl ! { ... }` for the never type."}, {"sha": "2b27138a4d8547e5dd7f4cd6c05ec98781cdc422", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -2803,7 +2803,7 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n             // allowed. `allow_ty_infer` gates this behavior.\n             crate::collect::placeholder_type_error(\n                 tcx,\n-                ident_span.unwrap_or(DUMMY_SP),\n+                ident_span.map(|sp| sp.shrink_to_hi()).unwrap_or(DUMMY_SP),\n                 generic_params,\n                 visitor.0,\n                 ident_span.is_some(),"}, {"sha": "43a2bcd564f4c5e3429e54a8cce9cfafd1acea16", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 28, "deletions": 8, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -124,7 +124,7 @@ struct CollectItemTypesVisitor<'tcx> {\n /// all already existing generic type parameters to avoid suggesting a name that is already in use.\n crate fn placeholder_type_error(\n     tcx: TyCtxt<'tcx>,\n-    ident_span: Span,\n+    span: Span,\n     generics: &[hir::GenericParam<'_>],\n     placeholder_types: Vec<Span>,\n     suggest: bool,\n@@ -150,7 +150,14 @@ crate fn placeholder_type_error(\n     let mut sugg: Vec<_> =\n         placeholder_types.iter().map(|sp| (*sp, type_name.to_string())).collect();\n     if generics.is_empty() {\n-        sugg.push((ident_span.shrink_to_hi(), format!(\"<{}>\", type_name)));\n+        sugg.push((span, format!(\"<{}>\", type_name)));\n+    } else if let Some(arg) = generics.iter().find(|arg| match arg.name {\n+        hir::ParamName::Plain(Ident { name: kw::Underscore, .. }) => true,\n+        _ => false,\n+    }) {\n+        // Account for `_` already present in cases like `struct S<_>(_);` and suggest\n+        // `struct S<T>(T);` instead of `struct S<_, T>(T);`.\n+        sugg.push((arg.span, format!(\"{}\", type_name)));\n     } else {\n         sugg.push((\n             generics.iter().last().unwrap().span.shrink_to_hi(),\n@@ -172,16 +179,20 @@ fn reject_placeholder_type_signatures_in_item(tcx: TyCtxt<'tcx>, item: &'tcx hir\n     let (generics, suggest) = match &item.kind {\n         hir::ItemKind::Union(_, generics)\n         | hir::ItemKind::Enum(_, generics)\n-        | hir::ItemKind::Struct(_, generics) => (&generics.params[..], true),\n-        hir::ItemKind::TyAlias(_, generics) => (&generics.params[..], false),\n+        | hir::ItemKind::TraitAlias(generics, _)\n+        | hir::ItemKind::Trait(_, _, generics, ..)\n+        | hir::ItemKind::Impl(_, _, _, generics, ..)\n+        | hir::ItemKind::Struct(_, generics) => (generics, true),\n+        hir::ItemKind::OpaqueTy(hir::OpaqueTy { generics, .. })\n+        | hir::ItemKind::TyAlias(_, generics) => (generics, false),\n         // `static`, `fn` and `const` are handled elsewhere to suggest appropriate type.\n         _ => return,\n     };\n \n     let mut visitor = PlaceholderHirTyCollector::default();\n     visitor.visit_item(item);\n \n-    placeholder_type_error(tcx, item.ident.span, generics, visitor.0, suggest);\n+    placeholder_type_error(tcx, generics.span, &generics.params[..], visitor.0, suggest);\n }\n \n impl Visitor<'tcx> for CollectItemTypesVisitor<'tcx> {\n@@ -1789,10 +1800,19 @@ fn find_opaque_ty_constraints(tcx: TyCtxt<'_>, def_id: DefId) -> Ty<'_> {\n /// Whether `ty` is a type with `_` placeholders that can be infered. Used in diagnostics only to\n /// use inference to provide suggestions for the appropriate type if possible.\n fn is_suggestable_infer_ty(ty: &hir::Ty<'_>) -> bool {\n+    use hir::TyKind::*;\n     match &ty.kind {\n-        hir::TyKind::Infer => true,\n-        hir::TyKind::Slice(ty) | hir::TyKind::Array(ty, _) => is_suggestable_infer_ty(ty),\n-        hir::TyKind::Tup(tys) => tys.iter().any(|ty| is_suggestable_infer_ty(ty)),\n+        Infer => true,\n+        Slice(ty) | Array(ty, _) => is_suggestable_infer_ty(ty),\n+        Tup(tys) => tys.iter().any(is_suggestable_infer_ty),\n+        Ptr(mut_ty) | Rptr(_, mut_ty) => is_suggestable_infer_ty(mut_ty.ty),\n+        Def(_, generic_args) => generic_args\n+            .iter()\n+            .filter_map(|arg| match arg {\n+                hir::GenericArg::Type(ty) => Some(ty),\n+                _ => None,\n+            })\n+            .any(is_suggestable_infer_ty),\n         _ => false,\n     }\n }"}, {"sha": "a53042d6e95383cd499a63f33072065df5a7a908", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.rs?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -131,3 +131,16 @@ trait T {\n     fn assoc_fn_test3() -> _;\n     //~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n }\n+\n+struct BadStruct<_>(_);\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+//~| ERROR the type placeholder `_` is not allowed within types on item signatures\n+trait BadTrait<_> {}\n+//~^ ERROR expected identifier, found reserved identifier `_`\n+impl BadTrait<_> for BadStruct<_> {}\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+\n+fn impl_trait() -> impl BadTrait<_> {\n+//~^ ERROR the type placeholder `_` is not allowed within types on item signatures\n+    unimplemented!()\n+}"}, {"sha": "e788bf37790cf95fe7349d30695b2a362a26c558", "filename": "src/test/ui/typeck/typeck_type_placeholder_item.stderr", "status": "modified", "additions": 43, "deletions": 1, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c751961d290e4da3caae3d5f1d01435accea6c6c/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Ftypeck_type_placeholder_item.stderr?ref=c751961d290e4da3caae3d5f1d01435accea6c6c", "patch": "@@ -1,3 +1,15 @@\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:135:18\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                  ^ expected identifier, found reserved identifier\n+\n+error: expected identifier, found reserved identifier `_`\n+  --> $DIR/typeck_type_placeholder_item.rs:138:16\n+   |\n+LL | trait BadTrait<_> {}\n+   |                ^ expected identifier, found reserved identifier\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:4:14\n    |\n@@ -255,6 +267,36 @@ LL |     fn fn_test13(x: _) -> (i32, _) { (x, x) }\n    |                           |     not allowed in type signatures\n    |                           help: replace with the correct return type: `(i32, i32)`\n \n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:135:21\n+   |\n+LL | struct BadStruct<_>(_);\n+   |                     ^ not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | struct BadStruct<T>(T);\n+   |                  ^  ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:140:15\n+   |\n+LL | impl BadTrait<_> for BadStruct<_> {}\n+   |               ^                ^ not allowed in type signatures\n+   |               |\n+   |               not allowed in type signatures\n+   |\n+help: use type parameters instead\n+   |\n+LL | impl<T> BadTrait<T> for BadStruct<T> {}\n+   |     ^^^          ^                ^\n+\n+error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n+  --> $DIR/typeck_type_placeholder_item.rs:143:34\n+   |\n+LL | fn impl_trait() -> impl BadTrait<_> {\n+   |                                  ^ not allowed in type signatures\n+\n error[E0121]: the type placeholder `_` is not allowed within types on item signatures\n   --> $DIR/typeck_type_placeholder_item.rs:121:31\n    |\n@@ -405,7 +447,7 @@ help: use type parameters instead\n LL |         fn clone_from<T>(&mut self, other: T) { *self = FnTest9; }\n    |                      ^^^                   ^\n \n-error: aborting due to 40 previous errors\n+error: aborting due to 45 previous errors\n \n Some errors have detailed explanations: E0121, E0282.\n For more information about an error, try `rustc --explain E0121`."}]}