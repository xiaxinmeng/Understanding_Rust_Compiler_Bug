{"sha": "2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "node_id": "C_kwDOAAsO6NoAKDJhMTZhMTI3YTBlZDFiZjk2MWNhN2JjZTQwNDk5ZjZjNDA3ZDUzZTI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-17T16:20:22Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-08-21T02:35:11Z"}, "message": "More docs", "tree": {"sha": "f0ab2f5c621ee44f1111ef584b8d59ba4d178000", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f0ab2f5c621ee44f1111ef584b8d59ba4d178000"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "html_url": "https://github.com/rust-lang/rust/commit/2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8917894fda4c1c47369523448c75137c7b01fb6e", "url": "https://api.github.com/repos/rust-lang/rust/commits/8917894fda4c1c47369523448c75137c7b01fb6e", "html_url": "https://github.com/rust-lang/rust/commit/8917894fda4c1c47369523448c75137c7b01fb6e"}], "stats": {"total": 23, "additions": 18, "deletions": 5}, "files": [{"sha": "9b82320e556b33fb1714e2ccc04e7672aa0f4fab", "filename": "compiler/rustc_middle/src/traits/mod.rs", "status": "modified", "additions": 11, "deletions": 5, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Ftraits%2Fmod.rs?ref=2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "patch": "@@ -234,15 +234,21 @@ pub enum ObligationCauseCode<'tcx> {\n     /// This is the trait reference from the given projection.\n     ProjectionWf(ty::ProjectionTy<'tcx>),\n \n-    /// In an impl of trait `X` for type `Y`, type `Y` must\n-    /// also implement all supertraits of `X`.\n+    /// Must satisfy all of the where-clause predicates of the\n+    /// given item.\n     ItemObligation(DefId),\n \n-    ExprItemObligation(DefId, rustc_hir::HirId, usize),\n-\n-    /// Like `ItemObligation`, but with extra detail on the source of the obligation.\n+    /// Like `ItemObligation`, but carries the span of the\n+    /// predicate when it can be identified.\n     BindingObligation(DefId, Span),\n \n+    /// Like `ItemObligation`, but carries the `HirId` of the\n+    /// expression that caused the obligation, and the `usize`\n+    /// indicates exactly which predicate it is in the list of\n+    /// instantiated predicates.\n+    ExprItemObligation(DefId, rustc_hir::HirId, usize),\n+\n+    /// Combines `ExprItemObligation` and `BindingObligation`.\n     ExprBindingObligation(DefId, Span, rustc_hir::HirId, usize),\n \n     /// A type like `&'a T` is WF only if `T: 'a`."}, {"sha": "823e7f22af24da43f7655910de9567c5df542f5a", "filename": "compiler/rustc_middle/src/ty/generics.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fgenerics.rs?ref=2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "patch": "@@ -122,6 +122,10 @@ pub struct Generics {\n }\n \n impl<'tcx> Generics {\n+    /// Looks through the generics and all parents to find the index of the\n+    /// given param def-id. This is in comparison to the `param_def_id_to_index`\n+    /// struct member, which only stores information about this item's own\n+    /// generics.\n     pub fn param_def_id_to_index(&self, tcx: TyCtxt<'tcx>, def_id: DefId) -> Option<u32> {\n         if let Some(idx) = self.param_def_id_to_index.get(&def_id) {\n             Some(*idx)"}, {"sha": "860af7fe93a077959f1377c70d642af5e8709a9e", "filename": "compiler/rustc_span/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_span%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a16a127a0ed1bf961ca7bce40499f6c407d53e2/compiler%2Frustc_span%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_span%2Fsrc%2Flib.rs?ref=2a16a127a0ed1bf961ca7bce40499f6c407d53e2", "patch": "@@ -664,6 +664,9 @@ impl Span {\n         Some(self)\n     }\n \n+    /// Like `find_ancestor_inside`, but specifically for when spans might not\n+    /// overlaps. Take care when using this, and prefer `find_ancestor_inside`\n+    /// when you know that the spans are nested (modulo macro expansion).\n     pub fn find_ancestor_in_same_ctxt(mut self, other: Span) -> Option<Span> {\n         while !Span::eq_ctxt(self, other) {\n             self = self.parent_callsite()?;"}]}