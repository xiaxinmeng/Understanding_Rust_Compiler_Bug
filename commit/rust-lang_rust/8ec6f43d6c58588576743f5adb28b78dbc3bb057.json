{"sha": "8ec6f43d6c58588576743f5adb28b78dbc3bb057", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlYzZmNDNkNmM1ODU4ODU3Njc0M2Y1YWRiMjhiNzhkYmMzYmIwNTc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T20:06:27Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-14T20:06:27Z"}, "message": "auto merge of #4931 : thestinger/rust/glue, r=pcwalton\n\nUsing `noinline` causes a 3-10% hit in performance for most compiled Rust code. For the TreeMap it's ~15% and that's where I first noticed it.\r\n\r\nRemoving the noinline attribute doesn't slow down unoptimized builds, but it does significantly increase the time spent in LLVM passes for optimized builds. The improved speed of the compiler actually improves compile-times when optimization is off.\r\n\r\nHowever, the reason for the increase is because more optimization is being done - I'm sure it would speed up compiles to mark *everything* with noinline, but it wouldn't be a good idea.\r\n\r\nLLVM is clever enough with the inlining heuristics that this doesn't cause a notable increase in code size - some code becomes a bit bigger, some becomes a bit smaller. There are some cases where it's able to strip out a ton of code thanks to inlining.\r\n\r\nI tried out `optsize` for glue code instead but it caused the same hit for LLVM passes in the compile time and the compiled code was a bit slower than just trusting LLVM to make the decisions.\r\n\r\n* [TIME_PASSES=1 benchmarks](http://ompldr.org/vaGdxaA) (showing the performance increase in `rustc` and also the extra time spent in LLVM passes for more optimization)", "tree": {"sha": "429a5d45cbc462740106cd1063c88ba62956cfd1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/429a5d45cbc462740106cd1063c88ba62956cfd1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8ec6f43d6c58588576743f5adb28b78dbc3bb057", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec6f43d6c58588576743f5adb28b78dbc3bb057", "html_url": "https://github.com/rust-lang/rust/commit/8ec6f43d6c58588576743f5adb28b78dbc3bb057", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8ec6f43d6c58588576743f5adb28b78dbc3bb057/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36edd256397d250ce35204ba1a0954609c25a20a", "url": "https://api.github.com/repos/rust-lang/rust/commits/36edd256397d250ce35204ba1a0954609c25a20a", "html_url": "https://github.com/rust-lang/rust/commit/36edd256397d250ce35204ba1a0954609c25a20a"}, {"sha": "762ce323c03275a3a9c233ef1788dc6f5e631ce4", "url": "https://api.github.com/repos/rust-lang/rust/commits/762ce323c03275a3a9c233ef1788dc6f5e631ce4", "html_url": "https://github.com/rust-lang/rust/commit/762ce323c03275a3a9c233ef1788dc6f5e631ce4"}], "stats": {"total": 11, "additions": 10, "deletions": 1}, "files": [{"sha": "8d6d299c92f896e97d83fea8b33e58754cce5435", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/8ec6f43d6c58588576743f5adb28b78dbc3bb057/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8ec6f43d6c58588576743f5adb28b78dbc3bb057/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=8ec6f43d6c58588576743f5adb28b78dbc3bb057", "patch": "@@ -382,6 +382,15 @@ pub fn get_tydesc(ccx: @crate_ctxt, t: ty::t) -> @mut tydesc_info {\n     }\n }\n \n+pub fn set_optimize_for_size(f: ValueRef) {\n+    unsafe {\n+        llvm::LLVMAddFunctionAttr(f,\n+                                  lib::llvm::OptimizeForSizeAttribute\n+                                  as c_ulonglong,\n+                                  0u as c_ulonglong);\n+    }\n+}\n+\n pub fn set_no_inline(f: ValueRef) {\n     unsafe {\n         llvm::LLVMAddFunctionAttr(f,\n@@ -440,7 +449,7 @@ pub fn set_custom_stack_growth_fn(f: ValueRef) {\n \n pub fn set_glue_inlining(f: ValueRef, t: ty::t) {\n     if ty::type_is_structural(t) {\n-        set_no_inline(f);\n+        set_optimize_for_size(f);\n     } else { set_always_inline(f); }\n }\n "}]}