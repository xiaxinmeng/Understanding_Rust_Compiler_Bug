{"sha": "19424dfab6cf0432477396e73dea567678a715b8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE5NDI0ZGZhYjZjZjA0MzI0NzczOTZlNzNkZWE1Njc2NzhhNzE1Yjg=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T00:23:46Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-08-11T00:24:22Z"}, "message": "rustc: Add unique pointers to the set of types we support", "tree": {"sha": "2ac26c05391cea28308764777756ae57b95a05e0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ac26c05391cea28308764777756ae57b95a05e0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/19424dfab6cf0432477396e73dea567678a715b8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/19424dfab6cf0432477396e73dea567678a715b8", "html_url": "https://github.com/rust-lang/rust/commit/19424dfab6cf0432477396e73dea567678a715b8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/19424dfab6cf0432477396e73dea567678a715b8/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8a4d4ec056b68ac25a04ea020cdc674527a76df", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8a4d4ec056b68ac25a04ea020cdc674527a76df", "html_url": "https://github.com/rust-lang/rust/commit/a8a4d4ec056b68ac25a04ea020cdc674527a76df"}], "stats": {"total": 73, "additions": 49, "deletions": 24}, "files": [{"sha": "e23c2aa2193dad323a3841c7b220d323278138cb", "filename": "src/comp/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftydecode.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -215,6 +215,7 @@ fn parse_ty(st: @pstate, sd: str_def) -> ty::t {\n         ret ty::mk_param(st.tcx, parse_int(st) as uint, k);\n       }\n       '@' { ret ty::mk_box(st.tcx, parse_mt(st, sd)); }\n+      '~' { ret ty::mk_uniq(st.tcx, parse_ty(st, sd)); }\n       '*' { ret ty::mk_ptr(st.tcx, parse_mt(st, sd)); }\n       'V' { ret ty::mk_vec(st.tcx, parse_mt(st, sd)); }\n       'I' { ret ty::mk_ivec(st.tcx, parse_mt(st, sd)); }"}, {"sha": "5aeb2cdf31df25e28fb48502a1ca85f973a1806a", "filename": "src/comp/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmetadata%2Ftyencode.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -121,6 +121,7 @@ fn enc_sty(w: &ioivec::writer, cx: &@ctxt, st: &ty::sty) {\n         w.write_char(']');\n       }\n       ty::ty_box(mt) { w.write_char('@'); enc_mt(w, cx, mt); }\n+      ty::ty_uniq(t) { w.write_char('~'); enc_ty(w, cx, t); }\n       ty::ty_ptr(mt) { w.write_char('*'); enc_mt(w, cx, mt); }\n       ty::ty_vec(mt) { w.write_char('V'); enc_mt(w, cx, mt); }\n       ty::ty_ivec(mt) { w.write_char('I'); enc_mt(w, cx, mt); }"}, {"sha": "613f8510fe0b783e3a2e81fe11ea5ec218c36396", "filename": "src/comp/middle/alias.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Falias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Falias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Falias.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -537,6 +537,9 @@ fn expr_root(cx: &ctx, ex: @ast::expr, autoderef: bool) ->\n                 ds += ~[@{mut: mt.mut != ast::imm, kind: unbox, outer_t: t}];\n                 t = mt.ty;\n               }\n+              ty::ty_uniq(mt) {\n+                ds += ~[@{mut: false, kind: unbox, outer_t: t}];\n+              }\n               ty::ty_res(_, inner, tps) {\n                 ds += ~[@{mut: false, kind: unbox, outer_t: t}];\n                 t = ty::substitute_type_params(cx.tcx, tps, inner);\n@@ -603,6 +606,7 @@ fn expr_root(cx: &ctx, ex: @ast::expr, autoderef: bool) ->\n                 let mut = false;\n                 alt ty::struct(cx.tcx, base_t) {\n                   ty::ty_box(mt) { mut = mt.mut != ast::imm; }\n+                  ty::ty_uniq(_) { }\n                   ty::ty_res(_, _, _) { }\n                   ty::ty_tag(_, _) { }\n                   ty::ty_ptr(mt) { mut = mt.mut != ast::imm; }\n@@ -665,6 +669,7 @@ fn ty_can_unsafely_include(cx: &ctx, needle: ty::t, haystack: ty::t,\n           ty::ty_box(mt) | ty::ty_vec(mt) | ty::ty_ptr(mt) {\n             ret helper(tcx, needle, mt.ty, get_mut(mut, mt));\n           }\n+          ty::ty_uniq(t) { ret helper(tcx, needle, t, false); }\n           ty::ty_rec(fields) {\n             for f: ty::field  in fields {\n                 if helper(tcx, needle, f.mt.ty, get_mut(mut, f.mt)) {"}, {"sha": "02b0253cf3ff3c21c4546e4d8d0a7c1ed1d2967a", "filename": "src/comp/middle/shape.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Fshape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Fshape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fshape.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -67,6 +67,7 @@ const shape_fn : u8 = 18u8;\n const shape_obj : u8 = 19u8;\n const shape_res : u8 = 20u8;\n const shape_var : u8 = 21u8;\n+const shape_uniq : u8 = 22u8;\n \n // FIXME: This is a bad API in trans_common.\n fn C_u8(n : u8) -> ValueRef { ret trans_common::C_u8(n as uint); }\n@@ -342,6 +343,10 @@ fn shape_of(ccx : &@crate_ctxt, t : ty::t) -> [u8] {\n         s += ~[shape_box];\n         add_substr(s, shape_of(ccx, mt.ty));\n       }\n+      ty::ty_uniq(subt) {\n+        s += ~[shape_uniq];\n+        add_substr(s, shape_of(ccx, subt));\n+      }\n       ty::ty_vec(mt) {\n         s += ~[shape_evec];\n         add_bool(s, ty::type_is_pod(ccx.tcx, mt.ty));"}, {"sha": "08921f3a7a9284daf7869f1e79ea83f8bfbe9e78", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -217,6 +217,7 @@ fn type_of_inner(cx: &@crate_ctxt, sp: &span, t: &ty::t) -> TypeRef {\n       ty::ty_istr. { llty = T_ivec(T_i8()); }\n       ty::ty_tag(did, _) { llty = type_of_tag(cx, sp, did, t); }\n       ty::ty_box(mt) { llty = T_ptr(T_box(type_of_inner(cx, sp, mt.ty))); }\n+      ty::ty_uniq(t) { llty = T_ptr(type_of_inner(cx, sp, t)); }\n       ty::ty_vec(mt) { llty = T_ptr(T_vec(type_of_inner(cx, sp, mt.ty))); }\n       ty::ty_ivec(mt) {\n         if ty::type_has_dynamic_size(cx.tcx, mt.ty) {\n@@ -476,6 +477,7 @@ fn simplify_type(ccx: &@crate_ctxt, typ: &ty::t) -> ty::t {\n     fn simplifier(ccx: @crate_ctxt, typ: ty::t) -> ty::t {\n         alt ty::struct(ccx.tcx, typ) {\n           ty::ty_box(_) { ret ty::mk_imm_box(ccx.tcx, ty::mk_nil(ccx.tcx)); }\n+          ty::ty_uniq(_) { ret ty::mk_uniq(ccx.tcx, ty::mk_nil(ccx.tcx)); }\n           ty::ty_vec(_) { ret ty::mk_imm_vec(ccx.tcx, ty::mk_nil(ccx.tcx)); }\n           ty::ty_fn(_, _, _, _, _) {\n             ret ty::mk_imm_tup(ccx.tcx,\n@@ -1303,6 +1305,9 @@ fn make_free_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n             let rs = drop_ty(cx, body_val, body_ty);\n             trans_non_gc_free(rs.bcx, v)\n           }\n+          ty::ty_uniq(_) {\n+            fail \"free uniq unimplemented\";\n+          }\n           ty::ty_port(_) {\n             let v = cx.build.Load(v0);\n             cx.build.Call(bcx_ccx(cx).upcalls.del_port,\n@@ -1402,6 +1407,7 @@ fn make_drop_glue(cx: &@block_ctxt, v0: ValueRef, t: &ty::t) {\n             maybe_free_ivec_heap_part(rslt.bcx, v1, tm.ty)\n           }\n           ty::ty_box(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n+          ty::ty_uniq(_) { fail \"drop uniq unimplemented\"; }\n           ty::ty_port(_) { decr_refcnt_maybe_free(cx, v0, v0, t) }\n           ty::ty_chan(_) {\n             let ptr = cx.build.Load(v0);\n@@ -3257,6 +3263,7 @@ fn autoderef(cx: &@block_ctxt, v: ValueRef, t: &ty::t) -> result_t {\n                 v1 = cx.build.PointerCast(body, T_ptr(llty));\n             } else { v1 = body; }\n           }\n+          ty::ty_uniq(t) { fail \"autoderef uniq unimplemented\"; }\n           ty::ty_res(did, inner, tps) {\n             t1 = ty::substitute_type_params(ccx.tcx, tps, inner);\n             v1 = cx.build.GEP(v1, ~[C_int(0), C_int(1)]);\n@@ -4077,6 +4084,7 @@ fn trans_lval_gen(cx: &@block_ctxt, e: &@ast::expr) -> lval_result {\n                                           ~[C_int(0),\n                                             C_int(abi::box_rc_field_body)])\n               }\n+              ty::ty_uniq(_) { fail \"uniq lval translation unimplemented\" }\n               ty::ty_res(_, _, _) {\n                 sub.bcx.build.InBoundsGEP(sub.val, ~[C_int(0), C_int(1)])\n               }"}, {"sha": "7ab295fd2e1abca3daec83414e61fb14ccb863fb", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 27, "deletions": 23, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -89,6 +89,7 @@ export mk_tag;\n export mk_task;\n export mk_type;\n export mk_uint;\n+export mk_uniq;\n export mk_var;\n export mk_vec;\n export mk_iter_body_fn;\n@@ -147,6 +148,7 @@ export ty_tag;\n export ty_task;\n export ty_type;\n export ty_uint;\n+export ty_uniq;\n export ty_var;\n export ty_var_id;\n export ty_vec;\n@@ -265,6 +267,7 @@ tag sty {\n     ty_istr;\n     ty_tag(def_id, [t]);\n     ty_box(mt);\n+    ty_uniq(t);\n     ty_vec(mt);\n     ty_ivec(mt);\n     ty_ptr(mt);\n@@ -471,6 +474,7 @@ fn mk_raw_ty(cx: &ctxt, st: &sty, in_cname: &option::t[str]) -> @raw_t {\n         for tt: t  in tys { derive_flags_t(cx, has_params, has_vars, tt); }\n       }\n       ty_box(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n+      ty_uniq(tt) { derive_flags_t(cx, has_params, has_vars, tt); }\n       ty_vec(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_ivec(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n       ty_ptr(m) { derive_flags_mt(cx, has_params, has_vars, m); }\n@@ -558,6 +562,8 @@ fn mk_tag(cx: &ctxt, did: &ast::def_id, tys: &[t]) -> t {\n \n fn mk_box(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_box(tm)); }\n \n+fn mk_uniq(cx: &ctxt, typ: &t) -> t { ret gen_ty(cx, ty_uniq(typ)); }\n+\n fn mk_ptr(cx: &ctxt, tm: &mt) -> t { ret gen_ty(cx, ty_ptr(tm)); }\n \n fn mk_imm_box(cx: &ctxt, ty: &t) -> t {\n@@ -728,36 +734,20 @@ fn fold_ty(cx: &ctxt, fld: fold_mode, ty_0: t) -> t {\n       ty_native(_) {/* no-op */ }\n       ty_task. {/* no-op */ }\n       ty_box(tm) {\n-        ty =\n-            copy_cname(cx,\n-                       mk_box(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut}),\n-                       ty);\n+        ty = mk_box(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n+      ty_uniq(subty) { ty = mk_uniq(cx, fold_ty(cx, fld, subty)); }\n       ty_ptr(tm) {\n-        ty =\n-            copy_cname(cx,\n-                       mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut}),\n-                       ty);\n+        ty = mk_ptr(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n       ty_vec(tm) {\n-        ty =\n-            copy_cname(cx,\n-                       mk_vec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut}),\n-                       ty);\n+        ty = mk_vec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n       ty_ivec(tm) {\n-        ty =\n-            copy_cname(cx,\n-                       mk_ivec(cx,\n-                               {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut}),\n-                       ty);\n-      }\n-      ty_port(subty) {\n-        ty = copy_cname(cx, mk_port(cx, fold_ty(cx, fld, subty)), ty);\n-      }\n-      ty_chan(subty) {\n-        ty = copy_cname(cx, mk_chan(cx, fold_ty(cx, fld, subty)), ty);\n+        ty = mk_ivec(cx, {ty: fold_ty(cx, fld, tm.ty), mut: tm.mut});\n       }\n+      ty_port(subty) { ty = mk_port(cx, fold_ty(cx, fld, subty)); }\n+      ty_chan(subty) { ty = mk_chan(cx, fold_ty(cx, fld, subty)); }\n       ty_tag(tid, subtys) {\n         let new_subtys: [t] = ~[];\n         for subty: t  in subtys { new_subtys += ~[fold_ty(cx, fld, subty)]; }\n@@ -2494,6 +2484,20 @@ mod unify {\n               _ { ret ures_err(terr_mismatch); }\n             }\n           }\n+          ty::ty_uniq(expected_sub) {\n+            alt struct(cx.tcx, actual) {\n+              ty::ty_uniq(actual_sub) {\n+                let result = unify_step(cx, expected_sub, actual_sub);\n+                alt result {\n+                  ures_ok(result_sub) {\n+                    ret ures_ok(mk_uniq(cx.tcx, result_sub));\n+                  }\n+                  _ { ret result; }\n+                }\n+              }\n+              _ { ret ures_err(terr_mismatch); }\n+            }\n+          }\n           ty::ty_vec(expected_mt) {\n             alt struct(cx.tcx, actual) {\n               ty::ty_vec(actual_mt) {"}, {"sha": "2bdb8742478901ab0471e14ff612905dcaac7953", "filename": "src/comp/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/19424dfab6cf0432477396e73dea567678a715b8/src%2Fcomp%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fppaux.rs?ref=19424dfab6cf0432477396e73dea567678a715b8", "patch": "@@ -91,8 +91,9 @@ fn ty_to_str(cx: &ctxt, typ: &t) -> str {\n       ty_str. { s += \"str\"; }\n       ty_istr. { s += \"istr\"; }\n       ty_box(tm) { s += \"@\" + mt_to_str(cx, tm); }\n+      ty_uniq(t) { s += \"~\" + ty_to_str(cx, t); }\n       ty_vec(tm) { s += \"vec[\" + mt_to_str(cx, tm) + \"]\"; }\n-      ty_ivec(tm) { s += \"ivec[\" + mt_to_str(cx, tm) + \"]\"; }\n+      ty_ivec(tm) { s += \"[\" + mt_to_str(cx, tm) + \"]\"; }\n       ty_port(t) { s += \"port[\" + ty_to_str(cx, t) + \"]\"; }\n       ty_chan(t) { s += \"chan[\" + ty_to_str(cx, t) + \"]\"; }\n       ty_type. { s += \"type\"; }"}]}