{"sha": "73458aebe381b48618b871ed8479a28e7bbfc9eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjczNDU4YWViZTM4MWI0ODYxOGI4NzFlZDg0NzlhMjhlN2JiZmM5ZWI=", "commit": {"author": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-31T10:21:51Z"}, "committer": {"name": "bors[bot]", "email": "bors[bot]@users.noreply.github.com", "date": "2018-10-31T10:21:51Z"}, "message": "Merge #3368\n\n3368: added downsides to \"known problems\" for get_unwrap lint r=flip1995 a=humean\n\nAs a beginner I found this lint to be confusing because I was not sure how the `Option` type disappeared as conceptually I know that my `.get()` and Index could fail. Initially I thought maybe the compiler or clippy was smart enough to understand that it was impossible for my `.get()` to fail in this particular case, but it was explained to me that using the Index syntax is just shorthand for directly unwrapping the value:\r\n\r\nhttps://doc.rust-lang.org/src/std/collections/hash/map.rs.html#1547\r\n\r\nFor beginners or users trying to iterate quickly it seems common to litter your code with `unwrap` or `except` as placeholders for where some explicit error handling might need to take place. I think it should be warned that using Index is merely more concise, but doesn't at all reduce the risk of panics and might in fact cause you to miss handling them in a future refactor.\n\nCo-authored-by: Michael Rutter <michael.john.rutter@gmail.com>\nCo-authored-by: Michael Rutter <humean@users.noreply.github.com>", "tree": {"sha": "dd5a145baaead0e09af35e2a0a8ef6532106c824", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd5a145baaead0e09af35e2a0a8ef6532106c824"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/73458aebe381b48618b871ed8479a28e7bbfc9eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/73458aebe381b48618b871ed8479a28e7bbfc9eb", "html_url": "https://github.com/rust-lang/rust/commit/73458aebe381b48618b871ed8479a28e7bbfc9eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/73458aebe381b48618b871ed8479a28e7bbfc9eb/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "parents": [{"sha": "c8308c92b6a77385bf9b45da3ce02ee271c567c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8308c92b6a77385bf9b45da3ce02ee271c567c9", "html_url": "https://github.com/rust-lang/rust/commit/c8308c92b6a77385bf9b45da3ce02ee271c567c9"}, {"sha": "232a483331242a3c10097b0c182c80b1403b7a1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/232a483331242a3c10097b0c182c80b1403b7a1e", "html_url": "https://github.com/rust-lang/rust/commit/232a483331242a3c10097b0c182c80b1403b7a1e"}], "stats": {"total": 9, "additions": 8, "deletions": 1}, "files": [{"sha": "3f1c1e7395618fa5589a20d86278a362b1af8c3c", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/73458aebe381b48618b871ed8479a28e7bbfc9eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/73458aebe381b48618b871ed8479a28e7bbfc9eb/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=73458aebe381b48618b871ed8479a28e7bbfc9eb", "patch": "@@ -568,7 +568,14 @@ declare_clippy_lint! {\n /// **Why is this bad?** Using the Index trait (`[]`) is more clear and more\n /// concise.\n ///\n-/// **Known problems:** None.\n+/// **Known problems:** Not a replacement for error handling: Using either\n+/// `.unwrap()` or the Index trait (`[]`) carries the risk of causing a `panic`\n+/// if the value being accessed is `None`. If the use of `.get().unwrap()` is a\n+/// temporary placeholder for dealing with the `Option` type, then this does\n+/// not mitigate the need for error handling. If there is a chance that `.get()`\n+/// will be `None` in your program, then it is advisable that the `None` case\n+/// is handled in a future refactor instead of using `.unwrap()` or the Index \n+/// trait.\n ///\n /// **Example:**\n /// ```rust"}]}