{"sha": "91daf705b442c8200985eb7f2e99784898844263", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkxZGFmNzA1YjQ0MmM4MjAwOTg1ZWI3ZjJlOTk3ODQ4OTg4NDQyNjM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-01T20:52:54Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-05-01T20:58:33Z"}, "message": "Make `TypeFoldable::is_global()` false when fresh tys/consts are present\n\nThis ensures that `ParamEnv::and` preserves the original `caller_bounds`\nwhen we have a value containing fresh tys/consts. This ensures that when\nwe cache a `SelectionCandidate`, the cache key (a `ParamEnvAnd`)\ncontains all of the information that influenced the computation of our\nresult (e.g. we may end up choosing a `ParamCandidate`)", "tree": {"sha": "0c4cae9f18442b6f2a6262fe6d4e63a561ab4676", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0c4cae9f18442b6f2a6262fe6d4e63a561ab4676"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/91daf705b442c8200985eb7f2e99784898844263", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmCNwRAACgkQtAh+UQ6Y\nsWSP5g//QkcvzPjhO2pbchUIz6+Ov5jbqY5ZMfn+/sgC64OeuuUo+NLclhfz8n19\nsWwWdpvZ9Cpy8LBXZ2SyTm70jam3z65WjJOZEx/128fB0sosjZdsWPK18we8ASXG\nJy831FE2KaQHyPt5w9orKMGH6z10FHOAr90vpOXrjziM94ObOcFJ23c88GKVYJMK\nUfeciipdOJUO3oDru/DgYIvMMZ4ZUqqtFkFZLUDudEDVXnFVe6ZV1GrBNAcf84fw\n3g4Vk6kOiCDoCWpw7MsXib4SaVg6bkTxJHTIqXypkW8wrX0h1Y26puV47yrielcb\nFdGHsHvneOfqKfvtsxWH3hFDERbB/G6C6B0rRucLizJ7PutRPTfs3hiw8hN2Vplr\nISyZnPbG9Vd5yh9wisWWMCj1fD1TVJnBSMvQYaSoQZoMoGRDk5pd4v3pEqQEZdP3\nrABz4wTVp1LO+eKhGDJaZYK25H9rwcae7tbdtZNzCG+DsPU5AiRKxy9+LusTyXzZ\no4D6DBsQzvk30+J+082Y1IxpauIJT9d9B7BrPDVdeNhp2ARc67KtEcRuct0M0QwE\nBv7EF3y4pV1JxXOke4uqCggDiDMHFh3XJrh4MTpgDeiS+FaWiZy7MZZpjlLg44qw\ncajagL4UbRkPlGPGNxg94yl2Xi2khKZsRV3rxJtAeGUUDSbXXX4=\n=6G9t\n-----END PGP SIGNATURE-----", "payload": "tree 0c4cae9f18442b6f2a6262fe6d4e63a561ab4676\nparent 5f304a5d7908d9dd55dda3baadd3cf564d907369\nauthor Aaron Hill <aa1ronham@gmail.com> 1619902374 -0400\ncommitter Aaron Hill <aa1ronham@gmail.com> 1619902713 -0400\n\nMake `TypeFoldable::is_global()` false when fresh tys/consts are present\n\nThis ensures that `ParamEnv::and` preserves the original `caller_bounds`\nwhen we have a value containing fresh tys/consts. This ensures that when\nwe cache a `SelectionCandidate`, the cache key (a `ParamEnvAnd`)\ncontains all of the information that influenced the computation of our\nresult (e.g. we may end up choosing a `ParamCandidate`)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/91daf705b442c8200985eb7f2e99784898844263", "html_url": "https://github.com/rust-lang/rust/commit/91daf705b442c8200985eb7f2e99784898844263", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/91daf705b442c8200985eb7f2e99784898844263/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5f304a5d7908d9dd55dda3baadd3cf564d907369", "url": "https://api.github.com/repos/rust-lang/rust/commits/5f304a5d7908d9dd55dda3baadd3cf564d907369", "html_url": "https://github.com/rust-lang/rust/commit/5f304a5d7908d9dd55dda3baadd3cf564d907369"}], "stats": {"total": 21, "additions": 19, "deletions": 2}, "files": [{"sha": "9faa172a4973f583aae2cf7128387f86687a32a3", "filename": "compiler/rustc_middle/src/ty/flags.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/91daf705b442c8200985eb7f2e99784898844263/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91daf705b442c8200985eb7f2e99784898844263/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fflags.rs?ref=91daf705b442c8200985eb7f2e99784898844263", "patch": "@@ -141,7 +141,9 @@ impl FlagComputation {\n             &ty::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n-                    ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {}\n+                    ty::FreshTy(_) | ty::FreshIntTy(_) | ty::FreshFloatTy(_) => {\n+                        self.add_flags(TypeFlags::HAS_TY_FRESH)\n+                    }\n \n                     ty::TyVar(_) | ty::IntVar(_) | ty::FloatVar(_) => {\n                         self.add_flags(TypeFlags::HAS_TY_INFER)\n@@ -278,7 +280,7 @@ impl FlagComputation {\n             ty::ConstKind::Infer(infer) => {\n                 self.add_flags(TypeFlags::STILL_FURTHER_SPECIALIZABLE);\n                 match infer {\n-                    InferConst::Fresh(_) => {}\n+                    InferConst::Fresh(_) => self.add_flags(TypeFlags::HAS_CT_FRESH),\n                     InferConst::Var(_) => self.add_flags(TypeFlags::HAS_CT_INFER),\n                 }\n             }"}, {"sha": "0dbcd483c4579c96d638e6cf8f8bdf5aa0e2dae3", "filename": "compiler/rustc_type_ir/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/91daf705b442c8200985eb7f2e99784898844263/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/91daf705b442c8200985eb7f2e99784898844263/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_type_ir%2Fsrc%2Flib.rs?ref=91daf705b442c8200985eb7f2e99784898844263", "patch": "@@ -59,6 +59,15 @@ bitflags! {\n                                           | TypeFlags::HAS_CT_INFER.bits\n                                           | TypeFlags::HAS_TY_PLACEHOLDER.bits\n                                           | TypeFlags::HAS_CT_PLACEHOLDER.bits\n+                                          // We consider 'freshened' types and constants\n+                                          // to depend on a particular fn.\n+                                          // The freshening process throws away information,\n+                                          // which can make things unsuitable for use in a global\n+                                          // cache. Note that there is no 'fresh lifetime' flag -\n+                                          // freshening replaces all lifetimes with `ReErased`,\n+                                          // which is different from how types/const are freshened.\n+                                          | TypeFlags::HAS_TY_FRESH.bits\n+                                          | TypeFlags::HAS_CT_FRESH.bits\n                                           | TypeFlags::HAS_FREE_LOCAL_REGIONS.bits;\n \n         /// Does this have `Projection`?\n@@ -90,6 +99,12 @@ bitflags! {\n         /// Does this value have parameters/placeholders/inference variables which could be\n         /// replaced later, in a way that would change the results of `impl` specialization?\n         const STILL_FURTHER_SPECIALIZABLE = 1 << 17;\n+\n+        /// Does this value have `InferTy::FreshTy/FreshIntTy/FreshFloatTy`?\n+        const HAS_TY_FRESH                = 1 << 18;\n+\n+        /// Does this value have `InferConst::Fresh`?\n+        const HAS_CT_FRESH                = 1 << 19;\n     }\n }\n "}]}