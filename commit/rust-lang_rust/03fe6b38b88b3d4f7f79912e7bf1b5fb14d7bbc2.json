{"sha": "03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzZmU2YjM4Yjg4YjNkNGY3Zjc5OTEyZTdiZjFiNWZiMTRkN2JiYzI=", "commit": {"author": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-12-13T22:35:15Z"}, "committer": {"name": "kjeremy", "email": "kjeremy@gmail.com", "date": "2019-12-13T23:28:01Z"}, "message": "Remove some unwraps in add_new", "tree": {"sha": "1a107cea2e63e97836d42e2c3b5ac6c48f90694b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a107cea2e63e97836d42e2c3b5ac6c48f90694b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2", "html_url": "https://github.com/rust-lang/rust/commit/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2/comments", "author": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kjeremy", "id": 4325700, "node_id": "MDQ6VXNlcjQzMjU3MDA=", "avatar_url": "https://avatars.githubusercontent.com/u/4325700?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kjeremy", "html_url": "https://github.com/kjeremy", "followers_url": "https://api.github.com/users/kjeremy/followers", "following_url": "https://api.github.com/users/kjeremy/following{/other_user}", "gists_url": "https://api.github.com/users/kjeremy/gists{/gist_id}", "starred_url": "https://api.github.com/users/kjeremy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kjeremy/subscriptions", "organizations_url": "https://api.github.com/users/kjeremy/orgs", "repos_url": "https://api.github.com/users/kjeremy/repos", "events_url": "https://api.github.com/users/kjeremy/events{/privacy}", "received_events_url": "https://api.github.com/users/kjeremy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "169fe4932f84f396965a4814c44e31061673937c", "url": "https://api.github.com/repos/rust-lang/rust/commits/169fe4932f84f396965a4814c44e31061673937c", "html_url": "https://github.com/rust-lang/rust/commit/169fe4932f84f396965a4814c44e31061673937c"}], "stats": {"total": 35, "additions": 16, "deletions": 19}, "files": [{"sha": "b2f946fac36b144413f2ddc9954f3c9cce08ed8e", "filename": "crates/ra_assists/src/assists/add_new.rs", "status": "modified", "additions": 16, "deletions": 19, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fassists%2Fadd_new.rs?ref=03fe6b38b88b3d4f7f79912e7bf1b5fb14d7bbc2", "patch": "@@ -139,43 +139,40 @@ fn find_struct_impl(\n \n     let struct_ty = {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: strukt.clone() };\n-        hir::Struct::from_source(db, src).unwrap().ty(db)\n+        hir::Struct::from_source(db, src)?.ty(db)\n     };\n \n-    let mut found_new_fn = false;\n-\n-    let block = module.descendants().filter_map(ast::ImplBlock::cast).find(|impl_blk| {\n-        if found_new_fn {\n-            return false;\n-        }\n-\n+    let block = module.descendants().filter_map(ast::ImplBlock::cast).find_map(|impl_blk| {\n         let src = InFile { file_id: ctx.frange.file_id.into(), value: impl_blk.clone() };\n-        let blk = hir::ImplBlock::from_source(db, src).unwrap();\n+        let blk = hir::ImplBlock::from_source(db, src)?;\n \n         let same_ty = blk.target_ty(db) == struct_ty;\n         let not_trait_impl = blk.target_trait(db).is_none();\n \n         if !(same_ty && not_trait_impl) {\n-            return false;\n+            None\n+        } else {\n+            Some(impl_blk)\n         }\n-\n-        found_new_fn = has_new_fn(impl_blk);\n-        true\n     });\n \n-    if found_new_fn {\n-        None\n-    } else {\n-        Some(block)\n+    if let Some(ref impl_blk) = block {\n+        if has_new_fn(impl_blk) {\n+            return None;\n+        }\n     }\n+\n+    Some(block)\n }\n \n fn has_new_fn(imp: &ast::ImplBlock) -> bool {\n     if let Some(il) = imp.item_list() {\n         for item in il.impl_items() {\n             if let ast::ImplItem::FnDef(f) = item {\n-                if f.name().unwrap().text().eq_ignore_ascii_case(\"new\") {\n-                    return true;\n+                if let Some(name) = f.name() {\n+                    if name.text().eq_ignore_ascii_case(\"new\") {\n+                        return true;\n+                    }\n                 }\n             }\n         }"}]}