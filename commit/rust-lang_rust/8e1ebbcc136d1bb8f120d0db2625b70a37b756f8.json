{"sha": "8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhlMWViYmNjMTM2ZDFiYjhmMTIwZDBkYjI2MjViNzBhMzdiNzU2Zjg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T09:47:27Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-09T09:47:27Z"}, "message": "Simplify", "tree": {"sha": "ae8f546d6822b0727da89e82d224496f130685a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae8f546d6822b0727da89e82d224496f130685a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "html_url": "https://github.com/rust-lang/rust/commit/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9d41bd18fa8e51580f223464d200342de7c6d4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9d41bd18fa8e51580f223464d200342de7c6d4a", "html_url": "https://github.com/rust-lang/rust/commit/f9d41bd18fa8e51580f223464d200342de7c6d4a"}], "stats": {"total": 52, "additions": 20, "deletions": 32}, "files": [{"sha": "c54e992038e1941a7afc5836dee875951bc1ec2d", "filename": "crates/expect/src/lib.rs", "status": "modified", "additions": 18, "deletions": 31, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8/crates%2Fexpect%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8/crates%2Fexpect%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fexpect%2Fsrc%2Flib.rs?ref=8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "patch": "@@ -42,8 +42,8 @@ macro_rules! expect {\n /// expect_file![\"/crates/foo/test_data/bar.html\"]\n #[macro_export]\n macro_rules! expect_file {\n-    [$path:literal] => {$crate::ExpectFile {\n-        path: $crate::ExpectFilePath::Static($path)\n+    [$path:expr] => {$crate::ExpectFile {\n+        path: std::path::PathBuf::from($path)\n     }};\n }\n \n@@ -55,13 +55,7 @@ pub struct Expect {\n \n #[derive(Debug)]\n pub struct ExpectFile {\n-    pub path: ExpectFilePath,\n-}\n-\n-#[derive(Debug)]\n-pub enum ExpectFilePath {\n-    Static(&'static str),\n-    Dynamic(PathBuf),\n+    pub path: PathBuf,\n }\n \n #[derive(Debug)]\n@@ -120,9 +114,6 @@ impl Expect {\n }\n \n impl ExpectFile {\n-    pub fn new(path: PathBuf) -> ExpectFile {\n-        ExpectFile { path: ExpectFilePath::Dynamic(path) }\n-    }\n     pub fn assert_eq(&self, actual: &str) {\n         let expected = self.read();\n         if actual == expected {\n@@ -136,14 +127,8 @@ impl ExpectFile {\n     fn write(&self, contents: &str) {\n         fs::write(self.abs_path(), contents).unwrap()\n     }\n-    fn path(&self) -> &Path {\n-        match &self.path {\n-            ExpectFilePath::Static(it) => it.as_ref(),\n-            ExpectFilePath::Dynamic(it) => it.as_path(),\n-        }\n-    }\n     fn abs_path(&self) -> PathBuf {\n-        workspace_root().join(self.path())\n+        WORKSPACE_ROOT.join(&self.path)\n     }\n }\n \n@@ -171,11 +156,11 @@ impl Runtime {\n     fn fail_file(expect: &ExpectFile, expected: &str, actual: &str) {\n         let mut rt = RT.lock().unwrap_or_else(|poisoned| poisoned.into_inner());\n         if update_expect() {\n-            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path().display());\n+            println!(\"\\x1b[1m\\x1b[92mupdating\\x1b[0m: {}\", expect.path.display());\n             expect.write(actual);\n             return;\n         }\n-        rt.panic(expect.path().display().to_string(), expected, actual);\n+        rt.panic(expect.path.display().to_string(), expected, actual);\n     }\n \n     fn panic(&mut self, position: String, expected: &str, actual: &str) {\n@@ -219,7 +204,7 @@ struct FileRuntime {\n \n impl FileRuntime {\n     fn new(expect: &Expect) -> FileRuntime {\n-        let path = workspace_root().join(expect.position.file);\n+        let path = WORKSPACE_ROOT.join(expect.position.file);\n         let original_text = fs::read_to_string(&path).unwrap();\n         let patchwork = Patchwork::new(original_text.clone());\n         FileRuntime { path, original_text, patchwork }\n@@ -307,15 +292,17 @@ fn format_patch(line_indent: usize, patch: &str) -> String {\n     buf\n }\n \n-fn workspace_root() -> PathBuf {\n-    Path::new(\n-        &env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| env!(\"CARGO_MANIFEST_DIR\").to_owned()),\n-    )\n-    .ancestors()\n-    .nth(2)\n-    .unwrap()\n-    .to_path_buf()\n-}\n+static WORKSPACE_ROOT: Lazy<PathBuf> = Lazy::new(|| {\n+    let my_manifest =\n+        env::var(\"CARGO_MANIFEST_DIR\").unwrap_or_else(|_| env!(\"CARGO_MANIFEST_DIR\").to_owned());\n+    // Heuristic, see https://github.com/rust-lang/cargo/issues/3946\n+    Path::new(&my_manifest)\n+        .ancestors()\n+        .filter(|it| it.join(\"Cargo.toml\").exists())\n+        .last()\n+        .unwrap()\n+        .to_path_buf()\n+});\n \n #[cfg(test)]\n mod tests {"}, {"sha": "aa78735da675cf8aa232b3a0014f495dea6c89e5", "filename": "crates/ra_syntax/src/tests.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8e1ebbcc136d1bb8f120d0db2625b70a37b756f8/crates%2Fra_syntax%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Ftests.rs?ref=8e1ebbcc136d1bb8f120d0db2625b70a37b756f8", "patch": "@@ -4,6 +4,7 @@ use std::{\n     path::{Component, Path, PathBuf},\n };\n \n+use expect::expect_file;\n use test_utils::project_dir;\n \n use crate::{fuzz, tokenize, SourceFile, SyntaxError, TextRange, TextSize, Token};\n@@ -217,7 +218,7 @@ where\n     for (path, input_code) in collect_rust_files(test_data_dir, paths) {\n         let actual = f(&input_code, &path);\n         let path = path.with_extension(outfile_extension);\n-        expect::ExpectFile::new(path).assert_eq(&actual)\n+        expect_file![path].assert_eq(&actual)\n     }\n }\n "}]}