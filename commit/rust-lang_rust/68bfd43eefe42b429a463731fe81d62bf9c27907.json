{"sha": "68bfd43eefe42b429a463731fe81d62bf9c27907", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4YmZkNDNlZWZlNDJiNDI5YTQ2MzczMWZlODFkNjJiZjljMjc5MDc=", "commit": {"author": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-02T17:23:33Z"}, "committer": {"name": "Dave Huseby", "email": "dhuseby@mozilla.com", "date": "2016-02-03T05:42:11Z"}, "message": "simplifying get_stack", "tree": {"sha": "e9be4861e76614f0384ac9010abc14d2f15190c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9be4861e76614f0384ac9010abc14d2f15190c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/68bfd43eefe42b429a463731fe81d62bf9c27907", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/68bfd43eefe42b429a463731fe81d62bf9c27907", "html_url": "https://github.com/rust-lang/rust/commit/68bfd43eefe42b429a463731fe81d62bf9c27907", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/68bfd43eefe42b429a463731fe81d62bf9c27907/comments", "author": null, "committer": null, "parents": [{"sha": "7803c8d688b87e3d13f42d543a553201005db783", "url": "https://api.github.com/repos/rust-lang/rust/commits/7803c8d688b87e3d13f42d543a553201005db783", "html_url": "https://github.com/rust-lang/rust/commit/7803c8d688b87e3d13f42d543a553201005db783"}], "stats": {"total": 27, "additions": 3, "deletions": 24}, "files": [{"sha": "ee590e1af71a7c0f15830b0e72af5be393977f1b", "filename": "src/libstd/sys/unix/stack_overflow.rs", "status": "modified", "additions": 3, "deletions": 24, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/68bfd43eefe42b429a463731fe81d62bf9c27907/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/68bfd43eefe42b429a463731fe81d62bf9c27907/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fstack_overflow.rs?ref=68bfd43eefe42b429a463731fe81d62bf9c27907", "patch": "@@ -135,27 +135,7 @@ mod imp {\n         Handler { _data: MAIN_ALTSTACK };\n     }\n \n-    #[cfg(any(target_os = \"linux\",\n-              target_os = \"macos\",\n-              target_os = \"bitrig\",\n-              target_os = \"netbsd\",\n-              target_os = \"openbsd\"))]\n-    unsafe fn get_stack() -> libc::stack_t {\n-        let stackp = mmap(ptr::null_mut(),\n-                          SIGSTKSZ,\n-                          PROT_READ | PROT_WRITE,\n-                          MAP_PRIVATE | MAP_ANON,\n-                          -1,\n-                          0);\n-        if stackp == MAP_FAILED {\n-            panic!(\"failed to allocate an alternative stack\");\n-        }\n-        libc::stack_t { ss_sp: stackp, ss_flags: 0, ss_size: SIGSTKSZ }\n-    }\n-\n-    #[cfg(any(target_os = \"dragonfly\",\n-              target_os = \"freebsd\"))]\n-    unsafe fn get_stack() -> libc::stack_t {\n+    unsafe fn get_stack() -> *mut i8 {\n         let stackp = mmap(ptr::null_mut(),\n                           SIGSTKSZ,\n                           PROT_READ | PROT_WRITE,\n@@ -165,12 +145,11 @@ mod imp {\n         if stackp == MAP_FAILED {\n             panic!(\"failed to allocate an alternative stack\");\n         }\n-        libc::stack_t { ss_sp: stackp as *mut i8, ss_flags: 0, ss_size: SIGSTKSZ }\n+        stackp as *mut i8\n     }\n \n-\n     pub unsafe fn make_handler() -> Handler {\n-        let stack = get_stack();\n+        let stack = libc::stack_t { ss_sp: get_stack(), ss_flags: 0, ss_size: SIGSTKSZ }\n         sigaltstack(&stack, ptr::null_mut());\n         Handler { _data: stack.ss_sp as *mut libc::c_void }\n     }"}]}