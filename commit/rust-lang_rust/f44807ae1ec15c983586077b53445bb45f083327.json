{"sha": "f44807ae1ec15c983586077b53445bb45f083327", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NDgwN2FlMWVjMTVjOTgzNTg2MDc3YjUzNDQ1YmI0NWYwODMzMjc=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-26T10:29:58Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-27T11:00:56Z"}, "message": "Improved mechanism for naming regions in non-annotated types.", "tree": {"sha": "2d31a269b839df0001a8b48baaf0bf9f29538c5e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d31a269b839df0001a8b48baaf0bf9f29538c5e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f44807ae1ec15c983586077b53445bb45f083327", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlta+2gACgkQAXYLT59T\n8VSF7A//YB4UvdMiz7Ulu1x1cxsFgeJvnmjxCwbd5szuwAcQfHE5eIo1sWmFHMHj\nmYkEkzt6q4aaM2ECvM8gFiQmQCiYHjCd3tFvdNJ4OX2NhsTctfWsrJtOLhJfbiEi\nV+Q3gldVh24yOez+2dsSIOTFVoShgiM//FYaiujVpNDqrFDVFFNlIWAyQGAz9XMU\nwl5Pzi54DK5ywMPf/5hrOioZBytWIQ5qXFmaOVqHBSpEUgNrUA9it5+eAJceN+/S\n/pRjUT16uQtzeZV8LAoQjtZMtQU8gEtLEblzn4OvgrisGXKxRbgCJisbSEdXfCpm\nXPOjifZQwdIUUt4cJ0LOryvm4qhaqpljdEW3/QSSwgC4/eLTjVzi9W9cebEvkDyS\nO7MDMqLkxxMAh0hfeye4rOMMnCEw31tGKZVkvr0DO/jh5cEpSgo0EQJwwVZ2Dnpa\n9ds7KMcRXoxzL90nKkxNLdSWkeP0NITcuGgNUbjXKtpca1KMI7XSRZ5wbkLVq7AX\n2MOH6XQNb0TEIyMiBXRJeu+w8hcE49SAnxq8MkWcm1XILiLOwADj26uySkDLbtrx\nw5cFhDKhzykBFO4FiAjo4W+SHawG1y9cqhkVzHHYO/3Beb0PsICGQGVM3/Fgk+ev\nDm7DWTx+6VirhaiI6De7S5iAbI0ZUUA1PvtwX+tc51GcMQMdSxI=\n=eXbR\n-----END PGP SIGNATURE-----", "payload": "tree 2d31a269b839df0001a8b48baaf0bf9f29538c5e\nparent b377e7bbfbf584de4c1a775fd41b957cbd2e057b\nauthor David Wood <david@davidtw.co> 1532600998 +0200\ncommitter David Wood <david@davidtw.co> 1532689256 +0200\n\nImproved mechanism for naming regions in non-annotated types.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f44807ae1ec15c983586077b53445bb45f083327", "html_url": "https://github.com/rust-lang/rust/commit/f44807ae1ec15c983586077b53445bb45f083327", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f44807ae1ec15c983586077b53445bb45f083327/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "html_url": "https://github.com/rust-lang/rust/commit/b377e7bbfbf584de4c1a775fd41b957cbd2e057b"}], "stats": {"total": 176, "additions": 127, "deletions": 49}, "files": [{"sha": "15b5edaa3d5d75d91d08c7d36fbcc42bb14754c4", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -19,7 +19,7 @@ use ty::{TyError, TyStr, TyArray, TySlice, TyFloat, TyFnDef, TyFnPtr};\n use ty::{TyParam, TyRawPtr, TyRef, TyNever, TyTuple};\n use ty::{TyClosure, TyGenerator, TyGeneratorWitness, TyForeign, TyProjection, TyAnon};\n use ty::{TyDynamic, TyInt, TyUint, TyInfer};\n-use ty::{self, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n+use ty::{self, RegionVid, Ty, TyCtxt, TypeFoldable, GenericParamCount, GenericParamDefKind};\n use util::nodemap::FxHashSet;\n \n use std::cell::Cell;\n@@ -32,6 +32,12 @@ use syntax::ast::CRATE_NODE_ID;\n use syntax::symbol::{Symbol, InternedString};\n use hir;\n \n+thread_local! {\n+    /// Mechanism for highlighting of specific regions for display in NLL region inference errors.\n+    /// Contains region to highlight and counter for number to use when highlighting.\n+    static HIGHLIGHT_REGION: Cell<Option<(RegionVid, usize)>> = Cell::new(None)\n+}\n+\n macro_rules! gen_display_debug_body {\n     ( $with:path ) => {\n         fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -562,6 +568,19 @@ pub fn parameterized<F: fmt::Write>(f: &mut F,\n     PrintContext::new().parameterized(f, substs, did, projections)\n }\n \n+fn get_highlight_region() -> Option<(RegionVid, usize)> {\n+    HIGHLIGHT_REGION.with(|hr| hr.get())\n+}\n+\n+pub fn with_highlight_region<R>(r: RegionVid, counter: usize, op: impl FnOnce() -> R) -> R {\n+    HIGHLIGHT_REGION.with(|hr| {\n+        assert_eq!(hr.get(), None);\n+        hr.set(Some((r, counter)));\n+        let r = op();\n+        hr.set(None);\n+        r\n+    })\n+}\n \n impl<'a, T: Print> Print for &'a T {\n     fn print<F: fmt::Write>(&self, f: &mut F, cx: &mut PrintContext) -> fmt::Result {\n@@ -733,7 +752,7 @@ define_print! {\n define_print! {\n     () ty::RegionKind, (self, f, cx) {\n         display {\n-            if cx.is_verbose {\n+            if cx.is_verbose || get_highlight_region().is_some() {\n                 return self.print_debug(f, cx);\n             }\n \n@@ -905,6 +924,15 @@ impl fmt::Debug for ty::FloatVid {\n \n impl fmt::Debug for ty::RegionVid {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        if let Some((region, counter)) = get_highlight_region() {\n+            debug!(\"RegionVid.fmt: region={:?} self={:?} counter={:?}\", region, self, counter);\n+            return if *self == region {\n+                write!(f, \"'{:?}\", counter)\n+            } else {\n+                write!(f, \"'_\")\n+            }\n+        }\n+\n         write!(f, \"'_#{}r\", self.index())\n     }\n }\n@@ -1022,9 +1050,11 @@ define_print! {\n                 TyRef(r, ty, mutbl) => {\n                     write!(f, \"&\")?;\n                     let s = r.print_to_string(cx);\n-                    write!(f, \"{}\", s)?;\n-                    if !s.is_empty() {\n-                        write!(f, \" \")?;\n+                    if s != \"'_\" {\n+                        write!(f, \"{}\", s)?;\n+                        if !s.is_empty() {\n+                            write!(f, \" \")?;\n+                        }\n                     }\n                     ty::TypeAndMut { ty, mutbl }.print(f, cx)\n                 }"}, {"sha": "8505d8e1ef39c4cca816f36fa3e7398b54f7c74b", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/region_name.rs", "status": "modified", "additions": 22, "deletions": 34, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fregion_name.rs?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -16,6 +16,7 @@ use rustc::infer::InferCtxt;\n use rustc::mir::Mir;\n use rustc::ty::subst::{Substs, UnpackedKind};\n use rustc::ty::{self, RegionVid, Ty, TyCtxt};\n+use rustc::util::ppaux::with_highlight_region;\n use rustc_errors::DiagnosticBuilder;\n use syntax::ast::Name;\n use syntax::symbol::keywords;\n@@ -228,40 +229,27 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         counter: &mut usize,\n         diag: &mut DiagnosticBuilder<'_>,\n     ) -> Option<InternedString> {\n-        let mut type_name = infcx.extract_type_name(&argument_ty);\n-        let argument_index = self.get_argument_index_for_region(infcx.tcx, needle_fr)?;\n-        let mut first_region_name = None;\n-\n-        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?}\", type_name);\n-        while let Some(start_index) = type_name.find(\"&'_#\") {\n-            if let Some(end_index) = type_name[start_index..].find(' ') {\n-                // Need to make the `end_index` relative to the full string.\n-                let end_index = start_index + end_index;\n-                // `start_index + 1` skips the `&`.\n-                // `end_index + 1` goes to (including) the space after the region.\n-                type_name.replace_range(start_index + 1..end_index + 1, \"\");\n-            }\n-        }\n-        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?}\", type_name);\n-\n-        let mut index = 0;\n-        while let Some(next_index) = type_name[index..].find(\"&\") {\n-            // At this point, next_index is the index of the `&` character (starting from\n-            // the last `&` character).\n-            debug!(\"give_name_if_we_cannot_match_hir_ty: start-of-loop index={:?} type_name={:?}\",\n-                   index, type_name);\n-            let region_name = self.synthesize_region_name(counter).as_str();\n-            if first_region_name.is_none() { first_region_name = Some(region_name); }\n-\n-            // Compute the index of the character after `&` in the original string.\n-            index = next_index + index + 1;\n-            type_name.insert_str(index, &format!(\"{} \", region_name));\n-        }\n-\n-        let (_, span) = self.get_argument_name_and_span_for_region(mir, argument_index);\n-        diag.span_label(span, format!(\"has type `{}`\", type_name));\n-\n-        first_region_name.map(|s| s.as_interned_str())\n+        let type_name = with_highlight_region(needle_fr, *counter, || {\n+            infcx.extract_type_name(&argument_ty)\n+        });\n+\n+        debug!(\"give_name_if_we_cannot_match_hir_ty: type_name={:?} needle_fr={:?}\",\n+               type_name, needle_fr);\n+        let assigned_region_name = if type_name.find(&format!(\"'{}\", counter)).is_some() {\n+            // Only add a label if we can confirm that a region was labelled.\n+            let argument_index = self.get_argument_index_for_region(infcx.tcx, needle_fr)?;\n+            let (_, span) = self.get_argument_name_and_span_for_region(mir, argument_index);\n+            diag.span_label(span, format!(\"has type `{}`\", type_name));\n+\n+            // This counter value will already have been used, so this function will increment it\n+            // so the next value will be used next and return the region name that would have been\n+            // used.\n+            Some(self.synthesize_region_name(counter))\n+        } else {\n+            None\n+        };\n+\n+        assigned_region_name\n     }\n \n     /// Attempts to highlight the specific part of a type annotation"}, {"sha": "87fda1dd99c2e6bb286aeb12523111413f6a0f80", "filename": "src/test/ui/issue-52533-1.nll.stderr", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.nll.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -0,0 +1,17 @@\n+warning: not reporting region error due to nll\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |                  ^\n+\n+error: unsatisfied lifetime constraints\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |            -  -  ^ closure was supposed to return data with lifetime `'1` but it is returning data with lifetime `'2`\n+   |            |  |\n+   |            |  has type `&Foo<'_, '1, u32>`\n+   |            has type `&Foo<'_, '2, u32>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "22af5a86702571cab335b8501b559d846d13b91b", "filename": "src/test/ui/issue-52533-1.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.rs?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![allow(warnings)]\n+\n+struct Foo<'a, 'b, T: 'a + 'b> { x: &'a T, y: &'b T }\n+\n+fn gimme(_: impl for<'a, 'b, 'c> FnOnce(&'a Foo<'a, 'b, u32>,\n+                                        &'a Foo<'a, 'c, u32>) -> &'a Foo<'a, 'b, u32>) { }\n+\n+fn main() {\n+    gimme(|x, y| y)\n+    //~^ ERROR mismatched types [E0308]\n+}"}, {"sha": "38deb7d66de082525c32ec4086c88b130281dd09", "filename": "src/test/ui/issue-52533-1.stderr", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fissue-52533-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52533-1.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -0,0 +1,22 @@\n+error[E0308]: mismatched types\n+  --> $DIR/issue-52533-1.rs:19:18\n+   |\n+LL |     gimme(|x, y| y)\n+   |                  ^ lifetime mismatch\n+   |\n+   = note: expected type `&Foo<'_, '_, u32>`\n+              found type `&Foo<'_, '_, u32>`\n+note: the anonymous lifetime #4 defined on the body at 19:11...\n+  --> $DIR/issue-52533-1.rs:19:11\n+   |\n+LL |     gimme(|x, y| y)\n+   |           ^^^^^^^^\n+note: ...does not necessarily outlive the anonymous lifetime #3 defined on the body at 19:11\n+  --> $DIR/issue-52533-1.rs:19:11\n+   |\n+LL |     gimme(|x, y| y)\n+   |           ^^^^^^^^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0308`."}, {"sha": "99da2141ce91ac8d84b26ee63e0398c85cdeb9fa", "filename": "src/test/ui/nll/closure-requirements/escape-argument-callee.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fescape-argument-callee.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -11,7 +11,7 @@ LL |         let mut closure = expect_sig(|p, y| *p = y);\n    |                                       -  -  ^^^^^^ free region requires that `'1` must outlive `'2`\n    |                                       |  |\n    |                                       |  has type `&'1 i32`\n-   |                                       has type `&'2 mut &'3 i32`\n+   |                                       has type `&mut &'2 i32`\n \n note: No external requirements\n   --> $DIR/escape-argument-callee.rs:36:38"}, {"sha": "b4508824901952cf390beed9727c9cc355285330", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-fail-no-postdom.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-fail-no-postdom.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -8,12 +8,12 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:57:13\n    |\n LL |         |_outlives1, _outlives2, _outlives3, x, y| {\n-   |          ----------              ---------- has type `std::cell::Cell<&'3 &'4 u32>`\n+   |          ----------              ---------- has type `std::cell::Cell<&'2 &u32>`\n    |          |\n-   |          has type `std::cell::Cell<&'1 &'2 u32>`\n+   |          has type `std::cell::Cell<&&'1 u32>`\n ...\n LL |             demand_y(x, y, p) //~ ERROR\n-   |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'3`\n+   |             ^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-approximated-fail-no-postdom.rs:53:9"}, {"sha": "40ebda4419b2a09aa07d3d7331692ea47c501feb", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-no-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-no-bounds.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -8,12 +8,12 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:47:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n-   |                                                ---------  - has type `&'1 std::cell::Cell<&'2 u32>`\n+   |                                                ---------  - has type `&std::cell::Cell<&'1 u32>`\n    |                                                |\n-   |                                                has type `&'3 std::cell::Cell<&'4 &'5 u32>`\n+   |                                                has type `&std::cell::Cell<&'2 &u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'3`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-no-bounds.rs:45:47"}, {"sha": "37ea610397696823dc08c790414d86326b211735", "filename": "src/test/ui/nll/closure-requirements/propagate-fail-to-approximate-longer-wrong-bounds.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/f44807ae1ec15c983586077b53445bb45f083327/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-fail-to-approximate-longer-wrong-bounds.stderr?ref=f44807ae1ec15c983586077b53445bb45f083327", "patch": "@@ -8,12 +8,12 @@ error: unsatisfied lifetime constraints\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:51:9\n    |\n LL |     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n-   |                                                ----------  ---------- has type `&'4 std::cell::Cell<&'5 &'6 u32>`\n+   |                                                ----------  ---------- has type `&std::cell::Cell<&'2 &u32>`\n    |                                                |\n-   |                                                has type `&'1 std::cell::Cell<&'2 &'3 u32>`\n+   |                                                has type `&std::cell::Cell<&'1 &u32>`\n LL |         // Only works if 'x: 'y:\n LL |         demand_y(x, y, x.get())\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'4`\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^ argument requires that `'1` must outlive `'2`\n \n note: No external requirements\n   --> $DIR/propagate-fail-to-approximate-longer-wrong-bounds.rs:49:47"}]}