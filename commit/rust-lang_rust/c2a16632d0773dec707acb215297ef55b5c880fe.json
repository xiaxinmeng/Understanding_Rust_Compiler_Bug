{"sha": "c2a16632d0773dec707acb215297ef55b5c880fe", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyYTE2NjMyZDA3NzNkZWM3MDdhY2IyMTUyOTdlZjU1YjVjODgwZmU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T12:39:12Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2019-11-25T12:39:12Z"}, "message": "Use GenericDefId more", "tree": {"sha": "5cb05c66e7d6bfc51f206f27f561f3b54971c7b4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cb05c66e7d6bfc51f206f27f561f3b54971c7b4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c2a16632d0773dec707acb215297ef55b5c880fe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c2a16632d0773dec707acb215297ef55b5c880fe", "html_url": "https://github.com/rust-lang/rust/commit/c2a16632d0773dec707acb215297ef55b5c880fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c2a16632d0773dec707acb215297ef55b5c880fe/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f7fcc6ecd5334c5e3caa365c4a6d7bf3f37b649", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f7fcc6ecd5334c5e3caa365c4a6d7bf3f37b649", "html_url": "https://github.com/rust-lang/rust/commit/9f7fcc6ecd5334c5e3caa365c4a6d7bf3f37b649"}], "stats": {"total": 53, "additions": 20, "deletions": 33}, "files": [{"sha": "7ec04ad73d30a2dc2aa2f4edaef93423061c896a", "filename": "crates/ra_hir/src/db.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fdb.rs?ref=c2a16632d0773dec707acb215297ef55b5c880fe", "patch": "@@ -24,7 +24,7 @@ pub use hir_def::{\n         RawItemsWithSourceMapQuery, StaticDataQuery, StructDataQuery, TraitDataQuery,\n         TypeAliasDataQuery,\n     },\n-    LocalStructFieldId, VariantId,\n+    GenericDefId, LocalStructFieldId, VariantId,\n };\n pub use hir_expand::db::{\n     AstDatabase, AstDatabaseStorage, AstIdMapQuery, MacroArgQuery, MacroDefQuery, MacroExpandQuery,\n@@ -54,7 +54,7 @@ pub trait HirDatabase: DefDatabase {\n     ) -> Arc<[GenericPredicate]>;\n \n     #[salsa::invoke(crate::ty::generic_predicates_query)]\n-    fn generic_predicates(&self, def: GenericDef) -> Arc<[GenericPredicate]>;\n+    fn generic_predicates(&self, def: GenericDefId) -> Arc<[GenericPredicate]>;\n \n     #[salsa::invoke(crate::ty::generic_defaults_query)]\n     fn generic_defaults(&self, def: GenericDef) -> Substs;"}, {"sha": "3a27d6f0c3fc3fbff22186bb53a10acf83cbdf27", "filename": "crates/ra_hir/src/from_id.rs", "status": "modified", "additions": 2, "deletions": 15, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Ffrom_id.rs?ref=c2a16632d0773dec707acb215297ef55b5c880fe", "patch": "@@ -9,9 +9,8 @@ use hir_def::{\n };\n \n use crate::{\n-    ty::{CallableDef, TypableDef},\n-    Adt, AssocItem, AttrDef, Const, Crate, DefWithBody, EnumVariant, Function, GenericDef,\n-    ModuleDef, Static, StructField, TypeAlias, VariantDef,\n+    ty::TypableDef, Adt, AssocItem, AttrDef, Const, Crate, DefWithBody, EnumVariant, Function,\n+    GenericDef, ModuleDef, Static, StructField, TypeAlias, VariantDef,\n };\n \n impl From<ra_db::CrateId> for Crate {\n@@ -214,18 +213,6 @@ impl From<Adt> for GenericDefId {\n     }\n }\n \n-impl From<CallableDef> for GenericDefId {\n-    fn from(def: CallableDef) -> Self {\n-        match def {\n-            CallableDef::Function(it) => it.id.into(),\n-            CallableDef::Struct(it) => it.id.into(),\n-            CallableDef::EnumVariant(it) => {\n-                EnumVariantId { parent: it.parent.id, local_id: it.id }.into()\n-            }\n-        }\n-    }\n-}\n-\n impl From<VariantDef> for VariantId {\n     fn from(def: VariantDef) -> Self {\n         match def {"}, {"sha": "2473ac57454c8923a16fe0ce701162db5e266758", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=c2a16632d0773dec707acb215297ef55b5c880fe", "patch": "@@ -17,7 +17,7 @@ use std::ops::Deref;\n use std::sync::Arc;\n use std::{fmt, iter, mem};\n \n-use hir_def::{generics::GenericParams, AdtId};\n+use hir_def::{generics::GenericParams, AdtId, GenericDefId};\n use ra_db::{impl_intern_key, salsa};\n \n use crate::{\n@@ -176,7 +176,7 @@ impl TypeCtor {\n         }\n     }\n \n-    pub fn as_generic_def(self) -> Option<crate::GenericDef> {\n+    pub fn as_generic_def(self) -> Option<GenericDefId> {\n         match self {\n             TypeCtor::Bool\n             | TypeCtor::Char\n@@ -193,7 +193,7 @@ impl TypeCtor {\n             | TypeCtor::Closure { .. } => None,\n             TypeCtor::Adt(adt) => Some(adt.into()),\n             TypeCtor::FnDef(callable) => Some(callable.into()),\n-            TypeCtor::AssociatedType(type_alias) => Some(type_alias.into()),\n+            TypeCtor::AssociatedType(type_alias) => Some(type_alias.id.into()),\n         }\n     }\n }"}, {"sha": "da3c8e94af0ecc2e02dd8801eeb3f60d3369dabb", "filename": "crates/ra_hir/src/ty/lower.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Flower.rs?ref=c2a16632d0773dec707acb215297ef55b5c880fe", "patch": "@@ -14,7 +14,7 @@ use hir_def::{\n     path::{GenericArg, PathSegment},\n     resolver::{HasResolver, Resolver, TypeNs},\n     type_ref::{TypeBound, TypeRef},\n-    AdtId, GenericDefId, LocalStructFieldId, VariantId,\n+    AdtId, EnumVariantId, GenericDefId, LocalStructFieldId, VariantId,\n };\n use ra_arena::map::ArenaMap;\n \n@@ -605,9 +605,9 @@ impl TraitEnvironment {\n /// Resolve the where clause(s) of an item with generics.\n pub(crate) fn generic_predicates_query(\n     db: &impl HirDatabase,\n-    def: GenericDef,\n+    def: GenericDefId,\n ) -> Arc<[GenericPredicate]> {\n-    let resolver = GenericDefId::from(def).resolver(db);\n+    let resolver = def.resolver(db);\n     resolver\n         .where_predicates_in_scope()\n         .flat_map(|pred| GenericPredicate::from_where_predicate(db, &resolver, pred))\n@@ -819,12 +819,12 @@ impl CallableDef {\n     }\n }\n \n-impl From<CallableDef> for GenericDef {\n-    fn from(def: CallableDef) -> GenericDef {\n+impl From<CallableDef> for GenericDefId {\n+    fn from(def: CallableDef) -> GenericDefId {\n         match def {\n-            CallableDef::Function(f) => f.into(),\n-            CallableDef::Struct(s) => s.into(),\n-            CallableDef::EnumVariant(e) => e.into(),\n+            CallableDef::Function(f) => f.id.into(),\n+            CallableDef::Struct(s) => s.id.into(),\n+            CallableDef::EnumVariant(e) => EnumVariantId::from(e).into(),\n         }\n     }\n }"}, {"sha": "a0dbf6305240b3bc774a2be8db63897dd810f0d2", "filename": "crates/ra_hir/src/ty/traits/chalk.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c2a16632d0773dec707acb215297ef55b5c880fe/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty%2Ftraits%2Fchalk.rs?ref=c2a16632d0773dec707acb215297ef55b5c880fe", "patch": "@@ -9,7 +9,7 @@ use chalk_ir::{\n };\n use chalk_rust_ir::{AssociatedTyDatum, AssociatedTyValue, ImplDatum, StructDatum, TraitDatum};\n \n-use hir_def::lang_item::LangItemTarget;\n+use hir_def::{lang_item::LangItemTarget, GenericDefId};\n use hir_expand::name;\n \n use ra_db::salsa::{InternId, InternKey};\n@@ -19,7 +19,7 @@ use crate::{\n     db::HirDatabase,\n     ty::display::HirDisplay,\n     ty::{ApplicationTy, GenericPredicate, ProjectionTy, Substs, TraitRef, Ty, TypeCtor, TypeWalk},\n-    Crate, GenericDef, ImplBlock, Trait, TypeAlias,\n+    Crate, ImplBlock, Trait, TypeAlias,\n };\n \n /// This represents a trait whose name we could not resolve.\n@@ -402,7 +402,7 @@ fn make_binders<T>(value: T, num_vars: usize) -> chalk_ir::Binders<T> {\n \n fn convert_where_clauses(\n     db: &impl HirDatabase,\n-    def: GenericDef,\n+    def: GenericDefId,\n     substs: &Substs,\n ) -> Vec<chalk_ir::QuantifiedWhereClause<ChalkIr>> {\n     let generic_predicates = db.generic_predicates(def);\n@@ -561,7 +561,7 @@ pub(crate) fn trait_datum_query(\n         marker: false,\n         fundamental: false,\n     };\n-    let where_clauses = convert_where_clauses(db, trait_.into(), &bound_vars);\n+    let where_clauses = convert_where_clauses(db, trait_.id.into(), &bound_vars);\n     let associated_ty_ids = trait_\n         .items(db)\n         .into_iter()\n@@ -643,7 +643,7 @@ fn impl_block_datum(\n     } else {\n         chalk_rust_ir::ImplType::External\n     };\n-    let where_clauses = convert_where_clauses(db, impl_block.into(), &bound_vars);\n+    let where_clauses = convert_where_clauses(db, impl_block.id.into(), &bound_vars);\n     let negative = impl_block.is_negative(db);\n     debug!(\n         \"impl {:?}: {}{} where {:?}\","}]}