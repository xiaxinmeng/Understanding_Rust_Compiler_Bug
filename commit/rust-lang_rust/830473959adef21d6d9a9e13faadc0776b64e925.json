{"sha": "830473959adef21d6d9a9e13faadc0776b64e925", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzMDQ3Mzk1OWFkZWYyMWQ2ZDlhOWUxM2ZhYWRjMDc3NmI2NGU5MjU=", "commit": {"author": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:45:55Z"}, "committer": {"name": "jumbatm", "email": "jumbatm@gmail.com", "date": "2020-05-01T11:52:43Z"}, "message": "Manually format macro to not go over text width.", "tree": {"sha": "a636954ee60d7501e1546eb18fd2f88948ac589f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a636954ee60d7501e1546eb18fd2f88948ac589f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/830473959adef21d6d9a9e13faadc0776b64e925", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/830473959adef21d6d9a9e13faadc0776b64e925", "html_url": "https://github.com/rust-lang/rust/commit/830473959adef21d6d9a9e13faadc0776b64e925", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/830473959adef21d6d9a9e13faadc0776b64e925/comments", "author": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jumbatm", "id": 30644300, "node_id": "MDQ6VXNlcjMwNjQ0MzAw", "avatar_url": "https://avatars.githubusercontent.com/u/30644300?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jumbatm", "html_url": "https://github.com/jumbatm", "followers_url": "https://api.github.com/users/jumbatm/followers", "following_url": "https://api.github.com/users/jumbatm/following{/other_user}", "gists_url": "https://api.github.com/users/jumbatm/gists{/gist_id}", "starred_url": "https://api.github.com/users/jumbatm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jumbatm/subscriptions", "organizations_url": "https://api.github.com/users/jumbatm/orgs", "repos_url": "https://api.github.com/users/jumbatm/repos", "events_url": "https://api.github.com/users/jumbatm/events{/privacy}", "received_events_url": "https://api.github.com/users/jumbatm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8175c4ceec9e19193e99f054f2b743f77a42a54f", "url": "https://api.github.com/repos/rust-lang/rust/commits/8175c4ceec9e19193e99f054f2b743f77a42a54f", "html_url": "https://github.com/rust-lang/rust/commit/8175c4ceec9e19193e99f054f2b743f77a42a54f"}], "stats": {"total": 10, "additions": 8, "deletions": 2}, "files": [{"sha": "54da0ba9eedde58d3febf85a0ca39e29cc79948a", "filename": "src/librustc_mir/interpret/validity.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/830473959adef21d6d9a9e13faadc0776b64e925/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/830473959adef21d6d9a9e13faadc0776b64e925/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fvalidity.rs?ref=830473959adef21d6d9a9e13faadc0776b64e925", "patch": "@@ -67,12 +67,18 @@ macro_rules! try_validation {\n /// ```\n ///\n macro_rules! try_validation_pat {\n-    ($e:expr, $where:expr, { $( $p:pat )|+ => { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? $( , )?}) => {{\n+    ($e:expr, $where:expr, { $( $p:pat )|+ =>\n+        { $( $what_fmt:expr ),+ } $( expected { $( $expected_fmt:expr ),+ } )? $( , )?}) => {{\n         match $e {\n             Ok(x) => x,\n             // We catch the error and turn it into a validation failure. We are okay with\n             // allocation here as this can only slow down builds that fail anyway.\n-            $( Err(InterpErrorInfo { kind: $p, .. }) )|+ => throw_validation_failure!(format_args!($( $what_fmt ),+), $where $(, format_args!($( $expected_fmt ),+))?),\n+            $( Err(InterpErrorInfo { kind: $p, .. }) )|+ =>\n+                throw_validation_failure!(\n+                    format_args!($( $what_fmt ),+),\n+                    $where\n+                    $(, format_args!($( $expected_fmt ),+))?\n+                ),\n             #[allow(unreachable_patterns)]\n             Err(e) => Err::<!, _>(e)?,\n         }"}]}