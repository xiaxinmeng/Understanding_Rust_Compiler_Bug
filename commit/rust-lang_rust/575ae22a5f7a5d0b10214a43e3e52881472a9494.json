{"sha": "575ae22a5f7a5d0b10214a43e3e52881472a9494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU3NWFlMjJhNWY3YTVkMGIxMDIxNGE0M2UzZTUyODgxNDcyYTk0OTQ=", "commit": {"author": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-14T14:37:27Z"}, "committer": {"name": "topecongiro", "email": "seuchida@gmail.com", "date": "2017-11-14T14:37:27Z"}, "message": "Update tests related to spaces with parens and brackets", "tree": {"sha": "607209b93d0fedfbcd61f97a7de0cf4b3711d799", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/607209b93d0fedfbcd61f97a7de0cf4b3711d799"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/575ae22a5f7a5d0b10214a43e3e52881472a9494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/575ae22a5f7a5d0b10214a43e3e52881472a9494", "html_url": "https://github.com/rust-lang/rust/commit/575ae22a5f7a5d0b10214a43e3e52881472a9494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/575ae22a5f7a5d0b10214a43e3e52881472a9494/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "babc4797831367b18ca4bec32ad8b98c3074148b", "url": "https://api.github.com/repos/rust-lang/rust/commits/babc4797831367b18ca4bec32ad8b98c3074148b", "html_url": "https://github.com/rust-lang/rust/commit/babc4797831367b18ca4bec32ad8b98c3074148b"}], "stats": {"total": 634, "additions": 292, "deletions": 342}, "files": [{"sha": "3823216f4336e31d6e81782d85c1ab066bbf7000", "filename": "tests/source/configs-spaces_within_angle_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: false\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "f2b97d7def35e981eab99257e4532d984d66c3b6", "filename": "tests/source/configs-spaces_within_angle_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_angle_brackets-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "05c25584fe16d3ea3b009e27cb8191c7a6398419", "filename": "tests/source/configs-spaces_within_parens-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: false\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "7f041d71f49fd2143c69422adf28741342334b44", "filename": "tests/source/configs-spaces_within_parens-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/source/configs-spaces_within_parens_and_brackets-false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-false.rs?ref=575ae22a5f7a5d0b10214a43e3e52881472a9494", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-spaces_within_parens_and_brackets: false\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}"}, {"sha": "2e3c92da2fc3b842fd5023a91df17f71e2b3fea9", "filename": "tests/source/configs-spaces_within_parens_and_brackets-true.rs", "status": "added", "additions": 133, "deletions": 0, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_parens_and_brackets-true.rs?ref=575ae22a5f7a5d0b10214a43e3e52881472a9494", "patch": "@@ -0,0 +1,133 @@\n+// rustfmt-spaces_within_parens_and_brackets: true\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}\n+\n+enum E {\n+    A(u32),\n+    B(u32, u32),\n+    C(u32, u32, u32),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1(u32);\n+struct TupleStruct2(u32, u32);\n+\n+fn fooEmpty() {}\n+\n+fn foo(e: E, _: u32) -> (u32, u32) {\n+    // Tuples\n+    let t1 = ();\n+    let t2 = (1,);\n+    let t3 = (1, 2);\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1(1);\n+    let ts2 = TupleStruct2(1, 2);\n+\n+    // Tuple pattern\n+    let (a,b,c) = (1,2,3);\n+\n+    // Expressions\n+    let x = (1 + 2) * (3);\n+\n+    // Function call\n+    fooEmpty();\n+    foo(1, 2);\n+\n+    // Pattern matching\n+    match e {\n+        A(_) => (),\n+        B(_, _) => (),\n+        C(..) => (),\n+        D => (),\n+    }\n+\n+    (1,2)\n+}\n+\n+struct Foo<T> {\n+    i: T,\n+}\n+\n+struct Bar<T, E> {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo<'a> {\n+    i: &'a str,\n+}\n+\n+enum E<T> {\n+    T(T),\n+}\n+\n+enum E<T, S> {\n+    T(T),\n+    S(S),\n+}\n+\n+fn foo<T>(a: T) {\n+    foo::<u32>(10);\n+}\n+\n+fn foo<T, E>(a: T, b: E) {\n+    foo::<u32, str>(10, \"bar\");\n+}\n+\n+fn foo<T: Send, E: Send>(a: T, b: E) {\n+    foo::<u32, str>(10, \"bar\");\n+\n+    let opt: Option<u32>;\n+    let res: Result<u32, String>;\n+}\n+\n+fn foo<'a>(a: &'a str) {\n+    foo(\"foo\");\n+}\n+\n+fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n+    foo(\"foo\", \"bar\");\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        <Foo as Foo>::bar();\n+    }\n+}\n+\n+trait MyTrait<A, D> {}\n+impl<A: Send, D: Send> MyTrait<A, D> for Foo {}\n+\n+fn foo() where for<'a> u32: 'a {}\n+\n+fn main() {\n+    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n+    let arr: [i32; 500] = [0; 500];\n+\n+    let v = vec![1, 2, 3];\n+    assert_eq!(arr, [1, 2, 3]);\n+\n+    let i = arr[0];\n+\n+    let slice = &arr[1..2];\n+\n+    let line100_________________________________________________________________________ = [1, 2];\n+    let line101__________________________________________________________________________ = [1, 2];\n+    let line102___________________________________________________________________________ = [1, 2];\n+    let line103____________________________________________________________________________ = [1, 2];\n+    let line104_____________________________________________________________________________ = [1, 2];\n+\n+    let line100_____________________________________________________________________ = vec![1, 2];\n+    let line101______________________________________________________________________ = vec![1, 2];\n+    let line102_______________________________________________________________________ = vec![1, 2];\n+    let line103________________________________________________________________________ = vec![1, 2];\n+    let line104_________________________________________________________________________ = vec![1, 2];\n+}\n+\n+fn f(slice: &[i32]) {}"}, {"sha": "6410646aad6512ffd19a70032ed5727b96bbbb83", "filename": "tests/source/configs-spaces_within_square_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: false\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "8683fb5f1c69531d450b3cef39b1cd821f13f7bc", "filename": "tests/source/configs-spaces_within_square_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fconfigs-spaces_within_square_brackets-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "73cab841e2e61771b20818cbd9695b2f6255528b", "filename": "tests/source/spaces-within-angle-brackets.rs", "status": "removed", "additions": 0, "deletions": 57, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-angle-brackets.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,57 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-\n-struct Foo<T> {\n-    i: T,\n-}\n-\n-struct Bar<T, E> {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo<'a> {\n-    i: &'a str,\n-}\n-\n-enum E<T> {\n-    T(T),\n-}\n-\n-enum E<T, S> {\n-    T(T),\n-    S(S),\n-}\n-\n-fn foo<T>(a: T) {\n-    foo::<u32>(10);\n-}\n-\n-fn foo<T, E>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-}\n-\n-fn foo<T: Send, E: Send>(a: T, b: E) {\n-    foo::<u32, str>(10, \"bar\");\n-\n-    let opt: Option<u32>;\n-    let res: Result<u32, String>;\n-}\n-\n-fn foo<'a>(a: &'a str) {\n-    foo(\"foo\");\n-}\n-\n-fn foo<'a, 'b>(a: &'a str, b: &'b str) {\n-    foo(\"foo\", \"bar\");\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        <Foo as Foo>::bar();\n-    }\n-}\n-\n-trait MyTrait<A, D> {}\n-impl<A: Send, D: Send> MyTrait<A, D> for Foo {}\n-\n-fn foo() where for<'a> u32: 'a {}"}, {"sha": "dba8d7cf01309dbb281da9a41f1bf3dfc8834d6a", "filename": "tests/source/spaces-within-parens.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-parens.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,45 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-\n-enum E {\n-    A(u32),\n-    B(u32, u32),\n-    C(u32, u32, u32),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1(u32);\n-struct TupleStruct2(u32, u32);\n-\n-fn fooEmpty() {}\n-\n-fn foo(e: E, _: u32) -> (u32, u32) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = (1,);\n-    let t3 = (1, 2);\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1(1);\n-    let ts2 = TupleStruct2(1, 2);\n-\n-    // Tuple pattern\n-    let (a,b,c) = (1,2,3);\n-\n-    // Expressions\n-    let x = (1 + 2) * (3);\n-\n-    // Function call\n-    fooEmpty();\n-    foo(1, 2);\n-\n-    // Pattern matching\n-    match e {\n-        A(_) => (),\n-        B(_, _) => (),\n-        C(..) => (),\n-        D => (),\n-    }\n-\n-    (1,2)\n-}"}, {"sha": "d0466cacdd54f1dc19556634b72f9aa79c53f197", "filename": "tests/source/spaces-within-square-brackets.rs", "status": "removed", "additions": 0, "deletions": 27, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Fsource%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fspaces-within-square-brackets.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,27 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-\n-fn main() {\n-    let arr: [i32; 5] = [1, 2, 3, 4, 5];\n-    let arr: [i32; 500] = [0; 500];\n-\n-    let v = vec![1, 2, 3];\n-    assert_eq!(arr, [1, 2, 3]);\n-\n-    let i = arr[0];\n-\n-    let slice = &arr[1..2];\n-\n-    let line100_________________________________________________________________________ = [1, 2];\n-    let line101__________________________________________________________________________ = [1, 2];\n-    let line102___________________________________________________________________________ = [1, 2];\n-    let line103____________________________________________________________________________ = [1, 2];\n-    let line104_____________________________________________________________________________ = [1, 2];\n-\n-    let line100_____________________________________________________________________ = vec![1, 2];\n-    let line101______________________________________________________________________ = vec![1, 2];\n-    let line102_______________________________________________________________________ = vec![1, 2];\n-    let line103________________________________________________________________________ = vec![1, 2];\n-    let line104_________________________________________________________________________ = vec![1, 2];\n-}\n-\n-fn f(slice: &[i32]) {}"}, {"sha": "3823216f4336e31d6e81782d85c1ab066bbf7000", "filename": "tests/target/configs-spaces_within_angle_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: false\n-// Spaces within angle-brackets\n-\n-fn lorem<T: Eq>(t: T) {\n-    // body\n-}"}, {"sha": "fef5ac25a4df5f1e710b0314ff8214a58cf1a435", "filename": "tests/target/configs-spaces_within_angle_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_angle_brackets-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-// Spaces within angle-brackets\n-\n-fn lorem< T: Eq >(t: T) {\n-    // body\n-}"}, {"sha": "05c25584fe16d3ea3b009e27cb8191c7a6398419", "filename": "tests/target/configs-spaces_within_parens-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: false\n-// Spaces within parens\n-\n-fn lorem<T: Eq>(t: T) {\n-    let lorem = (ipsum, dolor);\n-}"}, {"sha": "2461afb70889968801500640f53450f9b69862e5", "filename": "tests/target/configs-spaces_within_parens-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-// Spaces within parens\n-\n-fn lorem<T: Eq>( t: T ) {\n-    let lorem = ( ipsum, dolor );\n-}"}, {"sha": "908373ca9b05b1cb44895e3417b4336e14d5ec40", "filename": "tests/target/configs-spaces_within_parens_and_brackets-false.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-false.rs?ref=575ae22a5f7a5d0b10214a43e3e52881472a9494", "patch": "@@ -0,0 +1,7 @@\n+// rustfmt-spaces_within_parens_and_brackets: false\n+// Spaces within parens and brackets\n+\n+fn lorem<T: Eq>(t: T) {\n+    let lorem = (ipsum, dolor);\n+    let lorem: [usize; 2] = [ipsum, dolor];\n+}"}, {"sha": "343b8749d6f1b6cfa15ed9e7a296c0e946ead5b4", "filename": "tests/target/configs-spaces_within_parens_and_brackets-true.rs", "status": "added", "additions": 145, "deletions": 0, "changes": 145, "blob_url": "https://github.com/rust-lang/rust/blob/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/575ae22a5f7a5d0b10214a43e3e52881472a9494/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_parens_and_brackets-true.rs?ref=575ae22a5f7a5d0b10214a43e3e52881472a9494", "patch": "@@ -0,0 +1,145 @@\n+// rustfmt-spaces_within_parens_and_brackets: true\n+// Spaces within parens and brackets\n+\n+fn lorem< T: Eq >( t: T ) {\n+    let lorem = ( ipsum, dolor );\n+    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n+}\n+\n+enum E {\n+    A( u32 ),\n+    B( u32, u32 ),\n+    C( u32, u32, u32 ),\n+    D(),\n+}\n+\n+struct TupleStruct0();\n+struct TupleStruct1( u32 );\n+struct TupleStruct2( u32, u32 );\n+\n+fn fooEmpty() {}\n+\n+fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n+    // Tuples\n+    let t1 = ();\n+    let t2 = ( 1, );\n+    let t3 = ( 1, 2 );\n+\n+    let ts0 = TupleStruct0();\n+    let ts1 = TupleStruct1( 1 );\n+    let ts2 = TupleStruct2( 1, 2 );\n+\n+    // Tuple pattern\n+    let ( a, b, c ) = ( 1, 2, 3 );\n+\n+    // Expressions\n+    let x = ( 1 + 2 ) * ( 3 );\n+\n+    // Function call\n+    fooEmpty();\n+    foo( 1, 2 );\n+\n+    // Pattern matching\n+    match e {\n+        A( _ ) => (),\n+        B( _, _ ) => (),\n+        C( .. ) => (),\n+        D => (),\n+    }\n+\n+    ( 1, 2 )\n+}\n+\n+struct Foo< T > {\n+    i: T,\n+}\n+\n+struct Bar< T, E > {\n+    i: T,\n+    e: E,\n+}\n+\n+struct Foo< 'a > {\n+    i: &'a str,\n+}\n+\n+enum E< T > {\n+    T(T),\n+}\n+\n+enum E< T, S > {\n+    T(T),\n+    S(S),\n+}\n+\n+fn foo< T >(a: T) {\n+    foo::< u32 >(10);\n+}\n+\n+fn foo< T, E >(a: T, b: E) {\n+    foo::< u32, str >(10, \"bar\");\n+}\n+\n+fn foo< T: Send, E: Send >(a: T, b: E) {\n+    foo::< u32, str >(10, \"bar\");\n+\n+    let opt: Option< u32 >;\n+    let res: Result< u32, String >;\n+}\n+\n+fn foo< 'a >(a: &'a str) {\n+    foo(\"foo\");\n+}\n+\n+fn foo< 'a, 'b >(a: &'a str, b: &'b str) {\n+    foo(\"foo\", \"bar\");\n+}\n+\n+impl Foo {\n+    fn bar() {\n+        < Foo as Foo >::bar();\n+    }\n+}\n+\n+trait MyTrait< A, D > {}\n+impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n+\n+fn foo()\n+    where\n+    for< 'a > u32: 'a,\n+{\n+}\n+\n+fn main() {\n+    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n+    let arr: [ i32; 500 ] = [ 0; 500 ];\n+\n+    let v = vec![ 1, 2, 3 ];\n+    assert_eq!(arr, [ 1, 2, 3 ]);\n+\n+    let i = arr[ 0 ];\n+\n+    let slice = &arr[ 1..2 ];\n+\n+    let line100_________________________________________________________________________ = [ 1, 2 ];\n+    let line101__________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line102___________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line103____________________________________________________________________________ =\n+        [ 1, 2 ];\n+    let line104_____________________________________________________________________________ =\n+        [ 1, 2 ];\n+\n+    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n+    let line101______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line102_______________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line103________________________________________________________________________ =\n+        vec![ 1, 2 ];\n+    let line104_________________________________________________________________________ =\n+        vec![ 1, 2 ];\n+}\n+\n+fn f(slice: &[ i32 ]) {}"}, {"sha": "6410646aad6512ffd19a70032ed5727b96bbbb83", "filename": "tests/target/configs-spaces_within_square_brackets-false.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-false.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: false\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [usize; 2] = [ipsum, dolor];\n-}"}, {"sha": "25f5e0e7231579efa2a8cecc080ee72abed5f05b", "filename": "tests/target/configs-spaces_within_square_brackets-true.rs", "status": "removed", "additions": 0, "deletions": 6, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fconfigs-spaces_within_square_brackets-true.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,6 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-// Spaces within square-brackets\n-\n-fn main() {\n-    let lorem: [ usize; 2 ] = [ ipsum, dolor ];\n-}"}, {"sha": "89335b602a423f71695041221be800d1f3b482a0", "filename": "tests/target/spaces-within-angle-brackets.rs", "status": "removed", "additions": 0, "deletions": 61, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-angle-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-angle-brackets.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,61 +0,0 @@\n-// rustfmt-spaces_within_angle_brackets: true\n-\n-struct Foo< T > {\n-    i: T,\n-}\n-\n-struct Bar< T, E > {\n-    i: T,\n-    e: E,\n-}\n-\n-struct Foo< 'a > {\n-    i: &'a str,\n-}\n-\n-enum E< T > {\n-    T(T),\n-}\n-\n-enum E< T, S > {\n-    T(T),\n-    S(S),\n-}\n-\n-fn foo< T >(a: T) {\n-    foo::< u32 >(10);\n-}\n-\n-fn foo< T, E >(a: T, b: E) {\n-    foo::< u32, str >(10, \"bar\");\n-}\n-\n-fn foo< T: Send, E: Send >(a: T, b: E) {\n-    foo::< u32, str >(10, \"bar\");\n-\n-    let opt: Option< u32 >;\n-    let res: Result< u32, String >;\n-}\n-\n-fn foo< 'a >(a: &'a str) {\n-    foo(\"foo\");\n-}\n-\n-fn foo< 'a, 'b >(a: &'a str, b: &'b str) {\n-    foo(\"foo\", \"bar\");\n-}\n-\n-impl Foo {\n-    fn bar() {\n-        < Foo as Foo >::bar();\n-    }\n-}\n-\n-trait MyTrait< A, D > {}\n-impl< A: Send, D: Send > MyTrait< A, D > for Foo {}\n-\n-fn foo()\n-where\n-    for< 'a > u32: 'a,\n-{\n-}"}, {"sha": "651386c618bfd4d008e1dcc3be061462fd6f0469", "filename": "tests/target/spaces-within-parens.rs", "status": "removed", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-parens.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,45 +0,0 @@\n-// rustfmt-spaces_within_parens: true\n-\n-enum E {\n-    A( u32 ),\n-    B( u32, u32 ),\n-    C( u32, u32, u32 ),\n-    D(),\n-}\n-\n-struct TupleStruct0();\n-struct TupleStruct1( u32 );\n-struct TupleStruct2( u32, u32 );\n-\n-fn fooEmpty() {}\n-\n-fn foo( e: E, _: u32 ) -> ( u32, u32 ) {\n-    // Tuples\n-    let t1 = ();\n-    let t2 = ( 1, );\n-    let t3 = ( 1, 2 );\n-\n-    let ts0 = TupleStruct0();\n-    let ts1 = TupleStruct1( 1 );\n-    let ts2 = TupleStruct2( 1, 2 );\n-\n-    // Tuple pattern\n-    let ( a, b, c ) = ( 1, 2, 3 );\n-\n-    // Expressions\n-    let x = ( 1 + 2 ) * ( 3 );\n-\n-    // Function call\n-    fooEmpty();\n-    foo( 1, 2 );\n-\n-    // Pattern matching\n-    match e {\n-        A( _ ) => (),\n-        B( _, _ ) => (),\n-        C( .. ) => (),\n-        D => (),\n-    }\n-\n-    ( 1, 2 )\n-}"}, {"sha": "cb468d6b59e62b2a1388c93e2e7a21d823a0f3b7", "filename": "tests/target/spaces-within-square-brackets.rs", "status": "removed", "additions": 0, "deletions": 35, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "raw_url": "https://github.com/rust-lang/rust/raw/babc4797831367b18ca4bec32ad8b98c3074148b/tests%2Ftarget%2Fspaces-within-square-brackets.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fspaces-within-square-brackets.rs?ref=babc4797831367b18ca4bec32ad8b98c3074148b", "patch": "@@ -1,35 +0,0 @@\n-// rustfmt-spaces_within_square_brackets: true\n-\n-fn main() {\n-    let arr: [ i32; 5 ] = [ 1, 2, 3, 4, 5 ];\n-    let arr: [ i32; 500 ] = [ 0; 500 ];\n-\n-    let v = vec![ 1, 2, 3 ];\n-    assert_eq!(arr, [ 1, 2, 3 ]);\n-\n-    let i = arr[ 0 ];\n-\n-    let slice = &arr[ 1..2 ];\n-\n-    let line100_________________________________________________________________________ = [ 1, 2 ];\n-    let line101__________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line102___________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line103____________________________________________________________________________ =\n-        [ 1, 2 ];\n-    let line104_____________________________________________________________________________ =\n-        [ 1, 2 ];\n-\n-    let line100_____________________________________________________________________ = vec![ 1, 2 ];\n-    let line101______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line102_______________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line103________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-    let line104_________________________________________________________________________ =\n-        vec![ 1, 2 ];\n-}\n-\n-fn f(slice: &[ i32 ]) {}"}]}