{"sha": "3ca0d365386a640ba17b9b436a3dafff079cd71e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYTBkMzY1Mzg2YTY0MGJhMTdiOWI0MzZhM2RhZmZmMDc5Y2Q3MWU=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-05-03T14:24:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-05-03T14:24:57Z"}, "message": "Rollup merge of #60388 - cramertj:elided-lifetime-async, r=nikomatsakis\n\nDisallow non-explicit elided lifetimes in async fn\n\nFix https://github.com/rust-lang/rust/issues/60203\n\nr? @nikomatsakis", "tree": {"sha": "a008a7f1cadd673e80fe11d340cb8a1592584fbc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a008a7f1cadd673e80fe11d340cb8a1592584fbc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca0d365386a640ba17b9b436a3dafff079cd71e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJczE86CRBK7hj4Ov3rIwAAdHIIALJEEaOAH1IxEB1f4F3fdytJ\nEV4z2Y7p56yypOzCoJksMPCljCMDcOMwRDdbhe47iYLZKAEahBSske5jmm7b0Uca\n6e47oM230RHrWWmrgHJwnbdzeeO/UikvKm+xkhqc7CAzrQT+58ke1B99R04H29+x\ndBXz1eBKQTpcmotw61T4KhGY6oVk6v0+GCN+xbjgEUseTx+rNzt/kyJIvCFsn8jB\nHr0+/IZVqABXMPVWuOW+DmKfmCUr74ZBNLBcBLWLPFAINSnAgOekYrtldu6Nx/6Z\nb1OZfNKwdMMcmq9vVuOw9t9AEhTF+wPjxiT+uPGz1Dm9iSD+138euriEHFsHJHs=\n=2Vcu\n-----END PGP SIGNATURE-----\n", "payload": "tree a008a7f1cadd673e80fe11d340cb8a1592584fbc\nparent 9199bb5f81eae1f8ea47c9945fc3f4c4dded4989\nparent c6e13bc20b5664ba9a8bd4152412bcc497e4f041\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1556893497 +0200\ncommitter GitHub <noreply@github.com> 1556893497 +0200\n\nRollup merge of #60388 - cramertj:elided-lifetime-async, r=nikomatsakis\n\nDisallow non-explicit elided lifetimes in async fn\n\nFix https://github.com/rust-lang/rust/issues/60203\n\nr? @nikomatsakis\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca0d365386a640ba17b9b436a3dafff079cd71e", "html_url": "https://github.com/rust-lang/rust/commit/3ca0d365386a640ba17b9b436a3dafff079cd71e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca0d365386a640ba17b9b436a3dafff079cd71e/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9199bb5f81eae1f8ea47c9945fc3f4c4dded4989", "url": "https://api.github.com/repos/rust-lang/rust/commits/9199bb5f81eae1f8ea47c9945fc3f4c4dded4989", "html_url": "https://github.com/rust-lang/rust/commit/9199bb5f81eae1f8ea47c9945fc3f4c4dded4989"}, {"sha": "c6e13bc20b5664ba9a8bd4152412bcc497e4f041", "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e13bc20b5664ba9a8bd4152412bcc497e4f041", "html_url": "https://github.com/rust-lang/rust/commit/c6e13bc20b5664ba9a8bd4152412bcc497e4f041"}], "stats": {"total": 215, "additions": 150, "deletions": 65}, "files": [{"sha": "fd089fc688e32d5db01a66650e90a1dfe0a6bbce", "filename": "src/librustc/error_codes.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ferror_codes.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -362,10 +362,6 @@ struct Foo1 { x: &bool }\n               // ^ expected lifetime parameter\n struct Foo2<'a> { x: &'a bool } // correct\n \n-impl Foo2 {}\n-  // ^^^^ expected lifetime parameter\n-impl<'a> Foo2<'a> {} // correct\n-\n struct Bar1 { x: Foo2 }\n               // ^^^^ expected lifetime parameter\n struct Bar2<'a> { x: Foo2<'a> } // correct\n@@ -2208,4 +2204,5 @@ register_diagnostics! {\n     E0710, // an unknown tool name found in scoped lint\n     E0711, // a feature has been declared with conflicting stability attributes\n //  E0702, // replaced with a generic attribute input check\n+    E0726, // non-explicit (not `'_`) elided lifetime in unsupported position\n }"}, {"sha": "ad26e05bf80d0b005be6de40a927643549dd7f4a", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 52, "deletions": 16, "changes": 68, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -2110,15 +2110,49 @@ impl<'a> LoweringContext<'a> {\n                         .expect(\"already checked that type args or bindings exist\");\n                     (false, first_generic_span.shrink_to_lo(), format!(\"{}, \", anon_lt_suggestion))\n                 };\n-                self.sess.buffer_lint_with_diagnostic(\n-                    ELIDED_LIFETIMES_IN_PATHS,\n-                    CRATE_NODE_ID,\n-                    path_span,\n-                    \"hidden lifetime parameters in types are deprecated\",\n-                    builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n-                        expected_lifetimes, path_span, incl_angl_brckt, insertion_span, suggestion\n-                    )\n-                );\n+                match self.anonymous_lifetime_mode {\n+                    // In create-parameter mode we error here because we don't want to support\n+                    // deprecated impl elision in new features like impl elision and `async fn`,\n+                    // both of which work using the `CreateParameter` mode:\n+                    //\n+                    //     impl Foo for std::cell::Ref<u32> // note lack of '_\n+                    //     async fn foo(_: std::cell::Ref<u32>) { ... }\n+                    AnonymousLifetimeMode::CreateParameter => {\n+                        let mut err = struct_span_err!(\n+                            self.sess,\n+                            path_span,\n+                            E0726,\n+                            \"implicit elided lifetime not allowed here\"\n+                        );\n+                        crate::lint::builtin::add_elided_lifetime_in_path_suggestion(\n+                            &self.sess,\n+                            &mut err,\n+                            expected_lifetimes,\n+                            path_span,\n+                            incl_angl_brckt,\n+                            insertion_span,\n+                            suggestion,\n+                        );\n+                        err.emit();\n+                    }\n+                    AnonymousLifetimeMode::PassThrough |\n+                    AnonymousLifetimeMode::ReportError |\n+                    AnonymousLifetimeMode::Replace(_) => {\n+                        self.sess.buffer_lint_with_diagnostic(\n+                            ELIDED_LIFETIMES_IN_PATHS,\n+                            CRATE_NODE_ID,\n+                            path_span,\n+                            \"hidden lifetime parameters in types are deprecated\",\n+                            builtin::BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n+                                expected_lifetimes,\n+                                path_span,\n+                                incl_angl_brckt,\n+                                insertion_span,\n+                                suggestion,\n+                            )\n+                        );\n+                    }\n+                }\n             }\n         }\n \n@@ -5335,13 +5369,15 @@ impl<'a> LoweringContext<'a> {\n \n     fn elided_path_lifetime(&mut self, span: Span) -> hir::Lifetime {\n         match self.anonymous_lifetime_mode {\n-            // N.B., We intentionally ignore the create-parameter mode here\n-            // and instead \"pass through\" to resolve-lifetimes, which will then\n-            // report an error. This is because we don't want to support\n-            // impl elision for deprecated forms like\n-            //\n-            //     impl Foo for std::cell::Ref<u32> // note lack of '_\n-            AnonymousLifetimeMode::CreateParameter |\n+            AnonymousLifetimeMode::CreateParameter => {\n+                // We should have emitted E0726 when processing this path above\n+                self.sess.delay_span_bug(\n+                    span,\n+                    \"expected 'implicit elided lifetime not allowed' error\",\n+                );\n+                let id = self.sess.next_node_id();\n+                self.new_named_lifetime(id, span, hir::LifetimeName::Error)\n+            }\n             // This is the normal case.\n             AnonymousLifetimeMode::PassThrough => self.new_implicit_lifetime(span),\n "}, {"sha": "993e1aacb4e4d29386b1001bedd86fa2bdcf566a", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 50, "deletions": 30, "changes": 80, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -477,6 +477,48 @@ pub enum BuiltinLintDiagnostics {\n     RedundantImport(Vec<(Span, bool)>, ast::Ident),\n }\n \n+pub(crate) fn add_elided_lifetime_in_path_suggestion(\n+    sess: &Session,\n+    db: &mut DiagnosticBuilder<'_>,\n+    n: usize,\n+    path_span: Span,\n+    incl_angl_brckt: bool,\n+    insertion_span: Span,\n+    anon_lts: String,\n+) {\n+    let (replace_span, suggestion) = if incl_angl_brckt {\n+        (insertion_span, anon_lts)\n+    } else {\n+        // When possible, prefer a suggestion that replaces the whole\n+        // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n+        // at a point (which makes for an ugly/confusing label)\n+        if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n+            // But our spans can get out of whack due to macros; if the place we think\n+            // we want to insert `'_` isn't even within the path expression's span, we\n+            // should bail out of making any suggestion rather than panicking on a\n+            // subtract-with-overflow or string-slice-out-out-bounds (!)\n+            // FIXME: can we do better?\n+            if insertion_span.lo().0 < path_span.lo().0 {\n+                return;\n+            }\n+            let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n+            if insertion_index > snippet.len() {\n+                return;\n+            }\n+            let (before, after) = snippet.split_at(insertion_index);\n+            (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n+        } else {\n+            (insertion_span, anon_lts)\n+        }\n+    };\n+    db.span_suggestion(\n+        replace_span,\n+        &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n+        suggestion,\n+        Applicability::MachineApplicable\n+    );\n+}\n+\n impl BuiltinLintDiagnostics {\n     pub fn run(self, sess: &Session, db: &mut DiagnosticBuilder<'_>) {\n         match self {\n@@ -521,36 +563,14 @@ impl BuiltinLintDiagnostics {\n             BuiltinLintDiagnostics::ElidedLifetimesInPaths(\n                 n, path_span, incl_angl_brckt, insertion_span, anon_lts\n             ) => {\n-                let (replace_span, suggestion) = if incl_angl_brckt {\n-                    (insertion_span, anon_lts)\n-                } else {\n-                    // When possible, prefer a suggestion that replaces the whole\n-                    // `Path<T>` expression with `Path<'_, T>`, rather than inserting `'_, `\n-                    // at a point (which makes for an ugly/confusing label)\n-                    if let Ok(snippet) = sess.source_map().span_to_snippet(path_span) {\n-                        // But our spans can get out of whack due to macros; if the place we think\n-                        // we want to insert `'_` isn't even within the path expression's span, we\n-                        // should bail out of making any suggestion rather than panicking on a\n-                        // subtract-with-overflow or string-slice-out-out-bounds (!)\n-                        // FIXME: can we do better?\n-                        if insertion_span.lo().0 < path_span.lo().0 {\n-                            return;\n-                        }\n-                        let insertion_index = (insertion_span.lo().0 - path_span.lo().0) as usize;\n-                        if insertion_index > snippet.len() {\n-                            return;\n-                        }\n-                        let (before, after) = snippet.split_at(insertion_index);\n-                        (path_span, format!(\"{}{}{}\", before, anon_lts, after))\n-                    } else {\n-                        (insertion_span, anon_lts)\n-                    }\n-                };\n-                db.span_suggestion(\n-                    replace_span,\n-                    &format!(\"indicate the anonymous lifetime{}\", if n >= 2 { \"s\" } else { \"\" }),\n-                    suggestion,\n-                    Applicability::MachineApplicable\n+                add_elided_lifetime_in_path_suggestion(\n+                    sess,\n+                    db,\n+                    n,\n+                    path_span,\n+                    incl_angl_brckt,\n+                    insertion_span,\n+                    anon_lts,\n                 );\n             }\n             BuiltinLintDiagnostics::UnknownCrateTypes(span, note, sugg) => {"}, {"sha": "8db7631ef41086cd70636b123ef234748a49c2cc", "filename": "src/test/ui/async-fn-path-elision.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fasync-fn-path-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fasync-fn-path-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-path-elision.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -0,0 +1,16 @@\n+// edition:2018\n+\n+#![feature(async_await, await_macro)]\n+#![allow(dead_code)]\n+\n+struct HasLifetime<'a>(&'a bool);\n+\n+async fn error(lt: HasLifetime) { //~ ERROR implicit elided lifetime not allowed here\n+    if *lt.0 {}\n+}\n+\n+fn no_error(lt: HasLifetime) {\n+    if *lt.0 {}\n+}\n+\n+fn main() {}"}, {"sha": "3b311baba01de961534b7d9b12b7006f5fa1b287", "filename": "src/test/ui/async-fn-path-elision.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fasync-fn-path-elision.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fasync-fn-path-elision.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-fn-path-elision.stderr?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -0,0 +1,8 @@\n+error[E0726]: implicit elided lifetime not allowed here\n+  --> $DIR/async-fn-path-elision.rs:8:20\n+   |\n+LL | async fn error(lt: HasLifetime) {\n+   |                    ^^^^^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n+\n+error: aborting due to previous error\n+"}, {"sha": "40a52efc7f9fc0860dc774477c5a9c13832f8266", "filename": "src/test/ui/impl-header-lifetime-elision/path-elided.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -5,7 +5,7 @@ trait MyTrait { }\n struct Foo<'a> { x: &'a u32 }\n \n impl MyTrait for Foo {\n-    //~^ ERROR missing lifetime specifier\n+    //~^ ERROR implicit elided lifetime not allowed here\n }\n \n fn main() {}"}, {"sha": "6500a2a55f6677d807922ec67f2cff89d53f6fe3", "filename": "src/test/ui/impl-header-lifetime-elision/path-elided.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Fpath-elided.stderr?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -1,9 +1,8 @@\n-error[E0106]: missing lifetime specifier\n+error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/path-elided.rs:7:18\n    |\n LL | impl MyTrait for Foo {\n-   |                  ^^^ expected lifetime parameter\n+   |                  ^^^- help: indicate the anonymous lifetime: `<'_>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "102d259b0c87ab5e9976df924dce3951c6448e77", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -3,7 +3,7 @@\n trait MyTrait<'a> { }\n \n impl MyTrait for u32 {\n-    //~^ ERROR missing lifetime specifier\n+    //~^ ERROR implicit elided lifetime not allowed here\n }\n \n fn main() {}"}, {"sha": "ad97cb0abd6239bc34ba3c0f04e0034a0ad0e8e8", "filename": "src/test/ui/impl-header-lifetime-elision/trait-elided.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-header-lifetime-elision%2Ftrait-elided.stderr?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -1,9 +1,8 @@\n-error[E0106]: missing lifetime specifier\n+error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/trait-elided.rs:5:6\n    |\n LL | impl MyTrait for u32 {\n-   |      ^^^^^^^ expected lifetime parameter\n+   |      ^^^^^^^- help: indicate the anonymous lifetime: `<'_>`\n \n error: aborting due to previous error\n \n-For more information about this error, try `rustc --explain E0106`."}, {"sha": "020585136856bd35070624c7a0e54bcb44a019fe", "filename": "src/test/ui/issues/issue-10412.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.rs?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -5,7 +5,8 @@ trait Serializable<'self, T> { //~ ERROR lifetimes cannot use keyword names\n \n impl<'self> Serializable<str> for &'self str { //~ ERROR lifetimes cannot use keyword names\n     //~^ ERROR lifetimes cannot use keyword names\n-    //~| ERROR missing lifetime specifier\n+    //~| ERROR implicit elided lifetime not allowed here\n+    //~| ERROR the size for values of type `str` cannot be known at compilation time\n     fn serialize(val : &'self str) -> Vec<u8> { //~ ERROR lifetimes cannot use keyword names\n         vec![1]\n     }"}, {"sha": "0793dd99b4d12578d71987cb9770af50e6468e2e", "filename": "src/test/ui/issues/issue-10412.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca0d365386a640ba17b9b436a3dafff079cd71e/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-10412.stderr?ref=3ca0d365386a640ba17b9b436a3dafff079cd71e", "patch": "@@ -29,23 +29,32 @@ LL | impl<'self> Serializable<str> for &'self str {\n    |                                    ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:9:25\n+  --> $DIR/issue-10412.rs:10:25\n    |\n LL |     fn serialize(val : &'self str) -> Vec<u8> {\n    |                         ^^^^^\n \n error: lifetimes cannot use keyword names\n-  --> $DIR/issue-10412.rs:12:37\n+  --> $DIR/issue-10412.rs:13:37\n    |\n LL |     fn deserialize(repr: &[u8]) -> &'self str {\n    |                                     ^^^^^\n \n-error[E0106]: missing lifetime specifier\n+error[E0726]: implicit elided lifetime not allowed here\n   --> $DIR/issue-10412.rs:6:13\n    |\n LL | impl<'self> Serializable<str> for &'self str {\n-   |             ^^^^^^^^^^^^^^^^^ expected lifetime parameter\n+   |             ^^^^^^^^^^^^^^^^^ help: indicate the anonymous lifetime: `Serializable<'_, str>`\n \n-error: aborting due to 8 previous errors\n+error[E0277]: the size for values of type `str` cannot be known at compilation time\n+  --> $DIR/issue-10412.rs:6:13\n+   |\n+LL | impl<'self> Serializable<str> for &'self str {\n+   |             ^^^^^^^^^^^^^^^^^ doesn't have a size known at compile-time\n+   |\n+   = help: the trait `std::marker::Sized` is not implemented for `str`\n+   = note: to learn more, visit <https://doc.rust-lang.org/book/ch19-04-advanced-types.html#dynamically-sized-types-and-the-sized-trait>\n+\n+error: aborting due to 9 previous errors\n \n-For more information about this error, try `rustc --explain E0106`.\n+For more information about this error, try `rustc --explain E0277`."}]}