{"sha": "0de379fdf01a9ea42815a9949ec4f9522def3d88", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBkZTM3OWZkZjAxYTllYTQyODE1YTk5NDllYzRmOTUyMmRlZjNkODg=", "commit": {"author": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-08-26T01:56:07Z"}, "committer": {"name": "Brian Anderson", "email": "andersrb@gmail.com", "date": "2012-08-26T01:56:07Z"}, "message": "Merge pull request #3282 from killerswan/modes5\n\nRemoving more deprecated modes", "tree": {"sha": "a17305d0af7b03faacd4b0354b9e5b5f376c7c48", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a17305d0af7b03faacd4b0354b9e5b5f376c7c48"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0de379fdf01a9ea42815a9949ec4f9522def3d88", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0de379fdf01a9ea42815a9949ec4f9522def3d88", "html_url": "https://github.com/rust-lang/rust/commit/0de379fdf01a9ea42815a9949ec4f9522def3d88", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0de379fdf01a9ea42815a9949ec4f9522def3d88/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ed1ab9a598fa2644d6a61ff35d04b680cd21cd67", "url": "https://api.github.com/repos/rust-lang/rust/commits/ed1ab9a598fa2644d6a61ff35d04b680cd21cd67", "html_url": "https://github.com/rust-lang/rust/commit/ed1ab9a598fa2644d6a61ff35d04b680cd21cd67"}, {"sha": "4f326dd6504b6848e7b9cc831940d5452d873f56", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f326dd6504b6848e7b9cc831940d5452d873f56", "html_url": "https://github.com/rust-lang/rust/commit/4f326dd6504b6848e7b9cc831940d5452d873f56"}], "stats": {"total": 88, "additions": 50, "deletions": 38}, "files": [{"sha": "a427232467022e5a47bcc747ee2ea480e04dc5f0", "filename": "src/libstd/md4.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Fmd4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Fmd4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmd4.rs?ref=0de379fdf01a9ea42815a9949ec4f9522def3d88", "patch": "@@ -1,11 +1,14 @@\n-fn md4(msg: ~[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n+fn md4(msg: &[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     // subtle: if orig_len is merely uint, then the code below\n     // which performs shifts by 32 bits or more has undefined\n     // results.\n     let orig_len: u64 = (vec::len(msg) * 8u) as u64;\n \n     // pad message\n-    let mut msg = vec::append(msg, ~[0x80u8]);\n+    let mut msg = vec::append(vec::from_slice(msg), ~[0x80u8]);\n     let mut bitlen = orig_len + 8u64;\n     while (bitlen + 64u64) % 512u64 > 0u64 {\n         vec::push(msg, 0u8);\n@@ -82,7 +85,7 @@ fn md4(msg: ~[u8]) -> {a: u32, b: u32, c: u32, d: u32} {\n     return {a: a, b: b, c: c, d: d};\n }\n \n-fn md4_str(msg: ~[u8]) -> ~str {\n+fn md4_str(msg: &[u8]) -> ~str {\n     let {a, b, c, d} = md4(msg);\n     fn app(a: u32, b: u32, c: u32, d: u32, f: fn(u32)) {\n         f(a); f(b); f(c); f(d);\n@@ -100,7 +103,7 @@ fn md4_str(msg: ~[u8]) -> ~str {\n     result\n }\n \n-fn md4_text(msg: ~str) -> ~str { md4_str(str::to_bytes(msg)) }\n+fn md4_text(msg: &str) -> ~str { md4_str(str::to_bytes(msg)) }\n \n #[test]\n fn test_md4() {"}, {"sha": "e3c1b173c1943b2cdacef061a58f5df5ac626e77", "filename": "src/libstd/sha1.rs", "status": "modified", "additions": 39, "deletions": 33, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Fsha1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Fsha1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsha1.rs?ref=0de379fdf01a9ea42815a9949ec4f9522def3d88", "patch": "@@ -12,6 +12,9 @@\n  * the `reset` method.\n  */\n \n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n /*\n  * A SHA-1 implementation derived from Paul E. Jones's reference\n  * implementation, which is written for clarity, not speed. At some\n@@ -22,9 +25,9 @@ export sha1;\n /// The SHA-1 interface\n trait sha1 {\n     /// Provide message input as bytes\n-    fn input(~[u8]);\n+    fn input((&[u8]));\n     /// Provide message input as string\n-    fn input_str(~str);\n+    fn input_str((&str));\n     /**\n      * Read the digest as a vector of 20 bytes. After calling this no further\n      * input may be provided until reset is called.\n@@ -60,7 +63,7 @@ fn sha1() -> sha1 {\n          mut computed: bool,\n          work_buf: @~[mut u32]};\n \n-    fn add_input(st: sha1state, msg: ~[u8]) {\n+    fn add_input(st: &sha1state, msg: &[u8]) {\n         assert (!st.computed);\n         for vec::each(msg) |element| {\n             st.msg_block[st.msg_block_idx] = element;\n@@ -76,7 +79,7 @@ fn sha1() -> sha1 {\n             if st.msg_block_idx == msg_block_len { process_msg_block(st); }\n         }\n     }\n-    fn process_msg_block(st: sha1state) {\n+    fn process_msg_block(st: &sha1state) {\n         assert (vec::len(st.h) == digest_buf_len);\n         assert (vec::len(*st.work_buf) == work_buf_len);\n         let mut t: int; // Loop counter\n@@ -155,10 +158,10 @@ fn sha1() -> sha1 {\n     fn circular_shift(bits: u32, word: u32) -> u32 {\n         return word << bits | word >> 32u32 - bits;\n     }\n-    fn mk_result(st: sha1state) -> ~[u8] {\n-        if !st.computed { pad_msg(st); st.computed = true; }\n+    fn mk_result(st: &sha1state) -> ~[u8] {\n+        if !(*st).computed { pad_msg(st); (*st).computed = true; }\n         let mut rs: ~[u8] = ~[];\n-        for vec::each_mut(st.h) |ptr_hpart| {\n+        for vec::each_mut((*st).h) |ptr_hpart| {\n             let hpart = *ptr_hpart;\n             let a = (hpart >> 24u32 & 0xFFu32) as u8;\n             let b = (hpart >> 16u32 & 0xFFu32) as u8;\n@@ -178,40 +181,40 @@ fn sha1() -> sha1 {\n      * call process_msg_block() appropriately.  When it returns, it\n      * can be assumed that the message digest has been computed.\n      */\n-    fn pad_msg(st: sha1state) {\n-        assert (vec::len(st.msg_block) == msg_block_len);\n+    fn pad_msg(st: &sha1state) {\n+        assert (vec::len((*st).msg_block) == msg_block_len);\n \n         /*\n          * Check to see if the current message block is too small to hold\n          * the initial padding bits and length.  If so, we will pad the\n          * block, process it, and then continue padding into a second block.\n          */\n-        if st.msg_block_idx > 55u {\n-            st.msg_block[st.msg_block_idx] = 0x80u8;\n-            st.msg_block_idx += 1u;\n-            while st.msg_block_idx < msg_block_len {\n-                st.msg_block[st.msg_block_idx] = 0u8;\n-                st.msg_block_idx += 1u;\n+        if (*st).msg_block_idx > 55u {\n+            (*st).msg_block[(*st).msg_block_idx] = 0x80u8;\n+            (*st).msg_block_idx += 1u;\n+            while (*st).msg_block_idx < msg_block_len {\n+                (*st).msg_block[(*st).msg_block_idx] = 0u8;\n+                (*st).msg_block_idx += 1u;\n             }\n             process_msg_block(st);\n         } else {\n-            st.msg_block[st.msg_block_idx] = 0x80u8;\n-            st.msg_block_idx += 1u;\n+            (*st).msg_block[(*st).msg_block_idx] = 0x80u8;\n+            (*st).msg_block_idx += 1u;\n         }\n-        while st.msg_block_idx < 56u {\n-            st.msg_block[st.msg_block_idx] = 0u8;\n-            st.msg_block_idx += 1u;\n+        while (*st).msg_block_idx < 56u {\n+            (*st).msg_block[(*st).msg_block_idx] = 0u8;\n+            (*st).msg_block_idx += 1u;\n         }\n \n         // Store the message length as the last 8 octets\n-        st.msg_block[56] = (st.len_high >> 24u32 & 0xFFu32) as u8;\n-        st.msg_block[57] = (st.len_high >> 16u32 & 0xFFu32) as u8;\n-        st.msg_block[58] = (st.len_high >> 8u32 & 0xFFu32) as u8;\n-        st.msg_block[59] = (st.len_high & 0xFFu32) as u8;\n-        st.msg_block[60] = (st.len_low >> 24u32 & 0xFFu32) as u8;\n-        st.msg_block[61] = (st.len_low >> 16u32 & 0xFFu32) as u8;\n-        st.msg_block[62] = (st.len_low >> 8u32 & 0xFFu32) as u8;\n-        st.msg_block[63] = (st.len_low & 0xFFu32) as u8;\n+        (*st).msg_block[56] = ((*st).len_high >> 24u32 & 0xFFu32) as u8;\n+        (*st).msg_block[57] = ((*st).len_high >> 16u32 & 0xFFu32) as u8;\n+        (*st).msg_block[58] = ((*st).len_high >> 8u32 & 0xFFu32) as u8;\n+        (*st).msg_block[59] = ((*st).len_high & 0xFFu32) as u8;\n+        (*st).msg_block[60] = ((*st).len_low >> 24u32 & 0xFFu32) as u8;\n+        (*st).msg_block[61] = ((*st).len_low >> 16u32 & 0xFFu32) as u8;\n+        (*st).msg_block[62] = ((*st).len_low >> 8u32 & 0xFFu32) as u8;\n+        (*st).msg_block[63] = ((*st).len_low & 0xFFu32) as u8;\n         process_msg_block(st);\n     }\n \n@@ -228,13 +231,16 @@ fn sha1() -> sha1 {\n             self.h[4] = 0xC3D2E1F0u32;\n             self.computed = false;\n         }\n-        fn input(msg: ~[u8]) { add_input(self, msg); }\n-        fn input_str(msg: ~str) { add_input(self, str::to_bytes(msg)); }\n-        fn result() -> ~[u8] { return mk_result(self); }\n+        fn input(msg: &[u8]) { add_input(&self, msg); }\n+        fn input_str(msg: &str) {\n+            let bs = str::to_bytes(msg);\n+            add_input(&self, bs);\n+        }\n+        fn result() -> ~[u8] { return mk_result(&self); }\n         fn result_str() -> ~str {\n-            let r = mk_result(self);\n+            let rr = mk_result(&self);\n             let mut s = ~\"\";\n-            for vec::each(r) |b| { s += uint::to_str(b as uint, 16u); }\n+            for vec::each(rr) |b| { s += uint::to_str(b as uint, 16u); }\n             return s;\n         }\n     }"}, {"sha": "85547925c5453a61f428d53effe5de7587843297", "filename": "src/libstd/timer.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Ftimer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0de379fdf01a9ea42815a9949ec4f9522def3d88/src%2Flibstd%2Ftimer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftimer.rs?ref=0de379fdf01a9ea42815a9949ec4f9522def3d88", "patch": "@@ -1,5 +1,8 @@\n //! Utilities that leverage libuv's `uv_timer_*` API\n \n+#[forbid(deprecated_mode)];\n+#[forbid(deprecated_pattern)];\n+\n import uv = uv;\n import uv::iotask;\n import iotask::iotask;\n@@ -24,7 +27,7 @@ export delayed_send, sleep, recv_timeout;\n  * * val - a value of type T to send over the provided `ch`\n  */\n fn delayed_send<T: copy send>(iotask: iotask,\n-                              msecs: uint, ch: comm::Chan<T>, val: T) {\n+                              msecs: uint, ch: comm::Chan<T>, +val: T) {\n         unsafe {\n             let timer_done_po = core::comm::port::<()>();\n             let timer_done_ch = core::comm::chan(timer_done_po);"}]}