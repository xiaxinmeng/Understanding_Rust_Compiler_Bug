{"sha": "4fb260bb32a2da7d7ea63b759eef77072a95614b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRmYjI2MGJiMzJhMmRhN2Q3ZWE2M2I3NTllZWY3NzA3MmE5NTYxNGI=", "commit": {"author": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-07-04T17:41:30Z"}, "committer": {"name": "Gary Guo", "email": "gary@garyguo.net", "date": "2020-07-19T22:33:12Z"}, "message": "Guard against non-monomorphized type_id intrinsic call", "tree": {"sha": "9c5263132833db4d3943bbc163dcbb036b7d19e7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c5263132833db4d3943bbc163dcbb036b7d19e7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4fb260bb32a2da7d7ea63b759eef77072a95614b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4fb260bb32a2da7d7ea63b759eef77072a95614b", "html_url": "https://github.com/rust-lang/rust/commit/4fb260bb32a2da7d7ea63b759eef77072a95614b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4fb260bb32a2da7d7ea63b759eef77072a95614b/comments", "author": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nbdd0121", "id": 4065244, "node_id": "MDQ6VXNlcjQwNjUyNDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/4065244?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nbdd0121", "html_url": "https://github.com/nbdd0121", "followers_url": "https://api.github.com/users/nbdd0121/followers", "following_url": "https://api.github.com/users/nbdd0121/following{/other_user}", "gists_url": "https://api.github.com/users/nbdd0121/gists{/gist_id}", "starred_url": "https://api.github.com/users/nbdd0121/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nbdd0121/subscriptions", "organizations_url": "https://api.github.com/users/nbdd0121/orgs", "repos_url": "https://api.github.com/users/nbdd0121/repos", "events_url": "https://api.github.com/users/nbdd0121/events{/privacy}", "received_events_url": "https://api.github.com/users/nbdd0121/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d7f94516345a36ddfcd68cbdf1df835d356795c3", "url": "https://api.github.com/repos/rust-lang/rust/commits/d7f94516345a36ddfcd68cbdf1df835d356795c3", "html_url": "https://github.com/rust-lang/rust/commit/d7f94516345a36ddfcd68cbdf1df835d356795c3"}], "stats": {"total": 52, "additions": 50, "deletions": 2}, "files": [{"sha": "29549041d258cc285d8db7e636da3e5638a22f31", "filename": "src/librustc_mir/interpret/intrinsics.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics.rs?ref=4fb260bb32a2da7d7ea63b759eef77072a95614b", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::mir::{\n };\n use rustc_middle::ty;\n use rustc_middle::ty::subst::SubstsRef;\n-use rustc_middle::ty::{Ty, TyCtxt};\n+use rustc_middle::ty::{Ty, TyCtxt, TypeFoldable};\n use rustc_span::symbol::{sym, Symbol};\n use rustc_target::abi::{Abi, LayoutOf as _, Primitive, Size};\n \n@@ -54,6 +54,9 @@ crate fn eval_nullary_intrinsic<'tcx>(\n     let name = tcx.item_name(def_id);\n     Ok(match name {\n         sym::type_name => {\n+            if tp_ty.needs_subst() {\n+                throw_inval!(TooGeneric);\n+            }\n             let alloc = type_name::alloc_type_name(tcx, tp_ty);\n             ConstValue::Slice { data: alloc, start: 0, end: alloc.len() }\n         }\n@@ -68,7 +71,12 @@ crate fn eval_nullary_intrinsic<'tcx>(\n             };\n             ConstValue::from_machine_usize(n, &tcx)\n         }\n-        sym::type_id => ConstValue::from_u64(tcx.type_id_hash(tp_ty)),\n+        sym::type_id => {\n+            if tp_ty.needs_subst() {\n+                throw_inval!(TooGeneric);\n+            }\n+            ConstValue::from_u64(tcx.type_id_hash(tp_ty))\n+        }\n         sym::variant_count => {\n             if let ty::Adt(ref adt, _) = tp_ty.kind {\n                 ConstValue::from_machine_usize(adt.variants.len() as u64, &tcx)"}, {"sha": "ef141791c2cc8dc29bfdeaa0bfa09b7b892ac5f8", "filename": "src/test/ui/consts/issue-73976.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.rs?ref=4fb260bb32a2da7d7ea63b759eef77072a95614b", "patch": "@@ -0,0 +1,26 @@\n+// This test is from #73976. We previously did not check if a type is monomorphized\n+// before calculating its type id, which leads to the bizzare behaviour below that\n+// TypeId of a generic type does not match itself.\n+//\n+// This test case should either run-pass or be rejected at compile time.\n+// Currently we just disallow this usage and require pattern is monomorphic.\n+\n+#![feature(const_type_id)]\n+\n+use std::any::TypeId;\n+\n+pub struct GetTypeId<T>(T);\n+\n+impl<T: 'static> GetTypeId<T> {\n+    pub const VALUE: TypeId = TypeId::of::<T>();\n+}\n+\n+const fn check_type_id<T: 'static>() -> bool {\n+    matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+    //~^ ERROR could not evaluate constant pattern\n+    //~| ERROR could not evaluate constant pattern\n+}\n+\n+fn main() {\n+    assert!(check_type_id::<usize>());\n+}"}, {"sha": "dbb7690b849c85f730504baffed97954e165b356", "filename": "src/test/ui/consts/issue-73976.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/4fb260bb32a2da7d7ea63b759eef77072a95614b/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fissue-73976.stderr?ref=4fb260bb32a2da7d7ea63b759eef77072a95614b", "patch": "@@ -0,0 +1,14 @@\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976.rs:19:37\n+   |\n+LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: could not evaluate constant pattern\n+  --> $DIR/issue-73976.rs:19:37\n+   |\n+LL |     matches!(GetTypeId::<T>::VALUE, GetTypeId::<T>::VALUE)\n+   |                                     ^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}