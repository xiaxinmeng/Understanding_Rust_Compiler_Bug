{"sha": "9956d4f99d021fa255d007dc17f23a3b0cd351e9", "node_id": "C_kwDOAAsO6NoAKDk5NTZkNGY5OWQwMjFmYTI1NWQwMDdkYzE3ZjIzYTNiMGNkMzUxZTk", "commit": {"author": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-03-30T08:45:36Z"}, "committer": {"name": "David Wood", "email": "david.wood@huawei.com", "date": "2022-04-05T06:01:02Z"}, "message": "macros: add args for non-subdiagnostic fields\n\nNon-subdiagnostic fields (i.e. those that don't have `#[label]`\nattributes or similar and are just additional context) have to be added\nas arguments for Fluent messages to refer them. This commit extends the\n`SessionDiagnostic` derive to do this for all fields that do not have\nattributes and introduces an `IntoDiagnosticArg` trait that is\nimplemented on all types that can be converted to a argument for Fluent.\n\nSigned-off-by: David Wood <david.wood@huawei.com>", "tree": {"sha": "ca4296ee715ff51f04bbf3d728f14a6752f04e9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca4296ee715ff51f04bbf3d728f14a6752f04e9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9956d4f99d021fa255d007dc17f23a3b0cd351e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9956d4f99d021fa255d007dc17f23a3b0cd351e9", "html_url": "https://github.com/rust-lang/rust/commit/9956d4f99d021fa255d007dc17f23a3b0cd351e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9956d4f99d021fa255d007dc17f23a3b0cd351e9/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8677fef192a1d121b9123aa481422505833b57fe", "url": "https://api.github.com/repos/rust-lang/rust/commits/8677fef192a1d121b9123aa481422505833b57fe", "html_url": "https://github.com/rust-lang/rust/commit/8677fef192a1d121b9123aa481422505833b57fe"}], "stats": {"total": 152, "additions": 122, "deletions": 30}, "files": [{"sha": "74abffa7dfac8e533f5a621d84a8da421f2d33af", "filename": "compiler/rustc_errors/src/diagnostic.rs", "status": "modified", "additions": 48, "deletions": 0, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -8,6 +8,7 @@ use rustc_error_messages::FluentValue;\n use rustc_lint_defs::{Applicability, LintExpectationId};\n use rustc_serialize::json::Json;\n use rustc_span::edition::LATEST_STABLE_EDITION;\n+use rustc_span::symbol::{Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n use std::borrow::Cow;\n use std::fmt;\n@@ -31,6 +32,44 @@ pub enum DiagnosticArgValue<'source> {\n     Number(usize),\n }\n \n+/// Converts a value of a type into a `DiagnosticArg` (typically a field of a `SessionDiagnostic`\n+/// struct). Implemented as a custom trait rather than `From` so that it is implemented on the type\n+/// being converted rather than on `DiagnosticArgValue`, which enables types from other `rustc_*`\n+/// crates to implement this.\n+pub trait IntoDiagnosticArg {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static>;\n+}\n+\n+impl IntoDiagnosticArg for String {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Str(Cow::Owned(self))\n+    }\n+}\n+\n+impl IntoDiagnosticArg for Symbol {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_ident_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl IntoDiagnosticArg for Ident {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl<'a> IntoDiagnosticArg for &'a str {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        self.to_string().into_diagnostic_arg()\n+    }\n+}\n+\n+impl IntoDiagnosticArg for usize {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        DiagnosticArgValue::Number(self)\n+    }\n+}\n+\n impl<'source> Into<FluentValue<'source>> for DiagnosticArgValue<'source> {\n     fn into(self) -> FluentValue<'source> {\n         match self {\n@@ -788,6 +827,15 @@ impl Diagnostic {\n         &self.args\n     }\n \n+    pub fn set_arg(\n+        &mut self,\n+        name: impl Into<Cow<'static, str>>,\n+        arg: DiagnosticArgValue<'static>,\n+    ) -> &mut Self {\n+        self.args.push((name.into(), arg.into()));\n+        self\n+    }\n+\n     pub fn styled_message(&self) -> &Vec<(DiagnosticMessage, Style)> {\n         &self.message\n     }"}, {"sha": "2cee1354cc74b1e9c923c1541e791a18e8d05418", "filename": "compiler/rustc_errors/src/diagnostic_builder.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Fdiagnostic_builder.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -1,8 +1,10 @@\n+use crate::diagnostic::DiagnosticArgValue;\n use crate::{Diagnostic, DiagnosticId, DiagnosticMessage, DiagnosticStyledString, ErrorGuaranteed};\n use crate::{Handler, Level, MultiSpan, StashKey};\n use rustc_lint_defs::Applicability;\n \n use rustc_span::Span;\n+use std::borrow::Cow;\n use std::fmt::{self, Debug};\n use std::marker::PhantomData;\n use std::ops::{Deref, DerefMut};\n@@ -536,6 +538,11 @@ impl<'a, G: EmissionGuarantee> DiagnosticBuilder<'a, G> {\n     forward!(pub fn set_primary_message(&mut self, msg: impl Into<String>) -> &mut Self);\n     forward!(pub fn set_span(&mut self, sp: impl Into<MultiSpan>) -> &mut Self);\n     forward!(pub fn code(&mut self, s: DiagnosticId) -> &mut Self);\n+    forward!(pub fn set_arg(\n+        &mut self,\n+        name: impl Into<Cow<'static, str>>,\n+        arg: DiagnosticArgValue<'static>,\n+    ) -> &mut Self);\n }\n \n impl<G: EmissionGuarantee> Debug for DiagnosticBuilder<'_, G> {"}, {"sha": "94db957d29900295e0dcd092ae7b9f9e4973c707", "filename": "compiler/rustc_errors/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_errors%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_errors%2Fsrc%2Flib.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -406,7 +406,8 @@ impl fmt::Display for ExplicitBug {\n impl error::Error for ExplicitBug {}\n \n pub use diagnostic::{\n-    Diagnostic, DiagnosticArg, DiagnosticId, DiagnosticStyledString, SubDiagnostic,\n+    Diagnostic, DiagnosticArg, DiagnosticArgValue, DiagnosticId, DiagnosticStyledString,\n+    IntoDiagnosticArg, SubDiagnostic,\n };\n pub use diagnostic_builder::{DiagnosticBuilder, EmissionGuarantee};\n use std::backtrace::Backtrace;"}, {"sha": "e53764181243271c5ef7db15f4010ab4a138e7d1", "filename": "compiler/rustc_macros/src/session_diagnostic.rs", "status": "modified", "additions": 54, "deletions": 24, "changes": 78, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_macros%2Fsrc%2Fsession_diagnostic.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -157,7 +157,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n         }\n     }\n     fn into_tokens(self) -> proc_macro2::TokenStream {\n-        let SessionDiagnosticDerive { structure, mut builder } = self;\n+        let SessionDiagnosticDerive { mut structure, mut builder } = self;\n \n         let ast = structure.ast();\n         let attrs = &ast.attrs;\n@@ -175,11 +175,17 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     }\n                 };\n \n-                let body = structure.each(|field_binding| {\n+                // Generates calls to `span_label` and similar functions based on the attributes\n+                // on fields. Code for suggestions uses formatting machinery and the value of\n+                // other fields - because any given field can be referenced multiple times, it\n+                // should be accessed through a borrow. When passing fields to `set_arg` (which\n+                // happens below) for Fluent, we want to move the data, so that has to happen\n+                // in a separate pass over the fields.\n+                let attrs = structure.each(|field_binding| {\n                     let field = field_binding.ast();\n                     let result = field.attrs.iter().map(|attr| {\n                         builder\n-                            .generate_field_code(\n+                            .generate_field_attr_code(\n                                 attr,\n                                 FieldInfo {\n                                     vis: &field.vis,\n@@ -190,10 +196,30 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                             )\n                             .unwrap_or_else(|v| v.to_compile_error())\n                     });\n-                    return quote! {\n-                        #(#result);*\n-                    };\n+\n+                    quote! { #(#result);* }\n                 });\n+\n+                // When generating `set_arg` calls, move data rather than borrow it to avoid\n+                // requiring clones - this must therefore be the last use of each field (for\n+                // example, any formatting machinery that might refer to a field should be\n+                // generated already).\n+                structure.bind_with(|_| synstructure::BindStyle::Move);\n+                let args = structure.each(|field_binding| {\n+                    let field = field_binding.ast();\n+                    // When a field has attributes like `#[label]` or `#[note]` then it doesn't\n+                    // need to be passed as an argument to the diagnostic. But when a field has no\n+                    // attributes then it must be passed as an argument to the diagnostic so that\n+                    // it can be referred to by Fluent messages.\n+                    if field.attrs.is_empty() {\n+                        let diag = &builder.diag;\n+                        let ident = &field_binding.binding;\n+                        quote! { #diag.set_arg(stringify!(#ident), #field_binding.into_diagnostic_arg()); }\n+                    } else {\n+                        quote! {}\n+                    }\n+                });\n+\n                 // Finally, putting it altogether.\n                 match builder.kind {\n                     None => {\n@@ -210,7 +236,10 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                                 let mut #diag = #sess.struct_err_with_code(\"\", rustc_errors::DiagnosticId::Error(#code));\n                                 #preamble\n                                 match self {\n-                                    #body\n+                                    #attrs\n+                                }\n+                                match self {\n+                                    #args\n                                 }\n                                 #diag\n                             }\n@@ -236,6 +265,7 @@ impl<'a> SessionDiagnosticDerive<'a> {\n                     self,\n                     #sess: &'__session_diagnostic_sess rustc_session::Session\n                 ) -> rustc_errors::DiagnosticBuilder<'__session_diagnostic_sess, rustc_errors::ErrorGuaranteed> {\n+                    use rustc_errors::IntoDiagnosticArg;\n                     #implementation\n                 }\n             }\n@@ -345,15 +375,13 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         }\n     }\n \n-    fn generate_field_code(\n+    fn generate_field_attr_code(\n         &mut self,\n         attr: &syn::Attribute,\n         info: FieldInfo<'_>,\n     ) -> Result<proc_macro2::TokenStream, SessionDiagnosticDeriveError> {\n         let field_binding = &info.binding.binding;\n-\n         let option_ty = option_inner_ty(&info.ty);\n-\n         let generated_code = self.generate_non_option_field_code(\n             attr,\n             FieldInfo {\n@@ -363,15 +391,16 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                 span: info.span,\n             },\n         )?;\n-        Ok(if option_ty.is_none() {\n-            quote! { #generated_code }\n+\n+        if option_ty.is_none() {\n+            Ok(quote! { #generated_code })\n         } else {\n-            quote! {\n+            Ok(quote! {\n                 if let Some(#field_binding) = #field_binding {\n                     #generated_code\n                 }\n-            }\n-        })\n+            })\n+        }\n     }\n \n     fn generate_non_option_field_code(\n@@ -383,19 +412,20 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n         let field_binding = &info.binding.binding;\n         let name = attr.path.segments.last().unwrap().ident.to_string();\n         let name = name.as_str();\n+\n         // At this point, we need to dispatch based on the attribute key + the\n         // type.\n         let meta = attr.parse_meta()?;\n-        Ok(match meta {\n+        match meta {\n             syn::Meta::NameValue(syn::MetaNameValue { lit: syn::Lit::Str(s), .. }) => {\n                 let formatted_str = self.build_format(&s.value(), attr.span());\n                 match name {\n                     \"message\" => {\n                         if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                            quote! {\n+                            return Ok(quote! {\n                                 #diag.set_span(*#field_binding);\n                                 #diag.set_primary_message(#formatted_str);\n-                            }\n+                            });\n                         } else {\n                             throw_span_err!(\n                                 attr.span().unwrap(),\n@@ -405,9 +435,9 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                     }\n                     \"label\" => {\n                         if type_matches_path(&info.ty, &[\"rustc_span\", \"Span\"]) {\n-                            quote! {\n+                            return Ok(quote! {\n                                 #diag.span_label(*#field_binding, #formatted_str);\n-                            }\n+                            });\n                         } else {\n                             throw_span_err!(\n                                 attr.span().unwrap(),\n@@ -480,11 +510,11 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                             );\n                         };\n                         let code = code.unwrap_or_else(|| quote! { String::new() });\n-                        // Now build it out:\n+\n                         let suggestion_method = format_ident!(\"span_{}\", suggestion_kind);\n-                        quote! {\n+                        return Ok(quote! {\n                             #diag.#suggestion_method(#span, #msg, #code, #applicability);\n-                        }\n+                        });\n                     }\n                     other => throw_span_err!(\n                         list.span().unwrap(),\n@@ -493,7 +523,7 @@ impl<'a> SessionDiagnosticDeriveBuilder<'a> {\n                 }\n             }\n             _ => panic!(\"unhandled meta kind\"),\n-        })\n+        }\n     }\n \n     fn span_and_applicability_of_ty("}, {"sha": "49d0ce52052053773013052b858def723b81aa95", "filename": "compiler/rustc_middle/src/ty/diagnostics.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fdiagnostics.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -8,12 +8,18 @@ use crate::ty::{\n };\n \n use rustc_data_structures::fx::FxHashMap;\n-use rustc_errors::{Applicability, Diagnostic};\n+use rustc_errors::{Applicability, Diagnostic, DiagnosticArgValue, IntoDiagnosticArg};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_hir::{QPath, TyKind, WhereBoundPredicate, WherePredicate};\n use rustc_span::Span;\n \n+impl<'tcx> IntoDiagnosticArg for Ty<'tcx> {\n+    fn into_diagnostic_arg(self) -> DiagnosticArgValue<'static> {\n+        format!(\"{}\", self).into_diagnostic_arg()\n+    }\n+}\n+\n impl<'tcx> Ty<'tcx> {\n     /// Similar to `Ty::is_primitive`, but also considers inferred numeric values to be primitive.\n     pub fn is_primitive_ty(self) -> bool {"}, {"sha": "715d0a0490fae22cb919950a2c3044132d45861e", "filename": "src/test/ui-fulldeps/session-derive-errors.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9956d4f99d021fa255d007dc17f23a3b0cd351e9/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9956d4f99d021fa255d007dc17f23a3b0cd351e9/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fsession-derive-errors.rs?ref=9956d4f99d021fa255d007dc17f23a3b0cd351e9", "patch": "@@ -11,8 +11,8 @@\n #![crate_type = \"lib\"]\n \n extern crate rustc_span;\n-use rustc_span::Span;\n use rustc_span::symbol::Ident;\n+use rustc_span::Span;\n \n extern crate rustc_macros;\n use rustc_macros::SessionDiagnostic;\n@@ -108,7 +108,7 @@ struct ErrorWithMessageAppliedToField {\n #[message = \"This error has a field, and references {name}\"]\n //~^ ERROR `name` doesn't refer to a field on this type\n struct ErrorWithNonexistentField {\n-    span: Span\n+    descr: String,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -117,7 +117,7 @@ struct ErrorWithNonexistentField {\n //~^ ERROR invalid format string: expected `'}'`\n struct ErrorMissingClosingBrace {\n     name: String,\n-    span: Span\n+    val: usize,\n }\n \n #[derive(SessionDiagnostic)]\n@@ -126,7 +126,7 @@ struct ErrorMissingClosingBrace {\n //~^ ERROR invalid format string: unmatched `}`\n struct ErrorMissingOpeningBrace {\n     name: String,\n-    span: Span\n+    val: usize,\n }\n \n #[derive(SessionDiagnostic)]"}]}