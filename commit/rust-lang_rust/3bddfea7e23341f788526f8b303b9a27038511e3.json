{"sha": "3bddfea7e23341f788526f8b303b9a27038511e3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZGRmZWE3ZTIzMzQxZjc4ODUyNmY4YjMwM2I5YTI3MDM4NTExZTM=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-18T12:40:01Z"}, "committer": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2020-09-18T15:42:58Z"}, "message": "build-manifest: stop receiving release numbers from bootstrap", "tree": {"sha": "f4f0894ad8f6b754e484a396fac6c09ba4b8be84", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f4f0894ad8f6b754e484a396fac6c09ba4b8be84"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bddfea7e23341f788526f8b303b9a27038511e3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE1JbYPtLJAsc22U9xPgar6Auq8ZwFAl9k1YMACgkQPgar6Auq\n8ZwVLw/+OrmVgDJXrXj4uDjYHMIT/wNPyjqZG+vFR9o7bmOwWWkToxkl9rfSzjHy\nS542gQUZJTKT2qf8nZYwOZ7yv2yCSfrMorgafofz2sa53IDv60TSMSPx+A980man\njCIY1YDoEUFpEKAWY9fqt+mfQGAE8ZpveykkUZM6EtImom99xJz81Mt2LWpVu3yg\nkbzvyVHPtvaxnaL/+906vSfOWKbrt2kl4aDk92sk0dxVvF5JVr7OEjAmvrDQjDqN\n3uctbXW2KMNS9yMjdvwIm3G6sAtFg2/RyiaxwXne3m0cX2l37QKA7vioRgSz+Eme\nwpDbsmPxNfQqAssUr01xLn/BhykKAkHADh9MdI4nKLQEM8YMK7CKLhh666SBOg+j\nyszFZTpJKXxOzsvTRJDnIYsJOkGSTXsZtGeD34enGyEL4ncmRYeILH7fEo6iP5XQ\narINr3sawfEbA6LKpqA2gsSNxY+2htnvvlEaZwYc85JextJMlVwiCTQ57bPJFpo8\nKMkWzPOEkDu2TVBEOeC9l7a3qupTno71Xu5kNhN3iJSaSxFbo6h4ObbjZnoagweN\n2MEqNmiluBSJdVf+htQqmpP+Z6Tmslo2hylxgJ9OMbJnRxLNNNVGXlXYybof+qte\nYaHT1rfKF7bC4kRUL/yaqXqj/UrKLeX0YsqjWkwlLUe2HkA1V7Q=\n=Jnxs\n-----END PGP SIGNATURE-----", "payload": "tree f4f0894ad8f6b754e484a396fac6c09ba4b8be84\nparent 0917b2123fff6cf5357b5edd5db6d675313ab8bd\nauthor Pietro Albini <pietro@pietroalbini.org> 1600432801 +0200\ncommitter Pietro Albini <pietro@pietroalbini.org> 1600443778 +0200\n\nbuild-manifest: stop receiving release numbers from bootstrap\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bddfea7e23341f788526f8b303b9a27038511e3", "html_url": "https://github.com/rust-lang/rust/commit/3bddfea7e23341f788526f8b303b9a27038511e3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bddfea7e23341f788526f8b303b9a27038511e3/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0917b2123fff6cf5357b5edd5db6d675313ab8bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/0917b2123fff6cf5357b5edd5db6d675313ab8bd", "html_url": "https://github.com/rust-lang/rust/commit/0917b2123fff6cf5357b5edd5db6d675313ab8bd"}], "stats": {"total": 212, "additions": 146, "deletions": 66}, "files": [{"sha": "5a2dd23a7ae4fbe168cbc97de2d1bcf89242dba2", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -230,6 +230,7 @@ dependencies = [\n name = \"build-manifest\"\n version = \"0.1.0\"\n dependencies = [\n+ \"anyhow\",\n  \"serde\",\n  \"serde_json\",\n  \"toml\","}, {"sha": "991f8d4eea38b5fb10cee379c39ecf0b669018fd", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -2356,15 +2356,9 @@ impl Step for HashSign {\n         cmd.arg(sign);\n         cmd.arg(distdir(builder));\n         cmd.arg(today.trim());\n-        cmd.arg(builder.rust_package_vers());\n         cmd.arg(addr);\n-        cmd.arg(builder.package_vers(&builder.release_num(\"cargo\")));\n-        cmd.arg(builder.package_vers(&builder.release_num(\"rls\")));\n-        cmd.arg(builder.package_vers(&builder.release_num(\"rust-analyzer/crates/rust-analyzer\")));\n-        cmd.arg(builder.package_vers(&builder.release_num(\"clippy\")));\n-        cmd.arg(builder.package_vers(&builder.release_num(\"miri\")));\n-        cmd.arg(builder.package_vers(&builder.release_num(\"rustfmt\")));\n-        cmd.arg(builder.llvm_tools_package_vers());\n+        cmd.arg(&builder.config.channel);\n+        cmd.arg(&builder.src);\n \n         builder.create_dir(&distdir(builder));\n "}, {"sha": "2da224a54dce0b2d609db25b4bbe2630eab78f88", "filename": "src/tools/build-manifest/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FCargo.toml?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -8,3 +8,4 @@ edition = \"2018\"\n toml = \"0.5\"\n serde = { version = \"1.0\", features = [\"derive\"] }\n serde_json = \"1.0\"\n+anyhow = \"1.0.32\""}, {"sha": "4d7d9f7da1874e4f45e57de6c3041d4ef2224e33", "filename": "src/tools/build-manifest/README.md", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2FREADME.md?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -21,10 +21,9 @@ Then, you can generate the manifest and all the packages from `path/to/dist` to\n \n ```\n $ BUILD_MANIFEST_DISABLE_SIGNING=1 cargo +nightly run \\\n-    path/to/dist path/to/output 1970-01-01 \\\n-    nightly nightly nightly nightly nightly nightly nightly nightly \\\n-    http://example.com\n+    path/to/dist path/to/output 1970-01-01 http://example.com \\\n+    CHANNEL path/to/rust/repo\n ```\n \n-In the future, if the tool complains about missing arguments just add more\n-`nightly`s in the middle.\n+Remember to replace `CHANNEL` with the channel you produced dist artifacts of\n+and `path/to/rust/repo` with the path to your checkout of the Rust repository."}, {"sha": "c694948bac0ce5180e94e4da4ad2994e981297cf", "filename": "src/tools/build-manifest/src/main.rs", "status": "modified", "additions": 24, "deletions": 53, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fmain.rs?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -6,7 +6,7 @@\n \n mod versions;\n \n-use crate::versions::PkgType;\n+use crate::versions::{PkgType, Versions};\n use serde::Serialize;\n use std::collections::BTreeMap;\n use std::collections::HashMap;\n@@ -227,14 +227,7 @@ macro_rules! t {\n }\n \n struct Builder {\n-    rust_release: String,\n-    cargo_release: String,\n-    rls_release: String,\n-    rust_analyzer_release: String,\n-    clippy_release: String,\n-    rustfmt_release: String,\n-    llvm_tools_release: String,\n-    miri_release: String,\n+    versions: Versions,\n \n     input: PathBuf,\n     output: PathBuf,\n@@ -281,15 +274,9 @@ fn main() {\n     let input = PathBuf::from(args.next().unwrap());\n     let output = PathBuf::from(args.next().unwrap());\n     let date = args.next().unwrap();\n-    let rust_release = args.next().unwrap();\n     let s3_address = args.next().unwrap();\n-    let cargo_release = args.next().unwrap();\n-    let rls_release = args.next().unwrap();\n-    let rust_analyzer_release = args.next().unwrap();\n-    let clippy_release = args.next().unwrap();\n-    let miri_release = args.next().unwrap();\n-    let rustfmt_release = args.next().unwrap();\n-    let llvm_tools_release = args.next().unwrap();\n+    let channel = args.next().unwrap();\n+    let monorepo_path = args.next().unwrap();\n \n     // Do not ask for a passphrase while manually testing\n     let mut passphrase = String::new();\n@@ -299,14 +286,7 @@ fn main() {\n     }\n \n     Builder {\n-        rust_release,\n-        cargo_release,\n-        rls_release,\n-        rust_analyzer_release,\n-        clippy_release,\n-        rustfmt_release,\n-        llvm_tools_release,\n-        miri_release,\n+        versions: Versions::new(&channel, Path::new(&monorepo_path)).unwrap(),\n \n         input,\n         output,\n@@ -363,10 +343,11 @@ impl Builder {\n         self.check_toolstate();\n         self.digest_and_sign();\n         let manifest = self.build_manifest();\n-        self.write_channel_files(&self.rust_release, &manifest);\n \n-        if self.rust_release != \"beta\" && self.rust_release != \"nightly\" {\n-            self.write_channel_files(\"stable\", &manifest);\n+        let rust_version = self.versions.package_version(&PkgType::Rust).unwrap();\n+        self.write_channel_files(self.versions.channel(), &manifest);\n+        if self.versions.channel() != rust_version {\n+            self.write_channel_files(&rust_version, &manifest);\n         }\n     }\n \n@@ -473,7 +454,7 @@ impl Builder {\n         // The compiler libraries are not stable for end users, and they're also huge, so we only\n         // `rustc-dev` for nightly users, and only in the \"complete\" profile. It's still possible\n         // for users to install the additional component manually, if needed.\n-        if self.rust_release == \"nightly\" {\n+        if self.versions.channel() == \"nightly\" {\n             self.extend_profile(\"complete\", &mut manifest.profiles, &[\"rustc-dev\"]);\n             self.extend_profile(\"complete\", &mut manifest.profiles, &[\"rustc-docs\"]);\n         }\n@@ -511,7 +492,7 @@ impl Builder {\n     }\n \n     fn target_host_combination(&mut self, host: &str, manifest: &Manifest) -> Option<Target> {\n-        let filename = self.filename(\"rust\", host);\n+        let filename = self.versions.tarball_name(&PkgType::Rust, host).unwrap();\n         let digest = self.digests.remove(&filename)?;\n         let xz_filename = filename.replace(\".tar.gz\", \".tar.xz\");\n         let xz_digest = self.digests.remove(&xz_filename);\n@@ -610,7 +591,7 @@ impl Builder {\n             .unwrap_or_default(); // `is_present` defaults to `false` here.\n \n         // Never ship nightly-only components for other trains.\n-        if self.rust_release != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkgname) {\n+        if self.versions.channel() != \"nightly\" && NIGHTLY_ONLY_COMPONENTS.contains(&pkgname) {\n             is_present = false; // Pretend the component is entirely missing.\n         }\n \n@@ -619,7 +600,10 @@ impl Builder {\n             .map(|name| {\n                 if is_present {\n                     // The component generally exists, but it might still be missing for this target.\n-                    let filename = self.filename(pkgname, name);\n+                    let filename = self\n+                        .versions\n+                        .tarball_name(&PkgType::from_component(pkgname), name)\n+                        .unwrap();\n                     let digest = match self.digests.remove(&filename) {\n                         Some(digest) => digest,\n                         // This component does not exist for this target -- skip it.\n@@ -662,23 +646,6 @@ impl Builder {\n         format!(\"{}/{}/{}\", self.s3_address, self.date, filename)\n     }\n \n-    fn filename(&self, component: &str, target: &str) -> String {\n-        use PkgType::*;\n-        match PkgType::from_component(component) {\n-            RustSrc => format!(\"rust-src-{}.tar.gz\", self.rust_release),\n-            Cargo => format!(\"cargo-{}-{}.tar.gz\", self.cargo_release, target),\n-            Rls => format!(\"rls-{}-{}.tar.gz\", self.rls_release, target),\n-            RustAnalyzer => {\n-                format!(\"rust-analyzer-{}-{}.tar.gz\", self.rust_analyzer_release, target)\n-            }\n-            Clippy => format!(\"clippy-{}-{}.tar.gz\", self.clippy_release, target),\n-            Rustfmt => format!(\"rustfmt-{}-{}.tar.gz\", self.rustfmt_release, target),\n-            LlvmTools => format!(\"llvm-tools-{}-{}.tar.gz\", self.llvm_tools_release, target),\n-            Miri => format!(\"miri-{}-{}.tar.gz\", self.miri_release, target),\n-            Other(_) => format!(\"{}-{}-{}.tar.gz\", component, self.rust_release, target),\n-        }\n-    }\n-\n     fn cached_version(&self, component: &str) -> &Option<String> {\n         use PkgType::*;\n         match PkgType::from_component(component) {\n@@ -707,20 +674,24 @@ impl Builder {\n         }\n     }\n \n-    fn version(&self, component: &str, target: &str) -> Option<String> {\n+    fn version(&mut self, component: &str, target: &str) -> Option<String> {\n         self.untar(component, target, |filename| format!(\"{}/version\", filename))\n     }\n \n-    fn git_commit_hash(&self, component: &str, target: &str) -> Option<String> {\n+    fn git_commit_hash(&mut self, component: &str, target: &str) -> Option<String> {\n         self.untar(component, target, |filename| format!(\"{}/git-commit-hash\", filename))\n     }\n \n-    fn untar<F>(&self, component: &str, target: &str, dir: F) -> Option<String>\n+    fn untar<F>(&mut self, component: &str, target: &str, dir: F) -> Option<String>\n     where\n         F: FnOnce(String) -> String,\n     {\n+        let filename = self\n+            .versions\n+            .tarball_name(&PkgType::from_component(component), target)\n+            .expect(\"failed to retrieve the tarball path\");\n+\n         let mut cmd = Command::new(\"tar\");\n-        let filename = self.filename(component, target);\n         cmd.arg(\"xf\")\n             .arg(self.input.join(&filename))\n             .arg(dir(filename.replace(\".tar.gz\", \"\")))"}, {"sha": "151cfa0d9c6b1aa11c6101e5f8d1145944ffd6e1", "filename": "src/tools/build-manifest/src/versions.rs", "status": "modified", "additions": 114, "deletions": 0, "changes": 114, "blob_url": "https://github.com/rust-lang/rust/blob/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bddfea7e23341f788526f8b303b9a27038511e3/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fbuild-manifest%2Fsrc%2Fversions.rs?ref=3bddfea7e23341f788526f8b303b9a27038511e3", "patch": "@@ -1,4 +1,10 @@\n+use anyhow::{Context, Error};\n+use std::collections::HashMap;\n+use std::path::{Path, PathBuf};\n+\n+#[derive(Debug, Hash, Eq, PartialEq, Clone)]\n pub(crate) enum PkgType {\n+    Rust,\n     RustSrc,\n     Cargo,\n     Rls,\n@@ -13,6 +19,7 @@ pub(crate) enum PkgType {\n impl PkgType {\n     pub(crate) fn from_component(component: &str) -> Self {\n         match component {\n+            \"rust\" => PkgType::Rust,\n             \"rust-src\" => PkgType::RustSrc,\n             \"cargo\" => PkgType::Cargo,\n             \"rls\" | \"rls-preview\" => PkgType::Rls,\n@@ -24,4 +31,111 @@ impl PkgType {\n             other => PkgType::Other(other.into()),\n         }\n     }\n+\n+    fn rust_monorepo_path(&self) -> Option<&'static str> {\n+        match self {\n+            PkgType::Cargo => Some(\"src/tools/cargo\"),\n+            PkgType::Rls => Some(\"src/tools/rls\"),\n+            PkgType::RustAnalyzer => Some(\"src/tools/rust-analyzer/crates/rust-analyzer\"),\n+            PkgType::Clippy => Some(\"src/tools/clippy\"),\n+            PkgType::Rustfmt => Some(\"src/tools/rustfmt\"),\n+            PkgType::Miri => Some(\"src/tools/miri\"),\n+            PkgType::Rust => None,\n+            PkgType::RustSrc => None,\n+            PkgType::LlvmTools => None,\n+            PkgType::Other(_) => None,\n+        }\n+    }\n+\n+    fn tarball_component_name(&self) -> &str {\n+        match self {\n+            PkgType::Rust => \"rust\",\n+            PkgType::RustSrc => \"rust-src\",\n+            PkgType::Cargo => \"cargo\",\n+            PkgType::Rls => \"rls\",\n+            PkgType::RustAnalyzer => \"rust-analyzer\",\n+            PkgType::Clippy => \"clippy\",\n+            PkgType::Rustfmt => \"rustfmt\",\n+            PkgType::LlvmTools => \"llvm-tools\",\n+            PkgType::Miri => \"miri\",\n+            PkgType::Other(component) => component,\n+        }\n+    }\n+}\n+\n+pub(crate) struct Versions {\n+    channel: String,\n+    rustc_version: String,\n+    monorepo_root: PathBuf,\n+    package_versions: HashMap<PkgType, String>,\n+}\n+\n+impl Versions {\n+    pub(crate) fn new(channel: &str, monorepo_root: &Path) -> Result<Self, Error> {\n+        Ok(Self {\n+            channel: channel.into(),\n+            rustc_version: std::fs::read_to_string(monorepo_root.join(\"src\").join(\"version\"))\n+                .context(\"failed to read the rustc version from src/version\")?\n+                .trim()\n+                .to_string(),\n+            monorepo_root: monorepo_root.into(),\n+            package_versions: HashMap::new(),\n+        })\n+    }\n+\n+    pub(crate) fn channel(&self) -> &str {\n+        &self.channel\n+    }\n+\n+    pub(crate) fn tarball_name(\n+        &mut self,\n+        package: &PkgType,\n+        target: &str,\n+    ) -> Result<String, Error> {\n+        Ok(format!(\n+            \"{}-{}-{}.tar.gz\",\n+            package.tarball_component_name(),\n+            self.package_version(package).with_context(|| format!(\n+                \"failed to get the package version for component {:?}\",\n+                package,\n+            ))?,\n+            target\n+        ))\n+    }\n+\n+    pub(crate) fn package_version(&mut self, package: &PkgType) -> Result<String, Error> {\n+        match self.package_versions.get(package) {\n+            Some(release) => Ok(release.clone()),\n+            None => {\n+                let version = match package.rust_monorepo_path() {\n+                    Some(path) => {\n+                        let path = self.monorepo_root.join(path).join(\"Cargo.toml\");\n+                        let cargo_toml: CargoToml = toml::from_slice(&std::fs::read(path)?)?;\n+                        cargo_toml.package.version\n+                    }\n+                    None => self.rustc_version.clone(),\n+                };\n+\n+                let release = match self.channel.as_str() {\n+                    \"stable\" => version,\n+                    \"beta\" => \"beta\".into(),\n+                    \"nightly\" => \"nightly\".into(),\n+                    _ => format!(\"{}-dev\", version),\n+                };\n+\n+                self.package_versions.insert(package.clone(), release.clone());\n+                Ok(release)\n+            }\n+        }\n+    }\n+}\n+\n+#[derive(serde::Deserialize)]\n+struct CargoToml {\n+    package: CargoTomlPackage,\n+}\n+\n+#[derive(serde::Deserialize)]\n+struct CargoTomlPackage {\n+    version: String,\n }"}]}