{"sha": "eccb72e85b1586b6b056212af49a203b8e758ead", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVjY2I3MmU4NWIxNTg2YjZiMDU2MjEyYWY0OWEyMDNiOGU3NThlYWQ=", "commit": {"author": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-05-11T12:15:16Z"}, "committer": {"name": "Michael Sproul", "email": "micsproul@gmail.com", "date": "2015-05-19T04:16:18Z"}, "message": "Explain E0023, E0024, E0025, E0026, E0027, E0033.", "tree": {"sha": "8ca635cd5d0c29deae15166e120d39bf6749234b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ca635cd5d0c29deae15166e120d39bf6749234b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eccb72e85b1586b6b056212af49a203b8e758ead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eccb72e85b1586b6b056212af49a203b8e758ead", "html_url": "https://github.com/rust-lang/rust/commit/eccb72e85b1586b6b056212af49a203b8e758ead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eccb72e85b1586b6b056212af49a203b8e758ead/comments", "author": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelsproul", "id": 4452260, "node_id": "MDQ6VXNlcjQ0NTIyNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/4452260?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelsproul", "html_url": "https://github.com/michaelsproul", "followers_url": "https://api.github.com/users/michaelsproul/followers", "following_url": "https://api.github.com/users/michaelsproul/following{/other_user}", "gists_url": "https://api.github.com/users/michaelsproul/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelsproul/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelsproul/subscriptions", "organizations_url": "https://api.github.com/users/michaelsproul/orgs", "repos_url": "https://api.github.com/users/michaelsproul/repos", "events_url": "https://api.github.com/users/michaelsproul/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelsproul/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2e7d7bc05db986b9747c7e8b2a766165ab5faeab", "url": "https://api.github.com/repos/rust-lang/rust/commits/2e7d7bc05db986b9747c7e8b2a766165ab5faeab", "html_url": "https://github.com/rust-lang/rust/commit/2e7d7bc05db986b9747c7e8b2a766165ab5faeab"}], "stats": {"total": 164, "additions": 158, "deletions": 6}, "files": [{"sha": "67e637198b405bfc8f0c0888c8b3225b2017cce0", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 158, "deletions": 6, "changes": 164, "blob_url": "https://github.com/rust-lang/rust/blob/eccb72e85b1586b6b056212af49a203b8e758ead/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eccb72e85b1586b6b056212af49a203b8e758ead/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=eccb72e85b1586b6b056212af49a203b8e758ead", "patch": "@@ -12,6 +12,164 @@\n \n register_long_diagnostics! {\n \n+E0023: r##\"\n+A pattern used to match against an enum variant must provide a sub-pattern for\n+each field of the enum variant. This error indicates that a pattern attempted to\n+extract an incorrect number of fields from a variant.\n+\n+```\n+enum Fruit {\n+    Apple(String, String)\n+    Pear(u32)\n+}\n+```\n+\n+Here the `Apple` variant has two fields, and should be matched against like so:\n+\n+```\n+// Correct.\n+match x {\n+    Apple(a, b) => ...\n+}\n+```\n+\n+Matching with the wrong number of fields has no sensible interpretation:\n+\n+```\n+// Incorrect.\n+match x {\n+    Apple(a) => ...,\n+    Apple(a, b, c) => ...\n+}\n+```\n+\n+Check how many fields the enum was declared with and ensure that your pattern\n+uses the same number.\n+\"##,\n+\n+E0024: r##\"\n+This error indicates that a pattern attempted to extract the fields of an enum\n+variant with no fields. Here's a tiny example of this error:\n+\n+```\n+// This enum has two variants.\n+enum Number {\n+    // This variant has no fields.\n+    Zero,\n+    // This variant has one field.\n+    One(u32)\n+}\n+\n+// Assuming x is a Number we can pattern match on its contents.\n+match x {\n+    Zero(inside) => ...,\n+    One(inside) => ...\n+}\n+```\n+\n+The pattern match `Zero(inside)` is incorrect because the `Zero` variant\n+contains no fields, yet the `inside` name attempts to bind the first field of\n+the enum.\n+\"##,\n+\n+E0025: r##\"\n+Each field of a struct can only be bound once in a pattern. Each occurrence of a\n+field name binds the value of that field, so to fix this error you will have to\n+remove or alter the duplicate uses of the field name. Perhaps you misspelt\n+another field name?\n+\"##,\n+\n+E0026: r##\"\n+This error indicates that a struct pattern attempted to extract a non-existant\n+field from a struct. Struct fields are identified by the name used before the\n+colon `:` so struct patterns should resemble the declaration of the struct type\n+being matched.\n+\n+```\n+// Correct matching.\n+struct Thing {\n+    x: u32,\n+    y: u32\n+}\n+\n+let thing = Thing { x: 1, y: 2 };\n+match thing {\n+    Thing { x: xfield, y: yfield } => ...\n+}\n+```\n+\n+If you are using shorthand field patterns but want to refer to the struct field\n+by a different name, you should rename it explicitly.\n+\n+```\n+// Change this:\n+match thing {\n+    Thing { x, z } => ...\n+}\n+\n+// To this:\n+match thing {\n+    Thing { x, y: z } => ...\n+}\n+```\n+\"##,\n+\n+E0027: r##\"\n+This error indicates that a pattern for a struct fails to specify a sub-pattern\n+for every one of the struct's fields. Ensure that each field from the struct's\n+definition is mentioned in the pattern, or use `..` to ignore unwanted fields.\n+\n+For example:\n+\n+```\n+struct Dog {\n+    name: String,\n+    age: u32\n+}\n+\n+let d = Dog { name: \"Rusty\".to_string(), age: 8 };\n+\n+// This is incorrect.\n+match d {\n+    Dog { age: x } => ...\n+}\n+\n+// This is correct (explicit).\n+match d {\n+    Dog { name: n, age: x } => ...\n+}\n+\n+// This is also correct (ignore unused fields).\n+match d {\n+    Dog { age: x, .. } => ...\n+}\n+```\n+\"##,\n+\n+E0033: r##\"\n+This error indicates that a pointer to a trait type cannot be implicitly\n+dereferenced by a pattern. Every trait defines a type, but because the\n+size of trait implementors isn't fixed, this type has no compile-time size.\n+Therefore, all accesses to trait types must be through pointers. If you\n+encounter this error you should try to avoid dereferencing the pointer.\n+\n+```\n+let trait_obj: &SomeTrait = ...;\n+\n+// This tries to implicitly dereference to create an unsized local variable.\n+let &invalid = trait_obj;\n+\n+// You can call methods without binding to the value being pointed at.\n+trait_obj.method_one();\n+trait_obj.method_two();\n+```\n+\n+You can read more about trait objects in the Trait Object section of the\n+Reference:\n+\n+http://doc.rust-lang.org/reference.html#trait-objects\n+\"##,\n+\n E0046: r##\"\n When trying to make some type implement a trait `Foo`, you must, at minimum,\n provide implementations for all of `Foo`'s required methods (meaning the\n@@ -758,15 +916,9 @@ safety.md\n }\n \n register_diagnostics! {\n-    E0023,\n-    E0024,\n-    E0025,\n-    E0026,\n-    E0027,\n     E0029,\n     E0030,\n     E0031,\n-    E0033,\n     E0034, // multiple applicable methods in scope\n     E0035, // does not take type parameters\n     E0036, // incorrect number of type parameters given for this method"}]}