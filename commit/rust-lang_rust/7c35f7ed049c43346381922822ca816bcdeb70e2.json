{"sha": "7c35f7ed049c43346381922822ca816bcdeb70e2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjMzVmN2VkMDQ5YzQzMzQ2MzgxOTIyODIyY2E4MTZiY2RlYjcwZTI=", "commit": {"author": {"name": "Cat's Eye Technologies", "email": "cpressey@gmail.com", "date": "2012-11-11T16:19:40Z"}, "committer": {"name": "Cat's Eye Technologies", "email": "cpressey@gmail.com", "date": "2012-11-11T16:19:40Z"}, "message": "Minor grammatical edits; use preferred nomenclature consistently.", "tree": {"sha": "d559d61ea9f969ff506034b5575ddba576ac22f7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d559d61ea9f969ff506034b5575ddba576ac22f7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c35f7ed049c43346381922822ca816bcdeb70e2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c35f7ed049c43346381922822ca816bcdeb70e2", "html_url": "https://github.com/rust-lang/rust/commit/7c35f7ed049c43346381922822ca816bcdeb70e2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c35f7ed049c43346381922822ca816bcdeb70e2/comments", "author": {"login": "cpressey", "id": 6860877, "node_id": "MDQ6VXNlcjY4NjA4Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/6860877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpressey", "html_url": "https://github.com/cpressey", "followers_url": "https://api.github.com/users/cpressey/followers", "following_url": "https://api.github.com/users/cpressey/following{/other_user}", "gists_url": "https://api.github.com/users/cpressey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpressey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpressey/subscriptions", "organizations_url": "https://api.github.com/users/cpressey/orgs", "repos_url": "https://api.github.com/users/cpressey/repos", "events_url": "https://api.github.com/users/cpressey/events{/privacy}", "received_events_url": "https://api.github.com/users/cpressey/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cpressey", "id": 6860877, "node_id": "MDQ6VXNlcjY4NjA4Nzc=", "avatar_url": "https://avatars.githubusercontent.com/u/6860877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cpressey", "html_url": "https://github.com/cpressey", "followers_url": "https://api.github.com/users/cpressey/followers", "following_url": "https://api.github.com/users/cpressey/following{/other_user}", "gists_url": "https://api.github.com/users/cpressey/gists{/gist_id}", "starred_url": "https://api.github.com/users/cpressey/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cpressey/subscriptions", "organizations_url": "https://api.github.com/users/cpressey/orgs", "repos_url": "https://api.github.com/users/cpressey/repos", "events_url": "https://api.github.com/users/cpressey/events{/privacy}", "received_events_url": "https://api.github.com/users/cpressey/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f05e2da709cca3b20e560eaf2e05d73c0ca5d91b", "url": "https://api.github.com/repos/rust-lang/rust/commits/f05e2da709cca3b20e560eaf2e05d73c0ca5d91b", "html_url": "https://github.com/rust-lang/rust/commit/f05e2da709cca3b20e560eaf2e05d73c0ca5d91b"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "097af5a80a1fb5b7fcaa5291779a9ba2ef6a027c", "filename": "doc/tutorial.md", "status": "modified", "additions": 17, "deletions": 17, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7c35f7ed049c43346381922822ca816bcdeb70e2/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/7c35f7ed049c43346381922822ca816bcdeb70e2/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=7c35f7ed049c43346381922822ca816bcdeb70e2", "patch": "@@ -100,7 +100,7 @@ If you've fulfilled those prerequisites, something along these lines\n should work.\n \n ~~~~ {.notrust}\n-$ wget http://dl.rust-lang.org/dist/rust-0.4.tar.gz\n+$ curl -O http://dl.rust-lang.org/dist/rust-0.4.tar.gz\n $ tar -xzf rust-0.4.tar.gz\n $ cd rust-0.4\n $ ./configure\n@@ -490,7 +490,7 @@ const MY_STRUCTY_PASSWORD: Password = Password { value: MY_PASSWORD };\n ## Operators\n \n Rust's set of operators contains very few surprises. Arithmetic is done with\n-`*`, `/`, `%`, `+`, and `-` (multiply, divide, remainder, plus, minus). `-` is\n+`*`, `/`, `%`, `+`, and `-` (multiply, divide, take remainder, add, subtract). `-` is\n also a unary prefix operator that negates numbers. As in C, the bit operators\n `>>`, `<<`, `&`, `|`, and `^` are also supported.\n \n@@ -608,7 +608,7 @@ a wildcard pattern that matches any single value. The asterisk (`*`)\n is a different wildcard that can match one or more fields in an `enum`\n variant.\n \n-The patterns in an match arm are followed by a fat arrow, `=>`, then an\n+The patterns in a match arm are followed by a fat arrow, `=>`, then an\n expression to evaluate. Each case is separated by commas. It's often\n convenient to use a block expression for each case, in which case the\n commas are optional.\n@@ -865,7 +865,7 @@ fn area(sh: Shape) -> float {\n }\n ~~~~\n \n-You can write a lone `_` to ignore an individual fields, and can\n+You can write a lone `_` to ignore an individual field, and can\n ignore all fields of a variant like: `Circle(*)`. As in their\n introduction form, nullary enum patterns are written without\n parentheses.\n@@ -1096,7 +1096,7 @@ All pointer types can be dereferenced with the `*` unary operator.\n Managed boxes are pointers to heap-allocated, garbage collected\n memory.  Applying the unary `@` operator to an expression creates a\n managed box. The resulting box contains the result of the\n-expression. Copying a shared box, as happens during assignment, only\n+expression. Copying a managed box, as happens during assignment, only\n copies a pointer, never the contents of the box.\n \n ~~~~\n@@ -1145,7 +1145,7 @@ Managed boxes never cross task boundaries.\n In contrast with managed boxes, owned boxes have a single owning\n memory slot and thus two owned boxes may not refer to the same\n memory. All owned boxes across all tasks are allocated on a single\n-_exchange heap_, where their uniquely owned nature allows tasks to\n+_exchange heap_, where their uniquely-owned nature allows tasks to\n exchange them efficiently.\n \n Because owned boxes are uniquely owned, copying them requires allocating\n@@ -1158,7 +1158,7 @@ let x = ~10;\n let y = x; // error: copying a non-implicitly copyable type\n ~~~~\n \n-If you really want to copy a unique box you must say so explicitly.\n+If you really want to copy an owned box you must say so explicitly.\n \n ~~~~\n let x = ~10;\n@@ -1190,7 +1190,7 @@ become the sole owner of the box.\n \n Rust borrowed pointers are a general purpose reference/pointer type,\n similar to the C++ reference type, but guaranteed to point to valid\n-memory. In contrast with owned pointers, where the holder of a unique\n+memory. In contrast with owned pointers, where the holder of an owned\n pointer is the owner of the pointed-to memory, borrowed pointers never\n imply ownership. Pointers may be borrowed from any type, in which case\n the pointer is guaranteed not to outlive the value it points to.\n@@ -1210,14 +1210,14 @@ contains a point, but allocated in a different location:\n ~~~\n # struct Point { x: float, y: float }\n let on_the_stack : Point  =  Point {x: 3.0, y: 4.0};\n-let shared_box   : @Point = @Point {x: 5.0, y: 1.0};\n-let unique_box   : ~Point = ~Point {x: 7.0, y: 9.0};\n+let managed_box  : @Point = @Point {x: 5.0, y: 1.0};\n+let owned_box    : ~Point = ~Point {x: 7.0, y: 9.0};\n ~~~\n \n Suppose we wanted to write a procedure that computed the distance\n between any two points, no matter where they were stored. For example,\n we might like to compute the distance between `on_the_stack` and\n-`shared_box`, or between `shared_box` and `unique_box`. One option is\n+`managed_box`, or between `managed_box` and `owned_box`. One option is\n to define a function that takes two arguments of type point\u2014that is,\n it takes the points by value. But this will cause the points to be\n copied when we call the function. For points, this is probably not so\n@@ -1241,11 +1241,11 @@ Now we can call `compute_distance()` in various ways:\n ~~~\n # struct Point{ x: float, y: float };\n # let on_the_stack : Point  =  Point {x: 3.0, y: 4.0};\n-# let shared_box   : @Point = @Point {x: 5.0, y: 1.0};\n-# let unique_box   : ~Point = ~Point {x: 7.0, y: 9.0};\n+# let managed_box  : @Point = @Point {x: 5.0, y: 1.0};\n+# let owned_box    : ~Point = ~Point {x: 7.0, y: 9.0};\n # fn compute_distance(p1: &Point, p2: &Point) -> float { 0f }\n-compute_distance(&on_the_stack, shared_box);\n-compute_distance(shared_box, unique_box);\n+compute_distance(&on_the_stack, managed_box);\n+compute_distance(managed_box, owned_box);\n ~~~\n \n Here the `&` operator is used to take the address of the variable\n@@ -1255,11 +1255,11 @@ value. We also call this _borrowing_ the local variable\n `on_the_stack`, because we are created an alias: that is, another\n route to the same data.\n \n-In the case of the boxes `shared_box` and `unique_box`, however, no\n+In the case of the boxes `managed_box` and `owned_box`, however, no\n explicit action is necessary. The compiler will automatically convert\n a box like `@point` or `~point` to a borrowed pointer like\n `&point`. This is another form of borrowing; in this case, the\n-contents of the shared/unique box is being lent out.\n+contents of the managed/owned box is being lent out.\n \n Whenever a value is borrowed, there are some limitations on what you\n can do with the original. For example, if the contents of a variable"}]}