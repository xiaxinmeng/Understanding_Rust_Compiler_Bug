{"sha": "c03d14a33ddee8001f59224b40ce2fe06a71e074", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwM2QxNGEzM2RkZWU4MDAxZjU5MjI0YjQwY2UyZmUwNmE3MWUwNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-21T03:39:33Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2011-12-21T14:14:36Z"}, "message": "upgrade kind check", "tree": {"sha": "f45f2b05cff24b608794ab3c880d3bae1d018b31", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f45f2b05cff24b608794ab3c880d3bae1d018b31"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c03d14a33ddee8001f59224b40ce2fe06a71e074", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c03d14a33ddee8001f59224b40ce2fe06a71e074", "html_url": "https://github.com/rust-lang/rust/commit/c03d14a33ddee8001f59224b40ce2fe06a71e074", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c03d14a33ddee8001f59224b40ce2fe06a71e074/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01cb1044f74b69e128bd73651971ef365954a0ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/01cb1044f74b69e128bd73651971ef365954a0ba", "html_url": "https://github.com/rust-lang/rust/commit/01cb1044f74b69e128bd73651971ef365954a0ba"}], "stats": {"total": 65, "additions": 53, "deletions": 12}, "files": [{"sha": "88a763fb638f461601bb9762337cb53ada501193", "filename": "src/comp/middle/kind.rs", "status": "modified", "additions": 52, "deletions": 12, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/c03d14a33ddee8001f59224b40ce2fe06a71e074/src%2Fcomp%2Fmiddle%2Fkind.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03d14a33ddee8001f59224b40ce2fe06a71e074/src%2Fcomp%2Fmiddle%2Fkind.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fkind.rs?ref=c03d14a33ddee8001f59224b40ce2fe06a71e074", "patch": "@@ -42,26 +42,70 @@ fn check_crate(tcx: ty::ctxt, method_map: typeck::method_map,\n                last_uses: last_uses};\n     let visit = visit::mk_vt(@{\n         visit_expr: check_expr,\n-        visit_stmt: check_stmt\n+        visit_stmt: check_stmt,\n+        visit_fn_body: check_fn_body\n         with *visit::default_visitor()\n     });\n     visit::visit_crate(*crate, ctx, visit);\n     tcx.sess.abort_if_errors();\n     ret ctx.rval_map;\n }\n \n-fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n+// Yields the appropriate function to check the kind of closed over\n+// variables. `id` is the node_id for some expression that creates the\n+// closure.\n+fn with_closure_check_fn(cx: ctx, id: node_id,\n+                         b: block(fn(ctx, ty::t, sp: span))) {\n+    let fty = ty::node_id_to_monotype(cx.tcx, id);\n+    alt ty::ty_fn_proto(cx.tcx, fty) {\n+      proto_send. { b(check_send); }\n+      proto_shared(_) { b(check_copy); }\n+      proto_block. | proto_bare. { /* no check needed */ }\n+    }\n+}\n+\n+// Check that the free variables used in a shared/sendable closure conform\n+// to the copy/move kind bounds. Then recursively check the function body.\n+fn check_fn_body(decl: fn_decl, body: blk, sp: span, i: fn_ident, id: node_id,\n+                 cx: ctx, v: visit::vt<ctx>) {\n \n-    fn check_free_vars(e: @expr,\n-                       cx: ctx,\n-                       check_fn: fn(ctx, ty::t, sp: span)) {\n-        for @{def, span} in *freevars::get_freevars(cx.tcx, e.id) {\n+    // n.b.: This could be the body of either a fn decl or a fn expr.  In the\n+    // former case, the prototype will be proto_bare and no check occurs.  In\n+    // the latter case, we do not check the variables that in the capture\n+    // clause (as we don't have access to that here) but just those that\n+    // appear free.  The capture clauses are checked below, in check_expr().\n+    //\n+    // We could do this check also in check_expr(), but it seems more\n+    // \"future-proof\" to do it this way, as check_fn_body() is supposed to be\n+    // the common flow point for all functions that appear in the AST.\n+\n+    with_closure_check_fn(cx, id) { |check_fn|\n+        for @{def, span} in *freevars::get_freevars(cx.tcx, id) {\n             let id = ast_util::def_id_of_def(def).node;\n             let ty = ty::node_id_to_type(cx.tcx, id);\n             check_fn(cx, ty, span);\n         }\n     }\n \n+    visit::visit_fn_body(decl, body, sp, i, id, cx, v);\n+}\n+\n+fn check_fn_cap_clause(_cx: ctx,\n+                       _id: node_id,\n+                       _cap_clause: capture_clause) {\n+//    let freevars = freevars::get_freevars(cx.tcx, i);\n+//    let contains_var = lambda(id: def_id) -> bool {\n+//        vec::any(freevars, { |freevar|\n+//            ast_util::def_id_of_def(freevar).node == def_id\n+//        })\n+//    }\n+//    with_closure_check_fn(cx, id) { |check_fn|\n+//        let check_var = lambda(\n+//    }\n+}\n+\n+fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n+\n     alt e.node {\n       expr_assign(_, ex) | expr_assign_op(_, _, ex) |\n       expr_block({node: {expr: some(ex), _}, _}) |\n@@ -121,13 +165,9 @@ fn check_expr(e: @expr, cx: ctx, v: visit::vt<ctx>) {\n           none. {}\n         }\n       }\n-      expr_fn({proto: proto_send., _}, captures) { // NDM captures\n-        check_free_vars(e, cx, check_send);\n-      }\n-      expr_fn({proto: proto_shared(_), _}, captures) { // NDM captures\n-        check_free_vars(e, cx, check_copy);\n-      }\n       expr_ternary(_, a, b) { maybe_copy(cx, a); maybe_copy(cx, b); }\n+      expr_fn(_, cap_clause) { check_fn_cap_clause(cx, e.id, *cap_clause); }\n+\n       _ { }\n     }\n     visit::visit_expr(e, cx, v);"}, {"sha": "be3769a4ba1fc7d5f5e8dc6880243f5c59612fe9", "filename": "src/comp/syntax/visit.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c03d14a33ddee8001f59224b40ce2fe06a71e074/src%2Fcomp%2Fsyntax%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c03d14a33ddee8001f59224b40ce2fe06a71e074/src%2Fcomp%2Fsyntax%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fsyntax%2Fvisit.rs?ref=c03d14a33ddee8001f59224b40ce2fe06a71e074", "patch": "@@ -39,6 +39,7 @@ type visitor<E> =\n       visit_fn_block: fn@(fn_decl, blk, span, node_id, E, vt<E>),\n \n       // Invoked by both visit_fn_proto and visit_fn_block above.\n+      // Intended to be a common flow point for all fn decls in AST.\n       visit_fn_body: fn@(fn_decl, blk, span, fn_ident, node_id, E, vt<E>)};\n \n fn default_visitor<E>() -> visitor<E> {"}]}