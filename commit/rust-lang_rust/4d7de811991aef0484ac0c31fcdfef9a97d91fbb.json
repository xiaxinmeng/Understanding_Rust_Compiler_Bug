{"sha": "4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "node_id": "C_kwDOAAsO6NoAKDRkN2RlODExOTkxYWVmMDQ4NGFjMGMzMWZjZGZlZjlhOTdkOTFmYmI", "commit": {"author": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-13T21:51:39Z"}, "committer": {"name": "Antoni Boucher", "email": "bouanto@zoho.com", "date": "2022-04-14T03:01:01Z"}, "message": "Add feature for future libgccjit 12 release", "tree": {"sha": "52b4fb9f312967d95e8d772def3a74774bfb2e5f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52b4fb9f312967d95e8d772def3a74774bfb2e5f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "html_url": "https://github.com/rust-lang/rust/commit/4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/comments", "author": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "antoyo", "id": 584972, "node_id": "MDQ6VXNlcjU4NDk3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/584972?v=4", "gravatar_id": "", "url": "https://api.github.com/users/antoyo", "html_url": "https://github.com/antoyo", "followers_url": "https://api.github.com/users/antoyo/followers", "following_url": "https://api.github.com/users/antoyo/following{/other_user}", "gists_url": "https://api.github.com/users/antoyo/gists{/gist_id}", "starred_url": "https://api.github.com/users/antoyo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/antoyo/subscriptions", "organizations_url": "https://api.github.com/users/antoyo/orgs", "repos_url": "https://api.github.com/users/antoyo/repos", "events_url": "https://api.github.com/users/antoyo/events{/privacy}", "received_events_url": "https://api.github.com/users/antoyo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d69ada6bf3b6085bdcf23a7503398424027ee2e0", "url": "https://api.github.com/repos/rust-lang/rust/commits/d69ada6bf3b6085bdcf23a7503398424027ee2e0", "html_url": "https://github.com/rust-lang/rust/commit/d69ada6bf3b6085bdcf23a7503398424027ee2e0"}], "stats": {"total": 252, "additions": 189, "deletions": 63}, "files": [{"sha": "8ebdabe82610ec65cf17e62fdd709281e327b6ae", "filename": ".github/workflows/ci.yml", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/.github%2Fworkflows%2Fci.yml", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/.github%2Fworkflows%2Fci.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.github%2Fworkflows%2Fci.yml?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -11,7 +11,7 @@ jobs:\n     strategy:\n       fail-fast: false\n       matrix:\n-        libgccjit_version: [\"libgccjit.so\", \"libgccjit_without_int128.so\"]\n+        libgccjit_version: [\"libgccjit.so\", \"libgccjit_without_int128.so\", \"libgccjit12.so\"]\n \n     steps:\n     - uses: actions/checkout@v2\n@@ -78,12 +78,21 @@ jobs:\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain') }}\n \n     - name: Build\n+      if: matrix.libgccjit_version != 'libgccjit12.so'\n       run: |\n         ./prepare_build.sh\n         ./build.sh\n         cargo test\n         ./clean_all.sh\n \n+    - name: Build\n+      if: matrix.libgccjit_version == 'libgccjit12.so'\n+      run: |\n+        ./prepare_build.sh\n+        ./build.sh --no-default-features\n+        cargo test --no-default-features\n+        ./clean_all.sh\n+\n     - name: Prepare dependencies\n       run: |\n         git config --global user.email \"user@example.com\"\n@@ -98,6 +107,7 @@ jobs:\n         args: --release\n \n     - name: Test\n+      if: matrix.libgccjit_version != 'libgccjit12.so'\n       run: |\n         # Enable backtraces for easier debugging\n         export RUST_BACKTRACE=1\n@@ -107,3 +117,15 @@ jobs:\n         export RUN_RUNS=2\n \n         ./test.sh --release\n+\n+    - name: Test\n+      if: matrix.libgccjit_version == 'libgccjit12.so'\n+      run: |\n+        # Enable backtraces for easier debugging\n+        export RUST_BACKTRACE=1\n+\n+        # Reduce amount of benchmark runs as they are slow\n+        export COMPILE_RUNS=2\n+        export RUN_RUNS=2\n+\n+        ./test.sh --release --no-default-features"}, {"sha": "c5315e2392efe922b2b04311ce94204e4dc686a1", "filename": "Cargo.lock", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -41,15 +41,15 @@ dependencies = [\n [[package]]\n name = \"gccjit\"\n version = \"1.0.0\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#f24e1f49d99430941d8a747275b41c9a7930e049\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#6c2af0cf733a26740f01a7c679afc20431165a54\"\n dependencies = [\n  \"gccjit_sys\",\n ]\n \n [[package]]\n name = \"gccjit_sys\"\n version = \"0.0.1\"\n-source = \"git+https://github.com/antoyo/gccjit.rs#f24e1f49d99430941d8a747275b41c9a7930e049\"\n+source = \"git+https://github.com/antoyo/gccjit.rs#6c2af0cf733a26740f01a7c679afc20431165a54\"\n dependencies = [\n  \"libc 0.1.12\",\n ]"}, {"sha": "86278b4698305037724776111491f60b912b1885", "filename": "Cargo.toml", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -13,6 +13,10 @@ name = \"lang_tests\"\n path = \"tests/lib.rs\"\n harness = false\n \n+[features]\n+default = [\"master\"]\n+master = [\"gccjit/master\"]\n+\n [dependencies]\n gccjit = { git = \"https://github.com/antoyo/gccjit.rs\" }\n "}, {"sha": "44eb240715c7a9a26925d3b3fb334f6c483c21b2", "filename": "build.sh", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/build.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/build.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/build.sh?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -6,6 +6,8 @@ set -e\n codegen_channel=debug\n sysroot_channel=debug\n \n+flags=\n+\n while [[ $# -gt 0 ]]; do\n     case $1 in\n         --release)\n@@ -16,6 +18,15 @@ while [[ $# -gt 0 ]]; do\n             sysroot_channel=release\n             shift\n             ;;\n+        --no-default-features)\n+            flags=\"$flags --no-default-features\"\n+            shift\n+            ;;\n+        --features)\n+            shift\n+            flags=\"$flags --features $1\"\n+            shift\n+            ;;\n         *)\n             echo \"Unknown option $1\"\n             exit 1\n@@ -33,21 +44,13 @@ fi\n export LD_LIBRARY_PATH=\"$GCC_PATH\"\n export LIBRARY_PATH=\"$GCC_PATH\"\n \n-features=\n-\n-if [[ \"$1\" == \"--features\" ]]; then\n-    shift\n-    features=\"--features $1\"\n-    shift\n-fi\n-\n if [[ \"$codegen_channel\" == \"release\" ]]; then\n     export CHANNEL='release'\n-    CARGO_INCREMENTAL=1 cargo rustc --release $features\n+    CARGO_INCREMENTAL=1 cargo rustc --release $flags\n else\n     echo $LD_LIBRARY_PATH\n     export CHANNEL='debug'\n-    cargo rustc $features\n+    cargo rustc $flags\n fi\n \n source config.sh"}, {"sha": "31069058aea3417e668cc2f6c407af00dd68ef58", "filename": "example/std_example.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/example%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/example%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/example%2Fstd_example.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -93,6 +93,7 @@ fn main() {\n \n     println!(\"{:?}\", std::intrinsics::caller_location());\n \n+    #[cfg(feature=\"master\")]\n     unsafe {\n         test_simd();\n     }\n@@ -104,6 +105,7 @@ fn main() {\n     println!(\"End\");\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_simd() {\n     let x = _mm_setzero_si128();\n@@ -131,6 +133,7 @@ unsafe fn test_simd() {\n     assert_eq!(mask1, 1);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_slli_si128() {\n     #[rustfmt::skip]\n@@ -158,6 +161,7 @@ unsafe fn test_mm_slli_si128() {\n }\n \n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_movemask_epi8() {\n     #[rustfmt::skip]\n@@ -171,6 +175,7 @@ unsafe fn test_mm_movemask_epi8() {\n     assert_eq!(r, 0b10100100_00100101);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"avx2\")]\n unsafe fn test_mm256_movemask_epi8() {\n     let a = _mm256_set1_epi8(-1);\n@@ -179,6 +184,7 @@ unsafe fn test_mm256_movemask_epi8() {\n     assert_eq!(r, e);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_add_epi8() {\n     let a = _mm_setr_epi8(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15);\n@@ -194,6 +200,7 @@ unsafe fn test_mm_add_epi8() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_add_pd() {\n     let a = _mm_setr_pd(1.0, 2.0);\n@@ -202,25 +209,29 @@ unsafe fn test_mm_add_pd() {\n     assert_eq_m128d(r, _mm_setr_pd(6.0, 12.0));\n }\n \n+#[cfg(feature=\"master\")]\n fn assert_eq_m128i(x: std::arch::x86_64::__m128i, y: std::arch::x86_64::__m128i) {\n     unsafe {\n         assert_eq!(std::mem::transmute::<_, [u8; 16]>(x), std::mem::transmute::<_, [u8; 16]>(y));\n     }\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n pub unsafe fn assert_eq_m128d(a: __m128d, b: __m128d) {\n     if _mm_movemask_pd(_mm_cmpeq_pd(a, b)) != 0b11 {\n         panic!(\"{:?} != {:?}\", a, b);\n     }\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_cvtsi128_si64() {\n     let r = _mm_cvtsi128_si64(std::mem::transmute::<[i64; 2], _>([5, 0]));\n     assert_eq!(r, 5);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse4.1\")]\n unsafe fn test_mm_cvtepi8_epi16() {\n     let a = _mm_set1_epi8(10);\n@@ -233,6 +244,7 @@ unsafe fn test_mm_cvtepi8_epi16() {\n     assert_eq_m128i(r, e);\n }\n \n+#[cfg(feature=\"master\")]\n #[target_feature(enable = \"sse4.1\")]\n unsafe fn test_mm_extract_epi8() {\n     #[rustfmt::skip]\n@@ -246,7 +258,7 @@ unsafe fn test_mm_extract_epi8() {\n     assert_eq!(r2, 3);\n }\n \n-#[cfg(target_arch = \"x86_64\")]\n+#[cfg(all(feature=\"master\", target_arch = \"x86_64\"))]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_mm_insert_epi16() {\n     let a = _mm_setr_epi16(0, 1, 2, 3, 4, 5, 6, 7);"}, {"sha": "6f24abaea8aedea615cd1d1637858ff31bd89b7e", "filename": "src/builder.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbuilder.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -301,6 +301,15 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             result.to_rvalue()\n         }\n         else {\n+            #[cfg(not(feature=\"master\"))]\n+            if gcc_func.get_param_count() == 0 {\n+                // FIXME(antoyo): As a temporary workaround for unsupported LLVM intrinsics.\n+                self.block.add_eval(None, self.cx.context.new_call_through_ptr(None, func_ptr, &[]));\n+            }\n+            else {\n+                self.block.add_eval(None, self.cx.context.new_call_through_ptr(None, func_ptr, &args));\n+            }\n+            #[cfg(feature=\"master\")]\n             self.block.add_eval(None, self.cx.context.new_call_through_ptr(None, func_ptr, &args));\n             // Return dummy value when not having return value.\n             let result = current_func.new_local(None, self.isize_type, \"dummyValueThatShouldNeverBeUsed\");\n@@ -1287,6 +1296,7 @@ impl<'a, 'gcc, 'tcx> BuilderMethods<'a, 'tcx> for Builder<'a, 'gcc, 'tcx> {\n }\n \n impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n+    #[cfg(feature=\"master\")]\n     pub fn shuffle_vector(&mut self, v1: RValue<'gcc>, v2: RValue<'gcc>, mask: RValue<'gcc>) -> RValue<'gcc> {\n         let struct_type = mask.get_type().is_struct().expect(\"mask of struct type\");\n \n@@ -1361,6 +1371,11 @@ impl<'a, 'gcc, 'tcx> Builder<'a, 'gcc, 'tcx> {\n             result\n         }\n     }\n+\n+    #[cfg(not(feature=\"master\"))]\n+    pub fn shuffle_vector(&mut self, _v1: RValue<'gcc>, _v2: RValue<'gcc>, _mask: RValue<'gcc>) -> RValue<'gcc> {\n+        unimplemented!();\n+    }\n }\n \n impl<'a, 'gcc, 'tcx> StaticBuilderMethods for Builder<'a, 'gcc, 'tcx> {"}, {"sha": "4b41b0ba6e78773c1a6dcde97d6bf6164e0671d6", "filename": "src/intrinsic/llvm.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fintrinsic%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fintrinsic%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fllvm.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -2,6 +2,20 @@ use gccjit::Function;\n \n use crate::context::CodegenCx;\n \n+#[cfg(not(feature=\"master\"))]\n+pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function<'gcc> {\n+    match name {\n+        \"llvm.x86.xgetbv\" => {\n+            let gcc_name = \"__builtin_trap\";\n+            let func = cx.context.get_builtin_function(gcc_name);\n+            cx.functions.borrow_mut().insert(gcc_name.to_string(), func);\n+            return func;\n+        },\n+        _ => unimplemented!(\"unsupported LLVM intrinsic {}\", name),\n+    }\n+}\n+\n+#[cfg(feature=\"master\")]\n pub fn intrinsic<'gcc, 'tcx>(name: &str, cx: &CodegenCx<'gcc, 'tcx>) -> Function<'gcc> {\n     let gcc_name = match name {\n         \"llvm.x86.xgetbv\" => \"__builtin_ia32_xgetbv\","}, {"sha": "f1167bc3a3b67e02c158e89e91fb901f227a3b4d", "filename": "src/intrinsic/simd.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fintrinsic%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Fintrinsic%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsic%2Fsimd.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -154,6 +154,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         ));\n     }\n \n+    #[cfg(feature=\"master\")]\n     if name == sym::simd_insert {\n         require!(\n             in_elem == arg_tys[2],\n@@ -213,6 +214,8 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         // TODO(antoyo): perhaps use __builtin_convertvector for vector casting.\n         return Ok(bx.context.new_bitcast(None, result, vector.get_type()));\n     }\n+\n+    #[cfg(feature=\"master\")]\n     if name == sym::simd_extract {\n         require!(\n             ret_ty == in_elem,\n@@ -503,6 +506,7 @@ pub fn generic_simd_intrinsic<'a, 'gcc, 'tcx>(bx: &mut Builder<'a, 'gcc, 'tcx>,\n         simd_neg: Int => neg, Float => fneg;\n     }\n \n+    #[cfg(feature=\"master\")]\n     if name == sym::simd_saturating_add || name == sym::simd_saturating_sub {\n         let lhs = args[0].immediate();\n         let rhs = args[1].immediate();"}, {"sha": "31d3a5ab299a3463dc6ed8f4a140bb742fe92c8d", "filename": "src/lib.rs", "status": "modified", "additions": 9, "deletions": 2, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -299,10 +299,17 @@ pub fn target_features(sess: &Session) -> Vec<Symbol> {\n                 if sess.is_nightly_build() || gate.is_none() { Some(feature) } else { None }\n             },\n         )\n-        .filter(|feature| {\n+        .filter(|_feature| {\n             // TODO(antoyo): implement a way to get enabled feature in libgccjit.\n             // Probably using the equivalent of __builtin_cpu_supports.\n-            feature.contains(\"sse\") || feature.contains(\"avx\")\n+            #[cfg(feature=\"master\")]\n+            {\n+                _feature.contains(\"sse\") || _feature.contains(\"avx\")\n+            }\n+            #[cfg(not(feature=\"master\"))]\n+            {\n+                false\n+            }\n             /*\n                adx, aes, avx, avx2, avx512bf16, avx512bitalg, avx512bw, avx512cd, avx512dq, avx512er, avx512f, avx512gfni,\n                avx512ifma, avx512pf, avx512vaes, avx512vbmi, avx512vbmi2, avx512vl, avx512vnni, avx512vp2intersect, avx512vpclmulqdq,"}, {"sha": "db2b5ea8ab208592bdcec4c889d17a0553037c77", "filename": "src/type_.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Ftype_.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Ftype_.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -125,6 +125,7 @@ impl<'gcc, 'tcx> BaseTypeMethods<'tcx> for CodegenCx<'gcc, 'tcx> {\n             .collect();\n         let typ = self.context.new_struct_type(None, \"struct\", &fields).as_type();\n         if packed {\n+            #[cfg(feature=\"master\")]\n             typ.set_packed();\n         }\n         self.struct_types.borrow_mut().insert(types, typ);\n@@ -217,6 +218,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n             .collect();\n         typ.set_fields(None, &fields);\n         if packed {\n+            #[cfg(feature=\"master\")]\n             typ.as_type().set_packed();\n         }\n     }"}, {"sha": "adcae9c16c3755666beb76df2f70655d689d7909", "filename": "src/type_of.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/src%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftype_of.rs?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -25,6 +25,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n+    #[cfg(feature=\"master\")]\n     pub fn type_int_from_ty(&self, t: ty::IntTy) -> Type<'gcc> {\n         match t {\n             ty::IntTy::Isize => self.type_isize(),\n@@ -36,6 +37,7 @@ impl<'gcc, 'tcx> CodegenCx<'gcc, 'tcx> {\n         }\n     }\n \n+    #[cfg(feature=\"master\")]\n     pub fn type_uint_from_ty(&self, t: ty::UintTy) -> Type<'gcc> {\n         match t {\n             ty::UintTy::Usize => self.type_isize(),"}, {"sha": "5a8e4f9c0ad545f9597661d7e858a0db6c3acc11", "filename": "test.sh", "status": "modified", "additions": 88, "deletions": 47, "changes": 135, "blob_url": "https://github.com/rust-lang/rust/blob/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/test.sh", "raw_url": "https://github.com/rust-lang/rust/raw/4d7de811991aef0484ac0c31fcdfef9a97d91fbb/test.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/test.sh?ref=4d7de811991aef0484ac0c31fcdfef9a97d91fbb", "patch": "@@ -14,22 +14,79 @@ fi\n export LD_LIBRARY_PATH=\"$GCC_PATH\"\n export LIBRARY_PATH=\"$GCC_PATH\"\n \n-features=\n-\n-if [[ \"$1\" == \"--features\" ]]; then\n-    shift\n-    features=\"--features $1\"\n-    shift\n-fi\n-\n-if [[ \"$1\" == \"--release\" ]]; then\n+flags=\n+gcc_master_branch=1\n+channel=\"debug\"\n+func=all\n+\n+while [[ $# -gt 0 ]]; do\n+    case $1 in\n+        --release)\n+            codegen_channel=release\n+            shift\n+            ;;\n+        --release-sysroot)\n+            sysroot_channel=release\n+            shift\n+            ;;\n+        --no-default-features)\n+            gcc_master_branch=0\n+            flags=\"$flags --no-default-features\"\n+            shift\n+            ;;\n+        --features)\n+            shift\n+            flags=\"$flags --features $1\"\n+            shift\n+            ;;\n+        --release)\n+            channel=\"release\"\n+            shift\n+            ;;\n+        \"--test-rustc\")\n+            func=test_rustc\n+            shift\n+            ;;\n+\n+        \"--test-libcore\")\n+            func=test_libcore\n+            shift\n+            ;;\n+\n+        \"--clean-ui-tests\")\n+            func=clean_ui_tests\n+            shift\n+            ;;\n+\n+        \"--std-tests\")\n+            func=std_tests\n+            shift\n+            ;;\n+\n+        \"--extended-tests\")\n+            func=extended_sysroot_tests\n+            shift\n+            ;;\n+\n+        \"--build-sysroot\")\n+            func=build_sysroot\n+            shift\n+            ;;\n+        *)\n+            echo \"Unknown option $1\"\n+            exit 1\n+            ;;\n+    esac\n+done\n+\n+if [[ $channel == \"release\" ]]; then\n     export CHANNEL='release'\n-    CARGO_INCREMENTAL=1 cargo rustc --release $features\n+    CARGO_INCREMENTAL=1 cargo rustc --release $flags\n     shift\n else\n     echo $LD_LIBRARY_PATH\n     export CHANNEL='debug'\n-    cargo rustc $features\n+    cargo rustc $flags\n fi\n \n if [[ \"$1\" == \"--build\" ]]; then\n@@ -78,7 +135,11 @@ function std_tests() {\n     $RUN_WRAPPER ./target/out/dst_field_align || (echo $?; false)\n \n     echo \"[AOT] std_example\"\n-    $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE\n+    std_flags=\"--cfg feature=\\\"master\\\"\"\n+    if (( $gcc_master_branch == 0 )); then\n+        std_flags=\"\"\n+    fi\n+    $RUSTC example/std_example.rs --crate-type bin --target $TARGET_TRIPLE $std_flags\n     $RUN_WRAPPER ./target/out/std_example --target $TARGET_TRIPLE\n \n     echo \"[AOT] subslice-patterns-const-eval\"\n@@ -122,6 +183,10 @@ function test_libcore() {\n #hyperfine --runs ${RUN_RUNS:-10} ./target/out/mod_bench{,_inline} ./target/out/mod_bench_llvm_*\n \n function extended_sysroot_tests() {\n+    if (( $gcc_master_branch == 0 )); then\n+        return\n+    fi\n+\n     pushd rand\n     cargo clean\n     echo \"[TEST] rust-random/rand\"\n@@ -208,38 +273,14 @@ function clean_ui_tests() {\n     find rust/build/x86_64-unknown-linux-gnu/test/ui/ -name stamp -exec rm -rf {} \\;\n }\n \n-case $1 in\n-    \"--test-rustc\")\n-        test_rustc\n-        ;;\n-\n-    \"--test-libcore\")\n-        test_libcore\n-        ;;\n-\n-    \"--clean-ui-tests\")\n-        clean_ui_tests\n-        ;;\n-\n-    \"--std-tests\")\n-        std_tests\n-        ;;\n-\n-    \"--extended-tests\")\n-        extended_sysroot_tests\n-        ;;\n-\n-    \"--build-sysroot\")\n-        build_sysroot\n-        ;;\n-\n-    *)\n-        clean\n-        mini_tests\n-        build_sysroot\n-        std_tests\n-        test_libcore\n-        extended_sysroot_tests\n-        test_rustc\n-        ;;\n-esac\n+function all() {\n+    clean\n+    mini_tests\n+    build_sysroot\n+    std_tests\n+    test_libcore\n+    extended_sysroot_tests\n+    test_rustc\n+}\n+\n+$func"}]}