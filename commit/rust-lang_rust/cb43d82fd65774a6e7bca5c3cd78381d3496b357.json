{"sha": "cb43d82fd65774a6e7bca5c3cd78381d3496b357", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNDNkODJmZDY1Nzc0YTZlN2JjYTVjM2NkNzgzODFkMzQ5NmIzNTc=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-12-01T03:49:21Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-12-01T03:49:21Z"}, "message": "Rollup merge of #66662 - RalfJung:miri-test-liballoc, r=dtolnay\n\nMiri: run panic-catching tests in liballoc\n\nI also converted two tests from using `thread::spawn(...).join()` just for catching panics, to `catch_panic`, so that Miri can run them.", "tree": {"sha": "20253ba70970ebebb2b7bf4993d1331d6d52fdd4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/20253ba70970ebebb2b7bf4993d1331d6d52fdd4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb43d82fd65774a6e7bca5c3cd78381d3496b357", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJd4zhBCRBK7hj4Ov3rIwAAdHIIABTcEXLGWOJAkjrtNDn8RT2+\n07HNHUf46sQ9C0/ioYRfxjnmtS5oeu1R7f8lsivesbDvSprcTsBlEWpo98pu3p7m\nE7dtS0Gl/XUr1DFknfq4aSdwUQjQ2MMrE8UF1LmK0jPVUkebFS/GkTJkbsuRywMG\n//meKmmuo/KMCBr0UWYpkJIYpBfJ1HILNyW+8xg3/lKLAJxnvA+4XuppxBeQ+NBM\nFAuIhglwubNHS46oezD6EbjVbFnnSqXuXPUbN4PhOje8S4kc6Fdiua1I5Zxn4pTQ\n5B84K9mbuAmI+TfXo0l2cp1exl4VTk88Gq7UaGKB5vPV+AIqWXOgBiu6NJ1bbjQ=\n=Nww+\n-----END PGP SIGNATURE-----\n", "payload": "tree 20253ba70970ebebb2b7bf4993d1331d6d52fdd4\nparent 6110d3ebc8224929c8f426def15b9443ffb3258d\nparent a2299799e6193799f4d2cb546e56589c5dd587aa\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1575172161 +0100\ncommitter GitHub <noreply@github.com> 1575172161 +0100\n\nRollup merge of #66662 - RalfJung:miri-test-liballoc, r=dtolnay\n\nMiri: run panic-catching tests in liballoc\n\nI also converted two tests from using `thread::spawn(...).join()` just for catching panics, to `catch_panic`, so that Miri can run them.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb43d82fd65774a6e7bca5c3cd78381d3496b357", "html_url": "https://github.com/rust-lang/rust/commit/cb43d82fd65774a6e7bca5c3cd78381d3496b357", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb43d82fd65774a6e7bca5c3cd78381d3496b357/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6110d3ebc8224929c8f426def15b9443ffb3258d", "url": "https://api.github.com/repos/rust-lang/rust/commits/6110d3ebc8224929c8f426def15b9443ffb3258d", "html_url": "https://github.com/rust-lang/rust/commit/6110d3ebc8224929c8f426def15b9443ffb3258d"}, {"sha": "a2299799e6193799f4d2cb546e56589c5dd587aa", "url": "https://api.github.com/repos/rust-lang/rust/commits/a2299799e6193799f4d2cb546e56589c5dd587aa", "html_url": "https://github.com/rust-lang/rust/commit/a2299799e6193799f4d2cb546e56589c5dd587aa"}], "stats": {"total": 38, "additions": 24, "deletions": 14}, "files": [{"sha": "a896a1064d9e17070bdef52f43e9cd0cc48dce1b", "filename": "src/liballoc/tests/binary_heap.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fbinary_heap.rs?ref=cb43d82fd65774a6e7bca5c3cd78381d3496b357", "patch": "@@ -347,7 +347,7 @@ fn assert_covariance() {\n // Destructors must be called exactly once per element.\n // FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(target_os = \"emscripten\"))]\n fn panic_safe() {\n     use std::cmp;\n     use std::panic::{self, AssertUnwindSafe};\n@@ -376,7 +376,10 @@ fn panic_safe() {\n     }\n     let mut rng = thread_rng();\n     const DATASZ: usize = 32;\n+    #[cfg(not(miri))] // Miri is too slow\n     const NTEST: usize = 10;\n+    #[cfg(miri)]\n+    const NTEST: usize = 1;\n \n     // don't use 0 in the data -- we want to catch the zeroed-out case.\n     let data = (1..=DATASZ).collect::<Vec<_>>();"}, {"sha": "d9707b95740785bc4600d0973da1c2f6b5f093a9", "filename": "src/liballoc/tests/slice.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fslice.rs?ref=cb43d82fd65774a6e7bca5c3cd78381d3496b357", "patch": "@@ -4,7 +4,6 @@ use std::mem;\n use std::panic;\n use std::rc::Rc;\n use std::sync::atomic::{Ordering::Relaxed, AtomicUsize};\n-use std::thread;\n \n use rand::{Rng, RngCore, thread_rng};\n use rand::seq::SliceRandom;\n@@ -1406,11 +1405,9 @@ fn test_box_slice_clone() {\n #[test]\n #[allow(unused_must_use)] // here, we care about the side effects of `.clone()`\n #[cfg_attr(target_os = \"emscripten\", ignore)]\n-#[cfg(not(miri))] // Miri does not support threads\n fn test_box_slice_clone_panics() {\n     use std::sync::Arc;\n     use std::sync::atomic::{AtomicUsize, Ordering};\n-    use std::thread::spawn;\n \n     struct Canary {\n         count: Arc<AtomicUsize>,\n@@ -1446,15 +1443,14 @@ fn test_box_slice_clone_panics() {\n         panics: true,\n     };\n \n-    spawn(move || {\n+    std::panic::catch_unwind(move || {\n             // When xs is dropped, +5.\n             let xs = vec![canary.clone(), canary.clone(), canary.clone(), panic, canary]\n                 .into_boxed_slice();\n \n             // When panic is cloned, +3.\n             xs.clone();\n         })\n-        .join()\n         .unwrap_err();\n \n     // Total = 8\n@@ -1566,7 +1562,7 @@ macro_rules! test {\n             }\n \n             let v = $input.to_owned();\n-            let _ = thread::spawn(move || {\n+            let _ = std::panic::catch_unwind(move || {\n                 let mut v = v;\n                 let mut panic_countdown = panic_countdown;\n                 v.$func(|a, b| {\n@@ -1577,7 +1573,7 @@ macro_rules! test {\n                     panic_countdown -= 1;\n                     a.cmp(b)\n                 })\n-            }).join();\n+            });\n \n             // Check that the number of things dropped is exactly\n             // what we expect (i.e., the contents of `v`).\n@@ -1598,7 +1594,6 @@ thread_local!(static SILENCE_PANIC: Cell<bool> = Cell::new(false));\n \n #[test]\n #[cfg_attr(target_os = \"emscripten\", ignore)] // no threads\n-#[cfg(not(miri))] // Miri does not support threads\n fn panic_safe() {\n     let prev = panic::take_hook();\n     panic::set_hook(Box::new(move |info| {\n@@ -1609,8 +1604,18 @@ fn panic_safe() {\n \n     let mut rng = thread_rng();\n \n-    for len in (1..20).chain(70..MAX_LEN) {\n-        for &modulus in &[5, 20, 50] {\n+    #[cfg(not(miri))] // Miri is too slow\n+    let lens = (1..20).chain(70..MAX_LEN);\n+    #[cfg(not(miri))] // Miri is too slow\n+    let moduli = &[5, 20, 50];\n+\n+    #[cfg(miri)]\n+    let lens = (1..13);\n+    #[cfg(miri)]\n+    let moduli = &[10];\n+\n+    for len in lens {\n+        for &modulus in moduli {\n             for &has_runs in &[false, true] {\n                 let mut input = (0..len)\n                     .map(|id| {\n@@ -1643,6 +1648,9 @@ fn panic_safe() {\n             }\n         }\n     }\n+\n+    // Set default panic hook again.\n+    drop(panic::take_hook());\n }\n \n #[test]"}, {"sha": "9ee254f99acdfa34611443c5fee088580fa79f66", "filename": "src/liballoc/tests/vec.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb43d82fd65774a6e7bca5c3cd78381d3496b357/src%2Fliballoc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fvec.rs?ref=cb43d82fd65774a6e7bca5c3cd78381d3496b357", "patch": "@@ -944,10 +944,9 @@ fn drain_filter_complex() {\n     }\n }\n \n-// Miri does not support catching panics\n // FIXME: re-enable emscripten once it can unwind again\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))]\n+#[cfg(not(target_os = \"emscripten\"))]\n fn drain_filter_consumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;\n@@ -999,7 +998,7 @@ fn drain_filter_consumed_panic() {\n \n // FIXME: Re-enable emscripten once it can catch panics\n #[test]\n-#[cfg(not(any(miri, target_os = \"emscripten\")))] // Miri does not support catching panics\n+#[cfg(not(target_os = \"emscripten\"))]\n fn drain_filter_unconsumed_panic() {\n     use std::rc::Rc;\n     use std::sync::Mutex;"}]}