{"sha": "401cb6bb539e95733290d1b0487f682f48b3f9cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQwMWNiNmJiNTM5ZTk1NzMzMjkwZDFiMDQ4N2Y2ODJmNDhiM2Y5Y2Q=", "commit": {"author": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-09T01:06:16Z"}, "committer": {"name": "QuietMisdreavus", "email": "grey@quietmisdreavus.net", "date": "2018-11-09T15:07:57Z"}, "message": "don't inline `pub use some_crate` unless directly asked to", "tree": {"sha": "0e0407ac05b1c379c3ec4bff13a7b7b4599fef2f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0e0407ac05b1c379c3ec4bff13a7b7b4599fef2f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/401cb6bb539e95733290d1b0487f682f48b3f9cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/401cb6bb539e95733290d1b0487f682f48b3f9cd", "html_url": "https://github.com/rust-lang/rust/commit/401cb6bb539e95733290d1b0487f682f48b3f9cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/401cb6bb539e95733290d1b0487f682f48b3f9cd/comments", "author": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "committer": {"login": "QuietMisdreavus", "id": 5217170, "node_id": "MDQ6VXNlcjUyMTcxNzA=", "avatar_url": "https://avatars.githubusercontent.com/u/5217170?v=4", "gravatar_id": "", "url": "https://api.github.com/users/QuietMisdreavus", "html_url": "https://github.com/QuietMisdreavus", "followers_url": "https://api.github.com/users/QuietMisdreavus/followers", "following_url": "https://api.github.com/users/QuietMisdreavus/following{/other_user}", "gists_url": "https://api.github.com/users/QuietMisdreavus/gists{/gist_id}", "starred_url": "https://api.github.com/users/QuietMisdreavus/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/QuietMisdreavus/subscriptions", "organizations_url": "https://api.github.com/users/QuietMisdreavus/orgs", "repos_url": "https://api.github.com/users/QuietMisdreavus/repos", "events_url": "https://api.github.com/users/QuietMisdreavus/events{/privacy}", "received_events_url": "https://api.github.com/users/QuietMisdreavus/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "653da4fd006c97625247acd7e076d0782cdc149b", "url": "https://api.github.com/repos/rust-lang/rust/commits/653da4fd006c97625247acd7e076d0782cdc149b", "html_url": "https://github.com/rust-lang/rust/commit/653da4fd006c97625247acd7e076d0782cdc149b"}], "stats": {"total": 82, "additions": 81, "deletions": 1}, "files": [{"sha": "61e5b3d0133ff6980bd886d17070197b34f3eace", "filename": "src/doc/rustdoc/src/the-doc-attribute.md", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustdoc%2Fsrc%2Fthe-doc-attribute.md?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -186,6 +186,9 @@ mod bar {\n \n Now we'll have a `Re-exports` line, and `Bar` will not link to anywhere.\n \n+One special case: In Rust 2018 and later, if you `pub use` one of your dependencies, `rustdoc` will\n+not eagerly inline it as a module unless you add `#[doc(inline)}`.\n+\n ## `#[doc(hidden)]`\n \n Any item annotated with `#[doc(hidden)]` will not appear in the documentation, unless"}, {"sha": "5a020749f3577d4b2eaaf351d13ced1a26bb612d", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -3499,13 +3499,16 @@ impl Clean<Vec<Item>> for doctree::Import {\n         // forcefully don't inline if this is not public or if the\n         // #[doc(no_inline)] attribute is present.\n         // Don't inline doc(hidden) imports so they can be stripped at a later stage.\n-        let denied = !self.vis.node.is_pub() || self.attrs.iter().any(|a| {\n+        let mut denied = !self.vis.node.is_pub() || self.attrs.iter().any(|a| {\n             a.name() == \"doc\" && match a.meta_item_list() {\n                 Some(l) => attr::list_contains_name(&l, \"no_inline\") ||\n                            attr::list_contains_name(&l, \"hidden\"),\n                 None => false,\n             }\n         });\n+        // Also check whether imports were asked to be inlined, in case we're trying to re-export a\n+        // crate in Rust 2018+\n+        let please_inline = self.attrs.lists(\"doc\").has_word(\"inline\");\n         let path = self.path.clean(cx);\n         let inner = if self.glob {\n             if !denied {\n@@ -3518,6 +3521,16 @@ impl Clean<Vec<Item>> for doctree::Import {\n             Import::Glob(resolve_use_source(cx, path))\n         } else {\n             let name = self.name;\n+            if !please_inline {\n+                match path.def {\n+                    Def::Mod(did) => if !did.is_local() && did.index == CRATE_DEF_INDEX {\n+                        // if we're `pub use`ing an extern crate root, don't inline it unless we\n+                        // were specifically asked for it\n+                        denied = true;\n+                    }\n+                    _ => {}\n+                }\n+            }\n             if !denied {\n                 let mut visited = FxHashSet::default();\n                 if let Some(items) = inline::try_inline(cx, path.def, name, &mut visited) {"}, {"sha": "55202de1981beb35ac88d83d45b193f3c1e6e057", "filename": "src/test/rustdoc/inline_cross/auxiliary/use_crate.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate.rs?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub mod asdf {\n+    pub struct SomeStruct;\n+}\n+\n+pub trait SomeTrait {}"}, {"sha": "1f11cbc4da718d0b83b4aac58f4674eda631d40f", "filename": "src/test/rustdoc/inline_cross/auxiliary/use_crate_2.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fuse_crate_2.rs?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -0,0 +1,11 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub struct SomethingElse;"}, {"sha": "a98704446ee76c52b85b6303075a58bcd9ac871d", "filename": "src/test/rustdoc/inline_cross/use_crate.rs", "status": "added", "additions": 37, "deletions": 0, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fuse_crate.rs?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -0,0 +1,37 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// aux-build:use_crate.rs\n+// aux-build:use_crate_2.rs\n+// build-aux-docs\n+// edition:2018\n+// compile-flags:--extern use_crate --extern use_crate_2 -Z unstable-options\n+\n+// During the buildup to Rust 2018, rustdoc would eagerly inline `pub use some_crate;` as if it\n+// were a module, so we changed it to make `pub use`ing crate roots remain as a `pub use` statement\n+// in docs... unless you added `#[doc(inline)]`.\n+\n+#![crate_name = \"local\"]\n+\n+// @!has-dir local/use_crate\n+// @has local/index.html\n+// @has - '//code' 'pub use use_crate'\n+pub use use_crate;\n+\n+// @has-dir local/asdf\n+// @has local/asdf/index.html\n+// @has local/index.html '//a/@href' 'asdf/index.html'\n+pub use use_crate::asdf;\n+\n+// @has-dir local/use_crate_2\n+// @has local/use_crate_2/index.html\n+// @has local/index.html '//a/@href' 'use_crate_2/index.html'\n+#[doc(inline)]\n+pub use use_crate_2;"}, {"sha": "6cc7f1743ad07c440f9d63070ef479e4fcb0bac6", "filename": "src/test/rustdoc/src-links-external.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "raw_url": "https://github.com/rust-lang/rust/raw/401cb6bb539e95733290d1b0487f682f48b3f9cd/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsrc-links-external.rs?ref=401cb6bb539e95733290d1b0487f682f48b3f9cd", "patch": "@@ -18,6 +18,7 @@\n extern crate src_links_external;\n \n // @has foo/bar/index.html '//a/@href' '../../src/src_links_external/src-links-external.rs.html#11'\n+#[doc(inline)]\n pub use src_links_external as bar;\n \n // @has foo/bar/struct.Foo.html '//a/@href' '../../src/src_links_external/src-links-external.rs.html#11'"}]}