{"sha": "0afcb0568e46cec1e82510f6cd52c2c4edd662f1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBhZmNiMDU2OGU0NmNlYzFlODI1MTBmNmNkNTJjMmM0ZWRkNjYyZjE=", "commit": {"author": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-07T08:39:40Z"}, "committer": {"name": "Scott Olson", "email": "scott@solson.me", "date": "2017-02-07T08:39:40Z"}, "message": "Clean up local var dumping.", "tree": {"sha": "93e0dd157cc9d0d30fea18e18cca1471a92571ab", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/93e0dd157cc9d0d30fea18e18cca1471a92571ab"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0afcb0568e46cec1e82510f6cd52c2c4edd662f1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0afcb0568e46cec1e82510f6cd52c2c4edd662f1", "html_url": "https://github.com/rust-lang/rust/commit/0afcb0568e46cec1e82510f6cd52c2c4edd662f1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0afcb0568e46cec1e82510f6cd52c2c4edd662f1/comments", "author": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "solson", "id": 26806, "node_id": "MDQ6VXNlcjI2ODA2", "avatar_url": "https://avatars.githubusercontent.com/u/26806?v=4", "gravatar_id": "", "url": "https://api.github.com/users/solson", "html_url": "https://github.com/solson", "followers_url": "https://api.github.com/users/solson/followers", "following_url": "https://api.github.com/users/solson/following{/other_user}", "gists_url": "https://api.github.com/users/solson/gists{/gist_id}", "starred_url": "https://api.github.com/users/solson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/solson/subscriptions", "organizations_url": "https://api.github.com/users/solson/orgs", "repos_url": "https://api.github.com/users/solson/repos", "events_url": "https://api.github.com/users/solson/events{/privacy}", "received_events_url": "https://api.github.com/users/solson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "097db58f306554dee3372fb26a798956f34924b3", "url": "https://api.github.com/repos/rust-lang/rust/commits/097db58f306554dee3372fb26a798956f34924b3", "html_url": "https://github.com/rust-lang/rust/commit/097db58f306554dee3372fb26a798956f34924b3"}], "stats": {"total": 21, "additions": 14, "deletions": 7}, "files": [{"sha": "3024b5c7edc5edfc056c59150fe855f81f6daaeb", "filename": "src/eval_context.rs", "status": "modified", "additions": 14, "deletions": 7, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0afcb0568e46cec1e82510f6cd52c2c4edd662f1/src%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0afcb0568e46cec1e82510f6cd52c2c4edd662f1/src%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Feval_context.rs?ref=0afcb0568e46cec1e82510f6cd52c2c4edd662f1", "patch": "@@ -1,5 +1,6 @@\n use std::cell::Ref;\n use std::collections::HashMap;\n+use std::fmt::Write;\n \n use rustc::hir::def_id::DefId;\n use rustc::hir::map::definitions::DefPathData;\n@@ -1347,27 +1348,33 @@ impl<'a, 'tcx> EvalContext<'a, 'tcx> {\n     }\n \n     pub(super) fn dump_local(&self, lvalue: Lvalue<'tcx>) {\n-        let mut allocs = Vec::new();\n-\n         if let Lvalue::Local { frame, local } = lvalue {\n+            let mut allocs = Vec::new();\n+            let mut msg = format!(\"{:?}\", local);\n+            let last_frame = self.stack.len() - 1;\n+            if frame != last_frame {\n+                write!(msg, \" ({} frames up)\", last_frame - frame).unwrap();\n+            }\n+            write!(msg, \":\").unwrap();\n+\n             match self.stack[frame].get_local(local) {\n                 Value::ByRef(ptr) => {\n-                    trace!(\"frame[{}] {:?}:\", frame, local);\n                     allocs.push(ptr.alloc_id);\n                 }\n                 Value::ByVal(val) => {\n-                    trace!(\"frame[{}] {:?}: {:?}\", frame, local, val);\n+                    write!(msg, \" {:?}\", val).unwrap();\n                     if let PrimVal::Ptr(ptr) = val { allocs.push(ptr.alloc_id); }\n                 }\n                 Value::ByValPair(val1, val2) => {\n-                    trace!(\"frame[{}] {:?}: ({:?}, {:?})\", frame, local, val1, val2);\n+                    write!(msg, \" ({:?}, {:?})\", val1, val2).unwrap();\n                     if let PrimVal::Ptr(ptr) = val1 { allocs.push(ptr.alloc_id); }\n                     if let PrimVal::Ptr(ptr) = val2 { allocs.push(ptr.alloc_id); }\n                 }\n             }\n-        }\n \n-        self.memory.dump_allocs(allocs);\n+            trace!(\"{}\", msg);\n+            self.memory.dump_allocs(allocs);\n+        }\n     }\n \n     /// Convenience function to ensure correct usage of globals and code-sharing with locals."}]}