{"sha": "f1ca76c4978b793ec2e6332009b1ba84d164eb03", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxY2E3NmM0OTc4Yjc5M2VjMmU2MzMyMDA5YjFiYTg0ZDE2NGViMDM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T17:05:02Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-08-14T17:05:02Z"}, "message": "Auto merge of #43574 - notriddle:master, r=sfackler\n\nImplement `RefCell::replace` and `RefCell::swap`\n\nTracking issue: #43570", "tree": {"sha": "a77147bd27b563f44d1c24728d99f5352bbf17d1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a77147bd27b563f44d1c24728d99f5352bbf17d1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f1ca76c4978b793ec2e6332009b1ba84d164eb03", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f1ca76c4978b793ec2e6332009b1ba84d164eb03", "html_url": "https://github.com/rust-lang/rust/commit/f1ca76c4978b793ec2e6332009b1ba84d164eb03", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f1ca76c4978b793ec2e6332009b1ba84d164eb03/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0d12553320150750f41446291d0e19a3ca648c82", "url": "https://api.github.com/repos/rust-lang/rust/commits/0d12553320150750f41446291d0e19a3ca648c82", "html_url": "https://github.com/rust-lang/rust/commit/0d12553320150750f41446291d0e19a3ca648c82"}, {"sha": "846d373ddf31aeb76dabedb81a4ae9200d9da1cd", "url": "https://api.github.com/repos/rust-lang/rust/commits/846d373ddf31aeb76dabedb81a4ae9200d9da1cd", "html_url": "https://github.com/rust-lang/rust/commit/846d373ddf31aeb76dabedb81a4ae9200d9da1cd"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "6068f1a79611e4932cb7884acbb9606389a8cb16", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 53, "deletions": 0, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=f1ca76c4978b793ec2e6332009b1ba84d164eb03", "patch": "@@ -571,6 +571,59 @@ impl<T> RefCell<T> {\n         debug_assert!(self.borrow.get() == UNUSED);\n         unsafe { self.value.into_inner() }\n     }\n+\n+    /// Replaces the wrapped value with a new one, returning the old value,\n+    /// without deinitializing either one.\n+    ///\n+    /// This function corresponds to [`std::mem::replace`](../mem/fn.replace.html).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(refcell_replace_swap)]\n+    /// use std::cell::RefCell;\n+    /// let c = RefCell::new(5);\n+    /// let u = c.replace(6);\n+    /// assert_eq!(u, 5);\n+    /// assert_eq!(c, RefCell::new(6));\n+    /// ```\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the `RefCell` has any outstanding borrows,\n+    /// whether or not they are full mutable borrows.\n+    #[inline]\n+    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    pub fn replace(&self, t: T) -> T {\n+        mem::replace(&mut *self.borrow_mut(), t)\n+    }\n+\n+    /// Swaps the wrapped value of `self` with the wrapped value of `other`,\n+    /// without deinitializing either one.\n+    ///\n+    /// This function corresponds to [`std::mem::swap`](../mem/fn.swap.html).\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(refcell_replace_swap)]\n+    /// use std::cell::RefCell;\n+    /// let c = RefCell::new(5);\n+    /// let d = RefCell::new(6);\n+    /// c.swap(&d);\n+    /// assert_eq!(c, RefCell::new(6));\n+    /// assert_eq!(d, RefCell::new(5));\n+    /// ```\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if either `RefCell` has any outstanding borrows,\n+    /// whether or not they are full mutable borrows.\n+    #[inline]\n+    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    pub fn swap(&self, other: &Self) {\n+        mem::swap(&mut *self.borrow_mut(), &mut *other.borrow_mut())\n+    }\n }\n \n impl<T: ?Sized> RefCell<T> {"}, {"sha": "cc0ef6a6f17e04b5e7358040d0ef689cb73ea871", "filename": "src/libcore/tests/cell.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Ftests%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Ftests%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fcell.rs?ref=f1ca76c4978b793ec2e6332009b1ba84d164eb03", "patch": "@@ -287,3 +287,20 @@ fn refcell_ref_coercion() {\n         assert_eq!(&*coerced, comp);\n     }\n }\n+\n+#[test]\n+#[should_panic]\n+fn refcell_swap_borrows() {\n+    let x = RefCell::new(0);\n+    let _b = x.borrow();\n+    let y = RefCell::new(1);\n+    x.swap(&y);\n+}\n+\n+#[test]\n+#[should_panic]\n+fn refcell_replace_borrows() {\n+    let x = RefCell::new(0);\n+    let _b = x.borrow();\n+    x.replace(1);\n+}"}, {"sha": "84a3be99c275f5ca2a01956c55172edddcb2579f", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f1ca76c4978b793ec2e6332009b1ba84d164eb03/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=f1ca76c4978b793ec2e6332009b1ba84d164eb03", "patch": "@@ -31,6 +31,7 @@\n #![feature(ord_max_min)]\n #![feature(rand)]\n #![feature(raw)]\n+#![feature(refcell_replace_swap)]\n #![feature(sip_hash_13)]\n #![feature(slice_patterns)]\n #![feature(slice_rotate)]"}]}