{"sha": "a656349b5560a42ad9d260307b6c37af9beb3a23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE2NTYzNDliNTU2MGE0MmFkOWQyNjAzMDdiNmMzN2FmOWJlYjNhMjM=", "commit": {"author": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-06T13:46:01Z"}, "committer": {"name": "Amanieu d'Antras", "email": "amanieu@gmail.com", "date": "2020-05-18T13:41:33Z"}, "message": "Move InlineAsmTemplatePiece and InlineAsmOptions to librustc_ast", "tree": {"sha": "82448171968dd7be53fb55fc5e3a7f094048068c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/82448171968dd7be53fb55fc5e3a7f094048068c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a656349b5560a42ad9d260307b6c37af9beb3a23", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a656349b5560a42ad9d260307b6c37af9beb3a23", "html_url": "https://github.com/rust-lang/rust/commit/a656349b5560a42ad9d260307b6c37af9beb3a23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a656349b5560a42ad9d260307b6c37af9beb3a23/comments", "author": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Amanieu", "id": 278509, "node_id": "MDQ6VXNlcjI3ODUwOQ==", "avatar_url": "https://avatars.githubusercontent.com/u/278509?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Amanieu", "html_url": "https://github.com/Amanieu", "followers_url": "https://api.github.com/users/Amanieu/followers", "following_url": "https://api.github.com/users/Amanieu/following{/other_user}", "gists_url": "https://api.github.com/users/Amanieu/gists{/gist_id}", "starred_url": "https://api.github.com/users/Amanieu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Amanieu/subscriptions", "organizations_url": "https://api.github.com/users/Amanieu/orgs", "repos_url": "https://api.github.com/users/Amanieu/repos", "events_url": "https://api.github.com/users/Amanieu/events{/privacy}", "received_events_url": "https://api.github.com/users/Amanieu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "330bdf89b114a22f2509f27f5e2f4a9db309d2a4", "url": "https://api.github.com/repos/rust-lang/rust/commits/330bdf89b114a22f2509f27f5e2f4a9db309d2a4", "html_url": "https://github.com/rust-lang/rust/commit/330bdf89b114a22f2509f27f5e2f4a9db309d2a4"}], "stats": {"total": 213, "additions": 108, "deletions": 105}, "files": [{"sha": "969f7a041d9cb88c8d47c0e9d2ae6d39fdefa935", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -3625,13 +3625,13 @@ dependencies = [\n name = \"rustc_ast\"\n version = \"0.0.0\"\n dependencies = [\n+ \"bitflags\",\n  \"log\",\n  \"rustc_data_structures\",\n  \"rustc_index\",\n  \"rustc_lexer\",\n  \"rustc_macros\",\n  \"rustc_span\",\n- \"rustc_target\",\n  \"scoped-tls\",\n  \"serialize\",\n  \"smallvec 1.4.0\","}, {"sha": "7d105f9e8863da12eabee8368e291b8404836ba5", "filename": "src/librustc_ast/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2FCargo.toml?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -19,4 +19,4 @@ rustc_index = { path = \"../librustc_index\" }\n rustc_lexer = { path = \"../librustc_lexer\" }\n rustc_macros = { path = \"../librustc_macros\" }\n smallvec = { version = \"1.0\", features = [\"union\", \"may_dangle\"] }\n-rustc_target = { path = \"../librustc_target\" }\n+bitflags = \"1.2.1\""}, {"sha": "7ff835725073dabc71057337e3447557ed8e3752", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 54, "deletions": 1, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -34,7 +34,6 @@ use rustc_serialize::{self, Decoder, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmTemplatePiece};\n \n use std::convert::TryFrom;\n use std::fmt;\n@@ -1876,6 +1875,60 @@ pub enum InlineAsmRegOrRegClass {\n     RegClass(Symbol),\n }\n \n+bitflags::bitflags! {\n+    #[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n+    pub struct InlineAsmOptions: u8 {\n+        const PURE = 1 << 0;\n+        const NOMEM = 1 << 1;\n+        const READONLY = 1 << 2;\n+        const PRESERVES_FLAGS = 1 << 3;\n+        const NORETURN = 1 << 4;\n+        const NOSTACK = 1 << 5;\n+        const ATT_SYNTAX = 1 << 6;\n+    }\n+}\n+\n+#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n+pub enum InlineAsmTemplatePiece {\n+    String(String),\n+    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },\n+}\n+\n+impl fmt::Display for InlineAsmTemplatePiece {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        match self {\n+            Self::String(s) => {\n+                for c in s.chars() {\n+                    match c {\n+                        '{' => f.write_str(\"{{\")?,\n+                        '}' => f.write_str(\"}}\")?,\n+                        _ => write!(f, \"{}\", c.escape_debug())?,\n+                    }\n+                }\n+                Ok(())\n+            }\n+            Self::Placeholder { operand_idx, modifier: Some(modifier), .. } => {\n+                write!(f, \"{{{}:{}}}\", operand_idx, modifier)\n+            }\n+            Self::Placeholder { operand_idx, modifier: None, .. } => {\n+                write!(f, \"{{{}}}\", operand_idx)\n+            }\n+        }\n+    }\n+}\n+\n+impl InlineAsmTemplatePiece {\n+    /// Rebuilds the asm template string from its pieces.\n+    pub fn to_string(s: &[Self]) -> String {\n+        use fmt::Write;\n+        let mut out = String::new();\n+        for p in s.iter() {\n+            let _ = write!(out, \"{}\", p);\n+        }\n+        out\n+    }\n+}\n+\n /// Inline assembly operand.\n ///\n /// E.g., `out(\"eax\") result` as in `asm!(\"mov eax, 2\", out(\"eax\") result)`."}, {"sha": "856387421d90cc96bde877f01edfbf63f3271ba7", "filename": "src/librustc_ast_lowering/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast_lowering%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast_lowering%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_lowering%2Fexpr.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -980,7 +980,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n             struct_span_err!(self.sess, sp, E0472, \"asm! is unsupported on this target\").emit();\n             return hir::ExprKind::Err;\n         };\n-        if asm.options.contains(asm::InlineAsmOptions::ATT_SYNTAX) {\n+        if asm.options.contains(InlineAsmOptions::ATT_SYNTAX) {\n             match asm_arch {\n                 asm::InlineAsmArch::X86 | asm::InlineAsmArch::X86_64 => {}\n                 _ => self\n@@ -1070,7 +1070,7 @@ impl<'hir> LoweringContext<'_, 'hir> {\n \n         // Validate template modifiers against the register classes for the operands\n         for p in &asm.template {\n-            if let asm::InlineAsmTemplatePiece::Placeholder {\n+            if let InlineAsmTemplatePiece::Placeholder {\n                 operand_idx,\n                 modifier: Some(modifier),\n                 span: placeholder_span,"}, {"sha": "872126646f33d1507487458d29ce59881eb2ad0d", "filename": "src/librustc_ast_pretty/pprust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast_pretty%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_ast_pretty%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast_pretty%2Fpprust.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -5,6 +5,7 @@ use rustc_ast::ast::{self, BlockCheckMode, PatKind, RangeEnd, RangeSyntax};\n use rustc_ast::ast::{Attribute, GenericArg, MacArgs};\n use rustc_ast::ast::{GenericBound, SelfKind, TraitBoundModifier};\n use rustc_ast::ast::{InlineAsmOperand, InlineAsmRegOrRegClass};\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::attr;\n use rustc_ast::ptr::P;\n use rustc_ast::token::{self, BinOpToken, DelimToken, Nonterminal, Token, TokenKind};\n@@ -15,7 +16,6 @@ use rustc_span::edition::Edition;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, IdentPrinter, Symbol};\n use rustc_span::{BytePos, FileName, Span};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmTemplatePiece};\n \n use std::borrow::Cow;\n "}, {"sha": "c29739248976cc89d0e64b95f679fcf5e87ba4e6", "filename": "src/librustc_builtin_macros/asm.rs", "status": "modified", "additions": 21, "deletions": 20, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_builtin_macros%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_builtin_macros%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_builtin_macros%2Fasm.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -10,14 +10,13 @@ use rustc_expand::base::{self, *};\n use rustc_parse::parser::Parser;\n use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_span::{InnerSpan, Span};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmTemplatePiece};\n \n struct AsmArgs {\n     template: P<ast::Expr>,\n     operands: Vec<(ast::InlineAsmOperand, Span)>,\n     named_args: FxHashMap<Symbol, usize>,\n     reg_args: FxHashSet<usize>,\n-    options: InlineAsmOptions,\n+    options: ast::InlineAsmOptions,\n     options_span: Option<Span>,\n }\n \n@@ -57,7 +56,7 @@ fn parse_args<'a>(\n         operands: vec![],\n         named_args: FxHashMap::default(),\n         reg_args: FxHashSet::default(),\n-        options: InlineAsmOptions::empty(),\n+        options: ast::InlineAsmOptions::empty(),\n         options_span: None,\n     };\n \n@@ -204,22 +203,22 @@ fn parse_args<'a>(\n         }\n     }\n \n-    if args.options.contains(InlineAsmOptions::NOMEM)\n-        && args.options.contains(InlineAsmOptions::READONLY)\n+    if args.options.contains(ast::InlineAsmOptions::NOMEM)\n+        && args.options.contains(ast::InlineAsmOptions::READONLY)\n     {\n         let span = args.options_span.unwrap();\n         ecx.struct_span_err(span, \"the `nomem` and `readonly` options are mutually exclusive\")\n             .emit();\n     }\n-    if args.options.contains(InlineAsmOptions::PURE)\n-        && args.options.contains(InlineAsmOptions::NORETURN)\n+    if args.options.contains(ast::InlineAsmOptions::PURE)\n+        && args.options.contains(ast::InlineAsmOptions::NORETURN)\n     {\n         let span = args.options_span.unwrap();\n         ecx.struct_span_err(span, \"the `pure` and `noreturn` options are mutually exclusive\")\n             .emit();\n     }\n-    if args.options.contains(InlineAsmOptions::PURE)\n-        && !args.options.intersects(InlineAsmOptions::NOMEM | InlineAsmOptions::READONLY)\n+    if args.options.contains(ast::InlineAsmOptions::PURE)\n+        && !args.options.intersects(ast::InlineAsmOptions::NOMEM | ast::InlineAsmOptions::READONLY)\n     {\n         let span = args.options_span.unwrap();\n         ecx.struct_span_err(\n@@ -245,14 +244,14 @@ fn parse_args<'a>(\n             _ => {}\n         }\n     }\n-    if args.options.contains(InlineAsmOptions::PURE) && !have_real_output {\n+    if args.options.contains(ast::InlineAsmOptions::PURE) && !have_real_output {\n         ecx.struct_span_err(\n             args.options_span.unwrap(),\n             \"asm with `pure` option must have at least one output\",\n         )\n         .emit();\n     }\n-    if args.options.contains(InlineAsmOptions::NORETURN) && !outputs_sp.is_empty() {\n+    if args.options.contains(ast::InlineAsmOptions::NORETURN) && !outputs_sp.is_empty() {\n         let err = ecx\n             .struct_span_err(outputs_sp, \"asm outputs are not allowed with the `noreturn` option\");\n \n@@ -270,20 +269,20 @@ fn parse_options<'a>(p: &mut Parser<'a>, args: &mut AsmArgs) -> Result<(), Diagn\n \n     while !p.eat(&token::CloseDelim(token::DelimToken::Paren)) {\n         if p.eat(&token::Ident(sym::pure, false)) {\n-            args.options |= InlineAsmOptions::PURE;\n+            args.options |= ast::InlineAsmOptions::PURE;\n         } else if p.eat(&token::Ident(sym::nomem, false)) {\n-            args.options |= InlineAsmOptions::NOMEM;\n+            args.options |= ast::InlineAsmOptions::NOMEM;\n         } else if p.eat(&token::Ident(sym::readonly, false)) {\n-            args.options |= InlineAsmOptions::READONLY;\n+            args.options |= ast::InlineAsmOptions::READONLY;\n         } else if p.eat(&token::Ident(sym::preserves_flags, false)) {\n-            args.options |= InlineAsmOptions::PRESERVES_FLAGS;\n+            args.options |= ast::InlineAsmOptions::PRESERVES_FLAGS;\n         } else if p.eat(&token::Ident(sym::noreturn, false)) {\n-            args.options |= InlineAsmOptions::NORETURN;\n+            args.options |= ast::InlineAsmOptions::NORETURN;\n         } else if p.eat(&token::Ident(sym::nostack, false)) {\n-            args.options |= InlineAsmOptions::NOSTACK;\n+            args.options |= ast::InlineAsmOptions::NOSTACK;\n         } else {\n             p.expect(&token::Ident(sym::att_syntax, false))?;\n-            args.options |= InlineAsmOptions::ATT_SYNTAX;\n+            args.options |= ast::InlineAsmOptions::ATT_SYNTAX;\n         }\n \n         // Allow trailing commas\n@@ -395,7 +394,9 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n     let mut template = vec![];\n     for piece in unverified_pieces {\n         match piece {\n-            parse::Piece::String(s) => template.push(InlineAsmTemplatePiece::String(s.to_string())),\n+            parse::Piece::String(s) => {\n+                template.push(ast::InlineAsmTemplatePiece::String(s.to_string()))\n+            }\n             parse::Piece::NextArgument(arg) => {\n                 let span = arg_spans.next().unwrap_or(template_sp);\n \n@@ -467,7 +468,7 @@ fn expand_preparsed_asm(ecx: &mut ExtCtxt<'_>, sp: Span, args: AsmArgs) -> P<ast\n \n                 if let Some(operand_idx) = operand_idx {\n                     used[operand_idx] = true;\n-                    template.push(InlineAsmTemplatePiece::Placeholder {\n+                    template.push(ast::InlineAsmTemplatePiece::Placeholder {\n                         operand_idx,\n                         modifier,\n                         span,"}, {"sha": "8986ab322c07fa383b43137a7b01825933d63b88", "filename": "src/librustc_codegen_llvm/asm.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_codegen_llvm%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_codegen_llvm%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fasm.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -6,6 +6,7 @@ use crate::type_of::LayoutLlvmExt;\n use crate::value::Value;\n \n use rustc_ast::ast::LlvmAsmDialect;\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_codegen_ssa::mir::operand::OperandValue;\n use rustc_codegen_ssa::mir::place::PlaceRef;\n use rustc_codegen_ssa::traits::*;"}, {"sha": "0abfdfde7801bbe18c78587f5846a3f4cef81cfe", "filename": "src/librustc_codegen_ssa/traits/asm.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Ftraits%2Fasm.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -1,11 +1,12 @@\n use super::BackendTypes;\n use crate::mir::operand::OperandRef;\n use crate::mir::place::PlaceRef;\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir::def_id::DefId;\n use rustc_hir::{GlobalAsm, LlvmInlineAsmInner};\n use rustc_middle::ty::Instance;\n use rustc_span::Span;\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n+use rustc_target::asm::InlineAsmRegOrRegClass;\n \n #[derive(Debug)]\n pub enum InlineAsmOperandRef<'tcx, B: BackendTypes + ?Sized> {"}, {"sha": "6ba396666070ab4fbca05381ee111235acf3549e", "filename": "src/librustc_hir/arena.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Farena.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -15,7 +15,7 @@ macro_rules! arena_types {\n             [few] hir_krate: rustc_hir::Crate<$tcx>,\n             [] arm: rustc_hir::Arm<$tcx>,\n             [] asm_operand: rustc_hir::InlineAsmOperand<$tcx>,\n-            [] asm_template: rustc_target::asm::InlineAsmTemplatePiece,\n+            [] asm_template: rustc_ast::ast::InlineAsmTemplatePiece,\n             [] attribute: rustc_ast::ast::Attribute,\n             [] block: rustc_hir::Block<$tcx>,\n             [] bare_fn_ty: rustc_hir::BareFnTy<$tcx>,"}, {"sha": "ef398ab25d3fbd283c0053b6866c1958a44f9735", "filename": "src/librustc_hir/hir.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir%2Fhir.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir%2Fhir.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir%2Fhir.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -7,6 +7,7 @@ use rustc_ast::ast::{self, CrateSugar, LlvmAsmDialect};\n use rustc_ast::ast::{AttrVec, Attribute, FloatTy, IntTy, Label, LitKind, StrStyle, UintTy};\n pub use rustc_ast::ast::{BorrowKind, ImplPolarity, IsAuto};\n pub use rustc_ast::ast::{CaptureBy, Movability, Mutability};\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_ast::node_id::NodeMap;\n use rustc_ast::util::parser::ExprPrecedence;\n use rustc_data_structures::fx::FxHashSet;\n@@ -15,7 +16,7 @@ use rustc_macros::HashStable_Generic;\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{MultiSpan, Span, DUMMY_SP};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n+use rustc_target::asm::InlineAsmRegOrRegClass;\n use rustc_target::spec::abi::Abi;\n \n use smallvec::SmallVec;"}, {"sha": "8eb19cbb65a0aa3f786672f288d26a9b48ce4c5e", "filename": "src/librustc_hir_pretty/lib.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir_pretty%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_hir_pretty%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_hir_pretty%2Flib.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -12,7 +12,6 @@ use rustc_hir::{GenericBound, PatKind, RangeEnd, TraitBoundModifier};\n use rustc_span::source_map::{SourceMap, Spanned};\n use rustc_span::symbol::{kw, Ident, IdentPrinter, Symbol};\n use rustc_span::{self, BytePos, FileName};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_target::spec::abi::Abi;\n \n use std::borrow::Cow;\n@@ -1414,11 +1413,11 @@ impl<'a> State<'a> {\n                 enum AsmArg<'a> {\n                     Template(String),\n                     Operand(&'a hir::InlineAsmOperand<'a>),\n-                    Options(InlineAsmOptions),\n+                    Options(ast::InlineAsmOptions),\n                 }\n \n                 let mut args = vec![];\n-                args.push(AsmArg::Template(InlineAsmTemplatePiece::to_string(&a.template)));\n+                args.push(AsmArg::Template(ast::InlineAsmTemplatePiece::to_string(&a.template)));\n                 args.extend(a.operands.iter().map(|o| AsmArg::Operand(o)));\n                 if !a.options.is_empty() {\n                     args.push(AsmArg::Options(a.options));\n@@ -1485,25 +1484,25 @@ impl<'a> State<'a> {\n                         s.word(\"options\");\n                         s.popen();\n                         let mut options = vec![];\n-                        if opts.contains(InlineAsmOptions::PURE) {\n+                        if opts.contains(ast::InlineAsmOptions::PURE) {\n                             options.push(\"pure\");\n                         }\n-                        if opts.contains(InlineAsmOptions::NOMEM) {\n+                        if opts.contains(ast::InlineAsmOptions::NOMEM) {\n                             options.push(\"nomem\");\n                         }\n-                        if opts.contains(InlineAsmOptions::READONLY) {\n+                        if opts.contains(ast::InlineAsmOptions::READONLY) {\n                             options.push(\"readonly\");\n                         }\n-                        if opts.contains(InlineAsmOptions::PRESERVES_FLAGS) {\n+                        if opts.contains(ast::InlineAsmOptions::PRESERVES_FLAGS) {\n                             options.push(\"preserves_flags\");\n                         }\n-                        if opts.contains(InlineAsmOptions::NORETURN) {\n+                        if opts.contains(ast::InlineAsmOptions::NORETURN) {\n                             options.push(\"noreturn\");\n                         }\n-                        if opts.contains(InlineAsmOptions::NOSTACK) {\n+                        if opts.contains(ast::InlineAsmOptions::NOSTACK) {\n                             options.push(\"nostack\");\n                         }\n-                        if opts.contains(InlineAsmOptions::ATT_SYNTAX) {\n+                        if opts.contains(ast::InlineAsmOptions::ATT_SYNTAX) {\n                             options.push(\"att_syntax\");\n                         }\n                         s.commasep(Inconsistent, &options, |s, &opt| {"}, {"sha": "8247338ae0fadc1fbdf6d27d4f800f354745c288", "filename": "src/librustc_middle/mir/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_middle%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmod.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -19,6 +19,7 @@ use rustc_target::abi::VariantIdx;\n \n use polonius_engine::Atom;\n pub use rustc_ast::ast::Mutability;\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_data_structures::graph::dominators::{dominators, Dominators};\n use rustc_data_structures::graph::{self, GraphSuccessors};\n@@ -28,7 +29,7 @@ use rustc_macros::HashStable;\n use rustc_serialize::{Decodable, Encodable};\n use rustc_span::symbol::Symbol;\n use rustc_span::{Span, DUMMY_SP};\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n+use rustc_target::asm::InlineAsmRegOrRegClass;\n use std::borrow::Cow;\n use std::fmt::{self, Debug, Display, Formatter, Write};\n use std::ops::{Index, IndexMut};"}, {"sha": "6d4b394f19698ed165c0e9c31f91b49315d93019", "filename": "src/librustc_middle/ty/structural_impls.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Fstructural_impls.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -259,6 +259,8 @@ CloneTypeFoldableAndLiftImpls! {\n     String,\n     crate::middle::region::Scope,\n     ::rustc_ast::ast::FloatTy,\n+    ::rustc_ast::ast::InlineAsmOptions,\n+    ::rustc_ast::ast::InlineAsmTemplatePiece,\n     ::rustc_ast::ast::NodeId,\n     ::rustc_span::symbol::Symbol,\n     ::rustc_hir::def::Res,\n@@ -267,9 +269,7 @@ CloneTypeFoldableAndLiftImpls! {\n     ::rustc_hir::MatchSource,\n     ::rustc_hir::Mutability,\n     ::rustc_hir::Unsafety,\n-    ::rustc_target::asm::InlineAsmOptions,\n     ::rustc_target::asm::InlineAsmRegOrRegClass,\n-    ::rustc_target::asm::InlineAsmTemplatePiece,\n     ::rustc_target::spec::abi::Abi,\n     crate::mir::Local,\n     crate::mir::Promoted,"}, {"sha": "ff3c7ee3ee8237ecac444b35df6e0289a9da066a", "filename": "src/librustc_mir_build/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fbuild%2Fexpr%2Finto.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -3,12 +3,12 @@\n use crate::build::expr::category::{Category, RvalueFunc};\n use crate::build::{BlockAnd, BlockAndExtension, BlockFrame, Builder};\n use crate::hair::*;\n+use rustc_ast::ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_hir as hir;\n use rustc_middle::mir::*;\n use rustc_middle::ty::{self, CanonicalUserTypeAnnotation};\n use rustc_span::symbol::sym;\n-use rustc_target::asm::InlineAsmOptions;\n \n use rustc_target::spec::abi::Abi;\n "}, {"sha": "aba7a7a1b420c730e4b81466a6d99593f206face", "filename": "src/librustc_mir_build/hair/mod.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fmod.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -5,6 +5,7 @@\n //! structures.\n \n use self::cx::Cx;\n+use rustc_ast::ast::{InlineAsmOptions, InlineAsmTemplatePiece};\n use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_middle::infer::canonical::Canonical;\n@@ -15,7 +16,7 @@ use rustc_middle::ty::subst::SubstsRef;\n use rustc_middle::ty::{AdtDef, Const, Ty, UpvarSubsts, UserType};\n use rustc_span::Span;\n use rustc_target::abi::VariantIdx;\n-use rustc_target::asm::{InlineAsmOptions, InlineAsmRegOrRegClass, InlineAsmTemplatePiece};\n+use rustc_target::asm::InlineAsmRegOrRegClass;\n \n crate mod constant;\n crate mod cx;"}, {"sha": "93344e907c344a507d9468274b3f72bb1dea9b25", "filename": "src/librustc_passes/intrinsicck.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_passes%2Fintrinsicck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_passes%2Fintrinsicck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fintrinsicck.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -1,4 +1,4 @@\n-use rustc_ast::ast::{FloatTy, IntTy, UintTy};\n+use rustc_ast::ast::{FloatTy, InlineAsmTemplatePiece, IntTy, UintTy};\n use rustc_errors::struct_span_err;\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n@@ -11,7 +11,7 @@ use rustc_middle::ty::{self, Ty, TyCtxt};\n use rustc_session::lint;\n use rustc_span::{sym, Span, Symbol, DUMMY_SP};\n use rustc_target::abi::{Pointer, VariantIdx};\n-use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmTemplatePiece, InlineAsmType};\n+use rustc_target::asm::{InlineAsmRegOrRegClass, InlineAsmType};\n use rustc_target::spec::abi::Abi::RustIntrinsic;\n \n fn check_mod_intrinsics(tcx: TyCtxt<'_>, module_def_id: DefId) {"}, {"sha": "21512c566e1c53ee3a2f3804b6b6668963de1e60", "filename": "src/librustc_passes/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_passes%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_passes%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fliveness.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -96,6 +96,7 @@\n use self::LiveNodeKind::*;\n use self::VarKind::*;\n \n+use rustc_ast::ast::InlineAsmOptions;\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_errors::Applicability;\n use rustc_hir as hir;\n@@ -109,7 +110,6 @@ use rustc_middle::ty::{self, TyCtxt};\n use rustc_session::lint;\n use rustc_span::symbol::{sym, Symbol};\n use rustc_span::Span;\n-use rustc_target::asm::InlineAsmOptions;\n \n use std::collections::VecDeque;\n use std::fmt;"}, {"sha": "05aa85ecb7448b33ae35bb17ff1db5677fe6db9a", "filename": "src/librustc_target/asm/mod.rs", "status": "modified", "additions": 1, "deletions": 55, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_target%2Fasm%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_target%2Fasm%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fasm%2Fmod.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -1,7 +1,7 @@\n use crate::abi::Size;\n use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_macros::HashStable_Generic;\n-use rustc_span::{Span, Symbol};\n+use rustc_span::Symbol;\n use std::fmt;\n use std::str::FromStr;\n \n@@ -417,60 +417,6 @@ impl fmt::Display for InlineAsmRegOrRegClass {\n     }\n }\n \n-bitflags::bitflags! {\n-    #[derive(RustcEncodable, RustcDecodable, HashStable_Generic)]\n-    pub struct InlineAsmOptions: u8 {\n-        const PURE = 1 << 0;\n-        const NOMEM = 1 << 1;\n-        const READONLY = 1 << 2;\n-        const PRESERVES_FLAGS = 1 << 3;\n-        const NORETURN = 1 << 4;\n-        const NOSTACK = 1 << 5;\n-        const ATT_SYNTAX = 1 << 6;\n-    }\n-}\n-\n-#[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug, HashStable_Generic)]\n-pub enum InlineAsmTemplatePiece {\n-    String(String),\n-    Placeholder { operand_idx: usize, modifier: Option<char>, span: Span },\n-}\n-\n-impl fmt::Display for InlineAsmTemplatePiece {\n-    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        match self {\n-            Self::String(s) => {\n-                for c in s.chars() {\n-                    match c {\n-                        '{' => f.write_str(\"{{\")?,\n-                        '}' => f.write_str(\"}}\")?,\n-                        _ => write!(f, \"{}\", c.escape_debug())?,\n-                    }\n-                }\n-                Ok(())\n-            }\n-            Self::Placeholder { operand_idx, modifier: Some(modifier), .. } => {\n-                write!(f, \"{{{}:{}}}\", operand_idx, modifier)\n-            }\n-            Self::Placeholder { operand_idx, modifier: None, .. } => {\n-                write!(f, \"{{{}}}\", operand_idx)\n-            }\n-        }\n-    }\n-}\n-\n-impl InlineAsmTemplatePiece {\n-    /// Rebuilds the asm template string from its pieces.\n-    pub fn to_string(s: &[Self]) -> String {\n-        use fmt::Write;\n-        let mut out = String::new();\n-        for p in s.iter() {\n-            let _ = write!(out, \"{}\", p);\n-        }\n-        out\n-    }\n-}\n-\n /// Set of types which can be used with a particular register class.\n #[derive(Copy, Clone, Debug, Eq, PartialEq)]\n pub enum InlineAsmType {"}, {"sha": "c2cdd2fd3ecf615b5fc3a6d3796244b3f338379f", "filename": "src/librustc_target/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_target%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_target%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Flib.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -31,4 +31,4 @@ pub mod spec;\n /// Requirements for a `StableHashingContext` to be used in this crate.\n /// This is a hack to allow using the `HashStable_Generic` derive macro\n /// instead of implementing everything in librustc_middle.\n-pub trait HashStableContext: rustc_span::HashStableContext {}\n+pub trait HashStableContext {}"}, {"sha": "266e9b21d69a99e8d53e2f55c38b5d4f2209e580", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a656349b5560a42ad9d260307b6c37af9beb3a23/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=a656349b5560a42ad9d260307b6c37af9beb3a23", "patch": "@@ -38,7 +38,6 @@ use rustc_middle::ty::{AdtKind, Visibility};\n use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n-use rustc_target::asm::InlineAsmOptions;\n use rustc_trait_selection::traits::{self, ObligationCauseCode};\n \n use std::fmt::Display;\n@@ -1873,7 +1872,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 }\n             }\n         }\n-        if asm.options.contains(InlineAsmOptions::NORETURN) {\n+        if asm.options.contains(ast::InlineAsmOptions::NORETURN) {\n             self.tcx.types.never\n         } else {\n             self.tcx.mk_unit()"}]}