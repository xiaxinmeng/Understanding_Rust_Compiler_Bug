{"sha": "4306d0037e961825abc08bfa39af0b64d1ed52aa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzMDZkMDAzN2U5NjE4MjVhYmMwOGJmYTM5YWYwYjY0ZDFlZDUyYWE=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T00:36:08Z"}, "committer": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-09-30T02:36:57Z"}, "message": "syntax refactor `parse_self_param` (4)", "tree": {"sha": "038c884c44afce24f5b1403516fbc35090efabf1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/038c884c44afce24f5b1403516fbc35090efabf1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4306d0037e961825abc08bfa39af0b64d1ed52aa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4306d0037e961825abc08bfa39af0b64d1ed52aa", "html_url": "https://github.com/rust-lang/rust/commit/4306d0037e961825abc08bfa39af0b64d1ed52aa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4306d0037e961825abc08bfa39af0b64d1ed52aa/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ac454e9af9389bb41a06ab620599771dcb2e59b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/ac454e9af9389bb41a06ab620599771dcb2e59b6", "html_url": "https://github.com/rust-lang/rust/commit/ac454e9af9389bb41a06ab620599771dcb2e59b6"}], "stats": {"total": 67, "additions": 37, "deletions": 30}, "files": [{"sha": "fd6ffb800739d14d4ef123d610d330591f381fe3", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 35, "deletions": 24, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/4306d0037e961825abc08bfa39af0b64d1ed52aa/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4306d0037e961825abc08bfa39af0b64d1ed52aa/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4306d0037e961825abc08bfa39af0b64d1ed52aa", "patch": "@@ -1063,6 +1063,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Possibly parses mutability (`const` or `mut`).\n+    fn parse_const_or_mut(&mut self) -> Option<Mutability> {\n+        if self.eat_keyword(kw::Mut) {\n+            Some(Mutability::Mutable)\n+        } else if self.eat_keyword(kw::Const) {\n+            Some(Mutability::Immutable)\n+        } else {\n+            None\n+        }\n+    }\n+\n     fn parse_field_name(&mut self) -> PResult<'a, Ident> {\n         if let token::Literal(token::Lit { kind: token::Integer, symbol, suffix }) =\n                 self.token.kind {\n@@ -1276,6 +1287,17 @@ impl<'a> Parser<'a> {\n         }\n     }\n \n+    /// Recover for the grammar `*self`, `*const self`, and `*mut self`.\n+    fn recover_self_ptr(&mut self) -> PResult<'a, (ast::SelfKind, Ident, Span)> {\n+        let msg = \"cannot pass `self` by raw pointer\";\n+        let span = self.token.span;\n+        self.struct_span_err(span, msg)\n+            .span_label(span, msg)\n+            .emit();\n+\n+        Ok((SelfKind::Value(Mutability::Immutable), self.expect_self_ident(), self.prev_span))\n+    }\n+\n     /// Parse `self` or `self: TYPE`. We already know the current token is `self`.\n     fn parse_self_possibly_typed(&mut self, m: Mutability) -> PResult<'a, (SelfKind, Ident, Span)> {\n         let eself_ident = self.expect_self_ident();\n@@ -1327,30 +1349,19 @@ impl<'a> Parser<'a> {\n                     return Ok(None);\n                 }, self.expect_self_ident(), self.prev_span)\n             }\n-            token::BinOp(token::Star) => {\n-                // `*self`\n-                // `*const self`\n-                // `*mut self`\n-                // `*not_self`\n-                // Emit special error for `self` cases.\n-                let msg = \"cannot pass `self` by raw pointer\";\n-                (if self.is_isolated_self(1) {\n-                    self.bump();\n-                    self.struct_span_err(self.token.span, msg)\n-                        .span_label(self.token.span, msg)\n-                        .emit();\n-                    SelfKind::Value(Mutability::Immutable)\n-                } else if self.look_ahead(1, |t| t.is_mutability()) &&\n-                          self.is_isolated_self(2) {\n-                    self.bump();\n-                    self.bump();\n-                    self.struct_span_err(self.token.span, msg)\n-                        .span_label(self.token.span, msg)\n-                        .emit();\n-                    SelfKind::Value(Mutability::Immutable)\n-                } else {\n-                    return Ok(None);\n-                }, self.expect_self_ident(), self.prev_span)\n+            // `*self`\n+            token::BinOp(token::Star) if self.is_isolated_self(1) => {\n+                self.bump();\n+                self.recover_self_ptr()?\n+            }\n+            // `*mut self` and `*const self`\n+            token::BinOp(token::Star) if\n+                self.look_ahead(1, |t| t.is_mutability())\n+                && self.is_isolated_self(2) =>\n+            {\n+                self.bump();\n+                self.bump();\n+                self.recover_self_ptr()?\n             }\n             // `self` and `self: TYPE`\n             token::Ident(..) if self.is_isolated_self(0) => {"}, {"sha": "41ee2a1599d74028ab9a9d092792e591fb56eb7f", "filename": "src/libsyntax/parse/parser/ty.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4306d0037e961825abc08bfa39af0b64d1ed52aa/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4306d0037e961825abc08bfa39af0b64d1ed52aa/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser%2Fty.rs?ref=4306d0037e961825abc08bfa39af0b64d1ed52aa", "patch": "@@ -231,19 +231,15 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_ptr(&mut self) -> PResult<'a, MutTy> {\n-        let mutbl = if self.eat_keyword(kw::Mut) {\n-            Mutability::Mutable\n-        } else if self.eat_keyword(kw::Const) {\n-            Mutability::Immutable\n-        } else {\n+        let mutbl = self.parse_const_or_mut().unwrap_or_else(|| {\n             let span = self.prev_span;\n             let msg = \"expected mut or const in raw pointer type\";\n             self.struct_span_err(span, msg)\n                 .span_label(span, msg)\n                 .help(\"use `*mut T` or `*const T` as appropriate\")\n                 .emit();\n             Mutability::Immutable\n-        };\n+        });\n         let t = self.parse_ty_no_plus()?;\n         Ok(MutTy { ty: t, mutbl })\n     }"}]}