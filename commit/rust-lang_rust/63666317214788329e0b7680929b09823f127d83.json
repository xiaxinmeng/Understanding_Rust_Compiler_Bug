{"sha": "63666317214788329e0b7680929b09823f127d83", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzNjY2MzE3MjE0Nzg4MzI5ZTBiNzY4MDkyOWIwOTgyM2YxMjdkODM=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-28T16:21:58Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2014-12-28T16:21:58Z"}, "message": "auto merge of #20185 : csouth3/rust/dlist-deprecate, r=alexcrichton\n\nThis PR deprecates the `DList::ListInsertion` trait, in accordance with rust-lang/rfcs#509.  The functions which were previously part of the ListInsertion impl for `DList::IterMut` have been moved to be inherent methods on the iterator itself, and appropriate doctests have been added.", "tree": {"sha": "369eba7a422299d874ef6c7f623a923cc07981a9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/369eba7a422299d874ef6c7f623a923cc07981a9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63666317214788329e0b7680929b09823f127d83", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63666317214788329e0b7680929b09823f127d83", "html_url": "https://github.com/rust-lang/rust/commit/63666317214788329e0b7680929b09823f127d83", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63666317214788329e0b7680929b09823f127d83/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e6b29f8ad1ddfcb134d743a66ee5f467e16c350", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e6b29f8ad1ddfcb134d743a66ee5f467e16c350", "html_url": "https://github.com/rust-lang/rust/commit/3e6b29f8ad1ddfcb134d743a66ee5f467e16c350"}, {"sha": "6bb59e4e1988800c07611ce67bc82f145d4f195f", "url": "https://api.github.com/repos/rust-lang/rust/commits/6bb59e4e1988800c07611ce67bc82f145d4f195f", "html_url": "https://github.com/rust-lang/rust/commit/6bb59e4e1988800c07611ce67bc82f145d4f195f"}], "stats": {"total": 45, "additions": 41, "deletions": 4}, "files": [{"sha": "f20b37cb60f265f82ab89b90ce49851c724f50f1", "filename": "src/libcollections/dlist.rs", "status": "modified", "additions": 41, "deletions": 4, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/63666317214788329e0b7680929b09823f127d83/src%2Flibcollections%2Fdlist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63666317214788329e0b7680929b09823f127d83/src%2Flibcollections%2Fdlist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fdlist.rs?ref=63666317214788329e0b7680929b09823f127d83", "patch": "@@ -655,6 +655,7 @@ impl<'a, A> DoubleEndedIterator<&'a mut A> for IterMut<'a, A> {\n impl<'a, A> ExactSizeIterator<&'a mut A> for IterMut<'a, A> {}\n \n /// Allows mutating a `DList` while iterating.\n+#[deprecated = \"Trait is deprecated, use inherent methods on the iterator instead\"]\n pub trait ListInsertion<A> {\n     /// Inserts `elt` just after to the element most recently returned by\n     /// `.next()`\n@@ -689,14 +690,50 @@ impl<'a, A> IterMut<'a, A> {\n     }\n }\n \n-impl<'a, A> ListInsertion<A> for IterMut<'a, A> {\n+impl<'a, A> IterMut<'a, A> {\n+    /// Inserts `elt` just after the element most recently returned by `.next()`.\n+    /// The inserted element does not appear in the iteration.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut list: DList<int> = vec![1, 3, 4].into_iter().collect();\n+    ///\n+    /// {\n+    ///     let mut it = list.iter_mut();\n+    ///     assert_eq!(it.next().unwrap(), &1);\n+    ///     // insert `2` after `1`\n+    ///     it.insert_next(2);\n+    /// }\n+    /// {\n+    ///     let vec: Vec<int> = list.into_iter().collect();\n+    ///     assert_eq!(vec, vec![1i, 2, 3, 4]);\n+    /// }\n+    /// ```\n     #[inline]\n-    fn insert_next(&mut self, elt: A) {\n+    pub fn insert_next(&mut self, elt: A) {\n         self.insert_next_node(box Node::new(elt))\n     }\n \n+    /// Provides a reference to the next element, without changing the iterator.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```rust\n+    /// use std::collections::DList;\n+    ///\n+    /// let mut list: DList<int> = vec![1, 2, 3].into_iter().collect();\n+    ///\n+    /// let mut it = list.iter_mut();\n+    /// assert_eq!(it.next().unwrap(), &1);\n+    /// assert_eq!(it.peek_next().unwrap(), &2);\n+    /// // We just peeked at 2, so it was not consumed from the iterator.\n+    /// assert_eq!(it.next().unwrap(), &2);\n+    /// ```\n     #[inline]\n-    fn peek_next(&mut self) -> Option<&mut A> {\n+    pub fn peek_next(&mut self) -> Option<&mut A> {\n         if self.nelem == 0 {\n             return None\n         }\n@@ -798,7 +835,7 @@ mod tests {\n     use test::Bencher;\n     use test;\n \n-    use super::{DList, Node, ListInsertion};\n+    use super::{DList, Node};\n \n     pub fn check_links<T>(list: &DList<T>) {\n         let mut len = 0u;"}]}