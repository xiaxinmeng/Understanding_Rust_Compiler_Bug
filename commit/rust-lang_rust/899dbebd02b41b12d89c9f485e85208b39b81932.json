{"sha": "899dbebd02b41b12d89c9f485e85208b39b81932", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg5OWRiZWJkMDJiNDFiMTJkODljOWY0ODVlODUyMDhiMzliODE5MzI=", "commit": {"author": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T16:29:02Z"}, "committer": {"name": "Emil Lauridsen", "email": "mine809@gmail.com", "date": "2019-12-27T16:29:02Z"}, "message": "Fix busy-waiting issue in main cargo watch thread", "tree": {"sha": "19032c518e0bbfa6de13bb91ba4ecb56e349e717", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19032c518e0bbfa6de13bb91ba4ecb56e349e717"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/899dbebd02b41b12d89c9f485e85208b39b81932", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/899dbebd02b41b12d89c9f485e85208b39b81932", "html_url": "https://github.com/rust-lang/rust/commit/899dbebd02b41b12d89c9f485e85208b39b81932", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/899dbebd02b41b12d89c9f485e85208b39b81932/comments", "author": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kiljacken", "id": 209321, "node_id": "MDQ6VXNlcjIwOTMyMQ==", "avatar_url": "https://avatars.githubusercontent.com/u/209321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kiljacken", "html_url": "https://github.com/kiljacken", "followers_url": "https://api.github.com/users/kiljacken/followers", "following_url": "https://api.github.com/users/kiljacken/following{/other_user}", "gists_url": "https://api.github.com/users/kiljacken/gists{/gist_id}", "starred_url": "https://api.github.com/users/kiljacken/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kiljacken/subscriptions", "organizations_url": "https://api.github.com/users/kiljacken/orgs", "repos_url": "https://api.github.com/users/kiljacken/repos", "events_url": "https://api.github.com/users/kiljacken/events{/privacy}", "received_events_url": "https://api.github.com/users/kiljacken/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c732f215cb31e9f022090b8d0212f6ea9c134c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/c732f215cb31e9f022090b8d0212f6ea9c134c11", "html_url": "https://github.com/rust-lang/rust/commit/c732f215cb31e9f022090b8d0212f6ea9c134c11"}], "stats": {"total": 8, "additions": 5, "deletions": 3}, "files": [{"sha": "78250f91075446ceee61ef885e88c77971ebab0f", "filename": "crates/ra_cargo_watch/src/lib.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/899dbebd02b41b12d89c9f485e85208b39b81932/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/899dbebd02b41b12d89c9f485e85208b39b81932/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Flib.rs?ref=899dbebd02b41b12d89c9f485e85208b39b81932", "patch": "@@ -2,7 +2,7 @@\n //! another compatible command (f.x. clippy) in a background thread and provide\n //! LSP diagnostics based on the output of the command.\n use cargo_metadata::Message;\n-use crossbeam_channel::{select, unbounded, Receiver, RecvError, Sender};\n+use crossbeam_channel::{never, select, unbounded, Receiver, RecvError, Sender};\n use lsp_types::{\n     Diagnostic, Url, WorkDoneProgress, WorkDoneProgressBegin, WorkDoneProgressEnd,\n     WorkDoneProgressReport,\n@@ -193,7 +193,9 @@ impl CheckWatcherState {\n                 recv(self.watcher.message_recv) -> msg => match msg {\n                     Ok(msg) => self.handle_message(msg, task_send),\n                     Err(RecvError) => {\n-                        // Watcher finished, do nothing.\n+                        // Watcher finished, replace it with a never channel to\n+                        // avoid busy-waiting.\n+                        std::mem::replace(&mut self.watcher.message_recv, never());\n                     },\n                 }\n             };\n@@ -370,7 +372,7 @@ impl std::ops::Drop for WatchThread {\n         if let Some(handle) = self.handle.take() {\n             // Replace our reciever with dummy one, so we can drop and close the\n             // one actually communicating with the thread\n-            let recv = std::mem::replace(&mut self.message_recv, crossbeam_channel::never());\n+            let recv = std::mem::replace(&mut self.message_recv, never());\n \n             // Dropping the original reciever initiates thread sub-process shutdown\n             drop(recv);"}]}