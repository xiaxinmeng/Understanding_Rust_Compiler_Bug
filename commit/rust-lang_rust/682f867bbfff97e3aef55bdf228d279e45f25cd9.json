{"sha": "682f867bbfff97e3aef55bdf228d279e45f25cd9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY4MmY4NjdiYmZmZjk3ZTNhZWY1NWJkZjIyOGQyNzllNDVmMjVjZDk=", "commit": {"author": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-30T16:14:17Z"}, "committer": {"name": "Bj\u00f6rn Steinbrink", "email": "bsteinbr@gmail.com", "date": "2015-01-30T19:13:10Z"}, "message": "Add missing calls to llvm.lifetime.end intrinsics\n\nThese missing calls lead to miscompilations with more recent LLVM\nversions.", "tree": {"sha": "1d45fd57bc90871856877eb28fd61e374723b8c5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1d45fd57bc90871856877eb28fd61e374723b8c5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/682f867bbfff97e3aef55bdf228d279e45f25cd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/682f867bbfff97e3aef55bdf228d279e45f25cd9", "html_url": "https://github.com/rust-lang/rust/commit/682f867bbfff97e3aef55bdf228d279e45f25cd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/682f867bbfff97e3aef55bdf228d279e45f25cd9/comments", "author": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dotdash", "id": 230962, "node_id": "MDQ6VXNlcjIzMDk2Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/230962?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dotdash", "html_url": "https://github.com/dotdash", "followers_url": "https://api.github.com/users/dotdash/followers", "following_url": "https://api.github.com/users/dotdash/following{/other_user}", "gists_url": "https://api.github.com/users/dotdash/gists{/gist_id}", "starred_url": "https://api.github.com/users/dotdash/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dotdash/subscriptions", "organizations_url": "https://api.github.com/users/dotdash/orgs", "repos_url": "https://api.github.com/users/dotdash/repos", "events_url": "https://api.github.com/users/dotdash/events{/privacy}", "received_events_url": "https://api.github.com/users/dotdash/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0f5980ead4f88e78a47f4d84da4dc11472f66ba", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0f5980ead4f88e78a47f4d84da4dc11472f66ba", "html_url": "https://github.com/rust-lang/rust/commit/e0f5980ead4f88e78a47f4d84da4dc11472f66ba"}], "stats": {"total": 19, "additions": 16, "deletions": 3}, "files": [{"sha": "5e7ea67fd84e58a93c6e021c9bbf96f7d9f76f1b", "filename": "src/librustc_trans/trans/base.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fbase.rs?ref=682f867bbfff97e3aef55bdf228d279e45f25cd9", "patch": "@@ -2007,7 +2007,11 @@ pub fn trans_named_tuple_constructor<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n     let bcx = match dest {\n         expr::SaveIn(_) => bcx,\n         expr::Ignore => {\n-            glue::drop_ty(bcx, llresult, result_ty, debug_loc)\n+            let bcx = glue::drop_ty(bcx, llresult, result_ty, debug_loc);\n+            if !type_is_zero_size(ccx, result_ty) {\n+                call_lifetime_end(bcx, llresult);\n+            }\n+            bcx\n         }\n     };\n "}, {"sha": "39d17f45ffa084da44e13bbf65aa316aa0a93548", "filename": "src/librustc_trans/trans/datum.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fdatum.rs?ref=682f867bbfff97e3aef55bdf228d279e45f25cd9", "patch": "@@ -199,6 +199,9 @@ impl KindOps for Rvalue {\n                               -> Block<'blk, 'tcx> {\n         // No cleanup is scheduled for an rvalue, so we don't have\n         // to do anything after a move to cancel or duplicate it.\n+        if self.is_by_ref() {\n+            call_lifetime_end(bcx, _val);\n+        }\n         bcx\n     }\n \n@@ -320,6 +323,7 @@ impl<'tcx> Datum<'tcx, Rvalue> {\n                     ByValue => DatumBlock::new(bcx, self),\n                     ByRef => {\n                         let llval = load_ty(bcx, self.val, self.ty);\n+                        call_lifetime_end(bcx, self.val);\n                         DatumBlock::new(bcx, Datum::new(llval, self.ty, Rvalue::new(ByValue)))\n                     }\n                 }"}, {"sha": "35e91791855151ba08914f10a455ad16c15e98a9", "filename": "src/librustc_trans/trans/intrinsic.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/682f867bbfff97e3aef55bdf228d279e45f25cd9/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fintrinsic.rs?ref=682f867bbfff97e3aef55bdf228d279e45f25cd9", "patch": "@@ -243,7 +243,8 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                     dest\n                 };\n \n-                fcx.pop_custom_cleanup_scope(cleanup_scope);\n+                fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n+                fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n \n                 return match dest {\n                     expr::SaveIn(d) => Result::new(bcx, d),\n@@ -268,17 +269,19 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                              false,\n                              RustIntrinsic);\n \n-    fcx.pop_custom_cleanup_scope(cleanup_scope);\n+    fcx.scopes.borrow_mut().last_mut().unwrap().drop_non_lifetime_clean();\n \n     let call_debug_location = DebugLoc::At(call_info.id, call_info.span);\n \n     // These are the only intrinsic functions that diverge.\n     if name.get() == \"abort\" {\n         let llfn = ccx.get_intrinsic(&(\"llvm.trap\"));\n         Call(bcx, llfn, &[], None, call_debug_location);\n+        fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n         Unreachable(bcx);\n         return Result::new(bcx, C_undef(Type::nil(ccx).ptr_to()));\n     } else if name.get() == \"unreachable\" {\n+        fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n         Unreachable(bcx);\n         return Result::new(bcx, C_nil(ccx));\n     }\n@@ -765,6 +768,8 @@ pub fn trans_intrinsic_call<'a, 'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n         expr::SaveIn(_) => {}\n     }\n \n+    fcx.pop_and_trans_custom_cleanup_scope(bcx, cleanup_scope);\n+\n     Result::new(bcx, llresult)\n }\n "}]}