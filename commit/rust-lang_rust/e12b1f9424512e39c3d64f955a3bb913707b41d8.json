{"sha": "e12b1f9424512e39c3d64f955a3bb913707b41d8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxMmIxZjk0MjQ1MTJlMzljM2Q2NGY5NTVhM2JiOTEzNzA3YjQxZDg=", "commit": {"author": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-02-23T07:06:53Z"}, "committer": {"name": "Nicholas Mazzuca", "email": "npmazzuca@gmail.com", "date": "2016-02-26T05:20:41Z"}, "message": "Add unstable copy_from_slice", "tree": {"sha": "1a24cea210b3902aa775acf98b7b4cfb9612762b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1a24cea210b3902aa775acf98b7b4cfb9612762b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e12b1f9424512e39c3d64f955a3bb913707b41d8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e12b1f9424512e39c3d64f955a3bb913707b41d8", "html_url": "https://github.com/rust-lang/rust/commit/e12b1f9424512e39c3d64f955a3bb913707b41d8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e12b1f9424512e39c3d64f955a3bb913707b41d8/comments", "author": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ubsan", "id": 60298436, "node_id": "MDQ6VXNlcjYwMjk4NDM2", "avatar_url": "https://avatars.githubusercontent.com/u/60298436?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ubsan", "html_url": "https://github.com/ubsan", "followers_url": "https://api.github.com/users/ubsan/followers", "following_url": "https://api.github.com/users/ubsan/following{/other_user}", "gists_url": "https://api.github.com/users/ubsan/gists{/gist_id}", "starred_url": "https://api.github.com/users/ubsan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ubsan/subscriptions", "organizations_url": "https://api.github.com/users/ubsan/orgs", "repos_url": "https://api.github.com/users/ubsan/repos", "events_url": "https://api.github.com/users/ubsan/events{/privacy}", "received_events_url": "https://api.github.com/users/ubsan/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8842e28be8857e8e37591e2dec469d6720c278cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/8842e28be8857e8e37591e2dec469d6720c278cb", "html_url": "https://github.com/rust-lang/rust/commit/8842e28be8857e8e37591e2dec469d6720c278cb"}], "stats": {"total": 64, "additions": 63, "deletions": 1}, "files": [{"sha": "9c6fdc217dc42ba8d0b7bdb9b9e86e1056dfc7ef", "filename": "src/libcollections/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollections%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollections%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Flib.rs?ref=e12b1f9424512e39c3d64f955a3bb913707b41d8", "patch": "@@ -27,6 +27,7 @@\n        test(no_crate_inject, attr(allow(unused_variables), deny(warnings))))]\n \n #![cfg_attr(test, allow(deprecated))] // rand\n+#![cfg_attr(not(test), feature(copy_from_slice))] // impl [T]\n #![cfg_attr(not(stage0), deny(warnings))]\n \n #![feature(alloc)]"}, {"sha": "21c5e71286192fda7ae93450ec811e22d9fb562c", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=e12b1f9424512e39c3d64f955a3bb913707b41d8", "patch": "@@ -837,6 +837,30 @@ impl<T> [T] {\n         core_slice::SliceExt::clone_from_slice(self, src)\n     }\n \n+    /// Copies all elements from `src` into `self`, using a memcpy.\n+    ///\n+    /// The length of `src` must be the same as `self`.\n+    ///\n+    /// # Panics\n+    ///\n+    /// This function will panic if the two slices have different lengths.\n+    ///\n+    /// # Example\n+    ///\n+    /// ```rust\n+    /// #![feature(copy_from_slice)]\n+    /// let mut dst = [0, 0, 0];\n+    /// let src = [1, 2, 3];\n+    ///\n+    /// dst.copy_from_slice(&src);\n+    /// assert_eq!(src, dst);\n+    /// ```\n+    #[unstable(feature = \"copy_from_slice\", issue = \"31755\")]\n+    pub fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n+        core_slice::SliceExt::copy_from_slice(self, src)\n+    }\n+\n+\n     /// Copies `self` into a new `Vec`.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]"}, {"sha": "bf76d0b847caa08b54b629492da9d9bf888ee64e", "filename": "src/libcollectionstest/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollectionstest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollectionstest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Flib.rs?ref=e12b1f9424512e39c3d64f955a3bb913707b41d8", "patch": "@@ -16,6 +16,7 @@\n #![feature(btree_range)]\n #![feature(collections)]\n #![feature(collections_bound)]\n+#![feature(copy_from_slice)]\n #![feature(const_fn)]\n #![feature(fn_traits)]\n #![feature(enumset)]"}, {"sha": "f3bb58ba45b7effd4d3331634a180702bd0ff3fb", "filename": "src/libcollectionstest/slice.rs", "status": "modified", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollectionstest%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcollectionstest%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollectionstest%2Fslice.rs?ref=e12b1f9424512e39c3d64f955a3bb913707b41d8", "patch": "@@ -1138,6 +1138,30 @@ fn test_box_slice_clone_panics() {\n     assert_eq!(drop_count.load(Ordering::SeqCst), 8);\n }\n \n+#[test]\n+fn test_copy_from_slice() {\n+    let src = [0, 1, 2, 3, 4, 5];\n+    let mut dst = [0; 6];\n+    dst.copy_from_slice(&src);\n+    assert_eq!(src, dst)\n+}\n+\n+#[test]\n+#[should_panic(expected = \"destination and source slices have different lengths\")]\n+fn test_copy_from_slice_dst_longer() {\n+    let src = [0, 1, 2, 3];\n+    let mut dst = [0; 5];\n+    dst.copy_from_slice(&src);\n+}\n+\n+#[test]\n+#[should_panic(expected = \"destination and source slices have different lengths\")]\n+fn test_copy_from_slice_dst_shorter() {\n+    let src = [0, 1, 2, 3];\n+    let mut dst = [0; 3];\n+    dst.copy_from_slice(&src);\n+}\n+\n mod bench {\n     use std::{mem, ptr};\n     use std::__rand::{Rng, thread_rng};"}, {"sha": "afda70f4fcc0af67b8d44853f7002ce071fe1339", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e12b1f9424512e39c3d64f955a3bb913707b41d8/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=e12b1f9424512e39c3d64f955a3bb913707b41d8", "patch": "@@ -48,7 +48,7 @@ use result::Result;\n use result::Result::{Ok, Err};\n use ptr;\n use mem;\n-use marker::{Send, Sync, self};\n+use marker::{Copy, Send, Sync, self};\n use raw::Repr;\n // Avoid conflicts with *both* the Slice trait (buggy) and the `slice::raw` module.\n use raw::Slice as RawSlice;\n@@ -152,6 +152,8 @@ pub trait SliceExt {\n \n     #[stable(feature = \"clone_from_slice\", since = \"1.7.0\")]\n     fn clone_from_slice(&mut self, &[Self::Item]) where Self::Item: Clone;\n+    #[unstable(feature = \"copy_from_slice\", issue = \"31755\")]\n+    fn copy_from_slice(&mut self, src: &[Self::Item]) where Self::Item: Copy;\n }\n \n // Use macros to be generic over const/mut\n@@ -488,6 +490,16 @@ impl<T> SliceExt for [T] {\n             self[i].clone_from(&src[i]);\n         }\n     }\n+\n+    #[inline]\n+    fn copy_from_slice(&mut self, src: &[T]) where T: Copy {\n+        assert!(self.len() == src.len(),\n+                \"destination and source slices have different lengths\");\n+        unsafe {\n+            ptr::copy_nonoverlapping(\n+                src.as_ptr(), self.as_mut_ptr(), self.len());\n+        }\n+    }\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}