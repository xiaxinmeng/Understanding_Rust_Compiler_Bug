{"sha": "2f99cc80d841781ef84d3f83cb732d0b84db3592", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJmOTljYzgwZDg0MTc4MWVmODRkM2Y4M2NiNzMyZDBiODRkYjM1OTI=", "commit": {"author": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-15T17:52:29Z"}, "committer": {"name": "Jubilee Young", "email": "workingjubilee@gmail.com", "date": "2021-06-21T23:15:19Z"}, "message": "Add pointer vectors: SimdConstPtr, SimdMutPtr", "tree": {"sha": "94bcebba836968204eb9e36da4bcab820fba7ac8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94bcebba836968204eb9e36da4bcab820fba7ac8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2f99cc80d841781ef84d3f83cb732d0b84db3592", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2f99cc80d841781ef84d3f83cb732d0b84db3592", "html_url": "https://github.com/rust-lang/rust/commit/2f99cc80d841781ef84d3f83cb732d0b84db3592", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2f99cc80d841781ef84d3f83cb732d0b84db3592/comments", "author": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "workingjubilee", "id": 46493976, "node_id": "MDQ6VXNlcjQ2NDkzOTc2", "avatar_url": "https://avatars.githubusercontent.com/u/46493976?v=4", "gravatar_id": "", "url": "https://api.github.com/users/workingjubilee", "html_url": "https://github.com/workingjubilee", "followers_url": "https://api.github.com/users/workingjubilee/followers", "following_url": "https://api.github.com/users/workingjubilee/following{/other_user}", "gists_url": "https://api.github.com/users/workingjubilee/gists{/gist_id}", "starred_url": "https://api.github.com/users/workingjubilee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/workingjubilee/subscriptions", "organizations_url": "https://api.github.com/users/workingjubilee/orgs", "repos_url": "https://api.github.com/users/workingjubilee/repos", "events_url": "https://api.github.com/users/workingjubilee/events{/privacy}", "received_events_url": "https://api.github.com/users/workingjubilee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16765a10218bbdfc06375961d70477460a53fc01", "url": "https://api.github.com/repos/rust-lang/rust/commits/16765a10218bbdfc06375961d70477460a53fc01", "html_url": "https://github.com/rust-lang/rust/commit/16765a10218bbdfc06375961d70477460a53fc01"}], "stats": {"total": 58, "additions": 58, "deletions": 0}, "files": [{"sha": "95214ea88642bfdd9efb10683a4941daba32229a", "filename": "crates/core_simd/src/vector.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2f99cc80d841781ef84d3f83cb732d0b84db3592/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99cc80d841781ef84d3f83cb732d0b84db3592/crates%2Fcore_simd%2Fsrc%2Fvector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector.rs?ref=2f99cc80d841781ef84d3f83cb732d0b84db3592", "patch": "@@ -5,3 +5,6 @@ mod uint;\n pub use float::*;\n pub use int::*;\n pub use uint::*;\n+\n+// Vectors of pointers are not for public use at the current time.\n+pub(crate) mod ptr;"}, {"sha": "30bef038b333bdcdeb112c4d5669dd6fca0c321f", "filename": "crates/core_simd/src/vector/ptr.rs", "status": "added", "additions": 55, "deletions": 0, "changes": 55, "blob_url": "https://github.com/rust-lang/rust/blob/2f99cc80d841781ef84d3f83cb732d0b84db3592/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2f99cc80d841781ef84d3f83cb732d0b84db3592/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcore_simd%2Fsrc%2Fvector%2Fptr.rs?ref=2f99cc80d841781ef84d3f83cb732d0b84db3592", "patch": "@@ -0,0 +1,55 @@\n+//! Private implementation details of public gather/scatter APIs.\n+use crate::SimdUsize;\n+use core::mem;\n+\n+/// A vector of *const T.\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub(crate) struct SimdConstPtr<T, const LANES: usize>([*const T; LANES]);\n+\n+impl<T, const LANES: usize> SimdConstPtr<T, LANES>\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    T: Sized,\n+{\n+    #[inline]\n+    #[must_use]\n+    pub fn splat(ptr: *const T) -> Self {\n+        Self([ptr; LANES])\n+    }\n+\n+    #[inline]\n+    #[must_use]\n+    pub fn wrapping_add(self, addend: SimdUsize<LANES>) -> Self {\n+        unsafe {\n+            let x: SimdUsize<LANES> = mem::transmute_copy(&self);\n+            mem::transmute_copy(&{ x + (addend * mem::size_of::<T>()) })\n+        }\n+    }\n+}\n+\n+/// A vector of *mut T. Be very careful around potential aliasing.\n+#[derive(Debug, Copy, Clone)]\n+#[repr(simd)]\n+pub(crate) struct SimdMutPtr<T, const LANES: usize>([*mut T; LANES]);\n+\n+impl<T, const LANES: usize> SimdMutPtr<T, LANES>\n+where\n+    SimdUsize<LANES>: crate::LanesAtMost32,\n+    T: Sized,\n+{\n+    #[inline]\n+    #[must_use]\n+    pub fn splat(ptr: *mut T) -> Self {\n+        Self([ptr; LANES])\n+    }\n+\n+    #[inline]\n+    #[must_use]\n+    pub fn wrapping_add(self, addend: SimdUsize<LANES>) -> Self {\n+        unsafe {\n+            let x: SimdUsize<LANES> = mem::transmute_copy(&self);\n+            mem::transmute_copy(&{ x + (addend * mem::size_of::<T>()) })\n+        }\n+    }\n+}"}]}