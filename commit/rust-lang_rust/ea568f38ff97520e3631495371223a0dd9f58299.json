{"sha": "ea568f38ff97520e3631495371223a0dd9f58299", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNTY4ZjM4ZmY5NzUyMGUzNjMxNDk1MzcxMjIzYTBkZDlmNTgyOTk=", "commit": {"author": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-31T21:11:57Z"}, "committer": {"name": "Ben Blum", "email": "bblum@andrew.cmu.edu", "date": "2012-07-31T21:47:19Z"}, "message": "send_map: each -> each_ref, and add each* copying versions; add 'iterate' test", "tree": {"sha": "5e7a1a3643fb6c54be1b6ceb6f24366215ae5b8e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5e7a1a3643fb6c54be1b6ceb6f24366215ae5b8e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea568f38ff97520e3631495371223a0dd9f58299", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea568f38ff97520e3631495371223a0dd9f58299", "html_url": "https://github.com/rust-lang/rust/commit/ea568f38ff97520e3631495371223a0dd9f58299", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea568f38ff97520e3631495371223a0dd9f58299/comments", "author": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bblum", "id": 1820515, "node_id": "MDQ6VXNlcjE4MjA1MTU=", "avatar_url": "https://avatars.githubusercontent.com/u/1820515?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bblum", "html_url": "https://github.com/bblum", "followers_url": "https://api.github.com/users/bblum/followers", "following_url": "https://api.github.com/users/bblum/following{/other_user}", "gists_url": "https://api.github.com/users/bblum/gists{/gist_id}", "starred_url": "https://api.github.com/users/bblum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bblum/subscriptions", "organizations_url": "https://api.github.com/users/bblum/orgs", "repos_url": "https://api.github.com/users/bblum/repos", "events_url": "https://api.github.com/users/bblum/events{/privacy}", "received_events_url": "https://api.github.com/users/bblum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0bd6371155d187ce8d8ad5c0a45ea344804f6813", "url": "https://api.github.com/repos/rust-lang/rust/commits/0bd6371155d187ce8d8ad5c0a45ea344804f6813", "html_url": "https://github.com/rust-lang/rust/commit/0bd6371155d187ce8d8ad5c0a45ea344804f6813"}], "stats": {"total": 40, "additions": 35, "deletions": 5}, "files": [{"sha": "cd7468b8b3828ef3db2a7cc64b78981175a19667", "filename": "src/libcore/send_map.rs", "status": "modified", "additions": 35, "deletions": 5, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/ea568f38ff97520e3631495371223a0dd9f58299/src%2Flibcore%2Fsend_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea568f38ff97520e3631495371223a0dd9f58299/src%2Flibcore%2Fsend_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fsend_map.rs?ref=ea568f38ff97520e3631495371223a0dd9f58299", "patch": "@@ -289,7 +289,7 @@ mod linear {\n         }\n         */\n \n-        fn each(blk: fn(k: &K, v: &V) -> bool) {\n+        fn each_ref(blk: fn(k: &K, v: &V) -> bool) {\n             for vec::each(self.buckets) |slot| {\n                 let mut broke = false;\n                 do slot.iter |bucket| {\n@@ -300,11 +300,27 @@ mod linear {\n                 if broke { break; }\n             }\n         }\n-        fn each_key(blk: fn(k: &K) -> bool) {\n-            self.each(|k, _v| blk(k))\n+        fn each_key_ref(blk: fn(k: &K) -> bool) {\n+            self.each_ref(|k, _v| blk(k))\n         }\n-        fn each_value(blk: fn(v: &V) -> bool) {\n-            self.each(|_k, v| blk(v))\n+        fn each_value_ref(blk: fn(v: &V) -> bool) {\n+            self.each_ref(|_k, v| blk(v))\n+        }\n+    }\n+\n+    impl public_methods<K: copy, V: copy> for &linear_map<K,V> {\n+        fn each(blk: fn(+K,+V) -> bool) {\n+            self.each_ref(|k,v| blk(copy *k, copy *v));\n+        }\n+    }\n+    impl public_methods<K: copy, V> for &linear_map<K,V> {\n+        fn each_key(blk: fn(+K) -> bool) {\n+            self.each_key_ref(|k| blk(copy *k));\n+        }\n+    }\n+    impl public_methods<K, V: copy> for &linear_map<K,V> {\n+        fn each_value(blk: fn(+V) -> bool) {\n+            self.each_value_ref(|v| blk(copy *v));\n         }\n     }\n }\n@@ -360,4 +376,18 @@ mod test {\n         assert m.get(&9) == 4;\n         assert m.get(&5) == 3;\n     }\n+\n+    #[test]\n+    fn iterate() {\n+        let mut m = linear::linear_map_with_capacity(uint_hash, uint_eq, 4);\n+        for uint::range(0, 32) |i| {\n+            assert (&mut m).insert(i, i*2);\n+        }\n+        let mut observed = 0;\n+        for (&m).each |k, v| {\n+            assert v == k*2;\n+            observed |= (1 << k);\n+        }\n+        assert observed == 0xFFFF_FFFF;\n+    }\n }"}]}