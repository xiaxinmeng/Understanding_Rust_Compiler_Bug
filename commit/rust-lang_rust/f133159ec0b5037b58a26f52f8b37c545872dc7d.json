{"sha": "f133159ec0b5037b58a26f52f8b37c545872dc7d", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYxMzMxNTllYzBiNTAzN2I1OGEyNmY1MmY4YjM3YzU0NTg3MmRjN2Q=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-06-05T15:23:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-05T15:23:22Z"}, "message": "Merge #4760\n\n4760: Minimize FileLoader interface r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "49122142ee70da554fd5bf87ee058a7103d90773", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49122142ee70da554fd5bf87ee058a7103d90773"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f133159ec0b5037b58a26f52f8b37c545872dc7d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe2mNqCRBK7hj4Ov3rIwAAdHIIAIB6qPLjJI/NFzR9uoznL3Kt\nV1xNfhzwH5ZrK2mmjIVWsSzliUs4qln1PiJIwZmwnsAoBG5JZLVZ9+BvkSzQzUDY\nx0SZ/hca2LZEZR+/HsBQIb/I82k7ZayizB18igvFTXaXfM8J1lvZBF0WbdKMUs01\nqrigRwe+nAEWxIVEOgeMfuyns/f/wgB7QsVA/HRStWw8M9E2ttdvVPxZRCZ8NkR3\nyRY6CdPUmkUR3YtrShC4mW+KkFjgr8se60GFD5rttpUeHbRvJ5r51Dt1v9Fag28N\n0fhElJQ1ROiaPHUFU9E9ps/ocFTBvQ5UPliyIv8TVXvODZaSWjA4pdW/ickPErg=\n=YbSJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 49122142ee70da554fd5bf87ee058a7103d90773\nparent 4029628f15c612182ad9da1c652078f9df62f5cf\nparent bbb40d746368eb6a38498649a723c7ead0ef8136\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1591370602 +0000\ncommitter GitHub <noreply@github.com> 1591370602 +0000\n\nMerge #4760\n\n4760: Minimize FileLoader interface r=matklad a=matklad\n\n\n\nbors r+\n\ud83e\udd16\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f133159ec0b5037b58a26f52f8b37c545872dc7d", "html_url": "https://github.com/rust-lang/rust/commit/f133159ec0b5037b58a26f52f8b37c545872dc7d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f133159ec0b5037b58a26f52f8b37c545872dc7d/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4029628f15c612182ad9da1c652078f9df62f5cf", "url": "https://api.github.com/repos/rust-lang/rust/commits/4029628f15c612182ad9da1c652078f9df62f5cf", "html_url": "https://github.com/rust-lang/rust/commit/4029628f15c612182ad9da1c652078f9df62f5cf"}, {"sha": "bbb40d746368eb6a38498649a723c7ead0ef8136", "url": "https://api.github.com/repos/rust-lang/rust/commits/bbb40d746368eb6a38498649a723c7ead0ef8136", "html_url": "https://github.com/rust-lang/rust/commit/bbb40d746368eb6a38498649a723c7ead0ef8136"}], "stats": {"total": 114, "additions": 35, "deletions": 79}, "files": [{"sha": "91e0ee6194793705b3fc173aa7e4df4bde9a406a", "filename": "crates/ra_db/src/lib.rs", "status": "modified", "additions": 24, "deletions": 29, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Flib.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -89,14 +89,13 @@ pub const DEFAULT_LRU_CAP: usize = 128;\n pub trait FileLoader {\n     /// Text of the file.\n     fn file_text(&self, file_id: FileId) -> Arc<String>;\n+    /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n+    /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n+    /// so the input is guaranteed to be utf-8 string. We might introduce\n+    /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n+    /// get by with a `&str` for the time being.\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId>;\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>>;\n-\n-    fn resolve_extern_path(\n-        &self,\n-        extern_id: ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId>;\n }\n \n /// Database which stores all significant input facts: source code and project\n@@ -154,34 +153,30 @@ impl<T: SourceDatabaseExt> FileLoader for FileLoaderDelegate<&'_ T> {\n     fn file_text(&self, file_id: FileId) -> Arc<String> {\n         SourceDatabaseExt::file_text(self.0, file_id)\n     }\n-    /// Note that we intentionally accept a `&str` and not a `&Path` here. This\n-    /// method exists to handle `#[path = \"/some/path.rs\"] mod foo;` and such,\n-    /// so the input is guaranteed to be utf-8 string. We might introduce\n-    /// `struct StrPath(str)` for clarity some day, but it's a bit messy, so we\n-    /// get by with a `&str` for the time being.\n     fn resolve_path(&self, anchor: FileId, path: &str) -> Option<FileId> {\n-        let rel_path = {\n-            let mut rel_path = self.0.file_relative_path(anchor);\n-            assert!(rel_path.pop());\n-            rel_path.push(path);\n-            rel_path.normalize()\n-        };\n-        let source_root = self.0.file_source_root(anchor);\n-        let source_root = self.0.source_root(source_root);\n-        source_root.file_by_relative_path(&rel_path)\n+        // FIXME: this *somehow* should be platform agnostic...\n+        if std::path::Path::new(path).is_absolute() {\n+            let krate = *self.relevant_crates(anchor).get(0)?;\n+            let (extern_source_id, relative_file) =\n+                self.0.crate_graph()[krate].extern_source.extern_path(path)?;\n+\n+            let source_root = self.0.source_root(SourceRootId(extern_source_id.0));\n+            source_root.file_by_relative_path(&relative_file)\n+        } else {\n+            let rel_path = {\n+                let mut rel_path = self.0.file_relative_path(anchor);\n+                assert!(rel_path.pop());\n+                rel_path.push(path);\n+                rel_path.normalize()\n+            };\n+            let source_root = self.0.file_source_root(anchor);\n+            let source_root = self.0.source_root(source_root);\n+            source_root.file_by_relative_path(&rel_path)\n+        }\n     }\n \n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         let source_root = self.0.file_source_root(file_id);\n         self.0.source_root_crates(source_root)\n     }\n-\n-    fn resolve_extern_path(\n-        &self,\n-        extern_id: ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        let source_root = self.0.source_root(SourceRootId(extern_id.0));\n-        source_root.file_by_relative_path(&relative_path)\n-    }\n }"}, {"sha": "bcfa66ac953cbe20e0a6586b957e5e61490d2b1d", "filename": "crates/ra_hir_def/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 11, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Ftest_db.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -6,9 +6,7 @@ use std::{\n };\n \n use hir_expand::db::AstDatabase;\n-use ra_db::{\n-    salsa, CrateId, ExternSourceId, FileId, FileLoader, FileLoaderDelegate, RelativePath, Upcast,\n-};\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, Upcast};\n \n use crate::db::DefDatabase;\n \n@@ -64,14 +62,6 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-\n-    fn resolve_extern_path(\n-        &self,\n-        extern_id: ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n-    }\n }\n \n impl TestDB {"}, {"sha": "7579546d2f3fafac2a05f4430cc82f9bf4d2a2c0", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -295,19 +295,13 @@ fn concat_expand(\n \n fn relative_file(db: &dyn AstDatabase, call_id: MacroCallId, path: &str) -> Option<FileId> {\n     let call_site = call_id.as_file().original_file(db);\n-\n-    // Handle trivial case\n-    if let Some(res) = db.resolve_path(call_site, path) {\n-        // Prevent include itself\n-        return if res == call_site { None } else { Some(res) };\n+    let res = db.resolve_path(call_site, path)?;\n+    // Prevent include itself\n+    if res == call_site {\n+        None\n+    } else {\n+        Some(res)\n     }\n-\n-    // Extern paths ?\n-    let krate = *db.relevant_crates(call_site).get(0)?;\n-    let (extern_source_id, relative_file) =\n-        db.crate_graph()[krate].extern_source.extern_path(path)?;\n-\n-    db.resolve_extern_path(extern_source_id, &relative_file)\n }\n \n fn parse_string(tt: &tt::Subtree) -> Result<String, mbe::ExpandError> {"}, {"sha": "fdf225f55be9920777876f4b34345c4ed22e3a26", "filename": "crates/ra_hir_expand/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Ftest_db.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -5,7 +5,7 @@ use std::{\n     sync::{Arc, Mutex},\n };\n \n-use ra_db::{salsa, CrateId, ExternSourceId, FileId, FileLoader, FileLoaderDelegate, RelativePath};\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate};\n \n #[salsa::database(\n     ra_db::SourceDatabaseExtStorage,\n@@ -47,11 +47,4 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn resolve_extern_path(\n-        &self,\n-        anchor: ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_extern_path(anchor, relative_path)\n-    }\n }"}, {"sha": "e484968a099c39498e91416e7082b02b1227b330", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 1, "deletions": 10, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -7,9 +7,7 @@ use std::{\n \n use hir_def::{db::DefDatabase, AssocItemId, ModuleDefId, ModuleId};\n use hir_expand::{db::AstDatabase, diagnostics::DiagnosticSink};\n-use ra_db::{\n-    salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath, SourceDatabase, Upcast,\n-};\n+use ra_db::{salsa, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase, Upcast};\n use stdx::format_to;\n \n use crate::{db::HirDatabase, diagnostics::Diagnostic, expr::ExprValidator};\n@@ -78,13 +76,6 @@ impl FileLoader for TestDB {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn resolve_extern_path(\n-        &self,\n-        extern_id: ra_db::ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n-    }\n }\n \n impl TestDB {"}, {"sha": "727d743b5fda59c8a8b68f7d94bbbe6e4b84f743", "filename": "crates/ra_ide_db/src/lib.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f133159ec0b5037b58a26f52f8b37c545872dc7d/crates%2Fra_ide_db%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Flib.rs?ref=f133159ec0b5037b58a26f52f8b37c545872dc7d", "patch": "@@ -16,8 +16,8 @@ use std::sync::Arc;\n use hir::db::{AstDatabase, DefDatabase};\n use ra_db::{\n     salsa::{self, Database, Durability},\n-    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, RelativePath,\n-    SourceDatabase, SourceRootId, Upcast,\n+    Canceled, CheckCanceled, CrateId, FileId, FileLoader, FileLoaderDelegate, SourceDatabase,\n+    SourceRootId, Upcast,\n };\n use rustc_hash::FxHashMap;\n \n@@ -63,13 +63,6 @@ impl FileLoader for RootDatabase {\n     fn relevant_crates(&self, file_id: FileId) -> Arc<Vec<CrateId>> {\n         FileLoaderDelegate(self).relevant_crates(file_id)\n     }\n-    fn resolve_extern_path(\n-        &self,\n-        extern_id: ra_db::ExternSourceId,\n-        relative_path: &RelativePath,\n-    ) -> Option<FileId> {\n-        FileLoaderDelegate(self).resolve_extern_path(extern_id, relative_path)\n-    }\n }\n \n impl salsa::Database for RootDatabase {"}]}