{"sha": "d4ba561aafb501972f581c1f8e6d1885959f9306", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0YmE1NjFhYWZiNTAxOTcyZjU4MWMxZjhlNmQxODg1OTU5ZjkzMDY=", "commit": {"author": {"name": "Dmitry Murzin", "email": "diralik@yandex.ru", "date": "2020-07-30T19:20:31Z"}, "committer": {"name": "Dmitry Murzin", "email": "diralik@yandex.ru", "date": "2020-07-30T21:28:21Z"}, "message": "Review fixes", "tree": {"sha": "8fe2d3f2b1a50f650199ea2c71a56af21b3ea8bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8fe2d3f2b1a50f650199ea2c71a56af21b3ea8bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4ba561aafb501972f581c1f8e6d1885959f9306", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEL6jLL1MPjzOQhhDzPafrjjExpFQFAl8jO3UACgkQPafrjjEx\npFRWkA/9Ecxo+mkBhW636bkAdfJBAdCInJ9LTOZQq0HZ8S5xg0YBXpk/bHR8g6vM\nF/iOCBiBJ+J9m5RANjwu2En1fF+l0yhvwej4H7boq/xNI9OqkfVqqf/BuyX6a0bf\nuUlPRu/SulmJ7Y7A19v3xduUW8lkt/Oju1Jf+19ILzBEWnOqsl0h9QkEFFI3n2At\nUiupmuZIkJS5Te5lKdGBxlA4Sglm5RqoROhqr+8+T3QLT8n7YCXURHTk5cEE88Ho\nWFV60Pt7M0TVPLHXkq3sYc6QvR0Q7hytEYl1RZTiUIZEPA0PznddztoS5hrqMijh\n85vqR3Xrjmgzi+KuGNscKDspjWWxjpwt2e/eT82e144YBXC2XzeYyuxKeRXZEv9G\nHWOuU0FNBFoDHi3HoXxiE6g0I7+js3zGNp9bLnb/rnH/shNT9kU8Ntp64JWBmJqj\nnrgIA+uisJ+Co5WXAyj/yOgnIZXLiFfDoMJCNBMzx76lykcnYIFI+EU30mdbGBHE\njFMt084dg43ilEMgaGlKbOk5OemZ5rU1Wmz62ksMXNAG0kIX0SYC2oYxNHk1wxJ+\nM5Y7ZiTthg50cGpXygkAAzR0qZTT3BaxyLkmZJnIWjxL22iTL0UMFu8VmqqZGyKB\nahA6+15yCH9bF1+J0QPkIsWzRAzdWnTxXUEdYSCNhAMOtk55ixs=\n=x3Lw\n-----END PGP SIGNATURE-----", "payload": "tree 8fe2d3f2b1a50f650199ea2c71a56af21b3ea8bc\nparent a427c99f3d2a0b2c55d19af73bcad81f1dc761ab\nauthor Dmitry Murzin <diralik@yandex.ru> 1596136831 +0300\ncommitter Dmitry Murzin <diralik@yandex.ru> 1596144501 +0300\n\nReview fixes\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4ba561aafb501972f581c1f8e6d1885959f9306", "html_url": "https://github.com/rust-lang/rust/commit/d4ba561aafb501972f581c1f8e6d1885959f9306", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4ba561aafb501972f581c1f8e6d1885959f9306/comments", "author": {"login": "dima74", "id": 6505554, "node_id": "MDQ6VXNlcjY1MDU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6505554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dima74", "html_url": "https://github.com/dima74", "followers_url": "https://api.github.com/users/dima74/followers", "following_url": "https://api.github.com/users/dima74/following{/other_user}", "gists_url": "https://api.github.com/users/dima74/gists{/gist_id}", "starred_url": "https://api.github.com/users/dima74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dima74/subscriptions", "organizations_url": "https://api.github.com/users/dima74/orgs", "repos_url": "https://api.github.com/users/dima74/repos", "events_url": "https://api.github.com/users/dima74/events{/privacy}", "received_events_url": "https://api.github.com/users/dima74/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dima74", "id": 6505554, "node_id": "MDQ6VXNlcjY1MDU1NTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/6505554?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dima74", "html_url": "https://github.com/dima74", "followers_url": "https://api.github.com/users/dima74/followers", "following_url": "https://api.github.com/users/dima74/following{/other_user}", "gists_url": "https://api.github.com/users/dima74/gists{/gist_id}", "starred_url": "https://api.github.com/users/dima74/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dima74/subscriptions", "organizations_url": "https://api.github.com/users/dima74/orgs", "repos_url": "https://api.github.com/users/dima74/repos", "events_url": "https://api.github.com/users/dima74/events{/privacy}", "received_events_url": "https://api.github.com/users/dima74/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a427c99f3d2a0b2c55d19af73bcad81f1dc761ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/a427c99f3d2a0b2c55d19af73bcad81f1dc761ab", "html_url": "https://github.com/rust-lang/rust/commit/a427c99f3d2a0b2c55d19af73bcad81f1dc761ab"}], "stats": {"total": 102, "additions": 71, "deletions": 31}, "files": [{"sha": "9217324b18cc4188e33b9e548bb854ee7242295f", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/d4ba561aafb501972f581c1f8e6d1885959f9306/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ba561aafb501972f581c1f8e6d1885959f9306/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=d4ba561aafb501972f581c1f8e6d1885959f9306", "patch": "@@ -2570,11 +2570,16 @@ fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n     // lint if caller of `.map().flatten()` is an Iterator\n     if match_trait_method(cx, expr, &paths::ITERATOR) {\n         let map_closure_ty = cx.typeck_results().expr_ty(&map_args[1]);\n-        let is_map_to_option = if let ty::Closure(_def_id, substs) = map_closure_ty.kind {\n-            let map_closure_return_ty = cx.tcx.erase_late_bound_regions(&substs.as_closure().sig().output());\n-            is_type_diagnostic_item(cx, map_closure_return_ty, sym!(option_type))\n-        } else {\n-            false\n+        let is_map_to_option = match map_closure_ty.kind {\n+            ty::Closure(_, _) | ty::FnDef(_, _) | ty::FnPtr(_) => {\n+                let map_closure_sig = match map_closure_ty.kind {\n+                    ty::Closure(_, substs) => substs.as_closure().sig(),\n+                    _ => map_closure_ty.fn_sig(cx.tcx),\n+                };\n+                let map_closure_return_ty = cx.tcx.erase_late_bound_regions(&map_closure_sig.output());\n+                is_type_diagnostic_item(cx, map_closure_return_ty, sym!(option_type))\n+            },\n+            _ => false,\n         };\n \n         let method_to_use = if is_map_to_option {\n@@ -2584,19 +2589,13 @@ fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n             // `(...).map(...)` has type `impl Iterator<Item=impl Iterator<...>>\n             \"flat_map\"\n         };\n-        let msg = &format!(\n-            \"called `map(..).flatten()` on an `Iterator`. \\\n-                   This is more succinctly expressed by calling `.{}(..)`\",\n-            method_to_use\n-        );\n-        let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n-        let hint = format!(\"{0}.{1}({2})\", self_snippet, method_to_use, func_snippet);\n+        let hint = format!(\".{0}({1})\", method_to_use, func_snippet);\n         span_lint_and_sugg(\n             cx,\n             MAP_FLATTEN,\n-            expr.span,\n-            msg,\n+            expr.span.with_lo(map_args[0].span.hi()),\n+            \"called `map(..).flatten()` on an `Iterator`\",\n             &format!(\"try using `{}` instead\", method_to_use),\n             hint,\n             Applicability::MachineApplicable,\n@@ -2605,16 +2604,13 @@ fn lint_map_flatten<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx hir::Expr<'_>, map\n \n     // lint if caller of `.map().flatten()` is an Option\n     if is_type_diagnostic_item(cx, cx.typeck_results().expr_ty(&map_args[0]), sym!(option_type)) {\n-        let msg = \"called `map(..).flatten()` on an `Option`. \\\n-                    This is more succinctly expressed by calling `.and_then(..)`\";\n-        let self_snippet = snippet(cx, map_args[0].span, \"..\");\n         let func_snippet = snippet(cx, map_args[1].span, \"..\");\n-        let hint = format!(\"{0}.and_then({1})\", self_snippet, func_snippet);\n+        let hint = format!(\".and_then({})\", func_snippet);\n         span_lint_and_sugg(\n             cx,\n             MAP_FLATTEN,\n-            expr.span,\n-            msg,\n+            expr.span.with_lo(map_args[0].span.hi()),\n+            \"called `map(..).flatten()` on an `Option`\",\n             \"try using `and_then` instead\",\n             hint,\n             Applicability::MachineApplicable,"}, {"sha": "a5fdf7df613d325d6b5bf80ed09647806581adb0", "filename": "tests/ui/map_flatten.fixed", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.fixed?ref=d4ba561aafb501972f581c1f8e6d1885959f9306", "patch": "@@ -5,7 +5,20 @@\n #![allow(clippy::map_identity)]\n \n fn main() {\n+    // mapping to Option on Iterator\n+    fn option_id(x: i8) -> Option<i8> {\n+        Some(x)\n+    }\n+    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n+    let option_id_closure = |x| Some(x);\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id).collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_ref).collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(option_id_closure).collect();\n     let _: Vec<_> = vec![5_i8; 6].into_iter().filter_map(|x| x.checked_add(1)).collect();\n+\n+    // mapping to Iterator on Iterator\n     let _: Vec<_> = vec![5_i8; 6].into_iter().flat_map(|x| 0..x).collect();\n+\n+    // mapping to Option on Option\n     let _: Option<_> = (Some(Some(1))).and_then(|x| x);\n }"}, {"sha": "abbc4e16e567951af8a952810e2a7bce9724d832", "filename": "tests/ui/map_flatten.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.rs?ref=d4ba561aafb501972f581c1f8e6d1885959f9306", "patch": "@@ -5,7 +5,20 @@\n #![allow(clippy::map_identity)]\n \n fn main() {\n+    // mapping to Option on Iterator\n+    fn option_id(x: i8) -> Option<i8> {\n+        Some(x)\n+    }\n+    let option_id_ref: fn(i8) -> Option<i8> = option_id;\n+    let option_id_closure = |x| Some(x);\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+    let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+\n+    // mapping to Iterator on Iterator\n     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n+\n+    // mapping to Option on Option\n     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n }"}, {"sha": "b6479cd69eac4f49f6a0abf08c55dc3ba7f0224d", "filename": "tests/ui/map_flatten.stderr", "status": "modified", "additions": 29, "deletions": 11, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d4ba561aafb501972f581c1f8e6d1885959f9306/tests%2Fui%2Fmap_flatten.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fmap_flatten.stderr?ref=d4ba561aafb501972f581c1f8e6d1885959f9306", "patch": "@@ -1,22 +1,40 @@\n-error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.filter_map(..)`\n-  --> $DIR/map_flatten.rs:8:21\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:14:46\n    |\n-LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `vec![5_i8; 6].into_iter().filter_map(|x| x.checked_add(1))`\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id)`\n    |\n    = note: `-D clippy::map-flatten` implied by `-D warnings`\n \n-error: called `map(..).flatten()` on an `Iterator`. This is more succinctly expressed by calling `.flat_map(..)`\n-  --> $DIR/map_flatten.rs:9:21\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:15:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_ref).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_ref)`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:16:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(option_id_closure).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(option_id_closure)`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:17:46\n+   |\n+LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| x.checked_add(1)).flatten().collect();\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `filter_map` instead: `.filter_map(|x| x.checked_add(1))`\n+\n+error: called `map(..).flatten()` on an `Iterator`\n+  --> $DIR/map_flatten.rs:20:46\n    |\n LL |     let _: Vec<_> = vec![5_i8; 6].into_iter().map(|x| 0..x).flatten().collect();\n-   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `vec![5_i8; 6].into_iter().flat_map(|x| 0..x)`\n+   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `flat_map` instead: `.flat_map(|x| 0..x)`\n \n-error: called `map(..).flatten()` on an `Option`. This is more succinctly expressed by calling `.and_then(..)`\n-  --> $DIR/map_flatten.rs:10:24\n+error: called `map(..).flatten()` on an `Option`\n+  --> $DIR/map_flatten.rs:23:39\n    |\n LL |     let _: Option<_> = (Some(Some(1))).map(|x| x).flatten();\n-   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `(Some(Some(1))).and_then(|x| x)`\n+   |                                       ^^^^^^^^^^^^^^^^^^^^^ help: try using `and_then` instead: `.and_then(|x| x)`\n \n-error: aborting due to 3 previous errors\n+error: aborting due to 6 previous errors\n "}]}