{"sha": "807def022a6540dde6727b9a438ea3b0eaafd9b5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgwN2RlZjAyMmE2NTQwZGRlNjcyN2I5YTQzOGVhM2IwZWFhZmQ5YjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-07T15:09:46Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-02-11T21:55:24Z"}, "message": "region -- Improve comments in region.rs", "tree": {"sha": "bdc6064ee19b551f79b071e6dced90b3217876bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bdc6064ee19b551f79b071e6dced90b3217876bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/807def022a6540dde6727b9a438ea3b0eaafd9b5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/807def022a6540dde6727b9a438ea3b0eaafd9b5", "html_url": "https://github.com/rust-lang/rust/commit/807def022a6540dde6727b9a438ea3b0eaafd9b5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/807def022a6540dde6727b9a438ea3b0eaafd9b5/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "844eab194063ad6500abe01e7f256140bdba28a3", "url": "https://api.github.com/repos/rust-lang/rust/commits/844eab194063ad6500abe01e7f256140bdba28a3", "html_url": "https://github.com/rust-lang/rust/commit/844eab194063ad6500abe01e7f256140bdba28a3"}], "stats": {"total": 54, "additions": 43, "deletions": 11}, "files": [{"sha": "fcda7cd79e4219e9da4b3ecef466fecbc0f3f040", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 43, "deletions": 11, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/807def022a6540dde6727b9a438ea3b0eaafd9b5/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/807def022a6540dde6727b9a438ea3b0eaafd9b5/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=807def022a6540dde6727b9a438ea3b0eaafd9b5", "patch": "@@ -36,19 +36,42 @@ use syntax::ast_util::{stmt_id};\n /**\n The region maps encode information about region relationships.\n \n-- `scope_map` maps from:\n-  - an expression to the expression or block encoding the maximum\n-    (static) lifetime of a value produced by that expression.  This is\n-    generally the innermost call, statement, match, or block.\n-  - a variable or binding id to the block in which that variable is declared.\n-- `free_region_map` maps from:\n-  - a free region `a` to a list of free regions `bs` such that\n-    `a <= b for all b in bs`\n+- `scope_map` maps from a scope id to the enclosing scope id; this is\n+  usually corresponding to the lexical nesting, though in the case of\n+  closures the parent scope is the innermost conditinal expression or repeating\n+  block\n+\n+- `var_map` maps from a variable or binding id to the block in which\n+  that variable is declared.\n+\n+- `free_region_map` maps from a free region `a` to a list of free\n+  regions `bs` such that `a <= b for all b in bs`\n   - the free region map is populated during type check as we check\n     each function. See the function `relate_free_regions` for\n     more information.\n-- `temporary_scopes` includes scopes where cleanups for temporaries occur.\n-  These are statements and loop/fn bodies.\n+\n+- `rvalue_scopes` includes entries for those expressions whose cleanup\n+  scope is larger than the default. The map goes from the expression\n+  id to the cleanup scope id. For rvalues not present in this table,\n+  the appropriate cleanup scope is the innermost enclosing statement,\n+  conditional expression, or repeating block (see `terminating_scopes`).\n+\n+- `terminating_scopes` is a set containing the ids of each statement,\n+  or conditional/repeating expression. These scopes are calling \"terminating\n+  scopes\" because, when attempting to find the scope of a temporary, by\n+  default we search up the enclosing scopes until we encounter the\n+  terminating scope. A conditional/repeating\n+  expression is one which is not guaranteed to execute exactly once\n+  upon entering the parent scope. This could be because the expression\n+  only executes conditionally, such as the expression `b` in `a && b`,\n+  or because the expression may execute many times, such as a loop\n+  body. The reason that we distinguish such expressions is that, upon\n+  exiting the parent scope, we cannot statically know how many times\n+  the expression executed, and thus if the expression creates\n+  temporaries we cannot know statically how many such temporaries we\n+  would have to cleanup. Therefore we ensure that the temporaries never\n+  outlast the conditional/repeating expression, preventing the need\n+  for dynamic checks and/or arbitrary amounts of stack space.\n */\n pub struct RegionMaps {\n     priv scope_map: RefCell<HashMap<ast::NodeId, ast::NodeId>>,\n@@ -840,7 +863,16 @@ fn resolve_fn(visitor: &mut RegionResolutionVisitor,\n         visit::FkItemFn(..) | visit::FkMethod(..) => {\n             Context {parent: None, var_parent: None, ..cx}\n         }\n-        visit::FkFnBlock(..) => cx\n+        visit::FkFnBlock(..) => {\n+            // FIXME(#3696) -- at present we are place the closure body\n+            // within the region hierarchy exactly where it appears lexically.\n+            // This is wrong because the closure may live longer\n+            // than the enclosing expression. We should probably fix this,\n+            // but the correct fix is a bit subtle, and I am also not sure\n+            // that the present approach is unsound -- it may not permit\n+            // any illegal programs. See issue for more details.\n+            cx\n+        }\n     };\n     visitor.visit_block(body, body_cx);\n }"}]}