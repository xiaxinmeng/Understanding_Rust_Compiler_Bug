{"sha": "d5408f376f93123a043845b69d467d4b7686ae86", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ1NDA4ZjM3NmY5MzEyM2EwNDM4NDViNjlkNDY3ZDRiNzY4NmFlODY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-19T09:50:13Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-03-19T09:50:13Z"}, "message": "Auto merge of #23507 - jbcrail:fix-comment-spelling, r=alexcrichton\n\nI corrected misspelled comments in several crates.", "tree": {"sha": "4f6e31db6cc3d40fbe8830a93e4b7f7267133839", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6e31db6cc3d40fbe8830a93e4b7f7267133839"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d5408f376f93123a043845b69d467d4b7686ae86", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d5408f376f93123a043845b69d467d4b7686ae86", "html_url": "https://github.com/rust-lang/rust/commit/d5408f376f93123a043845b69d467d4b7686ae86", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d5408f376f93123a043845b69d467d4b7686ae86/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0084f92302b3352372bfd14ebbf083bae695d16e", "url": "https://api.github.com/repos/rust-lang/rust/commits/0084f92302b3352372bfd14ebbf083bae695d16e", "html_url": "https://github.com/rust-lang/rust/commit/0084f92302b3352372bfd14ebbf083bae695d16e"}, {"sha": "857035ade7577d23bac596eb43c34e6844ce0b74", "url": "https://api.github.com/repos/rust-lang/rust/commits/857035ade7577d23bac596eb43c34e6844ce0b74", "html_url": "https://github.com/rust-lang/rust/commit/857035ade7577d23bac596eb43c34e6844ce0b74"}], "stats": {"total": 24, "additions": 12, "deletions": 12}, "files": [{"sha": "7bf248917a5cd20596312e917142777035701041", "filename": "src/libcore/str/pattern.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibcore%2Fstr%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibcore%2Fstr%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fpattern.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -25,7 +25,7 @@ use super::CharEq;\n ///\n /// The trait itself acts as a builder for an associated\n /// `Searcher` type, which does the actual work of finding\n-/// occurences of the pattern in a string.\n+/// occurrences of the pattern in a string.\n pub trait Pattern<'a>: Sized {\n     /// Associated searcher for this pattern\n     type Searcher: Searcher<'a>;\n@@ -72,7 +72,7 @@ pub enum SearchStep {\n     /// Expresses that `haystack[a..b]` has been rejected as a possible match\n     /// of the pattern.\n     ///\n-    /// Note that there might be more than one `Reject` betwen two `Match`es,\n+    /// Note that there might be more than one `Reject` between two `Match`es,\n     /// there is no requirement for them to be combined into one.\n     Reject(usize, usize),\n     /// Expresses that every byte of the haystack has been visted, ending"}, {"sha": "1a794f56f802c62c3a9c371f47acf6583e568111", "filename": "src/librbml/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrbml%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrbml%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrbml%2Flib.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -1061,7 +1061,7 @@ pub mod writer {\n         }\n \n         /// Returns the current position while marking it stable, i.e.\n-        /// generated bytes so far woundn't be affected by relaxation.\n+        /// generated bytes so far wouldn't be affected by relaxation.\n         pub fn mark_stable_position(&mut self) -> u64 {\n             let pos = self.writer.seek(SeekFrom::Current(0)).unwrap();\n             if self.relax_limit < pos {"}, {"sha": "8d228c22c3cfa54056cedc2fdc0b7da4d1eb5d0b", "filename": "src/librustc_trans/trans/type_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Ftype_of.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -264,7 +264,7 @@ pub fn arg_type_of<'a, 'tcx>(cx: &CrateContext<'a, 'tcx>, t: Ty<'tcx>) -> Type {\n }\n \n /// Get the LLVM type corresponding to a Rust type, i.e. `middle::ty::Ty`.\n-/// This is the right LLVM type for an alloca containg a value of that type,\n+/// This is the right LLVM type for an alloca containing a value of that type,\n /// and the pointee of an Lvalue Datum (which is always a LLVM pointer).\n /// For unsized types, the returned type is a fat pointer, thus the resulting\n /// LLVM type for a `Trait` Lvalue is `{ i8*, void(i8*)** }*`, which is a double"}, {"sha": "5a4ccc0b7b410cbb250693776365117bf7e12874", "filename": "src/librustc_typeck/check/regionck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionck.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -225,7 +225,7 @@ impl<'a, 'tcx> Rcx<'a, 'tcx> {\n     /// }\n     /// ```\n     ///\n-    /// Here, the region of `b` will be `<R0>`.  `<R0>` is constrainted to be some subregion of the\n+    /// Here, the region of `b` will be `<R0>`.  `<R0>` is constrained to be some subregion of the\n     /// block B and some superregion of the call.  If we forced it now, we'd choose the smaller\n     /// region (the call).  But that would make the *b illegal.  Since we don't resolve, the type\n     /// of b will be `&<R0>.int` and then `*b` will require that `<R0>` be bigger than the let and"}, {"sha": "09592db8a116d399abd4bf2d815942672ff56e9c", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -294,7 +294,7 @@ impl<'a,'tcx> AdjustBorrowKind<'a,'tcx> {\n \n     /// Indicates that `cmt` is being directly mutated (e.g., assigned\n     /// to). If cmt contains any by-ref upvars, this implies that\n-    /// those upvars must be borrowed using an `&mut` borow.\n+    /// those upvars must be borrowed using an `&mut` borrow.\n     fn adjust_upvar_borrow_kind_for_mut(&mut self, cmt: mc::cmt<'tcx>) {\n         debug!(\"adjust_upvar_borrow_kind_for_mut(cmt={})\",\n                cmt.repr(self.tcx()));"}, {"sha": "53f67766ea676f5b446fa07a55a71c1a4873782f", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -19,7 +19,7 @@ use io::{self, BufReader, LineWriter};\n use sync::{Arc, Mutex, MutexGuard};\n use sys::stdio;\n \n-/// Stdout used by print! and println! macroses\n+/// Stdout used by print! and println! macros\n thread_local! {\n     static LOCAL_STDOUT: RefCell<Option<Box<Write + Send>>> = {\n         RefCell::new(None)"}, {"sha": "f7d7a5715bc68647c9566e4a5c51d28e0b04f28e", "filename": "src/libstd/sys/common/rwlock.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fcommon%2Frwlock.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -25,7 +25,7 @@ impl RWLock {\n     /// thread to do so.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous methodo call.\n+    /// previous method call.\n     #[inline]\n     pub unsafe fn read(&self) { self.0.read() }\n \n@@ -35,15 +35,15 @@ impl RWLock {\n     /// This function does not block the current thread.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous methodo call.\n+    /// previous method call.\n     #[inline]\n     pub unsafe fn try_read(&self) -> bool { self.0.try_read() }\n \n     /// Acquire write access to the underlying lock, blocking the current thread\n     /// to do so.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous methodo call.\n+    /// previous method call.\n     #[inline]\n     pub unsafe fn write(&self) { self.0.write() }\n \n@@ -53,7 +53,7 @@ impl RWLock {\n     /// This function does not block the current thread.\n     ///\n     /// Behavior is undefined if the rwlock has been moved between this and any\n-    /// previous methodo call.\n+    /// previous method call.\n     #[inline]\n     pub unsafe fn try_write(&self) -> bool { self.0.try_write() }\n "}, {"sha": "704abc43f10da3f8e614bf4612ac894988ecb5a2", "filename": "src/libsyntax/ast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibsyntax%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d5408f376f93123a043845b69d467d4b7686ae86/src%2Flibsyntax%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fast.rs?ref=d5408f376f93123a043845b69d467d4b7686ae86", "patch": "@@ -913,7 +913,7 @@ pub enum Expr_ {\n \n /// The explicit Self type in a \"qualified path\". The actual\n /// path, including the trait and the associated item, is stored\n-/// sepparately. `position` represents the index of the associated\n+/// separately. `position` represents the index of the associated\n /// item qualified with this Self type.\n ///\n ///     <Vec<T> as a::b::Trait>::AssociatedItem"}]}