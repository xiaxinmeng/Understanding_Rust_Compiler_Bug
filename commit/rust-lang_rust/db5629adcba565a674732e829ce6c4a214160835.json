{"sha": "db5629adcba565a674732e829ce6c4a214160835", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiNTYyOWFkY2JhNTY1YTY3NDczMmU4MjljZTZjNGEyMTQxNjA4MzU=", "commit": {"author": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2020-11-21T21:12:05Z"}, "committer": {"name": "mark", "email": "markm@cs.wisc.edu", "date": "2021-03-20T00:45:32Z"}, "message": "stabilize or_patterns", "tree": {"sha": "b26c62e70022d59985a0c76fd4c7089e4578b53f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b26c62e70022d59985a0c76fd4c7089e4578b53f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/db5629adcba565a674732e829ce6c4a214160835", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/db5629adcba565a674732e829ce6c4a214160835", "html_url": "https://github.com/rust-lang/rust/commit/db5629adcba565a674732e829ce6c4a214160835", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/db5629adcba565a674732e829ce6c4a214160835/comments", "author": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mark-i-m", "id": 8827840, "node_id": "MDQ6VXNlcjg4Mjc4NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/8827840?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mark-i-m", "html_url": "https://github.com/mark-i-m", "followers_url": "https://api.github.com/users/mark-i-m/followers", "following_url": "https://api.github.com/users/mark-i-m/following{/other_user}", "gists_url": "https://api.github.com/users/mark-i-m/gists{/gist_id}", "starred_url": "https://api.github.com/users/mark-i-m/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mark-i-m/subscriptions", "organizations_url": "https://api.github.com/users/mark-i-m/orgs", "repos_url": "https://api.github.com/users/mark-i-m/repos", "events_url": "https://api.github.com/users/mark-i-m/events{/privacy}", "received_events_url": "https://api.github.com/users/mark-i-m/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f5f33ec0e0455eefa72fc5567eb1280a4d5ee206", "url": "https://api.github.com/repos/rust-lang/rust/commits/f5f33ec0e0455eefa72fc5567eb1280a4d5ee206", "html_url": "https://github.com/rust-lang/rust/commit/f5f33ec0e0455eefa72fc5567eb1280a4d5ee206"}], "stats": {"total": 156, "additions": 59, "deletions": 97}, "files": [{"sha": "c1aa74029f5ebca96e67cb1d9d6fc86ea8e611de", "filename": "compiler/rustc_apfloat/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_apfloat%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -34,7 +34,7 @@\n #![no_std]\n #![forbid(unsafe_code)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n \n #[macro_use]\n extern crate alloc;"}, {"sha": "a823d375fcf50158e499ffaaf04e6868c2c39c2f", "filename": "compiler/rustc_ast/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -16,7 +16,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(label_break_value)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "8a051066c7d218209ddc6fdb2a6df147bc354b44", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -31,7 +31,7 @@\n //! in the HIR, especially for multiple identifiers.\n \n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "2f73e44faf62b0cd9c7a62ae4f45164b2c1d3199", "filename": "compiler/rustc_ast_passes/src/feature_gate.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_passes%2Fsrc%2Ffeature_gate.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -686,7 +686,6 @@ pub fn check_crate(krate: &ast::Crate, sess: &Session) {\n         \"to use an async block, remove the `||`: `async {`\"\n     );\n     gate_all!(generators, \"yield syntax is experimental\");\n-    gate_all!(or_patterns, \"or-patterns syntax is experimental\");\n     gate_all!(raw_ref_op, \"raw address of syntax is experimental\");\n     gate_all!(const_trait_bound_opt_out, \"`?const` on trait bounds is experimental\");\n     gate_all!(const_trait_impl, \"const trait impls are experimental\");"}, {"sha": "67b66284f66f022dd0478bdefd32a9a50156ef1f", "filename": "compiler/rustc_ast_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,6 +1,6 @@\n #![feature(bool_to_option)]\n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "ab68d24e4b339959fe71800d0b267cce2474d6c7", "filename": "compiler/rustc_attr/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_attr%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -4,7 +4,7 @@\n //! The goal is to move the definition of `MetaItem` and things that don't need to be in `syntax`\n //! to this crate.\n \n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n \n #[macro_use]\n extern crate rustc_macros;"}, {"sha": "fe4bede6a48b9c7cfc8f1a57bb23956420f8b928", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -8,7 +8,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_quote)]\n #![recursion_limit = \"256\"]"}, {"sha": "2bfb68f49041aef035a9bdee309bff5129b33e91", "filename": "compiler/rustc_codegen_llvm/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -11,7 +11,7 @@\n #![feature(extern_types)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n use back::write::{create_informational_target_machine, create_target_machine};"}, {"sha": "6eead2812ba70f3a8c2c6f9a59d6ed3b2a43ab1d", "filename": "compiler/rustc_codegen_ssa/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -6,7 +6,7 @@\n #![feature(try_blocks)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(associated_type_bounds)]\n #![recursion_limit = \"256\"]\n #![feature(box_syntax)]"}, {"sha": "2674ccced6f61f08cff4af792f26032277be3034", "filename": "compiler/rustc_expand/src/expand.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fexpand.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -22,7 +22,7 @@ use rustc_data_structures::stack::ensure_sufficient_stack;\n use rustc_data_structures::sync::Lrc;\n use rustc_errors::{Applicability, PResult};\n use rustc_feature::Features;\n-use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, GateOr, Parser, RecoverComma};\n+use rustc_parse::parser::{AttemptLocalParseRecovery, ForceCollect, Parser, RecoverComma};\n use rustc_parse::validate_attr;\n use rustc_session::lint::builtin::UNUSED_DOC_COMMENTS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -917,7 +917,7 @@ pub fn parse_ast_fragment<'a>(\n         }\n         AstFragmentKind::Ty => AstFragment::Ty(this.parse_ty()?),\n         AstFragmentKind::Pat => {\n-            AstFragment::Pat(this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?)\n+            AstFragment::Pat(this.parse_pat_allow_top_alt(None, RecoverComma::No)?)\n         }\n         AstFragmentKind::Arms\n         | AstFragmentKind::Fields"}, {"sha": "14f04dcb51a0bac00abd714c100056348c35c87d", "filename": "compiler/rustc_expand/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_expand%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -2,7 +2,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(decl_macro)]\n #![feature(destructuring_assignment)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_diagnostic)]\n #![feature(proc_macro_internals)]\n #![feature(proc_macro_span)]"}, {"sha": "ce9f711b27e53f154dbaf18eb2c4e4d2c5bff5c5", "filename": "compiler/rustc_feature/src/accepted.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Faccepted.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -277,6 +277,8 @@ declare_features! (\n     (accepted, min_const_generics, \"1.51.0\", Some(74878), None),\n     /// The `unsafe_op_in_unsafe_fn` lint (allowed by default): no longer treat an unsafe function as an unsafe block.\n     (accepted, unsafe_block_in_unsafe_fn, \"1.51.0\", Some(71668), None),\n+    /// Allows the use of or-patterns (e.g., `0 | 1`).\n+    (accepted, or_patterns, \"1.53.0\", Some(54883), None),\n \n     // -------------------------------------------------------------------------\n     // feature-group-end: accepted features"}, {"sha": "f55ba22e7dd473b470c1d4c5ffc11dc94390b233", "filename": "compiler/rustc_feature/src/active.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_feature%2Fsrc%2Factive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Factive.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -488,9 +488,6 @@ declare_features! (\n     /// Allows `impl Trait` to be used inside type aliases (RFC 2515).\n     (active, type_alias_impl_trait, \"1.38.0\", Some(63063), None),\n \n-    /// Allows the use of or-patterns (e.g., `0 | 1`).\n-    (active, or_patterns, \"1.38.0\", Some(54883), None),\n-\n     /// Allows the definition of `const extern fn` and `const unsafe extern fn`.\n     (active, const_extern_fn, \"1.40.0\", Some(64926), None),\n "}, {"sha": "36a30900fb26cdbcbf926001292991ddcf061be5", "filename": "compiler/rustc_hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_hir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -8,7 +8,7 @@\n #![feature(extended_key_value_attributes)]\n #![feature(in_band_lifetimes)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "76e5d30dc5ee2bd78448288b0149911a494cd9fd", "filename": "compiler/rustc_hir_pretty/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_pretty%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,4 +1,4 @@\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n use rustc_ast as ast;"}, {"sha": "4ec229ebcf559faea0bdfb90c3d9c04d91319639", "filename": "compiler/rustc_infer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_infer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -20,7 +20,7 @@\n #![feature(const_panic)]\n #![feature(extend_one)]\n #![feature(never_type)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(in_band_lifetimes)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc"}, {"sha": "cacdf2605482500f8969317a12d03b87b0905408", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -35,7 +35,7 @@\n #![feature(iter_order_by)]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(half_open_range_patterns)]\n #![feature(exclusive_range_pattern)]\n #![feature(control_flow_enum)]"}, {"sha": "fe93f4230e95b0f8e9606ac349660c905986b19f", "filename": "compiler/rustc_metadata/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_metadata%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -5,7 +5,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(proc_macro_internals)]\n #![feature(min_specialization)]\n #![feature(stmt_expr_attributes)]"}, {"sha": "6af0b4947e8bcad7fedffd4755a3d56bb89fcc03", "filename": "compiler/rustc_middle/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_middle%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -39,7 +39,7 @@\n #![feature(extern_types)]\n #![feature(nll)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(min_specialization)]\n #![feature(trusted_len)]\n #![feature(test)]"}, {"sha": "32354641412376e342f186626b14212a9d249df3", "filename": "compiler/rustc_mir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_mir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -27,7 +27,7 @@ Rust MIR: a lowered representation of Rust.\n #![feature(stmt_expr_attributes)]\n #![feature(trait_alias)]\n #![feature(option_get_or_insert_default)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(once_cell)]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"256\"]"}, {"sha": "9aca005ae9101128a67813c690cebef8448f9137", "filename": "compiler/rustc_mir_build/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -10,7 +10,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bool_to_option)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "9fead30c4a178c7900f9af69f459034c320835fd", "filename": "compiler/rustc_parse/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -3,7 +3,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(bindings_after_at)]\n #![feature(iter_order_by)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(box_syntax)]\n #![feature(box_patterns)]\n #![recursion_limit = \"256\"]"}, {"sha": "d64e5173b926c578d44d9774a5f666e23d1fc283", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,4 +1,4 @@\n-use super::pat::{GateOr, RecoverComma, PARAM_EXPECTED};\n+use super::pat::{RecoverComma, PARAM_EXPECTED};\n use super::ty::{AllowPlus, RecoverQPath, RecoverReturnSign};\n use super::{AttrWrapper, BlockMode, ForceCollect, Parser, PathStyle, Restrictions, TokenType};\n use super::{SemiColonMode, SeqSep, TokenExpectType, TrailingToken};\n@@ -1803,7 +1803,7 @@ impl<'a> Parser<'a> {\n     /// The `let` token has already been eaten.\n     fn parse_let_expr(&mut self, attrs: AttrVec) -> PResult<'a, P<Expr>> {\n         let lo = self.prev_token.span;\n-        let pat = self.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n         self.expect(&token::Eq)?;\n         let expr = self.with_res(self.restrictions | Restrictions::NO_STRUCT_LITERAL, |this| {\n             this.parse_assoc_expr_with(1 + prec_let_scrutinee_needs_par(), None.into())\n@@ -1866,7 +1866,7 @@ impl<'a> Parser<'a> {\n             _ => None,\n         };\n \n-        let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::Yes)?;\n+        let pat = self.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n         if !self.eat_keyword(kw::In) {\n             self.error_missing_in_for_loop();\n         }\n@@ -2073,7 +2073,7 @@ impl<'a> Parser<'a> {\n         let attrs = self.parse_outer_attributes()?;\n         self.collect_tokens_trailing_token(attrs, ForceCollect::No, |this, attrs| {\n             let lo = this.token.span;\n-            let pat = this.parse_pat_allow_top_alt(None, GateOr::No, RecoverComma::Yes)?;\n+            let pat = this.parse_pat_allow_top_alt(None, RecoverComma::Yes)?;\n             let guard = if this.eat_keyword(kw::If) {\n                 let if_span = this.prev_token.span;\n                 let cond = this.parse_expr()?;"}, {"sha": "71103840f1396f4af37f5754d36fa9607ad0d516", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -14,7 +14,7 @@ use crate::lexer::UnmatchedBrace;\n pub use attr_wrapper::AttrWrapper;\n pub use diagnostics::AttemptLocalParseRecovery;\n use diagnostics::Error;\n-pub use pat::{GateOr, RecoverComma};\n+pub use pat::RecoverComma;\n pub use path::PathStyle;\n \n use rustc_ast::ptr::P;"}, {"sha": "464524e3c061f9efda9cd6d30a6fe64c39468fce", "filename": "compiler/rustc_parse/src/parser/nonterminal.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fnonterminal.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -4,7 +4,7 @@ use rustc_ast_pretty::pprust;\n use rustc_errors::PResult;\n use rustc_span::symbol::{kw, Ident};\n \n-use crate::parser::pat::{GateOr, RecoverComma};\n+use crate::parser::pat::RecoverComma;\n use crate::parser::{FollowedByType, ForceCollect, Parser, PathStyle};\n \n impl<'a> Parser<'a> {\n@@ -122,7 +122,7 @@ impl<'a> Parser<'a> {\n                 token::NtPat(self.collect_tokens_no_attrs(|this| match kind {\n                     NonterminalKind::Pat2018 { .. } => this.parse_pat_no_top_alt(None),\n                     NonterminalKind::Pat2021 { .. } => {\n-                        this.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+                        this.parse_pat_allow_top_alt(None, RecoverComma::No)\n                     }\n                     _ => unreachable!(),\n                 })?)"}, {"sha": "0abefbd6a1219c36390f0eb6021b215add2f38ef", "filename": "compiler/rustc_parse/src/parser/pat.rs", "status": "modified", "additions": 19, "deletions": 54, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fpat.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -17,13 +17,6 @@ pub(super) const PARAM_EXPECTED: Expected = Some(\"parameter name\");\n \n const WHILE_PARSING_OR_MSG: &str = \"while parsing this or-pattern starting here\";\n \n-/// Whether or not an or-pattern should be gated when occurring in the current context.\n-#[derive(PartialEq, Clone, Copy)]\n-pub enum GateOr {\n-    Yes,\n-    No,\n-}\n-\n /// Whether or not to recover a `,` when parsing or-patterns.\n #[derive(PartialEq, Copy, Clone)]\n pub enum RecoverComma {\n@@ -64,18 +57,16 @@ impl<'a> Parser<'a> {\n     pub fn parse_pat_allow_top_alt(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, P<Pat>> {\n-        self.parse_pat_allow_top_alt_inner(expected, gate_or, rc).map(|(pat, _)| pat)\n+        self.parse_pat_allow_top_alt_inner(expected, rc).map(|(pat, _)| pat)\n     }\n \n     /// Returns the pattern and a bool indicating whether we recovered from a trailing vert (true =\n     /// recovered).\n     fn parse_pat_allow_top_alt_inner(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // Keep track of whether we recovered from a trailing vert so that we can avoid duplicated\n@@ -90,7 +81,7 @@ impl<'a> Parser<'a> {\n \n         // Parse the first pattern (`p_0`).\n         let first_pat = self.parse_pat_no_top_alt(expected)?;\n-        self.maybe_recover_unexpected_comma(first_pat.span, rc, gate_or)?;\n+        self.maybe_recover_unexpected_comma(first_pat.span, rc)?;\n \n         // If the next token is not a `|`,\n         // this is not an or-pattern and we should exit here.\n@@ -99,10 +90,6 @@ impl<'a> Parser<'a> {\n             // then we should really gate the leading `|`.\n             // This complicated procedure is done purely for diagnostics UX.\n             if let Some(leading_vert_span) = leading_vert_span {\n-                if gate_or == GateOr::Yes && self.sess.gated_spans.is_ungated(sym::or_patterns) {\n-                    self.sess.gated_spans.gate(sym::or_patterns, leading_vert_span);\n-                }\n-\n                 // If there was a leading vert, treat this as an or-pattern. This improves\n                 // diagnostics.\n                 let span = leading_vert_span.to(self.prev_token.span);\n@@ -128,16 +115,11 @@ impl<'a> Parser<'a> {\n                 err.span_label(lo, WHILE_PARSING_OR_MSG);\n                 err\n             })?;\n-            self.maybe_recover_unexpected_comma(pat.span, rc, gate_or)?;\n+            self.maybe_recover_unexpected_comma(pat.span, rc)?;\n             pats.push(pat);\n         }\n         let or_pattern_span = lo.to(self.prev_token.span);\n \n-        // Feature gate the or-pattern if instructed:\n-        if gate_or == GateOr::Yes {\n-            self.sess.gated_spans.gate(sym::or_patterns, or_pattern_span);\n-        }\n-\n         Ok((self.mk_pat(or_pattern_span, PatKind::Or(pats)), trailing_vert))\n     }\n \n@@ -152,14 +134,13 @@ impl<'a> Parser<'a> {\n     pub(super) fn parse_pat_before_ty(\n         &mut self,\n         expected: Expected,\n-        gate_or: GateOr,\n         rc: RecoverComma,\n         syntax_loc: &str,\n     ) -> PResult<'a, (P<Pat>, bool)> {\n         // We use `parse_pat_allow_top_alt` regardless of whether we actually want top-level\n         // or-patterns so that we can detect when a user tries to use it. This allows us to print a\n         // better error message.\n-        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(expected, gate_or, rc)?;\n+        let (pat, trailing_vert) = self.parse_pat_allow_top_alt_inner(expected, rc)?;\n         let colon = self.eat(&token::Colon);\n \n         if let PatKind::Or(pats) = &pat.kind {\n@@ -213,12 +194,7 @@ impl<'a> Parser<'a> {\n             self.bump();\n         }\n \n-        self.parse_pat_before_ty(\n-            PARAM_EXPECTED,\n-            GateOr::No,\n-            RecoverComma::No,\n-            \"function parameters\",\n-        )\n+        self.parse_pat_before_ty(PARAM_EXPECTED, RecoverComma::No, \"function parameters\")\n     }\n \n     /// Eat the or-pattern `|` separator.\n@@ -287,12 +263,7 @@ impl<'a> Parser<'a> {\n \n     /// Some special error handling for the \"top-level\" patterns in a match arm,\n     /// `for` loop, `let`, &c. (in contrast to subpatterns within such).\n-    fn maybe_recover_unexpected_comma(\n-        &mut self,\n-        lo: Span,\n-        rc: RecoverComma,\n-        gate_or: GateOr,\n-    ) -> PResult<'a, ()> {\n+    fn maybe_recover_unexpected_comma(&mut self, lo: Span, rc: RecoverComma) -> PResult<'a, ()> {\n         if rc == RecoverComma::No || self.token != token::Comma {\n             return Ok(());\n         }\n@@ -313,22 +284,18 @@ impl<'a> Parser<'a> {\n         if let Ok(seq_snippet) = self.span_to_snippet(seq_span) {\n             const MSG: &str = \"try adding parentheses to match on a tuple...\";\n \n-            let or_suggestion =\n-                gate_or == GateOr::No || !self.sess.gated_spans.is_ungated(sym::or_patterns);\n             err.span_suggestion(\n                 seq_span,\n-                if or_suggestion { MSG } else { MSG.trim_end_matches('.') },\n+                MSG,\n                 format!(\"({})\", seq_snippet),\n                 Applicability::MachineApplicable,\n             );\n-            if or_suggestion {\n-                err.span_suggestion(\n-                    seq_span,\n-                    \"...or a vertical bar to match on multiple alternatives\",\n-                    seq_snippet.replace(\",\", \" |\"),\n-                    Applicability::MachineApplicable,\n-                );\n-            }\n+            err.span_suggestion(\n+                seq_span,\n+                \"...or a vertical bar to match on multiple alternatives\",\n+                seq_snippet.replace(\",\", \" |\"),\n+                Applicability::MachineApplicable,\n+            );\n         }\n         Err(err)\n     }\n@@ -383,7 +350,7 @@ impl<'a> Parser<'a> {\n         } else if self.check(&token::OpenDelim(token::Bracket)) {\n             // Parse `[pat, pat,...]` as a slice pattern.\n             let (pats, _) = self.parse_delim_comma_seq(token::Bracket, |p| {\n-                p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n+                p.parse_pat_allow_top_alt(None, RecoverComma::No)\n             })?;\n             PatKind::Slice(pats)\n         } else if self.check(&token::DotDot) && !self.is_pat_range_end_start(1) {\n@@ -596,9 +563,8 @@ impl<'a> Parser<'a> {\n \n     /// Parse a tuple or parenthesis pattern.\n     fn parse_pat_tuple_or_parens(&mut self) -> PResult<'a, PatKind> {\n-        let (fields, trailing_comma) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n-        })?;\n+        let (fields, trailing_comma) =\n+            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n \n         // Here, `(pat,)` is a tuple pattern.\n         // For backward compatibility, `(..)` is a tuple pattern as well.\n@@ -911,9 +877,8 @@ impl<'a> Parser<'a> {\n         if qself.is_some() {\n             return self.error_qpath_before_pat(&path, \"(\");\n         }\n-        let (fields, _) = self.parse_paren_comma_seq(|p| {\n-            p.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)\n-        })?;\n+        let (fields, _) =\n+            self.parse_paren_comma_seq(|p| p.parse_pat_allow_top_alt(None, RecoverComma::No))?;\n         Ok(PatKind::TupleStruct(path, fields))\n     }\n \n@@ -1079,7 +1044,7 @@ impl<'a> Parser<'a> {\n             // Parsing a pattern of the form `fieldname: pat`.\n             let fieldname = self.parse_field_name()?;\n             self.bump();\n-            let pat = self.parse_pat_allow_top_alt(None, GateOr::Yes, RecoverComma::No)?;\n+            let pat = self.parse_pat_allow_top_alt(None, RecoverComma::No)?;\n             hi = pat.span;\n             (pat, fieldname, false)\n         } else {"}, {"sha": "24fb4301cc2b8b66124c60b75b2971ab69a37b9f", "filename": "compiler/rustc_parse/src/parser/stmt.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fstmt.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,7 +1,7 @@\n use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;\n use super::diagnostics::{AttemptLocalParseRecovery, Error};\n use super::expr::LhsExpr;\n-use super::pat::{GateOr, RecoverComma};\n+use super::pat::RecoverComma;\n use super::path::PathStyle;\n use super::TrailingToken;\n use super::{AttrWrapper, BlockMode, ForceCollect, Parser, Restrictions, SemiColonMode};\n@@ -221,8 +221,7 @@ impl<'a> Parser<'a> {\n     /// Parses a local variable declaration.\n     fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n-        let (pat, colon) =\n-            self.parse_pat_before_ty(None, GateOr::Yes, RecoverComma::Yes, \"`let` bindings\")?;\n+        let (pat, colon) = self.parse_pat_before_ty(None, RecoverComma::Yes, \"`let` bindings\")?;\n \n         let (err, ty) = if colon {\n             // Save the state of the parser before parsing type normally, in case there is a `:`"}, {"sha": "c2fc2bfcd335337987b1cee1663924f87527d750", "filename": "compiler/rustc_parse_format/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse_format%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -10,7 +10,7 @@\n     test(attr(deny(warnings)))\n )]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(bool_to_option)]\n \n pub use Alignment::*;"}, {"sha": "7ad6bd2bb36678f90bc34c8d144bbcd3dc849c1d", "filename": "compiler/rustc_passes/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_passes%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_passes%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -10,7 +10,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "de264b5bb04030195decf6475de822eb14789138", "filename": "compiler/rustc_privacy/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_privacy%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_privacy%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,7 +1,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(in_band_lifetimes)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(control_flow_enum)]\n #![feature(try_blocks)]\n #![feature(associated_type_defaults)]"}, {"sha": "d8f201fd0d8fa40b243e26d0f00f3ac8c3c378c5", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -15,7 +15,7 @@\n #![feature(crate_visibility_modifier)]\n #![feature(format_args_capture)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n pub use rustc_hir::def::{Namespace, PerNS};"}, {"sha": "13d613132c09d5f1810690d4dcb80d37d9f4e8be", "filename": "compiler/rustc_save_analysis/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_save_analysis%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,6 +1,6 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n mod dump_visitor;"}, {"sha": "95d17125a11a905c3052ad0cfc7faf2b2fb39ea2", "filename": "compiler/rustc_session/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_session%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_session%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -1,6 +1,6 @@\n #![feature(crate_visibility_modifier)]\n #![feature(once_cell)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![recursion_limit = \"256\"]\n \n #[macro_use]"}, {"sha": "3dd7ce93deb982f36945e4445f610ff85e40fc95", "filename": "compiler/rustc_symbol_mangling/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_symbol_mangling%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -90,7 +90,7 @@\n #![doc(html_root_url = \"https://doc.rust-lang.org/nightly/nightly-rustc/\")]\n #![feature(never_type)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(in_band_lifetimes)]\n #![recursion_limit = \"256\"]\n "}, {"sha": "aeb7b149786e40f8e61731b3edb84305a7d99368", "filename": "compiler/rustc_trait_selection/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -17,7 +17,7 @@\n #![feature(in_band_lifetimes)]\n #![feature(never_type)]\n #![feature(crate_visibility_modifier)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(control_flow_enum)]\n #![recursion_limit = \"512\"] // For rustdoc\n "}, {"sha": "c270a2368110af905ca78190b7d6fbed0d08c8b8", "filename": "compiler/rustc_typeck/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/db5629adcba565a674732e829ce6c4a214160835/compiler%2Frustc_typeck%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Flib.rs?ref=db5629adcba565a674732e829ce6c4a214160835", "patch": "@@ -64,7 +64,7 @@ This API is completely unstable and subject to change.\n #![feature(in_band_lifetimes)]\n #![feature(is_sorted)]\n #![feature(nll)]\n-#![feature(or_patterns)]\n+#![cfg_attr(bootstrap, feature(or_patterns))]\n #![feature(try_blocks)]\n #![feature(never_type)]\n #![feature(slice_partition_dedup)]"}]}