{"sha": "9690be5ece5960d0bd8ecb68750b577b0835b6ba", "node_id": "MDY6Q29tbWl0NzI0NzEyOjk2OTBiZTVlY2U1OTYwZDBiZDhlY2I2ODc1MGI1NzdiMDgzNWI2YmE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-24T20:15:08Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-26T02:15:09Z"}, "message": "Adjust most comments and messages to not use \"unboxed\".", "tree": {"sha": "df529121026e676c75385f1f12019592709b24c0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/df529121026e676c75385f1f12019592709b24c0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9690be5ece5960d0bd8ecb68750b577b0835b6ba", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9690be5ece5960d0bd8ecb68750b577b0835b6ba", "html_url": "https://github.com/rust-lang/rust/commit/9690be5ece5960d0bd8ecb68750b577b0835b6ba", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9690be5ece5960d0bd8ecb68750b577b0835b6ba/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e0afa82c67813f6ddb0526e130c1524cf52c61e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/e0afa82c67813f6ddb0526e130c1524cf52c61e7", "html_url": "https://github.com/rust-lang/rust/commit/e0afa82c67813f6ddb0526e130c1524cf52c61e7"}], "stats": {"total": 80, "additions": 36, "deletions": 44}, "files": [{"sha": "2de453812492a5aef3a0099f8204a2c7b73aa71e", "filename": "src/librustc/metadata/encoder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmetadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fencoder.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -2148,7 +2148,7 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n     encode_macro_defs(&mut rbml_w, krate);\n     stats.macro_defs_bytes = rbml_w.writer.tell().unwrap() - i;\n \n-    // Encode the types of all unboxed closures in this crate.\n+    // Encode the types of all closures in this crate.\n     i = rbml_w.writer.tell().unwrap();\n     encode_closures(&ecx, &mut rbml_w);\n     stats.closure_bytes = rbml_w.writer.tell().unwrap() - i;\n@@ -2193,7 +2193,7 @@ fn encode_metadata_inner(wr: &mut SeekableMemWriter,\n         println!(\"          native bytes: {}\", stats.native_lib_bytes);\n         println!(\"plugin registrar bytes: {}\", stats.plugin_registrar_fn_bytes);\n         println!(\"       macro def bytes: {}\", stats.macro_defs_bytes);\n-        println!(\" unboxed closure bytes: {}\", stats.unboxed_closure_bytes);\n+        println!(\"         closure bytes: {}\", stats.closure_bytes);\n         println!(\"            impl bytes: {}\", stats.impl_bytes);\n         println!(\"            misc bytes: {}\", stats.misc_bytes);\n         println!(\"            item bytes: {}\", stats.item_bytes);"}, {"sha": "cb6b7e56b5770f3ee8761ea8998c1a1d4c76654f", "filename": "src/librustc/metadata/tydecode.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmetadata%2Ftydecode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftydecode.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -57,7 +57,7 @@ pub enum DefIdSource {\n     // Identifies a region parameter (`fn foo<'X>() { ... }`).\n     RegionParameter,\n \n-    // Identifies an unboxed closure\n+    // Identifies a closure\n     ClosureSource\n }\n "}, {"sha": "8d3888fcfdbb50012c2b528bd4daac70a139e4d5", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -232,10 +232,9 @@ pub enum Vtable<'tcx, N> {\n     /// Successful resolution for a builtin trait.\n     VtableBuiltin(VtableBuiltinData<N>),\n \n-    /// Vtable automatically generated for an unboxed closure. The def\n-    /// ID is the ID of the closure expression. This is a `VtableImpl`\n-    /// in spirit, but the impl is generated by the compiler and does\n-    /// not appear in the source.\n+    /// Vtable automatically generated for a closure. The def ID is the ID\n+    /// of the closure expression. This is a `VtableImpl` in spirit, but the\n+    /// impl is generated by the compiler and does not appear in the source.\n     VtableClosure(ast::DefId, subst::Substs<'tcx>),\n \n     /// Same as above, but for a fn pointer type with the given signature."}, {"sha": "b2e8bbe059fe64dfb340f362a0b29c8675dcb6e3", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -943,9 +943,9 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     }\n \n     /// Check for the artificial impl that the compiler will create for an obligation like `X :\n-    /// FnMut<..>` where `X` is an unboxed closure type.\n+    /// FnMut<..>` where `X` is a closure type.\n     ///\n-    /// Note: the type parameters on an unboxed closure candidate are modeled as *output* type\n+    /// Note: the type parameters on a closure candidate are modeled as *output* type\n     /// parameters and hence do not affect whether this trait is a match or not. They will be\n     /// unified during the confirmation step.\n     fn assemble_closure_candidates(&mut self,\n@@ -1932,7 +1932,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                                      trait_ref)\n     }\n \n-    /// In the case of unboxed closure types and fn pointers,\n+    /// In the case of closure types and fn pointers,\n     /// we currently treat the input type parameters on the trait as\n     /// outputs. This means that when we have a match we have only\n     /// considered the self type, so we have to go back and make sure\n@@ -1942,7 +1942,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n     /// errors as if there is no applicable impl, but rather report\n     /// errors are about mismatched argument types.\n     ///\n-    /// Here is an example. Imagine we have an unboxed closure expression\n+    /// Here is an example. Imagine we have an closure expression\n     /// and we desugared it so that the type of the expression is\n     /// `Closure`, and `Closure` expects an int as argument. Then it\n     /// is \"as if\" the compiler generated this impl:"}, {"sha": "0ee26ce1cd3cb0329eaefee074c8f101e6a99bcd", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 12, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -432,7 +432,7 @@ pub enum MethodOrigin<'tcx> {\n     // fully statically resolved method\n     MethodStatic(ast::DefId),\n \n-    // fully statically resolved unboxed closure invocation\n+    // fully statically resolved closure invocation\n     MethodStaticClosure(ast::DefId),\n \n     // method invoked on a type parameter with a bounded trait\n@@ -565,7 +565,7 @@ pub enum vtable_origin<'tcx> {\n     vtable_param(param_index, uint),\n \n     /*\n-      Vtable automatically generated for an unboxed closure. The def ID is the\n+      Vtable automatically generated for a closure. The def ID is the\n       ID of the closure expression.\n      */\n     vtable_closure(ast::DefId),\n@@ -785,8 +785,8 @@ pub struct ctxt<'tcx> {\n \n     pub dependency_formats: RefCell<dependency_format::Dependencies>,\n \n-    /// Records the type of each unboxed closure. The def ID is the ID of the\n-    /// expression defining the unboxed closure.\n+    /// Records the type of each closure. The def ID is the ID of the\n+    /// expression defining the closure.\n     pub closures: RefCell<DefIdMap<Closure<'tcx>>>,\n \n     pub node_lint_levels: RefCell<FnvHashMap<(ast::NodeId, lint::LintId),\n@@ -2262,12 +2262,12 @@ pub struct ItemSubsts<'tcx> {\n     pub substs: Substs<'tcx>,\n }\n \n-/// Records information about each unboxed closure.\n+/// Records information about each closure.\n #[derive(Clone)]\n pub struct Closure<'tcx> {\n-    /// The type of the unboxed closure.\n+    /// The type of the closure.\n     pub closure_type: ClosureTy<'tcx>,\n-    /// The kind of unboxed closure this is.\n+    /// The kind of closure this is.\n     pub kind: ClosureKind,\n }\n \n@@ -3416,8 +3416,7 @@ pub fn type_contents<'tcx>(cx: &ctxt<'tcx>, ty: Ty<'tcx>) -> TypeContents {\n             }\n \n             ty_closure(did, r, substs) => {\n-                // FIXME(#14449): `borrowed_contents` below assumes `&mut`\n-                // unboxed closure.\n+                // FIXME(#14449): `borrowed_contents` below assumes `&mut` closure.\n                 let param_env = ty::empty_parameter_environment(cx);\n                 let upvars = closure_upvars(&param_env, did, substs).unwrap();\n                 TypeContents::union(upvars.as_slice(),\n@@ -3685,7 +3684,7 @@ pub fn is_instantiable<'tcx>(cx: &ctxt<'tcx>, r_ty: Ty<'tcx>) -> bool {\n             ty_infer(_) |\n             ty_closure(..) => {\n                 // this check is run on type definitions, so we don't expect to see\n-                // inference by-products or unboxed closure types\n+                // inference by-products or closure types\n                 cx.sess.bug(format!(\"requires check invoked on inapplicable type: {:?}\",\n                                     ty).as_slice())\n             }\n@@ -3778,8 +3777,8 @@ pub fn is_type_representable<'tcx>(cx: &ctxt<'tcx>, sp: Span, ty: Ty<'tcx>)\n                 find_nonrepresentable(cx, sp, seen, iter)\n             }\n             ty_closure(..) => {\n-                // this check is run on type definitions, so we don't expect to see\n-                // unboxed closure types\n+                // this check is run on type definitions, so we don't expect\n+                // to see closure types\n                 cx.sess.bug(format!(\"requires check invoked on inapplicable type: {:?}\",\n                                     ty).as_slice())\n             }"}, {"sha": "73d174c2c34192ddbdf08b95f4c5a1df0454f368", "filename": "src/librustc_trans/trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fcallee.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -457,7 +457,7 @@ pub fn trans_fn_ref_with_substs<'a, 'tcx>(\n         }\n     };\n \n-    // If this is an unboxed closure, redirect to it.\n+    // If this is a closure, redirect to it.\n     match closure::get_or_create_declaration_if_closure(ccx, def_id, &substs) {\n         None => {}\n         Some(llfn) => return llfn,"}, {"sha": "c1914ce94aa629a03569b491663922c9e8b8f422", "filename": "src/librustc_trans/trans/closure.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fclosure.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -133,14 +133,14 @@ impl<'a, 'tcx> ClosureEnv<'a, 'tcx> {\n     }\n }\n \n-/// Returns the LLVM function declaration for an unboxed closure, creating it\n-/// if necessary. If the ID does not correspond to a closure ID, returns None.\n-        // Not an unboxed closure.\n+/// Returns the LLVM function declaration for a closure, creating it if\n+/// necessary. If the ID does not correspond to a closure ID, returns None.\n pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tcx>,\n                                                       closure_id: ast::DefId,\n                                                       substs: &Substs<'tcx>)\n                                                       -> Option<Datum<'tcx, Rvalue>> {\n     if !ccx.tcx().closures.borrow().contains_key(&closure_id) {\n+        // Not a closure.\n         return None\n     }\n \n@@ -161,8 +161,7 @@ pub fn get_or_create_declaration_if_closure<'a, 'tcx>(ccx: &CrateContext<'a, 'tc\n \n     match ccx.closure_vals().borrow().get(&mono_id) {\n         Some(&llfn) => {\n-            debug!(\"get_or_create_declaration_if_closure(): found \\\n-                    closure\");\n+            debug!(\"get_or_create_declaration_if_closure(): found closure\");\n             return Some(Datum::new(llfn, function_type, Rvalue::new(ByValue)))\n         }\n         None => {}\n@@ -230,8 +229,8 @@ pub fn trans_closure_expr<'blk, 'tcx>(mut bcx: Block<'blk, 'tcx>,\n                                   Closure(freevar_mode)));\n \n     // Don't hoist this to the top of the function. It's perfectly legitimate\n-    // to have a zero-size unboxed closure (in which case dest will be\n-    // `Ignore`) and we must still generate the closure body.\n+    // to have a zero-size closure (in which case dest will be `Ignore`) and\n+    // we must still generate the closure body.\n     let dest_addr = match dest {\n         expr::SaveIn(p) => p,\n         expr::Ignore => {"}, {"sha": "1504c2a7c2d9ff6537e44194481f91a06b18779c", "filename": "src/librustc_trans/trans/expr.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans%2Fexpr.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -1098,10 +1098,6 @@ fn trans_rvalue_dps_unadjusted<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             tvec::trans_fixed_vstore(bcx, expr, dest)\n         }\n         ast::ExprClosure(_, _, ref decl, ref body) => {\n-            // Check the side-table to see whether this is an unboxed\n-            // closure or an older, legacy style closure. Store this\n-            // into a variable to ensure the the RefCell-lock is\n-            // released before we recurse.\n             closure::trans_closure_expr(bcx, &**decl, &**body, expr.id, dest)\n         }\n         ast::ExprCall(ref f, ref args) => {"}, {"sha": "2d7a76344721c7da8bdefa4ebd7690ab730e9657", "filename": "src/librustc_typeck/check/closure.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fclosure.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -42,7 +42,7 @@ pub fn check_expr_closure<'a,'tcx>(fcx: &FnCtxt<'a,'tcx>,\n             // If users didn't specify what sort of closure they want,\n             // examine the expected type. For now, if we see explicit\n             // evidence than an unboxed closure is desired, we'll use\n-            // that, otherwise we'll fall back to boxed closures.\n+            // that, otherwise we'll error, requesting an annotation.\n             match expected_sig_and_kind {\n                 None => { // don't have information about the kind, request explicit annotation\n                     // NB We still need to typeck the body, so assume `FnMut` kind just for that"}, {"sha": "61332ada506de97cf718146c42a61765462de478", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -603,7 +603,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                 None => {\n                     self.tcx().sess.span_bug(\n                         self.span,\n-                        &format!(\"No entry for unboxed closure: {}\",\n+                        &format!(\"No entry for closure: {}\",\n                                 closure_def_id.repr(self.tcx()))[]);\n                 }\n             };"}, {"sha": "58e8a9c6912b12fcc597342752bc8ac84dced8f3", "filename": "src/librustc_typeck/check/regionmanip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fregionmanip.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -69,7 +69,7 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n             }\n \n             ty::ty_closure(_, region, _) => {\n-                // An \"unboxed closure type\" is basically\n+                // An \"closure type\" is basically\n                 // modeled here as equivalent to a struct like\n                 //\n                 //     struct TheClosure<'b> {\n@@ -79,7 +79,7 @@ impl<'a, 'tcx> Wf<'a, 'tcx> {\n                 // where the `'b` is the lifetime bound of the\n                 // contents (i.e., all contents must outlive 'b).\n                 //\n-                // Even though unboxed closures are glorified structs\n+                // Even though closures are glorified structs\n                 // of upvars, we do not need to consider them as they\n                 // can't generate any new constraints.  The\n                 // substitutions on the closure are equal to the free"}, {"sha": "2fd33983fd38a2ba58d40dc4229949b02399c5b0", "filename": "src/librustc_typeck/check/writeback.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwriteback.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -409,8 +409,7 @@ impl<'cx, 'tcx> Resolver<'cx, 'tcx> {\n                 ResolvingClosure(_) => {\n                     let span = self.reason.span(self.tcx);\n                     span_err!(self.tcx.sess, span, E0196,\n-                                           \"cannot determine a type for this \\\n-                                            unboxed closure\")\n+                              \"cannot determine a type for this closure\")\n                 }\n             }\n         }"}, {"sha": "680ff2fcda64cd6e6c35eb871e01aa0a7254a8dc", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -113,7 +113,7 @@ register_diagnostics! {\n            // involving type parameters\n     E0194,\n     E0195, // lifetime parameters or bounds on method do not match the trait declaration\n-    E0196, // cannot determine a type for this unboxed closure\n+    E0196, // cannot determine a type for this closure\n     E0197, // inherent impls cannot be declared as unsafe\n     E0198, // negative implementations are not unsafe\n     E0199, // implementing trait is not unsafe"}, {"sha": "ed8a50110e5ac9323850efccdadf16972c1b056e", "filename": "src/librustc_typeck/variance.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fvariance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibrustc_typeck%2Fvariance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fvariance.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -741,7 +741,7 @@ impl<'a, 'tcx> ConstraintContext<'a, 'tcx> {\n             }\n \n             ty::ty_closure(..) => {\n-                self.tcx().sess.bug(\"Unexpected unboxed closure type in variance computation\");\n+                self.tcx().sess.bug(\"Unexpected closure type in variance computation\");\n             }\n \n             ty::ty_rptr(region, ref mt) => {"}, {"sha": "eab24574bb1952e9575e5fd763a32ccb36457423", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9690be5ece5960d0bd8ecb68750b577b0835b6ba/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=9690be5ece5960d0bd8ecb68750b577b0835b6ba", "patch": "@@ -1133,7 +1133,7 @@ impl<'a> Parser<'a> {\n         TyInfer\n     }\n \n-    /// Parses an optional unboxed closure kind (`&:`, `&mut:`, or `:`).\n+    /// Parses an optional closure kind (`&:`, `&mut:`, or `:`).\n     pub fn parse_optional_closure_kind(&mut self) -> Option<ClosureKind> {\n         if self.check(&token::BinOp(token::And)) &&\n                 self.look_ahead(1, |t| t.is_keyword(keywords::Mut)) &&"}]}