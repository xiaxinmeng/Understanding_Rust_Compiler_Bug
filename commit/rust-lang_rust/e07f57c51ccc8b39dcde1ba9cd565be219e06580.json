{"sha": "e07f57c51ccc8b39dcde1ba9cd565be219e06580", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwN2Y1N2M1MWNjYzhiMzlkY2RlMWJhOWNkNTY1YmUyMTllMDY1ODA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2020-04-02T22:32:03Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-02T22:32:03Z"}, "message": "Rollup merge of #70691 - TimDiekmann:allocref-docs, r=RalfJung\n\nImprove docs in `AllocRef`\n\nr? @RalfJung", "tree": {"sha": "a66344d06d88b82d0f65544245895561d76c3f32", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a66344d06d88b82d0f65544245895561d76c3f32"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e07f57c51ccc8b39dcde1ba9cd565be219e06580", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJehmfjCRBK7hj4Ov3rIwAAdHIIAFjFRl/n6fYSsSH3kufgYZ1j\n4go1U0YAA18yOxbcKbtvlE1VtwKcLR6tjBRitQ0s141Pz/hlQULtp5Se5uDZwfnf\nH7k7ngcjReTfTesJsffp8VZu5k6x6jHIflAdxKdihyFSm4H+bfxyZ0Z3ANFSI6EH\nfvn7WdI9k8Wt+58GQbkKP6819IZ155Tl75HR7DWdNJkHcOeYJlHuwLxAg6M4Z/8G\nOHPBZjmf0ydDumJzRjrc3P7TBSXqtNIN1pGZXnE3kyck6KpDoNbiVeKRXgRnqD/5\n2jKpfDqeS5EpmGwsicN/qalOQPG81DaeJeLym1oxhexK/p6u8cpVsUScIYltlPk=\n=v2qV\n-----END PGP SIGNATURE-----\n", "payload": "tree a66344d06d88b82d0f65544245895561d76c3f32\nparent 4cba69e5851d6b515afb970880f6fab0881b82f9\nparent 0b612399366e28b5314b5fd289f46c636d596a7b\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1585866723 +0200\ncommitter GitHub <noreply@github.com> 1585866723 +0200\n\nRollup merge of #70691 - TimDiekmann:allocref-docs, r=RalfJung\n\nImprove docs in `AllocRef`\n\nr? @RalfJung\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e07f57c51ccc8b39dcde1ba9cd565be219e06580", "html_url": "https://github.com/rust-lang/rust/commit/e07f57c51ccc8b39dcde1ba9cd565be219e06580", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e07f57c51ccc8b39dcde1ba9cd565be219e06580/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4cba69e5851d6b515afb970880f6fab0881b82f9", "url": "https://api.github.com/repos/rust-lang/rust/commits/4cba69e5851d6b515afb970880f6fab0881b82f9", "html_url": "https://github.com/rust-lang/rust/commit/4cba69e5851d6b515afb970880f6fab0881b82f9"}, {"sha": "0b612399366e28b5314b5fd289f46c636d596a7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b612399366e28b5314b5fd289f46c636d596a7b", "html_url": "https://github.com/rust-lang/rust/commit/0b612399366e28b5314b5fd289f46c636d596a7b"}], "stats": {"total": 12, "additions": 7, "deletions": 5}, "files": [{"sha": "77ac93c7b7905c293472964c9aac808a01a7be0f", "filename": "src/libcore/alloc/mod.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e07f57c51ccc8b39dcde1ba9cd565be219e06580/src%2Flibcore%2Falloc%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e07f57c51ccc8b39dcde1ba9cd565be219e06580/src%2Flibcore%2Falloc%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc%2Fmod.rs?ref=e07f57c51ccc8b39dcde1ba9cd565be219e06580", "patch": "@@ -33,9 +33,7 @@ impl fmt::Display for AllocErr {\n #[derive(Debug, Copy, Clone, PartialEq, Eq)]\n #[unstable(feature = \"allocator_api\", issue = \"32838\")]\n pub enum AllocInit {\n-    /// The contents of the new memory are undefined.\n-    ///\n-    /// Reading uninitialized memory is Undefined Behavior; it must be initialized before use.\n+    /// The contents of the new memory are uninitialized.\n     Uninitialized,\n     /// The new memory is guaranteed to be zeroed.\n     Zeroed,\n@@ -196,7 +194,11 @@ pub unsafe trait AllocRef {\n     ///\n     /// # Safety\n     ///\n-    /// `memory` must be a memory block returned by this allocator.\n+    /// * `ptr` must be [*currently allocated*] via this allocator, and\n+    /// * `layout` must [*fit*] the `ptr`.\n+    ///\n+    /// [*currently allocated*]: #currently-allocated-memory\n+    /// [*fit*]: #memory-fitting\n     unsafe fn dealloc(&mut self, ptr: NonNull<u8>, layout: Layout);\n \n     /// Attempts to extend the memory block.\n@@ -237,7 +239,7 @@ pub unsafe trait AllocRef {\n     // * `new_size must be strictly greater than `memory.size` or both are zero\n     /// * `new_size` must be greater than or equal to `layout.size()`\n     /// * `new_size`, when rounded up to the nearest multiple of `layout.align()`, must not overflow\n-    ///   (i.e., the rounded value must be less than `usize::MAX`).\n+    ///   (i.e., the rounded value must be less than or equal to `usize::MAX`).\n     ///\n     /// [*currently allocated*]: #currently-allocated-memory\n     /// [*fit*]: #memory-fitting"}]}