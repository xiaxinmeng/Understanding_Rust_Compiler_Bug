{"sha": "5ac08b0cc94cab09fba719a17c141c68c4cbc063", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVhYzA4YjBjYzk0Y2FiMDlmYmE3MTlhMTdjMTQxYzY4YzRjYmMwNjM=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-06T06:30:43Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-07T09:26:55Z"}, "message": "Normalize lint messages", "tree": {"sha": "d01e6aaff25542cb2b004e69d73796fa7b0c8fe4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d01e6aaff25542cb2b004e69d73796fa7b0c8fe4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5ac08b0cc94cab09fba719a17c141c68c4cbc063", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5ac08b0cc94cab09fba719a17c141c68c4cbc063", "html_url": "https://github.com/rust-lang/rust/commit/5ac08b0cc94cab09fba719a17c141c68c4cbc063", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5ac08b0cc94cab09fba719a17c141c68c4cbc063/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd", "html_url": "https://github.com/rust-lang/rust/commit/fdccfe7bca7bc922503e40ca3e83a62bbfbaf0fd"}], "stats": {"total": 260, "additions": 133, "deletions": 127}, "files": [{"sha": "e2de7f8296e5129fdb91c818eed43e138c24b11b", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -209,7 +209,7 @@ fn lint_misrefactored_assign_op(\n                 db.span_suggestion(\n                     expr.span,\n                     &format!(\n-                        \"Did you mean {} = {} {} {} or {}? Consider replacing it with\",\n+                        \"Did you mean `{} = {} {} {}` or `{}`? Consider replacing it with\",\n                         snip_a,\n                         snip_a,\n                         op.node.as_str(),"}, {"sha": "2939a71a5111ff519a9425728aae6d5cd24d929f", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -449,7 +449,7 @@ fn check_attrs(cx: &LateContext<'_, '_>, span: Span, name: Name, attrs: &[Attrib\n                         EMPTY_LINE_AFTER_OUTER_ATTR,\n                         begin_of_attr_to_item,\n                         \"Found an empty line after an outer attribute. \\\n-                         Perhaps you forgot to add a '!' to make it an inner attribute?\",\n+                         Perhaps you forgot to add a `!` to make it an inner attribute?\",\n                     );\n                 }\n             }\n@@ -520,7 +520,7 @@ impl EarlyLintPass for DeprecatedCfgAttribute {\n                     cx,\n                     DEPRECATED_CFG_ATTR,\n                     attr.span,\n-                    \"`cfg_attr` is deprecated for rustfmt and got replaced by tool_attributes\",\n+                    \"`cfg_attr` is deprecated for rustfmt and got replaced by `tool_attributes`\",\n                     \"use\",\n                     \"#[rustfmt::skip]\".to_string(),\n                     Applicability::MachineApplicable,"}, {"sha": "76b5c5d8f15d60cdfec957e104dd00ac213d96b6", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -68,8 +68,8 @@ impl<'a, 'tcx> Visitor<'tcx> for ExVisitor<'a, 'tcx> {\n }\n \n const BRACED_EXPR_MESSAGE: &str = \"omit braces around single expression condition\";\n-const COMPLEX_BLOCK_MESSAGE: &str = \"in an 'if' condition, avoid complex blocks or closures with blocks; \\\n-                                     instead, move the block or closure higher and bind it with a 'let'\";\n+const COMPLEX_BLOCK_MESSAGE: &str = \"in an `if` condition, avoid complex blocks or closures with blocks; \\\n+                                     instead, move the block or closure higher and bind it with a `let`\";\n \n impl<'a, 'tcx> LateLintPass<'a, 'tcx> for BlockInIfCondition {\n     fn check_expr(&mut self, cx: &LateContext<'a, 'tcx>, expr: &'tcx Expr<'_>) {"}, {"sha": "e34dfc9d9993665f8078cb0266165ef436a05e59", "filename": "clippy_lints/src/collapsible_if.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcollapsible_if.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -138,7 +138,7 @@ fn check_collapsible_no_if_let(cx: &EarlyContext<'_>, expr: &ast::Expr, check: &\n             if expr.span.ctxt() != inner.span.ctxt() {\n                 return;\n             }\n-            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this if statement can be collapsed\", |db| {\n+            span_lint_and_then(cx, COLLAPSIBLE_IF, expr.span, \"this `if` statement can be collapsed\", |db| {\n                 let lhs = Sugg::ast(cx, check, \"..\");\n                 let rhs = Sugg::ast(cx, check_inner, \"..\");\n                 db.span_suggestion("}, {"sha": "5d04286575ad8265f6dd15844569edc853b9ee39", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// ```\n     pub IFS_SAME_COND,\n     correctness,\n-    \"consecutive `ifs` with the same condition\"\n+    \"consecutive `if`s with the same condition\"\n }\n \n declare_clippy_lint! {\n@@ -85,7 +85,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SAME_FUNCTIONS_IN_IF_CONDITION,\n     pedantic,\n-    \"consecutive `ifs` with the same function call\"\n+    \"consecutive `if`s with the same function call\"\n }\n \n declare_clippy_lint! {\n@@ -106,7 +106,7 @@ declare_clippy_lint! {\n     /// ```\n     pub IF_SAME_THEN_ELSE,\n     correctness,\n-    \"if with the same *then* and *else* blocks\"\n+    \"`if` with the same `then` and `else` blocks\"\n }\n \n declare_clippy_lint! {\n@@ -206,7 +206,7 @@ fn lint_same_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             cx,\n             IFS_SAME_COND,\n             j.span,\n-            \"this `if` has the same condition as a previous if\",\n+            \"this `if` has the same condition as a previous `if`\",\n             i.span,\n             \"same as this\",\n         );\n@@ -234,7 +234,7 @@ fn lint_same_fns_in_if_cond(cx: &LateContext<'_, '_>, conds: &[&Expr<'_>]) {\n             cx,\n             SAME_FUNCTIONS_IN_IF_CONDITION,\n             j.span,\n-            \"this `if` has the same function call as a previous if\",\n+            \"this `if` has the same function call as a previous `if`\",\n             i.span,\n             \"same as this\",\n         );\n@@ -300,7 +300,7 @@ fn lint_match_arms<'tcx>(cx: &LateContext<'_, 'tcx>, expr: &Expr<'_>) {\n                         db.span_note(\n                             i.body.span,\n                             &format!(\n-                                \"`{}` has the same arm body as the `_` wildcard, consider removing it`\",\n+                                \"`{}` has the same arm body as the `_` wildcard, consider removing it\",\n                                 lhs\n                             ),\n                         );"}, {"sha": "253d9b8d542fa64012d2b5a91a0506b86baca812", "filename": "clippy_lints/src/default_trait_access.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fdefault_trait_access.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_trait_access.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -26,7 +26,7 @@ declare_clippy_lint! {\n     /// ```\n     pub DEFAULT_TRAIT_ACCESS,\n     pedantic,\n-    \"checks for literal calls to Default::default()\"\n+    \"checks for literal calls to `Default::default()`\"\n }\n \n declare_lint_pass!(DefaultTraitAccess => [DEFAULT_TRAIT_ACCESS]);\n@@ -62,7 +62,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DefaultTraitAccess {\n                                 cx,\n                                 DEFAULT_TRAIT_ACCESS,\n                                 expr.span,\n-                                &format!(\"Calling {} is more clear than this expression\", replacement),\n+                                &format!(\"Calling `{}` is more clear than this expression\", replacement),\n                                 \"try\",\n                                 replacement,\n                                 Applicability::Unspecified, // First resolve the TODO above"}, {"sha": "d8ce2fcf661a7c06795eae33bc7bf61566859b62", "filename": "clippy_lints/src/drop_forget_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_forget_ref.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -102,9 +102,9 @@ const DROP_REF_SUMMARY: &str = \"calls to `std::mem::drop` with a reference inste\n                                 Dropping a reference does nothing.\";\n const FORGET_REF_SUMMARY: &str = \"calls to `std::mem::forget` with a reference instead of an owned value. \\\n                                   Forgetting a reference does nothing.\";\n-const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements Copy. \\\n+const DROP_COPY_SUMMARY: &str = \"calls to `std::mem::drop` with a value that implements `Copy`. \\\n                                  Dropping a copy leaves the original intact.\";\n-const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements Copy. \\\n+const FORGET_COPY_SUMMARY: &str = \"calls to `std::mem::forget` with a value that implements `Copy`. \\\n                                    Forgetting a copy leaves the original intact.\";\n \n declare_lint_pass!(DropForgetRef => [DROP_REF, FORGET_REF, DROP_COPY, FORGET_COPY]);\n@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for DropForgetRef {\n                                        expr.span,\n                                        &msg,\n                                        arg.span,\n-                                       &format!(\"argument has type {}\", arg_ty));\n+                                       &format!(\"argument has type `{}`\", arg_ty));\n                 } else if is_copy(cx, arg_ty) {\n                     if match_def_path(cx, def_id, &paths::DROP) {\n                         lint = DROP_COPY;"}, {"sha": "8043a8c855558194b83e0e44fa15b27eb3badedd", "filename": "clippy_lints/src/else_if_without_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Felse_if_without_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Felse_if_without_else.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -43,7 +43,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ELSE_IF_WITHOUT_ELSE,\n     restriction,\n-    \"if expression with an `else if`, but without a final `else` branch\"\n+    \"`if` expression with an `else if`, but without a final `else` branch\"\n }\n \n declare_lint_pass!(ElseIfWithoutElse => [ELSE_IF_WITHOUT_ELSE]);\n@@ -60,7 +60,7 @@ impl EarlyLintPass for ElseIfWithoutElse {\n                     cx,\n                     ELSE_IF_WITHOUT_ELSE,\n                     els.span,\n-                    \"if expression with an `else if`, but without a final `else`\",\n+                    \"`if` expression with an `else if`, but without a final `else`\",\n                     \"add an `else` block here\",\n                 );\n             }"}, {"sha": "bd0e1ab290931f854b6f182641455e5639481c1c", "filename": "clippy_lints/src/format.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformat.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -46,9 +46,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for UselessFormat {\n \n         // Operate on the only argument of `alloc::fmt::format`.\n         if let Some(sugg) = on_new_v1(cx, expr) {\n-            span_useless_format(cx, span, \"consider using .to_string()\", sugg);\n+            span_useless_format(cx, span, \"consider using `.to_string()`\", sugg);\n         } else if let Some(sugg) = on_new_v1_fmt(cx, expr) {\n-            span_useless_format(cx, span, \"consider using .to_string()\", sugg);\n+            span_useless_format(cx, span, \"consider using `.to_string()`\", sugg);\n         }\n     }\n }"}, {"sha": "a266d7c2434493b8404df3a5674a27ed1b25a349", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -61,7 +61,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary boolean `not` operation\",\n-                            \"remove the `!` and swap the blocks of the if/else\",\n+                            \"remove the `!` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n                     ExprKind::Binary(ref kind, _, _) if kind.node == BinOpKind::Ne => {\n@@ -70,7 +70,7 @@ impl EarlyLintPass for IfNotElse {\n                             IF_NOT_ELSE,\n                             item.span,\n                             \"Unnecessary `!=` operation\",\n-                            \"change to `==` and swap the blocks of the if/else\",\n+                            \"change to `==` and swap the blocks of the `if`/`else`\",\n                         );\n                     },\n                     _ => (),"}, {"sha": "7ea329fae6b748d589d66351c96463758e42139e", "filename": "clippy_lints/src/implicit_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fimplicit_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fimplicit_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fimplicit_return.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -51,7 +51,7 @@ fn lint(cx: &LateContext<'_, '_>, outer_span: Span, inner_span: Span, msg: &str)\n     let outer_span = outer_span.source_callsite();\n     let inner_span = inner_span.source_callsite();\n \n-    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing return statement\", |db| {\n+    span_lint_and_then(cx, IMPLICIT_RETURN, outer_span, \"missing `return` statement\", |db| {\n         if let Some(snippet) = snippet_opt(cx, inner_span) {\n             db.span_suggestion(\n                 outer_span,\n@@ -102,7 +102,7 @@ fn expr_match(cx: &LateContext<'_, '_>, expr: &Expr<'_>) {\n                     expr_match(cx, &arm.body);\n                 }\n             } else {\n-                expr_match(cx, &arms.first().expect(\"if let doesn't have a single arm\").body);\n+                expr_match(cx, &arms.first().expect(\"`if let` doesn't have a single arm\").body);\n             }\n         },\n         // skip if it already has a return statement"}, {"sha": "d70b45eaecb82590aca833a4e46cbbf9fb2a12b4", "filename": "clippy_lints/src/infallible_destructuring_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finfallible_destructuring_match.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -38,7 +38,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INFALLIBLE_DESTRUCTURING_MATCH,\n     style,\n-    \"a match statement with a single infallible arm instead of a `let`\"\n+    \"a `match` statement with a single infallible arm instead of a `let`\"\n }\n \n declare_lint_pass!(InfallibleDestructingMatch => [INFALLIBLE_DESTRUCTURING_MATCH]);\n@@ -61,7 +61,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for InfallibleDestructingMatch {\n                     cx,\n                     INFALLIBLE_DESTRUCTURING_MATCH,\n                     local.span,\n-                    \"you seem to be trying to use match to destructure a single infallible pattern. \\\n+                    \"you seem to be trying to use `match` to destructure a single infallible pattern. \\\n                      Consider using `let`\",\n                     \"try this\",\n                     format!("}, {"sha": "9d7c3b46fed5678489f1e5206324f52c4a53f9f0", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -88,7 +88,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INHERENT_TO_STRING_SHADOW_DISPLAY,\n     correctness,\n-    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait \"\n+    \"type implements inherent method `to_string()`, which gets shadowed by the implementation of the `Display` trait\"\n }\n \n declare_lint_pass!(InherentToString => [INHERENT_TO_STRING, INHERENT_TO_STRING_SHADOW_DISPLAY]);"}, {"sha": "d9dd13923604d62d74aa2979f718cf9178464fc7", "filename": "clippy_lints/src/int_plus_one.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fint_plus_one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fint_plus_one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fint_plus_one.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -32,7 +32,7 @@ declare_clippy_lint! {\n     /// ```\n     pub INT_PLUS_ONE,\n     complexity,\n-    \"instead of using x >= y + 1, use x > y\"\n+    \"instead of using `x >= y + 1`, use `x > y`\"\n }\n \n declare_lint_pass!(IntPlusOne => [INT_PLUS_ONE]);"}, {"sha": "eef583a6e6251ef87f365bf18c77058382bcd288", "filename": "clippy_lints/src/large_stack_arrays.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flarge_stack_arrays.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -59,7 +59,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LargeStackArrays {\n                         self.maximum_allowed_size\n                     ),\n                     &format!(\n-                        \"consider allocating on the heap with vec!{}.into_boxed_slice()\",\n+                        \"consider allocating on the heap with `vec!{}.into_boxed_slice()`\",\n                         snippet(cx, expr.span, \"[...]\")\n                     ),\n                 );"}, {"sha": "7787a55a2bb68d7d22bce576a9b30d2d1d6f444f", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -27,7 +27,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LET_UNDERSCORE_MUST_USE,\n     restriction,\n-    \"non-binding let on a #[must_use] expression\"\n+    \"non-binding let on a `#[must_use]` expression\"\n }\n \n declare_lint_pass!(LetUnderscore => [LET_UNDERSCORE_MUST_USE]);\n@@ -44,15 +44,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for LetUnderscore {\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,\n-                        \"non-binding let on an expression with #[must_use] type\",\n+                        \"non-binding let on an expression with `#[must_use]` type\",\n                         \"consider explicitly using expression value\"\n                     )\n                 } else if is_must_use_func_call(cx, init) {\n                     span_help_and_lint(\n                         cx,\n                         LET_UNDERSCORE_MUST_USE,\n                         stmt.span,\n-                        \"non-binding let on a result of a #[must_use] function\",\n+                        \"non-binding let on a result of a `#[must_use]` function\",\n                         \"consider explicitly using function result\"\n                     )\n                 }"}, {"sha": "d63255408efe11d9f8c7aabf7cb93cfbada47a1a", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -1353,7 +1353,7 @@ fn check_for_loop_arg(cx: &LateContext<'_, '_>, pat: &Pat<'_>, arg: &Expr<'_>, e\n                         EXPLICIT_INTO_ITER_LOOP,\n                         arg.span,\n                         \"it is more concise to loop over containers instead of using explicit \\\n-                         iteration methods`\",\n+                         iteration methods\",\n                         \"to write this more concisely, try\",\n                         object.to_string(),\n                         applicability,"}, {"sha": "ae2d0830128513a2e6d68c97cd9dea128b3e7ba6", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -112,7 +112,7 @@ fn lint_needless_cloning(cx: &LateContext<'_, '_>, root: Span, receiver: Span) {\n         MAP_CLONE,\n         root.trim_start(receiver).unwrap(),\n         \"You are needlessly cloning iterator elements\",\n-        \"Remove the map call\",\n+        \"Remove the `map` call\",\n         String::new(),\n         Applicability::MachineApplicable,\n     )"}, {"sha": "3855b5a21f99fcb66763bed4111ffe000edb8c3b", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -48,7 +48,7 @@ declare_clippy_lint! {\n     /// ```\n     pub OPTION_MAP_UNIT_FN,\n     complexity,\n-    \"using `option.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `option.map(f)`, where `f` is a function or closure that returns `()`\"\n }\n \n declare_clippy_lint! {\n@@ -89,7 +89,7 @@ declare_clippy_lint! {\n     /// ```\n     pub RESULT_MAP_UNIT_FN,\n     complexity,\n-    \"using `result.map(f)`, where f is a function or closure that returns ()\"\n+    \"using `result.map(f)`, where `f` is a function or closure that returns `()`\"\n }\n \n declare_lint_pass!(MapUnit => [OPTION_MAP_UNIT_FN, RESULT_MAP_UNIT_FN]);\n@@ -199,7 +199,7 @@ fn let_binding_name(cx: &LateContext<'_, '_>, var_arg: &hir::Expr<'_>) -> String\n #[must_use]\n fn suggestion_msg(function_type: &str, map_type: &str) -> String {\n     format!(\n-        \"called `map(f)` on an {0} value where `f` is a unit {1}\",\n+        \"called `map(f)` on an `{0}` value where `f` is a unit {1}\",\n         map_type, function_type\n     )\n }"}, {"sha": "3200de1cfc1726ab79889a805dfd4889d7370d01", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -37,7 +37,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SINGLE_MATCH,\n     style,\n-    \"a match statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\"\n+    \"a `match` statement with a single nontrivial arm (i.e., where the other arm is `_ => {}`) instead of `if let`\"\n }\n \n declare_clippy_lint! {\n@@ -76,7 +76,7 @@ declare_clippy_lint! {\n     /// ```\n     pub SINGLE_MATCH_ELSE,\n     pedantic,\n-    \"a match statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n+    \"a `match` statement with two arms where the second arm's pattern is a placeholder instead of a specific match pattern\"\n }\n \n declare_clippy_lint! {\n@@ -99,7 +99,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_REF_PATS,\n     style,\n-    \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n+    \"a `match` or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n }\n \n declare_clippy_lint! {\n@@ -133,7 +133,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_BOOL,\n     style,\n-    \"a match on a boolean expression instead of an `if..else` block\"\n+    \"a `match` on a boolean expression instead of an `if..else` block\"\n }\n \n declare_clippy_lint! {\n@@ -155,7 +155,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_OVERLAPPING_ARM,\n     style,\n-    \"a match with overlapping arms\"\n+    \"a `match` with overlapping arms\"\n }\n \n declare_clippy_lint! {\n@@ -177,7 +177,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_WILD_ERR_ARM,\n     style,\n-    \"a match with `Err(_)` arm and take drastic actions\"\n+    \"a `match` with `Err(_)` arm and take drastic actions\"\n }\n \n declare_clippy_lint! {\n@@ -198,7 +198,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MATCH_AS_REF,\n     complexity,\n-    \"a match on an Option value instead of using `as_ref()` or `as_mut`\"\n+    \"a `match` on an Option value instead of using `as_ref()` or `as_mut`\"\n }\n \n declare_clippy_lint! {\n@@ -407,7 +407,7 @@ fn check_match_bool(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>], e\n                         if let Some(sugg) = sugg {\n                             db.span_suggestion(\n                                 expr.span,\n-                                \"consider using an if/else expression\",\n+                                \"consider using an `if`/`else` expression\",\n                                 sugg,\n                                 Applicability::HasPlaceholders,\n                             );\n@@ -461,10 +461,10 @@ fn check_wild_err_arm(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>])\n                         span_note_and_lint(cx,\n                                            MATCH_WILD_ERR_ARM,\n                                            arm.pat.span,\n-                                           \"Err(_) will match all errors, maybe not a good idea\",\n+                                           \"`Err(_)` will match all errors, maybe not a good idea\",\n                                            arm.pat.span,\n                                            \"to remove this warning, match each error separately \\\n-                                            or use unreachable macro\");\n+                                            or use `unreachable!` macro\");\n                     }\n                 }\n             }\n@@ -650,7 +650,7 @@ fn check_match_as_ref(cx: &LateContext<'_, '_>, ex: &Expr<'_>, arms: &[Arm<'_>],\n                 cx,\n                 MATCH_AS_REF,\n                 expr.span,\n-                &format!(\"use {}() instead\", suggestion),\n+                &format!(\"use `{}()` instead\", suggestion),\n                 \"try this\",\n                 format!(\n                     \"{}.{}(){}\","}, {"sha": "636c0f97578993eabac6eac3dbe5ff73a07f5458", "filename": "clippy_lints/src/mem_discriminant.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmem_discriminant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_discriminant.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -25,7 +25,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MEM_DISCRIMINANT_NON_ENUM,\n     correctness,\n-    \"calling mem::descriminant on non-enum type\"\n+    \"calling `mem::descriminant` on non-enum type\"\n }\n \n declare_lint_pass!(MemDiscriminant => [MEM_DISCRIMINANT_NON_ENUM]);"}, {"sha": "4172ea33950c4bd183f4afb17a19f245aac71aee", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -35,7 +35,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MemForget {\n                         let forgot_ty = cx.tables.expr_ty(&args[0]);\n \n                         if forgot_ty.ty_adt_def().map_or(false, |def| def.has_dtor(cx.tcx)) {\n-                            span_lint(cx, MEM_FORGET, e.span, \"usage of mem::forget on Drop type\");\n+                            span_lint(cx, MEM_FORGET, e.span, \"usage of `mem::forget` on `Drop` type\");\n                         }\n                     }\n                 }"}, {"sha": "419522f0d27f74923ba007d04fb48699fa035c8a", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -1828,7 +1828,7 @@ fn lint_clone_on_ref_ptr(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, arg: &h\n             cx,\n             CLONE_ON_REF_PTR,\n             expr.span,\n-            \"using '.clone()' on a ref-counted pointer\",\n+            \"using `.clone()` on a ref-counted pointer\",\n             \"try this\",\n             format!(\n                 \"{}::<{}>::clone(&{})\",\n@@ -2220,8 +2220,8 @@ fn lint_unwrap(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, unwrap_args: &[hi\n             lint,\n             expr.span,\n             &format!(\n-                \"used unwrap() on {} value. If you don't want to handle the {} case gracefully, consider \\\n-                 using expect() to provide a better panic \\\n+                \"used `unwrap()` on `{}` value. If you don't want to handle the `{}` case gracefully, consider \\\n+                 using `expect()` to provide a better panic \\\n                  message\",\n                 kind, none_value\n             ),\n@@ -2247,7 +2247,7 @@ fn lint_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, expect_args: &[hi\n             lint,\n             expr.span,\n             &format!(\n-                \"used expect() on {} value. If this value is an {} it will panic\",\n+                \"used `expect()` on `{}` value. If this value is an `{}` it will panic\",\n                 kind, none_value\n             ),\n         );\n@@ -2268,7 +2268,7 @@ fn lint_ok_expect(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, ok_args: &[hir\n                 cx,\n                 OK_EXPECT,\n                 expr.span,\n-                \"called `ok().expect()` on a Result value. You can call `expect` directly on the `Result`\",\n+                \"called `ok().expect()` on a `Result` value. You can call `expect()` directly on the `Result`\",\n             );\n         }\n     }\n@@ -2286,7 +2286,7 @@ fn lint_map_flatten<'a, 'tcx>(cx: &LateContext<'a, 'tcx>, expr: &'tcx hir::Expr<\n         span_lint_and_then(cx, MAP_FLATTEN, expr.span, msg, |db| {\n             db.span_suggestion(\n                 expr.span,\n-                \"try using flat_map instead\",\n+                \"try using `flat_map` instead\",\n                 hint,\n                 Applicability::MachineApplicable,\n             );\n@@ -2320,10 +2320,10 @@ fn lint_map_unwrap_or_else<'a, 'tcx>(\n \n         // lint message\n         let msg = if is_option {\n-            \"called `map(f).unwrap_or_else(g)` on an Option value. This can be done more directly by calling \\\n+            \"called `map(f).unwrap_or_else(g)` on an `Option` value. This can be done more directly by calling \\\n              `map_or_else(g, f)` instead\"\n         } else {\n-            \"called `map(f).unwrap_or_else(g)` on a Result value. This can be done more directly by calling \\\n+            \"called `map(f).unwrap_or_else(g)` on a `Result` value. This can be done more directly by calling \\\n              `.map_or_else(g, f)` instead\"\n         };\n         // get snippets for args to map() and unwrap_or_else()\n@@ -2380,15 +2380,15 @@ fn lint_map_or_none<'a, 'tcx>(\n \n         if map_or_arg_is_none {\n             // lint message\n-            let msg = \"called `map_or(None, f)` on an Option value. This can be done more directly by calling \\\n+            let msg = \"called `map_or(None, f)` on an `Option` value. This can be done more directly by calling \\\n                        `and_then(f)` instead\";\n             let map_or_self_snippet = snippet(cx, map_or_args[0].span, \"..\");\n             let map_or_func_snippet = snippet(cx, map_or_args[2].span, \"..\");\n             let hint = format!(\"{0}.and_then({1})\", map_or_self_snippet, map_or_func_snippet);\n             span_lint_and_then(cx, OPTION_MAP_OR_NONE, expr.span, msg, |db| {\n                 db.span_suggestion(\n                     expr.span,\n-                    \"try using and_then instead\",\n+                    \"try using `and_then` instead\",\n                     hint,\n                     Applicability::MachineApplicable, // snippet\n                 );\n@@ -2860,7 +2860,7 @@ fn lint_single_char_pattern<'a, 'tcx>(\n                 SINGLE_CHAR_PATTERN,\n                 arg.span,\n                 \"single-character string constant used as pattern\",\n-                \"try using a char instead\",\n+                \"try using a `char` instead\",\n                 hint,\n                 applicability,\n             );\n@@ -2928,7 +2928,7 @@ fn lint_into_iter(cx: &LateContext<'_, '_>, expr: &hir::Expr<'_>, self_ref_ty: T\n             INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n-                \"this .into_iter() call is equivalent to .{}() and will not move the {}\",\n+                \"this `.into_iter()` call is equivalent to `.{}()` and will not move the `{}`\",\n                 method_name, kind,\n             ),\n             \"call directly\","}, {"sha": "f440d864570effae25ae335700c8efdd1b808047", "filename": "clippy_lints/src/methods/option_map_unwrap_or.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Foption_map_unwrap_or.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -60,7 +60,7 @@ pub(super) fn lint<'a, 'tcx>(\n             \"map_or(a, f)\"\n         };\n         let msg = &format!(\n-            \"called `map(f).unwrap_or({})` on an Option value. \\\n+            \"called `map(f).unwrap_or({})` on an `Option` value. \\\n              This can be done more directly by calling `{}` instead\",\n             arg, suggest\n         );"}, {"sha": "749f6b9251512cb8b2810edf361d4217b75f5cfb", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -45,7 +45,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MinMaxPass {\n                             cx,\n                             MIN_MAX,\n                             expr.span,\n-                            \"this min/max combination leads to constant result\",\n+                            \"this `min`/`max` combination leads to constant result\",\n                         );\n                     },\n                 }"}, {"sha": "6fd83cf6ac0fdcc57dfe1238a7e64ac96925749e", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -63,7 +63,7 @@ declare_clippy_lint! {\n     /// ```\n     pub CMP_NAN,\n     correctness,\n-    \"comparisons to NAN, which will always return false, probably not intended\"\n+    \"comparisons to `NAN`, which will always return false, probably not intended\"\n }\n \n declare_clippy_lint! {\n@@ -194,7 +194,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_PTR,\n     style,\n-    \"using 0 as *{const, mut} T\"\n+    \"using `0 as *{const, mut} T`\"\n }\n \n declare_clippy_lint! {\n@@ -370,9 +370,9 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                         }\n                     }\n                     let (lint, msg) = if is_named_constant(cx, left) || is_named_constant(cx, right) {\n-                        (FLOAT_CMP_CONST, \"strict comparison of f32 or f64 constant\")\n+                        (FLOAT_CMP_CONST, \"strict comparison of `f32` or `f64` constant\")\n                     } else {\n-                        (FLOAT_CMP, \"strict comparison of f32 or f64\")\n+                        (FLOAT_CMP, \"strict comparison of `f32` or `f64`\")\n                     };\n                     span_lint_and_then(cx, lint, expr.span, msg, |db| {\n                         let lhs = Sugg::hir(cx, left, \"..\");\n@@ -388,7 +388,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MiscLints {\n                             ),\n                             Applicability::HasPlaceholders, // snippet\n                         );\n-                        db.span_note(expr.span, \"std::f32::EPSILON and std::f64::EPSILON are available.\");\n+                        db.span_note(expr.span, \"`std::f32::EPSILON` and `std::f64::EPSILON` are available.\");\n                     });\n                 } else if op == BinOpKind::Rem && is_integer_const(cx, right, 1) {\n                     span_lint(cx, MODULO_ONE, expr.span, \"any number modulo 1 will be 0\");\n@@ -456,7 +456,7 @@ fn check_nan(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cmp_expr: &Expr<'_>) {\n                     cx,\n                     CMP_NAN,\n                     cmp_expr.span,\n-                    \"doomed comparison with NAN, use `std::{f32,f64}::is_nan()` instead\",\n+                    \"doomed comparison with `NAN`, use `std::{f32,f64}::is_nan()` instead\",\n                 );\n             }\n         }"}, {"sha": "cdd9e5a90a80671f8a1fac4fa4606d10600a1138", "filename": "clippy_lints/src/missing_const_for_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_const_for_fn.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MissingConstForFn {\n                 cx.tcx.sess.span_err(span, &err);\n             }\n         } else {\n-            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a const_fn\");\n+            span_lint(cx, MISSING_CONST_FOR_FN, span, \"this could be a `const_fn`\");\n         }\n     }\n }"}, {"sha": "c25131c520cba775d97c9e8ba0e7d0ae0305fe61", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -54,7 +54,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MISSING_INLINE_IN_PUBLIC_ITEMS,\n     restriction,\n-    \"detects missing #[inline] attribute for public callables (functions, trait methods, methods...)\"\n+    \"detects missing `#[inline]` attribute for public callables (functions, trait methods, methods...)\"\n }\n \n fn check_missing_inline_attrs(cx: &LateContext<'_, '_>, attrs: &[ast::Attribute], sp: Span, desc: &'static str) {"}, {"sha": "27f598c141e11c835dc822e1acfe564e5713258f", "filename": "clippy_lints/src/mul_add.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmul_add.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmul_add.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmul_add.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -75,7 +75,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n                             cx,\n                             MANUAL_MUL_ADD,\n                             expr.span,\n-                            \"consider using mul_add() for better numerical precision\",\n+                            \"consider using `mul_add()` for better numerical precision\",\n                             \"try\",\n                             format!(\n                                 \"{}.mul_add({}, {})\",\n@@ -94,7 +94,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for MulAddCheck {\n                             cx,\n                             MANUAL_MUL_ADD,\n                             expr.span,\n-                            \"consider using mul_add() for better numerical precision\",\n+                            \"consider using `mul_add()` for better numerical precision\",\n                             \"try\",\n                             format!(\n                                 \"{}.mul_add({}, {})\","}, {"sha": "a64467ef6a241cb4a9e3538bdfc7873cb73b6c6c", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -47,7 +47,7 @@ declare_clippy_lint! {\n     /// ```\n     pub MUTABLE_KEY_TYPE,\n     correctness,\n-    \"Check for mutable Map/Set key type\"\n+    \"Check for mutable `Map`/`Set` key type\"\n }\n \n declare_lint_pass!(MutableKeyType => [ MUTABLE_KEY_TYPE ]);"}, {"sha": "e04bd56e054f26c7cf2e4296ebf5ea4c2613b584", "filename": "clippy_lints/src/mutex_atomic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fmutex_atomic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmutex_atomic.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -63,8 +63,8 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Mutex {\n                 let mutex_param = subst.type_at(0);\n                 if let Some(atomic_name) = get_atomic_name(mutex_param) {\n                     let msg = format!(\n-                        \"Consider using an {} instead of a Mutex here. If you just want the locking \\\n-                         behaviour and not the internal type, consider using Mutex<()>.\",\n+                        \"Consider using an `{}` instead of a `Mutex` here. If you just want the locking \\\n+                         behavior and not the internal type, consider using `Mutex<()>`.\",\n                         atomic_name\n                     );\n                     match mutex_param.kind {"}, {"sha": "78c121b6dd8afa20be37b3cf92be17e11537cd25", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -113,7 +113,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessBool {\n                     _ => (),\n                 }\n             } else {\n-                panic!(\"IfExpr 'then' node is not an ExprKind::Block\");\n+                panic!(\"IfExpr `then` node is not an `ExprKind::Block`\");\n             }\n         }\n     }"}, {"sha": "f35b84c449b20f51d9d5f1892fac19028e8bbe8b", "filename": "clippy_lints/src/needless_continue.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_continue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_continue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_continue.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -274,15 +274,15 @@ struct LintData<'a> {\n     block_stmts: &'a [ast::Stmt],\n }\n \n-const MSG_REDUNDANT_ELSE_BLOCK: &str = \"This else block is redundant.\\n\";\n+const MSG_REDUNDANT_ELSE_BLOCK: &str = \"This `else` block is redundant.\\n\";\n \n const MSG_ELSE_BLOCK_NOT_NEEDED: &str = \"There is no need for an explicit `else` block for this `if` \\\n                                          expression\\n\";\n \n-const DROP_ELSE_BLOCK_AND_MERGE_MSG: &str = \"Consider dropping the else clause and merging the code that \\\n-                                             follows (in the loop) with the if block, like so:\\n\";\n+const DROP_ELSE_BLOCK_AND_MERGE_MSG: &str = \"Consider dropping the `else` clause and merging the code that \\\n+                                             follows (in the loop) with the `if` block, like so:\\n\";\n \n-const DROP_ELSE_BLOCK_MSG: &str = \"Consider dropping the else clause, and moving out the code in the else \\\n+const DROP_ELSE_BLOCK_MSG: &str = \"Consider dropping the `else` clause, and moving out the code in the `else` \\\n                                    block, like so:\\n\";\n \n fn emit_warning<'a>(ctx: &EarlyContext<'_>, data: &'a LintData<'_>, header: &str, typ: LintType) {"}, {"sha": "2a58f6c3dc25f52ea2d118a376f3ef8d9d37b88d", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -206,7 +206,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for NeedlessPassByValue {\n                         if let ty::Adt(def, ..) = ty.kind {\n                             if let Some(span) = cx.tcx.hir().span_if_local(def.did) {\n                                 if cx.param_env.can_type_implement_copy(cx.tcx, ty).is_ok() {\n-                                    db.span_help(span, \"consider marking this type as Copy\");\n+                                    db.span_help(span, \"consider marking this type as `Copy`\");\n                                 }\n                             }\n                         }"}, {"sha": "6e77a7a77fa002de2bd3bd50a55208e159f97e40", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -21,7 +21,7 @@ declare_clippy_lint! {\n     /// ```\n     pub NEG_MULTIPLY,\n     style,\n-    \"multiplying integers with -1\"\n+    \"multiplying integers with `-1`\"\n }\n \n declare_lint_pass!(NegMultiply => [NEG_MULTIPLY]);\n@@ -48,7 +48,7 @@ fn check_mul(cx: &LateContext<'_, '_>, span: Span, lit: &Expr<'_>, exp: &Expr<'_\n         if let Constant::Int(1) = consts::lit_to_constant(&l.node, cx.tables.expr_ty_opt(lit));\n         if cx.tables.expr_ty(exp).is_integral();\n         then {\n-            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with -1\");\n+            span_lint(cx, NEG_MULTIPLY, span, \"Negation by multiplying with `-1`\");\n         }\n     }\n }"}, {"sha": "6ffad405c2a2db4aaacb1d2d179e9e2ad1b926c8", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -49,7 +49,7 @@ declare_clippy_lint! {\n     /// ```\n     pub DECLARE_INTERIOR_MUTABLE_CONST,\n     correctness,\n-    \"declaring const with interior mutability\"\n+    \"declaring `const` with interior mutability\"\n }\n \n declare_clippy_lint! {\n@@ -81,7 +81,7 @@ declare_clippy_lint! {\n     /// ```\n     pub BORROW_INTERIOR_MUTABLE_CONST,\n     correctness,\n-    \"referencing const with interior mutability\"\n+    \"referencing `const` with interior mutability\"\n }\n \n #[allow(dead_code)]\n@@ -98,12 +98,12 @@ impl Source {\n         match self {\n             Self::Item { item } | Self::Assoc { item, .. } => (\n                 DECLARE_INTERIOR_MUTABLE_CONST,\n-                \"a const item should never be interior mutable\",\n+                \"a `const` item should never be interior mutable\",\n                 *item,\n             ),\n             Self::Expr { expr } => (\n                 BORROW_INTERIOR_MUTABLE_CONST,\n-                \"a const item with interior mutability should not be borrowed\",\n+                \"a `const` item with interior mutability should not be borrowed\",\n                 *expr,\n             ),\n         }"}, {"sha": "f41ac30c4815ebe2998e9dbcc292cb4921839e4a", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -123,7 +123,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"create\\\" is called more than once\",\n+                        \"the method `create` is called more than once\",\n                     );\n                 } else {\n                     create = true\n@@ -136,7 +136,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"append\\\" is called more than once\",\n+                        \"the method `append` is called more than once\",\n                     );\n                 } else {\n                     append = true\n@@ -149,7 +149,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"truncate\\\" is called more than once\",\n+                        \"the method `truncate` is called more than once\",\n                     );\n                 } else {\n                     truncate = true\n@@ -162,7 +162,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"read\\\" is called more than once\",\n+                        \"the method `read` is called more than once\",\n                     );\n                 } else {\n                     read = true\n@@ -175,7 +175,7 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n                         cx,\n                         NONSENSICAL_OPEN_OPTIONS,\n                         span,\n-                        \"the method \\\"write\\\" is called more than once\",\n+                        \"the method `write` is called more than once\",\n                     );\n                 } else {\n                     write = true\n@@ -190,15 +190,15 @@ fn check_open_options(cx: &LateContext<'_, '_>, options: &[(OpenOption, Argument\n             cx,\n             NONSENSICAL_OPEN_OPTIONS,\n             span,\n-            \"file opened with \\\"truncate\\\" and \\\"read\\\"\",\n+            \"file opened with `truncate` and `read`\",\n         );\n     }\n     if append && truncate && append_arg && truncate_arg {\n         span_lint(\n             cx,\n             NONSENSICAL_OPEN_OPTIONS,\n             span,\n-            \"file opened with \\\"append\\\" and \\\"truncate\\\"\",\n+            \"file opened with `append` and `truncate`\",\n         );\n     }\n }"}, {"sha": "907a46846d07a60162aead762feb9fa7de60b1b0", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -137,7 +137,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ptr {\n                     cx,\n                     CMP_NULL,\n                     expr.span,\n-                    \"Comparing with null is better expressed by the .is_null() method\",\n+                    \"Comparing with null is better expressed by the `.is_null()` method\",\n                 );\n             }\n         }"}, {"sha": "a5e61da6740115c39cdf45e35255369251deae46", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -112,7 +112,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Ranges {\n                          span_lint(cx,\n                                    RANGE_ZIP_WITH_LEN,\n                                    expr.span,\n-                                   &format!(\"It is more idiomatic to use {}.iter().enumerate()\",\n+                                   &format!(\"It is more idiomatic to use `{}.iter().enumerate()`\",\n                                             snippet(cx, iter_args[0].span, \"_\")));\n                     }\n                 }"}, {"sha": "ced784ca4917464838bd0afd28f417cdca4a15fa", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -154,15 +154,15 @@ impl Return {\n                     return;\n                 }\n \n-                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                     if let Some(snippet) = snippet_opt(cx, inner_span) {\n                         db.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                     }\n                 })\n             },\n             None => match replacement {\n                 RetReplacement::Empty => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n                             \"remove `return`\",\n@@ -172,7 +172,7 @@ impl Return {\n                     });\n                 },\n                 RetReplacement::Block => {\n-                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded return statement\", |db| {\n+                    span_lint_and_then(cx, NEEDLESS_RETURN, ret_span, \"unneeded `return` statement\", |db| {\n                         db.span_suggestion(\n                             ret_span,\n                             \"replace `return` with an empty block\",\n@@ -211,9 +211,9 @@ impl Return {\n                     cx,\n                     LET_AND_RETURN,\n                     retexpr.span,\n-                    \"returning the result of a let binding from a block\",\n+                    \"returning the result of a `let` binding from a block\",\n                     |err| {\n-                        err.span_label(local.span, \"unnecessary let binding\");\n+                        err.span_label(local.span, \"unnecessary `let` binding\");\n \n                         if let Some(snippet) = snippet_opt(cx, initexpr.span) {\n                             err.multipart_suggestion("}, {"sha": "9d211b7b93516708d919e732b47cd18478abc0d5", "filename": "clippy_lints/src/tabs_in_doc_comments.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftabs_in_doc_comments.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -36,7 +36,7 @@ declare_clippy_lint! {\n     /// ```\n     ///\n     /// Will be converted to:\n-     /// ```rust\n+    /// ```rust\n     /// ///\n     /// /// Struct to hold two strings:\n     /// ///     - first        one"}, {"sha": "fadac06c10f62eb4cbd6c783c7c216055c78b06c", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 23, "deletions": 17, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -141,7 +141,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LINKEDLIST,\n     pedantic,\n-    \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\"\n+    \"usage of LinkedList, usually a vector is faster, or a more specialized data structure like a `VecDeque`\"\n }\n \n declare_clippy_lint! {\n@@ -316,7 +316,7 @@ fn check_ty(cx: &LateContext<'_, '_>, hir_ty: &hir::Ty<'_>, is_local: bool) {\n                         LINKEDLIST,\n                         hir_ty.span,\n                         \"I see you're using a LinkedList! Perhaps you meant some other data structure?\",\n-                        \"a VecDeque might work\",\n+                        \"a `VecDeque` might work\",\n                     );\n                     return; // don't recurse into the type\n                 }\n@@ -464,7 +464,7 @@ declare_clippy_lint! {\n     /// ```\n     pub LET_UNIT_VALUE,\n     style,\n-    \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n+    \"creating a `let` binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n declare_lint_pass!(LetUnitValue => [LET_UNIT_VALUE]);\n@@ -998,7 +998,7 @@ fn span_lossless_lint(cx: &LateContext<'_, '_>, expr: &Expr<'_>, op: &Expr<'_>,\n         CAST_LOSSLESS,\n         expr.span,\n         &format!(\n-            \"casting {} to {} may become silently lossy if you later change the type\",\n+            \"casting `{}` to `{}` may become silently lossy if you later change the type\",\n             cast_from, cast_to\n         ),\n         \"try\",\n@@ -1053,7 +1053,10 @@ fn check_loss_of_sign(cx: &LateContext<'_, '_>, expr: &Expr<'_>, op: &Expr<'_>,\n         cx,\n         CAST_SIGN_LOSS,\n         expr.span,\n-        &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+        &format!(\n+            \"casting `{}` to `{}` may lose the sign of the value\",\n+            cast_from, cast_to\n+        ),\n     );\n }\n \n@@ -1098,7 +1101,7 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cast\n             CAST_POSSIBLE_TRUNCATION,\n             expr.span,\n             &format!(\n-                \"casting {} to {} may truncate the value{}\",\n+                \"casting `{}` to `{}` may truncate the value{}\",\n                 cast_from,\n                 cast_to,\n                 match suffix_truncation {\n@@ -1115,7 +1118,7 @@ fn check_truncation_and_wrapping(cx: &LateContext<'_, '_>, expr: &Expr<'_>, cast\n             CAST_POSSIBLE_WRAP,\n             expr.span,\n             &format!(\n-                \"casting {} to {} may wrap around the value{}\",\n+                \"casting `{}` to `{}` may wrap around the value{}\",\n                 cast_from,\n                 cast_to,\n                 match suffix_wrap {\n@@ -1194,7 +1197,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Casts {\n                                 cx,\n                                 UNNECESSARY_CAST,\n                                 expr.span,\n-                                &format!(\"casting integer literal to {} is unnecessary\", cast_to),\n+                                &format!(\"casting integer literal to `{}` is unnecessary\", cast_to),\n                                 \"try\",\n                                 format!(\"{}_{}\", n, cast_to),\n                                 Applicability::MachineApplicable,\n@@ -1256,14 +1259,17 @@ fn lint_numeric_casts<'tcx>(\n                 cx,\n                 CAST_POSSIBLE_TRUNCATION,\n                 expr.span,\n-                &format!(\"casting {} to {} may truncate the value\", cast_from, cast_to),\n+                &format!(\"casting `{}` to `{}` may truncate the value\", cast_from, cast_to),\n             );\n             if !cast_to.is_signed() {\n                 span_lint(\n                     cx,\n                     CAST_SIGN_LOSS,\n                     expr.span,\n-                    &format!(\"casting {} to {} may lose the sign of the value\", cast_from, cast_to),\n+                    &format!(\n+                        \"casting `{}` to `{}` may lose the sign of the value\",\n+                        cast_from, cast_to\n+                    ),\n                 );\n             }\n         },\n@@ -1278,7 +1284,7 @@ fn lint_numeric_casts<'tcx>(\n                     cx,\n                     CAST_POSSIBLE_TRUNCATION,\n                     expr.span,\n-                    \"casting f64 to f32 may truncate the value\",\n+                    \"casting `f64` to `f32` may truncate the value\",\n                 );\n             }\n             if let (&ty::Float(FloatTy::F32), &ty::Float(FloatTy::F64)) = (&cast_from.kind, &cast_to.kind) {\n@@ -1550,7 +1556,7 @@ declare_clippy_lint! {\n     /// ```\n     pub CHAR_LIT_AS_U8,\n     complexity,\n-    \"casting a character literal to u8 truncates\"\n+    \"casting a character literal to `u8` truncates\"\n }\n \n declare_lint_pass!(CharLitAsU8 => [CHAR_LIT_AS_U8]);\n@@ -1742,15 +1748,15 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AbsurdExtremeComparisons {\n                         AlwaysFalse => \"this comparison is always false\".to_owned(),\n                         AlwaysTrue => \"this comparison is always true\".to_owned(),\n                         InequalityImpossible => format!(\n-                            \"the case where the two sides are not equal never occurs, consider using {} == {} \\\n+                            \"the case where the two sides are not equal never occurs, consider using `{} == {}` \\\n                              instead\",\n                             snippet(cx, lhs.span, \"lhs\"),\n                             snippet(cx, rhs.span, \"rhs\")\n                         ),\n                     };\n \n                     let help = format!(\n-                        \"because {} is the {} value for this type, {}\",\n+                        \"because `{}` is the {} value for this type, {}\",\n                         snippet(cx, culprit.expr.span, \"x\"),\n                         match culprit.which {\n                             Minimum => \"minimum\",\n@@ -1813,7 +1819,7 @@ impl FullInt {\n impl PartialEq for FullInt {\n     #[must_use]\n     fn eq(&self, other: &Self) -> bool {\n-        self.partial_cmp(other).expect(\"partial_cmp only returns Some(_)\") == Ordering::Equal\n+        self.partial_cmp(other).expect(\"`partial_cmp` only returns `Some(_)`\") == Ordering::Equal\n     }\n }\n \n@@ -1832,7 +1838,7 @@ impl Ord for FullInt {\n     #[must_use]\n     fn cmp(&self, other: &Self) -> Ordering {\n         self.partial_cmp(other)\n-            .expect(\"partial_cmp for FullInt can never return None\")\n+            .expect(\"`partial_cmp` for FullInt can never return `None`\")\n     }\n }\n \n@@ -2404,7 +2410,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for RefToMut {\n                     cx,\n                     CAST_REF_TO_MUT,\n                     expr.span,\n-                    \"casting &T to &mut T may cause undefined behaviour, consider instead using an UnsafeCell\",\n+                    \"casting `&T` to `&mut T` may cause undefined behavior, consider instead using an `UnsafeCell`\",\n                 );\n             }\n         }"}, {"sha": "008dc578bf905c7236b2dc5f072bf5f625df1d1b", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -66,7 +66,7 @@ fn unsafe_to_safe_check(old_name: Ident, new_name: Ident, cx: &EarlyContext<'_>,\n             UNSAFE_REMOVED_FROM_NAME,\n             span,\n             &format!(\n-                \"removed \\\"unsafe\\\" from the name of `{}` in use as `{}`\",\n+                \"removed `unsafe` from the name of `{}` in use as `{}`\",\n                 old_str, new_str\n             ),\n         );"}, {"sha": "7f127350ba92ac9c61a5798c55b42c3e2d945ddd", "filename": "clippy_lints/src/unwrap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Funwrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Funwrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -35,7 +35,7 @@ declare_clippy_lint! {\n     /// ```\n     pub UNNECESSARY_UNWRAP,\n     complexity,\n-    \"checks for calls of unwrap[_err]() that cannot fail\"\n+    \"checks for calls of `unwrap[_err]()` that cannot fail\"\n }\n \n declare_clippy_lint! {\n@@ -58,7 +58,7 @@ declare_clippy_lint! {\n     /// This code will always panic. The if condition should probably be inverted.\n     pub PANICKING_UNWRAP,\n     correctness,\n-    \"checks for calls of unwrap[_err]() that will always fail\"\n+    \"checks for calls of `unwrap[_err]()` that will always fail\"\n }\n \n /// Visitor that keeps track of which variables are unwrappable."}, {"sha": "11cc594fb5dc56e55b37427f30a5b5b65c177268", "filename": "clippy_lints/src/zero_div_zero.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5ac08b0cc94cab09fba719a17c141c68c4cbc063/clippy_lints%2Fsrc%2Fzero_div_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fzero_div_zero.rs?ref=5ac08b0cc94cab09fba719a17c141c68c4cbc063", "patch": "@@ -20,7 +20,7 @@ declare_clippy_lint! {\n     /// ```\n     pub ZERO_DIVIDED_BY_ZERO,\n     complexity,\n-    \"usage of `0.0 / 0.0` to obtain NaN instead of std::f32::NaN or std::f64::NaN\"\n+    \"usage of `0.0 / 0.0` to obtain NaN instead of `std::f32::NAN` or `std::f64::NAN`\"\n }\n \n declare_lint_pass!(ZeroDiv => [ZERO_DIVIDED_BY_ZERO]);\n@@ -50,7 +50,7 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for ZeroDiv {\n                     cx,\n                     ZERO_DIVIDED_BY_ZERO,\n                     expr.span,\n-                    \"constant division of 0.0 with 0.0 will always result in NaN\",\n+                    \"constant division of `0.0` with `0.0` will always result in NaN\",\n                     &format!(\n                         \"Consider using `std::{}::NAN` if you would like a constant representing NaN\",\n                         float_type,"}]}