{"sha": "7f0d54d98842c786ab7a140c17c3ea32aea6aead", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmMGQ1NGQ5ODg0MmM3ODZhYjdhMTQwYzE3YzNlYTMyYWVhNmFlYWQ=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-01T07:18:25Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-06-11T20:48:57Z"}, "message": "More alloc docs tweaks", "tree": {"sha": "0233adb2ce713c962242732e729d537c0a7c756d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0233adb2ce713c962242732e729d537c0a7c756d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f0d54d98842c786ab7a140c17c3ea32aea6aead", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f0d54d98842c786ab7a140c17c3ea32aea6aead", "html_url": "https://github.com/rust-lang/rust/commit/7f0d54d98842c786ab7a140c17c3ea32aea6aead", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f0d54d98842c786ab7a140c17c3ea32aea6aead/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9dcb64f34638e8f72fa0ff54b39dfd071d0f8f86", "url": "https://api.github.com/repos/rust-lang/rust/commits/9dcb64f34638e8f72fa0ff54b39dfd071d0f8f86", "html_url": "https://github.com/rust-lang/rust/commit/9dcb64f34638e8f72fa0ff54b39dfd071d0f8f86"}], "stats": {"total": 30, "additions": 27, "deletions": 3}, "files": [{"sha": "04c8063ffebc5dbc613fab0bfc48f9d35b80c16a", "filename": "src/liballoc/alloc.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d54d98842c786ab7a140c17c3ea32aea6aead/src%2Fliballoc%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d54d98842c786ab7a140c17c3ea32aea6aead/src%2Fliballoc%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Falloc.rs?ref=7f0d54d98842c786ab7a140c17c3ea32aea6aead", "patch": "@@ -184,8 +184,10 @@ pub(crate) unsafe fn box_free<T: ?Sized>(ptr: Unique<T>) {\n ///\n /// The default behavior of this function is to print a message to standard error\n /// and abort the process.\n-/// It can be replaced with [`std::alloc::set_oom_hook`]\n-/// and [`std::alloc::take_oom_hook`].\n+/// It can be replaced with [`set_oom_hook`] and [`take_oom_hook`].\n+///\n+/// [`set_oom_hook`]: ../../std/alloc/fn.set_oom_hook.html\n+/// [`take_oom_hook`]: ../../std/alloc/fn.take_oom_hook.html\n #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n #[rustc_allocator_nounwind]\n pub fn oom(layout: Layout) -> ! {"}, {"sha": "353688d1b85583bd3b2f18e23049aee16872e062", "filename": "src/libcore/alloc.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7f0d54d98842c786ab7a140c17c3ea32aea6aead/src%2Flibcore%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f0d54d98842c786ab7a140c17c3ea32aea6aead/src%2Flibcore%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Falloc.rs?ref=7f0d54d98842c786ab7a140c17c3ea32aea6aead", "patch": "@@ -494,6 +494,8 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn alloc(&self, layout: Layout) -> *mut u8;\n \n@@ -529,6 +531,8 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn alloc_zeroed(&self, layout: Layout) -> *mut u8 {\n         let size = layout.size();\n@@ -587,6 +591,8 @@ pub unsafe trait GlobalAlloc {\n     /// Clients wishing to abort computation in response to a\n     /// reallocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     #[stable(feature = \"global_alloc\", since = \"1.28.0\")]\n     unsafe fn realloc(&self, ptr: *mut u8, layout: Layout, new_size: usize) -> *mut u8 {\n         let new_layout = Layout::from_size_align_unchecked(new_size, layout.align());\n@@ -727,8 +733,10 @@ pub unsafe trait Alloc {\n     /// library that aborts on memory exhaustion.)\n     ///\n     /// Clients wishing to abort computation in response to an\n-    /// allocation error are encouraged to call the `oom` function,\n+    /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn alloc(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr>;\n \n     /// Deallocate the memory referenced by `ptr`.\n@@ -837,6 +845,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to a\n     /// reallocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn realloc(&mut self,\n                       ptr: NonNull<u8>,\n                       layout: Layout,\n@@ -881,6 +891,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn alloc_zeroed(&mut self, layout: Layout) -> Result<NonNull<u8>, AllocErr> {\n         let size = layout.size();\n         let p = self.alloc(layout);\n@@ -907,6 +919,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn alloc_excess(&mut self, layout: Layout) -> Result<Excess, AllocErr> {\n         let usable_size = self.usable_size(&layout);\n         self.alloc(layout).map(|p| Excess(p, usable_size.1))\n@@ -929,6 +943,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to a\n     /// reallocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn realloc_excess(&mut self,\n                              ptr: NonNull<u8>,\n                              layout: Layout,\n@@ -1076,6 +1092,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     fn alloc_one<T>(&mut self) -> Result<NonNull<T>, AllocErr>\n         where Self: Sized\n     {\n@@ -1143,6 +1161,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to an\n     /// allocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     fn alloc_array<T>(&mut self, n: usize) -> Result<NonNull<T>, AllocErr>\n         where Self: Sized\n     {\n@@ -1188,6 +1208,8 @@ pub unsafe trait Alloc {\n     /// Clients wishing to abort computation in response to a\n     /// reallocation error are encouraged to call the [`oom`] function,\n     /// rather than directly invoking `panic!` or similar.\n+    ///\n+    /// [`oom`]: ../../alloc/alloc/fn.oom.html\n     unsafe fn realloc_array<T>(&mut self,\n                                ptr: NonNull<T>,\n                                n_old: usize,"}]}