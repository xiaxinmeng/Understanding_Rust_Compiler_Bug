{"sha": "6399d16cfde37b06f6b82cdafa623e36385d7252", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzOTlkMTZjZmRlMzdiMDZmNmI4MmNkYWZhNjIzZTM2Mzg1ZDcyNTI=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-02T22:05:54Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-15T08:58:03Z"}, "message": "Disallow &a..=b and box a..=b in pattern.\n\nThey are disallowed because they have different precedence than\nexpressions. I assume parenthesis in pattern will be soon stabilized and\nthus write that as suggestion directly.", "tree": {"sha": "084c6934333110a4d2d197ac77a0851a68fed3c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/084c6934333110a4d2d197ac77a0851a68fed3c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6399d16cfde37b06f6b82cdafa623e36385d7252", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlqqNZsACgkQ/vbIBR0O\nATxrQw//XVOGHvi0Liebrwv86/yYP1RdsyDdEE3+tqzwng5sZdrc45y7ZgFfiP5Q\nfGcsdqUWaKSkN4if7jbQL1UHxeKWpMyNGATFGyAHr0de3v9l2Ir3GyLVFfEMhcDg\nf6ifZQpjwhXSyHYUuy9a1tHEqZHgbocxoqz615yCwVSGmRmG9mYCwhbcSMSsbSHl\nQe09FjlwNjDBF/GDYCk2K5dBHTW6CzmTC1BX7wZFbF5kV8lcTLgs+HDF2nuNz1pW\nAlFyKxoYoP+ynIS9oNTaDhTNpMMMi9BB91Jre2RhKKg1U56LZgmqNa70/F9STb5Y\nKg2Vr7uG910b8dyKj18L8WY5LJHfBavTt4VZtQVvzZC0ZKXvl9yXB7H8y0YSIQsy\nlz7/Cke7DGD5fUpJpcMGomOHlhcUDrOSWC30xJVMYeni1AmGtxF/ElybzORRvzoe\ntTloy5h80F7PjTY49Mixdy4oZiVH1bXojswCRxC2c4APXdzf8poxQFYik2aSfQTy\nom10vIhBfKb2cGfe8/Ujv7ZcvXVbzgYrkWTR9X4GF6CnHfNhkNMhv8+oL26JBaVH\nl5UWn9V30PBbntOFNoo/3CZWuEyOz0S1q0zRP1kK5VZEy3YpZqVhHmQs5bjLC3oa\nypuaC5LPAgaY2HZngzUdqpwbtKPVbucAgRFEBqZV+0Lf09LMU7o=\n=B4Oi\n-----END PGP SIGNATURE-----", "payload": "tree 084c6934333110a4d2d197ac77a0851a68fed3c1\nparent a4d80336c96d7f47b0ef025fa141a9c96abcafbd\nauthor kennytm <kennytm@gmail.com> 1520028354 +0800\ncommitter kennytm <kennytm@gmail.com> 1521104283 +0800\n\nDisallow &a..=b and box a..=b in pattern.\n\nThey are disallowed because they have different precedence than\nexpressions. I assume parenthesis in pattern will be soon stabilized and\nthus write that as suggestion directly.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6399d16cfde37b06f6b82cdafa623e36385d7252", "html_url": "https://github.com/rust-lang/rust/commit/6399d16cfde37b06f6b82cdafa623e36385d7252", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6399d16cfde37b06f6b82cdafa623e36385d7252/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4d80336c96d7f47b0ef025fa141a9c96abcafbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4d80336c96d7f47b0ef025fa141a9c96abcafbd", "html_url": "https://github.com/rust-lang/rust/commit/a4d80336c96d7f47b0ef025fa141a9c96abcafbd"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "9e755f366a7de39bb8b1cc0d794f1266477e81a3", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=6399d16cfde37b06f6b82cdafa623e36385d7252", "patch": "@@ -1810,15 +1810,35 @@ impl<'a> State<'a> {\n                 self.pclose()?;\n             }\n             PatKind::Box(ref inner) => {\n+                let is_range_inner = match inner.node {\n+                    PatKind::Range(..) => true,\n+                    _ => false,\n+                };\n                 self.s.word(\"box \")?;\n+                if is_range_inner {\n+                    self.popen()?;\n+                }\n                 self.print_pat(&inner)?;\n+                if is_range_inner {\n+                    self.pclose()?;\n+                }\n             }\n             PatKind::Ref(ref inner, mutbl) => {\n+                let is_range_inner = match inner.node {\n+                    PatKind::Range(..) => true,\n+                    _ => false,\n+                };\n                 self.s.word(\"&\")?;\n                 if mutbl == hir::MutMutable {\n                     self.s.word(\"mut \")?;\n                 }\n+                if is_range_inner {\n+                    self.popen()?;\n+                }\n                 self.print_pat(&inner)?;\n+                if is_range_inner {\n+                    self.pclose()?;\n+                }\n             }\n             PatKind::Lit(ref e) => self.print_expr(&e)?,\n             PatKind::Range(ref begin, ref end, ref end_kind) => {"}, {"sha": "e3812ce159a9adca64f5db639a57255807508ddc", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=6399d16cfde37b06f6b82cdafa623e36385d7252", "patch": "@@ -3804,6 +3804,12 @@ impl<'a> Parser<'a> {\n \n     /// Parse a pattern.\n     pub fn parse_pat(&mut self) -> PResult<'a, P<Pat>> {\n+        self.parse_pat_with_range_pat(true)\n+    }\n+\n+    /// Parse a pattern, with a setting whether modern range patterns e.g. `a..=b`, `a..b` are\n+    /// allowed.\n+    fn parse_pat_with_range_pat(&mut self, allow_range_pat: bool) -> PResult<'a, P<Pat>> {\n         maybe_whole!(self, NtPat, |x| x);\n \n         let lo = self.span;\n@@ -3824,7 +3830,7 @@ impl<'a> Parser<'a> {\n                     err.span_label(self.span, \"unexpected lifetime\");\n                     return Err(err);\n                 }\n-                let subpat = self.parse_pat()?;\n+                let subpat = self.parse_pat_with_range_pat(false)?;\n                 pat = PatKind::Ref(subpat, mutbl);\n             }\n             token::OpenDelim(token::Paren) => {\n@@ -3863,7 +3869,7 @@ impl<'a> Parser<'a> {\n                 pat = self.parse_pat_ident(BindingMode::ByRef(mutbl))?;\n             } else if self.eat_keyword(keywords::Box) {\n                 // Parse box pat\n-                let subpat = self.parse_pat()?;\n+                let subpat = self.parse_pat_with_range_pat(false)?;\n                 pat = PatKind::Box(subpat);\n             } else if self.token.is_ident() && !self.token.is_reserved_ident() &&\n                       self.parse_as_ident() {\n@@ -3968,6 +3974,25 @@ impl<'a> Parser<'a> {\n         let pat = Pat { node: pat, span: lo.to(self.prev_span), id: ast::DUMMY_NODE_ID };\n         let pat = self.maybe_recover_from_bad_qpath(pat, true)?;\n \n+        if !allow_range_pat {\n+            match pat.node {\n+                PatKind::Range(_, _, RangeEnd::Included(RangeSyntax::DotDotDot)) => {}\n+                PatKind::Range(..) => {\n+                    let mut err = self.struct_span_err(\n+                        pat.span,\n+                        \"the range pattern here has ambiguous interpretation\",\n+                    );\n+                    err.span_suggestion(\n+                        pat.span,\n+                        \"add parentheses to clarify the precedence\",\n+                        format!(\"({})\", pprust::pat_to_string(&pat)),\n+                    );\n+                    return Err(err);\n+                }\n+                _ => {}\n+            }\n+        }\n+\n         Ok(P(pat))\n     }\n "}, {"sha": "5e491d48bcf4694fcfa7be9f61e199a84ab1c241", "filename": "src/test/run-pass/range-inclusive-pattern-precedence.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Frange-inclusive-pattern-precedence.rs?ref=6399d16cfde37b06f6b82cdafa623e36385d7252", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_patterns, pattern_parentheses)]\n+\n+const VALUE: usize = 21;\n+\n+pub fn main() {\n+    match &18 {\n+        &(18..=18) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match &21 {\n+        &(VALUE..=VALUE) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match Box::new(18) {\n+        box (18..=18) => {}\n+        _ => { unreachable!(); }\n+    }\n+    match Box::new(21) {\n+        box (VALUE..=VALUE) => {}\n+        _ => { unreachable!(); }\n+    }\n+}"}, {"sha": "67a0f79ca6b82eb851d5cb399245c406571ed615", "filename": "src/test/ui/range-inclusive-pattern-precedence.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.rs?ref=6399d16cfde37b06f6b82cdafa623e36385d7252", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// In expression, `&a..=b` is treated as `(&a)..=(b)` and `box a..=b` is\n+// `(box a)..=(b)`. In a pattern, however, `&a..=b` means `&(a..=b)`. This may\n+// lead to confusion.\n+//\n+// We are going to disallow `&a..=b` and `box a..=b` in a pattern. However, the\n+// older ... syntax is still allowed as a stability guarantee.\n+\n+#![feature(box_patterns)]\n+\n+pub fn main() {\n+    match &12 {\n+        &0...9 => {}\n+        &10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        &(16..=20) => {}\n+        _ => {}\n+    }\n+\n+    match Box::new(12) {\n+        box 0...9 => {}\n+        box 10..=15 => {}\n+        //~^ ERROR the range pattern here has ambiguous interpretation\n+        //~^^ HELP add parentheses to clarify the precedence\n+        box (16..=20) => {}\n+        _ => {}\n+    }\n+}"}, {"sha": "99e0d739036b09fea50146b29bd2222ee4de1c00", "filename": "src/test/ui/range-inclusive-pattern-precedence.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6399d16cfde37b06f6b82cdafa623e36385d7252/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frange-inclusive-pattern-precedence.stderr?ref=6399d16cfde37b06f6b82cdafa623e36385d7252", "patch": "@@ -0,0 +1,14 @@\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence.rs:23:10\n+   |\n+LL |         &10..=15 => {}\n+   |          ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+error: the range pattern here has ambiguous interpretation\n+  --> $DIR/range-inclusive-pattern-precedence.rs:32:13\n+   |\n+LL |         box 10..=15 => {}\n+   |             ^^^^^^^ help: add parentheses to clarify the precedence: `(10 ..=15)`\n+\n+error: aborting due to 2 previous errors\n+"}]}