{"sha": "e3940003a20b6df3e2def1a5e38b20d35e8a1db8", "node_id": "C_kwDOAAsO6NoAKGUzOTQwMDAzYTIwYjZkZjNlMmRlZjFhNWUzOGIyMGQzNWU4YTFkYjg", "commit": {"author": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-01T20:44:10Z"}, "committer": {"name": "Dorian Scheidt", "email": "dorian.scheidt@gmail.com", "date": "2022-07-02T20:00:02Z"}, "message": "fix: Extract function from trait impl\n\nThis change fixes #10036, \"Extract to function assist implements nonexistent\ntrait methods\".\n\nWhen we detect that the extraction is coming from within a trait impl, and that\na `self` param will be necessary, we adjust which `SyntaxNode` to `insert_after`,\nand create a new empty `impl` block for the newly extracted function.", "tree": {"sha": "5fecb5f9be111e386c7162a9a846e8d9816ea17b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fecb5f9be111e386c7162a9a846e8d9816ea17b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3940003a20b6df3e2def1a5e38b20d35e8a1db8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3940003a20b6df3e2def1a5e38b20d35e8a1db8", "html_url": "https://github.com/rust-lang/rust/commit/e3940003a20b6df3e2def1a5e38b20d35e8a1db8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3940003a20b6df3e2def1a5e38b20d35e8a1db8/comments", "author": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DorianListens", "id": 5692947, "node_id": "MDQ6VXNlcjU2OTI5NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/5692947?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DorianListens", "html_url": "https://github.com/DorianListens", "followers_url": "https://api.github.com/users/DorianListens/followers", "following_url": "https://api.github.com/users/DorianListens/following{/other_user}", "gists_url": "https://api.github.com/users/DorianListens/gists{/gist_id}", "starred_url": "https://api.github.com/users/DorianListens/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DorianListens/subscriptions", "organizations_url": "https://api.github.com/users/DorianListens/orgs", "repos_url": "https://api.github.com/users/DorianListens/repos", "events_url": "https://api.github.com/users/DorianListens/events{/privacy}", "received_events_url": "https://api.github.com/users/DorianListens/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1", "html_url": "https://github.com/rust-lang/rust/commit/cc0bb71e258fa1a180435e265ece1fcc3ffb59f1"}], "stats": {"total": 85, "additions": 75, "deletions": 10}, "files": [{"sha": "c9f01ba64a5501797004bea2d92df2e56b41ba2a", "filename": "crates/ide-assists/src/handlers/extract_function.rs", "status": "modified", "additions": 75, "deletions": 10, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e3940003a20b6df3e2def1a5e38b20d35e8a1db8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3940003a20b6df3e2def1a5e38b20d35e8a1db8/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-assists%2Fsrc%2Fhandlers%2Fextract_function.rs?ref=e3940003a20b6df3e2def1a5e38b20d35e8a1db8", "patch": "@@ -2,7 +2,7 @@ use std::iter;\n \n use ast::make;\n use either::Either;\n-use hir::{HirDisplay, InFile, Local, ModuleDef, Semantics, TypeInfo};\n+use hir::{HasSource, HirDisplay, InFile, Local, ModuleDef, Semantics, TypeInfo};\n use ide_db::{\n     defs::{Definition, NameRefClass},\n     famous_defs::FamousDefs,\n@@ -27,6 +27,7 @@ use syntax::{\n \n use crate::{\n     assist_context::{AssistContext, Assists, TreeMutator},\n+    utils::generate_impl_text,\n     AssistId,\n };\n \n@@ -106,6 +107,8 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n             let params =\n                 body.extracted_function_params(ctx, &container_info, locals_used.iter().copied());\n \n+            let extracted_from_trait_impl = body.extracted_from_trait_impl();\n+\n             let name = make_function_name(&semantics_scope);\n \n             let fun = Function {\n@@ -124,8 +127,13 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n \n             builder.replace(target_range, make_call(ctx, &fun, old_indent));\n \n-            let fn_def = format_function(ctx, module, &fun, old_indent, new_indent);\n-            let insert_offset = insert_after.text_range().end();\n+            let fn_def = match fun.self_param_adt(ctx) {\n+                Some(adt) if extracted_from_trait_impl => {\n+                    let fn_def = format_function(ctx, module, &fun, old_indent, new_indent + 1);\n+                    generate_impl_text(&adt, &fn_def).replace(\"{\\n\\n\", \"{\")\n+                }\n+                _ => format_function(ctx, module, &fun, old_indent, new_indent),\n+            };\n \n             if fn_def.contains(\"ControlFlow\") {\n                 let scope = match scope {\n@@ -150,6 +158,8 @@ pub(crate) fn extract_function(acc: &mut Assists, ctx: &AssistContext) -> Option\n                 }\n             }\n \n+            let insert_offset = insert_after.text_range().end();\n+\n             match ctx.config.snippet_cap {\n                 Some(cap) => builder.insert_snippet(cap, insert_offset, fn_def),\n                 None => builder.insert(insert_offset, fn_def),\n@@ -381,6 +391,14 @@ impl Function {\n             },\n         }\n     }\n+\n+    fn self_param_adt(&self, ctx: &AssistContext) -> Option<ast::Adt> {\n+        let self_param = self.self_param.as_ref()?;\n+        let def = ctx.sema.to_def(self_param)?;\n+        let adt = def.ty(ctx.db()).strip_references().as_adt()?;\n+        let InFile { file_id: _, value } = adt.source(ctx.db())?;\n+        Some(value)\n+    }\n }\n \n impl ParamKind {\n@@ -485,6 +503,20 @@ impl FunctionBody {\n         }\n     }\n \n+    fn node(&self) -> &SyntaxNode {\n+        match self {\n+            FunctionBody::Expr(e) => e.syntax(),\n+            FunctionBody::Span { parent, .. } => parent.syntax(),\n+        }\n+    }\n+\n+    fn extracted_from_trait_impl(&self) -> bool {\n+        match self.node().ancestors().find_map(ast::Impl::cast) {\n+            Some(c) => return c.trait_().is_some(),\n+            None => false,\n+        }\n+    }\n+\n     fn from_expr(expr: ast::Expr) -> Option<Self> {\n         match expr {\n             ast::Expr::BreakExpr(it) => it.expr().map(Self::Expr),\n@@ -1111,10 +1143,7 @@ fn either_syntax(value: &Either<ast::IdentPat, ast::SelfParam>) -> &SyntaxNode {\n ///\n /// Function should be put right after returned node\n fn node_to_insert_after(body: &FunctionBody, anchor: Anchor) -> Option<SyntaxNode> {\n-    let node = match body {\n-        FunctionBody::Expr(e) => e.syntax(),\n-        FunctionBody::Span { parent, .. } => parent.syntax(),\n-    };\n+    let node = body.node();\n     let mut ancestors = node.ancestors().peekable();\n     let mut last_ancestor = None;\n     while let Some(next_ancestor) = ancestors.next() {\n@@ -1126,9 +1155,8 @@ fn node_to_insert_after(body: &FunctionBody, anchor: Anchor) -> Option<SyntaxNod\n                     break;\n                 }\n             }\n-            SyntaxKind::ASSOC_ITEM_LIST if !matches!(anchor, Anchor::Method) => {\n-                continue;\n-            }\n+            SyntaxKind::ASSOC_ITEM_LIST if !matches!(anchor, Anchor::Method) => continue,\n+            SyntaxKind::ASSOC_ITEM_LIST if body.extracted_from_trait_impl() => continue,\n             SyntaxKind::ASSOC_ITEM_LIST => {\n                 if ancestors.peek().map(SyntaxNode::kind) == Some(SyntaxKind::IMPL) {\n                     break;\n@@ -4777,6 +4805,43 @@ fn fun_name() {\n fn $0fun_name2() {\n     let x = 0;\n }\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn extract_method_from_trait_impl() {\n+        check_assist(\n+            extract_function,\n+            r#\"\n+struct Struct(i32);\n+trait Trait {\n+    fn bar(&self) -> i32;\n+}\n+\n+impl Trait for Struct {\n+    fn bar(&self) -> i32 {\n+        $0self.0 + 2$0\n+    }\n+}\n+\"#,\n+            r#\"\n+struct Struct(i32);\n+trait Trait {\n+    fn bar(&self) -> i32;\n+}\n+\n+impl Trait for Struct {\n+    fn bar(&self) -> i32 {\n+        self.fun_name()\n+    }\n+}\n+\n+impl Struct {\n+    fn $0fun_name(&self) -> i32 {\n+        self.0 + 2\n+    }\n+}\n \"#,\n         );\n     }"}]}