{"sha": "b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI3OGNhNWY3ZTFlMDdkMWY2ZTY5ODBhMWFmMGQ3ZjQzMTU5NzgzNjI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-05-30T13:27:52Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-01T09:10:43Z"}, "message": "replace `panic!`s with `Result`", "tree": {"sha": "1e8dc92fc47792d133f32de8c68ee810e31bf1a2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1e8dc92fc47792d133f32de8c68ee810e31bf1a2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXTqaTAAoJEFbW7qD8Z6xGuI0QAJ9+E+GJw3ZuuHZQ5eOGc0Yu\nAJSEzNOnVEpGSitFkdTQJTJqmKI6JbMGHkp2vrQ5UCA/LuNQPwlKVwd3KEoVqOWo\nb+L02iO9MgGLtTdudrgeOi2E1SmWgaVz2etvdQbJEvI5RtAj65R+V+44+B69R+BY\nT4ajmHQTO4dLlqaKds1r3dWqDWi/qVwZA/yXLTwrejcVxOlaHRNZ9fvXwa7gNOPT\n0+F57UmR4rLV78zONJ9CBc8J174xGPEVuRe6H0rTvceI6TQJNIJgFmV6h5dgOkFU\nqvYWMSwK4MdF+i9HaayrhKpsv2R0R3Sma3HVqyOUwVE0xdI4nN0HSCSNlHogTAI4\nOq8X0PLWNdsLRQIPm/h2yxMrIYWTg/e5KCJbk+RvqmAC/EINUSNuVCz94vDUXG6J\n1TQh26r5x+oK/m/3Ex/VTR6Ohv5VEsMuwzDhBqzFoxvjpCYNXrqpTTPvheNwNIIO\nrlpAtC+RcZe8uQl82MAeH9N/H1xDVCpJk1QwISbAfU0ZZlFE2FWeMvSXbQTXyEAy\nRf/4EFj3e5+ZAavsgjKhuQCnzA4I5IrVgu7Fd+IlCL7J4O6AHx+yJ+KXN2zDPP1m\nOyX5sr+sYTpQ/iW5GCyW9xYleiuA2id23c0YIsWxeqKRwYYZzFmvsP6I+MhQZZLQ\nXGme0lbsvJH799xc7YqH\n=K/3s\n-----END PGP SIGNATURE-----", "payload": "tree 1e8dc92fc47792d133f32de8c68ee810e31bf1a2\nparent 55ce704ae75f0005b0bc7821e7e23fe07db0b5ab\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464614872 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1464772243 +0200\n\nreplace `panic!`s with `Result`"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "html_url": "https://github.com/rust-lang/rust/commit/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "55ce704ae75f0005b0bc7821e7e23fe07db0b5ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/55ce704ae75f0005b0bc7821e7e23fe07db0b5ab", "html_url": "https://github.com/rust-lang/rust/commit/55ce704ae75f0005b0bc7821e7e23fe07db0b5ab"}], "stats": {"total": 100, "additions": 52, "deletions": 48}, "files": [{"sha": "ec75ab44526953d5fec00e4b7646e849d3ac40fb", "filename": "src/error.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ferror.rs?ref=b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "patch": "@@ -1,5 +1,6 @@\n use std::error::Error;\n use std::fmt;\n+use rustc::mir::repr as mir;\n \n #[derive(Clone, Debug)]\n pub enum EvalError {\n@@ -11,6 +12,8 @@ pub enum EvalError {\n     ReadBytesAsPointer,\n     InvalidPointerMath,\n     ReadUndefBytes,\n+    InvalidBoolOp(mir::BinOp),\n+    Unimplemented(String),\n }\n \n pub type EvalResult<T> = Result<T, EvalError>;\n@@ -34,6 +37,9 @@ impl Error for EvalError {\n                 \"attempted to do math or a comparison on pointers into different allocations\",\n             EvalError::ReadUndefBytes =>\n                 \"attempted to read undefined bytes\",\n+            EvalError::InvalidBoolOp(_) =>\n+                \"invalid boolean operation\",\n+            EvalError::Unimplemented(ref msg) => msg,\n         }\n     }\n "}, {"sha": "8734427f07f579246823b20de9a4fba18dcc41d5", "filename": "src/interpreter.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "patch": "@@ -392,11 +392,11 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                                 TerminatorTarget::Call\n                             }\n \n-                            abi => panic!(\"can't handle function with {:?} ABI\", abi),\n+                            abi => return Err(EvalError::Unimplemented(format!(\"can't handle function with {:?} ABI\", abi))),\n                         }\n                     }\n \n-                    _ => panic!(\"can't handle callee of type {:?}\", func_ty),\n+                    _ => return Err(EvalError::Unimplemented(format!(\"can't handle callee of type {:?}\", func_ty))),\n                 }\n             }\n \n@@ -470,7 +470,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             }\n \n             StructWrappedNullablePointer { nndiscr, ref discrfield, .. } => {\n-                let offset = self.nonnull_offset(adt_ty, nndiscr, discrfield);\n+                let offset = self.nonnull_offset(adt_ty, nndiscr, discrfield)?;\n                 let nonnull = adt_ptr.offset(offset.bytes() as isize);\n                 self.read_nonnull_discriminant_value(nonnull, nndiscr)?\n             }\n@@ -620,7 +620,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                             self.memory.write_uint(dest, n * elem_size, dest_size)?;\n                         }\n \n-                        _ => panic!(\"unimplemented: size_of_val::<{:?}>\", ty),\n+                        _ => return Err(EvalError::Unimplemented(format!(\"unimplemented: size_of_val::<{:?}>\", ty))),\n                     }\n                 }\n             }\n@@ -631,7 +631,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n             }\n             \"uninit\" => self.memory.mark_definedness(dest, dest_size, false)?,\n \n-            name => panic!(\"can't handle intrinsic: {}\", name),\n+            name => return Err(EvalError::Unimplemented(format!(\"unimplemented intrinsic: {}\", name))),\n         }\n \n         // Since we pushed no stack frame, the main loop will act\n@@ -693,7 +693,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 self.memory.write_int(dest, result, dest_size)?;\n             }\n \n-            _ => panic!(\"can't call C ABI function: {}\", link_name),\n+            _ => return Err(EvalError::Unimplemented(format!(\"can't call C ABI function: {}\", link_name))),\n         }\n \n         // Since we pushed no stack frame, the main loop will act\n@@ -748,7 +748,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                 let ptr = self.eval_operand(operand)?;\n                 let ty = self.operand_ty(operand);\n                 let val = self.read_primval(ptr, ty)?;\n-                self.memory.write_primval(dest, primval::unary_op(un_op, val))?;\n+                self.memory.write_primval(dest, primval::unary_op(un_op, val)?)?;\n             }\n \n             Aggregate(ref kind, ref operands) => {\n@@ -809,7 +809,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                                 try!(self.assign_fields(dest, offsets, operands));\n                             } else {\n                                 assert_eq!(operands.len(), 0);\n-                                let offset = self.nonnull_offset(dest_ty, nndiscr, discrfield);\n+                                let offset = self.nonnull_offset(dest_ty, nndiscr, discrfield)?;\n                                 let dest = dest.offset(offset.bytes() as isize);\n                                 try!(self.memory.write_isize(dest, 0));\n                             }\n@@ -834,8 +834,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         }\n                     }\n \n-                    _ => panic!(\"can't handle destination layout {:?} when assigning {:?}\",\n-                                dest_layout, kind),\n+                    _ => return Err(EvalError::Unimplemented(format!(\"can't handle destination layout {:?} when assigning {:?}\", dest_layout, kind))),\n                 }\n             }\n \n@@ -904,7 +903,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                                 self.memory.write_usize(len_ptr, length as u64)?;\n                             }\n \n-                            _ => panic!(\"can't handle cast: {:?}\", rvalue),\n+                            _ => return Err(EvalError::Unimplemented(format!(\"can't handle cast: {:?}\", rvalue))),\n                         }\n                     }\n \n@@ -914,7 +913,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         self.memory.copy(src, dest, size)?;\n                     }\n \n-                    _ => panic!(\"can't handle cast: {:?}\", rvalue),\n+                    _ => return Err(EvalError::Unimplemented(format!(\"can't handle cast: {:?}\", rvalue))),\n                 }\n             }\n \n@@ -925,7 +924,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         Ok(())\n     }\n \n-    fn nonnull_offset(&self, ty: Ty<'tcx>, nndiscr: u64, discrfield: &[u32]) -> Size {\n+    fn nonnull_offset(&self, ty: Ty<'tcx>, nndiscr: u64, discrfield: &[u32]) -> EvalResult<Size> {\n         // Skip the constant 0 at the start meant for LLVM GEP.\n         let mut path = discrfield.iter().skip(1).map(|&i| i as usize);\n \n@@ -946,49 +945,49 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n         self.field_path_offset(inner_ty, path)\n     }\n \n-    fn field_path_offset<I: Iterator<Item = usize>>(&self, mut ty: Ty<'tcx>, path: I) -> Size {\n+    fn field_path_offset<I: Iterator<Item = usize>>(&self, mut ty: Ty<'tcx>, path: I) -> EvalResult<Size> {\n         let mut offset = Size::from_bytes(0);\n \n         // Skip the initial 0 intended for LLVM GEP.\n         for field_index in path {\n-            let field_offset = self.get_field_offset(ty, field_index);\n-            ty = self.get_field_ty(ty, field_index);\n+            let field_offset = self.get_field_offset(ty, field_index)?;\n+            ty = self.get_field_ty(ty, field_index)?;\n             offset = offset.checked_add(field_offset, &self.tcx.data_layout).unwrap();\n         }\n \n-        offset\n+        Ok(offset)\n     }\n \n-    fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> Ty<'tcx> {\n+    fn get_field_ty(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<Ty<'tcx>> {\n         match ty.sty {\n             ty::TyStruct(adt_def, substs) => {\n-                adt_def.struct_variant().fields[field_index].ty(self.tcx, substs)\n+                Ok(adt_def.struct_variant().fields[field_index].ty(self.tcx, substs))\n             }\n \n             ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n             ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |\n             ty::TyBox(ty) => {\n                 assert_eq!(field_index, 0);\n-                ty\n+                Ok(ty)\n             }\n-            _ => panic!(\"can't handle type: {:?}\", ty),\n+            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}\", ty))),\n         }\n     }\n \n-    fn get_field_offset(&self, ty: Ty<'tcx>, field_index: usize) -> Size {\n+    fn get_field_offset(&self, ty: Ty<'tcx>, field_index: usize) -> EvalResult<Size> {\n         let layout = self.type_layout(ty);\n \n         use rustc::ty::layout::Layout::*;\n         match *layout {\n             Univariant { .. } => {\n                 assert_eq!(field_index, 0);\n-                Size::from_bytes(0)\n+                Ok(Size::from_bytes(0))\n             }\n             FatPointer { .. } => {\n                 let bytes = layout::FAT_PTR_ADDR * self.memory.pointer_size;\n-                Size::from_bytes(bytes as u64)\n+                Ok(Size::from_bytes(bytes as u64))\n             }\n-            _ => panic!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout),\n+            _ => Err(EvalError::Unimplemented(format!(\"can't handle type: {:?}, with layout: {:?}\", ty, layout))),\n         }\n     }\n \n@@ -1223,7 +1222,7 @@ impl<'a, 'b, 'mir, 'tcx> FnEvalContext<'a, 'b, 'mir, 'tcx> {\n                         Err(e) => return Err(e),\n                     }\n                 } else {\n-                    panic!(\"unimplemented: primitive read of fat pointer type: {:?}\", ty);\n+                    return Err(EvalError::Unimplemented(format!(\"unimplemented: primitive read of fat pointer type: {:?}\", ty)));\n                 }\n             }\n "}, {"sha": "d69e07ae2a2b85dc5e5c599b1adae688857f9c40", "filename": "src/memory.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "patch": "@@ -80,7 +80,7 @@ impl Memory {\n     pub fn reallocate(&mut self, ptr: Pointer, new_size: usize) -> EvalResult<()> {\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n-            panic!()\n+            return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n \n         let alloc = self.get_mut(ptr.alloc_id)?;\n@@ -90,7 +90,7 @@ impl Memory {\n             alloc.bytes.extend(iter::repeat(0).take(amount));\n             alloc.undef_mask.grow(amount, false);\n         } else if size > new_size {\n-            unimplemented!()\n+            return Err(EvalError::Unimplemented(format!(\"unimplemented allocation relocation\")));\n             // alloc.bytes.truncate(new_size);\n             // alloc.undef_mask.len = new_size;\n             // TODO: potentially remove relocations\n@@ -103,7 +103,7 @@ impl Memory {\n     pub fn deallocate(&mut self, ptr: Pointer) -> EvalResult<()> {\n         if ptr.offset != 0 {\n             // TODO(solson): Report error about non-__rust_allocate'd pointer.\n-            panic!()\n+            return Err(EvalError::Unimplemented(format!(\"bad pointer offset: {}\", ptr.offset)));\n         }\n \n         if self.alloc_map.remove(&ptr.alloc_id).is_none() {"}, {"sha": "0b1658739d9d6a4832abc7cbdac68af8fc546b07", "filename": "src/primval.rs", "status": "modified", "additions": 18, "deletions": 19, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Fprimval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b78ca5f7e1e07d1f6e6980a1af0d7f4315978362/src%2Fprimval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fprimval.rs?ref=b78ca5f7e1e07d1f6e6980a1af0d7f4315978362", "patch": "@@ -74,8 +74,7 @@ pub fn binary_op(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> EvalResul\n                 BitOr => l | r,\n                 BitXor => l ^ r,\n                 BitAnd => l & r,\n-                Add | Sub | Mul | Div | Rem | Shl | Shr =>\n-                    panic!(\"invalid binary operation on booleans: {:?}\", bin_op),\n+                Add | Sub | Mul | Div | Rem | Shl | Shr => return Err(EvalError::InvalidBoolOp(bin_op)),\n             })\n         }\n \n@@ -99,33 +98,33 @@ pub fn binary_op(bin_op: mir::BinOp, left: PrimVal, right: PrimVal) -> EvalResul\n                 Le => Bool(l <= r),\n                 Gt => Bool(l > r),\n                 Ge => Bool(l >= r),\n-                _ => unimplemented!(),\n+                _ => return Err(EvalError::Unimplemented(format!(\"unimplemented ptr op: {:?}\", bin_op))),\n             }\n         }\n \n-        _ => unimplemented!(),\n+        (l, r) => return Err(EvalError::Unimplemented(format!(\"unimplemented binary op: {:?}, {:?}, {:?}\", l, r, bin_op))),\n     };\n \n     Ok(val)\n }\n \n-pub fn unary_op(un_op: mir::UnOp, val: PrimVal) -> PrimVal {\n+pub fn unary_op(un_op: mir::UnOp, val: PrimVal) -> EvalResult<PrimVal> {\n     use rustc::mir::repr::UnOp::*;\n     use self::PrimVal::*;\n     match (un_op, val) {\n-        (Not, Bool(b)) => Bool(!b),\n-        (Not, I8(n))  => I8(!n),\n-        (Neg, I8(n))  => I8(-n),\n-        (Not, I16(n)) => I16(!n),\n-        (Neg, I16(n)) => I16(-n),\n-        (Not, I32(n)) => I32(!n),\n-        (Neg, I32(n)) => I32(-n),\n-        (Not, I64(n)) => I64(!n),\n-        (Neg, I64(n)) => I64(-n),\n-        (Not, U8(n))  => U8(!n),\n-        (Not, U16(n)) => U16(!n),\n-        (Not, U32(n)) => U32(!n),\n-        (Not, U64(n)) => U64(!n),\n-        _ => unimplemented!(),\n+        (Not, Bool(b)) => Ok(Bool(!b)),\n+        (Not, I8(n))  => Ok(I8(!n)),\n+        (Neg, I8(n))  => Ok(I8(-n)),\n+        (Not, I16(n)) => Ok(I16(!n)),\n+        (Neg, I16(n)) => Ok(I16(-n)),\n+        (Not, I32(n)) => Ok(I32(!n)),\n+        (Neg, I32(n)) => Ok(I32(-n)),\n+        (Not, I64(n)) => Ok(I64(!n)),\n+        (Neg, I64(n)) => Ok(I64(-n)),\n+        (Not, U8(n))  => Ok(U8(!n)),\n+        (Not, U16(n)) => Ok(U16(!n)),\n+        (Not, U32(n)) => Ok(U32(!n)),\n+        (Not, U64(n)) => Ok(U64(!n)),\n+        _ => Err(EvalError::Unimplemented(format!(\"unimplemented unary op: {:?}, {:?}\", un_op, val))),\n     }\n }"}]}