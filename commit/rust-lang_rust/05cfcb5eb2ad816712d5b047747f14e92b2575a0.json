{"sha": "05cfcb5eb2ad816712d5b047747f14e92b2575a0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA1Y2ZjYjVlYjJhZDgxNjcxMmQ1YjA0Nzc0N2YxNGU5MmIyNTc1YTA=", "commit": {"author": {"name": "Mazdak Farrokhzad", "email": "twingoow@gmail.com", "date": "2019-02-13T17:12:39Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2019-02-13T17:12:39Z"}, "message": "Rollup merge of #58420 - dvdhrm:target-uefi-comments, r=nagisa\n\ntarget/uefi: clarify documentation\n\nThis clarifies why FP-units are disabled on UEFI targets, as well as\nwhy we must opt into the NXCOMPAT feature.\n\nI did find some time to investigate why GRUB and friends disable FP on\nUEFI. The specification explicitly allows using MMX/SSE/AVX, but as it\nturns out it does not mandate enabling the instruction sets explicitly.\nHence, any use of these instructions will trigger CPU exceptions,\nunless an application explicitly enables them (which is not an option,\nas these are global flags that better be controlled by the\nkernel/firmware).\n\nFurthermore, UEFI systems are allowed to mark any non-code page as\nnon-executable. Hence, we must make sure to never place code on the\nstack or heap. So we better pass /NXCOMPAT to the linker for it to\ncomplain if it ever places code in non-code pages.\n\nLastly, this fixes some typos in related comments.\n\nr? @alexcrichton", "tree": {"sha": "7c8656ec979db015bf10de0754069c549ecb8840", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c8656ec979db015bf10de0754069c549ecb8840"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/05cfcb5eb2ad816712d5b047747f14e92b2575a0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJcZFAHCRBK7hj4Ov3rIwAAdHIIAHu5qvI4XxWzZt8+L3RFBsf8\nFzo8AduuCzExZ20mMGAtEFVXq2TLlNfoKYye8g1aoA7pwGMli+o1WMHzzmpWtL4S\ngUPBRba82+tFTXgweKFCZX5Um4Z/E8Iw6Vlf4Ou/dNar3YBiSU0jx2FcaOFEJM/8\nM9sOeb/2bCElPYuyOQmDGElRttCloBznVhMzIv8syRCdTLxzxl27z6rvjqwuc1dc\nCG2lKZvhQJgFys7IvDxH3d3vcRqvHGclwGDhZjlT78zvwkS854fyku7uyIwSq8Z4\nk3LPO1FPlio89CDY0vxGcedEX12HmIuPj11XNTUimMyarV5s8Lg1mynkEddC72o=\n=mEwy\n-----END PGP SIGNATURE-----\n", "payload": "tree 7c8656ec979db015bf10de0754069c549ecb8840\nparent 0178f31869116e53f2cd2647d801fe0541efc691\nparent 15e4bd3bf460a4a943465534132a9d3eda5eb798\nauthor Mazdak Farrokhzad <twingoow@gmail.com> 1550077959 +0100\ncommitter GitHub <noreply@github.com> 1550077959 +0100\n\nRollup merge of #58420 - dvdhrm:target-uefi-comments, r=nagisa\n\ntarget/uefi: clarify documentation\n\nThis clarifies why FP-units are disabled on UEFI targets, as well as\nwhy we must opt into the NXCOMPAT feature.\n\nI did find some time to investigate why GRUB and friends disable FP on\nUEFI. The specification explicitly allows using MMX/SSE/AVX, but as it\nturns out it does not mandate enabling the instruction sets explicitly.\nHence, any use of these instructions will trigger CPU exceptions,\nunless an application explicitly enables them (which is not an option,\nas these are global flags that better be controlled by the\nkernel/firmware).\n\nFurthermore, UEFI systems are allowed to mark any non-code page as\nnon-executable. Hence, we must make sure to never place code on the\nstack or heap. So we better pass /NXCOMPAT to the linker for it to\ncomplain if it ever places code in non-code pages.\n\nLastly, this fixes some typos in related comments.\n\nr? @alexcrichton\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/05cfcb5eb2ad816712d5b047747f14e92b2575a0", "html_url": "https://github.com/rust-lang/rust/commit/05cfcb5eb2ad816712d5b047747f14e92b2575a0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/05cfcb5eb2ad816712d5b047747f14e92b2575a0/comments", "author": {"login": "Centril", "id": 855702, "node_id": "MDQ6VXNlcjg1NTcwMg==", "avatar_url": "https://avatars.githubusercontent.com/u/855702?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Centril", "html_url": "https://github.com/Centril", "followers_url": "https://api.github.com/users/Centril/followers", "following_url": "https://api.github.com/users/Centril/following{/other_user}", "gists_url": "https://api.github.com/users/Centril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Centril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Centril/subscriptions", "organizations_url": "https://api.github.com/users/Centril/orgs", "repos_url": "https://api.github.com/users/Centril/repos", "events_url": "https://api.github.com/users/Centril/events{/privacy}", "received_events_url": "https://api.github.com/users/Centril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0178f31869116e53f2cd2647d801fe0541efc691", "url": "https://api.github.com/repos/rust-lang/rust/commits/0178f31869116e53f2cd2647d801fe0541efc691", "html_url": "https://github.com/rust-lang/rust/commit/0178f31869116e53f2cd2647d801fe0541efc691"}, {"sha": "15e4bd3bf460a4a943465534132a9d3eda5eb798", "url": "https://api.github.com/repos/rust-lang/rust/commits/15e4bd3bf460a4a943465534132a9d3eda5eb798", "html_url": "https://github.com/rust-lang/rust/commit/15e4bd3bf460a4a943465534132a9d3eda5eb798"}], "stats": {"total": 29, "additions": 17, "deletions": 12}, "files": [{"sha": "631966c09a498b23684277add55609c33830dd27", "filename": "src/librustc_target/spec/uefi_base.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/05cfcb5eb2ad816712d5b047747f14e92b2575a0/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfcb5eb2ad816712d5b047747f14e92b2575a0/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fuefi_base.rs?ref=05cfcb5eb2ad816712d5b047747f14e92b2575a0", "patch": "@@ -5,7 +5,7 @@\n // UEFI uses COFF/PE32+ format for binaries. All binaries must be statically linked. No dynamic\n // linker is supported. As native to COFF, binaries are position-dependent, but will be relocated\n // by the loader if the pre-chosen memory location is already in use.\n-// UEFI forbids running code on anything but the boot-CPU. Not interrupts are allowed other than\n+// UEFI forbids running code on anything but the boot-CPU. No interrupts are allowed other than\n // the timer-interrupt. Device-drivers are required to use polling-based models. Furthermore, all\n // code runs in the same environment, no process separation is supported.\n \n@@ -21,7 +21,10 @@ pub fn opts() -> TargetOptions {\n             \"/NOLOGO\".to_string(),\n \n             // UEFI is fully compatible to non-executable data pages. Tell the compiler that\n-            // non-code sections can be marked as non-executable, including stack pages.\n+            // non-code sections can be marked as non-executable, including stack pages. In fact,\n+            // firmware might enforce this, so we better let the linker know about this, so it\n+            // will fail if the compiler ever tries placing code on the stack (e.g., trampoline\n+            // constructs and alike).\n             \"/NXCOMPAT\".to_string(),\n \n             // There is no runtime for UEFI targets, prevent them from being linked. UEFI targets"}, {"sha": "443479f55f04a2361bbca5520e1ea820842587b2", "filename": "src/librustc_target/spec/x86_64_unknown_uefi.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/05cfcb5eb2ad816712d5b047747f14e92b2575a0/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/05cfcb5eb2ad816712d5b047747f14e92b2575a0/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_target%2Fspec%2Fx86_64_unknown_uefi.rs?ref=05cfcb5eb2ad816712d5b047747f14e92b2575a0", "patch": "@@ -12,23 +12,25 @@ pub fn target() -> TargetResult {\n     base.cpu = \"x86-64\".to_string();\n     base.max_atomic_width = Some(64);\n \n-    // We disable MMX and SSE for now. UEFI does not prevent these from being used, but there have\n-    // been reports to GRUB that some firmware does not initialize the FP exception handlers\n-    // properly. Therefore, using FP coprocessors will end you up at random memory locations when\n-    // you throw FP exceptions.\n-    // To be safe, we disable them for now and force soft-float. This can be revisited when we\n-    // have more test coverage. Disabling FP served GRUB well so far, so it should be good for us\n-    // as well.\n+    // We disable MMX and SSE for now, even though UEFI allows using them. Problem is, you have to\n+    // enable these CPU features explicitly before their first use, otherwise their instructions\n+    // will trigger an exception. Rust does not inject any code that enables AVX/MMX/SSE\n+    // instruction sets, so this must be done by the firmware. However, existing firmware is known\n+    // to leave these uninitialized, thus triggering exceptions if we make use of them. Which is\n+    // why we avoid them and instead use soft-floats. This is also what GRUB and friends did so\n+    // far.\n+    // If you initialize FP units yourself, you can override these flags with custom linker\n+    // arguments, thus giving you access to full MMX/SSE acceleration.\n     base.features = \"-mmx,-sse,+soft-float\".to_string();\n \n     // UEFI systems run without a host OS, hence we cannot assume any code locality. We must tell\n     // LLVM to expect code to reference any address in the address-space. The \"large\" code-model\n     // places no locality-restrictions, so it fits well here.\n     base.code_model = Some(\"large\".to_string());\n \n-    // UEFI mostly mirrors the calling-conventions used on windows. In case of x86-64 this means\n-    // small structs will be returned as int. This shouldn't matter much, since the restrictions\n-    // placed by the UEFI specifications forbid any ABI to return structures.\n+    // UEFI mirrors the calling-conventions used on windows. In case of x86-64 this means small\n+    // structs will be returned as int. This shouldn't matter much, since the restrictions placed\n+    // by the UEFI specifications forbid any ABI to return structures.\n     base.abi_return_struct_as_int = true;\n \n     Ok(Target {"}]}