{"sha": "6f2d3dee1790f8066394d1198fd1864b5fae45a3", "node_id": "C_kwDOAAsO6NoAKDZmMmQzZGVlMTc5MGY4MDY2Mzk0ZDExOThmZDE4NjRiNWZhZTQ1YTM", "commit": {"author": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-05-08T21:26:17Z"}, "committer": {"name": "Andrew Xie", "email": "ndrew.xie@gmail.com", "date": "2023-06-05T01:55:32Z"}, "message": "Fixed unord mistake", "tree": {"sha": "633b4171f38ce68f1bdfe6d6a9eee37931492f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/633b4171f38ce68f1bdfe6d6a9eee37931492f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f2d3dee1790f8066394d1198fd1864b5fae45a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d3dee1790f8066394d1198fd1864b5fae45a3", "html_url": "https://github.com/rust-lang/rust/commit/6f2d3dee1790f8066394d1198fd1864b5fae45a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f2d3dee1790f8066394d1198fd1864b5fae45a3/comments", "author": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ndrewxie", "id": 32971598, "node_id": "MDQ6VXNlcjMyOTcxNTk4", "avatar_url": "https://avatars.githubusercontent.com/u/32971598?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ndrewxie", "html_url": "https://github.com/ndrewxie", "followers_url": "https://api.github.com/users/ndrewxie/followers", "following_url": "https://api.github.com/users/ndrewxie/following{/other_user}", "gists_url": "https://api.github.com/users/ndrewxie/gists{/gist_id}", "starred_url": "https://api.github.com/users/ndrewxie/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ndrewxie/subscriptions", "organizations_url": "https://api.github.com/users/ndrewxie/orgs", "repos_url": "https://api.github.com/users/ndrewxie/repos", "events_url": "https://api.github.com/users/ndrewxie/events{/privacy}", "received_events_url": "https://api.github.com/users/ndrewxie/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "96b577860d4e175ccc4698b9e9a8a822b228fc19", "url": "https://api.github.com/repos/rust-lang/rust/commits/96b577860d4e175ccc4698b9e9a8a822b228fc19", "html_url": "https://github.com/rust-lang/rust/commit/96b577860d4e175ccc4698b9e9a8a822b228fc19"}], "stats": {"total": 49, "additions": 23, "deletions": 26}, "files": [{"sha": "6c8d541463158398178f6a9cc927c537c8cd2431", "filename": "compiler/rustc_data_structures/src/unord.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Funord.rs?ref=6f2d3dee1790f8066394d1198fd1864b5fae45a3", "patch": "@@ -62,11 +62,6 @@ impl<T, I: Iterator<Item = T>> UnordItems<T, I> {\n         UnordItems(self.0.filter_map(f))\n     }\n \n-    #[inline]\n-    pub fn for_each<F: Fn(T) -> ()>(self, f: F) {\n-        self.0.for_each(|x| f(x));\n-    }\n-\n     #[inline]\n     pub fn max(self) -> Option<T>\n     where"}, {"sha": "6381a05dfdc1c95ee54a99551f9a27527bb2591b", "filename": "compiler/rustc_incremental/src/persist/dirty_clean.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fdirty_clean.rs?ref=6f2d3dee1790f8066394d1198fd1864b5fae45a3", "patch": "@@ -377,15 +377,15 @@ impl<'tcx> DirtyCleanVisitor<'tcx> {\n                 continue;\n             };\n             self.checked_attrs.insert(attr.id);\n-            assertion.clean.items().for_each(|label| {\n+            assertion.clean.to_sorted(&(), false).iter().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_clean(item_span, dep_node);\n             });\n-            assertion.dirty.items().for_each(|label| {\n+            assertion.dirty.to_sorted(&(), false).iter().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_dirty(item_span, dep_node);\n             });\n-            assertion.loaded_from_disk.items().for_each(|label| {\n+            assertion.loaded_from_disk.to_sorted(&(), false).iter().for_each(|label| {\n                 let dep_node = DepNode::from_label_string(self.tcx, &label, def_path_hash).unwrap();\n                 self.assert_loaded_from_disk(item_span, dep_node);\n             });"}, {"sha": "f0e5f07230f7e830cb0db881a97f31b148ada32a", "filename": "compiler/rustc_incremental/src/persist/fs.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Ffs.rs?ref=6f2d3dee1790f8066394d1198fd1864b5fae45a3", "patch": "@@ -674,9 +674,10 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n \n     // Delete all lock files, that don't have an associated directory. They must\n     // be some kind of leftover\n-    lock_file_to_session_dir.items().for_each(|(lock_file_name, directory_name)| {\n-        if directory_name.is_none() {\n-            let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n+    lock_file_to_session_dir.to_sorted(&(), false).iter().for_each(\n+        |(lock_file_name, directory_name)| {\n+            if directory_name.is_none() {\n+                let Ok(timestamp) = extract_timestamp_from_session_dir(lock_file_name) else {\n                 debug!(\n                     \"found lock-file with malformed timestamp: {}\",\n                     crate_directory.join(&lock_file_name).display()\n@@ -685,24 +686,25 @@ pub fn garbage_collect_session_directories(sess: &Session) -> io::Result<()> {\n                 return;\n             };\n \n-            let lock_file_path = crate_directory.join(&**lock_file_name);\n+                let lock_file_path = crate_directory.join(&**lock_file_name);\n \n-            if is_old_enough_to_be_collected(timestamp) {\n-                debug!(\n-                    \"garbage_collect_session_directories() - deleting \\\n+                if is_old_enough_to_be_collected(timestamp) {\n+                    debug!(\n+                        \"garbage_collect_session_directories() - deleting \\\n                         garbage lock file: {}\",\n-                    lock_file_path.display()\n-                );\n-                delete_session_dir_lock_file(sess, &lock_file_path);\n-            } else {\n-                debug!(\n-                    \"garbage_collect_session_directories() - lock file with \\\n+                        lock_file_path.display()\n+                    );\n+                    delete_session_dir_lock_file(sess, &lock_file_path);\n+                } else {\n+                    debug!(\n+                        \"garbage_collect_session_directories() - lock file with \\\n                         no session dir not old enough to be collected: {}\",\n-                    lock_file_path.display()\n-                );\n+                        lock_file_path.display()\n+                    );\n+                }\n             }\n-        }\n-    });\n+        },\n+    );\n \n     // Filter out `None` directories\n     let lock_file_to_session_dir: UnordMap<String, String> ="}, {"sha": "b0d173ab30469dbb47cbbe1451bf618a26206227", "filename": "compiler/rustc_incremental/src/persist/work_product.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f2d3dee1790f8066394d1198fd1864b5fae45a3/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_incremental%2Fsrc%2Fpersist%2Fwork_product.rs?ref=6f2d3dee1790f8066394d1198fd1864b5fae45a3", "patch": "@@ -46,7 +46,7 @@ pub fn copy_cgu_workproduct_to_incr_comp_cache_dir(\n \n /// Removes files for a given work product.\n pub fn delete_workproduct_files(sess: &Session, work_product: &WorkProduct) {\n-    work_product.saved_files.items().for_each(|(_, path)| {\n+    work_product.saved_files.to_sorted(&(), false).iter().for_each(|(_, path)| {\n         let path = in_incr_comp_dir_sess(sess, path);\n         if let Err(err) = std_fs::remove_file(&path) {\n             sess.emit_warning(errors::DeleteWorkProduct { path: &path, err });"}]}