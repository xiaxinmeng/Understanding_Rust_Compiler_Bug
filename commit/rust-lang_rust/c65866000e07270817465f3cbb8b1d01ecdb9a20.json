{"sha": "c65866000e07270817465f3cbb8b1d01ecdb9a20", "node_id": "C_kwDOAAsO6NoAKGM2NTg2NjAwMGUwNzI3MDgxNzQ2NWYzY2JiOGIxZDAxZWNkYjlhMjA", "commit": {"author": {"name": "mejrs", "email": "", "date": "2022-09-19T15:19:45Z"}, "committer": {"name": "mejrs", "email": "", "date": "2022-09-19T15:19:45Z"}, "message": "Incorporate feedback", "tree": {"sha": "abd6fea34b11e0962347e14af9a5d1d163e0bd64", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/abd6fea34b11e0962347e14af9a5d1d163e0bd64"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c65866000e07270817465f3cbb8b1d01ecdb9a20", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c65866000e07270817465f3cbb8b1d01ecdb9a20", "html_url": "https://github.com/rust-lang/rust/commit/c65866000e07270817465f3cbb8b1d01ecdb9a20", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c65866000e07270817465f3cbb8b1d01ecdb9a20/comments", "author": {}, "committer": {}, "parents": [{"sha": "14e98930239e0a419d9662cde6e4a3aac6564f5a", "url": "https://api.github.com/repos/rust-lang/rust/commits/14e98930239e0a419d9662cde6e4a3aac6564f5a", "html_url": "https://github.com/rust-lang/rust/commit/14e98930239e0a419d9662cde6e4a3aac6564f5a"}], "stats": {"total": 164, "additions": 75, "deletions": 89}, "files": [{"sha": "aba2447fa68e9b27919479b222827ed93cc865f6", "filename": "compiler/rustc_infer/src/infer/error_reporting/mod.rs", "status": "modified", "additions": 36, "deletions": 79, "changes": 115, "blob_url": "https://github.com/rust-lang/rust/blob/c65866000e07270817465f3cbb8b1d01ecdb9a20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65866000e07270817465f3cbb8b1d01ecdb9a20/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=c65866000e07270817465f3cbb8b1d01ecdb9a20", "patch": "@@ -1656,82 +1656,39 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             };\n \n             enum Similar<'tcx> {\n-                Adts(ty::AdtDef<'tcx>, ty::AdtDef<'tcx>),\n-                PrimitiveFound(Ty<'tcx>, ty::AdtDef<'tcx>),\n-                PrimitiveExpected(ty::AdtDef<'tcx>, Ty<'tcx>),\n-            }\n-\n-            let primitive_sym = |kind: &_| match kind {\n-                ty::Bool => Some(sym::bool),\n-                ty::Char => Some(sym::char),\n-                ty::Float(f) => match f {\n-                    ty::FloatTy::F32 => Some(sym::f32),\n-                    ty::FloatTy::F64 => Some(sym::f64),\n-                },\n-                ty::Int(f) => match f {\n-                    ty::IntTy::Isize => Some(sym::isize),\n-                    ty::IntTy::I8 => Some(sym::i8),\n-                    ty::IntTy::I16 => Some(sym::i16),\n-                    ty::IntTy::I32 => Some(sym::i32),\n-                    ty::IntTy::I64 => Some(sym::i64),\n-                    ty::IntTy::I128 => Some(sym::i128),\n-                },\n-                ty::Uint(f) => match f {\n-                    ty::UintTy::Usize => Some(sym::usize),\n-                    ty::UintTy::U8 => Some(sym::u8),\n-                    ty::UintTy::U16 => Some(sym::u16),\n-                    ty::UintTy::U32 => Some(sym::u32),\n-                    ty::UintTy::U64 => Some(sym::u64),\n-                    ty::UintTy::U128 => Some(sym::u128),\n-                },\n-                _ => None,\n-            };\n-\n-            let similarity = |e: ExpectedFound<Ty<'tcx>>| {\n-                let (fk, ek) = (e.found.kind(), e.expected.kind());\n-                match (fk, ek) {\n-                    (\n-                        ty::Adt(adt, _),\n-                        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_),\n-                    ) => {\n-                        let path = self.tcx.def_path(adt.did()).data;\n-                        let name = path.last().unwrap().data.get_opt_name();\n-                        let prim_sym = primitive_sym(ek);\n+                Adts { expected: ty::AdtDef<'tcx>, found: ty::AdtDef<'tcx> },\n+                PrimitiveFound { expected: ty::AdtDef<'tcx>, found: Ty<'tcx> },\n+                PrimitiveExpected { expected: Ty<'tcx>, found: ty::AdtDef<'tcx> },\n+            }\n \n-                        if name == prim_sym {\n-                            return Some(Similar::PrimitiveExpected(*adt, e.expected));\n-                        }\n-                        None\n+            let similarity = |ExpectedFound { expected, found }: ExpectedFound<Ty<'tcx>>| {\n+                if let ty::Adt(expected, _) = expected.kind() && let Some(primitive) = found.primitive_symbol() {\n+                    let path = self.tcx.def_path(expected.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveFound { expected: *expected, found });\n                     }\n-                    (\n-                        ty::Bool | ty::Char | ty::Int(_) | ty::Uint(_) | ty::Float(_),\n-                        ty::Adt(adt, _),\n-                    ) => {\n-                        let path = self.tcx.def_path(adt.did()).data;\n-                        let name = path.last().unwrap().data.get_opt_name();\n-                        let prim_sym = primitive_sym(fk);\n-\n-                        if name == prim_sym {\n-                            return Some(Similar::PrimitiveFound(e.expected, *adt));\n-                        }\n-                        None\n+                } else if let Some(primitive) = expected.primitive_symbol() && let ty::Adt(found, _) = found.kind() {\n+                    let path = self.tcx.def_path(found.did()).data;\n+                    let name = path.last().unwrap().data.get_opt_name();\n+                    if name == Some(primitive) {\n+                        return Some(Similar::PrimitiveExpected { expected, found: *found });\n                     }\n-                    (ty::Adt(f, _), ty::Adt(e, _)) => {\n-                        if !f.did().is_local() && f.did().krate == e.did().krate {\n-                            // Most likely types from different versions of the same crate\n-                            // are in play, in which case this message isn't so helpful.\n-                            // A \"perhaps two different versions...\" error is already emitted for that.\n-                            return None;\n-                        }\n-                        let e_path = self.tcx.def_path(e.did()).data;\n-                        let f_path = self.tcx.def_path(f.did()).data;\n-                        if let (Some(e_last), Some(f_last)) = (e_path.last(), f_path.last()) && e_last ==  f_last {\n-                            return Some(Similar::Adts(*f, *e));\n-                        }\n-                        None\n+                } else if let ty::Adt(expected, _) = expected.kind() && let ty::Adt(found, _) = found.kind() {\n+                    if !expected.did().is_local() && expected.did().krate == found.did().krate {\n+                        // Most likely types from different versions of the same crate\n+                        // are in play, in which case this message isn't so helpful.\n+                        // A \"perhaps two different versions...\" error is already emitted for that.\n+                        return None;\n+                    }\n+                    let f_path = self.tcx.def_path(found.did()).data;\n+                    let e_path = self.tcx.def_path(expected.did()).data;\n+\n+                    if let (Some(e_last), Some(f_last)) = (e_path.last(), f_path.last()) && e_last ==  f_last {\n+                        return Some(Similar::Adts{expected: *expected, found: *found});\n                     }\n-                    _ => None,\n                 }\n+                None\n             };\n \n             match terr {\n@@ -1759,8 +1716,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         };\n \n                     let diagnose_adts =\n-                        |found_adt: ty::AdtDef<'tcx>,\n-                         expected_adt: ty::AdtDef<'tcx>,\n+                        |expected_adt : ty::AdtDef<'tcx>,\n+                         found_adt: ty::AdtDef<'tcx>,\n                          diagnostic: &mut Diagnostic| {\n                             let found_name = values.found.sort_string(self.tcx);\n                             let expected_name = values.expected.sort_string(self.tcx);\n@@ -1792,14 +1749,14 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         };\n \n                     match s {\n-                        Similar::Adts(found_adt, expected_adt) => {\n-                            diagnose_adts(found_adt, expected_adt, diag)\n+                        Similar::Adts{expected, found} => {\n+                            diagnose_adts(expected, found, diag)\n                         }\n-                        Similar::PrimitiveFound(prim, e) => {\n-                            diagnose_primitive(prim, values.expected, e.did(), diag)\n+                        Similar::PrimitiveFound{expected, found: prim} => {\n+                            diagnose_primitive(prim, values.expected, expected.did(), diag)\n                         }\n-                        Similar::PrimitiveExpected(f, prim) => {\n-                            diagnose_primitive(prim, values.found, f.did(), diag)\n+                        Similar::PrimitiveExpected{expected: prim, found} => {\n+                            diagnose_primitive(prim, values.found, found.did(), diag)\n                         }\n                     }\n                 }"}, {"sha": "6583e61931a53a439b85f7be4052b5e9efeab216", "filename": "compiler/rustc_middle/src/ty/sty.rs", "status": "modified", "additions": 30, "deletions": 1, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c65866000e07270817465f3cbb8b1d01ecdb9a20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65866000e07270817465f3cbb8b1d01ecdb9a20/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fsty.rs?ref=c65866000e07270817465f3cbb8b1d01ecdb9a20", "patch": "@@ -19,7 +19,7 @@ use rustc_hir as hir;\n use rustc_hir::def_id::DefId;\n use rustc_index::vec::Idx;\n use rustc_macros::HashStable;\n-use rustc_span::symbol::{kw, Symbol};\n+use rustc_span::symbol::{kw, sym, Symbol};\n use rustc_target::abi::VariantIdx;\n use rustc_target::spec::abi;\n use std::borrow::Cow;\n@@ -2274,6 +2274,35 @@ impl<'tcx> Ty<'tcx> {\n             }\n         }\n     }\n+\n+    // If `self` is a primitive, return its [`Symbol`].\n+    pub fn primitive_symbol(self) -> Option<Symbol> {\n+        match self.kind() {\n+            ty::Bool => Some(sym::bool),\n+            ty::Char => Some(sym::char),\n+            ty::Float(f) => match f {\n+                ty::FloatTy::F32 => Some(sym::f32),\n+                ty::FloatTy::F64 => Some(sym::f64),\n+            },\n+            ty::Int(f) => match f {\n+                ty::IntTy::Isize => Some(sym::isize),\n+                ty::IntTy::I8 => Some(sym::i8),\n+                ty::IntTy::I16 => Some(sym::i16),\n+                ty::IntTy::I32 => Some(sym::i32),\n+                ty::IntTy::I64 => Some(sym::i64),\n+                ty::IntTy::I128 => Some(sym::i128),\n+            },\n+            ty::Uint(f) => match f {\n+                ty::UintTy::Usize => Some(sym::usize),\n+                ty::UintTy::U8 => Some(sym::u8),\n+                ty::UintTy::U16 => Some(sym::u16),\n+                ty::UintTy::U32 => Some(sym::u32),\n+                ty::UintTy::U64 => Some(sym::u64),\n+                ty::UintTy::U128 => Some(sym::u128),\n+            },\n+            _ => None,\n+        }\n+    }\n }\n \n /// Extra information about why we ended up with a particular variance."}, {"sha": "61550b887552065dd161ab16c888587d1235994f", "filename": "src/test/ui/mismatched_types/show_module.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fshow_module.rs?ref=c65866000e07270817465f3cbb8b1d01ecdb9a20", "patch": "@@ -1,10 +1,10 @@\n-pub mod blah{\n-    pub mod baz{\n+pub mod blah {\n+    pub mod baz {\n         pub struct Foo;\n     }\n }\n \n-pub mod meh{\n+pub mod meh {\n     pub struct Foo;\n }\n \n@@ -15,4 +15,4 @@ fn foo() -> Foo {\n     //~^ ERROR mismatched types [E0308]\n }\n \n-fn main(){}\n+fn main() {}"}, {"sha": "4b9157f39bf4894d78a0f5f3bbd48d4bbd1129ce", "filename": "src/test/ui/mismatched_types/similar_paths.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.rs?ref=c65866000e07270817465f3cbb8b1d01ecdb9a20", "patch": "@@ -1,11 +1,11 @@\n-enum Option<T>{\n+enum Option<T> {\n     Some(T),\n     None,\n }\n \n-pub fn foo() -> Option<u8>{\n+pub fn foo() -> Option<u8> {\n     Some(42_u8)\n     //~^ ERROR mismatched types [E0308]\n }\n \n-fn main(){}\n+fn main() {}"}, {"sha": "e65ae58d4ce96ab55d5db11fc6c64c0d9b5de25c", "filename": "src/test/ui/mismatched_types/similar_paths.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c65866000e07270817465f3cbb8b1d01ecdb9a20/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fsimilar_paths.stderr?ref=c65866000e07270817465f3cbb8b1d01ecdb9a20", "patch": "@@ -1,7 +1,7 @@\n error[E0308]: mismatched types\n   --> $DIR/similar_paths.rs:7:5\n    |\n-LL | pub fn foo() -> Option<u8>{\n+LL | pub fn foo() -> Option<u8> {\n    |                 ---------- expected `Option<u8>` because of return type\n LL |     Some(42_u8)\n    |     ^^^^^^^^^^^ expected enum `Option`, found enum `std::option::Option`\n@@ -15,7 +15,7 @@ LL | pub enum Option<T> {\n note: enum `Option` is defined in the current crate\n   --> $DIR/similar_paths.rs:1:1\n    |\n-LL | enum Option<T>{\n+LL | enum Option<T> {\n    | ^^^^^^^^^^^^^^\n \n error: aborting due to previous error"}]}