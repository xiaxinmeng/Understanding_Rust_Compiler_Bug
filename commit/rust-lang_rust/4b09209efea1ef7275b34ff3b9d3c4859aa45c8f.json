{"sha": "4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiMDkyMDllZmVhMWVmNzI3NWIzNGZmM2I5ZDNjNDg1OWFhNDVjOGY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-02T11:14:01Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2015-02-22T01:14:25Z"}, "message": "Ensure default trait impls hold", "tree": {"sha": "4f06e73529b04e3498d2f2f4e0341818b3a38a99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f06e73529b04e3498d2f2f4e0341818b3a38a99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "html_url": "https://github.com/rust-lang/rust/commit/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "58a8103df9077d581a7b17824a7a4b9be695ec5f", "url": "https://api.github.com/repos/rust-lang/rust/commits/58a8103df9077d581a7b17824a7a4b9be695ec5f", "html_url": "https://github.com/rust-lang/rust/commit/58a8103df9077d581a7b17824a7a4b9be695ec5f"}], "stats": {"total": 259, "additions": 239, "deletions": 20}, "files": [{"sha": "93e5d38637f8a3beb423c7976dc5d92b2d4fb881", "filename": "src/librustc/middle/traits/mod.rs", "status": "modified", "additions": 34, "deletions": 3, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fmod.rs?ref=4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "patch": "@@ -222,7 +222,7 @@ pub enum Vtable<'tcx, N> {\n     VtableImpl(VtableImplData<'tcx, N>),\n \n     /// Vtable for default trait implementations\n-    VtableDefaultTrait(ast::DefId),\n+    VtableDefaultTrait(VtableDefaultTraitData<N>),\n \n     /// Successful resolution to an obligation provided by the caller\n     /// for some type parameter. The `Vec<N>` represents the\n@@ -262,6 +262,12 @@ pub struct VtableImplData<'tcx, N> {\n     pub nested: subst::VecPerParamSpace<N>\n }\n \n+#[derive(Debug,Clone)]\n+pub struct VtableDefaultTraitData<N> {\n+    pub trait_def_id: ast::DefId,\n+    pub nested: subst::VecPerParamSpace<N>\n+}\n+\n #[derive(Debug,Clone)]\n pub struct VtableBuiltinData<N> {\n     pub nested: subst::VecPerParamSpace<N>\n@@ -527,7 +533,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n     pub fn map_nested<M, F>(&self, op: F) -> Vtable<'tcx, M> where F: FnMut(&N) -> M {\n         match *self {\n             VtableImpl(ref i) => VtableImpl(i.map_nested(op)),\n-            VtableDefaultTrait(t) => VtableDefaultTrait(t),\n+            VtableDefaultTrait(ref t) => VtableDefaultTrait(t.map_nested(op)),\n             VtableFnPointer(ref sig) => VtableFnPointer((*sig).clone()),\n             VtableClosure(d, ref s) => VtableClosure(d, s.clone()),\n             VtableParam(ref n) => VtableParam(n.iter().map(op).collect()),\n@@ -543,7 +549,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableImpl(i) => VtableImpl(i.map_move_nested(op)),\n             VtableFnPointer(sig) => VtableFnPointer(sig),\n             VtableClosure(d, s) => VtableClosure(d, s),\n-            VtableDefaultTrait(t) => VtableDefaultTrait(t),\n+            VtableDefaultTrait(t) => VtableDefaultTrait(t.map_move_nested(op)),\n             VtableParam(n) => VtableParam(n.into_iter().map(op).collect()),\n             VtableObject(p) => VtableObject(p),\n             VtableBuiltin(no) => VtableBuiltin(no.map_move_nested(op)),\n@@ -578,6 +584,31 @@ impl<'tcx, N> VtableImplData<'tcx, N> {\n     }\n }\n \n+impl<N> VtableDefaultTraitData<N> {\n+    pub fn iter_nested(&self) -> Iter<N> {\n+        self.nested.iter()\n+    }\n+\n+    pub fn map_nested<M, F>(&self, op: F) -> VtableDefaultTraitData<M> where\n+        F: FnMut(&N) -> M,\n+    {\n+        VtableDefaultTraitData {\n+            trait_def_id: self.trait_def_id,\n+            nested: self.nested.map(op)\n+        }\n+    }\n+\n+    pub fn map_move_nested<M, F>(self, op: F) -> VtableDefaultTraitData<M> where\n+        F: FnMut(N) -> M,\n+    {\n+        let VtableDefaultTraitData { trait_def_id, nested } = self;\n+        VtableDefaultTraitData {\n+            trait_def_id: trait_def_id,\n+            nested: nested.map_move(op)\n+        }\n+    }\n+}\n+\n impl<N> VtableBuiltinData<N> {\n     pub fn iter_nested(&self) -> Iter<N> {\n         self.nested.iter()"}, {"sha": "2a920721963bcfd7b8bed0e48a2b23cbe15c0791", "filename": "src/librustc/middle/traits/select.rs", "status": "modified", "additions": 152, "deletions": 8, "changes": 160, "blob_url": "https://github.com/rust-lang/rust/blob/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Fselect.rs?ref=4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "patch": "@@ -21,13 +21,13 @@ use super::{DerivedObligationCause};\n use super::{project};\n use super::project::Normalized;\n use super::{PredicateObligation, TraitObligation, ObligationCause};\n-use super::{ObligationCauseCode, BuiltinDerivedObligation};\n+use super::{ObligationCauseCode, BuiltinDerivedObligation, ImplDerivedObligation};\n use super::{SelectionError, Unimplemented, Overflow, OutputTypeParameterMismatch};\n use super::{Selection};\n use super::{SelectionResult};\n use super::{VtableBuiltin, VtableImpl, VtableParam, VtableClosure,\n             VtableFnPointer, VtableObject, VtableDefaultTrait};\n-use super::{VtableImplData, VtableObjectData, VtableBuiltinData};\n+use super::{VtableImplData, VtableObjectData, VtableBuiltinData, VtableDefaultTraitData};\n use super::object_safety;\n use super::{util};\n \n@@ -1535,7 +1535,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     ty::struct_fields(self.tcx(), def_id, substs).iter()\n                                                                  .map(|f| f.mt.ty)\n                                                                  .collect();\n-                nominal(self, bound, def_id, types)\n+                nominal(bound, types)\n             }\n \n             ty::ty_enum(def_id, substs) => {\n@@ -1545,7 +1545,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     .flat_map(|variant| variant.args.iter())\n                     .cloned()\n                     .collect();\n-                nominal(self, bound, def_id, types)\n+                nominal(bound, types)\n             }\n \n             ty::ty_projection(_) |\n@@ -1594,9 +1594,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n         };\n \n-        fn nominal<'cx, 'tcx>(this: &mut SelectionContext<'cx, 'tcx>,\n-                              bound: ty::BuiltinBound,\n-                              def_id: ast::DefId,\n+        fn nominal<'cx, 'tcx>(bound: ty::BuiltinBound,\n                               types: Vec<Ty<'tcx>>)\n                               -> Result<BuiltinBoundConditions<'tcx>,SelectionError<'tcx>>\n         {\n@@ -1615,6 +1613,89 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         }\n     }\n \n+    fn constituent_types(&self, t: Ty<'tcx>) -> Vec<Ty<'tcx>> {\n+        match t.sty {\n+            ty::ty_uint(_) |\n+            ty::ty_int(_) |\n+            ty::ty_bool |\n+            ty::ty_float(_) |\n+            ty::ty_bare_fn(..) |\n+            ty::ty_str |\n+            ty::ty_err |\n+            ty::ty_char => {\n+                Vec::new()\n+            }\n+\n+            ty::ty_projection(..) |\n+            ty::ty_param(..) |\n+            ty::ty_infer(..) => {\n+                self.tcx().sess.bug(\n+                    &format!(\n+                        \"asked to assemble constituent types of unexpected type: {}\",\n+                        t.repr(self.tcx()))[]);\n+            }\n+\n+            ty::ty_uniq(referent_ty) => {  // Box<T>\n+                vec![referent_ty]\n+            }\n+\n+\n+            ty::ty_trait(ref data) => {\n+                // Recursively check all supertraits to find out if any further\n+                // bounds are required and thus we must fulfill.\n+                let principal =\n+                    data.principal_trait_ref_with_self_ty(self.tcx(),\n+                                                          self.tcx().types.err);\n+\n+\n+                util::supertraits(self.tcx(), principal).map(|tr| tr.self_ty()).collect()\n+            }\n+\n+            ty::ty_open(element_ty) => {vec![element_ty]},\n+\n+            ty::ty_ptr(ty::mt { ty: element_ty, ..}) |\n+            ty::ty_rptr(_, ty::mt { ty: element_ty, ..}) => {\n+                vec![element_ty]\n+            },\n+\n+            ty::ty_vec(element_ty, _) => {\n+                vec![element_ty]\n+            }\n+\n+            ty::ty_tup(ref tys) => {\n+                // (T1, ..., Tn) -- meets any bound that all of T1...Tn meet\n+                tys.clone()\n+            }\n+\n+            ty::ty_closure(def_id, _, substs) => {\n+                assert_eq!(def_id.krate, ast::LOCAL_CRATE);\n+\n+                match self.closure_typer.closure_upvars(def_id, substs) {\n+                    Some(upvars) => {\n+                        upvars.iter().map(|c| c.ty).collect()\n+                    }\n+                    None => {\n+                        Vec::new()\n+                    }\n+                }\n+            }\n+\n+            ty::ty_struct(def_id, substs) => {\n+                ty::struct_fields(self.tcx(), def_id, substs).iter()\n+                    .map(|f| f.mt.ty)\n+                    .collect()\n+            }\n+\n+            ty::ty_enum(def_id, substs) => {\n+                ty::substd_enum_variants(self.tcx(), def_id, substs)\n+                    .iter()\n+                    .flat_map(|variant| variant.args.iter())\n+                    .map(|&ty| ty)\n+                    .collect()\n+            }\n+        }\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // CONFIRMATION\n     //\n@@ -1648,7 +1729,8 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n             }\n \n             DefaultTraitCandidate(trait_def_id) => {\n-                Ok(VtableDefaultTrait(trait_def_id))\n+                let data = try!(self.confirm_default_impl_candidate(obligation, trait_def_id));\n+                Ok(VtableDefaultTrait(data))\n             }\n \n             ImplCandidate(impl_def_id) => {\n@@ -1783,6 +1865,68 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n         VtableBuiltinData { nested: obligations }\n     }\n \n+    fn confirm_default_impl_candidate(&mut self,\n+                              obligation: &TraitObligation<'tcx>,\n+                              impl_def_id: ast::DefId)\n+                              -> Result<VtableDefaultTraitData<PredicateObligation<'tcx>>,\n+                                        SelectionError<'tcx>>\n+    {\n+        debug!(\"confirm_default_impl_candidate({}, {})\",\n+               obligation.repr(self.tcx()),\n+               impl_def_id.repr(self.tcx()));\n+\n+        let self_ty = self.infcx.shallow_resolve(obligation.predicate.0.self_ty());\n+        let types = self.constituent_types(self_ty);\n+        Ok(self.vtable_default_impl(obligation, impl_def_id, types))\n+    }\n+\n+    fn vtable_default_impl(&mut self,\n+                           obligation: &TraitObligation<'tcx>,\n+                           trait_def_id: ast::DefId,\n+                           nested: Vec<Ty<'tcx>>)\n+                           -> VtableDefaultTraitData<PredicateObligation<'tcx>>\n+    {\n+        let derived_cause = self.derived_cause(obligation, ImplDerivedObligation);\n+        let obligations = nested.iter().map(|&nested_ty| {\n+            // the obligation might be higher-ranked, e.g. for<'a> &'a\n+            // int : Copy. In that case, we will wind up with\n+            // late-bound regions in the `nested` vector. So for each\n+            // one we instantiate to a skolemized region, do our work\n+            // to produce something like `&'0 int : Copy`, and then\n+            // re-bind it. This is a bit of busy-work but preserves\n+            // the invariant that we only manipulate free regions, not\n+            // bound ones.\n+            self.infcx.try(|snapshot| {\n+                let (skol_ty, skol_map) =\n+                    self.infcx().skolemize_late_bound_regions(&ty::Binder(nested_ty), snapshot);\n+                let skol_predicate =\n+                    util::predicate_for_default_trait_impl(\n+                        self.tcx(),\n+                        derived_cause.clone(),\n+                        trait_def_id,\n+                        obligation.recursion_depth + 1,\n+                        skol_ty);\n+                match skol_predicate {\n+                    Ok(skol_predicate) => Ok(self.infcx().plug_leaks(skol_map, snapshot,\n+                                                                     &skol_predicate)),\n+                    Err(ErrorReported) => Err(ErrorReported)\n+                }\n+            })\n+        }).collect::<Result<_, _>>();\n+        let obligations = match obligations {\n+            Ok(o) => o,\n+            Err(ErrorReported) => Vec::new()\n+        };\n+\n+        let obligations = VecPerParamSpace::new(obligations, Vec::new(), Vec::new());\n+        debug!(\"vtable_default_impl_data: obligations={}\", obligations.repr(self.tcx()));\n+\n+        VtableDefaultTraitData {\n+            trait_def_id: trait_def_id,\n+            nested: obligations\n+        }\n+    }\n+\n     fn confirm_impl_candidate(&mut self,\n                               obligation: &TraitObligation<'tcx>,\n                               impl_def_id: ast::DefId)"}, {"sha": "771c6ad3a5e7bb2e39f2e8cfc234ab6a81a3622d", "filename": "src/librustc/middle/traits/util.rs", "status": "modified", "additions": 40, "deletions": 7, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftraits%2Futil.rs?ref=4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "patch": "@@ -20,7 +20,7 @@ use util::nodemap::FnvHashSet;\n use util::ppaux::Repr;\n \n use super::{Obligation, ObligationCause, PredicateObligation,\n-            VtableImpl, VtableParam, VtableImplData};\n+            VtableImpl, VtableParam, VtableImplData, VtableDefaultTraitData};\n \n struct PredicateSet<'a,'tcx:'a> {\n     tcx: &'a ty::ctxt<'tcx>,\n@@ -323,22 +323,47 @@ pub fn trait_ref_for_builtin_bound<'tcx>(\n     }\n }\n \n-pub fn predicate_for_builtin_bound<'tcx>(\n+pub fn predicate_for_trait_ref<'tcx>(\n     tcx: &ty::ctxt<'tcx>,\n     cause: ObligationCause<'tcx>,\n-    builtin_bound: ty::BuiltinBound,\n-    recursion_depth: uint,\n-    param_ty: Ty<'tcx>)\n+    trait_ref: Rc<ty::TraitRef<'tcx>>,\n+    recursion_depth: uint)\n     -> Result<PredicateObligation<'tcx>, ErrorReported>\n {\n-    let trait_ref = try!(trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty));\n     Ok(Obligation {\n         cause: cause,\n         recursion_depth: recursion_depth,\n         predicate: trait_ref.as_predicate(),\n     })\n }\n \n+pub fn predicate_for_default_trait_impl<'tcx>(\n+    tcx: &ty::ctxt<'tcx>,\n+    cause: ObligationCause<'tcx>,\n+    trait_def_id: ast::DefId,\n+    recursion_depth: uint,\n+    param_ty: Ty<'tcx>)\n+    -> Result<PredicateObligation<'tcx>, ErrorReported>\n+{\n+    let trait_ref = Rc::new(ty::TraitRef {\n+        def_id: trait_def_id,\n+        substs: tcx.mk_substs(Substs::empty().with_self_ty(param_ty))\n+    });\n+    predicate_for_trait_ref(tcx, cause, trait_ref, recursion_depth)\n+}\n+\n+pub fn predicate_for_builtin_bound<'tcx>(\n+    tcx: &ty::ctxt<'tcx>,\n+    cause: ObligationCause<'tcx>,\n+    builtin_bound: ty::BuiltinBound,\n+    recursion_depth: uint,\n+    param_ty: Ty<'tcx>)\n+    -> Result<PredicateObligation<'tcx>, ErrorReported>\n+{\n+    let trait_ref = try!(trait_ref_for_builtin_bound(tcx, builtin_bound, param_ty));\n+    predicate_for_trait_ref(tcx, cause, trait_ref, recursion_depth)\n+}\n+\n /// Cast a trait reference into a reference to one of its super\n /// traits; returns `None` if `target_trait_def_id` is not a\n /// supertrait.\n@@ -445,7 +470,7 @@ impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::Vtable<'tcx, N> {\n                 v.repr(tcx),\n \n             super::VtableDefaultTrait(ref t) =>\n-                format!(\"VtableDefaultTrait({:?})\", t),\n+                t.repr(tcx),\n \n             super::VtableClosure(ref d, ref s) =>\n                 format!(\"VtableClosure({},{})\",\n@@ -486,6 +511,14 @@ impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::VtableBuiltinData<N> {\n     }\n }\n \n+impl<'tcx, N:Repr<'tcx>> Repr<'tcx> for super::VtableDefaultTraitData<N> {\n+    fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n+        format!(\"VtableDefaultTraitData(trait_def_id={}, nested={})\",\n+                self.trait_def_id.repr(tcx),\n+                self.nested.repr(tcx))\n+    }\n+}\n+\n impl<'tcx> Repr<'tcx> for super::VtableObjectData<'tcx> {\n     fn repr(&self, tcx: &ty::ctxt<'tcx>) -> String {\n         format!(\"VtableObject(object_ty={})\","}, {"sha": "2fcee3d62138e9b5090e68e93f8ac611b18bd41a", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "patch": "@@ -5175,6 +5175,9 @@ pub fn impl_trait_ref<'tcx>(cx: &ctxt<'tcx>, id: ast::DefId)\n                                 &None => None\n                             }\n                         }\n+                        ast::ItemDefTrait(_, ref ast_trait_ref) => {\n+                            Some(ty::node_id_to_trait_ref(cx, ast_trait_ref.ref_id))\n+                        }\n                         _ => None\n                     }\n                 }\n@@ -5999,7 +6002,6 @@ pub fn item_variances(tcx: &ctxt, item_id: ast::DefId) -> Rc<ItemVariances> {\n /// Records a trait-to-implementation mapping.\n pub fn record_default_trait_implementation(tcx: &ctxt, trait_def_id: DefId) {\n \n-    //assert!(did.krate != ast::LOCAL_CRATE);\n     if tcx.default_trait_impls.borrow().contains(&trait_def_id) {\n         return;\n     }"}, {"sha": "8ed6af652ce7a776a1d6d75141b260ab5829f5a1", "filename": "src/librustc/middle/ty_fold.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b09209efea1ef7275b34ff3b9d3c4859aa45c8f/src%2Flibrustc%2Fmiddle%2Fty_fold.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty_fold.rs?ref=4b09209efea1ef7275b34ff3b9d3c4859aa45c8f", "patch": "@@ -507,6 +507,15 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableImplData<\n     }\n }\n \n+impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableDefaultTraitData<N> {\n+    fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableDefaultTraitData<N> {\n+        traits::VtableDefaultTraitData {\n+            trait_def_id: self.trait_def_id,\n+            nested: self.nested.fold_with(folder),\n+        }\n+    }\n+}\n+\n impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::VtableBuiltinData<N> {\n     fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::VtableBuiltinData<N> {\n         traits::VtableBuiltinData {\n@@ -519,7 +528,7 @@ impl<'tcx, N: TypeFoldable<'tcx>> TypeFoldable<'tcx> for traits::Vtable<'tcx, N>\n     fn fold_with<F:TypeFolder<'tcx>>(&self, folder: &mut F) -> traits::Vtable<'tcx, N> {\n         match *self {\n             traits::VtableImpl(ref v) => traits::VtableImpl(v.fold_with(folder)),\n-            traits::VtableDefaultTrait(t) => traits::VtableDefaultTrait(t),\n+            traits::VtableDefaultTrait(ref t) => traits::VtableDefaultTrait(t.fold_with(folder)),\n             traits::VtableClosure(d, ref s) => {\n                 traits::VtableClosure(d, s.fold_with(folder))\n             }"}]}