{"sha": "64e5f9129f6ffb382b458a255eed36f2581271c4", "node_id": "C_kwDOAAsO6NoAKDY0ZTVmOTEyOWY2ZmZiMzgyYjQ1OGEyNTVlZWQzNmYyNTgxMjcxYzQ", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-17T08:21:34Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-01-17T08:21:34Z"}, "message": "Handle diagnostics customization on the fluent side", "tree": {"sha": "35c86294f532d64f1bf610a2d7e9459c75e8f6dc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c86294f532d64f1bf610a2d7e9459c75e8f6dc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/64e5f9129f6ffb382b458a255eed36f2581271c4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/64e5f9129f6ffb382b458a255eed36f2581271c4", "html_url": "https://github.com/rust-lang/rust/commit/64e5f9129f6ffb382b458a255eed36f2581271c4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/64e5f9129f6ffb382b458a255eed36f2581271c4/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a6ab6c16a4902aef1e6d49ca188e1e112c677b7", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a6ab6c16a4902aef1e6d49ca188e1e112c677b7", "html_url": "https://github.com/rust-lang/rust/commit/1a6ab6c16a4902aef1e6d49ca188e1e112c677b7"}], "stats": {"total": 41, "additions": 24, "deletions": 17}, "files": [{"sha": "f4d31cf1c34d7ef4ea6fec6966452a7715052993", "filename": "compiler/rustc_borrowck/src/region_infer/opaque_types.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fregion_infer%2Fopaque_types.rs?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -368,18 +368,6 @@ fn check_opaque_type_parameter_valid(\n     for (i, arg) in opaque_type_key.substs.iter().enumerate() {\n         let arg_is_param = match arg.unpack() {\n             GenericArgKind::Type(ty) => matches!(ty.kind(), ty::Param(_)),\n-            GenericArgKind::Lifetime(lt) if lt.is_static() => {\n-                tcx.sess\n-                    .struct_span_err(span, \"non-defining opaque type use in defining scope\")\n-                    .span_label(\n-                        tcx.def_span(opaque_generics.param_at(i, tcx).def_id),\n-                        \"cannot use static lifetime; use a bound lifetime \\\n-                                    instead or remove the lifetime parameter from the \\\n-                                    opaque type\",\n-                    )\n-                    .emit();\n-                return false;\n-            }\n             GenericArgKind::Lifetime(lt) => {\n                 matches!(*lt, ty::ReEarlyBound(_) | ty::ReFree(_))\n             }"}, {"sha": "0021638c10268c9ce5fcf68c7ffac5d0793d570c", "filename": "compiler/rustc_error_messages/locales/en-US/borrowck.ftl", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fborrowck.ftl?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -123,4 +123,7 @@ borrowck_cannot_move_when_borrowed =\n \n borrowck_opaque_type_non_generic_param =\n     expected generic {$kind} parameter, found `{$ty}`\n-    .label = this generic parameter must be used with a generic {$kind} parameter\n+    .label = {STREQ($ty, \"'static\") ->\n+        [true] cannot use static lifetime; use a bound lifetime instead or remove the lifetime parameter from the opaque type\n+        *[other] this generic parameter must be used with a generic {$kind} parameter\n+    }"}, {"sha": "f053bdc3809be30d5377cae4abc3960f503644b9", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -182,6 +182,9 @@ pub fn fluent_bundle(\n     trace!(?locale);\n     let mut bundle = new_bundle(vec![locale]);\n \n+    // Add convenience functions available to ftl authors.\n+    register_functions(&mut bundle);\n+\n     // Fluent diagnostics can insert directionality isolation markers around interpolated variables\n     // indicating that there may be a shift from right-to-left to left-to-right text (or\n     // vice-versa). These are disabled because they are sometimes visible in the error output, but\n@@ -244,6 +247,15 @@ pub fn fluent_bundle(\n     Ok(Some(bundle))\n }\n \n+fn register_functions(bundle: &mut FluentBundle) {\n+    bundle\n+        .add_function(\"STREQ\", |positional, _named| match positional {\n+            [FluentValue::String(a), FluentValue::String(b)] => format!(\"{}\", (a == b)).into(),\n+            _ => FluentValue::Error,\n+        })\n+        .expect(\"Failed to add a function to the bundle.\");\n+}\n+\n /// Type alias for the result of `fallback_fluent_bundle` - a reference-counted pointer to a lazily\n /// evaluated fluent bundle.\n pub type LazyFallbackBundle = Lrc<Lazy<FluentBundle, impl FnOnce() -> FluentBundle>>;\n@@ -256,6 +268,9 @@ pub fn fallback_fluent_bundle(\n ) -> LazyFallbackBundle {\n     Lrc::new(Lazy::new(move || {\n         let mut fallback_bundle = new_bundle(vec![langid!(\"en-US\")]);\n+\n+        register_functions(&mut fallback_bundle);\n+\n         // See comment in `fluent_bundle`.\n         fallback_bundle.set_use_isolating(with_directionality_markers);\n "}, {"sha": "eeb5dca07f06a4bd86bc34fc0f2e2e26e5b8a7db", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.rs?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -8,7 +8,7 @@ type X<'a> = impl Into<&'static str> + From<&'a str>;\n fn f<'a: 'static>(t: &'a str) -> X<'a> {\n     //~^ WARNING unnecessary lifetime parameter\n     t\n-    //~^ ERROR non-defining opaque type use\n+    //~^ ERROR expected generic lifetime parameter, found `'static`\n }\n \n fn extend_lt<'a>(o: &'a str) -> &'static str {"}, {"sha": "94882597a62e6fd823ceb778ca1e5c18bebe16c8", "filename": "tests/ui/type-alias-impl-trait/bounds-are-checked.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fbounds-are-checked.stderr?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -6,7 +6,7 @@ LL | fn f<'a: 'static>(t: &'a str) -> X<'a> {\n    |\n    = help: you can use the `'static` lifetime directly, in place of `'a`\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic lifetime parameter, found `'static`\n   --> $DIR/bounds-are-checked.rs:10:5\n    |\n LL | type X<'a> = impl Into<&'static str> + From<&'a str>;\n@@ -17,3 +17,4 @@ LL |     t\n \n error: aborting due to previous error; 1 warning emitted\n \n+For more information about this error, try `rustc --explain E0792`."}, {"sha": "e7b8567b9a217d7e629343116d52655ac114e04a", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.rs?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -19,7 +19,7 @@ fn concrete_ty() -> OneTy<u32> {\n \n fn concrete_lifetime() -> OneLifetime<'static> {\n     6u32\n-    //~^ ERROR non-defining opaque type use in defining scope\n+    //~^ ERROR expected generic lifetime parameter, found `'static`\n }\n \n fn concrete_const() -> OneConst<{ 123 }> {"}, {"sha": "966fe823f024dd99e4f3e6d1e70688ffb674aa97", "filename": "tests/ui/type-alias-impl-trait/generic_nondefining_use.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/64e5f9129f6ffb382b458a255eed36f2581271c4/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftype-alias-impl-trait%2Fgeneric_nondefining_use.stderr?ref=64e5f9129f6ffb382b458a255eed36f2581271c4", "patch": "@@ -7,7 +7,7 @@ LL | type OneTy<T> = impl Debug;\n LL |     5u32\n    |     ^^^^\n \n-error: non-defining opaque type use in defining scope\n+error[E0792]: expected generic lifetime parameter, found `'static`\n   --> $DIR/generic_nondefining_use.rs:21:5\n    |\n LL | type OneLifetime<'a> = impl Debug;"}]}