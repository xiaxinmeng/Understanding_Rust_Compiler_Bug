{"sha": "e775b4dbc4a991d60014225088c58eddd91f18cb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3NzViNGRiYzRhOTkxZDYwMDE0MjI1MDg4YzU4ZWRkZDkxZjE4Y2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-18T01:13:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-18T01:13:40Z"}, "message": "Rollup merge of #74069 - erikdesjardins:bad-niche, r=nikomatsakis\n\nCompare tagged/niche-filling layout and pick the best one\n\nFinishes up #71045, and so fixes #63866.\n\ncc @eddyb\nr? @nikomatsakis (since @eddyb wrote the first commit)", "tree": {"sha": "43ef4dbe09ceb2b4ff47cdcaa1f047a8fdd00085", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43ef4dbe09ceb2b4ff47cdcaa1f047a8fdd00085"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e775b4dbc4a991d60014225088c58eddd91f18cb", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfEkzFCRBK7hj4Ov3rIwAAdHIIAKQQE8b35lQUx0JpSZUjqg7M\njyUOdICOMooFogixKAq1XWhrUkQvR6EZFwvjCmunMBUfp94ug7YhF5Obo3Z7mMUO\nVhX8yPjRoxP547n8bjnhqj7AtwSMReXrUgcdDoY4qHrw+Po1Ypf+jZNM+v5tObSP\nH46p//X3rI77d8aomfsrTtEvQwEfj3TZxU2Jy8kPufdXkRWp87OLvf9sTanGuA1J\nwb5zpfhj7nRqP78GP3+ZmkX0dBkyxpekdFG+BKUArgJYJrA10Nfulzu/L2r10ZXT\nBDHGsOKmNzLijLWVmQ0BliWq4vMRsyPRUI1ChcjGx1XGeB1fUL1i4Up5+D/1orI=\n=2qgb\n-----END PGP SIGNATURE-----\n", "payload": "tree 43ef4dbe09ceb2b4ff47cdcaa1f047a8fdd00085\nparent 01418bd1aa71a38567b9fea737d74379133d28c0\nparent 3924672cccb7fb273d197aa2a6f5e130bca96323\nauthor Manish Goregaokar <manishsmail@gmail.com> 1595034820 -0700\ncommitter GitHub <noreply@github.com> 1595034820 -0700\n\nRollup merge of #74069 - erikdesjardins:bad-niche, r=nikomatsakis\n\nCompare tagged/niche-filling layout and pick the best one\n\nFinishes up #71045, and so fixes #63866.\n\ncc @eddyb\nr? @nikomatsakis (since @eddyb wrote the first commit)\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e775b4dbc4a991d60014225088c58eddd91f18cb", "html_url": "https://github.com/rust-lang/rust/commit/e775b4dbc4a991d60014225088c58eddd91f18cb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e775b4dbc4a991d60014225088c58eddd91f18cb/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01418bd1aa71a38567b9fea737d74379133d28c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/01418bd1aa71a38567b9fea737d74379133d28c0", "html_url": "https://github.com/rust-lang/rust/commit/01418bd1aa71a38567b9fea737d74379133d28c0"}, {"sha": "3924672cccb7fb273d197aa2a6f5e130bca96323", "url": "https://api.github.com/repos/rust-lang/rust/commits/3924672cccb7fb273d197aa2a6f5e130bca96323", "html_url": "https://github.com/rust-lang/rust/commit/3924672cccb7fb273d197aa2a6f5e130bca96323"}], "stats": {"total": 58, "additions": 51, "deletions": 7}, "files": [{"sha": "a68301385b7a5b5a983609f57ce7d4057a438ebf", "filename": "src/librustc_middle/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Flibrustc_middle%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Flibrustc_middle%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Flib.rs?ref=e775b4dbc4a991d60014225088c58eddd91f18cb", "patch": "@@ -27,6 +27,7 @@\n #![feature(bool_to_option)]\n #![feature(box_patterns)]\n #![feature(box_syntax)]\n+#![feature(cmp_min_max_by)]\n #![feature(const_fn)]\n #![feature(const_panic)]\n #![feature(const_fn_transmute)]"}, {"sha": "8ae9269a6bf684e566ee2fa0ef27c98f4758ac4a", "filename": "src/librustc_middle/ty/layout.rs", "status": "modified", "additions": 22, "deletions": 4, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Flibrustc_middle%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Flibrustc_middle%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fty%2Flayout.rs?ref=e775b4dbc4a991d60014225088c58eddd91f18cb", "patch": "@@ -876,6 +876,8 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     .iter_enumerated()\n                     .all(|(i, v)| v.discr == ty::VariantDiscr::Relative(i.as_u32()));\n \n+                let mut niche_filling_layout = None;\n+\n                 // Niche-filling enum optimization.\n                 if !def.repr.inhibit_enum_layout_opt() && no_explicit_discriminants {\n                     let mut dataful_variant = None;\n@@ -972,7 +974,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                             let largest_niche =\n                                 Niche::from_scalar(dl, offset, niche_scalar.clone());\n \n-                            return Ok(tcx.intern_layout(Layout {\n+                            niche_filling_layout = Some(Layout {\n                                 variants: Variants::Multiple {\n                                     tag: niche_scalar,\n                                     tag_encoding: TagEncoding::Niche {\n@@ -991,7 +993,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                                 largest_niche,\n                                 size,\n                                 align,\n-                            }));\n+                            });\n                         }\n                     }\n                 }\n@@ -1214,7 +1216,7 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n \n                 let largest_niche = Niche::from_scalar(dl, Size::ZERO, tag.clone());\n \n-                tcx.intern_layout(Layout {\n+                let tagged_layout = Layout {\n                     variants: Variants::Multiple {\n                         tag,\n                         tag_encoding: TagEncoding::Direct,\n@@ -1229,7 +1231,23 @@ impl<'tcx> LayoutCx<'tcx, TyCtxt<'tcx>> {\n                     abi,\n                     align,\n                     size,\n-                })\n+                };\n+\n+                let best_layout = match (tagged_layout, niche_filling_layout) {\n+                    (tagged_layout, Some(niche_filling_layout)) => {\n+                        // Pick the smaller layout; otherwise,\n+                        // pick the layout with the larger niche; otherwise,\n+                        // pick tagged as it has simpler codegen.\n+                        cmp::min_by_key(tagged_layout, niche_filling_layout, |layout| {\n+                            let niche_size =\n+                                layout.largest_niche.as_ref().map_or(0, |n| n.available(dl));\n+                            (layout.size, cmp::Reverse(niche_size))\n+                        })\n+                    }\n+                    (tagged_layout, None) => tagged_layout,\n+                };\n+\n+                tcx.intern_layout(best_layout)\n             }\n \n             // Types with no meaningful known layout."}, {"sha": "1894cd218ee347f94546d2b7fa32a878f5937ad1", "filename": "src/test/ui/print_type_sizes/niche-filling.stdout", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "raw_url": "https://github.com/rust-lang/rust/raw/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprint_type_sizes%2Fniche-filling.stdout?ref=e775b4dbc4a991d60014225088c58eddd91f18cb", "patch": "@@ -8,12 +8,12 @@ print-type-size     variant `Some`: 12 bytes\n print-type-size         field `.0`: 12 bytes\n print-type-size     variant `None`: 0 bytes\n print-type-size type: `EmbeddedDiscr`: 8 bytes, alignment: 4 bytes\n+print-type-size     discriminant: 1 bytes\n print-type-size     variant `Record`: 7 bytes\n-print-type-size         field `.val`: 4 bytes\n-print-type-size         field `.post`: 2 bytes\n print-type-size         field `.pre`: 1 bytes\n+print-type-size         field `.post`: 2 bytes\n+print-type-size         field `.val`: 4 bytes\n print-type-size     variant `None`: 0 bytes\n-print-type-size     end padding: 1 bytes\n print-type-size type: `MyOption<Union1<std::num::NonZeroU32>>`: 8 bytes, alignment: 4 bytes\n print-type-size     discriminant: 4 bytes\n print-type-size     variant `Some`: 4 bytes"}, {"sha": "73a11a5e743f6a7f85810bfbcc0d86d54cf7fd3d", "filename": "src/test/ui/type-sizes.rs", "status": "modified", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Ftest%2Fui%2Ftype-sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e775b4dbc4a991d60014225088c58eddd91f18cb/src%2Ftest%2Fui%2Ftype-sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-sizes.rs?ref=e775b4dbc4a991d60014225088c58eddd91f18cb", "patch": "@@ -5,6 +5,7 @@\n #![feature(never_type)]\n \n use std::mem::size_of;\n+use std::num::NonZeroU8;\n \n struct t {a: u8, b: i8}\n struct u {a: u8, b: i8, c: u8}\n@@ -102,6 +103,23 @@ enum Option2<A, B> {\n     None\n }\n \n+// Two layouts are considered for `CanBeNicheFilledButShouldnt`:\n+//   Niche-filling:\n+//     { u32 (4 bytes), NonZeroU8 + tag in niche (1 byte), padding (3 bytes) }\n+//   Tagged:\n+//     { tag (1 byte), NonZeroU8 (1 byte), padding (2 bytes), u32 (4 bytes) }\n+// Both are the same size (due to padding),\n+// but the tagged layout is better as the tag creates a niche with 254 invalid values,\n+// allowing types like `Option<Option<CanBeNicheFilledButShouldnt>>` to fit into 8 bytes.\n+pub enum CanBeNicheFilledButShouldnt {\n+    A(NonZeroU8, u32),\n+    B\n+}\n+pub enum AlwaysTaggedBecauseItHasNoNiche {\n+    A(u8, u32),\n+    B\n+}\n+\n pub fn main() {\n     assert_eq!(size_of::<u8>(), 1 as usize);\n     assert_eq!(size_of::<u32>(), 4 as usize);\n@@ -145,4 +163,11 @@ pub fn main() {\n     assert_eq!(size_of::<Option<Option<(&(), bool)>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<bool, &()>>>(), size_of::<(bool, &())>());\n     assert_eq!(size_of::<Option<Option2<&(), bool>>>(), size_of::<(bool, &())>());\n+\n+    assert_eq!(size_of::<CanBeNicheFilledButShouldnt>(), 8);\n+    assert_eq!(size_of::<Option<CanBeNicheFilledButShouldnt>>(), 8);\n+    assert_eq!(size_of::<Option<Option<CanBeNicheFilledButShouldnt>>>(), 8);\n+    assert_eq!(size_of::<AlwaysTaggedBecauseItHasNoNiche>(), 8);\n+    assert_eq!(size_of::<Option<AlwaysTaggedBecauseItHasNoNiche>>(), 8);\n+    assert_eq!(size_of::<Option<Option<AlwaysTaggedBecauseItHasNoNiche>>>(), 8);\n }"}]}