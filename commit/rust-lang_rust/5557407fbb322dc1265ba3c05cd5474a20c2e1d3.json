{"sha": "5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NTc0MDdmYmIzMjJkYzEyNjViYTNjMDVjZDU0NzRhMjBjMmUxZDM=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-07T17:45:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2020-03-16T10:06:53Z"}, "message": "Remove QueryState type alias.", "tree": {"sha": "529b9e8deb392c9d49a0a7b689e4f6b2668f5c9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/529b9e8deb392c9d49a0a7b689e4f6b2668f5c9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "html_url": "https://github.com/rust-lang/rust/commit/5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3abd4753b7c9fa9a3855d4b41b557f81b3e06aab", "url": "https://api.github.com/repos/rust-lang/rust/commits/3abd4753b7c9fa9a3855d4b41b557f81b3e06aab", "html_url": "https://github.com/rust-lang/rust/commit/3abd4753b7c9fa9a3855d4b41b557f81b3e06aab"}], "stats": {"total": 43, "additions": 22, "deletions": 21}, "files": [{"sha": "a11b3bcba3ed30dc7e8774f8e200e3db01ca1e9c", "filename": "src/librustc/ty/query/caches.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fcaches.rs?ref=5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "patch": "@@ -1,5 +1,5 @@\n use crate::dep_graph::DepNodeIndex;\n-use crate::ty::query::plumbing::{QueryLookup, QueryStateImpl, QueryStateShard};\n+use crate::ty::query::plumbing::{QueryLookup, QueryState, QueryStateShard};\n use crate::ty::TyCtxt;\n \n use rustc_data_structures::fx::FxHashMap;\n@@ -23,7 +23,7 @@ pub(crate) trait QueryCache: Default {\n     /// to compute it.\n     fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryStateImpl<'tcx, Self>,\n+        state: &'tcx QueryState<'tcx, Self>,\n         get_cache: GetCache,\n         key: Self::Key,\n         // `on_hit` can be called while holding a lock to the query state shard.\n@@ -78,7 +78,7 @@ impl<K: Eq + Hash, V: Clone> QueryCache for DefaultCache<K, V> {\n     #[inline(always)]\n     fn lookup<'tcx, R, GetCache, OnHit, OnMiss>(\n         &self,\n-        state: &'tcx QueryStateImpl<'tcx, Self>,\n+        state: &'tcx QueryState<'tcx, Self>,\n         get_cache: GetCache,\n         key: K,\n         on_hit: OnHit,"}, {"sha": "72a0fdf1567268f03338dbd0db6afc97ad70fb85", "filename": "src/librustc/ty/query/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fconfig.rs?ref=5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "patch": "@@ -33,7 +33,7 @@ pub(crate) trait QueryAccessors<'tcx>: QueryConfig<'tcx> {\n     type Cache: QueryCache<Key = Self::Key, Value = Self::Value>;\n \n     // Don't use this method to access query results, instead use the methods on TyCtxt\n-    fn query_state<'a>(tcx: TyCtxt<'tcx>) -> &'a QueryState<'tcx, Self>;\n+    fn query_state<'a>(tcx: TyCtxt<'tcx>) -> &'a QueryState<'tcx, Self::Cache>;\n \n     fn to_dep_node(tcx: TyCtxt<'tcx>, key: &Self::Key) -> DepNode;\n "}, {"sha": "442b3edcafe036d149bf7d2b747be646564dbee5", "filename": "src/librustc/ty/query/plumbing.rs", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fplumbing.rs?ref=5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "patch": "@@ -4,7 +4,7 @@\n \n use crate::dep_graph::{DepKind, DepNode, DepNodeIndex, SerializedDepNodeIndex};\n use crate::ty::query::caches::QueryCache;\n-use crate::ty::query::config::{QueryAccessors, QueryDescription};\n+use crate::ty::query::config::QueryDescription;\n use crate::ty::query::job::{QueryInfo, QueryJob, QueryJobId, QueryJobInfo, QueryShardJobId};\n use crate::ty::query::Query;\n use crate::ty::tls;\n@@ -49,16 +49,14 @@ impl<'tcx, K, C: Default> Default for QueryStateShard<'tcx, K, C> {\n     }\n }\n \n-pub(crate) type QueryState<'tcx, Q> = QueryStateImpl<'tcx, <Q as QueryAccessors<'tcx>>::Cache>;\n-\n-pub(crate) struct QueryStateImpl<'tcx, C: QueryCache> {\n+pub(crate) struct QueryState<'tcx, C: QueryCache> {\n     pub(super) cache: C,\n     pub(super) shards: Sharded<QueryStateShard<'tcx, C::Key, C::Sharded>>,\n     #[cfg(debug_assertions)]\n     pub(super) cache_hits: AtomicUsize,\n }\n \n-impl<'tcx, C: QueryCache> QueryStateImpl<'tcx, C> {\n+impl<'tcx, C: QueryCache> QueryState<'tcx, C> {\n     pub(super) fn get_lookup<K2: Hash>(\n         &'tcx self,\n         key: &K2,\n@@ -86,7 +84,7 @@ pub(super) enum QueryResult<'tcx> {\n     Poisoned,\n }\n \n-impl<'tcx, C: QueryCache> QueryStateImpl<'tcx, C> {\n+impl<'tcx, C: QueryCache> QueryState<'tcx, C> {\n     pub fn iter_results<R>(\n         &self,\n         f: impl for<'a> FnOnce(\n@@ -130,9 +128,9 @@ impl<'tcx, C: QueryCache> QueryStateImpl<'tcx, C> {\n     }\n }\n \n-impl<'tcx, C: QueryCache> Default for QueryStateImpl<'tcx, C> {\n-    fn default() -> QueryStateImpl<'tcx, C> {\n-        QueryStateImpl {\n+impl<'tcx, C: QueryCache> Default for QueryState<'tcx, C> {\n+    fn default() -> QueryState<'tcx, C> {\n+        QueryState {\n             cache: C::default(),\n             shards: Default::default(),\n             #[cfg(debug_assertions)]\n@@ -156,7 +154,7 @@ where\n     C::Key: Eq + Hash + Clone + Debug,\n     C::Value: Clone,\n {\n-    state: &'tcx QueryStateImpl<'tcx, C>,\n+    state: &'tcx QueryState<'tcx, C>,\n     key: C::Key,\n     id: QueryJobId,\n }\n@@ -482,7 +480,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     #[inline(always)]\n     fn try_get_cached<C, R, OnHit, OnMiss>(\n         self,\n-        state: &'tcx QueryStateImpl<'tcx, C>,\n+        state: &'tcx QueryState<'tcx, C>,\n         key: C::Key,\n         // `on_hit` can be called while holding a lock to the query cache\n         on_hit: OnHit,\n@@ -979,7 +977,7 @@ macro_rules! define_queries_inner {\n             type Cache = query_storage!([$($modifiers)*][$K, $V]);\n \n             #[inline(always)]\n-            fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<$tcx, Self> {\n+            fn query_state<'a>(tcx: TyCtxt<$tcx>) -> &'a QueryState<$tcx, Self::Cache> {\n                 &tcx.queries.$name\n             }\n \n@@ -1131,7 +1129,10 @@ macro_rules! define_queries_struct {\n             providers: IndexVec<CrateNum, Providers<$tcx>>,\n             fallback_extern_providers: Box<Providers<$tcx>>,\n \n-            $($(#[$attr])*  $name: QueryState<$tcx, queries::$name<$tcx>>,)*\n+            $($(#[$attr])*  $name: QueryState<\n+                $tcx,\n+                <queries::$name<$tcx> as QueryAccessors<'tcx>>::Cache,\n+            >,)*\n         }\n \n         impl<$tcx> Queries<$tcx> {"}, {"sha": "58ace917786cf15d70342ddea66c30ee596c65dd", "filename": "src/librustc/ty/query/profiling_support.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fprofiling_support.rs?ref=5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "patch": "@@ -1,7 +1,7 @@\n use crate::hir::map::definitions::DefPathData;\n use crate::ty::context::TyCtxt;\n use crate::ty::query::caches::QueryCache;\n-use crate::ty::query::plumbing::QueryStateImpl;\n+use crate::ty::query::plumbing::QueryState;\n use measureme::{StringComponent, StringId};\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::SelfProfiler;\n@@ -160,7 +160,7 @@ where\n pub(super) fn alloc_self_profile_query_strings_for_query_cache<'tcx, C>(\n     tcx: TyCtxt<'tcx>,\n     query_name: &'static str,\n-    query_state: &QueryStateImpl<'tcx, C>,\n+    query_state: &QueryState<'tcx, C>,\n     string_cache: &mut QueryKeyStringCache,\n ) where\n     C: QueryCache,"}, {"sha": "527bb46c908882ff6d387558b083a267a353a533", "filename": "src/librustc/ty/query/stats.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5557407fbb322dc1265ba3c05cd5474a20c2e1d3/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fquery%2Fstats.rs?ref=5557407fbb322dc1265ba3c05cd5474a20c2e1d3", "patch": "@@ -1,6 +1,6 @@\n use crate::ty::query::caches::QueryCache;\n use crate::ty::query::config::QueryAccessors;\n-use crate::ty::query::plumbing::QueryStateImpl;\n+use crate::ty::query::plumbing::QueryState;\n use crate::ty::query::queries;\n use crate::ty::TyCtxt;\n use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n@@ -38,7 +38,7 @@ struct QueryStats {\n     local_def_id_keys: Option<usize>,\n }\n \n-fn stats<'tcx, C: QueryCache>(name: &'static str, map: &QueryStateImpl<'tcx, C>) -> QueryStats {\n+fn stats<'tcx, C: QueryCache>(name: &'static str, map: &QueryState<'tcx, C>) -> QueryStats {\n     let mut stats = QueryStats {\n         name,\n         #[cfg(debug_assertions)]"}]}