{"sha": "aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "node_id": "C_kwDOAAsO6NoAKGFlZmJiZWVjMzRlODJlZDZjY2ZiYjk0ZDg2ODljMTM0Y2Q4YWU5YTk", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-13T06:18:01Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-04-19T07:02:48Z"}, "message": "Inline and remove `TokenTree::{open_tt,close_tt}`.\n\nThey both have a single call site.", "tree": {"sha": "a1008764892bef5676b13eea5e04391e40e18a46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1008764892bef5676b13eea5e04391e40e18a46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "html_url": "https://github.com/rust-lang/rust/commit/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad566b78f21d58c2a25feeba06fc9506fe514b46", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad566b78f21d58c2a25feeba06fc9506fe514b46", "html_url": "https://github.com/rust-lang/rust/commit/ad566b78f21d58c2a25feeba06fc9506fe514b46"}], "stats": {"total": 14, "additions": 2, "deletions": 12}, "files": [{"sha": "857dc307c98818a788e188791af88b51e3415295", "filename": "compiler/rustc_ast/src/tokenstream.rs", "status": "modified", "additions": 0, "deletions": 10, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast%2Fsrc%2Ftokenstream.rs?ref=aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "patch": "@@ -94,16 +94,6 @@ impl TokenTree {\n         TokenTree::Token(Token::new(kind, span))\n     }\n \n-    /// Returns the opening delimiter as a token tree.\n-    pub fn open_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {\n-        TokenTree::token(token::OpenDelim(delim), span.open)\n-    }\n-\n-    /// Returns the closing delimiter as a token tree.\n-    pub fn close_tt(span: DelimSpan, delim: DelimToken) -> TokenTree {\n-        TokenTree::token(token::CloseDelim(delim), span.close)\n-    }\n-\n     pub fn uninterpolate(self) -> TokenTree {\n         match self {\n             TokenTree::Token(token) => TokenTree::Token(token.uninterpolate().into_owned()),"}, {"sha": "ad6a7b90bc925404847274062cb44117b2ba02fb", "filename": "compiler/rustc_parse/src/parser/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fmod.rs?ref=aefbbeec34e82ed6ccfbb94d8689c134cd8ae9a9", "patch": "@@ -266,12 +266,12 @@ impl TokenCursor {\n         loop {\n             let (tree, spacing) = if !self.frame.open_delim {\n                 self.frame.open_delim = true;\n-                TokenTree::open_tt(self.frame.span, self.frame.delim).into()\n+                TokenTree::token(token::OpenDelim(self.frame.delim), self.frame.span.open).into()\n             } else if let Some(tree) = self.frame.tree_cursor.next_with_spacing() {\n                 tree\n             } else if !self.frame.close_delim {\n                 self.frame.close_delim = true;\n-                TokenTree::close_tt(self.frame.span, self.frame.delim).into()\n+                TokenTree::token(token::CloseDelim(self.frame.delim), self.frame.span.close).into()\n             } else if let Some(frame) = self.stack.pop() {\n                 self.frame = frame;\n                 continue;"}]}