{"sha": "55fd060cd885023f918f4e5c5f910523fa7dfd52", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1ZmQwNjBjZDg4NTAyM2Y5MThmNGU1YzVmOTEwNTIzZmE3ZGZkNTI=", "commit": {"author": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-13T12:27:05Z"}, "committer": {"name": "Oliver Schneider", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2016-06-13T13:33:05Z"}, "message": "don't use `#[miri_run]` anymore, but execute the `main` function", "tree": {"sha": "a28f59912f46d7d161fe8d40f6d0fdd157bb600b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a28f59912f46d7d161fe8d40f6d0fdd157bb600b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55fd060cd885023f918f4e5c5f910523fa7dfd52", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIcBAABAgAGBQJXXrYRAAoJEFbW7qD8Z6xGMx0QAKAYFhC3OdpKSjnVNjl3aCHr\nEpI9wgaqaWde9MzGrnT9DoS7Wktkm1W/jcnPnkYU4U9nEe/yZHhSs4s+EiOC9imp\nhyUgCJhkgRp8xp3Zda0zEqlCe5qKUnW1IJfrktREke7o0EKd1zQOIVBLMmLZB71+\nheQgvQTdKO2fvoyPUVepcroFShuiAThyWFESJIf+VS1XHGFSikI8iJKrLqI7fZgG\nIswQODpQpft8VgaKhKixsyTPId9BBPU9P6LxfQWVPgE4EQzA0NzVcyjblHe6T9TT\necfaY9lBldBIuk33EzjkZ1iWbntwq1eCIHm4CiYesOEe17tQbKrDF8O0abII+Uev\nCVYDt7I6fsHBkCa7wrO7hUz9CozmscKaw+Tpf17bdIz7Y0VAbvv7UVxnkHugyN7T\n0Oxg0qvh2a/L6qlEzJCG+e4vpz2oGQ0T2336fyMFlJ1ZH2RYL/QXD1CA2CxQlqDF\nAK7defV0Gw2z4wsBuMUObD8SGUzx+Evfa9yFmiz12AamowWxq7COw+wRjn6Q90BA\nKcD9blfUwiEAgODq1d6gHWMAfw4jRXjiR0lGzs1+YzlZFcrclZ8hrQlmE/Gk0AZs\ndp9sSHq42BWJ6mCMxF0X06xiGAU1c28V8/ZLbgc82r+vgvZkEaI/+WuEYXS47ozB\nRGZu625Q8ZNpc8/0yodv\n=KMrE\n-----END PGP SIGNATURE-----", "payload": "tree a28f59912f46d7d161fe8d40f6d0fdd157bb600b\nparent fe9b4550061b7593a5324ed2cbcc8e86bf6d986b\nauthor Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465820825 +0200\ncommitter Oliver Schneider <git-spam-no-reply9815368754983@oli-obk.de> 1465824785 +0200\n\ndon't use `#[miri_run]` anymore, but execute the `main` function"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55fd060cd885023f918f4e5c5f910523fa7dfd52", "html_url": "https://github.com/rust-lang/rust/commit/55fd060cd885023f918f4e5c5f910523fa7dfd52", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55fd060cd885023f918f4e5c5f910523fa7dfd52/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fe9b4550061b7593a5324ed2cbcc8e86bf6d986b", "url": "https://api.github.com/repos/rust-lang/rust/commits/fe9b4550061b7593a5324ed2cbcc8e86bf6d986b", "html_url": "https://github.com/rust-lang/rust/commit/fe9b4550061b7593a5324ed2cbcc8e86bf6d986b"}], "stats": {"total": 348, "additions": 107, "deletions": 241}, "files": [{"sha": "004000e70ea73d84a8c2c84a24bc6cf59fbf1bd9", "filename": "benches/fibonacci_helper.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Ffibonacci_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Ffibonacci_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,7 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(unused_attributes)]\n-\n-#[miri_run]\n #[inline(never)]\n pub fn main() {\n     assert_eq!(fib(10), 55);"}, {"sha": "59283be4820f718e0007d71b216a6ea1a3a1f4e5", "filename": "benches/fibonacci_helper_iterative.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Ffibonacci_helper_iterative.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Ffibonacci_helper_iterative.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Ffibonacci_helper_iterative.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,7 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(unused_attributes)]\n-\n-#[miri_run]\n #[inline(never)]\n pub fn main() {\n     assert_eq!(fib(10), 55);"}, {"sha": "ef05b044cddded92cdb5182e2265fe513d1c175e", "filename": "benches/smoke_helper.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Fsmoke_helper.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/benches%2Fsmoke_helper.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/benches%2Fsmoke_helper.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,7 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(unused_attributes)]\n-\n-#[miri_run]\n #[inline(never)]\n pub fn main() {\n }"}, {"sha": "f1e9714ff39d13017c3283ee86f3bd12fb3850c7", "filename": "src/bin/miri.rs", "status": "modified", "additions": 32, "deletions": 41, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/src%2Fbin%2Fmiri.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/src%2Fbin%2Fmiri.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbin%2Fmiri.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -20,7 +20,10 @@ use rustc::session::Session;\n use rustc_driver::{driver, CompilerCalls};\n use rustc::ty::{TyCtxt, subst};\n use rustc::mir::mir_map::MirMap;\n+use rustc::mir::repr::Mir;\n use rustc::hir::def_id::DefId;\n+use rustc::hir::{map, ItemFn, Item};\n+use syntax::codemap::Span;\n \n struct MiriCompilerCalls;\n \n@@ -34,58 +37,46 @@ impl<'a> CompilerCalls<'a> for MiriCompilerCalls {\n \n         control.after_analysis.callback = Box::new(|state| {\n             state.session.abort_if_errors();\n-            interpret_start_points(state.tcx.unwrap(), state.mir_map.unwrap());\n+\n+            let tcx = state.tcx.unwrap();\n+            let mir_map = state.mir_map.unwrap();\n+            let (span, mir, def_id) = get_main(tcx, mir_map);\n+            println!(\"found `main` function at: {:?}\", span);\n+\n+            let mut ecx = EvalContext::new(tcx, mir_map);\n+            let substs = tcx.mk_substs(subst::Substs::empty());\n+            let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs).expect(\"main function should not be diverging\");\n+\n+            ecx.push_stack_frame(def_id, mir.span, CachedMir::Ref(mir), substs, Some(return_ptr));\n+\n+            loop {\n+                match step(&mut ecx) {\n+                    Ok(true) => {}\n+                    Ok(false) => break,\n+                    // FIXME: diverging functions can end up here in some future miri\n+                    Err(e) => {\n+                        report(tcx, &ecx, e);\n+                        break;\n+                    }\n+                }\n+            }\n         });\n \n         control\n     }\n }\n \n-\n-\n-fn interpret_start_points<'a, 'tcx>(\n-    tcx: TyCtxt<'a, 'tcx, 'tcx>,\n-    mir_map: &MirMap<'tcx>,\n-) {\n-    let initial_indentation = ::log_settings::settings().indentation;\n+fn get_main<'a, 'b, 'tcx: 'b>(tcx: TyCtxt<'a, 'tcx, 'tcx>, mir_map: &'b MirMap<'tcx>) -> (Span, &'b Mir<'tcx>, DefId) {\n     for (&id, mir) in &mir_map.map {\n-        for attr in tcx.map.attrs(id) {\n-            use syntax::attr::AttrMetaMethods;\n-            if attr.check_name(\"miri_run\") {\n-                let item = tcx.map.expect_item(id);\n-\n-                ::log_settings::settings().indentation = initial_indentation;\n-\n-                debug!(\"Interpreting: {}\", item.name);\n-\n-                let mut ecx = EvalContext::new(tcx, mir_map);\n-                let substs = tcx.mk_substs(subst::Substs::empty());\n-                let return_ptr = ecx.alloc_ret_ptr(mir.return_ty, substs);\n-\n-                ecx.push_stack_frame(tcx.map.local_def_id(id), mir.span, CachedMir::Ref(mir), substs, return_ptr);\n-\n-                loop {\n-                    match step(&mut ecx) {\n-                        Ok(true) => {}\n-                        Ok(false) => {\n-                            match return_ptr {\n-                                Some(ptr) => if log_enabled!(::log::LogLevel::Debug) {\n-                                    ecx.memory().dump(ptr.alloc_id);\n-                                },\n-                                None => warn!(\"diverging function returned\"),\n-                            }\n-                            break;\n-                        }\n-                        // FIXME: diverging functions can end up here in some future miri\n-                        Err(e) => {\n-                            report(tcx, &ecx, e);\n-                            break;\n-                        }\n-                    }\n+        if let map::Node::NodeItem(&Item { name, span, ref node, .. }) = tcx.map.get(id) {\n+            if let ItemFn(..) = *node {\n+                if name.as_str() == \"main\" {\n+                    return (span, mir, tcx.map.local_def_id(id));\n                 }\n             }\n         }\n     }\n+    panic!(\"no main function found\");\n }\n \n fn report(tcx: TyCtxt, ecx: &EvalContext, e: EvalError) {"}, {"sha": "0ede7c96f004717d2224bbf9f10a1f1896af63a7", "filename": "tests/compile-fail/dangling_pointer_deref.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fdangling_pointer_deref.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,8 @@\n+fn main() {\n+    let p = {\n+        let b = Box::new(42);\n+        &*b as *const i32\n+    };\n+    let x = unsafe { *p }; //~ ERROR: dangling pointer was dereferenced\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "c1eaf7eaa61d284c1ddb463375b389b752e5f513", "filename": "tests/compile-fail/deref_fn_ptr.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fderef_fn_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fderef_fn_ptr.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,13 +1,8 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n fn f() {}\n \n-#[miri_run]\n-fn deref_fn_ptr() -> i32 {\n-    unsafe {\n+fn main() {\n+    let x: i32 = unsafe {\n         *std::mem::transmute::<fn(), *const i32>(f) //~ ERROR: tried to dereference a function pointer\n-    }\n+    };\n+    panic!(\"this should never print: {}\", x);\n }\n-\n-fn main() {}"}, {"sha": "0cadd76cccf34e864b18ffdf46273c840759d502", "filename": "tests/compile-fail/errors.rs", "status": "removed", "additions": 0, "deletions": 62, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/fe9b4550061b7593a5324ed2cbcc8e86bf6d986b/tests%2Fcompile-fail%2Ferrors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe9b4550061b7593a5324ed2cbcc8e86bf6d986b/tests%2Fcompile-fail%2Ferrors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ferrors.rs?ref=fe9b4550061b7593a5324ed2cbcc8e86bf6d986b", "patch": "@@ -1,62 +0,0 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n-fn overwriting_part_of_relocation_makes_the_rest_undefined() -> i32 {\n-    let mut p = &42;\n-    unsafe {\n-        let ptr: *mut _ = &mut p;\n-        *(ptr as *mut u8) = 123; // if we ever support 8 bit pointers, this is gonna cause\n-        // \"attempted to interpret some raw bytes as a pointer address\" instead of\n-        // \"attempted to read undefined bytes\"\n-    }\n-    *p //~ ERROR: attempted to read undefined bytes\n-}\n-\n-#[miri_run]\n-fn pointers_to_different_allocations_are_unorderable() -> bool {\n-    let x: *const u8 = &1;\n-    let y: *const u8 = &2;\n-    x < y //~ ERROR: attempted to do math or a comparison on pointers into different allocations\n-}\n-\n-#[miri_run]\n-fn invalid_bool() -> u8 {\n-    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n-    if b { 1 } else { 2 } //~ ERROR: invalid boolean value read\n-}\n-\n-#[miri_run]\n-fn undefined_byte_read() -> u8 {\n-    let v: Vec<u8> = Vec::with_capacity(10);\n-    let undef = unsafe { *v.get_unchecked(5) };\n-    undef + 1 //~ ERROR: attempted to read undefined bytes\n-}\n-\n-#[miri_run]\n-fn out_of_bounds_read() -> u8 {\n-    let v: Vec<u8> = vec![1, 2];\n-    unsafe { *v.get_unchecked(5) } //~ ERROR: memory access of 5..6 outside bounds of allocation 11 which has size 2\n-}\n-\n-#[miri_run]\n-fn dangling_pointer_deref() -> i32 {\n-    let p = {\n-        let b = Box::new(42);\n-        &*b as *const i32\n-    };\n-    unsafe { *p } //~ ERROR: dangling pointer was dereferenced\n-}\n-\n-#[miri_run]\n-fn wild_pointer_deref() -> i32 {\n-    let p = 42 as *const i32;\n-    unsafe { *p } //~ ERROR: attempted to interpret some raw bytes as a pointer address\n-}\n-\n-#[miri_run]\n-fn null_pointer_deref() -> i32 {\n-    unsafe { *std::ptr::null() } //~ ERROR: attempted to interpret some raw bytes as a pointer address\n-}\n-\n-fn main() {}"}, {"sha": "413c6602114ba37ef6f39fd2cde84c211d838519", "filename": "tests/compile-fail/execute_memory.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fexecute_memory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fexecute_memory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fexecute_memory.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,14 +1,10 @@\n-#![feature(custom_attribute, box_syntax)]\n-#![allow(dead_code, unused_attributes)]\n+#![feature(box_syntax)]\n \n-#[miri_run]\n-fn deref_fn_ptr() {\n+fn main() {\n     //FIXME: this span is wrong\n     let x = box 42; //~ ERROR: tried to treat a memory pointer as a function pointer\n     unsafe {\n         let f = std::mem::transmute::<Box<i32>, fn()>(x);\n         f()\n     }\n }\n-\n-fn main() {}"}, {"sha": "9de2630797ece3415241ad08e0226375f3fd9cc9", "filename": "tests/compile-fail/invalid_bool.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Finvalid_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Finvalid_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Finvalid_bool.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let b = unsafe { std::mem::transmute::<u8, bool>(2) };\n+    if b { unreachable!() } else { unreachable!() } //~ ERROR: invalid boolean value read\n+}"}, {"sha": "3d1afe92156180981a7d9b3208d6d00db96d6e91", "filename": "tests/compile-fail/null_pointer_deref.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fnull_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fnull_pointer_deref.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,4 @@\n+fn main() {\n+    let x: i32 = unsafe { *std::ptr::null() }; //~ ERROR: attempted to interpret some raw bytes as a pointer address\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "3e9e87cdc6c9e460397221780b55ae1d706b914a", "filename": "tests/compile-fail/out_of_bounds_read.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fout_of_bounds_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fout_of_bounds_read.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let v: Vec<u8> = vec![1, 2];\n+    let x = unsafe { *v.get_unchecked(5) }; //~ ERROR: memory access of 5..6 outside bounds of allocation 29 which has size 2\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "50f51d0ba9cad066a94b634cffc2aaf23b20a98e", "filename": "tests/compile-fail/overwriting_part_of_relocation_makes_the_rest_undefined.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Foverwriting_part_of_relocation_makes_the_rest_undefined.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,11 @@\n+fn main() {\n+    let mut p = &42;\n+    unsafe {\n+        let ptr: *mut _ = &mut p;\n+        *(ptr as *mut u8) = 123; // if we ever support 8 bit pointers, this is gonna cause\n+        // \"attempted to interpret some raw bytes as a pointer address\" instead of\n+        // \"attempted to read undefined bytes\"\n+    }\n+    let x = *p; //~ ERROR: attempted to read undefined bytes\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "be478c8213246625e38a73f47c12d5aa69a0ef60", "filename": "tests/compile-fail/pointers_to_different_allocations_are_unorderable.rs", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fpointers_to_different_allocations_are_unorderable.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,7 @@\n+fn main() {\n+    let x: *const u8 = &1;\n+    let y: *const u8 = &2;\n+    if x < y { //~ ERROR: attempted to do math or a comparison on pointers into different allocations\n+        unreachable!()\n+    }\n+}"}, {"sha": "f8b6f7f4aec13331b47a245ee6b7cba2d73c9083", "filename": "tests/compile-fail/undefined_byte_read.rs", "status": "added", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fundefined_byte_read.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fundefined_byte_read.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,6 @@\n+fn main() {\n+    let v: Vec<u8> = Vec::with_capacity(10);\n+    let undef = unsafe { *v.get_unchecked(5) };\n+    let x = undef + 1; //~ ERROR: attempted to read undefined bytes\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "9611631a47a3bc0f4fff5103e347f07ea0568b5f", "filename": "tests/compile-fail/unimplemented.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Funimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Funimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funimplemented.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,12 +1,5 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n //error-pattern:begin_panic_fmt\n \n-\n-#[miri_run]\n-fn failed_assertions() {\n+fn main() {\n     assert_eq!(5, 6);\n }\n-\n-fn main() {}"}, {"sha": "1f472489b4fca40c0aa9a10fb01b5c39e0204714", "filename": "tests/compile-fail/wild_pointer_deref.rs", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompile-fail%2Fwild_pointer_deref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwild_pointer_deref.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -0,0 +1,5 @@\n+fn main() {\n+    let p = 42 as *const i32;\n+    let x = unsafe { *p }; //~ ERROR: attempted to interpret some raw bytes as a pointer address\n+    panic!(\"this should never print: {}\", x);\n+}"}, {"sha": "0619c5a76561754d10e141bba37d3c6f029a486f", "filename": "tests/compiletest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -15,7 +15,7 @@ fn run_mode(mode: &'static str) {\n             .expect(\"need to specify RUST_SYSROOT env var or use rustup or multirust\")\n             .to_owned(),\n     };\n-    let sysroot_flag = format!(\"--sysroot {}\", sysroot);\n+    let sysroot_flag = format!(\"--sysroot {} -Dwarnings\", sysroot);\n \n     // FIXME: read directories in sysroot/lib/rustlib and generate the test targets from that\n     let targets = &[\"x86_64-unknown-linux-gnu\", \"i686-unknown-linux-gnu\"];"}, {"sha": "469dde3091eb25993c7b4d69bc5f4fb12f437444", "filename": "tests/run-pass/arrays.rs", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Farrays.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Farrays.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Farrays.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,50 +1,38 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn empty_array() -> [u16; 0] {\n     []\n }\n \n-#[miri_run]\n fn mini_array() -> [u16; 1] {\n     [42]\n }\n \n-#[miri_run]\n fn big_array() -> [u16; 5] {\n     [5, 4, 3, 2, 1]\n }\n \n-#[miri_run]\n fn array_array() -> [[u8; 2]; 3] {\n     [[5, 4], [3, 2], [1, 0]]\n }\n \n-#[miri_run]\n fn index_unsafe() -> i32 {\n     let a = [0, 10, 20, 30];\n     unsafe { *a.get_unchecked(2) }\n }\n \n-#[miri_run]\n fn index() -> i32 {\n     let a = [0, 10, 20, 30];\n     a[2]\n }\n \n-#[miri_run]\n fn array_repeat() -> [u8; 8] {\n     [42; 8]\n }\n \n-#[miri_run]\n fn slice_index() -> u8 {\n     let arr: &[_] = &[101, 102, 103, 104, 105, 106];\n     arr[5]\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(empty_array(), []);\n     assert_eq!(index_unsafe(), 20);\n@@ -53,4 +41,5 @@ fn main() {\n     assert_eq!(big_array(), [5, 4, 3, 2, 1]);\n     assert_eq!(array_array(), [[5, 4], [3, 2], [1, 0]]);\n     assert_eq!(array_repeat(), [42; 8]);\n+    assert_eq!(mini_array(), [42]);\n }"}, {"sha": "103d7eac27cde9971a0b8dd22ca5beee487db430", "filename": "tests/run-pass/bools.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fbools.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fbools.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbools.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,24 +1,17 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn boolean() -> bool {\n     true\n }\n \n-#[miri_run]\n fn if_false() -> i64 {\n     let c = false;\n     if c { 1 } else { 0 }\n }\n \n-#[miri_run]\n fn if_true() -> i64 {\n     let c = true;\n     if c { 1 } else { 0 }\n }\n \n-#[miri_run]\n fn match_bool() -> i16 {\n     let b = true;\n     match b {\n@@ -27,7 +20,6 @@ fn match_bool() -> i16 {\n     }\n }\n \n-#[miri_run]\n fn main() {\n     assert!(boolean());\n     assert_eq!(if_false(), 0);"}, {"sha": "a68f727322e29910d4b72f01939dbcb02058189c", "filename": "tests/run-pass/bug.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fbug.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fbug.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fbug.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,14 +1,8 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n static mut X: usize = 5;\n \n-#[miri_run]\n-fn static_mut() {\n+fn main() {\n     unsafe {\n         X = 6;\n         assert_eq!(X, 6);\n     }\n }\n-\n-fn main() {}"}, {"sha": "11897b73eb2ada620f0066518bdb78c471875c16", "filename": "tests/run-pass/c_enums.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fc_enums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fc_enums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fc_enums.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,6 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n enum Foo {\n     Bar = 42,\n     Baz,\n@@ -13,25 +10,21 @@ enum Signed {\n     Quux = 100,\n }\n \n-#[miri_run]\n fn foo() -> [u8; 3] {\n     [Foo::Bar as u8, Foo::Baz as u8, Foo::Quux as u8]\n }\n \n-#[miri_run]\n fn signed() -> [i8; 3] {\n     [Signed::Bar as i8, Signed::Baz as i8, Signed::Quux as i8]\n }\n \n-#[miri_run]\n fn unsafe_match() -> bool {\n     match unsafe { std::mem::transmute::<u8, Foo>(43) } {\n         Foo::Baz => true,\n         _ => false,\n     }\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(foo(), [42, 43, 100]);\n     assert_eq!(signed(), [-42, -41, 100]);"}, {"sha": "c4ba4a9b701ff08ede7e8052aa4733bed92b3b08", "filename": "tests/run-pass/calls.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fcalls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fcalls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fcalls.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,15 +1,12 @@\n-#![feature(custom_attribute, const_fn)]\n-#![allow(dead_code, unused_attributes)]\n+#![feature(const_fn)]\n \n-#[miri_run]\n fn call() -> i32 {\n     fn increment(x: i32) -> i32 {\n         x + 1\n     }\n     increment(1)\n }\n \n-#[miri_run]\n fn factorial_recursive() -> i64 {\n     fn fact(n: i64) -> i64 {\n         if n == 0 {\n@@ -21,31 +18,28 @@ fn factorial_recursive() -> i64 {\n     fact(10)\n }\n \n-#[miri_run]\n fn call_generic() -> (i16, bool) {\n     fn id<T>(t: T) -> T { t }\n     (id(42), id(true))\n }\n \n // Test calling a very simple function from the standard library.\n-#[miri_run]\n fn cross_crate_fn_call() -> i64 {\n     if 1i32.is_positive() { 1 } else { 0 }\n }\n \n const fn foo(i: i64) -> i64 { *&i + 1 }\n \n-#[miri_run]\n fn const_fn_call() -> i64 {\n     let x = 5 + foo(5);\n     assert_eq!(x, 11);\n     x\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(call(), 2);\n     assert_eq!(factorial_recursive(), 3628800);\n     assert_eq!(call_generic(), (42, true));\n     assert_eq!(cross_crate_fn_call(), 1);\n+    assert_eq!(const_fn_call(), 11);\n }"}, {"sha": "8361a58ea4302082bb19cdae7c5cb6a240582e01", "filename": "tests/run-pass/function_pointers.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Ffunction_pointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Ffunction_pointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Ffunction_pointers.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,6 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n fn f() -> i32 {\n     42\n }\n@@ -9,9 +6,10 @@ fn return_fn_ptr() -> fn() -> i32 {\n     f\n }\n \n-#[miri_run]\n fn call_fn_ptr() -> i32 {\n     return_fn_ptr()()\n }\n \n-fn main() {}\n+fn main() {\n+    assert_eq!(call_fn_ptr(), 42);\n+}"}, {"sha": "b533f916469881a96c23657ea33f4d65f6e2d218", "filename": "tests/run-pass/heap.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fheap.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,17 +1,13 @@\n-#![feature(custom_attribute, box_syntax)]\n-#![allow(dead_code, unused_attributes)]\n+#![feature(box_syntax)]\n \n-#[miri_run]\n fn make_box() -> Box<(i16, i16)> {\n     Box::new((1, 2))\n }\n \n-#[miri_run]\n fn make_box_syntax() -> Box<(i16, i16)> {\n     box (1, 2)\n }\n \n-#[miri_run]\n fn allocate_reallocate() {\n     let mut s = String::new();\n \n@@ -31,8 +27,8 @@ fn allocate_reallocate() {\n     assert_eq!(s.capacity(), 9);\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(*make_box(), (1, 2));\n     assert_eq!(*make_box_syntax(), (1, 2));\n+    allocate_reallocate();\n }"}, {"sha": "3152737a601ca01648e553d93d6a2c8fecc7feae", "filename": "tests/run-pass/intrinsics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fintrinsics.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,9 +1,5 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n use std::mem::{size_of, size_of_val};\n \n-#[miri_run]\n fn main() {\n     assert_eq!(size_of::<Option<i32>>(), 8);\n     assert_eq!(size_of_val(&()), 0);"}, {"sha": "222287cbe09adcf4ad2936ca28ff72baebdbf82f", "filename": "tests/run-pass/loops.rs", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Floops.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,7 +1,3 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn factorial_loop() -> i64 {\n     let mut product = 1;\n     let mut i = 1;\n@@ -14,7 +10,6 @@ fn factorial_loop() -> i64 {\n     product\n }\n \n-#[miri_run]\n fn index_for_loop() -> usize {\n     let mut sum = 0;\n     let a = [0, 10, 20, 30];\n@@ -24,7 +19,6 @@ fn index_for_loop() -> usize {\n     sum\n }\n \n-#[miri_run]\n fn for_loop() -> usize {\n     let mut sum = 0;\n     let a = [0, 10, 20, 30];\n@@ -34,7 +28,6 @@ fn for_loop() -> usize {\n     sum\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(factorial_loop(), 3628800);\n     assert_eq!(index_for_loop(), 60);"}, {"sha": "2ef7eb0102f1950cf4438cc2c1ab2a1f28be6f43", "filename": "tests/run-pass/pointers.rs", "status": "modified", "additions": 0, "deletions": 11, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fpointers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fpointers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fpointers.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,25 +1,18 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn one_line_ref() -> i16 {\n     *&1\n }\n \n-#[miri_run]\n fn basic_ref() -> i16 {\n     let x = &1;\n     *x\n }\n \n-#[miri_run]\n fn basic_ref_mut() -> i16 {\n     let x = &mut 1;\n     *x += 2;\n     *x\n }\n \n-#[miri_run]\n fn basic_ref_mut_var() -> i16 {\n     let mut a = 1;\n     {\n@@ -29,7 +22,6 @@ fn basic_ref_mut_var() -> i16 {\n     a\n }\n \n-#[miri_run]\n fn tuple_ref_mut() -> (i8, i8) {\n     let mut t = (10, 20);\n     {\n@@ -39,7 +31,6 @@ fn tuple_ref_mut() -> (i8, i8) {\n     t\n }\n \n-#[miri_run]\n fn match_ref_mut() -> i8 {\n     let mut t = (20, 22);\n     {\n@@ -52,13 +43,11 @@ fn match_ref_mut() -> i8 {\n     t.0\n }\n \n-#[miri_run]\n fn dangling_pointer() -> *const i32 {\n     let b = Box::new(42);\n     &*b as *const i32\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(one_line_ref(), 1);\n     assert_eq!(basic_ref(), 1);"}, {"sha": "2e65550b07bf893f24c21d3a1676f93b4f9b9fdc", "filename": "tests/run-pass/std.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fstd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fstd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fstd.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,11 +1,7 @@\n-#![feature(custom_attribute, box_syntax)]\n-#![allow(dead_code, unused_attributes)]\n-\n-use std::cell::{Cell, RefCell};\n+use std::cell::Cell;\n use std::rc::Rc;\n use std::sync::Arc;\n \n-#[miri_run]\n fn rc_cell() -> Rc<Cell<i32>> {\n     let r = Rc::new(Cell::new(42));\n     let x = r.get();\n@@ -15,27 +11,24 @@ fn rc_cell() -> Rc<Cell<i32>> {\n \n // TODO(solson): also requires destructors to run for the second borrow to work\n // TODO(solson): needs StructWrappedNullablePointer support\n-// #[miri_run]\n // fn rc_refcell() -> i32 {\n //     let r = Rc::new(RefCell::new(42));\n //     *r.borrow_mut() += 10;\n //     let x = *r.borrow();\n //     x\n // }\n \n-#[miri_run]\n fn arc() -> Arc<i32> {\n     let a = Arc::new(42);\n     a\n }\n \n-#[miri_run]\n fn true_assert() {\n     assert_eq!(1, 1);\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(*arc(), 42);\n     assert_eq!(rc_cell().get(), 84);\n+    true_assert();\n }"}, {"sha": "adf4e8f987d32e0291c2752effd3682e4569ce51", "filename": "tests/run-pass/sums.rs", "status": "modified", "additions": 4, "deletions": 9, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fsums.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fsums.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fsums.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -4,35 +4,29 @@\n #[derive(Debug, PartialEq)]\n enum Unit { Unit(()) } // Force non-C-enum representation.\n \n-#[miri_run]\n fn return_unit() -> Unit {\n     Unit::Unit(())\n }\n \n #[derive(Debug, PartialEq)]\n enum MyBool { False(()), True(()) } // Force non-C-enum representation.\n \n-#[miri_run]\n fn return_true() -> MyBool {\n     MyBool::True(())\n }\n \n-#[miri_run]\n fn return_false() -> MyBool {\n     MyBool::False(())\n }\n \n-#[miri_run]\n fn return_none() -> Option<i64> {\n     None\n }\n \n-#[miri_run]\n fn return_some() -> Option<i64> {\n     Some(42)\n }\n \n-#[miri_run]\n fn match_opt_none() -> i8 {\n     let x = None;\n     match x {\n@@ -41,7 +35,6 @@ fn match_opt_none() -> i8 {\n     }\n }\n \n-#[miri_run]\n fn match_opt_some() -> i8 {\n     let x = Some(13);\n     match x {\n@@ -50,13 +43,12 @@ fn match_opt_some() -> i8 {\n     }\n }\n \n-#[miri_run]\n fn two_nones() -> (Option<i16>, Option<i16>) {\n     (None, None)\n }\n \n // FIXME(solson): Casts inside PartialEq fails on 32-bit.\n-#[cfg_attr(target_pointer_width = \"64\", miri_run)]\n+#[cfg(target_pointer_width = \"64\")]\n fn main() {\n     assert_eq!(two_nones(), (None, None));\n     assert_eq!(match_opt_some(), 13);\n@@ -67,3 +59,6 @@ fn main() {\n     assert_eq!(return_true(), MyBool::True(()));\n     assert_eq!(return_unit(), Unit::Unit(()));\n }\n+\n+#[cfg(not(target_pointer_width = \"64\"))]\n+fn main() {}"}, {"sha": "b3a88014e6f9a08f72383b650f3b6970e33d74e9", "filename": "tests/run-pass/vecs.rs", "status": "modified", "additions": 2, "deletions": 9, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fvecs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55fd060cd885023f918f4e5c5f910523fa7dfd52/tests%2Frun-pass%2Fvecs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Frun-pass%2Fvecs.rs?ref=55fd060cd885023f918f4e5c5f910523fa7dfd52", "patch": "@@ -1,33 +1,25 @@\n-#![feature(custom_attribute)]\n-#![allow(dead_code, unused_attributes)]\n-\n-#[miri_run]\n fn make_vec() -> Vec<u8> {\n     let mut v = Vec::with_capacity(4);\n     v.push(1);\n     v.push(2);\n     v\n }\n \n-#[miri_run]\n fn make_vec_macro() -> Vec<u8> {\n     vec![1, 2]\n }\n \n-#[miri_run]\n fn make_vec_macro_repeat() -> Vec<u8> {\n     vec![42; 5]\n }\n \n-#[miri_run]\n fn vec_into_iter() -> u8 {\n     vec![1, 2, 3, 4]\n         .into_iter()\n         .map(|x| x * x)\n         .fold(0, |x, y| x + y)\n }\n \n-#[miri_run]\n fn vec_reallocate() -> Vec<u8> {\n     let mut v = vec![1, 2];\n     v.push(3);\n@@ -36,9 +28,10 @@ fn vec_reallocate() -> Vec<u8> {\n     v\n }\n \n-#[miri_run]\n fn main() {\n     assert_eq!(vec_reallocate().len(), 5);\n     assert_eq!(vec_into_iter(), 30);\n     assert_eq!(make_vec().capacity(), 4);\n+    assert_eq!(make_vec_macro(), [1, 2]);\n+    assert_eq!(make_vec_macro_repeat(), [42; 5]);\n }"}]}