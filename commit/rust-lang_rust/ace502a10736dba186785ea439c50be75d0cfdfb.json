{"sha": "ace502a10736dba186785ea439c50be75d0cfdfb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFjZTUwMmExMDczNmRiYTE4Njc4NWVhNDM5YzUwYmU3NWQwY2ZkZmI=", "commit": {"author": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-04T11:40:11Z"}, "committer": {"name": "bjorn3", "email": "bjorn3@users.noreply.github.com", "date": "2018-01-19T19:27:35Z"}, "message": "Fix review comments", "tree": {"sha": "66942bbd5cd4ae95eae3036d11699dc822a812f8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/66942bbd5cd4ae95eae3036d11699dc822a812f8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ace502a10736dba186785ea439c50be75d0cfdfb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ace502a10736dba186785ea439c50be75d0cfdfb", "html_url": "https://github.com/rust-lang/rust/commit/ace502a10736dba186785ea439c50be75d0cfdfb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ace502a10736dba186785ea439c50be75d0cfdfb/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2d241f66fef30b27fad377ed49fe978541ac0ed8", "url": "https://api.github.com/repos/rust-lang/rust/commits/2d241f66fef30b27fad377ed49fe978541ac0ed8", "html_url": "https://github.com/rust-lang/rust/commit/2d241f66fef30b27fad377ed49fe978541ac0ed8"}], "stats": {"total": 122, "additions": 84, "deletions": 38}, "files": [{"sha": "14d14ab591e3a59dea0cee114de4f5af8790ceb3", "filename": "src/librustc_driver/lib.rs", "status": "modified", "additions": 78, "deletions": 3, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_driver%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_driver%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Flib.rs?ref=ace502a10736dba186785ea439c50be75d0cfdfb", "patch": "@@ -189,6 +189,81 @@ pub mod rustc_trans {\n     pub fn print_passes() {}\n }\n \n+fn load_backend_from_dylib(sess: &Session, backend_name: &str) -> Box<TransCrate> {\n+    use std::sync::mpsc;\n+    use std::path::Path;\n+    use syntax::symbol::Symbol;\n+    use rustc::session::config::OutputFilenames;\n+    use rustc::ty::TyCtxt;\n+    use rustc::ty::maps::Providers;\n+    use rustc::middle::cstore::MetadataLoader;\n+    use rustc::dep_graph::DepGraph;\n+    use rustc_metadata::dynamic_lib::DynamicLibrary;\n+    /// This prevents the dylib from being unloaded when there is still a TransCrate open\n+    struct ExternTransCrate {\n+        _lib: DynamicLibrary,\n+        trans: Box<TransCrate>,\n+    }\n+    impl TransCrate for ExternTransCrate {\n+        fn print(&self, req: PrintRequest, sess: &Session) {\n+            self.trans.print(req, sess);\n+        }\n+        fn target_features(&self, sess: &Session) -> Vec<Symbol> {\n+            self.trans.target_features((sess))\n+        }\n+\n+        fn metadata_loader(&self) -> Box<MetadataLoader> {\n+            self.trans.metadata_loader()\n+        }\n+        fn provide(&self, providers: &mut Providers) {\n+            self.trans.provide(providers)\n+        }\n+        fn provide_extern(&self, providers: &mut Providers) {\n+            self.trans.provide_extern(providers)\n+        }\n+        fn trans_crate<'a, 'tcx>(\n+            &self,\n+            tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+            rx: mpsc::Receiver<Box<Any + Send>>\n+        ) -> Box<Any> {\n+            self.trans.trans_crate(tcx, rx)\n+        }\n+\n+        fn join_trans_and_link(\n+            &self,\n+            trans: Box<Any>,\n+            sess: &Session,\n+            dep_graph: &DepGraph,\n+            outputs: &OutputFilenames,\n+        ) -> Result<(), CompileIncomplete> {\n+            self.trans.join_trans_and_link(trans, sess, dep_graph, outputs)\n+        }\n+    }\n+\n+    match DynamicLibrary::open(Some(Path::new(backend_name))) {\n+        Ok(lib) => {\n+            unsafe {\n+                let trans = {\n+                    let __rustc_codegen_backend: unsafe fn(&Session) -> Box<TransCrate>;\n+                    __rustc_codegen_backend = match lib.symbol(\"__rustc_codegen_backend\") {\n+                        Ok(f) => ::std::mem::transmute::<*mut u8, _>(f),\n+                        Err(e) => sess.fatal(&format!(\"Couldnt load codegen backend as it\\\n+                        doesn't export the __rustc_backend_new symbol: {:?}\", e)),\n+                    };\n+                    __rustc_codegen_backend(sess)\n+                };\n+                Box::new(ExternTransCrate {\n+                    _lib: lib,\n+                    trans\n+                })\n+            }\n+        }\n+        Err(err) => {\n+            sess.fatal(&format!(\"Couldnt load codegen backend {:?}: {:?}\", backend_name, err));\n+        }\n+    }\n+}\n+\n pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n     let trans_name = sess.opts.debugging_opts.codegen_backend.clone();\n     match trans_name.as_ref().map(|s|&**s) {\n@@ -197,10 +272,10 @@ pub fn get_trans(sess: &Session) -> Box<TransCrate> {\n         Some(\"metadata_only\") => {\n             rustc_trans_utils::trans_crate::MetadataOnlyTransCrate::new(&sess)\n         }\n-        Some(filename) if filename.starts_with(\"/\") => {\n-            rustc_trans_utils::trans_crate::link_extern_backend(&sess, filename)\n+        Some(filename) if filename.contains(\".\") => {\n+            load_backend_from_dylib(&sess, &filename)\n         }\n-        Some(trans_name) => sess.fatal(&format!(\"Invalid trans {}\", trans_name)),\n+        Some(trans_name) => sess.fatal(&format!(\"Unknown codegen backend {}\", trans_name)),\n     }\n }\n "}, {"sha": "a2a7d0df2a94cb8aa2f36042ad7c1c273e7ad356", "filename": "src/librustc_trans/lib.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Flib.rs?ref=ace502a10736dba186785ea439c50be75d0cfdfb", "patch": "@@ -56,7 +56,6 @@ extern crate rustc_demangle;\n extern crate rustc_incremental;\n extern crate rustc_llvm as llvm;\n extern crate rustc_platform_intrinsics as intrinsics;\n-#[macro_use]\n extern crate rustc_trans_utils;\n \n #[macro_use] extern crate log;\n@@ -251,7 +250,11 @@ impl TransCrate for LlvmTransCrate {\n     }\n }\n \n-hot_pluggable_trans_crate!(|sess| { LlvmTransCrate::new(sess) });\n+/// This is the entrypoint for a hot plugged rustc_trans\n+#[no_mangle]\n+pub extern \"C\" fn __rustc_codegen_backend(sess: &Session) -> Box<TransCrate> {\n+    LlvmTransCrate::new(sess)\n+}\n \n struct ModuleTranslation {\n     /// The name of the module. When the crate may be saved between"}, {"sha": "bfecb2019836656db67549a56e04bd032d638f37", "filename": "src/librustc_trans_utils/lib.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans_utils%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans_utils%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Flib.rs?ref=ace502a10736dba186785ea439c50be75d0cfdfb", "patch": "@@ -31,7 +31,6 @@ extern crate ar;\n extern crate flate2;\n #[macro_use]\n extern crate log;\n-extern crate libloading;\n \n #[macro_use]\n extern crate rustc;\n@@ -53,7 +52,6 @@ use rustc::util::nodemap::NodeSet;\n \n pub mod diagnostics;\n pub mod link;\n-#[macro_export]\n pub mod trans_crate;\n pub mod symbol_names;\n pub mod symbol_names_test;"}, {"sha": "33adf24374a95d1a67b0f15542e29fd01552bb7b", "filename": "src/librustc_trans_utils/trans_crate.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ace502a10736dba186785ea439c50be75d0cfdfb/src%2Flibrustc_trans_utils%2Ftrans_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Ftrans_crate.rs?ref=ace502a10736dba186785ea439c50be75d0cfdfb", "patch": "@@ -24,7 +24,6 @@\n use std::any::Any;\n use std::io::prelude::*;\n use std::io::{self, Cursor};\n-use std::ffi::OsStr;\n use std::fs::File;\n use std::path::Path;\n use std::sync::mpsc;\n@@ -41,7 +40,7 @@ use rustc::session::config::{CrateType, OutputFilenames, PrintRequest};\n use rustc::ty::TyCtxt;\n use rustc::ty::maps::Providers;\n use rustc::middle::cstore::EncodedMetadata;\n-use rustc::middle::cstore::MetadataLoader as MetadataLoader;\n+use rustc::middle::cstore::MetadataLoader;\n use rustc::dep_graph::DepGraph;\n use rustc_back::target::Target;\n use rustc_mir::monomorphize::collector;\n@@ -74,35 +73,6 @@ pub trait TransCrate {\n     ) -> Result<(), CompileIncomplete>;\n }\n \n-#[macro_export]\n-macro_rules! hot_pluggable_trans_crate {\n-    (|$sess:ident| { $body:expr }) => {\n-        #[no_mangle]\n-        pub fn __rustc_backend_new($sess: &Session) -> Box<TransCrate> {\n-            { $body }\n-        }\n-    }\n-}\n-\n-pub fn link_extern_backend<P: AsRef<OsStr>>(sess: &Session, filename: P) -> Box<TransCrate> {\n-    use libloading::*;\n-    let filename = filename.as_ref();\n-    match Library::new(filename) {\n-        Ok(lib) => {\n-            unsafe {\n-                let __rustc_backend_new: Symbol<unsafe fn(&Session) -> Box<TransCrate>>;\n-                __rustc_backend_new = lib.get(b\"__rustc_backend_new\")\n-                    .expect(\"Couldnt load codegen backend as it\\\n-                    doesnt export the __rustc_backend_new symbol\");\n-                __rustc_backend_new(sess)\n-            }\n-        }\n-        Err(err) => {\n-            sess.fatal(&format!(\"Couldnt load codegen backend {:?}: {:?}\", filename, err));\n-        }\n-    }\n-}\n-\n pub struct DummyTransCrate;\n \n impl TransCrate for DummyTransCrate {"}]}