{"sha": "a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4ZjA3ZGM5ZGYyNGFmM2NmMDYxNzFiZmRlMWE2OGIzMDU4ZTJlYzU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-26T23:45:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-02-26T23:45:43Z"}, "message": "auto merge of #5104 : alexcrichton/rust/fix-unused-import-pub, r=catamorphism\n\nThe first commit fixes warnings about `pub use` imports because it can't be known whether those are actually used or not.\r\n\r\nThe second commit fixes using `#[level(unused_imports)]` style control over the emission of warnings. Before it looked like it only worked as a command-line flag.", "tree": {"sha": "b5ff82ea19138fc03f9786c761008dbfd2d53866", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ff82ea19138fc03f9786c761008dbfd2d53866"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "html_url": "https://github.com/rust-lang/rust/commit/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ded562e8364244c9c0da1d5f4dc97cd900b4fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ded562e8364244c9c0da1d5f4dc97cd900b4fe4", "html_url": "https://github.com/rust-lang/rust/commit/0ded562e8364244c9c0da1d5f4dc97cd900b4fe4"}, {"sha": "df481473dae024e522afd669646fa779d97c5e2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/df481473dae024e522afd669646fa779d97c5e2d", "html_url": "https://github.com/rust-lang/rust/commit/df481473dae024e522afd669646fa779d97c5e2d"}], "stats": {"total": 56, "additions": 29, "deletions": 27}, "files": [{"sha": "a4e4e4cdf24f4a8aea8b1577bc0b9e88840adb73", "filename": "doc/rust.md", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "patch": "@@ -1611,7 +1611,6 @@ The following are examples of structure expressions:\n # struct Point { x: float, y: float }\n # struct TuplePoint(float, float);\n # mod game { pub struct User { name: &str, age: uint, score: uint } }\n-# use game;\n Point {x: 10f, y: 20f};\n TuplePoint(10f, 20f);\n let u = game::User {name: \"Joe\", age: 35u, score: 100_000};"}, {"sha": "22d0ff8bf78a2bd41b5f60b3c59ad871715bf645", "filename": "doc/tutorial-tasks.md", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Ftutorial-tasks.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Ftutorial-tasks.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial-tasks.md?ref=a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "patch": "@@ -468,7 +468,6 @@ Here is the function that implements the child task:\n \n ~~~~\n # use std::comm::DuplexStream;\n-# use comm::{Port, Chan};\n fn stringifier(channel: &DuplexStream<~str, uint>) {\n     let mut value: uint;\n     loop {\n@@ -491,7 +490,6 @@ Here is the code for the parent task:\n \n ~~~~\n # use std::comm::DuplexStream;\n-# use comm::{Port, Chan};\n # use task::spawn;\n # fn stringifier(channel: &DuplexStream<~str, uint>) {\n #     let mut value: uint;"}, {"sha": "98ec9d1f5803760c04a6739eaf7e9992696760b2", "filename": "doc/tutorial.md", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "patch": "@@ -2270,7 +2270,9 @@ fn chicken_farmer() {\n     // The same, but name it `my_chicken`\n     use my_chicken = farm::chicken;\n     ...\n+# my_chicken();\n }\n+# chicken();\n # }\n ~~~\n "}, {"sha": "7058f802bc4a45921522a8a179e7eb510d046d11", "filename": "src/librustc/middle/resolve.rs", "status": "modified", "additions": 18, "deletions": 23, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/src%2Flibrustc%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fresolve.rs?ref=a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "patch": "@@ -19,6 +19,7 @@ use metadata::cstore::find_extern_mod_stmt_cnum;\n use metadata::decoder::{def_like, dl_def, dl_field, dl_impl};\n use middle::lang_items::LanguageItems;\n use middle::lint::{deny, allow, forbid, level, unused_imports, warn};\n+use middle::lint::{get_lint_level, get_lint_settings_level};\n use middle::pat_util::{pat_bindings};\n \n use core::cmp;\n@@ -508,16 +509,6 @@ pub impl Module {\n     }\n }\n \n-pub fn unused_import_lint_level(session: Session) -> level {\n-    for session.opts.lint_opts.each |lint_option_pair| {\n-        let (lint_type, lint_level) = *lint_option_pair;\n-        if lint_type == unused_imports {\n-            return lint_level;\n-        }\n-    }\n-    return allow;\n-}\n-\n // Records a possibly-private type definition.\n pub struct TypeNsDef {\n     privacy: Privacy,\n@@ -770,8 +761,6 @@ pub fn Resolver(session: Session,\n \n         graph_root: graph_root,\n \n-        unused_import_lint_level: unused_import_lint_level(session),\n-\n         trait_info: @HashMap(),\n         structs: @HashMap(),\n \n@@ -816,8 +805,6 @@ pub struct Resolver {\n \n     graph_root: @mut NameBindings,\n \n-    unused_import_lint_level: level,\n-\n     trait_info: @HashMap<def_id,@HashMap<ident,()>>,\n     structs: @HashMap<def_id,()>,\n \n@@ -5232,8 +5219,17 @@ pub impl Resolver {\n     // resolve data structures.\n     //\n \n+    fn unused_import_lint_level(@mut self, m: @mut Module) -> level {\n+        let settings = self.session.lint_settings;\n+        match m.def_id {\n+            Some(def) => get_lint_settings_level(settings, unused_imports,\n+                                                 def.node, def.node),\n+            None => get_lint_level(settings.default_settings, unused_imports)\n+        }\n+    }\n+\n     fn check_for_unused_imports_if_necessary(@mut self) {\n-        if self.unused_import_lint_level == allow {\n+        if self.unused_import_lint_level(self.current_module) == allow {\n             return;\n         }\n \n@@ -5285,12 +5281,15 @@ pub impl Resolver {\n         for module_.import_resolutions.each_value |&import_resolution| {\n             // Ignore dummy spans for things like automatically injected\n             // imports for the prelude, and also don't warn about the same\n-            // import statement being unused more than once.\n+            // import statement being unused more than once. Furthermore, if\n+            // the import is public, then we can't be sure whether it's unused\n+            // or not so don't warn about it.\n             if !import_resolution.state.used &&\n                     !import_resolution.state.warned &&\n-                    import_resolution.span != dummy_sp() {\n+                    import_resolution.span != dummy_sp() &&\n+                    import_resolution.privacy != Public {\n                 import_resolution.state.warned = true;\n-                match self.unused_import_lint_level {\n+                match self.unused_import_lint_level(module_) {\n                     warn => {\n                         self.session.span_warn(copy import_resolution.span,\n                                                ~\"unused import\");\n@@ -5299,11 +5298,7 @@ pub impl Resolver {\n                       self.session.span_err(copy import_resolution.span,\n                                             ~\"unused import\");\n                     }\n-                    allow => {\n-                      self.session.span_bug(copy import_resolution.span,\n-                                            ~\"shouldn't be here if lint \\\n-                                              is allowed\");\n-                    }\n+                    allow => ()\n                 }\n             }\n         }"}, {"sha": "7756f96b4703a5668ea1b1b3b5ac0513c65a952f", "filename": "src/test/compile-fail/unused-imports-warn.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8f07dc9df24af3cf06171bfde1a68b3058e2ec5/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funused-imports-warn.rs?ref=a8f07dc9df24af3cf06171bfde1a68b3058e2ec5", "patch": "@@ -8,7 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// compile-flags: -D unused-imports\n+#[deny(unused_imports)];\n \n use cal = bar::c::cc;\n \n@@ -31,11 +31,19 @@ mod foo {\n }\n \n mod bar {\n+    // Don't ignore on 'pub use' because we're not sure if it's used or not\n+    pub use core::cmp::Eq;\n+\n     pub mod c {\n         use foo::Point;\n         use foo::Square; //~ ERROR unused import\n         pub fn cc(p: Point) -> int { return 2 * (p.x + p.y); }\n     }\n+\n+    #[allow(unused_imports)]\n+    mod foo {\n+        use core::cmp::Eq;\n+    }\n }\n \n fn main() {"}]}