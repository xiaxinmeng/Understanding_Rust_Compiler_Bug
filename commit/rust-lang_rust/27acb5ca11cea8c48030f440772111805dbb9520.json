{"sha": "27acb5ca11cea8c48030f440772111805dbb9520", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI3YWNiNWNhMTFjZWE4YzQ4MDMwZjQ0MDc3MjExMTgwNWRiYjk1MjA=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-16T18:56:01Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2016-11-16T18:56:01Z"}, "message": "Add missing urls and improve internal doc representation", "tree": {"sha": "74e4b8ae140e8d0ff111967603731b1e945d95b6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/74e4b8ae140e8d0ff111967603731b1e945d95b6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/27acb5ca11cea8c48030f440772111805dbb9520", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/27acb5ca11cea8c48030f440772111805dbb9520", "html_url": "https://github.com/rust-lang/rust/commit/27acb5ca11cea8c48030f440772111805dbb9520", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/27acb5ca11cea8c48030f440772111805dbb9520/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "478c0d161498c9bd0ee89a7b205e7b2f2437f151", "url": "https://api.github.com/repos/rust-lang/rust/commits/478c0d161498c9bd0ee89a7b205e7b2f2437f151", "html_url": "https://github.com/rust-lang/rust/commit/478c0d161498c9bd0ee89a7b205e7b2f2437f151"}], "stats": {"total": 27, "additions": 21, "deletions": 6}, "files": [{"sha": "e85c95198c74b1a5b2f6a32c38a387513ac35310", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/27acb5ca11cea8c48030f440772111805dbb9520/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb5ca11cea8c48030f440772111805dbb9520/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=27acb5ca11cea8c48030f440772111805dbb9520", "patch": "@@ -176,8 +176,9 @@ impl Ipv4Addr {\n     /// Returns true for the special 'unspecified' address (0.0.0.0).\n     ///\n     /// This property is defined in _UNIX Network Programming, Second Edition_,\n-    /// W. Richard Stevens, p. 891; see also [ip7]\n-    /// [ip7][http://man7.org/linux/man-pages/man7/ip.7.html]\n+    /// W. Richard Stevens, p. 891; see also [ip7].\n+    ///\n+    /// [ip7]: (http://man7.org/linux/man-pages/man7/ip.7.html)\n     #[stable(feature = \"ip_shared\", since = \"1.12.0\")]\n     pub fn is_unspecified(&self) -> bool {\n         self.inner.s_addr == 0\n@@ -186,6 +187,7 @@ impl Ipv4Addr {\n     /// Returns true if this is a loopback address (127.0.0.0/8).\n     ///\n     /// This property is defined by [RFC 1122].\n+    ///\n     /// [RFC 1122]: https://tools.ietf.org/html/rfc1122\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n@@ -195,11 +197,12 @@ impl Ipv4Addr {\n     /// Returns true if this is a private address.\n     ///\n     /// The private address ranges are defined in [RFC 1918] and include:\n-    /// [RFC 1918]: https://tools.ietf.org/html/rfc1918\n     ///\n     ///  - 10.0.0.0/8\n     ///  - 172.16.0.0/12\n     ///  - 192.168.0.0/16\n+    ///\n+    /// [RFC 1918]: https://tools.ietf.org/html/rfc1918\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_private(&self) -> bool {\n         match (self.octets()[0], self.octets()[1]) {\n@@ -213,6 +216,7 @@ impl Ipv4Addr {\n     /// Returns true if the address is link-local (169.254.0.0/16).\n     ///\n     /// This property is defined by [RFC 3927].\n+    ///\n     /// [RFC 3927]: https://tools.ietf.org/html/rfc3927\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_link_local(&self) -> bool {\n@@ -221,7 +225,6 @@ impl Ipv4Addr {\n \n     /// Returns true if the address appears to be globally routable.\n     /// See [iana-ipv4-special-registry][ipv4-sr].\n-    /// [ipv4-sr]: http://goo.gl/RaZ7lg\n     ///\n     /// The following return false:\n     ///\n@@ -231,6 +234,8 @@ impl Ipv4Addr {\n     /// - the broadcast address (255.255.255.255/32)\n     /// - test addresses used for documentation (192.0.2.0/24, 198.51.100.0/24 and 203.0.113.0/24)\n     /// - the unspecified address (0.0.0.0)\n+    ///\n+    /// [ipv4-sr]: http://goo.gl/RaZ7lg\n     pub fn is_global(&self) -> bool {\n         !self.is_private() && !self.is_loopback() && !self.is_link_local() &&\n         !self.is_broadcast() && !self.is_documentation() && !self.is_unspecified()\n@@ -240,6 +245,7 @@ impl Ipv4Addr {\n     ///\n     /// Multicast addresses have a most significant octet between 224 and 239,\n     /// and is defined by [RFC 5771].\n+    ///\n     /// [RFC 5771]: https://tools.ietf.org/html/rfc5771\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {\n@@ -249,6 +255,7 @@ impl Ipv4Addr {\n     /// Returns true if this is a broadcast address (255.255.255.255).\n     ///\n     /// A broadcast address has all octets set to 255 as defined in [RFC 919].\n+    ///\n     /// [RFC 919]: https://tools.ietf.org/html/rfc919\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_broadcast(&self) -> bool {\n@@ -259,11 +266,12 @@ impl Ipv4Addr {\n     /// Returns true if this address is in a range designated for documentation.\n     ///\n     /// This is defined in [RFC 5737]:\n-    /// [RFC 5737]: https://tools.ietf.org/html/rfc5737\n     ///\n     /// - 192.0.2.0/24 (TEST-NET-1)\n     /// - 198.51.100.0/24 (TEST-NET-2)\n     /// - 203.0.113.0/24 (TEST-NET-3)\n+    ///\n+    /// [RFC 5737]: https://tools.ietf.org/html/rfc5737\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_documentation(&self) -> bool {\n         match(self.octets()[0], self.octets()[1], self.octets()[2], self.octets()[3]) {\n@@ -425,6 +433,7 @@ impl Ipv6Addr {\n     /// Returns true for the special 'unspecified' address (::).\n     ///\n     /// This property is defined in [RFC 4291].\n+    ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_unspecified(&self) -> bool {\n@@ -434,6 +443,7 @@ impl Ipv6Addr {\n     /// Returns true if this is a loopback address (::1).\n     ///\n     /// This property is defined in [RFC 4291].\n+    ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_loopback(&self) -> bool {\n@@ -458,6 +468,7 @@ impl Ipv6Addr {\n     /// Returns true if this is a unique local address (fc00::/7).\n     ///\n     /// This property is defined in [RFC 4193].\n+    ///\n     /// [RFC 4193]: https://tools.ietf.org/html/rfc4193\n     pub fn is_unique_local(&self) -> bool {\n         (self.segments()[0] & 0xfe00) == 0xfc00\n@@ -466,6 +477,7 @@ impl Ipv6Addr {\n     /// Returns true if the address is unicast and link-local (fe80::/10).\n     ///\n     /// This property is defined in [RFC 4291].\n+    ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     pub fn is_unicast_link_local(&self) -> bool {\n         (self.segments()[0] & 0xffc0) == 0xfe80\n@@ -481,6 +493,7 @@ impl Ipv6Addr {\n     /// (2001:db8::/32).\n     ///\n     /// This property is defined in [RFC 3849].\n+    ///\n     /// [RFC 3849]: https://tools.ietf.org/html/rfc3849\n     pub fn is_documentation(&self) -> bool {\n         (self.segments()[0] == 0x2001) && (self.segments()[1] == 0xdb8)\n@@ -524,6 +537,7 @@ impl Ipv6Addr {\n     /// Returns true if this is a multicast address (ff00::/8).\n     ///\n     /// This property is defined by [RFC 4291].\n+    ///\n     /// [RFC 4291]: https://tools.ietf.org/html/rfc4291\n     #[stable(since = \"1.7.0\", feature = \"ip_17\")]\n     pub fn is_multicast(&self) -> bool {"}, {"sha": "159aa997b27285cc8e407df79d382752eee23e84", "filename": "src/libstd/net/tcp.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/27acb5ca11cea8c48030f440772111805dbb9520/src%2Flibstd%2Fnet%2Ftcp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/27acb5ca11cea8c48030f440772111805dbb9520/src%2Flibstd%2Fnet%2Ftcp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Ftcp.rs?ref=27acb5ca11cea8c48030f440772111805dbb9520", "patch": "@@ -67,11 +67,12 @@ pub struct TcpListener(net_imp::TcpListener);\n \n /// An infinite iterator over the connections from a `TcpListener`.\n ///\n-/// This iterator will infinitely yield `Some` of the accepted connections. It\n+/// This iterator will infinitely yield [`Some`] of the accepted connections. It\n /// is equivalent to calling `accept` in a loop.\n ///\n /// This `struct` is created by the [`incoming`] method on [`TcpListener`].\n ///\n+/// [`Some`]: ../../std/option/enum.Option.html#variant.Some\n /// [`incoming`]: struct.TcpListener.html#method.incoming\n /// [`TcpListener`]: struct.TcpListener.html\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}]}