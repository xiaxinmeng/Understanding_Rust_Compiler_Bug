{"sha": "10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEwYjJmM2FjOGRkNzEwMTcxMTMwOGI2MTEwMzFkM2U1YmQwYWNhMmY=", "commit": {"author": {"name": "Nick Cameron", "email": "nrc@ncameron.org", "date": "2017-06-06T05:44:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-06-06T05:44:09Z"}, "message": "Merge pull request #1638 from est31/master\n\nUpdate syntex to 0.59", "tree": {"sha": "c4ae962c6fd6166e5a9de1e4ccdb3da4f9373f34", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c4ae962c6fd6166e5a9de1e4ccdb3da4f9373f34"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "html_url": "https://github.com/rust-lang/rust/commit/10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ac9245df4ce650abab468ae73431dc454d0e064", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ac9245df4ce650abab468ae73431dc454d0e064", "html_url": "https://github.com/rust-lang/rust/commit/8ac9245df4ce650abab468ae73431dc454d0e064"}, {"sha": "4665943b513c64f27502e51e832c5f46931f3c0c", "url": "https://api.github.com/repos/rust-lang/rust/commits/4665943b513c64f27502e51e832c5f46931f3c0c", "html_url": "https://github.com/rust-lang/rust/commit/4665943b513c64f27502e51e832c5f46931f3c0c"}], "stats": {"total": 375, "additions": 257, "deletions": 118}, "files": [{"sha": "161a26ad916db1984a1cbbe3f600fe0681e08763", "filename": "Cargo.lock", "status": "modified", "additions": 91, "deletions": 42, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -3,18 +3,18 @@ name = \"rustfmt\"\n version = \"0.8.4\"\n dependencies = [\n  \"diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_syntax 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -31,7 +31,7 @@ dependencies = [\n \n [[package]]\n name = \"bitflags\"\n-version = \"0.8.2\"\n+version = \"0.9.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -46,13 +46,23 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"env_logger\"\n-version = \"0.4.2\"\n+version = \"0.4.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n+[[package]]\n+name = \"extprim\"\n+version = \"1.2.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"rustc_version 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"getopts\"\n version = \"0.2.14\"\n@@ -79,7 +89,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"log\"\n-version = \"0.3.7\"\n+version = \"0.3.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n@@ -100,6 +110,14 @@ name = \"quote\"\n version = \"0.3.15\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"rand\"\n+version = \"0.3.15\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n [[package]]\n name = \"regex\"\n version = \"0.2.2\"\n@@ -118,28 +136,44 @@ version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n-name = \"rustc-serialize\"\n-version = \"0.3.24\"\n+name = \"rustc_version\"\n+version = \"0.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver\"\n+version = \"0.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+dependencies = [\n+ \"semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+]\n+\n+[[package]]\n+name = \"semver-parser\"\n+version = \"0.7.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde\"\n-version = \"1.0.7\"\n+version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [[package]]\n name = \"serde_derive\"\n-version = \"1.0.7\"\n+version = \"1.0.8\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"serde_derive_internals\"\n-version = \"0.15.0\"\n+version = \"0.15.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\",\n@@ -154,15 +188,15 @@ dependencies = [\n  \"dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"strings\"\n version = \"0.1.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -185,35 +219,40 @@ dependencies = [\n \n [[package]]\n name = \"syntex_errors\"\n-version = \"0.58.1\"\n+version = \"0.59.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n  \"libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n  \"term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syntex_pos\"\n-version = \"0.58.1\"\n+version = \"0.59.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n name = \"syntex_syntax\"\n-version = \"0.58.1\"\n+version = \"0.59.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n- \"unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"extprim 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_errors 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"syntex_pos 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -248,7 +287,7 @@ name = \"toml\"\n version = \"0.4.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n dependencies = [\n- \"serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\",\n+ \"serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\",\n ]\n \n [[package]]\n@@ -261,6 +300,11 @@ name = \"unicode-xid\"\n version = \"0.0.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n+[[package]]\n+name = \"unicode-xid\"\n+version = \"0.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+\n [[package]]\n name = \"unreachable\"\n version = \"0.1.1\"\n@@ -291,37 +335,42 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n \n [metadata]\n \"checksum aho-corasick 0.6.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"500909c4f87a9e52355b26626d890833e9e1d53ac566db76c36faa984b889699\"\n-\"checksum bitflags 0.8.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1370e9fc2a6ae53aea8b7a5110edbd08836ed87c88736dfabccade1c2b44bff4\"\n+\"checksum bitflags 0.9.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4efd02e230a02e18f92fc2735f44597385ed02ad8f831e7c1c1156ee5e1ab3a5\"\n \"checksum diff 0.1.10 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0a515461b6c8c08419850ced27bc29e86166dcdcde8fbe76f8b1f0589bb49472\"\n \"checksum dtoa 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"80c8b71fd71146990a9742fc06dcbbde19161a267e0ad4e572c35162f4578c90\"\n-\"checksum env_logger 0.4.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e3856f1697098606fc6cb97a93de88ca3f3bc35bb878c725920e6e82ecf05e83\"\n+\"checksum env_logger 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"3ddf21e73e016298f5cb37d6ef8e8da8e39f91f9ec8b0df44b7deb16a9f8cd5b\"\n+\"checksum extprim 1.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9f92dbf3843b6b56a224bce6aacd734feea193013d6ee1e18f03dcb36a93911\"\n \"checksum getopts 0.2.14 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d9047cfbd08a437050b363d35ef160452c5fe8ea5187ae0a624708c91581d685\"\n \"checksum itoa 0.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"eb2f404fbc66fd9aac13e998248505e7ecb2ad8e44ab6388684c5fb11c6c251c\"\n \"checksum kernel32-sys 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7507624b29483431c0ba2d82aece8ca6cdba9382bff4ddd0f7490560c056098d\"\n \"checksum libc 0.2.23 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e7eb6b826bfc1fdea7935d46556250d1799b7fe2d9f7951071f4291710665e3e\"\n-\"checksum log 0.3.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"5141eca02775a762cc6cd564d8d2c50f67c0ea3a372cbf1c51592b3e029e10ad\"\n+\"checksum log 0.3.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"880f77541efa6e5cc74e76910c9884d9859683118839d6a1dc3b11e63512565b\"\n \"checksum memchr 1.0.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1dbccc0e46f1ea47b9f17e6d67c5a96bd27030519c519c9c91327e31275a47b4\"\n \"checksum num-traits 0.1.37 (registry+https://github.com/rust-lang/crates.io-index)\" = \"e1cbfa3781f3fe73dc05321bed52a06d2d491eaa764c52335cf4399f046ece99\"\n \"checksum quote 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a6e920b65c65f10b2ae65c831a81a073a89edd28c7cce89475bff467ab4167a\"\n+\"checksum rand 0.3.15 (registry+https://github.com/rust-lang/crates.io-index)\" = \"022e0636ec2519ddae48154b028864bdce4eaf7d35226ab8e65c611be97b189d\"\n \"checksum regex 0.2.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1731164734096285ec2a5ec7fea5248ae2f5485b3feeb0115af4fda2183b2d1b\"\n \"checksum regex-syntax 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"ad890a5eef7953f55427c50575c680c42841653abd2b028b68cd223d157f62db\"\n-\"checksum rustc-serialize 0.3.24 (registry+https://github.com/rust-lang/crates.io-index)\" = \"dcf128d1287d2ea9d80910b5f1120d0b8eede3fbf1abe91c40d39ea7d51e6fda\"\n-\"checksum serde 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c0c3d79316a6051231925504f6ef893d45088e8823c77a8331a3dcf427ee9087\"\n-\"checksum serde_derive 1.0.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0019cd5b9f0529a1a0e145a912e9a2d60c325c58f7f260fc36c71976e9d76aee\"\n-\"checksum serde_derive_internals 0.15.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"021c338d22c7e30f957a6ab7e388cb6098499dda9fd4ba1661ee074ca7a180d1\"\n+\"checksum rustc_version 0.2.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"b9743a7670d88d5d52950408ecdb7c71d8986251ab604d4689dd2ca25c9bca69\"\n+\"checksum semver 0.6.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"7a3186ec9e65071a2095434b1f5bb24838d4e8e130f584c790f6033c79943537\"\n+\"checksum semver-parser 0.7.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"388a1df253eca08550bef6c72392cfe7c30914bf41df5269b68cbd6ff8f570a3\"\n+\"checksum serde 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c2f530d36fb84ec48fb7146936881f026cdbf4892028835fd9398475f82c1bb4\"\n+\"checksum serde_derive 1.0.8 (registry+https://github.com/rust-lang/crates.io-index)\" = \"10552fad5500771f3902d0c5ba187c5881942b811b7ba0d8fbbfbf84d80806d3\"\n+\"checksum serde_derive_internals 0.15.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"37aee4e0da52d801acfbc0cc219eb1eda7142112339726e427926a6f6ee65d3a\"\n \"checksum serde_json 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"48b04779552e92037212c3615370f6bd57a40ebba7f20e554ff9f55e41a69a7b\"\n \"checksum strings 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"da75d8bf2c4d210d63dd09581a041b036001f9f6e03d9b151dbff810fb7ba26a\"\n \"checksum syn 0.11.11 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d3b891b9015c88c576343b9b3e41c2c11a51c219ef067b264bd9c8aa9b441dad\"\n \"checksum synom 0.11.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a393066ed9010ebaed60b9eafa373d4b1baac186dd7e008555b0f702b51945b6\"\n-\"checksum syntex_errors 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"867cc5c2d7140ae7eaad2ae9e8bf39cb18a67ca651b7834f88d46ca98faadb9c\"\n-\"checksum syntex_pos 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"13ad4762fe52abc9f4008e85c4fb1b1fe3aa91ccb99ff4826a439c7c598e1047\"\n-\"checksum syntex_syntax 0.58.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6e0e4dbae163dd98989464c23dd503161b338790640e11537686f2ef0f25c791\"\n+\"checksum syntex_errors 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"0f769b93e132914e999edb13018e192bd5f0296c2886fb6d5473ee6e055acb1c\"\n+\"checksum syntex_pos 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"56c108cb745a38857097c1662a9d513594486acaf1d508831201fd122f83ba44\"\n+\"checksum syntex_syntax 0.59.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a2c815f257bdfb6f8b8876bb2937438a5365f2884f268c312f864cd002abace6\"\n \"checksum term 0.4.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"d168af3930b369cfe245132550579d47dfd873d69470755a19c2c6568dbbd989\"\n \"checksum thread-id 3.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8df7875b676fddfadffd96deea3b1124e5ede707d4884248931077518cf1f773\"\n \"checksum thread_local 0.3.3 (registry+https://github.com/rust-lang/crates.io-index)\" = \"c85048c6260d17cf486ceae3282d9fb6b90be220bf5b28c400f5485ffc29f0c7\"\n \"checksum toml 0.4.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"4cc5dbfb20a481e64b99eb7ae280859ec76730c7191570ba5edaa962394edb0a\"\n \"checksum unicode-segmentation 1.2.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a8083c594e02b8ae1654ae26f0ade5158b119bd88ad0e8227a5d8fcd72407946\"\n \"checksum unicode-xid 0.0.4 (registry+https://github.com/rust-lang/crates.io-index)\" = \"8c1f860d7d29cf02cb2f3f359fd35991af3d30bac52c57d265a3c461074cb4dc\"\n+\"checksum unicode-xid 0.1.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"fc72304796d0818e357ead4e000d19c9c174ab23dc11093ac919054d20a6a7fc\"\n \"checksum unreachable 0.1.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"1f2ae5ddb18e1c92664717616dd9549dde73f539f01bd7b77c2edb2446bdff91\"\n \"checksum utf8-ranges 1.0.0 (registry+https://github.com/rust-lang/crates.io-index)\" = \"662fab6525a98beff2921d7f61a39e7d59e0b425ebc7d0d9e66d316e55124122\"\n \"checksum void 1.0.2 (registry+https://github.com/rust-lang/crates.io-index)\" = \"6a02e4885ed3bc0f2de90ea6dd45ebcbb66dacffe03547fadbb0eeae2770887d\""}, {"sha": "083dfd787fa2023abcfecd4cad01a3219a3643a2", "filename": "Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -28,8 +28,8 @@ regex = \"0.2\"\n term = \"0.4\"\n strings = \"0.1\"\n diff = \"0.1\"\n-syntex_syntax = \"0.58\"\n-syntex_errors = \"0.58\"\n+syntex_syntax = \"0.59\"\n+syntex_errors = \"0.59\"\n log = \"0.3\"\n env_logger = \"0.4\"\n getopts = \"0.2\""}, {"sha": "b84a7e469f2a8949558937961b30dcd1b1f5a7f1", "filename": "src/chains.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fchains.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fchains.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fchains.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -78,15 +78,15 @@\n \n use Shape;\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, first_line_width, last_line_width};\n+use utils::{wrap_str, first_line_width, last_line_width, mk_sp};\n use expr::rewrite_call;\n use config::IndentStyle;\n use macros::convert_try_mac;\n \n use std::cmp::min;\n use std::iter;\n use syntax::{ast, ptr};\n-use syntax::codemap::{mk_sp, Span};\n+use syntax::codemap::Span;\n \n pub fn rewrite_chain(expr: &ast::Expr, context: &RewriteContext, shape: Shape) -> Option<String> {\n     debug!(\"rewrite_chain {:?}\", shape);"}, {"sha": "aa5913e5f0fa9bb613558f67400b2de9f49eb99c", "filename": "src/expr.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -22,7 +22,7 @@ use lists::{write_list, itemize_list, ListFormatting, SeparatorTactic, ListTacti\n use string::{StringFormat, rewrite_string};\n use utils::{extra_offset, last_line_width, wrap_str, binary_search, first_line_width,\n             semicolon_for_stmt, trimmed_last_line_width, left_most_sub_expr, stmt_expr,\n-            colon_spaces, contains_skip};\n+            colon_spaces, contains_skip, mk_sp};\n use visitor::FmtVisitor;\n use config::{Config, IndentStyle, MultilineStyle, ControlBraceStyle, Style};\n use comment::{FindUncommented, rewrite_comment, contains_comment, recover_comment_removed};\n@@ -32,7 +32,7 @@ use chains::rewrite_chain;\n use macros::{rewrite_macro, MacroPosition};\n \n use syntax::{ast, ptr};\n-use syntax::codemap::{CodeMap, Span, BytePos, mk_sp};\n+use syntax::codemap::{CodeMap, Span, BytePos};\n use syntax::parse::classify;\n \n impl Rewrite for ast::Expr {\n@@ -253,6 +253,16 @@ fn format_expr(expr: &ast::Expr,\n                      context.config.max_width(),\n                      shape)\n         }\n+        ast::ExprKind::Catch(ref block) => {\n+            if let rewrite @ Some(_) = try_one_line_block(context, shape, \"do catch \", block) {\n+                return rewrite;\n+            }\n+            // 9 = `do catch `\n+            let budget = shape.width.checked_sub(9).unwrap_or(0);\n+            Some(format!(\"{}{}\",\n+                         \"do catch \",\n+                         try_opt!(block.rewrite(&context, Shape::legacy(budget, shape.indent)))))\n+        }\n     };\n     match (attr_rw, expr_rw) {\n         (Some(attr_str), Some(expr_str)) => {\n@@ -266,6 +276,22 @@ fn format_expr(expr: &ast::Expr,\n     }\n }\n \n+fn try_one_line_block(context: &RewriteContext,\n+                      shape: Shape,\n+                      prefix: &str,\n+                      block: &ast::Block)\n+                      -> Option<String> {\n+    if is_simple_block(block, context.codemap) {\n+        let expr_shape = Shape::legacy(shape.width - prefix.len(), shape.indent);\n+        let expr_str = try_opt!(block.stmts[0].rewrite(context, expr_shape));\n+        let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n+        if result.len() <= shape.width && !result.contains('\\n') {\n+            return Some(result);\n+        }\n+    }\n+    None\n+}\n+\n pub fn rewrite_pair<LHS, RHS>(lhs: &LHS,\n                               rhs: &RHS,\n                               prefix: &str,\n@@ -620,9 +646,7 @@ fn rewrite_closure(capture: ast::CaptureBy,\n         // means we must re-format.\n         let block_shape = shape.block().with_max_width(context.config);\n         let block_str = try_opt!(block.rewrite(&context, block_shape));\n-        Some(format!(\"{} {}\",\n-                     prefix,\n-                     try_opt!(block_str.rewrite(context, block_shape))))\n+        Some(format!(\"{} {}\", prefix, block_str))\n     }\n }\n \n@@ -687,24 +711,13 @@ impl Rewrite for ast::Block {\n                 } else {\n                     \"unsafe \".to_owned()\n                 };\n-\n-                if is_simple_block(self, context.codemap) && prefix.len() < shape.width {\n-                    let expr_str =\n-                        self.stmts[0].rewrite(context,\n-                                              Shape::legacy(shape.width - prefix.len(),\n-                                                            shape.indent));\n-                    let expr_str = try_opt!(expr_str);\n-                    let result = format!(\"{}{{ {} }}\", prefix, expr_str);\n-                    if result.len() <= shape.width && !result.contains('\\n') {\n-                        return Some(result);\n-                    }\n+                if let result @ Some(_) = try_one_line_block(context, shape, &prefix, self) {\n+                    return result;\n                 }\n-\n                 prefix\n             }\n             ast::BlockCheckMode::Default => {\n                 visitor.last_pos = self.span.lo;\n-\n                 String::new()\n             }\n         };"}, {"sha": "83e7661aad97567dbd3421e0067262587a4ddb6a", "filename": "src/imports.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -10,7 +10,7 @@\n \n use Shape;\n use utils;\n-use syntax::codemap::{self, BytePos, Span};\n+use syntax::codemap::{BytePos, Span};\n use codemap::SpanUtils;\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, definitive_tactic};\n use types::{rewrite_path, PathContext};\n@@ -202,7 +202,7 @@ impl<'a> FmtVisitor<'a> {\n         // Order the imports by view-path & other import path properties\n         ordered_use_items.sort_by(|a, b| compare_use_items(a.0, b.0).unwrap());\n         // First, output the span before the first import\n-        let prev_span_str = self.snippet(codemap::mk_sp(self.last_pos, pos_before_first_use_item));\n+        let prev_span_str = self.snippet(utils::mk_sp(self.last_pos, pos_before_first_use_item));\n         // Look for purely trailing space at the start of the prefix snippet before a linefeed, or\n         // a prefix that's entirely horizontal whitespace.\n         let prefix_span_start = match prev_span_str.find('\\n') {\n@@ -241,7 +241,7 @@ impl<'a> FmtVisitor<'a> {\n                          Shape::legacy(self.config.max_width() - offset.width() - 1, offset)) {\n             Some(ref s) if s.is_empty() => {\n                 // Format up to last newline\n-                let prev_span = codemap::mk_sp(self.last_pos, source!(self, span).lo);\n+                let prev_span = utils::mk_sp(self.last_pos, source!(self, span).lo);\n                 let span_end = match self.snippet(prev_span).rfind('\\n') {\n                     Some(offset) => self.last_pos + BytePos(offset as u32),\n                     None => source!(self, span).lo,"}, {"sha": "bbbe75ddf780ce1ccfac3c30dcffaf926c7118da", "filename": "src/items.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -14,7 +14,7 @@ use {Indent, Shape};\n use codemap::SpanUtils;\n use utils::{format_mutability, format_visibility, contains_skip, end_typaram, wrap_str,\n             last_line_width, format_unsafety, trim_newlines, stmt_expr, semicolon_for_expr,\n-            trimmed_last_line_width, colon_spaces};\n+            trimmed_last_line_width, colon_spaces, mk_sp};\n use lists::{write_list, itemize_list, ListItem, ListFormatting, SeparatorTactic, list_helper,\n             DefinitiveListTactic, ListTactic, definitive_tactic, format_item_list};\n use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs};\n@@ -23,8 +23,8 @@ use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style, TypeDensity};\n \n-use syntax::{ast, abi, codemap, ptr, symbol};\n-use syntax::codemap::{Span, BytePos, mk_sp};\n+use syntax::{ast, abi, ptr, symbol};\n+use syntax::codemap::{Span, BytePos};\n use syntax::ast::ImplItem;\n \n fn type_annotation_separator(config: &Config) -> &str {\n@@ -246,7 +246,7 @@ impl<'a> FmtVisitor<'a> {\n         let mut newline_brace = newline_for_brace(self.config, &generics.where_clause);\n         let context = self.get_context();\n \n-        let block_snippet = self.snippet(codemap::mk_sp(block.span.lo, block.span.hi));\n+        let block_snippet = self.snippet(mk_sp(block.span.lo, block.span.hi));\n         let has_body = !block_snippet[1..block_snippet.len() - 1].trim().is_empty() ||\n                        !context.config.fn_empty_single_line();\n \n@@ -527,7 +527,7 @@ pub fn format_impl(context: &RewriteContext,\n                    offset: Indent,\n                    where_span_end: Option<BytePos>)\n                    -> Option<String> {\n-    if let ast::ItemKind::Impl(_, _, ref generics, ref trait_ref, _, ref items) = item.node {\n+    if let ast::ItemKind::Impl(_, _, _, ref generics, ref trait_ref, _, ref items) = item.node {\n         let mut result = String::new();\n         // First try to format the ref and type without a split at the 'for'.\n         let mut ref_and_type = try_opt!(format_impl_ref_and_type(context, item, offset, false));\n@@ -647,8 +647,13 @@ fn format_impl_ref_and_type(context: &RewriteContext,\n                             offset: Indent,\n                             split_at_for: bool)\n                             -> Option<String> {\n-    if let ast::ItemKind::Impl(unsafety, polarity, ref generics, ref trait_ref, ref self_ty, _) =\n-        item.node {\n+    if let ast::ItemKind::Impl(unsafety,\n+                               polarity,\n+                               _,\n+                               ref generics,\n+                               ref trait_ref,\n+                               ref self_ty,\n+                               _) = item.node {\n         let mut result = String::new();\n \n         result.push_str(&format_visibility(&item.vis));"}, {"sha": "b7edc1836183021e40253cb0a5da72b256b34733", "filename": "src/lib.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -33,7 +33,7 @@ extern crate term;\n use errors::{Handler, DiagnosticBuilder};\n use errors::emitter::{ColorConfig, EmitterWriter};\n use syntax::ast;\n-use syntax::codemap::{mk_sp, CodeMap, Span};\n+use syntax::codemap::{CodeMap, Span, FilePathMapping};\n use syntax::parse::{self, ParseSess};\n \n use strings::string_buffer::StringBuffer;\n@@ -107,7 +107,7 @@ impl Spanned for ast::Ty {\n impl Spanned for ast::Arg {\n     fn span(&self) -> Span {\n         if items::is_named_arg(self) {\n-            mk_sp(self.pat.span.lo, self.ty.span.hi)\n+            utils::mk_sp(self.pat.span.lo, self.ty.span.hi)\n         } else {\n             self.ty.span\n         }\n@@ -578,7 +578,7 @@ pub fn format_input<T: Write>(input: Input,\n     if config.disable_all_formatting() {\n         return Ok((summary, FileMap::new(), FormatReport::new()));\n     }\n-    let codemap = Rc::new(CodeMap::new());\n+    let codemap = Rc::new(CodeMap::new(FilePathMapping::empty()));\n \n     let tty_handler =\n         Handler::with_tty_emitter(ColorConfig::Auto, true, false, Some(codemap.clone()));"}, {"sha": "978d9dbaceb3212fb57ba8466e29ae2eef57ba77", "filename": "src/lists.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -11,12 +11,13 @@\n use std::cmp;\n use std::iter::Peekable;\n \n-use syntax::codemap::{self, CodeMap, BytePos};\n+use syntax::codemap::{CodeMap, BytePos};\n \n use {Indent, Shape};\n use comment::{FindUncommented, rewrite_comment, find_comment_end};\n use config::{Config, IndentStyle};\n use rewrite::RewriteContext;\n+use utils::mk_sp;\n \n #[derive(Eq, PartialEq, Debug, Copy, Clone)]\n /// Formatting tactic for lists. This will be cast down to a\n@@ -344,7 +345,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n             let mut new_lines = false;\n             // Pre-comment\n             let pre_snippet = self.codemap\n-                .span_to_snippet(codemap::mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n+                .span_to_snippet(mk_sp(self.prev_span_end, (self.get_lo)(&item)))\n                 .unwrap();\n             let trimmed_pre_snippet = pre_snippet.trim();\n             let has_pre_comment = trimmed_pre_snippet.contains(\"//\") ||\n@@ -361,7 +362,7 @@ impl<'a, T, I, F1, F2, F3> Iterator for ListItems<'a, I, F1, F2, F3>\n                 None => self.next_span_start,\n             };\n             let post_snippet = self.codemap\n-                .span_to_snippet(codemap::mk_sp((self.get_hi)(&item), next_start))\n+                .span_to_snippet(mk_sp((self.get_hi)(&item), next_start))\n                 .unwrap();\n \n             let comment_end = match self.inner.peek() {"}, {"sha": "eca89a4b609b56dfe897e962eebd218c5ceae40c", "filename": "src/macros.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -20,9 +20,10 @@\n // and those with brackets will be formatted as array literals.\n \n use syntax::ast;\n-use syntax::codemap::{mk_sp, BytePos};\n+use syntax::codemap::BytePos;\n use syntax::parse::token::Token;\n-use syntax::parse::tts_to_parser;\n+use syntax::parse::new_parser_from_tts;\n+use syntax::tokenstream::TokenStream;\n use syntax::symbol;\n use syntax::util::ThinVec;\n \n@@ -31,6 +32,7 @@ use codemap::SpanUtils;\n use rewrite::{Rewrite, RewriteContext};\n use expr::{rewrite_call, rewrite_array, rewrite_pair};\n use comment::{FindUncommented, contains_comment};\n+use utils::mk_sp;\n \n const FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n \n@@ -92,7 +94,8 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         original_style\n     };\n \n-    if mac.node.tts.is_empty() && !contains_comment(&context.snippet(mac.span)) {\n+    let ts: TokenStream = mac.node.tts.clone().into();\n+    if ts.is_empty() && !contains_comment(&context.snippet(mac.span)) {\n         return match style {\n             MacroStyle::Parens if position == MacroPosition::Item => {\n                 Some(format!(\"{}();\", macro_name))\n@@ -103,7 +106,7 @@ pub fn rewrite_macro(mac: &ast::Mac,\n         };\n     }\n \n-    let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone());\n+    let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n     let mut expr_vec = Vec::new();\n     let mut vec_with_semi = false;\n \n@@ -222,7 +225,8 @@ pub fn rewrite_macro(mac: &ast::Mac,\n /// failed).\n pub fn convert_try_mac(mac: &ast::Mac, context: &RewriteContext) -> Option<ast::Expr> {\n     if &format!(\"{}\", mac.node.path)[..] == \"try\" {\n-        let mut parser = tts_to_parser(context.parse_session, mac.node.tts.clone());\n+        let ts: TokenStream = mac.node.tts.clone().into();\n+        let mut parser = new_parser_from_tts(context.parse_session, ts.trees().collect());\n \n         Some(ast::Expr {\n                  id: ast::NodeId::new(0), // dummy value"}, {"sha": "90a1327786540ebbeb084b73ea925d9672d5aa7b", "filename": "src/missed_spans.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fmissed_spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fmissed_spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmissed_spans.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -10,9 +10,10 @@\n \n use config::WriteMode;\n use visitor::FmtVisitor;\n-use syntax::codemap::{self, BytePos, Span, Pos};\n+use syntax::codemap::{BytePos, Span, Pos};\n use comment::{CodeCharKind, CommentCodeSlices, rewrite_comment};\n use Shape;\n+use utils::mk_sp;\n \n impl<'a> FmtVisitor<'a> {\n     fn output_at_start(&self) -> bool {\n@@ -65,7 +66,7 @@ impl<'a> FmtVisitor<'a> {\n                 self.codemap.lookup_char_pos(end));\n \n         self.last_pos = end;\n-        let span = codemap::mk_sp(start, end);\n+        let span = mk_sp(start, end);\n \n         self.write_snippet(span, &process_last_snippet);\n     }"}, {"sha": "eb100abd664c872ec3145eb94aa22bb56e5fc6de", "filename": "src/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fpatterns.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -12,7 +12,7 @@ use Shape;\n use codemap::SpanUtils;\n use config::{IndentStyle, MultilineStyle};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{wrap_str, format_mutability};\n+use utils::{wrap_str, format_mutability, mk_sp};\n use lists::{DefinitiveListTactic, SeparatorTactic, format_item_list, itemize_list, ListItem,\n             struct_lit_shape, struct_lit_tactic, shape_for_tactic, struct_lit_formatting,\n             write_list};\n@@ -261,14 +261,14 @@ fn rewrite_tuple_pat(pats: &[ptr::P<ast::Pat>],\n         } else {\n             pats[pos + 1].span().lo\n         };\n-        let dot_span = codemap::mk_sp(prev, next);\n+        let dot_span = mk_sp(prev, next);\n         let snippet = context.snippet(dot_span);\n         let lo = dot_span.lo + BytePos(snippet.find_uncommented(\"..\").unwrap() as u32);\n         let span = Span {\n             lo: lo,\n             // 2 == \"..\".len()\n             hi: lo + BytePos(2),\n-            expn_id: codemap::NO_EXPANSION,\n+            ctxt: codemap::NO_EXPANSION,\n         };\n         let dotdot = TuplePatField::Dotdot(span);\n         pat_vec.insert(pos, dotdot);"}, {"sha": "7dfc4337178999076a416d58c659aca24824efb8", "filename": "src/types.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -21,7 +21,7 @@ use {Shape, Spanned};\n use codemap::SpanUtils;\n use lists::{format_item_list, itemize_list, format_fn_args};\n use rewrite::{Rewrite, RewriteContext};\n-use utils::{extra_offset, format_mutability, colon_spaces, wrap_str};\n+use utils::{extra_offset, format_mutability, colon_spaces, wrap_str, mk_sp};\n use expr::{rewrite_unary_prefix, rewrite_pair, rewrite_tuple_type};\n use config::TypeDensity;\n \n@@ -206,9 +206,7 @@ fn rewrite_segment(path_context: PathContext,\n                     .collect::<Vec<_>>();\n \n                 let next_span_lo = param_list.last().unwrap().get_span().hi + BytePos(1);\n-                let list_lo = context\n-                    .codemap\n-                    .span_after(codemap::mk_sp(*span_lo, span_hi), \"<\");\n+                let list_lo = context.codemap.span_after(mk_sp(*span_lo, span_hi), \"<\");\n                 let separator = if path_context == PathContext::Expr {\n                     \"::\"\n                 } else {\n@@ -686,6 +684,7 @@ impl Rewrite for ast::Ty {\n                 it.rewrite(context, shape)\n                     .map(|it_str| format!(\"impl {}\", it_str))\n             }\n+            ast::TyKind::Err |\n             ast::TyKind::Typeof(..) => unreachable!(),\n         }\n     }"}, {"sha": "b4095978b8a8e675906780170ad9315722810bbf", "filename": "src/utils.rs", "status": "modified", "additions": 17, "deletions": 4, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Futils.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -13,7 +13,7 @@ use std::cmp::Ordering;\n \n use syntax::ast::{self, Visibility, Attribute, MetaItem, MetaItemKind, NestedMetaItem,\n                   NestedMetaItemKind, Path};\n-use syntax::codemap::BytePos;\n+use syntax::codemap::{BytePos, Span, NO_EXPANSION};\n use syntax::abi;\n \n use Shape;\n@@ -48,8 +48,11 @@ pub fn format_visibility(vis: &Visibility) -> Cow<'static, str> {\n                     .next()\n                     .expect(\"Non-global path in pub(restricted)?\");\n             }\n+            let is_keyword = |s: &str| s == \"self\" || s == \"super\";\n+            let path = segments_iter.collect::<Vec<_>>().join(\"::\");\n+            let in_str = if is_keyword(&path) { \"\" } else { \"in \" };\n \n-            Cow::from(format!(\"pub({}) \", segments_iter.collect::<Vec<_>>().join(\"::\")))\n+            Cow::from(format!(\"pub({}{}) \", in_str, path))\n         }\n     }\n }\n@@ -125,7 +128,9 @@ fn is_skip_nested(meta_item: &NestedMetaItem) -> bool {\n \n #[inline]\n pub fn contains_skip(attrs: &[Attribute]) -> bool {\n-    attrs.iter().any(|a| is_skip(&a.value))\n+    attrs\n+        .iter()\n+        .any(|a| a.meta().map_or(false, |a| is_skip(&a)))\n }\n \n // Find the end of a TyParam\n@@ -287,7 +292,15 @@ macro_rules! msg {\n // Required as generated code spans aren't guaranteed to follow on from the last span.\n macro_rules! source {\n     ($this:ident, $sp: expr) => {\n-        $this.codemap.source_callsite($sp)\n+        $sp.source_callsite()\n+    }\n+}\n+\n+pub fn mk_sp(lo: BytePos, hi: BytePos) -> Span {\n+    Span {\n+        lo,\n+        hi,\n+        ctxt: NO_EXPANSION,\n     }\n }\n "}, {"sha": "d01e8e02eadf57b356df2d98dd90ac0dcd060a18", "filename": "src/visitor.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -11,13 +11,13 @@\n use std::cmp;\n \n use syntax::{ast, ptr, visit};\n-use syntax::codemap::{self, CodeMap, Span, BytePos};\n+use syntax::codemap::{CodeMap, Span, BytePos};\n use syntax::parse::ParseSess;\n \n use strings::string_buffer::StringBuffer;\n \n use {Indent, Shape};\n-use utils;\n+use utils::{self, mk_sp};\n use codemap::{LineRangeUtils, SpanUtils};\n use comment::FindUncommented;\n use config::Config;\n@@ -43,7 +43,7 @@ fn item_bound(item: &ast::Item) -> Span {\n             Span {\n                 lo: cmp::min(bound.lo, span.lo),\n                 hi: cmp::max(bound.hi, span.hi),\n-                expn_id: span.expn_id,\n+                ctxt: span.ctxt,\n             }\n         })\n }\n@@ -122,8 +122,7 @@ impl<'a> FmtVisitor<'a> {\n         let mut unindent_comment = self.is_if_else_block && !b.stmts.is_empty();\n         if unindent_comment {\n             let end_pos = source!(self, b.span).hi - brace_compensation;\n-            let snippet = self.get_context()\n-                .snippet(codemap::mk_sp(self.last_pos, end_pos));\n+            let snippet = self.get_context().snippet(mk_sp(self.last_pos, end_pos));\n             unindent_comment = snippet.contains(\"//\") || snippet.contains(\"/*\");\n         }\n         // FIXME: we should compress any newlines here to just one\n@@ -178,7 +177,7 @@ impl<'a> FmtVisitor<'a> {\n                                 defaultness,\n                                 abi,\n                                 vis,\n-                                codemap::mk_sp(s.lo, b.span.lo),\n+                                mk_sp(s.lo, b.span.lo),\n                                 &b)\n             }\n             visit::FnKind::Method(ident, sig, vis, b) => {\n@@ -192,7 +191,7 @@ impl<'a> FmtVisitor<'a> {\n                                 defaultness,\n                                 sig.abi,\n                                 vis.unwrap_or(&ast::Visibility::Inherited),\n-                                codemap::mk_sp(s.lo, b.span.lo),\n+                                mk_sp(s.lo, b.span.lo),\n                                 &b)\n             }\n             visit::FnKind::Closure(_) => unreachable!(),\n@@ -384,6 +383,15 @@ impl<'a> FmtVisitor<'a> {\n             ast::ItemKind::Union(..) => {\n                 // FIXME(#1157): format union definitions.\n             }\n+            ast::ItemKind::GlobalAsm(..) => {\n+                let snippet = Some(self.snippet(item.span));\n+                self.push_rewrite(item.span, snippet);\n+            }\n+            ast::ItemKind::MacroDef(..) => {\n+                // FIXME(#1539): macros 2.0\n+                let snippet = Some(self.snippet(item.span));\n+                self.push_rewrite(item.span, snippet);\n+            }\n         }\n     }\n \n@@ -599,8 +607,7 @@ impl<'a> FmtVisitor<'a> {\n             self.buffer.push_str(\" {\");\n             // Hackery to account for the closing }.\n             let mod_lo = self.codemap.span_after(source!(self, s), \"{\");\n-            let body_snippet =\n-                self.snippet(codemap::mk_sp(mod_lo, source!(self, m.inner).hi - BytePos(1)));\n+            let body_snippet = self.snippet(mk_sp(mod_lo, source!(self, m.inner).hi - BytePos(1)));\n             let body_snippet = body_snippet.trim();\n             if body_snippet.is_empty() {\n                 self.buffer.push_str(\"}\");\n@@ -704,7 +711,7 @@ impl Rewrite for ast::MetaItem {\n \n impl Rewrite for ast::Attribute {\n     fn rewrite(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n-        self.value\n+        try_opt!(self.meta())\n             .rewrite(context, shape)\n             .map(|rw| if rw.starts_with(\"///\") {\n                      rw\n@@ -727,7 +734,7 @@ impl<'a> Rewrite for [ast::Attribute] {\n \n             // Write comments and blank lines between attributes.\n             if i > 0 {\n-                let comment = context.snippet(codemap::mk_sp(self[i - 1].span.hi, a.span.lo));\n+                let comment = context.snippet(mk_sp(self[i - 1].span.hi, a.span.lo));\n                 // This particular horror show is to preserve line breaks in between doc\n                 // comments. An alternative would be to force such line breaks to start\n                 // with the usual doc comment token."}, {"sha": "64cc9e7a207974fa34d5bc12b4dbbd2218d5a303", "filename": "tests/source/catch.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Fsource%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Fsource%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fcatch.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -0,0 +1,27 @@\n+#![feature(catch_expr)]\n+\n+fn main() {\n+    let x = do catch {\n+        foo()?\n+    };\n+\n+    let x = do catch /* Invisible comment */ { foo()? };\n+\n+    let x = do catch {\n+        unsafe { foo()? }\n+    };\n+\n+    let y = match (do catch {\n+        foo()?\n+    }) {\n+        _ => (),\n+    };\n+\n+    do catch {\n+        foo()?;\n+    };\n+\n+    do catch {\n+        // Regular do catch block\n+    };\n+}"}, {"sha": "5683acbf3aa936dd622a536906c06a6faf9a9d39", "filename": "tests/source/pub-restricted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Fsource%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Fsource%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fpub-restricted.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -24,7 +24,7 @@ pub(  crate  ) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n-pub(  ::global::  path :: to::some_mod  ) enum WriteState<D> {\n+pub(in  ::global::  path :: to::some_mod  ) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,\n         size: U64Writer,\n@@ -37,7 +37,7 @@ pub(  ::global::  path :: to::some_mod  ) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n-pub(  local::  path :: to::some_mod  ) enum WriteState<D> {\n+pub(   in  local::  path :: to::some_mod  ) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,\n         size: U64Writer,"}, {"sha": "640f9bade4965be40a3b318af8e97e32b9f72ed8", "filename": "tests/target/catch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fcatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fcatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fcatch.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -0,0 +1,21 @@\n+#![feature(catch_expr)]\n+\n+fn main() {\n+    let x = do catch { foo()? };\n+\n+    let x = do catch /* Invisible comment */ { foo()? };\n+\n+    let x = do catch { unsafe { foo()? } };\n+\n+    let y = match (do catch { foo()? }) {\n+        _ => (),\n+    };\n+\n+    do catch {\n+        foo()?;\n+    };\n+\n+    do catch {\n+        // Regular do catch block\n+    };\n+}"}, {"sha": "6acab043e67565d00b6d9301e9652c4b47b2c669", "filename": "tests/target/match.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -326,11 +326,10 @@ fn issue1371() {\n              sfEvtGainedFocus => GainedFocus,\n              sfEvtTextEntered => {\n                  TextEntered {\n-                     unicode:\n-                         unsafe {\n-                             ::std::char::from_u32((*event.text.as_ref()).unicode)\n-                                 .expect(\"Invalid unicode encountered on TextEntered event\")\n-                         },\n+                     unicode: unsafe {\n+                         ::std::char::from_u32((*event.text.as_ref()).unicode)\n+                             .expect(\"Invalid unicode encountered on TextEntered event\")\n+                     },\n                  }\n              }\n              sfEvtKeyPressed => {"}, {"sha": "0e178ef10136e3965f7185ef1998b329b5982da5", "filename": "tests/target/pub-restricted.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fpub-restricted.rs", "raw_url": "https://github.com/rust-lang/rust/raw/10b2f3ac8dd7101711308b611031d3e5bd0aca2f/tests%2Ftarget%2Fpub-restricted.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fpub-restricted.rs?ref=10b2f3ac8dd7101711308b611031d3e5bd0aca2f", "patch": "@@ -24,7 +24,7 @@ pub(crate) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n-pub(global::path::to::some_mod) enum WriteState<D> {\n+pub(in global::path::to::some_mod) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,\n         size: U64Writer,\n@@ -37,7 +37,7 @@ pub(global::path::to::some_mod) enum WriteState<D> {\n     WriteData(Writer<D>),\n }\n \n-pub(local::path::to::some_mod) enum WriteState<D> {\n+pub(in local::path::to::some_mod) enum WriteState<D> {\n     WriteId {\n         id: U64Writer,\n         size: U64Writer,"}]}