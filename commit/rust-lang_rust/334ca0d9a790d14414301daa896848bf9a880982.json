{"sha": "334ca0d9a790d14414301daa896848bf9a880982", "node_id": "MDY6Q29tbWl0NzI0NzEyOjMzNGNhMGQ5YTc5MGQxNDQxNDMwMWRhYTg5Njg0OGJmOWE4ODA5ODI=", "commit": {"author": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2018-12-30T18:59:49Z"}, "committer": {"name": "Florian Diebold", "email": "flodiebold@gmail.com", "date": "2019-01-04T18:16:39Z"}, "message": "Rename ImplBlock::target -> target_type, and add target_trait already", "tree": {"sha": "52e44320860cbba2fabb6322d9746d77822c0d1e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/52e44320860cbba2fabb6322d9746d77822c0d1e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/334ca0d9a790d14414301daa896848bf9a880982", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/334ca0d9a790d14414301daa896848bf9a880982", "html_url": "https://github.com/rust-lang/rust/commit/334ca0d9a790d14414301daa896848bf9a880982", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/334ca0d9a790d14414301daa896848bf9a880982/comments", "author": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flodiebold", "id": 906069, "node_id": "MDQ6VXNlcjkwNjA2OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/906069?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flodiebold", "html_url": "https://github.com/flodiebold", "followers_url": "https://api.github.com/users/flodiebold/followers", "following_url": "https://api.github.com/users/flodiebold/following{/other_user}", "gists_url": "https://api.github.com/users/flodiebold/gists{/gist_id}", "starred_url": "https://api.github.com/users/flodiebold/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flodiebold/subscriptions", "organizations_url": "https://api.github.com/users/flodiebold/orgs", "repos_url": "https://api.github.com/users/flodiebold/repos", "events_url": "https://api.github.com/users/flodiebold/events{/privacy}", "received_events_url": "https://api.github.com/users/flodiebold/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bb029cd29b8496e69ca625fabc3612e4c1fe9142", "url": "https://api.github.com/repos/rust-lang/rust/commits/bb029cd29b8496e69ca625fabc3612e4c1fe9142", "html_url": "https://github.com/rust-lang/rust/commit/bb029cd29b8496e69ca625fabc3612e4c1fe9142"}], "stats": {"total": 24, "additions": 17, "deletions": 7}, "files": [{"sha": "77fab24d0691ff4caa3b96f2ae8e284d98d36f8c", "filename": "crates/ra_hir/src/impl_block.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/334ca0d9a790d14414301daa896848bf9a880982/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334ca0d9a790d14414301daa896848bf9a880982/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fimpl_block.rs?ref=334ca0d9a790d14414301daa896848bf9a880982", "patch": "@@ -35,8 +35,12 @@ impl ImplBlock {\n         &self.crate_impl_blocks.impls[self.impl_id]\n     }\n \n-    pub fn target(&self) -> &TypeRef {\n-        &self.impl_data().impl_for\n+    pub fn target_trait(&self) -> Option<&TypeRef> {\n+        self.impl_data().target_trait.as_ref()\n+    }\n+\n+    pub fn target_type(&self) -> &TypeRef {\n+        &self.impl_data().target_type\n     }\n \n     pub fn items(&self) -> &[ImplItem] {\n@@ -46,7 +50,8 @@ impl ImplBlock {\n \n #[derive(Debug, Clone, PartialEq, Eq)]\n pub struct ImplData {\n-    impl_for: TypeRef,\n+    target_trait: Option<TypeRef>,\n+    target_type: TypeRef,\n     items: Vec<ImplItem>,\n }\n \n@@ -57,7 +62,8 @@ impl ImplData {\n         module: &Module,\n         node: ast::ImplBlock,\n     ) -> Self {\n-        let impl_for = TypeRef::from_ast_opt(node.target_type());\n+        let target_trait = node.target_type().map(TypeRef::from_ast);\n+        let target_type = TypeRef::from_ast_opt(node.target_type());\n         let file_id = module.source().file_id();\n         let items = if let Some(item_list) = node.item_list() {\n             item_list\n@@ -89,7 +95,11 @@ impl ImplData {\n         } else {\n             Vec::new()\n         };\n-        ImplData { impl_for, items }\n+        ImplData {\n+            target_trait,\n+            target_type,\n+            items,\n+        }\n     }\n }\n "}, {"sha": "e33762e0ddb2a11479dc0302d24b4a12ab636627", "filename": "crates/ra_hir/src/ty.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/334ca0d9a790d14414301daa896848bf9a880982/crates%2Fra_hir%2Fsrc%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/334ca0d9a790d14414301daa896848bf9a880982/crates%2Fra_hir%2Fsrc%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fty.rs?ref=334ca0d9a790d14414301daa896848bf9a880982", "patch": "@@ -306,7 +306,7 @@ impl Ty {\n             } else if let Some(float_ty) = primitive::FloatTy::from_name(name) {\n                 return Ok(Ty::Float(float_ty));\n             } else if name.as_known_name() == Some(KnownName::Self_) {\n-                return Ty::from_hir_opt(db, module, None, impl_block.map(|i| i.target()));\n+                return Ty::from_hir_opt(db, module, None, impl_block.map(|i| i.target_type()));\n             }\n         }\n \n@@ -972,7 +972,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     self.insert_type_vars(ty)\n                 } else {\n                     // TODO this should be handled by desugaring during HIR conversion\n-                    let ty = self.make_ty_opt(self.impl_block.as_ref().map(|i| i.target()))?;\n+                    let ty = self.make_ty_opt(self.impl_block.as_ref().map(|i| i.target_type()))?;\n                     let ty = match self_param.flavor() {\n                         ast::SelfParamFlavor::Owned => ty,\n                         ast::SelfParamFlavor::Ref => Ty::Ref(Arc::new(ty), Mutability::Shared),"}]}