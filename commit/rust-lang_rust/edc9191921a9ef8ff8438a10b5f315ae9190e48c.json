{"sha": "edc9191921a9ef8ff8438a10b5f315ae9190e48c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkYzkxOTE5MjFhOWVmOGZmODQzOGExMGI1ZjMxNWFlOTE5MGU0OGM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-08T14:01:05Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-08-09T03:00:58Z"}, "message": "testsuite: implement #[reexport_test_harness_name] to get access to the\ndefault entrypoint of the --test binary.\n\nThis allows one to, e.g., run tests under libgreen by starting it\nmanually, passing in the test entrypoint.", "tree": {"sha": "ee5731df5eda2b73d0d522c864fe2b6ef604aade", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee5731df5eda2b73d0d522c864fe2b6ef604aade"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/edc9191921a9ef8ff8438a10b5f315ae9190e48c", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/edc9191921a9ef8ff8438a10b5f315ae9190e48c", "html_url": "https://github.com/rust-lang/rust/commit/edc9191921a9ef8ff8438a10b5f315ae9190e48c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/edc9191921a9ef8ff8438a10b5f315ae9190e48c/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3284733e3effa92cff2f87b7a38c27ac781411e", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3284733e3effa92cff2f87b7a38c27ac781411e", "html_url": "https://github.com/rust-lang/rust/commit/c3284733e3effa92cff2f87b7a38c27ac781411e"}], "stats": {"total": 105, "additions": 75, "deletions": 30}, "files": [{"sha": "14cda7d62c35def4dc62053e12af7a95184c1f61", "filename": "src/librustc/front/test.rs", "status": "modified", "additions": 43, "deletions": 18, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibrustc%2Ffront%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibrustc%2Ffront%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Ftest.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -51,6 +51,7 @@ struct TestCtxt<'a> {\n     ext_cx: ExtCtxt<'a>,\n     testfns: Vec<Test>,\n     reexport_mod_ident: ast::Ident,\n+    reexport_test_harness_main: Option<InternedString>,\n     is_test_crate: bool,\n     config: ast::CrateConfig,\n }\n@@ -64,8 +65,16 @@ pub fn modify_for_testing(sess: &Session,\n     // command line options.\n     let should_test = attr::contains_name(krate.config.as_slice(), \"test\");\n \n+    // Check for #[reexport_test_harness_main = \"some_name\"] which\n+    // creates a `use some_name = __test::main;`. This needs to be\n+    // unconditional, so that the attribute is still marked as used in\n+    // non-test builds.\n+    let reexport_test_harness_main =\n+        attr::first_attr_value_str_by_name(krate.attrs.as_slice(),\n+                                           \"reexport_test_harness_main\");\n+\n     if should_test {\n-        generate_test_harness(sess, krate)\n+        generate_test_harness(sess, reexport_test_harness_main, krate)\n     } else {\n         strip_test_functions(krate)\n     }\n@@ -79,14 +88,17 @@ struct TestHarnessGenerator<'a> {\n \n impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n     fn fold_crate(&mut self, c: ast::Crate) -> ast::Crate {\n-        let folded = fold::noop_fold_crate(c, self);\n+        let mut folded = fold::noop_fold_crate(c, self);\n \n         // Add a special __test module to the crate that will contain code\n         // generated for the test harness\n-        ast::Crate {\n-            module: add_test_module(&self.cx, &folded.module),\n-            .. folded\n+        let (mod_, reexport) = mk_test_module(&self.cx, &self.cx.reexport_test_harness_main);\n+        folded.module.items.push(mod_);\n+        match reexport {\n+            Some(re) => folded.module.view_items.push(re),\n+            None => {}\n         }\n+        folded\n     }\n \n     fn fold_item(&mut self, i: Gc<ast::Item>) -> SmallVector<Gc<ast::Item>> {\n@@ -196,7 +208,9 @@ fn mk_reexport_mod(cx: &mut TestCtxt, tests: Vec<ast::Ident>,\n     }\n }\n \n-fn generate_test_harness(sess: &Session, krate: ast::Crate) -> ast::Crate {\n+fn generate_test_harness(sess: &Session,\n+                         reexport_test_harness_main: Option<InternedString>,\n+                         krate: ast::Crate) -> ast::Crate {\n     let mut cx: TestCtxt = TestCtxt {\n         sess: sess,\n         ext_cx: ExtCtxt::new(&sess.parse_sess, sess.opts.cfg.clone(),\n@@ -207,6 +221,7 @@ fn generate_test_harness(sess: &Session, krate: ast::Crate) -> ast::Crate {\n         path: Vec::new(),\n         testfns: Vec::new(),\n         reexport_mod_ident: token::gensym_ident(\"__test_reexports\"),\n+        reexport_test_harness_main: reexport_test_harness_main,\n         is_test_crate: is_test_crate(&krate),\n         config: krate.config.clone(),\n     };\n@@ -314,14 +329,6 @@ fn should_fail(i: Gc<ast::Item>) -> bool {\n     attr::contains_name(i.attrs.as_slice(), \"should_fail\")\n }\n \n-fn add_test_module(cx: &TestCtxt, m: &ast::Mod) -> ast::Mod {\n-    let testmod = mk_test_module(cx);\n-    ast::Mod {\n-        items: m.items.clone().append_one(testmod),\n-        ..(*m).clone()\n-    }\n-}\n-\n /*\n \n We're going to be building a module that looks more or less like:\n@@ -359,7 +366,8 @@ fn mk_std(cx: &TestCtxt) -> ast::ViewItem {\n     }\n }\n \n-fn mk_test_module(cx: &TestCtxt) -> Gc<ast::Item> {\n+fn mk_test_module(cx: &TestCtxt, reexport_test_harness_main: &Option<InternedString>)\n+                  -> (Gc<ast::Item>, Option<ast::ViewItem>) {\n     // Link to test crate\n     let view_items = vec!(mk_std(cx));\n \n@@ -383,18 +391,35 @@ fn mk_test_module(cx: &TestCtxt) -> Gc<ast::Item> {\n     };\n     let item_ = ast::ItemMod(testmod);\n \n+    let mod_ident = token::gensym_ident(\"__test\");\n     let item = ast::Item {\n-        ident: token::gensym_ident(\"__test\"),\n+        ident: mod_ident,\n         attrs: Vec::new(),\n         id: ast::DUMMY_NODE_ID,\n         node: item_,\n         vis: ast::Public,\n         span: DUMMY_SP,\n-     };\n+    };\n+    let reexport = reexport_test_harness_main.as_ref().map(|s| {\n+        // building `use <ident> = __test::main`\n+        let reexport_ident = token::str_to_ident(s.get());\n+\n+        let use_path =\n+            nospan(ast::ViewPathSimple(reexport_ident,\n+                                       path_node(vec![mod_ident, token::str_to_ident(\"main\")]),\n+                                       ast::DUMMY_NODE_ID));\n+\n+        ast::ViewItem {\n+            node: ast::ViewItemUse(box(GC) use_path),\n+            attrs: vec![],\n+            vis: ast::Inherited,\n+            span: DUMMY_SP\n+        }\n+    });\n \n     debug!(\"Synthetic test module:\\n{}\\n\", pprust::item_to_string(&item));\n \n-    box(GC) item\n+    (box(GC) item, reexport)\n }\n \n fn nospan<T>(t: T) -> codemap::Spanned<T> {"}, {"sha": "dd80ab3ee78a15f23545e908c094b2c5224ba05e", "filename": "src/librustuv/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibrustuv%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibrustuv%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustuv%2Flib.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -48,6 +48,8 @@ via `close` and `delete` methods.\n #![deny(unused_result, unused_must_use)]\n #![allow(visible_private_types)]\n \n+#![reexport_test_harness_main = \"test_main\"]\n+\n #[cfg(test)] extern crate green;\n #[cfg(test)] extern crate debug;\n #[cfg(test)] extern crate realrustuv = \"rustuv\";\n@@ -76,13 +78,9 @@ pub use self::timer::TimerWatcher;\n pub use self::tty::TtyWatcher;\n \n // Run tests with libgreen instead of libnative.\n-//\n-// FIXME: This egregiously hacks around starting the test runner in a different\n-//        threading mode than the default by reaching into the auto-generated\n-//        '__test' module.\n #[cfg(test)] #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, event_loop, __test::main)\n+    green::start(argc, argv, event_loop, test_main)\n }\n \n mod macros;"}, {"sha": "20fc7efeb574f15d4a7a0884286e082dc1504d8e", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -114,6 +114,8 @@\n #![allow(deprecated)]\n #![deny(missing_doc)]\n \n+#![reexport_test_harness_main = \"test_main\"]\n+\n // When testing libstd, bring in libuv as the I/O backend so tests can print\n // things and all of the std::io tests have an I/O interface to run on top\n // of\n@@ -186,13 +188,9 @@ pub use unicode::char;\n pub use core_sync::comm;\n \n // Run tests with libgreen instead of libnative.\n-//\n-// FIXME: This egregiously hacks around starting the test runner in a different\n-//        threading mode than the default by reaching into the auto-generated\n-//        '__test' module.\n #[cfg(test)] #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, __test::main)\n+    green::start(argc, argv, rustuv::event_loop, test_main)\n }\n \n /* Exported macros */"}, {"sha": "d187a6a8afebb17346fd0763a7ca07a2a97bc6ad", "filename": "src/test/run-pass/core-run-destroy.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcore-run-destroy.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -16,6 +16,8 @@\n // instead of in std.\n \n #![feature(macro_rules)]\n+#![reexport_test_harness_main = \"test_main\"]\n+\n extern crate libc;\n \n extern crate native;\n@@ -55,7 +57,7 @@ macro_rules! iotest (\n \n #[cfg(test)] #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, __test::main)\n+    green::start(argc, argv, rustuv::event_loop, test_main)\n }\n \n iotest!(fn test_destroy_once() {"}, {"sha": "309ae1bcc56eceb6151b35af5aff7a8cf0b87ecc", "filename": "src/test/run-pass/reexport-test-harness-main.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Freexport-test-harness-main.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Freexport-test-harness-main.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Freexport-test-harness-main.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-pretty\n+// compile-flags:--test\n+\n+#![reexport_test_harness_main = \"test_main\"]\n+\n+#[cfg(test)]\n+fn _unused() {\n+    // should resolve to the entry point function the --test harness\n+    // creates.\n+    test_main();\n+}"}, {"sha": "6f6fff15814d556f8865acac9353475f5bb09718", "filename": "src/test/run-pass/tcp-connect-timeouts.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/edc9191921a9ef8ff8438a10b5f315ae9190e48c/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftcp-connect-timeouts.rs?ref=edc9191921a9ef8ff8438a10b5f315ae9190e48c", "patch": "@@ -18,14 +18,15 @@\n \n #![feature(macro_rules, globs)]\n #![allow(experimental)]\n+#![reexport_test_harness_main = \"test_main\"]\n \n extern crate native;\n extern crate green;\n extern crate rustuv;\n \n #[cfg(test)] #[start]\n fn start(argc: int, argv: *const *const u8) -> int {\n-    green::start(argc, argv, rustuv::event_loop, __test::main)\n+    green::start(argc, argv, rustuv::event_loop, test_main)\n }\n \n macro_rules! iotest ("}]}