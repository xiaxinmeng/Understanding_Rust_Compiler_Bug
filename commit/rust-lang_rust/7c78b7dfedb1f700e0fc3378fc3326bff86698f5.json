{"sha": "7c78b7dfedb1f700e0fc3378fc3326bff86698f5", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNzhiN2RmZWRiMWY3MDBlMGZjMzM3OGZjMzMyNmJmZjg2Njk4ZjU=", "commit": {"author": {"name": "Kevin Cantu", "email": "me@kevincantu.org", "date": "2012-02-22T08:49:05Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2012-02-23T16:00:19Z"}, "message": "(core::str) add a safe byte slice and maybe_slice", "tree": {"sha": "43fd040b74ae1c1a54ee0e9573df284dc842c3ca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/43fd040b74ae1c1a54ee0e9573df284dc842c3ca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c78b7dfedb1f700e0fc3378fc3326bff86698f5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c78b7dfedb1f700e0fc3378fc3326bff86698f5", "html_url": "https://github.com/rust-lang/rust/commit/7c78b7dfedb1f700e0fc3378fc3326bff86698f5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c78b7dfedb1f700e0fc3378fc3326bff86698f5/comments", "author": {"login": "killerswan", "id": 195060, "node_id": "MDQ6VXNlcjE5NTA2MA==", "avatar_url": "https://avatars.githubusercontent.com/u/195060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/killerswan", "html_url": "https://github.com/killerswan", "followers_url": "https://api.github.com/users/killerswan/followers", "following_url": "https://api.github.com/users/killerswan/following{/other_user}", "gists_url": "https://api.github.com/users/killerswan/gists{/gist_id}", "starred_url": "https://api.github.com/users/killerswan/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/killerswan/subscriptions", "organizations_url": "https://api.github.com/users/killerswan/orgs", "repos_url": "https://api.github.com/users/killerswan/repos", "events_url": "https://api.github.com/users/killerswan/events{/privacy}", "received_events_url": "https://api.github.com/users/killerswan/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "url": "https://api.github.com/repos/rust-lang/rust/commits/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8", "html_url": "https://github.com/rust-lang/rust/commit/454b53a7c2873fe7f72cc5ce6c07ccaded5b22d8"}], "stats": {"total": 77, "additions": 77, "deletions": 0}, "files": [{"sha": "b16272adc5aeada5d08dabc28922f1fccb418344", "filename": "src/libcore/str.rs", "status": "modified", "additions": 77, "deletions": 0, "changes": 77, "blob_url": "https://github.com/rust-lang/rust/blob/7c78b7dfedb1f700e0fc3378fc3326bff86698f5/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c78b7dfedb1f700e0fc3378fc3326bff86698f5/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=7c78b7dfedb1f700e0fc3378fc3326bff86698f5", "patch": "@@ -394,6 +394,31 @@ fn substr(s: str, begin: uint, len: uint) -> str {\n     ret slice_chars(s, begin, begin + len);\n }\n \n+// Function: slice\n+//\n+// Return a slice of the given string from the byte range [`begin`..`end`)\n+// or else fail when `begin` and `end` do not point to valid characters or\n+// beyond the last character of the string\n+fn slice(ss: str, begin: uint, end: uint) -> str {\n+   alt maybe_slice(ss, begin, end) {\n+      none     { fail \"slice requires a valid start and end\"; }\n+      some(sli) { ret sli; }\n+   }\n+}\n+\n+// Function: maybe_slice\n+//\n+// Like slice, only returns an option<str>\n+fn maybe_slice(ss: str, begin: uint, end: uint) -> option<str> unsafe {\n+   let sli = unsafe::slice_bytes(ss, begin, end);\n+\n+   if is_utf8(bytes(sli)) {\n+      ret some(sli);\n+   } else {\n+      ret none;\n+   }\n+}\n+\n /*\n Function: slice_chars\n \n@@ -1968,6 +1993,58 @@ mod tests {\n         assert (replace(data, d, repl) == data);\n     }\n \n+    #[test]\n+    fn test_slice() {\n+        assert (eq(\"ab\", slice(\"abc\", 0u, 2u)));\n+        assert (eq(\"bc\", slice(\"abc\", 1u, 3u)));\n+        assert (eq(\"\", slice(\"abc\", 1u, 1u)));\n+        assert (eq(\"\\u65e5\", slice(\"\\u65e5\\u672c\", 0u, 3u)));\n+\n+        let data = \"\u0e1b\u0e23\u0e30\u0e40\u0e17\u0e28\u0e44\u0e17\u0e22\u4e2d\u534e\";\n+        assert (eq(\"\u0e1b\", slice(data, 0u, 3u)));\n+        assert (eq(\"\u0e23\", slice(data, 3u, 6u)));\n+        assert (eq(\"\", slice(data, 1u, 1u)));\n+        assert (eq(\"\u534e\", slice(data, 30u, 33u)));\n+\n+        fn a_million_letter_X() -> str {\n+            let i = 0;\n+            let rs = \"\";\n+            while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n+            ret rs;\n+        }\n+        fn half_a_million_letter_X() -> str {\n+            let i = 0;\n+            let rs = \"\";\n+            while i < 100000 { rs += \"\u534e\u534e\u534e\u534e\u534e\"; i += 1; }\n+            ret rs;\n+        }\n+        assert (eq(half_a_million_letter_X(),\n+                        slice(a_million_letter_X(), 0u, (3u * 500000u))));\n+    }\n+\n+    #[test]\n+    fn test_maybe_slice() {\n+       let ss = \"\u4e2d\u534eVi\u1ec7t Nam\";\n+\n+       assert none == maybe_slice(ss, 0u, 2u);\n+       assert none == maybe_slice(ss, 1u, 3u);\n+       assert none == maybe_slice(ss, 1u, 2u);\n+       assert some(\"\u534e\") == maybe_slice(ss, 3u, 6u);\n+       assert some(\"Vi\u1ec7t Nam\") == maybe_slice(ss, 6u, 16u);\n+       assert none == maybe_slice(ss, 4u, 16u);\n+\n+       /* 0: \u4e2d\n+          3: \u534e\n+          6: V\n+          7: i\n+          8: \u1ec7\n+         11: t\n+         12:\n+         13: N\n+         14: a\n+         15: m */\n+    }\n+\n     #[test]\n     fn test_slice_chars() {\n         assert (eq(\"ab\", slice_chars(\"abc\", 0u, 2u)));"}]}