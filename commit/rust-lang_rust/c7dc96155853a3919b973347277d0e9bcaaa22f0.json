{"sha": "c7dc96155853a3919b973347277d0e9bcaaa22f0", "node_id": "C_kwDOAAsO6NoAKGM3ZGM5NjE1NTg1M2EzOTE5Yjk3MzM0NzI3N2QwZTliY2FhYTIyZjA", "commit": {"author": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-12-13T17:50:03Z"}, "committer": {"name": "Samuel Moelius", "email": "sam@moeli.us", "date": "2022-12-20T10:12:13Z"}, "message": "Address review comments", "tree": {"sha": "02ccec02f1344a536d1cbf1c653b081c7305064e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/02ccec02f1344a536d1cbf1c653b081c7305064e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c7dc96155853a3919b973347277d0e9bcaaa22f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dc96155853a3919b973347277d0e9bcaaa22f0", "html_url": "https://github.com/rust-lang/rust/commit/c7dc96155853a3919b973347277d0e9bcaaa22f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c7dc96155853a3919b973347277d0e9bcaaa22f0/comments", "author": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "committer": {"login": "smoelius", "id": 35515885, "node_id": "MDQ6VXNlcjM1NTE1ODg1", "avatar_url": "https://avatars.githubusercontent.com/u/35515885?v=4", "gravatar_id": "", "url": "https://api.github.com/users/smoelius", "html_url": "https://github.com/smoelius", "followers_url": "https://api.github.com/users/smoelius/followers", "following_url": "https://api.github.com/users/smoelius/following{/other_user}", "gists_url": "https://api.github.com/users/smoelius/gists{/gist_id}", "starred_url": "https://api.github.com/users/smoelius/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/smoelius/subscriptions", "organizations_url": "https://api.github.com/users/smoelius/orgs", "repos_url": "https://api.github.com/users/smoelius/repos", "events_url": "https://api.github.com/users/smoelius/events{/privacy}", "received_events_url": "https://api.github.com/users/smoelius/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "26df55112f754033d18d2157731ae3b4ecd41aa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/26df55112f754033d18d2157731ae3b4ecd41aa8", "html_url": "https://github.com/rust-lang/rust/commit/26df55112f754033d18d2157731ae3b4ecd41aa8"}], "stats": {"total": 19, "additions": 11, "deletions": 8}, "files": [{"sha": "45a85af78b434c6351bff986e86a441057010a06", "filename": "clippy_utils/src/mir/possible_borrower.rs", "status": "modified", "additions": 11, "deletions": 8, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c7dc96155853a3919b973347277d0e9bcaaa22f0/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c7dc96155853a3919b973347277d0e9bcaaa22f0/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fmir%2Fpossible_borrower.rs?ref=c7dc96155853a3919b973347277d0e9bcaaa22f0", "patch": "@@ -11,7 +11,6 @@ use rustc_mir_dataflow::{\n     fmt::DebugWithContext, impls::MaybeStorageLive, lattice::JoinSemiLattice, Analysis, AnalysisDomain,\n     CallReturnPlaces, ResultsCursor,\n };\n-use std::collections::VecDeque;\n use std::ops::ControlFlow;\n \n /// Collects the possible borrowers of each local.\n@@ -216,6 +215,8 @@ pub struct PossibleBorrowerMap<'b, 'tcx> {\n     body: &'b mir::Body<'tcx>,\n     possible_borrower: ResultsCursor<'b, 'tcx, PossibleBorrowerAnalysis<'b, 'tcx>>,\n     maybe_live: ResultsCursor<'b, 'tcx, MaybeStorageLive>,\n+    pushed: BitSet<Local>,\n+    stack: Vec<Local>,\n }\n \n impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n@@ -239,6 +240,8 @@ impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n             body: mir,\n             possible_borrower,\n             maybe_live,\n+            pushed: BitSet::new_empty(mir.local_decls.len()),\n+            stack: Vec::with_capacity(mir.local_decls.len()),\n         }\n     }\n \n@@ -269,29 +272,29 @@ impl<'b, 'tcx> PossibleBorrowerMap<'b, 'tcx> {\n         let possible_borrower = &self.possible_borrower.get().map;\n         let maybe_live = &self.maybe_live;\n \n-        let mut queued = BitSet::new_empty(self.body.local_decls.len());\n-        let mut deque = VecDeque::with_capacity(self.body.local_decls.len());\n+        self.pushed.clear();\n+        self.stack.clear();\n \n         if let Some(borrowers) = possible_borrower.get(&borrowed) {\n             for b in borrowers.iter() {\n-                if queued.insert(b) {\n-                    deque.push_back(b);\n+                if self.pushed.insert(b) {\n+                    self.stack.push(b);\n                 }\n             }\n         } else {\n             // Nothing borrows `borrowed` at `at`.\n             return true;\n         }\n \n-        while let Some(borrower) = deque.pop_front() {\n+        while let Some(borrower) = self.stack.pop() {\n             if maybe_live.contains(borrower) && !borrowers.contains(&borrower) {\n                 return false;\n             }\n \n             if let Some(borrowers) = possible_borrower.get(&borrower) {\n                 for b in borrowers.iter() {\n-                    if queued.insert(b) {\n-                        deque.push_back(b);\n+                    if self.pushed.insert(b) {\n+                        self.stack.push(b);\n                     }\n                 }\n             }"}]}