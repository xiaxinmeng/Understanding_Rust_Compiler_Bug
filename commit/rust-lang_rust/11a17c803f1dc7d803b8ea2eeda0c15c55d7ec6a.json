{"sha": "11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjExYTE3YzgwM2YxZGM3ZDgwM2I4ZWEyZWVkYTBjMTVjNTVkN2VjNmE=", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-18T09:59:57Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-09-18T10:00:12Z"}, "message": "Add multi-token mapping test for goto_definition", "tree": {"sha": "35c18bf5ce0bd1734c3bf513c4d775f4d78c8dc5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/35c18bf5ce0bd1734c3bf513c4d775f4d78c8dc5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a", "html_url": "https://github.com/rust-lang/rust/commit/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a435e49d34bc8cd0129b4440f4804c987acc1b31", "url": "https://api.github.com/repos/rust-lang/rust/commits/a435e49d34bc8cd0129b4440f4804c987acc1b31", "html_url": "https://github.com/rust-lang/rust/commit/a435e49d34bc8cd0129b4440f4804c987acc1b31"}], "stats": {"total": 65, "additions": 55, "deletions": 10}, "files": [{"sha": "b2d0fead87904949fb231549412bcfcfd3651f26", "filename": "crates/ide/src/goto_definition.rs", "status": "modified", "additions": 55, "deletions": 10, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a/crates%2Fide%2Fsrc%2Fgoto_definition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fgoto_definition.rs?ref=11a17c803f1dc7d803b8ea2eeda0c15c55d7ec6a", "patch": "@@ -8,6 +8,7 @@ use ide_db::{\n     helpers::{pick_best_token, try_resolve_derive_input_at},\n     RootDatabase,\n };\n+use itertools::Itertools;\n use syntax::{ast, match_ast, AstNode, AstToken, SyntaxKind::*, SyntaxToken, TextRange, T};\n \n use crate::{\n@@ -52,8 +53,8 @@ pub(crate) fn goto_definition(\n         let nav = resolve_doc_path_for_def(db, def, &link, ns)?.try_to_nav(db)?;\n         return Some(RangeInfo::new(original_token.text_range(), vec![nav]));\n     }\n-\n-    let navs = sema.descend_into_macros_many(original_token.clone())\n+    let navs = sema\n+        .descend_into_macros_many(original_token.clone())\n         .into_iter()\n         .filter_map(|token| {\n             let parent = token.parent()?;\n@@ -65,28 +66,34 @@ pub(crate) fn goto_definition(\n                     ast::Name(name) => {\n                         match NameClass::classify(&sema, &name)? {\n                             NameClass::Definition(def) | NameClass::ConstReference(def) => {\n-                                try_find_trait_item_definition(sema.db, &def).unwrap_or_else(|| def_to_nav(sema.db, def))\n+                                try_find_trait_item_definition(sema.db, &def)\n+                                    .unwrap_or_else(|| def_to_nav(sema.db, def))\n                             }\n                             NameClass::PatFieldShorthand { local_def, field_ref } => {\n                                 local_and_field_to_nav(sema.db, local_def, field_ref)\n                             },\n                         }\n                     },\n-                    ast::Lifetime(lt) => if let Some(name_class) = NameClass::classify_lifetime(&sema, &lt) {\n-                        match name_class {\n-                            NameClass::Definition(def) => def_to_nav(sema.db, def),\n-                            _ => return None,\n+                    ast::Lifetime(lt) => {\n+                        match NameClass::classify_lifetime(&sema, &lt) {\n+                            Some(name_class) => {\n+                                match name_class {\n+                                    NameClass::Definition(def) => def_to_nav(sema.db, def),\n+                                    _ => return None,\n+                                }\n+                            }\n+                            None => reference_definition(&sema, Either::Left(&lt)),\n                         }\n-                    } else {\n-                        reference_definition(&sema, Either::Left(&lt))\n                     },\n-                    ast::TokenTree(tt) => try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n+                    ast::TokenTree(tt) =>\n+                        try_lookup_include_path_or_derive(&sema, tt, token, position.file_id)?,\n                     _ => return None,\n                 }\n             };\n             Some(navs)\n         })\n         .flatten()\n+        .unique()\n         .collect::<Vec<NavigationTarget>>();\n \n     Some(RangeInfo::new(original_token.text_range(), navs))\n@@ -199,6 +206,7 @@ mod tests {\n \n     use crate::fixture;\n \n+    #[track_caller]\n     fn check(ra_fixture: &str) {\n         let (analysis, position, expected) = fixture::annotations(ra_fixture);\n         let navs = analysis.goto_definition(position).unwrap().expect(\"no definition found\").info;\n@@ -1447,4 +1455,41 @@ struct Foo;\n             \"#,\n         );\n     }\n+\n+    #[test]\n+    fn goto_def_in_macro_multi() {\n+        check(\n+            r#\"\n+struct Foo {\n+    foo: ()\n+  //^^^\n+}\n+macro_rules! foo {\n+    ($ident:ident) => {\n+        fn $ident(Foo { $ident }: Foo) {}\n+    }\n+}\n+foo!(foo$0);\n+   //^^^\n+   //^^^\n+\"#,\n+        );\n+        check(\n+            r#\"\n+fn bar() {}\n+ //^^^\n+struct bar;\n+     //^^^\n+macro_rules! foo {\n+    ($ident:ident) => {\n+        fn foo() {\n+            let _: $ident = $ident;\n+        }\n+    }\n+}\n+\n+foo!(bar$0);\n+\"#,\n+        );\n+    }\n }"}]}