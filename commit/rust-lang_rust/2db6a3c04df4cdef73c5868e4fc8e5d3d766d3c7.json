{"sha": "2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJkYjZhM2MwNGRmNGNkZWY3M2M1ODY4ZTRmYzhlNWQzZDc2NmQzYzc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-24T10:43:42Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2019-12-24T10:43:42Z"}, "message": "use new try_from methods", "tree": {"sha": "714e8972d766496453efc70dd958944c2370990c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/714e8972d766496453efc70dd958944c2370990c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "html_url": "https://github.com/rust-lang/rust/commit/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b1e97df8ee3d67b74b3408579f29b017c4c317ea", "url": "https://api.github.com/repos/rust-lang/rust/commits/b1e97df8ee3d67b74b3408579f29b017c4c317ea", "html_url": "https://github.com/rust-lang/rust/commit/b1e97df8ee3d67b74b3408579f29b017c4c317ea"}], "stats": {"total": 25, "additions": 6, "deletions": 19}, "files": [{"sha": "b631f404523f08e311699563229440ecfa6814ad", "filename": "src/helpers.rs", "status": "modified", "additions": 6, "deletions": 19, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7/src%2Fhelpers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7/src%2Fhelpers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fhelpers.rs?ref=2db6a3c04df4cdef73c5868e4fc8e5d3d766d3c7", "patch": "@@ -501,35 +501,22 @@ fn bytes_to_os_str<'tcx, 'a>(bytes: &'a [u8]) -> InterpResult<'tcx, &'a OsStr> {\n     Ok(&OsStr::new(s))\n }\n \n-// FIXME: change `ImmTy::from_int` so it returns an `InterpResult` instead and remove this\n-// function.\n pub fn immty_from_int_checked<'tcx>(\n     int: impl Into<i128>,\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    // If `int` does not fit in `size` bits, we error instead of letting\n-    // `ImmTy::from_int` panic.\n-    let size = layout.size;\n-    let truncated = truncate(int as u128, size);\n-    if sign_extend(truncated, size) as i128 != int {\n-        throw_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, size.bits())\n-    }\n-    Ok(ImmTy::from_int(int, layout))\n+    Ok(ImmTy::try_from_int(int, layout).ok_or_else(||\n+        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+    )?)\n }\n \n-// FIXME: change `ImmTy::from_uint` so it returns an `InterpResult` instead and remove this\n-// function.\n pub fn immty_from_uint_checked<'tcx>(\n     int: impl Into<u128>,\n     layout: TyLayout<'tcx>,\n ) -> InterpResult<'tcx, ImmTy<'tcx, Tag>> {\n     let int = int.into();\n-    // If `int` does not fit in `size` bits, we error instead of letting\n-    // `ImmTy::from_int` panic.\n-    let size = layout.size;\n-    if truncate(int, size) != int {\n-        throw_unsup_format!(\"Unsigned value {:#x} does not fit in {} bits\", int, size.bits())\n-    }\n-    Ok(ImmTy::from_uint(int, layout))\n+    Ok(ImmTy::try_from_uint(int, layout).ok_or_else(||\n+        err_unsup_format!(\"Signed value {:#x} does not fit in {} bits\", int, layout.size.bits())\n+    )?)\n }"}]}