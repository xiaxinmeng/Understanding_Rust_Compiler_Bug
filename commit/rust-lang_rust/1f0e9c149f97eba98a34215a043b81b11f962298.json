{"sha": "1f0e9c149f97eba98a34215a043b81b11f962298", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFmMGU5YzE0OWY5N2ViYTk4YTM0MjE1YTA0M2I4MWIxMWY5NjIyOTg=", "commit": {"author": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-13T18:26:04Z"}, "committer": {"name": "Alexander Andreev", "email": "andreevlex.as@gmail.com", "date": "2019-07-13T18:26:04Z"}, "message": "More resolution modules with attribute path\n\n#1211", "tree": {"sha": "b32921b48184c3273dda8f607a7b0867b6b1478c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b32921b48184c3273dda8f607a7b0867b6b1478c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1f0e9c149f97eba98a34215a043b81b11f962298", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1f0e9c149f97eba98a34215a043b81b11f962298", "html_url": "https://github.com/rust-lang/rust/commit/1f0e9c149f97eba98a34215a043b81b11f962298", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1f0e9c149f97eba98a34215a043b81b11f962298/comments", "author": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ava57r", "id": 20382553, "node_id": "MDQ6VXNlcjIwMzgyNTUz", "avatar_url": "https://avatars.githubusercontent.com/u/20382553?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ava57r", "html_url": "https://github.com/ava57r", "followers_url": "https://api.github.com/users/ava57r/followers", "following_url": "https://api.github.com/users/ava57r/following{/other_user}", "gists_url": "https://api.github.com/users/ava57r/gists{/gist_id}", "starred_url": "https://api.github.com/users/ava57r/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ava57r/subscriptions", "organizations_url": "https://api.github.com/users/ava57r/orgs", "repos_url": "https://api.github.com/users/ava57r/repos", "events_url": "https://api.github.com/users/ava57r/events{/privacy}", "received_events_url": "https://api.github.com/users/ava57r/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1bfa8fc727356e398ad519a58c63974e6ff04c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1bfa8fc727356e398ad519a58c63974e6ff04c5", "html_url": "https://github.com/rust-lang/rust/commit/f1bfa8fc727356e398ad519a58c63974e6ff04c5"}], "stats": {"total": 525, "additions": 521, "deletions": 4}, "files": [{"sha": "7eee3cb38bcba0f6ad7902e1f70dca9953207a85", "filename": "crates/ra_hir/src/nameres/collector.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1f0e9c149f97eba98a34215a043b81b11f962298/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0e9c149f97eba98a34215a043b81b11f962298/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Fcollector.rs?ref=1f0e9c149f97eba98a34215a043b81b11f962298", "patch": "@@ -84,7 +84,7 @@ struct DefCollector<DB> {\n     global_macro_scope: FxHashMap<Name, MacroDefId>,\n \n     /// Some macro use `$tt:tt which mean we have to handle the macro perfectly\n-    /// To prevent stackoverflow, we add a deep counter here for prevent that.\n+    /// To prevent stack overflow, we add a deep counter here for prevent that.\n     macro_stack_monitor: MacroStackMonitor,\n }\n \n@@ -497,7 +497,7 @@ where\n \n     fn collect_module(&mut self, module: &raw::ModuleData) {\n         match module {\n-            // inline module, just recurse\n+            // inline module, just recursive\n             raw::ModuleData::Definition { name, items, ast_id } => {\n                 let module_id =\n                     self.push_child_module(name.clone(), ast_id.with_file_id(self.file_id), None);\n@@ -509,7 +509,7 @@ where\n                 }\n                 .collect(&*items);\n             }\n-            // out of line module, resolve, parse and recurse\n+            // out of line module, resolve, parse and recursive\n             raw::ModuleData::Declaration { name, ast_id, attr_path } => {\n                 let ast_id = ast_id.with_file_id(self.file_id);\n                 let is_root = self.def_collector.def_map.modules[self.module_id].parent.is_none();\n@@ -649,7 +649,8 @@ fn resolve_submodule(\n     let file_dir_mod = dir_path.join(format!(\"{}/{}.rs\", mod_name, name));\n     let mut candidates = ArrayVec::<[_; 3]>::new();\n     let file_attr_mod = attr_path.map(|file_path| {\n-        let file_attr_mod = dir_path.join(file_path.to_string());\n+        let file_path = normalize_attribute_path(file_path);\n+        let file_attr_mod = dir_path.join(file_path).normalize();\n         candidates.push(file_attr_mod.clone());\n \n         file_attr_mod\n@@ -675,6 +676,17 @@ fn resolve_submodule(\n     }\n }\n \n+fn normalize_attribute_path(file_path: &SmolStr) -> String {\n+    let current_dir = \"./\";\n+\n+    let separator = |path: &str| path.replace(\"\\\\\", \"/\");\n+    if file_path.starts_with(current_dir) {\n+        separator(&file_path[current_dir.len()..])\n+    } else {\n+        separator(file_path.as_str())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     use ra_db::SourceDatabase;"}, {"sha": "c36054c4b7b10ec68ffb0d1098351a4881c7e320", "filename": "crates/ra_hir/src/nameres/tests/mods.rs", "status": "modified", "additions": 505, "deletions": 0, "changes": 505, "blob_url": "https://github.com/rust-lang/rust/blob/1f0e9c149f97eba98a34215a043b81b11f962298/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1f0e9c149f97eba98a34215a043b81b11f962298/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fnameres%2Ftests%2Fmods.rs?ref=1f0e9c149f97eba98a34215a043b81b11f962298", "patch": "@@ -172,6 +172,511 @@ fn module_resolution_module_with_path_non_crate_root() {\n     \"###);\n }\n \n+#[test]\n+fn module_resolution_module_decl_path_super() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"bar/baz/module.rs\\\"]\n+        mod foo;\n+        pub struct Baz;\n+\n+        //- /bar/baz/module.rs\n+        use super::Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"module/mod.rs\\\"]\n+        mod foo;\n+\n+        //- /module/mod.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_relative_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        #[path = \\\"./sub.rs\\\"]\n+        pub mod foo_bar;\n+\n+        //- /sub.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eefoo_bar: t\n+        \u22ee\n+        \u22eecrate::foo::foo_bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_relative_path_2() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo/mod.rs\n+        #[path=\\\"../sub.rs\\\"]\n+        pub mod foo_bar;\n+\n+        //- /sub.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eefoo_bar: t\n+        \u22ee\n+        \u22eecrate::foo::foo_bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs_2() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"module/bar/mod.rs\\\"]\n+        mod foo;\n+\n+        //- /module/bar/mod.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_explicit_path_mod_rs_with_win_separator() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"module\\\\bar\\\\mod.rs\\\"]\n+        mod foo;\n+\n+        //- /module/bar/mod.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"models\\\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/bar.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_2() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"models/db\\\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/db/bar.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_3() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"models/db\\\"]\n+        mod foo {\n+            #[path = \\\"users.rs\\\"]\n+            mod bar;\n+        }\n+\n+        //- /models/db/users.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_empty_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"\\\"]\n+        mod foo {\n+            #[path = \\\"users.rs\\\"]\n+            mod bar;\n+        }\n+\n+        //- /users.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+#[test]\n+fn module_resolution_decl_empty_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"\\\"]\n+        mod foo;\n+\n+        //- /foo.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_relative_path() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        #[path = \\\"./models\\\"]\n+        mod foo {\n+            mod bar;\n+        }\n+\n+        //- /models/bar.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo {\n+            #[path = \\\"baz.rs\\\"]\n+            mod bar;\n+        }\n+        use self::foo::bar::Baz;\n+\n+        //- /foo/baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eeBaz: t v\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_mod_rs() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo/mod.rs\n+        mod bar {\n+            #[path = \\\"qwe.rs\\\"]\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /foo/bar/qwe.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_non_crate_root() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        mod bar {\n+            #[path = \\\"qwe.rs\\\"]\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /foo/bar/qwe.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n+// FIXME: issue #1510. not support out-of-line modules inside inline.\n+#[test]\n+#[ignore]\n+fn module_resolution_decl_inside_inline_module_in_non_crate_root_2() {\n+    let map = def_map_with_crate_graph(\n+        \"\n+        //- /main.rs\n+        mod foo;\n+\n+        //- /foo.rs\n+        #[path = \\\"bar\\\"]\n+        mod bar {\n+            pub mod baz;\n+        }\n+        use self::bar::baz::Baz;\n+\n+        //- /bar/baz.rs\n+        pub struct Baz;\n+        \",\n+        crate_graph! {\n+            \"main\": (\"/main.rs\", []),\n+        },\n+    );\n+\n+    assert_snapshot_matches!(map, @r###\"\n+        \u22eecrate\n+        \u22eefoo: t\n+        \u22ee\n+        \u22eecrate::foo\n+        \u22eeBaz: t v\n+        \u22eebar: t\n+        \u22ee\n+        \u22eecrate::foo::bar\n+        \u22eebaz: t\n+        \u22ee\n+        \u22eecrate::foo::bar::baz\n+        \u22eeBaz: t v\n+    \"###);\n+}\n+\n #[test]\n fn unresolved_module_diagnostics() {\n     let diagnostics = MockDatabase::with_files("}]}