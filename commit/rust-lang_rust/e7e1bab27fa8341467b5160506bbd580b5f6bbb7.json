{"sha": "e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3ZTFiYWIyN2ZhODM0MTQ2N2I1MTYwNTA2YmJkNTgwYjVmNmJiYjc=", "commit": {"author": {"name": "Philipp Br\u00fcschweiler", "email": "blei42@gmail.com", "date": "2012-10-09T09:59:03Z"}, "committer": {"name": "Tim Chevalier", "email": "chevalier@alum.wellesley.edu", "date": "2012-10-17T22:34:55Z"}, "message": "libsyntax: refactor the parser to consider foreign items as items\n\nparse_item_or_view_item() would drop visibility if none of the conditions\nfollowing it would hold. This was the case when parsing extern {} blocks,\nwhere the function was only used to parse view items, but discarded the\nvisibility of the first not-view item.", "tree": {"sha": "e0196fb2e0cc360308cd39be558fce7c7112d4ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e0196fb2e0cc360308cd39be558fce7c7112d4ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "html_url": "https://github.com/rust-lang/rust/commit/e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/comments", "author": {"login": "Blei", "id": 52674, "node_id": "MDQ6VXNlcjUyNjc0", "avatar_url": "https://avatars.githubusercontent.com/u/52674?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Blei", "html_url": "https://github.com/Blei", "followers_url": "https://api.github.com/users/Blei/followers", "following_url": "https://api.github.com/users/Blei/following{/other_user}", "gists_url": "https://api.github.com/users/Blei/gists{/gist_id}", "starred_url": "https://api.github.com/users/Blei/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Blei/subscriptions", "organizations_url": "https://api.github.com/users/Blei/orgs", "repos_url": "https://api.github.com/users/Blei/repos", "events_url": "https://api.github.com/users/Blei/events{/privacy}", "received_events_url": "https://api.github.com/users/Blei/received_events", "type": "User", "site_admin": false}, "committer": {"login": "catamorphism", "id": 427212, "node_id": "MDQ6VXNlcjQyNzIxMg==", "avatar_url": "https://avatars.githubusercontent.com/u/427212?v=4", "gravatar_id": "", "url": "https://api.github.com/users/catamorphism", "html_url": "https://github.com/catamorphism", "followers_url": "https://api.github.com/users/catamorphism/followers", "following_url": "https://api.github.com/users/catamorphism/following{/other_user}", "gists_url": "https://api.github.com/users/catamorphism/gists{/gist_id}", "starred_url": "https://api.github.com/users/catamorphism/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/catamorphism/subscriptions", "organizations_url": "https://api.github.com/users/catamorphism/orgs", "repos_url": "https://api.github.com/users/catamorphism/repos", "events_url": "https://api.github.com/users/catamorphism/events{/privacy}", "received_events_url": "https://api.github.com/users/catamorphism/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7dde840dc6b077974d48ae7c966ea16a0e36f3f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/7dde840dc6b077974d48ae7c966ea16a0e36f3f6", "html_url": "https://github.com/rust-lang/rust/commit/7dde840dc6b077974d48ae7c966ea16a0e36f3f6"}], "stats": {"total": 92, "additions": 65, "deletions": 27}, "files": [{"sha": "d59f36e068137af6346fdbd69e51b39c1ea5ac22", "filename": "src/libcore/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "patch": "@@ -1952,7 +1952,7 @@ pub mod raw {\n     }\n \n     /// Converts a vector of bytes to a string.\n-    pub pub unsafe fn from_bytes(v: &[const u8]) -> ~str {\n+    pub unsafe fn from_bytes(v: &[const u8]) -> ~str {\n         do vec::as_const_buf(v) |buf, len| {\n             from_buf_len(buf, len)\n         }"}, {"sha": "cbad662800b5f7f7c271f20c04b59022a3c95103", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 60, "deletions": 26, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "patch": "@@ -124,12 +124,13 @@ type item_info = (ident, item_, Option<~[attribute]>);\n enum item_or_view_item {\n     iovi_none,\n     iovi_item(@item),\n+    iovi_foreign_item(@foreign_item),\n     iovi_view_item(@view_item)\n }\n \n enum view_item_parse_mode {\n     VIEW_ITEMS_AND_ITEMS_ALLOWED,\n-    VIEW_ITEMS_ALLOWED,\n+    VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED,\n     IMPORTS_AND_ITEMS_ALLOWED\n }\n \n@@ -2184,7 +2185,7 @@ impl Parser {\n \n             let item_attrs = vec::append(first_item_attrs, item_attrs);\n \n-            match self.parse_item_or_view_item(item_attrs, true) {\n+            match self.parse_item_or_view_item(item_attrs, true, false) {\n               iovi_item(i) => {\n                 let mut hi = i.span.hi;\n                 let decl = @spanned(lo, hi, decl_item(i));\n@@ -2194,6 +2195,9 @@ impl Parser {\n                 self.span_fatal(vi.span, ~\"view items must be declared at \\\n                                            the top of the block\");\n               }\n+              iovi_foreign_item(_) => {\n+                  self.fatal(~\"foreign items are not allowed here\");\n+              }\n               iovi_none() => { /* fallthrough */ }\n             }\n \n@@ -2259,7 +2263,7 @@ impl Parser {\n         let mut stmts = ~[];\n         let mut expr = None;\n \n-        let {attrs_remaining, view_items, items: items} =\n+        let {attrs_remaining, view_items, items: items, _} =\n             self.parse_items_and_view_items(first_item_attrs,\n                                             IMPORTS_AND_ITEMS_ALLOWED);\n \n@@ -2844,7 +2848,7 @@ impl Parser {\n     fn parse_mod_items(term: token::Token,\n                        +first_item_attrs: ~[attribute]) -> _mod {\n         // Shouldn't be any view items since we've already parsed an item attr\n-        let {attrs_remaining, view_items, items: starting_items} =\n+        let {attrs_remaining, view_items, items: starting_items, _} =\n             self.parse_items_and_view_items(first_item_attrs,\n                                             VIEW_ITEMS_AND_ITEMS_ALLOWED);\n         let mut items: ~[@item] = move starting_items;\n@@ -2858,7 +2862,7 @@ impl Parser {\n             }\n             debug!(\"parse_mod_items: parse_item_or_view_item(attrs=%?)\",\n                    attrs);\n-            match self.parse_item_or_view_item(attrs, true) {\n+            match self.parse_item_or_view_item(attrs, true, false) {\n               iovi_item(item) => items.push(item),\n               iovi_view_item(view_item) => {\n                 self.span_fatal(view_item.span, ~\"view items must be \\\n@@ -2958,11 +2962,11 @@ impl Parser {\n                                +first_item_attrs: ~[attribute]) ->\n         foreign_mod {\n         // Shouldn't be any view items since we've already parsed an item attr\n-        let {attrs_remaining, view_items, items: _} =\n+        let {attrs_remaining, view_items, items: _, foreign_items} =\n             self.parse_items_and_view_items(first_item_attrs,\n-                                            VIEW_ITEMS_ALLOWED);\n+                                        VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED);\n \n-        let mut items: ~[@foreign_item] = ~[];\n+        let mut items: ~[@foreign_item] = move foreign_items;\n         let mut initial_attrs = attrs_remaining;\n         while self.token != token::RBRACE {\n             let attrs = vec::append(initial_attrs,\n@@ -2971,7 +2975,7 @@ impl Parser {\n             items.push(self.parse_foreign_item(attrs));\n         }\n         return {sort: sort, view_items: view_items,\n-             items: items};\n+            items: items};\n     }\n \n     fn parse_item_foreign_mod(lo: uint,\n@@ -3229,8 +3233,11 @@ impl Parser {\n         }\n     }\n \n-    fn parse_item_or_view_item(+attrs: ~[attribute], items_allowed: bool)\n+    fn parse_item_or_view_item(+attrs: ~[attribute], items_allowed: bool,\n+                               foreign_items_allowed: bool)\n                             -> item_or_view_item {\n+        assert items_allowed != foreign_items_allowed;\n+\n         maybe_whole!(iovi self,nt_item);\n         let lo = self.span.lo;\n \n@@ -3248,6 +3255,9 @@ impl Parser {\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n+        } else if foreign_items_allowed && self.is_keyword(~\"const\") {\n+            let item = self.parse_item_foreign_const(visibility, attrs);\n+            return iovi_foreign_item(item);\n         } else if items_allowed &&\n             self.is_keyword(~\"fn\") &&\n             !self.fn_expr_lookahead(self.look_ahead(1u)) {\n@@ -3262,6 +3272,10 @@ impl Parser {\n             return iovi_item(self.mk_item(lo, self.last_span.hi, ident, item_,\n                                           visibility,\n                                           maybe_append(attrs, extra_attrs)));\n+        } else if foreign_items_allowed &&\n+            (self.is_keyword(~\"fn\") || self.is_keyword(~\"pure\")) {\n+                let item = self.parse_item_foreign_fn(visibility, attrs);\n+                return iovi_foreign_item(item);\n         } else if items_allowed && self.is_keyword(~\"unsafe\")\n             && self.look_ahead(1u) != token::LBRACE {\n             self.bump();\n@@ -3348,16 +3362,24 @@ impl Parser {\n             return iovi_item(self.mk_item(lo, self.last_span.hi, id, item_,\n                                           visibility, attrs));\n         } else {\n+            if visibility != inherited {\n+                let mut s = ~\"unmatched visibility `\";\n+                s += if visibility == public { ~\"pub\" } else { ~\"priv\" };\n+                s += ~\"`\";\n+                self.span_fatal(copy self.last_span, s);\n+            }\n             return iovi_none;\n         };\n     }\n \n     fn parse_item(+attrs: ~[attribute]) -> Option<@ast::item> {\n-        match self.parse_item_or_view_item(attrs, true) {\n+        match self.parse_item_or_view_item(attrs, true, false) {\n             iovi_none =>\n                 None,\n             iovi_view_item(_) =>\n                 self.fatal(~\"view items are not allowed here\"),\n+            iovi_foreign_item(_) =>\n+                self.fatal(~\"foreign items are not allowed here\"),\n             iovi_item(item) =>\n                 Some(item)\n         }\n@@ -3492,28 +3514,35 @@ impl Parser {\n                                   mode: view_item_parse_mode)\n                                -> {attrs_remaining: ~[attribute],\n                                    view_items: ~[@view_item],\n-                                   items: ~[@item]} {\n+                                   items: ~[@item],\n+                                   foreign_items: ~[@foreign_item]} {\n         let mut attrs = vec::append(first_item_attrs,\n                                     self.parse_outer_attributes());\n \n-        let items_allowed;\n-        match mode {\n-            VIEW_ITEMS_AND_ITEMS_ALLOWED | IMPORTS_AND_ITEMS_ALLOWED =>\n-                items_allowed = true,\n-            VIEW_ITEMS_ALLOWED =>\n-                items_allowed = false\n-        }\n+        let items_allowed = match mode {\n+            VIEW_ITEMS_AND_ITEMS_ALLOWED | IMPORTS_AND_ITEMS_ALLOWED => true,\n+            VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED => false\n+        };\n \n-        let (view_items, items) = (DVec(), DVec());\n+        let restricted_to_imports = match mode {\n+            IMPORTS_AND_ITEMS_ALLOWED => true,\n+            VIEW_ITEMS_AND_ITEMS_ALLOWED |\n+            VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED => false\n+        };\n+\n+        let foreign_items_allowed = match mode {\n+            VIEW_ITEMS_AND_FOREIGN_ITEMS_ALLOWED => true,\n+            VIEW_ITEMS_AND_ITEMS_ALLOWED | IMPORTS_AND_ITEMS_ALLOWED => false\n+        };\n+\n+        let (view_items, items, foreign_items) = (DVec(), DVec(), DVec());\n         loop {\n-            match self.parse_item_or_view_item(attrs, items_allowed) {\n+            match self.parse_item_or_view_item(attrs, items_allowed,\n+                                               foreign_items_allowed) {\n                 iovi_none =>\n                     break,\n                 iovi_view_item(view_item) => {\n-                    match mode {\n-                        VIEW_ITEMS_AND_ITEMS_ALLOWED |\n-                        VIEW_ITEMS_ALLOWED => {}\n-                        IMPORTS_AND_ITEMS_ALLOWED =>\n+                    if restricted_to_imports {\n                             match view_item.node {\n                                 view_item_import(_) => {}\n                                 view_item_export(_) | view_item_use(*) =>\n@@ -3528,13 +3557,18 @@ impl Parser {\n                     assert items_allowed;\n                     items.push(item)\n                 }\n+                iovi_foreign_item(foreign_item) => {\n+                    assert foreign_items_allowed;\n+                    foreign_items.push(foreign_item);\n+                }\n             }\n             attrs = self.parse_outer_attributes();\n         }\n \n         {attrs_remaining: attrs,\n          view_items: dvec::unwrap(move view_items),\n-         items: dvec::unwrap(move items)}\n+         items: dvec::unwrap(move items),\n+         foreign_items: dvec::unwrap(move foreign_items)}\n     }\n \n     // Parses a source module as a crate"}, {"sha": "32997fcce31a66ddbb29bd571dbba1ef577733c1", "filename": "src/test/compile-fail/duplicate-visibility.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Ftest%2Fcompile-fail%2Fduplicate-visibility.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7e1bab27fa8341467b5160506bbd580b5f6bbb7/src%2Ftest%2Fcompile-fail%2Fduplicate-visibility.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fduplicate-visibility.rs?ref=e7e1bab27fa8341467b5160506bbd580b5f6bbb7", "patch": "@@ -0,0 +1,4 @@\n+// error-pattern:unmatched visibility `pub`\n+extern {\n+    pub pub fn foo();\n+}"}]}