{"sha": "e333725664c45874262ecb11e511c17cfd4672f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzMzM3MjU2NjRjNDU4NzQyNjJlY2IxMWU1MTFjMTdjZmQ0NjcyZjA=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-05-08T23:41:44Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2018-05-09T00:01:37Z"}, "message": "use fmt::Result where applicable", "tree": {"sha": "b5f01abb2bc85e81b5b6f16c8ec4b4eb2962e2f6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5f01abb2bc85e81b5b6f16c8ec4b4eb2962e2f6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e333725664c45874262ecb11e511c17cfd4672f0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e333725664c45874262ecb11e511c17cfd4672f0", "html_url": "https://github.com/rust-lang/rust/commit/e333725664c45874262ecb11e511c17cfd4672f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e333725664c45874262ecb11e511c17cfd4672f0/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ff4b42064b374bb62043f7729f84b6d979c7667", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ff4b42064b374bb62043f7729f84b6d979c7667", "html_url": "https://github.com/rust-lang/rust/commit/8ff4b42064b374bb62043f7729f84b6d979c7667"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "f56f4e12e7a02b9b16ffa34c2f9119ad0c492235", "filename": "src/librustc/ich/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc%2Fich%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc%2Fich%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Ffingerprint.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -67,7 +67,7 @@ impl Fingerprint {\n }\n \n impl ::std::fmt::Display for Fingerprint {\n-    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> Result<(), ::std::fmt::Error> {\n+    fn fmt(&self, formatter: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {\n         write!(formatter, \"{:x}-{:x}\", self.0, self.1)\n     }\n }"}, {"sha": "54407658e6ccc85f77e27682800529d98db3fba0", "filename": "src/librustc_data_structures/control_flow_graph/dominators/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fcontrol_flow_graph%2Fdominators%2Fmod.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -175,7 +175,7 @@ impl<Node: Idx> DominatorTree<Node> {\n }\n \n impl<Node: Idx> fmt::Debug for DominatorTree<Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&DominatorTreeNode {\n                             tree: self,\n                             node: self.root,\n@@ -190,7 +190,7 @@ struct DominatorTreeNode<'tree, Node: Idx> {\n }\n \n impl<'tree, Node: Idx> fmt::Debug for DominatorTreeNode<'tree, Node> {\n-    fn fmt(&self, fmt: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, fmt: &mut fmt::Formatter) -> fmt::Result {\n         let subtrees: Vec<_> = self.tree\n             .children(self.node)\n             .iter()"}, {"sha": "aa113fac9fb7dff28baa92dfba7bfe5f0b80b50b", "filename": "src/librustc_data_structures/owning_ref/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Fowning_ref%2Fmod.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -1002,7 +1002,7 @@ impl<O, T: ?Sized> Debug for OwningRef<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f,\n                \"OwningRef {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1014,7 +1014,7 @@ impl<O, T: ?Sized> Debug for OwningRefMut<O, T>\n     where O: Debug,\n           T: Debug,\n {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f,\n                \"OwningRefMut {{ owner: {:?}, reference: {:?} }}\",\n                self.owner(),\n@@ -1047,7 +1047,7 @@ unsafe impl<O, T: ?Sized> Sync for OwningRefMut<O, T>\n     where O: Sync, for<'a> (&'a mut T): Sync {}\n \n impl Debug for Erased {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"<Erased>\",)\n     }\n }"}, {"sha": "fd90e1cbe0866b16bdbfaefb2dfd20c4e6055a20", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -232,7 +232,7 @@ impl FatalError {\n }\n \n impl fmt::Display for FatalError {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"parser fatal error\")\n     }\n }\n@@ -249,7 +249,7 @@ impl error::Error for FatalError {\n pub struct ExplicitBug;\n \n impl fmt::Display for ExplicitBug {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         write!(f, \"parser internal bug\")\n     }\n }"}, {"sha": "57b8824191f7b86ab50e1e02148e1eb35c129fcc", "filename": "src/librustc_mir/borrow_check/nll/region_infer/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Fmod.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -1185,7 +1185,7 @@ impl<'tcx> RegionDefinition<'tcx> {\n }\n \n impl fmt::Debug for Constraint {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(\n             formatter,\n             \"({:?}: {:?} @ {:?}) due to {:?}\","}, {"sha": "79252e7654bfa17a8fad3b4031ce740e05ec95bf", "filename": "src/librustc_mir/transform/elaborate_drops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Felaborate_drops.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -174,7 +174,7 @@ struct Elaborator<'a, 'b: 'a, 'tcx: 'b> {\n }\n \n impl<'a, 'b, 'tcx> fmt::Debug for Elaborator<'a, 'b, 'tcx> {\n-    fn fmt(&self, _f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, _f: &mut fmt::Formatter) -> fmt::Result {\n         Ok(())\n     }\n }"}, {"sha": "fe9fc3ddd680ee5626cc42d67ae4b53daaf18c35", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -2579,7 +2579,7 @@ fn item_function(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n }\n \n fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n-                      implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> Result<(), fmt::Error> {\n+                      implementor_dups: &FxHashMap<&str, (DefId, bool)>) -> fmt::Result {\n     write!(w, \"<li><table class='table-display'><tbody><tr><td><code>\")?;\n     // If there's already another implementor that has the same abbridged name, use the\n     // full path, for example in `std::iter::ExactSizeIterator`\n@@ -2612,7 +2612,7 @@ fn render_implementor(cx: &Context, implementor: &Impl, w: &mut fmt::Formatter,\n \n fn render_impls(cx: &Context, w: &mut fmt::Formatter,\n                 traits: &[&&Impl],\n-                containing_item: &clean::Item) -> Result<(), fmt::Error> {\n+                containing_item: &clean::Item) -> fmt::Result {\n     for i in traits {\n         let did = i.trait_did().unwrap();\n         let assoc_link = AssocItemLink::GotoSource(did, &i.inner_impl().provided_trait_methods);"}, {"sha": "5d35a7861736ae18097d05b32150e59c447cee8d", "filename": "src/libstd/path.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -1460,7 +1460,7 @@ impl<P: AsRef<Path>> iter::Extend<P> for PathBuf {\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl fmt::Debug for PathBuf {\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }"}, {"sha": "1ef79547431f8ac0a23d9e3a85d92c288da346fa", "filename": "src/libstd/sys/redox/syscall/error.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Fsyscall%2Ferror.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -48,13 +48,13 @@ impl Error {\n }\n \n impl fmt::Debug for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> result::Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }\n \n impl fmt::Display for Error {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> result::Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         f.write_str(self.text())\n     }\n }"}, {"sha": "14a2555adf9baa109e7d7afe08bbea07e685826a", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -56,7 +56,7 @@ pub struct CodePoint {\n /// Example: `U+1F4A9`\n impl fmt::Debug for CodePoint {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         write!(formatter, \"U+{:04X}\", self.value)\n     }\n }\n@@ -144,7 +144,7 @@ impl ops::DerefMut for Wtf8Buf {\n /// Example: `\"a\\u{D800}\"` for a string with code points [U+0061, U+D800]\n impl fmt::Debug for Wtf8Buf {\n     #[inline]\n-    fn fmt(&self, formatter: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, formatter: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(&**self, formatter)\n     }\n }"}, {"sha": "2b8603c75a57b50733b0ac0ec611b8fd438b93d4", "filename": "src/libsyntax_ext/format_foreign.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibsyntax_ext%2Fformat_foreign.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Flibsyntax_ext%2Fformat_foreign.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fformat_foreign.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -989,7 +989,7 @@ mod strcursor {\n     }\n \n     impl<'a> std::fmt::Debug for StrCursor<'a> {\n-        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> Result<(), std::fmt::Error> {\n+        fn fmt(&self, fmt: &mut std::fmt::Formatter) -> std::fmt::Result {\n             write!(fmt, \"StrCursor({:?} | {:?})\", self.slice_before(), self.slice_after())\n         }\n     }"}, {"sha": "2d478e954e7cb7cb493e98b9da4e2ad124f80b33", "filename": "src/test/run-pass/atomic-print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Ftest%2Frun-pass%2Fatomic-print.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fatomic-print.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -15,7 +15,7 @@ use std::{env, fmt, process, sync, thread};\n \n struct SlowFmt(u32);\n impl fmt::Debug for SlowFmt {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         thread::sleep_ms(3);\n         self.0.fmt(f)\n     }"}, {"sha": "c1e408cc02ac6764aa95fc848f28fe26ddcf4549", "filename": "src/test/run-pass/union/union-trait-impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e333725664c45874262ecb11e511c17cfd4672f0/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e333725664c45874262ecb11e511c17cfd4672f0/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funion%2Funion-trait-impl.rs?ref=e333725664c45874262ecb11e511c17cfd4672f0", "patch": "@@ -15,7 +15,7 @@ union U {\n }\n \n impl fmt::Display for U {\n-    fn fmt(&self, f: &mut fmt::Formatter) -> Result<(), fmt::Error> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         unsafe { write!(f, \"Oh hai {}\", self.a) }\n     }\n }"}]}