{"sha": "6d40751b37ef453bee5d8a9c47b00ef205d61738", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkNDA3NTFiMzdlZjQ1M2JlZTVkOGE5YzQ3YjAwZWYyMDVkNjE3Mzg=", "commit": {"author": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-22T20:33:42Z"}, "committer": {"name": "Josh Stone", "email": "jistone@redhat.com", "date": "2020-04-22T20:33:42Z"}, "message": "impl From<Cow> for Rc and Arc\n\nThese forward `Borrowed`/`Owned` values to existing `From` impls.\n\n    impl<'a, B> From<Cow<'a, B>> for Rc<B>\n    where\n        B: ToOwned + ?Sized,\n        Rc<B>: From<&'a B> + From<B::Owned>,\n\n    impl<'a, B> From<Cow<'a, B>> for Arc<B>\n    where\n        B: ToOwned + ?Sized,\n        Arc<B>: From<&'a B> + From<B::Owned>,", "tree": {"sha": "4de2ebd1e5381e05af4cec4304671d2ff8f86c1d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de2ebd1e5381e05af4cec4304671d2ff8f86c1d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6d40751b37ef453bee5d8a9c47b00ef205d61738", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6d40751b37ef453bee5d8a9c47b00ef205d61738", "html_url": "https://github.com/rust-lang/rust/commit/6d40751b37ef453bee5d8a9c47b00ef205d61738", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6d40751b37ef453bee5d8a9c47b00ef205d61738/comments", "author": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cuviper", "id": 36186, "node_id": "MDQ6VXNlcjM2MTg2", "avatar_url": "https://avatars.githubusercontent.com/u/36186?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cuviper", "html_url": "https://github.com/cuviper", "followers_url": "https://api.github.com/users/cuviper/followers", "following_url": "https://api.github.com/users/cuviper/following{/other_user}", "gists_url": "https://api.github.com/users/cuviper/gists{/gist_id}", "starred_url": "https://api.github.com/users/cuviper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cuviper/subscriptions", "organizations_url": "https://api.github.com/users/cuviper/orgs", "repos_url": "https://api.github.com/users/cuviper/repos", "events_url": "https://api.github.com/users/cuviper/events{/privacy}", "received_events_url": "https://api.github.com/users/cuviper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b0fb57bd8d18946787a79d1244154f2512dcf15b", "url": "https://api.github.com/repos/rust-lang/rust/commits/b0fb57bd8d18946787a79d1244154f2512dcf15b", "html_url": "https://github.com/rust-lang/rust/commit/b0fb57bd8d18946787a79d1244154f2512dcf15b"}], "stats": {"total": 32, "additions": 32, "deletions": 0}, "files": [{"sha": "44a390c3ec3439d12efa589325729b2b2a859e81", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d40751b37ef453bee5d8a9c47b00ef205d61738/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d40751b37ef453bee5d8a9c47b00ef205d61738/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=6d40751b37ef453bee5d8a9c47b00ef205d61738", "patch": "@@ -252,6 +252,7 @@ use core::ptr::{self, NonNull};\n use core::slice::{self, from_raw_parts_mut};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n+use crate::borrow::{Cow, ToOwned};\n use crate::string::String;\n use crate::vec::Vec;\n \n@@ -1492,6 +1493,21 @@ impl<T> From<Vec<T>> for Rc<[T]> {\n     }\n }\n \n+#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]\n+impl<'a, B> From<Cow<'a, B>> for Rc<B>\n+where\n+    B: ToOwned + ?Sized,\n+    Rc<B>: From<&'a B> + From<B::Owned>,\n+{\n+    #[inline]\n+    fn from(cow: Cow<'a, B>) -> Rc<B> {\n+        match cow {\n+            Cow::Borrowed(s) => Rc::from(s),\n+            Cow::Owned(s) => Rc::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Rc<[T]>> for Rc<[T; N]>\n where"}, {"sha": "a45929e86fc19d86332948995e745be39ef39dd5", "filename": "src/liballoc/sync.rs", "status": "modified", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/6d40751b37ef453bee5d8a9c47b00ef205d61738/src%2Fliballoc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6d40751b37ef453bee5d8a9c47b00ef205d61738/src%2Fliballoc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fsync.rs?ref=6d40751b37ef453bee5d8a9c47b00ef205d61738", "patch": "@@ -25,6 +25,7 @@ use core::sync::atomic;\n use core::sync::atomic::Ordering::{Acquire, Relaxed, Release, SeqCst};\n \n use crate::alloc::{box_free, handle_alloc_error, AllocInit, AllocRef, Global, Layout};\n+use crate::borrow::{Cow, ToOwned};\n use crate::boxed::Box;\n use crate::rc::is_dangling;\n use crate::string::String;\n@@ -2047,6 +2048,21 @@ impl<T> From<Vec<T>> for Arc<[T]> {\n     }\n }\n \n+#[stable(feature = \"shared_from_cow\", since = \"1.45.0\")]\n+impl<'a, B> From<Cow<'a, B>> for Arc<B>\n+where\n+    B: ToOwned + ?Sized,\n+    Arc<B>: From<&'a B> + From<B::Owned>,\n+{\n+    #[inline]\n+    fn from(cow: Cow<'a, B>) -> Arc<B> {\n+        match cow {\n+            Cow::Borrowed(s) => Arc::from(s),\n+            Cow::Owned(s) => Arc::from(s),\n+        }\n+    }\n+}\n+\n #[stable(feature = \"boxed_slice_try_from\", since = \"1.43.0\")]\n impl<T, const N: usize> TryFrom<Arc<[T]>> for Arc<[T; N]>\n where"}]}