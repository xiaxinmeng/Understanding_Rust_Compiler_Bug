{"sha": "f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "node_id": "C_kwDOAAsO6NoAKGY3ZmQ3OWFjMWQ0ODVhYjQ3YjYyMTQ2ZjZkYWZlZDRhYWQ1ZDljNmQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-13T00:56:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-12-13T00:56:18Z"}, "message": "Auto merge of #91841 - matthiaskrgr:rollup-zlhsg5a, r=matthiaskrgr\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #91086 (Implement `TryFrom<&'_ mut [T]>` for `[T; N]`)\n - #91091 (Stabilize `ControlFlow::{is_break, is_continue}`)\n - #91749 (BTree: improve public descriptions and comments)\n - #91819 (rustbot: Add autolabeling for `T-compiler`)\n - #91824 (Make `(*mut T)::write_bytes` `const`)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "032613d79b9ac2f1fae24adfc2091a56b4acf64b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/032613d79b9ac2f1fae24adfc2091a56b4acf64b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "html_url": "https://github.com/rust-lang/rust/commit/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "22f8bde876f2fa9c5c4e95be1bce29cc271f2b51", "url": "https://api.github.com/repos/rust-lang/rust/commits/22f8bde876f2fa9c5c4e95be1bce29cc271f2b51", "html_url": "https://github.com/rust-lang/rust/commit/22f8bde876f2fa9c5c4e95be1bce29cc271f2b51"}, {"sha": "9e662d0c0322e2f82fbd9b9e5216a9284f2b124f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9e662d0c0322e2f82fbd9b9e5216a9284f2b124f", "html_url": "https://github.com/rust-lang/rust/commit/9e662d0c0322e2f82fbd9b9e5216a9284f2b124f"}], "stats": {"total": 169, "additions": 110, "deletions": 59}, "files": [{"sha": "394c21bf51cd26f6395119e9b3558ad0ade51baf", "filename": "library/alloc/src/collections/btree/set.rs", "status": "modified", "additions": 56, "deletions": 53, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Fset.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -155,7 +155,7 @@ enum DifferenceInner<'a, T: 'a> {\n         self_iter: Iter<'a, T>,\n         other_set: &'a BTreeSet<T>,\n     },\n-    Iterate(Iter<'a, T>), // simply produce all values in `self`\n+    Iterate(Iter<'a, T>), // simply produce all elements in `self`\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -207,7 +207,7 @@ enum IntersectionInner<'a, T: 'a> {\n         small_iter: Iter<'a, T>,\n         large_set: &'a BTreeSet<T>,\n     },\n-    Answer(Option<&'a T>), // return a specific value or emptiness\n+    Answer(Option<&'a T>), // return a specific element or emptiness\n }\n \n #[stable(feature = \"collection_debug\", since = \"1.17.0\")]\n@@ -295,8 +295,8 @@ impl<T> BTreeSet<T> {\n         Range { iter: self.map.range(range) }\n     }\n \n-    /// Visits the values representing the difference,\n-    /// i.e., the values that are in `self` but not in `other`,\n+    /// Visits the elements representing the difference,\n+    /// i.e., the elements that are in `self` but not in `other`,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -356,8 +356,8 @@ impl<T> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the symmetric difference,\n-    /// i.e., the values that are in `self` or in `other` but not in both,\n+    /// Visits the elements representing the symmetric difference,\n+    /// i.e., the elements that are in `self` or in `other` but not in both,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -384,8 +384,8 @@ impl<T> BTreeSet<T> {\n         SymmetricDifference(MergeIterInner::new(self.iter(), other.iter()))\n     }\n \n-    /// Visits the values representing the intersection,\n-    /// i.e., the values that are both in `self` and `other`,\n+    /// Visits the elements representing the intersection,\n+    /// i.e., the elements that are both in `self` and `other`,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -437,8 +437,8 @@ impl<T> BTreeSet<T> {\n         }\n     }\n \n-    /// Visits the values representing the union,\n-    /// i.e., all the values in `self` or `other`, without duplicates,\n+    /// Visits the elements representing the union,\n+    /// i.e., all the elements in `self` or `other`, without duplicates,\n     /// in ascending order.\n     ///\n     /// # Examples\n@@ -463,7 +463,7 @@ impl<T> BTreeSet<T> {\n         Union(MergeIterInner::new(self.iter(), other.iter()))\n     }\n \n-    /// Clears the set, removing all values.\n+    /// Clears the set, removing all elements.\n     ///\n     /// # Examples\n     ///\n@@ -480,11 +480,11 @@ impl<T> BTreeSet<T> {\n         self.map.clear()\n     }\n \n-    /// Returns `true` if the set contains a value.\n+    /// Returns `true` if the set contains an element equal to the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -504,11 +504,12 @@ impl<T> BTreeSet<T> {\n         self.map.contains_key(value)\n     }\n \n-    /// Returns a reference to the value in the set, if any, that is equal to the given value.\n+    /// Returns a reference to the element in the set, if any, that is equal to\n+    /// the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -555,7 +556,7 @@ impl<T> BTreeSet<T> {\n     }\n \n     /// Returns `true` if the set is a subset of another,\n-    /// i.e., `other` contains at least all the values in `self`.\n+    /// i.e., `other` contains at least all the elements in `self`.\n     ///\n     /// # Examples\n     ///\n@@ -632,7 +633,7 @@ impl<T> BTreeSet<T> {\n     }\n \n     /// Returns `true` if the set is a superset of another,\n-    /// i.e., `self` contains at least all the values in `other`.\n+    /// i.e., `self` contains at least all the elements in `other`.\n     ///\n     /// # Examples\n     ///\n@@ -660,8 +661,8 @@ impl<T> BTreeSet<T> {\n         other.is_subset(self)\n     }\n \n-    /// Returns a reference to the first value in the set, if any.\n-    /// This value is always the minimum of all values in the set.\n+    /// Returns a reference to the first element in the set, if any.\n+    /// This element is always the minimum of all elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -687,8 +688,8 @@ impl<T> BTreeSet<T> {\n         self.map.first_key_value().map(|(k, _)| k)\n     }\n \n-    /// Returns a reference to the last value in the set, if any.\n-    /// This value is always the maximum of all values in the set.\n+    /// Returns a reference to the last element in the set, if any.\n+    /// This element is always the maximum of all elements in the set.\n     ///\n     /// # Examples\n     ///\n@@ -714,8 +715,8 @@ impl<T> BTreeSet<T> {\n         self.map.last_key_value().map(|(k, _)| k)\n     }\n \n-    /// Removes the first value from the set and returns it, if any.\n-    /// The first value is always the minimum value in the set.\n+    /// Removes the first element from the set and returns it, if any.\n+    /// The first element is always the minimum element in the set.\n     ///\n     /// # Examples\n     ///\n@@ -739,8 +740,8 @@ impl<T> BTreeSet<T> {\n         self.map.pop_first().map(|kv| kv.0)\n     }\n \n-    /// Removes the last value from the set and returns it, if any.\n-    /// The last value is always the maximum value in the set.\n+    /// Removes the last element from the set and returns it, if any.\n+    /// The last element is always the maximum element in the set.\n     ///\n     /// # Examples\n     ///\n@@ -766,10 +767,10 @@ impl<T> BTreeSet<T> {\n \n     /// Adds a value to the set.\n     ///\n-    /// If the set did not have this value present, `true` is returned.\n+    /// If the set did not have an equal element present, `true` is returned.\n     ///\n-    /// If the set did have this value present, `false` is returned, and the\n-    /// entry is not updated. See the [module-level documentation] for more.\n+    /// If the set did have an equal element present, `false` is returned, and\n+    /// the entry is not updated. See the [module-level documentation] for more.\n     ///\n     /// [module-level documentation]: index.html#insert-and-complex-keys\n     ///\n@@ -792,8 +793,8 @@ impl<T> BTreeSet<T> {\n         self.map.insert(value, ()).is_none()\n     }\n \n-    /// Adds a value to the set, replacing the existing value, if any, that is equal to the given\n-    /// one. Returns the replaced value.\n+    /// Adds a value to the set, replacing the existing element, if any, that is\n+    /// equal to the value. Returns the replaced element.\n     ///\n     /// # Examples\n     ///\n@@ -815,12 +816,12 @@ impl<T> BTreeSet<T> {\n         Recover::replace(&mut self.map, value)\n     }\n \n-    /// Removes a value from the set. Returns whether the value was\n-    /// present in the set.\n+    /// If the set contains an element equal to the value, removes it from the\n+    /// set and drops it. Returns whether such an element was present.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -842,11 +843,12 @@ impl<T> BTreeSet<T> {\n         self.map.remove(value).is_some()\n     }\n \n-    /// Removes and returns the value in the set, if any, that is equal to the given one.\n+    /// Removes and returns the element in the set, if any, that is equal to\n+    /// the value.\n     ///\n-    /// The value may be any borrowed form of the set's value type,\n+    /// The value may be any borrowed form of the set's element type,\n     /// but the ordering on the borrowed form *must* match the\n-    /// ordering on the value type.\n+    /// ordering on the element type.\n     ///\n     /// # Examples\n     ///\n@@ -926,8 +928,8 @@ impl<T> BTreeSet<T> {\n         self.map.append(&mut other.map);\n     }\n \n-    /// Splits the collection into two at the given value. Returns everything after the given value,\n-    /// including the value.\n+    /// Splits the collection into two at the value. Returns a new collection\n+    /// with all elements greater than or equal to the value.\n     ///\n     /// # Examples\n     ///\n@@ -963,20 +965,20 @@ impl<T> BTreeSet<T> {\n         BTreeSet { map: self.map.split_off(value) }\n     }\n \n-    /// Creates an iterator that visits all values in ascending order and uses a closure\n-    /// to determine if a value should be removed.\n+    /// Creates an iterator that visits all elements in ascending order and\n+    /// uses a closure to determine if an element should be removed.\n     ///\n-    /// If the closure returns `true`, the value is removed from the set and yielded. If\n-    /// the closure returns `false`, or panics, the value remains in the set and will\n-    /// not be yielded.\n+    /// If the closure returns `true`, the element is removed from the set and\n+    /// yielded. If the closure returns `false`, or panics, the element remains\n+    /// in the set and will not be yielded.\n     ///\n-    /// If the iterator is only partially consumed or not consumed at all, each of the\n-    /// remaining values is still subjected to the closure and removed and dropped if it\n-    /// returns `true`.\n+    /// If the iterator is only partially consumed or not consumed at all, each\n+    /// of the remaining elements is still subjected to the closure and removed\n+    /// and dropped if it returns `true`.\n     ///\n-    /// It is unspecified how many more values will be subjected to the closure if a\n-    /// panic occurs in the closure, or if a panic occurs while dropping a value, or if\n-    /// the `DrainFilter` itself is leaked.\n+    /// It is unspecified how many more elements will be subjected to the\n+    /// closure if a panic occurs in the closure, or if a panic occurs while\n+    /// dropping an element, or if the `DrainFilter` itself is leaked.\n     ///\n     /// # Examples\n     ///\n@@ -1001,7 +1003,8 @@ impl<T> BTreeSet<T> {\n         DrainFilter { pred, inner: self.map.drain_filter_inner() }\n     }\n \n-    /// Gets an iterator that visits the values in the `BTreeSet` in ascending order.\n+    /// Gets an iterator that visits the elements in the `BTreeSet` in ascending\n+    /// order.\n     ///\n     /// # Examples\n     ///"}, {"sha": "bcf5f5f72510e199093cf978e87411166e3003bc", "filename": "library/alloc/src/collections/btree/testing/crash_test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbtree%2Ftesting%2Fcrash_test.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -1,3 +1,4 @@\n+// We avoid relying on anything else in the crate, apart from the `Debug` trait.\n use crate::fmt::Debug;\n use std::cmp::Ordering;\n use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n@@ -7,8 +8,7 @@ use std::sync::atomic::{AtomicUsize, Ordering::SeqCst};\n /// Events are `clone`, `drop` or some anonymous `query`.\n ///\n /// Crash test dummies are identified and ordered by an id, so they can be used\n-/// as keys in a BTreeMap. The implementation intentionally uses does not rely\n-/// on anything defined in the crate, apart from the `Debug` trait.\n+/// as keys in a BTreeMap.\n #[derive(Debug)]\n pub struct CrashTestDummy {\n     pub id: usize,"}, {"sha": "37292bf8e26243b279a626c7c2c9d13b6b3ebd64", "filename": "library/core/src/array/mod.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Farray%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Farray%2Fmod.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -189,6 +189,18 @@ where\n     }\n }\n \n+#[stable(feature = \"try_from_mut_slice_to_array\", since = \"1.59.0\")]\n+impl<T, const N: usize> TryFrom<&mut [T]> for [T; N]\n+where\n+    T: Copy,\n+{\n+    type Error = TryFromSliceError;\n+\n+    fn try_from(slice: &mut [T]) -> Result<[T; N], TryFromSliceError> {\n+        <Self>::try_from(&*slice)\n+    }\n+}\n+\n #[stable(feature = \"try_from\", since = \"1.34.0\")]\n impl<'a, T, const N: usize> TryFrom<&'a [T]> for &'a [T; N] {\n     type Error = TryFromSliceError;"}, {"sha": "10a24a545d329729f6e85df8bf6484053dbf5f26", "filename": "library/core/src/ops/control_flow.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Fcontrol_flow.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -141,7 +141,7 @@ impl<B, C> ControlFlow<B, C> {\n     /// assert!(!ControlFlow::<String, i32>::Continue(3).is_break());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[stable(feature = \"control_flow_enum_is\", since = \"1.59.0\")]\n     pub fn is_break(&self) -> bool {\n         matches!(*self, ControlFlow::Break(_))\n     }\n@@ -158,7 +158,7 @@ impl<B, C> ControlFlow<B, C> {\n     /// assert!(ControlFlow::<String, i32>::Continue(3).is_continue());\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"control_flow_enum\", reason = \"new API\", issue = \"75744\")]\n+    #[stable(feature = \"control_flow_enum_is\", since = \"1.59.0\")]\n     pub fn is_continue(&self) -> bool {\n         matches!(*self, ControlFlow::Continue(_))\n     }"}, {"sha": "f3655edb3d080c6eeed20943af2db96e0a192d3d", "filename": "library/core/src/ptr/mut_ptr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fptr%2Fmut_ptr.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -1069,8 +1069,9 @@ impl<T: ?Sized> *mut T {\n     ///\n     /// [`ptr::write_bytes`]: crate::ptr::write_bytes()\n     #[stable(feature = \"pointer_methods\", since = \"1.26.0\")]\n+    #[rustc_const_unstable(feature = \"const_ptr_write\", issue = \"86302\")]\n     #[inline(always)]\n-    pub unsafe fn write_bytes(self, val: u8, count: usize)\n+    pub const unsafe fn write_bytes(self, val: u8, count: usize)\n     where\n         T: Sized,\n     {"}, {"sha": "ceb6720079665048b165a9723ff754eb019ae628", "filename": "library/core/tests/array.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Ftests%2Farray.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Ftests%2Farray.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Farray.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -28,11 +28,22 @@ fn array_try_from() {\n         ($($N:expr)+) => {\n             $({\n                 type Array = [u8; $N];\n-                let array: Array = [0; $N];\n+                let mut array: Array = [0; $N];\n                 let slice: &[u8] = &array[..];\n \n                 let result = <&Array>::try_from(slice);\n                 assert_eq!(&array, result.unwrap());\n+\n+                let result = <Array>::try_from(slice);\n+                assert_eq!(&array, &result.unwrap());\n+\n+                let mut_slice: &mut [u8] = &mut array[..];\n+                let result = <&mut Array>::try_from(mut_slice);\n+                assert_eq!(&[0; $N], result.unwrap());\n+\n+                let mut_slice: &mut [u8] = &mut array[..];\n+                let result = <Array>::try_from(mut_slice);\n+                assert_eq!(&array, &result.unwrap());\n             })+\n         }\n     }"}, {"sha": "b9c0d75b702e5ffb8d284a284fa80a19617659ac", "filename": "library/core/tests/ptr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Ftests%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/library%2Fcore%2Ftests%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Ftests%2Fptr.rs?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -250,6 +250,21 @@ fn test_set_memory() {\n     assert!(xs == [5u8; 20]);\n }\n \n+#[test]\n+#[cfg(not(bootstrap))]\n+fn test_set_memory_const() {\n+    const XS: [u8; 20] = {\n+        let mut xs = [0u8; 20];\n+        let ptr = xs.as_mut_ptr();\n+        unsafe {\n+            ptr.write_bytes(5u8, xs.len());\n+        }\n+        xs\n+    };\n+\n+    assert!(XS == [5u8; 20]);\n+}\n+\n #[test]\n fn test_unsized_nonnull() {\n     let xs: &[i32] = &[1, 2, 3];"}, {"sha": "b484c25ea510f3bdeae3b1f65a16bc4563455b99", "filename": "triagebot.toml", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=f7fd79ac1d485ab47b62146f6dafed4aad5d9c6d", "patch": "@@ -114,6 +114,15 @@ trigger_files = [\n     \"src/tools/rustdoc-themes\",\n ]\n \n+[autolabel.\"T-compiler\"]\n+trigger_files = [\n+    # Source code\n+    \"compiler\",\n+\n+    # Tests\n+    \"src/test/ui\",\n+]\n+\n [notify-zulip.\"I-prioritize\"]\n zulip_stream = 245100 # #t-compiler/wg-prioritization/alerts\n topic = \"#{number} {title}\""}]}