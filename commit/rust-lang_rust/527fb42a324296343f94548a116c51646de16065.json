{"sha": "527fb42a324296343f94548a116c51646de16065", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyN2ZiNDJhMzI0Mjk2MzQzZjk0NTQ4YTExNmM1MTY0NmRlMTYwNjU=", "commit": {"author": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-05-25T01:46:33Z"}, "committer": {"name": "mbartlett21", "email": "29034492+mbartlett21@users.noreply.github.com", "date": "2021-05-25T01:46:33Z"}, "message": "Add all the semicolons to `clippy_lints`", "tree": {"sha": "6a0808b101a1cb932a8a735047bcc333538e4acf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a0808b101a1cb932a8a735047bcc333538e4acf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/527fb42a324296343f94548a116c51646de16065", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/527fb42a324296343f94548a116c51646de16065", "html_url": "https://github.com/rust-lang/rust/commit/527fb42a324296343f94548a116c51646de16065", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/527fb42a324296343f94548a116c51646de16065/comments", "author": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mbartlett21", "id": 29034492, "node_id": "MDQ6VXNlcjI5MDM0NDky", "avatar_url": "https://avatars.githubusercontent.com/u/29034492?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mbartlett21", "html_url": "https://github.com/mbartlett21", "followers_url": "https://api.github.com/users/mbartlett21/followers", "following_url": "https://api.github.com/users/mbartlett21/following{/other_user}", "gists_url": "https://api.github.com/users/mbartlett21/gists{/gist_id}", "starred_url": "https://api.github.com/users/mbartlett21/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mbartlett21/subscriptions", "organizations_url": "https://api.github.com/users/mbartlett21/orgs", "repos_url": "https://api.github.com/users/mbartlett21/repos", "events_url": "https://api.github.com/users/mbartlett21/events{/privacy}", "received_events_url": "https://api.github.com/users/mbartlett21/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cadad20da1e970e62ea28f32a2f4a9177e8ca859", "url": "https://api.github.com/repos/rust-lang/rust/commits/cadad20da1e970e62ea28f32a2f4a9177e8ca859", "html_url": "https://github.com/rust-lang/rust/commit/cadad20da1e970e62ea28f32a2f4a9177e8ca859"}], "stats": {"total": 62, "additions": 31, "deletions": 31}, "files": [{"sha": "c824f6f54b5cc08759a1de7cf9024de7f1925b2b", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         types produces code that is hard to read and refactor, please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n                         clear that the two values could be incomparable\"\n-                    )\n+                    );\n                 }\n             }\n         }"}, {"sha": "fded48038e39fb25a1eecf859bd77efa2d4e6c57", "filename": "clippy_lints/src/open_options.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fopen_options.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fopen_options.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fopen_options.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -123,7 +123,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `create` is called more than once\",\n                     );\n                 } else {\n-                    create = true\n+                    create = true;\n                 }\n                 create_arg = create_arg || (arg == Argument::True);\n             },\n@@ -136,7 +136,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `append` is called more than once\",\n                     );\n                 } else {\n-                    append = true\n+                    append = true;\n                 }\n                 append_arg = append_arg || (arg == Argument::True);\n             },\n@@ -149,7 +149,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `truncate` is called more than once\",\n                     );\n                 } else {\n-                    truncate = true\n+                    truncate = true;\n                 }\n                 truncate_arg = truncate_arg || (arg == Argument::True);\n             },\n@@ -162,7 +162,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `read` is called more than once\",\n                     );\n                 } else {\n-                    read = true\n+                    read = true;\n                 }\n                 read_arg = read_arg || (arg == Argument::True);\n             },\n@@ -175,7 +175,7 @@ fn check_open_options(cx: &LateContext<'_>, options: &[(OpenOption, Argument)],\n                         \"the method `write` is called more than once\",\n                     );\n                 } else {\n-                    write = true\n+                    write = true;\n                 }\n                 write_arg = write_arg || (arg == Argument::True);\n             },"}, {"sha": "d66bac5224360baea2acc2729d8717a42f9dc19b", "filename": "clippy_lints/src/question_mark.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fquestion_mark.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fquestion_mark.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fquestion_mark.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -88,7 +88,7 @@ impl QuestionMark {\n                         \"replace it with\",\n                         replacement_str,\n                         applicability,\n-                    )\n+                    );\n                 }\n             }\n         }\n@@ -129,7 +129,7 @@ impl QuestionMark {\n                     \"replace it with\",\n                     replacement,\n                     applicability,\n-                )\n+                );\n             }\n         }\n     }"}, {"sha": "8f56a21ac5b3d2a27b2da662c672fbd691f4d386", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -57,7 +57,7 @@ impl<'ast> ast_visit::Visitor<'ast> for ReturnVisitor {\n             self.found_return = true;\n         }\n \n-        ast_visit::walk_expr(self, ex)\n+        ast_visit::walk_expr(self, ex);\n     }\n }\n "}, {"sha": "05f9e01acb44b45154f9c103a07b4821bd830d76", "filename": "clippy_lints/src/redundant_pub_crate.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_pub_crate.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -59,7 +59,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantPubCrate {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    )\n+                    );\n                 }\n             }\n         }"}, {"sha": "251d527c265221348e81548b6d4e7062bda4a8cf", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -139,7 +139,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n                 } else {\n                     RetReplacement::Empty\n                 };\n-                check_final_expr(cx, &body.value, Some(body.value.span), replacement)\n+                check_final_expr(cx, &body.value, Some(body.value.span), replacement);\n             },\n             FnKind::ItemFn(..) | FnKind::Method(..) => {\n                 if let ExprKind::Block(block, _) = body.value.kind {\n@@ -241,7 +241,7 @@ fn emit_return_lint(cx: &LateContext<'_>, ret_span: Span, inner_span: Option<Spa\n                 if let Some(snippet) = snippet_opt(cx, inner_span) {\n                     diag.span_suggestion(ret_span, \"remove `return`\", snippet, Applicability::MachineApplicable);\n                 }\n-            })\n+            });\n         },\n         None => match replacement {\n             RetReplacement::Empty => {"}, {"sha": "ac3f7ebd14bd83be17cf7c374dcbdd8916b3b46a", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -120,7 +120,7 @@ fn check_fn<'tcx>(cx: &LateContext<'tcx>, decl: &'tcx FnDecl<'_>, body: &'tcx Bo\n     let mut bindings = Vec::with_capacity(decl.inputs.len());\n     for arg in iter_input_pats(decl, body) {\n         if let PatKind::Binding(.., ident, _) = arg.pat.kind {\n-            bindings.push((ident.name, ident.span))\n+            bindings.push((ident.name, ident.span));\n         }\n     }\n     check_expr(cx, &body.value, &mut bindings);\n@@ -156,7 +156,7 @@ fn check_local<'tcx>(cx: &LateContext<'tcx>, local: &'tcx Local<'_>, bindings: &\n         ..\n     } = *local;\n     if let Some(t) = *ty {\n-        check_ty(cx, t, bindings)\n+        check_ty(cx, t, bindings);\n     }\n     if let Some(o) = *init {\n         check_expr(cx, o, bindings);\n@@ -324,14 +324,14 @@ fn check_expr<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, bindings: &mut\n     }\n     match expr.kind {\n         ExprKind::Unary(_, e) | ExprKind::Field(e, _) | ExprKind::AddrOf(_, _, e) | ExprKind::Box(e) => {\n-            check_expr(cx, e, bindings)\n+            check_expr(cx, e, bindings);\n         },\n         ExprKind::Block(block, _) | ExprKind::Loop(block, ..) => check_block(cx, block, bindings),\n         // ExprKind::Call\n         // ExprKind::MethodCall\n         ExprKind::Array(v) | ExprKind::Tup(v) => {\n             for e in v {\n-                check_expr(cx, e, bindings)\n+                check_expr(cx, e, bindings);\n             }\n         },\n         ExprKind::If(cond, then, ref otherwise) => {\n@@ -374,7 +374,7 @@ fn check_ty<'tcx>(cx: &LateContext<'tcx>, ty: &'tcx Ty<'_>, bindings: &mut Vec<(\n         TyKind::Ptr(MutTy { ty: mty, .. }) | TyKind::Rptr(_, MutTy { ty: mty, .. }) => check_ty(cx, mty, bindings),\n         TyKind::Tup(tup) => {\n             for t in tup {\n-                check_ty(cx, t, bindings)\n+                check_ty(cx, t, bindings);\n             }\n         },\n         TyKind::Typeof(ref anon_const) => check_expr(cx, &cx.tcx.hir().body(anon_const.body).value, bindings),"}, {"sha": "e5c58d70b603e60318b90fb45bc65a20add965bf", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -158,7 +158,7 @@ impl SlowVectorInit {\n     ) {\n         match initialization {\n             InitializationType::Extend(e) | InitializationType::Resize(e) => {\n-                Self::emit_lint(cx, e, vec_alloc, \"slow zero-filling initialization\")\n+                Self::emit_lint(cx, e, vec_alloc, \"slow zero-filling initialization\");\n             },\n         };\n     }\n@@ -290,7 +290,7 @@ impl<'a, 'tcx> Visitor<'tcx> for VectorInitializationVisitor<'a, 'tcx> {\n     fn visit_block(&mut self, block: &'tcx Block<'_>) {\n         if self.initialization_found {\n             if let Some(s) = block.stmts.get(0) {\n-                self.visit_stmt(s)\n+                self.visit_stmt(s);\n             }\n \n             self.initialization_found = false;"}, {"sha": "bb707f78fccd843f000ff582ba70348e50cde58d", "filename": "clippy_lints/src/suspicious_operation_groupings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fsuspicious_operation_groupings.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -266,7 +266,7 @@ fn emit_suggestion(cx: &EarlyContext<'_>, span: Span, sugg: String, applicabilit\n         \"did you mean\",\n         sugg,\n         applicability,\n-    )\n+    );\n }\n \n fn ident_swap_sugg(\n@@ -475,7 +475,7 @@ impl Add for IdentLocation {\n \n impl AddAssign for IdentLocation {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other\n+        *self = *self + other;\n     }\n }\n \n@@ -506,7 +506,7 @@ impl Add for IdentDifference {\n \n impl AddAssign for IdentDifference {\n     fn add_assign(&mut self, other: Self) {\n-        *self = *self + other\n+        *self = *self + other;\n     }\n }\n "}, {"sha": "70b9e8adef884e56cf34f215cd9d7e442c21455b", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -306,7 +306,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n     fn check_trait_item(&mut self, cx: &LateContext<'_>, item: &TraitItem<'_>) {\n         match item.kind {\n             TraitItemKind::Const(ty, _) | TraitItemKind::Type(_, Some(ty)) => {\n-                self.check_ty(cx, ty, CheckTyContext::default())\n+                self.check_ty(cx, ty, CheckTyContext::default());\n             },\n             TraitItemKind::Fn(ref sig, _) => self.check_fn_decl(cx, sig.decl, CheckTyContext::default()),\n             TraitItemKind::Type(..) => (),\n@@ -433,7 +433,7 @@ impl Types {\n             },\n             TyKind::Slice(ty) | TyKind::Array(ty, _) | TyKind::Ptr(MutTy { ty, .. }) => {\n                 context.is_nested_call = true;\n-                self.check_ty(cx, ty, context)\n+                self.check_ty(cx, ty, context);\n             },\n             TyKind::Tup(tys) => {\n                 context.is_nested_call = true;"}, {"sha": "45291a120ed59b51df71bb3f28fc57ab0438d8b7", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -71,7 +71,7 @@ impl LateLintPass<'_> for Unicode {\n     fn check_expr(&mut self, cx: &LateContext<'_>, expr: &'_ Expr<'_>) {\n         if let ExprKind::Lit(ref lit) = expr.kind {\n             if let LitKind::Str(_, _) = lit.node {\n-                check_str(cx, lit.span, expr.hir_id)\n+                check_str(cx, lit.span, expr.hir_id);\n             }\n         }\n     }\n@@ -82,7 +82,7 @@ fn escape<T: Iterator<Item = char>>(s: T) -> String {\n     for c in s {\n         if c as u32 > 0x7F {\n             for d in c.escape_unicode() {\n-                result.push(d)\n+                result.push(d);\n             }\n         } else {\n             result.push(c);"}, {"sha": "debbd86a59e4fba224c6113842d95e710add7a07", "filename": "clippy_lints/src/upper_case_acronyms.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fupper_case_acronyms.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -92,7 +92,7 @@ fn check_ident(cx: &EarlyContext<'_>, ident: &Ident, be_aggressive: bool) {\n             \"consider making the acronym lowercase, except the initial letter\",\n             corrected,\n             Applicability::MaybeIncorrect,\n-        )\n+        );\n     }\n }\n "}, {"sha": "254b104bdefb10ef088732d2fbf20c3f4ecefeb8", "filename": "clippy_lints/src/use_self.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fuse_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fuse_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fuse_self.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -356,7 +356,7 @@ impl<'tcx> Visitor<'tcx> for SkipTyCollector {\n     fn visit_ty(&mut self, hir_ty: &hir::Ty<'_>) {\n         self.types_to_skip.push(hir_ty.hir_id);\n \n-        walk_ty(self, hir_ty)\n+        walk_ty(self, hir_ty);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {\n@@ -385,7 +385,7 @@ impl<'a, 'tcx> Visitor<'tcx> for LintTyCollector<'a, 'tcx> {\n             }\n         }\n \n-        walk_ty(self, hir_ty)\n+        walk_ty(self, hir_ty);\n     }\n \n     fn nested_visit_map(&mut self) -> NestedVisitorMap<Self::Map> {"}, {"sha": "3ab68df2b6d7cb1bf42c9fc13d172929bd747080", "filename": "clippy_lints/src/verbose_file_reads.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fverbose_file_reads.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fverbose_file_reads.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -54,7 +54,7 @@ impl<'tcx> LateLintPass<'tcx> for VerboseFileReads {\n                 \"use of `File::read_to_string`\",\n                 None,\n                 \"consider using `fs::read_to_string` instead\",\n-            )\n+            );\n         }\n     }\n }"}, {"sha": "5229a7058659c201ad361bbb112c4cd58ba379d3", "filename": "clippy_lints/src/write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/527fb42a324296343f94548a116c51646de16065/clippy_lints%2Fsrc%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fwrite.rs?ref=527fb42a324296343f94548a116c51646de16065", "patch": "@@ -300,7 +300,7 @@ impl EarlyLintPass for Write {\n                                 Applicability::MachineApplicable,\n                             );\n                         },\n-                    )\n+                    );\n                 }\n             }\n         } else if mac.path == sym!(writeln) {"}]}