{"sha": "a390b5dd0320957b00177c8ae837c51ceb737fef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmEzOTBiNWRkMDMyMDk1N2IwMDE3N2M4YWU4MzdjNTFjZWI3MzdmZWY=", "commit": {"author": {"name": "Adolfo Ochagav\u00eda", "email": "aochagavia92@gmail.com", "date": "2014-05-13T13:43:10Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-14T00:24:07Z"}, "message": "Replaced ~T by Box<T> in manual", "tree": {"sha": "d447df42ce1bd416fd4e0d57f6eebb6f7707f07f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d447df42ce1bd416fd4e0d57f6eebb6f7707f07f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a390b5dd0320957b00177c8ae837c51ceb737fef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a390b5dd0320957b00177c8ae837c51ceb737fef", "html_url": "https://github.com/rust-lang/rust/commit/a390b5dd0320957b00177c8ae837c51ceb737fef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a390b5dd0320957b00177c8ae837c51ceb737fef/comments", "author": {"login": "aochagavia", "id": 5196584, "node_id": "MDQ6VXNlcjUxOTY1ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/5196584?v=4", "gravatar_id": "", "url": "https://api.github.com/users/aochagavia", "html_url": "https://github.com/aochagavia", "followers_url": "https://api.github.com/users/aochagavia/followers", "following_url": "https://api.github.com/users/aochagavia/following{/other_user}", "gists_url": "https://api.github.com/users/aochagavia/gists{/gist_id}", "starred_url": "https://api.github.com/users/aochagavia/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/aochagavia/subscriptions", "organizations_url": "https://api.github.com/users/aochagavia/orgs", "repos_url": "https://api.github.com/users/aochagavia/repos", "events_url": "https://api.github.com/users/aochagavia/events{/privacy}", "received_events_url": "https://api.github.com/users/aochagavia/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de2c48c30a24eb1de07355f14d2353385f9db2b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/de2c48c30a24eb1de07355f14d2353385f9db2b2", "html_url": "https://github.com/rust-lang/rust/commit/de2c48c30a24eb1de07355f14d2353385f9db2b2"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "f242a89784ce966c4dbcb36e76b94d78106db52d", "filename": "src/doc/rust.md", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a390b5dd0320957b00177c8ae837c51ceb737fef/src%2Fdoc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/a390b5dd0320957b00177c8ae837c51ceb737fef/src%2Fdoc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust.md?ref=a390b5dd0320957b00177c8ae837c51ceb737fef", "patch": "@@ -2648,9 +2648,9 @@ before the expression they apply to.\n   : Logical negation. On the boolean type, this flips between `true` and\n     `false`. On integer types, this inverts the individual bits in the\n     two's complement representation of the value.\n-* `~`\n+* `box`\n   :  [Boxing](#pointer-types) operators. Allocate a box to hold the value they are applied to,\n-     and store the value in it. `~` creates an owned box.\n+     and store the value in it. `box` creates an owned box.\n * `&`\n   : Borrow operator. Returns a reference, pointing to its operand.\n     The operand of a borrow is statically proven to outlive the resulting pointer.\n@@ -3156,7 +3156,7 @@ fn main() {\n ~~~~\n \n Patterns can also dereference pointers by using the `&`,\n-`~` or `@` symbols, as appropriate. For example, these two matches\n+`box` or `@` symbols, as appropriate. For example, these two matches\n on `x: &int` are equivalent:\n \n ~~~~\n@@ -3438,11 +3438,11 @@ All pointers in Rust are explicit first-class values.\n They can be copied, stored into data structures, and returned from functions.\n There are four varieties of pointer in Rust:\n \n-* Owning pointers (`~`)\n+* Owning pointers (`Box`)\n   : These point to owned heap allocations (or \"boxes\") in the shared, inter-task heap.\n     Each owned box has a single owning pointer; pointer and pointee retain a 1:1 relationship at all times.\n-    Owning pointers are written `~content`,\n-    for example `~int` means an owning pointer to an owned box containing an integer.\n+    Owning pointers are written `Box<content>`,\n+    for example `Box<int>` means an owning pointer to an owned box containing an integer.\n     Copying an owned box is a \"deep\" operation:\n     it involves allocating a new owned box and copying the contents of the old box into the new box.\n     Releasing an owning pointer immediately releases its corresponding owned box.\n@@ -3562,8 +3562,8 @@ Whereas most calls to trait methods are \"early bound\" (statically resolved) to s\n a call to a method on an object type is only resolved to a vtable entry at compile time.\n The actual implementation for each vtable entry can vary on an object-by-object basis.\n \n-Given a pointer-typed expression `E` of type `&T` or `~T`, where `T` implements trait `R`,\n-casting `E` to the corresponding pointer type `&R` or `~R` results in a value of the _object type_ `R`.\n+Given a pointer-typed expression `E` of type `&T` or `Box<T>`, where `T` implements trait `R`,\n+casting `E` to the corresponding pointer type `&R` or `Box<R>` results in a value of the _object type_ `R`.\n This result is represented as a pair of pointers:\n the vtable pointer for the `T` implementation of `R`, and the pointer value of `E`.\n \n@@ -3761,7 +3761,7 @@ Local variables are immutable unless declared otherwise like: `let mut x = ...`.\n \n Function parameters are immutable unless declared with `mut`. The\n `mut` keyword applies only to the following parameter (so `|mut x, y|`\n-and `fn f(mut x: ~int, y: ~int)` declare one mutable variable `x` and\n+and `fn f(mut x: Box<int>, y: Box<int>)` declare one mutable variable `x` and\n one immutable variable `y`).\n \n Methods that take either `self` or `~self` can optionally place them in a"}]}