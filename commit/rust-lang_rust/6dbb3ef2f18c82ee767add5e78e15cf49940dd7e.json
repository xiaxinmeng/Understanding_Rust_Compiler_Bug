{"sha": "6dbb3ef2f18c82ee767add5e78e15cf49940dd7e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZkYmIzZWYyZjE4YzgyZWU3NjdhZGQ1ZTc4ZTE1Y2Y0OTk0MGRkN2U=", "commit": {"author": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-20T21:38:16Z"}, "committer": {"name": "Nick Cameron", "email": "ncameron@mozilla.com", "date": "2015-04-20T21:38:16Z"}, "message": "Function visibility", "tree": {"sha": "61c9348f565998bd8686ba7bf82970c1bf2a75ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61c9348f565998bd8686ba7bf82970c1bf2a75ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e", "html_url": "https://github.com/rust-lang/rust/commit/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e/comments", "author": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nrc", "id": 762626, "node_id": "MDQ6VXNlcjc2MjYyNg==", "avatar_url": "https://avatars.githubusercontent.com/u/762626?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nrc", "html_url": "https://github.com/nrc", "followers_url": "https://api.github.com/users/nrc/followers", "following_url": "https://api.github.com/users/nrc/following{/other_user}", "gists_url": "https://api.github.com/users/nrc/gists{/gist_id}", "starred_url": "https://api.github.com/users/nrc/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nrc/subscriptions", "organizations_url": "https://api.github.com/users/nrc/orgs", "repos_url": "https://api.github.com/users/nrc/repos", "events_url": "https://api.github.com/users/nrc/events{/privacy}", "received_events_url": "https://api.github.com/users/nrc/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0a67babb954d10f03cec65bf2fbf4e058ee898be", "url": "https://api.github.com/repos/rust-lang/rust/commits/0a67babb954d10f03cec65bf2fbf4e058ee898be", "html_url": "https://github.com/rust-lang/rust/commit/0a67babb954d10f03cec65bf2fbf4e058ee898be"}], "stats": {"total": 12, "additions": 6, "deletions": 6}, "files": [{"sha": "32dbd321e9bfd34fbc3f3df7384635aec94f53f7", "filename": "src/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e/src%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6dbb3ef2f18c82ee767add5e78e15cf49940dd7e/src%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmod.rs?ref=6dbb3ef2f18c82ee767add5e78e15cf49940dd7e", "patch": "@@ -20,7 +20,7 @@\n // TODO for lint violations of names, emit a refactor script\n \n // TODO priorities\n-// Fix fns and methods properly - need visibility in visit\n+// Fix fns and methods properly\n // Writing output\n // Smoke testing till we can use it\n // end of multi-line string has wspace\n@@ -168,33 +168,32 @@ impl<'a, 'v> visit::Visitor<'v> for FmtVisitor<'a> {\n                 b: &'v ast::Block,\n                 s: Span,\n                 _: ast::NodeId) {\n-        // TODO need to get the visibility from somewhere\n         self.format_missing(s.lo);\n         self.last_pos = s.lo;\n \n         // TODO need to check against expected indent\n         let indent = self.codemap.lookup_char_pos(s.lo).col.0;\n         match fk {\n-            visit::FkItemFn(ident, ref generics, ref unsafety, ref abi) => {\n+            visit::FkItemFn(ident, ref generics, ref unsafety, ref abi, vis) => {\n                 let new_fn = self.rewrite_fn(indent,\n                                              ident,\n                                              fd,\n                                              None,\n                                              generics,\n                                              unsafety,\n                                              abi,\n-                                             ast::Visibility::Inherited);\n+                                             vis);\n                 self.changes.push_str_span(s, &new_fn);\n             }\n-            visit::FkMethod(ident, ref sig) => {\n+            visit::FkMethod(ident, ref sig, vis) => {\n                 let new_fn = self.rewrite_fn(indent,\n                                              ident,\n                                              fd,\n                                              Some(&sig.explicit_self),\n                                              &sig.generics,\n                                              &sig.unsafety,\n                                              &sig.abi,\n-                                             ast::Visibility::Inherited);\n+                                             vis.unwrap_or(ast::Visibility::Inherited));\n                 self.changes.push_str_span(s, &new_fn);\n             }\n             visit::FkFnBlock(..) => {}\n@@ -721,6 +720,7 @@ impl<'a> FmtVisitor<'a> {\n         // TODO dead spans\n         let mut arg_strs: Vec<_> = args.iter().map(|a| (self.rewrite_fn_input(a), String::new())).collect();\n         // Account for sugary self.\n+        // TODO busted with by value self\n         if let Some(explicit_self) = explicit_self {\n             match explicit_self.node {\n                 ast::ExplicitSelf_::SelfRegion(ref lt, ref m, _) => {"}]}