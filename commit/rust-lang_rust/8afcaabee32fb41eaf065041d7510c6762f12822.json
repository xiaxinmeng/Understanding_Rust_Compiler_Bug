{"sha": "8afcaabee32fb41eaf065041d7510c6762f12822", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhZmNhYWJlZTMyZmI0MWVhZjA2NTA0MWQ3NTEwYzY3NjJmMTI4MjI=", "commit": {"author": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-11T04:13:36Z"}, "committer": {"name": "Jorge Aparicio", "email": "japaricious@gmail.com", "date": "2015-03-17T02:57:42Z"}, "message": "impl<T> *const T, impl<T> *mut T", "tree": {"sha": "3e276fa5f1927f2e69c40689ebd638bce37f08ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e276fa5f1927f2e69c40689ebd638bce37f08ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8afcaabee32fb41eaf065041d7510c6762f12822", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8afcaabee32fb41eaf065041d7510c6762f12822", "html_url": "https://github.com/rust-lang/rust/commit/8afcaabee32fb41eaf065041d7510c6762f12822", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8afcaabee32fb41eaf065041d7510c6762f12822/comments", "author": null, "committer": null, "parents": [{"sha": "633c593bc3f9787decfaf943cdc5659f132ade50", "url": "https://api.github.com/repos/rust-lang/rust/commits/633c593bc3f9787decfaf943cdc5659f132ade50", "html_url": "https://github.com/rust-lang/rust/commit/633c593bc3f9787decfaf943cdc5659f132ade50"}], "stats": {"total": 135, "additions": 135, "deletions": 0}, "files": [{"sha": "d1c8ab348d40af1f64d728e113819cc13d398611", "filename": "src/liballoc/heap.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Fliballoc%2Fheap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Fliballoc%2Fheap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fheap.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -8,6 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#[cfg(stage0)]\n #[cfg(not(test))]\n use core::ptr::PtrExt;\n "}, {"sha": "3692149db44bcb0da4d973ecedb299d018c2eca0", "filename": "src/liballoc/rc.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Fliballoc%2Frc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Fliballoc%2Frc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Frc.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -159,7 +159,10 @@ use core::nonzero::NonZero;\n use core::ops::{Deref, Drop};\n use core::option::Option;\n use core::option::Option::{Some, None};\n+#[cfg(stage0)]\n use core::ptr::{self, PtrExt};\n+#[cfg(not(stage0))]\n+use core::ptr;\n use core::result::Result;\n use core::result::Result::{Ok, Err};\n use core::intrinsics::assume;"}, {"sha": "0fe513d3118c5a1623a9778fc2142acd07e39bd7", "filename": "src/libcollections/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcollections%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcollections%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fslice.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -99,6 +99,7 @@ use core::mem;\n use core::num::wrapping::WrappingOps;\n use core::ops::FnMut;\n use core::option::Option::{self, Some, None};\n+#[cfg(stage0)]\n use core::ptr::PtrExt;\n use core::ptr;\n use core::result::Result;"}, {"sha": "fb793a623904b9c980094314616fea4fffc6bc07", "filename": "src/libcore/prelude.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fprelude.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -42,6 +42,7 @@ pub use iter::{Extend, IteratorExt};\n pub use iter::{Iterator, DoubleEndedIterator};\n pub use iter::{ExactSizeIterator};\n pub use option::Option::{self, Some, None};\n+#[cfg(stage0)]\n pub use ptr::{PtrExt, MutPtrExt};\n pub use result::Result::{self, Ok, Err};\n pub use slice::{AsSlice, SliceExt};"}, {"sha": "f28c26d179845f8a6bd82ff3123ee465305623bf", "filename": "src/libcore/ptr.rs", "status": "modified", "additions": 118, "deletions": 0, "changes": 118, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fptr.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -262,6 +262,7 @@ pub unsafe fn write<T>(dst: *mut T, src: T) {\n     intrinsics::move_val_init(&mut *dst, src)\n }\n \n+#[cfg(stage0)]\n /// Methods on raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait PtrExt {\n@@ -298,6 +299,7 @@ pub trait PtrExt {\n     unsafe fn offset(self, count: isize) -> Self where Self::Target: Sized;\n }\n \n+#[cfg(stage0)]\n /// Methods on mutable raw pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n pub trait MutPtrExt {\n@@ -317,6 +319,7 @@ pub trait MutPtrExt {\n     unsafe fn as_mut<'a>(&self) -> Option<&'a mut Self::Target>;\n }\n \n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PtrExt for *const T {\n     type Target = T;\n@@ -344,6 +347,7 @@ impl<T: ?Sized> PtrExt for *const T {\n     }\n }\n \n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PtrExt for *mut T {\n     type Target = T;\n@@ -371,6 +375,7 @@ impl<T: ?Sized> PtrExt for *mut T {\n     }\n }\n \n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> MutPtrExt for *mut T {\n     type Target = T;\n@@ -388,6 +393,119 @@ impl<T: ?Sized> MutPtrExt for *mut T {\n     }\n }\n \n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[lang = \"const_ptr\"]\n+impl<T: ?Sized> *const T {\n+    /// Returns true if the pointer is null.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_null(self) -> bool {\n+        self == 0 as *const T\n+    }\n+\n+    /// Returns `None` if the pointer is null, or else returns a reference to\n+    /// the value wrapped in `Some`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// While this method and its mutable counterpart are useful for\n+    /// null-safety, it is important to note that this is still an unsafe\n+    /// operation because the returned value could be pointing to invalid\n+    /// memory.\n+    #[unstable(feature = \"core\",\n+               reason = \"Option is not clearly the right return type, and we may want \\\n+                         to tie the return lifetime to a borrow of the raw pointer\")]\n+    #[inline]\n+    pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        if self.is_null() {\n+            None\n+        } else {\n+            Some(&**self)\n+        }\n+    }\n+\n+    /// Calculates the offset from a pointer. `count` is in units of T; e.g. a\n+    /// `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The offset must be in-bounds of the object, or one-byte-past-the-end.\n+    /// Otherwise `offset` invokes Undefined Behaviour, regardless of whether\n+    /// the pointer is used.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub unsafe fn offset(self, count: isize) -> *const T where T: Sized {\n+        intrinsics::offset(self, count)\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+#[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[lang = \"mut_ptr\"]\n+impl<T: ?Sized> *mut T {\n+    /// Returns true if the pointer is null.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub fn is_null(self) -> bool {\n+        self == 0 as *mut T\n+    }\n+\n+    /// Returns `None` if the pointer is null, or else returns a reference to\n+    /// the value wrapped in `Some`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// While this method and its mutable counterpart are useful for\n+    /// null-safety, it is important to note that this is still an unsafe\n+    /// operation because the returned value could be pointing to invalid\n+    /// memory.\n+    #[unstable(feature = \"core\",\n+               reason = \"Option is not clearly the right return type, and we may want \\\n+                         to tie the return lifetime to a borrow of the raw pointer\")]\n+    #[inline]\n+    pub unsafe fn as_ref<'a>(&self) -> Option<&'a T> {\n+        if self.is_null() {\n+            None\n+        } else {\n+            Some(&**self)\n+        }\n+    }\n+\n+    /// Calculates the offset from a pointer. `count` is in units of T; e.g. a\n+    /// `count` of 3 represents a pointer offset of `3 * sizeof::<T>()` bytes.\n+    ///\n+    /// # Safety\n+    ///\n+    /// The offset must be in-bounds of the object, or one-byte-past-the-end.\n+    /// Otherwise `offset` invokes Undefined Behaviour, regardless of whether\n+    /// the pointer is used.\n+    #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[inline]\n+    pub unsafe fn offset(self, count: isize) -> *mut T where T: Sized {\n+        intrinsics::offset(self, count) as *mut T\n+    }\n+\n+    /// Returns `None` if the pointer is null, or else returns a mutable\n+    /// reference to the value wrapped in `Some`.\n+    ///\n+    /// # Safety\n+    ///\n+    /// As with `as_ref`, this is unsafe because it cannot verify the validity\n+    /// of the returned pointer.\n+    #[unstable(feature = \"core\",\n+               reason = \"return value does not necessarily convey all possible \\\n+                         information\")]\n+    #[inline]\n+    pub unsafe fn as_mut<'a>(&self) -> Option<&'a mut T> {\n+        if self.is_null() {\n+            None\n+        } else {\n+            Some(&mut **self)\n+        }\n+    }\n+}\n+\n // Equality for pointers\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n impl<T: ?Sized> PartialEq for *const T {"}, {"sha": "c8a8dd885018d771521621938d8aca708bd5df5c", "filename": "src/libcore/slice.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fslice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fslice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -49,6 +49,7 @@ use option::Option::{None, Some};\n use result::Result;\n use result::Result::{Ok, Err};\n use ptr;\n+#[cfg(stage0)]\n use ptr::PtrExt;\n use mem;\n use mem::size_of;"}, {"sha": "3873f305b4234e771156ebbb6b1a60b06455156c", "filename": "src/libcore/str/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fstr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibcore%2Fstr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr%2Fmod.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -30,6 +30,7 @@ use mem;\n use num::Int;\n use ops::{Fn, FnMut};\n use option::Option::{self, None, Some};\n+#[cfg(stage0)]\n use ptr::PtrExt;\n use raw::{Repr, Slice};\n use result::Result::{self, Ok, Err};"}, {"sha": "7812363d55e72dfb54331a38585dd2e93b0f5668", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -24,7 +24,10 @@ use num::wrapping::{OverflowingOps, WrappingOps};\n use ops::{Deref, DerefMut, Drop};\n use option::Option;\n use option::Option::{Some, None};\n+#[cfg(stage0)]\n use ptr::{self, PtrExt, Unique};\n+#[cfg(not(stage0))]\n+use ptr::{self, Unique};\n use rt::heap::{allocate, deallocate, EMPTY};\n use collections::hash_state::HashState;\n "}, {"sha": "72d014e77a780a6c91b1e481bb165c46c1d17643", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -20,6 +20,7 @@ use iter::Iterator;\n use marker::Sized;\n use ops::{Drop, FnOnce};\n use option::Option::{self, Some, None};\n+#[cfg(stage0)]\n use ptr::PtrExt;\n use result::Result::{Ok, Err};\n use result;"}, {"sha": "a81275952c586cb9d498ee1af179f71f129164fc", "filename": "src/libstd/old_io/extensions.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fold_io%2Fextensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fold_io%2Fextensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fextensions.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -26,6 +26,7 @@ use num::Int;\n use ops::FnOnce;\n use option::Option;\n use option::Option::{Some, None};\n+#[cfg(stage0)]\n use ptr::PtrExt;\n use result::Result::{Ok, Err};\n #[cfg(stage0)]"}, {"sha": "2c978177c50828b6755a994c08ff85825bd096b7", "filename": "src/libstd/old_io/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fold_io%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fold_io%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fold_io%2Fmod.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -935,6 +935,7 @@ impl<'a> Reader for &'a mut (Reader+'a) {\n // API yet. If so, it should be a method on Vec.\n unsafe fn slice_vec_capacity<'a, T>(v: &'a mut Vec<T>, start: uint, end: uint) -> &'a mut [T] {\n     use slice;\n+    #[cfg(stage0)]\n     use ptr::PtrExt;\n \n     assert!(start <= end);"}, {"sha": "fc05eb1d62703caa06ab8f8e4982ca58108183a2", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -52,6 +52,7 @@ use option::Option::{Some, None};\n use option::Option;\n use old_path::{Path, GenericPath, BytesContainer};\n use path::{self, PathBuf};\n+#[cfg(stage0)]\n use ptr::PtrExt;\n use ptr;\n use result::Result::{Err, Ok};"}, {"sha": "4327b26260ab6e636be08a901038300caf1c3fb0", "filename": "src/libstd/prelude/v1.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fprelude%2Fv1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Fprelude%2Fv1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude%2Fv1.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -40,6 +40,7 @@\n #[doc(no_inline)] pub use iter::{Iterator, IteratorExt, Extend};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use option::Option::{self, Some, None};\n+#[cfg(stage0)]\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n #[doc(no_inline)] pub use ptr::{PtrExt, MutPtrExt};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "f6bb87f011db136a8bb33d023f8c148dfb7dcbf9", "filename": "src/libstd/rt/at_exit_imp.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8afcaabee32fb41eaf065041d7510c6762f12822/src%2Flibstd%2Frt%2Fat_exit_imp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt%2Fat_exit_imp.rs?ref=8afcaabee32fb41eaf065041d7510c6762f12822", "patch": "@@ -12,6 +12,7 @@\n //!\n //! Documentation can be found on the `rt::at_exit` function.\n \n+#[cfg(stage0)]\n use core::prelude::*;\n \n use boxed;"}]}