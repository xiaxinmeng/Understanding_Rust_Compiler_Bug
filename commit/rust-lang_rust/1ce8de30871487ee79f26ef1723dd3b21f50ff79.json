{"sha": "1ce8de30871487ee79f26ef1723dd3b21f50ff79", "node_id": "C_kwDOAAsO6NoAKDFjZThkZTMwODcxNDg3ZWU3OWYyNmVmMTcyM2RkM2IyMWY1MGZmNzk", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-07-08T12:55:48Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-08T12:55:48Z"}, "message": "Rollup merge of #98533 - jyn514:drop-tracking-debugging, r=eholk\n\nAdd a `-Zdump-drop-tracking-cfg` debugging flag\n\nThis is useful for debugging drop-tracking; previously, you had to recompile\nrustc from source and manually add a call to `write_graph_to_file`. This\nmakes the option more discoverable and configurable at runtime.\n\nI also took the liberty of making the labels for the CFG nodes much easier to read:\npreviously, they looked like `id(2), local_id: 48`, now they look like\n```\nexpr from_config (hir_id=HirId { owner: DefId(0:10 ~ default_struct_update[79f9]::foo), local_id: 2})\n```\n\nr? ``@eholk``", "tree": {"sha": "3099bafef3e664a31cc2ef4b6de711fe943ad19f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3099bafef3e664a31cc2ef4b6de711fe943ad19f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ce8de30871487ee79f26ef1723dd3b21f50ff79", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyClUCRBK7hj4Ov3rIwAAhnAIAA/qX9ibT+ONqL4qN6MUUjBE\nOjHmo09wvMxfumXpQcK4BdSzq5DE1RGmvwXeQJIRqm5QWWaoUbfbCBGA933tpBY9\nN8FK5LfH5s7SNUtigmdbIpbMEFT2D5o4UhNJInAWB/2lUupNAGUtqdIKi0Yt31zZ\ntSuiaZC5BNyy+S1vlnwPqvfsM7r8v/Q3n3DM6r5iA7yI47ryP9jzN6xUZvug2/51\nqCANk75OEquyb7S8K3WiYaOZlD4jIzi/iu+d1hL7gTBJtY/6xa1xP1bhq40KLT2K\nDL8Lu0KR3LauZKtw3z/c89BhCI/70lydoPGHi6jTEUzGlDF6dR7++ku2c8vmxLs=\n=luKR\n-----END PGP SIGNATURE-----\n", "payload": "tree 3099bafef3e664a31cc2ef4b6de711fe943ad19f\nparent 1dcff2d5077244f49687ea25070958f23bd9edc6\nparent 3164c2aa15a17ddbc4378b375ac822b6fef154b5\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1657284948 +0530\ncommitter GitHub <noreply@github.com> 1657284948 +0530\n\nRollup merge of #98533 - jyn514:drop-tracking-debugging, r=eholk\n\nAdd a `-Zdump-drop-tracking-cfg` debugging flag\n\nThis is useful for debugging drop-tracking; previously, you had to recompile\nrustc from source and manually add a call to `write_graph_to_file`. This\nmakes the option more discoverable and configurable at runtime.\n\nI also took the liberty of making the labels for the CFG nodes much easier to read:\npreviously, they looked like `id(2), local_id: 48`, now they look like\n```\nexpr from_config (hir_id=HirId { owner: DefId(0:10 ~ default_struct_update[79f9]::foo), local_id: 2})\n```\n\nr? ``@eholk``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ce8de30871487ee79f26ef1723dd3b21f50ff79", "html_url": "https://github.com/rust-lang/rust/commit/1ce8de30871487ee79f26ef1723dd3b21f50ff79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ce8de30871487ee79f26ef1723dd3b21f50ff79/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dcff2d5077244f49687ea25070958f23bd9edc6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dcff2d5077244f49687ea25070958f23bd9edc6", "html_url": "https://github.com/rust-lang/rust/commit/1dcff2d5077244f49687ea25070958f23bd9edc6"}, {"sha": "3164c2aa15a17ddbc4378b375ac822b6fef154b5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3164c2aa15a17ddbc4378b375ac822b6fef154b5", "html_url": "https://github.com/rust-lang/rust/commit/3164c2aa15a17ddbc4378b375ac822b6fef154b5"}], "stats": {"total": 80, "additions": 60, "deletions": 20}, "files": [{"sha": "1bb79a0264dd1c146f2fd77b125771513b08ebe2", "filename": "compiler/rustc_interface/src/tests.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_interface%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Ftests.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -649,6 +649,7 @@ fn test_debugging_options_tracking_hash() {\n     untracked!(dlltool, Some(PathBuf::from(\"custom_dlltool.exe\")));\n     untracked!(dont_buffer_diagnostics, true);\n     untracked!(dump_dep_graph, true);\n+    untracked!(dump_drop_tracking_cfg, Some(\"cfg.dot\".to_string()));\n     untracked!(dump_mir, Some(String::from(\"abc\")));\n     untracked!(dump_mir_dataflow, true);\n     untracked!(dump_mir_dir, String::from(\"abc\"));"}, {"sha": "b617eb02eb6e3697cb057739e0bede19ab7d532a", "filename": "compiler/rustc_session/src/options.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_session%2Fsrc%2Foptions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Foptions.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -1246,6 +1246,8 @@ options! {\n     dump_dep_graph: bool = (false, parse_bool, [UNTRACKED],\n         \"dump the dependency graph to $RUST_DEP_GRAPH (default: /tmp/dep_graph.gv) \\\n         (default: no)\"),\n+    dump_drop_tracking_cfg: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+        \"dump drop-tracking control-flow graph as a `.dot` file (default: no)\"),\n     dump_mir: Option<String> = (None, parse_opt_string, [UNTRACKED],\n         \"dump MIR state to file.\n         `val` is used to select which passes and functions to dump. For example:"}, {"sha": "887c791af76c2c08dc51722ba05e20006db6d7f8", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -109,7 +109,7 @@ rustc_index::newtype_index! {\n }\n \n /// Identifies a value whose drop state we need to track.\n-#[derive(PartialEq, Eq, Hash, Debug, Clone, Copy)]\n+#[derive(PartialEq, Eq, Hash, Clone, Copy)]\n enum TrackedValue {\n     /// Represents a named variable, such as a let binding, parameter, or upvar.\n     ///\n@@ -121,6 +121,21 @@ enum TrackedValue {\n     Temporary(HirId),\n }\n \n+impl Debug for TrackedValue {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        ty::tls::with_opt(|opt_tcx| {\n+            if let Some(tcx) = opt_tcx {\n+                write!(f, \"{}\", tcx.hir().node_to_string(self.hir_id()))\n+            } else {\n+                match self {\n+                    Self::Variable(hir_id) => write!(f, \"Variable({:?})\", hir_id),\n+                    Self::Temporary(hir_id) => write!(f, \"Temporary({:?})\", hir_id),\n+                }\n+            }\n+        })\n+    }\n+}\n+\n impl TrackedValue {\n     fn hir_id(&self) -> HirId {\n         match self {\n@@ -148,7 +163,7 @@ enum TrackedValueConversionError {\n     /// Place projects are not currently supported.\n     ///\n     /// The reasoning around these is kind of subtle, so we choose to be more\n-    /// conservative around these for now. There is not reason in theory we\n+    /// conservative around these for now. There is no reason in theory we\n     /// cannot support these, we just have not implemented it yet.\n     PlaceProjectionsNotSupported,\n }"}, {"sha": "111d534abf83bc9e1fee448df8c10bdbb4862dd0", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_build.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_build.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -33,6 +33,9 @@ pub(super) fn build_control_flow_graph<'tcx>(\n     intravisit::walk_body(&mut drop_range_visitor, body);\n \n     drop_range_visitor.drop_ranges.process_deferred_edges();\n+    if let Some(filename) = &tcx.sess.opts.debugging_opts.dump_drop_tracking_cfg {\n+        super::cfg_visualize::write_graph_to_file(&drop_range_visitor.drop_ranges, filename, tcx);\n+    }\n \n     (drop_range_visitor.drop_ranges, drop_range_visitor.places.borrowed_temporaries)\n }\n@@ -126,13 +129,14 @@ impl<'a, 'tcx> DropRangeVisitor<'a, 'tcx> {\n     /// ExprUseVisitor's consume callback doesn't go deep enough for our purposes in all\n     /// expressions. This method consumes a little deeper into the expression when needed.\n     fn consume_expr(&mut self, expr: &hir::Expr<'_>) {\n-        debug!(\"consuming expr {:?}, count={:?}\", expr.hir_id, self.expr_index);\n+        debug!(\"consuming expr {:?}, count={:?}\", expr.kind, self.expr_index);\n         let places = self\n             .places\n             .consumed\n             .get(&expr.hir_id)\n             .map_or(vec![], |places| places.iter().cloned().collect());\n         for place in places {\n+            trace!(?place, \"consuming place\");\n             for_each_consumable(self.hir, place, |value| self.record_drop(value));\n         }\n     }"}, {"sha": "c0a0bfe8e1c00a98cb53dd41b5d1e6e9bb7ba82c", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/cfg_visualize.rs", "status": "modified", "additions": 28, "deletions": 14, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Fcfg_visualize.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -2,29 +2,43 @@\n //! flow graph when needed for debugging.\n \n use rustc_graphviz as dot;\n+use rustc_middle::ty::TyCtxt;\n \n use super::{DropRangesBuilder, PostOrderId};\n \n /// Writes the CFG for DropRangesBuilder to a .dot file for visualization.\n ///\n /// It is not normally called, but is kept around to easily add debugging\n /// code when needed.\n-#[allow(dead_code)]\n-pub(super) fn write_graph_to_file(drop_ranges: &DropRangesBuilder, filename: &str) {\n-    dot::render(drop_ranges, &mut std::fs::File::create(filename).unwrap()).unwrap();\n+pub(super) fn write_graph_to_file(\n+    drop_ranges: &DropRangesBuilder,\n+    filename: &str,\n+    tcx: TyCtxt<'_>,\n+) {\n+    dot::render(\n+        &DropRangesGraph { drop_ranges, tcx },\n+        &mut std::fs::File::create(filename).unwrap(),\n+    )\n+    .unwrap();\n }\n \n-impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n+struct DropRangesGraph<'a, 'tcx> {\n+    drop_ranges: &'a DropRangesBuilder,\n+    tcx: TyCtxt<'tcx>,\n+}\n+\n+impl<'a> dot::GraphWalk<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n \n     fn nodes(&'a self) -> dot::Nodes<'a, Self::Node> {\n-        self.nodes.iter_enumerated().map(|(i, _)| i).collect()\n+        self.drop_ranges.nodes.iter_enumerated().map(|(i, _)| i).collect()\n     }\n \n     fn edges(&'a self) -> dot::Edges<'a, Self::Edge> {\n-        self.nodes\n+        self.drop_ranges\n+            .nodes\n             .iter_enumerated()\n             .flat_map(|(i, node)| {\n                 if node.successors.len() == 0 {\n@@ -45,7 +59,7 @@ impl<'a> dot::GraphWalk<'a> for DropRangesBuilder {\n     }\n }\n \n-impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n+impl<'a> dot::Labeller<'a> for DropRangesGraph<'_, '_> {\n     type Node = PostOrderId;\n \n     type Edge = (PostOrderId, PostOrderId);\n@@ -61,15 +75,15 @@ impl<'a> dot::Labeller<'a> for DropRangesBuilder {\n     fn node_label(&'a self, n: &Self::Node) -> dot::LabelText<'a> {\n         dot::LabelText::LabelStr(\n             format!(\n-                \"{:?}, local_id: {}\",\n-                n,\n-                self.post_order_map\n+                \"{n:?}: {}\",\n+                self.drop_ranges\n+                    .post_order_map\n                     .iter()\n                     .find(|(_hir_id, &post_order_id)| post_order_id == *n)\n-                    .map_or(\"<unknown>\".into(), |(hir_id, _)| format!(\n-                        \"{}\",\n-                        hir_id.local_id.index()\n-                    ))\n+                    .map_or(\"<unknown>\".into(), |(hir_id, _)| self\n+                        .tcx\n+                        .hir()\n+                        .node_to_string(*hir_id))\n             )\n             .into(),\n         )"}, {"sha": "67cc46f21f00b0dce7bd725a2ef6405ff56c6484", "filename": "compiler/rustc_typeck/src/check/generator_interior/drop_ranges/record_consumed_borrow.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ce8de30871487ee79f26ef1723dd3b21f50ff79/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fgenerator_interior%2Fdrop_ranges%2Frecord_consumed_borrow.rs?ref=1ce8de30871487ee79f26ef1723dd3b21f50ff79", "patch": "@@ -75,6 +75,7 @@ impl<'tcx> ExprUseDelegate<'tcx> {\n         if !self.places.consumed.contains_key(&consumer) {\n             self.places.consumed.insert(consumer, <_>::default());\n         }\n+        debug!(?consumer, ?target, \"mark_consumed\");\n         self.places.consumed.get_mut(&consumer).map(|places| places.insert(target));\n     }\n \n@@ -136,13 +137,16 @@ impl<'tcx> expr_use_visitor::Delegate<'tcx> for ExprUseDelegate<'tcx> {\n         place_with_id: &expr_use_visitor::PlaceWithHirId<'tcx>,\n         diag_expr_id: HirId,\n     ) {\n-        let parent = match self.tcx.hir().find_parent_node(place_with_id.hir_id) {\n+        let hir = self.tcx.hir();\n+        let parent = match hir.find_parent_node(place_with_id.hir_id) {\n             Some(parent) => parent,\n             None => place_with_id.hir_id,\n         };\n         debug!(\n-            \"consume {:?}; diag_expr_id={:?}, using parent {:?}\",\n-            place_with_id, diag_expr_id, parent\n+            \"consume {:?}; diag_expr_id={}, using parent {}\",\n+            place_with_id,\n+            hir.node_to_string(diag_expr_id),\n+            hir.node_to_string(parent)\n         );\n         place_with_id\n             .try_into()"}]}