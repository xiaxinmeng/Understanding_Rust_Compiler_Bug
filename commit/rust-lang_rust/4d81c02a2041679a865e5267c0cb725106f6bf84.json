{"sha": "4d81c02a2041679a865e5267c0cb725106f6bf84", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRkODFjMDJhMjA0MTY3OWE4NjVlNTI2N2MwY2I3MjUxMDZmNmJmODQ=", "commit": {"author": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-11-18T14:49:23Z"}, "committer": {"name": "Tobias Bucher", "email": "tobiasbucher5991@gmail.com", "date": "2015-11-19T20:05:09Z"}, "message": "Error when paths contain NUL characters\n\nOn Windows: Previously these paths were silently truncated at these NUL\ncharacters, now they fail with `ErrorKind::InvalidInput`.", "tree": {"sha": "54e5fe910bd5ddeb06504a544f794694552b6739", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54e5fe910bd5ddeb06504a544f794694552b6739"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4d81c02a2041679a865e5267c0cb725106f6bf84", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4d81c02a2041679a865e5267c0cb725106f6bf84", "html_url": "https://github.com/rust-lang/rust/commit/4d81c02a2041679a865e5267c0cb725106f6bf84", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4d81c02a2041679a865e5267c0cb725106f6bf84/comments", "author": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tbu-", "id": 6666593, "node_id": "MDQ6VXNlcjY2NjY1OTM=", "avatar_url": "https://avatars.githubusercontent.com/u/6666593?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tbu-", "html_url": "https://github.com/tbu-", "followers_url": "https://api.github.com/users/tbu-/followers", "following_url": "https://api.github.com/users/tbu-/following{/other_user}", "gists_url": "https://api.github.com/users/tbu-/gists{/gist_id}", "starred_url": "https://api.github.com/users/tbu-/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tbu-/subscriptions", "organizations_url": "https://api.github.com/users/tbu-/orgs", "repos_url": "https://api.github.com/users/tbu-/repos", "events_url": "https://api.github.com/users/tbu-/events{/privacy}", "received_events_url": "https://api.github.com/users/tbu-/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e48b0e380319dc586a329baac640b9457feb87a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e48b0e380319dc586a329baac640b9457feb87a", "html_url": "https://github.com/rust-lang/rust/commit/3e48b0e380319dc586a329baac640b9457feb87a"}], "stats": {"total": 43, "additions": 24, "deletions": 19}, "files": [{"sha": "31e0949edec195bfc2d9408c368fae251851c6fe", "filename": "src/libstd/sys/windows/fs.rs", "status": "modified", "additions": 24, "deletions": 19, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4d81c02a2041679a865e5267c0cb725106f6bf84/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4d81c02a2041679a865e5267c0cb725106f6bf84/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ffs.rs?ref=4d81c02a2041679a865e5267c0cb725106f6bf84", "patch": "@@ -226,7 +226,7 @@ impl File {\n     }\n \n     pub fn open(path: &Path, opts: &OpenOptions) -> io::Result<File> {\n-        let path = to_utf16(path);\n+        let path = try!(to_u16s(path));\n         let handle = unsafe {\n             c::CreateFileW(path.as_ptr(),\n                            opts.get_desired_access(),\n@@ -377,8 +377,13 @@ impl fmt::Debug for File {\n     }\n }\n \n-pub fn to_utf16(s: &Path) -> Vec<u16> {\n-    s.as_os_str().encode_wide().chain(Some(0)).collect()\n+pub fn to_u16s(s: &Path) -> io::Result<Vec<u16>> {\n+    let mut maybe_result = s.as_os_str().encode_wide().collect();\n+    if maybe_result.iter().any(|&u| u == 0) {\n+        return Err(io::Error::new(io::ErrorKind::InvalidInput, \"paths cannot contain NULs\"));\n+    }\n+    maybe_result.push(0);\n+    Ok(maybe_result)\n }\n \n impl FileAttr {\n@@ -449,7 +454,7 @@ impl DirBuilder {\n     pub fn new() -> DirBuilder { DirBuilder }\n \n     pub fn mkdir(&self, p: &Path) -> io::Result<()> {\n-        let p = to_utf16(p);\n+        let p = try!(to_u16s(p));\n         try!(cvt(unsafe {\n             c::CreateDirectoryW(p.as_ptr(), ptr::null_mut())\n         }));\n@@ -460,7 +465,7 @@ impl DirBuilder {\n pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n     let root = p.to_path_buf();\n     let star = p.join(\"*\");\n-    let path = to_utf16(&star);\n+    let path = try!(to_u16s(&star));\n \n     unsafe {\n         let mut wfd = mem::zeroed();\n@@ -478,22 +483,22 @@ pub fn readdir(p: &Path) -> io::Result<ReadDir> {\n }\n \n pub fn unlink(p: &Path) -> io::Result<()> {\n-    let p_utf16 = to_utf16(p);\n-    try!(cvt(unsafe { c::DeleteFileW(p_utf16.as_ptr()) }));\n+    let p_u16s = try!(to_u16s(p));\n+    try!(cvt(unsafe { c::DeleteFileW(p_u16s.as_ptr()) }));\n     Ok(())\n }\n \n pub fn rename(old: &Path, new: &Path) -> io::Result<()> {\n-    let old = to_utf16(old);\n-    let new = to_utf16(new);\n+    let old = try!(to_u16s(old));\n+    let new = try!(to_u16s(new));\n     try!(cvt(unsafe {\n         c::MoveFileExW(old.as_ptr(), new.as_ptr(), c::MOVEFILE_REPLACE_EXISTING)\n     }));\n     Ok(())\n }\n \n pub fn rmdir(p: &Path) -> io::Result<()> {\n-    let p = to_utf16(p);\n+    let p = try!(to_u16s(p));\n     try!(cvt(unsafe { c::RemoveDirectoryW(p.as_ptr()) }));\n     Ok(())\n }\n@@ -508,8 +513,8 @@ pub fn symlink(src: &Path, dst: &Path) -> io::Result<()> {\n }\n \n pub fn symlink_inner(src: &Path, dst: &Path, dir: bool) -> io::Result<()> {\n-    let src = to_utf16(src);\n-    let dst = to_utf16(dst);\n+    let src = try!(to_u16s(src));\n+    let dst = try!(to_u16s(dst));\n     let flags = if dir { c::SYMBOLIC_LINK_FLAG_DIRECTORY } else { 0 };\n     try!(cvt(unsafe {\n         c::CreateSymbolicLinkW(dst.as_ptr(), src.as_ptr(), flags) as c::BOOL\n@@ -518,8 +523,8 @@ pub fn symlink_inner(src: &Path, dst: &Path, dir: bool) -> io::Result<()> {\n }\n \n pub fn link(src: &Path, dst: &Path) -> io::Result<()> {\n-    let src = to_utf16(src);\n-    let dst = to_utf16(dst);\n+    let src = try!(to_u16s(src));\n+    let dst = try!(to_u16s(dst));\n     try!(cvt(unsafe {\n         c::CreateHardLinkW(dst.as_ptr(), src.as_ptr(), ptr::null_mut())\n     }));\n@@ -545,10 +550,10 @@ pub fn stat(p: &Path) -> io::Result<FileAttr> {\n }\n \n pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n-    let utf16 = to_utf16(p);\n+    let u16s = try!(to_u16s(p));\n     unsafe {\n         let mut attr: FileAttr = mem::zeroed();\n-        try!(cvt(c::GetFileAttributesExW(utf16.as_ptr(),\n+        try!(cvt(c::GetFileAttributesExW(u16s.as_ptr(),\n                                          c::GetFileExInfoStandard,\n                                          &mut attr.data as *mut _ as *mut _)));\n         if attr.is_reparse_point() {\n@@ -562,7 +567,7 @@ pub fn lstat(p: &Path) -> io::Result<FileAttr> {\n }\n \n pub fn set_perm(p: &Path, perm: FilePermissions) -> io::Result<()> {\n-    let p = to_utf16(p);\n+    let p = try!(to_u16s(p));\n     unsafe {\n         try!(cvt(c::SetFileAttributesW(p.as_ptr(), perm.attrs)));\n         Ok(())\n@@ -602,8 +607,8 @@ pub fn copy(from: &Path, to: &Path) -> io::Result<u64> {\n         *(lpData as *mut i64) = TotalBytesTransferred;\n         c::PROGRESS_CONTINUE\n     }\n-    let pfrom = to_utf16(from);\n-    let pto = to_utf16(to);\n+    let pfrom = try!(to_u16s(from));\n+    let pto = try!(to_u16s(to));\n     let mut size = 0i64;\n     try!(cvt(unsafe {\n         c::CopyFileExW(pfrom.as_ptr(), pto.as_ptr(), Some(callback),"}]}