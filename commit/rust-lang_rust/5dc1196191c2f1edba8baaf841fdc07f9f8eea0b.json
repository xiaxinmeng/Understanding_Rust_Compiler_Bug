{"sha": "5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVkYzExOTYxOTFjMmYxZWRiYThiYWFmODQxZmRjMDdmOWY4ZWVhMGI=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-08-19T21:46:28Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-09-01T22:29:26Z"}, "message": "Refactor away `binding.is_pseudo_public()`.", "tree": {"sha": "712b819e856c6daece684b89689d9c4d2ffd9d07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/712b819e856c6daece684b89689d9c4d2ffd9d07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "html_url": "https://github.com/rust-lang/rust/commit/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "48a435a90fb227f0da20b610438618dfc2c49a4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/48a435a90fb227f0da20b610438618dfc2c49a4e", "html_url": "https://github.com/rust-lang/rust/commit/48a435a90fb227f0da20b610438618dfc2c49a4e"}], "stats": {"total": 15, "additions": 5, "deletions": 10}, "files": [{"sha": "e27936b91296058a1885f2563b15c0136387f413", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "patch": "@@ -885,10 +885,6 @@ impl<'a> NameBinding<'a> {\n         }\n     }\n \n-    fn is_pseudo_public(&self) -> bool {\n-        self.pseudo_vis() == ty::Visibility::Public\n-    }\n-\n     // We sometimes need to treat variants as `pub` for backwards compatibility\n     fn pseudo_vis(&self) -> ty::Visibility {\n         if self.is_variant() { ty::Visibility::Public } else { self.vis }"}, {"sha": "eedbccbb039baad4daec2db13c1bbe77d6bed988", "filename": "src/librustc_resolve/resolve_imports.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5dc1196191c2f1edba8baaf841fdc07f9f8eea0b/src%2Flibrustc_resolve%2Fresolve_imports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fresolve_imports.rs?ref=5dc1196191c2f1edba8baaf841fdc07f9f8eea0b", "patch": "@@ -168,7 +168,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         let is_disallowed_private_import = |binding: &NameBinding| {\n-            !allow_private_imports && !binding.is_pseudo_public() && binding.is_import()\n+            !allow_private_imports && binding.vis != ty::Visibility::Public && binding.is_import()\n         };\n \n         if let Some(span) = record_used {\n@@ -338,7 +338,7 @@ impl<'a> Resolver<'a> {\n         };\n \n         // Define `new_binding` in `module`s glob importers.\n-        if new_binding.is_importable() && new_binding.is_pseudo_public() {\n+        if new_binding.vis == ty::Visibility::Public {\n             for directive in module.glob_importers.borrow_mut().iter() {\n                 let imported_binding = self.import(new_binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n@@ -656,9 +656,8 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n \n         if let Some(Def::Trait(_)) = module.def {\n             self.session.span_err(directive.span, \"items in traits are not importable.\");\n-        }\n-\n-        if module.def_id() == directive.parent.def_id()  {\n+            return;\n+        } else if module.def_id() == directive.parent.def_id()  {\n             return;\n         } else if let GlobImport { is_prelude: true } = directive.subclass {\n             self.prelude = Some(module);\n@@ -674,7 +673,7 @@ impl<'a, 'b:'a> ImportResolver<'a, 'b> {\n             resolution.borrow().binding().map(|binding| (*name, binding))\n         }).collect::<Vec<_>>();\n         for ((name, ns), binding) in bindings {\n-            if binding.is_importable() && binding.is_pseudo_public() {\n+            if binding.pseudo_vis() == ty::Visibility::Public {\n                 let imported_binding = self.import(binding, directive);\n                 let _ = self.try_define(directive.parent, name, ns, imported_binding);\n             }"}]}