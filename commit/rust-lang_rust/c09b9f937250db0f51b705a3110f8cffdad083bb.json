{"sha": "c09b9f937250db0f51b705a3110f8cffdad083bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwOWI5ZjkzNzI1MGRiMGY1MWI3MDVhMzExMGY4Y2ZmZGFkMDgzYmI=", "commit": {"author": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-17T11:15:24Z"}, "committer": {"name": "Simon Sapin", "email": "simon.sapin@exyr.org", "date": "2018-03-21T16:54:33Z"}, "message": "Deprecate the AsciiExt trait in favor of inherent methods\n\nThe trait and some of its methods are stable and will remain.\nSome of the newer methods are unstable and can be removed later.\n\nFixes https://github.com/rust-lang/rust/issues/39658", "tree": {"sha": "54b20c17d36bae030cc3c83472d1d402b36ecf3e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/54b20c17d36bae030cc3c83472d1d402b36ecf3e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c09b9f937250db0f51b705a3110f8cffdad083bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c09b9f937250db0f51b705a3110f8cffdad083bb", "html_url": "https://github.com/rust-lang/rust/commit/c09b9f937250db0f51b705a3110f8cffdad083bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c09b9f937250db0f51b705a3110f8cffdad083bb/comments", "author": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SimonSapin", "id": 291359, "node_id": "MDQ6VXNlcjI5MTM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/291359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SimonSapin", "html_url": "https://github.com/SimonSapin", "followers_url": "https://api.github.com/users/SimonSapin/followers", "following_url": "https://api.github.com/users/SimonSapin/following{/other_user}", "gists_url": "https://api.github.com/users/SimonSapin/gists{/gist_id}", "starred_url": "https://api.github.com/users/SimonSapin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SimonSapin/subscriptions", "organizations_url": "https://api.github.com/users/SimonSapin/orgs", "repos_url": "https://api.github.com/users/SimonSapin/repos", "events_url": "https://api.github.com/users/SimonSapin/events{/privacy}", "received_events_url": "https://api.github.com/users/SimonSapin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cc34ca1c9787fde84116637a0cee92fc5e375e3d", "url": "https://api.github.com/repos/rust-lang/rust/commits/cc34ca1c9787fde84116637a0cee92fc5e375e3d", "html_url": "https://github.com/rust-lang/rust/commit/cc34ca1c9787fde84116637a0cee92fc5e375e3d"}], "stats": {"total": 40, "additions": 24, "deletions": 16}, "files": [{"sha": "950222dbcfa3fe8d303097e6832e0af6af648196", "filename": "src/libcore/tests/ascii.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibcore%2Ftests%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibcore%2Ftests%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fascii.rs?ref=c09b9f937250db0f51b705a3110f8cffdad083bb", "patch": "@@ -9,7 +9,6 @@\n // except according to those terms.\n \n use core::char::from_u32;\n-use std::ascii::AsciiExt;\n \n #[test]\n fn test_is_ascii() {\n@@ -143,8 +142,6 @@ macro_rules! assert_all {\n                            stringify!($what), b);\n                 }\n             }\n-            assert!($str.$what());\n-            assert!($str.as_bytes().$what());\n         )+\n     }};\n     ($what:ident, $($str:tt),+,) => (assert_all!($what,$($str),+))"}, {"sha": "6472edb0aa7d3981c8629d98185955c0244f1d89", "filename": "src/libstd/ascii.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fascii.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fascii.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fascii.rs?ref=c09b9f937250db0f51b705a3110f8cffdad083bb", "patch": "@@ -52,6 +52,7 @@ pub use core::ascii::{EscapeDefault, escape_default};\n ///\n /// [combining character]: https://en.wikipedia.org/wiki/Combining_character\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n pub trait AsciiExt {\n     /// Container type for copied ASCII characters.\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -84,6 +85,7 @@ pub trait AsciiExt {\n     /// [`make_ascii_uppercase`]: #tymethod.make_ascii_uppercase\n     /// [`str::to_uppercase`]: ../primitive.str.html#method.to_uppercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow(deprecated)]\n     fn to_ascii_uppercase(&self) -> Self::Owned;\n \n     /// Makes a copy of the value in its ASCII lower case equivalent.\n@@ -104,6 +106,7 @@ pub trait AsciiExt {\n     /// [`make_ascii_lowercase`]: #tymethod.make_ascii_lowercase\n     /// [`str::to_lowercase`]: ../primitive.str.html#method.to_lowercase\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[allow(deprecated)]\n     fn to_ascii_lowercase(&self) -> Self::Owned;\n \n     /// Checks that two values are an ASCII case-insensitive match.\n@@ -162,6 +165,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphabetic(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII uppercase character:\n@@ -174,6 +178,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_uppercase(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII lowercase character:\n@@ -186,6 +191,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_lowercase(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII alphanumeric character:\n@@ -199,6 +205,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_alphanumeric(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII decimal digit:\n@@ -211,6 +218,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_digit(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII hexadecimal digit:\n@@ -224,6 +232,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_hexdigit(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII punctuation character:\n@@ -241,6 +250,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_punctuation(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII graphic character:\n@@ -253,6 +263,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_graphic(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII whitespace character:\n@@ -282,6 +293,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_whitespace(&self) -> bool { unimplemented!(); }\n \n     /// Checks if the value is an ASCII control character:\n@@ -294,6 +306,7 @@ pub trait AsciiExt {\n     /// This method will be deprecated in favor of the identically-named\n     /// inherent methods on `u8`, `char`, `[u8]` and `str`.\n     #[unstable(feature = \"ascii_ctype\", issue = \"39658\")]\n+    #[rustc_deprecated(since = \"1.26.0\", reason = \"use inherent methods instead\")]\n     fn is_ascii_control(&self) -> bool { unimplemented!(); }\n }\n \n@@ -354,6 +367,7 @@ macro_rules! delegating_ascii_ctype_methods {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl AsciiExt for u8 {\n     type Owned = u8;\n \n@@ -362,6 +376,7 @@ impl AsciiExt for u8 {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl AsciiExt for char {\n     type Owned = char;\n \n@@ -370,6 +385,7 @@ impl AsciiExt for char {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl AsciiExt for [u8] {\n     type Owned = Vec<u8>;\n \n@@ -427,6 +443,7 @@ impl AsciiExt for [u8] {\n }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+#[allow(deprecated)]\n impl AsciiExt for str {\n     type Owned = String;\n "}, {"sha": "afa8e3e1369354f370d5cbf5442b09dd2f3ef53b", "filename": "src/libstd/sys/windows/process.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Fprocess.rs?ref=c09b9f937250db0f51b705a3110f8cffdad083bb", "patch": "@@ -10,7 +10,6 @@\n \n #![unstable(feature = \"process_internals\", issue = \"0\")]\n \n-use ascii::AsciiExt;\n use collections::BTreeMap;\n use env::split_paths;\n use env;"}, {"sha": "78b2bb5fe6e2f9213f1886922e8d7e19f0c2edae", "filename": "src/libstd/sys_common/wtf8.rs", "status": "modified", "additions": 7, "deletions": 10, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Flibstd%2Fsys_common%2Fwtf8.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys_common%2Fwtf8.rs?ref=c09b9f937250db0f51b705a3110f8cffdad083bb", "patch": "@@ -27,7 +27,6 @@\n \n use core::str::next_code_point;\n \n-use ascii::*;\n use borrow::Cow;\n use char;\n use fmt;\n@@ -871,24 +870,22 @@ impl Hash for Wtf8 {\n     }\n }\n \n-impl AsciiExt for Wtf8 {\n-    type Owned = Wtf8Buf;\n-\n-    fn is_ascii(&self) -> bool {\n+impl Wtf8 {\n+    pub fn is_ascii(&self) -> bool {\n         self.bytes.is_ascii()\n     }\n-    fn to_ascii_uppercase(&self) -> Wtf8Buf {\n+    pub fn to_ascii_uppercase(&self) -> Wtf8Buf {\n         Wtf8Buf { bytes: self.bytes.to_ascii_uppercase() }\n     }\n-    fn to_ascii_lowercase(&self) -> Wtf8Buf {\n+    pub fn to_ascii_lowercase(&self) -> Wtf8Buf {\n         Wtf8Buf { bytes: self.bytes.to_ascii_lowercase() }\n     }\n-    fn eq_ignore_ascii_case(&self, other: &Wtf8) -> bool {\n+    pub fn eq_ignore_ascii_case(&self, other: &Wtf8) -> bool {\n         self.bytes.eq_ignore_ascii_case(&other.bytes)\n     }\n \n-    fn make_ascii_uppercase(&mut self) { self.bytes.make_ascii_uppercase() }\n-    fn make_ascii_lowercase(&mut self) { self.bytes.make_ascii_lowercase() }\n+    pub fn make_ascii_uppercase(&mut self) { self.bytes.make_ascii_uppercase() }\n+    pub fn make_ascii_lowercase(&mut self) { self.bytes.make_ascii_lowercase() }\n }\n \n #[cfg(test)]"}, {"sha": "d3ba477fa573e7ca9937253deb520ac8f0adcc72", "filename": "src/test/run-pass/issue-10683.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c09b9f937250db0f51b705a3110f8cffdad083bb/src%2Ftest%2Frun-pass%2Fissue-10683.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-10683.rs?ref=c09b9f937250db0f51b705a3110f8cffdad083bb", "patch": "@@ -10,8 +10,6 @@\n \n // pretty-expanded FIXME #23616\n \n-use std::ascii::AsciiExt;\n-\n static NAME: &'static str = \"hello world\";\n \n fn main() {"}]}