{"sha": "3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "node_id": "C_kwDOAAsO6NoAKDNiNDk0YTQxZDllODdjNjM2YTlkNWIwOTRhMTViOGI2ZGIyYzZjYzI", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-03T15:04:10Z"}, "committer": {"name": "Guillaume Gomez", "email": "guillaume.gomez@huawei.com", "date": "2023-02-06T15:31:17Z"}, "message": "Turn MarkdownWithToc into a struct with named fields", "tree": {"sha": "58c00d1ece39abcee634e24d45276fa20909edb3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58c00d1ece39abcee634e24d45276fa20909edb3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "html_url": "https://github.com/rust-lang/rust/commit/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a9985cf172e7cb8ab5c58ce2818752c3572754fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/a9985cf172e7cb8ab5c58ce2818752c3572754fc", "html_url": "https://github.com/rust-lang/rust/commit/a9985cf172e7cb8ab5c58ce2818752c3572754fc"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "fb7c34118a4913569671e2d714334ae3ed36b438", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "patch": "@@ -102,14 +102,14 @@ pub struct Markdown<'a> {\n     /// E.g. if `heading_offset: HeadingOffset::H2`, then `# something` renders an `<h2>`.\n     pub heading_offset: HeadingOffset,\n }\n-/// A tuple struct like `Markdown` that renders the markdown with a table of contents.\n-pub(crate) struct MarkdownWithToc<'a>(\n-    pub(crate) &'a str,\n-    pub(crate) &'a mut IdMap,\n-    pub(crate) ErrorCodes,\n-    pub(crate) Edition,\n-    pub(crate) &'a Option<Playground>,\n-);\n+/// A struct like `Markdown` that renders the markdown with a table of contents.\n+pub(crate) struct MarkdownWithToc<'a> {\n+    pub(crate) content: &'a str,\n+    pub(crate) ids: &'a mut IdMap,\n+    pub(crate) error_codes: ErrorCodes,\n+    pub(crate) edition: Edition,\n+    pub(crate) playground: &'a Option<Playground>,\n+}\n /// A tuple struct like `Markdown` that renders the markdown escaping HTML tags\n /// and includes no paragraph tags.\n pub(crate) struct MarkdownItemInfo<'a>(pub(crate) &'a str, pub(crate) &'a mut IdMap);\n@@ -1048,7 +1048,7 @@ impl Markdown<'_> {\n \n impl MarkdownWithToc<'_> {\n     pub(crate) fn into_string(self) -> String {\n-        let MarkdownWithToc(md, ids, codes, edition, playground) = self;\n+        let MarkdownWithToc { content: md, ids, error_codes: codes, edition, playground } = self;\n \n         let p = Parser::new_ext(md, main_body_opts()).into_offset_iter();\n "}, {"sha": "4321d4aa343dcd8f7065ee0134975e5740b7add8", "filename": "src/librustdoc/markdown.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2/src%2Flibrustdoc%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2/src%2Flibrustdoc%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown.rs?ref=3b494a41d9e87c636a9d5b094a15b8b6db2c6cc2", "patch": "@@ -72,7 +72,14 @@ pub(crate) fn render<P: AsRef<Path>>(\n     let mut ids = IdMap::new();\n     let error_codes = ErrorCodes::from(options.unstable_features.is_nightly_build());\n     let text = if !options.markdown_no_toc {\n-        MarkdownWithToc(text, &mut ids, error_codes, edition, &playground).into_string()\n+        MarkdownWithToc {\n+            content: text,\n+            ids: &mut ids,\n+            error_codes,\n+            edition,\n+            playground: &playground,\n+        }\n+        .into_string()\n     } else {\n         Markdown {\n             content: text,"}]}