{"sha": "ce1151c04c8aa529a81d124d41cc900c7da7d4ac", "node_id": "C_kwDOAAsO6NoAKGNlMTE1MWMwNGM4YWE1MjlhODFkMTI0ZDQxY2M5MDBjN2RhN2Q0YWM", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-06-20T12:56:40Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-06-20T12:56:40Z"}, "message": "Rollup merge of #97837 - sunfishcode:sunfishcode/proc-self-mem, r=m-ou-se\n\nDocument Rust's stance on `/proc/self/mem`\n\nAdd documentation to `std::os::unix::io` describing Rust's stance on\n`/proc/self/mem`, treating it as an external entity which is outside\nthe scope of Rust's safety guarantees.", "tree": {"sha": "03d0da8347e5f9b7db049d060b47a1f1564d8887", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/03d0da8347e5f9b7db049d060b47a1f1564d8887"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ce1151c04c8aa529a81d124d41cc900c7da7d4ac", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJisG6ICRBK7hj4Ov3rIwAAMM0IADpOQlnjwUY0CTvT/bv3s0Xe\nrVSZr/VvW1E6T14x9Iqz5AvYn10HUcx0gJz8RttQeHOBAf4eXr6MQf7zLVAYOpiM\njxVq1BKeDx+/BRYXoe4gzDlZiwGhhvQ5VwiSaVLPMYIAJ2wdTMc+ADQk2NR8qSHd\nAmkAOc18PMwwbRYPVxqDvcF9whNYkFJMNyf7M42ujECZiCJVya3VrdyT6DxGEZqq\nSaA2gc2+ho9QslzOY/q30K/nQEHI0Y5aGG+xJ+Bt2qmO2lMCgrushnW0rofACvry\na1cUSsQ1iT0JOKMUssOcVv8sBoAVK/y9GBP0f0F+CC4jg46GqHoWqPSQUTE0nYE=\n=wEwK\n-----END PGP SIGNATURE-----\n", "payload": "tree 03d0da8347e5f9b7db049d060b47a1f1564d8887\nparent 2807f28de550fb6074dc4fb2f3099865de01bc1e\nparent 69594414bfac4d0ae10da65ccffad6ab4b0fa05a\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1655729800 +0200\ncommitter GitHub <noreply@github.com> 1655729800 +0200\n\nRollup merge of #97837 - sunfishcode:sunfishcode/proc-self-mem, r=m-ou-se\n\nDocument Rust's stance on `/proc/self/mem`\n\nAdd documentation to `std::os::unix::io` describing Rust's stance on\n`/proc/self/mem`, treating it as an external entity which is outside\nthe scope of Rust's safety guarantees.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ce1151c04c8aa529a81d124d41cc900c7da7d4ac", "html_url": "https://github.com/rust-lang/rust/commit/ce1151c04c8aa529a81d124d41cc900c7da7d4ac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ce1151c04c8aa529a81d124d41cc900c7da7d4ac/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2807f28de550fb6074dc4fb2f3099865de01bc1e", "url": "https://api.github.com/repos/rust-lang/rust/commits/2807f28de550fb6074dc4fb2f3099865de01bc1e", "html_url": "https://github.com/rust-lang/rust/commit/2807f28de550fb6074dc4fb2f3099865de01bc1e"}, {"sha": "69594414bfac4d0ae10da65ccffad6ab4b0fa05a", "url": "https://api.github.com/repos/rust-lang/rust/commits/69594414bfac4d0ae10da65ccffad6ab4b0fa05a", "html_url": "https://github.com/rust-lang/rust/commit/69594414bfac4d0ae10da65ccffad6ab4b0fa05a"}], "stats": {"total": 19, "additions": 19, "deletions": 0}, "files": [{"sha": "3ab5606f8897dc778a3066bd331dd1efeca8196f", "filename": "library/std/src/os/unix/io/mod.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/ce1151c04c8aa529a81d124d41cc900c7da7d4ac/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ce1151c04c8aa529a81d124d41cc900c7da7d4ac/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Funix%2Fio%2Fmod.rs?ref=ce1151c04c8aa529a81d124d41cc900c7da7d4ac", "patch": "@@ -54,6 +54,25 @@\n //! Like boxes, `OwnedFd` values conceptually own the resource they point to,\n //! and free (close) it when they are dropped.\n //!\n+//! ## `/proc/self/mem` and similar OS features\n+//!\n+//! Some platforms have special files, such as `/proc/self/mem`, which\n+//! provide read and write access to the process's memory. Such reads\n+//! and writes happen outside the control of the Rust compiler, so they do not\n+//! uphold Rust's memory safety guarantees.\n+//!\n+//! This does not mean that all APIs that might allow `/proc/self/mem`\n+//! to be opened and read from or written must be `unsafe`. Rust's safety guarantees\n+//! only cover what the program itself can do, and not what entities outside\n+//! the program can do to it. `/proc/self/mem` is considered to be such an\n+//! external entity, along with debugging interfaces, and people with physical access to\n+//! the hardware. This is true even in cases where the program is controlling\n+//! the external entity.\n+//!\n+//! If you desire to comprehensively prevent programs from reaching out and\n+//! causing external entities to reach back in and violate memory safety, it's\n+//! necessary to use *sandboxing*, which is outside the scope of `std`.\n+//!\n //! [`BorrowedFd<'a>`]: crate::os::unix::io::BorrowedFd\n \n #![stable(feature = \"rust1\", since = \"1.0.0\")]"}]}