{"sha": "1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3OThjMWFhNTk4YTAzZTBkNGQyNDQwZDE1YmRiMmFlMjQyYjM5MmU=", "commit": {"author": {"name": "Jan-Erik Rediger", "email": "janerik@fnordig.de", "date": "2016-07-14T21:40:14Z"}, "committer": {"name": "Jan-Erik Rediger", "email": "janerik@fnordig.de", "date": "2016-07-29T08:29:44Z"}, "message": "Refactor determining of relocation model into methods", "tree": {"sha": "3f9108af65cf4991e92a60cfa1a4b04562db4d18", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f9108af65cf4991e92a60cfa1a4b04562db4d18"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "html_url": "https://github.com/rust-lang/rust/commit/1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1798c1aa598a03e0d4d2440d15bdb2ae242b392e/comments", "author": {"login": "badboy", "id": 2129, "node_id": "MDQ6VXNlcjIxMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badboy", "html_url": "https://github.com/badboy", "followers_url": "https://api.github.com/users/badboy/followers", "following_url": "https://api.github.com/users/badboy/following{/other_user}", "gists_url": "https://api.github.com/users/badboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/badboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badboy/subscriptions", "organizations_url": "https://api.github.com/users/badboy/orgs", "repos_url": "https://api.github.com/users/badboy/repos", "events_url": "https://api.github.com/users/badboy/events{/privacy}", "received_events_url": "https://api.github.com/users/badboy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "badboy", "id": 2129, "node_id": "MDQ6VXNlcjIxMjk=", "avatar_url": "https://avatars.githubusercontent.com/u/2129?v=4", "gravatar_id": "", "url": "https://api.github.com/users/badboy", "html_url": "https://github.com/badboy", "followers_url": "https://api.github.com/users/badboy/followers", "following_url": "https://api.github.com/users/badboy/following{/other_user}", "gists_url": "https://api.github.com/users/badboy/gists{/gist_id}", "starred_url": "https://api.github.com/users/badboy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/badboy/subscriptions", "organizations_url": "https://api.github.com/users/badboy/orgs", "repos_url": "https://api.github.com/users/badboy/repos", "events_url": "https://api.github.com/users/badboy/events{/privacy}", "received_events_url": "https://api.github.com/users/badboy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1bc04472609aec664ce434f7a3b7df7e06e80637", "url": "https://api.github.com/repos/rust-lang/rust/commits/1bc04472609aec664ce434f7a3b7df7e06e80637", "html_url": "https://github.com/rust-lang/rust/commit/1bc04472609aec664ce434f7a3b7df7e06e80637"}], "stats": {"total": 65, "additions": 41, "deletions": 24}, "files": [{"sha": "87815c63f7992b2b46e6359c0f61693e1f29dd97", "filename": "src/librustc_trans/back/write.rs", "status": "modified", "additions": 3, "deletions": 23, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/1798c1aa598a03e0d4d2440d15bdb2ae242b392e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1798c1aa598a03e0d4d2440d15bdb2ae242b392e/src%2Flibrustc_trans%2Fback%2Fwrite.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fwrite.rs?ref=1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "patch": "@@ -24,6 +24,7 @@ use util::fs::link_or_copy;\n use errors::{self, Handler, Level, DiagnosticBuilder};\n use errors::emitter::Emitter;\n use syntax_pos::MultiSpan;\n+use context::{is_pie_binary, get_reloc_model};\n \n use std::collections::HashMap;\n use std::ffi::{CStr, CString};\n@@ -154,32 +155,11 @@ fn get_llvm_opt_size(optimize: config::OptLevel) -> llvm::CodeGenOptSize {\n }\n \n pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n-    let reloc_model_arg = match sess.opts.cg.relocation_model {\n-        Some(ref s) => &s[..],\n-        None => &sess.target.target.options.relocation_model[..],\n-    };\n-    let reloc_model = match reloc_model_arg {\n-        \"pic\" => llvm::RelocPIC,\n-        \"static\" => llvm::RelocStatic,\n-        \"default\" => llvm::RelocDefault,\n-        \"dynamic-no-pic\" => llvm::RelocDynamicNoPic,\n-        _ => {\n-            sess.err(&format!(\"{:?} is not a valid relocation mode\",\n-                             sess.opts\n-                                 .cg\n-                                 .relocation_model));\n-            sess.abort_if_errors();\n-            bug!();\n-        }\n-    };\n+    let reloc_model = get_reloc_model(sess);\n \n     let opt_level = get_llvm_opt_level(sess.opts.optimize);\n     let use_softfp = sess.opts.cg.soft_float;\n \n-    let any_library = sess.crate_types.borrow().iter().any(|ty| {\n-        *ty != config::CrateTypeExecutable\n-    });\n-\n     let ffunction_sections = sess.target.target.options.function_sections;\n     let fdata_sections = ffunction_sections;\n \n@@ -220,7 +200,7 @@ pub fn create_target_machine(sess: &Session) -> TargetMachineRef {\n             reloc_model,\n             opt_level,\n             use_softfp,\n-            !any_library && reloc_model == llvm::RelocPIC,\n+            is_pie_binary(sess),\n             ffunction_sections,\n             fdata_sections,\n         )"}, {"sha": "d8b3089bc998e5edd5b07abbd9f922962dffa525", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 38, "deletions": 1, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/1798c1aa598a03e0d4d2440d15bdb2ae242b392e/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1798c1aa598a03e0d4d2440d15bdb2ae242b392e/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=1798c1aa598a03e0d4d2440d15bdb2ae242b392e", "patch": "@@ -34,6 +34,7 @@ use rustc::ty::subst::{Substs, VecPerParamSpace};\n use rustc::ty::{self, Ty, TyCtxt};\n use session::config::NoDebugInfo;\n use session::Session;\n+use session::config;\n use symbol_map::SymbolMap;\n use util::sha2::Sha256;\n use util::nodemap::{NodeMap, NodeSet, DefIdMap, FnvHashMap, FnvHashSet};\n@@ -322,6 +323,38 @@ impl<'a, 'tcx> Iterator for CrateContextMaybeIterator<'a, 'tcx> {\n     }\n }\n \n+pub fn get_reloc_model(sess: &Session) -> llvm::RelocMode {\n+    let reloc_model_arg = match sess.opts.cg.relocation_model {\n+        Some(ref s) => &s[..],\n+        None => &sess.target.target.options.relocation_model[..],\n+    };\n+\n+    match reloc_model_arg {\n+        \"pic\" => llvm::RelocPIC,\n+        \"static\" => llvm::RelocStatic,\n+        \"default\" => llvm::RelocDefault,\n+        \"dynamic-no-pic\" => llvm::RelocDynamicNoPic,\n+        _ => {\n+            sess.err(&format!(\"{:?} is not a valid relocation mode\",\n+                             sess.opts\n+                                 .cg\n+                                 .relocation_model));\n+            sess.abort_if_errors();\n+            bug!();\n+        }\n+    }\n+}\n+\n+fn is_any_library(sess: &Session) -> bool {\n+    sess.crate_types.borrow().iter().any(|ty| {\n+        *ty != config::CrateTypeExecutable\n+    })\n+}\n+\n+pub fn is_pie_binary(sess: &Session) -> bool {\n+    !is_any_library(sess) && get_reloc_model(sess) == llvm::RelocPIC\n+}\n+\n unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextRef, ModuleRef) {\n     let llcx = llvm::LLVMContextCreate();\n     let mod_name = CString::new(mod_name).unwrap();\n@@ -352,7 +385,11 @@ unsafe fn create_context_and_module(sess: &Session, mod_name: &str) -> (ContextR\n     let llvm_target = sess.target.target.llvm_target.as_bytes();\n     let llvm_target = CString::new(llvm_target).unwrap();\n     llvm::LLVMRustSetNormalizedTarget(llmod, llvm_target.as_ptr());\n-    llvm::LLVMRustSetModulePIELevel(llmod);\n+\n+    if is_pie_binary(sess) {\n+        llvm::LLVMRustSetModulePIELevel(llmod);\n+    }\n+\n     (llcx, llmod)\n }\n "}]}