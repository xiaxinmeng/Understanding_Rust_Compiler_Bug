{"sha": "03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAzYmNlYmJjNjA5Y2MwMmFlN2YyNzkzN2NkN2FjMmRhNGQ2ZDZjODU=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-28T00:41:15Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2018-06-28T18:12:44Z"}, "message": "Also point to free named region on lifetime errors", "tree": {"sha": "f316cf4c46ed5fd336503d78f35d743dfdcd8d99", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f316cf4c46ed5fd336503d78f35d743dfdcd8d99"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "html_url": "https://github.com/rust-lang/rust/commit/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3005162f98c1b9a4d57f6a7b3d5c3fe55de01c21", "url": "https://api.github.com/repos/rust-lang/rust/commits/3005162f98c1b9a4d57f6a7b3d5c3fe55de01c21", "html_url": "https://github.com/rust-lang/rust/commit/3005162f98c1b9a4d57f6a7b3d5c3fe55de01c21"}], "stats": {"total": 97, "additions": 45, "deletions": 52}, "files": [{"sha": "51422f8f38b9c184516a2756d0b23b06586494de", "filename": "src/librustc/infer/error_reporting/mod.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fmod.rs?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -232,6 +232,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n                 }\n                 (format!(\"the lifetime {} as defined on\", br.name), sp)\n             }\n+            ty::ReFree(ty::FreeRegion {\n+                bound_region: ty::BoundRegion::BrNamed(_, ref name), ..\n+            }) => {\n+                let mut sp = cm.def_span(self.hir.span(node));\n+                if let Some(generics) = self.hir.get_generics(scope) {\n+                    for param in &generics.params {\n+                        if param.name.name().as_str() == name.as_str() {\n+                            sp = param.span;\n+                        }\n+                    }\n+                }\n+                (format!(\"the lifetime {} as defined on\", name), sp)\n+            }\n             ty::ReFree(ref fr) => match fr.bound_region {\n                 ty::BrAnon(idx) => (\n                     format!(\"the anonymous lifetime #{} defined on\", idx + 1),"}, {"sha": "5448049a8017d899fa87389b24cc20f3e875b765", "filename": "src/test/ui/borrowck/borrowck-escaping-closure-error-2.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-escaping-closure-error-2.nll.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR E0373\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:1...\n-  --> $DIR/borrowck-escaping-closure-error-2.rs:19:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 19:8...\n+  --> $DIR/borrowck-escaping-closure-error-2.rs:19:8\n    |\n LL | fn foo<'a>(x: &'a i32) -> Box<FnMut()+'a> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "04f90ea9ad3a2e2bb44a7e24683a0c5151adf639", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.rs?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -36,7 +36,6 @@ impl<'a, 't> Foo<'a, 't> for &'a isize {\n \n     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n         //~^ ERROR method not compatible with trait\n-        //~| ERROR method not compatible with trait\n         //\n         // Note: This is a terrible error message. It is caused\n         // because, in the trait, 'b is early bound, and in the impl,"}, {"sha": "b139369014e4426cf3573b31fc0c798662a89be4", "filename": "src/test/ui/borrowck/regions-bound-missing-bound-in-impl.stderr", "status": "modified", "additions": 5, "deletions": 24, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fregions-bound-missing-bound-in-impl.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -24,38 +24,19 @@ LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d\n    |\n    = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n               found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n-note: the lifetime 'c as defined on the method body at 37:5...\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n-   |\n-LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:24\n+note: the lifetime 'c as defined on the method body at 37:24...\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n-\n-error[E0308]: method not compatible with trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n-   |\n-LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetime mismatch\n-   |\n-   = note: expected type `fn(&'a isize, Inv<'c>, Inv<'c>, Inv<'d>)`\n-              found type `fn(&'a isize, Inv<'_>, Inv<'c>, Inv<'d>)`\n-note: the lifetime 'c as defined on the method body at 37:24...\n+note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:24\n   --> $DIR/regions-bound-missing-bound-in-impl.rs:37:24\n    |\n LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n    |                        ^^\n-note: ...does not necessarily outlive the lifetime 'c as defined on the method body at 37:5\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:37:5\n-   |\n-LL |     fn wrong_bound1<'b,'c,'d:'a+'c>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>) {\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n error[E0195]: lifetime parameters or bounds on method `wrong_bound2` do not match the trait declaration\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:52:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:51:5\n    |\n LL |     fn wrong_bound2<'b,'c,'d:'a+'b>(self, b: Inv<'b>, c: Inv<'c>, d: Inv<'d>);\n    |                    ---------------- lifetimes in impl do not match this method in trait\n@@ -64,15 +45,15 @@ LL |     fn wrong_bound2(self, b: Inv, c: Inv, d: Inv) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ lifetimes do not match method in trait\n \n error[E0276]: impl has stricter requirements than trait\n-  --> $DIR/regions-bound-missing-bound-in-impl.rs:59:5\n+  --> $DIR/regions-bound-missing-bound-in-impl.rs:58:5\n    |\n LL |     fn another_bound<'x: 'a>(self, x: Inv<'x>, y: Inv<'t>);\n    |     ------------------------------------------------------- definition of `another_bound` from trait\n ...\n LL |     fn another_bound<'x: 't>(self, x: Inv<'x>, y: Inv<'t>) {\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ impl has extra requirement `'x: 't`\n \n-error: aborting due to 6 previous errors\n+error: aborting due to 5 previous errors\n \n Some errors occurred: E0195, E0276, E0308.\n For more information about an error, try `rustc --explain E0195`."}, {"sha": "56b43bbd7d34ce4189d7a99d57c6dab687cf0f44", "filename": "src/test/ui/closure-expected-type/expect-region-supply-region.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosure-expected-type%2Fexpect-region-supply-region.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -38,11 +38,11 @@ LL | |\n LL | |         //~^ ERROR borrowed data cannot be stored outside of its closure\n LL | |     });\n    | |_____^\n-note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:1\n-  --> $DIR/expect-region-supply-region.rs:42:1\n+note: ...does not necessarily outlive the lifetime 'x as defined on the function body at 42:30\n+  --> $DIR/expect-region-supply-region.rs:42:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^\n \n error[E0308]: mismatched types\n   --> $DIR/expect-region-supply-region.rs:47:33\n@@ -52,11 +52,11 @@ LL |     closure_expecting_bound(|x: &'x u32| {\n    |\n    = note: expected type `&u32`\n               found type `&'x u32`\n-note: the lifetime 'x as defined on the function body at 42:1...\n-  --> $DIR/expect-region-supply-region.rs:42:1\n+note: the lifetime 'x as defined on the function body at 42:30...\n+  --> $DIR/expect-region-supply-region.rs:42:30\n    |\n LL | fn expect_bound_supply_named<'x>() {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                              ^^\n note: ...does not necessarily outlive the anonymous lifetime #2 defined on the body at 47:29\n   --> $DIR/expect-region-supply-region.rs:47:29\n    |"}, {"sha": "3e54ebeb398d6dda554d04c2340cac6950edd2e6", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -4,11 +4,11 @@ error[E0495]: cannot infer an appropriate lifetime due to conflicting requiremen\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n    |\n-note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:1...\n-  --> $DIR/dyn-trait.rs:31:1\n+note: first, the lifetime cannot outlive the lifetime 'a as defined on the function body at 31:26...\n+  --> $DIR/dyn-trait.rs:31:26\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                          ^^\n    = note: ...so that the expression is assignable:\n            expected std::boxed::Box<dyn std::fmt::Debug>\n               found std::boxed::Box<(dyn std::fmt::Debug + 'a)>"}, {"sha": "f2c6155fd98f8e52c5dd8a19277d6c6906d8e779", "filename": "src/test/ui/in-band-lifetimes/mismatched_trait_impl.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fmismatched_trait_impl.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -11,11 +11,11 @@ LL | /     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infe\n LL | |         x\n LL | |     }\n    | |_____^\n-note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:5...\n-  --> $DIR/mismatched_trait_impl.rs:19:5\n+note: ...but the lifetime must also be valid for the lifetime 'a as defined on the method body at 19:32...\n+  --> $DIR/mismatched_trait_impl.rs:19:32\n    |\n LL |     fn foo(&self, x: &u32, y: &'a u32) -> &'a u32 { //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                                ^^\n    = note: ...so that the method type is compatible with trait:\n            expected fn(&i32, &'a u32, &u32) -> &'a u32\n               found fn(&i32, &u32, &u32) -> &u32"}, {"sha": "8eede34747827f313a0d19fae5db147a28465aaa", "filename": "src/test/ui/issue-4335.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fissue-4335.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-4335.nll.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -13,11 +13,11 @@ LL |     id(Box::new(|| *v))\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:1...\n-  --> $DIR/issue-4335.rs:15:1\n+note: borrowed value must be valid for the lifetime 'r as defined on the function body at 15:6...\n+  --> $DIR/issue-4335.rs:15:6\n    |\n LL | fn f<'r, T>(v: &'r T) -> Box<FnMut() -> T + 'r> {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |      ^^\n \n error: aborting due to 2 previous errors\n "}, {"sha": "ea7d81993844382cd06f14a66af91637b00f7451", "filename": "src/test/ui/nll/borrowed-universal-error-2.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error-2.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR `v` does not live long enough [E0597]\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:1...\n-  --> $DIR/borrowed-universal-error-2.rs:14:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 14:8...\n+  --> $DIR/borrowed-universal-error-2.rs:14:8\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "da287980e8c5f49356907b1ae831af77ca2dbfab", "filename": "src/test/ui/nll/borrowed-universal-error.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fborrowed-universal-error.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -7,11 +7,11 @@ LL |     //~^ ERROR borrowed value does not live long enough [E0597]\n LL | }\n    | - temporary value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:1...\n-  --> $DIR/borrowed-universal-error.rs:18:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 18:8...\n+  --> $DIR/borrowed-universal-error.rs:18:8\n    |\n LL | fn foo<'a>(x: &'a (u32,)) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |        ^^\n \n error: aborting due to previous error\n "}, {"sha": "065de6ea600b4eb46116b7989d67679c9f1d1f9c", "filename": "src/test/ui/nll/issue-31567.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-31567.stderr?ref=03bcebbc609cc02ae7f27937cd7ac2da4d6d6c85", "patch": "@@ -7,11 +7,11 @@ LL |     &s_inner.0\n LL | }\n    | - borrowed value only lives until here\n    |\n-note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:1...\n-  --> $DIR/issue-31567.rs:21:1\n+note: borrowed value must be valid for the lifetime 'a as defined on the function body at 21:17...\n+  --> $DIR/issue-31567.rs:21:17\n    |\n LL | fn get_dangling<'a>(v: VecWrapper<'a>) -> &'a u32 {\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   |                 ^^\n \n error: aborting due to previous error\n "}]}