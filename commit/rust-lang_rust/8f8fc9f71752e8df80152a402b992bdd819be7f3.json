{"sha": "8f8fc9f71752e8df80152a402b992bdd819be7f3", "node_id": "C_kwDOAAsO6NoAKDhmOGZjOWY3MTc1MmU4ZGY4MDE1MmE0MDJiOTkyYmRkODE5YmU3ZjM", "commit": {"author": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-29T01:27:32Z"}, "committer": {"name": "asquared31415", "email": "34665709+asquared31415@users.noreply.github.com", "date": "2022-04-29T01:27:32Z"}, "message": "use non-panicking snippet, use struct update syntax and add comment", "tree": {"sha": "d167ed8a5622b61e8b4de0c7d2035cef3702540d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d167ed8a5622b61e8b4de0c7d2035cef3702540d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8f8fc9f71752e8df80152a402b992bdd819be7f3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8f8fc9f71752e8df80152a402b992bdd819be7f3", "html_url": "https://github.com/rust-lang/rust/commit/8f8fc9f71752e8df80152a402b992bdd819be7f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8f8fc9f71752e8df80152a402b992bdd819be7f3/comments", "author": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "committer": {"login": "asquared31415", "id": 34665709, "node_id": "MDQ6VXNlcjM0NjY1NzA5", "avatar_url": "https://avatars.githubusercontent.com/u/34665709?v=4", "gravatar_id": "", "url": "https://api.github.com/users/asquared31415", "html_url": "https://github.com/asquared31415", "followers_url": "https://api.github.com/users/asquared31415/followers", "following_url": "https://api.github.com/users/asquared31415/following{/other_user}", "gists_url": "https://api.github.com/users/asquared31415/gists{/gist_id}", "starred_url": "https://api.github.com/users/asquared31415/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/asquared31415/subscriptions", "organizations_url": "https://api.github.com/users/asquared31415/orgs", "repos_url": "https://api.github.com/users/asquared31415/repos", "events_url": "https://api.github.com/users/asquared31415/events{/privacy}", "received_events_url": "https://api.github.com/users/asquared31415/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cf99f504fde3cab40e4b961281e53bbe18858829", "url": "https://api.github.com/repos/rust-lang/rust/commits/cf99f504fde3cab40e4b961281e53bbe18858829", "html_url": "https://github.com/rust-lang/rust/commit/cf99f504fde3cab40e4b961281e53bbe18858829"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "2238668abca71d464e9f8f0be73600d1b95140a2", "filename": "clippy_lints/src/casts/cast_slice_different_sizes.rs", "status": "modified", "additions": 8, "deletions": 10, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8f8fc9f71752e8df80152a402b992bdd819be7f3/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8f8fc9f71752e8df80152a402b992bdd819be7f3/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcasts%2Fcast_slice_different_sizes.rs?ref=8f8fc9f71752e8df80152a402b992bdd819be7f3", "patch": "@@ -1,4 +1,4 @@\n-use clippy_utils::{diagnostics::span_lint_and_then, meets_msrv, msrvs, source::snippet_opt};\n+use clippy_utils::{diagnostics::span_lint_and_then, meets_msrv, msrvs, source};\n use if_chain::if_chain;\n use rustc_ast::Mutability;\n use rustc_hir::{Expr, ExprKind, Node};\n@@ -39,7 +39,7 @@ pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>, msrv: &Opti\n                         start_ty.ty, from_size, end_ty.ty, to_size,\n                     ),\n                     |diag| {\n-                        let ptr_snippet = snippet_opt(cx, left_cast.span).unwrap();\n+                        let ptr_snippet = source::snippet(cx, left_cast.span, \"..\");\n \n                         let (mutbl_fn_str, mutbl_ptr_str) = match end_ty.mutbl {\n                             Mutability::Mut => (\"_mut\", \"mut\"),\n@@ -119,16 +119,14 @@ fn expr_cast_chain_tys<'tcx>(cx: &LateContext<'tcx>, expr: &Expr<'tcx>) -> Optio\n     if let ExprKind::Cast(cast_expr, _cast_to_hir_ty) = expr.peel_blocks().kind {\n         let cast_to = cx.typeck_results().expr_ty(expr);\n         let to_slice_ty = get_raw_slice_ty_mut(cast_to)?;\n-        if let Some(CastChainInfo {\n-            left_cast,\n-            start_ty,\n-            end_ty: _,\n-        }) = expr_cast_chain_tys(cx, cast_expr)\n-        {\n+\n+        // If the expression that makes up the source of this cast is itself a cast, recursively\n+        // call `expr_cast_chain_tys` and update the end type with the final tartet type.\n+        // Otherwise, this cast is not immediately nested, just construct the info for this cast\n+        if let Some(prev_info) = expr_cast_chain_tys(cx, cast_expr) {\n             Some(CastChainInfo {\n-                left_cast,\n-                start_ty,\n                 end_ty: to_slice_ty,\n+                ..prev_info\n             })\n         } else {\n             let cast_from = cx.typeck_results().expr_ty(cast_expr);"}]}