{"sha": "e7b0b71197bb246c3213914919bdb959f39a8f74", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU3YjBiNzExOTdiYjI0NmMzMjEzOTE0OTE5YmRiOTU5ZjM5YThmNzQ=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-16T00:15:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2013-06-16T16:47:36Z"}, "message": "Remove moves from *T and implement in another way", "tree": {"sha": "eec16ae22197e1b165db106b7b4d6fbb4757cdfd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/eec16ae22197e1b165db106b7b4d6fbb4757cdfd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e7b0b71197bb246c3213914919bdb959f39a8f74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e7b0b71197bb246c3213914919bdb959f39a8f74", "html_url": "https://github.com/rust-lang/rust/commit/e7b0b71197bb246c3213914919bdb959f39a8f74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e7b0b71197bb246c3213914919bdb959f39a8f74/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eb48c296817be7529a1757ac8d4798112717eaa9", "url": "https://api.github.com/repos/rust-lang/rust/commits/eb48c296817be7529a1757ac8d4798112717eaa9", "html_url": "https://github.com/rust-lang/rust/commit/eb48c296817be7529a1757ac8d4798112717eaa9"}], "stats": {"total": 42, "additions": 12, "deletions": 30}, "files": [{"sha": "fd48e7d5958d4a1b30719619656c46fa93d3746a", "filename": "src/libextra/c_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibextra%2Fc_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibextra%2Fc_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fc_vec.rs?ref=e7b0b71197bb246c3213914919bdb959f39a8f74", "patch": "@@ -122,7 +122,7 @@ pub unsafe fn c_vec_with_dtor<T>(base: *mut T, len: uint, dtor: @fn())\n  */\n pub fn get<T:Copy>(t: CVec<T>, ofs: uint) -> T {\n     assert!(ofs < len(t));\n-    return unsafe { *ptr::mut_offset(t.base, ofs) };\n+    return unsafe { copy *ptr::mut_offset(t.base, ofs) };\n }\n \n /**"}, {"sha": "3448401e0b1804df042c0bbb887f5364733b087d", "filename": "src/libstd/pipes.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibstd%2Fpipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibstd%2Fpipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpipes.rs?ref=e7b0b71197bb246c3213914919bdb959f39a8f74", "patch": "@@ -85,7 +85,8 @@ bounded and unbounded protocols allows for less code duplication.\n #[allow(missing_doc)];\n \n use container::Container;\n-use cast::{forget, transmute, transmute_copy};\n+use cast::{forget, transmute, transmute_copy, transmute_mut};\n+use cast;\n use either::{Either, Left, Right};\n use iterator::IteratorUtil;\n use kinds::Owned;\n@@ -102,10 +103,6 @@ use util::replace;\n \n static SPIN_COUNT: uint = 0;\n \n-macro_rules! move_it (\n-    { $x:expr } => ( unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } )\n-)\n-\n #[deriving(Eq)]\n enum State {\n     Empty,\n@@ -316,9 +313,11 @@ impl<T> Drop for BufferResource<T> {\n     fn finalize(&self) {\n         unsafe {\n             // FIXME(#4330) Need self by value to get mutability.\n-            let this: &mut BufferResource<T> = transmute(self);\n+            let this: &mut BufferResource<T> = transmute_mut(self);\n+\n+            let null_buffer: ~Buffer<T> = transmute(ptr::null::<Buffer<T>>());\n+            let mut b = replace(&mut this.buffer, null_buffer);\n \n-            let mut b = move_it!(this.buffer);\n             //let p = ptr::to_unsafe_ptr(*b);\n             //error!(\"drop %?\", p);\n             let old_count = intrinsics::atomic_xsub_rel("}, {"sha": "fa1790d79cb7de5e1175eb7dff054dbaef73c4c0", "filename": "src/libstd/task/spawn.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibstd%2Ftask%2Fspawn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Flibstd%2Ftask%2Fspawn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftask%2Fspawn.rs?ref=e7b0b71197bb246c3213914919bdb959f39a8f74", "patch": "@@ -98,10 +98,6 @@ use iterator::{IteratorUtil};\n #[cfg(test)] use comm;\n #[cfg(test)] use task;\n \n-macro_rules! move_it (\n-    { $x:expr } => ( unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } )\n-)\n-\n type TaskSet = HashSet<*rust_task>;\n \n fn new_taskset() -> TaskSet {\n@@ -638,23 +634,16 @@ fn spawn_raw_oldsched(mut opts: TaskOpts, f: ~fn()) {\n                           notify_chan: Option<Chan<TaskResult>>,\n                           f: ~fn())\n                        -> ~fn() {\n-        let child_data = Cell::new((child_arc, ancestors));\n+        let child_data = Cell::new((notify_chan, child_arc, ancestors));\n         let result: ~fn() = || {\n             // Agh. Get move-mode items into the closure. FIXME (#2829)\n-            let mut (child_arc, ancestors) = child_data.take();\n+            let mut (notify_chan, child_arc, ancestors) = child_data.take();\n             // Child task runs this code.\n \n             // Even if the below code fails to kick the child off, we must\n             // send Something on the notify channel.\n \n-            //let mut notifier = None;//notify_chan.map(|c| AutoNotify(c));\n-            let notifier = match notify_chan {\n-                Some(ref notify_chan_value) => {\n-                    let moved_ncv = move_it!(*notify_chan_value);\n-                    Some(AutoNotify(moved_ncv))\n-                }\n-                _ => None\n-            };\n+            let notifier = notify_chan.map_consume(|c| AutoNotify(c));\n \n             if enlist_many(child, &child_arc, &mut ancestors) {\n                 let group = @@mut TCB(child,"}, {"sha": "7ac38966faa3eee58c2f2b728f1c2c91f9ed7712", "filename": "src/test/run-pass/pipe-bank-proto.rs", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e7b0b71197bb246c3213914919bdb959f39a8f74/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fpipe-bank-proto.rs?ref=e7b0b71197bb246c3213914919bdb959f39a8f74", "patch": "@@ -45,24 +45,18 @@ proto! bank (\n     }\n )\n \n-macro_rules! move_it (\n-    { $x:expr } => { unsafe { let y = *ptr::to_unsafe_ptr(&($x)); y } }\n-)\n-\n fn switch<T:Owned,U>(endp: pipes::RecvPacket<T>,\n                      f: &fn(v: Option<T>) -> U) -> U {\n     f(pipes::try_recv(endp))\n }\n \n-fn move_it<T>(x: T) -> T { x }\n-\n macro_rules! follow (\n     {\n         $($message:path$(($($x: ident),+))||* -> $next:ident $e:expr)+\n     } => (\n         |m| match m {\n           $(Some($message($($($x,)+)* next)) => {\n-            let $next = move_it!(next);\n+            let $next = next;\n             $e })+\n           _ => { fail!() }\n         }\n@@ -96,7 +90,7 @@ fn bank_client(bank: bank::client::login) {\n     let bank = client::login(bank, ~\"theincredibleholk\", ~\"1234\");\n     let bank = match try_recv(bank) {\n       Some(ok(connected)) => {\n-        move_it!(connected)\n+        connected\n       }\n       Some(invalid(_)) => { fail!(\"login unsuccessful\") }\n       None => { fail!(\"bank closed the connection\") }"}]}