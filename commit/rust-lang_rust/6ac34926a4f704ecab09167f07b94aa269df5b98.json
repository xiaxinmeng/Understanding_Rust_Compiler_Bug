{"sha": "6ac34926a4f704ecab09167f07b94aa269df5b98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhYzM0OTI2YTRmNzA0ZWNhYjA5MTY3ZjA3Yjk0YWEyNjlkZjViOTg=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-07T08:11:31Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-04-08T07:03:12Z"}, "message": "std: User a smaller stdin buffer on windows\n\nApparently windows doesn't like reading from stdin with a large buffer size, and\nit also apparently is ok with a smaller buffer size. This changes the reader\nreturned by stdin() to return an 8k buffered reader for stdin rather than a 64k\nbuffered reader.\n\nApparently libuv has run into this before, taking a peek at their code, with a\nspecific comment in their console code saying that \"ReadConsole can't handle big\nbuffers\", which I presume is related to invoking ReadFile as if it were a file\ndescriptor.\n\nCloses #13304", "tree": {"sha": "030910a0ace61dd622d10f0c27363f16b2a4d783", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/030910a0ace61dd622d10f0c27363f16b2a4d783"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6ac34926a4f704ecab09167f07b94aa269df5b98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac34926a4f704ecab09167f07b94aa269df5b98", "html_url": "https://github.com/rust-lang/rust/commit/6ac34926a4f704ecab09167f07b94aa269df5b98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6ac34926a4f704ecab09167f07b94aa269df5b98/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00cbda2d0af81a054ba61bd237f98e033ba7a2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cbda2d0af81a054ba61bd237f98e033ba7a2fa", "html_url": "https://github.com/rust-lang/rust/commit/00cbda2d0af81a054ba61bd237f98e033ba7a2fa"}], "stats": {"total": 73, "additions": 72, "deletions": 1}, "files": [{"sha": "33306dba8defec7747f813489c9a68a4dbc86015", "filename": "src/libstd/io/stdio.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6ac34926a4f704ecab09167f07b94aa269df5b98/src%2Flibstd%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac34926a4f704ecab09167f07b94aa269df5b98/src%2Flibstd%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fstdio.rs?ref=6ac34926a4f704ecab09167f07b94aa269df5b98", "patch": "@@ -99,7 +99,15 @@ fn src<T>(fd: libc::c_int, readable: bool, f: |StdSource| -> T) -> T {\n ///\n /// See `stdout()` for more notes about this function.\n pub fn stdin() -> BufferedReader<StdReader> {\n-    BufferedReader::new(stdin_raw())\n+    // The default buffer capacity is 64k, but apparently windows doesn't like\n+    // 64k reads on stdin. See #13304 for details, but the idea is that on\n+    // windows we use a slighly smaller buffer that's been seen to be\n+    // acceptable.\n+    if cfg!(windows) {\n+        BufferedReader::with_capacity(8 * 1024, stdin_raw())\n+    } else {\n+        BufferedReader::new(stdin_raw())\n+    }\n }\n \n /// Creates a new non-blocking handle to the stdin of the current process."}, {"sha": "20bd8e51a48ca7ab42f28fae5f9a0fc413079230", "filename": "src/test/run-pass/issue-13304.rs", "status": "added", "additions": 63, "deletions": 0, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/6ac34926a4f704ecab09167f07b94aa269df5b98/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6ac34926a4f704ecab09167f07b94aa269df5b98/src%2Ftest%2Frun-pass%2Fissue-13304.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-13304.rs?ref=6ac34926a4f704ecab09167f07b94aa269df5b98", "patch": "@@ -0,0 +1,63 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// ignore-fast\n+\n+extern crate green;\n+extern crate rustuv;\n+extern crate native;\n+\n+use std::os;\n+use std::io;\n+use std::str;\n+\n+#[start]\n+fn start(argc: int, argv: **u8) -> int {\n+    green::start(argc, argv, rustuv::event_loop, main)\n+}\n+\n+fn main() {\n+    let args = os::args();\n+    if args.len() > 1 && args[1].as_slice() == \"child\" {\n+        if args[2].as_slice() == \"green\" {\n+            child();\n+        } else {\n+            let (tx, rx) = channel();\n+            native::task::spawn(proc() { tx.send(child()); });\n+            rx.recv();\n+        }\n+    } else {\n+        parent(~\"green\");\n+        parent(~\"native\");\n+        let (tx, rx) = channel();\n+        native::task::spawn(proc() {\n+            parent(~\"green\");\n+            parent(~\"native\");\n+            tx.send(());\n+        });\n+        rx.recv();\n+    }\n+}\n+\n+fn parent(flavor: ~str) {\n+    let args = os::args();\n+    let mut p = io::Process::new(args[0].as_slice(), [~\"child\", flavor]).unwrap();\n+    p.stdin.get_mut_ref().write_str(\"test1\\ntest2\\ntest3\").unwrap();\n+    let out = p.wait_with_output();\n+    assert!(out.status.success());\n+    let s = str::from_utf8(out.output.as_slice()).unwrap();\n+    assert_eq!(s, \"test1\\n\\ntest2\\n\\ntest3\\n\");\n+}\n+\n+fn child() {\n+    for line in io::stdin().lines() {\n+        println!(\"{}\", line.unwrap());\n+    }\n+}"}]}