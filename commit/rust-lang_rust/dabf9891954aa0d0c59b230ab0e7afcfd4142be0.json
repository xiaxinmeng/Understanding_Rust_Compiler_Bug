{"sha": "dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRhYmY5ODkxOTU0YWEwZDBjNTliMjMwYWIwZTdhZmNmZDQxNDJiZTA=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-07-28T10:13:22Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-08-10T21:49:06Z"}, "message": "neg-cmp-op-on-partial-ord: make lint adhere to lint message convention", "tree": {"sha": "d90c6b0a7f22c4250492fe3bb7305c96f80ffdec", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d90c6b0a7f22c4250492fe3bb7305c96f80ffdec"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "html_url": "https://github.com/rust-lang/rust/commit/dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dabf9891954aa0d0c59b230ab0e7afcfd4142be0/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "178da9b2ef9e8c94ab0fbe7812e11445664f67b0", "url": "https://api.github.com/repos/rust-lang/rust/commits/178da9b2ef9e8c94ab0fbe7812e11445664f67b0", "html_url": "https://github.com/rust-lang/rust/commit/178da9b2ef9e8c94ab0fbe7812e11445664f67b0"}], "stats": {"total": 10, "additions": 5, "deletions": 5}, "files": [{"sha": "0f5d5ce3495bd763fe91b3c1e6b76502aef2bbb7", "filename": "clippy_lints/src/neg_cmp_op_on_partial_ord.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dabf9891954aa0d0c59b230ab0e7afcfd4142be0/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dabf9891954aa0d0c59b230ab0e7afcfd4142be0/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_cmp_op_on_partial_ord.rs?ref=dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "patch": "@@ -79,7 +79,7 @@ impl<'tcx> LateLintPass<'tcx> for NoNegCompOpForPartialOrd {\n                         cx,\n                         NEG_CMP_OP_ON_PARTIAL_ORD,\n                         expr.span,\n-                        \"The use of negated comparison operators on partially ordered \\\n+                        \"the use of negated comparison operators on partially ordered \\\n                         types produces code that is hard to read and refactor. Please \\\n                         consider using the `partial_cmp` method instead, to make it \\\n                         clear that the two values could be incomparable.\""}, {"sha": "193d9f9bcea343de561c9cbf7442538620eb8a85", "filename": "tests/ui/neg_cmp_op_on_partial_ord.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/dabf9891954aa0d0c59b230ab0e7afcfd4142be0/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/dabf9891954aa0d0c59b230ab0e7afcfd4142be0/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fneg_cmp_op_on_partial_ord.stderr?ref=dabf9891954aa0d0c59b230ab0e7afcfd4142be0", "patch": "@@ -1,24 +1,24 @@\n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:16:21\n    |\n LL |     let _not_less = !(a_value < another_value);\n    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^\n    |\n    = note: `-D clippy::neg-cmp-op-on-partial-ord` implied by `-D warnings`\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:19:30\n    |\n LL |     let _not_less_or_equal = !(a_value <= another_value);\n    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:22:24\n    |\n LL |     let _not_greater = !(a_value > another_value);\n    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^\n \n-error: The use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n+error: the use of negated comparison operators on partially ordered types produces code that is hard to read and refactor. Please consider using the `partial_cmp` method instead, to make it clear that the two values could be incomparable.\n   --> $DIR/neg_cmp_op_on_partial_ord.rs:25:33\n    |\n LL |     let _not_greater_or_equal = !(a_value >= another_value);"}]}