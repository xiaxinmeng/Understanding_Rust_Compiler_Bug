{"sha": "02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAyZjRlZWI3Y2I3OGYxY2Y3YmNmZTE4ZGIzYjcwMGIwMjU3NmNhNTU=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-01-27T17:49:05Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-03-11T08:10:49Z"}, "message": "Address review comments around `type_ascribed_value`", "tree": {"sha": "e1f165134da86f7e1148e4f25227f0e33449cbdb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e1f165134da86f7e1148e4f25227f0e33449cbdb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "html_url": "https://github.com/rust-lang/rust/commit/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "02dbb35b2b6ed869f14a8aecaf9dad5c72d5cb0b", "url": "https://api.github.com/repos/rust-lang/rust/commits/02dbb35b2b6ed869f14a8aecaf9dad5c72d5cb0b", "html_url": "https://github.com/rust-lang/rust/commit/02dbb35b2b6ed869f14a8aecaf9dad5c72d5cb0b"}], "stats": {"total": 81, "additions": 41, "deletions": 40}, "files": [{"sha": "6e960f66c7c99003033639806a044660f7d3e04e", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 41, "deletions": 40, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=02f4eeb7cb78f1cf7bcfe18db3b700b02576ca55", "patch": "@@ -210,6 +210,23 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n+    /// Prints `{...}` around what `f` and optionally `t` print\n+    fn type_ascribed_value(\n+        mut self,\n+        f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        print_ty: bool,\n+    ) -> Result<Self::Const, Self::Error> {\n+        self.write_str(\"{\")?;\n+        self = f(self)?;\n+        if print_ty {\n+            self.write_str(\": \")?;\n+            self = t(self)?;\n+        }\n+        self.write_str(\"}\")?;\n+        Ok(self)\n+    }\n+\n     /// Prints `<...>` around what `f` prints.\n     fn generic_delimiters(\n         self,\n@@ -457,22 +474,6 @@ pub trait PrettyPrinter<'tcx>:\n         })\n     }\n \n-    fn print_type_ascribed(\n-        mut self,\n-        f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        ty: Ty<'tcx>,\n-        print_ty: bool,\n-    ) -> Result<Self::Const, Self::Error> {\n-        self.write_str(\"{\")?;\n-        self = f(self)?;\n-        if print_ty {\n-            self.write_str(\": \")?;\n-            self = self.print_type(ty)?;\n-        }\n-        self.write_str(\"}\")?;\n-        Ok(self)\n-    }\n-\n     fn pretty_print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n         define_scoped_cx!(self);\n \n@@ -1002,12 +1003,12 @@ pub trait PrettyPrinter<'tcx>:\n             (Scalar::Raw { size: 0, .. }, _) => p!(print(ty)),\n             // Nontrivial types with scalar bit representation\n             (Scalar::Raw { data, size }, _) => {\n-                self = self.print_type_ascribed(\n+                self = self.type_ascribed_value(\n                     |mut this| {\n                         write!(this, \"0x{:01$x}\", data, size as usize * 2)?;\n                         Ok(this)\n                     },\n-                    ty,\n+                    |this| this.print_type(ty),\n                     print_ty,\n                 )?\n             }\n@@ -1027,12 +1028,12 @@ pub trait PrettyPrinter<'tcx>:\n         ty: Ty<'tcx>,\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n-        self.print_type_ascribed(\n+        self.type_ascribed_value(\n             |mut this| {\n                 this.write_str(\"pointer\")?;\n                 Ok(this)\n             },\n-            ty,\n+            |this| this.print_type(ty),\n             print_ty,\n         )\n     }\n@@ -1425,6 +1426,24 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self.pretty_in_binder(value)\n     }\n \n+    fn type_ascribed_value(\n+        mut self,\n+        f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        t: impl FnOnce(Self) -> Result<Self, Self::Error>,\n+        print_ty: bool,\n+    ) -> Result<Self::Const, Self::Error> {\n+        self.write_str(\"{\")?;\n+        self = f(self)?;\n+        if print_ty {\n+            self.write_str(\": \")?;\n+            let was_in_value = std::mem::replace(&mut self.in_value, false);\n+            self = t(self)?;\n+            self.in_value = was_in_value;\n+        }\n+        self.write_str(\"}\")?;\n+        Ok(self)\n+    }\n+\n     fn generic_delimiters(\n         mut self,\n         f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n@@ -1488,7 +1507,7 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         ty: Ty<'tcx>,\n         print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n-        self.print_type_ascribed(\n+        self.type_ascribed_value(\n             |mut this| {\n                 define_scoped_cx!(this);\n                 if this.print_alloc_ids {\n@@ -1498,28 +1517,10 @@ impl<F: fmt::Write> PrettyPrinter<'tcx> for FmtPrinter<'_, 'tcx, F> {\n                 }\n                 Ok(this)\n             },\n-            ty,\n+            |this| this.print_type(ty),\n             print_ty,\n         )\n     }\n-\n-    fn print_type_ascribed(\n-        mut self,\n-        f: impl FnOnce(Self) -> Result<Self, Self::Error>,\n-        ty: Ty<'tcx>,\n-        print_ty: bool,\n-    ) -> Result<Self::Const, Self::Error> {\n-        self.write_str(\"{\")?;\n-        self = f(self)?;\n-        if print_ty {\n-            self.write_str(\": \")?;\n-            let was_in_value = std::mem::replace(&mut self.in_value, false);\n-            self = self.print_type(ty)?;\n-            self.in_value = was_in_value;\n-        }\n-        self.write_str(\"}\")?;\n-        Ok(self)\n-    }\n }\n \n // HACK(eddyb) limited to `FmtPrinter` because of `region_highlight_mode`."}]}