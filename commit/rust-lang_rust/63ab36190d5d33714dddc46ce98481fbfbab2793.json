{"sha": "63ab36190d5d33714dddc46ce98481fbfbab2793", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYzYWIzNjE5MGQ1ZDMzNzE0ZGRkYzQ2Y2U5ODQ4MWZiZmJhYjI3OTM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-03-19T23:15:22Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-03-19T23:15:22Z"}, "message": "Rollup merge of #49099 - glandium:master, r=sfackler\n\nUse associated consts for GenericRadix base and prefix\n\nThe trait being private, this does not imply an API change.", "tree": {"sha": "7f7887a75acfee7b00322aaba9fa0f1c89fcfb01", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7887a75acfee7b00322aaba9fa0f1c89fcfb01"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/63ab36190d5d33714dddc46ce98481fbfbab2793", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJasESKCRBK7hj4Ov3rIwAAdHIIAJy5RErd2+Os9UgLn94AoKY7\niizekUzB6NF6a8wG0fLKxNABqozsSUerN4BAqqDr3BQzDlZ8klpnZSXnLF1lKboa\neb9syswO9Em2zR660e9of9FCrixfFvO1n70zIBCC1ilH9fF2XB8LzJGLPWBZrjSq\nR96Xhn0QMaWesozm0oSFOEg35SppALxlfWMPPrH40nTfrWhOaeM1DrL/xs7dYwPV\nIeK5Du9R4TsTSD3CmlvIrphiB18f3qA/kpNEMoh5SVT/nMsqbj/5PTHdqKIl5uNs\nCwvDQX0F/haGBNyTkVoQzyt1Z6p+jRUflQ9jGrPkMO9UYOynH3xHAdL9tlkDDEw=\n=vTXe\n-----END PGP SIGNATURE-----\n", "payload": "tree 7f7887a75acfee7b00322aaba9fa0f1c89fcfb01\nparent 23e2e3a431885fdfaf1e82b70541647ffa282ce3\nparent b910d6b93cdbe075b157621432d271e6afcaa20f\nauthor kennytm <kennytm@gmail.com> 1521501322 +0800\ncommitter GitHub <noreply@github.com> 1521501322 +0800\n\nRollup merge of #49099 - glandium:master, r=sfackler\n\nUse associated consts for GenericRadix base and prefix\n\nThe trait being private, this does not imply an API change.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/63ab36190d5d33714dddc46ce98481fbfbab2793", "html_url": "https://github.com/rust-lang/rust/commit/63ab36190d5d33714dddc46ce98481fbfbab2793", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/63ab36190d5d33714dddc46ce98481fbfbab2793/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "23e2e3a431885fdfaf1e82b70541647ffa282ce3", "url": "https://api.github.com/repos/rust-lang/rust/commits/23e2e3a431885fdfaf1e82b70541647ffa282ce3", "html_url": "https://github.com/rust-lang/rust/commit/23e2e3a431885fdfaf1e82b70541647ffa282ce3"}, {"sha": "b910d6b93cdbe075b157621432d271e6afcaa20f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b910d6b93cdbe075b157621432d271e6afcaa20f", "html_url": "https://github.com/rust-lang/rust/commit/b910d6b93cdbe075b157621432d271e6afcaa20f"}], "stats": {"total": 32, "additions": 15, "deletions": 17}, "files": [{"sha": "fcf06ea319d4382b05d88420bd96237557a7a709", "filename": "src/libcore/fmt/num.rs", "status": "modified", "additions": 15, "deletions": 17, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/63ab36190d5d33714dddc46ce98481fbfbab2793/src%2Flibcore%2Ffmt%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/63ab36190d5d33714dddc46ce98481fbfbab2793/src%2Flibcore%2Ffmt%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fnum.rs?ref=63ab36190d5d33714dddc46ce98481fbfbab2793", "patch": "@@ -49,15 +49,13 @@ doit! { i8 i16 i32 i64 i128 isize u8 u16 u32 u64 u128 usize }\n #[doc(hidden)]\n trait GenericRadix {\n     /// The number of digits.\n-    fn base(&self) -> u8;\n+    const BASE: u8;\n \n     /// A radix-specific prefix string.\n-    fn prefix(&self) -> &'static str {\n-        \"\"\n-    }\n+    const PREFIX: &'static str;\n \n     /// Converts an integer to corresponding radix digit.\n-    fn digit(&self, x: u8) -> u8;\n+    fn digit(x: u8) -> u8;\n \n     /// Format an integer using the radix using a formatter.\n     fn fmt_int<T: Int>(&self, mut x: T, f: &mut fmt::Formatter) -> fmt::Result {\n@@ -67,14 +65,14 @@ trait GenericRadix {\n         let is_nonnegative = x >= zero;\n         let mut buf = [0; 128];\n         let mut curr = buf.len();\n-        let base = T::from_u8(self.base());\n+        let base = T::from_u8(Self::BASE);\n         if is_nonnegative {\n             // Accumulate each digit of the number from the least significant\n             // to the most significant figure.\n             for byte in buf.iter_mut().rev() {\n-                let n = x % base;              // Get the current place value.\n-                x = x / base;                  // Deaccumulate the number.\n-                *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n+                let n = x % base;               // Get the current place value.\n+                x = x / base;                   // Deaccumulate the number.\n+                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -84,9 +82,9 @@ trait GenericRadix {\n         } else {\n             // Do the same as above, but accounting for two's complement.\n             for byte in buf.iter_mut().rev() {\n-                let n = zero - (x % base);     // Get the current place value.\n-                x = x / base;                  // Deaccumulate the number.\n-                *byte = self.digit(n.to_u8()); // Store the digit in the buffer.\n+                let n = zero - (x % base);      // Get the current place value.\n+                x = x / base;                   // Deaccumulate the number.\n+                *byte = Self::digit(n.to_u8()); // Store the digit in the buffer.\n                 curr -= 1;\n                 if x == zero {\n                     // No more digits left to accumulate.\n@@ -95,7 +93,7 @@ trait GenericRadix {\n             }\n         }\n         let buf = unsafe { str::from_utf8_unchecked(&buf[curr..]) };\n-        f.pad_integral(is_nonnegative, self.prefix(), buf)\n+        f.pad_integral(is_nonnegative, Self::PREFIX, buf)\n     }\n }\n \n@@ -122,12 +120,12 @@ struct UpperHex;\n macro_rules! radix {\n     ($T:ident, $base:expr, $prefix:expr, $($x:pat => $conv:expr),+) => {\n         impl GenericRadix for $T {\n-            fn base(&self) -> u8 { $base }\n-            fn prefix(&self) -> &'static str { $prefix }\n-            fn digit(&self, x: u8) -> u8 {\n+            const BASE: u8 = $base;\n+            const PREFIX: &'static str = $prefix;\n+            fn digit(x: u8) -> u8 {\n                 match x {\n                     $($x => $conv,)+\n-                    x => panic!(\"number not in the range 0..{}: {}\", self.base() - 1, x),\n+                    x => panic!(\"number not in the range 0..{}: {}\", Self::BASE - 1, x),\n                 }\n             }\n         }"}]}