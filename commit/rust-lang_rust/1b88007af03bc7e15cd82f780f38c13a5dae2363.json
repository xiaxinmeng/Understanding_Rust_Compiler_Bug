{"sha": "1b88007af03bc7e15cd82f780f38c13a5dae2363", "node_id": "C_kwDOAAsO6NoAKDFiODgwMDdhZjAzYmM3ZTE1Y2Q4MmY3ODBmMzhjMTNhNWRhZTIzNjM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T07:13:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-01-06T07:13:22Z"}, "message": "rustc_metadata: Split `fn get_implementations_for_trait` into two functions", "tree": {"sha": "640eec97e3e0e7ba69189272adc72fbba433265d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/640eec97e3e0e7ba69189272adc72fbba433265d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1b88007af03bc7e15cd82f780f38c13a5dae2363", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1b88007af03bc7e15cd82f780f38c13a5dae2363", "html_url": "https://github.com/rust-lang/rust/commit/1b88007af03bc7e15cd82f780f38c13a5dae2363", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1b88007af03bc7e15cd82f780f38c13a5dae2363/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e8855bdc9b419e0ab48d886c10128f93a9bf98d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e8855bdc9b419e0ab48d886c10128f93a9bf98d", "html_url": "https://github.com/rust-lang/rust/commit/4e8855bdc9b419e0ab48d886c10128f93a9bf98d"}], "stats": {"total": 53, "additions": 24, "deletions": 29}, "files": [{"sha": "bb9a58a0b62aa48dfe897ef9f2dba7dc5f2c7825", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1b88007af03bc7e15cd82f780f38c13a5dae2363/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b88007af03bc7e15cd82f780f38c13a5dae2363/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=1b88007af03bc7e15cd82f780f38c13a5dae2363", "patch": "@@ -1365,39 +1365,39 @@ impl<'a, 'tcx> CrateMetadataRef<'a> {\n         self.root.traits.decode(self).map(|index| self.local_def_id(index))\n     }\n \n-    fn get_implementations_for_trait(\n+    fn get_trait_impls(&'a self) -> impl Iterator<Item = (DefId, Option<SimplifiedType>)> + 'a {\n+        self.trait_impls.values().flat_map(move |impls| {\n+            impls\n+                .decode(self)\n+                .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty))\n+        })\n+    }\n+\n+    fn get_implementations_of_trait(\n         &self,\n         tcx: TyCtxt<'tcx>,\n-        filter: Option<DefId>,\n+        trait_def_id: DefId,\n     ) -> &'tcx [(DefId, Option<SimplifiedType>)] {\n         if self.root.is_proc_macro_crate() {\n             // proc-macro crates export no trait impls.\n             return &[];\n         }\n \n-        if let Some(def_id) = filter {\n-            // Do a reverse lookup beforehand to avoid touching the crate_num\n-            // hash map in the loop below.\n-            let filter = match self.reverse_translate_def_id(def_id) {\n-                Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n-                None => return &[],\n-            };\n+        // Do a reverse lookup beforehand to avoid touching the crate_num\n+        // hash map in the loop below.\n+        let key = match self.reverse_translate_def_id(trait_def_id) {\n+            Some(def_id) => (def_id.krate.as_u32(), def_id.index),\n+            None => return &[],\n+        };\n \n-            if let Some(impls) = self.trait_impls.get(&filter) {\n-                tcx.arena.alloc_from_iter(\n-                    impls.decode(self).map(|(idx, simplified_self_ty)| {\n-                        (self.local_def_id(idx), simplified_self_ty)\n-                    }),\n-                )\n-            } else {\n-                &[]\n-            }\n-        } else {\n-            tcx.arena.alloc_from_iter(self.trait_impls.values().flat_map(|impls| {\n+        if let Some(impls) = self.trait_impls.get(&key) {\n+            tcx.arena.alloc_from_iter(\n                 impls\n                     .decode(self)\n-                    .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty))\n-            }))\n+                    .map(|(idx, simplified_self_ty)| (self.local_def_id(idx), simplified_self_ty)),\n+            )\n+        } else {\n+            &[]\n         }\n     }\n "}, {"sha": "aac0aa61ea65eccaf291b6c67c86160e9ca6b09b", "filename": "compiler/rustc_metadata/src/rmeta/decoder/cstore_impl.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1b88007af03bc7e15cd82f780f38c13a5dae2363/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1b88007af03bc7e15cd82f780f38c13a5dae2363/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder%2Fcstore_impl.rs?ref=1b88007af03bc7e15cd82f780f38c13a5dae2363", "patch": "@@ -192,14 +192,9 @@ provide! { <'tcx> tcx, def_id, other, cdata,\n     extra_filename => { cdata.root.extra_filename.clone() }\n \n     traits_in_crate => { tcx.arena.alloc_from_iter(cdata.get_traits()) }\n+    all_trait_implementations => { tcx.arena.alloc_from_iter(cdata.get_trait_impls()) }\n \n-    implementations_of_trait => {\n-        cdata.get_implementations_for_trait(tcx, Some(other))\n-    }\n-\n-    all_trait_implementations => {\n-        cdata.get_implementations_for_trait(tcx, None)\n-    }\n+    implementations_of_trait => { cdata.get_implementations_of_trait(tcx, other) }\n \n     visibility => { cdata.get_visibility(def_id.index) }\n     dep_kind => {"}]}