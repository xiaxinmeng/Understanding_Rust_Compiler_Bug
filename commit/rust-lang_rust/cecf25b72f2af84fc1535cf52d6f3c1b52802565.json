{"sha": "cecf25b72f2af84fc1535cf52d6f3c1b52802565", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNlY2YyNWI3MmYyYWY4NGZjMTUzNWNmNTJkNmYzYzFiNTI4MDI1NjU=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-02-18T14:37:34Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-02-18T14:37:34Z"}, "message": "Merge #3220\n\n3220: Fix clippy warnings, update Cargo.toml versions r=matklad a=SomeoneToIgnore\n\nIn the `cargo xtask lint` ouptut, there were two interesting Clippy warnings that might be interesting to investigate further:\r\n\r\n* warning: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\r\n\r\n* warning: large size difference between variants\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>", "tree": {"sha": "37c8dde0a459caacae6629da08d86be270469ef5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/37c8dde0a459caacae6629da08d86be270469ef5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cecf25b72f2af84fc1535cf52d6f3c1b52802565", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeS/auCRBK7hj4Ov3rIwAAdHIIAJZKcinxcvw1K7/avHs7qCIA\nGGZFH0AR0DEwZP65xuvqBEfUHP7Pu8wt5Y4By307Rb8nhvupoFsNyfFpRrBGuxV1\nkmCgrmnvpv49c0xDQA7Kyv1FpfJjDXD9GQ0JDUPi1+6IkyUcqtkJq2L3xZB04NFv\nSfCZLBip6XRMIK75QxnSXohWK5qNpMbPHy93Rq1nQ/CMIDqNvrfNcqGKYLV5xbCF\n9J7A8hVgJN8ueQWTwyRlEOhDgXuG7X+R7IZx4ouafuSZuokEcP+rqcmtNI2az9ct\nUsmSXwELFENKQHqEYiVd794J/9tNe4Ht7KKTCaIaLE8eFW3pbHMOijcGf1k3zbE=\n=kIxF\n-----END PGP SIGNATURE-----\n", "payload": "tree 37c8dde0a459caacae6629da08d86be270469ef5\nparent eab80cd961919b9321e1d34343ae3f3adb0502e5\nparent f6816c253b96e8436f1156d6bd6b0942ee9fb4d3\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1582036654 +0000\ncommitter GitHub <noreply@github.com> 1582036654 +0000\n\nMerge #3220\n\n3220: Fix clippy warnings, update Cargo.toml versions r=matklad a=SomeoneToIgnore\n\nIn the `cargo xtask lint` ouptut, there were two interesting Clippy warnings that might be interesting to investigate further:\r\n\r\n* warning: this argument (4 byte) is passed by reference, but would be more efficient if passed by value (limit: 8 byte)\r\n\r\n* warning: large size difference between variants\n\nCo-authored-by: Kirill Bulatov <mail4score@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cecf25b72f2af84fc1535cf52d6f3c1b52802565", "html_url": "https://github.com/rust-lang/rust/commit/cecf25b72f2af84fc1535cf52d6f3c1b52802565", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cecf25b72f2af84fc1535cf52d6f3c1b52802565/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eab80cd961919b9321e1d34343ae3f3adb0502e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/eab80cd961919b9321e1d34343ae3f3adb0502e5", "html_url": "https://github.com/rust-lang/rust/commit/eab80cd961919b9321e1d34343ae3f3adb0502e5"}, {"sha": "f6816c253b96e8436f1156d6bd6b0942ee9fb4d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6816c253b96e8436f1156d6bd6b0942ee9fb4d3", "html_url": "https://github.com/rust-lang/rust/commit/f6816c253b96e8436f1156d6bd6b0942ee9fb4d3"}], "stats": {"total": 772, "additions": 381, "deletions": 391}, "files": [{"sha": "c10d72aa4c5610f1fcaf199c29788b7883b7f4af", "filename": "Cargo.lock", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -1043,6 +1043,7 @@ version = \"0.1.0\"\n dependencies = [\n  \"either\",\n  \"format-buf\",\n+ \"fst\",\n  \"indexmap\",\n  \"insta\",\n  \"itertools\",\n@@ -1059,8 +1060,11 @@ dependencies = [\n  \"ra_syntax\",\n  \"ra_text_edit\",\n  \"rand\",\n+ \"rayon\",\n  \"rustc-hash\",\n+ \"superslice\",\n  \"test_utils\",\n+ \"unicase\",\n ]\n \n [[package]]\n@@ -1087,6 +1091,7 @@ dependencies = [\n  \"rustc-hash\",\n  \"superslice\",\n  \"test_utils\",\n+ \"unicase\",\n ]\n \n [[package]]\n@@ -1597,6 +1602,15 @@ dependencies = [\n  \"num_cpus\",\n ]\n \n+[[package]]\n+name = \"unicase\"\n+version = \"2.6.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"50f37be617794602aabbeee0be4f259dc1778fabe05e2d67ee8f79326d5cb4f6\"\n+dependencies = [\n+ \"version_check\",\n+]\n+\n [[package]]\n name = \"unicode-bidi\"\n version = \"0.3.4\"\n@@ -1639,6 +1653,12 @@ dependencies = [\n  \"serde\",\n ]\n \n+[[package]]\n+name = \"version_check\"\n+version = \"0.9.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"078775d0255232fb988e6fccf26ddc9d1ac274299aaedcedce21c6f72cc533ce\"\n+\n [[package]]\n name = \"walkdir\"\n version = \"2.3.1\""}, {"sha": "12a933645fd7e7d8483fa70cd62cd7fa2a9b5b2e", "filename": "crates/ra_assists/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -10,8 +10,8 @@ doctest = false\n [dependencies]\n format-buf = \"1.0.0\"\n join_to_string = \"0.1.3\"\n-rustc-hash = \"1.0\"\n-either = \"1.5\"\n+rustc-hash = \"1.1.0\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }"}, {"sha": "74aa4b00161b98620771a853e77b2f033e1a42be", "filename": "crates/ra_assists/src/handlers/add_custom_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_custom_impl.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -43,9 +43,9 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n         .clone();\n \n     let trait_token =\n-        ctx.token_at_offset().filter(|t| t.kind() == IDENT && *t.text() != attr_name).next()?;\n+        ctx.token_at_offset().find(|t| t.kind() == IDENT && *t.text() != attr_name)?;\n \n-    let annotated = attr.syntax().siblings(Direction::Next).find_map(|s| ast::Name::cast(s))?;\n+    let annotated = attr.syntax().siblings(Direction::Next).find_map(ast::Name::cast)?;\n     let annotated_name = annotated.syntax().text().to_string();\n     let start_offset = annotated.syntax().parent()?.text_range().end();\n \n@@ -62,7 +62,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n             .filter_map(|t| t.into_token().map(|t| t.text().clone()))\n             .filter(|t| t != trait_token.text())\n             .collect::<Vec<SmolStr>>();\n-        let has_more_derives = new_attr_input.len() > 0;\n+        let has_more_derives = !new_attr_input.is_empty();\n         let new_attr_input =\n             join(new_attr_input.iter()).separator(\", \").surround_with(\"(\", \")\").to_string();\n         let new_attr_input_len = new_attr_input.len();\n@@ -86,7 +86,7 @@ pub(crate) fn add_custom_impl(ctx: AssistCtx) -> Option<Assist> {\n                 .next_sibling_or_token()\n                 .filter(|t| t.kind() == WHITESPACE)\n                 .map(|t| t.text_range())\n-                .unwrap_or(TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n+                .unwrap_or_else(|| TextRange::from_to(TextUnit::from(0), TextUnit::from(0)));\n             edit.delete(line_break_range);\n \n             attr_range.len() + line_break_range.len()"}, {"sha": "dd070e8ec0385dac2517c7aedee17f5c04678584", "filename": "crates/ra_assists/src/handlers/add_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_new.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -53,7 +53,7 @@ pub(crate) fn add_new(ctx: AssistCtx) -> Option<Assist> {\n         }\n \n         let vis = strukt.visibility().map(|v| format!(\"{} \", v.syntax()));\n-        let vis = vis.as_ref().map(String::as_str).unwrap_or(\"\");\n+        let vis = vis.as_deref().unwrap_or(\"\");\n         write!(&mut buf, \"    {}fn new(\", vis).unwrap();\n \n         join(field_list.fields().filter_map(|f| {"}, {"sha": "1cc4986389a2db1f94830ac743596c667b2804d9", "filename": "crates/ra_assists/src/handlers/move_guard.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_guard.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -44,7 +44,7 @@ pub(crate) fn move_guard_to_arm_body(ctx: AssistCtx) -> Option<Assist> {\n         edit.target(guard.syntax().text_range());\n         let offseting_amount = match space_before_guard.and_then(|it| it.into_token()) {\n             Some(tok) => {\n-                if let Some(_) = ast::Whitespace::cast(tok.clone()) {\n+                if ast::Whitespace::cast(tok.clone()).is_some() {\n                     let ele = tok.text_range();\n                     edit.delete(ele);\n                     ele.len()\n@@ -98,11 +98,11 @@ pub(crate) fn move_arm_cond_to_match_guard(ctx: AssistCtx) -> Option<Assist> {\n     let then_block = if_expr.then_branch()?;\n \n     // Not support if with else branch\n-    if let Some(_) = if_expr.else_branch() {\n+    if if_expr.else_branch().is_some() {\n         return None;\n     }\n     // Not support moving if let to arm guard\n-    if let Some(_) = cond.pat() {\n+    if cond.pat().is_some() {\n         return None;\n     }\n "}, {"sha": "0a0a88f3dcff2e773b2beeec4b71eb0bf8128110", "filename": "crates/ra_assists/src/handlers/replace_if_let_with_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Freplace_if_let_with_match.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -61,7 +61,7 @@ pub(crate) fn replace_if_let_with_match(ctx: AssistCtx) -> Option<Assist> {\n \n         edit.target(if_expr.syntax().text_range());\n         edit.set_cursor(if_expr.syntax().text_range().start());\n-        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr.into());\n+        edit.replace_ast::<ast::Expr>(if_expr.into(), match_expr);\n     })\n }\n "}, {"sha": "a0e7fe17e8ea095ebb1fc60e4b28b4699731a798", "filename": "crates/ra_assists/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_assists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -38,8 +38,8 @@ pub struct GroupLabel(pub String);\n impl AssistLabel {\n     pub(crate) fn new(label: String, id: AssistId) -> AssistLabel {\n         // FIXME: make fields private, so that this invariant can't be broken\n-        assert!(label.chars().nth(0).unwrap().is_uppercase());\n-        AssistLabel { label: label.into(), id }\n+        assert!(label.chars().next().unwrap().is_uppercase());\n+        AssistLabel { label, id }\n     }\n }\n "}, {"sha": "b09650d98d3aebbcfae9f9c182ce077ce57df35d", "filename": "crates/ra_cargo_watch/Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cargo_watch%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cargo_watch%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -5,14 +5,14 @@ version = \"0.1.0\"\n authors = [\"rust-analyzer developers\"]\n \n [dependencies]\n-crossbeam-channel = \"0.4\"\n-lsp-types = { version = \"0.70.0\", features = [\"proposed\"] }\n-log = \"0.4.3\"\n+crossbeam-channel = \"0.4.0\"\n+lsp-types = { version = \"0.70.1\", features = [\"proposed\"] }\n+log = \"0.4.8\"\n cargo_metadata = \"0.9.1\"\n jod-thread = \"0.1.0\"\n parking_lot = \"0.10.0\"\n-serde_json = \"1.0.45\"\n+serde_json = \"1.0.48\"\n \n [dev-dependencies]\n-insta = \"0.13.0\"\n-serde_json = \"1.0\"\n\\ No newline at end of file\n+insta = \"0.13.1\"\n+serde_json = \"1.0.48\""}, {"sha": "0246adfb5213dbc0ce6954e8ffe17df3f6ec8801", "filename": "crates/ra_cargo_watch/src/conv.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cargo_watch%2Fsrc%2Fconv.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -234,7 +234,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n         let child = map_rust_child_diagnostic(&child, workspace_root);\n         match child {\n             MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n-            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action.into()),\n+            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n             MappedRustChildDiagnostic::MessageLine(message_line) => {\n                 write!(&mut message, \"\\n{}\", message_line).unwrap();\n "}, {"sha": "9165076a58e9663996b4abbdc77202216f4397e6", "filename": "crates/ra_cfg/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cfg%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_cfg%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_cfg%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -8,7 +8,7 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-rustc-hash = \"1.0.1\"\n+rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }"}, {"sha": "878c22ba9879f46a695a83dbb4cc6c717b25f77c", "filename": "crates/ra_db/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -10,7 +10,7 @@ doctest = false\n [dependencies]\n salsa = \"0.14.1\"\n relative-path = \"1.0.0\"\n-rustc-hash = \"1.0\"\n+rustc-hash = \"1.1.0\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_cfg = { path = \"../ra_cfg\" }"}, {"sha": "78d121683bb74f455c3cc13360fa0bc27c6a5d9c", "filename": "crates/ra_db/src/input.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_db%2Fsrc%2Finput.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_db%2Fsrc%2Finput.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_db%2Fsrc%2Finput.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -249,7 +249,7 @@ impl FromStr for Edition {\n         let res = match s {\n             \"2015\" => Edition::Edition2015,\n             \"2018\" => Edition::Edition2018,\n-            _ => Err(ParseEditionError { invalid_input: s.to_string() })?,\n+            _ => return Err(ParseEditionError { invalid_input: s.to_string() }),\n         };\n         Ok(res)\n     }"}, {"sha": "ea9befeaf4a5c5244c4d35ee26c0e5c84fea4b51", "filename": "crates/ra_fmt/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_fmt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_fmt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_fmt%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,6 +9,6 @@ publish = false\n doctest = false\n \n [dependencies]\n-itertools = \"0.8.0\"\n+itertools = \"0.8.2\"\n \n ra_syntax = { path = \"../ra_syntax\" }"}, {"sha": "0555a0de7a132b4e27231ce747cfa843bbce751f", "filename": "crates/ra_hir/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -8,9 +8,9 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-log = \"0.4.5\"\n-rustc-hash = \"1.0\"\n-either = \"1.5\"\n+log = \"0.4.8\"\n+rustc-hash = \"1.1.0\"\n+either = \"1.5.3\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "1bdcda0694981928941603a8a4c63d56aedf8e0b", "filename": "crates/ra_hir/src/code_model.rs", "status": "modified", "additions": 20, "deletions": 26, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2Fsrc%2Fcode_model.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fcode_model.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -283,7 +283,7 @@ impl StructField {\n         };\n         let substs = Substs::type_params(db, generic_def_id);\n         let ty = db.field_types(var_id)[self.id].clone().subst(&substs);\n-        Type::new(db, self.parent.module(db).id.krate.into(), var_id, ty)\n+        Type::new(db, self.parent.module(db).id.krate, var_id, ty)\n     }\n \n     pub fn parent_def(&self, _db: &impl HirDatabase) -> VariantDef {\n@@ -315,11 +315,11 @@ impl Struct {\n     }\n \n     pub fn name(self, db: &impl DefDatabase) -> Name {\n-        db.struct_data(self.id.into()).name.clone()\n+        db.struct_data(self.id).name.clone()\n     }\n \n     pub fn fields(self, db: &impl HirDatabase) -> Vec<StructField> {\n-        db.struct_data(self.id.into())\n+        db.struct_data(self.id)\n             .variant_data\n             .fields()\n             .iter()\n@@ -332,7 +332,7 @@ impl Struct {\n     }\n \n     fn variant_data(self, db: &impl DefDatabase) -> Arc<VariantData> {\n-        db.struct_data(self.id.into()).variant_data.clone()\n+        db.struct_data(self.id).variant_data.clone()\n     }\n }\n \n@@ -988,20 +988,17 @@ impl Type {\n \n     pub fn fields(&self, db: &impl HirDatabase) -> Vec<(StructField, Type)> {\n         if let Ty::Apply(a_ty) = &self.ty.value {\n-            match a_ty.ctor {\n-                TypeCtor::Adt(AdtId::StructId(s)) => {\n-                    let var_def = s.into();\n-                    return db\n-                        .field_types(var_def)\n-                        .iter()\n-                        .map(|(local_id, ty)| {\n-                            let def = StructField { parent: var_def.into(), id: local_id };\n-                            let ty = ty.clone().subst(&a_ty.parameters);\n-                            (def, self.derived(ty))\n-                        })\n-                        .collect();\n-                }\n-                _ => {}\n+            if let TypeCtor::Adt(AdtId::StructId(s)) = a_ty.ctor {\n+                let var_def = s.into();\n+                return db\n+                    .field_types(var_def)\n+                    .iter()\n+                    .map(|(local_id, ty)| {\n+                        let def = StructField { parent: var_def.into(), id: local_id };\n+                        let ty = ty.clone().subst(&a_ty.parameters);\n+                        (def, self.derived(ty))\n+                    })\n+                    .collect();\n             }\n         };\n         Vec::new()\n@@ -1010,14 +1007,11 @@ impl Type {\n     pub fn tuple_fields(&self, _db: &impl HirDatabase) -> Vec<Type> {\n         let mut res = Vec::new();\n         if let Ty::Apply(a_ty) = &self.ty.value {\n-            match a_ty.ctor {\n-                TypeCtor::Tuple { .. } => {\n-                    for ty in a_ty.parameters.iter() {\n-                        let ty = ty.clone();\n-                        res.push(self.derived(ty));\n-                    }\n+            if let TypeCtor::Tuple { .. } = a_ty.ctor {\n+                for ty in a_ty.parameters.iter() {\n+                    let ty = ty.clone();\n+                    res.push(self.derived(ty));\n                 }\n-                _ => {}\n             }\n         };\n         res\n@@ -1049,7 +1043,7 @@ impl Type {\n         // FIXME check that?\n         let canonical = Canonical { value: self.ty.value.clone(), num_vars: 0 };\n         let environment = self.ty.environment.clone();\n-        let ty = InEnvironment { value: canonical, environment: environment.clone() };\n+        let ty = InEnvironment { value: canonical, environment };\n         autoderef(db, Some(self.krate), ty)\n             .map(|canonical| canonical.value)\n             .map(move |ty| self.derived(ty))"}, {"sha": "efa3f8a79cb2535e2201d41e07c2025bcd68a47a", "filename": "crates/ra_hir/src/source_analyzer.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir%2Fsrc%2Fsource_analyzer.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -361,9 +361,8 @@ impl SourceAnalyzer {\n         db: &impl HirDatabase,\n         macro_call: InFile<&ast::MacroCall>,\n     ) -> Option<Expansion> {\n-        let macro_call_id = macro_call.as_call_id(db, |path| {\n-            self.resolver.resolve_path_as_macro(db, &path).map(|it| it.into())\n-        })?;\n+        let macro_call_id =\n+            macro_call.as_call_id(db, |path| self.resolver.resolve_path_as_macro(db, &path))?;\n         Some(Expansion { macro_call_id })\n     }\n }"}, {"sha": "5053d06886d1e1891e93f1b2fcdb650aa02691fa", "filename": "crates/ra_hir_def/Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -8,11 +8,11 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-log = \"0.4.5\"\n-once_cell = \"1.0.1\"\n-rustc-hash = \"1.0\"\n-either = \"1.5\"\n-anymap = \"0.12\"\n+log = \"0.4.8\"\n+once_cell = \"1.3.1\"\n+rustc-hash = \"1.1.0\"\n+either = \"1.5.3\"\n+anymap = \"0.12.1\"\n drop_bomb = \"0.1.4\"\n itertools = \"0.8.2\"\n \n@@ -27,4 +27,4 @@ ra_cfg = { path = \"../ra_cfg\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n \n [dev-dependencies]\n-insta = \"0.13.0\"\n+insta = \"0.13.1\""}, {"sha": "b1626fa1160d086ad635d270fbee705455700fd6", "filename": "crates/ra_hir_def/src/body/lower.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fbody%2Flower.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -448,7 +448,7 @@ where\n             // FIXME expand to statements in statement position\n             ast::Expr::MacroCall(e) => {\n                 let macro_call = self.expander.to_source(AstPtr::new(&e));\n-                match self.expander.enter_expand(self.db, e.clone()) {\n+                match self.expander.enter_expand(self.db, e) {\n                     Some((mark, expansion)) => {\n                         self.source_map\n                             .expansions"}, {"sha": "e07a4f947b1ace25565662b3a5a21fda5801c062", "filename": "crates/ra_hir_def/src/generics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fgenerics.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -71,7 +71,7 @@ impl GenericParams {\n         db: &impl DefDatabase,\n         def: GenericDefId,\n     ) -> Arc<GenericParams> {\n-        let (params, _source_map) = GenericParams::new(db, def.into());\n+        let (params, _source_map) = GenericParams::new(db, def);\n         Arc::new(params)\n     }\n "}, {"sha": "6e958ca75c4640198260b820f8f1450aaf0b84e9", "filename": "crates/ra_hir_def/src/item_scope.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_scope.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -138,7 +138,7 @@ impl ItemScope {\n \n     pub(crate) fn push_res(&mut self, name: Name, def: PerNs) -> bool {\n         let mut changed = false;\n-        let existing = self.visible.entry(name.clone()).or_default();\n+        let existing = self.visible.entry(name).or_default();\n \n         if existing.types.is_none() && def.types.is_some() {\n             existing.types = def.types;\n@@ -157,7 +157,7 @@ impl ItemScope {\n     }\n \n     pub(crate) fn resolutions<'a>(&'a self) -> impl Iterator<Item = (Name, PerNs)> + 'a {\n-        self.visible.iter().map(|(name, res)| (name.clone(), res.clone()))\n+        self.visible.iter().map(|(name, res)| (name.clone(), *res))\n     }\n \n     pub(crate) fn collect_legacy_macros(&self) -> FxHashMap<Name, MacroDefId> {"}, {"sha": "564b5fec5760ee877a2bf77c7ea99f4e4e4744d0", "filename": "crates/ra_hir_def/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -460,7 +460,7 @@ impl AsMacroCall for AstIdWithPath<ast::MacroCall> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_call_id(db, MacroCallKind::FnLike(self.ast_id.clone())))\n+        Some(def.as_call_id(db, MacroCallKind::FnLike(self.ast_id)))\n     }\n }\n \n@@ -471,6 +471,6 @@ impl AsMacroCall for AstIdWithPath<ast::ModuleItem> {\n         resolver: impl Fn(path::ModPath) -> Option<MacroDefId>,\n     ) -> Option<MacroCallId> {\n         let def = resolver(self.path.clone())?;\n-        Some(def.as_call_id(db, MacroCallKind::Attr(self.ast_id.clone())))\n+        Some(def.as_call_id(db, MacroCallKind::Attr(self.ast_id)))\n     }\n }"}, {"sha": "c5137a0abcfdb90499b8b510bbf722d60198e564", "filename": "crates/ra_hir_def/src/nameres.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -156,7 +156,7 @@ impl ModuleOrigin {\n             ModuleOrigin::File { definition, .. } | ModuleOrigin::CrateRoot { definition } => {\n                 let file_id = *definition;\n                 let sf = db.parse(file_id).tree();\n-                return InFile::new(file_id.into(), ModuleSource::SourceFile(sf));\n+                InFile::new(file_id.into(), ModuleSource::SourceFile(sf))\n             }\n             ModuleOrigin::Inline { definition } => {\n                 InFile::new(definition.file_id, ModuleSource::Module(definition.to_node(db)))"}, {"sha": "0e8c9da763cfa7838a3493c2f13e1b621910d056", "filename": "crates/ra_hir_def/src/nameres/raw.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fraw.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -357,9 +357,7 @@ impl RawItemsCollector {\n             let visibility =\n                 RawVisibility::from_ast_with_hygiene(extern_crate.visibility(), &self.hygiene);\n             let alias = extern_crate.alias().map(|a| {\n-                a.name()\n-                    .map(|it| it.as_name())\n-                    .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+                a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n             });\n             let attrs = self.parse_attrs(&extern_crate);\n             // FIXME: cfg_attr"}, {"sha": "83f429c291139ec624ad3bf23c59de6eaa11fd41", "filename": "crates/ra_hir_def/src/nameres/tests/incremental.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Ftests%2Fincremental.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -116,7 +116,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.resolutions().collect::<Vec<_>>().len(), 1);\n+            assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n         assert!(format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }\n@@ -126,7 +126,7 @@ fn typing_inside_a_macro_should_not_invalidate_def_map() {\n         let events = db.log_executed(|| {\n             let crate_def_map = db.crate_def_map(krate);\n             let (_, module_data) = crate_def_map.modules.iter().last().unwrap();\n-            assert_eq!(module_data.scope.resolutions().collect::<Vec<_>>().len(), 1);\n+            assert_eq!(module_data.scope.resolutions().count(), 1);\n         });\n         assert!(!format!(\"{:?}\", events).contains(\"crate_def_map\"), \"{:#?}\", events)\n     }"}, {"sha": "b6d1125e20ebe1835bc624047bdfcc095c5433bc", "filename": "crates/ra_hir_def/src/path/lower/lower_use.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fpath%2Flower%2Flower_use.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -32,9 +32,7 @@ pub(crate) fn lower_use_tree(\n         }\n     } else {\n         let alias = tree.alias().map(|a| {\n-            a.name()\n-                .map(|it| it.as_name())\n-                .map_or(ImportAlias::Underscore, |a| ImportAlias::Alias(a))\n+            a.name().map(|it| it.as_name()).map_or(ImportAlias::Underscore, ImportAlias::Alias)\n         });\n         let is_glob = tree.has_star();\n         if let Some(ast_path) = tree.path() {"}, {"sha": "5365b80e2181cecb2b48a92290a09d8baba3b84e", "filename": "crates/ra_hir_def/src/resolver.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fresolver.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -474,7 +474,7 @@ impl Scope {\n                     f(name.clone(), ScopeDef::PerNs(PerNs::macros(macro_, Visibility::Public)));\n                 });\n                 m.crate_def_map.extern_prelude.iter().for_each(|(name, &def)| {\n-                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def.into(), Visibility::Public)));\n+                    f(name.clone(), ScopeDef::PerNs(PerNs::types(def, Visibility::Public)));\n                 });\n                 if let Some(prelude) = m.crate_def_map.prelude {\n                     let prelude_def_map = db.crate_def_map(prelude.krate);\n@@ -499,10 +499,10 @@ impl Scope {\n                 }\n             }\n             Scope::ImplBlockScope(i) => {\n-                f(name![Self], ScopeDef::ImplSelfType((*i).into()));\n+                f(name![Self], ScopeDef::ImplSelfType(*i));\n             }\n             Scope::AdtScope(i) => {\n-                f(name![Self], ScopeDef::AdtSelfType((*i).into()));\n+                f(name![Self], ScopeDef::AdtSelfType(*i));\n             }\n             Scope::ExprScope(scope) => {\n                 scope.expr_scopes.entries(scope.scope_id).iter().for_each(|e| {"}, {"sha": "d6e3c1f76d5c39fa13584f7398d70b85eea9738c", "filename": "crates/ra_hir_expand/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -8,8 +8,8 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-log = \"0.4.5\"\n-either = \"1.5\"\n+log = \"0.4.8\"\n+either = \"1.5.3\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }"}, {"sha": "d0e3eaf7e9bd76bca9d70f63654e418fca0df343", "filename": "crates/ra_hir_expand/src/builtin_derive.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_derive.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -235,7 +235,7 @@ mod tests {\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let items: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(|it| ast::ModuleItem::cast(it)).collect();\n+            parsed.syntax_node().descendants().filter_map(ast::ModuleItem::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n "}, {"sha": "f2bb0bddbb938556d50c7749e1548dcab96a5955", "filename": "crates/ra_hir_expand/src/builtin_macro.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fbuiltin_macro.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -155,14 +155,11 @@ fn compile_error_expand(\n     tt: &tt::Subtree,\n ) -> Result<tt::Subtree, mbe::ExpandError> {\n     if tt.count() == 1 {\n-        match &tt.token_trees[0] {\n-            tt::TokenTree::Leaf(tt::Leaf::Literal(it)) => {\n-                let s = it.text.as_str();\n-                if s.contains(r#\"\"\"#) {\n-                    return Ok(quote! { loop { #it }});\n-                }\n+        if let tt::TokenTree::Leaf(tt::Leaf::Literal(it)) = &tt.token_trees[0] {\n+            let s = it.text.as_str();\n+            if s.contains('\"') {\n+                return Ok(quote! { loop { #it }});\n             }\n-            _ => {}\n         };\n     }\n \n@@ -222,7 +219,7 @@ mod tests {\n         let (db, file_id) = TestDB::with_single_file(&s);\n         let parsed = db.parse(file_id);\n         let macro_calls: Vec<_> =\n-            parsed.syntax_node().descendants().filter_map(|it| ast::MacroCall::cast(it)).collect();\n+            parsed.syntax_node().descendants().filter_map(ast::MacroCall::cast).collect();\n \n         let ast_id_map = db.ast_id_map(file_id.into());\n "}, {"sha": "57e7eebf9e08e8897be198ede04e66643ab7a1b3", "filename": "crates/ra_hir_expand/src/quote.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_expand%2Fsrc%2Fquote.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -15,14 +15,13 @@ macro_rules! __quote {\n     ( @SUBTREE $delim:ident $($tt:tt)* ) => {\n         {\n             let children = $crate::__quote!($($tt)*);\n-            let subtree = tt::Subtree {\n+            tt::Subtree {\n                 delimiter: Some(tt::Delimiter {\n                     kind: tt::DelimiterKind::$delim,\n                     id: tt::TokenId::unspecified(),\n                 }),\n                 token_trees: $crate::quote::IntoTt::to_tokens(children),\n-            };\n-            subtree\n+            }\n         }\n     };\n \n@@ -259,8 +258,7 @@ mod tests {\n         // }\n         let struct_name = mk_ident(\"Foo\");\n         let fields = [mk_ident(\"name\"), mk_ident(\"id\")];\n-        let fields =\n-            fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees.clone()).flatten();\n+        let fields = fields.iter().map(|it| quote!(#it: self.#it.clone(), ).token_trees).flatten();\n \n         let list = tt::Subtree {\n             delimiter: Some(tt::Delimiter {"}, {"sha": "49cafc5395b4752486a633a9bde4694d67b481e6", "filename": "crates/ra_hir_ty/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,9 +9,9 @@ doctest = false\n \n [dependencies]\n arrayvec = \"0.5.1\"\n-ena = \"0.13\"\n-log = \"0.4.5\"\n-rustc-hash = \"1.0\"\n+ena = \"0.13.1\"\n+log = \"0.4.8\"\n+rustc-hash = \"1.1.0\"\n \n hir_def = { path = \"../ra_hir_def\", package = \"ra_hir_def\" }\n hir_expand = { path = \"../ra_hir_expand\", package = \"ra_hir_expand\" }\n@@ -28,4 +28,4 @@ chalk-ir =      { git = \"https://github.com/rust-lang/chalk.git\", rev = \"af48f30\n lalrpop-intern = \"0.15.1\"\n \n [dev-dependencies]\n-insta = \"0.13.0\"\n+insta = \"0.13.1\""}, {"sha": "6eafdc8f6dda6d7ad20c620ab880dcd40dc48d2f", "filename": "crates/ra_hir_ty/src/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fdiagnostics.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -40,7 +40,7 @@ impl Diagnostic for MissingFields {\n         use std::fmt::Write;\n         let mut message = String::from(\"Missing structure fields:\\n\");\n         for field in &self.missed_fields {\n-            write!(message, \"- {}\\n\", field).unwrap();\n+            writeln!(message, \"- {}\", field).unwrap();\n         }\n         message\n     }"}, {"sha": "0d11b537c8fceaabdac993640a66e0e81c87c0f0", "filename": "crates/ra_hir_ty/src/expr.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fexpr.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -138,7 +138,7 @@ impl<'a, 'b> ExprValidator<'a, 'b> {\n             _ => return,\n         };\n \n-        if params.len() == 2 && &params[0] == &mismatch.actual {\n+        if params.len() == 2 && params[0] == mismatch.actual {\n             let (_, source_map) = db.body_with_source_map(self.func.into());\n \n             if let Some(source_ptr) = source_map.expr_syntax(id) {"}, {"sha": "76069eb9c22c48532ca3e4404e27d61055af46a2", "filename": "crates/ra_hir_ty/src/infer.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -225,14 +225,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             coerce_unsized_map: Self::init_coerce_unsized_map(db, &resolver),\n             db,\n             owner,\n-            body: db.body(owner.into()),\n+            body: db.body(owner),\n             resolver,\n         }\n     }\n \n     fn resolve_all(mut self) -> InferenceResult {\n         // FIXME resolve obligations as well (use Guidance if necessary)\n-        let mut result = mem::replace(&mut self.result, InferenceResult::default());\n+        let mut result = std::mem::take(&mut self.result);\n         for ty in result.type_of_expr.values_mut() {\n             let resolved = self.table.resolve_ty_completely(mem::replace(ty, Ty::Unknown));\n             *ty = resolved;\n@@ -261,7 +261,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     }\n \n     fn write_assoc_resolution(&mut self, id: ExprOrPatId, item: AssocItemId) {\n-        self.result.assoc_resolutions.insert(id, item.into());\n+        self.result.assoc_resolutions.insert(id, item);\n     }\n \n     fn write_pat_ty(&mut self, pat: PatId, ty: Ty) {\n@@ -312,9 +312,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         for obligation in obligations {\n             let in_env = InEnvironment::new(self.trait_env.clone(), obligation.clone());\n             let canonicalized = self.canonicalizer().canonicalize_obligation(in_env);\n-            let solution = self\n-                .db\n-                .trait_solve(self.resolver.krate().unwrap().into(), canonicalized.value.clone());\n+            let solution =\n+                self.db.trait_solve(self.resolver.krate().unwrap(), canonicalized.value.clone());\n \n             match solution {\n                 Some(Solution::Unique(substs)) => {"}, {"sha": "fb6a51b127773644da2b8b94730a63a34a0e6908", "filename": "crates/ra_hir_ty/src/infer/coerce.rs", "status": "modified", "additions": 5, "deletions": 8, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fcoerce.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -26,7 +26,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n     /// Note that it is only possible that one type are coerced to another.\n     /// Coercing both types to another least upper bound type is not possible in rustc,\n     /// which will simply result in \"incompatible types\" error.\n-    pub(super) fn coerce_merge_branch<'t>(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n+    pub(super) fn coerce_merge_branch(&mut self, ty1: &Ty, ty2: &Ty) -> Ty {\n         if self.coerce(ty1, ty2) {\n             ty2.clone()\n         } else if self.coerce(ty2, ty1) {\n@@ -44,10 +44,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         resolver: &Resolver,\n     ) -> FxHashMap<(TypeCtor, TypeCtor), usize> {\n         let krate = resolver.krate().unwrap();\n-        let impls = match db.lang_item(krate.into(), \"coerce_unsized\".into()) {\n-            Some(LangItemTarget::TraitId(trait_)) => {\n-                db.impls_for_trait(krate.into(), trait_.into())\n-            }\n+        let impls = match db.lang_item(krate, \"coerce_unsized\".into()) {\n+            Some(LangItemTarget::TraitId(trait_)) => db.impls_for_trait(krate, trait_),\n             _ => return FxHashMap::default(),\n         };\n \n@@ -254,15 +252,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let unsize_generic_index = {\n                     let mut index = None;\n                     let mut multiple_param = false;\n-                    field_tys[last_field_id].value.walk(&mut |ty| match ty {\n-                        &Ty::Bound(idx) => {\n+                    field_tys[last_field_id].value.walk(&mut |ty| {\n+                        if let &Ty::Bound(idx) = ty {\n                             if index.is_none() {\n                                 index = Some(idx);\n                             } else if Some(idx) != index {\n                                 multiple_param = true;\n                             }\n                         }\n-                        _ => {}\n                     });\n \n                     if multiple_param {"}, {"sha": "9d5f756257e2018b8a7997bcc1aae30e16f1498c", "filename": "crates/ra_hir_ty/src/infer/expr.rs", "status": "modified", "additions": 12, "deletions": 24, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fexpr.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -35,8 +35,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 TypeMismatch { expected: expected.ty.clone(), actual: ty.clone() },\n             );\n         }\n-        let ty = self.resolve_ty_as_possible(ty);\n-        ty\n+        self.resolve_ty_as_possible(ty)\n     }\n \n     /// Infer type of expression with possibly implicit coerce to the expected type.\n@@ -127,10 +126,8 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     TypeCtor::FnPtr { num_args: sig_tys.len() as u16 - 1 },\n                     Substs(sig_tys.into()),\n                 );\n-                let closure_ty = Ty::apply_one(\n-                    TypeCtor::Closure { def: self.owner.into(), expr: tgt_expr },\n-                    sig_ty,\n-                );\n+                let closure_ty =\n+                    Ty::apply_one(TypeCtor::Closure { def: self.owner, expr: tgt_expr }, sig_ty);\n \n                 // Eagerly try to relate the closure type with the expected\n                 // type, otherwise we often won't have enough information to\n@@ -157,15 +154,14 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 };\n                 self.register_obligations_for_call(&callee_ty);\n                 self.check_call_arguments(args, &param_tys);\n-                let ret_ty = self.normalize_associated_types_in(ret_ty);\n-                ret_ty\n+                self.normalize_associated_types_in(ret_ty)\n             }\n             Expr::MethodCall { receiver, args, method_name, generic_args } => self\n                 .infer_method_call(tgt_expr, *receiver, &args, &method_name, generic_args.as_ref()),\n             Expr::Match { expr, arms } => {\n                 let input_ty = self.infer_expr(*expr, &Expectation::none());\n \n-                let mut result_ty = if arms.len() == 0 {\n+                let mut result_ty = if arms.is_empty() {\n                     Ty::simple(TypeCtor::Never)\n                 } else {\n                     self.table.new_type_var()\n@@ -188,7 +184,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Path(p) => {\n                 // FIXME this could be more efficient...\n-                let resolver = resolver_for_expr(self.db, self.owner.into(), tgt_expr);\n+                let resolver = resolver_for_expr(self.db, self.owner, tgt_expr);\n                 self.infer_path(&resolver, p, tgt_expr.into()).unwrap_or(Ty::Unknown)\n             }\n             Expr::Continue => Ty::simple(TypeCtor::Never),\n@@ -217,8 +213,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 self.unify(&ty, &expected.ty);\n \n                 let substs = ty.substs().unwrap_or_else(Substs::empty);\n-                let field_types =\n-                    def_id.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+                let field_types = def_id.map(|it| self.db.field_types(it)).unwrap_or_default();\n                 let variant_data = def_id.map(|it| variant_data(self.db, it));\n                 for (field_idx, field) in fields.iter().enumerate() {\n                     let field_def =\n@@ -264,7 +259,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             .and_then(|idx| a_ty.parameters.0.get(idx).cloned()),\n                         TypeCtor::Adt(AdtId::StructId(s)) => {\n                             self.db.struct_data(s).variant_data.field(name).map(|local_id| {\n-                                let field = StructFieldId { parent: s.into(), local_id }.into();\n+                                let field = StructFieldId { parent: s.into(), local_id };\n                                 self.write_field_resolution(tgt_expr, field);\n                                 self.db.field_types(s.into())[field.local_id]\n                                     .clone()\n@@ -283,14 +278,11 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n             }\n             Expr::Await { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                let ty =\n-                    self.resolve_associated_type(inner_ty, self.resolve_future_future_output());\n-                ty\n+                self.resolve_associated_type(inner_ty, self.resolve_future_future_output())\n             }\n             Expr::Try { expr } => {\n                 let inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n-                let ty = self.resolve_associated_type(inner_ty, self.resolve_ops_try_ok());\n-                ty\n+                self.resolve_associated_type(inner_ty, self.resolve_ops_try_ok())\n             }\n             Expr::Cast { expr, type_ref } => {\n                 let _inner_ty = self.infer_expr_inner(*expr, &Expectation::none());\n@@ -614,8 +606,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         self.unify(&expected_receiver_ty, &actual_receiver_ty);\n \n         self.check_call_arguments(args, &param_tys);\n-        let ret_ty = self.normalize_associated_types_in(ret_ty);\n-        ret_ty\n+        self.normalize_associated_types_in(ret_ty)\n     }\n \n     fn check_call_arguments(&mut self, args: &[ExprId], param_tys: &[Ty]) {\n@@ -700,10 +691,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                             // construct a TraitDef\n                             let substs =\n                                 a_ty.parameters.prefix(generics(self.db, trait_.into()).len());\n-                            self.obligations.push(Obligation::Trait(TraitRef {\n-                                trait_: trait_.into(),\n-                                substs,\n-                            }));\n+                            self.obligations.push(Obligation::Trait(TraitRef { trait_, substs }));\n                         }\n                     }\n                     CallableDef::StructId(_) | CallableDef::EnumVariantId(_) => {}"}, {"sha": "a495ecbfeb05667a7c4600446ea5c16c57667b9e", "filename": "crates/ra_hir_ty/src/infer/pat.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpat.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -28,7 +28,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n-        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+        let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n \n         for (i, &subpat) in subpats.iter().enumerate() {\n             let expected_ty = var_data\n@@ -60,7 +60,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n \n         let substs = ty.substs().unwrap_or_else(Substs::empty);\n \n-        let field_tys = def.map(|it| self.db.field_types(it.into())).unwrap_or_default();\n+        let field_tys = def.map(|it| self.db.field_types(it)).unwrap_or_default();\n         for subpat in subpats {\n             let matching_field = var_data.as_ref().and_then(|it| it.field(&subpat.name));\n             let expected_ty ="}, {"sha": "471d603423dc8bd1dafdbc1c2d1661ef4586810e", "filename": "crates/ra_hir_ty/src/infer/path.rs", "status": "modified", "additions": 24, "deletions": 23, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Fpath.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -104,8 +104,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                 let segment =\n                     remaining_segments.last().expect(\"there should be at least one segment here\");\n                 let ctx = crate::lower::TyLoweringContext::new(self.db, &self.resolver);\n-                let trait_ref =\n-                    TraitRef::from_resolved_path(&ctx, trait_.into(), resolved_segment, None);\n+                let trait_ref = TraitRef::from_resolved_path(&ctx, trait_, resolved_segment, None);\n                 self.resolve_trait_assoc_item(trait_ref, segment, id)\n             }\n             (def, _) => {\n@@ -144,30 +143,32 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n         id: ExprOrPatId,\n     ) -> Option<(ValueNs, Option<Substs>)> {\n         let trait_ = trait_ref.trait_;\n-        let item = self\n-            .db\n-            .trait_data(trait_)\n-            .items\n-            .iter()\n-            .map(|(_name, id)| (*id).into())\n-            .find_map(|item| match item {\n-                AssocItemId::FunctionId(func) => {\n-                    if segment.name == &self.db.function_data(func).name {\n-                        Some(AssocItemId::FunctionId(func))\n-                    } else {\n-                        None\n+        let item =\n+            self.db.trait_data(trait_).items.iter().map(|(_name, id)| (*id)).find_map(|item| {\n+                match item {\n+                    AssocItemId::FunctionId(func) => {\n+                        if segment.name == &self.db.function_data(func).name {\n+                            Some(AssocItemId::FunctionId(func))\n+                        } else {\n+                            None\n+                        }\n                     }\n-                }\n \n-                AssocItemId::ConstId(konst) => {\n-                    if self.db.const_data(konst).name.as_ref().map_or(false, |n| n == segment.name)\n-                    {\n-                        Some(AssocItemId::ConstId(konst))\n-                    } else {\n-                        None\n+                    AssocItemId::ConstId(konst) => {\n+                        if self\n+                            .db\n+                            .const_data(konst)\n+                            .name\n+                            .as_ref()\n+                            .map_or(false, |n| n == segment.name)\n+                        {\n+                            Some(AssocItemId::ConstId(konst))\n+                        } else {\n+                            None\n+                        }\n                     }\n+                    AssocItemId::TypeAliasId(_) => None,\n                 }\n-                AssocItemId::TypeAliasId(_) => None,\n             })?;\n         let def = match item {\n             AssocItemId::FunctionId(f) => ValueNs::FunctionId(f),\n@@ -233,7 +234,7 @@ impl<'a, D: HirDatabase> InferenceContext<'a, D> {\n                     AssocContainerId::ContainerId(_) => None,\n                 };\n \n-                self.write_assoc_resolution(id, item.into());\n+                self.write_assoc_resolution(id, item);\n                 Some((def, substs))\n             },\n         )"}, {"sha": "9c7996572429afd651ca120431c7ac0d54b4ac51", "filename": "crates/ra_hir_ty/src/infer/unify.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Finfer%2Funify.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -140,13 +140,12 @@ where\n impl<T> Canonicalized<T> {\n     pub fn decanonicalize_ty(&self, mut ty: Ty) -> Ty {\n         ty.walk_mut_binders(\n-            &mut |ty, binders| match ty {\n-                &mut Ty::Bound(idx) => {\n+            &mut |ty, binders| {\n+                if let &mut Ty::Bound(idx) = ty {\n                     if idx as usize >= binders && (idx as usize - binders) < self.free_vars.len() {\n                         *ty = Ty::Infer(self.free_vars[idx as usize - binders]);\n                     }\n                 }\n-                _ => {}\n             },\n             0,\n         );"}, {"sha": "13c5e6c6b73fe443a8f31bedc7487ce09381a1b7", "filename": "crates/ra_hir_ty/src/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -167,7 +167,7 @@ impl TypeCtor {\n             | TypeCtor::Closure { .. } // 1 param representing the signature of the closure\n             => 1,\n             TypeCtor::Adt(adt) => {\n-                let generic_params = generics(db, AdtId::from(adt).into());\n+                let generic_params = generics(db, adt.into());\n                 generic_params.len()\n             }\n             TypeCtor::FnDef(callable) => {\n@@ -247,7 +247,7 @@ pub struct ProjectionTy {\n \n impl ProjectionTy {\n     pub fn trait_ref(&self, db: &impl HirDatabase) -> TraitRef {\n-        TraitRef { trait_: self.trait_(db).into(), substs: self.parameters.clone() }\n+        TraitRef { trait_: self.trait_(db), substs: self.parameters.clone() }\n     }\n \n     fn trait_(&self, db: &impl HirDatabase) -> TraitId {\n@@ -763,16 +763,15 @@ pub trait TypeWalk {\n         Self: Sized,\n     {\n         self.walk_mut_binders(\n-            &mut |ty, binders| match ty {\n-                &mut Ty::Bound(idx) => {\n+            &mut |ty, binders| {\n+                if let &mut Ty::Bound(idx) = ty {\n                     if idx as usize >= binders && (idx as usize - binders) < substs.len() {\n                         *ty = substs.0[idx as usize - binders].clone();\n                     } else if idx as usize >= binders + substs.len() {\n                         // shift free binders\n                         *ty = Ty::Bound(idx - substs.len() as u32);\n                     }\n                 }\n-                _ => {}\n             },\n             0,\n         );"}, {"sha": "52da34574cd95ecae76db08584979ba2fef9d223", "filename": "crates/ra_hir_ty/src/lower.rs", "status": "modified", "additions": 10, "deletions": 12, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Flower.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -361,10 +361,8 @@ impl Ty {\n         for t in traits {\n             if let Some(associated_ty) = ctx.db.trait_data(t).associated_type_by_name(&segment.name)\n             {\n-                let substs = Substs::build_for_def(ctx.db, t)\n-                    .push(self_ty.clone())\n-                    .fill_with_unknown()\n-                    .build();\n+                let substs =\n+                    Substs::build_for_def(ctx.db, t).push(self_ty).fill_with_unknown().build();\n                 // FIXME handle type parameters on the segment\n                 return Ty::Projection(ProjectionTy { associated_ty, parameters: substs });\n             }\n@@ -428,7 +426,7 @@ pub(super) fn substs_from_path_segment(\n     _add_self_param: bool,\n ) -> Substs {\n     let mut substs = Vec::new();\n-    let def_generics = def_generic.map(|def| generics(ctx.db, def.into()));\n+    let def_generics = def_generic.map(|def| generics(ctx.db, def));\n \n     let (parent_params, self_params, type_params, impl_trait_params) =\n         def_generics.map_or((0, 0, 0, 0), |g| g.provenance_split());\n@@ -459,7 +457,7 @@ pub(super) fn substs_from_path_segment(\n \n     // handle defaults\n     if let Some(def_generic) = def_generic {\n-        let default_substs = ctx.db.generic_defaults(def_generic.into());\n+        let default_substs = ctx.db.generic_defaults(def_generic);\n         assert_eq!(substs.len(), default_substs.len());\n \n         for (i, default_ty) in default_substs.iter().enumerate() {\n@@ -483,7 +481,7 @@ impl TraitRef {\n             _ => return None,\n         };\n         let segment = path.segments().last().expect(\"path should have at least one segment\");\n-        Some(TraitRef::from_resolved_path(ctx, resolved.into(), segment, explicit_self_ty))\n+        Some(TraitRef::from_resolved_path(ctx, resolved, segment, explicit_self_ty))\n     }\n \n     pub(crate) fn from_resolved_path(\n@@ -728,7 +726,7 @@ pub(crate) fn generic_predicates_query(\n pub(crate) fn generic_defaults_query(db: &impl HirDatabase, def: GenericDefId) -> Substs {\n     let resolver = def.resolver(db);\n     let ctx = TyLoweringContext::new(db, &resolver);\n-    let generic_params = generics(db, def.into());\n+    let generic_params = generics(db, def);\n \n     let defaults = generic_params\n         .iter()\n@@ -792,7 +790,7 @@ fn type_for_builtin(def: BuiltinType) -> Ty {\n }\n \n fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFnSig {\n-    let struct_data = db.struct_data(def.into());\n+    let struct_data = db.struct_data(def);\n     let fields = struct_data.variant_data.fields();\n     let resolver = def.resolver(db);\n     let ctx =\n@@ -805,7 +803,7 @@ fn fn_sig_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> PolyFn\n \n /// Build the type of a tuple struct constructor.\n fn type_for_struct_constructor(db: &impl HirDatabase, def: StructId) -> Binders<Ty> {\n-    let struct_data = db.struct_data(def.into());\n+    let struct_data = db.struct_data(def);\n     if let StructKind::Unit = struct_data.variant_data.kind() {\n         return type_for_adt(db, def.into());\n     }\n@@ -836,7 +834,7 @@ fn type_for_enum_variant_constructor(db: &impl HirDatabase, def: EnumVariantId)\n     }\n     let generics = generics(db, def.parent.into());\n     let substs = Substs::bound_vars(&generics);\n-    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(EnumVariantId::from(def).into()), substs))\n+    Binders::new(substs.len(), Ty::apply(TypeCtor::FnDef(def.into()), substs))\n }\n \n fn type_for_adt(db: &impl HirDatabase, adt: AdtId) -> Binders<Ty> {\n@@ -964,6 +962,6 @@ pub(crate) fn impl_trait_query(\n     let target_trait = impl_data.target_trait.as_ref()?;\n     Some(Binders::new(\n         self_ty.num_binders,\n-        TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value.clone()))?,\n+        TraitRef::from_hir(&ctx, target_trait, Some(self_ty.value))?,\n     ))\n }"}, {"sha": "964acdb0980c1bb224cfd793ee9fe83e21b010e4", "filename": "crates/ra_hir_ty/src/method_resolution.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fmethod_resolution.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -214,7 +214,7 @@ pub fn iterate_method_candidates<T>(\n             // the methods by autoderef order of *receiver types*, not *self\n             // types*.\n \n-            let deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty.clone()).collect();\n+            let deref_chain: Vec<_> = autoderef::autoderef(db, Some(krate), ty).collect();\n             for i in 0..deref_chain.len() {\n                 if let Some(result) = iterate_method_candidates_with_autoref(\n                     &deref_chain[i..],\n@@ -290,7 +290,7 @@ fn iterate_method_candidates_with_autoref<T>(\n         &ref_muted,\n         deref_chain,\n         db,\n-        env.clone(),\n+        env,\n         krate,\n         &traits_in_scope,\n         name,\n@@ -391,17 +391,17 @@ fn iterate_trait_method_candidates<T>(\n         // iteration\n         let mut known_implemented = false;\n         for (_name, item) in data.items.iter() {\n-            if !is_valid_candidate(db, name, receiver_ty, (*item).into(), self_ty) {\n+            if !is_valid_candidate(db, name, receiver_ty, *item, self_ty) {\n                 continue;\n             }\n             if !known_implemented {\n                 let goal = generic_implements_goal(db, env.clone(), t, self_ty.clone());\n-                if db.trait_solve(krate.into(), goal).is_none() {\n+                if db.trait_solve(krate, goal).is_none() {\n                     continue 'traits;\n                 }\n             }\n             known_implemented = true;\n-            if let Some(result) = callback(&self_ty.value, (*item).into()) {\n+            if let Some(result) = callback(&self_ty.value, *item) {\n                 return Some(result);\n             }\n         }\n@@ -521,7 +521,7 @@ pub fn implements_trait(\n         return true;\n     }\n     let goal = generic_implements_goal(db, env, trait_, ty.clone());\n-    let solution = db.trait_solve(krate.into(), goal);\n+    let solution = db.trait_solve(krate, goal);\n \n     solution.is_some()\n }"}, {"sha": "54e2bd05a19677ba08b86f84ed213081d3aaca7f", "filename": "crates/ra_hir_ty/src/op.rs", "status": "modified", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Fop.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -30,20 +30,18 @@ pub(super) fn binary_op_return_ty(op: BinaryOp, lhs_ty: Ty, rhs_ty: Ty) -> Ty {\n pub(super) fn binary_op_rhs_expectation(op: BinaryOp, lhs_ty: Ty) -> Ty {\n     match op {\n         BinaryOp::LogicOp(..) => Ty::simple(TypeCtor::Bool),\n-        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { negated: _ }) => {\n-            match lhs_ty {\n-                Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n-                    TypeCtor::Int(..)\n-                    | TypeCtor::Float(..)\n-                    | TypeCtor::Str\n-                    | TypeCtor::Char\n-                    | TypeCtor::Bool => lhs_ty,\n-                    _ => Ty::Unknown,\n-                },\n-                Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+        BinaryOp::Assignment { op: None } | BinaryOp::CmpOp(CmpOp::Eq { .. }) => match lhs_ty {\n+            Ty::Apply(ApplicationTy { ctor, .. }) => match ctor {\n+                TypeCtor::Int(..)\n+                | TypeCtor::Float(..)\n+                | TypeCtor::Str\n+                | TypeCtor::Char\n+                | TypeCtor::Bool => lhs_ty,\n                 _ => Ty::Unknown,\n-            }\n-        }\n+            },\n+            Ty::Infer(InferTy::IntVar(..)) | Ty::Infer(InferTy::FloatVar(..)) => lhs_ty,\n+            _ => Ty::Unknown,\n+        },\n         BinaryOp::ArithOp(ArithOp::Shl) | BinaryOp::ArithOp(ArithOp::Shr) => Ty::Unknown,\n         BinaryOp::CmpOp(CmpOp::Ord { .. })\n         | BinaryOp::Assignment { op: Some(_) }"}, {"sha": "c794f7b8470067bfdd9106eb4d927ce305448214", "filename": "crates/ra_hir_ty/src/test_db.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftest_db.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -86,15 +86,14 @@ impl TestDB {\n     pub fn diagnostics(&self) -> String {\n         let mut buf = String::new();\n         let crate_graph = self.crate_graph();\n-        for krate in crate_graph.iter().next() {\n+        for krate in crate_graph.iter() {\n             let crate_def_map = self.crate_def_map(krate);\n \n             let mut fns = Vec::new();\n             for (module_id, _) in crate_def_map.modules.iter() {\n                 for decl in crate_def_map[module_id].scope.declarations() {\n-                    match decl {\n-                        ModuleDefId::FunctionId(f) => fns.push(f),\n-                        _ => (),\n+                    if let ModuleDefId::FunctionId(f) = decl {\n+                        fns.push(f)\n                     }\n                 }\n "}, {"sha": "240cc03a2c2eab61348c9af13ed2f03c67553ece", "filename": "crates/ra_hir_ty/src/tests.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -101,9 +101,9 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n                 (src_ptr.value.range(), node.text().to_string().replace(\"\\n\", \" \"))\n             };\n             let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-            write!(\n+            writeln!(\n                 acc,\n-                \"{}{} '{}': {}\\n\",\n+                \"{}{} '{}': {}\",\n                 macro_prefix,\n                 range,\n                 ellipsize(text, 15),\n@@ -118,9 +118,9 @@ fn infer_with_mismatches(content: &str, include_mismatches: bool) -> String {\n             for (src_ptr, mismatch) in &mismatches {\n                 let range = src_ptr.value.range();\n                 let macro_prefix = if src_ptr.file_id != file_id.into() { \"!\" } else { \"\" };\n-                write!(\n+                writeln!(\n                     acc,\n-                    \"{}{}: expected {}, got {}\\n\",\n+                    \"{}{}: expected {}, got {}\",\n                     macro_prefix,\n                     range,\n                     mismatch.expected.display(&db),"}, {"sha": "e83449957e3ecf65dcddf184afae18d2be5df42a", "filename": "crates/ra_hir_ty/src/traits.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -248,12 +248,9 @@ fn solution_from_chalk(\n         let value = subst\n             .value\n             .into_iter()\n-            .map(|p| {\n-                let ty = match p.ty() {\n-                    Some(ty) => from_chalk(db, ty.clone()),\n-                    None => unimplemented!(),\n-                };\n-                ty\n+            .map(|p| match p.ty() {\n+                Some(ty) => from_chalk(db, ty.clone()),\n+                None => unimplemented!(),\n             })\n             .collect();\n         let result = Canonical { value, num_vars: subst.binders.len() };"}, {"sha": "a537420a5354de2790ff4501c26845fe798e5d8f", "filename": "crates/ra_hir_ty/src/traits/builtin.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fbuiltin.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -98,7 +98,7 @@ fn closure_fn_trait_impl_datum(\n         // the existence of the Fn trait has been checked before\n         .expect(\"fn trait for closure impl missing\");\n \n-    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n+    let num_args: u16 = match &db.body(data.def)[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);\n@@ -118,11 +118,11 @@ fn closure_fn_trait_impl_datum(\n     let self_ty = Ty::apply_one(TypeCtor::Closure { def: data.def, expr: data.expr }, sig_ty);\n \n     let trait_ref = TraitRef {\n-        trait_: trait_.into(),\n+        trait_,\n         substs: Substs::build_for_def(db, trait_).push(self_ty).push(arg_ty).build(),\n     };\n \n-    let output_ty_id = AssocTyValue::ClosureFnTraitImplOutput(data.clone());\n+    let output_ty_id = AssocTyValue::ClosureFnTraitImplOutput(data);\n \n     BuiltinImplData {\n         num_vars: num_args as usize + 1,\n@@ -137,9 +137,9 @@ fn closure_fn_trait_output_assoc_ty_value(\n     krate: CrateId,\n     data: super::ClosureFnTraitImplData,\n ) -> BuiltinImplAssocTyValueData {\n-    let impl_ = Impl::ClosureFnTraitImpl(data.clone());\n+    let impl_ = Impl::ClosureFnTraitImpl(data);\n \n-    let num_args: u16 = match &db.body(data.def.into())[data.expr] {\n+    let num_args: u16 = match &db.body(data.def)[data.expr] {\n         Expr::Lambda { args, .. } => args.len() as u16,\n         _ => {\n             log::warn!(\"closure for closure type {:?} not found\", data);"}, {"sha": "1bdf13e480d7423b9d2e2f6b4d1d6c4f985b2e16", "filename": "crates/ra_hir_ty/src/traits/chalk.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftraits%2Fchalk.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -409,8 +409,7 @@ where\n     fn to_chalk(self, db: &impl HirDatabase) -> chalk_ir::Canonical<T::Chalk> {\n         let parameter = chalk_ir::ParameterKind::Ty(chalk_ir::UniverseIndex::ROOT);\n         let value = self.value.to_chalk(db);\n-        let canonical = chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] };\n-        canonical\n+        chalk_ir::Canonical { value, binders: vec![parameter; self.num_vars] }\n     }\n \n     fn from_chalk(db: &impl HirDatabase, canonical: chalk_ir::Canonical<T::Chalk>) -> Canonical<T> {\n@@ -565,10 +564,10 @@ where\n         // and will panic if the trait can't be resolved.\n         let mut result: Vec<_> = self\n             .db\n-            .impls_for_trait(self.krate, trait_.into())\n+            .impls_for_trait(self.krate, trait_)\n             .iter()\n             .copied()\n-            .map(|it| Impl::ImplBlock(it.into()))\n+            .map(Impl::ImplBlock)\n             .map(|impl_| impl_.to_chalk(self.db))\n             .collect();\n \n@@ -586,7 +585,7 @@ where\n         false // FIXME\n     }\n     fn associated_ty_value(&self, id: AssociatedTyValueId) -> Arc<AssociatedTyValue> {\n-        self.db.associated_ty_value(self.krate.into(), id)\n+        self.db.associated_ty_value(self.krate, id)\n     }\n     fn custom_clauses(&self) -> Vec<chalk_ir::ProgramClause<TypeFamily>> {\n         vec![]\n@@ -674,7 +673,7 @@ pub(crate) fn struct_datum_query(\n     let where_clauses = type_ctor\n         .as_generic_def()\n         .map(|generic_def| {\n-            let generic_params = generics(db, generic_def.into());\n+            let generic_params = generics(db, generic_def);\n             let bound_vars = Substs::bound_vars(&generic_params);\n             convert_where_clauses(db, generic_def, &bound_vars)\n         })\n@@ -805,7 +804,7 @@ fn type_alias_associated_ty_value(\n     let ty = db.ty(type_alias.into());\n     let value_bound = chalk_rust_ir::AssociatedTyValueBound { ty: ty.value.to_chalk(db) };\n     let value = chalk_rust_ir::AssociatedTyValue {\n-        impl_id: Impl::ImplBlock(impl_id.into()).to_chalk(db),\n+        impl_id: Impl::ImplBlock(impl_id).to_chalk(db),\n         associated_ty_id: assoc_ty.to_chalk(db),\n         value: make_binders(value_bound, ty.num_binders),\n     };"}, {"sha": "3407d25989b97d364e55ad1c4ed7dda98ad822d1", "filename": "crates/ra_ide/Cargo.toml", "status": "modified", "additions": 12, "deletions": 8, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -11,15 +11,19 @@ doctest = false\n wasm = []\n \n [dependencies]\n-either = \"1.5\"\n+either = \"1.5.3\"\n format-buf = \"1.0.0\"\n-indexmap = \"1.3.0\"\n-itertools = \"0.8.0\"\n+indexmap = \"1.3.2\"\n+itertools = \"0.8.2\"\n join_to_string = \"0.1.3\"\n-log = \"0.4.5\"\n-rustc-hash = \"1.0\"\n-rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n-once_cell = \"1.2.0\"\n+log = \"0.4.8\"\n+rayon = \"1.3.0\"\n+fst = { version = \"0.3.5\", default-features = false }\n+rustc-hash = \"1.1.0\"\n+unicase = \"2.6.0\"\n+superslice = \"1.0.0\"\n+rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n+once_cell = \"1.3.1\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n@@ -36,4 +40,4 @@ ra_assists = { path = \"../ra_assists\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n \n [dev-dependencies]\n-insta = \"0.13.0\"\n+insta = \"0.13.1\""}, {"sha": "7c6322cb48309778a04552983f52ce22456cf0ab", "filename": "crates/ra_ide/src/call_info.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcall_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcall_info.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -128,7 +128,7 @@ impl FnCallNode {\n             }),\n \n             FnCallNode::MethodCallExpr(call_expr) => {\n-                call_expr.syntax().children().filter_map(ast::NameRef::cast).nth(0)\n+                call_expr.syntax().children().filter_map(ast::NameRef::cast).next()\n             }\n \n             FnCallNode::MacroCallExpr(call_expr) => call_expr.path()?.segment()?.name_ref(),"}, {"sha": "83628e35c2b8f1df9726f4a6b99dd43738266c0b", "filename": "crates/ra_ide/src/completion/complete_trait_impl.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_trait_impl.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -59,7 +59,7 @@ pub(crate) fn complete_trait_impl(acc: &mut Completions, ctx: &CompletionContext\n         .as_ref()\n         .and_then(|node| node.parent())\n         .and_then(|node| node.parent())\n-        .and_then(|node| ast::ImplBlock::cast(node));\n+        .and_then(ast::ImplBlock::cast);\n \n     if let (Some(trigger), Some(impl_block)) = (trigger, impl_block) {\n         match trigger.kind() {\n@@ -110,17 +110,17 @@ fn add_function_impl(\n     ctx: &CompletionContext,\n     func: &hir::Function,\n ) {\n-    let display = FunctionSignature::from_hir(ctx.db, func.clone());\n+    let display = FunctionSignature::from_hir(ctx.db, *func);\n \n     let fn_name = func.name(ctx.db).to_string();\n \n-    let label = if func.params(ctx.db).len() > 0 {\n+    let label = if !func.params(ctx.db).is_empty() {\n         format!(\"fn {}(..)\", fn_name)\n     } else {\n         format!(\"fn {}()\", fn_name)\n     };\n \n-    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label.clone())\n+    let builder = CompletionItem::new(CompletionKind::Magic, ctx.source_range(), label)\n         .lookup_by(fn_name)\n         .set_documentation(func.docs(ctx.db));\n "}, {"sha": "61867c0ffdbb98774c89870c971307dec5757b6e", "filename": "crates/ra_ide/src/completion/completion_item.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcompletion_item.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -159,15 +159,15 @@ impl CompletionItem {\n \n     /// Short one-line additional information, like a type\n     pub fn detail(&self) -> Option<&str> {\n-        self.detail.as_ref().map(|it| it.as_str())\n+        self.detail.as_deref()\n     }\n     /// A doc-comment\n     pub fn documentation(&self) -> Option<Documentation> {\n         self.documentation.clone()\n     }\n     /// What string is used for filtering.\n     pub fn lookup(&self) -> &str {\n-        self.lookup.as_ref().map(|it| it.as_str()).unwrap_or_else(|| self.label())\n+        self.lookup.as_deref().unwrap_or_else(|| self.label())\n     }\n \n     pub fn kind(&self) -> Option<CompletionItemKind> {"}, {"sha": "b85fd80754a649dd1d80c1a411f2bbee726439ab", "filename": "crates/ra_ide/src/display/function_signature.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Ffunction_signature.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -54,9 +54,8 @@ impl FunctionSignature {\n \n     pub(crate) fn from_struct(db: &RootDatabase, st: hir::Struct) -> Option<Self> {\n         let node: ast::StructDef = st.source(db).value;\n-        match node.kind() {\n-            ast::StructKind::Record(_) => return None,\n-            _ => (),\n+        if let ast::StructKind::Record(_) = node.kind() {\n+            return None;\n         };\n \n         let params = st"}, {"sha": "096c41c815fec114dbdf6cc2e309dfeb77ea0d8d", "filename": "crates/ra_ide/src/display/navigation_target.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fdisplay%2Fnavigation_target.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -64,11 +64,11 @@ impl NavigationTarget {\n     }\n \n     pub fn docs(&self) -> Option<&str> {\n-        self.docs.as_ref().map(String::as_str)\n+        self.docs.as_deref()\n     }\n \n     pub fn description(&self) -> Option<&str> {\n-        self.description.as_ref().map(String::as_str)\n+        self.description.as_deref()\n     }\n \n     /// A \"most interesting\" range withing the `full_range`."}, {"sha": "97c08ade506306326649d7e21924d2f15f861f46", "filename": "crates/ra_ide/src/references.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Freferences.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Freferences.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Freferences.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -268,7 +268,7 @@ fn decl_access(\n     };\n \n     let stmt = find_node_at_offset::<ast::LetStmt>(syntax, range.start())?;\n-    if let Some(_) = stmt.initializer() {\n+    if stmt.initializer().is_some() {\n         let pat = stmt.pat()?;\n         if let ast::Pat::BindPat(it) = pat {\n             if it.name()?.text().as_str() == name {"}, {"sha": "902c29fc62078e1a232f565ee3cb913760ef4f37", "filename": "crates/ra_ide/src/ssr.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fssr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide%2Fsrc%2Fssr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fssr.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -85,8 +85,11 @@ impl FromStr for SsrQuery {\n     fn from_str(query: &str) -> Result<SsrQuery, SsrError> {\n         let mut it = query.split(\"==>>\");\n         let pattern = it.next().expect(\"at least empty string\").trim();\n-        let mut template =\n-            it.next().ok_or(SsrError(\"Cannot find delemiter `==>>`\".into()))?.trim().to_string();\n+        let mut template = it\n+            .next()\n+            .ok_or_else(|| SsrError(\"Cannot find delemiter `==>>`\".into()))?\n+            .trim()\n+            .to_string();\n         if it.next().is_some() {\n             return Err(SsrError(\"More than one delimiter found\".into()));\n         }\n@@ -131,11 +134,12 @@ fn traverse(node: &SyntaxNode, go: &mut impl FnMut(&SyntaxNode) -> bool) {\n }\n \n fn split_by_var(s: &str) -> Result<(&str, &str, &str), SsrError> {\n-    let end_of_name = s.find(\":\").ok_or(SsrError(\"Use $<name>:expr\".into()))?;\n+    let end_of_name = s.find(':').ok_or_else(|| SsrError(\"Use $<name>:expr\".into()))?;\n     let name = &s[0..end_of_name];\n     is_name(name)?;\n     let type_begin = end_of_name + 1;\n-    let type_length = s[type_begin..].find(|c| !char::is_ascii_alphanumeric(&c)).unwrap_or(s.len());\n+    let type_length =\n+        s[type_begin..].find(|c| !char::is_ascii_alphanumeric(&c)).unwrap_or_else(|| s.len());\n     let type_name = &s[type_begin..type_begin + type_length];\n     Ok((name, type_name, &s[type_begin + type_length..]))\n }\n@@ -182,7 +186,7 @@ fn find(pattern: &SsrPattern, code: &SyntaxNode) -> SsrMatches {\n                 pattern.text() == code.text()\n             }\n             (SyntaxElement::Node(ref pattern), SyntaxElement::Node(ref code)) => {\n-                if placeholders.iter().find(|&n| n.0.as_str() == pattern.text()).is_some() {\n+                if placeholders.iter().any(|n| n.0.as_str() == pattern.text()) {\n                     match_.binding.insert(Var(pattern.text().to_string()), code.clone());\n                     true\n                 } else {"}, {"sha": "ee409e34e995fe4c0a52ec0bfc22face36b72ff6", "filename": "crates/ra_ide_db/Cargo.toml", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide_db%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide_db%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -11,17 +11,18 @@ doctest = false\n wasm = []\n \n [dependencies]\n-either = \"1.5\"\n+either = \"1.5.3\"\n format-buf = \"1.0.0\"\n-indexmap = \"1.3.0\"\n-itertools = \"0.8.0\"\n+indexmap = \"1.3.2\"\n+itertools = \"0.8.2\"\n join_to_string = \"0.1.3\"\n-log = \"0.4.5\"\n-rayon = \"1.0.2\"\n-fst = { version = \"0.3.1\", default-features = false }\n-rustc-hash = \"1.0\"\n+log = \"0.4.8\"\n+rayon = \"1.3.0\"\n+fst = { version = \"0.3.5\", default-features = false }\n+rustc-hash = \"1.1.0\"\n+unicase = \"2.6.0\"\n superslice = \"1.0.0\"\n-once_cell = \"1.2.0\"\n+once_cell = \"1.3.1\"\n \n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n@@ -36,4 +37,4 @@ test_utils = { path = \"../test_utils\" }\n hir = { path = \"../ra_hir\", package = \"ra_hir\" }\n \n [dev-dependencies]\n-insta = \"0.13.0\"\n+insta = \"0.13.1\""}, {"sha": "7e9310005a331090f6d1a59a3d06b728fe2bb23f", "filename": "crates/ra_ide_db/src/change.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_ide_db%2Fsrc%2Fchange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide_db%2Fsrc%2Fchange.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -44,7 +44,7 @@ impl fmt::Debug for AnalysisChange {\n         if !self.libraries_added.is_empty() {\n             d.field(\"libraries_added\", &self.libraries_added.len());\n         }\n-        if !self.crate_graph.is_none() {\n+        if self.crate_graph.is_some() {\n             d.field(\"crate_graph\", &self.crate_graph);\n         }\n         d.finish()"}, {"sha": "4dec24914b164fa3ed280e537e9ae39c3b823adb", "filename": "crates/ra_mbe/Cargo.toml", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -11,9 +11,9 @@ doctest = false\n ra_syntax = { path = \"../ra_syntax\" }\n ra_parser = { path = \"../ra_parser\" }\n tt = { path = \"../ra_tt\", package = \"ra_tt\" }\n-rustc-hash = \"1.0.0\"\n-smallvec = \"1.0.0\"\n-log = \"0.4.5\"\n+rustc-hash = \"1.1.0\"\n+smallvec = \"1.2.0\"\n+log = \"0.4.8\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "2bdea11e14c9bf941f0e4bd856cf1df675f368ab", "filename": "crates/ra_mbe/src/mbe_expander/matcher.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fmbe_expander%2Fmatcher.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -101,7 +101,7 @@ fn match_subtree(\n                         tt::Leaf::Literal(tt::Literal { text: lhs, .. }),\n                         tt::Leaf::Literal(tt::Literal { text: rhs, .. }),\n                     ) if lhs == rhs => (),\n-                    _ => Err(ExpandError::UnexpectedToken)?,\n+                    _ => return Err(ExpandError::UnexpectedToken),\n                 }\n             }\n             Op::TokenTree(tt::TokenTree::Subtree(lhs)) => {"}, {"sha": "10a6f300a7e08e83c872e438ced8ef7b270ea577", "filename": "crates/ra_mbe/src/parser.rs", "status": "modified", "additions": 13, "deletions": 16, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fparser.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -45,15 +45,15 @@ impl PartialEq for Separator {\n     }\n }\n \n-pub(crate) fn parse_template<'a>(\n-    template: &'a tt::Subtree,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+pub(crate) fn parse_template(\n+    template: &tt::Subtree,\n+) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     parse_inner(template, Mode::Template)\n }\n \n-pub(crate) fn parse_pattern<'a>(\n-    pattern: &'a tt::Subtree,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+pub(crate) fn parse_pattern(\n+    pattern: &tt::Subtree,\n+) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     parse_inner(pattern, Mode::Pattern)\n }\n \n@@ -63,10 +63,7 @@ enum Mode {\n     Template,\n }\n \n-fn parse_inner<'a>(\n-    src: &'a tt::Subtree,\n-    mode: Mode,\n-) -> impl Iterator<Item = Result<Op<'a>, ExpandError>> {\n+fn parse_inner(src: &tt::Subtree, mode: Mode) -> impl Iterator<Item = Result<Op<'_>, ExpandError>> {\n     let mut src = TtIter::new(src);\n     std::iter::from_fn(move || {\n         let first = src.next()?;\n@@ -100,7 +97,7 @@ fn next_op<'a>(\n                     Op::Repeat { subtree, separator, kind }\n                 }\n                 tt::TokenTree::Leaf(leaf) => match leaf {\n-                    tt::Leaf::Punct(..) => Err(ExpandError::UnexpectedToken)?,\n+                    tt::Leaf::Punct(..) => return Err(ExpandError::UnexpectedToken),\n                     tt::Leaf::Ident(ident) => {\n                         let name = &ident.text;\n                         let kind = eat_fragment_kind(src, mode)?;\n@@ -147,15 +144,15 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Exp\n     for tt in src {\n         let tt = match tt {\n             tt::TokenTree::Leaf(leaf) => leaf,\n-            tt::TokenTree::Subtree(_) => Err(ExpandError::InvalidRepeat)?,\n+            tt::TokenTree::Subtree(_) => return Err(ExpandError::InvalidRepeat),\n         };\n         let has_sep = match &separator {\n-            Separator::Puncts(puncts) => puncts.len() != 0,\n+            Separator::Puncts(puncts) => !puncts.is_empty(),\n             _ => true,\n         };\n         match tt {\n             tt::Leaf::Ident(_) | tt::Leaf::Literal(_) if has_sep => {\n-                Err(ExpandError::InvalidRepeat)?\n+                return Err(ExpandError::InvalidRepeat)\n             }\n             tt::Leaf::Ident(ident) => separator = Separator::Ident(ident.clone()),\n             tt::Leaf::Literal(lit) => separator = Separator::Literal(lit.clone()),\n@@ -168,11 +165,11 @@ fn parse_repeat(src: &mut TtIter) -> Result<(Option<Separator>, RepeatKind), Exp\n                         match &mut separator {\n                             Separator::Puncts(puncts) => {\n                                 if puncts.len() == 3 {\n-                                    Err(ExpandError::InvalidRepeat)?\n+                                    return Err(ExpandError::InvalidRepeat);\n                                 }\n                                 puncts.push(punct.clone())\n                             }\n-                            _ => Err(ExpandError::InvalidRepeat)?,\n+                            _ => return Err(ExpandError::InvalidRepeat),\n                         }\n                         continue;\n                     }"}, {"sha": "eb8b79e9a8019f888a994f7d9f258ab8fcc94a9a", "filename": "crates/ra_mbe/src/subtree_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Fsubtree_source.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -124,7 +124,7 @@ fn convert_delim(d: Option<tt::DelimiterKind>, closing: bool) -> TtToken {\n \n     let idx = closing as usize;\n     let kind = kinds[idx];\n-    let text = if texts.len() > 0 { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n+    let text = if !texts.is_empty() { &texts[idx..texts.len() - (1 - idx)] } else { \"\" };\n     TtToken { kind, is_joint_to_next: false, text: SmolStr::new(text) }\n }\n "}, {"sha": "b77b683b57c96e370bb8f81b5b3cf66b02726fbc", "filename": "crates/ra_parser/src/grammar/expressions/atom.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fexpressions%2Fatom.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -230,10 +230,8 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n     p.eat(T![async]);\n     p.eat(T![move]);\n     params::param_list_closure(p);\n-    if opt_fn_ret_type(p) {\n-        if !p.at(T!['{']) {\n-            p.error(\"expected `{`\");\n-        }\n+    if opt_fn_ret_type(p) && !p.at(T!['{']) {\n+        p.error(\"expected `{`\");\n     }\n \n     if p.at_ts(EXPR_FIRST) {"}, {"sha": "f8b43866cb5be72d6eb8183c2848dd5b82d77cd2", "filename": "crates/ra_parser/src/grammar/items.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -21,7 +21,7 @@ use super::*;\n // struct S;\n pub(super) fn mod_contents(p: &mut Parser, stop_on_r_curly: bool) {\n     attributes::inner_attributes(p);\n-    while !p.at(EOF) && !(stop_on_r_curly && p.at(T!['}'])) {\n+    while !(stop_on_r_curly && p.at(T!['}']) || p.at(EOF)) {\n         item_or_macro(p, stop_on_r_curly, ItemFlavor::Mod)\n     }\n }"}, {"sha": "332acc1a018a2672980b1dd8f8c1abf973329175", "filename": "crates/ra_parser/src/grammar/paths.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fpaths.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -94,7 +94,7 @@ fn path_segment(p: &mut Parser, mode: Mode, first: bool) {\n \n fn opt_path_type_args(p: &mut Parser, mode: Mode) {\n     match mode {\n-        Mode::Use => return,\n+        Mode::Use => {}\n         Mode::Type => {\n             // test path_fn_trait_args\n             // type F = Box<Fn(i32) -> ()>;"}, {"sha": "76e2d4f7d09eb1e8186a3d835b781cdad70443dc", "filename": "crates/ra_parser/src/parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_parser%2Fsrc%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fparser.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -126,13 +126,13 @@ impl<'t> Parser<'t> {\n     }\n \n     fn at_composite2(&self, n: usize, k1: SyntaxKind, k2: SyntaxKind) -> bool {\n-        let t1 = self.token_source.lookahead_nth(n + 0);\n+        let t1 = self.token_source.lookahead_nth(n);\n         let t2 = self.token_source.lookahead_nth(n + 1);\n         t1.kind == k1 && t1.is_jointed_to_next && t2.kind == k2\n     }\n \n     fn at_composite3(&self, n: usize, k1: SyntaxKind, k2: SyntaxKind, k3: SyntaxKind) -> bool {\n-        let t1 = self.token_source.lookahead_nth(n + 0);\n+        let t1 = self.token_source.lookahead_nth(n);\n         let t2 = self.token_source.lookahead_nth(n + 1);\n         let t3 = self.token_source.lookahead_nth(n + 2);\n         (t1.kind == k1 && t1.is_jointed_to_next)"}, {"sha": "e06a6d7d241d6907212d8c0cb6923c6c0e536ef4", "filename": "crates/ra_prof/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_prof%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_prof%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,13 +9,13 @@ publish = false\n doctest = false\n \n [dependencies]\n-once_cell = \"1.0.1\"\n-itertools = \"0.8.0\"\n-backtrace = \"0.3.28\"\n+once_cell = \"1.3.1\"\n+itertools = \"0.8.2\"\n+backtrace = \"0.3.44\"\n \n [target.'cfg(not(target_env = \"msvc\"))'.dependencies]\n jemallocator = { version = \"0.3.2\", optional = true }\n-jemalloc-ctl = { version = \"0.3.2\", optional = true }\n+jemalloc-ctl = { version = \"0.3.3\", optional = true }\n \n [features]\n jemalloc = [ \"jemallocator\", \"jemalloc-ctl\" ]"}, {"sha": "660d85b4237d0aeae82ab323cda7324c0baba4d4", "filename": "crates/ra_prof/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_prof%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_prof%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_prof%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -214,7 +214,7 @@ impl Drop for Profiler {\n                     let start = stack.starts.pop().unwrap();\n                     let duration = start.elapsed();\n                     let level = stack.starts.len();\n-                    stack.messages.push(Message { level, duration, label: label });\n+                    stack.messages.push(Message { level, duration, label });\n                     if level == 0 {\n                         let stdout = stderr();\n                         let longer_than = stack.filter_data.longer_than;"}, {"sha": "6252241bf34b9e152727a238b9a324260fbffc39", "filename": "crates/ra_project_model/Cargo.toml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -8,16 +8,16 @@ authors = [\"rust-analyzer developers\"]\n doctest = false\n \n [dependencies]\n-log = \"0.4.5\"\n-rustc-hash = \"1.0\"\n+log = \"0.4.8\"\n+rustc-hash = \"1.1.0\"\n \n-cargo_metadata = \"0.9.0\"\n+cargo_metadata = \"0.9.1\"\n \n ra_arena = { path = \"../ra_arena\" }\n ra_db = { path = \"../ra_db\" }\n ra_cfg = { path = \"../ra_cfg\" }\n \n-serde = { version = \"1.0.89\", features = [\"derive\"] }\n-serde_json = \"1.0.39\"\n+serde = { version = \"1.0.104\", features = [\"derive\"] }\n+serde_json = \"1.0.48\"\n \n anyhow = \"1.0.26\""}, {"sha": "4fea459d5bbccc1806a977a98d98fbd6aa00ff07", "filename": "crates/ra_project_model/src/cargo_workspace.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Fcargo_workspace.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -164,7 +164,7 @@ impl CargoWorkspace {\n             // FIXME: `NoDefaultFeatures` is mutual exclusive with `SomeFeatures`\n             // https://github.com/oli-obk/cargo_metadata/issues/79\n             meta.features(CargoOpt::NoDefaultFeatures);\n-        } else if cargo_features.features.len() > 0 {\n+        } else if !cargo_features.features.is_empty() {\n             meta.features(CargoOpt::SomeFeatures(cargo_features.features.clone()));\n         }\n         if let Some(parent) = cargo_toml.parent() {\n@@ -197,7 +197,7 @@ impl CargoWorkspace {\n             let pkg_data = &mut packages[pkg];\n             pkg_by_id.insert(id, pkg);\n             for meta_tgt in meta_pkg.targets {\n-                let is_proc_macro = meta_tgt.kind.as_slice() == &[\"proc-macro\"];\n+                let is_proc_macro = meta_tgt.kind.as_slice() == [\"proc-macro\"];\n                 let tgt = targets.alloc(TargetData {\n                     pkg,\n                     name: meta_tgt.name,"}, {"sha": "e35f7fbbcbe00566442e064bd99214e394e4586d", "filename": "crates/ra_project_model/src/lib.rs", "status": "modified", "additions": 39, "deletions": 30, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_project_model%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_project_model%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -197,8 +197,9 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (crates.get(&from_crate_id), crates.get(&to_crate_id))\n                         {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                                .is_err()\n                             {\n                                 log::error!(\n                                     \"cyclic dependency {:?} -> {:?}\",\n@@ -237,8 +238,7 @@ impl ProjectWorkspace {\n                         if let (Some(&from), Some(&to)) =\n                             (sysroot_crates.get(&from), sysroot_crates.get(&to))\n                         {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(name).unwrap(), to)\n+                            if crate_graph.add_dep(from, CrateName::new(name).unwrap(), to).is_err()\n                             {\n                                 log::error!(\"cyclic dependency between sysroot crates\")\n                             }\n@@ -279,11 +279,14 @@ impl ProjectWorkspace {\n                             }\n                             if tgt.is_proc_macro(&cargo) {\n                                 if let Some(proc_macro) = libproc_macro {\n-                                    if let Err(_) = crate_graph.add_dep(\n-                                        crate_id,\n-                                        CrateName::new(\"proc_macro\").unwrap(),\n-                                        proc_macro,\n-                                    ) {\n+                                    if crate_graph\n+                                        .add_dep(\n+                                            crate_id,\n+                                            CrateName::new(\"proc_macro\").unwrap(),\n+                                            proc_macro,\n+                                        )\n+                                        .is_err()\n+                                    {\n                                         log::error!(\n                                             \"cyclic dependency on proc_macro for {}\",\n                                             pkg.name(&cargo)\n@@ -299,15 +302,19 @@ impl ProjectWorkspace {\n                     // Set deps to the core, std and to the lib target of the current package\n                     for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n                         if let Some(to) = lib_tgt {\n-                            if to != from {\n-                                if let Err(_) = crate_graph.add_dep(\n-                                    from,\n-                                    // For root projects with dashes in their name,\n-                                    // cargo metadata does not do any normalization,\n-                                    // so we do it ourselves currently\n-                                    CrateName::normalize_dashes(pkg.name(&cargo)),\n-                                    to,\n-                                ) {\n+                            if to != from\n+                                && crate_graph\n+                                    .add_dep(\n+                                        from,\n+                                        // For root projects with dashes in their name,\n+                                        // cargo metadata does not do any normalization,\n+                                        // so we do it ourselves currently\n+                                        CrateName::normalize_dashes(pkg.name(&cargo)),\n+                                        to,\n+                                    )\n+                                    .is_err()\n+                            {\n+                                {\n                                     log::error!(\n                                         \"cyclic dependency between targets of {}\",\n                                         pkg.name(&cargo)\n@@ -318,22 +325,25 @@ impl ProjectWorkspace {\n                         // core is added as a dependency before std in order to\n                         // mimic rustcs dependency order\n                         if let Some(core) = libcore {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"core\").unwrap(), core)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"core\").unwrap(), core)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on core for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(alloc) = liballoc {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"alloc\").unwrap(), alloc)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on alloc for {}\", pkg.name(&cargo))\n                             }\n                         }\n                         if let Some(std) = libstd {\n-                            if let Err(_) =\n-                                crate_graph.add_dep(from, CrateName::new(\"std\").unwrap(), std)\n+                            if crate_graph\n+                                .add_dep(from, CrateName::new(\"std\").unwrap(), std)\n+                                .is_err()\n                             {\n                                 log::error!(\"cyclic dependency on std for {}\", pkg.name(&cargo))\n                             }\n@@ -347,11 +357,10 @@ impl ProjectWorkspace {\n                     for dep in pkg.dependencies(&cargo) {\n                         if let Some(&to) = pkg_to_lib_crate.get(&dep.pkg) {\n                             for &from in pkg_crates.get(&pkg).into_iter().flatten() {\n-                                if let Err(_) = crate_graph.add_dep(\n-                                    from,\n-                                    CrateName::new(&dep.name).unwrap(),\n-                                    to,\n-                                ) {\n+                                if crate_graph\n+                                    .add_dep(from, CrateName::new(&dep.name).unwrap(), to)\n+                                    .is_err()\n+                                {\n                                     log::error!(\n                                         \"cyclic dependency {} -> {}\",\n                                         pkg.name(&cargo),\n@@ -409,7 +418,7 @@ fn find_cargo_toml(path: &Path) -> Result<PathBuf> {\n         }\n         curr = path.parent();\n     }\n-    Err(CargoTomlNotFoundError(path.to_path_buf()))?\n+    Err(CargoTomlNotFoundError(path.to_path_buf()).into())\n }\n \n pub fn get_rustc_cfg_options() -> CfgOptions {"}, {"sha": "7891628dcd2293ef660c15e0d62b7e0762e3374e", "filename": "crates/ra_syntax/Cargo.toml", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -11,22 +11,22 @@ repository = \"https://github.com/rust-analyzer/rust-analyzer\"\n doctest = false\n \n [dependencies]\n-itertools = \"0.8.0\"\n+itertools = \"0.8.2\"\n rowan = \"0.9.0\"\n rustc_lexer = \"0.1.0\"\n-rustc-hash = \"1.0.1\"\n+rustc-hash = \"1.1.0\"\n arrayvec = \"0.5.1\"\n-once_cell = \"1.2.0\"\n+once_cell = \"1.3.1\"\n \n ra_text_edit = { path = \"../ra_text_edit\" }\n ra_parser = { path = \"../ra_parser\" }\n \n # This crate transitively depends on `smol_str` via `rowan`.\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n-smol_str = { version = \"0.1.12\", features = [\"serde\"] }\n-serde = { version = \"1\", features = [\"derive\"] }\n+smol_str = { version = \"0.1.15\", features = [\"serde\"] }\n+serde = { version = \"1.0.104\", features = [\"derive\"] }\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }\n-walkdir = \"2.2.0\"\n+walkdir = \"2.3.1\""}, {"sha": "21fca99a6f2601e11e074aa05c1e5a504e0a546d", "filename": "crates/ra_syntax/src/algo.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Falgo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Falgo.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -95,16 +95,17 @@ pub fn diff(from: &SyntaxNode, to: &SyntaxNode) -> TreeDiff {\n         lhs: SyntaxElement,\n         rhs: SyntaxElement,\n     ) {\n-        if lhs.kind() == rhs.kind() && lhs.text_range().len() == rhs.text_range().len() {\n-            if match (&lhs, &rhs) {\n+        if lhs.kind() == rhs.kind()\n+            && lhs.text_range().len() == rhs.text_range().len()\n+            && match (&lhs, &rhs) {\n                 (NodeOrToken::Node(lhs), NodeOrToken::Node(rhs)) => {\n                     lhs.green() == rhs.green() || lhs.text() == rhs.text()\n                 }\n                 (NodeOrToken::Token(lhs), NodeOrToken::Token(rhs)) => lhs.text() == rhs.text(),\n                 _ => false,\n-            } {\n-                return;\n             }\n+        {\n+            return;\n         }\n         if let (Some(lhs), Some(rhs)) = (lhs.as_node(), rhs.as_node()) {\n             if lhs.children_with_tokens().count() == rhs.children_with_tokens().count() {"}, {"sha": "77cceb382536fb5e9df62cb72f63121c266d3ea0", "filename": "crates/ra_syntax/src/ast/expr_extensions.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fexpr_extensions.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -30,7 +30,7 @@ pub enum ElseBranch {\n \n impl ast::IfExpr {\n     pub fn then_branch(&self) -> Option<ast::BlockExpr> {\n-        self.blocks().nth(0)\n+        self.blocks().next()\n     }\n     pub fn else_branch(&self) -> Option<ElseBranch> {\n         let res = match self.blocks().nth(1) {\n@@ -208,7 +208,7 @@ impl ast::BinExpr {\n     }\n \n     pub fn lhs(&self) -> Option<ast::Expr> {\n-        children(self).nth(0)\n+        children(self).next()\n     }\n \n     pub fn rhs(&self) -> Option<ast::Expr> {\n@@ -271,7 +271,7 @@ impl ast::RangeExpr {\n \n impl ast::IndexExpr {\n     pub fn base(&self) -> Option<ast::Expr> {\n-        children(self).nth(0)\n+        children(self).next()\n     }\n     pub fn index(&self) -> Option<ast::Expr> {\n         children(self).nth(1)\n@@ -287,7 +287,7 @@ impl ast::ArrayExpr {\n     pub fn kind(&self) -> ArrayExprKind {\n         if self.is_repeat() {\n             ArrayExprKind::Repeat {\n-                initializer: children(self).nth(0),\n+                initializer: children(self).next(),\n                 repeat: children(self).nth(1),\n             }\n         } else {\n@@ -328,10 +328,10 @@ impl ast::Literal {\n     }\n \n     pub fn kind(&self) -> LiteralKind {\n-        const INT_SUFFIXES: [&'static str; 12] = [\n+        const INT_SUFFIXES: [&str; 12] = [\n             \"u64\", \"u32\", \"u16\", \"u8\", \"usize\", \"isize\", \"i64\", \"i32\", \"i16\", \"i8\", \"u128\", \"i128\",\n         ];\n-        const FLOAT_SUFFIXES: [&'static str; 2] = [\"f32\", \"f64\"];\n+        const FLOAT_SUFFIXES: [&str; 2] = [\"f32\", \"f64\"];\n \n         let token = self.token();\n "}, {"sha": "7c20fcc1047b2d0150c173a14949964d36689c13", "filename": "crates/ra_syntax/src/ast/make.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fmake.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -152,7 +152,7 @@ pub fn match_arm_list(arms: impl IntoIterator<Item = ast::MatchArm>) -> ast::Mat\n             format!(\"    {}{}\\n\", arm.syntax(), comma)\n         })\n         .collect::<String>();\n-    return from_text(&format!(\"{}\", arms_str));\n+    return from_text(&arms_str);\n \n     fn from_text(text: &str) -> ast::MatchArmList {\n         ast_from_text(&format!(\"fn f() {{ match () {{\\n{}}} }}\", text))"}, {"sha": "e2433913cadf10a52586dcd7c28b20bec758ed16", "filename": "crates/ra_syntax/src/parsing/text_token_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fparsing%2Ftext_token_source.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -48,7 +48,7 @@ impl<'t> TokenSource for TextTokenSource<'t> {\n \n     fn is_keyword(&self, kw: &str) -> bool {\n         let pos = self.curr.1;\n-        if !(pos < self.tokens.len()) {\n+        if pos >= self.tokens.len() {\n             return false;\n         }\n         let range = TextRange::offset_len(self.start_offsets[pos], self.tokens[pos].len);"}, {"sha": "a3214929970ba7c45009c5b885ee2b2bcd498382", "filename": "crates/ra_text_edit/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_text_edit%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_text_edit%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_text_edit%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,7 +9,7 @@ publish = false\n doctest = false\n \n [dependencies]\n-text_unit = \"0.1.6\"\n+text_unit = \"0.1.9\"\n \n [dev-dependencies]\n test_utils = { path = \"../test_utils\" }"}, {"sha": "f7230a9cac36be97f832f6c170292be98bb3ee6b", "filename": "crates/ra_tt/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_tt%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Fra_tt%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_tt%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -10,4 +10,4 @@ doctest = false\n [dependencies]\n # ideally, `serde` should be enabled by `rust-analyzer`, but we enable it here\n # to reduce number of compilations\n-smol_str = { version = \"0.1.12\", features = [\"serde\"] }\n+smol_str = { version = \"0.1.15\", features = [\"serde\"] }"}, {"sha": "c5d6e3831b1c17c6abf21c5641033d61a468174f", "filename": "crates/rust-analyzer/Cargo.toml", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -13,32 +13,32 @@ name = \"rust-analyzer\"\n path = \"./src/bin/main.rs\"\n \n [dependencies]\n-anyhow = \"1.0\"\n-crossbeam-channel = \"0.4\"\n-either = \"1.5\"\n+anyhow = \"1.0.26\"\n+crossbeam-channel = \"0.4.0\"\n+either = \"1.5.3\"\n env_logger = { version = \"0.7.1\", default-features = false }\n globset = \"0.4.4\"\n-itertools = \"0.8.0\"\n+itertools = \"0.8.2\"\n jod-thread = \"0.1.0\"\n-log = \"0.4.3\"\n-lsp-types = { version = \"0.70.0\", features = [\"proposed\"] }\n+log = \"0.4.8\"\n+lsp-types = { version = \"0.70.1\", features = [\"proposed\"] }\n parking_lot = \"0.10.0\"\n-pico-args = \"0.3.0\"\n-rand = { version = \"0.7.0\", features = [\"small_rng\"] }\n+pico-args = \"0.3.1\"\n+rand = { version = \"0.7.3\", features = [\"small_rng\"] }\n relative-path = \"1.0.0\"\n-rustc-hash = \"1.0\"\n-serde = { version = \"1.0.83\", features = [\"derive\"] }\n-serde_json = \"1.0.34\"\n+rustc-hash = \"1.1.0\"\n+serde = { version = \"1.0.104\", features = [\"derive\"] }\n+serde_json = \"1.0.48\"\n threadpool = \"1.7.1\"\n \n-lsp-server = \"0.3.0\"\n+lsp-server = \"0.3.1\"\n ra_cargo_watch = { path = \"../ra_cargo_watch\" }\n ra_ide = { path = \"../ra_ide\" }\n ra_prof = { path = \"../ra_prof\" }\n ra_project_model = { path = \"../ra_project_model\" }\n ra_syntax = { path = \"../ra_syntax\" }\n ra_text_edit = { path = \"../ra_text_edit\" }\n-ra_vfs = \"0.5.0\"\n+ra_vfs = \"0.5.2\"\n \n # This should only be used in CLI\n ra_db = { path = \"../ra_db\" }\n@@ -48,10 +48,10 @@ hir_ty = { path = \"../ra_hir_ty\", package = \"ra_hir_ty\" }\n \n \n [target.'cfg(windows)'.dependencies]\n-winapi = \"0.3\"\n+winapi = \"0.3.8\"\n \n [dev-dependencies]\n-tempfile = \"3\"\n+tempfile = \"3.1.0\"\n test_utils = { path = \"../test_utils\" }\n \n [features]"}, {"sha": "dd15b3458700cb2a61203275c069a376e79eb1ab", "filename": "crates/rust-analyzer/src/bin/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Fmain.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -4,7 +4,7 @@\n mod args;\n \n use lsp_server::Connection;\n-use ra_prof;\n+\n use rust_analyzer::{cli, from_json, show_message, Result, ServerConfig};\n \n use crate::args::HelpPrinted;"}, {"sha": "4d59db1ee787ebd1f9128390f4dc6ca73da1b434", "filename": "crates/rust-analyzer/src/cli/analysis_stats.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fcli%2Fanalysis_stats.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -130,7 +130,7 @@ pub fn analysis_stats(\n             write!(msg, \" ({:?} {})\", path, syntax_range).unwrap();\n         }\n         if verbosity.is_spammy() {\n-            bar.println(format!(\"{}\", msg));\n+            bar.println(msg.to_string());\n         }\n         bar.set_message(&msg);\n         let f_id = FunctionId::from(f);"}, {"sha": "71917a62eaf70f9304cbea596623c9f587af7984", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -206,17 +206,17 @@ pub fn main_loop(\n             let event = select! {\n                 recv(&connection.receiver) -> msg => match msg {\n                     Ok(msg) => Event::Msg(msg),\n-                    Err(RecvError) => Err(\"client exited without shutdown\")?,\n+                    Err(RecvError) => return Err(\"client exited without shutdown\".into()),\n                 },\n                 recv(task_receiver) -> task => Event::Task(task.unwrap()),\n                 recv(world_state.task_receiver) -> task => match task {\n                     Ok(task) => Event::Vfs(task),\n-                    Err(RecvError) => Err(\"vfs died\")?,\n+                    Err(RecvError) => return Err(\"vfs died\".into()),\n                 },\n                 recv(libdata_receiver) -> data => Event::Lib(data.unwrap()),\n                 recv(world_state.check_watcher.task_recv) -> task => match task {\n                     Ok(task) => Event::CheckWatcher(task),\n-                    Err(RecvError) => Err(\"check watcher died\")?,\n+                    Err(RecvError) => return Err(\"check watcher died\".into()),\n                 }\n             };\n             if let Event::Msg(Message::Request(req)) = &event {"}, {"sha": "970185deca3fcaf5a897e013088ad1f92ee13e95", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -17,7 +17,7 @@ use test_utils::skip_slow_tests;\n \n use crate::support::{project, Project};\n \n-const PROFILE: &'static str = \"\";\n+const PROFILE: &str = \"\";\n // const PROFILE: &'static str = \"*@3>100\";\n \n #[test]"}, {"sha": "e28ae61fe533933e8bfb1049c0cf7d20d53b800b", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -52,7 +52,7 @@ impl<'a> Project<'a> {\n         let tmp_dir = self.tmp_dir.unwrap_or_else(|| TempDir::new().unwrap());\n         static INIT: Once = Once::new();\n         INIT.call_once(|| {\n-            let _ = env_logger::builder().is_test(true).try_init().unwrap();\n+            env_logger::builder().is_test(true).try_init().unwrap();\n             ra_prof::set_filter(if crate::PROFILE.is_empty() {\n                 ra_prof::Filter::disabled()\n             } else {"}, {"sha": "971592b7370bff11261c88444bb974f9a6ce67f6", "filename": "crates/test_utils/Cargo.toml", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Ftest_utils%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Ftest_utils%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,5 +9,5 @@ doctest = false\n \n [dependencies]\n difference = \"2.0.0\"\n-text_unit = \"0.1.2\"\n-serde_json = \"1.0.34\"\n+text_unit = \"0.1.9\"\n+serde_json = \"1.0.48\""}, {"sha": "e6e8d71103be39a5aacfb25bf32a7ce011985780", "filename": "crates/test_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Ftest_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/crates%2Ftest_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Ftest_utils%2Fsrc%2Flib.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -279,7 +279,7 @@ pub fn find_mismatch<'a>(expected: &'a Value, actual: &'a Value) -> Option<(&'a\n                 return Some((expected, actual));\n             }\n \n-            l.values().zip(r.values()).filter_map(|(l, r)| find_mismatch(l, r)).nth(0)\n+            l.values().zip(r.values()).filter_map(|(l, r)| find_mismatch(l, r)).next()\n         }\n         (&Null, &Null) => None,\n         // magic string literal \"{...}\" acts as wildcard for any sub-JSON"}, {"sha": "a8b9b010d73a99b8bbccabcb06bd74d68cc3fe0c", "filename": "xtask/Cargo.toml", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/xtask%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/xtask%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2FCargo.toml?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -9,8 +9,8 @@ publish = false\n doctest = false\n \n [dependencies]\n-walkdir = \"2.1.3\"\n-pico-args = \"0.3.0\"\n+walkdir = \"2.3.1\"\n+pico-args = \"0.3.1\"\n quote = \"1.0.2\"\n-proc-macro2 = \"1.0.1\"\n-anyhow = \"1.0.19\"\n+proc-macro2 = \"1.0.8\"\n+anyhow = \"1.0.26\""}, {"sha": "3df021acc3059075f6455770e1283ed807bf917a", "filename": "xtask/src/install.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cecf25b72f2af84fc1535cf52d6f3c1b52802565/xtask%2Fsrc%2Finstall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cecf25b72f2af84fc1535cf52d6f3c1b52802565/xtask%2Fsrc%2Finstall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Finstall.rs?ref=cecf25b72f2af84fc1535cf52d6f3c1b52802565", "patch": "@@ -94,16 +94,15 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n             })\n     };\n \n-    let installed_extensions;\n-    if cfg!(unix) {\n+    let installed_extensions = if cfg!(unix) {\n         run!(\"npm --version\").context(\"`npm` is required to build the VS Code plugin\")?;\n         run!(\"npm install\")?;\n \n         run!(\"npm run package --scripts-prepend-node-path\")?;\n \n         let code = find_code(|bin| run!(\"{} --version\", bin).is_ok())?;\n         run!(\"{} --install-extension rust-analyzer.vsix --force\", code)?;\n-        installed_extensions = run!(\"{} --list-extensions\", code; echo = false)?;\n+        run!(\"{} --list-extensions\", code; echo = false)?\n     } else {\n         run!(\"cmd.exe /c npm --version\")\n             .context(\"`npm` is required to build the VS Code plugin\")?;\n@@ -113,8 +112,8 @@ fn install_client(ClientOpt::VsCode: ClientOpt) -> Result<()> {\n \n         let code = find_code(|bin| run!(\"cmd.exe /c {}.cmd --version\", bin).is_ok())?;\n         run!(r\"cmd.exe /c {}.cmd --install-extension rust-analyzer.vsix --force\", code)?;\n-        installed_extensions = run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?;\n-    }\n+        run!(\"cmd.exe /c {}.cmd --list-extensions\", code; echo = false)?\n+    };\n \n     if !installed_extensions.contains(\"rust-analyzer\") {\n         bail!("}]}