{"sha": "04af290d4e08e282dda0c0273f20a46f381224f4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0YWYyOTBkNGUwOGUyODJkZGEwYzAyNzNmMjBhNDZmMzgxMjI0ZjQ=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T15:22:18Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2019-11-04T15:22:18Z"}, "message": "Add TokenId Shif in macro_rules", "tree": {"sha": "a031afe34e6e94fc3bc73394da88192a8564f3c6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a031afe34e6e94fc3bc73394da88192a8564f3c6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/04af290d4e08e282dda0c0273f20a46f381224f4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/04af290d4e08e282dda0c0273f20a46f381224f4", "html_url": "https://github.com/rust-lang/rust/commit/04af290d4e08e282dda0c0273f20a46f381224f4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/04af290d4e08e282dda0c0273f20a46f381224f4/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9f1effd011b906903891c09f1cb6b2a42f73e95", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9f1effd011b906903891c09f1cb6b2a42f73e95", "html_url": "https://github.com/rust-lang/rust/commit/f9f1effd011b906903891c09f1cb6b2a42f73e95"}], "stats": {"total": 76, "additions": 74, "deletions": 2}, "files": [{"sha": "7d4a5f307efa86281f44adb6162af3cc8c8ca79d", "filename": "crates/ra_mbe/src/lib.rs", "status": "modified", "additions": 47, "deletions": 2, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/04af290d4e08e282dda0c0273f20a46f381224f4/crates%2Fra_mbe%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04af290d4e08e282dda0c0273f20a46f381224f4/crates%2Fra_mbe%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Flib.rs?ref=04af290d4e08e282dda0c0273f20a46f381224f4", "patch": "@@ -42,6 +42,8 @@ pub use crate::syntax_bridge::{\n #[derive(Clone, Debug, PartialEq, Eq)]\n pub struct MacroRules {\n     pub(crate) rules: Vec<Rule>,\n+    /// Highest id of the token we have in TokenMap\n+    pub(crate) shift: Option<u32>,\n }\n \n #[derive(Clone, Debug, PartialEq, Eq)]\n@@ -50,6 +52,42 @@ pub(crate) struct Rule {\n     pub(crate) rhs: tt::Subtree,\n }\n \n+/// Find the \"shift\" (the highest id of the TokenId) inside a subtree\n+fn find_subtree_shift(tt: &tt::Subtree, mut cur: Option<u32>) -> Option<u32> {\n+    use std::cmp::max;\n+\n+    for t in &tt.token_trees {\n+        cur = match t {\n+            tt::TokenTree::Leaf(leaf) => match leaf {\n+                tt::Leaf::Ident(ident) if ident.id != tt::TokenId::unspecified() => {\n+                    Some(max(cur.unwrap_or(0), ident.id.0))\n+                }\n+                _ => cur,\n+            },\n+            tt::TokenTree::Subtree(tt) => find_subtree_shift(tt, cur),\n+        }\n+    }\n+\n+    cur\n+}\n+\n+/// Shift given TokenTree token id\n+fn shift_token_tree(tt: &mut tt::Subtree, shift: u32) {\n+    for t in tt.token_trees.iter_mut() {\n+        match t {\n+            tt::TokenTree::Leaf(leaf) => match leaf {\n+                tt::Leaf::Ident(ident) if ident.id != tt::TokenId::unspecified() => {\n+                    // Note that TokenId is started from zero,\n+                    // We have to add 1 to prevent duplication.\n+                    ident.id.0 += shift + 1;\n+                }\n+                _ => (),\n+            },\n+            tt::TokenTree::Subtree(tt) => shift_token_tree(tt, shift),\n+        }\n+    }\n+}\n+\n impl MacroRules {\n     pub fn parse(tt: &tt::Subtree) -> Result<MacroRules, ParseError> {\n         // Note: this parsing can be implemented using mbe machinery itself, by\n@@ -72,10 +110,17 @@ impl MacroRules {\n             validate(&rule.lhs)?;\n         }\n \n-        Ok(MacroRules { rules })\n+        Ok(MacroRules { rules, shift: find_subtree_shift(tt, None) })\n     }\n+\n     pub fn expand(&self, tt: &tt::Subtree) -> Result<tt::Subtree, ExpandError> {\n-        mbe_expander::expand(self, tt)\n+        // apply shift\n+        let mut tt = tt.clone();\n+        if let Some(shift) = self.shift {\n+            shift_token_tree(&mut tt, shift)\n+        }\n+\n+        mbe_expander::expand(self, &tt)\n     }\n }\n "}, {"sha": "a23e3afe3e7afe10a02ae7a95327e5ba78321880", "filename": "crates/ra_mbe/src/tests.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/04af290d4e08e282dda0c0273f20a46f381224f4/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/04af290d4e08e282dda0c0273f20a46f381224f4/crates%2Fra_mbe%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_mbe%2Fsrc%2Ftests.rs?ref=04af290d4e08e282dda0c0273f20a46f381224f4", "patch": "@@ -58,6 +58,33 @@ mod rule_parsing {\n // * Port the test to rust and add it to this module\n // * Make it pass :-)\n \n+#[test]\n+fn test_token_id_shift() {\n+    let macro_definition = r#\"\n+macro_rules! foobar {\n+    ($e:ident) => { foo bar $e }\n+}\n+\"#;\n+    let rules = create_rules(macro_definition);\n+    let expansion = expand(&rules, \"foobar!(baz);\");\n+\n+    fn get_id(t: &tt::TokenTree) -> Option<u32> {\n+        if let tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) = t {\n+            return Some(ident.id.0);\n+        }\n+        None\n+    }\n+\n+    assert_eq!(expansion.token_trees.len(), 3);\n+    // ($e:ident) => { foo bar $e }\n+    //   0 1            2   3   4\n+    assert_eq!(get_id(&expansion.token_trees[0]), Some(2));\n+    assert_eq!(get_id(&expansion.token_trees[1]), Some(3));\n+\n+    // So baz should be 5\n+    assert_eq!(get_id(&expansion.token_trees[2]), Some(5));\n+}\n+\n #[test]\n fn test_convert_tt() {\n     let macro_definition = r#\""}]}