{"sha": "2984da672e0c73d56501c6b6e4d19fd28152b5eb", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5ODRkYTY3MmUwYzczZDU2NTAxYzZiNmU0ZDE5ZmQyODE1MmI1ZWI=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T09:42:51Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T09:50:56Z"}, "message": "Split ItemList & AssocItemList", "tree": {"sha": "ca9e499bd96c2273f90f27d43ba7282b5931f8df", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca9e499bd96c2273f90f27d43ba7282b5931f8df"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2984da672e0c73d56501c6b6e4d19fd28152b5eb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2984da672e0c73d56501c6b6e4d19fd28152b5eb", "html_url": "https://github.com/rust-lang/rust/commit/2984da672e0c73d56501c6b6e4d19fd28152b5eb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2984da672e0c73d56501c6b6e4d19fd28152b5eb/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72ffd851dd5b0fcdf3aa072131ba11009878b4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/72ffd851dd5b0fcdf3aa072131ba11009878b4ae", "html_url": "https://github.com/rust-lang/rust/commit/72ffd851dd5b0fcdf3aa072131ba11009878b4ae"}], "stats": {"total": 220, "additions": 131, "deletions": 89}, "files": [{"sha": "a2d9006e4885208514bcdaebfd5121f564c40d9e", "filename": "crates/ra_assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -112,7 +112,7 @@ fn add_missing_impl_members_inner(\n ) -> Option<()> {\n     let _p = ra_prof::profile(\"add_missing_impl_members_inner\");\n     let impl_def = ctx.find_node_at_offset::<ast::ImplDef>()?;\n-    let impl_item_list = impl_def.item_list()?;\n+    let impl_item_list = impl_def.assoc_item_list()?;\n \n     let trait_ = resolve_target_trait(&ctx.sema, &impl_def)?;\n \n@@ -121,6 +121,7 @@ fn add_missing_impl_members_inner(\n             ast::AssocItem::FnDef(def) => def.name(),\n             ast::AssocItem::TypeAliasDef(def) => def.name(),\n             ast::AssocItem::ConstDef(def) => def.name(),\n+            ast::AssocItem::MacroCall(_) => None,\n         }\n         .map(|it| it.text().clone())\n     };"}, {"sha": "25bc171bfb1367037c9e61b2f9af8317091e7f2a", "filename": "crates/ra_assists/src/handlers/generate_new.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fgenerate_new.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -158,7 +158,7 @@ fn find_struct_impl(ctx: &AssistContext, strukt: &ast::StructDef) -> Option<Opti\n }\n \n fn has_new_fn(imp: &ast::ImplDef) -> bool {\n-    if let Some(il) = imp.item_list() {\n+    if let Some(il) = imp.assoc_item_list() {\n         for item in il.assoc_items() {\n             if let ast::AssocItem::FnDef(f) = item {\n                 if let Some(name) = f.name() {"}, {"sha": "6b73fff44cdecad2365a895557f7d5287b782703", "filename": "crates/ra_assists/src/handlers/move_bounds.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Fhandlers%2Fmove_bounds.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -38,8 +38,8 @@ pub(crate) fn move_bounds_to_where_clause(acc: &mut Assists, ctx: &AssistContext\n     let anchor = match_ast! {\n         match parent {\n             ast::FnDef(it) => it.body()?.syntax().clone().into(),\n-            ast::TraitDef(it) => it.item_list()?.syntax().clone().into(),\n-            ast::ImplDef(it) => it.item_list()?.syntax().clone().into(),\n+            ast::TraitDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n+            ast::ImplDef(it) => it.assoc_item_list()?.syntax().clone().into(),\n             ast::EnumDef(it) => it.variant_list()?.syntax().clone().into(),\n             ast::StructDef(it) => {\n                 it.syntax().children_with_tokens()"}, {"sha": "27c33df2320578f19647a4724169008f569d66f1", "filename": "crates/ra_assists/src/utils.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_assists%2Fsrc%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_assists%2Fsrc%2Futils.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -63,7 +63,7 @@ pub fn get_missing_assoc_items(\n     let mut impl_fns_consts = FxHashSet::default();\n     let mut impl_type = FxHashSet::default();\n \n-    if let Some(item_list) = impl_def.item_list() {\n+    if let Some(item_list) = impl_def.assoc_item_list() {\n         for item in item_list.assoc_items() {\n             match item {\n                 ast::AssocItem::FnDef(f) => {\n@@ -83,6 +83,7 @@ pub fn get_missing_assoc_items(\n                         impl_fns_consts.insert(n.syntax().to_string());\n                     }\n                 }\n+                ast::AssocItem::MacroCall(_) => (),\n             }\n         }\n     }"}, {"sha": "4fc21a642cedc21b831909ce42a79e68e8cab42c", "filename": "crates/ra_hir_def/src/item_tree/lower.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fitem_tree%2Flower.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -153,13 +153,12 @@ impl Ctx {\n         self.forced_visibility = forced_vis;\n     }\n \n-    fn lower_assoc_item(&mut self, item: &ast::Item) -> Option<AssocItem> {\n+    fn lower_assoc_item(&mut self, item: &ast::AssocItem) -> Option<AssocItem> {\n         match item {\n-            ast::Item::FnDef(ast) => self.lower_function(ast).map(Into::into),\n-            ast::Item::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n-            ast::Item::ConstDef(ast) => Some(self.lower_const(ast).into()),\n-            ast::Item::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n-            _ => None,\n+            ast::AssocItem::FnDef(ast) => self.lower_function(ast).map(Into::into),\n+            ast::AssocItem::TypeAliasDef(ast) => self.lower_type_alias(ast).map(Into::into),\n+            ast::AssocItem::ConstDef(ast) => Some(self.lower_const(ast).into()),\n+            ast::AssocItem::MacroCall(ast) => self.lower_macro_call(ast).map(Into::into),\n         }\n     }\n \n@@ -419,9 +418,9 @@ impl Ctx {\n         let generic_params =\n             self.lower_generic_params_and_inner_items(GenericsOwner::Trait(trait_def), trait_def);\n         let auto = trait_def.auto_token().is_some();\n-        let items = trait_def.item_list().map(|list| {\n+        let items = trait_def.assoc_item_list().map(|list| {\n             self.with_inherited_visibility(visibility, |this| {\n-                list.items()\n+                list.assoc_items()\n                     .filter_map(|item| {\n                         let attrs = Attrs::new(&item, &this.hygiene);\n                         this.collect_inner_items(item.syntax());\n@@ -454,9 +453,9 @@ impl Ctx {\n \n         // We cannot use `assoc_items()` here as that does not include macro calls.\n         let items = impl_def\n-            .item_list()\n+            .assoc_item_list()\n             .into_iter()\n-            .flat_map(|it| it.items())\n+            .flat_map(|it| it.assoc_items())\n             .filter_map(|item| {\n                 self.collect_inner_items(item.syntax());\n                 let assoc = self.lower_assoc_item(&item)?;"}, {"sha": "d4b6112a5a6943b9fe40200ce9f9de511fcc9d8f", "filename": "crates/ra_ide/src/completion/complete_fn_param.rs", "status": "modified", "additions": 24, "deletions": 14, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_fn_param.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -18,26 +18,36 @@ pub(super) fn complete_fn_param(acc: &mut Completions, ctx: &CompletionContext)\n     }\n \n     let mut params = FxHashMap::default();\n+\n     let me = ctx.token.ancestors().find_map(ast::FnDef::cast);\n+    let mut process_fn = |func: ast::FnDef| {\n+        if Some(&func) == me.as_ref() {\n+            return;\n+        }\n+        func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n+            let text = param.syntax().text().to_string();\n+            params.entry(text).or_insert(param);\n+        })\n+    };\n+\n     for node in ctx.token.parent().ancestors() {\n-        let items = match_ast! {\n+        match_ast! {\n             match node {\n-                ast::SourceFile(it) => it.items(),\n-                ast::ItemList(it) => it.items(),\n+                ast::SourceFile(it) => it.items().filter_map(|item| match item {\n+                    ast::Item::FnDef(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n+                ast::ItemList(it) => it.items().filter_map(|item| match item {\n+                    ast::Item::FnDef(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n+                ast::AssocItemList(it) => it.assoc_items().filter_map(|item| match item {\n+                    ast::AssocItem::FnDef(it) => Some(it),\n+                    _ => None,\n+                }).for_each(&mut process_fn),\n                 _ => continue,\n             }\n         };\n-        for item in items {\n-            if let ast::Item::FnDef(func) = item {\n-                if Some(&func) == me.as_ref() {\n-                    continue;\n-                }\n-                func.param_list().into_iter().flat_map(|it| it.params()).for_each(|param| {\n-                    let text = param.syntax().text().to_string();\n-                    params.entry(text).or_insert(param);\n-                })\n-            }\n-        }\n     }\n \n     params"}, {"sha": "1581b2d5d8e8f7202e612d445c00dab44bd4fc9a", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 16, "deletions": 20, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -66,27 +66,24 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"fn\", \"fn $0() {}\")\n         }\n \n-        if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-            || ctx.block_expr_parent\n-        {\n+        if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n             add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n             add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n         }\n \n         return;\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+    if ctx.has_item_list_or_source_file_parent || has_trait_or_impl_parent || ctx.block_expr_parent\n+    {\n         add_keyword(ctx, acc, \"fn\", \"fn $0() {}\");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"use\", \"use \");\n         add_keyword(ctx, acc, \"impl\", \"impl $0 {}\");\n         add_keyword(ctx, acc, \"trait\", \"trait $0 {}\");\n     }\n \n-    if ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent {\n+    if ctx.has_item_list_or_source_file_parent {\n         add_keyword(ctx, acc, \"enum\", \"enum $0 {}\");\n         add_keyword(ctx, acc, \"struct\", \"struct $0\");\n         add_keyword(ctx, acc, \"union\", \"union $0 {}\");\n@@ -108,29 +105,28 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n         add_keyword(ctx, acc, \"else\", \"else {$0}\");\n         add_keyword(ctx, acc, \"else if\", \"else if $0 {}\");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"mod\", \"mod $0 {}\");\n     }\n     if ctx.bind_pat_parent || ctx.ref_pat_parent {\n         add_keyword(ctx, acc, \"mut\", \"mut \");\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent {\n+    if ctx.has_item_list_or_source_file_parent || has_trait_or_impl_parent || ctx.block_expr_parent\n+    {\n         add_keyword(ctx, acc, \"const\", \"const \");\n         add_keyword(ctx, acc, \"type\", \"type \");\n     }\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"static\", \"static \");\n     };\n-    if (ctx.has_item_list_or_source_file_parent && !has_trait_or_impl_parent)\n-        || ctx.block_expr_parent\n-    {\n+    if (ctx.has_item_list_or_source_file_parent) || ctx.block_expr_parent {\n         add_keyword(ctx, acc, \"extern\", \"extern \");\n     }\n-    if ctx.has_item_list_or_source_file_parent || ctx.block_expr_parent || ctx.is_match_arm {\n+    if ctx.has_item_list_or_source_file_parent\n+        || has_trait_or_impl_parent\n+        || ctx.block_expr_parent\n+        || ctx.is_match_arm\n+    {\n         add_keyword(ctx, acc, \"unsafe\", \"unsafe \");\n     }\n     if ctx.in_loop_body {\n@@ -142,7 +138,7 @@ pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionConte\n             add_keyword(ctx, acc, \"break\", \"break\");\n         }\n     }\n-    if ctx.has_item_list_or_source_file_parent && !ctx.has_trait_parent {\n+    if ctx.has_item_list_or_source_file_parent || ctx.has_impl_parent {\n         add_keyword(ctx, acc, \"pub\", \"pub \")\n     }\n "}, {"sha": "175209d8ac71a1c8fdc16bebc4e072aab82279b5", "filename": "crates/ra_ide/src/completion/patterns.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpatterns.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -13,7 +13,7 @@ use crate::completion::test_utils::check_pattern_is_applicable;\n \n pub(crate) fn has_trait_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ITEM_LIST)\n+        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n         .filter(|it| it.kind() == TRAIT_DEF)\n         .is_some()\n@@ -25,7 +25,7 @@ fn test_has_trait_parent() {\n \n pub(crate) fn has_impl_parent(element: SyntaxElement) -> bool {\n     not_same_range_ancestor(element)\n-        .filter(|it| it.kind() == ITEM_LIST)\n+        .filter(|it| it.kind() == ASSOC_ITEM_LIST)\n         .and_then(|it| it.parent())\n         .filter(|it| it.kind() == IMPL_DEF)\n         .is_some()\n@@ -73,7 +73,7 @@ pub(crate) fn has_item_list_or_source_file_parent(element: SyntaxElement) -> boo\n #[test]\n fn test_has_item_list_or_source_file_parent() {\n     check_pattern_is_applicable(r\"i<|>\", has_item_list_or_source_file_parent);\n-    check_pattern_is_applicable(r\"impl { f<|> }\", has_item_list_or_source_file_parent);\n+    check_pattern_is_applicable(r\"mod foo { f<|> }\", has_item_list_or_source_file_parent);\n }\n \n pub(crate) fn is_match_arm(element: SyntaxElement) -> bool {"}, {"sha": "ef9c8ff5b03f2d00d2a2ad95d17f77d2b9d26a2e", "filename": "crates/ra_parser/src/grammar/items/traits.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fgrammar%2Fitems%2Ftraits.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -50,7 +50,7 @@ pub(crate) fn trait_item_list(p: &mut Parser) {\n         item_or_macro(p, true, ItemFlavor::Trait);\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ITEM_LIST);\n+    m.complete(p, ASSOC_ITEM_LIST);\n }\n \n // test impl_def\n@@ -107,7 +107,7 @@ pub(crate) fn impl_item_list(p: &mut Parser) {\n         item_or_macro(p, true, ItemFlavor::Mod);\n     }\n     p.expect(T!['}']);\n-    m.complete(p, ITEM_LIST);\n+    m.complete(p, ASSOC_ITEM_LIST);\n }\n \n // test impl_type_params"}, {"sha": "56dadc6af0ecc50321fd2adc5dec0db4490fb2b8", "filename": "crates/ra_parser/src/syntax_kind/generated.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_parser%2Fsrc%2Fsyntax_kind%2Fgenerated.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -213,6 +213,7 @@ pub enum SyntaxKind {\n     TUPLE_FIELD_DEF,\n     ENUM_VARIANT_LIST,\n     ITEM_LIST,\n+    ASSOC_ITEM_LIST,\n     ATTR,\n     META_ITEM,\n     USE_TREE,"}, {"sha": "01a310f66de1d6dabbeef2c576abf750ff076e67", "filename": "crates/ra_syntax/src/ast/edit.rs", "status": "modified", "additions": 6, "deletions": 3, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fedit.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -80,9 +80,12 @@ where\n     }\n }\n \n-impl ast::ItemList {\n+impl ast::AssocItemList {\n     #[must_use]\n-    pub fn append_items(&self, items: impl IntoIterator<Item = ast::AssocItem>) -> ast::ItemList {\n+    pub fn append_items(\n+        &self,\n+        items: impl IntoIterator<Item = ast::AssocItem>,\n+    ) -> ast::AssocItemList {\n         let mut res = self.clone();\n         if !self.syntax().text().contains_char('\\n') {\n             res = make_multiline(res);\n@@ -92,7 +95,7 @@ impl ast::ItemList {\n     }\n \n     #[must_use]\n-    pub fn append_item(&self, item: ast::AssocItem) -> ast::ItemList {\n+    pub fn append_item(&self, item: ast::AssocItem) -> ast::AssocItemList {\n         let (indent, position) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),"}, {"sha": "7ccb7ea7fac2651c5aea9b8e5a533af2f3bb4d36", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 50, "deletions": 21, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -112,7 +112,7 @@ impl ImplDef {\n     pub fn impl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![impl]) }\n     pub fn excl_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![!]) }\n     pub fn for_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![for]) }\n-    pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n+    pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroCall {\n@@ -180,7 +180,7 @@ impl TraitDef {\n     pub fn unsafe_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![unsafe]) }\n     pub fn auto_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![auto]) }\n     pub fn trait_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![trait]) }\n-    pub fn item_list(&self) -> Option<ItemList> { support::child(&self.syntax) }\n+    pub fn assoc_item_list(&self) -> Option<AssocItemList> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeAliasDef {\n@@ -238,18 +238,27 @@ impl Visibility {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Abi {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Abi {}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct Name {\n     pub(crate) syntax: SyntaxNode,\n }\n impl Name {\n     pub fn ident_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![ident]) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct ItemList {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl ast::ModuleItemOwner for ItemList {}\n+impl ItemList {\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Abi {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Abi {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct TypeParamList {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -367,11 +376,10 @@ impl TypeBoundList {\n     pub fn bounds(&self) -> AstChildren<TypeBound> { support::children(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct ItemList {\n+pub struct AssocItemList {\n     pub(crate) syntax: SyntaxNode,\n }\n-impl ast::ModuleItemOwner for ItemList {}\n-impl ItemList {\n+impl AssocItemList {\n     pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n     pub fn assoc_items(&self) -> AstChildren<AssocItem> { support::children(&self.syntax) }\n     pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n@@ -1336,10 +1344,10 @@ pub enum AssocItem {\n     FnDef(FnDef),\n     TypeAliasDef(TypeAliasDef),\n     ConstDef(ConstDef),\n+    MacroCall(MacroCall),\n }\n impl ast::AttrsOwner for AssocItem {}\n impl ast::NameOwner for AssocItem {}\n-impl ast::VisibilityOwner for AssocItem {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Pat {\n     OrPat(OrPat),\n@@ -1574,8 +1582,8 @@ impl AstNode for Visibility {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Abi {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n+impl AstNode for Name {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1585,8 +1593,19 @@ impl AstNode for Abi {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Name {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == NAME }\n+impl AstNode for ItemList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ITEM_LIST }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for Abi {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ABI }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -1728,8 +1747,8 @@ impl AstNode for TypeBoundList {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for ItemList {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == ITEM_LIST }\n+impl AstNode for AssocItemList {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == ASSOC_ITEM_LIST }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         if Self::can_cast(syntax.kind()) {\n             Some(Self { syntax })\n@@ -3144,10 +3163,13 @@ impl From<TypeAliasDef> for AssocItem {\n impl From<ConstDef> for AssocItem {\n     fn from(node: ConstDef) -> AssocItem { AssocItem::ConstDef(node) }\n }\n+impl From<MacroCall> for AssocItem {\n+    fn from(node: MacroCall) -> AssocItem { AssocItem::MacroCall(node) }\n+}\n impl AstNode for AssocItem {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            FN_DEF | TYPE_ALIAS_DEF | CONST_DEF => true,\n+            FN_DEF | TYPE_ALIAS_DEF | CONST_DEF | MACRO_CALL => true,\n             _ => false,\n         }\n     }\n@@ -3156,6 +3178,7 @@ impl AstNode for AssocItem {\n             FN_DEF => AssocItem::FnDef(FnDef { syntax }),\n             TYPE_ALIAS_DEF => AssocItem::TypeAliasDef(TypeAliasDef { syntax }),\n             CONST_DEF => AssocItem::ConstDef(ConstDef { syntax }),\n+            MACRO_CALL => AssocItem::MacroCall(MacroCall { syntax }),\n             _ => return None,\n         };\n         Some(res)\n@@ -3165,6 +3188,7 @@ impl AstNode for AssocItem {\n             AssocItem::FnDef(it) => &it.syntax,\n             AssocItem::TypeAliasDef(it) => &it.syntax,\n             AssocItem::ConstDef(it) => &it.syntax,\n+            AssocItem::MacroCall(it) => &it.syntax,\n         }\n     }\n }\n@@ -3515,12 +3539,17 @@ impl std::fmt::Display for Visibility {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Abi {\n+impl std::fmt::Display for Name {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Name {\n+impl std::fmt::Display for ItemList {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for Abi {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3585,7 +3614,7 @@ impl std::fmt::Display for TypeBoundList {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for ItemList {\n+impl std::fmt::Display for AssocItemList {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }"}, {"sha": "d2a408e775ccd0e5ebbef56822b4d408b498d377", "filename": "xtask/src/ast_src.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/xtask%2Fsrc%2Fast_src.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/xtask%2Fsrc%2Fast_src.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fast_src.rs?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -186,6 +186,7 @@ pub(crate) const KINDS_SRC: KindsSrc = KindsSrc {\n         \"TUPLE_FIELD_DEF\",\n         \"ENUM_VARIANT_LIST\",\n         \"ITEM_LIST\",\n+        \"ASSOC_ITEM_LIST\",\n         \"ATTR\",\n         \"META_ITEM\", // not an item actually\n         \"USE_TREE\","}, {"sha": "d0518ceadf382691fb6b028014ec6f4a7ea9f7ef", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 12, "deletions": 11, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/2984da672e0c73d56501c6b6e4d19fd28152b5eb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/2984da672e0c73d56501c6b6e4d19fd28152b5eb/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=2984da672e0c73d56501c6b6e4d19fd28152b5eb", "patch": "@@ -19,6 +19,13 @@ Item =\n | UnionDef\n | UseItem\n \n+Module =\n+  Attr* Visibility? 'mod' Name\n+  (ItemList | ';')\n+\n+ItemList =\n+  '{' Item* '}'\n+\n FnDef =\n  Attr* Visibility? Abi? 'const' 'default' 'async' 'unsafe' 'fn' Name TypeParamList?\n  ParamList RetType?\n@@ -67,17 +74,10 @@ EnumVariant =\n TraitDef =\n   Attr* Visibility? 'unsafe'? 'auto'? 'trait' Name TypeParamList\n   (':' TypeBoundList?)? WhereClause\n-  ItemList\n+  AssocItemList\n \n-Module =\n-  Attr* Visibility? 'mod' Name\n-  (ItemList | ';')\n-\n-ItemList =\n-  '{'\n-    AssocItem*\n-    Item*\n-  '}'\n+AssocItemList =\n+  '{' AssocItem* '}'\n \n ConstDef =\n   Attr* Visibility? 'default'? 'const' Name ':' ascribed_type:TypeRef\n@@ -94,7 +94,7 @@ TypeAliasDef =\n ImplDef =\n  Attr* Visibility? 'const'? 'default'? 'unsafe'? 'impl' TypeParamList? '!'? 'for'\n  WhereClause?\n- ItemList\n+ AssocItemList\n \n ParenType =\n   '(' TypeRef ')'\n@@ -467,6 +467,7 @@ AssocItem =\n   FnDef\n | TypeAliasDef\n | ConstDef\n+| MacroCall\n \n ExternItem =\n   FnDef | StaticDef"}]}