{"sha": "1a08b1704472320e8b1c03c0cf8cd9d4958343e0", "node_id": "C_kwDOAAsO6NoAKDFhMDhiMTcwNDQ3MjMyMGU4YjFjMDNjMGNmOGNkOWQ0OTU4MzQzZTA", "commit": {"author": {"name": "Preston From", "email": "prestonfrom@gmail.com", "date": "2022-07-26T05:23:33Z"}, "committer": {"name": "Preston From", "email": "prestonfrom@gmail.com", "date": "2022-07-26T05:23:33Z"}, "message": "Use Span::from_inner and make changes to precision inner span clearer", "tree": {"sha": "4faa7cd46546fe7056cb218b78b227d89a5d4b0e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4faa7cd46546fe7056cb218b78b227d89a5d4b0e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1a08b1704472320e8b1c03c0cf8cd9d4958343e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1a08b1704472320e8b1c03c0cf8cd9d4958343e0", "html_url": "https://github.com/rust-lang/rust/commit/1a08b1704472320e8b1c03c0cf8cd9d4958343e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1a08b1704472320e8b1c03c0cf8cd9d4958343e0/comments", "author": {"login": "PrestonFrom", "id": 12164367, "node_id": "MDQ6VXNlcjEyMTY0MzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12164367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrestonFrom", "html_url": "https://github.com/PrestonFrom", "followers_url": "https://api.github.com/users/PrestonFrom/followers", "following_url": "https://api.github.com/users/PrestonFrom/following{/other_user}", "gists_url": "https://api.github.com/users/PrestonFrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrestonFrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrestonFrom/subscriptions", "organizations_url": "https://api.github.com/users/PrestonFrom/orgs", "repos_url": "https://api.github.com/users/PrestonFrom/repos", "events_url": "https://api.github.com/users/PrestonFrom/events{/privacy}", "received_events_url": "https://api.github.com/users/PrestonFrom/received_events", "type": "User", "site_admin": false}, "committer": {"login": "PrestonFrom", "id": 12164367, "node_id": "MDQ6VXNlcjEyMTY0MzY3", "avatar_url": "https://avatars.githubusercontent.com/u/12164367?v=4", "gravatar_id": "", "url": "https://api.github.com/users/PrestonFrom", "html_url": "https://github.com/PrestonFrom", "followers_url": "https://api.github.com/users/PrestonFrom/followers", "following_url": "https://api.github.com/users/PrestonFrom/following{/other_user}", "gists_url": "https://api.github.com/users/PrestonFrom/gists{/gist_id}", "starred_url": "https://api.github.com/users/PrestonFrom/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/PrestonFrom/subscriptions", "organizations_url": "https://api.github.com/users/PrestonFrom/orgs", "repos_url": "https://api.github.com/users/PrestonFrom/repos", "events_url": "https://api.github.com/users/PrestonFrom/events{/privacy}", "received_events_url": "https://api.github.com/users/PrestonFrom/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3330c7d1c3bcfd2c452b794db66705b92fb54a3c", "html_url": "https://github.com/rust-lang/rust/commit/3330c7d1c3bcfd2c452b794db66705b92fb54a3c"}], "stats": {"total": 30, "additions": 14, "deletions": 16}, "files": [{"sha": "b53de4a36b2482ec45b7e20ffa399c9d2ed6beea", "filename": "compiler/rustc_builtin_macros/src/format.rs", "status": "modified", "additions": 14, "deletions": 16, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/1a08b1704472320e8b1c03c0cf8cd9d4958343e0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1a08b1704472320e8b1c03c0cf8cd9d4958343e0/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fformat.rs?ref=1a08b1704472320e8b1c03c0cf8cd9d4958343e0", "patch": "@@ -64,20 +64,9 @@ impl PositionalNamedArg {\n     /// Determines what span to replace with the name of the named argument\n     fn get_span_to_replace(&self, cx: &Context<'_, '_>) -> Option<Span> {\n         if let Some(inner_span) = &self.inner_span_to_replace {\n-            return match self.ty {\n-                PositionalNamedArgType::Arg | PositionalNamedArgType::Width => Some(Span::new(\n-                    cx.fmtsp.lo() + BytePos(inner_span.start.try_into().unwrap()),\n-                    cx.fmtsp.lo() + BytePos(inner_span.end.try_into().unwrap()),\n-                    self.positional_named_arg_span.ctxt(),\n-                    self.positional_named_arg_span.parent(),\n-                )),\n-                PositionalNamedArgType::Precision => Some(Span::new(\n-                    cx.fmtsp.lo() + BytePos(inner_span.start.try_into().unwrap()) + BytePos(1),\n-                    cx.fmtsp.lo() + BytePos(inner_span.end.try_into().unwrap()),\n-                    self.positional_named_arg_span.ctxt(),\n-                    self.positional_named_arg_span.parent(),\n-                )),\n-            };\n+            return Some(\n+                cx.fmtsp.from_inner(InnerSpan { start: inner_span.start, end: inner_span.end }),\n+            );\n         } else if self.ty == PositionalNamedArgType::Arg {\n             // In the case of a named argument whose position is implicit, there will not be a span\n             // to replace. Instead, we insert the name after the `{`, which is the first character\n@@ -111,7 +100,7 @@ impl PositionalNamedArgsLint {\n         format_argument_index: usize,\n         ty: PositionalNamedArgType,\n         cur_piece: usize,\n-        inner_span: Option<rustc_parse_format::InnerSpan>,\n+        mut inner_span_to_replace: Option<rustc_parse_format::InnerSpan>,\n         names: &FxHashMap<Symbol, (usize, Span)>,\n     ) {\n         let named_arg = names\n@@ -120,10 +109,19 @@ impl PositionalNamedArgsLint {\n             .map(|found| found.clone());\n \n         if let Some(named_arg) = named_arg {\n+            // In FormatSpec, `precision_span` starts at the leading `.`, which we want to keep in\n+            // the lint suggestion, so increment `start` by 1 when `PositionalArgumentType` is\n+            // `Precision`.\n+            if ty == PositionalNamedArgType::Precision {\n+                inner_span_to_replace = inner_span_to_replace.map(|mut is| {\n+                    is.start += 1;\n+                    is\n+                });\n+            }\n             self.positional_named_args.push(PositionalNamedArg {\n                 ty,\n                 cur_piece,\n-                inner_span_to_replace: inner_span,\n+                inner_span_to_replace,\n                 replacement: named_arg.0.clone(),\n                 positional_named_arg_span: named_arg.1.1.clone(),\n             });"}]}