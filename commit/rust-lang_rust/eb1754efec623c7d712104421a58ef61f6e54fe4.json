{"sha": "eb1754efec623c7d712104421a58ef61f6e54fe4", "node_id": "MDY6Q29tbWl0NzI0NzEyOmViMTc1NGVmZWM2MjNjN2Q3MTIxMDQ0MjFhNThlZjYxZjZlNTRmZTQ=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-07-11T06:26:43Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-11T06:26:43Z"}, "message": "Rollup merge of #74122 - nnethercote:startup-cleanup, r=petrochenkov\n\nStart-up clean-up\n\nr? @petrochenkov", "tree": {"sha": "254f5bbbce89db505a59c030cf004b07dfbd5dc1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/254f5bbbce89db505a59c030cf004b07dfbd5dc1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/eb1754efec623c7d712104421a58ef61f6e54fe4", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfCVujCRBK7hj4Ov3rIwAAdHIIAJ4P6Yf+EObr1np40ONn5eAW\nGzG9BiMI1QRoKv62VNTokjZKmD6lJk7CiT1lyKeLvQcUz92ZMi6BOzz3F1OC1J+K\n1iqducWueHBOX9+5I8yNwx6PyFk07TpjWmRj3X0jhwlSFdZTBIZxIgKhYVPYTKJv\nZthTAO/u+2jggzen/AsIHd2KUILs2cK9Q+GqMZ1QW7ILKtFRIb3eLlB/CRAHrdp8\nJ2WIXdXBUqWgIWn1ttGfGcLthPOBMd0rT2XuVTiYblUmRnp6agcsbtlhinxj05kH\nGU4NX6/AyH09OcLJe+6ZdclVX4uLKpazzwqFUBdALHqpwZd16cxYz/DcrErrjBk=\n=kuIG\n-----END PGP SIGNATURE-----\n", "payload": "tree 254f5bbbce89db505a59c030cf004b07dfbd5dc1\nparent 8efa197ee4477340095f7455dde2de2c990cace0\nparent bf7078615b868f7359bff58933fd5236fabe7280\nauthor Manish Goregaokar <manishsmail@gmail.com> 1594448803 -0700\ncommitter GitHub <noreply@github.com> 1594448803 -0700\n\nRollup merge of #74122 - nnethercote:startup-cleanup, r=petrochenkov\n\nStart-up clean-up\n\nr? @petrochenkov\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/eb1754efec623c7d712104421a58ef61f6e54fe4", "html_url": "https://github.com/rust-lang/rust/commit/eb1754efec623c7d712104421a58ef61f6e54fe4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/eb1754efec623c7d712104421a58ef61f6e54fe4/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8efa197ee4477340095f7455dde2de2c990cace0", "url": "https://api.github.com/repos/rust-lang/rust/commits/8efa197ee4477340095f7455dde2de2c990cace0", "html_url": "https://github.com/rust-lang/rust/commit/8efa197ee4477340095f7455dde2de2c990cace0"}, {"sha": "bf7078615b868f7359bff58933fd5236fabe7280", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf7078615b868f7359bff58933fd5236fabe7280", "html_url": "https://github.com/rust-lang/rust/commit/bf7078615b868f7359bff58933fd5236fabe7280"}], "stats": {"total": 108, "additions": 53, "deletions": 55}, "files": [{"sha": "e50622a005379c1dc9ac2beb4ae4ba8eda09bbe6", "filename": "src/librustc_interface/interface.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustc_interface%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustc_interface%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Finterface.rs?ref=eb1754efec623c7d712104421a58ef61f6e54fe4", "patch": "@@ -159,10 +159,7 @@ pub struct Config {\n     pub registry: Registry,\n }\n \n-pub fn run_compiler_in_existing_thread_pool<R>(\n-    config: Config,\n-    f: impl FnOnce(&Compiler) -> R,\n-) -> R {\n+pub fn create_compiler_and_run<R>(config: Config, f: impl FnOnce(&Compiler) -> R) -> R {\n     let registry = &config.registry;\n     let (sess, codegen_backend) = util::create_session(\n         config.opts,\n@@ -204,17 +201,20 @@ pub fn run_compiler_in_existing_thread_pool<R>(\n pub fn run_compiler<R: Send>(mut config: Config, f: impl FnOnce(&Compiler) -> R + Send) -> R {\n     log::trace!(\"run_compiler\");\n     let stderr = config.stderr.take();\n-    util::spawn_thread_pool(\n+    util::setup_callbacks_and_run_in_thread_pool_with_globals(\n         config.opts.edition,\n         config.opts.debugging_opts.threads,\n         &stderr,\n-        || run_compiler_in_existing_thread_pool(config, f),\n+        || create_compiler_and_run(config, f),\n     )\n }\n \n-pub fn default_thread_pool<R: Send>(edition: edition::Edition, f: impl FnOnce() -> R + Send) -> R {\n+pub fn setup_callbacks_and_run_in_default_thread_pool_with_globals<R: Send>(\n+    edition: edition::Edition,\n+    f: impl FnOnce() -> R + Send,\n+) -> R {\n     // the 1 here is duplicating code in config.opts.debugging_opts.threads\n     // which also defaults to 1; it ultimately doesn't matter as the default\n     // isn't threaded, and just ignores this parameter\n-    util::spawn_thread_pool(edition, 1, &None, f)\n+    util::setup_callbacks_and_run_in_thread_pool_with_globals(edition, 1, &None, f)\n }"}, {"sha": "fb5f3581b6dfdea297a9f0caa240cbf14c19e357", "filename": "src/librustc_interface/util.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustc_interface%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustc_interface%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Futil.rs?ref=eb1754efec623c7d712104421a58ef61f6e54fe4", "patch": "@@ -102,6 +102,8 @@ impl Write for Sink {\n     }\n }\n \n+/// Like a `thread::Builder::spawn` followed by a `join()`, but avoids the need\n+/// for `'static` bounds.\n #[cfg(not(parallel_compiler))]\n pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f: F) -> R {\n     struct Ptr(*mut ());\n@@ -126,7 +128,7 @@ pub fn scoped_thread<F: FnOnce() -> R + Send, R: Send>(cfg: thread::Builder, f:\n }\n \n #[cfg(not(parallel_compiler))]\n-pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     _threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n@@ -140,7 +142,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n \n     crate::callbacks::setup_callbacks();\n \n-    scoped_thread(cfg, || {\n+    let main_handler = move || {\n         rustc_ast::with_session_globals(edition, || {\n             ty::tls::GCX_PTR.set(&Lock::new(0), || {\n                 if let Some(stderr) = stderr {\n@@ -149,22 +151,21 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                 f()\n             })\n         })\n-    })\n+    };\n+\n+    scoped_thread(cfg, main_handler)\n }\n \n #[cfg(parallel_compiler)]\n-pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n+pub fn setup_callbacks_and_run_in_thread_pool_with_globals<F: FnOnce() -> R + Send, R: Send>(\n     edition: Edition,\n     threads: usize,\n     stderr: &Option<Arc<Mutex<Vec<u8>>>>,\n     f: F,\n ) -> R {\n-    use rayon::{ThreadBuilder, ThreadPool, ThreadPoolBuilder};\n-\n-    let gcx_ptr = &Lock::new(0);\n     crate::callbacks::setup_callbacks();\n \n-    let mut config = ThreadPoolBuilder::new()\n+    let mut config = rayon::ThreadPoolBuilder::new()\n         .thread_name(|_| \"rustc\".to_string())\n         .acquire_thread_handler(jobserver::acquire_thread)\n         .release_thread_handler(jobserver::release_thread)\n@@ -175,7 +176,7 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n         config = config.stack_size(size);\n     }\n \n-    let with_pool = move |pool: &ThreadPool| pool.install(move || f());\n+    let with_pool = move |pool: &rayon::ThreadPool| pool.install(move || f());\n \n     rustc_ast::with_session_globals(edition, || {\n         rustc_ast::SESSION_GLOBALS.with(|ast_session_globals| {\n@@ -185,13 +186,15 @@ pub fn spawn_thread_pool<F: FnOnce() -> R + Send, R: Send>(\n                 // span_session_globals are captured and set on the new\n                 // threads. ty::tls::with_thread_locals sets up thread local\n                 // callbacks from librustc_ast.\n-                let main_handler = move |thread: ThreadBuilder| {\n+                let main_handler = move |thread: rayon::ThreadBuilder| {\n                     rustc_ast::SESSION_GLOBALS.set(ast_session_globals, || {\n                         rustc_span::SESSION_GLOBALS.set(span_session_globals, || {\n-                            if let Some(stderr) = stderr {\n-                                io::set_panic(Some(box Sink(stderr.clone())));\n-                            }\n-                            ty::tls::GCX_PTR.set(gcx_ptr, || thread.run())\n+                            ty::tls::GCX_PTR.set(&Lock::new(0), || {\n+                                if let Some(stderr) = stderr {\n+                                    io::set_panic(Some(box Sink(stderr.clone())));\n+                                }\n+                                thread.run()\n+                            })\n                         })\n                     })\n                 };"}, {"sha": "80cc5182bef324fabb1a2067b501e0fe0e1968ef", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=eb1754efec623c7d712104421a58ef61f6e54fe4", "patch": "@@ -376,7 +376,7 @@ pub fn run_core(options: RustdocOptions) -> (clean::Crate, RenderInfo, RenderOpt\n         registry: rustc_driver::diagnostics_registry(),\n     };\n \n-    interface::run_compiler_in_existing_thread_pool(config, |compiler| {\n+    interface::create_compiler_and_run(config, |compiler| {\n         compiler.enter(|queries| {\n             let sess = compiler.session();\n "}, {"sha": "57151e2b200023ddcada5ed6ec7410a8f9fec42d", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 27, "deletions": 32, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/eb1754efec623c7d712104421a58ef61f6e54fe4/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=eb1754efec623c7d712104421a58ef61f6e54fe4", "patch": "@@ -437,7 +437,10 @@ fn main_args(args: &[String]) -> i32 {\n         Ok(opts) => opts,\n         Err(code) => return code,\n     };\n-    rustc_interface::interface::default_thread_pool(options.edition, move || main_options(options))\n+    rustc_interface::interface::setup_callbacks_and_run_in_default_thread_pool_with_globals(\n+        options.edition,\n+        move || main_options(options),\n+    )\n }\n \n fn wrap_return(diag: &rustc_errors::Handler, res: Result<(), String>) -> i32 {\n@@ -471,7 +474,29 @@ fn main_options(options: config::Options) -> i32 {\n     // but we can't crates the Handler ahead of time because it's not Send\n     let diag_opts = (options.error_format, options.edition, options.debugging_options.clone());\n     let show_coverage = options.show_coverage;\n-    rust_input(options, move |out| {\n+\n+    // First, parse the crate and extract all relevant information.\n+    info!(\"starting to run rustc\");\n+\n+    // Interpret the input file as a rust source file, passing it through the\n+    // compiler all the way through the analysis passes. The rustdoc output is\n+    // then generated from the cleaned AST of the crate. This runs all the\n+    // plug/cleaning passes.\n+    let result = rustc_driver::catch_fatal_errors(move || {\n+        let crate_name = options.crate_name.clone();\n+        let crate_version = options.crate_version.clone();\n+        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n+\n+        info!(\"finished with rustc\");\n+\n+        if let Some(name) = crate_name {\n+            krate.name = name\n+        }\n+\n+        krate.version = crate_version;\n+\n+        let out = Output { krate, renderinfo, renderopts };\n+\n         if show_coverage {\n             // if we ran coverage, bail early, we don't need to also generate docs at this point\n             // (also we didn't load in any of the useful passes)\n@@ -491,36 +516,6 @@ fn main_options(options: config::Options) -> i32 {\n                 rustc_driver::EXIT_FAILURE\n             }\n         }\n-    })\n-}\n-\n-/// Interprets the input file as a rust source file, passing it through the\n-/// compiler all the way through the analysis passes. The rustdoc output is then\n-/// generated from the cleaned AST of the crate.\n-///\n-/// This form of input will run all of the plug/cleaning passes\n-fn rust_input<R, F>(options: config::Options, f: F) -> R\n-where\n-    R: 'static + Send,\n-    F: 'static + Send + FnOnce(Output) -> R,\n-{\n-    // First, parse the crate and extract all relevant information.\n-    info!(\"starting to run rustc\");\n-\n-    let result = rustc_driver::catch_fatal_errors(move || {\n-        let crate_name = options.crate_name.clone();\n-        let crate_version = options.crate_version.clone();\n-        let (mut krate, renderinfo, renderopts) = core::run_core(options);\n-\n-        info!(\"finished with rustc\");\n-\n-        if let Some(name) = crate_name {\n-            krate.name = name\n-        }\n-\n-        krate.version = crate_version;\n-\n-        f(Output { krate, renderinfo, renderopts })\n     });\n \n     match result {"}]}