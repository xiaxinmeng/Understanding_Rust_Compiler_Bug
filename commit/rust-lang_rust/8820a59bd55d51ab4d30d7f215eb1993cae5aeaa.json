{"sha": "8820a59bd55d51ab4d30d7f215eb1993cae5aeaa", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg4MjBhNTliZDU1ZDUxYWI0ZDMwZDdmMjE1ZWIxOTkzY2FlNWFlYWE=", "commit": {"author": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-10T03:36:41Z"}, "committer": {"name": "Seiichi Uchida", "email": "seiichi.uchida@dena.com", "date": "2018-04-10T03:36:57Z"}, "message": "Resolve review comments", "tree": {"sha": "2de10ba7a1d2869a8570c81c30184668dfabe293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2de10ba7a1d2869a8570c81c30184668dfabe293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa", "html_url": "https://github.com/rust-lang/rust/commit/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa/comments", "author": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "committer": {"login": "topecongiro", "id": 21980157, "node_id": "MDQ6VXNlcjIxOTgwMTU3", "avatar_url": "https://avatars.githubusercontent.com/u/21980157?v=4", "gravatar_id": "", "url": "https://api.github.com/users/topecongiro", "html_url": "https://github.com/topecongiro", "followers_url": "https://api.github.com/users/topecongiro/followers", "following_url": "https://api.github.com/users/topecongiro/following{/other_user}", "gists_url": "https://api.github.com/users/topecongiro/gists{/gist_id}", "starred_url": "https://api.github.com/users/topecongiro/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/topecongiro/subscriptions", "organizations_url": "https://api.github.com/users/topecongiro/orgs", "repos_url": "https://api.github.com/users/topecongiro/repos", "events_url": "https://api.github.com/users/topecongiro/events{/privacy}", "received_events_url": "https://api.github.com/users/topecongiro/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4a7e45ec28fcbee14cd143402c1129d30cef39f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/4a7e45ec28fcbee14cd143402c1129d30cef39f0", "html_url": "https://github.com/rust-lang/rust/commit/4a7e45ec28fcbee14cd143402c1129d30cef39f0"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "c889ece4d07766d0e60f696bac17e28bc5cde407", "filename": "src/imports.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa/src%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8820a59bd55d51ab4d30d7f215eb1993cae5aeaa/src%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fimports.rs?ref=8820a59bd55d51ab4d30d7f215eb1993cae5aeaa", "patch": "@@ -172,13 +172,13 @@ fn merge_use_trees_inner(trees: &mut Vec<UseTree>, use_tree: UseTree) {\n \n impl fmt::Debug for UseTree {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n impl fmt::Debug for UseSegment {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n-        write!(f, \"{}\", self)\n+        fmt::Display::fmt(self, f)\n     }\n }\n \n@@ -221,7 +221,7 @@ impl UseTree {\n     pub fn rewrite_top_level(&self, context: &RewriteContext, shape: Shape) -> Option<String> {\n         let mut result = String::with_capacity(256);\n         if let Some(ref attrs) = self.attrs {\n-            result.push_str(&attrs.rewrite(context, shape).expect(\"rewrite attr\"));\n+            result.push_str(&attrs.rewrite(context, shape)?);\n             if !result.is_empty() {\n                 result.push_str(&shape.indent.to_string_with_newline(context.config));\n             }\n@@ -242,6 +242,10 @@ impl UseTree {\n     }\n \n     // FIXME: Use correct span?\n+    // The given span is essentially incorrect, since we are reconstructing\n+    // use statements. This should not be a problem, though, since we have\n+    // already tried to extract comment and observed that there are no comment\n+    // around the given use item, and the span will not be used afterward.\n     fn from_path(path: Vec<UseSegment>, span: Span) -> UseTree {\n         UseTree {\n             path,\n@@ -514,22 +518,18 @@ impl UseTree {\n \n     fn merge(&mut self, other: UseTree) {\n         let mut new_path = vec![];\n-        let mut len = 0;\n-        for (i, (mut a, b)) in self.path\n+        for (mut a, b) in self.path\n             .clone()\n             .iter_mut()\n             .zip(other.path.clone().into_iter())\n-            .enumerate()\n         {\n             if *a == b {\n-                len = i + 1;\n                 new_path.push(b);\n             } else {\n-                len = i;\n                 break;\n             }\n         }\n-        if let Some(merged) = merge_rest(&self.path, &other.path, len) {\n+        if let Some(merged) = merge_rest(&self.path, &other.path, new_path.len()) {\n             new_path.push(merged);\n             self.span = self.span.to(other.span);\n         }"}]}