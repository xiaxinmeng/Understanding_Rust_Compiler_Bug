{"sha": "a1b11321fb2d6ce00af9c8957c98df76432b1b78", "node_id": "MDY6Q29tbWl0NzI0NzEyOmExYjExMzIxZmIyZDZjZTAwYWY5Yzg5NTdjOThkZjc2NDMyYjFiNzg=", "commit": {"author": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-01-15T14:54:09Z"}, "committer": {"name": "Yoshua Wuyts", "email": "yoshuawuyts@gmail.com", "date": "2021-01-23T15:54:56Z"}, "message": "Remove `Stream::next`\n\nThis is a temporary change only, as we wait to resolve dynamic dispatch issues. The `Stream::next` method and corresponding documentation are expected to be fully restored once we have a path to proceed.\n\nRef: https://github.com/rust-lang/rfcs/pull/2996#issuecomment-757386206\n\nupdate docs", "tree": {"sha": "19e9c7b41fd01807605db00b7a948f40ec4f1cbf", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/19e9c7b41fd01807605db00b7a948f40ec4f1cbf"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a1b11321fb2d6ce00af9c8957c98df76432b1b78", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a1b11321fb2d6ce00af9c8957c98df76432b1b78", "html_url": "https://github.com/rust-lang/rust/commit/a1b11321fb2d6ce00af9c8957c98df76432b1b78", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a1b11321fb2d6ce00af9c8957c98df76432b1b78/comments", "author": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "committer": {"login": "yoshuawuyts", "id": 2467194, "node_id": "MDQ6VXNlcjI0NjcxOTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2467194?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yoshuawuyts", "html_url": "https://github.com/yoshuawuyts", "followers_url": "https://api.github.com/users/yoshuawuyts/followers", "following_url": "https://api.github.com/users/yoshuawuyts/following{/other_user}", "gists_url": "https://api.github.com/users/yoshuawuyts/gists{/gist_id}", "starred_url": "https://api.github.com/users/yoshuawuyts/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yoshuawuyts/subscriptions", "organizations_url": "https://api.github.com/users/yoshuawuyts/orgs", "repos_url": "https://api.github.com/users/yoshuawuyts/repos", "events_url": "https://api.github.com/users/yoshuawuyts/events{/privacy}", "received_events_url": "https://api.github.com/users/yoshuawuyts/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0c8db16a67d02127cb6b4a1f399db054517f6aee", "url": "https://api.github.com/repos/rust-lang/rust/commits/0c8db16a67d02127cb6b4a1f399db054517f6aee", "html_url": "https://github.com/rust-lang/rust/commit/0c8db16a67d02127cb6b4a1f399db054517f6aee"}], "stats": {"total": 94, "additions": 9, "deletions": 85}, "files": [{"sha": "0df18af65ebf04cc740f77931871df0bd5dfc637", "filename": "library/core/src/stream/mod.rs", "status": "modified", "additions": 9, "deletions": 36, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/a1b11321fb2d6ce00af9c8957c98df76432b1b78/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b11321fb2d6ce00af9c8957c98df76432b1b78/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fmod.rs?ref=a1b11321fb2d6ce00af9c8957c98df76432b1b78", "patch": "@@ -16,13 +16,12 @@\n //!   exist and what you can do with them. The methods of these traits are worth\n //!   putting some extra study time into.\n //! * Functions provide some helpful ways to create some basic streams.\n-//! * [Structs] are often the return types of the various methods on this\n+//! * Structs are often the return types of the various methods on this\n //!   module's traits. You'll usually want to look at the method that creates\n //!   the `struct`, rather than the `struct` itself. For more detail about why,\n //!   see '[Implementing Stream](#implementing-stream)'.\n //!\n //! [Traits]: #traits\n-//! [Structs]: #structs\n //!\n //! That's it! Let's dig into streams.\n //!\n@@ -41,17 +40,17 @@\n //! ```\n //!\n //! Unlike `Iterator`, `Stream` makes a distinction between the [`poll_next`]\n-//! method which is used when implementing a `Stream`, and the [`next`] method\n-//! which is used when consuming a stream. Consumers of `Stream` only need to\n-//! consider [`next`], which when called, returns a future which yields\n-//! yields [`Option`][`<Item>`].\n+//! method which is used when implementing a `Stream`, and a (to-be-implemented)\n+//! `next` method which is used when consuming a stream. Consumers of `Stream`\n+//! only need to consider `next`, which when called, returns a future which\n+//! yields `Option<Stream::Item>`.\n //!\n-//! The future returned by [`next`] will yield `Some(Item)` as long as there are\n+//! The future returned by `next` will yield `Some(Item)` as long as there are\n //! elements, and once they've all been exhausted, will yield `None` to indicate\n //! that iteration is finished. If we're waiting on something asynchronous to\n //! resolve, the future will wait until the stream is ready to yield again.\n //!\n-//! Individual streams may choose to resume iteration, and so calling [`next`]\n+//! Individual streams may choose to resume iteration, and so calling `next`\n //! again may or may not eventually yield `Some(Item)` again at some point.\n //!\n //! [`Stream`]'s full definition includes a number of other methods as well,\n@@ -60,8 +59,6 @@\n //!\n //! [`Poll`]: super::task::Poll\n //! [`poll_next`]: Stream::poll_next\n-//! [`next`]: Stream::next\n-//! [`<Item>`]: Stream::Item\n //!\n //! # Implementing Stream\n //!\n@@ -112,36 +109,12 @@\n //!         }\n //!     }\n //! }\n-//!\n-//! // And now we can use it!\n-//! # async fn run() {\n-//! #\n-//! let mut counter = Counter::new();\n-//!\n-//! let x = counter.next().await.unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().await.unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().await.unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().await.unwrap();\n-//! println!(\"{}\", x);\n-//!\n-//! let x = counter.next().await.unwrap();\n-//! println!(\"{}\", x);\n-//! #\n-//! }\n //! ```\n //!\n-//! This will print `1` through `5`, each on their own line.\n-//!\n //! # Laziness\n //!\n //! Streams are *lazy*. This means that just creating a stream doesn't _do_ a\n-//! whole lot. Nothing really happens until you call [`next`]. This is sometimes a\n+//! whole lot. Nothing really happens until you call `next`. This is sometimes a\n //! source of confusion when creating a stream solely for its side effects. The\n //! compiler will warn us about this kind of behavior:\n //!\n@@ -151,4 +124,4 @@\n \n mod stream;\n \n-pub use stream::{Next, Stream};\n+pub use stream::Stream;"}, {"sha": "e37902dae1f2d24de0e5f0752ab2f7b7a5d723f0", "filename": "library/core/src/stream/stream/mod.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/a1b11321fb2d6ce00af9c8957c98df76432b1b78/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a1b11321fb2d6ce00af9c8957c98df76432b1b78/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fmod.rs?ref=a1b11321fb2d6ce00af9c8957c98df76432b1b78", "patch": "@@ -1,7 +1,3 @@\n-mod next;\n-\n-pub use next::Next;\n-\n use crate::ops::DerefMut;\n use crate::pin::Pin;\n use crate::task::{Context, Poll};\n@@ -81,21 +77,6 @@ pub trait Stream {\n     fn size_hint(&self) -> (usize, Option<usize>) {\n         (0, None)\n     }\n-\n-    /// Advances the stream and returns a future which yields the next value.\n-    ///\n-    /// The returned future yields [`None`] when iteration is finished.\n-    /// Individual stream implementations may choose to resume iteration, and so\n-    /// calling `next()` again may or may not eventually start yielding\n-    /// [`Some(Item)`] again at some point.\n-    ///\n-    /// [`Some(Item)`]: Some\n-    fn next(&mut self) -> Next<'_, Self>\n-    where\n-        Self: Unpin,\n-    {\n-        Next::new(self)\n-    }\n }\n \n #[unstable(feature = \"async_stream\", issue = \"79024\")]"}, {"sha": "e25d44228e781aee25410b8f3dd437fe485b26b5", "filename": "library/core/src/stream/stream/next.rs", "status": "removed", "additions": 0, "deletions": 30, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/0c8db16a67d02127cb6b4a1f399db054517f6aee/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fnext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0c8db16a67d02127cb6b4a1f399db054517f6aee/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fnext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fstream%2Fstream%2Fnext.rs?ref=0c8db16a67d02127cb6b4a1f399db054517f6aee", "patch": "@@ -1,30 +0,0 @@\n-use crate::future::Future;\n-use crate::pin::Pin;\n-use crate::stream::Stream;\n-use crate::task::{Context, Poll};\n-\n-/// A future which advances the stream and returns the next value.\n-///\n-/// This `struct` is created by [`Stream::next`]. See its documentation for more.\n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-#[derive(Debug)]\n-#[must_use = \"futures do nothing unless you `.await` or poll them\"]\n-pub struct Next<'a, S: ?Sized> {\n-    stream: &'a mut S,\n-}\n-\n-impl<'a, S: ?Sized> Next<'a, S> {\n-    /// Create a new instance of `Next`.\n-    pub(crate) fn new(stream: &'a mut S) -> Self {\n-        Self { stream }\n-    }\n-}\n-\n-#[unstable(feature = \"async_stream\", issue = \"79024\")]\n-impl<S: Stream + Unpin + ?Sized> Future for Next<'_, S> {\n-    type Output = Option<S::Item>;\n-\n-    fn poll(mut self: Pin<&mut Self>, cx: &mut Context<'_>) -> Poll<Self::Output> {\n-        Pin::new(&mut *self.stream).poll_next(cx)\n-    }\n-}"}]}