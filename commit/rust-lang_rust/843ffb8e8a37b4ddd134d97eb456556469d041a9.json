{"sha": "843ffb8e8a37b4ddd134d97eb456556469d041a9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg0M2ZmYjhlOGEzN2I0ZGRkMTM0ZDk3ZWI0NTY1NTY0NjlkMDQxYTk=", "commit": {"author": {"name": "Dylan DPC", "email": "dylan.dpc@gmail.com", "date": "2020-04-29T17:39:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-04-29T17:39:30Z"}, "message": "Rollup merge of #71572 - lcnr:type_length, r=Dylan-DPC\n\ntest iterator chain type length blowup\n\nAdds a regression test. closes #58952\n\nr? @Dylan-DPC", "tree": {"sha": "827a3a646b83fa376d1554b1351b9e5e630d8e26", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/827a3a646b83fa376d1554b1351b9e5e630d8e26"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/843ffb8e8a37b4ddd134d97eb456556469d041a9", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeqbvSCRBK7hj4Ov3rIwAAdHIIAB4WI112TxZFvp2silbQmy1v\nexq5PUaDiabqGyARltFsfGESqxwE46Bz1yLMl6pMRKIyvu0lq+4duVr+CQwZJ14E\nBc2K+b7ft2/ZPVUjqrM/0+Q8PIedjROECXfD8r8DehAFCTy4vYqrJv58Awexx9os\nfe7OJz/mYzZknCUAtam4V1afjxOQbV5ghzHZ4cM0DkKiXpi1sTqrfxXR7cPK9i5+\nuQ8eTOY+3A2HVYcQjrKkWTlRFsZhSOZkhGO8epYxUtzuyQIbaTJYHAN9b433Dwza\nHhGNiNS84g0l+rcQZwDlwg2bm/C5o/eUk/5uBnVukFDQFN2/w+64ktf/vrv87o4=\n=AqQJ\n-----END PGP SIGNATURE-----\n", "payload": "tree 827a3a646b83fa376d1554b1351b9e5e630d8e26\nparent d9761daa575a202c3d119eb3a74632412bef37f7\nparent 7d6aef65d80581b4fe726db7fcc592e87072a33d\nauthor Dylan DPC <dylan.dpc@gmail.com> 1588181970 +0200\ncommitter GitHub <noreply@github.com> 1588181970 +0200\n\nRollup merge of #71572 - lcnr:type_length, r=Dylan-DPC\n\ntest iterator chain type length blowup\n\nAdds a regression test. closes #58952\n\nr? @Dylan-DPC\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/843ffb8e8a37b4ddd134d97eb456556469d041a9", "html_url": "https://github.com/rust-lang/rust/commit/843ffb8e8a37b4ddd134d97eb456556469d041a9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/843ffb8e8a37b4ddd134d97eb456556469d041a9/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9761daa575a202c3d119eb3a74632412bef37f7", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9761daa575a202c3d119eb3a74632412bef37f7", "html_url": "https://github.com/rust-lang/rust/commit/d9761daa575a202c3d119eb3a74632412bef37f7"}, {"sha": "7d6aef65d80581b4fe726db7fcc592e87072a33d", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d6aef65d80581b4fe726db7fcc592e87072a33d", "html_url": "https://github.com/rust-lang/rust/commit/7d6aef65d80581b4fe726db7fcc592e87072a33d"}], "stats": {"total": 31, "additions": 31, "deletions": 0}, "files": [{"sha": "046e37840849ef94c2b60f4fe3fa3cfc51ea9b9a", "filename": "src/test/ui/iterators/issue-58952-filter-type-length.rs", "status": "added", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/843ffb8e8a37b4ddd134d97eb456556469d041a9/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "raw_url": "https://github.com/rust-lang/rust/raw/843ffb8e8a37b4ddd134d97eb456556469d041a9/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fiterators%2Fissue-58952-filter-type-length.rs?ref=843ffb8e8a37b4ddd134d97eb456556469d041a9", "patch": "@@ -0,0 +1,31 @@\n+// run-pass\n+//! This snippet causes the type length to blowup exponentially,\n+//! so check that we don't accidentially exceed the type length limit.\n+// FIXME: Once the size of iterator adaptors is further reduced,\n+// increase the complexity of this test.\n+\n+fn main() {\n+    let c = 2;\n+    let bv = vec![2];\n+    let b = bv\n+        .iter()\n+        .filter(|a| **a == c);\n+\n+    let _a = vec![1, 2, 3]\n+        .into_iter()\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .filter(|a| b.clone().any(|b| *b == *a))\n+        .collect::<Vec<_>>();\n+}"}]}