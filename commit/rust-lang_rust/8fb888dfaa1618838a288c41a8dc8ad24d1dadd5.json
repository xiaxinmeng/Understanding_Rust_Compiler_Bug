{"sha": "8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "node_id": "C_kwDOAAsO6NoAKDhmYjg4OGRmYWExNjE4ODM4YTI4OGM0MWE4ZGM4YWQyNGQxZGFkZDU", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:31:55Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-05-13T10:32:32Z"}, "message": "Add multiple borrow test.", "tree": {"sha": "4a580b2920cd8439a73afe513af04784b7470d97", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4a580b2920cd8439a73afe513af04784b7470d97"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "html_url": "https://github.com/rust-lang/rust/commit/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "13fb0794aca868c2b73493d7e008e1b395dacea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/13fb0794aca868c2b73493d7e008e1b395dacea4", "html_url": "https://github.com/rust-lang/rust/commit/13fb0794aca868c2b73493d7e008e1b395dacea4"}], "stats": {"total": 144, "additions": 89, "deletions": 55}, "files": [{"sha": "85ade170ac6fddece010fc686179683ea6c82afa", "filename": "tests/debuginfo/reference-debuginfo.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fdebuginfo%2Freference-debuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fdebuginfo%2Freference-debuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdebuginfo%2Freference-debuginfo.rs?ref=8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "patch": "@@ -52,6 +52,9 @@\n // gdb-command:print *f64_ref\n // gdb-check:$14 = 3.5\n \n+// gdb-command:print *f64_double_ref\n+// gdb-check:$15 = 3.5\n+\n \n // === LLDB TESTS ==================================================================================\n \n@@ -112,6 +115,10 @@\n // lldbg-check:[...]$12 = 3.5\n // lldbr-check:(f64) *f64_ref = 3.5\n \n+// lldb-command:print *f64_double_ref\n+// lldbg-check:[...]$13 = 3.5\n+// lldbr-check:(f64) **f64_double_ref = 3.5\n+\n #![allow(unused_variables)]\n #![feature(omit_gdb_pretty_printer_section)]\n #![omit_gdb_pretty_printer_section]\n@@ -158,6 +165,7 @@ fn main() {\n \n     let f64_val: f64 = 3.5;\n     let f64_ref: &f64 = &f64_val;\n+    let f64_double_ref: &f64 = &f64_ref;\n \n     zzz(); // #break\n }"}, {"sha": "07bd48fc84638a9bcb62dc3d61b751cac67bdd97", "filename": "tests/mir-opt/reference_prop.debuginfo.ReferencePropagation.diff", "status": "modified", "additions": 79, "deletions": 55, "changes": 134, "blob_url": "https://github.com/rust-lang/rust/blob/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.debuginfo.ReferencePropagation.diff?ref=8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "patch": "@@ -9,41 +9,50 @@\n       let _6: ();                          // in scope 0 at $DIR/reference_prop.rs:+9:5: +12:6\n       let mut _7: std::option::Option<i32>; // in scope 0 at $DIR/reference_prop.rs:+9:11: +9:18\n       let mut _8: isize;                   // in scope 0 at $DIR/reference_prop.rs:+10:9: +10:13\n-      let mut _10: &[i32];                 // in scope 0 at $DIR/reference_prop.rs:+16:82: +16:94\n-      let _11: &[i32];                     // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:94\n-      let mut _12: &[i32; 10];             // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n-      let _13: [i32; 10];                  // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n-      let mut _14: std::ops::RangeFull;    // in scope 0 at $DIR/reference_prop.rs:+16:91: +16:93\n-      let mut _15: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let _10: ();                         // in scope 0 at $DIR/reference_prop.rs:+16:5: +17:6\n+      let mut _11: &[i32];                 // in scope 0 at $DIR/reference_prop.rs:+16:82: +16:94\n+      let _12: &[i32];                     // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:94\n+      let mut _13: &[i32; 10];             // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let _14: [i32; 10];                  // in scope 0 at $DIR/reference_prop.rs:+16:83: +16:90\n+      let mut _15: std::ops::RangeFull;    // in scope 0 at $DIR/reference_prop.rs:+16:91: +16:93\n       let mut _16: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n-      let mut _17: bool;                   // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _17: usize;                  // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let mut _18: bool;                   // in scope 0 at $DIR/reference_prop.rs:+16:12: +16:79\n+      let _23: &&mut u8;                   // in scope 0 at $DIR/reference_prop.rs:+19:28: +19:40\n+      let _24: &mut u8;                    // in scope 0 at $DIR/reference_prop.rs:+19:29: +19:40\n+      let mut _25: debuginfo::T;           // in scope 0 at $DIR/reference_prop.rs:+19:34: +19:38\n       scope 1 {\n -         debug ref_mut_u8 => _1;          // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n +         debug ref_mut_u8 => &_2;         // in scope 1 at $DIR/reference_prop.rs:+3:9: +3:19\n           let _3: &u8;                     // in scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n-          let mut _23: &debuginfo::T;      // in scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+          let mut _28: &debuginfo::T;      // in scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n           scope 2 {\n -             debug field => _3;           // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n-+             debug field => &((*_23).0: u8); // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n++             debug field => &((*_28).0: u8); // in scope 2 at $DIR/reference_prop.rs:+4:9: +4:14\n               let _5: &u8;                 // in scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n               scope 3 {\n -                 debug reborrow => _5;    // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n +                 debug reborrow => &_2;   // in scope 3 at $DIR/reference_prop.rs:+7:9: +7:17\n                   let _9: &i32;            // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n-                  let mut _22: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+                  let _22: &&&mut u8;      // in scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+                  let mut _27: &std::option::Option<i32>; // in scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n                   scope 4 {\n -                     debug variant_field => _9; // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n-+                     debug variant_field => &(((*_22) as Some).0: i32); // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n++                     debug variant_field => &(((*_27) as Some).0: i32); // in scope 4 at $DIR/reference_prop.rs:+11:14: +11:31\n                   }\n                   scope 5 {\n--                     debug constant_index => _18; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n-+                     debug constant_index => &(*_10)[1 of 3]; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n-                      debug subslice => _19; // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n-                      debug constant_index_from_end => _20; // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n-                      let _18: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n-                      let _19: &[i32];     // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n-                      let _20: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n-                      let mut _21: &[i32; 10]; // in scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+-                     debug constant_index => _19; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n++                     debug constant_index => &(*_11)[1 of 3]; // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      debug subslice => _20; // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      debug constant_index_from_end => _21; // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let _19: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+                      let _20: &[i32];     // in scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+                      let _21: &i32;       // in scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+                      let mut _26: &[i32; 10]; // in scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+                  }\n+                  scope 6 {\n+-                     debug multiple_borrow => _22; // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n++                     debug multiple_borrow => &&&(_25.0: u8); // in scope 6 at $DIR/reference_prop.rs:+19:9: +19:24\n                   }\n               }\n           }\n@@ -55,11 +64,11 @@\n           _2 = const 5_u8;                 // scope 0 at $DIR/reference_prop.rs:+3:27: +3:31\n -         _1 = &mut _2;                    // scope 0 at $DIR/reference_prop.rs:+3:22: +3:31\n -         StorageLive(_3);                 // scope 1 at $DIR/reference_prop.rs:+4:9: +4:14\n-          _23 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+          _28 = const _;                   // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:535:17: 535:24\n                                            // + literal: Const { ty: &T, val: Unevaluated(debuginfo, [], Some(promoted[2])) }\n--         _3 = &((*_23).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n+-         _3 = &((*_28).0: u8);            // scope 1 at $DIR/reference_prop.rs:+4:17: +4:24\n -         StorageLive(_5);                 // scope 2 at $DIR/reference_prop.rs:+7:9: +7:17\n -         _5 = &(*_1);                     // scope 2 at $DIR/reference_prop.rs:+7:20: +7:32\n -         StorageLive(_6);                 // scope 3 at $DIR/reference_prop.rs:+9:5: +12:6\n@@ -71,11 +80,11 @@\n   \n       bb1: {\n -         StorageLive(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n-          _22 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+          _27 = const _;                   // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:542:14: 542:31\n                                            // + literal: Const { ty: &Option<i32>, val: Unevaluated(debuginfo, [], Some(promoted[1])) }\n--         _9 = &(((*_22) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n+-         _9 = &(((*_27) as Some).0: i32); // scope 3 at $DIR/reference_prop.rs:+11:14: +11:31\n -         _6 = const ();                   // scope 4 at $DIR/reference_prop.rs:+11:36: +11:38\n -         StorageDead(_9);                 // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n           goto -> bb4;                     // scope 3 at $DIR/reference_prop.rs:+11:37: +11:38\n@@ -93,59 +102,74 @@\n       bb4: {\n           StorageDead(_7);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n -         StorageDead(_6);                 // scope 3 at $DIR/reference_prop.rs:+12:5: +12:6\n-          StorageLive(_10);                // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n-          StorageLive(_11);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n-          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n-          _21 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+-         StorageLive(_10);                // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n+          StorageLive(_11);                // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          StorageLive(_12);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+          StorageLive(_13);                // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          _26 = const _;                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:547:83: 547:90\n                                            // + literal: Const { ty: &[i32; 10], val: Unevaluated(debuginfo, [], Some(promoted[0])) }\n-          _12 = &(*_21);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n-          StorageLive(_14);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n-          _14 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n-          _11 = <[i32; 10] as Index<RangeFull>>::index(move _12, move _14) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n+          _13 = &(*_26);                   // scope 5 at $DIR/reference_prop.rs:+16:83: +16:90\n+          StorageLive(_15);                // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _15 = RangeFull;                 // scope 5 at $DIR/reference_prop.rs:+16:91: +16:93\n+          _12 = <[i32; 10] as Index<RangeFull>>::index(move _13, move _15) -> bb5; // scope 5 at $DIR/reference_prop.rs:+16:83: +16:94\n                                            // mir::Constant\n                                            // + span: $DIR/reference_prop.rs:547:83: 547:94\n                                            // + literal: Const { ty: for<'a> fn(&'a [i32; 10], RangeFull) -> &'a <[i32; 10] as Index<RangeFull>>::Output {<[i32; 10] as Index<RangeFull>>::index}, val: Value(<ZST>) }\n       }\n   \n       bb5: {\n-          StorageDead(_14);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n-          StorageDead(_12);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n-          _10 = &(*_11);                   // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n-          _15 = Len((*_10));               // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n-          _16 = const 3_usize;             // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n-          _17 = Ge(move _15, move _16);    // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n-          switchInt(move _17) -> [0: bb7, otherwise: bb6]; // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          StorageDead(_15);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          StorageDead(_13);                // scope 5 at $DIR/reference_prop.rs:+16:93: +16:94\n+          _11 = &(*_12);                   // scope 5 at $DIR/reference_prop.rs:+16:82: +16:94\n+          _16 = Len((*_11));               // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _17 = const 3_usize;             // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          _18 = Ge(move _16, move _17);    // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n+          switchInt(move _18) -> [0: bb7, otherwise: bb6]; // scope 5 at $DIR/reference_prop.rs:+16:12: +16:79\n       }\n   \n       bb6: {\n--         StorageLive(_18);                // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n--         _18 = &(*_10)[1 of 3];           // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n-          StorageLive(_19);                // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n-          _19 = &(*_10)[2:-1];             // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n-          StorageLive(_20);                // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n-          _20 = &(*_10)[-1 of 3];          // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n-          _0 = const ();                   // scope 5 at $DIR/reference_prop.rs:+16:95: +17:6\n+-         StorageLive(_19);                // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+-         _19 = &(*_11)[1 of 3];           // scope 5 at $DIR/reference_prop.rs:+16:16: +16:34\n+          StorageLive(_20);                // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          _20 = &(*_11)[2:-1];             // scope 5 at $DIR/reference_prop.rs:+16:36: +16:44\n+          StorageLive(_21);                // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+          _21 = &(*_11)[-1 of 3];          // scope 5 at $DIR/reference_prop.rs:+16:51: +16:78\n+-         _10 = const ();                  // scope 5 at $DIR/reference_prop.rs:+16:95: +17:6\n+          StorageDead(_21);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n           StorageDead(_20);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n-          StorageDead(_19);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n--         StorageDead(_18);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_19);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n           goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n       }\n   \n       bb7: {\n-          _0 = const ();                   // scope 3 at $DIR/reference_prop.rs:+17:6: +17:6\n+-         _10 = const ();                  // scope 3 at $DIR/reference_prop.rs:+17:6: +17:6\n           goto -> bb8;                     // scope 3 at $DIR/reference_prop.rs:+16:5: +17:6\n       }\n   \n       bb8: {\n--         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+18:1: +18:2\n--         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+18:1: +18:2\n-          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n--         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n-          StorageDead(_11);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n-          StorageDead(_10);                // scope 0 at $DIR/reference_prop.rs:+18:1: +18:2\n-          return;                          // scope 0 at $DIR/reference_prop.rs:+18:2: +18:2\n+          StorageDead(_12);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+          StorageDead(_11);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageDead(_10);                // scope 3 at $DIR/reference_prop.rs:+17:5: +17:6\n+-         StorageLive(_22);                // scope 3 at $DIR/reference_prop.rs:+19:9: +19:24\n+-         StorageLive(_23);                // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         StorageLive(_24);                // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+          StorageLive(_25);                // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+          _25 = T(const 6_u8);             // scope 3 at $DIR/reference_prop.rs:+19:34: +19:38\n+-         _24 = &mut (_25.0: u8);          // scope 3 at $DIR/reference_prop.rs:+19:29: +19:40\n+-         _23 = &_24;                      // scope 3 at $DIR/reference_prop.rs:+19:28: +19:40\n+-         _22 = &_23;                      // scope 3 at $DIR/reference_prop.rs:+19:27: +19:40\n+          _0 = const ();                   // scope 0 at $DIR/reference_prop.rs:+0:16: +20:2\n+          StorageDead(_25);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_24);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_23);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_22);                // scope 3 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_5);                 // scope 2 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_3);                 // scope 1 at $DIR/reference_prop.rs:+20:1: +20:2\n+          StorageDead(_2);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+-         StorageDead(_1);                 // scope 0 at $DIR/reference_prop.rs:+20:1: +20:2\n+          return;                          // scope 0 at $DIR/reference_prop.rs:+20:2: +20:2\n       }\n   }\n   "}, {"sha": "4083b45470b4f3bbe2fadf759dd285aa1aabccff", "filename": "tests/mir-opt/reference_prop.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fmir-opt%2Freference_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8fb888dfaa1618838a288c41a8dc8ad24d1dadd5/tests%2Fmir-opt%2Freference_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fmir-opt%2Freference_prop.rs?ref=8fb888dfaa1618838a288c41a8dc8ad24d1dadd5", "patch": "@@ -546,6 +546,8 @@ fn debuginfo() {\n     // on the slice length.\n     if let [_, ref constant_index, subslice @ .., ref constant_index_from_end] = &[6; 10][..] {\n     }\n+\n+    let multiple_borrow = &&&mut T(6).0;\n }\n \n fn many_debuginfo() {"}]}