{"sha": "a04e78730e501de7147ba8c09372348529b00c17", "node_id": "C_kwDOAAsO6NoAKGEwNGU3ODczMGU1MDFkZTcxNDdiYThjMDkzNzIzNDg1MjliMDBjMTc", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-21T08:29:55Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-21T08:29:55Z"}, "message": "Use `source_span` query instead of passing the untracked vec around", "tree": {"sha": "bff135b2264e1ed8423308f19805bb9a410daa98", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bff135b2264e1ed8423308f19805bb9a410daa98"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a04e78730e501de7147ba8c09372348529b00c17", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a04e78730e501de7147ba8c09372348529b00c17", "html_url": "https://github.com/rust-lang/rust/commit/a04e78730e501de7147ba8c09372348529b00c17", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a04e78730e501de7147ba8c09372348529b00c17/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a6b381a11bea23a22dc72ab156183af8844e4cf4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a6b381a11bea23a22dc72ab156183af8844e4cf4", "html_url": "https://github.com/rust-lang/rust/commit/a6b381a11bea23a22dc72ab156183af8844e4cf4"}], "stats": {"total": 37, "additions": 14, "deletions": 23}, "files": [{"sha": "80bc0a2653d9fd0c613da0c8b095f27478114ec9", "filename": "compiler/rustc_resolve/src/diagnostics.rs", "status": "modified", "additions": 12, "deletions": 19, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/a04e78730e501de7147ba8c09372348529b00c17/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04e78730e501de7147ba8c09372348529b00c17/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fdiagnostics.rs?ref=a04e78730e501de7147ba8c09372348529b00c17", "patch": "@@ -12,11 +12,10 @@ use rustc_errors::{struct_span_err, SuggestionStyle};\n use rustc_feature::BUILTIN_ATTRIBUTES;\n use rustc_hir::def::Namespace::{self, *};\n use rustc_hir::def::{self, CtorKind, CtorOf, DefKind, NonMacroAttrKind, PerNS};\n-use rustc_hir::def_id::{DefId, LocalDefId, CRATE_DEF_ID, LOCAL_CRATE};\n+use rustc_hir::def_id::{DefId, CRATE_DEF_ID, LOCAL_CRATE};\n use rustc_hir::PrimTy;\n-use rustc_index::vec::IndexVec;\n use rustc_middle::bug;\n-use rustc_middle::ty::DefIdTree;\n+use rustc_middle::ty::{DefIdTree, TyCtxt};\n use rustc_session::lint::builtin::ABSOLUTE_PATHS_NOT_STARTING_WITH_CRATE;\n use rustc_session::lint::builtin::MACRO_EXPANDED_MACRO_EXPORTS_ACCESSED_BY_ABSOLUTE_PATHS;\n use rustc_session::lint::BuiltinLintDiagnostics;\n@@ -154,8 +153,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n \n             if !candidates.is_empty() {\n                 show_candidates(\n-                    &self.tcx.sess,\n-                    &self.tcx.untracked().source_span.read(),\n+                    self.tcx,\n                     &mut err,\n                     span,\n                     &candidates,\n@@ -687,8 +685,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                         err.span_help(span, &help_msg);\n                     }\n                     show_candidates(\n-                        &self.tcx.sess,\n-                        &self.tcx.untracked().source_span.read(),\n+                        self.tcx,\n                         &mut err,\n                         Some(span),\n                         &import_suggestions,\n@@ -1352,8 +1349,7 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         let import_suggestions =\n             self.lookup_import_candidates(ident, Namespace::MacroNS, parent_scope, is_expected);\n         show_candidates(\n-            &self.tcx.sess,\n-            &self.tcx.untracked().source_span.read(),\n+            self.tcx,\n             err,\n             None,\n             &import_suggestions,\n@@ -2358,8 +2354,7 @@ pub(crate) enum DiagnosticMode {\n }\n \n pub(crate) fn import_candidates(\n-    session: &Session,\n-    source_span: &IndexVec<LocalDefId, Span>,\n+    tcx: TyCtxt<'_>,\n     err: &mut Diagnostic,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -2368,8 +2363,7 @@ pub(crate) fn import_candidates(\n     append: &str,\n ) {\n     show_candidates(\n-        session,\n-        source_span,\n+        tcx,\n         err,\n         use_placement_span,\n         candidates,\n@@ -2385,8 +2379,7 @@ pub(crate) fn import_candidates(\n /// entities with that name in all crates. This method allows outputting the\n /// results of this search in a programmer-friendly way\n fn show_candidates(\n-    session: &Session,\n-    source_span: &IndexVec<LocalDefId, Span>,\n+    tcx: TyCtxt<'_>,\n     err: &mut Diagnostic,\n     // This is `None` if all placement locations are inside expansions\n     use_placement_span: Option<Span>,\n@@ -2511,8 +2504,8 @@ fn show_candidates(\n             );\n \n             if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n-                let span = source_span[local_def_id];\n-                let span = session.source_map().guess_head_span(span);\n+                let span = tcx.source_span(local_def_id);\n+                let span = tcx.sess.source_map().guess_head_span(span);\n                 let mut multi_span = MultiSpan::from_span(span);\n                 multi_span.push_span_label(span, \"not accessible\");\n                 err.span_note(multi_span, &msg);\n@@ -2542,8 +2535,8 @@ fn show_candidates(\n             let mut spans = Vec::new();\n             for (name, _, def_id, _) in &inaccessible_path_strings {\n                 if let Some(local_def_id) = def_id.and_then(|did| did.as_local()) {\n-                    let span = source_span[local_def_id];\n-                    let span = session.source_map().guess_head_span(span);\n+                    let span = tcx.source_span(local_def_id);\n+                    let span = tcx.sess.source_map().guess_head_span(span);\n                     spans.push((name, span));\n                 } else {\n                     if !has_colon {"}, {"sha": "e8e31cb498136c874eb2b0a4dbc7bbaea384d121", "filename": "compiler/rustc_resolve/src/imports.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a04e78730e501de7147ba8c09372348529b00c17/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a04e78730e501de7147ba8c09372348529b00c17/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fimports.rs?ref=a04e78730e501de7147ba8c09372348529b00c17", "patch": "@@ -548,8 +548,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n             if let Some(candidates) = &err.candidates {\n                 match &import.kind {\n                     ImportKind::Single { nested: false, source, target, .. } => import_candidates(\n-                        self.r.tcx.sess,\n-                        &self.r.tcx.untracked().source_span.read(),\n+                        self.r.tcx,\n                         &mut diag,\n                         Some(err.span),\n                         &candidates,\n@@ -561,8 +560,7 @@ impl<'a, 'b, 'tcx> ImportResolver<'a, 'b, 'tcx> {\n                     ),\n                     ImportKind::Single { nested: true, source, target, .. } => {\n                         import_candidates(\n-                            self.r.tcx.sess,\n-                            &self.r.tcx.untracked().source_span.read(),\n+                            self.r.tcx,\n                             &mut diag,\n                             None,\n                             &candidates,"}]}