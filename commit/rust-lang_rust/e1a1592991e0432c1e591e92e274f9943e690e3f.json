{"sha": "e1a1592991e0432c1e591e92e274f9943e690e3f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUxYTE1OTI5OTFlMDQzMmMxZTU5MWU5MmUyNzRmOTk0M2U2OTBlM2Y=", "commit": {"author": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-03-28T15:58:36Z"}, "committer": {"name": "David Cook", "email": "divergentdave@gmail.com", "date": "2020-04-05T15:35:08Z"}, "message": "Set some explicit return value sizes", "tree": {"sha": "ed6c8e1667e76873642bd680468bbe9b52b9208f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ed6c8e1667e76873642bd680468bbe9b52b9208f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e1a1592991e0432c1e591e92e274f9943e690e3f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e1a1592991e0432c1e591e92e274f9943e690e3f", "html_url": "https://github.com/rust-lang/rust/commit/e1a1592991e0432c1e591e92e274f9943e690e3f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e1a1592991e0432c1e591e92e274f9943e690e3f/comments", "author": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "committer": {"login": "divergentdave", "id": 181772, "node_id": "MDQ6VXNlcjE4MTc3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/181772?v=4", "gravatar_id": "", "url": "https://api.github.com/users/divergentdave", "html_url": "https://github.com/divergentdave", "followers_url": "https://api.github.com/users/divergentdave/followers", "following_url": "https://api.github.com/users/divergentdave/following{/other_user}", "gists_url": "https://api.github.com/users/divergentdave/gists{/gist_id}", "starred_url": "https://api.github.com/users/divergentdave/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/divergentdave/subscriptions", "organizations_url": "https://api.github.com/users/divergentdave/orgs", "repos_url": "https://api.github.com/users/divergentdave/repos", "events_url": "https://api.github.com/users/divergentdave/events{/privacy}", "received_events_url": "https://api.github.com/users/divergentdave/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37ddde9f70237a05dfdfb0aba837b8704a5dc7d0", "url": "https://api.github.com/repos/rust-lang/rust/commits/37ddde9f70237a05dfdfb0aba837b8704a5dc7d0", "html_url": "https://github.com/rust-lang/rust/commit/37ddde9f70237a05dfdfb0aba837b8704a5dc7d0"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "fbf8a3b9504fb10f1640b22a24c3ce0eb0984571", "filename": "src/shims/foreign_items/posix.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/e1a1592991e0432c1e591e92e274f9943e690e3f/src%2Fshims%2Fforeign_items%2Fposix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e1a1592991e0432c1e591e92e274f9943e690e3f/src%2Fshims%2Fforeign_items%2Fposix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fshims%2Fforeign_items%2Fposix.rs?ref=e1a1592991e0432c1e591e92e274f9943e690e3f", "patch": "@@ -272,72 +272,72 @@ pub trait EvalContextExt<'mir, 'tcx: 'mir>: crate::MiriEvalContextExt<'mir, 'tcx\n \n             \"pthread_mutexattr_init\" => {\n                 let result = this.pthread_mutexattr_init(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutexattr_settype\" => {\n                 let result = this.pthread_mutexattr_settype(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutexattr_destroy\" => {\n                 let result = this.pthread_mutexattr_destroy(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutex_init\" => {\n                 let result = this.pthread_mutex_init(args[0], args[1])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutex_lock\" => {\n                 let result = this.pthread_mutex_lock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutex_trylock\" => {\n                 let result = this.pthread_mutex_trylock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutex_unlock\" => {\n                 let result = this.pthread_mutex_unlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_mutex_destroy\" => {\n                 let result = this.pthread_mutex_destroy(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_rdlock\" => {\n                 let result = this.pthread_rwlock_rdlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_tryrdlock\" => {\n                 let result = this.pthread_rwlock_tryrdlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_wrlock\" => {\n                 let result = this.pthread_rwlock_wrlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_trywrlock\" => {\n                 let result = this.pthread_rwlock_trywrlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_unlock\" => {\n                 let result = this.pthread_rwlock_unlock(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             \"pthread_rwlock_destroy\" => {\n                 let result = this.pthread_rwlock_destroy(args[0])?;\n-                this.write_scalar(Scalar::from_int(result, dest.layout.size), dest)?;\n+                this.write_scalar(Scalar::from_i32(result), dest)?;\n             }\n \n             | \"signal\""}]}