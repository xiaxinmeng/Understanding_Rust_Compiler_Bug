{"sha": "34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM0NzkyZDlmNmE4MzEwMjdhOWMyMWJhMjQzOWI0YTAwOGE1YWIxYWQ=", "commit": {"author": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-10-12T00:50:03Z"}, "committer": {"name": "Alexander Regueiro", "email": "alexreg@me.com", "date": "2018-11-03T04:09:33Z"}, "message": "Added support for trait aliases as bounds.", "tree": {"sha": "2b30f9ad530b823abb77acaa603f800e3dc0385f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2b30f9ad530b823abb77acaa603f800e3dc0385f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "html_url": "https://github.com/rust-lang/rust/commit/34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/comments", "author": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexreg", "id": 67036, "node_id": "MDQ6VXNlcjY3MDM2", "avatar_url": "https://avatars.githubusercontent.com/u/67036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexreg", "html_url": "https://github.com/alexreg", "followers_url": "https://api.github.com/users/alexreg/followers", "following_url": "https://api.github.com/users/alexreg/following{/other_user}", "gists_url": "https://api.github.com/users/alexreg/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexreg/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexreg/subscriptions", "organizations_url": "https://api.github.com/users/alexreg/orgs", "repos_url": "https://api.github.com/users/alexreg/repos", "events_url": "https://api.github.com/users/alexreg/events{/privacy}", "received_events_url": "https://api.github.com/users/alexreg/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b096314a6381e28834ddb1e662ce90e5b32736b", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b096314a6381e28834ddb1e662ce90e5b32736b", "html_url": "https://github.com/rust-lang/rust/commit/8b096314a6381e28834ddb1e662ce90e5b32736b"}], "stats": {"total": 330, "additions": 248, "deletions": 82}, "files": [{"sha": "cf7a7abf95a6c55956d041461c18f04c615dc93d", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -301,9 +301,7 @@ impl<'hir> Map<'hir> {\n                     ItemKind::Struct(..) => Some(Def::Struct(def_id())),\n                     ItemKind::Union(..) => Some(Def::Union(def_id())),\n                     ItemKind::Trait(..) => Some(Def::Trait(def_id())),\n-                    ItemKind::TraitAlias(..) => {\n-                        bug!(\"trait aliases are not yet implemented (see issue #41517)\")\n-                    },\n+                    ItemKind::TraitAlias(..) => Some(Def::TraitAlias(def_id())),\n                     ItemKind::ExternCrate(_) |\n                     ItemKind::Use(..) |\n                     ItemKind::ForeignMod(..) |"}, {"sha": "091ea9f52ff6249047c9d446d37e07df53b6f251", "filename": "src/librustc/ich/impls_ty.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fich%2Fimpls_ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_ty.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -1119,6 +1119,7 @@ for traits::Vtable<'gcx, N> where N: HashStable<StableHashingContext<'a>> {\n             &VtableClosure(ref table_closure) => table_closure.hash_stable(hcx, hasher),\n             &VtableFnPointer(ref table_fn_pointer) => table_fn_pointer.hash_stable(hcx, hasher),\n             &VtableGenerator(ref table_generator) => table_generator.hash_stable(hcx, hasher),\n+            &VtableTraitAlias(ref table_alias) => table_alias.hash_stable(hcx, hasher),\n         }\n     }\n }\n@@ -1227,6 +1228,22 @@ for traits::VtableGeneratorData<'gcx, N> where N: HashStable<StableHashingContex\n     }\n }\n \n+impl<'a, 'gcx, N> HashStable<StableHashingContext<'a>>\n+for traits::VtableTraitAliasData<'gcx, N> where N: HashStable<StableHashingContext<'a>> {\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let traits::VtableTraitAliasData {\n+            alias_def_id,\n+            substs,\n+            ref nested,\n+        } = *self;\n+        alias_def_id.hash_stable(hcx, hasher);\n+        substs.hash_stable(hcx, hasher);\n+        nested.hash_stable(hcx, hasher);\n+    }\n+}\n+\n impl_stable_hash_for!(\n     impl<'tcx, V> for struct infer::canonical::Canonical<'tcx, V> {\n         max_universe, variables, value"}, {"sha": "6b8d66c6fc6298f3b48354f494ea9cff07da1515", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 25, "deletions": 9, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -534,8 +534,11 @@ pub enum Vtable<'tcx, N> {\n     /// Same as above, but for a fn pointer type with the given signature.\n     VtableFnPointer(VtableFnPointerData<'tcx, N>),\n \n-    /// Vtable automatically generated for a generator\n+    /// Vtable automatically generated for a generator.\n     VtableGenerator(VtableGeneratorData<'tcx, N>),\n+\n+    /// Vtable for a trait alias.\n+    VtableTraitAlias(VtableTraitAliasData<'tcx, N>),\n }\n \n /// Identifies a particular impl in the source, along with a set of\n@@ -605,6 +608,13 @@ pub struct VtableFnPointerData<'tcx, N> {\n     pub nested: Vec<N>\n }\n \n+#[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable)]\n+pub struct VtableTraitAliasData<'tcx, N> {\n+    pub alias_def_id: DefId,\n+    pub substs: &'tcx Substs<'tcx>,\n+    pub nested: Vec<N>,\n+}\n+\n /// Creates predicate obligations from the generic bounds.\n pub fn predicates_for_generics<'tcx>(cause: ObligationCause<'tcx>,\n                                      param_env: ty::ParamEnv<'tcx>,\n@@ -1067,6 +1077,7 @@ impl<'tcx, N> Vtable<'tcx, N> {\n             VtableGenerator(c) => c.nested,\n             VtableObject(d) => d.nested,\n             VtableFnPointer(d) => d.nested,\n+            VtableTraitAlias(d) => d.nested,\n         }\n     }\n \n@@ -1090,20 +1101,25 @@ impl<'tcx, N> Vtable<'tcx, N> {\n                 trait_def_id: d.trait_def_id,\n                 nested: d.nested.into_iter().map(f).collect(),\n             }),\n-            VtableFnPointer(p) => VtableFnPointer(VtableFnPointerData {\n-                fn_ty: p.fn_ty,\n-                nested: p.nested.into_iter().map(f).collect(),\n+            VtableClosure(c) => VtableClosure(VtableClosureData {\n+                closure_def_id: c.closure_def_id,\n+                substs: c.substs,\n+                nested: c.nested.into_iter().map(f).collect(),\n             }),\n             VtableGenerator(c) => VtableGenerator(VtableGeneratorData {\n                 generator_def_id: c.generator_def_id,\n                 substs: c.substs,\n                 nested: c.nested.into_iter().map(f).collect(),\n             }),\n-            VtableClosure(c) => VtableClosure(VtableClosureData {\n-                closure_def_id: c.closure_def_id,\n-                substs: c.substs,\n-                nested: c.nested.into_iter().map(f).collect(),\n-            })\n+            VtableFnPointer(p) => VtableFnPointer(VtableFnPointerData {\n+                fn_ty: p.fn_ty,\n+                nested: p.nested.into_iter().map(f).collect(),\n+            }),\n+            VtableTraitAlias(d) => VtableTraitAlias(VtableTraitAliasData {\n+                alias_def_id: d.alias_def_id,\n+                substs: d.substs,\n+                nested: d.nested.into_iter().map(f).collect(),\n+            }),\n         }\n     }\n }"}, {"sha": "b7754ae4fc58df9edeb39e4356b06452f5ebd831", "filename": "src/librustc/traits/project.rs", "status": "modified", "additions": 6, "deletions": 7, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fproject.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fproject.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fproject.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -19,10 +19,7 @@ use super::PredicateObligation;\n use super::Selection;\n use super::SelectionContext;\n use super::SelectionError;\n-use super::VtableClosureData;\n-use super::VtableGeneratorData;\n-use super::VtableFnPointerData;\n-use super::VtableImplData;\n+use super::{VtableImplData, VtableClosureData, VtableGeneratorData, VtableFnPointerData};\n use super::util;\n \n use hir::def_id::DefId;\n@@ -1073,7 +1070,8 @@ fn assemble_candidates_from_impls<'cx, 'gcx, 'tcx>(\n             super::VtableClosure(_) |\n             super::VtableGenerator(_) |\n             super::VtableFnPointer(_) |\n-            super::VtableObject(_) => {\n+            super::VtableObject(_) |\n+            super::VtableTraitAlias(_) => {\n                 debug!(\"assemble_candidates_from_impls: vtable={:?}\",\n                        vtable);\n                 true\n@@ -1235,7 +1233,8 @@ fn confirm_select_candidate<'cx, 'gcx, 'tcx>(\n             confirm_object_candidate(selcx, obligation, obligation_trait_ref),\n         super::VtableAutoImpl(..) |\n         super::VtableParam(..) |\n-        super::VtableBuiltin(..) =>\n+        super::VtableBuiltin(..) |\n+        super::VtableTraitAlias(..) =>\n             // we don't create Select candidates with this kind of resolution\n             span_bug!(\n                 obligation.cause.span,\n@@ -1486,7 +1485,7 @@ fn confirm_impl_candidate<'cx, 'gcx, 'tcx>(\n     impl_vtable: VtableImplData<'tcx, PredicateObligation<'tcx>>)\n     -> Progress<'tcx>\n {\n-    let VtableImplData { substs, nested, impl_def_id } = impl_vtable;\n+    let VtableImplData { impl_def_id, substs, nested } = impl_vtable;\n \n     let tcx = selcx.tcx();\n     let param_env = obligation.param_env;"}, {"sha": "6d9e8d2fbe0f3e9645848ff5f9d76e28d8508cda", "filename": "src/librustc/traits/select.rs", "status": "modified", "additions": 105, "deletions": 35, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fselect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fselect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fselect.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -30,11 +30,11 @@ use super::{ObligationCause, PredicateObligation, TraitObligation};\n use super::{OutputTypeParameterMismatch, Overflow, SelectionError, Unimplemented};\n use super::{\n     VtableAutoImpl, VtableBuiltin, VtableClosure, VtableFnPointer, VtableGenerator, VtableImpl,\n-    VtableObject, VtableParam,\n+    VtableObject, VtableParam, VtableTraitAlias,\n };\n use super::{\n     VtableAutoImplData, VtableBuiltinData, VtableClosureData, VtableFnPointerData,\n-    VtableGeneratorData, VtableImplData, VtableObjectData,\n+    VtableGeneratorData, VtableImplData, VtableObjectData, VtableTraitAliasData,\n };\n \n use dep_graph::{DepKind, DepNodeIndex};\n@@ -271,6 +271,8 @@ enum SelectionCandidate<'tcx> {\n     /// types generated for a fn pointer type (e.g., `fn(int)->int`)\n     FnPointerCandidate,\n \n+    TraitAliasCandidate(DefId),\n+\n     ObjectCandidate,\n \n     BuiltinObjectCandidate,\n@@ -286,12 +288,13 @@ impl<'a, 'tcx> ty::Lift<'tcx> for SelectionCandidate<'a> {\n             ImplCandidate(def_id) => ImplCandidate(def_id),\n             AutoImplCandidate(def_id) => AutoImplCandidate(def_id),\n             ProjectionCandidate => ProjectionCandidate,\n+            ClosureCandidate => ClosureCandidate,\n+            GeneratorCandidate => GeneratorCandidate,\n             FnPointerCandidate => FnPointerCandidate,\n+            TraitAliasCandidate(def_id) => TraitAliasCandidate(def_id),\n             ObjectCandidate => ObjectCandidate,\n             BuiltinObjectCandidate => BuiltinObjectCandidate,\n             BuiltinUnsizeCandidate => BuiltinUnsizeCandidate,\n-            ClosureCandidate => ClosureCandidate,\n-            GeneratorCandidate => GeneratorCandidate,\n \n             ParamCandidate(ref trait_ref) => {\n                 return tcx.lift(trait_ref).map(ParamCandidate);\n@@ -1452,7 +1455,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         let predicate = self.infcx()\n             .resolve_type_vars_if_possible(&obligation.predicate);\n \n-        // ok to skip binder because of the nature of the\n+        // OK to skip binder because of the nature of the\n         // trait-ref-is-knowable check, which does not care about\n         // bound regions\n         let trait_ref = predicate.skip_binder().trait_ref;\n@@ -1632,6 +1635,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             ambiguous: false,\n         };\n \n+        self.assemble_candidates_for_alias(obligation, &mut candidates)?;\n+\n         // Other bounds. Consider both in-scope bounds from fn decl\n         // and applicable impls. There is a certain set of precedence rules here.\n         let def_id = obligation.predicate.def_id();\n@@ -1879,7 +1884,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return Ok(());\n         }\n \n-        // ok to skip binder because the substs on generator types never\n+        // OK to skip binder because the substs on generator types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         let self_ty = *obligation.self_ty().skip_binder();\n@@ -1923,7 +1928,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             }\n         };\n \n-        // ok to skip binder because the substs on closure types never\n+        // OK to skip binder because the substs on closure types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         match obligation.self_ty().skip_binder().sty {\n@@ -1973,7 +1978,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             return Ok(());\n         }\n \n-        // ok to skip binder because what we are inspecting doesn't involve bound regions\n+        // OK to skip binder because what we are inspecting doesn't involve bound regions\n         let self_ty = *obligation.self_ty().skip_binder();\n         match self_ty.sty {\n             ty::Infer(ty::TyVar(_)) => {\n@@ -2250,6 +2255,24 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         }\n     }\n \n+    fn assemble_candidates_for_alias(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        candidates: &mut SelectionCandidateSet<'tcx>,\n+    ) -> Result<(), SelectionError<'tcx>> {\n+        // OK to skip binder here because the tests we do below do not involve bound regions\n+        let self_ty = *obligation.self_ty().skip_binder();\n+        debug!(\"assemble_candidates_for_alias(self_ty={:?})\", self_ty);\n+\n+        let def_id = obligation.predicate.def_id();\n+\n+        if ty::is_trait_alias(self.tcx(), def_id) {\n+            candidates.vec.push(TraitAliasCandidate(def_id.clone()));\n+        }\n+\n+        Ok(())\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // WINNOW\n     //\n@@ -2300,7 +2323,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 | FnPointerCandidate\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n-                | BuiltinCandidate { .. } => {\n+                | BuiltinCandidate { .. }\n+                | TraitAliasCandidate(..) => {\n                     // Global bounds from the where clause should be ignored\n                     // here (see issue #50825). Otherwise, we have a where\n                     // clause so don't go around looking for impls.\n@@ -2330,7 +2354,8 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 | FnPointerCandidate\n                 | BuiltinObjectCandidate\n                 | BuiltinUnsizeCandidate\n-                | BuiltinCandidate { .. } => true,\n+                | BuiltinCandidate { .. }\n+                | TraitAliasCandidate(..) => true,\n                 ObjectCandidate | ProjectionCandidate => {\n                     // Arbitrarily give param candidates priority\n                     // over projection and object candidates.\n@@ -2724,15 +2749,20 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ok(VtableParam(obligations))\n             }\n \n+            ImplCandidate(impl_def_id) => Ok(VtableImpl(self.confirm_impl_candidate(\n+                obligation,\n+                impl_def_id,\n+            ))),\n+\n             AutoImplCandidate(trait_def_id) => {\n                 let data = self.confirm_auto_impl_candidate(obligation, trait_def_id);\n                 Ok(VtableAutoImpl(data))\n             }\n \n-            ImplCandidate(impl_def_id) => Ok(VtableImpl(self.confirm_impl_candidate(\n-                obligation,\n-                impl_def_id,\n-            ))),\n+            ProjectionCandidate => {\n+                self.confirm_projection_candidate(obligation);\n+                Ok(VtableParam(Vec::new()))\n+            }\n \n             ClosureCandidate => {\n                 let vtable_closure = self.confirm_closure_candidate(obligation)?;\n@@ -2744,27 +2774,27 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n                 Ok(VtableGenerator(vtable_generator))\n             }\n \n-            BuiltinObjectCandidate => {\n-                // This indicates something like `(Trait+Send) :\n-                // Send`. In this case, we know that this holds\n-                // because that's what the object type is telling us,\n-                // and there's really no additional obligations to\n-                // prove and no types in particular to unify etc.\n-                Ok(VtableParam(Vec::new()))\n+            FnPointerCandidate => {\n+                let data = self.confirm_fn_pointer_candidate(obligation)?;\n+                Ok(VtableFnPointer(data))\n+            }\n+\n+            TraitAliasCandidate(alias_def_id) => {\n+                let data = self.confirm_trait_alias_candidate(obligation, alias_def_id);\n+                Ok(VtableTraitAlias(data))\n             }\n \n             ObjectCandidate => {\n                 let data = self.confirm_object_candidate(obligation);\n                 Ok(VtableObject(data))\n             }\n \n-            FnPointerCandidate => {\n-                let data = self.confirm_fn_pointer_candidate(obligation)?;\n-                Ok(VtableFnPointer(data))\n-            }\n-\n-            ProjectionCandidate => {\n-                self.confirm_projection_candidate(obligation);\n+            BuiltinObjectCandidate => {\n+                // This indicates something like `(Trait+Send) :\n+                // Send`. In this case, we know that this holds\n+                // because that's what the object type is telling us,\n+                // and there's really no additional obligations to\n+                // prove and no types in particular to unify etc.\n                 Ok(VtableParam(Vec::new()))\n             }\n \n@@ -2998,10 +3028,10 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) -> VtableObjectData<'tcx, PredicateObligation<'tcx>> {\n         debug!(\"confirm_object_candidate({:?})\", obligation);\n \n-        // FIXME skipping binder here seems wrong -- we should\n-        // probably flatten the binder from the obligation and the\n-        // binder from the object. Have to try to make a broken test\n-        // case that results. -nmatsakis\n+        // FIXME(nmatsakis) skipping binder here seems wrong -- we should\n+        // probably flatten the binder from the obligation and the binder\n+        // from the object. Have to try to make a broken test case that\n+        // results.\n         let self_ty = self.infcx\n             .shallow_resolve(*obligation.self_ty().skip_binder());\n         let poly_trait_ref = match self_ty.sty {\n@@ -3053,7 +3083,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n     ) -> Result<VtableFnPointerData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n         debug!(\"confirm_fn_pointer_candidate({:?})\", obligation);\n \n-        // ok to skip binder; it is reintroduced below\n+        // OK to skip binder; it is reintroduced below\n         let self_ty = self.infcx\n             .shallow_resolve(*obligation.self_ty().skip_binder());\n         let sig = self_ty.fn_sig(self.tcx());\n@@ -3089,11 +3119,51 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n         })\n     }\n \n+    fn confirm_trait_alias_candidate(\n+        &mut self,\n+        obligation: &TraitObligation<'tcx>,\n+        alias_def_id: DefId,\n+    ) -> VtableTraitAliasData<'tcx, PredicateObligation<'tcx>> {\n+        debug!(\n+            \"confirm_trait_alias_candidate({:?}, {:?})\",\n+            obligation, alias_def_id\n+        );\n+\n+        self.in_snapshot(|this, snapshot| {\n+            let (predicate, placeholder_map) = this.infcx()\n+                .replace_late_bound_regions_with_placeholders(&obligation.predicate);\n+            let trait_ref = predicate.trait_ref;\n+            let trait_def_id = trait_ref.def_id;\n+            let substs = trait_ref.substs;\n+\n+            let trait_obligations = this.impl_or_trait_obligations(\n+                obligation.cause.clone(),\n+                obligation.recursion_depth,\n+                obligation.param_env,\n+                trait_def_id,\n+                &substs,\n+                placeholder_map,\n+                snapshot,\n+            );\n+\n+            debug!(\n+                \"confirm_trait_alias_candidate: trait_def_id={:?} trait_obligations={:?}\",\n+                trait_def_id, trait_obligations\n+            );\n+\n+            VtableTraitAliasData {\n+                alias_def_id,\n+                substs: substs,\n+                nested: trait_obligations,\n+            }\n+        })\n+    }\n+\n     fn confirm_generator_candidate(\n         &mut self,\n         obligation: &TraitObligation<'tcx>,\n     ) -> Result<VtableGeneratorData<'tcx, PredicateObligation<'tcx>>, SelectionError<'tcx>> {\n-        // ok to skip binder because the substs on generator types never\n+        // OK to skip binder because the substs on generator types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         let self_ty = self.infcx\n@@ -3151,7 +3221,7 @@ impl<'cx, 'gcx, 'tcx> SelectionContext<'cx, 'gcx, 'tcx> {\n             .fn_trait_kind(obligation.predicate.def_id())\n             .unwrap_or_else(|| bug!(\"closure candidate for non-fn trait {:?}\", obligation));\n \n-        // ok to skip binder because the substs on closure types never\n+        // OK to skip binder because the substs on closure types never\n         // touch bound regions, they just capture the in-scope\n         // type/region parameters\n         let self_ty = self.infcx"}, {"sha": "e83d085971caa32ef52c6b2fbab491d53c5cc58d", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 36, "deletions": 6, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -62,6 +62,8 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::Vtable<'tcx, N> {\n             super::VtableParam(ref n) => write!(f, \"VtableParam({:?})\", n),\n \n             super::VtableBuiltin(ref d) => write!(f, \"{:?}\", d),\n+\n+            super::VtableTraitAlias(ref d) => write!(f, \"{:?}\", d),\n         }\n     }\n }\n@@ -70,7 +72,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableImplData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"VtableImpl(impl_def_id={:?}, substs={:?}, nested={:?})\",\n+            \"VtableImplData(impl_def_id={:?}, substs={:?}, nested={:?})\",\n             self.impl_def_id, self.substs, self.nested\n         )\n     }\n@@ -80,7 +82,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableGeneratorData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"VtableGenerator(generator_def_id={:?}, substs={:?}, nested={:?})\",\n+            \"VtableGeneratorData(generator_def_id={:?}, substs={:?}, nested={:?})\",\n             self.generator_def_id, self.substs, self.nested\n         )\n     }\n@@ -90,15 +92,15 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableClosureData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"VtableClosure(closure_def_id={:?}, substs={:?}, nested={:?})\",\n+            \"VtableClosureData(closure_def_id={:?}, substs={:?}, nested={:?})\",\n             self.closure_def_id, self.substs, self.nested\n         )\n     }\n }\n \n impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableBuiltinData<N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n-        write!(f, \"VtableBuiltin(nested={:?})\", self.nested)\n+        write!(f, \"VtableBuiltinData(nested={:?})\", self.nested)\n     }\n }\n \n@@ -116,7 +118,7 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableObjectData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"VtableObject(upcast={:?}, vtable_base={}, nested={:?})\",\n+            \"VtableObjectData(upcast={:?}, vtable_base={}, nested={:?})\",\n             self.upcast_trait_ref, self.vtable_base, self.nested\n         )\n     }\n@@ -126,12 +128,22 @@ impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableFnPointerData<'tcx, N> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(\n             f,\n-            \"VtableFnPointer(fn_ty={:?}, nested={:?})\",\n+            \"VtableFnPointerData(fn_ty={:?}, nested={:?})\",\n             self.fn_ty, self.nested\n         )\n     }\n }\n \n+impl<'tcx, N: fmt::Debug> fmt::Debug for traits::VtableTraitAliasData<'tcx, N> {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        write!(\n+            f,\n+            \"VtableTraitAlias(alias_def_id={:?}, substs={:?}, nested={:?})\",\n+            self.alias_def_id, self.substs, self.nested\n+        )\n+    }\n+}\n+\n impl<'tcx> fmt::Debug for traits::FulfillmentError<'tcx> {\n     fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n         write!(f, \"FulfillmentError({:?},{:?})\", self.obligation, self.code)\n@@ -321,6 +333,17 @@ impl<'a, 'tcx> Lift<'tcx> for traits::Vtable<'a, ()> {\n                     nested,\n                 })\n             ),\n+            traits::VtableTraitAlias(traits::VtableTraitAliasData {\n+                alias_def_id,\n+                substs,\n+                nested,\n+            }) => tcx.lift(&substs).map(|substs|\n+                traits::VtableTraitAlias(traits::VtableTraitAliasData {\n+                    alias_def_id,\n+                    substs,\n+                    nested,\n+                })\n+            ),\n         }\n     }\n }\n@@ -386,6 +409,12 @@ BraceStructTypeFoldableImpl! {\n     } where N: TypeFoldable<'tcx>\n }\n \n+BraceStructTypeFoldableImpl! {\n+    impl<'tcx, N> TypeFoldable<'tcx> for traits::VtableTraitAliasData<'tcx, N> {\n+        alias_def_id, substs, nested\n+    } where N: TypeFoldable<'tcx>\n+}\n+\n EnumTypeFoldableImpl! {\n     impl<'tcx, N> TypeFoldable<'tcx> for traits::Vtable<'tcx, N> {\n         (traits::VtableImpl)(a),\n@@ -396,6 +425,7 @@ EnumTypeFoldableImpl! {\n         (traits::VtableParam)(a),\n         (traits::VtableBuiltin)(a),\n         (traits::VtableObject)(a),\n+        (traits::VtableTraitAlias)(a),\n     } where N: TypeFoldable<'tcx>\n }\n "}, {"sha": "1627f9a766c4e02c52c41fbd91e8321cd503a399", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -400,7 +400,9 @@ fn resolve_associated_item<'a, 'tcx>(\n                 None\n             }\n         }\n-        traits::VtableAutoImpl(..) | traits::VtableParam(..) => None\n+        traits::VtableAutoImpl(..) |\n+        traits::VtableParam(..) |\n+        traits::VtableTraitAlias(..) => None\n     }\n }\n "}, {"sha": "f3ae15e3b3c53f0950015f4f58623ad97ef09f7b", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 18, "deletions": 6, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -2801,7 +2801,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         }\n     }\n \n-    /// Determine whether an item is annotated with an attribute\n+    /// Determine whether an item is annotated with an attribute.\n     pub fn has_attr(self, did: DefId, attr: &str) -> bool {\n         attr::contains_name(&self.get_attrs(did), attr)\n     }\n@@ -2815,14 +2815,14 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         self.optimized_mir(def_id).generator_layout.as_ref().unwrap()\n     }\n \n-    /// Given the def_id of an impl, return the def_id of the trait it implements.\n+    /// Given the def-id of an impl, return the def_id of the trait it implements.\n     /// If it implements no trait, return `None`.\n     pub fn trait_id_of_impl(self, def_id: DefId) -> Option<DefId> {\n         self.impl_trait_ref(def_id).map(|tr| tr.def_id)\n     }\n \n-    /// If the given def ID describes a method belonging to an impl, return the\n-    /// ID of the impl that the method belongs to. Otherwise, return `None`.\n+    /// If the given defid describes a method belonging to an impl, return the\n+    /// def-id of the impl that the method belongs to. Otherwise, return `None`.\n     pub fn impl_of_method(self, def_id: DefId) -> Option<DefId> {\n         let item = if def_id.krate != LOCAL_CRATE {\n             if let Some(Def::Method(_)) = self.describe_def(def_id) {\n@@ -2987,7 +2987,7 @@ fn trait_of_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) -> Option\n         })\n }\n \n-/// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition\n+/// Yields the parent function's `DefId` if `def_id` is an `impl Trait` definition.\n pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefId> {\n     if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n         if let Node::Item(item) = tcx.hir.get(node_id) {\n@@ -2999,7 +2999,19 @@ pub fn is_impl_trait_defn(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> Option<DefI\n     None\n }\n \n-/// See `ParamEnv` struct def'n for details.\n+/// Returns `true` if `def_id` is a trait alias.\n+pub fn is_trait_alias(tcx: TyCtxt<'_, '_, '_>, def_id: DefId) -> bool {\n+    if let Some(node_id) = tcx.hir.as_local_node_id(def_id) {\n+        if let Node::Item(item) = tcx.hir.get(node_id) {\n+            if let hir::ItemKind::TraitAlias(..) = item.node {\n+                return true;\n+            }\n+        }\n+    }\n+    false\n+}\n+\n+/// See `ParamEnv` struct definition for details.\n fn param_env<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                        def_id: DefId)\n                        -> ParamEnv<'tcx>"}, {"sha": "a7eccd6b44dbf3834855c5f69631336e8c96430e", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -3888,15 +3888,15 @@ impl<'a, 'crateloader: 'a> Resolver<'a, 'crateloader> {\n                             // report an error.\n                             if record_used {\n                                 resolve_error(self, span,\n-                                        ResolutionError::CannotCaptureDynamicEnvironmentInFnItem);\n+                                    ResolutionError::CannotCaptureDynamicEnvironmentInFnItem);\n                             }\n                             return Def::Err;\n                         }\n                         ConstantItemRibKind => {\n                             // Still doesn't deal with upvars\n                             if record_used {\n                                 resolve_error(self, span,\n-                                        ResolutionError::AttemptToUseNonConstantValueInConstant);\n+                                    ResolutionError::AttemptToUseNonConstantValueInConstant);\n                             }\n                             return Def::Err;\n                         }"}, {"sha": "a8b24019af0a07094bbc9130c7843e229b868bfa", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -419,12 +419,9 @@ fn convert_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, item_id: ast::NodeId) {\n             tcx.predicates_of(def_id);\n         }\n         hir::ItemKind::TraitAlias(..) => {\n-            span_err!(\n-                tcx.sess,\n-                it.span,\n-                E0645,\n-                \"trait aliases are not yet implemented (see issue #41517)\"\n-            );\n+            tcx.generics_of(def_id);\n+            tcx.at(it.span).super_predicates_of(def_id);\n+            tcx.predicates_of(def_id);\n         }\n         hir::ItemKind::Struct(ref struct_def, _) | hir::ItemKind::Union(ref struct_def, _) => {\n             tcx.generics_of(def_id);"}, {"sha": "6abc506c07b736d08059d390626f7a78fcf86ae7", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -1635,19 +1635,13 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                             if name == \"packed\" {\n                                 gate_feature_post!(&self, repr_packed, attr.span,\n                                                    \"the `#[repr(packed(n))]` attribute \\\n-                                                   is experimental\");\n+                                                    is experimental\");\n                             }\n                         }\n                     }\n                 }\n             }\n \n-            ast::ItemKind::TraitAlias(..) => {\n-                gate_feature_post!(&self, trait_alias,\n-                                   i.span,\n-                                   \"trait aliases are not yet fully implemented\");\n-            }\n-\n             ast::ItemKind::Impl(_, polarity, defaultness, _, _, _, _) => {\n                 if polarity == ast::ImplPolarity::Negative {\n                     gate_feature_post!(&self, optin_builtin_traits,\n@@ -1669,6 +1663,15 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                                    \"auto traits are experimental and possibly buggy\");\n             }\n \n+            ast::ItemKind::TraitAlias(..) => {\n+                gate_feature_post!(\n+                    &self,\n+                    trait_alias,\n+                    i.span,\n+                    \"trait aliases are experimental\"\n+                );\n+            }\n+\n             ast::ItemKind::MacroDef(ast::MacroDef { legacy: false, .. }) => {\n                 let msg = \"`macro` is experimental\";\n                 gate_feature_post!(&self, decl_macro, i.span, msg);"}, {"sha": "7659655be97b4b6fcd208ecf29f2a537cce89b8c", "filename": "src/test/run-pass/traits/trait-alias.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs", "raw_url": "https://github.com/rust-lang/rust/raw/34792d9f6a831027a9c21ba2439b4a008a5ab1ad/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftraits%2Ftrait-alias.rs?ref=34792d9f6a831027a9c21ba2439b4a008a5ab1ad", "patch": "@@ -0,0 +1,22 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(trait_alias)]\n+\n+trait Foo = std::fmt::Debug;\n+\n+fn foo<T: Foo>(v: &T) {\n+    println!(\"{:?}\", v);\n+}\n+\n+pub fn main() {\n+    foo(&12345);\n+    let foo: &Foo = &0i32;\n+}"}]}