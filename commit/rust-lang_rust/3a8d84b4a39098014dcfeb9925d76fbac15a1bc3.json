{"sha": "3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "node_id": "C_kwDOAAsO6NoAKDNhOGQ4NGI0YTM5MDk4MDE0ZGNmZWI5OTI1ZDc2ZmJhYzE1YTFiYzM", "commit": {"author": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-09-26T18:16:02Z"}, "committer": {"name": "unexge", "email": "unexge@gmail.com", "date": "2022-09-26T18:16:02Z"}, "message": "Use `Arc<[DefDiagnostic]>` instead of `Arc<Vec<DefDiagnostic>>`", "tree": {"sha": "6bde1e345ec166519dce2caf09142e847b7d141a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6bde1e345ec166519dce2caf09142e847b7d141a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "html_url": "https://github.com/rust-lang/rust/commit/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/comments", "author": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "committer": {"login": "unexge", "id": 16212576, "node_id": "MDQ6VXNlcjE2MjEyNTc2", "avatar_url": "https://avatars.githubusercontent.com/u/16212576?v=4", "gravatar_id": "", "url": "https://api.github.com/users/unexge", "html_url": "https://github.com/unexge", "followers_url": "https://api.github.com/users/unexge/followers", "following_url": "https://api.github.com/users/unexge/following{/other_user}", "gists_url": "https://api.github.com/users/unexge/gists{/gist_id}", "starred_url": "https://api.github.com/users/unexge/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/unexge/subscriptions", "organizations_url": "https://api.github.com/users/unexge/orgs", "repos_url": "https://api.github.com/users/unexge/repos", "events_url": "https://api.github.com/users/unexge/events{/privacy}", "received_events_url": "https://api.github.com/users/unexge/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b21bf25a07ef4cff8e9e38f44f9f407bb2bd207d", "url": "https://api.github.com/repos/rust-lang/rust/commits/b21bf25a07ef4cff8e9e38f44f9f407bb2bd207d", "html_url": "https://github.com/rust-lang/rust/commit/b21bf25a07ef4cff8e9e38f44f9f407bb2bd207d"}], "stats": {"total": 38, "additions": 16, "deletions": 22}, "files": [{"sha": "938db032fbc8b6a79b130030750b1e48898857bd", "filename": "crates/hir-def/src/adt.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fadt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fadt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fadt.rs?ref=3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "patch": "@@ -151,7 +151,7 @@ impl StructData {\n     pub(crate) fn struct_data_with_diagnostics_query(\n         db: &dyn DefDatabase,\n         id: StructId,\n-    ) -> (Arc<StructData>, Arc<Vec<DefDiagnostic>>) {\n+    ) -> (Arc<StructData>, Arc<[DefDiagnostic]>) {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n         let item_tree = loc.id.item_tree(db);\n@@ -176,7 +176,7 @@ impl StructData {\n                 repr,\n                 visibility: item_tree[strukt.visibility].clone(),\n             }),\n-            Arc::new(diagnostics),\n+            diagnostics.into(),\n         )\n     }\n \n@@ -187,7 +187,7 @@ impl StructData {\n     pub(crate) fn union_data_with_diagnostics_query(\n         db: &dyn DefDatabase,\n         id: UnionId,\n-    ) -> (Arc<StructData>, Arc<Vec<DefDiagnostic>>) {\n+    ) -> (Arc<StructData>, Arc<[DefDiagnostic]>) {\n         let loc = id.lookup(db);\n         let krate = loc.container.krate;\n         let item_tree = loc.id.item_tree(db);\n@@ -212,7 +212,7 @@ impl StructData {\n                 repr,\n                 visibility: item_tree[union.visibility].clone(),\n             }),\n-            Arc::new(diagnostics),\n+            diagnostics.into(),\n         )\n     }\n }\n@@ -225,7 +225,7 @@ impl EnumData {\n     pub(crate) fn enum_data_with_diagnostics_query(\n         db: &dyn DefDatabase,\n         e: EnumId,\n-    ) -> (Arc<EnumData>, Arc<Vec<DefDiagnostic>>) {\n+    ) -> (Arc<EnumData>, Arc<[DefDiagnostic]>) {\n         let loc = e.lookup(db);\n         let krate = loc.container.krate;\n         let item_tree = loc.id.item_tree(db);\n@@ -272,7 +272,7 @@ impl EnumData {\n                 repr,\n                 visibility: item_tree[enum_.visibility].clone(),\n             }),\n-            Arc::new(diagnostics),\n+            diagnostics.into(),\n         )\n     }\n "}, {"sha": "2dc69b00ace00d12659f844b1ceafee85a2b4957", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "patch": "@@ -219,7 +219,7 @@ impl TraitData {\n     pub(crate) fn trait_data_with_diagnostics_query(\n         db: &dyn DefDatabase,\n         tr: TraitId,\n-    ) -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>) {\n+    ) -> (Arc<TraitData>, Arc<[DefDiagnostic]>) {\n         let tr_loc @ ItemLoc { container: module_id, id: tree_id } = tr.lookup(db);\n         let item_tree = tree_id.item_tree(db);\n         let tr_def = &item_tree[tree_id.value];\n@@ -251,7 +251,7 @@ impl TraitData {\n                 visibility,\n                 skip_array_during_method_dispatch,\n             }),\n-            Arc::new(diagnostics),\n+            diagnostics.into(),\n         )\n     }\n \n@@ -299,7 +299,7 @@ impl ImplData {\n     pub(crate) fn impl_data_with_diagnostics_query(\n         db: &dyn DefDatabase,\n         id: ImplId,\n-    ) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>) {\n+    ) -> (Arc<ImplData>, Arc<[DefDiagnostic]>) {\n         let _p = profile::span(\"impl_data_with_diagnostics_query\");\n         let ItemLoc { container: module_id, id: tree_id } = id.lookup(db);\n \n@@ -318,7 +318,7 @@ impl ImplData {\n \n         (\n             Arc::new(ImplData { target_trait, self_ty, items, is_negative, attribute_calls }),\n-            Arc::new(diagnostics),\n+            diagnostics.into(),\n         )\n     }\n "}, {"sha": "431c8255497b62e17741350c424f069f23b04f11", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 6, "deletions": 12, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a8d84b4a39098014dcfeb9925d76fbac15a1bc3/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=3a8d84b4a39098014dcfeb9925d76fbac15a1bc3", "patch": "@@ -98,38 +98,32 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     fn struct_data(&self, id: StructId) -> Arc<StructData>;\n \n     #[salsa::invoke(StructData::struct_data_with_diagnostics_query)]\n-    fn struct_data_with_diagnostics(\n-        &self,\n-        id: StructId,\n-    ) -> (Arc<StructData>, Arc<Vec<DefDiagnostic>>);\n+    fn struct_data_with_diagnostics(&self, id: StructId)\n+        -> (Arc<StructData>, Arc<[DefDiagnostic]>);\n \n     #[salsa::invoke(StructData::union_data_query)]\n     fn union_data(&self, id: UnionId) -> Arc<StructData>;\n \n     #[salsa::invoke(StructData::union_data_with_diagnostics_query)]\n-    fn union_data_with_diagnostics(\n-        &self,\n-        id: UnionId,\n-    ) -> (Arc<StructData>, Arc<Vec<DefDiagnostic>>);\n+    fn union_data_with_diagnostics(&self, id: UnionId) -> (Arc<StructData>, Arc<[DefDiagnostic]>);\n \n     #[salsa::invoke(EnumData::enum_data_query)]\n     fn enum_data(&self, e: EnumId) -> Arc<EnumData>;\n \n     #[salsa::invoke(EnumData::enum_data_with_diagnostics_query)]\n-    fn enum_data_with_diagnostics(&self, e: EnumId) -> (Arc<EnumData>, Arc<Vec<DefDiagnostic>>);\n+    fn enum_data_with_diagnostics(&self, e: EnumId) -> (Arc<EnumData>, Arc<[DefDiagnostic]>);\n \n     #[salsa::invoke(ImplData::impl_data_query)]\n     fn impl_data(&self, e: ImplId) -> Arc<ImplData>;\n \n     #[salsa::invoke(ImplData::impl_data_with_diagnostics_query)]\n-    fn impl_data_with_diagnostics(&self, e: ImplId) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>);\n+    fn impl_data_with_diagnostics(&self, e: ImplId) -> (Arc<ImplData>, Arc<[DefDiagnostic]>);\n \n     #[salsa::invoke(TraitData::trait_data_query)]\n     fn trait_data(&self, e: TraitId) -> Arc<TraitData>;\n \n     #[salsa::invoke(TraitData::trait_data_with_diagnostics_query)]\n-    fn trait_data_with_diagnostics(&self, tr: TraitId)\n-        -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>);\n+    fn trait_data_with_diagnostics(&self, tr: TraitId) -> (Arc<TraitData>, Arc<[DefDiagnostic]>);\n \n     #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;"}]}