{"sha": "fabd8a68345270c053cce906e5f037e0cfe7b6ef", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhYmQ4YTY4MzQ1MjcwYzA1M2NjZTkwNmU1ZjAzN2UwY2ZlN2I2ZWY=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-01T09:36:04Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-09-01T09:46:49Z"}, "message": "Simplify TokenTreesReader\n\nThis `joint_to_prev` bit of state is no longer needed.", "tree": {"sha": "b0747095db29dbdd4055dca53cf3cb2647076a07", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b0747095db29dbdd4055dca53cf3cb2647076a07"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fabd8a68345270c053cce906e5f037e0cfe7b6ef", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fabd8a68345270c053cce906e5f037e0cfe7b6ef", "html_url": "https://github.com/rust-lang/rust/commit/fabd8a68345270c053cce906e5f037e0cfe7b6ef", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fabd8a68345270c053cce906e5f037e0cfe7b6ef/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5326361fc00544f7ba77b250e9646cf05cd07c43", "url": "https://api.github.com/repos/rust-lang/rust/commits/5326361fc00544f7ba77b250e9646cf05cd07c43", "html_url": "https://github.com/rust-lang/rust/commit/5326361fc00544f7ba77b250e9646cf05cd07c43"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "d5977ca3c7d2fb8a735841b50dc13c578af613b9", "filename": "compiler/rustc_parse/src/lexer/tokentrees.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fabd8a68345270c053cce906e5f037e0cfe7b6ef/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fabd8a68345270c053cce906e5f037e0cfe7b6ef/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Flexer%2Ftokentrees.rs?ref=fabd8a68345270c053cce906e5f037e0cfe7b6ef", "patch": "@@ -16,7 +16,6 @@ impl<'a> StringReader<'a> {\n         let mut tt_reader = TokenTreesReader {\n             string_reader: self,\n             token: Token::dummy(),\n-            joint_to_prev: Joint,\n             open_braces: Vec::new(),\n             unmatched_braces: Vec::new(),\n             matching_delim_spans: Vec::new(),\n@@ -32,7 +31,6 @@ impl<'a> StringReader<'a> {\n struct TokenTreesReader<'a> {\n     string_reader: StringReader<'a>,\n     token: Token,\n-    joint_to_prev: IsJoint,\n     /// Stack of open delimiters and their spans. Used for error message.\n     open_braces: Vec<(token::DelimToken, Span)>,\n     unmatched_braces: Vec<UnmatchedBrace>,\n@@ -53,7 +51,7 @@ impl<'a> TokenTreesReader<'a> {\n     fn parse_all_token_trees(&mut self) -> PResult<'a, TokenStream> {\n         let mut buf = TokenStreamBuilder::default();\n \n-        self.real_token();\n+        self.bump();\n         while self.token != token::Eof {\n             buf.push(self.parse_token_tree()?);\n         }\n@@ -126,7 +124,7 @@ impl<'a> TokenTreesReader<'a> {\n \n                 // Parse the open delimiter.\n                 self.open_braces.push((delim, self.token.span));\n-                self.real_token();\n+                self.bump();\n \n                 // Parse the token trees within the delimiters.\n                 // We stop at any delimiter so we can try to recover if the user\n@@ -171,7 +169,7 @@ impl<'a> TokenTreesReader<'a> {\n                             ));\n                         }\n                         // Parse the closing delimiter.\n-                        self.real_token();\n+                        self.bump();\n                     }\n                     // Incorrect delimiter.\n                     token::CloseDelim(other) => {\n@@ -217,7 +215,7 @@ impl<'a> TokenTreesReader<'a> {\n                         //     bar(baz(\n                         // }  // Incorrect delimiter but matches the earlier `{`\n                         if !self.open_braces.iter().any(|&(b, _)| b == other) {\n-                            self.real_token();\n+                            self.bump();\n                         }\n                     }\n                     token::Eof => {\n@@ -264,17 +262,19 @@ impl<'a> TokenTreesReader<'a> {\n             }\n             _ => {\n                 let tt = TokenTree::Token(self.token.take());\n-                self.real_token();\n-                let is_joint = self.joint_to_prev == Joint && self.token.is_op();\n-                Ok((tt, if is_joint { Joint } else { NonJoint }))\n+                let mut is_joint = self.bump();\n+                if !self.token.is_op() {\n+                    is_joint = NonJoint;\n+                }\n+                Ok((tt, is_joint))\n             }\n         }\n     }\n \n-    fn real_token(&mut self) {\n+    fn bump(&mut self) -> IsJoint {\n         let (joint_to_prev, token) = self.string_reader.next_token();\n-        self.joint_to_prev = joint_to_prev;\n         self.token = token;\n+        joint_to_prev\n     }\n }\n "}]}