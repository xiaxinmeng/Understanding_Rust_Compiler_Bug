{"sha": "dedd4302d190f5a232e75e2b808a4b86ae323678", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlZGQ0MzAyZDE5MGY1YTIzMmU3NWUyYjgwOGE0Yjg2YWUzMjM2Nzg=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-21T17:45:01Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2015-06-21T17:45:01Z"}, "message": "Auto merge of #25641 - geofft:execve-const, r=alexcrichton\n\nThe `execv` family of functions and `getopt` are prototyped somewhat strangely in C: they take a `char *const argv[]` (and `envp`, for `execve`), an immutable array of mutable C strings -- in other words, a `char *const *argv` or `argv: *const *mut c_char`. The current Rust binding uses `*mut *const c_char`, which is backwards (a mutable array of constant C strings).\r\n\r\nThat said, these functions do not actually modify their arguments. Once upon a time, C didn't have `const`, and to this day, string literals in C have type `char *` (`*mut c_char`). So an array of string literals has type `char * []`, equivalent to `char **` in a function parameter (Rust `*mut *mut c_char`). C allows an implicit cast from `T **` to `T * const *` (`*const *mut T`) but not to `const T * const *` (`*const *const T`). Therefore, prototyping `execv` as taking `const char * const argv[]` would have broken existing code (by requiring an explicit cast), despite being more correct. So, even though these functions don't need mutable data, they're prototyped as if they do.\r\n\r\nWhile it's theoretically possible that an implementation could choose to use its freedom to modify the mutable data, such an implementation would break the innumerable users of `execv`-family functions that call them with string literals. Such an implementation would also break `std::process`, which currently works around this with an unsafe `as *mut _` cast, and assumes that `execvp` secretly does not modify its argument. Furthermore, there's nothing useful to be gained by being able to write to the strings in `argv` themselves but not being able to write to the array containing those strings (you can't reorder arguments, add arguments, increase the length of any parameter, etc.).\r\n\r\nSo, despite the C prototype with its legacy C problems, it's simpler for everyone for Rust to consider these functions as taking `*const *const c_char`, and it's also safe to do so. Rust does not need to expose the mistakes of C here. This patch makes that change, and drops the unsafe cast in `std::process` since it's now unnecessary.", "tree": {"sha": "50969059568b30f130106502d06a92325c941dbb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/50969059568b30f130106502d06a92325c941dbb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dedd4302d190f5a232e75e2b808a4b86ae323678", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dedd4302d190f5a232e75e2b808a4b86ae323678", "html_url": "https://github.com/rust-lang/rust/commit/dedd4302d190f5a232e75e2b808a4b86ae323678", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dedd4302d190f5a232e75e2b808a4b86ae323678/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a38e7585fc29289581e6cefcdf9e201c3d58ed14", "url": "https://api.github.com/repos/rust-lang/rust/commits/a38e7585fc29289581e6cefcdf9e201c3d58ed14", "html_url": "https://github.com/rust-lang/rust/commit/a38e7585fc29289581e6cefcdf9e201c3d58ed14"}, {"sha": "058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "url": "https://api.github.com/repos/rust-lang/rust/commits/058a0f0b0bb1c39d620f7ce1d81150141c6a6341", "html_url": "https://github.com/rust-lang/rust/commit/058a0f0b0bb1c39d620f7ce1d81150141c6a6341"}], "stats": {"total": 36, "additions": 19, "deletions": 17}, "files": [{"sha": "893bceed582314895129a798943ec7eddf629cd9", "filename": "src/liblibc/lib.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/dedd4302d190f5a232e75e2b808a4b86ae323678/src%2Fliblibc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedd4302d190f5a232e75e2b808a4b86ae323678/src%2Fliblibc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc%2Flib.rs?ref=dedd4302d190f5a232e75e2b808a4b86ae323678", "patch": "@@ -5493,17 +5493,17 @@ pub mod funcs {\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 #[link_name = \"_execv\"]\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> intptr_t;\n+                             argv: *const *const c_char) -> intptr_t;\n                 #[link_name = \"_execve\"]\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 #[link_name = \"_execvp\"]\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 #[link_name = \"_execvpe\"]\n-                pub fn execvpe(c: *const c_char, argv: *mut *const c_char,\n-                               envp: *mut *const c_char) -> c_int;\n+                pub fn execvpe(c: *const c_char, argv: *const *const c_char,\n+                               envp: *const *const c_char) -> c_int;\n                 #[link_name = \"_getcwd\"]\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n                 #[link_name = \"_getpid\"]\n@@ -5687,12 +5687,12 @@ pub mod funcs {\n                 pub fn dup(fd: c_int) -> c_int;\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> c_int;\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                             argv: *const *const c_char) -> c_int;\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 pub fn fork() -> pid_t;\n                 pub fn fpathconf(filedes: c_int, name: c_int) -> c_long;\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n@@ -5702,7 +5702,9 @@ pub mod funcs {\n                 pub fn getgroups(ngroups_max: c_int, groups: *mut gid_t)\n                                  -> c_int;\n                 pub fn getlogin() -> *mut c_char;\n-                pub fn getopt(argc: c_int, argv: *mut *const c_char,\n+                // GNU getopt(3) modifies its arguments despite the\n+                // char * const [] prototype; see the manpage.\n+                pub fn getopt(argc: c_int, argv: *mut *mut c_char,\n                               optstr: *const c_char) -> c_int;\n                 pub fn getpgrp() -> pid_t;\n                 pub fn getpid() -> pid_t;\n@@ -5752,19 +5754,19 @@ pub mod funcs {\n                 pub fn dup(fd: c_int) -> c_int;\n                 pub fn dup2(src: c_int, dst: c_int) -> c_int;\n                 pub fn execv(prog: *const c_char,\n-                             argv: *mut *const c_char) -> c_int;\n-                pub fn execve(prog: *const c_char, argv: *mut *const c_char,\n-                              envp: *mut *const c_char)\n+                             argv: *const *const c_char) -> c_int;\n+                pub fn execve(prog: *const c_char, argv: *const *const c_char,\n+                              envp: *const *const c_char)\n                               -> c_int;\n                 pub fn execvp(c: *const c_char,\n-                              argv: *mut *const c_char) -> c_int;\n+                              argv: *const *const c_char) -> c_int;\n                 pub fn fork() -> pid_t;\n                 pub fn getcwd(buf: *mut c_char, size: size_t) -> *mut c_char;\n                 pub fn getegid() -> gid_t;\n                 pub fn geteuid() -> uid_t;\n                 pub fn getgid() -> gid_t;\n                 pub fn getlogin() -> *mut c_char;\n-                pub fn getopt(argc: c_int, argv: *mut *const c_char,\n+                pub fn getopt(argc: c_int, argv: *const *const c_char,\n                               optstr: *const c_char) -> c_int;\n                 pub fn getuid() -> uid_t;\n                 pub fn getsid(pid: pid_t) -> pid_t;"}, {"sha": "acf6fbc24e461037e7a9346df136a6ce82a6a323", "filename": "src/libstd/sys/unix/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dedd4302d190f5a232e75e2b808a4b86ae323678/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dedd4302d190f5a232e75e2b808a4b86ae323678/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fprocess.rs?ref=dedd4302d190f5a232e75e2b808a4b86ae323678", "patch": "@@ -313,7 +313,7 @@ impl Process {\n         if !envp.is_null() {\n             *sys::os::environ() = envp as *const _;\n         }\n-        let _ = libc::execvp(*argv, argv as *mut _);\n+        let _ = libc::execvp(*argv, argv);\n         fail(&mut output)\n     }\n "}]}