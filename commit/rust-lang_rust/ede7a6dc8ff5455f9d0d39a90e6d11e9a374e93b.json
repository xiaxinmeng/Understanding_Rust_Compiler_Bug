{"sha": "ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVkZTdhNmRjOGZmNTQ1NWY5ZDBkMzlhOTBlNmQxMWU5YTM3NGU5M2I=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-01T01:10:06Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2015-05-01T01:32:13Z"}, "message": "Give access to field attributes in ext::deriving", "tree": {"sha": "e5114555a87d32b1b1ccfebf9f20759c6be2d7af", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5114555a87d32b1b1ccfebf9f20759c6be2d7af"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b", "html_url": "https://github.com/rust-lang/rust/commit/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8a60e5667fa77c4a7a4e13bf7ab4ad6f1d033ca9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8a60e5667fa77c4a7a4e13bf7ab4ad6f1d033ca9", "html_url": "https://github.com/rust-lang/rust/commit/8a60e5667fa77c4a7a4e13bf7ab4ad6f1d033ca9"}], "stats": {"total": 62, "additions": 33, "deletions": 29}, "files": [{"sha": "22f62d9efa07d6c8f3e427088326fef1cafa96c6", "filename": "src/libsyntax/ext/deriving/generic/mod.rs", "status": "modified", "additions": 33, "deletions": 29, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fderiving%2Fgeneric%2Fmod.rs?ref=ede7a6dc8ff5455f9d0d39a90e6d11e9a374e93b", "patch": "@@ -270,7 +270,7 @@ pub struct Substructure<'a> {\n }\n \n /// Summary of the relevant parts of a struct/enum field.\n-pub struct FieldInfo {\n+pub struct FieldInfo<'a> {\n     pub span: Span,\n     /// None for tuple structs/normal enum variants, Some for normal\n     /// structs/struct enum variants.\n@@ -281,6 +281,8 @@ pub struct FieldInfo {\n     /// The expressions corresponding to references to this field in\n     /// the other `Self` arguments.\n     pub other: Vec<P<Expr>>,\n+    /// The attributes on the field\n+    pub attrs: &'a [ast::Attribute],\n }\n \n /// Fields for a static method\n@@ -293,11 +295,11 @@ pub enum StaticFields {\n \n /// A summary of the possible sets of fields.\n pub enum SubstructureFields<'a> {\n-    Struct(Vec<FieldInfo>),\n+    Struct(Vec<FieldInfo<'a>>),\n     /// Matching variants of the enum: variant index, ast::Variant,\n     /// fields: the field name is only non-`None` in the case of a struct\n     /// variant.\n-    EnumMatching(usize, &'a ast::Variant, Vec<FieldInfo>),\n+    EnumMatching(usize, &'a ast::Variant, Vec<FieldInfo<'a>>),\n \n     /// Non-matching variants of the enum, but with all state hidden from\n     /// the consequent code.  The first component holds `Ident`s for all of\n@@ -378,7 +380,7 @@ impl<'a> TraitDef<'a> {\n     pub fn expand(&self,\n                   cx: &mut ExtCtxt,\n                   mitem: &ast::MetaItem,\n-                  item: &ast::Item,\n+                  item: &'a     ast::Item,\n                   push: &mut FnMut(P<ast::Item>))\n     {\n         let newitem = match item.node {\n@@ -609,7 +611,7 @@ impl<'a> TraitDef<'a> {\n \n     fn expand_struct_def(&self,\n                          cx: &mut ExtCtxt,\n-                         struct_def: &StructDef,\n+                         struct_def: &'a StructDef,\n                          type_ident: Ident,\n                          generics: &Generics) -> P<ast::Item> {\n         let field_tys: Vec<P<ast::Ty>> = struct_def.fields.iter()\n@@ -653,7 +655,7 @@ impl<'a> TraitDef<'a> {\n \n     fn expand_enum_def(&self,\n                        cx: &mut ExtCtxt,\n-                       enum_def: &EnumDef,\n+                       enum_def: &'a EnumDef,\n                        type_attrs: &[ast::Attribute],\n                        type_ident: Ident,\n                        generics: &Generics) -> P<ast::Item> {\n@@ -885,10 +887,10 @@ impl<'a> MethodDef<'a> {\n     ///     }\n     /// }\n     /// ```\n-    fn expand_struct_method_body(&self,\n+    fn expand_struct_method_body<'b>(&self,\n                                  cx: &mut ExtCtxt,\n-                                 trait_: &TraitDef,\n-                                 struct_def: &StructDef,\n+                                 trait_: &TraitDef<'b>,\n+                                 struct_def: &'b StructDef,\n                                  type_ident: Ident,\n                                  self_args: &[P<Expr>],\n                                  nonself_args: &[P<Expr>])\n@@ -914,18 +916,19 @@ impl<'a> MethodDef<'a> {\n         let fields = if !raw_fields.is_empty() {\n             let mut raw_fields = raw_fields.into_iter().map(|v| v.into_iter());\n             let first_field = raw_fields.next().unwrap();\n-            let mut other_fields: Vec<vec::IntoIter<(Span, Option<Ident>, P<Expr>)>>\n+            let mut other_fields: Vec<vec::IntoIter<_>>\n                 = raw_fields.collect();\n-            first_field.map(|(span, opt_id, field)| {\n+            first_field.map(|(span, opt_id, field, attrs)| {\n                 FieldInfo {\n                     span: span,\n                     name: opt_id,\n                     self_: field,\n                     other: other_fields.iter_mut().map(|l| {\n                         match l.next().unwrap() {\n-                            (_, _, ex) => ex\n+                            (_, _, ex, _) => ex\n                         }\n-                    }).collect()\n+                    }).collect(),\n+                    attrs: attrs,\n                 }\n             }).collect()\n         } else {\n@@ -999,10 +1002,10 @@ impl<'a> MethodDef<'a> {\n     /// `PartialEq`, and those subcomputations will hopefully be removed\n     /// as their results are unused.  The point of `__self_vi` and\n     /// `__arg_1_vi` is for `PartialOrd`; see #15503.)\n-    fn expand_enum_method_body(&self,\n+    fn expand_enum_method_body<'b>(&self,\n                                cx: &mut ExtCtxt,\n-                               trait_: &TraitDef,\n-                               enum_def: &EnumDef,\n+                               trait_: &TraitDef<'b>,\n+                               enum_def: &'b EnumDef,\n                                type_attrs: &[ast::Attribute],\n                                type_ident: Ident,\n                                self_args: Vec<P<Expr>>,\n@@ -1038,11 +1041,11 @@ impl<'a> MethodDef<'a> {\n     ///   }\n     /// }\n     /// ```\n-    fn build_enum_match_tuple(\n+    fn build_enum_match_tuple<'b>(\n         &self,\n         cx: &mut ExtCtxt,\n-        trait_: &TraitDef,\n-        enum_def: &EnumDef,\n+        trait_: &TraitDef<'b>,\n+        enum_def: &'b EnumDef,\n         type_attrs: &[ast::Attribute],\n         type_ident: Ident,\n         self_args: Vec<P<Expr>>,\n@@ -1125,15 +1128,15 @@ impl<'a> MethodDef<'a> {\n                 // arg fields of the variant for the first self pat.\n                 let field_tuples = first_self_pat_idents.into_iter().enumerate()\n                     // For each arg field of self, pull out its getter expr ...\n-                    .map(|(field_index, (sp, opt_ident, self_getter_expr))| {\n+                    .map(|(field_index, (sp, opt_ident, self_getter_expr, attrs))| {\n                         // ... but FieldInfo also wants getter expr\n                         // for matching other arguments of Self type;\n                         // so walk across the *other* self_pats_idents\n                         // and pull out getter for same field in each\n                         // of them (using `field_index` tracked above).\n                         // That is the heart of the transposition.\n                         let others = self_pats_idents.iter().map(|fields| {\n-                            let (_, _opt_ident, ref other_getter_expr) =\n+                            let (_, _opt_ident, ref other_getter_expr, _) =\n                                 fields[field_index];\n \n                             // All Self args have same variant, so\n@@ -1149,6 +1152,7 @@ impl<'a> MethodDef<'a> {\n                                     name: opt_ident,\n                                     self_: self_getter_expr,\n                                     other: others,\n+                                    attrs: attrs,\n                         }\n                     }).collect::<Vec<FieldInfo>>();\n \n@@ -1400,10 +1404,10 @@ impl<'a> TraitDef<'a> {\n     fn create_struct_pattern(&self,\n                              cx: &mut ExtCtxt,\n                              struct_path: ast::Path,\n-                             struct_def: &StructDef,\n+                             struct_def: &'a StructDef,\n                              prefix: &str,\n                              mutbl: ast::Mutability)\n-                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n+                             -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         if struct_def.fields.is_empty() {\n             return (cx.pat_enum(self.span, struct_path, vec![]), vec![]);\n         }\n@@ -1433,15 +1437,15 @@ impl<'a> TraitDef<'a> {\n             paths.push(codemap::Spanned{span: sp, node: ident});\n             let val = cx.expr(\n                 sp, ast::ExprParen(cx.expr_deref(sp, cx.expr_path(cx.path_ident(sp,ident)))));\n-            ident_expr.push((sp, opt_id, val));\n+            ident_expr.push((sp, opt_id, val, &struct_field.node.attrs[..]));\n         }\n \n         let subpats = self.create_subpatterns(cx, paths, mutbl);\n \n         // struct_type is definitely not Unknown, since struct_def.fields\n         // must be nonempty to reach here\n         let pattern = if struct_type == Record {\n-            let field_pats = subpats.into_iter().zip(ident_expr.iter()).map(|(pat, &(_, id, _))| {\n+            let field_pats = subpats.into_iter().zip(ident_expr.iter()).map(|(pat, &(_, id, _, _))| {\n                 // id is guaranteed to be Some\n                 codemap::Spanned {\n                     span: pat.span,\n@@ -1459,10 +1463,10 @@ impl<'a> TraitDef<'a> {\n     fn create_enum_variant_pattern(&self,\n                                    cx: &mut ExtCtxt,\n                                    enum_ident: ast::Ident,\n-                                   variant: &ast::Variant,\n+                                   variant: &'a ast::Variant,\n                                    prefix: &str,\n                                    mutbl: ast::Mutability)\n-        -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>)>) {\n+        -> (P<ast::Pat>, Vec<(Span, Option<Ident>, P<Expr>, &'a [ast::Attribute])>) {\n         let variant_ident = variant.node.name;\n         let variant_path = cx.path(variant.span, vec![enum_ident, variant_ident]);\n         match variant.node.kind {\n@@ -1472,15 +1476,15 @@ impl<'a> TraitDef<'a> {\n                 }\n \n                 let mut paths = Vec::new();\n-                let mut ident_expr = Vec::new();\n+                let mut ident_expr: Vec<(_, _, _, &'a [ast::Attribute])> = Vec::new();\n                 for (i, va) in variant_args.iter().enumerate() {\n                     let sp = self.set_expn_info(cx, va.ty.span);\n                     let ident = cx.ident_of(&format!(\"{}_{}\", prefix, i));\n                     let path1 = codemap::Spanned{span: sp, node: ident};\n                     paths.push(path1);\n                     let expr_path = cx.expr_path(cx.path_ident(sp, ident));\n                     let val = cx.expr(sp, ast::ExprParen(cx.expr_deref(sp, expr_path)));\n-                    ident_expr.push((sp, None, val));\n+                    ident_expr.push((sp, None, val, &[]));\n                 }\n \n                 let subpats = self.create_subpatterns(cx, paths, mutbl);"}]}