{"sha": "bfacabc6a2b59771aa336ff420c363d9695a6ad2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmYWNhYmM2YTJiNTk3NzFhYTMzNmZmNDIwYzM2M2Q5Njk1YTZhZDI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-30T18:33:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-03-30T18:33:31Z"}, "message": "Auto merge of #32621 - steveklabnik:rollup, r=steveklabnik\n\nRollup of 7 pull requests\n\n- Successful merges: #32580, #32591, #32603, #32605, #32606, #32607, #32608\n- Failed merges:", "tree": {"sha": "4b20bb126b45e2b7d4b7f941ac68b5acad25902b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4b20bb126b45e2b7d4b7f941ac68b5acad25902b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bfacabc6a2b59771aa336ff420c363d9695a6ad2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bfacabc6a2b59771aa336ff420c363d9695a6ad2", "html_url": "https://github.com/rust-lang/rust/commit/bfacabc6a2b59771aa336ff420c363d9695a6ad2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bfacabc6a2b59771aa336ff420c363d9695a6ad2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "102a5be7126ef8f1e79086b98d1d9faf47ba8ece", "url": "https://api.github.com/repos/rust-lang/rust/commits/102a5be7126ef8f1e79086b98d1d9faf47ba8ece", "html_url": "https://github.com/rust-lang/rust/commit/102a5be7126ef8f1e79086b98d1d9faf47ba8ece"}, {"sha": "2ba860677c436e6aea62f2c64dca7a2c83384a31", "url": "https://api.github.com/repos/rust-lang/rust/commits/2ba860677c436e6aea62f2c64dca7a2c83384a31", "html_url": "https://github.com/rust-lang/rust/commit/2ba860677c436e6aea62f2c64dca7a2c83384a31"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "91975c1f9ed9a312f978dcb4478d6b2f977c4efb", "filename": "COMPILER_TESTS.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/COMPILER_TESTS.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/COMPILER_TESTS.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/COMPILER_TESTS.md?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -77,7 +77,7 @@ fn test_foo() {\n }\n ```\n \n-Note that not all headers have meaning when customized too a revision.\n+Note that not all headers have meaning when customized to a revision.\n For example, the `ignore-test` header (and all \"ignore\" headers)\n currently only apply to the test as a whole, not to particular\n revisions. The only headers that are intended to really work when"}, {"sha": "43bd0507ebbb6f02e7354942af18330a593e6e2d", "filename": "src/doc/book/no-stdlib.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Fdoc%2Fbook%2Fno-stdlib.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Fdoc%2Fbook%2Fno-stdlib.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fno-stdlib.md?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -38,7 +38,7 @@ fn start(_argc: isize, _argv: *const *const u8) -> isize {\n // for a bare-bones hello world. These are normally\n // provided by libstd.\n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n # #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n # #[no_mangle] pub extern fn rust_eh_register_frames () {}\n # #[no_mangle] pub extern fn rust_eh_unregister_frames () {}\n@@ -65,7 +65,7 @@ pub extern fn main(argc: i32, argv: *const *const u8) -> i32 {\n }\n \n #[lang = \"eh_personality\"] extern fn eh_personality() {}\n-#[lang = \"panic_fmt\"] fn panic_fmt() -> ! { loop {} }\n+#[lang = \"panic_fmt\"] extern fn panic_fmt() -> ! { loop {} }\n # #[lang = \"eh_unwind_resume\"] extern fn rust_eh_unwind_resume() {}\n # #[no_mangle] pub extern fn rust_eh_register_frames () {}\n # #[no_mangle] pub extern fn rust_eh_unregister_frames () {}"}, {"sha": "e96dddf8c82cfecc05ffd300c85c6aeea0912c56", "filename": "src/doc/book/vectors.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Fdoc%2Fbook%2Fvectors.md", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Fdoc%2Fbook%2Fvectors.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook%2Fvectors.md?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -120,7 +120,7 @@ You can iterate the vector multiple times by taking a reference to the vector wh\n For example, the following code does not compile.\n \n ```rust,ignore\n-let mut v = vec![1, 2, 3, 4, 5];\n+let v = vec![1, 2, 3, 4, 5];\n \n for i in v {\n     println!(\"Take ownership of the vector and its element {}\", i);\n@@ -134,7 +134,7 @@ for i in v {\n Whereas the following works perfectly,\n \n ```rust\n-let mut v = vec![1, 2, 3, 4, 5];\n+let v = vec![1, 2, 3, 4, 5];\n \n for i in &v {\n     println!(\"This is a reference to {}\", i);"}, {"sha": "c9dd1efb37435d3b3b8e3282cdcb2d8a6c005eff", "filename": "src/libcollections/binary_heap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcollections%2Fbinary_heap.rs?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -194,7 +194,7 @@ use vec::{self, Vec};\n ///\n /// // We can iterate over the items in the heap, although they are returned in\n /// // a random order.\n-/// for x in heap.iter() {\n+/// for x in &heap {\n ///     println!(\"{}\", x);\n /// }\n ///"}, {"sha": "2d999868f71ec5995c3a667279eefc921a4be7ba", "filename": "src/libcore/convert.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibcore%2Fconvert.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibcore%2Fconvert.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fconvert.rs?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -19,14 +19,14 @@\n //!\n //! - Impl the `As*` traits for reference-to-reference conversions\n //! - Impl the `Into` trait when you want to consume the value in the conversion\n-//! - The `From` trait is the most flexible, useful for values _and_ references conversions\n+//! - The `From` trait is the most flexible, useful for value _and_ reference conversions\n //!\n-//! As a library writer, you should prefer implementing `From<T>` rather than\n-//! `Into<U>`, as `From` provides greater flexibility and offer the equivalent `Into`\n+//! As a library author, you should prefer implementing `From<T>` rather than\n+//! `Into<U>`, as `From` provides greater flexibility and offers an equivalent `Into`\n //! implementation for free, thanks to a blanket implementation in the standard library.\n //!\n //! **Note: these traits must not fail**. If the conversion can fail, you must use a dedicated\n-//! method which return an `Option<T>` or a `Result<T, E>`.\n+//! method which returns an `Option<T>` or a `Result<T, E>`.\n //!\n //! # Generic impl\n //!\n@@ -49,7 +49,7 @@ use marker::Sized;\n /// [book]: ../../book/borrow-and-asref.html\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///\n@@ -82,7 +82,7 @@ pub trait AsRef<T: ?Sized> {\n /// A cheap, mutable reference-to-mutable reference conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Generic Impls\n ///\n@@ -99,10 +99,10 @@ pub trait AsMut<T: ?Sized> {\n /// A conversion that consumes `self`, which may or may not be expensive.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n-/// Library writer should not implement directly this trait, but should prefer the implementation\n-/// of the `From` trait, which offer greater flexibility and provide the equivalent `Into`\n+/// Library authors should not directly implement this trait, but should prefer implementing\n+/// the `From` trait, which offers greater flexibility and provides an equivalent `Into`\n /// implementation for free, thanks to a blanket implementation in the standard library.\n ///\n /// # Examples\n@@ -134,7 +134,7 @@ pub trait Into<T>: Sized {\n /// Construct `Self` via a conversion.\n ///\n /// **Note: this trait must not fail**. If the conversion can fail, use a dedicated method which\n-/// return an `Option<T>` or a `Result<T, E>`.\n+/// returns an `Option<T>` or a `Result<T, E>`.\n ///\n /// # Examples\n ///"}, {"sha": "40f6528f63efbdb577b995399d8fd00a97033837", "filename": "src/libstd/env.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bfacabc6a2b59771aa336ff420c363d9695a6ad2/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=bfacabc6a2b59771aa336ff420c363d9695a6ad2", "patch": "@@ -416,7 +416,7 @@ impl Error for JoinPathsError {\n     fn description(&self) -> &str { self.inner.description() }\n }\n \n-/// Returns the path to the current user's home directory if known.\n+/// Returns the path of the current user's home directory if known.\n ///\n /// # Unix\n ///\n@@ -450,7 +450,7 @@ pub fn home_dir() -> Option<PathBuf> {\n     os_imp::home_dir()\n }\n \n-/// Returns the path to a temporary directory.\n+/// Returns the path of a temporary directory.\n ///\n /// On Unix, returns the value of the 'TMPDIR' environment variable if it is\n /// set, otherwise for non-Android it returns '/tmp'. If Android, since there\n@@ -459,7 +459,7 @@ pub fn home_dir() -> Option<PathBuf> {\n ///\n /// On Windows, returns the value of, in order, the 'TMP', 'TEMP',\n /// 'USERPROFILE' environment variable  if any are set and not the empty\n-/// string. Otherwise, tmpdir returns the path to the Windows directory. This\n+/// string. Otherwise, tmpdir returns the path of the Windows directory. This\n /// behavior is identical to that of [GetTempPath][msdn], which this function\n /// uses internally.\n ///\n@@ -482,14 +482,14 @@ pub fn temp_dir() -> PathBuf {\n     os_imp::temp_dir()\n }\n \n-/// Returns the full filesystem path to the current running executable.\n+/// Returns the full filesystem path of the current running executable.\n ///\n-/// The path returned is not necessarily a \"real path\" to the executable as\n+/// The path returned is not necessarily a \"real path\" of the executable as\n /// there may be intermediate symlinks.\n ///\n /// # Errors\n ///\n-/// Acquiring the path to the current executable is a platform-specific operation\n+/// Acquiring the path of the current executable is a platform-specific operation\n /// that can fail for a good number of reasons. Some errors can include, but not\n /// be limited to, filesystem operations failing or general syscall failures.\n ///\n@@ -526,7 +526,7 @@ pub struct ArgsOs { inner: os_imp::Args }\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n ///\n-/// The first element is traditionally the path to the executable, but it can be\n+/// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and may not even exist. This means this property should\n /// not be relied upon for security purposes.\n ///\n@@ -554,7 +554,7 @@ pub fn args() -> Args {\n /// Returns the arguments which this program was started with (normally passed\n /// via the command line).\n ///\n-/// The first element is traditionally the path to the executable, but it can be\n+/// The first element is traditionally the path of the executable, but it can be\n /// set to arbitrary text, and it may not even exist, so this property should\n /// not be relied upon for security purposes.\n ///"}]}