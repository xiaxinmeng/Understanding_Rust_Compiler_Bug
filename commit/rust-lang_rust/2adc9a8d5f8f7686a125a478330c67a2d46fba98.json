{"sha": "2adc9a8d5f8f7686a125a478330c67a2d46fba98", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhZGM5YThkNWY4Zjc2ODZhMTI1YTQ3ODMzMGM2N2EyZDQ2ZmJhOTg=", "commit": {"author": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-25T12:14:22Z"}, "committer": {"name": "Edwin Cheng", "email": "edwin0cheng@gmail.com", "date": "2020-03-25T12:14:22Z"}, "message": "Remove collect proc_macro definitions", "tree": {"sha": "5d41d254dc94ff7d8d20063a08df2b9b133d34d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5d41d254dc94ff7d8d20063a08df2b9b133d34d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2adc9a8d5f8f7686a125a478330c67a2d46fba98", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2adc9a8d5f8f7686a125a478330c67a2d46fba98", "html_url": "https://github.com/rust-lang/rust/commit/2adc9a8d5f8f7686a125a478330c67a2d46fba98", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2adc9a8d5f8f7686a125a478330c67a2d46fba98/comments", "author": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "committer": {"login": "edwin0cheng", "id": 11014119, "node_id": "MDQ6VXNlcjExMDE0MTE5", "avatar_url": "https://avatars.githubusercontent.com/u/11014119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/edwin0cheng", "html_url": "https://github.com/edwin0cheng", "followers_url": "https://api.github.com/users/edwin0cheng/followers", "following_url": "https://api.github.com/users/edwin0cheng/following{/other_user}", "gists_url": "https://api.github.com/users/edwin0cheng/gists{/gist_id}", "starred_url": "https://api.github.com/users/edwin0cheng/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/edwin0cheng/subscriptions", "organizations_url": "https://api.github.com/users/edwin0cheng/orgs", "repos_url": "https://api.github.com/users/edwin0cheng/repos", "events_url": "https://api.github.com/users/edwin0cheng/events{/privacy}", "received_events_url": "https://api.github.com/users/edwin0cheng/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5bd3aa05d6963a633a1b5cea8187500657847b21", "url": "https://api.github.com/repos/rust-lang/rust/commits/5bd3aa05d6963a633a1b5cea8187500657847b21", "html_url": "https://github.com/rust-lang/rust/commit/5bd3aa05d6963a633a1b5cea8187500657847b21"}], "stats": {"total": 54, "additions": 25, "deletions": 29}, "files": [{"sha": "9c125f32f34f715a3c5e91f11dfb0fabaee973dd", "filename": "crates/ra_hir_def/src/nameres/collector.rs", "status": "modified", "additions": 23, "deletions": 23, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/2adc9a8d5f8f7686a125a478330c67a2d46fba98/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2adc9a8d5f8f7686a125a478330c67a2d46fba98/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_def%2Fsrc%2Fnameres%2Fcollector.rs?ref=2adc9a8d5f8f7686a125a478330c67a2d46fba98", "patch": "@@ -65,6 +65,9 @@ pub(super) fn collect_defs(db: &dyn DefDatabase, mut def_map: CrateDefMap) -> Cr\n         unexpanded_attribute_macros: Vec::new(),\n         mod_dirs: FxHashMap::default(),\n         cfg_options,\n+\n+        // FIXME: pass proc-macro from crate-graph\n+        proc_macros: Default::default(),\n     };\n     collector.collect();\n     collector.finish()\n@@ -123,6 +126,7 @@ struct DefCollector<'a> {\n     unexpanded_attribute_macros: Vec<DeriveDirective>,\n     mod_dirs: FxHashMap<LocalModuleId, ModDir>,\n     cfg_options: &'a CfgOptions,\n+    proc_macros: Vec<(Name, ProcMacroExpander)>,\n }\n \n impl DefCollector<'_> {\n@@ -178,6 +182,24 @@ impl DefCollector<'_> {\n         for directive in unresolved_imports {\n             self.record_resolved_import(&directive)\n         }\n+\n+        // Record proc-macros\n+        self.collect_proc_macro();\n+    }\n+\n+    fn collect_proc_macro(&mut self) {\n+        let proc_macros = std::mem::take(&mut self.proc_macros);\n+        for (name, expander) in proc_macros {\n+            let krate = self.def_map.krate;\n+\n+            let macro_id = MacroDefId {\n+                ast_id: None,\n+                krate: Some(krate),\n+                kind: MacroDefKind::CustomDerive(expander),\n+            };\n+\n+            self.define_proc_macro(name.clone(), macro_id);\n+        }\n     }\n \n     /// Define a macro with `macro_rules`.\n@@ -801,7 +823,6 @@ impl ModCollector<'_, '_> {\n         // in which case we don't add the invocation, just a single attribute\n         // macro invocation\n         self.collect_derives(attrs, def);\n-        self.collect_proc_macro(attrs);\n \n         let name = def.name.clone();\n         let container = ContainerId::ModuleId(module);\n@@ -878,28 +899,6 @@ impl ModCollector<'_, '_> {\n         }\n     }\n \n-    fn collect_proc_macro(&mut self, attrs: &Attrs) {\n-        if let Some(derive_subtree) = attrs.by_key(\"proc_macro_derive\").tt_values().next() {\n-            if let Some(tt) = derive_subtree.token_trees.get(0) {\n-                let ident = match &tt {\n-                    tt::TokenTree::Leaf(tt::Leaf::Ident(ident)) => ident,\n-                    _ => return, // anything else would be an error (which we currently ignore)\n-                };\n-                let name = ident.as_name();\n-                let krate = self.def_collector.def_map.krate;\n-                let expander = ProcMacroExpander::new(krate);\n-\n-                let macro_id = MacroDefId {\n-                    ast_id: None,\n-                    krate: Some(krate),\n-                    kind: MacroDefKind::CustomDerive(expander),\n-                };\n-\n-                self.def_collector.define_proc_macro(name.clone(), macro_id);\n-            }\n-        }\n-    }\n-\n     fn collect_macro(&mut self, mac: &raw::MacroData) {\n         let mut ast_id = AstIdWithPath::new(self.file_id, mac.ast_id, mac.path.clone());\n \n@@ -1001,6 +1000,7 @@ mod tests {\n             unexpanded_attribute_macros: Vec::new(),\n             mod_dirs: FxHashMap::default(),\n             cfg_options: &CfgOptions::default(),\n+            proc_macros: Default::default(),\n         };\n         collector.collect();\n         collector.def_map"}, {"sha": "eb97288f1892c630fcb59e89edc020d1b5975901", "filename": "crates/ra_hir_ty/src/tests/macros.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/2adc9a8d5f8f7686a125a478330c67a2d46fba98/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2adc9a8d5f8f7686a125a478330c67a2d46fba98/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_hir_ty%2Fsrc%2Ftests%2Fmacros.rs?ref=2adc9a8d5f8f7686a125a478330c67a2d46fba98", "patch": "@@ -642,9 +642,10 @@ mod clone {\n \n #[test]\n fn infer_custom_derive_simple() {\n+    // FIXME: this test current now do nothing\n     let (db, pos) = TestDB::with_position(\n         r#\"\n-//- /main.rs crate:main deps:foo\n+//- /main.rs crate:main\n use foo::Foo;\n \n #[derive(Foo)]\n@@ -653,11 +654,6 @@ struct S{}\n fn test() {\n     S{}<|>;\n }\n-\n-//- /lib.rs crate:foo\n-#[proc_macro_derive(Foo)]\n-pub fn derive_foo(_item: TokenStream) -> TokenStream {\n-}\n \"#,\n     );\n     assert_eq!(\"S\", type_at_pos(&db, pos));"}]}