{"sha": "dbe76094142c798138c7065e81ad2c77161767a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRiZTc2MDk0MTQyYzc5ODEzOGM3MDY1ZTgxYWQyYzc3MTYxNzY3YTg=", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-01-30T22:25:03Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-02-15T18:32:29Z"}, "message": "Only store a LocalDefId in hir::ImplItem.", "tree": {"sha": "8ea8806642bdc8e6167839963f554034aa2e9841", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8ea8806642bdc8e6167839963f554034aa2e9841"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/dbe76094142c798138c7065e81ad2c77161767a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/dbe76094142c798138c7065e81ad2c77161767a8", "html_url": "https://github.com/rust-lang/rust/commit/dbe76094142c798138c7065e81ad2c77161767a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/dbe76094142c798138c7065e81ad2c77161767a8/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "url": "https://api.github.com/repos/rust-lang/rust/commits/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb", "html_url": "https://github.com/rust-lang/rust/commit/fc9bc33bbaa595cdfe3e5e5cd37cd96186fc52eb"}], "stats": {"total": 83, "additions": 36, "deletions": 47}, "files": [{"sha": "67b7cf91958655e65e93e671a3e3ac1499f67acc", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -258,14 +258,13 @@ impl<'tcx> LateLintPass<'tcx> for DocMarkdown {\n         }\n         if let hir::ImplItemKind::Fn(ref sig, body_id) = item.kind {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n             let mut fpu = FindPanicUnwrap {\n                 cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(item.def_id),\n                 panic_span: None,\n             };\n             fpu.visit_expr(&body.value);\n-            lint_for_missing_headers(cx, item.hir_id, item.span, sig, headers, Some(body_id), fpu.panic_span);\n+            lint_for_missing_headers(cx, item.hir_id(), item.span, sig, headers, Some(body_id), fpu.panic_span);\n         }\n     }\n }"}, {"sha": "6d522c7ef3398d231cdd10244b2e8c47054b45fd", "filename": "clippy_lints/src/fallible_impl_from.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Ffallible_impl_from.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffallible_impl_from.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -116,10 +116,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_items: &[h\n             then {\n                 // check the body for `begin_panic` or `unwrap`\n                 let body = cx.tcx.hir().body(body_id);\n-                let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.id.hir_id);\n                 let mut fpu = FindPanicUnwrap {\n                     lcx: cx,\n-                    typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                    typeck_results: cx.tcx.typeck(impl_item.id.def_id),\n                     result: Vec::new(),\n                 };\n                 fpu.visit_expr(&body.value);"}, {"sha": "0c6bf8bbdf24adc943cbebbdf2cb196274c9b3ca", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -308,24 +308,24 @@ impl<'tcx> LateLintPass<'tcx> for Functions {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'_>) {\n         if let hir::ImplItemKind::Fn(ref sig, ref body_id) = item.kind {\n-            let is_public = cx.access_levels.is_exported(item.hir_id);\n+            let is_public = cx.access_levels.is_exported(item.hir_id());\n             let fn_header_span = item.span.with_hi(sig.decl.output.span().hi());\n-            if is_public && trait_ref_of_method(cx, item.hir_id).is_none() {\n+            if is_public && trait_ref_of_method(cx, item.hir_id()).is_none() {\n                 check_result_unit_err(cx, &sig.decl, item.span, fn_header_span);\n             }\n             let attr = must_use_attr(&item.attrs);\n             if let Some(attr) = attr {\n-                check_needless_must_use(cx, &sig.decl, item.hir_id, item.span, fn_header_span, attr);\n+                check_needless_must_use(cx, &sig.decl, item.hir_id(), item.span, fn_header_span, attr);\n             } else if is_public\n                 && !is_proc_macro(cx.sess(), &item.attrs)\n-                && trait_ref_of_method(cx, item.hir_id).is_none()\n+                && trait_ref_of_method(cx, item.hir_id()).is_none()\n             {\n                 check_must_use_candidate(\n                     cx,\n                     &sig.decl,\n                     cx.tcx.hir().body(*body_id),\n                     item.span,\n-                    item.hir_id,\n+                    item.hir_id(),\n                     item.span.with_hi(sig.decl.output.span().hi()),\n                     \"this method could have a `#[must_use]` attribute\",\n                 );"}, {"sha": "76e7a4992d345c4c57738d2a9636adb3ec582472", "filename": "clippy_lints/src/inherent_to_string.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Finherent_to_string.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Finherent_to_string.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Finherent_to_string.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -108,10 +108,10 @@ impl<'tcx> LateLintPass<'tcx> for InherentToString {\n             if decl.inputs.len() == 1;\n \n             // Check if return type is String\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::string_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::string_type);\n \n             // Filters instances of to_string which are required by a trait\n-            if trait_ref_of_method(cx, impl_item.hir_id).is_none();\n+            if trait_ref_of_method(cx, impl_item.hir_id()).is_none();\n \n             then {\n                 show_lint(cx, impl_item);\n@@ -124,8 +124,7 @@ fn show_lint(cx: &LateContext<'_>, item: &ImplItem<'_>) {\n     let display_trait_id = get_trait_def_id(cx, &paths::DISPLAY_TRAIT).expect(\"Failed to get trait ID of `Display`!\");\n \n     // Get the real type of 'self'\n-    let fn_def_id = cx.tcx.hir().local_def_id(item.hir_id);\n-    let self_type = cx.tcx.fn_sig(fn_def_id).input(0);\n+    let self_type = cx.tcx.fn_sig(item.def_id).input(0);\n     let self_type = self_type.skip_binder().peel_refs();\n \n     // Emit either a warning or an error"}, {"sha": "dab3e0565cafb30d8dd4e0240a782909355dbb81", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -206,17 +206,14 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     fn is_named_self(cx: &LateContext<'_>, item: &ImplItemRef<'_>, name: &str) -> bool {\n         item.ident.name.as_str() == name\n             && if let AssocItemKind::Fn { has_self } = item.kind {\n-                has_self && {\n-                    let did = cx.tcx.hir().local_def_id(item.id.hir_id);\n-                    cx.tcx.fn_sig(did).inputs().skip_binder().len() == 1\n-                }\n+                has_self && cx.tcx.fn_sig(item.id.def_id).inputs().skip_binder().len() == 1\n             } else {\n                 false\n             }\n     }\n \n     let is_empty = if let Some(is_empty) = impl_items.iter().find(|i| is_named_self(cx, i, \"is_empty\")) {\n-        if cx.access_levels.is_exported(is_empty.id.hir_id) {\n+        if cx.access_levels.is_exported(is_empty.id.hir_id()) {\n             return;\n         }\n         \"a private\"\n@@ -225,7 +222,7 @@ fn check_impl_items(cx: &LateContext<'_>, item: &Item<'_>, impl_items: &[ImplIte\n     };\n \n     if let Some(i) = impl_items.iter().find(|i| is_named_self(cx, i, \"len\")) {\n-        if cx.access_levels.is_exported(i.id.hir_id) {\n+        if cx.access_levels.is_exported(i.id.hir_id()) {\n             let ty = cx.tcx.type_of(item.def_id);\n \n             span_lint("}, {"sha": "50e6383263dd3fd0ec424b32f77e35a9c39e02c8", "filename": "clippy_lints/src/lifetimes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flifetimes.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -87,7 +87,7 @@ impl<'tcx> LateLintPass<'tcx> for Lifetimes {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, id) = item.kind {\n-            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id).is_none();\n+            let report_extra_lifetimes = trait_ref_of_method(cx, item.hir_id()).is_none();\n             check_fn_inner(\n                 cx,\n                 &sig.decl,"}, {"sha": "55660cc95a8e07df19f11a9f928691fb65fed724", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -1685,7 +1685,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             return;\n         }\n         let name = impl_item.ident.name.as_str();\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let item = cx.tcx.hir().expect_item(parent);\n         let self_ty = cx.tcx.type_of(item.def_id);\n \n@@ -1698,8 +1698,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let hir::ImplItemKind::Fn(ref sig, id) = impl_item.kind;\n             if let Some(first_arg) = iter_input_pats(&sig.decl, cx.tcx.hir().body(id)).next();\n \n-            let method_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-            let method_sig = cx.tcx.fn_sig(method_def_id);\n+            let method_sig = cx.tcx.fn_sig(impl_item.def_id);\n             let method_sig = cx.tcx.erase_late_bound_regions(method_sig);\n \n             let first_arg_ty = &method_sig.inputs().iter().next();\n@@ -1708,7 +1707,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n             if let Some(first_arg_ty) = first_arg_ty;\n \n             then {\n-                if cx.access_levels.is_exported(impl_item.hir_id) {\n+                if cx.access_levels.is_exported(impl_item.hir_id()) {\n                     // check missing trait implementations\n                     for method_config in &TRAIT_METHODS {\n                         if name == method_config.method_name &&\n@@ -1750,7 +1749,7 @@ impl<'tcx> LateLintPass<'tcx> for Methods {\n         }\n \n         if let hir::ImplItemKind::Fn(_, _) = impl_item.kind {\n-            let ret_ty = return_ty(cx, impl_item.hir_id);\n+            let ret_ty = return_ty(cx, impl_item.hir_id());\n \n             // walk the return type and check for Self (this does not check associated types)\n             if contains_ty(ret_ty, self_ty) {"}, {"sha": "761b9261772b2a170fc71f209c325b2918c9036f", "filename": "clippy_lints/src/missing_doc.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmissing_doc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmissing_doc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_doc.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -171,8 +171,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx hir::ImplItem<'_>) {\n         // If the method is an impl for a trait, don't doc.\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        match cx.tcx.associated_item(def_id).container {\n+        match cx.tcx.associated_item(impl_item.def_id).container {\n             ty::TraitContainer(_) => return,\n             ty::ImplContainer(cid) => {\n                 if cx.tcx.impl_trait_ref(cid).is_some() {\n@@ -181,7 +180,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingDoc {\n             },\n         }\n \n-        let (article, desc) = cx.tcx.article_and_description(def_id.to_def_id());\n+        let (article, desc) = cx.tcx.article_and_description(impl_item.def_id.to_def_id());\n         self.check_missing_docs_attrs(cx, &impl_item.attrs, impl_item.span, article, desc);\n     }\n "}, {"sha": "47d7c5306c4331b45a6f48efeefac69eef59ac65", "filename": "clippy_lints/src/missing_inline.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmissing_inline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmissing_inline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmissing_inline.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -138,7 +138,7 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n         }\n \n         // If the item being implemented is not exported, then we don't need #[inline]\n-        if !cx.access_levels.is_exported(impl_item.hir_id) {\n+        if !cx.access_levels.is_exported(impl_item.hir_id()) {\n             return;\n         }\n \n@@ -147,14 +147,13 @@ impl<'tcx> LateLintPass<'tcx> for MissingInline {\n             hir::ImplItemKind::Const(..) | hir::ImplItemKind::TyAlias(_) => return,\n         };\n \n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let trait_def_id = match cx.tcx.associated_item(def_id).container {\n+        let trait_def_id = match cx.tcx.associated_item(impl_item.def_id).container {\n             TraitContainer(cid) => Some(cid),\n             ImplContainer(cid) => cx.tcx.impl_trait_ref(cid).map(|t| t.def_id),\n         };\n \n         if let Some(trait_def_id) = trait_def_id {\n-            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id) {\n+            if trait_def_id.is_local() && !cx.access_levels.is_exported(impl_item.hir_id()) {\n                 // If a trait is being implemented for an item, and the\n                 // trait is not exported, we don't need #[inline]\n                 return;"}, {"sha": "908b7bb7ce00d13359c619bda5f54d812e89fb95", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -63,8 +63,8 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx hir::ImplItem<'tcx>) {\n         if let hir::ImplItemKind::Fn(ref sig, ..) = item.kind {\n-            if trait_ref_of_method(cx, item.hir_id).is_none() {\n-                check_sig(cx, item.hir_id, &sig.decl);\n+            if trait_ref_of_method(cx, item.hir_id()).is_none() {\n+                check_sig(cx, item.hir_id(), &sig.decl);\n             }\n         }\n     }"}, {"sha": "de2899c3462a4f6f8b71a0a727140c09f93e6232", "filename": "clippy_lints/src/new_without_default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fnew_without_default.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fnew_without_default.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnew_without_default.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -72,7 +72,7 @@ impl<'tcx> LateLintPass<'tcx> for NewWithoutDefault {\n                     }\n                     if let hir::ImplItemKind::Fn(ref sig, _) = impl_item.kind {\n                         let name = impl_item.ident.name;\n-                        let id = impl_item.hir_id;\n+                        let id = impl_item.hir_id();\n                         if sig.header.constness == hir::Constness::Const {\n                             // can't be implemented by default\n                             return;"}, {"sha": "8aebce67917afa1559e16925ced20f8f16238bf7", "filename": "clippy_lints/src/non_copy_const.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fnon_copy_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fnon_copy_const.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -271,7 +271,7 @@ impl<'tcx> LateLintPass<'tcx> for NonCopyConst {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, impl_item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Const(hir_ty, body_id) = &impl_item.kind {\n-            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id);\n+            let item_hir_id = cx.tcx.hir().get_parent_node(impl_item.hir_id());\n             let item = cx.tcx.hir().expect_item(item_hir_id);\n \n             match &item.kind {"}, {"sha": "3d6129aa78d4c47d71d832eb4b76d803fdc90c2d", "filename": "clippy_lints/src/partialeq_ne_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpartialeq_ne_impl.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -44,7 +44,7 @@ impl<'tcx> LateLintPass<'tcx> for PartialEqNeImpl {\n                         span_lint_hir(\n                             cx,\n                             PARTIALEQ_NE_IMPL,\n-                            impl_item.id.hir_id,\n+                            impl_item.id.hir_id(),\n                             impl_item.span,\n                             \"re-implementing `PartialEq::ne` is unnecessary\",\n                         );"}, {"sha": "de2fb8decb7150c42c53320715850be09d6a1033", "filename": "clippy_lints/src/ptr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fptr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Fptr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -130,13 +130,13 @@ impl<'tcx> LateLintPass<'tcx> for Ptr {\n \n     fn check_impl_item(&mut self, cx: &LateContext<'tcx>, item: &'tcx ImplItem<'_>) {\n         if let ImplItemKind::Fn(ref sig, body_id) = item.kind {\n-            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id);\n+            let parent_item = cx.tcx.hir().get_parent_item(item.hir_id());\n             if let Some(Node::Item(it)) = cx.tcx.hir().find(parent_item) {\n                 if let ItemKind::Impl(Impl { of_trait: Some(_), .. }) = it.kind {\n                     return; // ignore trait impls\n                 }\n             }\n-            check_fn(cx, &sig.decl, item.hir_id, Some(body_id));\n+            check_fn(cx, &sig.decl, item.hir_id(), Some(body_id));\n         }\n     }\n "}, {"sha": "73c64b808405819239ca856976b32c61469e57b8", "filename": "clippy_lints/src/unused_self.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Funused_self.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Funused_self.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_self.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -44,10 +44,9 @@ impl<'tcx> LateLintPass<'tcx> for UnusedSelf {\n         if impl_item.span.from_expansion() {\n             return;\n         }\n-        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id);\n+        let parent = cx.tcx.hir().get_parent_item(impl_item.hir_id());\n         let parent_item = cx.tcx.hir().expect_item(parent);\n-        let def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n-        let assoc_item = cx.tcx.associated_item(def_id);\n+        let assoc_item = cx.tcx.associated_item(impl_item.def_id);\n         if_chain! {\n             if let ItemKind::Impl(Impl { of_trait: None, .. }) = parent_item.kind;\n             if assoc_item.fn_has_self_parameter;"}, {"sha": "8cb7429849da65bf207d9221c5f6805f5aecd17b", "filename": "clippy_lints/src/unwrap_in_result.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "raw_url": "https://github.com/rust-lang/rust/raw/dbe76094142c798138c7065e81ad2c77161767a8/clippy_lints%2Fsrc%2Funwrap_in_result.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funwrap_in_result.rs?ref=dbe76094142c798138c7065e81ad2c77161767a8", "patch": "@@ -57,8 +57,8 @@ impl<'tcx> LateLintPass<'tcx> for UnwrapInResult {\n             // first check if it's a method or function\n             if let hir::ImplItemKind::Fn(ref _signature, _) = impl_item.kind;\n             // checking if its return type is `result` or `option`\n-            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::result_type)\n-                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id), sym::option_type);\n+            if is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::result_type)\n+                || is_type_diagnostic_item(cx, return_ty(cx, impl_item.hir_id()), sym::option_type);\n             then {\n                 lint_impl_body(cx, impl_item.span, impl_item);\n             }\n@@ -114,10 +114,9 @@ fn lint_impl_body<'tcx>(cx: &LateContext<'tcx>, impl_span: Span, impl_item: &'tc\n         if let ImplItemKind::Fn(_, body_id) = impl_item.kind;\n         then {\n             let body = cx.tcx.hir().body(body_id);\n-            let impl_item_def_id = cx.tcx.hir().local_def_id(impl_item.hir_id);\n             let mut fpu = FindExpectUnwrap {\n                 lcx: cx,\n-                typeck_results: cx.tcx.typeck(impl_item_def_id),\n+                typeck_results: cx.tcx.typeck(impl_item.def_id),\n                 result: Vec::new(),\n             };\n             fpu.visit_expr(&body.value);"}]}