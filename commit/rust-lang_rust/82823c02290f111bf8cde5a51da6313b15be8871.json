{"sha": "82823c02290f111bf8cde5a51da6313b15be8871", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyODIzYzAyMjkwZjExMWJmOGNkZTVhNTFkYTYzMTNiMTViZTg4NzE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T11:58:53Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T20:50:17Z"}, "message": "Return a `FxHashSet<LocalDefId>` from `mir_keys` query", "tree": {"sha": "8be6e1cd3ee3e0d83a6e6f6cc733a6748dc72999", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8be6e1cd3ee3e0d83a6e6f6cc733a6748dc72999"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82823c02290f111bf8cde5a51da6313b15be8871", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82823c02290f111bf8cde5a51da6313b15be8871", "html_url": "https://github.com/rust-lang/rust/commit/82823c02290f111bf8cde5a51da6313b15be8871", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82823c02290f111bf8cde5a51da6313b15be8871/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "82cc530431329c33998385e83b022ec680e666c5", "url": "https://api.github.com/repos/rust-lang/rust/commits/82cc530431329c33998385e83b022ec680e666c5", "html_url": "https://github.com/rust-lang/rust/commit/82cc530431329c33998385e83b022ec680e666c5"}], "stats": {"total": 92, "additions": 47, "deletions": 45}, "files": [{"sha": "da1dd1e589b00605af945d1baa4361d0ae0d0f67", "filename": "src/librustc_metadata/rmeta/encoder.rs", "status": "modified", "additions": 31, "deletions": 35, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Frmeta%2Fencoder.rs?ref=82823c02290f111bf8cde5a51da6313b15be8871", "patch": "@@ -5,12 +5,11 @@ use log::{debug, trace};\n use rustc_ast::ast::{self, Ident};\n use rustc_ast::attr;\n use rustc_data_structures::fingerprint::Fingerprint;\n-use rustc_data_structures::fx::FxHashMap;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::stable_hasher::StableHasher;\n use rustc_data_structures::sync::{join, Lrc};\n use rustc_hir as hir;\n use rustc_hir::def::CtorKind;\n-use rustc_hir::def_id::DefIdSet;\n use rustc_hir::def_id::{CrateNum, DefId, DefIndex, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::definitions::DefPathTable;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n@@ -644,8 +643,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n-        self.encode_optimized_mir(def_id);\n-        self.encode_promoted_mir(def_id);\n+        self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_promoted_mir(def_id.expect_local());\n     }\n \n     fn encode_enum_variant_ctor(&mut self, def: &ty::AdtDef, index: VariantIdx) {\n@@ -683,8 +682,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n-        self.encode_optimized_mir(def_id);\n-        self.encode_promoted_mir(def_id);\n+        self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_promoted_mir(def_id.expect_local());\n     }\n \n     fn encode_info_for_mod(\n@@ -786,8 +785,8 @@ impl EncodeContext<'tcx> {\n         self.encode_generics(def_id);\n         self.encode_explicit_predicates(def_id);\n         self.encode_inferred_outlives(def_id);\n-        self.encode_optimized_mir(def_id);\n-        self.encode_promoted_mir(def_id);\n+        self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_promoted_mir(def_id.expect_local());\n     }\n \n     fn encode_generics(&mut self, def_id: DefId) {\n@@ -896,8 +895,8 @@ impl EncodeContext<'tcx> {\n         self.encode_inferred_outlives(def_id);\n \n         // This should be kept in sync with `PrefetchVisitor.visit_trait_item`.\n-        self.encode_optimized_mir(def_id);\n-        self.encode_promoted_mir(def_id);\n+        self.encode_optimized_mir(def_id.expect_local());\n+        self.encode_promoted_mir(def_id.expect_local());\n     }\n \n     fn metadata_output_only(&self) -> bool {\n@@ -985,8 +984,8 @@ impl EncodeContext<'tcx> {\n             hir::ImplItemKind::OpaqueTy(..) | hir::ImplItemKind::TyAlias(..) => false,\n         };\n         if mir {\n-            self.encode_optimized_mir(def_id);\n-            self.encode_promoted_mir(def_id);\n+            self.encode_optimized_mir(def_id.expect_local());\n+            self.encode_promoted_mir(def_id.expect_local());\n         }\n     }\n \n@@ -1004,17 +1003,17 @@ impl EncodeContext<'tcx> {\n         self.lazy(param_names.iter().map(|ident| ident.name))\n     }\n \n-    fn encode_optimized_mir(&mut self, def_id: DefId) {\n+    fn encode_optimized_mir(&mut self, def_id: LocalDefId) {\n         debug!(\"EntryBuilder::encode_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            record!(self.tables.mir[def_id] <- self.tcx.optimized_mir(def_id));\n+            record!(self.tables.mir[def_id.to_def_id()] <- self.tcx.optimized_mir(def_id));\n         }\n     }\n \n-    fn encode_promoted_mir(&mut self, def_id: DefId) {\n+    fn encode_promoted_mir(&mut self, def_id: LocalDefId) {\n         debug!(\"EncodeContext::encode_promoted_mir({:?})\", def_id);\n         if self.tcx.mir_keys(LOCAL_CRATE).contains(&def_id) {\n-            record!(self.tables.promoted_mir[def_id] <- self.tcx.promoted_mir(def_id));\n+            record!(self.tables.promoted_mir[def_id.to_def_id()] <- self.tcx.promoted_mir(def_id));\n         }\n     }\n \n@@ -1282,8 +1281,8 @@ impl EncodeContext<'tcx> {\n             _ => false,\n         };\n         if mir {\n-            self.encode_optimized_mir(def_id);\n-            self.encode_promoted_mir(def_id);\n+            self.encode_optimized_mir(def_id.expect_local());\n+            self.encode_promoted_mir(def_id.expect_local());\n         }\n     }\n \n@@ -1316,8 +1315,7 @@ impl EncodeContext<'tcx> {\n         let hir_id = self.tcx.hir().as_local_hir_id(def_id);\n         let ty = self.tcx.typeck_tables_of(def_id).node_type(hir_id);\n \n-        let def_id = def_id.to_def_id();\n-        record!(self.tables.kind[def_id] <- match ty.kind {\n+        record!(self.tables.kind[def_id.to_def_id()] <- match ty.kind {\n             ty::Generator(..) => {\n                 let data = self.tcx.generator_kind(def_id).unwrap();\n                 EntryKind::Generator(data)\n@@ -1327,14 +1325,14 @@ impl EncodeContext<'tcx> {\n \n             _ => bug!(\"closure that is neither generator nor closure\"),\n         });\n-        record!(self.tables.visibility[def_id] <- ty::Visibility::Public);\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n-        record!(self.tables.attributes[def_id] <- &self.tcx.get_attrs(def_id)[..]);\n-        self.encode_item_type(def_id);\n+        record!(self.tables.visibility[def_id.to_def_id()] <- ty::Visibility::Public);\n+        record!(self.tables.span[def_id.to_def_id()] <- self.tcx.def_span(def_id));\n+        record!(self.tables.attributes[def_id.to_def_id()] <- &self.tcx.get_attrs(def_id.to_def_id())[..]);\n+        self.encode_item_type(def_id.to_def_id());\n         if let ty::Closure(def_id, substs) = ty.kind {\n             record!(self.tables.fn_sig[def_id] <- substs.as_closure().sig());\n         }\n-        self.encode_generics(def_id);\n+        self.encode_generics(def_id.to_def_id());\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -1344,16 +1342,15 @@ impl EncodeContext<'tcx> {\n         let id = self.tcx.hir().as_local_hir_id(def_id);\n         let body_id = self.tcx.hir().body_owned_by(id);\n         let const_data = self.encode_rendered_const_for_body(body_id);\n-        let def_id = def_id.to_def_id();\n         let qualifs = self.tcx.mir_const_qualif(def_id);\n \n-        record!(self.tables.kind[def_id] <- EntryKind::Const(qualifs, const_data));\n-        record!(self.tables.visibility[def_id] <- ty::Visibility::Public);\n-        record!(self.tables.span[def_id] <- self.tcx.def_span(def_id));\n-        self.encode_item_type(def_id);\n-        self.encode_generics(def_id);\n-        self.encode_explicit_predicates(def_id);\n-        self.encode_inferred_outlives(def_id);\n+        record!(self.tables.kind[def_id.to_def_id()] <- EntryKind::Const(qualifs, const_data));\n+        record!(self.tables.visibility[def_id.to_def_id()] <- ty::Visibility::Public);\n+        record!(self.tables.span[def_id.to_def_id()] <- self.tcx.def_span(def_id));\n+        self.encode_item_type(def_id.to_def_id());\n+        self.encode_generics(def_id.to_def_id());\n+        self.encode_explicit_predicates(def_id.to_def_id());\n+        self.encode_inferred_outlives(def_id.to_def_id());\n         self.encode_optimized_mir(def_id);\n         self.encode_promoted_mir(def_id);\n     }\n@@ -1726,12 +1723,11 @@ impl<'tcx, 'v> ItemLikeVisitor<'v> for ImplVisitor<'tcx> {\n /// Only a subset of the queries are actually prefetched to keep this code smaller.\n struct PrefetchVisitor<'tcx> {\n     tcx: TyCtxt<'tcx>,\n-    mir_keys: &'tcx DefIdSet,\n+    mir_keys: &'tcx FxHashSet<LocalDefId>,\n }\n \n impl<'tcx> PrefetchVisitor<'tcx> {\n     fn prefetch_mir(&self, def_id: LocalDefId) {\n-        let def_id = def_id.to_def_id();\n         if self.mir_keys.contains(&def_id) {\n             self.tcx.optimized_mir(def_id);\n             self.tcx.promoted_mir(def_id);"}, {"sha": "d0f700299477045166f1792dfda4c150443005e5", "filename": "src/librustc_middle/arena.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_middle%2Farena.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_middle%2Farena.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Farena.rs?ref=82823c02290f111bf8cde5a51da6313b15be8871", "patch": "@@ -34,7 +34,8 @@ macro_rules! arena_types {\n                 rustc_hir::def_id::DefId,\n                 rustc_middle::ty::subst::SubstsRef<$tcx>\n             )>,\n-            [few, decode] mir_keys: rustc_hir::def_id::DefIdSet,\n+            [few, decode] collect_and_partition_mono_items: rustc_hir::def_id::DefIdSet,\n+            [few, decode] mir_keys: rustc_data_structures::fx::FxHashSet<rustc_hir::def_id::LocalDefId>,\n             [decode] specialization_graph: rustc_middle::traits::specialization_graph::Graph,\n             [] region_scope_tree: rustc_middle::middle::region::ScopeTree,\n             [] item_local_set: rustc_hir::ItemLocalSet,"}, {"sha": "62837685e8b8754d4b14b8566d96b8112d5b53f8", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=82823c02290f111bf8cde5a51da6313b15be8871", "patch": "@@ -156,7 +156,7 @@ rustc_queries! {\n         /// Set of all the `DefId`s in this crate that have MIR associated with\n         /// them. This includes all the body owners, but also things like struct\n         /// constructors.\n-        query mir_keys(_: CrateNum) -> &'tcx DefIdSet {\n+        query mir_keys(_: CrateNum) -> &'tcx FxHashSet<LocalDefId> {\n             desc { \"getting a list of all mir_keys\" }\n         }\n "}, {"sha": "df6e415300d2ce5e5b7f969dbe5ba8c3e46cb730", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=82823c02290f111bf8cde5a51da6313b15be8871", "patch": "@@ -1,8 +1,9 @@\n use crate::{shim, util};\n use required_consts::RequiredConstsVisitor;\n use rustc_ast::ast;\n+use rustc_data_structures::fx::FxHashSet;\n use rustc_hir as hir;\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdSet, LocalDefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_index::vec::IndexVec;\n use rustc_middle::mir::visit::Visitor as _;\n@@ -54,24 +55,24 @@ pub(crate) fn provide(providers: &mut Providers<'_>) {\n }\n \n fn is_mir_available(tcx: TyCtxt<'_>, def_id: DefId) -> bool {\n-    tcx.mir_keys(def_id.krate).contains(&def_id)\n+    tcx.mir_keys(def_id.krate).contains(&def_id.expect_local())\n }\n \n /// Finds the full set of `DefId`s within the current crate that have\n /// MIR associated with them.\n-fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n+fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &FxHashSet<LocalDefId> {\n     assert_eq!(krate, LOCAL_CRATE);\n \n-    let mut set = DefIdSet::default();\n+    let mut set = FxHashSet::default();\n \n     // All body-owners have MIR associated with them.\n-    set.extend(tcx.body_owners().map(LocalDefId::to_def_id));\n+    set.extend(tcx.body_owners());\n \n     // Additionally, tuple struct/variant constructors have MIR, but\n     // they don't have a BodyId, so we need to build them separately.\n     struct GatherCtors<'a, 'tcx> {\n         tcx: TyCtxt<'tcx>,\n-        set: &'a mut DefIdSet,\n+        set: &'a mut FxHashSet<LocalDefId>,\n     }\n     impl<'a, 'tcx> Visitor<'tcx> for GatherCtors<'a, 'tcx> {\n         fn visit_variant_data(\n@@ -83,7 +84,7 @@ fn mir_keys(tcx: TyCtxt<'_>, krate: CrateNum) -> &DefIdSet {\n             _: Span,\n         ) {\n             if let hir::VariantData::Tuple(_, hir_id) = *v {\n-                self.set.insert(self.tcx.hir().local_def_id(hir_id).to_def_id());\n+                self.set.insert(self.tcx.hir().local_def_id(hir_id));\n             }\n             intravisit::walk_struct_def(self, v)\n         }"}, {"sha": "8b0215ae723c08881c4fee235616e157ffcd00c2", "filename": "src/librustc_mir/util/pretty.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82823c02290f111bf8cde5a51da6313b15be8871/src%2Flibrustc_mir%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fpretty.rs?ref=82823c02290f111bf8cde5a51da6313b15be8871", "patch": "@@ -868,5 +868,9 @@ fn write_user_type_annotations(body: &Body<'_>, w: &mut dyn Write) -> io::Result\n }\n \n pub fn dump_mir_def_ids(tcx: TyCtxt<'_>, single: Option<DefId>) -> Vec<DefId> {\n-    if let Some(i) = single { vec![i] } else { tcx.mir_keys(LOCAL_CRATE).iter().cloned().collect() }\n+    if let Some(i) = single {\n+        vec![i]\n+    } else {\n+        tcx.mir_keys(LOCAL_CRATE).iter().map(|def_id| def_id.to_def_id()).collect()\n+    }\n }"}]}