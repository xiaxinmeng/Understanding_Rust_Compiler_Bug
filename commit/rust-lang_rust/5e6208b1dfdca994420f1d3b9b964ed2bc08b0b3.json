{"sha": "5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3", "node_id": "C_kwDOAAsO6NoAKDVlNjIwOGIxZGZkY2E5OTQ0MjBmMWQzYjliOTY0ZWQyYmMwOGIwYjM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-08T11:03:11Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2023-02-08T11:06:35Z"}, "message": "fix: Don't insert a semicolon when typing = if parse errors are encountered", "tree": {"sha": "7d3f9d6daf733a030c28977ea04a37406156df45", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7d3f9d6daf733a030c28977ea04a37406156df45"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3", "html_url": "https://github.com/rust-lang/rust/commit/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c89945e78c5f164c03cabb1c5cd459a86ef963a", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c89945e78c5f164c03cabb1c5cd459a86ef963a", "html_url": "https://github.com/rust-lang/rust/commit/3c89945e78c5f164c03cabb1c5cd459a86ef963a"}], "stats": {"total": 51, "additions": 31, "deletions": 20}, "files": [{"sha": "c7e403f6b1ab9d5a2619ca0d72f4c1daf023f47c", "filename": "crates/ide/src/typing.rs", "status": "modified", "additions": 31, "deletions": 20, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3/crates%2Fide%2Fsrc%2Ftyping.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3/crates%2Fide%2Fsrc%2Ftyping.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Ftyping.rs?ref=5e6208b1dfdca994420f1d3b9b964ed2bc08b0b3", "patch": "@@ -253,6 +253,10 @@ fn on_eq_typed(file: &SourceFile, offset: TextSize) -> Option<TextEdit> {\n         if file.syntax().text().slice(offset..expr_range.start()).contains_char('\\n') {\n             return None;\n         }\n+        // Good indicator that we will insert into a bad spot, so bail out.\n+        if expr.syntax().descendants().any(|it| it.kind() == SyntaxKind::ERROR) {\n+            return None;\n+        }\n         let offset = let_stmt.syntax().text_range().end();\n         Some(TextEdit::insert(offset, \";\".to_string()))\n     }\n@@ -407,15 +411,14 @@ mod tests {\n \n     #[test]\n     fn test_semi_after_let() {\n-        //     do_check(r\"\n-        // fn foo() {\n-        //     let foo =$0\n-        // }\n-        // \", r\"\n-        // fn foo() {\n-        //     let foo =;\n-        // }\n-        // \");\n+        type_char_noop(\n+            '=',\n+            r\"\n+fn foo() {\n+    let foo =$0\n+}\n+\",\n+        );\n         type_char(\n             '=',\n             r#\"\n@@ -429,17 +432,25 @@ fn foo() {\n }\n \"#,\n         );\n-        //     do_check(r\"\n-        // fn foo() {\n-        //     let foo =$0\n-        //     let bar = 1;\n-        // }\n-        // \", r\"\n-        // fn foo() {\n-        //     let foo =;\n-        //     let bar = 1;\n-        // }\n-        // \");\n+        type_char_noop(\n+            '=',\n+            r#\"\n+fn foo() {\n+    let difference $0(counts: &HashMap<(char, char), u64>, last: char) -> u64 {\n+        // ...\n+    }\n+}\n+\"#,\n+        );\n+        type_char_noop(\n+            '=',\n+            r\"\n+fn foo() {\n+    let foo =$0\n+    let bar = 1;\n+}\n+\",\n+        );\n     }\n \n     #[test]"}]}