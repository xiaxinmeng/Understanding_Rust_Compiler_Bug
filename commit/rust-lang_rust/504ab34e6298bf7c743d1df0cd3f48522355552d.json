{"sha": "504ab34e6298bf7c743d1df0cd3f48522355552d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUwNGFiMzRlNjI5OGJmN2M3NDNkMWRmMGNkM2Y0ODUyMjM1NTU1MmQ=", "commit": {"author": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-05T09:00:05Z"}, "committer": {"name": "Felix S. Klock II", "email": "pnkfelix@pnkfx.org", "date": "2018-10-05T10:00:01Z"}, "message": "Replaced `String` with `&str` in API for `add_explanation_to_diagnostic`.", "tree": {"sha": "4fb16d7bccc847393348f76eb5379d907d01e957", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4fb16d7bccc847393348f76eb5379d907d01e957"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/504ab34e6298bf7c743d1df0cd3f48522355552d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/504ab34e6298bf7c743d1df0cd3f48522355552d", "html_url": "https://github.com/rust-lang/rust/commit/504ab34e6298bf7c743d1df0cd3f48522355552d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/504ab34e6298bf7c743d1df0cd3f48522355552d/comments", "author": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pnkfelix", "id": 173127, "node_id": "MDQ6VXNlcjE3MzEyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/173127?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pnkfelix", "html_url": "https://github.com/pnkfelix", "followers_url": "https://api.github.com/users/pnkfelix/followers", "following_url": "https://api.github.com/users/pnkfelix/following{/other_user}", "gists_url": "https://api.github.com/users/pnkfelix/gists{/gist_id}", "starred_url": "https://api.github.com/users/pnkfelix/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pnkfelix/subscriptions", "organizations_url": "https://api.github.com/users/pnkfelix/orgs", "repos_url": "https://api.github.com/users/pnkfelix/repos", "events_url": "https://api.github.com/users/pnkfelix/events{/privacy}", "received_events_url": "https://api.github.com/users/pnkfelix/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9eebe77a86cb07e7444f07b7b7dac879f5878269", "url": "https://api.github.com/repos/rust-lang/rust/commits/9eebe77a86cb07e7444f07b7b7dac879f5878269", "html_url": "https://github.com/rust-lang/rust/commit/9eebe77a86cb07e7444f07b7b7dac879f5878269"}], "stats": {"total": 28, "additions": 14, "deletions": 14}, "files": [{"sha": "b9d849966a604ab1096fc585711c9303cdf67e45", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/504ab34e6298bf7c743d1df0cd3f48522355552d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504ab34e6298bf7c743d1df0cd3f48522355552d/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=504ab34e6298bf7c743d1df0cd3f48522355552d", "patch": "@@ -262,7 +262,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         move_spans.var_span_label(&mut err, \"move occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -299,7 +299,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         });\n \n         self.explain_why_borrow_contains_point(context, borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         err.buffer(&mut self.errors_buffer);\n     }\n \n@@ -483,7 +483,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         }\n \n         self.explain_why_borrow_contains_point(context, issued_borrow, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc.to_string());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, first_borrow_desc);\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -638,7 +638,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             if let BorrowExplanation::MustBeValidFor(..) = explanation {\n             } else {\n-                explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+                explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n             }\n         } else {\n             err.span_label(borrow_span, \"borrowed value does not live long enough\");\n@@ -649,7 +649,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n \n             borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n-            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+            explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n         }\n \n         err\n@@ -709,7 +709,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             _ => {}\n         }\n \n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         err.buffer(&mut self.errors_buffer);\n     }\n@@ -776,7 +776,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n             }\n             _ => {}\n         }\n-        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+        explanation.add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         borrow_spans.args_span_label(&mut err, \"value captured here\");\n \n@@ -913,7 +913,7 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         loan_spans.var_span_label(&mut err, \"borrow occurs due to use in closure\");\n \n         self.explain_why_borrow_contains_point(context, loan, None)\n-            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, String::new());\n+            .add_explanation_to_diagnostic(self.infcx.tcx, self.mir, &mut err, \"\");\n \n         err.buffer(&mut self.errors_buffer);\n     }"}, {"sha": "d1d6ba123727c3bd06bbd248b6dc460aeef15c51", "filename": "src/librustc_mir/borrow_check/nll/explain_borrow/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/504ab34e6298bf7c743d1df0cd3f48522355552d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/504ab34e6298bf7c743d1df0cd3f48522355552d/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fexplain_borrow%2Fmod.rs?ref=504ab34e6298bf7c743d1df0cd3f48522355552d", "patch": "@@ -42,28 +42,28 @@ impl<'tcx> BorrowExplanation<'tcx> {\n         tcx: TyCtxt<'cx, 'gcx, 'tcx>,\n         _mir: &Mir<'tcx>,\n         err: &mut DiagnosticBuilder<'_>,\n-        borrow_desc: String,\n+        borrow_desc: &str,\n     ) {\n         match *self {\n             BorrowExplanation::UsedLater(later_use_kind, var_or_use_span) => {\n-                let message = borrow_desc + match later_use_kind {\n+                let message = match later_use_kind {\n                     LaterUseKind::ClosureCapture => \"borrow later captured here by closure\",\n                     LaterUseKind::Call =>  \"borrow later used by call\",\n                     LaterUseKind::FakeLetRead => \"borrow later stored here\",\n                     LaterUseKind::Other => \"borrow later used here\",\n                 };\n-                err.span_label(var_or_use_span, message);\n+                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n             },\n             BorrowExplanation::UsedLaterInLoop(later_use_kind, var_or_use_span) => {\n-                let message = borrow_desc + match later_use_kind {\n+                let message = match later_use_kind {\n                     LaterUseKind::ClosureCapture => {\n                         \"borrow captured here by closure, in later iteration of loop\"\n                     },\n                     LaterUseKind::Call =>  \"borrow used by call, in later iteration of loop\",\n                     LaterUseKind::FakeLetRead => \"borrow later stored here\",\n                     LaterUseKind::Other => \"borrow used here, in later iteration of loop\",\n                 };\n-                err.span_label(var_or_use_span, message);\n+                err.span_label(var_or_use_span, format!(\"{}{}\", borrow_desc, message));\n             },\n             BorrowExplanation::UsedLaterWhenDropped(span, local_name, should_note_order) => {\n                 err.span_label(\n@@ -85,7 +85,7 @@ impl<'tcx> BorrowExplanation<'tcx> {\n             BorrowExplanation::MustBeValidFor(region) => {\n                 tcx.note_and_explain_free_region(\n                     err,\n-                    &(borrow_desc + \"borrowed value must be valid for \"),\n+                    &format!(\"{}{}\", borrow_desc, \"borrowed value must be valid for \"),\n                     region,\n                     \"...\",\n                 );"}]}