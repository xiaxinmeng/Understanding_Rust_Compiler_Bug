{"sha": "c192c079301b61cffb288701cefef19f3292ef43", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxOTJjMDc5MzAxYjYxY2ZmYjI4ODcwMWNlZmVmMTlmMzI5MmVmNDM=", "commit": {"author": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-24T07:39:12Z"}, "committer": {"name": "flip1995", "email": "hello@philkrones.com", "date": "2019-06-24T07:40:11Z"}, "message": "Remove ast:: prefix from types", "tree": {"sha": "8103ba8e31dde70a81cacddf6583f8b1727f6b4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8103ba8e31dde70a81cacddf6583f8b1727f6b4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c192c079301b61cffb288701cefef19f3292ef43", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZxoS6lESXlRGMHWcaTCGhp1QZjcFAl0QflsACgkQaTCGhp1Q\nZjfWyQ//Y8+uMPttHqNwyRJXyhV/yGPUZnTdij4gbYCS0ivIWOzbaL2HmTAdZJ54\nnmKGTeW1Km/6ZoLi4j4FbtcsVUilsaXRp6fkWimbG+CCafx2ckYmCwFb84fQvbXY\nRjHH+6y7Op/V4HjaLLQCYLttQwla3uxH3cI7o04irnGFz25NhwmUc1b/JINm5Nc2\nzoBLA3KDRsmeZ7JCNouzr3C7+GR984RXaMXSaNIvlWrT9KBWYdSSCRGutiW+YAH3\ntCzxAb7NE3AOw6YcpZdsB2xKqDEJH/2ag7hBaMwaBF7wlKK4S3a+F/zS+uYQ2pCV\nvc42zX6bj12CvjKnw8xTs+nktUM5ilggch+9Vg/6Y/9aDJ8k38NLi43Zzd2NzD3g\nHLPTPHb/tYaudNFIN1T617936moi2UhcCao2ffzJ5Qu94qISxll3IKUiE+hMVahF\nSBJcoTvnSbh/A13VimXuzNNd6yvYpN9idtV5iOejaywuHhr0bPyvKHf/CcbD9yJr\nCPGrkxcchLfDElxYyu7qEiF6RrxSJKNIeu1r3YhJPdCm6Xsu0ojJOidYdNDbpBy+\nk6YyXmXA52Yx4EqMwFvXXmY0iXWgbWyR02vfAMSDjf8mSdCsna5dRR02kMGJlRvi\nsa8+k2MeIE0GwWq35FBerY0Pmpmz2ugpROCrH089zdUppk6mgkE=\n=XeGP\n-----END PGP SIGNATURE-----", "payload": "tree 8103ba8e31dde70a81cacddf6583f8b1727f6b4a\nparent 8c80b65f10213c6e5f4c6d8113e8f8c9477af568\nauthor flip1995 <hello@philkrones.com> 1561361952 +0200\ncommitter flip1995 <hello@philkrones.com> 1561362011 +0200\n\nRemove ast:: prefix from types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c192c079301b61cffb288701cefef19f3292ef43", "html_url": "https://github.com/rust-lang/rust/commit/c192c079301b61cffb288701cefef19f3292ef43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c192c079301b61cffb288701cefef19f3292ef43/comments", "author": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flip1995", "id": 9744647, "node_id": "MDQ6VXNlcjk3NDQ2NDc=", "avatar_url": "https://avatars.githubusercontent.com/u/9744647?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flip1995", "html_url": "https://github.com/flip1995", "followers_url": "https://api.github.com/users/flip1995/followers", "following_url": "https://api.github.com/users/flip1995/following{/other_user}", "gists_url": "https://api.github.com/users/flip1995/gists{/gist_id}", "starred_url": "https://api.github.com/users/flip1995/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flip1995/subscriptions", "organizations_url": "https://api.github.com/users/flip1995/orgs", "repos_url": "https://api.github.com/users/flip1995/repos", "events_url": "https://api.github.com/users/flip1995/events{/privacy}", "received_events_url": "https://api.github.com/users/flip1995/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "url": "https://api.github.com/repos/rust-lang/rust/commits/8c80b65f10213c6e5f4c6d8113e8f8c9477af568", "html_url": "https://github.com/rust-lang/rust/commit/8c80b65f10213c6e5f4c6d8113e8f8c9477af568"}], "stats": {"total": 40, "additions": 20, "deletions": 20}, "files": [{"sha": "04fb187b9e12e1b470bcff6939e02e557e077aee", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/c192c079301b61cffb288701cefef19f3292ef43/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c192c079301b61cffb288701cefef19f3292ef43/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=c192c079301b61cffb288701cefef19f3292ef43", "patch": "@@ -2,7 +2,7 @@ use crate::utils::{differing_macro_contexts, in_macro_or_desugar, snippet_opt, s\n use if_chain::if_chain;\n use rustc::lint::{in_external_macro, EarlyContext, EarlyLintPass, LintArray, LintPass};\n use rustc::{declare_lint_pass, declare_tool_lint};\n-use syntax::ast;\n+use syntax::ast::*;\n use syntax::ptr::P;\n \n declare_clippy_lint! {\n@@ -86,33 +86,33 @@ declare_lint_pass!(Formatting => [\n ]);\n \n impl EarlyLintPass for Formatting {\n-    fn check_block(&mut self, cx: &EarlyContext<'_>, block: &ast::Block) {\n+    fn check_block(&mut self, cx: &EarlyContext<'_>, block: &Block) {\n         for w in block.stmts.windows(2) {\n             match (&w[0].node, &w[1].node) {\n-                (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Expr(ref second))\n-                | (&ast::StmtKind::Expr(ref first), &ast::StmtKind::Semi(ref second)) => {\n+                (&StmtKind::Expr(ref first), &StmtKind::Expr(ref second))\n+                | (&StmtKind::Expr(ref first), &StmtKind::Semi(ref second)) => {\n                     check_missing_else(cx, first, second);\n                 },\n                 _ => (),\n             }\n         }\n     }\n \n-    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+    fn check_expr(&mut self, cx: &EarlyContext<'_>, expr: &Expr) {\n         check_assign(cx, expr);\n         check_else(cx, expr);\n         check_array(cx, expr);\n     }\n }\n \n /// Implementation of the `SUSPICIOUS_ASSIGNMENT_FORMATTING` lint.\n-fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-    if let ast::ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n+fn check_assign(cx: &EarlyContext<'_>, expr: &Expr) {\n+    if let ExprKind::Assign(ref lhs, ref rhs) = expr.node {\n         if !differing_macro_contexts(lhs.span, rhs.span) && !in_macro_or_desugar(lhs.span) {\n             let eq_span = lhs.span.between(rhs.span);\n-            if let ast::ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n+            if let ExprKind::Unary(op, ref sub_rhs) = rhs.node {\n                 if let Some(eq_snippet) = snippet_opt(cx, eq_span) {\n-                    let op = ast::UnOp::to_string(op);\n+                    let op = UnOp::to_string(op);\n                     let eqop_span = lhs.span.between(sub_rhs.span);\n                     if eq_snippet.ends_with('=') {\n                         span_note_and_lint(\n@@ -135,7 +135,7 @@ fn check_assign(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n }\n \n /// Implementation of the `SUSPICIOUS_ELSE_FORMATTING` lint for weird `else`.\n-fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n+fn check_else(cx: &EarlyContext<'_>, expr: &Expr) {\n     if_chain! {\n         if let Some((then, &Some(ref else_))) = unsugar_if(expr);\n         if is_block(else_) || unsugar_if(else_).is_some();\n@@ -173,16 +173,16 @@ fn check_else(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-fn has_unary_equivalent(bin_op: ast::BinOpKind) -> bool {\n+fn has_unary_equivalent(bin_op: BinOpKind) -> bool {\n     // &, *, -\n-    bin_op == ast::BinOpKind::And || bin_op == ast::BinOpKind::Mul || bin_op == ast::BinOpKind::Sub\n+    bin_op == BinOpKind::And || bin_op == BinOpKind::Mul || bin_op == BinOpKind::Sub\n }\n \n /// Implementation of the `POSSIBLE_MISSING_COMMA` lint for array\n-fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n-    if let ast::ExprKind::Array(ref array) = expr.node {\n+fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n+    if let ExprKind::Array(ref array) = expr.node {\n         for element in array {\n-            if let ast::ExprKind::Binary(ref op, ref lhs, _) = element.node {\n+            if let ExprKind::Binary(ref op, ref lhs, _) = element.node {\n                 if has_unary_equivalent(op.node) && !differing_macro_contexts(lhs.span, op.span) {\n                     let space_span = lhs.span.between(op.span);\n                     if let Some(space_snippet) = snippet_opt(cx, space_span) {\n@@ -204,7 +204,7 @@ fn check_array(cx: &EarlyContext<'_>, expr: &ast::Expr) {\n     }\n }\n \n-fn check_missing_else(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Expr) {\n+fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n     if !differing_macro_contexts(first.span, second.span)\n         && !in_macro_or_desugar(first.span)\n         && unsugar_if(first).is_some()\n@@ -237,18 +237,18 @@ fn check_missing_else(cx: &EarlyContext<'_>, first: &ast::Expr, second: &ast::Ex\n     }\n }\n \n-fn is_block(expr: &ast::Expr) -> bool {\n-    if let ast::ExprKind::Block(..) = expr.node {\n+fn is_block(expr: &Expr) -> bool {\n+    if let ExprKind::Block(..) = expr.node {\n         true\n     } else {\n         false\n     }\n }\n \n /// Match `if` or `if let` expressions and return the `then` and `else` block.\n-fn unsugar_if(expr: &ast::Expr) -> Option<(&P<ast::Block>, &Option<P<ast::Expr>>)> {\n+fn unsugar_if(expr: &Expr) -> Option<(&P<Block>, &Option<P<Expr>>)> {\n     match expr.node {\n-        ast::ExprKind::If(_, ref then, ref else_) => Some((then, else_)),\n+        ExprKind::If(_, ref then, ref else_) => Some((then, else_)),\n         _ => None,\n     }\n }"}]}