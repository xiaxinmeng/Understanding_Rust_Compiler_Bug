{"sha": "48ff12acb184672393692e087927a66ff7907d71", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ4ZmYxMmFjYjE4NDY3MjM5MzY5MmUwODc5MjdhNjZmZjc5MDdkNzE=", "commit": {"author": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-07T02:09:57Z"}, "committer": {"name": "mibac138", "email": "5672750+mibac138@users.noreply.github.com", "date": "2020-05-20T18:42:09Z"}, "message": "Expand partial error recovery for `let` with `BinOpEq`", "tree": {"sha": "07069e9606ecc036a80d396dccb4b4e346a4401b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07069e9606ecc036a80d396dccb4b4e346a4401b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/48ff12acb184672393692e087927a66ff7907d71", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/48ff12acb184672393692e087927a66ff7907d71", "html_url": "https://github.com/rust-lang/rust/commit/48ff12acb184672393692e087927a66ff7907d71", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/48ff12acb184672393692e087927a66ff7907d71/comments", "author": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mibac138", "id": 5672750, "node_id": "MDQ6VXNlcjU2NzI3NTA=", "avatar_url": "https://avatars.githubusercontent.com/u/5672750?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mibac138", "html_url": "https://github.com/mibac138", "followers_url": "https://api.github.com/users/mibac138/followers", "following_url": "https://api.github.com/users/mibac138/following{/other_user}", "gists_url": "https://api.github.com/users/mibac138/gists{/gist_id}", "starred_url": "https://api.github.com/users/mibac138/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mibac138/subscriptions", "organizations_url": "https://api.github.com/users/mibac138/orgs", "repos_url": "https://api.github.com/users/mibac138/repos", "events_url": "https://api.github.com/users/mibac138/events{/privacy}", "received_events_url": "https://api.github.com/users/mibac138/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d4fe9553f65df51a18999e956fd507e26271e74e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d4fe9553f65df51a18999e956fd507e26271e74e", "html_url": "https://github.com/rust-lang/rust/commit/d4fe9553f65df51a18999e956fd507e26271e74e"}], "stats": {"total": 62, "additions": 50, "deletions": 12}, "files": [{"sha": "aceee8143289657371469b68852ab0cdd350d787", "filename": "src/librustc_parse/parser/stmt.rs", "status": "modified", "additions": 30, "deletions": 10, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/48ff12acb184672393692e087927a66ff7907d71/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/48ff12acb184672393692e087927a66ff7907d71/src%2Flibrustc_parse%2Fparser%2Fstmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_parse%2Fparser%2Fstmt.rs?ref=48ff12acb184672393692e087927a66ff7907d71", "patch": "@@ -145,12 +145,12 @@ impl<'a> Parser<'a> {\n     }\n \n     fn parse_local_mk(&mut self, lo: Span, attrs: AttrVec) -> PResult<'a, Stmt> {\n-        let local = self.parse_local(attrs)?;\n+        let local = self.parse_local(lo, attrs)?;\n         Ok(self.mk_stmt(lo.to(self.prev_token.span), StmtKind::Local(local)))\n     }\n \n     /// Parses a local variable declaration.\n-    fn parse_local(&mut self, attrs: AttrVec) -> PResult<'a, P<Local>> {\n+    fn parse_local(&mut self, let_span: Span, attrs: AttrVec) -> PResult<'a, P<Local>> {\n         let lo = self.prev_token.span;\n         let pat = self.parse_top_pat(GateOr::Yes)?;\n \n@@ -174,7 +174,7 @@ impl<'a> Parser<'a> {\n         } else {\n             (None, None)\n         };\n-        let init = match (self.parse_initializer(err.is_some()), err) {\n+        let init = match (self.parse_initializer(let_span, ty.is_some(), err.is_some()), err) {\n             (Ok(init), None) => {\n                 // init parsed, ty parsed\n                 init\n@@ -216,23 +216,43 @@ impl<'a> Parser<'a> {\n     }\n \n     /// Parses the RHS of a local variable declaration (e.g., '= 14;').\n-    fn parse_initializer(&mut self, skip_eq: bool) -> PResult<'a, Option<P<Expr>>> {\n+    fn parse_initializer(\n+        &mut self,\n+        let_span: Span,\n+        has_ty: bool,\n+        skip_eq: bool,\n+    ) -> PResult<'a, Option<P<Expr>>> {\n         let parse = if !self.eat(&token::Eq) && !skip_eq {\n             // Error recovery for `let x += 1`\n             if matches!(self.token.kind, TokenKind::BinOpEq(_)) {\n-                struct_span_err!(\n+                let mut err = struct_span_err!(\n                     self.sess.span_diagnostic,\n                     self.token.span,\n                     E0067,\n                     \"can't reassign to a uninitialized variable\"\n-                )\n-                .span_suggestion_short(\n+                );\n+                err.span_suggestion_short(\n                     self.token.span,\n                     \"replace with `=` to initialize the variable\",\n                     \"=\".to_string(),\n-                    Applicability::MaybeIncorrect,\n-                )\n-                .emit();\n+                    if has_ty {\n+                        // for `let x: i8 += 1` it's highly likely that the `+` is a typo\n+                        Applicability::MachineApplicable\n+                    } else {\n+                        // for `let x += 1` it's a bit less likely that the `+` is a typo\n+                        Applicability::MaybeIncorrect\n+                    },\n+                );\n+                // In case of code like `let x += 1` it's possible the user may have meant to write `x += 1`\n+                if !has_ty {\n+                    err.span_suggestion_short(\n+                        let_span,\n+                        \"remove to reassign to a previously initialized variable\",\n+                        \"\".to_string(),\n+                        Applicability::MaybeIncorrect,\n+                    );\n+                }\n+                err.emit();\n                 self.bump();\n                 true\n             } else {"}, {"sha": "c37612430cef13b6906be27b63365496c22c82c3", "filename": "src/test/ui/parser/let-binop.stderr", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/48ff12acb184672393692e087927a66ff7907d71/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/48ff12acb184672393692e087927a66ff7907d71/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flet-binop.stderr?ref=48ff12acb184672393692e087927a66ff7907d71", "patch": "@@ -8,13 +8,31 @@ error[E0067]: can't reassign to a uninitialized variable\n   --> $DIR/let-binop.rs:4:11\n    |\n LL |     let b += 1;\n-   |           ^^ help: replace with `=` to initialize the variable\n+   |           ^^\n+   |\n+help: replace with `=` to initialize the variable\n+   |\n+LL |     let b = 1;\n+   |           ^\n+help: remove to reassign to a previously initialized variable\n+   |\n+LL |      b += 1;\n+   |    --\n \n error[E0067]: can't reassign to a uninitialized variable\n   --> $DIR/let-binop.rs:6:11\n    |\n LL |     let c *= 1;\n-   |           ^^ help: replace with `=` to initialize the variable\n+   |           ^^\n+   |\n+help: replace with `=` to initialize the variable\n+   |\n+LL |     let c = 1;\n+   |           ^\n+help: remove to reassign to a previously initialized variable\n+   |\n+LL |      c *= 1;\n+   |    --\n \n error: aborting due to 3 previous errors\n "}]}