{"sha": "b8caef423d8aaef7afe228c75cb5228431e459f9", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI4Y2FlZjQyM2Q4YWFlZjdhZmUyMjhjNzVjYjUyMjg0MzFlNDU5Zjk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-04-09T10:55:27Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2020-04-16T11:03:41Z"}, "message": "reserve variable for empty root region", "tree": {"sha": "9c261bbb200a0237f913aab60fe65c5386b2ee5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9c261bbb200a0237f913aab60fe65c5386b2ee5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b8caef423d8aaef7afe228c75cb5228431e459f9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b8caef423d8aaef7afe228c75cb5228431e459f9", "html_url": "https://github.com/rust-lang/rust/commit/b8caef423d8aaef7afe228c75cb5228431e459f9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b8caef423d8aaef7afe228c75cb5228431e459f9/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "771fdd99852ba8465b76674466b470a1ee3dd3c2", "url": "https://api.github.com/repos/rust-lang/rust/commits/771fdd99852ba8465b76674466b470a1ee3dd3c2", "html_url": "https://github.com/rust-lang/rust/commit/771fdd99852ba8465b76674466b470a1ee3dd3c2"}], "stats": {"total": 275, "additions": 164, "deletions": 111}, "files": [{"sha": "497001d009fe307174daf0a9afe7ff4a4217e32f", "filename": "src/librustc_infer/infer/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_infer%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_infer%2Finfer%2Fmod.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -472,6 +472,9 @@ pub enum NLLRegionVariableOrigin {\n     /// from a `for<'a> T` binder). Meant to represent \"any region\".\n     Placeholder(ty::PlaceholderRegion),\n \n+    /// The variable we create to represent `'empty(U0)`.\n+    RootEmptyRegion,\n+\n     Existential {\n         /// If this is true, then this variable was created to represent a lifetime\n         /// bound in a `for` binder. For example, it might have been created to\n@@ -493,6 +496,7 @@ impl NLLRegionVariableOrigin {\n             NLLRegionVariableOrigin::FreeRegion => true,\n             NLLRegionVariableOrigin::Placeholder(..) => true,\n             NLLRegionVariableOrigin::Existential { .. } => false,\n+            NLLRegionVariableOrigin::RootEmptyRegion => false,\n         }\n     }\n "}, {"sha": "6e0b368b61a0ed8c1eb519eb1c5d960d44f3f63a", "filename": "src/librustc_mir/borrow_check/region_infer/mod.rs", "status": "modified", "additions": 11, "deletions": 7, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fregion_infer%2Fmod.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -481,7 +481,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     }\n                 }\n \n-                NLLRegionVariableOrigin::Existential { .. } => {\n+                NLLRegionVariableOrigin::RootEmptyRegion\n+                | NLLRegionVariableOrigin::Existential { .. } => {\n                     // For existential, regions, nothing to do.\n                 }\n             }\n@@ -1323,7 +1324,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     self.check_bound_universal_region(fr, placeholder, errors_buffer);\n                 }\n \n-                NLLRegionVariableOrigin::Existential { .. } => {\n+                NLLRegionVariableOrigin::RootEmptyRegion\n+                | NLLRegionVariableOrigin::Existential { .. } => {\n                     // nothing to check here\n                 }\n             }\n@@ -1425,7 +1427,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                     self.check_bound_universal_region(fr, placeholder, errors_buffer);\n                 }\n \n-                NLLRegionVariableOrigin::Existential { .. } => {\n+                NLLRegionVariableOrigin::RootEmptyRegion\n+                | NLLRegionVariableOrigin::Existential { .. } => {\n                     // nothing to check here\n                 }\n             }\n@@ -1698,9 +1701,9 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n                 universe1.cannot_name(placeholder.universe)\n             }\n \n-            NLLRegionVariableOrigin::FreeRegion | NLLRegionVariableOrigin::Existential { .. } => {\n-                false\n-            }\n+            NLLRegionVariableOrigin::RootEmptyRegion\n+            | NLLRegionVariableOrigin::FreeRegion\n+            | NLLRegionVariableOrigin::Existential { .. } => false,\n         }\n     }\n \n@@ -2019,7 +2022,8 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let blame_source = match from_region_origin {\n             NLLRegionVariableOrigin::FreeRegion\n             | NLLRegionVariableOrigin::Existential { from_forall: false } => true,\n-            NLLRegionVariableOrigin::Placeholder(_)\n+            NLLRegionVariableOrigin::RootEmptyRegion\n+            | NLLRegionVariableOrigin::Placeholder(_)\n             | NLLRegionVariableOrigin::Existential { from_forall: true } => false,\n         };\n "}, {"sha": "711271a63fbff2c3cd853b37dc6a555207ebc0b7", "filename": "src/librustc_mir/borrow_check/type_check/constraint_conversion.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ftype_check%2Fconstraint_conversion.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -160,10 +160,6 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         a: ty::Region<'tcx>,\n         b: ty::Region<'tcx>,\n     ) {\n-        // FIXME -- this is not the fix I would prefer\n-        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = a {\n-            return;\n-        }\n         let b = self.to_region_vid(b);\n         let a = self.to_region_vid(a);\n         self.add_outlives(b, a);\n@@ -176,10 +172,6 @@ impl<'a, 'b, 'tcx> TypeOutlivesDelegate<'tcx> for &'a mut ConstraintConversion<'\n         a: ty::Region<'tcx>,\n         bound: VerifyBound<'tcx>,\n     ) {\n-        // FIXME: I'd prefer if NLL had a notion of empty\n-        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = a {\n-            return;\n-        }\n         let type_test = self.verify_to_type_test(kind, a, bound);\n         self.add_type_test(type_test);\n     }"}, {"sha": "eb1141739a3862a02444ad786431ea24fba110d2", "filename": "src/librustc_mir/borrow_check/universal_regions.rs", "status": "modified", "additions": 18, "deletions": 1, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Funiversal_regions.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -54,6 +54,13 @@ pub struct UniversalRegions<'tcx> {\n     /// The total number of universal region variables instantiated.\n     num_universals: usize,\n \n+    /// A special region variable created for the `'empty(U0)` region.\n+    /// Note that this is **not** a \"universal\" region, as it doesn't\n+    /// represent a universally bound placeholder or any such thing.\n+    /// But we do create it here in this type because it's a useful region\n+    /// to have around in a few limited cases.\n+    pub root_empty: RegionVid,\n+\n     /// The \"defining\" type for this function, with all universal\n     /// regions instantiated. For a closure or generator, this is the\n     /// closure type, but for a top-level function it's the `FnDef`.\n@@ -316,7 +323,11 @@ impl<'tcx> UniversalRegions<'tcx> {\n \n     /// See `UniversalRegionIndices::to_region_vid`.\n     pub fn to_region_vid(&self, r: ty::Region<'tcx>) -> RegionVid {\n-        self.indices.to_region_vid(r)\n+        if let ty::ReEmpty(ty::UniverseIndex::ROOT) = r {\n+            self.root_empty\n+        } else {\n+            self.indices.to_region_vid(r)\n+        }\n     }\n \n     /// As part of the NLL unit tests, you can annotate a function with\n@@ -472,10 +483,16 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n             _ => None,\n         };\n \n+        let root_empty = self\n+            .infcx\n+            .next_nll_region_var(NLLRegionVariableOrigin::RootEmptyRegion)\n+            .to_region_vid();\n+\n         UniversalRegions {\n             indices,\n             fr_static,\n             fr_fn_body,\n+            root_empty,\n             first_extern_index,\n             first_local_index,\n             num_universals,"}, {"sha": "dcfb069b84aad17a803994a6757006d7f59209c0", "filename": "src/test/mir-opt/nll/named-lifetimes-basic/rustc.use_x.nll.0.mir", "status": "modified", "additions": 14, "deletions": 13, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fnamed-lifetimes-basic%2Frustc.use_x.nll.0.mir?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -13,27 +13,28 @@\n | '_#2r | U0 | {bb0[0..=1], '_#2r}\n | '_#3r | U0 | {bb0[0..=1], '_#3r}\n | '_#4r | U0 | {bb0[0..=1], '_#4r}\n-| '_#5r | U0 | {bb0[0..=1], '_#1r}\n-| '_#6r | U0 | {bb0[0..=1], '_#2r}\n-| '_#7r | U0 | {bb0[0..=1], '_#1r}\n-| '_#8r | U0 | {bb0[0..=1], '_#3r}\n+| '_#5r | U0 | {}\n+| '_#6r | U0 | {bb0[0..=1], '_#1r}\n+| '_#7r | U0 | {bb0[0..=1], '_#2r}\n+| '_#8r | U0 | {bb0[0..=1], '_#1r}\n+| '_#9r | U0 | {bb0[0..=1], '_#3r}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=1]}\n | '_#1r live at {bb0[0..=1]}\n | '_#2r live at {bb0[0..=1]}\n | '_#3r live at {bb0[0..=1]}\n | '_#4r live at {bb0[0..=1]}\n-| '_#1r: '_#5r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n-| '_#1r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n-| '_#2r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n-| '_#3r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n-| '_#5r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n-| '_#6r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n-| '_#7r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n-| '_#8r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n+| '_#1r: '_#6r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n+| '_#1r: '_#8r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n+| '_#2r: '_#7r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n+| '_#3r: '_#9r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n+| '_#6r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:26: 12:27)\n+| '_#7r: '_#2r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:42: 12:43)\n+| '_#8r: '_#1r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:54: 12:55)\n+| '_#9r: '_#3r due to BoringNoLocation at All($DIR/named-lifetimes-basic.rs:12:66: 12:67)\n |\n-fn use_x(_1: &'_#5r mut i32, _2: &'_#6r u32, _3: &'_#7r u32, _4: &'_#8r u32) -> bool {\n+fn use_x(_1: &'_#6r mut i32, _2: &'_#7r u32, _3: &'_#8r u32, _4: &'_#9r u32) -> bool {\n     debug w => _1;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:26: 12:27\n     debug x => _2;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:42: 12:43\n     debug y => _3;                       // in scope 0 at $DIR/named-lifetimes-basic.rs:12:54: 12:55"}, {"sha": "66d7cda2b85a0b885ba9e52da76a05a11742c81d", "filename": "src/test/mir-opt/nll/region-subtyping-basic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -7,7 +7,9 @@\n \n #![allow(warnings)]\n \n-fn use_x(_: usize) -> bool { true }\n+fn use_x(_: usize) -> bool {\n+    true\n+}\n \n // EMIT_MIR_FOR_EACH_BIT_WIDTH\n // EMIT_MIR rustc.main.nll.0.mir"}, {"sha": "61db4dba5862755a96cb56034295a631fbdd79f9", "filename": "src/test/mir-opt/nll/region-subtyping-basic/64bit/rustc.main.nll.0.mir", "status": "modified", "additions": 72, "deletions": 71, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fnll%2Fregion-subtyping-basic%2F64bit%2Frustc.main.nll.0.mir?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -7,164 +7,165 @@\n | Inferred Region Values\n | '_#0r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#0r, '_#1r}\n | '_#1r | U0 | {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5], '_#1r}\n-| '_#2r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n-| '_#3r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n-| '_#4r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#2r | U0 | {}\n+| '_#3r | U0 | {bb2[0..=8], bb3[0], bb5[0..=2]}\n+| '_#4r | U0 | {bb2[1..=8], bb3[0], bb5[0..=2]}\n+| '_#5r | U0 | {bb2[4..=8], bb3[0], bb5[0..=2]}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n | '_#1r live at {bb0[0..=8], bb1[0], bb2[0..=8], bb3[0], bb4[0..=1], bb5[0..=3], bb6[0..=3], bb7[0..=2], bb8[0..=5]}\n-| '_#2r live at {bb2[0]}\n-| '_#3r live at {bb2[1..=3]}\n-| '_#4r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n-| '_#2r: '_#3r due to Assignment at Single(bb2[0])\n-| '_#3r: '_#4r due to Assignment at Single(bb2[3])\n+| '_#3r live at {bb2[0]}\n+| '_#4r live at {bb2[1..=3]}\n+| '_#5r live at {bb2[4..=8], bb3[0], bb5[0..=2]}\n+| '_#3r: '_#4r due to Assignment at Single(bb2[0])\n+| '_#4r: '_#5r due to Assignment at Single(bb2[3])\n |\n fn main() -> () {\n-    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:14:11: 14:11\n-    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n-    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n-    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n-    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n-    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n-    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    let mut _0: ();                      // return place in scope 0 at $DIR/region-subtyping-basic.rs:16:11: 16:11\n+    let mut _1: [usize; Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }]; // in scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+    let _3: usize;                       // in scope 0 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n+    let mut _4: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+    let mut _5: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+    let mut _7: bool;                    // in scope 0 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+    let _8: bool;                        // in scope 0 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+    let mut _9: usize;                   // in scope 0 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+    let _10: bool;                       // in scope 0 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n     scope 1 {\n-        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n-        let _2: &'_#3r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n+        debug v => _1;                   // in scope 1 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        let _2: &'_#4r usize;            // in scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n         scope 2 {\n-            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n-            let _6: &'_#4r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+            debug p => _2;               // in scope 2 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+            let _6: &'_#5r usize;        // in scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n             scope 3 {\n-                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n+                debug q => _6;           // in scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n             }\n         }\n     }\n \n     bb0: {\n-        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n-        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:15:17: 15:26\n+        StorageLive(_1);                 // bb0[0]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        _1 = [const Const(Value(Scalar(0x0000000000000001)): usize), const Const(Value(Scalar(0x0000000000000002)): usize), const Const(Value(Scalar(0x0000000000000003)): usize)]; // bb0[1]: scope 0 at $DIR/region-subtyping-basic.rs:17:17: 17:26\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000001))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:15:18: 15:19\n+                                         // + span: $DIR/region-subtyping-basic.rs:17:18: 17:19\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000001)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000002))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:15:21: 15:22\n+                                         // + span: $DIR/region-subtyping-basic.rs:17:21: 17:22\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000002)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000003))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:15:24: 15:25\n+                                         // + span: $DIR/region-subtyping-basic.rs:17:24: 17:25\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000003)) }\n-        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:15:9: 15:14\n-        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n-        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n-        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:16:16: 16:17\n+        FakeRead(ForLet, _1);            // bb0[2]: scope 0 at $DIR/region-subtyping-basic.rs:17:9: 17:14\n+        StorageLive(_2);                 // bb0[3]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_3);                 // bb0[4]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n+        _3 = const Const(Value(Scalar(0x0000000000000000)): usize); // bb0[5]: scope 1 at $DIR/region-subtyping-basic.rs:18:16: 18:17\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000000))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:16:16: 16:17\n+                                         // + span: $DIR/region-subtyping-basic.rs:18:16: 18:17\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000000)) }\n-        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n-        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:16:14: 16:18\n+        _4 = Len(_1);                    // bb0[6]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        _5 = Lt(_3, _4);                 // bb0[7]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n+        assert(move _5, \"index out of bounds: the len is {} but the index is {}\", move _4, _3) -> [success: bb2, unwind: bb1]; // bb0[8]: scope 1 at $DIR/region-subtyping-basic.rs:18:14: 18:18\n     }\n \n     bb1 (cleanup): {\n-        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:14:1: 23:2\n+        resume;                          // bb1[0]: scope 0 at $DIR/region-subtyping-basic.rs:16:1: 25:2\n     }\n \n     bb2: {\n-        _2 = &'_#2r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:16:13: 16:18\n-        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:16:9: 16:10\n-        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n-        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:17:13: 17:14\n-        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:17:9: 17:10\n-        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n-        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n+        _2 = &'_#3r _1[_3];              // bb2[0]: scope 1 at $DIR/region-subtyping-basic.rs:18:13: 18:18\n+        FakeRead(ForLet, _2);            // bb2[1]: scope 1 at $DIR/region-subtyping-basic.rs:18:9: 18:10\n+        StorageLive(_6);                 // bb2[2]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        _6 = _2;                         // bb2[3]: scope 2 at $DIR/region-subtyping-basic.rs:19:13: 19:14\n+        FakeRead(ForLet, _6);            // bb2[4]: scope 2 at $DIR/region-subtyping-basic.rs:19:9: 19:10\n+        StorageLive(_7);                 // bb2[5]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        _7 = const Const(Value(Scalar(0x01)): bool); // bb2[6]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // ty::Const\n                                          // + ty: bool\n                                          // + val: Value(Scalar(0x01))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:18:8: 18:12\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:8: 20:12\n                                          // + literal: Const { ty: bool, val: Value(Scalar(0x01)) }\n-        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:18:8: 18:12\n-        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+        FakeRead(ForMatchedPlace, _7);   // bb2[7]: scope 3 at $DIR/region-subtyping-basic.rs:20:8: 20:12\n+        switchInt(_7) -> [Const(Value(Scalar(0x00)): bool): bb4, otherwise: bb3]; // bb2[8]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb3: {\n-        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+        falseEdges -> [real: bb5, imaginary: bb4]; // bb3[0]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb4: {\n-        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n-        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_10);                // bb4[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n+        _10 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(const Const(Value(Scalar(0x0000000000000016)): usize)) -> [return: bb7, unwind: bb1]; // bb4[1]: scope 3 at $DIR/region-subtyping-basic.rs:23:9: 23:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n+                                         // + span: $DIR/region-subtyping-basic.rs:23:9: 23:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n                                          // ty::Const\n                                          // + ty: usize\n                                          // + val: Value(Scalar(0x0000000000000016))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:21:15: 21:17\n+                                         // + span: $DIR/region-subtyping-basic.rs:23:15: 23:17\n                                          // + literal: Const { ty: usize, val: Value(Scalar(0x0000000000000016)) }\n     }\n \n     bb5: {\n-        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n-        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n-        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:19:15: 19:17\n-        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:19:9: 19:18\n+        StorageLive(_8);                 // bb5[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n+        StorageLive(_9);                 // bb5[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _9 = (*_6);                      // bb5[2]: scope 3 at $DIR/region-subtyping-basic.rs:21:15: 21:17\n+        _8 = const Const(Value(Scalar(<ZST>)): fn(usize) -> bool {use_x})(move _9) -> [return: bb6, unwind: bb1]; // bb5[3]: scope 3 at $DIR/region-subtyping-basic.rs:21:9: 21:18\n                                          // ty::Const\n                                          // + ty: fn(usize) -> bool {use_x}\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:19:9: 19:14\n+                                         // + span: $DIR/region-subtyping-basic.rs:21:9: 21:14\n                                          // + literal: Const { ty: fn(usize) -> bool {use_x}, val: Value(Scalar(<ZST>)) }\n     }\n \n     bb6: {\n-        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:19:17: 19:18\n-        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:19:18: 19:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:13: 20:6\n+        StorageDead(_9);                 // bb6[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:17: 21:18\n+        StorageDead(_8);                 // bb6[1]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb6[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:18:13: 20:6\n+                                         // + span: $DIR/region-subtyping-basic.rs:20:13: 22:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+        goto -> bb8;                     // bb6[3]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb7: {\n-        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:21:18: 21:19\n-        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:20:12: 22:6\n+        StorageDead(_10);                // bb7[0]: scope 3 at $DIR/region-subtyping-basic.rs:23:18: 23:19\n+        _0 = const Const(Value(Scalar(<ZST>)): ()); // bb7[1]: scope 3 at $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // ty::Const\n                                          // + ty: ()\n                                          // + val: Value(Scalar(<ZST>))\n                                          // mir::Constant\n-                                         // + span: $DIR/region-subtyping-basic.rs:20:12: 22:6\n+                                         // + span: $DIR/region-subtyping-basic.rs:22:12: 24:6\n                                          // + literal: Const { ty: (), val: Value(Scalar(<ZST>)) }\n-        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:18:5: 22:6\n+        goto -> bb8;                     // bb7[2]: scope 3 at $DIR/region-subtyping-basic.rs:20:5: 24:6\n     }\n \n     bb8: {\n-        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n-        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n-        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n-        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n-        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:23:1: 23:2\n-        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:23:2: 23:2\n+        StorageDead(_6);                 // bb8[0]: scope 2 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_3);                 // bb8[1]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_2);                 // bb8[2]: scope 1 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_1);                 // bb8[3]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        StorageDead(_7);                 // bb8[4]: scope 0 at $DIR/region-subtyping-basic.rs:25:1: 25:2\n+        return;                          // bb8[5]: scope 0 at $DIR/region-subtyping-basic.rs:25:2: 25:2\n     }\n }"}, {"sha": "e66ca0b13551628cfd55e3f057e462b09666ccb4", "filename": "src/test/mir-opt/storage_ranges/rustc.main.nll.0.mir", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fstorage_ranges%2Frustc.main.nll.0.mir?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -7,15 +7,16 @@\n | Inferred Region Values\n | '_#0r | U0 | {bb0[0..=22], '_#0r, '_#1r}\n | '_#1r | U0 | {bb0[0..=22], '_#1r}\n-| '_#2r | U0 | {bb0[10..=11]}\n-| '_#3r | U0 | {bb0[11]}\n+| '_#2r | U0 | {}\n+| '_#3r | U0 | {bb0[10..=11]}\n+| '_#4r | U0 | {bb0[11]}\n |\n | Inference Constraints\n | '_#0r live at {bb0[0..=22]}\n | '_#1r live at {bb0[0..=22]}\n-| '_#2r live at {bb0[10]}\n-| '_#3r live at {bb0[11]}\n-| '_#2r: '_#3r due to Assignment at Single(bb0[10])\n+| '_#3r live at {bb0[10]}\n+| '_#4r live at {bb0[11]}\n+| '_#3r: '_#4r due to Assignment at Single(bb0[10])\n |\n fn main() -> () {\n     let mut _0: ();                      // return place in scope 0 at $DIR/storage_ranges.rs:3:11: 3:11"}, {"sha": "da584e8ad4e0d2dd1907ca5491fd4158073381c9", "filename": "src/test/ui/async-await/multiple-lifetimes/ret-impl-trait-no-fg.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fmultiple-lifetimes%2Fret-impl-trait-no-fg.stderr?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -34,7 +34,7 @@ LL | |     (a, b)\n LL | | }\n    | |_^\n    |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#4r\n+   = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n \n error[E0700]: hidden type for `impl Trait` captures lifetime that does not appear in bounds\n   --> $DIR/ret-impl-trait-no-fg.rs:9:1\n@@ -48,7 +48,7 @@ LL | |     (a, b)\n LL | | }\n    | |_^\n    |\n-   = note: hidden type `(&u8, &u8)` captures lifetime '_#5r\n+   = note: hidden type `(&u8, &u8)` captures lifetime '_#6r\n \n error: aborting due to 5 previous errors\n "}, {"sha": "90803a0adb01bf8cb1083f1fd396eb2a5aec79d9", "filename": "src/test/ui/hrtb/due-to-where-clause.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhrtb%2Fdue-to-where-clause.nll.stderr?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -2,7 +2,7 @@ error: higher-ranked subtype error\n   --> $DIR/due-to-where-clause.rs:2:5\n    |\n LL |     test::<FooS>(&mut 42);\n-   |     ^^^^^^^^^^^^^^^^^^^^^\n+   |     ^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "129af80ce4a629616ad632650692cdc115701e20", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unrelated.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unrelated.nll.stderr?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b, 'c, 'd, 'e>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'d, 'e>\n    |                                                                          ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: hidden type `Ordinary<'_>` captures lifetime '_#8r\n+   = note: hidden type `Ordinary<'_>` captures lifetime '_#9r\n \n error: aborting due to previous error\n "}, {"sha": "de6d5edcae511d9ffd631f7c675ca707c6b05b43", "filename": "src/test/ui/impl-trait/multiple-lifetimes/ordinary-bounds-unsuited.nll.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fmultiple-lifetimes%2Fordinary-bounds-unsuited.nll.stderr?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -4,7 +4,7 @@ error[E0700]: hidden type for `impl Trait` captures lifetime that does not appea\n LL | fn upper_bounds<'a, 'b>(a: Ordinary<'a>, b: Ordinary<'b>) -> impl Trait<'a, 'b>\n    |                                                              ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: hidden type `Ordinary<'_>` captures lifetime '_#5r\n+   = note: hidden type `Ordinary<'_>` captures lifetime '_#6r\n \n error: aborting due to previous error\n "}, {"sha": "6bfd18de18c6ae995e7eff2d76910eb0706df8fc", "filename": "src/test/ui/nll/issue-68550.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fnll%2Fissue-68550.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fnll%2Fissue-68550.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-68550.rs?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -0,0 +1,15 @@\n+// Regression test for issue #68550.\n+//\n+// The `&'static A:` where clause was triggering\n+// ICEs because it wound up being compiled to reference\n+// the `'empty(U0)` region.\n+\n+fn run<'a, A>(x: A)\n+where\n+    A: 'static,\n+    &'static A: ,\n+{\n+    let _: &'a A = &x; //~ ERROR `x` does not live long enough\n+}\n+\n+fn main() {}"}, {"sha": "e234ebb04e16a5ea874c7482a3cf11da6bc03dd5", "filename": "src/test/ui/nll/issue-68550.stderr", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fnll%2Fissue-68550.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b8caef423d8aaef7afe228c75cb5228431e459f9/src%2Ftest%2Fui%2Fnll%2Fissue-68550.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-68550.stderr?ref=b8caef423d8aaef7afe228c75cb5228431e459f9", "patch": "@@ -0,0 +1,16 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/issue-68550.rs:12:20\n+   |\n+LL | fn run<'a, A>(x: A)\n+   |        -- lifetime `'a` defined here\n+...\n+LL |     let _: &'a A = &x;\n+   |            -----   ^^ borrowed value does not live long enough\n+   |            |\n+   |            type annotation requires that `x` is borrowed for `'a`\n+LL | }\n+   | - `x` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}