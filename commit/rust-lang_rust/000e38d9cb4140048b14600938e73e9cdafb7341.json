{"sha": "000e38d9cb4140048b14600938e73e9cdafb7341", "node_id": "C_kwDOAAsO6NoAKDAwMGUzOGQ5Y2I0MTQwMDQ4YjE0NjAwOTM4ZTczZTljZGFmYjczNDE", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-02-24T20:42:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-02-24T20:42:13Z"}, "message": "Rollup merge of #94175 - Urgau:check-cfg-improvements, r=petrochenkov\n\nImprove `--check-cfg` implementation\n\nThis pull-request is a mix of improvements regarding the `--check-cfg` implementation:\n\n- Simpler internal representation (usage of `Option` instead of separate bool)\n- Add --check-cfg to the unstable book (based on the RFC)\n- Improved diagnostics:\n    * List possible values when the value is unexpected\n    * Suggest if possible a name or value that is similar\n- Add more tests (well known names, mix of combinations, ...)\n\nr? ```@petrochenkov```", "tree": {"sha": "53457e4e41ee064c791c0aff6adb5624312cf554", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53457e4e41ee064c791c0aff6adb5624312cf554"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/000e38d9cb4140048b14600938e73e9cdafb7341", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiF+2lCRBK7hj4Ov3rIwAAd6sIAHUdjbYLCt0ymyqdl6kWkX8s\nvZ3CRsL5Qa8qgP3XSVXg7OsVTQ6Bmb4YTtrEKqrk1Haxj0GGHK2nJJn+8Uxt0doS\ngDKCpWPX4PX1EyYPYDZPD2+m3fOHHVGOyf/1Q6+gpKoKiw0xh1CmwsXPeNeytZvr\nwgivu3F0PYsP2j1snpzU32rXKF78effYAKHjRss/NeluZ3LtopPTkLBCOSwOL4jA\nFqYOeUUgMJ3mz2l8nGMCLDNRW/znpDbYIb919ThySX+yDhaIhylkKfFB9M6qZd3n\ncfUhVd+xaZNjbO9NMK20T6bltg9Go0JjBXlM8H6yC+S39eQsTFuCbSCd0uZa5pI=\n=t8I3\n-----END PGP SIGNATURE-----\n", "payload": "tree 53457e4e41ee064c791c0aff6adb5624312cf554\nparent 7f9953691563f30335462f55d05c8b266f7b1932\nparent a556a2a8e60501203f310407b27cf739618c0000\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1645735333 +0100\ncommitter GitHub <noreply@github.com> 1645735333 +0100\n\nRollup merge of #94175 - Urgau:check-cfg-improvements, r=petrochenkov\n\nImprove `--check-cfg` implementation\n\nThis pull-request is a mix of improvements regarding the `--check-cfg` implementation:\n\n- Simpler internal representation (usage of `Option` instead of separate bool)\n- Add --check-cfg to the unstable book (based on the RFC)\n- Improved diagnostics:\n    * List possible values when the value is unexpected\n    * Suggest if possible a name or value that is similar\n- Add more tests (well known names, mix of combinations, ...)\n\nr? ```@petrochenkov```\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/000e38d9cb4140048b14600938e73e9cdafb7341", "html_url": "https://github.com/rust-lang/rust/commit/000e38d9cb4140048b14600938e73e9cdafb7341", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/000e38d9cb4140048b14600938e73e9cdafb7341/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7f9953691563f30335462f55d05c8b266f7b1932", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f9953691563f30335462f55d05c8b266f7b1932", "html_url": "https://github.com/rust-lang/rust/commit/7f9953691563f30335462f55d05c8b266f7b1932"}, {"sha": "a556a2a8e60501203f310407b27cf739618c0000", "url": "https://api.github.com/repos/rust-lang/rust/commits/a556a2a8e60501203f310407b27cf739618c0000", "html_url": "https://github.com/rust-lang/rust/commit/a556a2a8e60501203f310407b27cf739618c0000"}], "stats": {"total": 558, "additions": 511, "deletions": 47}, "files": [{"sha": "68b536da9f70f7b4119ff5c86716fe3156da6cd2", "filename": "compiler/rustc_attr/src/builtin.rs", "status": "modified", "additions": 25, "deletions": 16, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_attr%2Fsrc%2Fbuiltin.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -8,6 +8,7 @@ use rustc_errors::{struct_span_err, Applicability};\n use rustc_feature::{find_gated_cfg, is_builtin_attr_name, Features, GatedCfg};\n use rustc_macros::HashStable_Generic;\n use rustc_session::lint::builtin::UNEXPECTED_CFGS;\n+use rustc_session::lint::BuiltinLintDiagnostics;\n use rustc_session::parse::{feature_err, ParseSess};\n use rustc_session::Session;\n use rustc_span::hygiene::Transparency;\n@@ -461,29 +462,37 @@ pub fn cfg_matches(cfg: &ast::MetaItem, sess: &ParseSess, features: Option<&Feat\n                 true\n             }\n             MetaItemKind::NameValue(..) | MetaItemKind::Word => {\n-                let name = cfg.ident().expect(\"multi-segment cfg predicate\").name;\n+                let ident = cfg.ident().expect(\"multi-segment cfg predicate\");\n+                let name = ident.name;\n                 let value = cfg.value_str();\n-                if sess.check_config.names_checked && !sess.check_config.names_valid.contains(&name)\n-                {\n-                    sess.buffer_lint(\n-                        UNEXPECTED_CFGS,\n-                        cfg.span,\n-                        CRATE_NODE_ID,\n-                        \"unexpected `cfg` condition name\",\n-                    );\n-                }\n-                if let Some(val) = value {\n-                    if sess.check_config.values_checked.contains(&name)\n-                        && !sess.check_config.values_valid.contains(&(name, val))\n-                    {\n-                        sess.buffer_lint(\n+                if let Some(names_valid) = &sess.check_config.names_valid {\n+                    if !names_valid.contains(&name) {\n+                        sess.buffer_lint_with_diagnostic(\n                             UNEXPECTED_CFGS,\n                             cfg.span,\n                             CRATE_NODE_ID,\n-                            \"unexpected `cfg` condition value\",\n+                            \"unexpected `cfg` condition name\",\n+                            BuiltinLintDiagnostics::UnexpectedCfg(ident.span, name, None),\n                         );\n                     }\n                 }\n+                if let Some(value) = value {\n+                    if let Some(values) = &sess.check_config.values_valid.get(&name) {\n+                        if !values.contains(&value) {\n+                            sess.buffer_lint_with_diagnostic(\n+                                UNEXPECTED_CFGS,\n+                                cfg.span,\n+                                CRATE_NODE_ID,\n+                                \"unexpected `cfg` condition value\",\n+                                BuiltinLintDiagnostics::UnexpectedCfg(\n+                                    cfg.name_value_literal_span().unwrap(),\n+                                    name,\n+                                    Some(value),\n+                                ),\n+                            );\n+                        }\n+                    }\n+                }\n                 sess.config.contains(&(name, value))\n             }\n         }"}, {"sha": "91ced2a2d90e21e4f83fdf141a7e552a2aa5991b", "filename": "compiler/rustc_interface/src/interface.rs", "status": "modified", "additions": 12, "deletions": 6, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_interface%2Fsrc%2Finterface.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Finterface.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -169,11 +169,12 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                     Ok(meta_item) if parser.token == token::Eof => {\n                         if let Some(args) = meta_item.meta_item_list() {\n                             if meta_item.has_name(sym::names) {\n-                                cfg.names_checked = true;\n+                                let names_valid =\n+                                    cfg.names_valid.get_or_insert_with(|| FxHashSet::default());\n                                 for arg in args {\n                                     if arg.is_word() && arg.ident().is_some() {\n                                         let ident = arg.ident().expect(\"multi-segment cfg key\");\n-                                        cfg.names_valid.insert(ident.name.to_string());\n+                                        names_valid.insert(ident.name.to_string());\n                                     } else {\n                                         error!(\"`names()` arguments must be simple identifers\");\n                                     }\n@@ -183,13 +184,16 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n                                 if let Some((name, values)) = args.split_first() {\n                                     if name.is_word() && name.ident().is_some() {\n                                         let ident = name.ident().expect(\"multi-segment cfg key\");\n-                                        cfg.values_checked.insert(ident.to_string());\n+                                        let ident_values = cfg\n+                                            .values_valid\n+                                            .entry(ident.name.to_string())\n+                                            .or_insert_with(|| FxHashSet::default());\n+\n                                         for val in values {\n                                             if let Some(LitKind::Str(s, _)) =\n                                                 val.literal().map(|lit| &lit.kind)\n                                             {\n-                                                cfg.values_valid\n-                                                    .insert((ident.to_string(), s.to_string()));\n+                                                ident_values.insert(s.to_string());\n                                             } else {\n                                                 error!(\n                                                     \"`values()` arguments must be string literals\"\n@@ -219,7 +223,9 @@ pub fn parse_check_cfg(specs: Vec<String>) -> CheckCfg {\n             );\n         }\n \n-        cfg.names_valid.extend(cfg.values_checked.iter().cloned());\n+        if let Some(names_valid) = &mut cfg.names_valid {\n+            names_valid.extend(cfg.values_valid.keys().cloned());\n+        }\n         cfg\n     })\n }"}, {"sha": "0c9defc4ceac41594cbe23a907840f1b262eba5c", "filename": "compiler/rustc_lint/src/context.rs", "status": "modified", "additions": 34, "deletions": 1, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Fcontext.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -765,7 +765,40 @@ pub trait LintContext: Sized {\n                 BuiltinLintDiagnostics::NamedAsmLabel(help) => {\n                     db.help(&help);\n                     db.note(\"see the asm section of Rust By Example <https://doc.rust-lang.org/nightly/rust-by-example/unsafe/asm.html#labels> for more information\");\n-                }\n+                },\n+                BuiltinLintDiagnostics::UnexpectedCfg(span, name, value) => {\n+                    let possibilities: Vec<Symbol> = if value.is_some() {\n+                        let Some(values) = &sess.parse_sess.check_config.values_valid.get(&name) else {\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a value whose name is not in values\");\n+                        };\n+                        values.iter().map(|&s| s).collect()\n+                    } else {\n+                        let Some(names_valid) = &sess.parse_sess.check_config.names_valid else {\n+                            bug!(\"it shouldn't be possible to have a diagnostic on a name if name checking is not enabled\");\n+                        };\n+                        names_valid.iter().map(|s| *s).collect()\n+                    };\n+\n+                    // Show the full list if all possible values for a given name, but don't do it\n+                    // for names as the possibilities could be very long\n+                    if value.is_some() {\n+                        if !possibilities.is_empty() {\n+                            let mut possibilities = possibilities.iter().map(Symbol::as_str).collect::<Vec<_>>();\n+                            possibilities.sort();\n+\n+                            let possibilities = possibilities.join(\", \");\n+                            db.note(&format!(\"expected values for `{name}` are: {possibilities}\"));\n+                        } else {\n+                            db.note(&format!(\"no expected value for `{name}`\"));\n+                        }\n+                    }\n+\n+                    // Suggest the most probable if we found one\n+                    if let Some(best_match) = find_best_match_for_name(&possibilities, value.unwrap_or(name), None) {\n+                        let punctuation = if value.is_some() { \"\\\"\" } else { \"\" };\n+                        db.span_suggestion(span, \"did you mean\", format!(\"{punctuation}{best_match}{punctuation}\"), Applicability::MaybeIncorrect);\n+                    }\n+                },\n             }\n             // Rewrap `db`, and pass control to the user.\n             decorate(LintDiagnosticBuilder::new(db));"}, {"sha": "7182022d2529817d5f7bf9163e3d21289adccb6a", "filename": "compiler/rustc_lint/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint%2Fsrc%2Flib.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -31,6 +31,7 @@\n #![feature(box_patterns)]\n #![feature(crate_visibility_modifier)]\n #![feature(if_let_guard)]\n+#![feature(iter_intersperse)]\n #![feature(iter_order_by)]\n #![feature(let_else)]\n #![feature(never_type)]"}, {"sha": "e9c62fc40065158ee61d38e29eec72663a17a6f5", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -310,6 +310,7 @@ pub enum BuiltinLintDiagnostics {\n     BreakWithLabelAndLoop(Span),\n     NamedAsmLabel(String),\n     UnicodeTextFlow(Span, String),\n+    UnexpectedCfg(Span, Symbol, Option<Symbol>),\n }\n \n /// Lints that are buffered up early on in the `Session` before the"}, {"sha": "f9b75690e375fd253c97632dfe61ebb302486813", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 25, "deletions": 23, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -8,7 +8,7 @@ use crate::search_paths::SearchPath;\n use crate::utils::{CanonicalizedPath, NativeLib, NativeLibKind};\n use crate::{early_error, early_warn, Session};\n \n-use rustc_data_structures::fx::FxHashSet;\n+use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_data_structures::impl_stable_hash_via_hash;\n \n use rustc_target::abi::{Align, TargetDataLayout};\n@@ -1023,34 +1023,30 @@ pub fn to_crate_config(cfg: FxHashSet<(String, Option<String>)>) -> CrateConfig\n \n /// The parsed `--check-cfg` options\n pub struct CheckCfg<T = String> {\n-    /// Set if `names()` checking is enabled\n-    pub names_checked: bool,\n-    /// The union of all `names()`\n-    pub names_valid: FxHashSet<T>,\n-    /// The set of names for which `values()` was used\n-    pub values_checked: FxHashSet<T>,\n-    /// The set of all (name, value) pairs passed in `values()`\n-    pub values_valid: FxHashSet<(T, T)>,\n+    /// The set of all `names()`, if None no name checking is performed\n+    pub names_valid: Option<FxHashSet<T>>,\n+    /// The set of all `values()`\n+    pub values_valid: FxHashMap<T, FxHashSet<T>>,\n }\n \n impl<T> Default for CheckCfg<T> {\n     fn default() -> Self {\n-        CheckCfg {\n-            names_checked: false,\n-            names_valid: FxHashSet::default(),\n-            values_checked: FxHashSet::default(),\n-            values_valid: FxHashSet::default(),\n-        }\n+        CheckCfg { names_valid: Default::default(), values_valid: Default::default() }\n     }\n }\n \n impl<T> CheckCfg<T> {\n     fn map_data<O: Eq + Hash>(&self, f: impl Fn(&T) -> O) -> CheckCfg<O> {\n         CheckCfg {\n-            names_checked: self.names_checked,\n-            names_valid: self.names_valid.iter().map(|a| f(a)).collect(),\n-            values_checked: self.values_checked.iter().map(|a| f(a)).collect(),\n-            values_valid: self.values_valid.iter().map(|(a, b)| (f(a), f(b))).collect(),\n+            names_valid: self\n+                .names_valid\n+                .as_ref()\n+                .map(|names_valid| names_valid.iter().map(|a| f(a)).collect()),\n+            values_valid: self\n+                .values_valid\n+                .iter()\n+                .map(|(a, b)| (f(a), b.iter().map(|b| f(b)).collect()))\n+                .collect(),\n         }\n     }\n }\n@@ -1090,17 +1086,23 @@ impl CrateCheckConfig {\n             sym::doctest,\n             sym::feature,\n         ];\n-        for &name in WELL_KNOWN_NAMES {\n-            self.names_valid.insert(name);\n+        if let Some(names_valid) = &mut self.names_valid {\n+            for &name in WELL_KNOWN_NAMES {\n+                names_valid.insert(name);\n+            }\n         }\n     }\n \n     /// Fills a `CrateCheckConfig` with configuration names and values that are actually active.\n     pub fn fill_actual(&mut self, cfg: &CrateConfig) {\n         for &(k, v) in cfg {\n-            self.names_valid.insert(k);\n+            if let Some(names_valid) = &mut self.names_valid {\n+                names_valid.insert(k);\n+            }\n             if let Some(v) = v {\n-                self.values_valid.insert((k, v));\n+                self.values_valid.entry(k).and_modify(|values| {\n+                    values.insert(v);\n+                });\n             }\n         }\n     }"}, {"sha": "d7345ad0c33f2ad0a13d52df6662dd1dc2f3ea8e", "filename": "src/doc/unstable-book/src/compiler-flags/check-cfg.md", "status": "added", "additions": 221, "deletions": 0, "changes": 221, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Fcompiler-flags%2Fcheck-cfg.md?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,221 @@\n+# `check-cfg`\n+\n+The tracking issue for this feature is: [#82450](https://github.com/rust-lang/rust/issues/82450).\n+\n+------------------------\n+\n+This feature allows you to enable complete or partial checking of configuration.\n+\n+`rustc` accepts the `--check-cfg` option, which specifies whether to check conditions and how to\n+check them. The `--check-cfg` option takes a value, called the _check cfg specification_. The\n+check cfg specification is parsed using the Rust metadata syntax, just as the `--cfg` option is.\n+\n+`--check-cfg` option can take one of two forms:\n+\n+1. `--check-cfg names(...)` enables checking condition names.\n+2. `--check-cfg values(...)` enables checking the values within list-valued conditions.\n+\n+These two options are independent. `names` checks only the namespace of condition names\n+while `values` checks only the namespace of the values of list-valued conditions.\n+\n+## The `names(...)` form\n+\n+The `names(...)` form enables checking the names. This form uses a named list:\n+\n+```bash\n+rustc --check-cfg 'names(name1, name2, ... nameN)'\n+```\n+\n+where each `name` is a bare identifier (has no quotes). The order of the names is not significant.\n+\n+If `--check-cfg names(...)` is specified at least once, then `rustc` will check all references to\n+condition names. `rustc` will check every `#[cfg]` attribute, `#[cfg_attr]` attribute, `cfg` clause\n+inside `#[link]` attribute and `cfg!(...)` call against the provided list of expected condition\n+names. If a name is not present in this list, then `rustc` will report an `unexpected_cfgs` lint\n+diagnostic. The default diagnostic level for this lint is `Warn`.\n+\n+If `--check-cfg names(...)` is not specified, then `rustc` will not check references to condition\n+names.\n+\n+`--check-cfg names(...)` may be specified more than once. The result is that the list of valid\n+condition names is merged across all options. It is legal for a condition name to be specified\n+more than once; redundantly specifying a condition name has no effect.\n+\n+To enable checking condition names with an empty set of valid condition names, use the following\n+form. The parentheses are required.\n+\n+```bash\n+rustc --check-cfg 'names()'\n+```\n+\n+Note that `--check-cfg 'names()'` is _not_ equivalent to omitting the option entirely.\n+The first form enables checking condition names, while specifying that there are no valid\n+condition names (outside of the set of well-known names defined by `rustc`). Omitting the\n+`--check-cfg 'names(...)'` option does not enable checking condition names.\n+\n+Conditions that are enabled are implicitly valid; it is unnecessary (but legal) to specify a\n+condition name as both enabled and valid. For example, the following invocations are equivalent:\n+\n+```bash\n+# condition names will be checked, and 'has_time_travel' is valid\n+rustc --cfg 'has_time_travel' --check-cfg 'names()'\n+\n+# condition names will be checked, and 'has_time_travel' is valid\n+rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n+```\n+\n+In contrast, the following two invocations are _not_ equivalent:\n+\n+```bash\n+# condition names will not be checked (because there is no --check-cfg names(...))\n+rustc --cfg 'has_time_travel'\n+\n+# condition names will be checked, and 'has_time_travel' is both valid and enabled.\n+rustc --cfg 'has_time_travel' --check-cfg 'names(has_time_travel)'\n+```\n+\n+## The `values(...)` form\n+\n+The `values(...)` form enables checking the values within list-valued conditions. It has this\n+form:\n+\n+```bash\n+rustc --check-cfg `values(name, \"value1\", \"value2\", ... \"valueN\")'\n+```\n+\n+where `name` is a bare identifier (has no quotes) and each `\"value\"` term is a quoted literal\n+string. `name` specifies the name of the condition, such as `feature` or `target_os`.\n+\n+When the `values(...)` option is specified, `rustc` will check every `#[cfg(name = \"value\")]`\n+attribute, `#[cfg_attr(name = \"value\")]` attribute, `#[link(name = \"a\", cfg(name = \"value\"))]`\n+and `cfg!(name = \"value\")` call. It will check that the `\"value\"` specified is present in the\n+list of expected values. If `\"value\"` is not in it, then `rustc` will report an `unexpected_cfgs`\n+lint diagnostic. The default diagnostic level for this lint is `Warn`.\n+\n+The form `values()` is an error, because it does not specify a condition name.\n+\n+To enable checking of values, but to provide an empty set of valid values, use this form:\n+\n+```bash\n+rustc --check-cfg `values(name)`\n+```\n+\n+The `--check-cfg values(...)` option can be repeated, both for the same condition name and for\n+different names. If it is repeated for the same condition name, then the sets of values for that\n+condition are merged together.\n+\n+## Examples\n+\n+Consider this command line:\n+\n+```bash\n+rustc --check-cfg 'names(feature)' \\\n+      --check-cfg 'values(feature,\"lion\",\"zebra\")' \\\n+      --cfg 'feature=\"lion\"' -Z unstable-options \\\n+      example.rs\n+```\n+\n+This command line indicates that this crate has two features: `lion` and `zebra`. The `lion`\n+feature is enabled, while the `zebra` feature is disabled. Consider compiling this code:\n+\n+```rust\n+// This is expected, and tame_lion() will be compiled\n+#[cfg(feature = \"lion\")]\n+fn tame_lion(lion: Lion) {}\n+\n+// This is expected, and ride_zebra() will NOT be compiled.\n+#[cfg(feature = \"zebra\")]\n+fn ride_zebra(zebra: Zebra) {}\n+\n+// This is UNEXPECTED, and will cause a compiler warning (by default).\n+#[cfg(feature = \"platypus\")]\n+fn poke_platypus() {}\n+\n+// This is UNEXPECTED, because 'feechure' is not a known condition name,\n+// and will cause a compiler warning (by default).\n+#[cfg(feechure = \"lion\")]\n+fn tame_lion() {}\n+```\n+\n+> Note: The `--check-cfg names(feature)` option is necessary only to enable checking the condition\n+> name, as in the last example. `feature` is a well-known (always-expected) condition name, and so\n+> it is not necessary to specify it in a `--check-cfg 'names(...)'` option. That option can be\n+> shortened to > `--check-cfg names()` in order to enable checking well-known condition names.\n+\n+### Example: Checking condition names, but not values\n+\n+```bash\n+# This turns on checking for condition names, but not values, such as 'feature' values.\n+rustc --check-cfg 'names(is_embedded, has_feathers)' \\\n+      --cfg has_feathers --cfg 'feature = \"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is expected as \"is_embedded\" was provided in names()\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // This is expected as \"has_feathers\" was provided in names()\n+fn do_features() {}\n+\n+#[cfg(has_mumble_frotz)]    // This is UNEXPECTED because names checking is enable and\n+                            // \"has_mumble_frotz\" was not provided in names()\n+fn do_mumble_frotz() {}\n+\n+#[cfg(feature = \"lasers\")]  // This doesn't raise a warning, because values checking for \"feature\"\n+                            // was never used\n+fn shoot_lasers() {}\n+```\n+\n+### Example: Checking feature values, but not condition names\n+\n+```bash\n+# This turns on checking for feature values, but not for condition names.\n+rustc --check-cfg 'values(feature, \"zapping\", \"lasers\")' \\\n+      --cfg 'feature=\"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is doesn't raise a warning, because names checking was not\n+                            // enable (ie not names())\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // Same as above, --check-cfg names(...) was never used so no name\n+                            // checking is performed\n+fn do_features() {}\n+\n+\n+#[cfg(feature = \"lasers\")]  // This is expected, \"lasers\" is in the values(feature) list\n+fn shoot_lasers() {}\n+\n+#[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in the\n+                            // --check-cfg values(feature) list\n+fn write_shakespeare() {}\n+```\n+\n+### Example: Checking both condition names and feature values\n+\n+```bash\n+# This turns on checking for feature values and for condition names.\n+rustc --check-cfg 'names(is_embedded, has_feathers)' \\\n+      --check-cfg 'values(feature, \"zapping\", \"lasers\")' \\\n+      --cfg has_feathers --cfg 'feature=\"zapping\"' -Z unstable-options\n+```\n+\n+```rust\n+#[cfg(is_embedded)]         // This is expected because \"is_embedded\" was provided in names()\n+fn do_embedded() {}\n+\n+#[cfg(has_feathers)]        // This is expected because \"has_feathers\" was provided in names()\n+fn do_features() {}\n+\n+#[cfg(has_mumble_frotz)]    // This is UNEXPECTED, because has_mumble_frotz is not in the\n+                            // --check-cfg names(...) list\n+fn do_mumble_frotz() {}\n+\n+#[cfg(feature = \"lasers\")]  // This is expected, \"lasers\" is in the values(feature) list\n+fn shoot_lasers() {}\n+\n+#[cfg(feature = \"monkeys\")] // This is UNEXPECTED, because \"monkeys\" is not in\n+                            // the values(feature) list\n+fn write_shakespear() {}\n+```"}, {"sha": "2bd1821c9422b79ae60e1e631dfce6329f31b0b0", "filename": "src/test/ui/check-cfg/invalid-cfg-name.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-name.stderr?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -2,7 +2,7 @@ warning: unexpected `cfg` condition name\n   --> $DIR/invalid-cfg-name.rs:7:7\n    |\n LL | #[cfg(widnows)]\n-   |       ^^^^^^^\n+   |       ^^^^^^^ help: did you mean: `windows`\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n "}, {"sha": "bc2c053fed65a7efe775289b476008995feea887", "filename": "src/test/ui/check-cfg/invalid-cfg-value.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Finvalid-cfg-value.stderr?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -5,6 +5,7 @@ LL | #[cfg(feature = \"sedre\")]\n    |       ^^^^^^^^^^^^^^^^^\n    |\n    = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: expected values for `feature` are: full, rand, serde\n \n warning: 1 warning emitted\n "}, {"sha": "26c735c4a10bd72df1797a7a73f79a1ec500cfc2", "filename": "src/test/ui/check-cfg/mix.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,50 @@\n+// This test checks the combination of well known names, their activation via names(), the usage of\n+// partial values() with a --cfg and test that we also correctly lint on the `cfg!` macro and\n+// `cfg_attr` attribute.\n+//\n+// check-pass\n+// compile-flags: --check-cfg=names() --check-cfg=values(feature,\"foo\") --cfg feature=\"bar\" -Z unstable-options\n+\n+#[cfg(windows)]\n+fn do_windows_stuff() {}\n+\n+#[cfg(widnows)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn do_windows_stuff() {}\n+\n+#[cfg(feature = \"foo\")]\n+fn use_foo() {}\n+\n+#[cfg(feature = \"bar\")]\n+fn use_bar() {}\n+\n+#[cfg(feature = \"zebra\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn use_zebra() {}\n+\n+#[cfg_attr(uu, test)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn do_test() {}\n+\n+#[cfg_attr(feature = \"foo\", no_mangle)]\n+fn do_test_foo() {}\n+\n+fn test_cfg_macro() {\n+    cfg!(windows);\n+    cfg!(widnows);\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(feature = \"foo\");\n+    cfg!(feature = \"bar\");\n+    cfg!(feature = \"zebra\");\n+    //~^ WARNING unexpected `cfg` condition value\n+    cfg!(xxx = \"foo\");\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(xxx);\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(any(xxx, windows));\n+    //~^ WARNING unexpected `cfg` condition name\n+    cfg!(any(feature = \"bad\", windows));\n+    //~^ WARNING unexpected `cfg` condition value\n+}\n+\n+fn main() {}"}, {"sha": "b273be774224d24b212b9384393159f91adabee6", "filename": "src/test/ui/check-cfg/mix.stderr", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fmix.stderr?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,66 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:11:7\n+   |\n+LL | #[cfg(widnows)]\n+   |       ^^^^^^^ help: did you mean: `windows`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:21:7\n+   |\n+LL | #[cfg(feature = \"zebra\")]\n+   |       ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:25:12\n+   |\n+LL | #[cfg_attr(uu, test)]\n+   |            ^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:34:10\n+   |\n+LL |     cfg!(widnows);\n+   |          ^^^^^^^ help: did you mean: `windows`\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:38:10\n+   |\n+LL |     cfg!(feature = \"zebra\");\n+   |          ^^^^^^^^^^^^^^^^^\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:40:10\n+   |\n+LL |     cfg!(xxx = \"foo\");\n+   |          ^^^^^^^^^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:42:10\n+   |\n+LL |     cfg!(xxx);\n+   |          ^^^\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/mix.rs:44:14\n+   |\n+LL |     cfg!(any(xxx, windows));\n+   |              ^^^\n+\n+warning: unexpected `cfg` condition value\n+  --> $DIR/mix.rs:46:14\n+   |\n+LL |     cfg!(any(feature = \"bad\", windows));\n+   |              ^^^^^^^^^^-----\n+   |                        |\n+   |                        help: did you mean: `\"bar\"`\n+   |\n+   = note: expected values for `feature` are: bar, foo\n+\n+warning: 9 warnings emitted\n+"}, {"sha": "2440757e52da994e1c516c3b434b8c212310105a", "filename": "src/test/ui/check-cfg/no-values.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,10 @@\n+// Check that we detect unexpected value when none are allowed\n+//\n+// check-pass\n+// compile-flags: --check-cfg=values(feature) -Z unstable-options\n+\n+#[cfg(feature = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition value\n+fn do_foo() {}\n+\n+fn main() {}"}, {"sha": "ea1c9107d4c2ffb1137e5c67411c7c4ce90f3334", "filename": "src/test/ui/check-cfg/no-values.stderr", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fno-values.stderr?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,11 @@\n+warning: unexpected `cfg` condition value\n+  --> $DIR/no-values.rs:6:7\n+   |\n+LL | #[cfg(feature = \"foo\")]\n+   |       ^^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+   = note: no expected value for `feature`\n+\n+warning: 1 warning emitted\n+"}, {"sha": "a66568a2ffdc98efe62dc3830e52eab824e49fe2", "filename": "src/test/ui/check-cfg/well-known-names.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.rs?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,27 @@\n+// This test checks that we lint on non well known names and that we don't lint on well known names\n+//\n+// check-pass\n+// compile-flags: --check-cfg=names() -Z unstable-options\n+\n+#[cfg(target_oz = \"linux\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn target_os_misspell() {}\n+\n+#[cfg(target_os = \"linux\")]\n+fn target_os() {}\n+\n+#[cfg(features = \"foo\")]\n+//~^ WARNING unexpected `cfg` condition name\n+fn feature_misspell() {}\n+\n+#[cfg(feature = \"foo\")]\n+fn feature() {}\n+\n+#[cfg(uniw)]\n+//~^ WARNING unexpected `cfg` condition name\n+fn unix_misspell() {}\n+\n+#[cfg(unix)]\n+fn unix() {}\n+\n+fn main() {}"}, {"sha": "bdbe4d29d30feb07d00579bb4149581fdcd70f84", "filename": "src/test/ui/check-cfg/well-known-names.stderr", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/000e38d9cb4140048b14600938e73e9cdafb7341/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fcheck-cfg%2Fwell-known-names.stderr?ref=000e38d9cb4140048b14600938e73e9cdafb7341", "patch": "@@ -0,0 +1,26 @@\n+warning: unexpected `cfg` condition name\n+  --> $DIR/well-known-names.rs:6:7\n+   |\n+LL | #[cfg(target_oz = \"linux\")]\n+   |       ---------^^^^^^^^^^\n+   |       |\n+   |       help: did you mean: `target_os`\n+   |\n+   = note: `#[warn(unexpected_cfgs)]` on by default\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/well-known-names.rs:13:7\n+   |\n+LL | #[cfg(features = \"foo\")]\n+   |       --------^^^^^^^^\n+   |       |\n+   |       help: did you mean: `feature`\n+\n+warning: unexpected `cfg` condition name\n+  --> $DIR/well-known-names.rs:20:7\n+   |\n+LL | #[cfg(uniw)]\n+   |       ^^^^ help: did you mean: `unix`\n+\n+warning: 3 warnings emitted\n+"}]}