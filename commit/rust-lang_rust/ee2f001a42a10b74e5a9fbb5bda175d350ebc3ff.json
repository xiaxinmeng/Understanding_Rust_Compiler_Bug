{"sha": "ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVlMmYwMDFhNDJhMTBiNzRlNWE5ZmJiNWJkYTE3NWQzNTBlYmMzZmY=", "commit": {"author": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-26T18:22:41Z"}, "committer": {"name": "Flavio Percoco", "email": "flaper87@gmail.com", "date": "2014-02-27T17:09:33Z"}, "message": "Forbid certain types for static items\n\n- For each *mutable* static item, check that the **type**:\n    - cannot own any value whose type has a dtor\n    - cannot own any values whose type is an owned pointer\n\n- For each *immutable* static item, check that the **value**:\n    - does not contain any ~ or box expressions\n        (including ~[1, 2, 3] sort of things)\n    - does not contain a struct literal or call to an enum\n        variant / struct constructor where\n        - the type of the struct/enum has a dtor", "tree": {"sha": "8c2da0fb31307de78f31ae712c32cb723c41e090", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c2da0fb31307de78f31ae712c32cb723c41e090"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "html_url": "https://github.com/rust-lang/rust/commit/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/comments", "author": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "committer": {"login": "flaper87", "id": 13816, "node_id": "MDQ6VXNlcjEzODE2", "avatar_url": "https://avatars.githubusercontent.com/u/13816?v=4", "gravatar_id": "", "url": "https://api.github.com/users/flaper87", "html_url": "https://github.com/flaper87", "followers_url": "https://api.github.com/users/flaper87/followers", "following_url": "https://api.github.com/users/flaper87/following{/other_user}", "gists_url": "https://api.github.com/users/flaper87/gists{/gist_id}", "starred_url": "https://api.github.com/users/flaper87/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/flaper87/subscriptions", "organizations_url": "https://api.github.com/users/flaper87/orgs", "repos_url": "https://api.github.com/users/flaper87/repos", "events_url": "https://api.github.com/users/flaper87/events{/privacy}", "received_events_url": "https://api.github.com/users/flaper87/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8784d2fa957ff7f6c9b317c53d1bc6a2b39b840a", "url": "https://api.github.com/repos/rust-lang/rust/commits/8784d2fa957ff7f6c9b317c53d1bc6a2b39b840a", "html_url": "https://github.com/rust-lang/rust/commit/8784d2fa957ff7f6c9b317c53d1bc6a2b39b840a"}], "stats": {"total": 280, "additions": 279, "deletions": 1}, "files": [{"sha": "4c552acc936922eed6535bd364b9aff18c2c5a47", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -301,6 +301,9 @@ pub fn phase_3_run_analysis_passes(sess: Session,\n     // passes are timed inside typeck\n     let (method_map, vtable_map) = typeck::check_crate(ty_cx, trait_map, krate);\n \n+    time(time_passes, \"check static items\", (), |_|\n+         middle::check_static::check_crate(ty_cx, krate));\n+\n     // These next two const passes can probably be merged\n     time(time_passes, \"const marking\", (), |_|\n          middle::const_eval::process_crate(krate, ty_cx));"}, {"sha": "97718849e631f259351af09ea17340470ebf7c3b", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -69,6 +69,7 @@ pub mod middle {\n     pub mod check_loop;\n     pub mod check_match;\n     pub mod check_const;\n+    pub mod check_static;\n     pub mod lint;\n     pub mod borrowck;\n     pub mod dataflow;"}, {"sha": "86078c4023a137f4a8ffdb98cc98db96460ab2fa", "filename": "src/librustc/middle/check_static.rs", "status": "added", "additions": 138, "deletions": 0, "changes": 138, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_static.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -0,0 +1,138 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Verifies that the types and values of static items\n+// are safe. The rules enforced by this module are:\n+//\n+// - For each *mutable* static item, it checks that its **type**:\n+//     - doesn't have a destructor\n+//     - doesn't own an owned pointer\n+//\n+// - For each *immutable* static item, it checks that its **value**:\n+//       - doesn't own owned, managed pointers\n+//       - doesn't contain a struct literal or a call to an enum variant / struct constructor where\n+//           - the type of the struct/enum is not freeze\n+//           - the type of the struct/enum has a dtor\n+\n+use middle::ty;\n+\n+use syntax::ast;\n+use syntax::codemap::Span;\n+use syntax::visit::Visitor;\n+use syntax::visit;\n+use syntax::print::pprust;\n+\n+\n+fn safe_type_for_static_mut(cx: ty::ctxt, e: &ast::Expr) -> Option<~str> {\n+    let node_ty = ty::node_id_to_type(cx, e.id);\n+    let tcontents = ty::type_contents(cx, node_ty);\n+    debug!(\"safe_type_for_static_mut(dtor={}, managed={}, owned={})\",\n+           tcontents.has_dtor(), tcontents.owns_managed(), tcontents.owns_owned())\n+\n+    let suffix = if tcontents.has_dtor() {\n+        \"destructors\"\n+    } else if tcontents.owns_managed() {\n+        \"managed pointers\"\n+    } else if tcontents.owns_owned() {\n+        \"owned pointers\"\n+    } else {\n+        return None;\n+    };\n+\n+    Some(format!(\"mutable static items are not allowed to have {}\", suffix))\n+}\n+\n+struct CheckStaticVisitor {\n+    tcx: ty::ctxt,\n+}\n+\n+pub fn check_crate(tcx: ty::ctxt, krate: &ast::Crate) {\n+    visit::walk_crate(&mut CheckStaticVisitor { tcx: tcx }, krate, false)\n+}\n+\n+impl CheckStaticVisitor {\n+\n+    fn report_error(&self, span: Span, result: Option<~str>) -> bool {\n+        match result {\n+            None => { false }\n+            Some(msg) => {\n+                self.tcx.sess.span_err(span, msg);\n+                true\n+            }\n+        }\n+    }\n+}\n+\n+impl Visitor<bool> for CheckStaticVisitor {\n+\n+    fn visit_item(&mut self, i: &ast::Item, _is_const: bool) {\n+        debug!(\"visit_item(item={})\", pprust::item_to_str(i));\n+        match i.node {\n+            ast::ItemStatic(_, mutability, expr) => {\n+                match mutability {\n+                    ast::MutImmutable => {\n+                        self.visit_expr(expr, true);\n+                    }\n+                    ast::MutMutable => {\n+                        self.report_error(expr.span, safe_type_for_static_mut(self.tcx, expr));\n+                    }\n+                }\n+            }\n+            _ => { visit::walk_item(self, i, false) }\n+        }\n+    }\n+\n+    /// This method is used to enforce the constraints on\n+    /// immutable static items. It walks through the *value*\n+    /// of the item walking down the expression and evaluating\n+    /// every nested expression. if the expression is not part\n+    /// of a static item, this method does nothing but walking\n+    /// down through it.\n+    fn visit_expr(&mut self, e: &ast::Expr, is_const: bool) {\n+        debug!(\"visit_expr(expr={})\", pprust::expr_to_str(e));\n+\n+        if !is_const {\n+            return visit::walk_expr(self, e, is_const);\n+        }\n+\n+        match e.node {\n+            ast::ExprField(..) | ast::ExprVec(..) |\n+            ast::ExprBlock(..) | ast::ExprTup(..) |\n+            ast::ExprVstore(_, ast::ExprVstoreSlice) => {\n+                visit::walk_expr(self, e, is_const);\n+            }\n+            ast::ExprUnary(ast::UnBox, _) => {\n+                self.tcx.sess.span_err(e.span,\n+                                   \"static items are not allowed to have managed pointers\");\n+            }\n+            ast::ExprBox(..) |\n+            ast::ExprUnary(ast::UnUniq, _) |\n+            ast::ExprVstore(_, ast::ExprVstoreUniq) => {\n+                self.tcx.sess.span_err(e.span,\n+                                   \"static items are not allowed to have owned pointers\");\n+            }\n+            _ => {\n+                let node_ty = ty::node_id_to_type(self.tcx, e.id);\n+                match ty::get(node_ty).sty {\n+                    ty::ty_struct(did, _) |\n+                    ty::ty_enum(did, _) => {\n+                        if ty::has_dtor(self.tcx, did) {\n+                            self.report_error(e.span,\n+                                     Some(~\"static items are not allowed to have destructors\"));\n+                            return;\n+                        }\n+                    }\n+                    _ => {}\n+                }\n+                visit::walk_expr(self, e, is_const);\n+            }\n+        }\n+    }\n+}"}, {"sha": "8ea7f75d2b44e9d0c38d5ff12698871901a6be8d", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -1950,6 +1950,10 @@ impl TypeContents {\n         self.intersects(TC::OwnsManaged)\n     }\n \n+    pub fn owns_owned(&self) -> bool {\n+        self.intersects(TC::OwnsOwned)\n+    }\n+\n     pub fn is_freezable(&self, _: ctxt) -> bool {\n         !self.intersects(TC::Nonfreezable)\n     }\n@@ -2042,6 +2046,10 @@ impl fmt::Show for TypeContents {\n     }\n }\n \n+pub fn type_has_dtor(cx: ctxt, t: ty::t) -> bool {\n+    type_contents(cx, t).has_dtor()\n+}\n+\n pub fn type_is_static(cx: ctxt, t: ty::t) -> bool {\n     type_contents(cx, t).is_static(cx)\n }"}, {"sha": "1248f56d4b88fc76fb4d4842e645abadaba63f02", "filename": "src/test/compile-fail/check-static-values-constraints.rs", "status": "added", "additions": 128, "deletions": 0, "changes": 128, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcheck-static-values-constraints.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -0,0 +1,128 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+#[feature(managed_boxes)];\n+\n+// Verifies all possible restrictions for static items values.\n+\n+struct WithDtor;\n+\n+impl Drop for WithDtor {\n+    fn drop(&mut self) {}\n+}\n+\n+// This enum will be used to test the following rules:\n+// 1. Variants are safe for static\n+// 2. Expr calls are allowed as long as they arguments are safe\n+// 3. Expr calls with unsafe arguments for static items are rejected\n+enum SafeEnum {\n+    Variant1,\n+    Variant2(int),\n+    Variant3(WithDtor),\n+    Variant4(~str)\n+}\n+\n+// These should be ok\n+static STATIC1: SafeEnum = Variant1;\n+static STATIC2: SafeEnum = Variant2(0);\n+\n+// This one should fail\n+static STATIC3: SafeEnum = Variant3(WithDtor);\n+//~^ ERROR static items are not allowed to have destructors\n+\n+\n+// This enum will be used to test that variants\n+// are considered unsafe if their enum type implements\n+// a destructor.\n+enum UnsafeEnum {\n+    Variant5,\n+    Variant6(int)\n+}\n+\n+impl Drop for UnsafeEnum {\n+    fn drop(&mut self) {}\n+}\n+\n+\n+static STATIC4: UnsafeEnum = Variant5;\n+//~^ ERROR static items are not allowed to have destructors\n+static STATIC5: UnsafeEnum = Variant6(0);\n+//~^ ERROR static items are not allowed to have destructors\n+\n+\n+struct SafeStruct {\n+    field1: SafeEnum,\n+    field2: SafeEnum,\n+}\n+\n+\n+// Struct fields are safe, hence this static should be safe\n+static STATIC6: SafeStruct = SafeStruct{field1: Variant1, field2: Variant2(0)};\n+\n+// field2 has an unsafe value, hence this should fail\n+static STATIC7: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n+//~^ ERROR static items are not allowed to have destructors\n+\n+// Test variadic constructor for structs. The base struct should be examined\n+// as well as every field persent in the constructor.\n+// This example shouldn't fail because all the fields are safe.\n+static STATIC8: SafeStruct = SafeStruct{field1: Variant1,\n+                                        ..SafeStruct{field1: Variant1, field2: Variant1}};\n+\n+// This example should fail because field1 in the base struct is not safe\n+static STATIC9: SafeStruct = SafeStruct{field1: Variant1,\n+                                        ..SafeStruct{field1: Variant3(WithDtor), field2: Variant1}};\n+//~^ ERROR static items are not allowed to have destructors\n+\n+struct UnsafeStruct;\n+\n+impl Drop for UnsafeStruct {\n+    fn drop(&mut self) {}\n+}\n+\n+// Types with destructors are not allowed for statics\n+static STATIC10: UnsafeStruct = UnsafeStruct;\n+//~^ ERROR static items are not allowed to have destructor\n+\n+static STATIC11: ~str = ~\"Owned pointers are not allowed either\";\n+//~^ ERROR static items are not allowed to have owned pointers\n+\n+// The following examples test that mutable structs are just forbidden\n+// to have types with destructors\n+// These should fail\n+static mut STATIC12: UnsafeStruct = UnsafeStruct;\n+//~^ ERROR mutable static items are not allowed to have destructors\n+\n+static mut STATIC13: SafeStruct = SafeStruct{field1: Variant1, field2: Variant3(WithDtor)};\n+//~^ ERROR mutable static items are not allowed to have destructors\n+\n+static mut STATIC14: SafeStruct = SafeStruct{field1: Variant1, field2: Variant4(~\"str\")};\n+//~^ ERROR mutable static items are not allowed to have destructors\n+\n+static STATIC15: &'static [~str] = &'static [~\"str\", ~\"str\"];\n+//~^ ERROR static items are not allowed to have owned pointers\n+//~^^ ERROR static items are not allowed to have owned pointers\n+\n+static STATIC16: (~str, ~str) = (~\"str\", ~\"str\");\n+//~^ ERROR static items are not allowed to have owned pointers\n+//~^^ ERROR static items are not allowed to have owned pointers\n+\n+static mut STATIC17: SafeEnum = Variant1;\n+//~^ ERROR mutable static items are not allowed to have destructors\n+\n+static STATIC18: @SafeStruct = @SafeStruct{field1: Variant1, field2: Variant2(0)};\n+//~^ ERROR static items are not allowed to have managed pointers\n+\n+static STATIC19: ~int = box 3;\n+//~^ ERROR static items are not allowed to have owned pointers\n+\n+pub fn main() {\n+    let y = { static x: ~int = ~3; x };\n+    //~^ ERROR static items are not allowed to have owned pointers\n+}"}, {"sha": "01fb2ea9427370af28d396471b98094259758e4e", "filename": "src/test/compile-fail/issue-10487.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-10487.rs?ref=ee2f001a42a10b74e5a9fbb5bda175d350ebc3ff", "patch": "@@ -10,6 +10,6 @@\n \n #[feature(managed_boxes)];\n \n-static x: ~[int] = ~[123, 456]; //~ ERROR: cannot allocate vectors in constant expressions\n+static x: ~[int] = ~[123, 456]; //~ ERROR: static items are not allowed to have owned pointers\n \n fn main() {}"}]}