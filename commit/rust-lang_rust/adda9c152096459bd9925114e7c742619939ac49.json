{"sha": "adda9c152096459bd9925114e7c742619939ac49", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFkZGE5YzE1MjA5NjQ1OWJkOTkyNTExNGU3Yzc0MjYxOTkzOWFjNDk=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-11-26T00:48:49Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2014-12-04T15:04:51Z"}, "message": "Remove dependency on typeck from lint.", "tree": {"sha": "07dbe5829d652db4d665d4d6d1bde49a0baebfd5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07dbe5829d652db4d665d4d6d1bde49a0baebfd5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/adda9c152096459bd9925114e7c742619939ac49", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/adda9c152096459bd9925114e7c742619939ac49", "html_url": "https://github.com/rust-lang/rust/commit/adda9c152096459bd9925114e7c742619939ac49", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/adda9c152096459bd9925114e7c742619939ac49/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "db75f8aa91a8757725a84db2345236f887b2ffec", "url": "https://api.github.com/repos/rust-lang/rust/commits/db75f8aa91a8757725a84db2345236f887b2ffec", "html_url": "https://github.com/rust-lang/rust/commit/db75f8aa91a8757725a84db2345236f887b2ffec"}], "stats": {"total": 44, "additions": 1, "deletions": 43}, "files": [{"sha": "10c0ae6d3741771b62420b4217695cd2e05f4f17", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/adda9c152096459bd9925114e7c742619939ac49/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda9c152096459bd9925114e7c742619939ac49/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=adda9c152096459bd9925114e7c742619939ac49", "patch": "@@ -28,9 +28,7 @@ use self::MethodContext::*;\n \n use metadata::csearch;\n use middle::def::*;\n-use middle::infer;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv::ast_ty_to_ty;\n use middle::{def, pat_util, stability};\n use middle::const_eval::{eval_const_expr_partial, const_int, const_uint};\n use util::ppaux::{ty_to_string};\n@@ -84,7 +82,7 @@ impl LintPass for UnusedCasts {\n \n     fn check_expr(&mut self, cx: &Context, e: &ast::Expr) {\n         if let ast::ExprCast(ref expr, ref ty) = e.node {\n-            let t_t = ast_ty_to_ty(cx, &infer::new_infer_ctxt(cx.tcx), &**ty);\n+            let t_t = ty::expr_ty(cx.tcx, e);\n             if ty::expr_ty(cx.tcx, &**expr) == t_t {\n                 cx.span_lint(UNUSED_TYPECASTS, ty.span, \"unnecessary type cast\");\n             }"}, {"sha": "442d3aab92dba9d562ba7e18462e2e0c14cf7b93", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 0, "deletions": 40, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/adda9c152096459bd9925114e7c742619939ac49/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/adda9c152096459bd9925114e7c742619939ac49/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=adda9c152096459bd9925114e7c742619939ac49", "patch": "@@ -25,18 +25,14 @@\n //! for all lint attributes.\n use self::TargetLint::*;\n \n-use middle::infer;\n use middle::privacy::ExportedItems;\n-use middle::subst;\n use middle::ty::{mod, Ty};\n-use middle::typeck::astconv::AstConv;\n use session::{early_error, Session};\n use lint::{Level, LevelSource, Lint, LintId, LintArray, LintPass, LintPassObject};\n use lint::{Default, CommandLine, Node, Allow, Warn, Deny, Forbid};\n use lint::builtin;\n use util::nodemap::FnvHashMap;\n \n-use std::rc::Rc;\n use std::cell::RefCell;\n use std::tuple::Tuple2;\n use std::mem;\n@@ -541,42 +537,6 @@ impl<'a, 'tcx> Context<'a, 'tcx> {\n     }\n }\n \n-impl<'a, 'tcx> AstConv<'tcx> for Context<'a, 'tcx>{\n-    fn tcx<'a>(&'a self) -> &'a ty::ctxt<'tcx> { self.tcx }\n-\n-    fn get_item_ty(&self, id: ast::DefId) -> ty::Polytype<'tcx> {\n-        ty::lookup_item_type(self.tcx, id)\n-    }\n-\n-    fn get_trait_def(&self, id: ast::DefId) -> Rc<ty::TraitDef<'tcx>> {\n-        ty::lookup_trait_def(self.tcx, id)\n-    }\n-\n-    fn ty_infer(&self, _span: Span) -> Ty<'tcx> {\n-        infer::new_infer_ctxt(self.tcx).next_ty_var()\n-    }\n-\n-    fn associated_types_of_trait_are_valid(&self, _: Ty<'tcx>, _: ast::DefId)\n-                                           -> bool {\n-        // FIXME(pcwalton): This is wrong.\n-        true\n-    }\n-\n-    fn associated_type_binding(&self,\n-                               _: Span,\n-                               _: Option<Ty<'tcx>>,\n-                               trait_id: ast::DefId,\n-                               associated_type_id: ast::DefId)\n-                               -> Ty<'tcx> {\n-        // FIXME(pcwalton): This is wrong.\n-        let trait_def = self.get_trait_def(trait_id);\n-        let index = ty::associated_type_parameter_index(self.tcx,\n-                                                        &*trait_def,\n-                                                        associated_type_id);\n-        ty::mk_param(self.tcx, subst::TypeSpace, index, associated_type_id)\n-    }\n-}\n-\n impl<'a, 'tcx, 'v> Visitor<'v> for Context<'a, 'tcx> {\n     fn visit_item(&mut self, it: &ast::Item) {\n         self.with_lint_attrs(it.attrs.as_slice(), |cx| {"}]}