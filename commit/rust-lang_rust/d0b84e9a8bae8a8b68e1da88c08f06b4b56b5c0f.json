{"sha": "d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQwYjg0ZTlhOGJhZThhOGI2OGUxZGE4OGMwOGYwNmI0YjU2YjVjMGY=", "commit": {"author": {"name": "Jim Blandy", "email": "jimb@red-bean.com", "date": "2019-04-20T02:10:24Z"}, "committer": {"name": "Jim Blandy", "email": "jimb@red-bean.com", "date": "2019-04-20T02:10:24Z"}, "message": "Doc fixes for core::future::Future.\n\nFixed outdated reference to `waker` argument; now futures are passed a\n`Context`, from which one can obtain a `waker`.\n\nCleaned up explanation of what happens when you call `poll` on a completed\nfuture. It doesn't make sense to say that `poll` implementations can't cause\nmemory unsafety; no safe function is ever allowed to cause memory unsafety, so\nwhy mention it here? It seems like the intent is to say that the `Future` trait\ndoesn't say what the consequences of excess polls will be, and they might be\nbad; but that the usual constraints that Rust imposes on any non-`unsafe`\nfunction still apply. It's also oddly specific to say 'memory corruption'\ninstead of just 'undefined behavior'; UB is a bit jargony, so the text should\nprovide examples.", "tree": {"sha": "9204b492f3a2f752a646bf56eeda82431a878572", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9204b492f3a2f752a646bf56eeda82431a878572"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f", "html_url": "https://github.com/rust-lang/rust/commit/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f/comments", "author": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jimblandy", "id": 751272, "node_id": "MDQ6VXNlcjc1MTI3Mg==", "avatar_url": "https://avatars.githubusercontent.com/u/751272?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jimblandy", "html_url": "https://github.com/jimblandy", "followers_url": "https://api.github.com/users/jimblandy/followers", "following_url": "https://api.github.com/users/jimblandy/following{/other_user}", "gists_url": "https://api.github.com/users/jimblandy/gists{/gist_id}", "starred_url": "https://api.github.com/users/jimblandy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jimblandy/subscriptions", "organizations_url": "https://api.github.com/users/jimblandy/orgs", "repos_url": "https://api.github.com/users/jimblandy/repos", "events_url": "https://api.github.com/users/jimblandy/events{/privacy}", "received_events_url": "https://api.github.com/users/jimblandy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8aaae4294b16b8070a52b858364f440873bfc95c", "url": "https://api.github.com/repos/rust-lang/rust/commits/8aaae4294b16b8070a52b858364f440873bfc95c", "html_url": "https://github.com/rust-lang/rust/commit/8aaae4294b16b8070a52b858364f440873bfc95c"}], "stats": {"total": 26, "additions": 13, "deletions": 13}, "files": [{"sha": "9d7152df32d2be38a2e33e3defa330f06d07c716", "filename": "src/libcore/future/future.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f/src%2Flibcore%2Ffuture%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f/src%2Flibcore%2Ffuture%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffuture%2Ffuture.rs?ref=d0b84e9a8bae8a8b68e1da88c08f06b4b56b5c0f", "patch": "@@ -18,9 +18,9 @@ use crate::task::{Context, Poll};\n /// The core method of future, `poll`, *attempts* to resolve the future into a\n /// final value. This method does not block if the value is not ready. Instead,\n /// the current task is scheduled to be woken up when it's possible to make\n-/// further progress by `poll`ing again. The wake up is performed using\n-/// the `waker` argument of the `poll()` method, which is a handle for waking\n-/// up the current task.\n+/// further progress by `poll`ing again. The `context` passed to the `poll`\n+/// method can provide a `Waker`, which is a handle for waking up the current\n+/// task.\n ///\n /// When using a future, you generally won't call `poll` directly, but instead\n /// `await!` the value.\n@@ -53,9 +53,9 @@ pub trait Future {\n     /// Once a task has been woken up, it should attempt to `poll` the future\n     /// again, which may or may not produce a final value.\n     ///\n-    /// Note that on multiple calls to `poll`, only the most recent\n-    /// [`Waker`] passed to `poll` should be scheduled to receive a\n-    /// wakeup.\n+    /// Note that on multiple calls to `poll`, only the [`Waker`] from the\n+    /// [`Context`] passed to the most recent call should be scheduled to\n+    /// receive a wakeup.\n     ///\n     /// # Runtime characteristics\n     ///\n@@ -77,15 +77,15 @@ pub trait Future {\n     /// thread pool (or something similar) to ensure that `poll` can return\n     /// quickly.\n     ///\n-    /// An implementation of `poll` may also never cause memory unsafety.\n-    ///\n     /// # Panics\n     ///\n-    /// Once a future has completed (returned `Ready` from `poll`),\n-    /// then any future calls to `poll` may panic, block forever, or otherwise\n-    /// cause any kind of bad behavior except causing memory unsafety.\n-    /// The `Future` trait itself provides no guarantees about the behavior\n-    /// of `poll` after a future has completed.\n+    /// Once a future has completed (returned `Ready` from `poll`), calling its\n+    /// `poll` method again may panic, block forever, or cause other kinds of\n+    /// problems; the `Future` trait places no requirements on the effects of\n+    /// such a call. However, as the `poll` method is not marked `unsafe`,\n+    /// Rust's usual rules apply: calls must never cause undefined behavior\n+    /// (memory corruption, incorrect use of `unsafe` functions, or the like),\n+    /// regardless of the future's state.\n     ///\n     /// [`Poll::Pending`]: ../task/enum.Poll.html#variant.Pending\n     /// [`Poll::Ready(val)`]: ../task/enum.Poll.html#variant.Ready"}]}