{"sha": "d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5NjQ4NWQ0OWUzNzQ1YTliOWY0YjJlZDZiYTljZWJmMjY1ZjE0MmU=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-11-22T23:15:11Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-12-09T20:43:24Z"}, "message": "Add more tests for borrowck and dropck slice pattern handling", "tree": {"sha": "ef52ff1543d7f312ffdc43a58ef9fb3f8798e11a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ef52ff1543d7f312ffdc43a58ef9fb3f8798e11a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "html_url": "https://github.com/rust-lang/rust/commit/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cab7af986c8662d68213b9577c251036b4cbcb71", "url": "https://api.github.com/repos/rust-lang/rust/commits/cab7af986c8662d68213b9577c251036b4cbcb71", "html_url": "https://github.com/rust-lang/rust/commit/cab7af986c8662d68213b9577c251036b4cbcb71"}], "stats": {"total": 924, "additions": 849, "deletions": 75}, "files": [{"sha": "8f274cf73cb0ec3b05f889717d050f228c1328b8", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-no-overlap.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-no-overlap.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,69 @@\n+// check-pass\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    let [_, _, _x] = a;\n+    let [.., _y, _] = a;\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n+    let [.., (_, _y)] = a;\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    let [_x, _, _] = a;\n+    let [_, _y @ ..] = a;\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    let [.., _x] = a;\n+    let [_y @ .., _] = a;\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    let [(_x, _), _, _] = a;\n+    let [_, _y @ ..] = a;\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    let [.., (_x, _)] = a;\n+    let [_y @ .., _] = a;\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    let [_, _y @ ..] = a;\n+    let [(_x, _), _, _] = a;\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    let [_y @ .., _] = a;\n+    let [.., (_x, _)] = a;\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    let [x @ .., _, _] = a;\n+    let [_, _y @ ..] = a;\n+}\n+\n+fn main() {}"}, {"sha": "57ce2417570b0985f9787fbb4b1a601bce7441a3", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use-no-overlap.rs", "status": "added", "additions": 69, "deletions": 0, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use-no-overlap.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,69 @@\n+// check-pass\n+\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_one_from_end() {\n+    let a = array();\n+    let [_, _, _x] = a;\n+    let [.., ref _y, _] = a;\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n+    let [.., (_, ref _y)] = a;\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    let [_x, _, _] = a;\n+    let [_, ref _y @ ..] = a;\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    let [.., _x] = a;\n+    let [ref _y @ .., _] = a;\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    let [(_x, _), _, _] = a;\n+    let [_, ref _y @ ..] = a;\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    let [.., (_x, _)] = a;\n+    let [ref _y @ .., _] = a;\n+}\n+\n+fn move_out_by_const_subslice_and_index_field() {\n+    let a = array();\n+    let [_, _y @ ..] = a;\n+    let [(ref _x, _), _, _] = a;\n+}\n+\n+fn move_out_by_const_subslice_and_end_index_field() {\n+    let a = array();\n+    let [_y @ .., _] = a;\n+    let [.., (ref _x, _)] = a;\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    let [x @ .., _, _] = a;\n+    let [_, ref _y @ ..] = a;\n+}\n+\n+fn main() {}"}, {"sha": "778beefbf2c85d59767e01cdc117e7d0ac2aa7ae", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.rs", "status": "added", "additions": 99, "deletions": 0, "changes": 99, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,99 @@\n+#![feature(slice_patterns)]\n+\n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n+fn move_out_from_begin_and_end() {\n+    let a = array();\n+    let [_, _, _x] = a;\n+    let [.., ref _y] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n+    let [.., ref _y] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n+    let [.., (ref _y, _)] = a; //~ ERROR [E0382]\n+}\n+\n+// Const Index + Slice\n+\n+fn move_out_by_const_index_and_subslice() {\n+    let a = array();\n+    let [_x, _, _] = a;\n+    let [ref _y @ .., _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    let [.., _x] = a;\n+    let [_, _, ref _y @ ..] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    let [(_x, _), _, _] = a;\n+    let [ref _y @ .., _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    let [.., (_x, _)] = a;\n+    let [_, _, ref _y @ ..] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    let [_y @ .., _, _] = a;\n+    let [(ref _x, _), _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    let [_, _, _y @ ..] = a;\n+    let [.., (ref _x, _)] = a; //~ ERROR [E0382]\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    let [x @ .., _] = a;\n+    let [_, ref _y @ ..] = a; //~ ERROR [E0382]\n+}\n+\n+// Move + Assign\n+\n+fn move_out_and_assign_end() {\n+    let mut a = array();\n+    let [_, _, _x] = a;\n+    a[2] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_and_assign_end_field() {\n+    let mut a = array();\n+    let [_, _, (_x, _)] = a;\n+    a[2].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end() {\n+    let mut a = array();\n+    let [_, _, _x @ ..] = a;\n+    a[0] = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn move_out_slice_and_assign_end_field() {\n+    let mut a = array();\n+    let [_, _, _x @ ..] = a;\n+    a[0].1 = Default::default(); //~ ERROR [E0382]\n+}\n+\n+fn main() {}"}, {"sha": "2a7b89132c1b7a71c31d74a5be8b3870a7198e42", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array-use.stderr", "status": "added", "additions": 143, "deletions": 0, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array-use.stderr?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,143 @@\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:12:14\n+   |\n+LL |     let [_, _, _x] = a;\n+   |                -- value moved here\n+LL |     let [.., ref _y] = a;\n+   |              ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:18:14\n+   |\n+LL |     let [_, _, (_x, _)] = a;\n+   |                 -- value moved here\n+LL |     let [.., ref _y] = a;\n+   |              ^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:24:15\n+   |\n+LL |     let [_, _, (_x, _)] = a;\n+   |                 -- value moved here\n+LL |     let [.., (ref _y, _)] = a;\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:32:10\n+   |\n+LL |     let [_x, _, _] = a;\n+   |          -- value moved here\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          ^^^^^^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:38:16\n+   |\n+LL |     let [.., _x] = a;\n+   |              -- value moved here\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                ^^^^^^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:44:10\n+   |\n+LL |     let [(_x, _), _, _] = a;\n+   |           -- value moved here\n+LL |     let [ref _y @ .., _, _] = a;\n+   |          ^^^^^^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:50:16\n+   |\n+LL |     let [.., (_x, _)] = a;\n+   |               -- value moved here\n+LL |     let [_, _, ref _y @ ..] = a;\n+   |                ^^^^^^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:56:11\n+   |\n+LL |     let [_y @ .., _, _] = a;\n+   |          ------- value moved here\n+LL |     let [(ref _x, _), _, _] = a;\n+   |           ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a[..]`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:62:15\n+   |\n+LL |     let [_, _, _y @ ..] = a;\n+   |                ------- value moved here\n+LL |     let [.., (ref _x, _)] = a;\n+   |               ^^^^^^ value borrowed here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: borrow of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:70:13\n+   |\n+LL |     let [x @ .., _] = a;\n+   |          ------ value moved here\n+LL |     let [_, ref _y @ ..] = a;\n+   |             ^^^^^^^^^^^ value borrowed here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:78:5\n+   |\n+LL |     let [_, _, _x] = a;\n+   |                -- value moved here\n+LL |     a[2] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:84:5\n+   |\n+LL |     let [_, _, (_x, _)] = a;\n+   |                 -- value moved here\n+LL |     a[2].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:90:5\n+   |\n+LL |     let [_, _, _x @ ..] = a;\n+   |                ------- value moved here\n+LL |     a[0] = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array-use.rs:96:5\n+   |\n+LL |     let [_, _, _x @ ..] = a;\n+   |                ------- value moved here\n+LL |     a[0].1 = Default::default();\n+   |     ^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error: aborting due to 14 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "f9d3f6f2c0724e9adcf5d2aabc0ddc0c627f5569", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.rs", "status": "modified", "additions": 63, "deletions": 6, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -1,16 +1,73 @@\n-#![feature(box_syntax)]\n #![feature(slice_patterns)]\n \n+fn array() -> [(String, String); 3] {\n+    Default::default()\n+}\n+\n+// Const Index + Const Index\n+\n fn move_out_from_begin_and_end() {\n-    let a = [box 1, box 2];\n-    let [_, _x] = a;\n+    let a = array();\n+    let [_, _, _x] = a;\n+    let [.., _y] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_from_begin_field_and_end() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n     let [.., _y] = a; //~ ERROR [E0382]\n }\n \n+fn move_out_from_begin_field_and_end_field() {\n+    let a = array();\n+    let [_, _, (_x, _)] = a;\n+    let [.., (_y, _)] = a; //~ ERROR [E0382]\n+}\n+\n+// Const Index + Slice\n+\n fn move_out_by_const_index_and_subslice() {\n-    let a = [box 1, box 2];\n-    let [_x, _] = a;\n-    let [_y @ ..] = a; //~ ERROR [E0382]\n+    let a = array();\n+    let [_x, _, _] = a;\n+    let [_y @ .., _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_end_and_subslice() {\n+    let a = array();\n+    let [.., _x] = a;\n+    let [_, _, _y @ ..] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_field_and_subslice() {\n+    let a = array();\n+    let [(_x, _), _, _] = a;\n+    let [_y @ .., _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_const_index_end_field_and_subslice() {\n+    let a = array();\n+    let [.., (_x, _)] = a;\n+    let [_, _, _y @ ..] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_subslice_and_const_index_field() {\n+    let a = array();\n+    let [_y @ .., _, _] = a;\n+    let [(_x, _), _, _] = a; //~ ERROR [E0382]\n+}\n+\n+fn move_out_by_subslice_and_const_index_end_field() {\n+    let a = array();\n+    let [_, _, _y @ ..] = a;\n+    let [.., (_x, _)] = a; //~ ERROR [E0382]\n+}\n+\n+// Slice + Slice\n+\n+fn move_out_by_subslice_and_subslice() {\n+    let a = array();\n+    let [x @ .., _] = a;\n+    let [_, _y @ ..] = a; //~ ERROR [E0382]\n }\n \n fn main() {}"}, {"sha": "08134a2a323e73410c934ca248499f71eff33ff3", "filename": "src/test/ui/borrowck/borrowck-move-out-from-array.stderr", "status": "modified", "additions": 90, "deletions": 10, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-move-out-from-array.stderr?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -1,23 +1,103 @@\n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:7:14\n+  --> $DIR/borrowck-move-out-from-array.rs:12:14\n    |\n-LL |     let [_, _x] = a;\n-   |             -- value moved here\n+LL |     let [_, _, _x] = a;\n+   |                -- value moved here\n LL |     let [.., _y] = a;\n    |              ^^ value used here after move\n    |\n-   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n error[E0382]: use of moved value: `a[..]`\n-  --> $DIR/borrowck-move-out-from-array.rs:13:10\n+  --> $DIR/borrowck-move-out-from-array.rs:18:14\n    |\n-LL |     let [_x, _] = a;\n+LL |     let [_, _, (_x, _)] = a;\n+   |                 -- value moved here\n+LL |     let [.., _y] = a;\n+   |              ^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array.rs:24:15\n+   |\n+LL |     let [_, _, (_x, _)] = a;\n+   |                 -- value moved here\n+LL |     let [.., (_y, _)] = a;\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array.rs:32:10\n+   |\n+LL |     let [_x, _, _] = a;\n    |          -- value moved here\n-LL |     let [_y @ ..] = a;\n-   |          ^^^^^^^ value used here after move\n+LL |     let [_y @ .., _, _] = a;\n+   |          ^^^^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array.rs:38:16\n+   |\n+LL |     let [.., _x] = a;\n+   |              -- value moved here\n+LL |     let [_, _, _y @ ..] = a;\n+   |                ^^^^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array.rs:44:10\n+   |\n+LL |     let [(_x, _), _, _] = a;\n+   |           -- value moved here\n+LL |     let [_y @ .., _, _] = a;\n+   |          ^^^^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array.rs:50:16\n+   |\n+LL |     let [.., (_x, _)] = a;\n+   |               -- value moved here\n+LL |     let [_, _, _y @ ..] = a;\n+   |                ^^^^^^^ value used here after partial move\n+   |\n+   = note: move occurs because `a[..].0` has type `std::string::String`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array.rs:56:11\n+   |\n+LL |     let [_y @ .., _, _] = a;\n+   |          ------- value moved here\n+LL |     let [(_x, _), _, _] = a;\n+   |           ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a[..].0`\n+  --> $DIR/borrowck-move-out-from-array.rs:62:15\n+   |\n+LL |     let [_, _, _y @ ..] = a;\n+   |                ------- value moved here\n+LL |     let [.., (_x, _)] = a;\n+   |               ^^ value used here after move\n+   |\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n+\n+error[E0382]: use of moved value: `a`\n+  --> $DIR/borrowck-move-out-from-array.rs:70:13\n+   |\n+LL |     let [x @ .., _] = a;\n+   |          ------ value moved here\n+LL |     let [_, _y @ ..] = a;\n+   |             ^^^^^^^ value used here after partial move\n    |\n-   = note: move occurs because `a[..]` has type `std::boxed::Box<i32>`, which does not implement the `Copy` trait\n+   = note: move occurs because `a[..]` has type `(std::string::String, std::string::String)`, which does not implement the `Copy` trait\n \n-error: aborting due to 2 previous errors\n+error: aborting due to 10 previous errors\n \n For more information about this error, try `rustc --explain E0382`."}, {"sha": "7d91a212647233da54b45bb2da896856ef64250e", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array-no-overlap.rs", "status": "added", "additions": 66, "deletions": 0, "changes": 66, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array-no-overlap.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,66 @@\n+// check-pass\n+\n+#![feature(slice_patterns)]\n+\n+fn nop(_s: &[& i32]) {}\n+fn nop_subslice(_s: &[i32]) {}\n+\n+fn const_index_ok(s: &mut [i32; 4]) {\n+    let [ref first, ref second, _, ref fourth, ..] = *s;\n+    let [_, _, ref mut third, ..] = *s;\n+    nop(&[first, second, third, fourth]);\n+}\n+\n+fn const_index_from_end_ok(s: &mut [i32; 4]) {\n+    let [.., ref fourth, ref third, _, ref first] = *s;\n+    let [.., ref mut second, _] = *s;\n+    nop(&[first, second, third, fourth]);\n+}\n+\n+fn const_index_mixed(s: &mut [i32; 6]) {\n+    let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n+\n+    let [ref mut from_begin0, ..] = *s;\n+    nop(&[from_begin0, from_end1, from_end3, from_end4]);\n+    let [_, ref mut from_begin1, ..] = *s;\n+    nop(&[from_begin1, from_end1, from_end3, from_end4]);\n+\n+    let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n+\n+    let [.., ref mut from_end1] = *s;\n+    nop(&[from_begin0, from_begin1, from_begin3, from_end1]);\n+    let [.., ref mut from_end2, _] = *s;\n+    nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n+    let [.., ref mut from_end4, _, _, _] = *s;\n+    nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n+}\n+\n+fn const_index_and_subslice_ok(s: &mut [i32; 4]) {\n+    let [ref first, ref second, ..] = *s;\n+    let [_, _, ref mut tail @ ..] = *s;\n+    nop(&[first, second]);\n+    nop_subslice(tail);\n+}\n+\n+fn const_index_and_subslice_from_end_ok(s: &mut [i32; 4]) {\n+    let [.., ref second, ref first] = *s;\n+    let [ref mut tail @ .., _, _] = *s;\n+    nop(&[first, second]);\n+    nop_subslice(tail);\n+}\n+\n+fn subslices(s: &mut [i32; 4]) {\n+    let [_, _, ref s1 @ ..] = *s;\n+    let [ref mut s2 @ .., _, _] = *s;\n+    nop_subslice(s1);\n+    nop_subslice(s2);\n+}\n+\n+fn main() {\n+    let mut v = [1,2,3,4];\n+    const_index_ok(&mut v);\n+    const_index_from_end_ok(&mut v);\n+    const_index_and_subslice_ok(&mut v);\n+    const_index_and_subslice_from_end_ok(&mut v);\n+    subslices(&mut v);\n+}"}, {"sha": "f03a2ab8fa8e456c53111e94bc6a52df144f495c", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,60 @@\n+#![feature(slice_patterns)]\n+\n+fn nop(_s: &[& i32]) {}\n+fn nop_subslice(_s: &[i32]) {}\n+\n+fn const_index_err(s: &mut [i32; 4]) {\n+    let [ref first, ref second, ..] = *s;\n+    let [_, ref mut  second2, ref mut third, ..] = *s; //~ERROR\n+    nop(&[first, second, second2, third]);\n+}\n+\n+fn const_index_from_end_err(s: &mut [i32; 4]) {\n+    let [.., ref fourth, ref third, _, ref first] = *s;\n+    let [.., ref mut third2, _, _] = *s; //~ERROR\n+    nop(&[first, third, third2, fourth]);\n+}\n+\n+fn const_index_mixed(s: &mut [i32; 6]) {\n+    let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n+\n+    let [_, _, ref mut from_begin2, ..] = *s; //~ERROR\n+    nop(&[from_begin2, from_end1, from_end3, from_end4]);\n+    let [_, _, _, ref mut from_begin3, ..] = *s; //~ERROR\n+    nop(&[from_begin3, from_end1, from_end3, from_end4]);\n+\n+    let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n+\n+    let [.., ref mut from_end3, _,  _] = *s; //~ERROR\n+    nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n+}\n+\n+fn const_index_and_subslice_err(s: &mut [i32; 4]) {\n+    let [ref first, ref second, ..] = *s;\n+    let [_, ref mut tail @ ..] = *s; //~ERROR\n+    nop(&[first, second]);\n+    nop_subslice(tail);\n+}\n+\n+fn const_index_and_subslice_from_end_err(s: &mut [i32; 4]) {\n+    let [.., ref second, ref first] = *s;\n+    let [ref mut tail @ .., _] = *s; //~ERROR\n+    nop(&[first, second]);\n+    nop_subslice(tail);\n+}\n+\n+fn subslices_overlap(s: &mut [i32; 4]) {\n+    let [_,  ref s1 @ ..] = *s;\n+    let [ref mut s2 @ .., _, _] = *s; //~ERROR\n+    nop_subslice(s1);\n+    nop_subslice(s2);\n+}\n+\n+fn main() {\n+    let mut v = [1,2,3,4];\n+    const_index_err(&mut v);\n+    const_index_from_end_err(&mut v);\n+    const_index_and_subslice_err(&mut v);\n+    const_index_and_subslice_from_end_err(&mut v);\n+    subslices_overlap(&mut v);\n+}"}, {"sha": "e50e7eb3e22301b5c98be9a1776b2c588830242d", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-array.stderr", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-array.stderr?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,86 @@\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:8:13\n+   |\n+LL |     let [ref first, ref second, ..] = *s;\n+   |                     ---------- immutable borrow occurs here\n+LL |     let [_, ref mut  second2, ref mut third, ..] = *s;\n+   |             ^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[first, second, second2, third]);\n+   |                  ------ immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:14:14\n+   |\n+LL |     let [.., ref fourth, ref third, _, ref first] = *s;\n+   |                          --------- immutable borrow occurs here\n+LL |     let [.., ref mut third2, _, _] = *s;\n+   |              ^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[first, third, third2, fourth]);\n+   |                  ----- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:21:16\n+   |\n+LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n+   |                 ------------- immutable borrow occurs here\n+LL | \n+LL |     let [_, _, ref mut from_begin2, ..] = *s;\n+   |                ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[from_begin2, from_end1, from_end3, from_end4]);\n+   |                                              --------- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:23:19\n+   |\n+LL |     let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s;\n+   |                                ------------- immutable borrow occurs here\n+...\n+LL |     let [_, _, _, ref mut from_begin3, ..] = *s;\n+   |                   ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[from_begin3, from_end1, from_end3, from_end4]);\n+   |                                   --------- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:28:14\n+   |\n+LL |     let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s;\n+   |                                               --------------- immutable borrow occurs here\n+LL | \n+LL |     let [.., ref mut from_end3, _,  _] = *s;\n+   |              ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n+   |                                     ----------- immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:34:13\n+   |\n+LL |     let [ref first, ref second, ..] = *s;\n+   |                     ---------- immutable borrow occurs here\n+LL |     let [_, ref mut tail @ ..] = *s;\n+   |             ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[first, second]);\n+   |                  ------ immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:41:10\n+   |\n+LL |     let [.., ref second, ref first] = *s;\n+   |              ---------- immutable borrow occurs here\n+LL |     let [ref mut tail @ .., _] = *s;\n+   |          ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop(&[first, second]);\n+   |                  ------ immutable borrow later used here\n+\n+error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n+  --> $DIR/borrowck-slice-pattern-element-loan-array.rs:48:10\n+   |\n+LL |     let [_,  ref s1 @ ..] = *s;\n+   |              ----------- immutable borrow occurs here\n+LL |     let [ref mut s2 @ .., _, _] = *s;\n+   |          ^^^^^^^^^^^^^^^ mutable borrow occurs here\n+LL |     nop_subslice(s1);\n+   |                  -- immutable borrow later used here\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0502`."}, {"sha": "e69071f87720b9fb68046671a5b477c96458b9e7", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice-no-overlap.rs", "status": "added", "additions": 61, "deletions": 0, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice-no-overlap.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -0,0 +1,61 @@\n+// check-pass\n+\n+#![feature(slice_patterns)]\n+\n+fn nop(_s: &[& i32]) {}\n+fn nop_subslice(_s: &[i32]) {}\n+\n+fn const_index_ok(s: &mut [i32]) {\n+    if let [ref first, ref second, _, ref fourth, ..] = *s {\n+        if let [_, _, ref mut third, ..] = *s {\n+            nop(&[first, second, third, fourth]);\n+        }\n+    }\n+}\n+\n+fn const_index_from_end_ok(s: &mut [i32]) {\n+    if let [.., ref fourth, ref third, _, ref first] = *s {\n+        if let [.., ref mut second, _] = *s {\n+            nop(&[first, second, third, fourth]);\n+        }\n+    }\n+}\n+\n+fn const_index_mixed(s: &mut [i32]) {\n+    if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n+        if let [ref mut from_begin0, ..] = *s {\n+            nop(&[from_begin0, from_end1, from_end3, from_end4]);\n+        }\n+    }\n+    if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n+        if let [.., ref mut from_end1] = *s {\n+            nop(&[from_begin0, from_begin1, from_begin3, from_end1]);\n+        }\n+    }\n+}\n+\n+fn const_index_and_subslice_ok(s: &mut [i32]) {\n+    if let [ref first, ref second, ..] = *s {\n+        if let [_, _, ref mut tail @ ..] = *s {\n+            nop(&[first, second]);\n+            nop_subslice(tail);\n+        }\n+    }\n+}\n+\n+fn const_index_and_subslice_from_end_ok(s: &mut [i32]) {\n+    if let [.., ref second, ref first] = *s {\n+        if let [ref mut tail @ .., _, _] = *s {\n+            nop(&[first, second]);\n+            nop_subslice(tail);\n+        }\n+    }\n+}\n+\n+fn main() {\n+    let mut v = [1,2,3,4];\n+    const_index_ok(&mut v);\n+    const_index_from_end_ok(&mut v);\n+    const_index_and_subslice_ok(&mut v);\n+    const_index_and_subslice_from_end_ok(&mut v);\n+}"}, {"sha": "2ef98741dc35aeacf6188e3a20caefbe505b38fa", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.rs", "status": "renamed", "additions": 0, "deletions": 46, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -1,18 +1,8 @@\n-//compile-flags: -Z borrowck=mir\n-\n #![feature(slice_patterns)]\n \n fn nop(_s: &[& i32]) {}\n fn nop_subslice(_s: &[i32]) {}\n \n-fn const_index_ok(s: &mut [i32]) {\n-    if let [ref first, ref second, _, ref fourth, ..] = *s {\n-        if let [_, _, ref mut third, ..] = *s {\n-            nop(&[first, second, third, fourth]);\n-        }\n-    }\n-}\n-\n fn const_index_err(s: &mut [i32]) {\n     if let [ref first, ref second, ..] = *s {\n         if let [_, ref mut  second2, ref mut third, ..] = *s { //~ERROR\n@@ -21,14 +11,6 @@ fn const_index_err(s: &mut [i32]) {\n     }\n }\n \n-fn const_index_from_end_ok(s: &mut [i32]) {\n-    if let [.., ref fourth, ref third, _, ref first] = *s {\n-        if let [.., ref mut second, _] = *s {\n-            nop(&[first, second, third, fourth]);\n-        }\n-    }\n-}\n-\n fn const_index_from_end_err(s: &mut [i32]) {\n     if let [.., ref fourth, ref third, _, ref first] = *s {\n         if let [.., ref mut third2, _, _] = *s { //~ERROR\n@@ -39,9 +21,6 @@ fn const_index_from_end_err(s: &mut [i32]) {\n \n fn const_index_mixed(s: &mut [i32]) {\n     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n-        if let [ref mut from_begin0, ..] = *s {\n-            nop(&[from_begin0, from_end1, from_end3, from_end4]);\n-        }\n         if let [_, ref mut from_begin1, ..] = *s { //~ERROR\n             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n         }\n@@ -53,9 +32,6 @@ fn const_index_mixed(s: &mut [i32]) {\n         }\n     }\n     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n-        if let [.., ref mut from_end1] = *s {\n-            nop(&[from_begin0, from_begin1, from_begin3, from_end1]);\n-        }\n         if let [.., ref mut from_end2, _] = *s { //~ERROR\n             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n         }\n@@ -68,15 +44,6 @@ fn const_index_mixed(s: &mut [i32]) {\n     }\n }\n \n-fn const_index_and_subslice_ok(s: &mut [i32]) {\n-    if let [ref first, ref second, ..] = *s {\n-        if let [_, _, ref mut tail @ ..] = *s {\n-            nop(&[first, second]);\n-            nop_subslice(tail);\n-        }\n-    }\n-}\n-\n fn const_index_and_subslice_err(s: &mut [i32]) {\n     if let [ref first, ref second, ..] = *s {\n         if let [_, ref mut tail @ ..] = *s { //~ERROR\n@@ -86,15 +53,6 @@ fn const_index_and_subslice_err(s: &mut [i32]) {\n     }\n }\n \n-fn const_index_and_subslice_from_end_ok(s: &mut [i32]) {\n-    if let [.., ref second, ref first] = *s {\n-        if let [ref mut tail @ .., _, _] = *s {\n-            nop(&[first, second]);\n-            nop_subslice(tail);\n-        }\n-    }\n-}\n-\n fn const_index_and_subslice_from_end_err(s: &mut [i32]) {\n     if let [.., ref second, ref first] = *s {\n         if let [ref mut tail @ .., _] = *s { //~ERROR\n@@ -115,13 +73,9 @@ fn subslices(s: &mut [i32]) {\n \n fn main() {\n     let mut v = [1,2,3,4];\n-    const_index_ok(&mut v);\n     const_index_err(&mut v);\n-    const_index_from_end_ok(&mut v);\n     const_index_from_end_err(&mut v);\n-    const_index_and_subslice_ok(&mut v);\n     const_index_and_subslice_err(&mut v);\n-    const_index_and_subslice_from_end_ok(&mut v);\n     const_index_and_subslice_from_end_err(&mut v);\n     subslices(&mut v);\n }", "previous_filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.rs"}, {"sha": "b6f5ac64b20612fcff81373d3453289dd6a1f7f1", "filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan-slice.stderr", "status": "renamed", "additions": 11, "deletions": 13, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fborrowck%2Fborrowck-slice-pattern-element-loan-slice.stderr?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -1,5 +1,5 @@\n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:18:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:8:20\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n@@ -9,7 +9,7 @@ LL |             nop(&[first, second, second2, third]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:34:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:16:21\n    |\n LL |     if let [.., ref fourth, ref third, _, ref first] = *s {\n    |                             --------- immutable borrow occurs here\n@@ -19,18 +19,17 @@ LL |             nop(&[first, third, third2, fourth]);\n    |                          ----- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:45:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:24:20\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                    ------------- immutable borrow occurs here\n-...\n LL |         if let [_, ref mut from_begin1, ..] = *s {\n    |                    ^^^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin1, from_end1, from_end3, from_end4]);\n    |                                                      --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:48:23\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:27:23\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n@@ -41,7 +40,7 @@ LL |             nop(&[from_begin2, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:51:26\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:30:26\n    |\n LL |     if let [.., _, ref from_end4, ref from_end3, _, ref from_end1] = *s {\n    |                                   ------------- immutable borrow occurs here\n@@ -52,18 +51,17 @@ LL |             nop(&[from_begin3, from_end1, from_end3, from_end4]);\n    |                                           --------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:59:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:35:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n-...\n LL |         if let [.., ref mut from_end2, _] = *s {\n    |                     ^^^^^^^^^^^^^^^^^ mutable borrow occurs here\n LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end2]);\n    |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:62:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:38:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                                                  --------------- immutable borrow occurs here\n@@ -74,7 +72,7 @@ LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end3]);\n    |                                             ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:65:21\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:41:21\n    |\n LL |     if let [ref from_begin0, ref from_begin1, _, ref from_begin3, _, ..] = *s {\n    |                              --------------- immutable borrow occurs here\n@@ -85,7 +83,7 @@ LL |             nop(&[from_begin0, from_begin1, from_begin3, from_end4]);\n    |                                ----------- immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:82:20\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:49:20\n    |\n LL |     if let [ref first, ref second, ..] = *s {\n    |                        ---------- immutable borrow occurs here\n@@ -95,7 +93,7 @@ LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:100:17\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:58:17\n    |\n LL |     if let [.., ref second, ref first] = *s {\n    |                 ---------- immutable borrow occurs here\n@@ -105,7 +103,7 @@ LL |             nop(&[first, second]);\n    |                          ------ immutable borrow later used here\n \n error[E0502]: cannot borrow `s[..]` as mutable because it is also borrowed as immutable\n-  --> $DIR/borrowck-slice-pattern-element-loan.rs:109:17\n+  --> $DIR/borrowck-slice-pattern-element-loan-slice.rs:67:17\n    |\n LL |     if let [_, _, _, ref s1 @ ..] = *s {\n    |                      ----------- immutable borrow occurs here", "previous_filename": "src/test/ui/borrowck/borrowck-slice-pattern-element-loan.stderr"}, {"sha": "0f0ec0ba460c8e91c339e1455a2270054c7c8504", "filename": "src/test/ui/drop/dynamic-drop.rs", "status": "modified", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d96485d49e3745a9b9f4b2ed6ba9cebf265f142e/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdrop%2Fdynamic-drop.rs?ref=d96485d49e3745a9b9f4b2ed6ba9cebf265f142e", "patch": "@@ -269,6 +269,28 @@ fn subslice_pattern_reassign(a: &Allocator) {\n     let[_, _y @ ..] = ar;\n }\n \n+fn index_field_mixed_ends(a: &Allocator) {\n+    let ar = [(a.alloc(), a.alloc()), (a.alloc(), a.alloc())];\n+    let[(_x, _), ..] = ar;\n+    let[(_, _y), _] = ar;\n+    let[_, (_, _w)] = ar;\n+    let[.., (_z, _)] = ar;\n+}\n+\n+fn subslice_mixed_min_lengths(a: &Allocator, c: i32) {\n+    let ar = [(a.alloc(), a.alloc()), (a.alloc(), a.alloc())];\n+    match c {\n+        0 => { let[_x, ..] = ar; }\n+        1 => { let[_x, _, ..] = ar; }\n+        2 => { let[_x, _] = ar; }\n+        3 => { let[(_x, _), _, ..] = ar; }\n+        4 => { let[.., (_x, _)] = ar; }\n+        5 => { let[.., (_x, _), _] = ar; }\n+        6 => { let [_y @ ..] = ar; }\n+        _ => { let [_y @ .., _] = ar; }\n+    }\n+}\n+\n fn panic_after_return(a: &Allocator) -> Ptr<'_> {\n     // Panic in the drop of `p` or `q` can leak\n     let exceptions = vec![8, 9];\n@@ -422,6 +444,16 @@ fn main() {\n     run_test(|a| slice_pattern_reassign(a));\n     run_test(|a| subslice_pattern_reassign(a));\n \n+    run_test(|a| index_field_mixed_ends(a));\n+    run_test(|a| subslice_mixed_min_lengths(a, 0));\n+    run_test(|a| subslice_mixed_min_lengths(a, 1));\n+    run_test(|a| subslice_mixed_min_lengths(a, 2));\n+    run_test(|a| subslice_mixed_min_lengths(a, 3));\n+    run_test(|a| subslice_mixed_min_lengths(a, 4));\n+    run_test(|a| subslice_mixed_min_lengths(a, 5));\n+    run_test(|a| subslice_mixed_min_lengths(a, 6));\n+    run_test(|a| subslice_mixed_min_lengths(a, 7));\n+\n     run_test(|a| {\n         panic_after_return(a);\n     });"}]}