{"sha": "4ea27484c9582389cded2301d1f0dd4f421c8c35", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlYTI3NDg0Yzk1ODIzODljZGVkMjMwMWQxZjBkZDRmNDIxYzhjMzU=", "commit": {"author": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-18T19:47:42Z"}, "committer": {"name": "Justus K", "email": "justus.k@protonmail.com", "date": "2021-06-19T07:44:29Z"}, "message": "rustdoc: Introduce new `DynTrait` type for better representation of trait objects", "tree": {"sha": "1ca7a9c0154da401d8af61b5c100430b371f8e88", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ca7a9c0154da401d8af61b5c100430b371f8e88"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4ea27484c9582389cded2301d1f0dd4f421c8c35", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEDDGYqKFKtc1ioGY0jGL+mKYvxGIFAmDNoGAACgkQjGL+mKYv\nxGJXhg//SGtBqQI02F2HTKfZsr1AMoi1jzhXYr9DbRJl+xeW1n2A1qnbAXWWlGRT\nPLszjfDGOgfomu4nT2Eb8b5PasPLc/Efz3xENWmwiSwJMzIlWAddyqLLuKc/9Npl\nx8icopCKaE9r2s0iTCpKThoo4rOnCOngnJlZ7qWDkwuLQa5+NmOy+gy8TzM7Cxza\nLfuNnkZlZOSZjICVtHQkcBgiBDOHmYCJAzJJfyT90Fz69AWlkwHVN3hHg3mIH14Z\nDTWmCkaZWbrSg/K9ssY1ZfBBCz4qqYzXNQs6k6+dbCD9JKgs8ffH0brH2+xh5Ows\n73rHRwVjinbd8dQgkAJHqqD2Hq/SaOp8i4aTEzO8oIz0DHfrfRCZteurRyukCvKW\npBiMSIm0aUgSSHQ7hubUeZyqewUxYinNz0lzHtxU9HcPrWsoh/ZPeCSx9zuO8gKK\na7bnyLLB+IktkoxAQVHCwtRbCk/3vm5sFcWej/R2Nb77a3PnMTGFEQYY27tTtCyF\niBfvRsWJPq9H3Pwqs9CILCkk1i0e06M9sNv7uYtlZjMRZjt492rqhuzGuT+UeRcj\nb7ir+03bJFB3596ZgIC2zx9nMxqMWmM0f1nYqVJd9NeiglevwjIHXGBe9gw1wDZ4\n87JHseSH4yXFMMwX733h6npdKIVQblvQSps2roiAKoW8oHwEPLA=\n=P/U5\n-----END PGP SIGNATURE-----", "payload": "tree 1ca7a9c0154da401d8af61b5c100430b371f8e88\nparent 1f65f56461fa72df809fff43975a7e72f08fda44\nauthor Justus K <justus.k@protonmail.com> 1624045662 +0200\ncommitter Justus K <justus.k@protonmail.com> 1624088669 +0200\n\nrustdoc: Introduce new `DynTrait` type for better representation of trait objects\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4ea27484c9582389cded2301d1f0dd4f421c8c35", "html_url": "https://github.com/rust-lang/rust/commit/4ea27484c9582389cded2301d1f0dd4f421c8c35", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4ea27484c9582389cded2301d1f0dd4f421c8c35/comments", "author": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Stupremee", "id": 39732259, "node_id": "MDQ6VXNlcjM5NzMyMjU5", "avatar_url": "https://avatars.githubusercontent.com/u/39732259?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Stupremee", "html_url": "https://github.com/Stupremee", "followers_url": "https://api.github.com/users/Stupremee/followers", "following_url": "https://api.github.com/users/Stupremee/following{/other_user}", "gists_url": "https://api.github.com/users/Stupremee/gists{/gist_id}", "starred_url": "https://api.github.com/users/Stupremee/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Stupremee/subscriptions", "organizations_url": "https://api.github.com/users/Stupremee/orgs", "repos_url": "https://api.github.com/users/Stupremee/repos", "events_url": "https://api.github.com/users/Stupremee/events{/privacy}", "received_events_url": "https://api.github.com/users/Stupremee/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1f65f56461fa72df809fff43975a7e72f08fda44", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f65f56461fa72df809fff43975a7e72f08fda44", "html_url": "https://github.com/rust-lang/rust/commit/1f65f56461fa72df809fff43975a7e72f08fda44"}], "stats": {"total": 233, "additions": 117, "deletions": 116}, "files": [{"sha": "ebab3add6c55dd96ad642ec0c81be2b01a35961c", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -353,12 +353,7 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                     let (poly_trait, output) =\n                         (data.0.as_ref().expect(\"as_ref failed\").clone(), data.1.as_ref().cloned());\n                     let new_ty = match poly_trait.trait_ {\n-                        Type::ResolvedPath {\n-                            ref path,\n-                            ref param_names,\n-                            ref did,\n-                            ref is_generic,\n-                        } => {\n+                        Type::ResolvedPath { ref path, ref did, ref is_generic } => {\n                             let mut new_path = path.clone();\n                             let last_segment =\n                                 new_path.segments.pop().expect(\"segments were empty\");\n@@ -395,7 +390,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n \n                             Type::ResolvedPath {\n                                 path: new_path,\n-                                param_names: param_names.clone(),\n                                 did: *did,\n                                 is_generic: *is_generic,\n                             }\n@@ -570,7 +564,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                             match **trait_ {\n                                 Type::ResolvedPath {\n                                     path: ref trait_path,\n-                                    ref param_names,\n                                     ref did,\n                                     ref is_generic,\n                                 } => {\n@@ -617,7 +610,6 @@ impl<'a, 'tcx> AutoTraitFinder<'a, 'tcx> {\n                                         PolyTrait {\n                                             trait_: Type::ResolvedPath {\n                                                 path: new_trait_path,\n-                                                param_names: param_names.clone(),\n                                                 did: *did,\n                                                 is_generic: *is_generic,\n                                             },"}, {"sha": "fea09b383c0b181483a00a29fabb4d6c562d1825", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 26, "deletions": 58, "changes": 84, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -180,7 +180,7 @@ impl Clean<Type> for (ty::TraitRef<'_>, &[TypeBinding]) {\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n \n-        ResolvedPath { path, param_names: None, did: trait_ref.def_id, is_generic: false }\n+        ResolvedPath { path, did: trait_ref.def_id, is_generic: false }\n     }\n }\n \n@@ -1378,30 +1378,9 @@ impl Clean<Type> for hir::Ty<'_> {\n             }\n             TyKind::Path(_) => clean_qpath(&self, cx),\n             TyKind::TraitObject(ref bounds, ref lifetime, _) => {\n-                let cleaned = bounds[0].clean(cx);\n-                match cleaned.trait_ {\n-                    ResolvedPath { path, param_names: None, did, is_generic, .. } => {\n-                        let mut bounds: Vec<self::GenericBound> = bounds[1..]\n-                            .iter()\n-                            .map(|bound| {\n-                                self::GenericBound::TraitBound(\n-                                    bound.clean(cx),\n-                                    hir::TraitBoundModifier::None,\n-                                )\n-                            })\n-                            .collect();\n-                        if !lifetime.is_elided() {\n-                            bounds.push(self::GenericBound::Outlives(lifetime.clean(cx)));\n-                        }\n-                        ResolvedPath {\n-                            path,\n-                            param_names: Some((bounds, cleaned.generic_params)),\n-                            did,\n-                            is_generic,\n-                        }\n-                    }\n-                    _ => Infer, // shouldn't happen\n-                }\n+                let bounds = bounds.iter().map(|bound| bound.clean(cx)).collect();\n+                let lifetime = if !lifetime.is_elided() { Some(lifetime.clean(cx)) } else { None };\n+                DynTrait(bounds, lifetime)\n             }\n             TyKind::BareFn(ref barefn) => BareFunction(box barefn.clean(cx)),\n             TyKind::Infer | TyKind::Err => Infer,\n@@ -1484,7 +1463,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n                 let path = external_path(cx, cx.tcx.item_name(did), None, false, vec![], substs);\n-                ResolvedPath { path, param_names: None, did, is_generic: false }\n+                ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Foreign(did) => {\n                 inline::record_extern_fqn(cx, did, ItemType::ForeignType);\n@@ -1496,7 +1475,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     vec![],\n                     InternalSubsts::empty(),\n                 );\n-                ResolvedPath { path, param_names: None, did, is_generic: false }\n+                ResolvedPath { path, did, is_generic: false }\n             }\n             ty::Dynamic(ref obj, ref reg) => {\n                 // HACK: pick the first `did` as the `did` of the trait object. Someone\n@@ -1514,28 +1493,19 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 inline::record_extern_fqn(cx, did, ItemType::Trait);\n \n-                let mut param_names = vec![];\n-                if let Some(b) = reg.clean(cx) {\n-                    param_names.push(GenericBound::Outlives(b));\n-                }\n+                let lifetime = reg.clean(cx);\n+                let mut bounds = vec![];\n+\n                 for did in dids {\n                     let empty = cx.tcx.intern_substs(&[]);\n                     let path =\n                         external_path(cx, cx.tcx.item_name(did), Some(did), false, vec![], empty);\n                     inline::record_extern_fqn(cx, did, ItemType::Trait);\n-                    let bound = GenericBound::TraitBound(\n-                        PolyTrait {\n-                            trait_: ResolvedPath {\n-                                path,\n-                                param_names: None,\n-                                did,\n-                                is_generic: false,\n-                            },\n-                            generic_params: Vec::new(),\n-                        },\n-                        hir::TraitBoundModifier::None,\n-                    );\n-                    param_names.push(bound);\n+                    let bound = PolyTrait {\n+                        trait_: ResolvedPath { path, did, is_generic: false },\n+                        generic_params: Vec::new(),\n+                    };\n+                    bounds.push(bound);\n                 }\n \n                 let mut bindings = vec![];\n@@ -1548,12 +1518,15 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n \n                 let path =\n                     external_path(cx, cx.tcx.item_name(did), Some(did), false, bindings, substs);\n-                ResolvedPath {\n-                    path,\n-                    param_names: Some((param_names, vec![])),\n-                    did,\n-                    is_generic: false,\n-                }\n+                bounds.insert(\n+                    0,\n+                    PolyTrait {\n+                        trait_: ResolvedPath { path, did, is_generic: false },\n+                        generic_params: Vec::new(),\n+                    },\n+                );\n+\n+                DynTrait(bounds, lifetime)\n             }\n             ty::Tuple(ref t) => {\n                 Tuple(t.iter().map(|t| t.expect_ty()).collect::<Vec<_>>().clean(cx))\n@@ -2257,14 +2230,9 @@ impl From<GenericBound> for SimpleBound {\n         match bound.clone() {\n             GenericBound::Outlives(l) => SimpleBound::Outlives(l),\n             GenericBound::TraitBound(t, mod_) => match t.trait_ {\n-                Type::ResolvedPath { path, param_names, .. } => SimpleBound::TraitBound(\n-                    path.segments,\n-                    param_names.map_or_else(Vec::new, |(v, _)| {\n-                        v.iter().map(|p| SimpleBound::from(p.clone())).collect()\n-                    }),\n-                    t.generic_params,\n-                    mod_,\n-                ),\n+                Type::ResolvedPath { path, .. } => {\n+                    SimpleBound::TraitBound(path.segments, Vec::new(), t.generic_params, mod_)\n+                }\n                 _ => panic!(\"Unexpected bound {:?}\", bound),\n             },\n         }"}, {"sha": "b78cabddef6b95cef8dfa500faa27a586878f324", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -1141,7 +1141,7 @@ impl GenericBound {\n         inline::record_extern_fqn(cx, did, ItemType::Trait);\n         GenericBound::TraitBound(\n             PolyTrait {\n-                trait_: ResolvedPath { path, param_names: None, did, is_generic: false },\n+                trait_: ResolvedPath { path, did, is_generic: false },\n                 generic_params: Vec::new(),\n             },\n             hir::TraitBoundModifier::Maybe,\n@@ -1407,13 +1407,12 @@ crate enum Type {\n     /// Structs/enums/traits (most that would be an `hir::TyKind::Path`).\n     ResolvedPath {\n         path: Path,\n-        /// If `param_names` is `Some`, this path is a trait object and the Vecs repsresent\n-        /// `(generic bounds, generic parameters)`\n-        param_names: Option<(Vec<GenericBound>, Vec<GenericParamDef>)>,\n         did: DefId,\n         /// `true` if is a `T::Name` path for associated types.\n         is_generic: bool,\n     },\n+    /// `dyn for<'a> Trait<'a> + Send + 'static`\n+    DynTrait(Vec<PolyTrait>, Option<Lifetime>),\n     /// For parameterized types, so the consumer of the JSON don't go\n     /// looking for types which don't exist anywhere.\n     Generic(Symbol),\n@@ -1600,6 +1599,7 @@ impl Type {\n     fn inner_def_id(&self, cache: Option<&Cache>) -> Option<DefId> {\n         let t: PrimitiveType = match *self {\n             ResolvedPath { did, .. } => return Some(did.into()),\n+            DynTrait(ref bounds, _) => return bounds[0].trait_.inner_def_id(cache),\n             Primitive(p) => return cache.and_then(|c| c.primitive_locations.get(&p).cloned()),\n             BorrowedRef { type_: box Generic(..), .. } => PrimitiveType::Reference,\n             BorrowedRef { ref type_, .. } => return type_.inner_def_id(cache),"}, {"sha": "3d056979780f43b0ab110767b0c6a161fa11804c", "filename": "src/librustdoc/clean/utils.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fclean%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Futils.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -2,7 +2,7 @@ use crate::clean::auto_trait::AutoTraitFinder;\n use crate::clean::blanket_impl::BlanketImplFinder;\n use crate::clean::{\n     inline, Clean, Crate, Generic, GenericArg, GenericArgs, ImportSource, Item, ItemKind, Lifetime,\n-    Path, PathSegment, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n+    Path, PathSegment, PolyTrait, Primitive, PrimitiveType, ResolvedPath, Type, TypeBinding,\n };\n use crate::core::DocContext;\n use crate::formats::item_type::ItemType;\n@@ -163,8 +163,18 @@ pub(super) fn external_path(\n \n crate fn strip_type(ty: Type) -> Type {\n     match ty {\n-        Type::ResolvedPath { path, param_names, did, is_generic } => {\n-            Type::ResolvedPath { path: strip_path(&path), param_names, did, is_generic }\n+        Type::ResolvedPath { path, did, is_generic } => {\n+            Type::ResolvedPath { path: strip_path(&path), did, is_generic }\n+        }\n+        Type::DynTrait(mut bounds, lt) => {\n+            let first = bounds.remove(0);\n+            let stripped_trait = strip_type(first.trait_);\n+\n+            bounds.insert(\n+                0,\n+                PolyTrait { trait_: stripped_trait, generic_params: first.generic_params },\n+            );\n+            Type::DynTrait(bounds, lt)\n         }\n         Type::Tuple(inner_tys) => {\n             Type::Tuple(inner_tys.iter().map(|t| strip_type(t.clone())).collect())\n@@ -431,7 +441,7 @@ crate fn resolve_type(cx: &mut DocContext<'_>, path: Path, id: hir::HirId) -> Ty\n         _ => false,\n     };\n     let did = register_res(cx, path.res);\n-    ResolvedPath { path, param_names: None, did, is_generic }\n+    ResolvedPath { path, did, is_generic }\n }\n \n crate fn get_auto_trait_and_blanket_impls("}, {"sha": "fb6ecca4c8928f36db46046235eb8ba756fd675e", "filename": "src/librustdoc/formats/cache.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fformats%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fformats%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fformats%2Fcache.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -402,6 +402,15 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                         self.cache.parent_stack.push(did);\n                         true\n                     }\n+                    clean::DynTrait(ref bounds, _)\n+                    | clean::BorrowedRef { type_: box clean::DynTrait(ref bounds, _), .. } => {\n+                        if let Some(did) = bounds[0].trait_.def_id() {\n+                            self.cache.parent_stack.push(did);\n+                            true\n+                        } else {\n+                            false\n+                        }\n+                    }\n                     ref t => {\n                         let prim_did = t\n                             .primitive_type()\n@@ -432,6 +441,12 @@ impl<'a, 'tcx> DocFolder for CacheBuilder<'a, 'tcx> {\n                 | clean::BorrowedRef { type_: box clean::ResolvedPath { did, .. }, .. } => {\n                     dids.insert(did);\n                 }\n+                clean::DynTrait(ref bounds, _)\n+                | clean::BorrowedRef { type_: box clean::DynTrait(ref bounds, _), .. } => {\n+                    if let Some(did) = bounds[0].trait_.def_id() {\n+                        dids.insert(did);\n+                    }\n+                }\n                 ref t => {\n                     let did = t\n                         .primitive_type()"}, {"sha": "404af8f1aed5ec902de30e0854b7c0e815a543d4", "filename": "src/librustdoc/html/format.rs", "status": "modified", "additions": 23, "deletions": 37, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fhtml%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fformat.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -646,18 +646,24 @@ fn primitive_link(\n \n /// Helper to render type parameters\n fn tybounds<'a, 'tcx: 'a>(\n-    param_names: Option<&'a Vec<clean::GenericBound>>,\n+    bounds: &'a Vec<clean::PolyTrait>,\n+    lt: &'a Option<clean::Lifetime>,\n     cx: &'a Context<'tcx>,\n ) -> impl fmt::Display + 'a + Captures<'tcx> {\n-    display_fn(move |f| match param_names {\n-        Some(params) => {\n-            for param in params {\n+    display_fn(move |f| {\n+        for (i, bound) in bounds.iter().enumerate() {\n+            if i > 0 {\n                 write!(f, \" + \")?;\n-                fmt::Display::fmt(&param.print(cx), f)?;\n             }\n-            Ok(())\n+\n+            fmt::Display::fmt(&bound.print(cx), f)?;\n         }\n-        None => Ok(()),\n+\n+        if let Some(lt) = lt {\n+            write!(f, \" + \")?;\n+            fmt::Display::fmt(&lt.print(), f)?;\n+        }\n+        Ok(())\n     })\n }\n \n@@ -694,32 +700,13 @@ fn fmt_type<'cx>(\n \n     match *t {\n         clean::Generic(name) => write!(f, \"{}\", name),\n-        clean::ResolvedPath { did, ref param_names, ref path, is_generic } => {\n-            let generic_params = param_names.as_ref().map(|(_, x)| x);\n-            let param_names = param_names.as_ref().map(|(x, _)| x);\n-\n-            if let Some(generic_params) = generic_params {\n-                f.write_str(\"dyn \")?;\n-\n-                if !generic_params.is_empty() {\n-                    if f.alternate() {\n-                        write!(\n-                            f,\n-                            \"for<{:#}> \",\n-                            comma_sep(generic_params.iter().map(|g| g.print(cx)))\n-                        )?;\n-                    } else {\n-                        write!(\n-                            f,\n-                            \"for&lt;{}&gt; \",\n-                            comma_sep(generic_params.iter().map(|g| g.print(cx)))\n-                        )?;\n-                    }\n-                }\n-            }\n+        clean::ResolvedPath { did, ref path, is_generic } => {\n             // Paths like `T::Output` and `Self::Output` should be rendered with all segments.\n-            resolved_path(f, did, path, is_generic, use_absolute, cx)?;\n-            fmt::Display::fmt(&tybounds(param_names, cx), f)\n+            resolved_path(f, did, path, is_generic, use_absolute, cx)\n+        }\n+        clean::DynTrait(ref bounds, ref lt) => {\n+            f.write_str(\"dyn \")?;\n+            fmt::Display::fmt(&tybounds(bounds, lt, cx), f)\n         }\n         clean::Infer => write!(f, \"_\"),\n         clean::Primitive(prim) => primitive_link(f, prim, &*prim.as_sym().as_str(), cx),\n@@ -854,7 +841,9 @@ fn fmt_type<'cx>(\n                         }\n                     }\n                 }\n-                clean::ResolvedPath { param_names: Some((ref v, _)), .. } if !v.is_empty() => {\n+                clean::DynTrait(ref bounds, ref trait_lt)\n+                    if bounds.len() > 1 || trait_lt.is_some() =>\n+                {\n                     write!(f, \"{}{}{}(\", amp, lt, m)?;\n                     fmt_type(&ty, f, use_absolute, cx)?;\n                     write!(f, \")\")\n@@ -915,7 +904,7 @@ fn fmt_type<'cx>(\n                 //        the ugliness comes from inlining across crates where\n                 //        everything comes in as a fully resolved QPath (hard to\n                 //        look at).\n-                box clean::ResolvedPath { did, ref param_names, .. } => {\n+                box clean::ResolvedPath { did, .. } => {\n                     match href(did.into(), cx) {\n                         Some((ref url, _, ref path)) if !f.alternate() => {\n                             write!(\n@@ -930,9 +919,6 @@ fn fmt_type<'cx>(\n                         }\n                         _ => write!(f, \"{}\", name)?,\n                     }\n-\n-                    // FIXME: `param_names` are not rendered, and this seems bad?\n-                    drop(param_names);\n                     Ok(())\n                 }\n                 _ => write!(f, \"{}\", name),"}, {"sha": "78b2f1e251309765deed6de87a9e17ab3f422fc8", "filename": "src/librustdoc/html/render/cache.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender%2Fcache.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -233,6 +233,7 @@ fn get_index_type_name(clean_type: &clean::Type, accept_generic: bool) -> Option\n             });\n             Some(path_segment.name)\n         }\n+        clean::DynTrait(ref bounds, _) => get_index_type_name(&bounds[0].trait_, accept_generic),\n         clean::Generic(s) if accept_generic => Some(s),\n         clean::Primitive(ref p) => Some(p.as_sym()),\n         clean::BorrowedRef { ref type_, .. } => get_index_type_name(type_, accept_generic),"}, {"sha": "b89a266a695e99e752cca3bd0cfa123cd094fdbe", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 25, "deletions": 4, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -373,14 +373,35 @@ impl FromWithTcx<clean::Type> for Type {\n     fn from_tcx(ty: clean::Type, tcx: TyCtxt<'_>) -> Self {\n         use clean::Type::*;\n         match ty {\n-            ResolvedPath { path, param_names, did, is_generic: _ } => Type::ResolvedPath {\n+            ResolvedPath { path, did, is_generic: _ } => Type::ResolvedPath {\n                 name: path.whole_name(),\n                 id: from_def_id(did.into()),\n                 args: path.segments.last().map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n-                param_names: param_names\n-                    .map(|(v, _)| v.into_iter().map(|x| x.into_tcx(tcx)).collect())\n-                    .unwrap_or_default(),\n+                param_names: Vec::new(),\n             },\n+            DynTrait(mut bounds, lt) => {\n+                let (path, id) = match bounds.remove(0).trait_ {\n+                    ResolvedPath { path, did, .. } => (path, did),\n+                    _ => unreachable!(),\n+                };\n+\n+                Type::ResolvedPath {\n+                    name: path.whole_name(),\n+                    id: from_def_id(id.into()),\n+                    args: path\n+                        .segments\n+                        .last()\n+                        .map(|args| Box::new(args.clone().args.into_tcx(tcx))),\n+                    param_names: bounds\n+                        .into_iter()\n+                        .map(|t| {\n+                            clean::GenericBound::TraitBound(t, rustc_hir::TraitBoundModifier::None)\n+                        })\n+                        .chain(lt.into_iter().map(|lt| clean::GenericBound::Outlives(lt)))\n+                        .map(|bound| bound.into_tcx(tcx))\n+                        .collect(),\n+                }\n+            }\n             Generic(s) => Type::Generic(s.to_string()),\n             Primitive(p) => Type::Primitive(p.as_sym().to_string()),\n             BareFunction(f) => Type::FunctionPointer(Box::new((*f).into_tcx(tcx))),"}, {"sha": "41940b0884e4307a9312d373eba97d87a0d2960d", "filename": "src/test/rustdoc/higher-ranked-trait-bounds.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4ea27484c9582389cded2301d1f0dd4f421c8c35/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhigher-ranked-trait-bounds.rs?ref=4ea27484c9582389cded2301d1f0dd4f421c8c35", "patch": "@@ -51,3 +51,11 @@ pub trait B<'x> {}\n \n // @has - '//code[@class=\"in-band\"]' \"impl<'a> B<'a> for dyn for<'b> Trait<'b>\"\n impl<'a> B<'a> for dyn for<'b> Trait<'b> {}\n+\n+// @has foo/struct.Bar.html\n+// @has - '//span[@id=\"structfield.bar\"]' \"bar: &'a (dyn for<'b> Trait<'b> + Unpin)\"\n+// @has - '//span[@id=\"structfield.baz\"]' \"baz: &'a (dyn Unpin + for<'b> Trait<'b>)\"\n+pub struct Bar<'a> {\n+    pub bar: &'a (dyn for<'b> Trait<'b> + Unpin),\n+    pub baz: &'a (dyn Unpin + for<'b> Trait<'b>),\n+}"}]}