{"sha": "4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiYjlhOGI0YWMyN2I0OGZiNzk4OWVmMjkwMGVjMTJhMGZhY2U0NzU=", "commit": {"author": {"name": "oyvindln", "email": "oyvindln@users.noreply.github.com", "date": "2017-08-01T17:17:33Z"}, "committer": {"name": "oyvindln", "email": "oyvindln@users.noreply.github.com", "date": "2017-08-01T17:31:50Z"}, "message": "Add an overflow check in the Iter::next() impl for Range<_>\n\nThis helps with vectorization in some cases, such as (0..u16::MAX).collect::<Vec<u16>>(),\n as LLVM is able to change the loop condition to use equality instead of less than", "tree": {"sha": "257af90900d1f7db99edb23a55a51e7f96d71390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/257af90900d1f7db99edb23a55a51e7f96d71390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "html_url": "https://github.com/rust-lang/rust/commit/4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4bb9a8b4ac27b48fb7989ef2900ec12a0face475/comments", "author": {"login": "oyvindln", "id": 8319210, "node_id": "MDQ6VXNlcjgzMTkyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8319210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyvindln", "html_url": "https://github.com/oyvindln", "followers_url": "https://api.github.com/users/oyvindln/followers", "following_url": "https://api.github.com/users/oyvindln/following{/other_user}", "gists_url": "https://api.github.com/users/oyvindln/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyvindln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyvindln/subscriptions", "organizations_url": "https://api.github.com/users/oyvindln/orgs", "repos_url": "https://api.github.com/users/oyvindln/repos", "events_url": "https://api.github.com/users/oyvindln/events{/privacy}", "received_events_url": "https://api.github.com/users/oyvindln/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oyvindln", "id": 8319210, "node_id": "MDQ6VXNlcjgzMTkyMTA=", "avatar_url": "https://avatars.githubusercontent.com/u/8319210?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oyvindln", "html_url": "https://github.com/oyvindln", "followers_url": "https://api.github.com/users/oyvindln/followers", "following_url": "https://api.github.com/users/oyvindln/following{/other_user}", "gists_url": "https://api.github.com/users/oyvindln/gists{/gist_id}", "starred_url": "https://api.github.com/users/oyvindln/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oyvindln/subscriptions", "organizations_url": "https://api.github.com/users/oyvindln/orgs", "repos_url": "https://api.github.com/users/oyvindln/repos", "events_url": "https://api.github.com/users/oyvindln/events{/privacy}", "received_events_url": "https://api.github.com/users/oyvindln/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2407516ff33d03d0e24c6a4268a5581e9bc8b4d", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2407516ff33d03d0e24c6a4268a5581e9bc8b4d", "html_url": "https://github.com/rust-lang/rust/commit/c2407516ff33d03d0e24c6a4268a5581e9bc8b4d"}], "stats": {"total": 13, "additions": 10, "deletions": 3}, "files": [{"sha": "73d518b570a113df576e597c906efa6068499d3d", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/4bb9a8b4ac27b48fb7989ef2900ec12a0face475/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4bb9a8b4ac27b48fb7989ef2900ec12a0face475/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=4bb9a8b4ac27b48fb7989ef2900ec12a0face475", "patch": "@@ -214,9 +214,16 @@ impl<A: Step> Iterator for ops::Range<A> {\n     #[inline]\n     fn next(&mut self) -> Option<A> {\n         if self.start < self.end {\n-            let mut n = self.start.add_one();\n-            mem::swap(&mut n, &mut self.start);\n-            Some(n)\n+            // We check for overflow here, even though it can't actually\n+            // happen. Adding this check does however help llvm vectorize loops\n+            // for some ranges that don't get vectorized otherwise,\n+            // and this won't actually result in an extra check in an optimized build.\n+            if let Some(mut n) = self.start.add_usize(1) {\n+                mem::swap(&mut n, &mut self.start);\n+                Some(n)\n+            } else {\n+                None\n+            }\n         } else {\n             None\n         }"}]}