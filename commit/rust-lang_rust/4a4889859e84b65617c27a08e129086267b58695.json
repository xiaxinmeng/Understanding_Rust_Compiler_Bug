{"sha": "4a4889859e84b65617c27a08e129086267b58695", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhNDg4OTg1OWU4NGI2NTYxN2MyN2EwOGUxMjkwODYyNjdiNTg2OTU=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-03T17:32:26Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2012-04-04T05:43:10Z"}, "message": "std: add localtime/gmtime support.", "tree": {"sha": "e9ef7852519d08de5cc3862c42e5645694ec3757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e9ef7852519d08de5cc3862c42e5645694ec3757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4a4889859e84b65617c27a08e129086267b58695", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4a4889859e84b65617c27a08e129086267b58695", "html_url": "https://github.com/rust-lang/rust/commit/4a4889859e84b65617c27a08e129086267b58695", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4a4889859e84b65617c27a08e129086267b58695/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "72444636d32b34743e14bbd25c3ffc579b881af8", "url": "https://api.github.com/repos/rust-lang/rust/commits/72444636d32b34743e14bbd25c3ffc579b881af8", "html_url": "https://github.com/rust-lang/rust/commit/72444636d32b34743e14bbd25c3ffc579b881af8"}], "stats": {"total": 304, "additions": 304, "deletions": 0}, "files": [{"sha": "e222a56bcec2e37182aec0ddacebcc36c79031e6", "filename": "src/libstd/time.rs", "status": "modified", "additions": 177, "deletions": 0, "changes": 177, "blob_url": "https://github.com/rust-lang/rust/blob/4a4889859e84b65617c27a08e129086267b58695/src%2Flibstd%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4a4889859e84b65617c27a08e129086267b58695/src%2Flibstd%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime.rs?ref=4a4889859e84b65617c27a08e129086267b58695", "patch": "@@ -1,7 +1,29 @@\n+import libc::{c_char, c_int, c_long, size_t, time_t};\n+import io::{reader, reader_util};\n+import result::{result, ok, err, extensions};\n+\n+export\n+    timespec,\n+    get_time,\n+    precise_time_ns,\n+    precise_time_s,\n+    tm,\n+    empty_tm,\n+    now,\n+    at,\n+    now_utc,\n+    at_utc;\n+\n #[abi = \"cdecl\"]\n native mod rustrt {\n     fn get_time(&sec: i64, &nsec: i32);\n     fn precise_time_ns(&ns: u64);\n+\n+    // FIXME: The i64 values can be passed by-val when #2064 is fixed.\n+    fn rust_gmtime(&&sec: i64, &&nsec: i32, &&result: tm);\n+    fn rust_localtime(&&sec: i64, &&nsec: i32, &result: tm);\n+    fn rust_timegm(&&tm: tm, &sec: i64);\n+    fn rust_mktime(&&tm: tm, &sec: i64);\n }\n \n #[doc = \"A record specifying a time value in seconds and microseconds.\"]\n@@ -36,6 +58,87 @@ fn precise_time_s() -> float {\n     ret (precise_time_ns() as float) / 1000000000.;\n }\n \n+type tm = {\n+    tm_sec: i32, // seconds after the minute [0-60]\n+    tm_min: i32, // minutes after the hour [0-59]\n+    tm_hour: i32, // hours after midnight [0-23]\n+    tm_mday: i32, // days of the month [1-31]\n+    tm_mon: i32, // months since January [0-11]\n+    tm_year: i32, // years since 1900\n+    tm_wday: i32, // days since Sunday [0-6]\n+    tm_yday: i32, // days since January 1 [0-365]\n+    tm_isdst: i32, // Daylight Savings Time flag\n+    tm_gmtoff: i32, // offset from UTC in seconds\n+    tm_zone: str, // timezone abbreviation\n+    tm_nsec: i32, // nanoseconds\n+};\n+\n+fn empty_tm() -> tm {\n+    {\n+        tm_sec: 0_i32,\n+        tm_min: 0_i32,\n+        tm_hour: 0_i32,\n+        tm_mday: 0_i32,\n+        tm_mon: 0_i32,\n+        tm_year: 0_i32,\n+        tm_wday: 0_i32,\n+        tm_yday: 0_i32,\n+        tm_isdst: 0_i32,\n+        tm_gmtoff: 0_i32,\n+        tm_zone: \"\",\n+        tm_nsec: 0_i32,\n+    }\n+}\n+\n+#[doc = \"Returns the specified time in UTC\"]\n+fn at_utc(clock: timespec) -> tm {\n+    let mut {sec, nsec} = clock;\n+    let mut tm = empty_tm();\n+    rustrt::rust_gmtime(sec, nsec, tm);\n+    tm\n+}\n+\n+#[doc = \"Returns the current time in UTC\"]\n+fn now_utc() -> tm {\n+    at_utc(get_time())\n+}\n+\n+#[doc = \"Returns the specified time in the local timezone\"]\n+fn at(clock: timespec) -> tm {\n+    let mut {sec, nsec} = clock;\n+    let mut tm = empty_tm();\n+    rustrt::rust_localtime(sec, nsec, tm);\n+    tm\n+}\n+\n+#[doc = \"Returns the current time in the local timezone\"]\n+fn now() -> tm {\n+    at(get_time())\n+}\n+\n+impl tm for tm {\n+    #[doc = \"Convert time to the seconds from January 1, 1970\"]\n+    fn to_timespec() -> timespec {\n+        let mut sec = 0i64;\n+        if self.tm_gmtoff == 0_i32 {\n+            rustrt::rust_timegm(self, sec);\n+        } else {\n+            rustrt::rust_mktime(self, sec);\n+        }\n+        { sec: sec, nsec: self.tm_nsec }\n+    }\n+\n+    #[doc = \"Convert time to the local timezone\"]\n+    fn to_local() -> tm {\n+        at(self.to_timespec())\n+    }\n+\n+    #[doc = \"Convert time to the UTC\"]\n+    fn to_utc() -> tm {\n+        at_utc(self.to_timespec())\n+    }\n+}\n+\n #[cfg(test)]\n mod tests {\n     import task;\n@@ -81,4 +184,78 @@ mod tests {\n         log(debug, \"ns2=\" + u64::str(ns2) + \" ns\");\n         assert ns2 >= ns1;\n     }\n+\n+    #[test]\n+    fn test_at_utc() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let utc = at_utc(time);\n+\n+        assert utc.tm_sec == 30_i32;\n+        assert utc.tm_min == 31_i32;\n+        assert utc.tm_hour == 23_i32;\n+        assert utc.tm_mday == 13_i32;\n+        assert utc.tm_mon == 1_i32;\n+        assert utc.tm_year == 109_i32;\n+        assert utc.tm_wday == 5_i32;\n+        assert utc.tm_yday == 43_i32;\n+        assert utc.tm_isdst == 0_i32;\n+        assert utc.tm_gmtoff == 0_i32;\n+        assert utc.tm_zone == \"UTC\";\n+        assert utc.tm_nsec == 54321_i32;\n+    }\n+\n+    #[test]\n+    fn test_at() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let local = at(time);\n+\n+        assert local.tm_sec == 30_i32;\n+        assert local.tm_min == 31_i32;\n+        assert local.tm_hour == 15_i32;\n+        assert local.tm_mday == 13_i32;\n+        assert local.tm_mon == 1_i32;\n+        assert local.tm_year == 109_i32;\n+        assert local.tm_wday == 5_i32;\n+        assert local.tm_yday == 43_i32;\n+        assert local.tm_isdst == 0_i32;\n+        assert local.tm_gmtoff == -28800_i32;\n+\n+        // FIXME: We should probably standardize on the timezone\n+        // abbreviation.\n+        let zone = local.tm_zone;\n+        assert zone == \"PST\" || zone == \"Pacific Standard Time\";\n+\n+        assert local.tm_nsec == 54321_i32;\n+    }\n+\n+    #[test]\n+    fn test_to_timespec() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let utc = at_utc(time);\n+\n+        assert utc.to_timespec() == time;\n+        assert utc.to_local().to_timespec() == time;\n+    }\n+\n+    #[test]\n+    fn test_conversions() {\n+        os::setenv(\"TZ\", \"America/Los_Angeles\");\n+\n+        let time = { sec: 1234567890_i64, nsec: 54321_i32 };\n+        let utc = at_utc(time);\n+        let local = at(time);\n+\n+        assert local.to_local() == local;\n+        assert local.to_utc() == utc;\n+        assert local.to_utc().to_local() == local;\n+        assert utc.to_utc() == utc;\n+        assert utc.to_local() == local;\n+        assert utc.to_local().to_utc() == utc;\n+    }\n }"}, {"sha": "9c2e2c3276c16a6dacc0b5ee3dcd732db8be2d32", "filename": "src/rt/rust_builtin.cpp", "status": "modified", "additions": 123, "deletions": 0, "changes": 123, "blob_url": "https://github.com/rust-lang/rust/blob/4a4889859e84b65617c27a08e129086267b58695/src%2Frt%2Frust_builtin.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4a4889859e84b65617c27a08e129086267b58695/src%2Frt%2Frust_builtin.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_builtin.cpp?ref=4a4889859e84b65617c27a08e129086267b58695", "patch": "@@ -8,6 +8,8 @@\n #include \"rust_abi.h\"\n #include \"rust_port.h\"\n \n+#include <time.h>\n+\n #ifdef __APPLE__\n #include <crt_externs.h>\n #endif\n@@ -448,6 +450,127 @@ precise_time_ns(uint64_t *ns) {\n     *ns = t.time_ns();\n }\n \n+struct rust_tm {\n+    int32_t tm_sec;\n+    int32_t tm_min;\n+    int32_t tm_hour;\n+    int32_t tm_mday;\n+    int32_t tm_mon;\n+    int32_t tm_year;\n+    int32_t tm_wday;\n+    int32_t tm_yday;\n+    int32_t tm_isdst;\n+    int32_t tm_gmtoff;\n+    rust_str *tm_zone;\n+    int32_t tm_nsec;\n+};\n+\n+void rust_tm_to_tm(rust_tm* in_tm, tm* out_tm) {\n+    memset(out_tm, 0, sizeof(tm));\n+    out_tm->tm_sec = in_tm->tm_sec;\n+    out_tm->tm_min = in_tm->tm_min;\n+    out_tm->tm_hour = in_tm->tm_hour;\n+    out_tm->tm_mday = in_tm->tm_mday;\n+    out_tm->tm_mon = in_tm->tm_mon;\n+    out_tm->tm_year = in_tm->tm_year;\n+    out_tm->tm_wday = in_tm->tm_wday;\n+    out_tm->tm_yday = in_tm->tm_yday;\n+    out_tm->tm_isdst = in_tm->tm_isdst;\n+}\n+\n+void tm_to_rust_tm(tm* in_tm, rust_tm* out_tm, int32_t gmtoff,\n+                   const char *zone, int32_t nsec) {\n+    out_tm->tm_sec = in_tm->tm_sec;\n+    out_tm->tm_min = in_tm->tm_min;\n+    out_tm->tm_hour = in_tm->tm_hour;\n+    out_tm->tm_mday = in_tm->tm_mday;\n+    out_tm->tm_mon = in_tm->tm_mon;\n+    out_tm->tm_year = in_tm->tm_year;\n+    out_tm->tm_wday = in_tm->tm_wday;\n+    out_tm->tm_yday = in_tm->tm_yday;\n+    out_tm->tm_isdst = in_tm->tm_isdst;\n+    out_tm->tm_gmtoff = gmtoff;\n+    out_tm->tm_nsec = nsec;\n+\n+    if (zone != NULL) {\n+        size_t size = strlen(zone);\n+        str_reserve_shared(&out_tm->tm_zone, size);\n+        memcpy(out_tm->tm_zone->data, zone, size);\n+        out_tm->tm_zone->fill = size + 1;\n+        out_tm->tm_zone->data[size] = '\\0';\n+    }\n+}\n+\n+#if defined(__WIN32__)\n+#define TZSET() _tzset()\n+#if defined(_MSC_VER) && (_MSC_VER >= 1400)\n+#define GMTIME(clock, result) gmtime_s((result), (clock))\n+#define LOCALTIME(clock, result) localtime_s((result), (clock))\n+#define TIMEGM(result) _mkgmtime64(result)\n+#else\n+struct tm* GMTIME(const time_t *clock, tm *result) {\n+    struct tm* t = gmtime(clock);\n+    if (t == NULL || result == NULL) { return NULL; }\n+    *result = *t;\n+    return result;\n+}\n+struct tm* LOCALTIME(const time_t *clock, tm *result) {\n+    struct tm* t = localtime(clock);\n+    if (t == NULL || result == NULL) { return NULL; }\n+    *result = *t;\n+    return result;\n+}\n+#define TIMEGM(result) mktime((result)) - _timezone\n+#endif\n+#else\n+#define TZSET() tzset()\n+#define GMTIME(clock, result) gmtime_r((clock), (result))\n+#define LOCALTIME(clock, result) localtime_r((clock), (result))\n+#define TIMEGM(result) timegm(result)\n+#endif\n+\n+extern \"C\" CDECL void\n+rust_gmtime(int64_t *sec, int32_t *nsec, rust_tm *timeptr) {\n+    tm tm;\n+    time_t s = *sec;\n+    GMTIME(&s, &tm);\n+\n+    tm_to_rust_tm(&tm, timeptr, 0, \"UTC\", *nsec);\n+}\n+\n+extern \"C\" CDECL void\n+rust_localtime(int64_t *sec, int32_t *nsec, rust_tm *timeptr) {\n+    tm tm;\n+    TZSET();\n+    time_t s = *sec;\n+    LOCALTIME(&s, &tm);\n+\n+#if defined(__WIN32__)\n+    int32_t gmtoff = -timezone;\n+    char zone[64];\n+    strftime(zone, sizeof(zone), \"%Z\", &tm);\n+#else\n+    int32_t gmtoff = tm.tm_gmtoff;\n+    const char *zone = tm.tm_zone;\n+#endif\n+\n+    tm_to_rust_tm(&tm, timeptr, gmtoff, zone, *nsec);\n+}\n+\n+extern \"C\" CDECL void\n+rust_timegm(rust_tm* timeptr, int64_t *out) {\n+    tm t;\n+    rust_tm_to_tm(timeptr, &t);\n+    *out = TIMEGM(&t);\n+}\n+\n+extern \"C\" CDECL void\n+rust_mktime(rust_tm* timeptr, int64_t *out) {\n+    tm t;\n+    rust_tm_to_tm(timeptr, &t);\n+    *out = mktime(&t);\n+}\n+\n extern \"C\" CDECL rust_sched_id\n rust_get_sched_id() {\n     rust_task *task = rust_get_current_task();"}, {"sha": "c392b7142e15a19ac6a323192ff3e78adc5db94c", "filename": "src/rt/rustrt.def.in", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4a4889859e84b65617c27a08e129086267b58695/src%2Frt%2Frustrt.def.in", "raw_url": "https://github.com/rust-lang/rust/raw/4a4889859e84b65617c27a08e129086267b58695/src%2Frt%2Frustrt.def.in", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frustrt.def.in?ref=4a4889859e84b65617c27a08e129086267b58695", "patch": "@@ -12,6 +12,10 @@ debug_abi_2\n get_port_id\n get_task_id\n get_time\n+rust_gmtime\n+rust_localtime\n+rust_timegm\n+rust_mktime\n last_os_error\n new_port\n new_task"}]}