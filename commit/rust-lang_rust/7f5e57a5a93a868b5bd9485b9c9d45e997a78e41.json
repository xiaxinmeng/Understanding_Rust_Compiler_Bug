{"sha": "7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmNWU1N2E1YTkzYTg2OGI1YmQ5NDg1YjljOWQ0NWU5OTdhNzhlNDE=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-20T02:34:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2013-12-26T21:01:26Z"}, "message": "librustc: De-`@mut` `supertraits` in the type context", "tree": {"sha": "69e330858fe97a1c93673d052f8f0eb9a7313c12", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/69e330858fe97a1c93673d052f8f0eb9a7313c12"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "html_url": "https://github.com/rust-lang/rust/commit/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "84e450347b00ca9a06b3f763fdebff8257e210e8", "url": "https://api.github.com/repos/rust-lang/rust/commits/84e450347b00ca9a06b3f763fdebff8257e210e8", "html_url": "https://github.com/rust-lang/rust/commit/84e450347b00ca9a06b3f763fdebff8257e210e8"}], "stats": {"total": 29, "additions": 18, "deletions": 11}, "files": [{"sha": "7148b83ccf85dd7e7a0f5e5c22663c57fa8c3c66", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 11, "deletions": 9, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "patch": "@@ -317,7 +317,7 @@ struct ctxt_ {\n     lang_items: middle::lang_items::LanguageItems,\n     // A mapping of fake provided method def_ids to the default implementation\n     provided_method_sources: RefCell<HashMap<ast::DefId, ast::DefId>>,\n-    supertraits: @mut HashMap<ast::DefId, @~[@TraitRef]>,\n+    supertraits: RefCell<HashMap<ast::DefId, @~[@TraitRef]>>,\n \n     // Maps from def-id of a type or region parameter to its\n     // (inferred) variance.\n@@ -1006,7 +1006,7 @@ pub fn mk_ctxt(s: session::Session,\n         normalized_cache: new_ty_hash(),\n         lang_items: lang_items,\n         provided_method_sources: RefCell::new(HashMap::new()),\n-        supertraits: @mut HashMap::new(),\n+        supertraits: RefCell::new(HashMap::new()),\n         destructor_for_type: @mut HashMap::new(),\n         destructors: @mut HashSet::new(),\n         trait_impls: @mut HashMap::new(),\n@@ -3552,13 +3552,14 @@ pub fn provided_trait_methods(cx: ctxt, id: ast::DefId) -> ~[@Method] {\n     }\n }\n \n-pub fn trait_supertraits(cx: ctxt,\n-                         id: ast::DefId) -> @~[@TraitRef]\n-{\n+pub fn trait_supertraits(cx: ctxt, id: ast::DefId) -> @~[@TraitRef] {\n     // Check the cache.\n-    match cx.supertraits.find(&id) {\n-        Some(&trait_refs) => { return trait_refs; }\n-        None => {}  // Continue.\n+    {\n+        let supertraits = cx.supertraits.borrow();\n+        match supertraits.get().find(&id) {\n+            Some(&trait_refs) => { return trait_refs; }\n+            None => {}  // Continue.\n+        }\n     }\n \n     // Not in the cache. It had better be in the metadata, which means it\n@@ -3568,7 +3569,8 @@ pub fn trait_supertraits(cx: ctxt,\n     // Get the supertraits out of the metadata and create the\n     // TraitRef for each.\n     let result = @csearch::get_supertraits(cx, id);\n-    cx.supertraits.insert(id, result);\n+    let mut supertraits = cx.supertraits.borrow_mut();\n+    supertraits.get().insert(id, result);\n     return result;\n }\n "}, {"sha": "cb7a9af4860ac9ccdc436ffad3e1711009ed0336", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f5e57a5a93a868b5bd9485b9c9d45e997a78e41/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=7f5e57a5a93a868b5bd9485b9c9d45e997a78e41", "patch": "@@ -401,7 +401,10 @@ pub fn ensure_supertraits(ccx: &CrateCtxt,\n \n     // Called only the first time trait_def_of_item is called.\n     // Supertraits are ensured at the same time.\n-    assert!(!tcx.supertraits.contains_key(&local_def(id)));\n+    {\n+        let supertraits = tcx.supertraits.borrow();\n+        assert!(!supertraits.get().contains_key(&local_def(id)));\n+    }\n \n     let self_ty = ty::mk_self(ccx.tcx, local_def(id));\n     let mut ty_trait_refs: ~[@ty::TraitRef] = ~[];\n@@ -425,7 +428,9 @@ pub fn ensure_supertraits(ccx: &CrateCtxt,\n             }\n         }\n     }\n-    tcx.supertraits.insert(local_def(id), @ty_trait_refs);\n+\n+    let mut supertraits = tcx.supertraits.borrow_mut();\n+    supertraits.get().insert(local_def(id), @ty_trait_refs);\n     bounds\n }\n "}]}