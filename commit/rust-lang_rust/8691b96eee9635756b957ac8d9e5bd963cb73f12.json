{"sha": "8691b96eee9635756b957ac8d9e5bd963cb73f12", "node_id": "C_kwDOAAsO6NoAKDg2OTFiOTZlZWU5NjM1NzU2Yjk1N2FjOGQ5ZTViZDk2M2NiNzNmMTI", "commit": {"author": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-09T11:05:46Z"}, "committer": {"name": "lcnr", "email": "rust@lcnr.de", "date": "2022-08-09T12:42:06Z"}, "message": "test implied bounds + nested proj oblig", "tree": {"sha": "7856b041baa7cea0336989c456df466d1b6c4fe2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7856b041baa7cea0336989c456df466d1b6c4fe2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8691b96eee9635756b957ac8d9e5bd963cb73f12", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8691b96eee9635756b957ac8d9e5bd963cb73f12", "html_url": "https://github.com/rust-lang/rust/commit/8691b96eee9635756b957ac8d9e5bd963cb73f12", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8691b96eee9635756b957ac8d9e5bd963cb73f12/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f25cb83296d0e5d78036d6086b6342604243d940", "url": "https://api.github.com/repos/rust-lang/rust/commits/f25cb83296d0e5d78036d6086b6342604243d940", "html_url": "https://github.com/rust-lang/rust/commit/f25cb83296d0e5d78036d6086b6342604243d940"}], "stats": {"total": 42, "additions": 42, "deletions": 0}, "files": [{"sha": "33b746c5edfb2ff7be4fa400bf24783bc05fce59", "filename": "src/test/ui/implied-bounds/assoc-ty-wf-used-to-get-assoc-ty.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/8691b96eee9635756b957ac8d9e5bd963cb73f12/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8691b96eee9635756b957ac8d9e5bd963cb73f12/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.rs?ref=8691b96eee9635756b957ac8d9e5bd963cb73f12", "patch": "@@ -0,0 +1,27 @@\n+// Test for a less than ideal interaction of implied bounds and normalization.\n+trait Tr {\n+    type Ty;\n+}\n+\n+impl<T: 'static> Tr for T {\n+    type Ty = &'static T;\n+}\n+\n+// `<&'a u8 as Tr>::Ty` should cause an error because `&'a u8: Tr` doesn't hold for\n+// all possible 'a. However, we consider normalized types for implied bounds.\n+//\n+// We normalize this projection to `&'static &'a u8` and add a nested `&'a u8: 'static`\n+// bound. This bound is then proven using the implied bounds for `&'static &'a u8` which\n+// we only get by normalizing in the first place.\n+fn test<'a>(x: &'a u8, _wf: <&'a u8 as Tr>::Ty) -> &'static u8 { x }\n+\n+fn main() {\n+    // This works as we have 'static references due to promotion.\n+    let _: &'static u8 = test(&3, &&3);\n+    // This causes an error because the projection requires 'a to be 'static.\n+    // It would be unsound if this compiled.\n+    let x: u8 = 3;\n+    let _: &'static u8 = test(&x, &&3);\n+    //~^ ERROR `x` does not live long enough\n+\n+}"}, {"sha": "d0249e74f39e966939434ac403c5ea4417e2740e", "filename": "src/test/ui/implied-bounds/assoc-ty-wf-used-to-get-assoc-ty.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/8691b96eee9635756b957ac8d9e5bd963cb73f12/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/8691b96eee9635756b957ac8d9e5bd963cb73f12/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimplied-bounds%2Fassoc-ty-wf-used-to-get-assoc-ty.stderr?ref=8691b96eee9635756b957ac8d9e5bd963cb73f12", "patch": "@@ -0,0 +1,15 @@\n+error[E0597]: `x` does not live long enough\n+  --> $DIR/assoc-ty-wf-used-to-get-assoc-ty.rs:24:31\n+   |\n+LL |     let _: &'static u8 = test(&x, &&3);\n+   |                          -----^^------\n+   |                          |    |\n+   |                          |    borrowed value does not live long enough\n+   |                          argument requires that `x` is borrowed for `'static`\n+...\n+LL | }\n+   | - `x` dropped here while still borrowed\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0597`."}]}