{"sha": "4c5d773b4d529c6263f682513ea34ce644a8179b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRjNWQ3NzNiNGQ1MjljNjI2M2Y2ODI1MTNlYTM0Y2U2NDRhODE3OWI=", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-05T08:00:22Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2019-06-06T11:04:02Z"}, "message": "syntax: Remove duplicate span from `token::Lifetime`", "tree": {"sha": "2d207a75d803063e4ee7a87ca55fb68af3bfe088", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2d207a75d803063e4ee7a87ca55fb68af3bfe088"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4c5d773b4d529c6263f682513ea34ce644a8179b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4c5d773b4d529c6263f682513ea34ce644a8179b", "html_url": "https://github.com/rust-lang/rust/commit/4c5d773b4d529c6263f682513ea34ce644a8179b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4c5d773b4d529c6263f682513ea34ce644a8179b/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e693531ffa55cfb0cececdf5d7203a6d400e828", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e693531ffa55cfb0cececdf5d7203a6d400e828", "html_url": "https://github.com/rust-lang/rust/commit/5e693531ffa55cfb0cececdf5d7203a6d400e828"}], "stats": {"total": 75, "additions": 39, "deletions": 36}, "files": [{"sha": "20d308e5fe87b6cbb8d1ef57bd214f9d57611682", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -357,7 +357,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for token::TokenKind {\n                 ident.name.hash_stable(hcx, hasher);\n                 is_raw.hash_stable(hcx, hasher);\n             }\n-            token::Lifetime(ident) => ident.name.hash_stable(hcx, hasher),\n+            token::Lifetime(name) => name.hash_stable(hcx, hasher),\n \n             token::Interpolated(_) => {\n                 bug!(\"interpolated tokens should not be present in the HIR\")"}, {"sha": "f93b548c5010604ab6e11e86964aa2b6eeadf240", "filename": "src/libsyntax/ext/tt/macro_parser.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Ftt%2Fmacro_parser.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -431,8 +431,8 @@ pub fn parse_failure_msg(tok: TokenKind) -> String {\n fn token_name_eq(t1: &TokenKind, t2: &TokenKind) -> bool {\n     if let (Some((id1, is_raw1)), Some((id2, is_raw2))) = (t1.ident(), t2.ident()) {\n         id1.name == id2.name && is_raw1 == is_raw2\n-    } else if let (Some(id1), Some(id2)) = (t1.lifetime(), t2.lifetime()) {\n-        id1.name == id2.name\n+    } else if let (Some(name1), Some(name2)) = (t1.lifetime_name(), t2.lifetime_name()) {\n+        name1 == name2\n     } else {\n         *t1 == *t2\n     }"}, {"sha": "3bb36605299fd0149f92e3213517fbebceaa2d6b", "filename": "src/libsyntax/mut_visit.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fmut_visit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fmut_visit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fmut_visit.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -599,7 +599,6 @@ pub fn noop_visit_tts<T: MutVisitor>(TokenStream(tts): &mut TokenStream, vis: &m\n pub fn noop_visit_token<T: MutVisitor>(t: &mut TokenKind, vis: &mut T) {\n     match t {\n         token::Ident(id, _is_raw) => vis.visit_ident(id),\n-        token::Lifetime(id) => vis.visit_ident(id),\n         token::Interpolated(nt) => {\n             let mut nt = Lrc::make_mut(nt);\n             vis.visit_interpolated(&mut nt);"}, {"sha": "da8c6f5ac2204078495f0bef687e418aa76c0146", "filename": "src/libsyntax/parse/lexer/mod.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Flexer%2Fmod.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -1041,13 +1041,6 @@ impl<'a> StringReader<'a> {\n                         return Ok(TokenKind::lit(token::Char, symbol, None));\n                     }\n \n-                    // Include the leading `'` in the real identifier, for macro\n-                    // expansion purposes. See #12512 for the gory details of why\n-                    // this is necessary.\n-                    let ident = self.with_str_from(start_with_quote, |lifetime_name| {\n-                        self.mk_ident(lifetime_name)\n-                    });\n-\n                     if starts_with_number {\n                         // this is a recovered lifetime written `'1`, error but accept it\n                         self.err_span_(\n@@ -1057,7 +1050,10 @@ impl<'a> StringReader<'a> {\n                         );\n                     }\n \n-                    return Ok(token::Lifetime(ident));\n+                    // Include the leading `'` in the real identifier, for macro\n+                    // expansion purposes. See #12512 for the gory details of why\n+                    // this is necessary.\n+                    return Ok(token::Lifetime(self.name_from(start_with_quote)));\n                 }\n                 let msg = \"unterminated character literal\";\n                 let symbol = self.scan_single_quoted_string(start_with_quote, msg);\n@@ -1690,7 +1686,7 @@ mod tests {\n             let sm = Lrc::new(SourceMap::new(FilePathMapping::empty()));\n             let sh = mk_sess(sm.clone());\n             assert_eq!(setup(&sm, &sh, \"'abc\".to_string()).next_token(),\n-                       token::Lifetime(Ident::from_str(\"'abc\")));\n+                       token::Lifetime(Symbol::intern(\"'abc\")));\n         })\n     }\n "}, {"sha": "362f81d02a0436050c7b1f818656b39b6d6e7db4", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -2652,7 +2652,7 @@ impl<'a> Parser<'a> {\n                 // and lifetime tokens, so the former are never encountered during normal parsing.\n                 match **nt {\n                     token::NtIdent(ident, is_raw) => Token::new(token::Ident(ident, is_raw), ident.span),\n-                    token::NtLifetime(ident) => Token::new(token::Lifetime(ident), ident.span),\n+                    token::NtLifetime(ident) => Token::new(token::Lifetime(ident.name), ident.span),\n                     _ => return,\n                 }\n             }\n@@ -3922,9 +3922,8 @@ impl<'a> Parser<'a> {\n                 // Parse &pat / &mut pat\n                 self.expect_and()?;\n                 let mutbl = self.parse_mutability();\n-                if let token::Lifetime(ident) = self.token.kind {\n-                    let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\",\n-                                                      ident));\n+                if let token::Lifetime(name) = self.token.kind {\n+                    let mut err = self.fatal(&format!(\"unexpected lifetime `{}` in pattern\", name));\n                     err.span_label(self.span, \"unexpected lifetime\");\n                     return Err(err);\n                 }"}, {"sha": "81c93a4179e36236f2b371fd5afab4d2eb7a47e7", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 26, "deletions": 17, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -12,7 +12,7 @@ use crate::symbol::kw;\n use crate::syntax::parse::parse_stream_from_source_str;\n use crate::tokenstream::{self, DelimSpan, TokenStream, TokenTree};\n \n-use syntax_pos::symbol::{self, Symbol};\n+use syntax_pos::symbol::Symbol;\n use syntax_pos::{self, Span, FileName, DUMMY_SP};\n use log::info;\n \n@@ -211,7 +211,7 @@ pub enum TokenKind {\n \n     /* Name components */\n     Ident(ast::Ident, /* is_raw */ bool),\n-    Lifetime(ast::Ident),\n+    Lifetime(ast::Name),\n \n     Interpolated(Lrc<Nonterminal>),\n \n@@ -364,7 +364,23 @@ impl TokenKind {\n             _            => false,\n         }\n     }\n+}\n+\n+impl Token {\n+    /// Returns a lifetime identifier if this token is a lifetime.\n+    pub fn lifetime(&self) -> Option<ast::Ident> {\n+        match self.kind {\n+            Lifetime(name) => Some(ast::Ident::new(name, self.span)),\n+            Interpolated(ref nt) => match **nt {\n+                NtLifetime(ident) => Some(ident),\n+                _ => None,\n+            },\n+            _ => None,\n+        }\n+    }\n+}\n \n+impl TokenKind {\n     /// Returns an identifier if this token is an identifier.\n     pub fn ident(&self) -> Option<(ast::Ident, /* is_raw */ bool)> {\n         match *self {\n@@ -376,12 +392,12 @@ impl TokenKind {\n             _ => None,\n         }\n     }\n-    /// Returns a lifetime identifier if this token is a lifetime.\n-    pub fn lifetime(&self) -> Option<ast::Ident> {\n+    /// Returns a lifetime name if this token is a lifetime.\n+    pub fn lifetime_name(&self) -> Option<ast::Name> {\n         match *self {\n-            Lifetime(ident) => Some(ident),\n+            Lifetime(name) => Some(name),\n             Interpolated(ref nt) => match **nt {\n-                NtLifetime(ident) => Some(ident),\n+                NtLifetime(ident) => Some(ident.name),\n                 _ => None,\n             },\n             _ => None,\n@@ -393,7 +409,7 @@ impl TokenKind {\n     }\n     /// Returns `true` if the token is a lifetime.\n     crate fn is_lifetime(&self) -> bool {\n-        self.lifetime().is_some()\n+        self.lifetime_name().is_some()\n     }\n \n     /// Returns `true` if the token is a identifier whose name is the given\n@@ -521,13 +537,7 @@ impl TokenKind {\n                 _ => return None,\n             },\n             SingleQuote => match joint {\n-                Ident(ident, false) => {\n-                    let name = Symbol::intern(&format!(\"'{}\", ident));\n-                    Lifetime(symbol::Ident {\n-                        name,\n-                        span: ident.span,\n-                    })\n-                }\n+                Ident(ident, false) => Lifetime(Symbol::intern(&format!(\"'{}\", ident))),\n                 _ => return None,\n             },\n \n@@ -597,7 +607,7 @@ impl TokenKind {\n \n             (&Literal(a), &Literal(b)) => a == b,\n \n-            (&Lifetime(a), &Lifetime(b)) => a.name == b.name,\n+            (&Lifetime(a), &Lifetime(b)) => a == b,\n             (&Ident(a, b), &Ident(c, d)) => b == d && (a.name == c.name ||\n                                                        a.name == kw::DollarCrate ||\n                                                        c.name == kw::DollarCrate),\n@@ -732,8 +742,7 @@ impl Nonterminal {\n                 Some(TokenTree::token(ident.span, token).into())\n             }\n             Nonterminal::NtLifetime(ident) => {\n-                let token = Lifetime(ident);\n-                Some(TokenTree::token(ident.span, token).into())\n+                Some(TokenTree::token(ident.span, Lifetime(ident.name)).into())\n             }\n             Nonterminal::NtTT(ref tt) => {\n                 Some(tt.clone().into())"}, {"sha": "6ab613d2abd718481a88c9b6ba9a4227e152d67c", "filename": "src/libsyntax_ext/proc_macro_server.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4c5d773b4d529c6263f682513ea34ce644a8179b/src%2Flibsyntax_ext%2Fproc_macro_server.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_ext%2Fproc_macro_server.rs?ref=4c5d773b4d529c6263f682513ea34ce644a8179b", "patch": "@@ -145,8 +145,8 @@ impl FromInternal<(TreeAndJoint, &'_ ParseSess, &'_ mut Vec<Self>)>\n             Ident(ident, false) if ident.name == kw::DollarCrate =>\n                 tt!(Ident::dollar_crate()),\n             Ident(ident, is_raw) => tt!(Ident::new(ident.name, is_raw)),\n-            Lifetime(ident) => {\n-                let ident = ident.without_first_quote();\n+            Lifetime(name) => {\n+                let ident = ast::Ident::new(name, span).without_first_quote();\n                 stack.push(tt!(Ident::new(ident.name, false)));\n                 tt!(Punct::new('\\'', true))\n             }"}]}