{"sha": "a8697f95659dae497c30f5ee4b73badd271cf77d", "node_id": "C_kwDOAAsO6NoAKGE4Njk3Zjk1NjU5ZGFlNDk3YzMwZjVlZTRiNzNiYWRkMjcxY2Y3N2Q", "commit": {"author": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-29T12:00:43Z"}, "committer": {"name": "bjorn3", "email": "17426603+bjorn3@users.noreply.github.com", "date": "2023-04-29T12:00:43Z"}, "message": "Merge commit 'ef07e8e60f994ec014d049a95591426fb92ebb79' into sync_cg_clif-2023-04-29", "tree": {"sha": "0a438b657b7dd8ef2b68629ff16be26fd873a3a0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0a438b657b7dd8ef2b68629ff16be26fd873a3a0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8697f95659dae497c30f5ee4b73badd271cf77d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8697f95659dae497c30f5ee4b73badd271cf77d", "html_url": "https://github.com/rust-lang/rust/commit/a8697f95659dae497c30f5ee4b73badd271cf77d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8697f95659dae497c30f5ee4b73badd271cf77d/comments", "author": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bjorn3", "id": 17426603, "node_id": "MDQ6VXNlcjE3NDI2NjAz", "avatar_url": "https://avatars.githubusercontent.com/u/17426603?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bjorn3", "html_url": "https://github.com/bjorn3", "followers_url": "https://api.github.com/users/bjorn3/followers", "following_url": "https://api.github.com/users/bjorn3/following{/other_user}", "gists_url": "https://api.github.com/users/bjorn3/gists{/gist_id}", "starred_url": "https://api.github.com/users/bjorn3/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bjorn3/subscriptions", "organizations_url": "https://api.github.com/users/bjorn3/orgs", "repos_url": "https://api.github.com/users/bjorn3/repos", "events_url": "https://api.github.com/users/bjorn3/events{/privacy}", "received_events_url": "https://api.github.com/users/bjorn3/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f2299490c11b0c53ece5f6a13dd092fc9c99d264", "url": "https://api.github.com/repos/rust-lang/rust/commits/f2299490c11b0c53ece5f6a13dd092fc9c99d264", "html_url": "https://github.com/rust-lang/rust/commit/f2299490c11b0c53ece5f6a13dd092fc9c99d264"}, {"sha": "ef07e8e60f994ec014d049a95591426fb92ebb79", "url": "https://api.github.com/repos/rust-lang/rust/commits/ef07e8e60f994ec014d049a95591426fb92ebb79", "html_url": "https://github.com/rust-lang/rust/commit/ef07e8e60f994ec014d049a95591426fb92ebb79"}], "stats": {"total": 2134, "additions": 1464, "deletions": 670}, "files": [{"sha": "c70ba8f495387012782acf740be67aa5d14eadf8", "filename": "compiler/rustc_codegen_cranelift/.github/actions/github-release/README.md", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2FREADME.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2FREADME.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2FREADME.md?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -0,0 +1,18 @@\n+# github-release\n+\n+An action used to publish GitHub releases for `wasmtime`.\n+\n+As of the time of this writing there's a few actions floating around which\n+perform github releases but they all tend to have their set of drawbacks.\n+Additionally nothing handles deleting releases which we need for our rolling\n+`dev` release.\n+\n+To handle all this this action rolls-its-own implementation using the\n+actions/toolkit repository and packages published there. These run in a Docker\n+container and take various inputs to orchestrate the release from the build.\n+\n+More comments can be found in `main.js`.\n+\n+Testing this is really hard. If you want to try though run `npm install` and\n+then `node main.js`. You'll have to configure a bunch of env vars though to get\n+anything reasonably working."}, {"sha": "36e5209f50c3b8aa0cb441bfd159673f5c32e4f1", "filename": "compiler/rustc_codegen_cranelift/.github/actions/github-release/action.yml", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Faction.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Faction.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Faction.yml?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -0,0 +1,13 @@\n+# SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+name: 'rustc_codegen_cranelift github releases'\n+description: 'rustc_codegen_cranelift github releases'\n+inputs:\n+  token:\n+    description: ''\n+    required: true\n+  files:\n+    description: ''\n+    required: true\n+runs:\n+  using: 'node16'\n+  main: 'main.js'"}, {"sha": "6fcfca34ea7766ab8096465f89010bb4fec8584f", "filename": "compiler/rustc_codegen_cranelift/.github/actions/github-release/main.js", "status": "added", "additions": 162, "deletions": 0, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fmain.js", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fmain.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fmain.js?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -0,0 +1,162 @@\n+// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception\n+\n+const core = require('@actions/core');\n+const path = require(\"path\");\n+const fs = require(\"fs\");\n+const github = require('@actions/github');\n+const glob = require('glob');\n+\n+function sleep(milliseconds) {\n+  return new Promise(resolve => setTimeout(resolve, milliseconds))\n+}\n+\n+async function runOnce() {\n+  // Load all our inputs and env vars. Note that `getInput` reads from `INPUT_*`\n+  const files = core.getInput('files');\n+  const token = core.getInput('token');\n+  const slug = process.env.GITHUB_REPOSITORY;\n+  const owner = slug.split('/')[0];\n+  const repo = slug.split('/')[1];\n+  const sha = process.env.GITHUB_SHA;\n+  let name = 'dev';\n+  if (process.env.GITHUB_REF.startsWith('refs/tags/v')) {\n+    name = process.env.GITHUB_REF.substring(10);\n+  }\n+\n+  core.info(`files: ${files}`);\n+  core.info(`name: ${name}`);\n+  core.info(`token: ${token}`);\n+\n+  const octokit = github.getOctokit(token);\n+\n+  // For the `dev` release we may need to update the tag to point to the new\n+  // commit on this branch. All other names should already have tags associated\n+  // with them.\n+  if (name == 'dev') {\n+    let tag = null;\n+    try {\n+      tag = await octokit.request(\"GET /repos/:owner/:repo/git/refs/tags/:name\", { owner, repo, name });\n+      core.info(`found existing tag`);\n+      console.log(\"tag: \", JSON.stringify(tag.data, null, 2));\n+    } catch (e) {\n+      // ignore if this tag doesn't exist\n+      core.info(`no existing tag found`);\n+    }\n+\n+    if (tag === null || tag.data.object.sha !== sha) {\n+      core.info(`updating existing tag or creating new one`);\n+\n+      try {\n+        core.info(`updating dev tag`);\n+        await octokit.rest.git.updateRef({\n+          owner,\n+          repo,\n+          ref: 'tags/dev',\n+          sha,\n+          force: true,\n+        });\n+      } catch (e) {\n+        console.log(\"ERROR: \", JSON.stringify(e.data, null, 2));\n+        core.info(`creating dev tag`);\n+        try {\n+          await octokit.rest.git.createRef({\n+            owner,\n+            repo,\n+            ref: 'refs/tags/dev',\n+            sha,\n+          });\n+        } catch (e) {\n+          // we might race with others, so assume someone else has created the\n+          // tag by this point.\n+          console.log(\"failed to create tag: \", JSON.stringify(e.data, null, 2));\n+        }\n+      }\n+\n+      console.log(\"double-checking tag is correct\");\n+      tag = await octokit.request(\"GET /repos/:owner/:repo/git/refs/tags/:name\", { owner, repo, name });\n+      if (tag.data.object.sha !== sha) {\n+        console.log(\"tag: \", JSON.stringify(tag.data, null, 2));\n+        throw new Error(\"tag didn't work\");\n+      }\n+    } else {\n+      core.info(`existing tag works`);\n+    }\n+  }\n+\n+  // Delete a previous release\n+  try {\n+    core.info(`fetching release`);\n+    let release = await octokit.rest.repos.getReleaseByTag({ owner, repo, tag: name });\n+    console.log(\"found release: \", JSON.stringify(release.data, null, 2));\n+    await octokit.rest.repos.deleteRelease({\n+      owner,\n+      repo,\n+      release_id: release.data.id,\n+    });\n+    console.log(\"deleted release\");\n+  } catch (e) {\n+    console.log(\"ERROR: \", JSON.stringify(e, null, 2));\n+  }\n+\n+  console.log(\"creating a release\");\n+  let release = await octokit.rest.repos.createRelease({\n+    owner,\n+    repo,\n+    tag_name: name,\n+    prerelease: name === 'dev',\n+  });\n+\n+  // Delete all assets from a previous run\n+  for (const asset of release.data.assets) {\n+    console.log(`deleting prior asset ${asset.id}`);\n+    await octokit.rest.repos.deleteReleaseAsset({\n+      owner,\n+      repo,\n+      asset_id: asset.id,\n+    });\n+  }\n+\n+  // Upload all the relevant assets for this release as just general blobs.\n+  for (const file of glob.sync(files)) {\n+    const size = fs.statSync(file).size;\n+    const name = path.basename(file);\n+    core.info(`upload ${file}`);\n+    await octokit.rest.repos.uploadReleaseAsset({\n+      data: fs.createReadStream(file),\n+      headers: { 'content-length': size, 'content-type': 'application/octet-stream' },\n+      name,\n+      url: release.data.upload_url,\n+    });\n+  }\n+}\n+\n+async function run() {\n+  const retries = 10;\n+  for (let i = 0; i < retries; i++) {\n+    try {\n+      await runOnce();\n+      break;\n+    } catch (e) {\n+      if (i === retries - 1)\n+        throw e;\n+      logError(e);\n+      console.log(\"RETRYING after 10s\");\n+      await sleep(10000)\n+    }\n+  }\n+}\n+\n+function logError(e) {\n+  console.log(\"ERROR: \", e.message);\n+  try {\n+    console.log(JSON.stringify(e, null, 2));\n+  } catch (e) {\n+    // ignore json errors for now\n+  }\n+  console.log(e.stack);\n+}\n+\n+run().catch(err => {\n+  logError(err);\n+  core.setFailed(err.message);\n+});"}, {"sha": "dd3b2a048f09455080245ec1d29240830f378edb", "filename": "compiler/rustc_codegen_cranelift/.github/actions/github-release/package-lock.json", "status": "added", "additions": 571, "deletions": 0, "changes": 571, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage-lock.json", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage-lock.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage-lock.json?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -0,0 +1,571 @@\n+{\n+  \"name\": \"rustc_codegen_cranelift-github-release\",\n+  \"version\": \"0.0.0\",\n+  \"lockfileVersion\": 2,\n+  \"requires\": true,\n+  \"packages\": {\n+    \"\": {\n+      \"name\": \"rustc_codegen_cranelift-github-release\",\n+      \"version\": \"0.0.0\",\n+      \"dependencies\": {\n+        \"@actions/core\": \"^1.9.1\",\n+        \"@actions/github\": \"^5.1.0\",\n+        \"glob\": \"^7.1.5\"\n+      }\n+    },\n+    \"node_modules/@actions/core\": {\n+      \"version\": \"1.9.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/core/-/core-1.9.1.tgz\",\n+      \"integrity\": \"sha512-5ad+U2YGrmmiw6du20AQW5XuWo7UKN2052FjSV7MX+Wfjf8sCqcsZe62NfgHys4QI4/Y+vQvLKYL8jWtA1ZBTA==\",\n+      \"dependencies\": {\n+        \"@actions/http-client\": \"^2.0.1\",\n+        \"uuid\": \"^8.3.2\"\n+      }\n+    },\n+    \"node_modules/@actions/github\": {\n+      \"version\": \"5.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/github/-/github-5.1.0.tgz\",\n+      \"integrity\": \"sha512-tuI80F7JQIhg77ZTTgUAPpVD7ZnP9oHSPN8xw7LOwtA4vEMbAjWJNbmLBfV7xua7r016GyjzWLuec5cs8f/a8A==\",\n+      \"dependencies\": {\n+        \"@actions/http-client\": \"^2.0.1\",\n+        \"@octokit/core\": \"^3.6.0\",\n+        \"@octokit/plugin-paginate-rest\": \"^2.17.0\",\n+        \"@octokit/plugin-rest-endpoint-methods\": \"^5.13.0\"\n+      }\n+    },\n+    \"node_modules/@actions/http-client\": {\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/http-client/-/http-client-2.0.1.tgz\",\n+      \"integrity\": \"sha512-PIXiMVtz6VvyaRsGY268qvj57hXQEpsYogYOu2nrQhlf+XCGmZstmuZBbAybUl1nQGnvS1k1eEsQ69ZoD7xlSw==\",\n+      \"dependencies\": {\n+        \"tunnel\": \"^0.0.6\"\n+      }\n+    },\n+    \"node_modules/@octokit/auth-token\": {\n+      \"version\": \"2.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.5.0.tgz\",\n+      \"integrity\": \"sha512-r5FVUJCOLl19AxiuZD2VRZ/ORjp/4IN98Of6YJoJOkY75CIBuYfmiNHGrDwXr+aLGG55igl9QrxX3hbiXlLb+g==\",\n+      \"dependencies\": {\n+        \"@octokit/types\": \"^6.0.3\"\n+      }\n+    },\n+    \"node_modules/@octokit/core\": {\n+      \"version\": \"3.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/core/-/core-3.6.0.tgz\",\n+      \"integrity\": \"sha512-7RKRKuA4xTjMhY+eG3jthb3hlZCsOwg3rztWh75Xc+ShDWOfDDATWbeZpAHBNRpm4Tv9WgBMOy1zEJYXG6NJ7Q==\",\n+      \"dependencies\": {\n+        \"@octokit/auth-token\": \"^2.4.4\",\n+        \"@octokit/graphql\": \"^4.5.8\",\n+        \"@octokit/request\": \"^5.6.3\",\n+        \"@octokit/request-error\": \"^2.0.5\",\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"before-after-hook\": \"^2.2.0\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"node_modules/@octokit/endpoint\": {\n+      \"version\": \"6.0.12\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/endpoint/-/endpoint-6.0.12.tgz\",\n+      \"integrity\": \"sha512-lF3puPwkQWGfkMClXb4k/eUT/nZKQfxinRWJrdZaJO85Dqwo/G0yOC434Jr2ojwafWJMYqFGFa5ms4jJUgujdA==\",\n+      \"dependencies\": {\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"is-plain-object\": \"^5.0.0\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"node_modules/@octokit/graphql\": {\n+      \"version\": \"4.8.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/graphql/-/graphql-4.8.0.tgz\",\n+      \"integrity\": \"sha512-0gv+qLSBLKF0z8TKaSKTsS39scVKF9dbMxJpj3U0vC7wjNWFuIpL/z76Qe2fiuCbDRcJSavkXsVtMS6/dtQQsg==\",\n+      \"dependencies\": {\n+        \"@octokit/request\": \"^5.6.0\",\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"node_modules/@octokit/openapi-types\": {\n+      \"version\": \"12.11.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/openapi-types/-/openapi-types-12.11.0.tgz\",\n+      \"integrity\": \"sha512-VsXyi8peyRq9PqIz/tpqiL2w3w80OgVMwBHltTml3LmVvXiphgeqmY9mvBw9Wu7e0QWk/fqD37ux8yP5uVekyQ==\"\n+    },\n+    \"node_modules/@octokit/plugin-paginate-rest\": {\n+      \"version\": \"2.21.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/plugin-paginate-rest/-/plugin-paginate-rest-2.21.3.tgz\",\n+      \"integrity\": \"sha512-aCZTEf0y2h3OLbrgKkrfFdjRL6eSOo8komneVQJnYecAxIej7Bafor2xhuDJOIFau4pk0i/P28/XgtbyPF0ZHw==\",\n+      \"dependencies\": {\n+        \"@octokit/types\": \"^6.40.0\"\n+      },\n+      \"peerDependencies\": {\n+        \"@octokit/core\": \">=2\"\n+      }\n+    },\n+    \"node_modules/@octokit/plugin-rest-endpoint-methods\": {\n+      \"version\": \"5.16.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/plugin-rest-endpoint-methods/-/plugin-rest-endpoint-methods-5.16.2.tgz\",\n+      \"integrity\": \"sha512-8QFz29Fg5jDuTPXVtey05BLm7OB+M8fnvE64RNegzX7U+5NUXcOcnpTIK0YfSHBg8gYd0oxIq3IZTe9SfPZiRw==\",\n+      \"dependencies\": {\n+        \"@octokit/types\": \"^6.39.0\",\n+        \"deprecation\": \"^2.3.1\"\n+      },\n+      \"peerDependencies\": {\n+        \"@octokit/core\": \">=3\"\n+      }\n+    },\n+    \"node_modules/@octokit/request\": {\n+      \"version\": \"5.6.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/request/-/request-5.6.3.tgz\",\n+      \"integrity\": \"sha512-bFJl0I1KVc9jYTe9tdGGpAMPy32dLBXXo1dS/YwSCTL/2nd9XeHsY616RE3HPXDVk+a+dBuzyz5YdlXwcDTr2A==\",\n+      \"dependencies\": {\n+        \"@octokit/endpoint\": \"^6.0.1\",\n+        \"@octokit/request-error\": \"^2.1.0\",\n+        \"@octokit/types\": \"^6.16.1\",\n+        \"is-plain-object\": \"^5.0.0\",\n+        \"node-fetch\": \"^2.6.7\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"node_modules/@octokit/request-error\": {\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/request-error/-/request-error-2.1.0.tgz\",\n+      \"integrity\": \"sha512-1VIvgXxs9WHSjicsRwq8PlR2LR2x6DwsJAaFgzdi0JfJoGSO8mYI/cHJQ+9FbN21aa+DrgNLnwObmyeSC8Rmpg==\",\n+      \"dependencies\": {\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"deprecation\": \"^2.0.0\",\n+        \"once\": \"^1.4.0\"\n+      }\n+    },\n+    \"node_modules/@octokit/types\": {\n+      \"version\": \"6.41.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/types/-/types-6.41.0.tgz\",\n+      \"integrity\": \"sha512-eJ2jbzjdijiL3B4PrSQaSjuF2sPEQPVCPzBvTHJD9Nz+9dw2SGH4K4xeQJ77YfTq5bRQ+bD8wT11JbeDPmxmGg==\",\n+      \"dependencies\": {\n+        \"@octokit/openapi-types\": \"^12.11.0\"\n+      }\n+    },\n+    \"node_modules/balanced-match\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n+      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\n+    },\n+    \"node_modules/before-after-hook\": {\n+      \"version\": \"2.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/before-after-hook/-/before-after-hook-2.2.3.tgz\",\n+      \"integrity\": \"sha512-NzUnlZexiaH/46WDhANlyR2bXRopNg4F/zuSA3OpZnllCUgRaOF2znDioDWrmbNVsuZk6l9pMquQB38cfBZwkQ==\"\n+    },\n+    \"node_modules/brace-expansion\": {\n+      \"version\": \"1.1.11\",\n+      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n+      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n+      \"dependencies\": {\n+        \"balanced-match\": \"^1.0.0\",\n+        \"concat-map\": \"0.0.1\"\n+      }\n+    },\n+    \"node_modules/concat-map\": {\n+      \"version\": \"0.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n+      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\"\n+    },\n+    \"node_modules/deprecation\": {\n+      \"version\": \"2.3.1\",\n+      \"resolved\": \"https://registry.npmjs.org/deprecation/-/deprecation-2.3.1.tgz\",\n+      \"integrity\": \"sha512-xmHIy4F3scKVwMsQ4WnVaS8bHOx0DmVwRywosKhaILI0ywMDWPtBSku2HNxRvF7jtwDRsoEwYQSfbxj8b7RlJQ==\"\n+    },\n+    \"node_modules/fs.realpath\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n+      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\"\n+    },\n+    \"node_modules/glob\": {\n+      \"version\": \"7.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n+      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n+      \"dependencies\": {\n+        \"fs.realpath\": \"^1.0.0\",\n+        \"inflight\": \"^1.0.4\",\n+        \"inherits\": \"2\",\n+        \"minimatch\": \"^3.1.1\",\n+        \"once\": \"^1.3.0\",\n+        \"path-is-absolute\": \"^1.0.0\"\n+      },\n+      \"engines\": {\n+        \"node\": \"*\"\n+      },\n+      \"funding\": {\n+        \"url\": \"https://github.com/sponsors/isaacs\"\n+      }\n+    },\n+    \"node_modules/inflight\": {\n+      \"version\": \"1.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n+      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n+      \"dependencies\": {\n+        \"once\": \"^1.3.0\",\n+        \"wrappy\": \"1\"\n+      }\n+    },\n+    \"node_modules/inherits\": {\n+      \"version\": \"2.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n+      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n+    },\n+    \"node_modules/is-plain-object\": {\n+      \"version\": \"5.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz\",\n+      \"integrity\": \"sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==\",\n+      \"engines\": {\n+        \"node\": \">=0.10.0\"\n+      }\n+    },\n+    \"node_modules/minimatch\": {\n+      \"version\": \"3.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n+      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n+      \"dependencies\": {\n+        \"brace-expansion\": \"^1.1.7\"\n+      },\n+      \"engines\": {\n+        \"node\": \"*\"\n+      }\n+    },\n+    \"node_modules/node-fetch\": {\n+      \"version\": \"2.6.7\",\n+      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz\",\n+      \"integrity\": \"sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==\",\n+      \"dependencies\": {\n+        \"whatwg-url\": \"^5.0.0\"\n+      },\n+      \"engines\": {\n+        \"node\": \"4.x || >=6.0.0\"\n+      },\n+      \"peerDependencies\": {\n+        \"encoding\": \"^0.1.0\"\n+      },\n+      \"peerDependenciesMeta\": {\n+        \"encoding\": {\n+          \"optional\": true\n+        }\n+      }\n+    },\n+    \"node_modules/once\": {\n+      \"version\": \"1.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n+      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n+      \"dependencies\": {\n+        \"wrappy\": \"1\"\n+      }\n+    },\n+    \"node_modules/path-is-absolute\": {\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n+      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\",\n+      \"engines\": {\n+        \"node\": \">=0.10.0\"\n+      }\n+    },\n+    \"node_modules/tr46\": {\n+      \"version\": \"0.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz\",\n+      \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\"\n+    },\n+    \"node_modules/tunnel\": {\n+      \"version\": \"0.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz\",\n+      \"integrity\": \"sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==\",\n+      \"engines\": {\n+        \"node\": \">=0.6.11 <=0.7.0 || >=0.7.3\"\n+      }\n+    },\n+    \"node_modules/universal-user-agent\": {\n+      \"version\": \"6.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/universal-user-agent/-/universal-user-agent-6.0.0.tgz\",\n+      \"integrity\": \"sha512-isyNax3wXoKaulPDZWHQqbmIx1k2tb9fb3GGDBRxCscfYV2Ch7WxPArBsFEG8s/safwXTT7H4QGhaIkTp9447w==\"\n+    },\n+    \"node_modules/uuid\": {\n+      \"version\": \"8.3.2\",\n+      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz\",\n+      \"integrity\": \"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==\",\n+      \"bin\": {\n+        \"uuid\": \"dist/bin/uuid\"\n+      }\n+    },\n+    \"node_modules/webidl-conversions\": {\n+      \"version\": \"3.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\n+      \"integrity\": \"sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==\"\n+    },\n+    \"node_modules/whatwg-url\": {\n+      \"version\": \"5.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz\",\n+      \"integrity\": \"sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==\",\n+      \"dependencies\": {\n+        \"tr46\": \"~0.0.3\",\n+        \"webidl-conversions\": \"^3.0.0\"\n+      }\n+    },\n+    \"node_modules/wrappy\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n+      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"\n+    }\n+  },\n+  \"dependencies\": {\n+    \"@actions/core\": {\n+      \"version\": \"1.9.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/core/-/core-1.9.1.tgz\",\n+      \"integrity\": \"sha512-5ad+U2YGrmmiw6du20AQW5XuWo7UKN2052FjSV7MX+Wfjf8sCqcsZe62NfgHys4QI4/Y+vQvLKYL8jWtA1ZBTA==\",\n+      \"requires\": {\n+        \"@actions/http-client\": \"^2.0.1\",\n+        \"uuid\": \"^8.3.2\"\n+      }\n+    },\n+    \"@actions/github\": {\n+      \"version\": \"5.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/github/-/github-5.1.0.tgz\",\n+      \"integrity\": \"sha512-tuI80F7JQIhg77ZTTgUAPpVD7ZnP9oHSPN8xw7LOwtA4vEMbAjWJNbmLBfV7xua7r016GyjzWLuec5cs8f/a8A==\",\n+      \"requires\": {\n+        \"@actions/http-client\": \"^2.0.1\",\n+        \"@octokit/core\": \"^3.6.0\",\n+        \"@octokit/plugin-paginate-rest\": \"^2.17.0\",\n+        \"@octokit/plugin-rest-endpoint-methods\": \"^5.13.0\"\n+      }\n+    },\n+    \"@actions/http-client\": {\n+      \"version\": \"2.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/@actions/http-client/-/http-client-2.0.1.tgz\",\n+      \"integrity\": \"sha512-PIXiMVtz6VvyaRsGY268qvj57hXQEpsYogYOu2nrQhlf+XCGmZstmuZBbAybUl1nQGnvS1k1eEsQ69ZoD7xlSw==\",\n+      \"requires\": {\n+        \"tunnel\": \"^0.0.6\"\n+      }\n+    },\n+    \"@octokit/auth-token\": {\n+      \"version\": \"2.5.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/auth-token/-/auth-token-2.5.0.tgz\",\n+      \"integrity\": \"sha512-r5FVUJCOLl19AxiuZD2VRZ/ORjp/4IN98Of6YJoJOkY75CIBuYfmiNHGrDwXr+aLGG55igl9QrxX3hbiXlLb+g==\",\n+      \"requires\": {\n+        \"@octokit/types\": \"^6.0.3\"\n+      }\n+    },\n+    \"@octokit/core\": {\n+      \"version\": \"3.6.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/core/-/core-3.6.0.tgz\",\n+      \"integrity\": \"sha512-7RKRKuA4xTjMhY+eG3jthb3hlZCsOwg3rztWh75Xc+ShDWOfDDATWbeZpAHBNRpm4Tv9WgBMOy1zEJYXG6NJ7Q==\",\n+      \"requires\": {\n+        \"@octokit/auth-token\": \"^2.4.4\",\n+        \"@octokit/graphql\": \"^4.5.8\",\n+        \"@octokit/request\": \"^5.6.3\",\n+        \"@octokit/request-error\": \"^2.0.5\",\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"before-after-hook\": \"^2.2.0\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"@octokit/endpoint\": {\n+      \"version\": \"6.0.12\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/endpoint/-/endpoint-6.0.12.tgz\",\n+      \"integrity\": \"sha512-lF3puPwkQWGfkMClXb4k/eUT/nZKQfxinRWJrdZaJO85Dqwo/G0yOC434Jr2ojwafWJMYqFGFa5ms4jJUgujdA==\",\n+      \"requires\": {\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"is-plain-object\": \"^5.0.0\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"@octokit/graphql\": {\n+      \"version\": \"4.8.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/graphql/-/graphql-4.8.0.tgz\",\n+      \"integrity\": \"sha512-0gv+qLSBLKF0z8TKaSKTsS39scVKF9dbMxJpj3U0vC7wjNWFuIpL/z76Qe2fiuCbDRcJSavkXsVtMS6/dtQQsg==\",\n+      \"requires\": {\n+        \"@octokit/request\": \"^5.6.0\",\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"@octokit/openapi-types\": {\n+      \"version\": \"12.11.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/openapi-types/-/openapi-types-12.11.0.tgz\",\n+      \"integrity\": \"sha512-VsXyi8peyRq9PqIz/tpqiL2w3w80OgVMwBHltTml3LmVvXiphgeqmY9mvBw9Wu7e0QWk/fqD37ux8yP5uVekyQ==\"\n+    },\n+    \"@octokit/plugin-paginate-rest\": {\n+      \"version\": \"2.21.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/plugin-paginate-rest/-/plugin-paginate-rest-2.21.3.tgz\",\n+      \"integrity\": \"sha512-aCZTEf0y2h3OLbrgKkrfFdjRL6eSOo8komneVQJnYecAxIej7Bafor2xhuDJOIFau4pk0i/P28/XgtbyPF0ZHw==\",\n+      \"requires\": {\n+        \"@octokit/types\": \"^6.40.0\"\n+      }\n+    },\n+    \"@octokit/plugin-rest-endpoint-methods\": {\n+      \"version\": \"5.16.2\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/plugin-rest-endpoint-methods/-/plugin-rest-endpoint-methods-5.16.2.tgz\",\n+      \"integrity\": \"sha512-8QFz29Fg5jDuTPXVtey05BLm7OB+M8fnvE64RNegzX7U+5NUXcOcnpTIK0YfSHBg8gYd0oxIq3IZTe9SfPZiRw==\",\n+      \"requires\": {\n+        \"@octokit/types\": \"^6.39.0\",\n+        \"deprecation\": \"^2.3.1\"\n+      }\n+    },\n+    \"@octokit/request\": {\n+      \"version\": \"5.6.3\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/request/-/request-5.6.3.tgz\",\n+      \"integrity\": \"sha512-bFJl0I1KVc9jYTe9tdGGpAMPy32dLBXXo1dS/YwSCTL/2nd9XeHsY616RE3HPXDVk+a+dBuzyz5YdlXwcDTr2A==\",\n+      \"requires\": {\n+        \"@octokit/endpoint\": \"^6.0.1\",\n+        \"@octokit/request-error\": \"^2.1.0\",\n+        \"@octokit/types\": \"^6.16.1\",\n+        \"is-plain-object\": \"^5.0.0\",\n+        \"node-fetch\": \"^2.6.7\",\n+        \"universal-user-agent\": \"^6.0.0\"\n+      }\n+    },\n+    \"@octokit/request-error\": {\n+      \"version\": \"2.1.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/request-error/-/request-error-2.1.0.tgz\",\n+      \"integrity\": \"sha512-1VIvgXxs9WHSjicsRwq8PlR2LR2x6DwsJAaFgzdi0JfJoGSO8mYI/cHJQ+9FbN21aa+DrgNLnwObmyeSC8Rmpg==\",\n+      \"requires\": {\n+        \"@octokit/types\": \"^6.0.3\",\n+        \"deprecation\": \"^2.0.0\",\n+        \"once\": \"^1.4.0\"\n+      }\n+    },\n+    \"@octokit/types\": {\n+      \"version\": \"6.41.0\",\n+      \"resolved\": \"https://registry.npmjs.org/@octokit/types/-/types-6.41.0.tgz\",\n+      \"integrity\": \"sha512-eJ2jbzjdijiL3B4PrSQaSjuF2sPEQPVCPzBvTHJD9Nz+9dw2SGH4K4xeQJ77YfTq5bRQ+bD8wT11JbeDPmxmGg==\",\n+      \"requires\": {\n+        \"@octokit/openapi-types\": \"^12.11.0\"\n+      }\n+    },\n+    \"balanced-match\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz\",\n+      \"integrity\": \"sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==\"\n+    },\n+    \"before-after-hook\": {\n+      \"version\": \"2.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/before-after-hook/-/before-after-hook-2.2.3.tgz\",\n+      \"integrity\": \"sha512-NzUnlZexiaH/46WDhANlyR2bXRopNg4F/zuSA3OpZnllCUgRaOF2znDioDWrmbNVsuZk6l9pMquQB38cfBZwkQ==\"\n+    },\n+    \"brace-expansion\": {\n+      \"version\": \"1.1.11\",\n+      \"resolved\": \"https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.11.tgz\",\n+      \"integrity\": \"sha512-iCuPHDFgrHX7H2vEI/5xpz07zSHB00TpugqhmYtVmMO6518mCuRMoOYFldEBl0g187ufozdaHgWKcYFb61qGiA==\",\n+      \"requires\": {\n+        \"balanced-match\": \"^1.0.0\",\n+        \"concat-map\": \"0.0.1\"\n+      }\n+    },\n+    \"concat-map\": {\n+      \"version\": \"0.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz\",\n+      \"integrity\": \"sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==\"\n+    },\n+    \"deprecation\": {\n+      \"version\": \"2.3.1\",\n+      \"resolved\": \"https://registry.npmjs.org/deprecation/-/deprecation-2.3.1.tgz\",\n+      \"integrity\": \"sha512-xmHIy4F3scKVwMsQ4WnVaS8bHOx0DmVwRywosKhaILI0ywMDWPtBSku2HNxRvF7jtwDRsoEwYQSfbxj8b7RlJQ==\"\n+    },\n+    \"fs.realpath\": {\n+      \"version\": \"1.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz\",\n+      \"integrity\": \"sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==\"\n+    },\n+    \"glob\": {\n+      \"version\": \"7.2.3\",\n+      \"resolved\": \"https://registry.npmjs.org/glob/-/glob-7.2.3.tgz\",\n+      \"integrity\": \"sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==\",\n+      \"requires\": {\n+        \"fs.realpath\": \"^1.0.0\",\n+        \"inflight\": \"^1.0.4\",\n+        \"inherits\": \"2\",\n+        \"minimatch\": \"^3.1.1\",\n+        \"once\": \"^1.3.0\",\n+        \"path-is-absolute\": \"^1.0.0\"\n+      }\n+    },\n+    \"inflight\": {\n+      \"version\": \"1.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz\",\n+      \"integrity\": \"sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==\",\n+      \"requires\": {\n+        \"once\": \"^1.3.0\",\n+        \"wrappy\": \"1\"\n+      }\n+    },\n+    \"inherits\": {\n+      \"version\": \"2.0.4\",\n+      \"resolved\": \"https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz\",\n+      \"integrity\": \"sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==\"\n+    },\n+    \"is-plain-object\": {\n+      \"version\": \"5.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/is-plain-object/-/is-plain-object-5.0.0.tgz\",\n+      \"integrity\": \"sha512-VRSzKkbMm5jMDoKLbltAkFQ5Qr7VDiTFGXxYFXXowVj387GeGNOCsOH6Msy00SGZ3Fp84b1Naa1psqgcCIEP5Q==\"\n+    },\n+    \"minimatch\": {\n+      \"version\": \"3.1.2\",\n+      \"resolved\": \"https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz\",\n+      \"integrity\": \"sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==\",\n+      \"requires\": {\n+        \"brace-expansion\": \"^1.1.7\"\n+      }\n+    },\n+    \"node-fetch\": {\n+      \"version\": \"2.6.7\",\n+      \"resolved\": \"https://registry.npmjs.org/node-fetch/-/node-fetch-2.6.7.tgz\",\n+      \"integrity\": \"sha512-ZjMPFEfVx5j+y2yF35Kzx5sF7kDzxuDj6ziH4FFbOp87zKDZNx8yExJIb05OGF4Nlt9IHFIMBkRl41VdvcNdbQ==\",\n+      \"requires\": {\n+        \"whatwg-url\": \"^5.0.0\"\n+      }\n+    },\n+    \"once\": {\n+      \"version\": \"1.4.0\",\n+      \"resolved\": \"https://registry.npmjs.org/once/-/once-1.4.0.tgz\",\n+      \"integrity\": \"sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==\",\n+      \"requires\": {\n+        \"wrappy\": \"1\"\n+      }\n+    },\n+    \"path-is-absolute\": {\n+      \"version\": \"1.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz\",\n+      \"integrity\": \"sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==\"\n+    },\n+    \"tr46\": {\n+      \"version\": \"0.0.3\",\n+      \"resolved\": \"https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz\",\n+      \"integrity\": \"sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==\"\n+    },\n+    \"tunnel\": {\n+      \"version\": \"0.0.6\",\n+      \"resolved\": \"https://registry.npmjs.org/tunnel/-/tunnel-0.0.6.tgz\",\n+      \"integrity\": \"sha512-1h/Lnq9yajKY2PEbBadPXj3VxsDDu844OnaAo52UVmIzIvwwtBPIuNvkjuzBlTWpfJyUbG3ez0KSBibQkj4ojg==\"\n+    },\n+    \"universal-user-agent\": {\n+      \"version\": \"6.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/universal-user-agent/-/universal-user-agent-6.0.0.tgz\",\n+      \"integrity\": \"sha512-isyNax3wXoKaulPDZWHQqbmIx1k2tb9fb3GGDBRxCscfYV2Ch7WxPArBsFEG8s/safwXTT7H4QGhaIkTp9447w==\"\n+    },\n+    \"uuid\": {\n+      \"version\": \"8.3.2\",\n+      \"resolved\": \"https://registry.npmjs.org/uuid/-/uuid-8.3.2.tgz\",\n+      \"integrity\": \"sha512-+NYs2QeMWy+GWFOEm9xnn6HCDp0l7QBD7ml8zLUmJ+93Q5NF0NocErnwkTkXVFNiX3/fpC6afS8Dhb/gz7R7eg==\"\n+    },\n+    \"webidl-conversions\": {\n+      \"version\": \"3.0.1\",\n+      \"resolved\": \"https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz\",\n+      \"integrity\": \"sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==\"\n+    },\n+    \"whatwg-url\": {\n+      \"version\": \"5.0.0\",\n+      \"resolved\": \"https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz\",\n+      \"integrity\": \"sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==\",\n+      \"requires\": {\n+        \"tr46\": \"~0.0.3\",\n+        \"webidl-conversions\": \"^3.0.0\"\n+      }\n+    },\n+    \"wrappy\": {\n+      \"version\": \"1.0.2\",\n+      \"resolved\": \"https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz\",\n+      \"integrity\": \"sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==\"\n+    }\n+  }\n+}"}, {"sha": "d9c23f8873ece8afe2ef7a7703e1fa13306f16b2", "filename": "compiler/rustc_codegen_cranelift/.github/actions/github-release/package.json", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage.json", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage.json", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Factions%2Fgithub-release%2Fpackage.json?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -0,0 +1,11 @@\n+{\n+  \"name\": \"rustc_codegen_cranelift-github-release\",\n+  \"version\": \"0.0.0\",\n+  \"license\": \"Apache-2.0 WITH LLVM-exception\",\n+  \"main\": \"main.js\",\n+  \"dependencies\": {\n+    \"@actions/core\": \"^1.9.1\",\n+    \"@actions/github\": \"^5.1.0\",\n+    \"glob\": \"^7.1.5\"\n+  }\n+}"}, {"sha": "3c40555669cb38e8d19984fdbce0344ea9dc060c", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/abi-cafe.yml", "status": "modified", "additions": 0, "deletions": 7, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fabi-cafe.yml?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -45,13 +45,6 @@ jobs:\n       if: matrix.env.TARGET_TRIPLE == 'x86_64-pc-windows-gnu'\n       run: rustup set default-host x86_64-pc-windows-gnu\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n "}, {"sha": "e4af73ea6442e5bcd3a6c9439d6a3565a09d5178", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/main.yml", "status": "modified", "additions": 41, "deletions": 21, "changes": 62, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Fmain.yml?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -20,6 +20,7 @@ jobs:\n       run: |\n         cargo fmt --check\n         rustfmt --check build_system/mod.rs\n+        rustfmt --check example/*\n \n \n   test:\n@@ -89,13 +90,6 @@ jobs:\n         sudo apt-get update\n         sudo apt-get install -y gcc-s390x-linux-gnu qemu-user\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n \n@@ -137,13 +131,6 @@ jobs:\n         path: ~/.cargo/bin\n         key: ${{ runner.os }}-${{ matrix.env.TARGET_TRIPLE }}-cargo-bin-dir-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Install hyperfine\n       run: cargo install hyperfine || true\n \n@@ -206,13 +193,6 @@ jobs:\n         sudo apt-get update\n         sudo apt-get install -y gcc-mingw-w64-x86-64 wine-stable\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n \n@@ -238,3 +218,43 @@ jobs:\n       with:\n         name: cg_clif-${{ runner.os }}-cross-x86_64-mingw\n         path: cg_clif.tar.xz\n+\n+  release:\n+    runs-on: ubuntu-latest\n+    timeout-minutes: 10\n+    if: ${{ github.ref == 'refs/heads/master' }}\n+    needs: [rustfmt, test, bench, dist]\n+\n+    concurrency:\n+      group: release-dev\n+      cancel-in-progress: true\n+\n+    steps:\n+      - uses: actions/checkout@v3\n+\n+      - name: Download all built artifacts\n+        uses: actions/download-artifact@v3\n+        with:\n+          path: artifacts/\n+\n+      - run: |\n+          ls -R artifacts/\n+          mkdir release/\n+          pushd artifacts/\n+          for dir in *; do\n+            mv $dir/cg_clif.tar.xz ../release/$dir.tar.xz\n+            rmdir $dir/ # verify $dir is empty\n+          done\n+          popd\n+          rmdir artifacts/ # verify all artifacts are represented in release/\n+          ls -R release/\n+\n+      - run: npm install --production\n+        working-directory: .github/actions/github-release\n+\n+      - name: Publish Release\n+        uses: ./.github/actions/github-release\n+        with:\n+          files: \"release/*\"\n+          token: ${{ github.token }}\n+        continue-on-error: true"}, {"sha": "b2f772c4fc4441f4c96606db8840c01271897b1c", "filename": "compiler/rustc_codegen_cranelift/.github/workflows/rustc.yml", "status": "modified", "additions": 4, "deletions": 14, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2F.github%2Fworkflows%2Frustc.yml?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -6,6 +6,7 @@ on:\n jobs:\n   bootstrap_rustc:\n     runs-on: ubuntu-latest\n+    timeout-minutes: 60\n \n     steps:\n     - uses: actions/checkout@v3\n@@ -16,20 +17,16 @@ jobs:\n         path: build/cg_clif\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n \n     - name: Test\n       run: ./scripts/test_bootstrap.sh\n+\n+\n   rustc_test_suite:\n     runs-on: ubuntu-latest\n+    timeout-minutes: 60\n \n     steps:\n     - uses: actions/checkout@v3\n@@ -40,13 +37,6 @@ jobs:\n         path: build/cg_clif\n         key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('rust-toolchain', '**/Cargo.lock') }}\n \n-    - name: Use sparse cargo registry\n-      run: |\n-        cat >> ~/.cargo/config.toml <<EOF\n-        [unstable]\n-        sparse-registry = true\n-        EOF\n-\n     - name: Prepare dependencies\n       run: ./y.rs prepare\n "}, {"sha": "07a8e431a0e31ab93966eb700f0fb64c81b17d64", "filename": "compiler/rustc_codegen_cranelift/Cargo.lock", "status": "modified", "additions": 67, "deletions": 76, "changes": 143, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.lock?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -4,11 +4,11 @@ version = 3\n \n [[package]]\n name = \"ahash\"\n-version = \"0.7.6\"\n+version = \"0.8.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fcb51a0695d8f838b1ee009b3fbf66bda078cd64590202a864a8f3e8c4315c47\"\n+checksum = \"2c99f64d1e06488f620f932677e24bc6e2897582980441ae90a671415bd7ec2f\"\n dependencies = [\n- \"getrandom\",\n+ \"cfg-if\",\n  \"once_cell\",\n  \"version_check\",\n ]\n@@ -19,12 +19,6 @@ version = \"1.0.66\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"216261ddc8289130e551ddcd5ce8a064710c0d064a4d2895c67151c92b5443f6\"\n \n-[[package]]\n-name = \"arrayvec\"\n-version = \"0.7.2\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"8da52d66c7071e2e3fa2a1e5c6d088fec47b593032b254f5e980de8ea54454d6\"\n-\n [[package]]\n name = \"autocfg\"\n version = \"1.1.0\"\n@@ -57,28 +51,27 @@ checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n \n [[package]]\n name = \"cranelift-bforest\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"a7379abaacee0f14abf3204a7606118f0465785252169d186337bcb75030815a\"\n+checksum = \"1277fbfa94bc82c8ec4af2ded3e639d49ca5f7f3c7eeab2c66accd135ece4e70\"\n dependencies = [\n  \"cranelift-entity\",\n ]\n \n [[package]]\n name = \"cranelift-codegen\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9489fa336927df749631f1008007ced2871068544f40a202ce6d93fbf2366a7b\"\n+checksum = \"c6e8c31ad3b2270e9aeec38723888fe1b0ace3bea2b06b3f749ccf46661d3220\"\n dependencies = [\n- \"arrayvec\",\n  \"bumpalo\",\n  \"cranelift-bforest\",\n  \"cranelift-codegen-meta\",\n  \"cranelift-codegen-shared\",\n  \"cranelift-entity\",\n  \"cranelift-isle\",\n  \"gimli\",\n- \"hashbrown\",\n+ \"hashbrown 0.13.2\",\n  \"log\",\n  \"regalloc2\",\n  \"smallvec\",\n@@ -87,30 +80,30 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-codegen-meta\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"05bbb67da91ec721ed57cef2f7c5ef7728e1cd9bde9ffd3ef8601022e73e3239\"\n+checksum = \"c8ac5ac30d62b2d66f12651f6b606dbdfd9c2cfd0908de6b387560a277c5c9da\"\n dependencies = [\n  \"cranelift-codegen-shared\",\n ]\n \n [[package]]\n name = \"cranelift-codegen-shared\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"418ecb2f36032f6665dc1a5e2060a143dbab41d83b784882e97710e890a7a16d\"\n+checksum = \"dd82b8b376247834b59ed9bdc0ddeb50f517452827d4a11bccf5937b213748b8\"\n \n [[package]]\n name = \"cranelift-entity\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7cf583f7b093f291005f9fb1323e2c37f6ee4c7909e39ce016b2e8360d461705\"\n+checksum = \"40099d38061b37e505e63f89bab52199037a72b931ad4868d9089ff7268660b0\"\n \n [[package]]\n name = \"cranelift-frontend\"\n-version = \"0.93.0\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7d361ed0373cf5f086b49c499aa72227b646a64f899f32e34312f97c0fadff75\"\n+checksum = \"64a25d9d0a0ae3079c463c34115ec59507b4707175454f0eee0891e83e30e82d\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"log\",\n@@ -120,15 +113,15 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-isle\"\n-version = \"0.93.1\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"649782a39ce99798dd6b4029e2bb318a2fbeaade1b4fa25330763c10c65bc358\"\n+checksum = \"80de6a7d0486e4acbd5f9f87ec49912bf4c8fb6aea00087b989685460d4469ba\"\n \n [[package]]\n name = \"cranelift-jit\"\n-version = \"0.93.0\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c9909222db472fcc98d9e4e7192fa9d064dac63a3fa657df8c6daae86fb2604\"\n+checksum = \"3ca96b05988aa057eda09a817a6e31915fabd7f476b513123aff08053cd193dd\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -145,19 +138,19 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-module\"\n-version = \"0.93.0\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"68689b83e52e605ba48652882d3fccc2e2e136abf139eb64ae667888ba0d52f8\"\n+checksum = \"e5112c0be9cc5da064e0620570d67852f11ce44f2e572a58ecf7f11df73978b8\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n ]\n \n [[package]]\n name = \"cranelift-native\"\n-version = \"0.93.0\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f98e4e99a353703475d5acb402b9c13482d41d8a4008b352559bd560afb90363\"\n+checksum = \"bb6b03e0e03801c4b3fd8ce0758a94750c07a44e7944cc0ffbf0d3f2e7c79b00\"\n dependencies = [\n  \"cranelift-codegen\",\n  \"libc\",\n@@ -166,9 +159,9 @@ dependencies = [\n \n [[package]]\n name = \"cranelift-object\"\n-version = \"0.93.0\"\n+version = \"0.95.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b7a006ce1d8dd11df67567d8673e5920f3a56441812aed52a007ffce8f1b20e9\"\n+checksum = \"48ed1b37d0972abe804cb5bf2b35f3a76a276ebbe148e3a726d8e31042790978\"\n dependencies = [\n  \"anyhow\",\n  \"cranelift-codegen\",\n@@ -202,22 +195,11 @@ dependencies = [\n  \"byteorder\",\n ]\n \n-[[package]]\n-name = \"getrandom\"\n-version = \"0.2.8\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"c05aeb6a22b8f62540c194aac980f2115af067bfe15a0734d7277a768d396b31\"\n-dependencies = [\n- \"cfg-if\",\n- \"libc\",\n- \"wasi\",\n-]\n-\n [[package]]\n name = \"gimli\"\n-version = \"0.26.2\"\n+version = \"0.27.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\n+checksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n dependencies = [\n  \"fallible-iterator\",\n  \"indexmap\",\n@@ -229,6 +211,12 @@ name = \"hashbrown\"\n version = \"0.12.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"8a9ee70c43aaf417c914396645a0fa852624801b24ebb7ae78fe8272889ac888\"\n+\n+[[package]]\n+name = \"hashbrown\"\n+version = \"0.13.2\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"43a3c133739dddd0d2990f9a4bdf8eb4b21ef50e4851ca85ab661199821d510e\"\n dependencies = [\n  \"ahash\",\n ]\n@@ -240,7 +228,7 @@ source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"bd070e393353796e801d209ad339e89596eb4c8d430d18ede6a1cced8fafbd99\"\n dependencies = [\n  \"autocfg\",\n- \"hashbrown\",\n+ \"hashbrown 0.12.3\",\n ]\n \n [[package]]\n@@ -285,12 +273,12 @@ checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n \n [[package]]\n name = \"object\"\n-version = \"0.29.0\"\n+version = \"0.30.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n+checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\n dependencies = [\n  \"crc32fast\",\n- \"hashbrown\",\n+ \"hashbrown 0.13.2\",\n  \"indexmap\",\n  \"memchr\",\n ]\n@@ -303,9 +291,9 @@ checksum = \"86f0b0d4bf799edbc74508c1e8bf170ff5f41238e5f8225603ca7caaae2b7860\"\n \n [[package]]\n name = \"regalloc2\"\n-version = \"0.5.1\"\n+version = \"0.6.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"300d4fbfb40c1c66a78ba3ddd41c1110247cf52f97b87d0f2fc9209bd49b030c\"\n+checksum = \"80535183cae11b149d618fbd3c37e38d7cda589d82d7769e196ca9a9042d7621\"\n dependencies = [\n  \"fxhash\",\n  \"log\",\n@@ -374,17 +362,11 @@ version = \"0.9.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n checksum = \"49874b5167b65d7193b8aba1567f5c7d93d001cafc34600cee003eda787e483f\"\n \n-[[package]]\n-name = \"wasi\"\n-version = \"0.11.0+wasi-snapshot-preview1\"\n-source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9c8d87e72b64a3b4db28d11ce29237c246188f4f51057d65a7eab63b7987e423\"\n-\n [[package]]\n name = \"wasmtime-jit-icache-coherence\"\n-version = \"6.0.0\"\n+version = \"8.0.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"ec1fd0f0dd79e7cc0f55b102e320d7c77ab76cd272008a8fd98e25b5777e2636\"\n+checksum = \"aecae978b13f7f67efb23bd827373ace4578f2137ec110bbf6a4a7cde4121bbd\"\n dependencies = [\n  \"cfg-if\",\n  \"libc\",\n@@ -415,9 +397,18 @@ checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\"\n \n [[package]]\n name = \"windows-sys\"\n-version = \"0.42.0\"\n+version = \"0.45.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"75283be5efb2831d37ea142365f009c02ec203cd29a3ebecbc093d52315b66d0\"\n+dependencies = [\n+ \"windows-targets\",\n+]\n+\n+[[package]]\n+name = \"windows-targets\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"5a3e1820f08b8513f676f7ab6c1f99ff312fb97b553d30ff4dd86f9f15728aa7\"\n+checksum = \"8e2522491fbfcd58cc84d47aeb2958948c4b8982e9a2d8a2a35bbaed431390e7\"\n dependencies = [\n  \"windows_aarch64_gnullvm\",\n  \"windows_aarch64_msvc\",\n@@ -430,42 +421,42 @@ dependencies = [\n \n [[package]]\n name = \"windows_aarch64_gnullvm\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"41d2aa71f6f0cbe00ae5167d90ef3cfe66527d6f613ca78ac8024c3ccab9a19e\"\n+checksum = \"8c9864e83243fdec7fc9c5444389dcbbfd258f745e7853198f365e3c4968a608\"\n \n [[package]]\n name = \"windows_aarch64_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"dd0f252f5a35cac83d6311b2e795981f5ee6e67eb1f9a7f64eb4500fbc4dcdb4\"\n+checksum = \"4c8b1b673ffc16c47a9ff48570a9d85e25d265735c503681332589af6253c6c7\"\n \n [[package]]\n name = \"windows_i686_gnu\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"fbeae19f6716841636c28d695375df17562ca208b2b7d0dc47635a50ae6c5de7\"\n+checksum = \"de3887528ad530ba7bdbb1faa8275ec7a1155a45ffa57c37993960277145d640\"\n \n [[package]]\n name = \"windows_i686_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"84c12f65daa39dd2babe6e442988fc329d6243fdce47d7d2d155b8d874862246\"\n+checksum = \"bf4d1122317eddd6ff351aa852118a2418ad4214e6613a50e0191f7004372605\"\n \n [[package]]\n name = \"windows_x86_64_gnu\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"bf7b1b21b5362cbc318f686150e5bcea75ecedc74dd157d874d754a2ca44b0ed\"\n+checksum = \"c1040f221285e17ebccbc2591ffdc2d44ee1f9186324dd3e84e99ac68d699c45\"\n \n [[package]]\n name = \"windows_x86_64_gnullvm\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"09d525d2ba30eeb3297665bd434a54297e4170c7f1a44cad4ef58095b4cd2028\"\n+checksum = \"628bfdf232daa22b0d64fdb62b09fcc36bb01f05a3939e20ab73aaf9470d0463\"\n \n [[package]]\n name = \"windows_x86_64_msvc\"\n-version = \"0.42.0\"\n+version = \"0.42.1\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"f40009d85759725a34da6d89a94e63d7bdc50a862acf0dbc7c8e488f1edcb6f5\"\n+checksum = \"447660ad36a13288b1db4d4248e857b510e8c3a225c822ba4fb748c0aafecffd\""}, {"sha": "a2890f6ddf9d462375f8236559918868f02d18f4", "filename": "compiler/rustc_codegen_cranelift/Cargo.toml", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FCargo.toml?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -15,15 +15,15 @@ crate-type = [\"dylib\"]\n \n [dependencies]\n # These have to be in sync with each other\n-cranelift-codegen = { version = \"0.93\", features = [\"unwind\", \"all-arch\"] }\n-cranelift-frontend = { version = \"0.93\" }\n-cranelift-module = { version = \"0.93\" }\n-cranelift-native = { version = \"0.93\" }\n-cranelift-jit = { version = \"0.93\", optional = true }\n-cranelift-object = { version = \"0.93\" }\n+cranelift-codegen = { version = \"0.95.1\", features = [\"unwind\", \"all-arch\"] }\n+cranelift-frontend = { version = \"0.95.1\" }\n+cranelift-module = { version = \"0.95.1\" }\n+cranelift-native = { version = \"0.95.1\" }\n+cranelift-jit = { version = \"0.95.1\", optional = true }\n+cranelift-object = { version = \"0.95.1\" }\n target-lexicon = \"0.12.0\"\n-gimli = { version = \"0.26.0\", default-features = false, features = [\"write\"]}\n-object = { version = \"0.29.0\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n+gimli = { version = \"0.27.2\", default-features = false, features = [\"write\"]}\n+object = { version = \"0.30.3\", default-features = false, features = [\"std\", \"read_core\", \"write\", \"archive\", \"coff\", \"elf\", \"macho\", \"pe\"] }\n \n indexmap = \"1.9.3\"\n libloading = { version = \"0.7.3\", optional = true }"}, {"sha": "c5222982aa739a6a7dcc67915cc19d9ba840c520", "filename": "compiler/rustc_codegen_cranelift/Readme.md", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FReadme.md", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2FReadme.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2FReadme.md?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -22,10 +22,9 @@ $ ./test.sh\n \n For more docs on how to build and test see [build_system/usage.txt](build_system/usage.txt) or the help message of `./y.rs`.\n \n-Alternatively you can download a pre built version from [Github Actions]. It is listed in the artifacts section\n-of workflow runs. Unfortunately due to GHA restrictions you need to be logged in to access it.\n+Alternatively you can download a pre built version from the [releases] page.\n \n-[Github Actions]: https://github.com/bjorn3/rustc_codegen_cranelift/actions?query=branch%3Amaster+event%3Apush+is%3Asuccess\n+[releases]: https://github.com/bjorn3/rustc_codegen_cranelift/releases/tag/dev\n \n ## Usage\n "}, {"sha": "7ddf91ad01faa83ea1902f1cd88122b010b1748c", "filename": "compiler/rustc_codegen_cranelift/build_sysroot/Cargo.lock", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_sysroot%2FCargo.lock?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -4,9 +4,9 @@ version = 3\n \n [[package]]\n name = \"addr2line\"\n-version = \"0.17.0\"\n+version = \"0.19.0\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"b9ecd88a8c8378ca913a680cd98f0f13ac67383d35993f86c90a70e3f137816b\"\n+checksum = \"a76fd60b23679b7d19bd066031410fb7e458ccc5e958eb5c325888ce4baedc97\"\n dependencies = [\n  \"compiler_builtins\",\n  \"gimli\",\n@@ -50,9 +50,9 @@ dependencies = [\n \n [[package]]\n name = \"compiler_builtins\"\n-version = \"0.1.89\"\n+version = \"0.1.91\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"9fc9c2080d347a2c316518840ac9194644a9993dfa1e9778ef38979a339f5d8b\"\n+checksum = \"571298a3cce7e2afbd3d61abb91a18667d5ab25993ec577a88ee8ac45f00cc3a\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -95,9 +95,9 @@ dependencies = [\n \n [[package]]\n name = \"gimli\"\n-version = \"0.26.2\"\n+version = \"0.27.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"22030e2c5a68ec659fde1e949a745124b48e6fa8b045b7ed5bd1fe4ccc5c4e5d\"\n+checksum = \"ad0a93d233ebf96623465aad4046a8d3aa4da22d4f4beba5388838c8a434bbb4\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-alloc\",\n@@ -128,9 +128,9 @@ dependencies = [\n \n [[package]]\n name = \"libc\"\n-version = \"0.2.140\"\n+version = \"0.2.142\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"99227334921fae1a979cf0bfdfcc6b3e5ce376ef57e16fb6fb3ea2ed6095f80c\"\n+checksum = \"6a987beff54b60ffa6d51982e1aa1146bc42f19bd26be28b0586f252fccf5317\"\n dependencies = [\n  \"rustc-std-workspace-core\",\n ]\n@@ -147,9 +147,9 @@ dependencies = [\n \n [[package]]\n name = \"miniz_oxide\"\n-version = \"0.5.4\"\n+version = \"0.6.2\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"96590ba8f175222643a85693f33d26e9c8a015f599c216509b1a6894af675d34\"\n+checksum = \"b275950c28b37e794e8c55d88aeb5e139d0ce23fdbbeda68f8d7174abdf9e8fa\"\n dependencies = [\n  \"adler\",\n  \"compiler_builtins\",\n@@ -159,9 +159,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.29.0\"\n+version = \"0.30.3\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"21158b2c33aa6d4561f1c0a6ea283ca92bc54802a93b263e910746d679a7eb53\"\n+checksum = \"ea86265d3d3dcb6a27fc51bd29a4bf387fae9d2986b823079d4986af253eb439\"\n dependencies = [\n  \"compiler_builtins\",\n  \"memchr\",\n@@ -202,9 +202,9 @@ dependencies = [\n \n [[package]]\n name = \"rustc-demangle\"\n-version = \"0.1.21\"\n+version = \"0.1.23\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7ef03e0a2b150c7a90d01faf6254c9c48a41e95fb2a8c2ac1c6f0d2b9aefc342\"\n+checksum = \"d626bb9dae77e28219937af045c257c28bfd3f69333c512553507f5f9798cb76\"\n dependencies = [\n  \"compiler_builtins\",\n  \"rustc-std-workspace-core\","}, {"sha": "e4ed9be23b70528ee83174f4ad5059fa83fe88bd", "filename": "compiler/rustc_codegen_cranelift/build_system/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Fmod.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -43,7 +43,7 @@ pub(crate) enum SysrootKind {\n     Llvm,\n }\n \n-pub fn main() {\n+pub(crate) fn main() {\n     if env::var(\"RUST_BACKTRACE\").is_err() {\n         env::set_var(\"RUST_BACKTRACE\", \"1\");\n     }"}, {"sha": "0c25b4aadfa087bd4f826e3d3ba60f5ed9b8f936", "filename": "compiler/rustc_codegen_cranelift/build_system/tests.rs", "status": "modified", "additions": 18, "deletions": 11, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fbuild_system%2Ftests.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -2,7 +2,6 @@ use super::build_sysroot;\n use super::config;\n use super::path::{Dirs, RelPath};\n use super::prepare::GitRepo;\n-use super::rustc_info::get_host_triple;\n use super::utils::{spawn_and_wait, spawn_and_wait_with_input, CargoProject, Compiler};\n use super::SysrootKind;\n use std::env;\n@@ -102,14 +101,14 @@ pub(crate) static RAND_REPO: GitRepo =\n pub(crate) static RAND: CargoProject = CargoProject::new(&RAND_REPO.source_dir(), \"rand\");\n \n pub(crate) static REGEX_REPO: GitRepo =\n-    GitRepo::github(\"rust-lang\", \"regex\", \"a9b2e02352db92ce1f6e5b7ecd41b8bbffbe161a\", \"regex\");\n+    GitRepo::github(\"rust-lang\", \"regex\", \"32fed9429eafba0ae92a64b01796a0c5a75b88c8\", \"regex\");\n \n pub(crate) static REGEX: CargoProject = CargoProject::new(&REGEX_REPO.source_dir(), \"regex\");\n \n pub(crate) static PORTABLE_SIMD_REPO: GitRepo = GitRepo::github(\n     \"rust-lang\",\n     \"portable-simd\",\n-    \"9bd30e77b3a3c699af102ebb3df0f6110f8aa02e\",\n+    \"ad8afa8c81273b3b49acbea38cd3bcf17a34cf2b\",\n     \"portable-simd\",\n );\n \n@@ -186,7 +185,9 @@ const EXTENDED_SYSROOT_SUITE: &[TestCase] = &[\n \n         if runner.is_native {\n             let mut run_cmd = REGEX.test(&runner.target_compiler, &runner.dirs);\n-            run_cmd.args([\"--workspace\", \"--\", \"-q\"]);\n+            // regex-capi and regex-debug don't have any tests. Nor do they contain any code\n+            // that is useful to test with cg_clif. Skip building them to reduce test time.\n+            run_cmd.args([\"-p\", \"regex\", \"-p\", \"regex-syntax\", \"--\", \"-q\"]);\n             spawn_and_wait(run_cmd);\n         } else {\n             eprintln!(\"Cross-Compiling: Not running tests\");\n@@ -228,8 +229,11 @@ pub(crate) fn run_tests(\n             target_triple.clone(),\n         );\n \n-        let runner =\n-            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n+        let runner = TestRunner::new(\n+            dirs.clone(),\n+            target_compiler,\n+            bootstrap_host_compiler.triple == target_triple,\n+        );\n \n         BUILD_EXAMPLE_OUT_DIR.ensure_fresh(dirs);\n         runner.run_testsuite(NO_SYSROOT_SUITE);\n@@ -250,8 +254,11 @@ pub(crate) fn run_tests(\n             target_triple.clone(),\n         );\n \n-        let runner =\n-            TestRunner::new(dirs.clone(), target_compiler, get_host_triple() == target_triple);\n+        let runner = TestRunner::new(\n+            dirs.clone(),\n+            target_compiler,\n+            bootstrap_host_compiler.triple == target_triple,\n+        );\n \n         if run_base_sysroot {\n             runner.run_testsuite(BASE_SYSROOT_SUITE);\n@@ -275,7 +282,7 @@ struct TestRunner {\n }\n \n impl TestRunner {\n-    pub fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n+    fn new(dirs: Dirs, mut target_compiler: Compiler, is_native: bool) -> Self {\n         if let Ok(rustflags) = env::var(\"RUSTFLAGS\") {\n             target_compiler.rustflags.push(' ');\n             target_compiler.rustflags.push_str(&rustflags);\n@@ -297,7 +304,7 @@ impl TestRunner {\n         Self { is_native, jit_supported, dirs, target_compiler }\n     }\n \n-    pub fn run_testsuite(&self, tests: &[TestCase]) {\n+    fn run_testsuite(&self, tests: &[TestCase]) {\n         for TestCase { config, cmd } in tests {\n             let (tag, testname) = config.split_once('.').unwrap();\n             let tag = tag.to_uppercase();\n@@ -382,7 +389,7 @@ impl TestRunner {\n         spawn_and_wait(self.rustc_command(args));\n     }\n \n-    fn run_out_command<'a>(&self, name: &str, args: &[&str]) {\n+    fn run_out_command(&self, name: &str, args: &[&str]) {\n         let mut full_cmd = vec![];\n \n         // Prepend the RUN_WRAPPER's"}, {"sha": "d994e2fbc0ae0be69e0c06676cf630506030d69c", "filename": "compiler/rustc_codegen_cranelift/example/alloc_example.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Falloc_example.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -18,7 +18,7 @@ extern \"C\" {\n }\n \n #[panic_handler]\n-fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+fn panic_handler(_: &core::panic::PanicInfo<'_>) -> ! {\n     core::intrinsics::abort();\n }\n "}, {"sha": "f7edfa960a229407174223b8aa70ad84c7282b13", "filename": "compiler/rustc_codegen_cranelift/example/arbitrary_self_types_pointers_and_wrappers.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Farbitrary_self_types_pointers_and_wrappers.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -3,8 +3,8 @@\n #![feature(arbitrary_self_types, unsize, coerce_unsized, dispatch_from_dyn)]\n \n use std::{\n-    ops::{Deref, CoerceUnsized, DispatchFromDyn},\n     marker::Unsize,\n+    ops::{CoerceUnsized, Deref, DispatchFromDyn},\n };\n \n struct Ptr<T: ?Sized>(Box<T>);\n@@ -33,7 +33,6 @@ impl<T: ?Sized> Deref for Wrapper<T> {\n impl<T: CoerceUnsized<U>, U> CoerceUnsized<Wrapper<U>> for Wrapper<T> {}\n impl<T: DispatchFromDyn<U>, U> DispatchFromDyn<Wrapper<U>> for Wrapper<T> {}\n \n-\n trait Trait {\n     // This method isn't object-safe yet. Unsized by-value `self` is object-safe (but not callable\n     // without unsized_locals), but wrappers around `Self` currently are not."}, {"sha": "22fc6ff33e33f0ffb2069c8e21b15769fb284815", "filename": "compiler/rustc_codegen_cranelift/example/dst-field-align.rs", "status": "modified", "additions": 20, "deletions": 21, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fdst-field-align.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fdst-field-align.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fdst-field-align.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -2,66 +2,65 @@\n #![allow(dead_code)]\n struct Foo<T: ?Sized> {\n     a: u16,\n-    b: T\n+    b: T,\n }\n \n trait Bar {\n     fn get(&self) -> usize;\n }\n \n impl Bar for usize {\n-    fn get(&self) -> usize { *self }\n+    fn get(&self) -> usize {\n+        *self\n+    }\n }\n \n struct Baz<T: ?Sized> {\n-    a: T\n+    a: T,\n }\n \n struct HasDrop<T: ?Sized> {\n     ptr: Box<usize>,\n-    data: T\n+    data: T,\n }\n \n fn main() {\n     // Test that zero-offset works properly\n-    let b : Baz<usize> = Baz { a: 7 };\n+    let b: Baz<usize> = Baz { a: 7 };\n     assert_eq!(b.a.get(), 7);\n-    let b : &Baz<dyn Bar> = &b;\n+    let b: &Baz<dyn Bar> = &b;\n     assert_eq!(b.a.get(), 7);\n \n     // Test that the field is aligned properly\n-    let f : Foo<usize> = Foo { a: 0, b: 11 };\n+    let f: Foo<usize> = Foo { a: 0, b: 11 };\n     assert_eq!(f.b.get(), 11);\n-    let ptr1 : *const u8 = &f.b as *const _ as *const u8;\n+    let ptr1: *const u8 = &f.b as *const _ as *const u8;\n \n-    let f : &Foo<dyn Bar> = &f;\n-    let ptr2 : *const u8 = &f.b as *const _ as *const u8;\n+    let f: &Foo<dyn Bar> = &f;\n+    let ptr2: *const u8 = &f.b as *const _ as *const u8;\n     assert_eq!(f.b.get(), 11);\n \n     // The pointers should be the same\n     assert_eq!(ptr1, ptr2);\n \n     // Test that nested DSTs work properly\n-    let f : Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 }};\n+    let f: Foo<Foo<usize>> = Foo { a: 0, b: Foo { a: 1, b: 17 } };\n     assert_eq!(f.b.b.get(), 17);\n-    let f : &Foo<Foo<dyn Bar>> = &f;\n+    let f: &Foo<Foo<dyn Bar>> = &f;\n     assert_eq!(f.b.b.get(), 17);\n \n     // Test that get the pointer via destructuring works\n \n-    let f : Foo<usize> = Foo { a: 0, b: 11 };\n-    let f : &Foo<dyn Bar> = &f;\n+    let f: Foo<usize> = Foo { a: 0, b: 11 };\n+    let f: &Foo<dyn Bar> = &f;\n     let &Foo { a: _, b: ref bar } = f;\n     assert_eq!(bar.get(), 11);\n \n     // Make sure that drop flags don't screw things up\n \n-    let d : HasDrop<Baz<[i32; 4]>> = HasDrop {\n-        ptr: Box::new(0),\n-        data: Baz { a: [1,2,3,4] }\n-    };\n-    assert_eq!([1,2,3,4], d.data.a);\n+    let d: HasDrop<Baz<[i32; 4]>> = HasDrop { ptr: Box::new(0), data: Baz { a: [1, 2, 3, 4] } };\n+    assert_eq!([1, 2, 3, 4], d.data.a);\n \n-    let d : &HasDrop<Baz<[i32]>> = &d;\n-    assert_eq!(&[1,2,3,4], &d.data.a);\n+    let d: &HasDrop<Baz<[i32]>> = &d;\n+    assert_eq!(&[1, 2, 3, 4], &d.data.a);\n }"}, {"sha": "885e55bc764232e17087b5864de9d18d8563562b", "filename": "compiler/rustc_codegen_cranelift/example/example.rs", "status": "modified", "additions": 1, "deletions": 5, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fexample.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fexample.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fexample.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -11,11 +11,7 @@ pub fn abc(a: u8) -> u8 {\n }\n \n pub fn bcd(b: bool, a: u8) -> u8 {\n-    if b {\n-        a * 2\n-    } else {\n-        a * 3\n-    }\n+    if b { a * 2 } else { a * 3 }\n }\n \n pub fn call() {"}, {"sha": "166b006004385b225d8488fb08affc72299d2c55", "filename": "compiler/rustc_codegen_cranelift/example/issue-72793.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-72793.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-72793.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-72793.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -2,7 +2,9 @@\n \n #![feature(type_alias_impl_trait)]\n \n-trait T { type Item; }\n+trait T {\n+    type Item;\n+}\n \n type Alias<'a> = impl T<Item = &'a ()>;\n "}, {"sha": "6f39c5edcad209057161c09c5b606f4b395ff1e8", "filename": "compiler/rustc_codegen_cranelift/example/issue-91827-extern-types.rs", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fissue-91827-extern-types.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -40,10 +40,7 @@ impl<T, const N: usize> ListImpl<T, N> {\n     }\n }\n \n-pub static A: ListImpl<u128, 3> = ListImpl {\n-    len: 3,\n-    data: [5, 6, 7],\n-};\n+pub static A: ListImpl<u128, 3> = ListImpl { len: 3, data: [5, 6, 7] };\n pub static A_REF: &'static List<u128> = A.as_list();\n pub static A_TAIL_OFFSET: isize = tail_offset(A.as_list());\n "}, {"sha": "ea97e9f060e04a903e6c843f4b38df3f6e71a59d", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 37, "deletions": 15, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -37,13 +37,13 @@ impl<T: ?Sized + Unsize<U>, U: ?Sized> CoerceUnsized<*mut U> for *mut T {}\n pub trait DispatchFromDyn<T> {}\n \n // &T -> &U\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a U> for &'a T {}\n // &mut T -> &mut U\n-impl<'a, T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\n+impl<'a, T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<&'a mut U> for &'a mut T {}\n // *const T -> *const U\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*const U> for *const T {}\n // *mut T -> *mut U\n-impl<T: ?Sized+Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n+impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<*mut U> for *mut T {}\n impl<T: ?Sized + Unsize<U>, U: ?Sized> DispatchFromDyn<Box<U>> for Box<T> {}\n \n #[lang = \"receiver\"]\n@@ -288,7 +288,6 @@ impl PartialEq for u32 {\n     }\n }\n \n-\n impl PartialEq for u64 {\n     fn eq(&self, other: &u64) -> bool {\n         (*self) == (*other)\n@@ -361,7 +360,7 @@ impl<T: ?Sized> PartialEq for *const T {\n     }\n }\n \n-impl <T: PartialEq> PartialEq for Option<T> {\n+impl<T: PartialEq> PartialEq for Option<T> {\n     fn eq(&self, other: &Self) -> bool {\n         match (self, other) {\n             (Some(lhs), Some(rhs)) => *lhs == *rhs,\n@@ -472,7 +471,20 @@ pub fn panic(_msg: &'static str) -> ! {\n #[track_caller]\n fn panic_bounds_check(index: usize, len: usize) -> ! {\n     unsafe {\n-        libc::printf(\"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8, len, index);\n+        libc::printf(\n+            \"index out of bounds: the len is %d but the index is %d\\n\\0\" as *const str as *const i8,\n+            len,\n+            index,\n+        );\n+        intrinsics::abort();\n+    }\n+}\n+\n+#[lang = \"panic_cannot_unwind\"]\n+#[track_caller]\n+fn panic_cannot_unwind() -> ! {\n+    unsafe {\n+        libc::puts(\"panic in a function that cannot unwind\\n\\0\" as *const str as *const i8);\n         intrinsics::abort();\n     }\n }\n@@ -599,7 +611,7 @@ pub mod libc {\n     // functions. legacy_stdio_definitions.lib which provides the printf wrapper functions as normal\n     // symbols to link against.\n     #[cfg_attr(unix, link(name = \"c\"))]\n-    #[cfg_attr(target_env=\"msvc\", link(name=\"legacy_stdio_definitions\"))]\n+    #[cfg_attr(target_env = \"msvc\", link(name = \"legacy_stdio_definitions\"))]\n     extern \"C\" {\n         pub fn printf(format: *const i8, ...) -> i32;\n     }\n@@ -638,7 +650,7 @@ impl<T> Index<usize> for [T] {\n     }\n }\n \n-extern {\n+extern \"C\" {\n     type VaListImpl;\n }\n \n@@ -648,23 +660,33 @@ pub struct VaList<'a>(&'a mut VaListImpl);\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro stringify($($t:tt)*) { /* compiler built-in */ }\n+pub macro stringify($($t:tt)*) {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro file() { /* compiler built-in */ }\n+pub macro file() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro line() { /* compiler built-in */ }\n+pub macro line() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro cfg() { /* compiler built-in */ }\n+pub macro cfg() {\n+    /* compiler built-in */\n+}\n \n #[rustc_builtin_macro]\n #[rustc_macro_transparency = \"semitransparent\"]\n-pub macro global_asm() { /* compiler built-in */ }\n+pub macro global_asm() {\n+    /* compiler built-in */\n+}\n \n pub static A_STATIC: u8 = 42;\n \n@@ -676,7 +698,7 @@ struct PanicLocation {\n }\n \n #[no_mangle]\n-#[cfg(not(windows))]\n+#[cfg(not(all(windows, target_env = \"gnu\")))]\n pub fn get_tls() -> u8 {\n     #[thread_local]\n     static A: u8 = 42;"}, {"sha": "5a55aa215bfd7316fa3710487f87dbb8c19687a6", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -319,7 +319,7 @@ fn main() {\n \n     from_decimal_string();\n \n-    #[cfg(not(any(jit, windows)))]\n+    #[cfg(all(not(jit), not(all(windows, target_env = \"gnu\"))))]\n     test_tls();\n \n     #[cfg(all(not(jit), target_arch = \"x86_64\", any(target_os = \"linux\", target_os = \"darwin\")))]\n@@ -524,6 +524,7 @@ pub enum E1 {\n // Computing the discriminant used to be done using the niche type (here `u8`,\n // from the `bool` field of `V1`), overflowing for variants with large enough\n // indices (`V3` and `V4`), causing them to be interpreted as other variants.\n+#[rustfmt::skip]\n pub enum E2<X> {\n     V1 { f: bool },\n "}, {"sha": "f15e48acc41e52cd5809dd25b9f28f22e5158755", "filename": "compiler/rustc_codegen_cranelift/example/mod_bench.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmod_bench.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -3,15 +3,15 @@\n \n #[cfg_attr(unix, link(name = \"c\"))]\n #[cfg_attr(target_env = \"msvc\", link(name = \"msvcrt\"))]\n-extern {}\n+extern \"C\" {}\n \n #[panic_handler]\n-fn panic_handler(_: &core::panic::PanicInfo) -> ! {\n+fn panic_handler(_: &core::panic::PanicInfo<'_>) -> ! {\n     core::intrinsics::abort();\n }\n \n-#[lang=\"eh_personality\"]\n-fn eh_personality(){}\n+#[lang = \"eh_personality\"]\n+fn eh_personality() {}\n \n // Required for rustc_codegen_llvm\n #[no_mangle]"}, {"sha": "ab4045d11a6636d007bbfaf7469bd7bedeaf96df", "filename": "compiler/rustc_codegen_cranelift/example/std_example.rs", "status": "modified", "additions": 22, "deletions": 5, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fstd_example.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -1,4 +1,4 @@\n-#![feature(core_intrinsics, generators, generator_trait, is_sorted)]\n+#![feature(core_intrinsics, generators, generator_trait, is_sorted, repr_simd)]\n \n #[cfg(target_arch = \"x86_64\")]\n use std::arch::x86_64::*;\n@@ -56,7 +56,10 @@ fn main() {\n \n     assert_eq!(0b0000000000000000000000000010000010000000000000000000000000000000_0000000000100000000000000000000000001000000000000100000000000000u128.leading_zeros(), 26);\n     assert_eq!(0b0000000000000000000000000010000000000000000000000000000000000000_0000000000000000000000000000000000001000000000000000000010000000u128.trailing_zeros(), 7);\n-    assert_eq!(core::intrinsics::saturating_sub(0, -170141183460469231731687303715884105728i128), 170141183460469231731687303715884105727i128);\n+    assert_eq!(\n+        core::intrinsics::saturating_sub(0, -170141183460469231731687303715884105728i128),\n+        170141183460469231731687303715884105727i128\n+    );\n \n     std::hint::black_box(std::hint::black_box(7571400400375753350092698930310845914i128) * 10);\n     assert!(0i128.checked_div(2i128).is_some());\n@@ -113,7 +116,9 @@ fn main() {\n \n     Box::pin(move |mut _task_context| {\n         yield ();\n-    }).as_mut().resume(0);\n+    })\n+    .as_mut()\n+    .resume(0);\n \n     #[derive(Copy, Clone)]\n     enum Nums {\n@@ -148,12 +153,20 @@ fn main() {\n \n         enum Never {}\n     }\n+\n+    foo(I64X2(0, 0));\n }\n \n fn panic(_: u128) {\n     panic!();\n }\n \n+#[repr(simd)]\n+struct I64X2(i64, i64);\n+\n+#[allow(improper_ctypes_definitions)]\n+extern \"C\" fn foo(_a: I64X2) {}\n+\n #[cfg(target_arch = \"x86_64\")]\n #[target_feature(enable = \"sse2\")]\n unsafe fn test_simd() {\n@@ -168,7 +181,10 @@ unsafe fn test_simd() {\n     let (zero0, zero1) = std::mem::transmute::<_, (u64, u64)>(x);\n     assert_eq!((zero0, zero1), (0, 0));\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(or), [7, 7, 7, 7, 7, 7, 7, 7]);\n-    assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_eq), [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]);\n+    assert_eq!(\n+        std::mem::transmute::<_, [u16; 8]>(cmp_eq),\n+        [0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff]\n+    );\n     assert_eq!(std::mem::transmute::<_, [u16; 8]>(cmp_lt), [0, 0, 0, 0, 0, 0, 0, 0]);\n \n     test_mm_slli_si128();\n@@ -182,6 +198,7 @@ unsafe fn test_simd() {\n     test_mm_extract_epi8();\n     test_mm_insert_epi16();\n \n+    #[rustfmt::skip]\n     let mask1 = _mm_movemask_epi8(dbg!(_mm_setr_epi8(255u8 as i8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)));\n     assert_eq!(mask1, 1);\n }\n@@ -343,7 +360,7 @@ fn test_checked_mul() {\n #[derive(PartialEq)]\n enum LoopState {\n     Continue(()),\n-    Break(())\n+    Break(()),\n }\n \n pub enum Instruction {"}, {"sha": "3c87891666399297f2c16719b5c9f68aa58d4b10", "filename": "compiler/rustc_codegen_cranelift/example/subslice-patterns-const-eval.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fsubslice-patterns-const-eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fexample%2Fsubslice-patterns-const-eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fsubslice-patterns-const-eval.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -19,7 +19,9 @@ macro_rules! n {\n // This macro has an unused variable so that it can be repeated base on the\n // number of times a repeated variable (`$e` in `z`) occurs.\n macro_rules! zed {\n-    ($e:expr) => { Z }\n+    ($e:expr) => {\n+        Z\n+    };\n }\n \n macro_rules! z {\n@@ -32,12 +34,14 @@ macro_rules! z {\n macro_rules! compare_evaluation {\n     ($e:expr, $t:ty $(,)?) => {{\n         const CONST_EVAL: $t = $e;\n-        const fn const_eval() -> $t { $e }\n+        const fn const_eval() -> $t {\n+            $e\n+        }\n         static CONST_EVAL2: $t = const_eval();\n         let runtime_eval = $e;\n         assert_eq!(CONST_EVAL, runtime_eval);\n         assert_eq!(CONST_EVAL2, runtime_eval);\n-    }}\n+    }};\n }\n \n // Repeat `$test`, substituting the given macro variables with the given\n@@ -65,6 +69,7 @@ macro_rules! repeat {\n     }\n }\n \n+#[rustfmt::skip]\n fn main() {\n     repeat! {\n         ($arr $Ty); n, N; z, Z:"}, {"sha": "59ad80c3207dca8924e694191208423c1eee2c49", "filename": "compiler/rustc_codegen_cranelift/rust-toolchain", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Frust-toolchain", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Frust-toolchain?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -1,3 +1,3 @@\n [toolchain]\n-channel = \"nightly-2023-03-15\"\n+channel = \"nightly-2023-04-29\"\n components = [\"rust-src\", \"rustc-dev\", \"llvm-tools-preview\"]"}, {"sha": "e2db7d03a9d386c80f16dfbc9e5b3a3b765678d8", "filename": "compiler/rustc_codegen_cranelift/scripts/cargo-clif.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Fcargo-clif.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -64,7 +64,7 @@ fn main() {\n     };\n \n     #[cfg(unix)]\n-    Command::new(\"cargo\").args(args).exec();\n+    panic!(\"Failed to spawn cargo: {}\", Command::new(\"cargo\").args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit("}, {"sha": "ab496a4a6844eb5ef703443acc450ccf41515999", "filename": "compiler/rustc_codegen_cranelift/scripts/rustc-clif.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustc-clif.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -15,22 +15,24 @@ fn main() {\n         env::consts::DLL_PREFIX.to_string() + \"rustc_codegen_cranelift\" + env::consts::DLL_SUFFIX,\n     );\n \n-    let mut args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    let passed_args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n     let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n     codegen_backend_arg.push(cg_clif_dylib_path);\n     args.push(codegen_backend_arg);\n-    if !args.contains(&OsString::from(\"--sysroot\")) {\n+    if !passed_args.contains(&OsString::from(\"--sysroot\")) {\n         args.push(OsString::from(\"--sysroot\"));\n         args.push(OsString::from(sysroot.to_str().unwrap()));\n     }\n+    args.extend(passed_args);\n \n     // Ensure that the right toolchain is used\n     env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n \n     #[cfg(unix)]\n-    Command::new(\"rustc\").args(args).exec();\n+    panic!(\"Failed to spawn rustc: {}\", Command::new(\"rustc\").args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit("}, {"sha": "545844446c508cd32216f435e2cda732767a3e80", "filename": "compiler/rustc_codegen_cranelift/scripts/rustdoc-clif.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Frustdoc-clif.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -15,22 +15,24 @@ fn main() {\n         env::consts::DLL_PREFIX.to_string() + \"rustc_codegen_cranelift\" + env::consts::DLL_SUFFIX,\n     );\n \n-    let mut args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    let passed_args = std::env::args_os().skip(1).collect::<Vec<_>>();\n+    let mut args = vec![];\n     args.push(OsString::from(\"-Cpanic=abort\"));\n     args.push(OsString::from(\"-Zpanic-abort-tests\"));\n     let mut codegen_backend_arg = OsString::from(\"-Zcodegen-backend=\");\n     codegen_backend_arg.push(cg_clif_dylib_path);\n     args.push(codegen_backend_arg);\n-    if !args.contains(&OsString::from(\"--sysroot\")) {\n+    if !passed_args.contains(&OsString::from(\"--sysroot\")) {\n         args.push(OsString::from(\"--sysroot\"));\n         args.push(OsString::from(sysroot.to_str().unwrap()));\n     }\n+    args.extend(passed_args);\n \n     // Ensure that the right toolchain is used\n     env::set_var(\"RUSTUP_TOOLCHAIN\", env!(\"TOOLCHAIN_NAME\"));\n \n     #[cfg(unix)]\n-    Command::new(\"rustdoc\").args(args).exec();\n+    panic!(\"Failed to spawn rustdoc: {}\", Command::new(\"rustdoc\").args(args).exec());\n \n     #[cfg(not(unix))]\n     std::process::exit("}, {"sha": "1329d3ea076b480d8d0c45f892c4f1f116aff553", "filename": "compiler/rustc_codegen_cranelift/scripts/test_rustc_tests.sh", "status": "modified", "additions": 64, "deletions": 8, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fscripts%2Ftest_rustc_tests.sh?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -10,7 +10,8 @@ pushd rust\n \n command -v rg >/dev/null 2>&1 || cargo install ripgrep\n \n-rm -r tests/ui/{extern/,unsized-locals/,lto/,linkage*} || true\n+# FIXME add needs-asm-support to all tests in tests/ui/asm\n+rm -r tests/ui/{unsized-locals/,lto/,linkage*} || true\n for test in $(rg --files-with-matches \"lto|// needs-asm-support|// needs-unwind\" tests/{codegen-units,ui,incremental}); do\n   rm $test\n done\n@@ -27,13 +28,24 @@ rm tests/ui/parser/unclosed-delimiter-in-dep.rs # submodule contains //~ERROR\n # ================\n \n # requires stack unwinding\n+# FIXME add needs-unwind to these tests\n rm tests/incremental/change_crate_dep_kind.rs\n rm tests/incremental/issue-80691-bad-eval-cache.rs # -Cpanic=abort causes abort instead of exit(101)\n+rm -r tests/run-make/c-unwind-abi-catch-lib-panic\n+rm -r tests/run-make/c-unwind-abi-catch-panic\n+rm -r tests/run-make/debug-assertions\n+rm -r tests/run-make/foreign-double-unwind\n+rm -r tests/run-make/foreign-exceptions\n+rm -r tests/run-make/foreign-rust-exceptions\n+rm -r tests/run-make/libtest-json\n+rm -r tests/run-make/static-unwinding\n \n # requires compiling with -Cpanic=unwind\n rm -r tests/ui/macros/rfc-2011-nicer-assert-messages/\n rm -r tests/run-make/test-benches\n rm tests/ui/test-attrs/test-type.rs\n+rm -r tests/run-make/const_fn_mir\n+rm -r tests/run-make/intrinsic-unreachable\n \n # vendor intrinsics\n rm tests/ui/sse2.rs # cpuid not supported, so sse2 not detected\n@@ -49,6 +61,7 @@ rm tests/incremental/hashes/statics.rs # same\n # variadic arguments\n rm tests/ui/abi/mir/mir_codegen_calls_variadic.rs # requires float varargs\n rm tests/ui/abi/variadic-ffi.rs # requires callee side vararg support\n+rm -r tests/run-make/c-link-to-rust-va-list-fn # requires callee side vararg support\n \n # unsized locals\n rm -r tests/run-pass-valgrind/unsized-locals\n@@ -59,6 +72,19 @@ rm tests/ui/target-feature/missing-plusminus.rs # error not implemented\n rm tests/ui/fn/dyn-fn-alignment.rs # wants a 256 byte alignment\n rm -r tests/run-make/emit-named-files # requires full --emit support\n rm -r tests/run-make/repr128-dwarf # debuginfo test\n+rm -r tests/run-make/split-debuginfo # same\n+rm -r tests/run-make/symbols-include-type-name # --emit=asm not supported\n+rm -r tests/run-make/target-specs # i686 not supported by Cranelift\n+rm -r tests/run-make/mismatching-target-triples # same\n+rm -r tests/run-make/use-extern-for-plugins # same\n+\n+# requires LTO\n+rm -r tests/run-make/cdylib\n+rm -r tests/run-make/issue-14500\n+rm -r tests/run-make/issue-64153\n+rm -r tests/run-make/codegen-options-parsing\n+rm -r tests/run-make/lto-*\n+rm -r tests/run-make/reproducible-build-2\n \n # optimization tests\n # ==================\n@@ -70,7 +96,14 @@ rm -r tests/run-make/fmt-write-bloat/ # tests an optimization\n # backend specific tests\n # ======================\n rm tests/incremental/thinlto/cgu_invalidated_when_import_{added,removed}.rs # requires LLVM\n+rm -r tests/run-make/cross-lang-lto # same\n+rm -r tests/run-make/issue-7349 # same\n+rm -r tests/run-make/sepcomp-inlining # same\n+rm -r tests/run-make/sepcomp-separate # same\n+rm -r tests/run-make/sepcomp-cci-copies # same\n+rm -r tests/run-make/volatile-intrinsics # same\n rm tests/ui/abi/stack-protector.rs # requires stack protector support\n+rm -r tests/run-make/emit-stack-sizes # requires support for -Z emit-stack-sizes\n \n # giving different but possibly correct results\n # =============================================\n@@ -95,13 +128,12 @@ rm tests/ui/proc-macro/no-missing-docs.rs # same\n rm tests/ui/rust-2018/proc-macro-crate-in-paths.rs # same\n rm tests/ui/proc-macro/allowed-signatures.rs # same\n \n+# rustdoc-clif passes extra args, suppressing the help message when no args are passed\n+rm -r tests/run-make/issue-88756-default-output\n+\n # doesn't work due to the way the rustc test suite is invoked.\n # should work when using ./x.py test the way it is intended\n # ============================================================\n-rm -r tests/run-make/emit-shared-files # requires the rustdoc executable in dist/bin/\n-rm -r tests/run-make/unstable-flag-required # same\n-rm -r tests/run-make/rustdoc-* # same\n-rm -r tests/run-make/issue-88756-default-output # same\n rm -r tests/run-make/remap-path-prefix-dwarf # requires llvm-dwarfdump\n rm -r tests/ui/consts/missing_span_in_backtrace.rs # expects sysroot source to be elsewhere\n \n@@ -112,17 +144,41 @@ rm tests/incremental/spike-neg2.rs # same\n \n rm tests/ui/simd/intrinsic/generic-reduction-pass.rs # simd_reduce_add_unordered doesn't accept an accumulator for integer vectors\n \n-rm tests/ui/simd/intrinsic/generic-as.rs # crash when accessing vector type field (#1318)\n rm tests/ui/simd/simd-bitmask.rs # crash\n \n+rm -r tests/run-make/issue-51671 # wrong filename given in case of --emit=obj\n+rm -r tests/run-make/issue-30063 # same\n+rm -r tests/run-make/multiple-emits # same\n+rm -r tests/run-make/output-type-permutations # same\n+rm -r tests/run-make/used # same\n+\n # bugs in the test suite\n # ======================\n rm tests/ui/backtrace.rs # TODO warning\n-rm tests/ui/simple_global_asm.rs # TODO add needs-asm-support\n rm tests/ui/process/nofile-limit.rs # TODO some AArch64 linking issue\n \n rm tests/ui/stdio-is-blocking.rs # really slow with unoptimized libstd\n \n+cp ../dist/bin/rustdoc-clif ../dist/bin/rustdoc # some tests expect bin/rustdoc to exist\n+\n+# prevent $(RUSTDOC) from picking up the sysroot built by x.py. It conflicts with the one used by\n+# rustdoc-clif\n+cat <<EOF | git apply -\n+diff --git a/tests/run-make/tools.mk b/tests/run-make/tools.mk\n+index ea06b620c4c..b969d0009c6 100644\n+--- a/tests/run-make/tools.mk\n++++ b/tests/run-make/tools.mk\n+@@ -9,7 +9,7 @@ RUSTC_ORIGINAL := \\$(RUSTC)\n+ BARE_RUSTC := \\$(HOST_RPATH_ENV) '\\$(RUSTC)'\n+ BARE_RUSTDOC := \\$(HOST_RPATH_ENV) '\\$(RUSTDOC)'\n+ RUSTC := \\$(BARE_RUSTC) --out-dir \\$(TMPDIR) -L \\$(TMPDIR) \\$(RUSTFLAGS)\n+-RUSTDOC := \\$(BARE_RUSTDOC) -L \\$(TARGET_RPATH_DIR)\n++RUSTDOC := \\$(BARE_RUSTDOC)\n+ ifdef RUSTC_LINKER\n+ RUSTC := \\$(RUSTC) -Clinker='\\$(RUSTC_LINKER)'\n+ RUSTDOC := \\$(RUSTDOC) -Clinker='\\$(RUSTC_LINKER)'\n+EOF\n+\n echo \"[TEST] rustc test suite\"\n-RUST_TEST_NOCAPTURE=1 COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 tests/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n+COMPILETEST_FORCE_STAGE0=1 ./x.py test --stage 0 --test-args=--nocapture tests/{codegen-units,run-make,run-pass-valgrind,ui,incremental}\n popd"}, {"sha": "364503fd3639a159b5e18d918594fc4b10fda3af", "filename": "compiler/rustc_codegen_cranelift/src/abi/comments.rs", "status": "modified", "additions": 1, "deletions": 31, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fcomments.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -6,8 +6,6 @@ use std::borrow::Cow;\n use rustc_middle::mir;\n use rustc_target::abi::call::PassMode;\n \n-use cranelift_codegen::entity::EntityRef;\n-\n use crate::prelude::*;\n \n pub(super) fn add_args_header_comment(fx: &mut FunctionCx<'_, '_, '_>) {\n@@ -91,35 +89,7 @@ pub(super) fn add_local_place_comments<'tcx>(\n         largest_niche: _,\n     } = layout.0.0;\n \n-    let (kind, extra) = match *place.inner() {\n-        CPlaceInner::Var(place_local, var) => {\n-            assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\",var={}\", var.index())))\n-        }\n-        CPlaceInner::VarPair(place_local, var1, var2) => {\n-            assert_eq!(local, place_local);\n-            (\"ssa\", Cow::Owned(format!(\"var=({}, {})\", var1.index(), var2.index())))\n-        }\n-        CPlaceInner::VarLane(_local, _var, _lane) => unreachable!(),\n-        CPlaceInner::Addr(ptr, meta) => {\n-            let meta = if let Some(meta) = meta {\n-                Cow::Owned(format!(\"meta={}\", meta))\n-            } else {\n-                Cow::Borrowed(\"\")\n-            };\n-            match ptr.debug_base_and_offset() {\n-                (crate::pointer::PointerBase::Addr(addr), offset) => {\n-                    (\"reuse\", format!(\"storage={}{}{}\", addr, offset, meta).into())\n-                }\n-                (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n-                    (\"stack\", format!(\"storage={}{}{}\", stack_slot, offset, meta).into())\n-                }\n-                (crate::pointer::PointerBase::Dangling(align), offset) => {\n-                    (\"zst\", format!(\"align={},offset={}\", align.bytes(), offset).into())\n-                }\n-            }\n-        }\n-    };\n+    let (kind, extra) = place.debug_comment();\n \n     fx.add_global_comment(format!(\n         \"{:<5} {:5} {:30} {:4}b {}, {}{}{}\","}, {"sha": "e533afcfaa946729b8278f788697293b603c685f", "filename": "compiler/rustc_codegen_cranelift/src/abi/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fmod.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -605,9 +605,9 @@ pub(crate) fn codegen_drop<'tcx>(\n                 //                | ...   |\n                 //                \\-------/\n                 //\n-                let (ptr, vtable) = drop_place.to_ptr_maybe_unsized();\n+                let (ptr, vtable) = drop_place.to_ptr_unsized();\n                 let ptr = ptr.get_addr(fx);\n-                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable.unwrap());\n+                let drop_fn = crate::vtable::drop_fn_of_obj(fx, vtable);\n \n                 // FIXME(eddyb) perhaps move some of this logic into\n                 // `Instance::resolve_drop_in_place`?"}, {"sha": "d847e524f8cfa7740488cf3b847ccfadf1309da8", "filename": "compiler/rustc_codegen_cranelift/src/abi/pass_mode.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Fpass_mode.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -84,7 +84,7 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                     attrs\n                 )],\n                 Abi::Vector { .. } => {\n-                    let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n+                    let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout);\n                     smallvec![AbiParam::new(vector_ty)]\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),\n@@ -135,7 +135,7 @@ impl<'tcx> ArgAbiExt<'tcx> for ArgAbi<'tcx, Ty<'tcx>> {\n                     (None, vec![AbiParam::new(scalar_to_clif_type(tcx, scalar))])\n                 }\n                 Abi::Vector { .. } => {\n-                    let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout).unwrap();\n+                    let vector_ty = crate::intrinsics::clif_vector_type(tcx, self.layout);\n                     (None, vec![AbiParam::new(vector_ty)])\n                 }\n                 _ => unreachable!(\"{:?}\", self.layout.abi),"}, {"sha": "14e54d5ee3814f97acb5ed7391d7992b4a70af55", "filename": "compiler/rustc_codegen_cranelift/src/abi/returning.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fabi%2Freturning.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -63,11 +63,11 @@ pub(super) fn codegen_with_call_return_arg<'tcx>(\n     let (ret_temp_place, return_ptr) = match ret_arg_abi.mode {\n         PassMode::Ignore => (None, None),\n         PassMode::Indirect { attrs: _, extra_attrs: None, on_stack: _ } => {\n-            if matches!(ret_place.inner(), CPlaceInner::Addr(_, None)) {\n+            if let Some(ret_ptr) = ret_place.try_to_ptr() {\n                 // This is an optimization to prevent unnecessary copies of the return value when\n                 // the return place is already a memory place as opposed to a register.\n                 // This match arm can be safely removed.\n-                (None, Some(ret_place.to_ptr().get_addr(fx)))\n+                (None, Some(ret_ptr.get_addr(fx)))\n             } else {\n                 let place = CPlace::new_stack_slot(fx, ret_arg_abi.layout);\n                 (Some(place), Some(place.to_ptr().get_addr(fx)))"}, {"sha": "a259a4f30b27cca87f816fe92f717a2d37648e98", "filename": "compiler/rustc_codegen_cranelift/src/base.rs", "status": "modified", "additions": 12, "deletions": 42, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fbase.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -141,16 +141,6 @@ pub(crate) fn compile_fn(\n     context.clear();\n     context.func = codegened_func.func;\n \n-    // If the return block is not reachable, then the SSA builder may have inserted an `iconst.i128`\n-    // instruction, which doesn't have an encoding.\n-    context.compute_cfg();\n-    context.compute_domtree();\n-    context.eliminate_unreachable_code(module.isa()).unwrap();\n-    context.dce(module.isa()).unwrap();\n-    // Some Cranelift optimizations expect the domtree to not yet be computed and as such don't\n-    // invalidate it when it would change.\n-    context.domtree.clear();\n-\n     #[cfg(any())] // This is never true\n     let _clif_guard = {\n         use std::fmt::Write;\n@@ -182,27 +172,6 @@ pub(crate) fn compile_fn(\n     cx.profiler.generic_activity(\"define function\").run(|| {\n         context.want_disasm = cx.should_write_ir;\n         module.define_function(codegened_func.func_id, context).unwrap();\n-\n-        if cx.profiler.enabled() {\n-            let mut recording_args = false;\n-            cx.profiler\n-                .generic_activity_with_arg_recorder(\n-                    \"define function (clif pass timings)\",\n-                    |recorder| {\n-                        let pass_times = cranelift_codegen::timing::take_current();\n-                        // Replace newlines with | as measureme doesn't allow control characters like\n-                        // newlines inside strings.\n-                        recorder.record_arg(format!(\"{}\", pass_times).replace('\\n', \" | \"));\n-                        recording_args = true;\n-                    },\n-                )\n-                .run(|| {\n-                    if recording_args {\n-                        // Wait a tiny bit to ensure chrome's profiler doesn't hide the event\n-                        std::thread::sleep(std::time::Duration::from_nanos(2))\n-                    }\n-                });\n-        }\n     });\n \n     if cx.should_write_ir {\n@@ -216,7 +185,7 @@ pub(crate) fn compile_fn(\n             &clif_comments,\n         );\n \n-        if let Some(disasm) = &context.compiled_code().unwrap().disasm {\n+        if let Some(disasm) = &context.compiled_code().unwrap().vcode {\n             crate::pretty_clif::write_ir_file(\n                 &cx.output_filenames,\n                 &format!(\"{}.vcode\", codegened_func.symbol_name),\n@@ -524,13 +493,14 @@ fn codegen_stmt<'tcx>(\n \n     fx.set_debug_loc(stmt.source_info);\n \n-    #[cfg(any())] // This is never true\n     match &stmt.kind {\n         StatementKind::StorageLive(..) | StatementKind::StorageDead(..) => {} // Those are not very useful\n         _ => {\n             if fx.clif_comments.enabled() {\n                 let inst = fx.bcx.func.layout.last_inst(cur_block).unwrap();\n-                fx.add_comment(inst, format!(\"{:?}\", stmt));\n+                with_no_trimmed_paths!({\n+                    fx.add_comment(inst, format!(\"{:?}\", stmt));\n+                });\n             }\n         }\n     }\n@@ -715,11 +685,11 @@ fn codegen_stmt<'tcx>(\n                 }\n                 Rvalue::Cast(CastKind::Pointer(PointerCast::Unsize), ref operand, _to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n-                    operand.unsize_value(fx, lval);\n+                    crate::unsize::coerce_unsized_into(fx, operand, lval);\n                 }\n                 Rvalue::Cast(CastKind::DynStar, ref operand, _) => {\n                     let operand = codegen_operand(fx, operand);\n-                    operand.coerce_dyn_star(fx, lval);\n+                    crate::unsize::coerce_dyn_star(fx, operand, lval);\n                 }\n                 Rvalue::Cast(CastKind::Transmute, ref operand, _to_ty) => {\n                     let operand = codegen_operand(fx, operand);\n@@ -791,7 +761,10 @@ fn codegen_stmt<'tcx>(\n                             layout.offset_of_subfield(fx, fields.iter().map(|f| f.index())).bytes()\n                         }\n                     };\n-                    let val = CValue::const_val(fx, fx.layout_of(fx.tcx.types.usize), val.into());\n+                    let val = CValue::by_val(\n+                        fx.bcx.ins().iconst(fx.pointer_type, i64::try_from(val).unwrap()),\n+                        fx.layout_of(fx.tcx.types.usize),\n+                    );\n                     lval.write_cvalue(fx, val);\n                 }\n                 Rvalue::Aggregate(ref kind, ref operands) => {\n@@ -866,9 +839,7 @@ fn codegen_array_len<'tcx>(fx: &mut FunctionCx<'_, '_, 'tcx>, place: CPlace<'tcx\n             let len = fx.monomorphize(len).eval_target_usize(fx.tcx, ParamEnv::reveal_all()) as i64;\n             fx.bcx.ins().iconst(fx.pointer_type, len)\n         }\n-        ty::Slice(_elem_ty) => {\n-            place.to_ptr_maybe_unsized().1.expect(\"Length metadata for slice place\")\n-        }\n+        ty::Slice(_elem_ty) => place.to_ptr_unsized().1,\n         _ => bug!(\"Rvalue::Len({:?})\", place),\n     }\n }\n@@ -922,8 +893,7 @@ pub(crate) fn codegen_place<'tcx>(\n                     ty::Slice(elem_ty) => {\n                         assert!(from_end, \"slice subslices should be `from_end`\");\n                         let elem_layout = fx.layout_of(*elem_ty);\n-                        let (ptr, len) = cplace.to_ptr_maybe_unsized();\n-                        let len = len.unwrap();\n+                        let (ptr, len) = cplace.to_ptr_unsized();\n                         cplace = CPlace::for_ptr_with_extra(\n                             ptr.offset_i64(fx, elem_layout.size.bytes() as i64 * (from as i64)),\n                             fx.bcx.ins().iadd_imm(len, -(from as i64 + to as i64)),"}, {"sha": "6bf3a866ba46ac37e33a57ae5d42d3b2bd4124ee", "filename": "compiler/rustc_codegen_cranelift/src/cast.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcast.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -103,7 +103,7 @@ pub(crate) fn clif_int_or_float_cast(\n                     vec![AbiParam::new(types::I64X2)],\n                     &[from],\n                 )[0];\n-                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                // FIXME(bytecodealliance/wasmtime#6104) use bitcast instead of store to get from i64x2 to i128\n                 let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {\n                     kind: StackSlotKind::ExplicitSlot,\n                     size: 16,"}, {"sha": "f751d8c179db59c3e60e84a053bc05dc584ad659", "filename": "compiler/rustc_codegen_cranelift/src/codegen_i128.rs", "status": "modified", "additions": 81, "deletions": 66, "changes": 147, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcodegen_i128.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -7,7 +7,6 @@ use crate::prelude::*;\n pub(crate) fn maybe_codegen<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n     bin_op: BinOp,\n-    checked: bool,\n     lhs: CValue<'tcx>,\n     rhs: CValue<'tcx>,\n ) -> Option<CValue<'tcx>> {\n@@ -22,69 +21,23 @@ pub(crate) fn maybe_codegen<'tcx>(\n     let is_signed = type_sign(lhs.layout().ty);\n \n     match bin_op {\n-        BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => {\n-            assert!(!checked);\n-            None\n-        }\n-        BinOp::Add | BinOp::Sub if !checked => None,\n-        BinOp::Mul if !checked || is_signed => {\n-            if !checked {\n-                let args = [lhs.load_scalar(fx), rhs.load_scalar(fx)];\n-                let ret_val = fx.lib_call(\n-                    \"__multi3\",\n-                    vec![AbiParam::new(types::I128), AbiParam::new(types::I128)],\n-                    vec![AbiParam::new(types::I128)],\n-                    &args,\n-                )[0];\n-                Some(CValue::by_val(\n-                    ret_val,\n-                    fx.layout_of(if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 }),\n-                ))\n-            } else {\n-                let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n-                let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n-                let lhs = lhs.load_scalar(fx);\n-                let rhs = rhs.load_scalar(fx);\n-                let oflow_ptr = oflow.to_ptr().get_addr(fx);\n-                let res = fx.lib_call_unadjusted(\n-                    \"__muloti4\",\n-                    vec![\n-                        AbiParam::new(types::I128),\n-                        AbiParam::new(types::I128),\n-                        AbiParam::new(fx.pointer_type),\n-                    ],\n-                    vec![AbiParam::new(types::I128)],\n-                    &[lhs, rhs, oflow_ptr],\n-                )[0];\n-                let oflow = oflow.to_cvalue(fx).load_scalar(fx);\n-                let oflow = fx.bcx.ins().ireduce(types::I8, oflow);\n-                Some(CValue::by_val_pair(res, oflow, fx.layout_of(out_ty)))\n-            }\n-        }\n-        BinOp::Add | BinOp::Sub | BinOp::Mul => {\n-            assert!(checked);\n-            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n-            let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n-            let param_types = vec![\n-                AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n-                AbiParam::new(types::I128),\n-                AbiParam::new(types::I128),\n-            ];\n-            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n-            let name = match (bin_op, is_signed) {\n-                (BinOp::Add, false) => \"__rust_u128_addo\",\n-                (BinOp::Add, true) => \"__rust_i128_addo\",\n-                (BinOp::Sub, false) => \"__rust_u128_subo\",\n-                (BinOp::Sub, true) => \"__rust_i128_subo\",\n-                (BinOp::Mul, false) => \"__rust_u128_mulo\",\n-                _ => unreachable!(),\n-            };\n-            fx.lib_call(name, param_types, vec![], &args);\n-            Some(out_place.to_cvalue(fx))\n+        BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => None,\n+        BinOp::Add | BinOp::Sub => None,\n+        BinOp::Mul => {\n+            let args = [lhs.load_scalar(fx), rhs.load_scalar(fx)];\n+            let ret_val = fx.lib_call(\n+                \"__multi3\",\n+                vec![AbiParam::new(types::I128), AbiParam::new(types::I128)],\n+                vec![AbiParam::new(types::I128)],\n+                &args,\n+            )[0];\n+            Some(CValue::by_val(\n+                ret_val,\n+                fx.layout_of(if is_signed { fx.tcx.types.i128 } else { fx.tcx.types.u128 }),\n+            ))\n         }\n         BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n         BinOp::Div | BinOp::Rem => {\n-            assert!(!checked);\n             let name = match (bin_op, is_signed) {\n                 (BinOp::Div, false) => \"__udivti3\",\n                 (BinOp::Div, true) => \"__divti3\",\n@@ -100,7 +53,7 @@ pub(crate) fn maybe_codegen<'tcx>(\n                     vec![AbiParam::new(types::I64X2)],\n                     &args,\n                 )[0];\n-                // FIXME use bitcast instead of store to get from i64x2 to i128\n+                // FIXME(bytecodealliance/wasmtime#6104) use bitcast instead of store to get from i64x2 to i128\n                 let ret_place = CPlace::new_stack_slot(fx, lhs.layout());\n                 ret_place.to_ptr().store(fx, ret, MemFlags::trusted());\n                 Some(ret_place.to_cvalue(fx))\n@@ -115,10 +68,72 @@ pub(crate) fn maybe_codegen<'tcx>(\n                 Some(CValue::by_val(ret_val, lhs.layout()))\n             }\n         }\n-        BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => {\n-            assert!(!checked);\n-            None\n-        }\n+        BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => None,\n         BinOp::Shl | BinOp::Shr => None,\n     }\n }\n+\n+pub(crate) fn maybe_codegen_checked<'tcx>(\n+    fx: &mut FunctionCx<'_, '_, 'tcx>,\n+    bin_op: BinOp,\n+    lhs: CValue<'tcx>,\n+    rhs: CValue<'tcx>,\n+) -> Option<CValue<'tcx>> {\n+    if lhs.layout().ty != fx.tcx.types.u128\n+        && lhs.layout().ty != fx.tcx.types.i128\n+        && rhs.layout().ty != fx.tcx.types.u128\n+        && rhs.layout().ty != fx.tcx.types.i128\n+    {\n+        return None;\n+    }\n+\n+    let is_signed = type_sign(lhs.layout().ty);\n+\n+    match bin_op {\n+        BinOp::BitAnd | BinOp::BitOr | BinOp::BitXor => unreachable!(),\n+        BinOp::Mul if is_signed => {\n+            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+            let oflow = CPlace::new_stack_slot(fx, fx.layout_of(fx.tcx.types.i32));\n+            let lhs = lhs.load_scalar(fx);\n+            let rhs = rhs.load_scalar(fx);\n+            let oflow_ptr = oflow.to_ptr().get_addr(fx);\n+            let res = fx.lib_call_unadjusted(\n+                \"__muloti4\",\n+                vec![\n+                    AbiParam::new(types::I128),\n+                    AbiParam::new(types::I128),\n+                    AbiParam::new(fx.pointer_type),\n+                ],\n+                vec![AbiParam::new(types::I128)],\n+                &[lhs, rhs, oflow_ptr],\n+            )[0];\n+            let oflow = oflow.to_cvalue(fx).load_scalar(fx);\n+            let oflow = fx.bcx.ins().ireduce(types::I8, oflow);\n+            Some(CValue::by_val_pair(res, oflow, fx.layout_of(out_ty)))\n+        }\n+        BinOp::Add | BinOp::Sub | BinOp::Mul => {\n+            let out_ty = fx.tcx.mk_tup(&[lhs.layout().ty, fx.tcx.types.bool]);\n+            let out_place = CPlace::new_stack_slot(fx, fx.layout_of(out_ty));\n+            let param_types = vec![\n+                AbiParam::special(fx.pointer_type, ArgumentPurpose::StructReturn),\n+                AbiParam::new(types::I128),\n+                AbiParam::new(types::I128),\n+            ];\n+            let args = [out_place.to_ptr().get_addr(fx), lhs.load_scalar(fx), rhs.load_scalar(fx)];\n+            let name = match (bin_op, is_signed) {\n+                (BinOp::Add, false) => \"__rust_u128_addo\",\n+                (BinOp::Add, true) => \"__rust_i128_addo\",\n+                (BinOp::Sub, false) => \"__rust_u128_subo\",\n+                (BinOp::Sub, true) => \"__rust_i128_subo\",\n+                (BinOp::Mul, false) => \"__rust_u128_mulo\",\n+                _ => unreachable!(),\n+            };\n+            fx.lib_call(name, param_types, vec![], &args);\n+            Some(out_place.to_cvalue(fx))\n+        }\n+        BinOp::Offset => unreachable!(\"offset should only be used on pointers, not 128bit ints\"),\n+        BinOp::Div | BinOp::Rem => unreachable!(),\n+        BinOp::Lt | BinOp::Le | BinOp::Eq | BinOp::Ge | BinOp::Gt | BinOp::Ne => unreachable!(),\n+        BinOp::Shl | BinOp::Shr => unreachable!(),\n+    }\n+}"}, {"sha": "30f4cf4473c6bd283841228237d68c47f957e81a", "filename": "compiler/rustc_codegen_cranelift/src/common.rs", "status": "modified", "additions": 6, "deletions": 20, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fcommon.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -72,19 +72,6 @@ fn clif_type_from_ty<'tcx>(tcx: TyCtxt<'tcx>, ty: Ty<'tcx>) -> Option<types::Typ\n                 pointer_ty(tcx)\n             }\n         }\n-        ty::Adt(adt_def, _) if adt_def.repr().simd() => {\n-            let (element, count) = match &tcx.layout_of(ParamEnv::reveal_all().and(ty)).unwrap().abi\n-            {\n-                Abi::Vector { element, count } => (*element, *count),\n-                _ => unreachable!(),\n-            };\n-\n-            match scalar_to_clif_type(tcx, element).by(u32::try_from(count).unwrap()) {\n-                // Cranelift currently only implements icmp for 128bit vectors.\n-                Some(vector_ty) if vector_ty.bits() == 128 => vector_ty,\n-                _ => return None,\n-            }\n-        }\n         ty::Param(_) => bug!(\"ty param {:?}\", ty),\n         _ => return None,\n     })\n@@ -96,12 +83,7 @@ fn clif_pair_type_from_ty<'tcx>(\n ) -> Option<(types::Type, types::Type)> {\n     Some(match ty.kind() {\n         ty::Tuple(types) if types.len() == 2 => {\n-            let a = clif_type_from_ty(tcx, types[0])?;\n-            let b = clif_type_from_ty(tcx, types[1])?;\n-            if a.is_vector() || b.is_vector() {\n-                return None;\n-            }\n-            (a, b)\n+            (clif_type_from_ty(tcx, types[0])?, clif_type_from_ty(tcx, types[1])?)\n         }\n         ty::RawPtr(TypeAndMut { ty: pointee_ty, mutbl: _ }) | ty::Ref(_, pointee_ty, _) => {\n             if has_ptr_meta(tcx, *pointee_ty) {\n@@ -431,7 +413,11 @@ impl<'tcx> FunctionCx<'_, '_, 'tcx> {\n \n     // Note: must be kept in sync with get_caller_location from cg_ssa\n     pub(crate) fn get_caller_location(&mut self, mut source_info: mir::SourceInfo) -> CValue<'tcx> {\n-        let span_to_caller_location = |fx: &mut FunctionCx<'_, '_, 'tcx>, span: Span| {\n+        let span_to_caller_location = |fx: &mut FunctionCx<'_, '_, 'tcx>, mut span: Span| {\n+            // Remove `Inlined` marks as they pollute `expansion_cause`.\n+            while span.is_inlined() {\n+                span.remove_mark();\n+            }\n             let topmost = span.ctxt().outer_expn().expansion_cause().unwrap_or(span);\n             let caller = fx.tcx.sess.source_map().lookup_char_pos(topmost.lo());\n             let const_loc = fx.tcx.const_caller_location(("}, {"sha": "54df04f8c2c4a7462da0b0761f6bf2640e440f07", "filename": "compiler/rustc_codegen_cranelift/src/concurrency_limiter.rs", "status": "modified", "additions": 55, "deletions": 12, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconcurrency_limiter.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -25,8 +25,18 @@ impl ConcurrencyLimiter {\n             .clone()\n             .into_helper_thread(move |token| {\n                 let mut state = state_helper.lock().unwrap();\n-                state.add_new_token(token.unwrap());\n-                available_token_condvar_helper.notify_one();\n+                match token {\n+                    Ok(token) => {\n+                        state.add_new_token(token);\n+                        available_token_condvar_helper.notify_one();\n+                    }\n+                    Err(err) => {\n+                        state.poison(format!(\"failed to acquire jobserver token: {}\", err));\n+                        // Notify all threads waiting for a token to give them a chance to\n+                        // gracefully exit.\n+                        available_token_condvar_helper.notify_all();\n+                    }\n+                }\n             })\n             .unwrap();\n         ConcurrencyLimiter {\n@@ -37,16 +47,31 @@ impl ConcurrencyLimiter {\n         }\n     }\n \n-    pub(super) fn acquire(&mut self) -> ConcurrencyLimiterToken {\n+    pub(super) fn acquire(&mut self, handler: &rustc_errors::Handler) -> ConcurrencyLimiterToken {\n         let mut state = self.state.lock().unwrap();\n         loop {\n             state.assert_invariants();\n \n-            if state.try_start_job() {\n-                return ConcurrencyLimiterToken {\n-                    state: self.state.clone(),\n-                    available_token_condvar: self.available_token_condvar.clone(),\n-                };\n+            match state.try_start_job() {\n+                Ok(true) => {\n+                    return ConcurrencyLimiterToken {\n+                        state: self.state.clone(),\n+                        available_token_condvar: self.available_token_condvar.clone(),\n+                    };\n+                }\n+                Ok(false) => {}\n+                Err(err) => {\n+                    // An error happened when acquiring the token. Raise it as fatal error.\n+                    // Make sure to drop the mutex guard first to prevent poisoning the mutex.\n+                    drop(state);\n+                    if let Some(err) = err {\n+                        handler.fatal(&err).raise();\n+                    } else {\n+                        // The error was already emitted, but compilation continued. Raise a silent\n+                        // fatal error.\n+                        rustc_errors::FatalError.raise();\n+                    }\n+                }\n             }\n \n             self.helper_thread.as_mut().unwrap().request_token();\n@@ -100,13 +125,22 @@ mod state {\n         pending_jobs: usize,\n         active_jobs: usize,\n \n+        poisoned: bool,\n+        stored_error: Option<String>,\n+\n         // None is used to represent the implicit token, Some to represent explicit tokens\n         tokens: Vec<Option<Acquired>>,\n     }\n \n     impl ConcurrencyLimiterState {\n         pub(super) fn new(pending_jobs: usize) -> Self {\n-            ConcurrencyLimiterState { pending_jobs, active_jobs: 0, tokens: vec![None] }\n+            ConcurrencyLimiterState {\n+                pending_jobs,\n+                active_jobs: 0,\n+                poisoned: false,\n+                stored_error: None,\n+                tokens: vec![None],\n+            }\n         }\n \n         pub(super) fn assert_invariants(&self) {\n@@ -127,14 +161,18 @@ mod state {\n             self.drop_excess_capacity();\n         }\n \n-        pub(super) fn try_start_job(&mut self) -> bool {\n+        pub(super) fn try_start_job(&mut self) -> Result<bool, Option<String>> {\n+            if self.poisoned {\n+                return Err(self.stored_error.take());\n+            }\n+\n             if self.active_jobs < self.tokens.len() {\n                 // Using existing token\n                 self.job_started();\n-                return true;\n+                return Ok(true);\n             }\n \n-            false\n+            Ok(false)\n         }\n \n         pub(super) fn job_started(&mut self) {\n@@ -161,6 +199,11 @@ mod state {\n             self.assert_invariants();\n         }\n \n+        pub(super) fn poison(&mut self, error: String) {\n+            self.poisoned = true;\n+            self.stored_error = Some(error);\n+        }\n+\n         fn drop_excess_capacity(&mut self) {\n             self.assert_invariants();\n "}, {"sha": "bf5d29c16f664ad5ec48ca58354c0f83ab361e00", "filename": "compiler/rustc_codegen_cranelift/src/constant.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fconstant.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -159,6 +159,8 @@ pub(crate) fn codegen_const_value<'tcx>(\n                         _ => unreachable!(),\n                     };\n \n+                    // FIXME avoid this extra copy to the stack and directly write to the final\n+                    // destination\n                     let place = CPlace::new_stack_slot(fx, layout);\n                     place.to_ptr().store(fx, val, MemFlags::trusted());\n                     place.to_cvalue(fx)"}, {"sha": "0e6c6ad95aa1ada40c59f4dc5df66c8e6a71b1bb", "filename": "compiler/rustc_codegen_cranelift/src/driver/aot.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Faot.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -324,6 +324,10 @@ fn module_codegen(\n     OngoingModuleCodegen::Async(std::thread::spawn(move || {\n         cx.profiler.clone().verbose_generic_activity_with_arg(\"compile functions\", &*cgu_name).run(\n             || {\n+                cranelift_codegen::timing::set_thread_profiler(Box::new(super::MeasuremeProfiler(\n+                    cx.profiler.clone(),\n+                )));\n+\n                 let mut cached_context = Context::new();\n                 for codegened_func in codegened_functions {\n                     crate::base::compile_fn(\n@@ -407,7 +411,7 @@ pub(crate) fn run_aot(\n                                     backend_config.clone(),\n                                     global_asm_config.clone(),\n                                     cgu.name(),\n-                                    concurrency_limiter.acquire(),\n+                                    concurrency_limiter.acquire(tcx.sess.diagnostic()),\n                                 ),\n                                 module_codegen,\n                                 Some(rustc_middle::dep_graph::hash_result),"}, {"sha": "3118105a4e2d7a26b7abff8ff25b2b2529d4e134", "filename": "compiler/rustc_codegen_cranelift/src/driver/jit.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fjit.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -224,6 +224,10 @@ pub(crate) fn codegen_and_compile_fn<'tcx>(\n     module: &mut dyn Module,\n     instance: Instance<'tcx>,\n ) {\n+    cranelift_codegen::timing::set_thread_profiler(Box::new(super::MeasuremeProfiler(\n+        cx.profiler.clone(),\n+    )));\n+\n     tcx.prof.generic_activity(\"codegen and compile fn\").run(|| {\n         let _inst_guard =\n             crate::PrintOnPanic(|| format!(\"{:?} {}\", instance, tcx.symbol_name(instance).name));"}, {"sha": "5c52c9c18adfde49e1c60b56f909146bbce98732", "filename": "compiler/rustc_codegen_cranelift/src/driver/mod.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fdriver%2Fmod.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -4,6 +4,7 @@\n //! [`codegen_fn`]: crate::base::codegen_fn\n //! [`codegen_static`]: crate::constant::codegen_static\n \n+use rustc_data_structures::profiling::SelfProfilerRef;\n use rustc_middle::mir::mono::{Linkage as RLinkage, MonoItem, Visibility};\n \n use crate::prelude::*;\n@@ -39,3 +40,31 @@ fn predefine_mono_items<'tcx>(\n         }\n     });\n }\n+\n+struct MeasuremeProfiler(SelfProfilerRef);\n+\n+struct TimingGuard {\n+    profiler: std::mem::ManuallyDrop<SelfProfilerRef>,\n+    inner: Option<rustc_data_structures::profiling::TimingGuard<'static>>,\n+}\n+\n+impl Drop for TimingGuard {\n+    fn drop(&mut self) {\n+        self.inner.take();\n+        unsafe {\n+            std::mem::ManuallyDrop::drop(&mut self.profiler);\n+        }\n+    }\n+}\n+\n+impl cranelift_codegen::timing::Profiler for MeasuremeProfiler {\n+    fn start_pass(&self, pass: cranelift_codegen::timing::Pass) -> Box<dyn std::any::Any> {\n+        let mut timing_guard =\n+            TimingGuard { profiler: std::mem::ManuallyDrop::new(self.0.clone()), inner: None };\n+        timing_guard.inner = Some(\n+            unsafe { &*(&*timing_guard.profiler as &SelfProfilerRef as *const SelfProfilerRef) }\n+                .generic_activity(pass.description()),\n+        );\n+        Box::new(timing_guard)\n+    }\n+}"}, {"sha": "63a1f6959ddae05f5096330ee071680b61bc94b5", "filename": "compiler/rustc_codegen_cranelift/src/global_asm.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fglobal_asm.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -104,7 +104,6 @@ pub(crate) fn compile_global_asm(\n             return Ok(None);\n         }\n \n-        // FIXME fix linker error on macOS\n         if cfg!(not(feature = \"inline_asm\")) {\n             return Err(\n                 \"asm! and global_asm! support is disabled while compiling rustc_codegen_cranelift\""}, {"sha": "539f8c103dbd7b59f09932315692ecebfa32d6f7", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/mod.rs", "status": "modified", "additions": 4, "deletions": 8, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fmod.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -51,17 +51,13 @@ fn report_atomic_type_validation_error<'tcx>(\n     fx.bcx.ins().trap(TrapCode::UnreachableCodeReached);\n }\n \n-pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Option<Type> {\n+pub(crate) fn clif_vector_type<'tcx>(tcx: TyCtxt<'tcx>, layout: TyAndLayout<'tcx>) -> Type {\n     let (element, count) = match layout.abi {\n         Abi::Vector { element, count } => (element, count),\n         _ => unreachable!(),\n     };\n \n-    match scalar_to_clif_type(tcx, element).by(u32::try_from(count).unwrap()) {\n-        // Cranelift currently only implements icmp for 128bit vectors.\n-        Some(vector_ty) if vector_ty.bits() == 128 => Some(vector_ty),\n-        _ => None,\n-    }\n+    scalar_to_clif_type(tcx, element).by(u32::try_from(count).unwrap()).unwrap()\n }\n \n fn simd_for_each_lane<'tcx>(\n@@ -1107,8 +1103,8 @@ fn codegen_regular_intrinsic_call<'tcx>(\n \n             fx.bcx.ins().call_indirect(f_sig, f, &[data]);\n \n-            let layout = ret.layout();\n-            let ret_val = CValue::const_val(fx, layout, ty::ScalarInt::null(layout.size));\n+            let layout = fx.layout_of(fx.tcx.types.i32);\n+            let ret_val = CValue::by_val(fx.bcx.ins().iconst(types::I32, 0), layout);\n             ret.write_cvalue(fx, ret_val);\n         }\n "}, {"sha": "264b578c168b2fb3148fd69b1cd95da59236037f", "filename": "compiler/rustc_codegen_cranelift/src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fintrinsics%2Fsimd.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -253,7 +253,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n             }\n \n             ret.write_cvalue(fx, base);\n-            let ret_lane = ret.place_field(fx, FieldIdx::new(idx.try_into().unwrap()));\n+            let ret_lane = ret.place_lane(fx, idx.try_into().unwrap());\n             ret_lane.write_cvalue(fx, val);\n         }\n "}, {"sha": "f0b399ae2808d2792d173f29673b753ac0d60009", "filename": "compiler/rustc_codegen_cranelift/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Flib.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -110,7 +110,7 @@ mod prelude {\n     pub(crate) use crate::common::*;\n     pub(crate) use crate::debuginfo::{DebugContext, UnwindContext};\n     pub(crate) use crate::pointer::Pointer;\n-    pub(crate) use crate::value_and_place::{CPlace, CPlaceInner, CValue};\n+    pub(crate) use crate::value_and_place::{CPlace, CValue};\n }\n \n struct PrintOnPanic<F: Fn() -> String>(F);"}, {"sha": "ba53e01c7a2123919dc3d30a4c14f81d220c3486", "filename": "compiler/rustc_codegen_cranelift/src/num.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fnum.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -118,7 +118,7 @@ pub(crate) fn codegen_int_binop<'tcx>(\n         );\n     }\n \n-    if let Some(res) = crate::codegen_i128::maybe_codegen(fx, bin_op, false, in_lhs, in_rhs) {\n+    if let Some(res) = crate::codegen_i128::maybe_codegen(fx, bin_op, in_lhs, in_rhs) {\n         return res;\n     }\n \n@@ -173,7 +173,7 @@ pub(crate) fn codegen_checked_int_binop<'tcx>(\n     let lhs = in_lhs.load_scalar(fx);\n     let rhs = in_rhs.load_scalar(fx);\n \n-    if let Some(res) = crate::codegen_i128::maybe_codegen(fx, bin_op, true, in_lhs, in_rhs) {\n+    if let Some(res) = crate::codegen_i128::maybe_codegen_checked(fx, bin_op, in_lhs, in_rhs) {\n         return res;\n     }\n "}, {"sha": "27e21183c55679f29f5380a601dcb5a0a96eade6", "filename": "compiler/rustc_codegen_cranelift/src/pretty_clif.rs", "status": "modified", "additions": 30, "deletions": 27, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fpretty_clif.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -7,48 +7,51 @@\n //! test compile\n //! target x86_64\n //!\n-//! function u0:0(i64, i64, i64) system_v {\n-//! ; symbol _ZN119_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$u27$a$u20$$RF$$u27$b$u20$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17he85059d5e6a760a0E\n-//! ; instance Instance { def: Item(DefId(0/0:29 ~ example[8787]::{{impl}}[0]::call_once[0])), substs: [ReErased, ReErased] }\n-//! ; sig ([IsNotEmpty, (&&[u16],)]; c_variadic: false)->(u8, u8)\n+//! function u0:22(i64) -> i8, i8 system_v {\n+//! ; symbol _ZN97_$LT$example..IsNotEmpty$u20$as$u20$mini_core..FnOnce$LT$$LP$$RF$$RF$$u5b$u16$u5d$$C$$RP$$GT$$GT$9call_once17hd517c453d67c0915E\n+//! ; instance Instance { def: Item(WithOptConstParam { did: DefId(0:42 ~ example[4e51]::{impl#0}::call_once), const_param_did: None }), substs: [ReErased, ReErased] }\n+//! ; abi FnAbi { args: [ArgAbi { layout: TyAndLayout { ty: IsNotEmpty, layout: Layout { size: Size(0 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: Aggregate { sized: true }, fields: Arbitrary { offsets: [], memory_index: [] }, largest_niche: None, variants: Single { index: 0 } } }, mode: Ignore }, ArgAbi { layout: TyAndLayout { ty: &&[u16], layout: Layout { size: Size(8 bytes), align: AbiAndPrefAlign { abi: Align(8 bytes), pref: Align(8 bytes) }, abi: Scalar(Initialized { value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), fields: Primitive, largest_niche: Some(Niche { offset: Size(0 bytes), value: Pointer(AddressSpace(0)), valid_range: 1..=18446744073709551615 }), variants: Single { index: 0 } } }, mode: Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: Some(Align(8 bytes)) }) }], ret: ArgAbi { layout: TyAndLayout { ty: (u8, u8), layout: Layout { size: Size(2 bytes), align: AbiAndPrefAlign { abi: Align(1 bytes), pref: Align(8 bytes) }, abi: ScalarPair(Initialized { value: Int(I8, false), valid_range: 0..=255 }, Initialized { value: Int(I8, false), valid_range: 0..=255 }), fields: Arbitrary { offsets: [Size(0 bytes), Size(1 bytes)], memory_index: [0, 1] }, largest_niche: None, variants: Single { index: 0 } } }, mode: Pair(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }, ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) }, c_variadic: false, fixed_count: 1, conv: Rust, can_unwind: false }\n //!\n-//! ; ssa {_2: NOT_SSA, _4: NOT_SSA, _0: NOT_SSA, _3: (empty), _1: NOT_SSA}\n-//! ; msg   loc.idx    param    pass mode            ssa flags  ty\n-//! ; ret    _0      = v0       ByRef                NOT_SSA    (u8, u8)\n-//! ; arg    _1      = v1       ByRef                NOT_SSA    IsNotEmpty\n-//! ; arg    _2.0    = v2       ByVal(types::I64)    NOT_SSA    &&[u16]\n+//! ; kind  loc.idx   param    pass mode                            ty\n+//! ; ssa   _0    (u8, u8)                          2b 1, 8              var=(0, 1)\n+//! ; ret   _0      -          Pair(ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }, ArgAttributes { regular: NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: None }) (u8, u8)\n+//! ; arg   _1      -          Ignore                               IsNotEmpty\n+//! ; arg   _2.0    = v0       Direct(ArgAttributes { regular: NonNull | NoUndef, arg_ext: None, pointee_size: Size(0 bytes), pointee_align: Some(Align(8 bytes)) }) &&[u16]\n //!\n-//!     ss0 = explicit_slot 0 ; _1: IsNotEmpty size=0 align=1,8\n-//!     ss1 = explicit_slot 8 ; _2: (&&[u16],) size=8 align=8,8\n-//!     ss2 = explicit_slot 8 ; _4: (&&[u16],) size=8 align=8,8\n-//!     sig0 = (i64, i64, i64) system_v\n-//!     sig1 = (i64, i64, i64) system_v\n-//!     fn0 = colocated u0:6 sig1 ; Instance { def: Item(DefId(0/0:31 ~ example[8787]::{{impl}}[1]::call_mut[0])), substs: [ReErased, ReErased] }\n+//! ; kind  local ty                              size align (abi,pref)\n+//! ; zst   _1    IsNotEmpty                        0b 1, 8              align=8,offset=\n+//! ; stack _2    (&&[u16],)                        8b 8, 8              storage=ss0\n+//! ; ssa   _3    &mut IsNotEmpty                   8b 8, 8              var=2\n //!\n-//! block0(v0: i64, v1: i64, v2: i64):\n-//!     v3 = stack_addr.i64 ss0\n-//!     v4 = stack_addr.i64 ss1\n-//!     store v2, v4\n-//!     v5 = stack_addr.i64 ss2\n+//!     ss0 = explicit_slot 16\n+//!     sig0 = (i64, i64) -> i8, i8 system_v\n+//!     fn0 = colocated u0:23 sig0 ; Instance { def: Item(WithOptConstParam { did: DefId(0:46 ~ example[4e51]::{impl#1}::call_mut), const_param_did: None }), substs: [ReErased, ReErased] }\n+//!\n+//! block0(v0: i64):\n+//!     nop\n+//! ; write_cvalue: Addr(Pointer { base: Stack(ss0), offset: Offset32(0) }, None): &&[u16] <- ByVal(v0): &&[u16]\n+//!     stack_store v0, ss0\n //!     jump block1\n //!\n //! block1:\n //!     nop\n //! ; _3 = &mut _1\n-//! ; _4 = _2\n-//!     v6 = load.i64 v4\n-//!     store v6, v5\n+//!     v1 = iconst.i64 8\n+//! ; write_cvalue: Var(_3, var2): &mut IsNotEmpty <- ByVal(v1): &mut IsNotEmpty\n //! ;\n-//! ; _0 = const mini_core::FnMut::call_mut(move _3, move _4)\n-//!     v7 = load.i64 v5\n-//!     call fn0(v0, v3, v7)\n+//! ; _0 = <IsNotEmpty as mini_core::FnMut<(&&[u16],)>>::call_mut(move _3, _2)\n+//!     v2 = stack_load.i64 ss0\n+//!     v3, v4 = call fn0(v1, v2)  ; v1 = 8\n+//!     v5 -> v3\n+//!     v6 -> v4\n+//! ; write_cvalue: VarPair(_0, var0, var1): (u8, u8) <- ByValPair(v3, v4): (u8, u8)\n //!     jump block2\n //!\n //! block2:\n //!     nop\n //! ;\n //! ; return\n-//!     return\n+//!     return v5, v6\n //! }\n //! ```\n "}, {"sha": "c964d1ac5e0dd4608de6fcd852b09fa8be73d38f", "filename": "compiler/rustc_codegen_cranelift/src/value_and_place.rs", "status": "modified", "additions": 113, "deletions": 217, "changes": 330, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fsrc%2Fvalue_and_place.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -2,8 +2,8 @@\n \n use crate::prelude::*;\n \n+use cranelift_codegen::entity::EntityRef;\n use cranelift_codegen::ir::immediates::Offset32;\n-use cranelift_codegen::ir::{InstructionData, Opcode};\n \n fn codegen_field<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n@@ -214,17 +214,7 @@ impl<'tcx> CValue<'tcx> {\n     ) -> CValue<'tcx> {\n         let layout = self.1;\n         match self.0 {\n-            CValueInner::ByVal(val) => match layout.abi {\n-                Abi::Vector { element: _, count } => {\n-                    let count = u8::try_from(count).expect(\"SIMD type with more than 255 lanes???\");\n-                    let field = u8::try_from(field.index()).unwrap();\n-                    assert!(field < count);\n-                    let lane = fx.bcx.ins().extractlane(val, field);\n-                    let field_layout = layout.field(&*fx, usize::from(field));\n-                    CValue::by_val(lane, field_layout)\n-                }\n-                _ => unreachable!(\"value_field for ByVal with abi {:?}\", layout.abi),\n-            },\n+            CValueInner::ByVal(_) => unreachable!(),\n             CValueInner::ByValPair(val1, val2) => match layout.abi {\n                 Abi::ScalarPair(_, _) => {\n                     let val = match field.as_u32() {\n@@ -258,16 +248,7 @@ impl<'tcx> CValue<'tcx> {\n         let lane_layout = fx.layout_of(lane_ty);\n         assert!(lane_idx < lane_count);\n         match self.0 {\n-            CValueInner::ByVal(val) => match layout.abi {\n-                Abi::Vector { element: _, count: _ } => {\n-                    assert!(lane_count <= u8::MAX.into(), \"SIMD type with more than 255 lanes???\");\n-                    let lane_idx = u8::try_from(lane_idx).unwrap();\n-                    let lane = fx.bcx.ins().extractlane(val, lane_idx);\n-                    CValue::by_val(lane, lane_layout)\n-                }\n-                _ => unreachable!(\"value_lane for ByVal with abi {:?}\", layout.abi),\n-            },\n-            CValueInner::ByValPair(_, _) => unreachable!(),\n+            CValueInner::ByVal(_) | CValueInner::ByValPair(_, _) => unreachable!(),\n             CValueInner::ByRef(ptr, None) => {\n                 let field_offset = lane_layout.size * lane_idx;\n                 let field_ptr = ptr.offset_i64(fx, i64::try_from(field_offset.bytes()).unwrap());\n@@ -277,14 +258,6 @@ impl<'tcx> CValue<'tcx> {\n         }\n     }\n \n-    pub(crate) fn unsize_value(self, fx: &mut FunctionCx<'_, '_, 'tcx>, dest: CPlace<'tcx>) {\n-        crate::unsize::coerce_unsized_into(fx, self, dest);\n-    }\n-\n-    pub(crate) fn coerce_dyn_star(self, fx: &mut FunctionCx<'_, '_, 'tcx>, dest: CPlace<'tcx>) {\n-        crate::unsize::coerce_dyn_star(fx, self, dest);\n-    }\n-\n     /// If `ty` is signed, `const_val` must already be sign extended.\n     pub(crate) fn const_val(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n@@ -345,10 +318,9 @@ pub(crate) struct CPlace<'tcx> {\n }\n \n #[derive(Debug, Copy, Clone)]\n-pub(crate) enum CPlaceInner {\n+enum CPlaceInner {\n     Var(Local, Variable),\n     VarPair(Local, Variable, Variable),\n-    VarLane(Local, Variable, u8),\n     Addr(Pointer, Option<Value>),\n }\n \n@@ -357,10 +329,6 @@ impl<'tcx> CPlace<'tcx> {\n         self.layout\n     }\n \n-    pub(crate) fn inner(&self) -> &CPlaceInner {\n-        &self.inner\n-    }\n-\n     pub(crate) fn new_stack_slot(\n         fx: &mut FunctionCx<'_, '_, 'tcx>,\n         layout: TyAndLayout<'tcx>,\n@@ -442,12 +410,6 @@ impl<'tcx> CPlace<'tcx> {\n                 //fx.bcx.set_val_label(val2, cranelift_codegen::ir::ValueLabel::new(var2.index()));\n                 CValue::by_val_pair(val1, val2, layout)\n             }\n-            CPlaceInner::VarLane(_local, var, lane) => {\n-                let val = fx.bcx.use_var(var);\n-                //fx.bcx.set_val_label(val, cranelift_codegen::ir::ValueLabel::new(var.index()));\n-                let val = fx.bcx.ins().extractlane(val, lane);\n-                CValue::by_val(val, layout)\n-            }\n             CPlaceInner::Addr(ptr, extra) => {\n                 if let Some(extra) = extra {\n                     CValue::by_ref_unsized(ptr, extra, layout)\n@@ -458,21 +420,56 @@ impl<'tcx> CPlace<'tcx> {\n         }\n     }\n \n+    pub(crate) fn debug_comment(self) -> (&'static str, String) {\n+        match self.inner {\n+            CPlaceInner::Var(_local, var) => (\"ssa\", format!(\"var={}\", var.index())),\n+            CPlaceInner::VarPair(_local, var1, var2) => {\n+                (\"ssa\", format!(\"var=({}, {})\", var1.index(), var2.index()))\n+            }\n+            CPlaceInner::Addr(ptr, meta) => {\n+                let meta =\n+                    if let Some(meta) = meta { format!(\",meta={}\", meta) } else { String::new() };\n+                match ptr.debug_base_and_offset() {\n+                    (crate::pointer::PointerBase::Addr(addr), offset) => {\n+                        (\"reuse\", format!(\"storage={}{}{}\", addr, offset, meta))\n+                    }\n+                    (crate::pointer::PointerBase::Stack(stack_slot), offset) => {\n+                        (\"stack\", format!(\"storage={}{}{}\", stack_slot, offset, meta))\n+                    }\n+                    (crate::pointer::PointerBase::Dangling(align), offset) => {\n+                        (\"zst\", format!(\"align={},offset={}\", align.bytes(), offset))\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n     #[track_caller]\n     pub(crate) fn to_ptr(self) -> Pointer {\n-        match self.to_ptr_maybe_unsized() {\n-            (ptr, None) => ptr,\n-            (_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n+        match self.inner {\n+            CPlaceInner::Addr(ptr, None) => ptr,\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected CPlace::Addr, found {:?}\", self)\n+            }\n         }\n     }\n \n     #[track_caller]\n-    pub(crate) fn to_ptr_maybe_unsized(self) -> (Pointer, Option<Value>) {\n+    pub(crate) fn to_ptr_unsized(self) -> (Pointer, Value) {\n         match self.inner {\n-            CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n-            CPlaceInner::Var(_, _)\n-            | CPlaceInner::VarPair(_, _, _)\n-            | CPlaceInner::VarLane(_, _, _) => bug!(\"Expected CPlace::Addr, found {:?}\", self),\n+            CPlaceInner::Addr(ptr, Some(extra)) => (ptr, extra),\n+            CPlaceInner::Addr(_, None) | CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected unsized cplace, found {:?}\", self)\n+            }\n+        }\n+    }\n+\n+    pub(crate) fn try_to_ptr(self) -> Option<Pointer> {\n+        match self.inner {\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => None,\n+            CPlaceInner::Addr(ptr, None) => Some(ptr),\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Expected sized cplace, found {:?}\", self),\n         }\n     }\n \n@@ -496,7 +493,7 @@ impl<'tcx> CPlace<'tcx> {\n         from: CValue<'tcx>,\n         method: &'static str,\n     ) {\n-        fn transmute_value<'tcx>(\n+        fn transmute_scalar<'tcx>(\n             fx: &mut FunctionCx<'_, '_, 'tcx>,\n             var: Variable,\n             data: Value,\n@@ -520,7 +517,7 @@ impl<'tcx> CPlace<'tcx> {\n                 | (types::F64, types::I64) => codegen_bitcast(fx, dst_ty, data),\n                 _ if src_ty.is_vector() && dst_ty.is_vector() => codegen_bitcast(fx, dst_ty, data),\n                 _ if src_ty.is_vector() || dst_ty.is_vector() => {\n-                    // FIXME do something more efficient for transmutes between vectors and integers.\n+                    // FIXME(bytecodealliance/wasmtime#6104) do something more efficient for transmutes between vectors and integers.\n                     let stack_slot = fx.bcx.create_sized_stack_slot(StackSlotData {\n                         kind: StackSlotKind::ExplicitSlot,\n                         // FIXME Don't force the size to a multiple of 16 bytes once Cranelift gets a way to\n@@ -554,7 +551,7 @@ impl<'tcx> CPlace<'tcx> {\n                 format!(\n                     \"{}: {:?}: {:?} <- {:?}: {:?}\",\n                     method,\n-                    self.inner(),\n+                    self.inner,\n                     self.layout().ty,\n                     from.0,\n                     from.layout().ty\n@@ -563,32 +560,11 @@ impl<'tcx> CPlace<'tcx> {\n         }\n \n         let dst_layout = self.layout();\n-        let to_ptr = match self.inner {\n+        match self.inner {\n             CPlaceInner::Var(_local, var) => {\n-                if let ty::Array(element, len) = dst_layout.ty.kind() {\n-                    // Can only happen for vector types\n-                    let len = u32::try_from(len.eval_target_usize(fx.tcx, ParamEnv::reveal_all()))\n-                        .unwrap();\n-                    let vector_ty = fx.clif_type(*element).unwrap().by(len).unwrap();\n-\n-                    let data = match from.0 {\n-                        CValueInner::ByRef(ptr, None) => {\n-                            let mut flags = MemFlags::new();\n-                            flags.set_notrap();\n-                            ptr.load(fx, vector_ty, flags)\n-                        }\n-                        CValueInner::ByVal(_)\n-                        | CValueInner::ByValPair(_, _)\n-                        | CValueInner::ByRef(_, Some(_)) => bug!(\"array should be ByRef\"),\n-                    };\n-\n-                    fx.bcx.def_var(var, data);\n-                    return;\n-                }\n                 let data = CValue(from.0, dst_layout).load_scalar(fx);\n                 let dst_ty = fx.clif_type(self.layout().ty).unwrap();\n-                transmute_value(fx, var, data, dst_ty);\n-                return;\n+                transmute_scalar(fx, var, data, dst_ty);\n             }\n             CPlaceInner::VarPair(_local, var1, var2) => {\n                 let (data1, data2) = if from.layout().ty == dst_layout.ty {\n@@ -599,80 +575,61 @@ impl<'tcx> CPlace<'tcx> {\n                     CValue(CValueInner::ByRef(ptr, None), dst_layout).load_scalar_pair(fx)\n                 };\n                 let (dst_ty1, dst_ty2) = fx.clif_pair_type(self.layout().ty).unwrap();\n-                transmute_value(fx, var1, data1, dst_ty1);\n-                transmute_value(fx, var2, data2, dst_ty2);\n-                return;\n+                transmute_scalar(fx, var1, data1, dst_ty1);\n+                transmute_scalar(fx, var2, data2, dst_ty2);\n             }\n-            CPlaceInner::VarLane(_local, var, lane) => {\n-                let data = from.load_scalar(fx);\n-\n-                // First get the old vector\n-                let vector = fx.bcx.use_var(var);\n-                //fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n-\n-                // Next insert the written lane into the vector\n-                let vector = fx.bcx.ins().insertlane(vector, data, lane);\n-\n-                // Finally write the new vector\n-                //fx.bcx.set_val_label(vector, cranelift_codegen::ir::ValueLabel::new(var.index()));\n-                fx.bcx.def_var(var, vector);\n-\n-                return;\n-            }\n-            CPlaceInner::Addr(ptr, None) => {\n+            CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n+            CPlaceInner::Addr(to_ptr, None) => {\n                 if dst_layout.size == Size::ZERO || dst_layout.abi == Abi::Uninhabited {\n                     return;\n                 }\n-                ptr\n-            }\n-            CPlaceInner::Addr(_, Some(_)) => bug!(\"Can't write value to unsized place {:?}\", self),\n-        };\n \n-        let mut flags = MemFlags::new();\n-        flags.set_notrap();\n-        match from.layout().abi {\n-            // FIXME make Abi::Vector work too\n-            Abi::Scalar(_) => {\n-                let val = from.load_scalar(fx);\n-                to_ptr.store(fx, val, flags);\n-                return;\n-            }\n-            Abi::ScalarPair(a_scalar, b_scalar) => {\n-                let (value, extra) = from.load_scalar_pair(fx);\n-                let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n-                to_ptr.store(fx, value, flags);\n-                to_ptr.offset(fx, b_offset).store(fx, extra, flags);\n-                return;\n-            }\n-            _ => {}\n-        }\n+                let mut flags = MemFlags::new();\n+                flags.set_notrap();\n+                match from.layout().abi {\n+                    Abi::Scalar(_) => {\n+                        let val = from.load_scalar(fx);\n+                        to_ptr.store(fx, val, flags);\n+                        return;\n+                    }\n+                    Abi::ScalarPair(a_scalar, b_scalar) => {\n+                        let (value, extra) = from.load_scalar_pair(fx);\n+                        let b_offset = scalar_pair_calculate_b_offset(fx.tcx, a_scalar, b_scalar);\n+                        to_ptr.store(fx, value, flags);\n+                        to_ptr.offset(fx, b_offset).store(fx, extra, flags);\n+                        return;\n+                    }\n+                    _ => {}\n+                }\n \n-        match from.0 {\n-            CValueInner::ByVal(val) => {\n-                to_ptr.store(fx, val, flags);\n-            }\n-            CValueInner::ByValPair(_, _) => {\n-                bug!(\"Non ScalarPair abi {:?} for ByValPair CValue\", dst_layout.abi);\n-            }\n-            CValueInner::ByRef(from_ptr, None) => {\n-                let from_addr = from_ptr.get_addr(fx);\n-                let to_addr = to_ptr.get_addr(fx);\n-                let src_layout = from.1;\n-                let size = dst_layout.size.bytes();\n-                let src_align = src_layout.align.abi.bytes() as u8;\n-                let dst_align = dst_layout.align.abi.bytes() as u8;\n-                fx.bcx.emit_small_memory_copy(\n-                    fx.target_config,\n-                    to_addr,\n-                    from_addr,\n-                    size,\n-                    dst_align,\n-                    src_align,\n-                    true,\n-                    flags,\n-                );\n+                match from.0 {\n+                    CValueInner::ByVal(val) => {\n+                        to_ptr.store(fx, val, flags);\n+                    }\n+                    CValueInner::ByValPair(_, _) => {\n+                        bug!(\"Non ScalarPair abi {:?} for ByValPair CValue\", dst_layout.abi);\n+                    }\n+                    CValueInner::ByRef(from_ptr, None) => {\n+                        let from_addr = from_ptr.get_addr(fx);\n+                        let to_addr = to_ptr.get_addr(fx);\n+                        let src_layout = from.1;\n+                        let size = dst_layout.size.bytes();\n+                        let src_align = src_layout.align.abi.bytes() as u8;\n+                        let dst_align = dst_layout.align.abi.bytes() as u8;\n+                        fx.bcx.emit_small_memory_copy(\n+                            fx.target_config,\n+                            to_addr,\n+                            from_addr,\n+                            size,\n+                            dst_align,\n+                            src_align,\n+                            true,\n+                            flags,\n+                        );\n+                    }\n+                    CValueInner::ByRef(_, Some(_)) => todo!(),\n+                }\n             }\n-            CValueInner::ByRef(_, Some(_)) => todo!(),\n         }\n     }\n \n@@ -692,40 +649,6 @@ impl<'tcx> CPlace<'tcx> {\n         let layout = self.layout();\n \n         match self.inner {\n-            CPlaceInner::Var(local, var) => match layout.ty.kind() {\n-                ty::Array(_, _) => {\n-                    // Can only happen for vector types\n-                    return CPlace {\n-                        inner: CPlaceInner::VarLane(local, var, field.as_u32().try_into().unwrap()),\n-                        layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n-                    };\n-                }\n-                ty::Adt(adt_def, substs) if layout.ty.is_simd() => {\n-                    let f0 = &adt_def.non_enum_variant().fields[FieldIdx::from_u32(0)];\n-                    let f0_ty = f0.ty(fx.tcx, substs);\n-\n-                    match f0_ty.kind() {\n-                        ty::Array(_, _) => {\n-                            assert_eq!(field.as_u32(), 0);\n-                            return CPlace {\n-                                inner: CPlaceInner::Var(local, var),\n-                                layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n-                            };\n-                        }\n-                        _ => {\n-                            return CPlace {\n-                                inner: CPlaceInner::VarLane(\n-                                    local,\n-                                    var,\n-                                    field.as_u32().try_into().unwrap(),\n-                                ),\n-                                layout: layout.field(fx, field.as_u32().try_into().unwrap()),\n-                            };\n-                        }\n-                    }\n-                }\n-                _ => {}\n-            },\n             CPlaceInner::VarPair(local, var1, var2) => {\n                 let layout = layout.field(&*fx, field.index());\n \n@@ -738,7 +661,12 @@ impl<'tcx> CPlace<'tcx> {\n             _ => {}\n         }\n \n-        let (base, extra) = self.to_ptr_maybe_unsized();\n+        let (base, extra) = match self.inner {\n+            CPlaceInner::Addr(ptr, extra) => (ptr, extra),\n+            CPlaceInner::Var(_, _) | CPlaceInner::VarPair(_, _, _) => {\n+                bug!(\"Expected CPlace::Addr, found {:?}\", self)\n+            }\n+        };\n \n         let (field_ptr, field_layout) = codegen_field(fx, base, extra, layout, field);\n         if field_layout.is_unsized() {\n@@ -767,15 +695,8 @@ impl<'tcx> CPlace<'tcx> {\n         assert!(lane_idx < lane_count);\n \n         match self.inner {\n-            CPlaceInner::Var(local, var) => {\n-                assert!(matches!(layout.abi, Abi::Vector { .. }));\n-                CPlace {\n-                    inner: CPlaceInner::VarLane(local, var, lane_idx.try_into().unwrap()),\n-                    layout: lane_layout,\n-                }\n-            }\n+            CPlaceInner::Var(_, _) => unreachable!(),\n             CPlaceInner::VarPair(_, _, _) => unreachable!(),\n-            CPlaceInner::VarLane(_, _, _) => unreachable!(),\n             CPlaceInner::Addr(ptr, None) => {\n                 let field_offset = lane_layout.size * lane_idx;\n                 let field_ptr = ptr.offset_i64(fx, i64::try_from(field_offset.bytes()).unwrap());\n@@ -794,34 +715,13 @@ impl<'tcx> CPlace<'tcx> {\n             ty::Array(elem_ty, _) => {\n                 let elem_layout = fx.layout_of(*elem_ty);\n                 match self.inner {\n-                    CPlaceInner::Var(local, var) => {\n-                        // This is a hack to handle `vector_val.0[1]`. It doesn't allow dynamic\n-                        // indexing.\n-                        let lane_idx = match fx.bcx.func.dfg.insts\n-                            [fx.bcx.func.dfg.value_def(index).unwrap_inst()]\n-                        {\n-                            InstructionData::UnaryImm { opcode: Opcode::Iconst, imm } => imm,\n-                            _ => bug!(\n-                                \"Dynamic indexing into a vector type is not supported: {self:?}[{index}]\"\n-                            ),\n-                        };\n-                        return CPlace {\n-                            inner: CPlaceInner::VarLane(\n-                                local,\n-                                var,\n-                                lane_idx.bits().try_into().unwrap(),\n-                            ),\n-                            layout: elem_layout,\n-                        };\n-                    }\n                     CPlaceInner::Addr(addr, None) => (elem_layout, addr),\n-                    CPlaceInner::Addr(_, Some(_))\n-                    | CPlaceInner::VarPair(_, _, _)\n-                    | CPlaceInner::VarLane(_, _, _) => bug!(\"Can't index into {self:?}\"),\n+                    CPlaceInner::Var(_, _)\n+                    | CPlaceInner::Addr(_, Some(_))\n+                    | CPlaceInner::VarPair(_, _, _) => bug!(\"Can't index into {self:?}\"),\n                 }\n-                // FIXME use VarLane in case of Var with simd type\n             }\n-            ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_maybe_unsized().0),\n+            ty::Slice(elem_ty) => (fx.layout_of(*elem_ty), self.to_ptr_unsized().0),\n             _ => bug!(\"place_index({:?})\", self.layout().ty),\n         };\n \n@@ -846,12 +746,8 @@ impl<'tcx> CPlace<'tcx> {\n         layout: TyAndLayout<'tcx>,\n     ) -> CValue<'tcx> {\n         if has_ptr_meta(fx.tcx, self.layout().ty) {\n-            let (ptr, extra) = self.to_ptr_maybe_unsized();\n-            CValue::by_val_pair(\n-                ptr.get_addr(fx),\n-                extra.expect(\"unsized type without metadata\"),\n-                layout,\n-            )\n+            let (ptr, extra) = self.to_ptr_unsized();\n+            CValue::by_val_pair(ptr.get_addr(fx), extra, layout)\n         } else {\n             CValue::by_val(self.to_ptr().get_addr(fx), layout)\n         }"}, {"sha": "a68a10500f508b3147cc166e7100b5f8678a073e", "filename": "compiler/rustc_codegen_cranelift/y.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8697f95659dae497c30f5ee4b73badd271cf77d/compiler%2Frustc_codegen_cranelift%2Fy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fy.rs?ref=a8697f95659dae497c30f5ee4b73badd271cf77d", "patch": "@@ -3,10 +3,14 @@\n # This block is ignored by rustc\n set -e\n echo \"[BUILD] y.rs\" 1>&2\n-rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021 -Cpanic=abort\n+rustc $0 -o ${0/.rs/.bin} -Cdebuginfo=1 --edition 2021\n exec ${0/.rs/.bin} $@\n */\n \n+#![warn(rust_2018_idioms)]\n+#![warn(unused_lifetimes)]\n+#![warn(unreachable_pub)]\n+\n //! The build system for cg_clif\n //!\n //! # Manual compilation"}]}