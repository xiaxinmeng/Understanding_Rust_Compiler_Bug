{"sha": "7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "node_id": "C_kwDOAAsO6NoAKDdmM2ZmYmM4YzIyZDAwODQ5ODc5NjZiMDQ5NmE2M2NlNGQ2Mjc4ZDU", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-10-28T17:58:16Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2021-11-10T16:35:42Z"}, "message": "std: Get the standard library compiling for wasm64\n\nThis commit goes through and updates various `#[cfg]` as appropriate to\nget the wasm64-unknown-unknown target behaving similarly to the\nwasm32-unknown-unknown target. Most of this is just updating various\nconditions for `target_arch = \"wasm32\"` to also account for `target_arch\n= \"wasm64\"` where appropriate. This commit also lists `wasm64` as an\nallow-listed architecture to not have the `restricted_std` feature\nenabled, enabling experimentation with `-Z build-std` externally.\n\nThe main goal of this commit is to enable playing around with\n`wasm64-unknown-unknown` externally via `-Z build-std` in a way that's\nsimilar to the `wasm32-unknown-unknown` target. These targets are\neffectively the same and only differ in their pointer size, but wasm64\nis much newer and has much less ecosystem/library support so it'll still\ntake time to get wasm64 fully-fledged.", "tree": {"sha": "a1c4eda31c419cbfdc47be846ef4dc4d5743d12c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a1c4eda31c419cbfdc47be846ef4dc4d5743d12c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "html_url": "https://github.com/rust-lang/rust/commit/7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "url": "https://api.github.com/repos/rust-lang/rust/commits/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c", "html_url": "https://github.com/rust-lang/rust/commit/68ca579406f2fa9ec62710e4a4d5d3e07a168d3c"}], "stats": {"total": 63, "additions": 41, "deletions": 22}, "files": [{"sha": "7eacbb4364026973e3c444b7334bacc24563dd49", "filename": "compiler/rustc_target/src/spec/wasm64_unknown_unknown.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm64_unknown_unknown.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -23,11 +23,10 @@ pub fn target() -> Target {\n     // For now this target just never has an entry symbol no matter the output\n     // type, so unconditionally pass this.\n     clang_args.push(\"-Wl,--no-entry\".to_string());\n-    options\n-        .pre_link_args\n-        .get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm))\n-        .unwrap()\n-        .push(\"--no-entry\".to_string());\n+\n+    let lld_args = options.pre_link_args.get_mut(&LinkerFlavor::Lld(LldFlavor::Wasm)).unwrap();\n+    lld_args.push(\"--no-entry\".to_string());\n+    lld_args.push(\"-mwasm64\".to_string());\n \n     Target {\n         llvm_target: \"wasm64-unknown-unknown\".to_string(),"}, {"sha": "ea3de680afedae6ee793ac721045b1e1d92d2aeb", "filename": "library/core/src/ffi.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fcore%2Fsrc%2Fffi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fcore%2Fsrc%2Fffi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fffi.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -63,6 +63,7 @@ impl fmt::Debug for c_void {\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n+    target_arch = \"wasm64\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -86,6 +87,7 @@ pub struct VaListImpl<'f> {\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n+    target_arch = \"wasm64\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -186,6 +188,7 @@ pub struct VaList<'a, 'f: 'a> {\n         ),\n         all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n         target_arch = \"wasm32\",\n+        target_arch = \"wasm64\",\n         target_arch = \"asmjs\",\n         windows\n     ))]\n@@ -195,6 +198,7 @@ pub struct VaList<'a, 'f: 'a> {\n         any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n         any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n         not(target_arch = \"wasm32\"),\n+        not(target_arch = \"wasm64\"),\n         not(target_arch = \"asmjs\"),\n         not(windows)\n     ))]\n@@ -207,6 +211,7 @@ pub struct VaList<'a, 'f: 'a> {\n     all(not(target_arch = \"aarch64\"), not(target_arch = \"powerpc\"), not(target_arch = \"x86_64\")),\n     all(target_arch = \"aarch64\", any(target_os = \"macos\", target_os = \"ios\")),\n     target_arch = \"wasm32\",\n+    target_arch = \"wasm64\",\n     target_arch = \"asmjs\",\n     windows\n ))]\n@@ -228,6 +233,7 @@ impl<'f> VaListImpl<'f> {\n     any(target_arch = \"aarch64\", target_arch = \"powerpc\", target_arch = \"x86_64\"),\n     any(not(target_arch = \"aarch64\"), not(any(target_os = \"macos\", target_os = \"ios\"))),\n     not(target_arch = \"wasm32\"),\n+    not(target_arch = \"wasm64\"),\n     not(target_arch = \"asmjs\"),\n     not(windows)\n ))]"}, {"sha": "d31df0da3643500486f0f41cb88841c5b9f646f4", "filename": "library/panic_abort/src/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_abort%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_abort%2Fsrc%2Flib.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -117,7 +117,8 @@ pub unsafe extern \"C-unwind\" fn __rust_start_panic(_payload: *mut &mut dyn BoxMe\n pub mod personalities {\n     #[rustc_std_internal_symbol]\n     #[cfg(not(any(\n-        all(target_arch = \"wasm32\", not(target_os = \"emscripten\"),),\n+        all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+        all(target_arch = \"wasm64\", not(target_os = \"emscripten\")),\n         all(target_os = \"windows\", target_env = \"gnu\", target_arch = \"x86_64\",),\n     )))]\n     pub extern \"C\" fn rust_eh_personality() {}"}, {"sha": "a4bcd216c60f074b3f9c391fd3d8c98763c660a2", "filename": "library/panic_unwind/src/dummy.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Fdummy.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -1,6 +1,6 @@\n-//! Unwinding for *wasm32* target.\n+//! Unwinding for unsupported target.\n //!\n-//! Right now we don't support this, so this is just stubs.\n+//! Stubs that simply abort for targets that don't support unwinding otherwise.\n \n use alloc::boxed::Box;\n use core::any::Any;"}, {"sha": "4815249f7d53ee3c5ffb2ff6cdeb2f00c53b6db2", "filename": "library/panic_unwind/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fpanic_unwind%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fpanic_unwind%2Fsrc%2Flib.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -57,6 +57,7 @@ cfg_if::cfg_if! {\n     } else {\n         // Targets that don't support unwinding.\n         // - arch=wasm32\n+        // - arch=wasm64\n         // - os=none (\"bare metal\" targets)\n         // - os=uefi\n         // - os=espidf"}, {"sha": "85658bf9e3c86d9902d4461f335b4c7969644fdc", "filename": "library/std/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2FCargo.toml?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -35,7 +35,7 @@ features = ['read_core', 'elf', 'macho', 'pe', 'unaligned', 'archive']\n [dev-dependencies]\n rand = \"0.7\"\n \n-[target.'cfg(any(all(target_arch = \"wasm32\", not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n+[target.'cfg(any(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_os = \"emscripten\")), all(target_vendor = \"fortanix\", target_env = \"sgx\")))'.dependencies]\n dlmalloc = { version = \"0.2.1\", features = ['rustc-dep-of-std'] }\n \n [target.x86_64-fortanix-unknown-sgx.dependencies]"}, {"sha": "43168e77296ab5cdaa25bef8847c57cb0ce75e55", "filename": "library/std/build.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fbuild.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -25,6 +25,7 @@ fn main() {\n         || target.contains(\"haiku\")\n         || target.contains(\"vxworks\")\n         || target.contains(\"wasm32\")\n+        || target.contains(\"wasm64\")\n         || target.contains(\"asmjs\")\n         || target.contains(\"espidf\")\n         || target.contains(\"solid\")"}, {"sha": "9665d1fa89243859b8bd1c133c41c414e61adc4b", "filename": "library/std/src/sys/common/alloc.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fcommon%2Falloc.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -24,7 +24,8 @@ pub const MIN_ALIGN: usize = 8;\n     target_arch = \"mips64\",\n     target_arch = \"s390x\",\n     target_arch = \"sparc64\",\n-    target_arch = \"riscv64\"\n+    target_arch = \"riscv64\",\n+    target_arch = \"wasm64\",\n )))]\n pub const MIN_ALIGN: usize = 16;\n "}, {"sha": "38f45fef9180fa8e7b0281136864275d6c50325f", "filename": "library/std/src/sys/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fmod.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -40,7 +40,7 @@ cfg_if::cfg_if! {\n     } else if #[cfg(target_os = \"wasi\")] {\n         mod wasi;\n         pub use self::wasi::*;\n-    } else if #[cfg(target_arch = \"wasm32\")] {\n+    } else if #[cfg(any(target_arch = \"wasm32\", target_arch = \"wasm64\"))] {\n         mod wasm;\n         pub use self::wasm::*;\n     } else if #[cfg(all(target_vendor = \"fortanix\", target_env = \"sgx\"))] {"}, {"sha": "bf5dc0273c0754ad9ab884f871e1c5f4ce19d6ec", "filename": "library/std/src/sys/wasm/alloc.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasm%2Falloc.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -1,8 +1,8 @@\n-//! This is an implementation of a global allocator on the wasm32 platform when\n+//! This is an implementation of a global allocator on the wasm platform when\n //! emscripten is not in use. In that situation there's no actual runtime for us\n //! to lean on for allocation, so instead we provide our own!\n //!\n-//! The wasm32 instruction set has two instructions for getting the current\n+//! The wasm instruction set has two instructions for getting the current\n //! amount of memory and growing the amount of memory. These instructions are the\n //! foundation on which we're able to build an allocator, so we do so! Note that\n //! the instructions are also pretty \"global\" and this is the \"global\" allocator"}, {"sha": "0f2a8cd001259b3d9e615a63b5d5ad9a0250ab73", "filename": "library/std/src/sys_common/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys_common%2Fmod.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -41,6 +41,7 @@ cfg_if::cfg_if! {\n                  target_os = \"hermit\",\n                  feature = \"restricted-std\",\n                  all(target_arch = \"wasm32\", not(target_os = \"emscripten\")),\n+                 all(target_arch = \"wasm64\", not(target_os = \"emscripten\")),\n                  all(target_vendor = \"fortanix\", target_env = \"sgx\")))] {\n         pub use crate::sys::net;\n     } else {"}, {"sha": "37f9cc40be62f2097dfa805009d331023ef08035", "filename": "library/std/src/thread/local.rs", "status": "modified", "additions": 14, "deletions": 8, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Flocal.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -172,7 +172,7 @@ macro_rules! __thread_local_inner {\n             //\n             // FIXME(#84224) this should come after the `target_thread_local`\n             // block.\n-            #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+            #[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n             {\n                 static mut VAL: $t = $init;\n                 Some(&VAL)\n@@ -181,7 +181,10 @@ macro_rules! __thread_local_inner {\n             // If the platform has support for `#[thread_local]`, use it.\n             #[cfg(all(\n                 target_thread_local,\n-                not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                not(all(\n+                    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n+                    not(target_feature = \"atomics\"),\n+                )),\n             ))]\n             {\n                 // If a dtor isn't needed we can do something \"very raw\" and\n@@ -238,7 +241,10 @@ macro_rules! __thread_local_inner {\n             // same implementation as below for os thread locals.\n             #[cfg(all(\n                 not(target_thread_local),\n-                not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                not(all(\n+                    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n+                    not(target_feature = \"atomics\"),\n+                )),\n             ))]\n             {\n                 #[inline]\n@@ -285,21 +291,21 @@ macro_rules! __thread_local_inner {\n             // The issue of \"should enable on Windows sometimes\" is #84933\n             #[cfg_attr(not(windows), inline)]\n             unsafe fn __getit() -> $crate::option::Option<&'static $t> {\n-                #[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+                #[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n                 static __KEY: $crate::thread::__StaticLocalKeyInner<$t> =\n                     $crate::thread::__StaticLocalKeyInner::new();\n \n                 #[thread_local]\n                 #[cfg(all(\n                     target_thread_local,\n-                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                    not(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__FastLocalKeyInner<$t> =\n                     $crate::thread::__FastLocalKeyInner::new();\n \n                 #[cfg(all(\n                     not(target_thread_local),\n-                    not(all(target_arch = \"wasm32\", not(target_feature = \"atomics\"))),\n+                    not(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\"))),\n                 ))]\n                 static __KEY: $crate::thread::__OsLocalKeyInner<$t> =\n                     $crate::thread::__OsLocalKeyInner::new();\n@@ -479,10 +485,10 @@ mod lazy {\n     }\n }\n \n-/// On some platforms like wasm32 there's no threads, so no need to generate\n+/// On some platforms like wasm there's no threads, so no need to generate\n /// thread locals and we can instead just use plain statics!\n #[doc(hidden)]\n-#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+#[cfg(all(any(target_arch = \"wasm32\", target_arch = \"wasm64\"), not(target_feature = \"atomics\")))]\n pub mod statik {\n     use super::lazy::LazyKeyInner;\n     use crate::fmt;"}, {"sha": "41f7bf55f227edcfd33e98651ea67c4f1cf509f8", "filename": "library/std/src/thread/mod.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7f3ffbc8c22d0084987966b0496a63ce4d6278d5/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Fmod.rs?ref=7f3ffbc8c22d0084987966b0496a63ce4d6278d5", "patch": "@@ -200,7 +200,10 @@ pub use self::local::fast::Key as __FastLocalKeyInner;\n #[doc(hidden)]\n pub use self::local::os::Key as __OsLocalKeyInner;\n #[unstable(feature = \"libstd_thread_internals\", issue = \"none\")]\n-#[cfg(all(target_arch = \"wasm32\", not(target_feature = \"atomics\")))]\n+#[cfg(all(\n+    any(target_arch = \"wasm32\", target_arch = \"wasm64\"),\n+    not(target_feature = \"atomics\")\n+))]\n #[doc(hidden)]\n pub use self::local::statik::Key as __StaticLocalKeyInner;\n "}]}