{"sha": "d927fa48567ea9ebb2128a2271459c1257639292", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ5MjdmYTQ4NTY3ZWE5ZWJiMjEyOGEyMjcxNDU5YzEyNTc2MzkyOTI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2016-08-14T10:50:50Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-08-14T10:50:50Z"}, "message": "Auto merge of #34206 - petrochenkov:pipdeny, r=nikomatsakis\n\nMake `private_in_public` compatibility lint deny-by-default\n\nIn accordance with the [plan](https://internals.rust-lang.org/t/fcp-for-various-future-compatibility-warnings/3590/5?u=petrochenkov).\n\nr? @nikomatsakis", "tree": {"sha": "352cabe9de99804eadc54dd1fd1d900402d833fe", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/352cabe9de99804eadc54dd1fd1d900402d833fe"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d927fa48567ea9ebb2128a2271459c1257639292", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d927fa48567ea9ebb2128a2271459c1257639292", "html_url": "https://github.com/rust-lang/rust/commit/d927fa48567ea9ebb2128a2271459c1257639292", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d927fa48567ea9ebb2128a2271459c1257639292/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/eec30ea65792fd07826a931a9e0c5dfa3c050b2f", "html_url": "https://github.com/rust-lang/rust/commit/eec30ea65792fd07826a931a9e0c5dfa3c050b2f"}, {"sha": "b052dd6240b136c02837b1c27bc3b49b4663be02", "url": "https://api.github.com/repos/rust-lang/rust/commits/b052dd6240b136c02837b1c27bc3b49b4663be02", "html_url": "https://github.com/rust-lang/rust/commit/b052dd6240b136c02837b1c27bc3b49b4663be02"}], "stats": {"total": 166, "additions": 101, "deletions": 65}, "files": [{"sha": "f0ddcdc07e1206beb5746685b0f7897d833cbb83", "filename": "src/librustc/lint/builtin.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc%2Flint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc%2Flint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fbuiltin.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -114,7 +114,7 @@ declare_lint! {\n \n declare_lint! {\n     pub PRIVATE_IN_PUBLIC,\n-    Warn,\n+    Deny,\n     \"detect private items in public interfaces not caught by the old implementation\"\n }\n "}, {"sha": "cb0036eb5b034fdefb5593defa8762ad31259cf5", "filename": "src/librustc_lint/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_lint%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_lint%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Flib.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -157,7 +157,7 @@ pub fn register_builtins(store: &mut lint::LintStore, sess: Option<&Session>) {\n     store.register_future_incompatible(sess, vec![\n         FutureIncompatibleInfo {\n             id: LintId::of(PRIVATE_IN_PUBLIC),\n-            reference: \"the explanation for E0446 (`--explain E0446`)\",\n+            reference: \"issue #34537 <https://github.com/rust-lang/rust/issues/34537>\",\n         },\n         FutureIncompatibleInfo {\n             id: LintId::of(INACCESSIBLE_EXTERN_CRATE),"}, {"sha": "891b6adea789386a3ac8da271d6d1f25a9de26f5", "filename": "src/librustc_privacy/diagnostics.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_privacy%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_privacy%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Fdiagnostics.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -17,8 +17,6 @@ A private trait was used on a public type parameter bound. Erroneous code\n examples:\n \n ```compile_fail,E0445\n-#![deny(private_in_public)]\n-\n trait Foo {\n     fn dummy(&self) { }\n }\n@@ -47,8 +45,6 @@ E0446: r##\"\n A private type was used in a public type signature. Erroneous code example:\n \n ```compile_fail,E0446\n-#![deny(private_in_public)]\n-\n mod Foo {\n     struct Bar(u32);\n "}, {"sha": "d8f39358411a19ef181adb25129038766bc1183a", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -938,7 +938,8 @@ impl<'a, 'tcx: 'a, 'v> Visitor<'v> for SearchInterfaceForPrivateItemsVisitor<'a,\n                                 self.tcx.sess.add_lint(lint::builtin::PRIVATE_IN_PUBLIC,\n                                                        node_id,\n                                                        ty.span,\n-                                                       format!(\"private type in public interface\"));\n+                                                       format!(\"private type in public \\\n+                                                                interface (error E0446)\"));\n                             }\n                         }\n                     }"}, {"sha": "6ee375503c2af257d562d03dfb462630572e1949", "filename": "src/test/compile-fail/issue-28514.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fissue-28514.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fissue-28514.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-28514.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub use inner::C;\n+\n+mod inner {\n+    trait A {\n+        fn a(&self) { }\n+    }\n+\n+    pub trait B {\n+        fn b(&self) { }\n+    }\n+\n+    pub trait C: A + B { //~ ERROR private trait in public interface\n+                         //~^ WARN will become a hard error\n+        fn c(&self) { }\n+    }\n+\n+    impl A for i32 {}\n+    impl B for i32 {}\n+    impl C for i32 {}\n+\n+}\n+\n+fn main() {\n+    // A is private\n+    // B is pub, not reexported\n+    // C : A + B is pub, reexported\n+\n+    // 0.a(); // can't call\n+    // 0.b(); // can't call\n+    0.c(); // ok\n+\n+    C::a(&0); // can call\n+    C::b(&0); // can call\n+    C::c(&0); // ok\n+}"}, {"sha": "55c58ed021b27d77bb73ec9dfb2d1aa43b064e85", "filename": "src/test/compile-fail/issue-30079.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-30079.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -8,15 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n #![allow(unused)]\n \n struct SemiPriv;\n \n mod m1 {\n     struct Priv;\n     impl ::SemiPriv {\n-        pub fn f(_: Priv) {} //~ WARN private type in public interface\n+        pub fn f(_: Priv) {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n \n@@ -28,7 +27,7 @@ mod m1 {\n mod m2 {\n     struct Priv;\n     impl ::std::ops::Deref for ::SemiPriv {\n-        type Target = Priv; //~ WARN private type in public interface\n+        type Target = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n         fn deref(&self) -> &Self::Target { unimplemented!() }\n     }\n@@ -46,10 +45,9 @@ trait SemiPrivTrait {\n mod m3 {\n     struct Priv;\n     impl ::SemiPrivTrait for () {\n-        type Assoc = Priv; //~ WARN private type in public interface\n+        type Assoc = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}, {"sha": "8e23bfcfb10516bbcc84e8b4ad42d837cc0a0706", "filename": "src/test/compile-fail/private-in-public-lint.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-lint.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -9,8 +9,6 @@\n // except according to those terms.\n \n mod m1 {\n-    #![deny(private_in_public)]\n-\n     pub struct Pub;\n     struct Priv;\n "}, {"sha": "6d6af77be92b07182e5a0e5fa5ea567801bf2e74", "filename": "src/test/compile-fail/private-in-public-warn.rs", "status": "modified", "additions": 37, "deletions": 39, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-in-public-warn.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -11,7 +11,6 @@\n // Private types and traits are not allowed in public interfaces.\n // This test also ensures that the checks are performed even inside private modules.\n \n-#![feature(rustc_attrs)]\n #![feature(associated_consts)]\n #![feature(associated_type_defaults)]\n #![allow(dead_code)]\n@@ -25,34 +24,34 @@ mod types {\n         type Alias;\n     }\n \n-    pub type Alias = Priv; //~ WARN private type in public interface\n+    pub type Alias = Priv; //~ ERROR private type in public interface\n     //~^ WARNING hard error\n     pub enum E {\n-        V1(Priv), //~ WARN private type in public interface\n+        V1(Priv), //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        V2 { field: Priv }, //~ WARN private type in public interface\n+        V2 { field: Priv }, //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     pub trait Tr {\n-        const C: Priv = Priv; //~ WARN private type in public interface\n+        const C: Priv = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        type Alias = Priv; //~ WARN private type in public interface\n+        type Alias = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        fn f1(arg: Priv) {} //~ WARN private type in public interface\n+        fn f1(arg: Priv) {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        fn f2() -> Priv { panic!() } //~ WARN private type in public interface\n+        fn f2() -> Priv { panic!() } //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     extern {\n-        pub static ES: Priv; //~ WARN private type in public interface\n+        pub static ES: Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        pub fn ef1(arg: Priv); //~ WARN private type in public interface\n+        pub fn ef1(arg: Priv); //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-        pub fn ef2() -> Priv; //~ WARN private type in public interface\n+        pub fn ef2() -> Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     impl PubTr for Pub {\n-        type Alias = Priv; //~ WARN private type in public interface\n+        type Alias = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n }\n@@ -62,22 +61,22 @@ mod traits {\n     pub struct Pub<T>(T);\n     pub trait PubTr {}\n \n-    pub type Alias<T: PrivTr> = T; //~ WARN private trait in public interface\n+    pub type Alias<T: PrivTr> = T; //~ ERROR private trait in public interface\n     //~^ WARN trait bounds are not (yet) enforced in type definitions\n     //~| WARNING hard error\n-    pub trait Tr1: PrivTr {} //~ WARN private trait in public interface\n+    pub trait Tr1: PrivTr {} //~ ERROR private trait in public interface\n     //~^ WARNING hard error\n-    pub trait Tr2<T: PrivTr> {} //~ WARN private trait in public interface\n+    pub trait Tr2<T: PrivTr> {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n     pub trait Tr3 {\n-        type Alias: PrivTr; //~ WARN private trait in public interface\n+        type Alias: PrivTr; //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-        fn f<T: PrivTr>(arg: T) {} //~ WARN private trait in public interface\n+        fn f<T: PrivTr>(arg: T) {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n     }\n-    impl<T: PrivTr> Pub<T> {} //~ WARN private trait in public interface\n+    impl<T: PrivTr> Pub<T> {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-    impl<T: PrivTr> PubTr for Pub<T> {} //~ WARN private trait in public interface\n+    impl<T: PrivTr> PubTr for Pub<T> {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n }\n \n@@ -86,17 +85,17 @@ mod traits_where {\n     pub struct Pub<T>(T);\n     pub trait PubTr {}\n \n-    pub type Alias<T> where T: PrivTr = T; //~ WARN private trait in public interface\n+    pub type Alias<T> where T: PrivTr = T; //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-    pub trait Tr2<T> where T: PrivTr {} //~ WARN private trait in public interface\n+    pub trait Tr2<T> where T: PrivTr {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n     pub trait Tr3 {\n-        fn f<T>(arg: T) where T: PrivTr {} //~ WARN private trait in public interface\n+        fn f<T>(arg: T) where T: PrivTr {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n     }\n-    impl<T> Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+    impl<T> Pub<T> where T: PrivTr {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-    impl<T> PubTr for Pub<T> where T: PrivTr {} //~ WARN private trait in public interface\n+    impl<T> PubTr for Pub<T> where T: PrivTr {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n }\n \n@@ -106,13 +105,13 @@ mod generics {\n     trait PrivTr<T> {}\n     pub trait PubTr<T> {}\n \n-    pub trait Tr1: PrivTr<Pub> {} //~ WARN private trait in public interface\n+    pub trait Tr1: PrivTr<Pub> {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-    pub trait Tr2: PubTr<Priv> {} //~ WARN private type in public interface\n+    pub trait Tr2: PubTr<Priv> {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-    pub trait Tr3: PubTr<[Priv; 1]> {} //~ WARN private type in public interface\n+    pub trait Tr3: PubTr<[Priv; 1]> {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n-    pub trait Tr4: PubTr<Pub<Priv>> {} //~ WARN private type in public interface\n+    pub trait Tr4: PubTr<Pub<Priv>> {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n }\n \n@@ -139,7 +138,7 @@ mod impls {\n         type Alias = Priv; // OK\n     }\n     impl PubTr for Pub {\n-        type Alias = Priv; //~ WARN private type in public interface\n+        type Alias = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n }\n@@ -211,23 +210,23 @@ mod aliases_pub {\n     pub trait Tr2: PrivUseAliasTr<PrivAlias> {} // OK\n \n     impl PrivAlias {\n-        pub fn f(arg: Priv) {} //~ WARN private type in public interface\n+        pub fn f(arg: Priv) {} //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     // This doesn't even parse\n     // impl <Priv as PrivTr>::AssocAlias {\n-    //     pub fn f(arg: Priv) {} // WARN private type in public interface\n+    //     pub fn f(arg: Priv) {} // ERROR private type in public interface\n     // }\n     impl PrivUseAliasTr for PrivUseAlias {\n-        type Check = Priv; //~ WARN private type in public interface\n+        type Check = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for PrivAlias {\n-        type Check = Priv; //~ WARN private type in public interface\n+        type Check = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n     impl PrivUseAliasTr for <Priv as PrivTr>::AssocAlias {\n-        type Check = Priv; //~ WARN private type in public interface\n+        type Check = Priv; //~ ERROR private type in public interface\n         //~^ WARNING hard error\n     }\n }\n@@ -252,10 +251,10 @@ mod aliases_priv {\n         type AssocAlias = Priv3;\n     }\n \n-    pub trait Tr1: PrivUseAliasTr {} //~ WARN private trait in public interface\n+    pub trait Tr1: PrivUseAliasTr {} //~ ERROR private trait in public interface\n         //~^ WARNING hard error\n-    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ WARN private trait in public interface\n-     //~^ WARN private type in public interface\n+    pub trait Tr2: PrivUseAliasTr<PrivAlias> {} //~ ERROR private trait in public interface\n+     //~^ ERROR private type in public interface\n         //~| WARNING hard error\n         //~| WARNING hard error\n \n@@ -288,5 +287,4 @@ mod aliases_params {\n     pub fn f1(arg: PrivAliasGeneric<u8>) {} // OK, not an error\n }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}, {"sha": "ce029e7eff7fcb11bfeb5844f9f77da1baeea031", "filename": "src/test/compile-fail/private-variant-and-crate-reexport.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fprivate-variant-and-crate-reexport.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -8,34 +8,32 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-#![feature(rustc_attrs)]\n #![allow(dead_code)]\n \n extern crate core;\n-pub use core as reexported_core; //~ WARN extern crate `core` is private, and cannot be reexported\n+pub use core as reexported_core; //~ ERROR extern crate `core` is private, and cannot be reexported\n //~^ WARNING hard error\n \n mod m1 {\n-    pub use ::E::V; //~ WARN variant `V` is private, and cannot be reexported\n+    pub use ::E::V; //~ ERROR variant `V` is private, and cannot be reexported\n     //~^ WARNING hard error\n }\n \n mod m2 {\n-    pub use ::E::{V}; //~ WARN variant `V` is private, and cannot be reexported\n+    pub use ::E::{V}; //~ ERROR variant `V` is private, and cannot be reexported\n     //~^ WARNING hard error\n }\n \n mod m3 {\n-    pub use ::E::V::{self}; //~ WARN variant `V` is private, and cannot be reexported\n+    pub use ::E::V::{self}; //~ ERROR variant `V` is private, and cannot be reexported\n     //~^ WARNING hard error\n }\n \n mod m4 {\n-    pub use ::E::*; //~ WARN variant `V` is private, and cannot be reexported\n+    pub use ::E::*; //~ ERROR variant `V` is private, and cannot be reexported\n     //~^ WARNING hard error\n }\n \n enum E { V }\n \n-#[rustc_error]\n-fn main() {} //~ ERROR compilation successful\n+fn main() {}"}, {"sha": "0f1f6290a2573a54862a91f66ca7a1609faab498", "filename": "src/test/run-pass/issue-31776.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Frun-pass%2Fissue-31776.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Frun-pass%2Fissue-31776.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-31776.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -45,7 +45,7 @@ struct S2;\n \n mod m1 {\n     fn f() {\n-        struct Z {\n+        pub struct Z {\n             pub field: u8\n         }\n "}, {"sha": "abcfb9396f4c882f5594543996334bb679b8966d", "filename": "src/test/rustdoc/auxiliary/issue-28927-1.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-28927-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d927fa48567ea9ebb2128a2271459c1257639292/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-28927-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fauxiliary%2Fissue-28927-1.rs?ref=d927fa48567ea9ebb2128a2271459c1257639292", "patch": "@@ -8,5 +8,7 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-extern crate issue_28927_2 as inner2;\n-pub use inner2 as bar;\n+mod detail {\n+    pub extern crate issue_28927_2 as inner2;\n+}\n+pub use detail::inner2 as bar;"}]}