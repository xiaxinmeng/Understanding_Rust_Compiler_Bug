{"sha": "5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmOTBmMWNhMWQxNDJkYzQwODEwOGE1OGU4YWM0OGYxMGYyZDcxOWI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-25T02:01:51Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-05-25T02:01:51Z"}, "message": "auto merge of #6723 : osaut/rust/arc-remove-get, r=brson\n\n* Remove clone and get functions from ARC.\r\n* Update the tests and bench.", "tree": {"sha": "5cee1fbd9d7d22b258b97665e2ed62e4cbe29d41", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cee1fbd9d7d22b258b97665e2ed62e4cbe29d41"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "html_url": "https://github.com/rust-lang/rust/commit/5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/9a40c5c8ddb9055124cb12a710dc23b24276c9ac", "html_url": "https://github.com/rust-lang/rust/commit/9a40c5c8ddb9055124cb12a710dc23b24276c9ac"}, {"sha": "ff28bb7839a039641788436b21130ae2d378609b", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff28bb7839a039641788436b21130ae2d378609b", "html_url": "https://github.com/rust-lang/rust/commit/ff28bb7839a039641788436b21130ae2d378609b"}], "stats": {"total": 58, "additions": 24, "deletions": 34}, "files": [{"sha": "123e727593568e9fd21e45484de64d7b028a6d61", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 11, "deletions": 21, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "patch": "@@ -107,7 +107,7 @@ pub impl<'self> Condvar<'self> {\n  ****************************************************************************/\n \n /// An atomically reference counted wrapper for shared immutable state.\n-struct ARC<T> { x: UnsafeAtomicRcBox<T> }\n+pub struct ARC<T> { x: UnsafeAtomicRcBox<T> }\n \n /// Create an atomically reference counted wrapper.\n pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n@@ -118,29 +118,22 @@ pub fn ARC<T:Const + Owned>(data: T) -> ARC<T> {\n  * Access the underlying data in an atomically reference counted\n  * wrapper.\n  */\n-pub fn get<'a, T:Const + Owned>(rc: &'a ARC<T>) -> &'a T {\n-    rc.get()\n-}\n-\n-impl<T:Const+Owned> ARC<T> {\n-    pub fn get<'a>(&'a self) -> &'a T {\n+pub impl<T:Const+Owned> ARC<T> {\n+    fn get<'a>(&'a self) -> &'a T {\n         unsafe { &*self.x.get_immut() }\n     }\n }\n+\n /**\n  * Duplicate an atomically reference counted wrapper.\n  *\n  * The resulting two `arc` objects will point to the same underlying data\n  * object. However, one of the `arc` objects can be sent to another task,\n  * allowing them to share the underlying data.\n  */\n-pub fn clone<T:Const + Owned>(rc: &ARC<T>) -> ARC<T> {\n-    ARC { x: rc.x.clone() }\n-}\n-\n impl<T:Const + Owned> Clone for ARC<T> {\n     fn clone(&self) -> ARC<T> {\n-        clone(self)\n+        ARC { x: self.x.clone() }\n     }\n }\n \n@@ -512,34 +505,31 @@ pub impl<'self, T:Const + Owned> RWReadMode<'self, T> {\n #[cfg(test)]\n mod tests {\n     use core::prelude::*;\n-\n+    use core::cell::Cell;\n     use arc::*;\n     use arc;\n \n-    use core::cell::Cell;\n-    use core::task;\n-\n     #[test]\n     fn manually_share_arc() {\n         let v = ~[1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n-        let arc_v = arc::ARC(v);\n+        let arc_v = ARC(v);\n \n         let (p, c) = comm::stream();\n \n         do task::spawn() || {\n             let p = comm::PortSet::new();\n             c.send(p.chan());\n \n-            let arc_v = p.recv();\n+            let arc_v : ARC<~[int]> = p.recv();\n \n-            let v = copy *arc::get::<~[int]>(&arc_v);\n+            let v = copy (*arc_v.get());\n             assert_eq!(v[3], 4);\n         };\n \n         let c = p.recv();\n-        c.send(arc::clone(&arc_v));\n+        c.send(arc_v.clone());\n \n-        assert_eq!((*arc::get(&arc_v))[2], 3);\n+        assert_eq!(arc_v.get()[2], 3);\n         assert_eq!(arc_v.get()[4], 5);\n \n         info!(arc_v);"}, {"sha": "06c8d0c145bf438e7451a31a162d1b4f13a9d305", "filename": "src/test/bench/graph500-bfs.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fbench%2Fgraph500-bfs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fgraph500-bfs.rs?ref=5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "patch": "@@ -1,6 +1,6 @@\n // xfail-pretty\n \n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -234,7 +234,7 @@ fn pbfs(graph: &arc::ARC<graph>, key: node_id) -> bfs_result {\n         black(node_id)\n     };\n \n-    let graph_vec = arc::get(graph); // FIXME #3387 requires this temp\n+    let graph_vec = graph.get(); // FIXME #3387 requires this temp\n     let mut colors = do vec::from_fn(graph_vec.len()) |i| {\n         if i as node_id == key {\n             gray(key)\n@@ -266,13 +266,13 @@ fn pbfs(graph: &arc::ARC<graph>, key: node_id) -> bfs_result {\n \n         let color = arc::ARC(colors);\n \n-        let color_vec = arc::get(&color); // FIXME #3387 requires this temp\n+        let color_vec = color.get(); // FIXME #3387 requires this temp\n         colors = do par::mapi(*color_vec) {\n-            let colors = arc::clone(&color);\n-            let graph = arc::clone(graph);\n+            let colors = color.clone();\n+            let graph = graph.clone();\n             let result: ~fn(x: uint, y: &color) -> color = |i, c| {\n-                let colors = arc::get(&colors);\n-                let graph = arc::get(&graph);\n+                let colors = colors.get();\n+                let graph = graph.get();\n                 match *c {\n                   white => {\n                     let i = i as node_id;"}, {"sha": "2a83e479e873c7beba86de815aacb6417f25a1f7", "filename": "src/test/compile-fail/no-capture-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-capture-arc.rs?ref=5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -18,11 +18,11 @@ fn main() {\n     let arc_v = arc::ARC(v);\n \n     do task::spawn() {\n-        let v = *arc::get(&arc_v);\n+        let v = arc_v.get();\n         assert_eq!(v[3], 4);\n     };\n \n-    assert_eq!((*arc::get(&arc_v))[2], 3);\n+    assert_eq!((arc_v.get())[2], 3);\n \n     info!(arc_v);\n }"}, {"sha": "607127f2fee74d728ca86cf083df086e44c58f2b", "filename": "src/test/compile-fail/no-reuse-move-arc.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f90f1ca1d142dc408108a58e8ac48f10f2d719b/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fno-reuse-move-arc.rs?ref=5f90f1ca1d142dc408108a58e8ac48f10f2d719b", "patch": "@@ -1,4 +1,4 @@\n-// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// Copyright 2012-2013 The Rust Project Developers. See the COPYRIGHT\n // file at the top-level directory of this distribution and at\n // http://rust-lang.org/COPYRIGHT.\n //\n@@ -16,11 +16,11 @@ fn main() {\n     let arc_v = arc::ARC(v);\n \n     do task::spawn() { //~ NOTE `arc_v` moved into closure environment here\n-        let v = *arc::get(&arc_v);\n+        let v = arc_v.get();\n         assert_eq!(v[3], 4);\n     };\n \n-    assert!((*arc::get(&arc_v))[2] == 3); //~ ERROR use of moved value: `arc_v`\n+    assert_eq!((arc_v.get())[2], 3); //~ ERROR use of moved value: `arc_v`\n \n     info!(arc_v);\n }"}]}