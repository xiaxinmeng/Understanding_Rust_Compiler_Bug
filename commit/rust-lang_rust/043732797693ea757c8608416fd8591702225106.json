{"sha": "043732797693ea757c8608416fd8591702225106", "node_id": "MDY6Q29tbWl0NzI0NzEyOjA0MzczMjc5NzY5M2VhNzU3Yzg2MDg0MTZmZDg1OTE3MDIyMjUxMDY=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T22:14:22Z"}, "committer": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2017-01-04T23:50:47Z"}, "message": "Rustup to rustc 1.16.0-nightly (468227129 2017-01-03): More u128 fixes", "tree": {"sha": "bbd9a1fdf32d0c93a44ed2d901a804a5d331775f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bbd9a1fdf32d0c93a44ed2d901a804a5d331775f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/043732797693ea757c8608416fd8591702225106", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/043732797693ea757c8608416fd8591702225106", "html_url": "https://github.com/rust-lang/rust/commit/043732797693ea757c8608416fd8591702225106", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/043732797693ea757c8608416fd8591702225106/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e02fac4896fb30eb82d52dda07db8f3ef3bc456a", "url": "https://api.github.com/repos/rust-lang/rust/commits/e02fac4896fb30eb82d52dda07db8f3ef3bc456a", "html_url": "https://github.com/rust-lang/rust/commit/e02fac4896fb30eb82d52dda07db8f3ef3bc456a"}], "stats": {"total": 52, "additions": 30, "deletions": 22}, "files": [{"sha": "0fbc71da583a3e37dadcf8f8a1aad72329b0ad42", "filename": "clippy_lints/src/consts.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fconsts.rs?ref=043732797693ea757c8608416fd8591702225106", "patch": "@@ -185,13 +185,15 @@ pub fn lit_to_constant(lit: &LitKind) -> Constant {\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U16)) => Constant::Int(ConstInt::U16(value as u16)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U32)) => Constant::Int(ConstInt::U32(value as u32)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::U64)) => Constant::Int(ConstInt::U64(value as u64)),\n+        LitKind::Int(value, LitIntType::Unsigned(UintTy::U128)) => Constant::Int(ConstInt::U128(value as u128)),\n         LitKind::Int(value, LitIntType::Unsigned(UintTy::Us)) => {\n             Constant::Int(ConstInt::Usize(ConstUsize::Us32(value as u32)))\n         },\n         LitKind::Int(value, LitIntType::Signed(IntTy::I8)) => Constant::Int(ConstInt::I8(value as i8)),\n         LitKind::Int(value, LitIntType::Signed(IntTy::I16)) => Constant::Int(ConstInt::I16(value as i16)),\n         LitKind::Int(value, LitIntType::Signed(IntTy::I32)) => Constant::Int(ConstInt::I32(value as i32)),\n         LitKind::Int(value, LitIntType::Signed(IntTy::I64)) => Constant::Int(ConstInt::I64(value as i64)),\n+        LitKind::Int(value, LitIntType::Signed(IntTy::I128)) => Constant::Int(ConstInt::I128(value as i128)),\n         LitKind::Int(value, LitIntType::Signed(IntTy::Is)) => {\n             Constant::Int(ConstInt::Isize(ConstIsize::Is32(value as i32)))\n         },"}, {"sha": "7f019e5743fab4a6fc8a4d7fb6d8fe473497a49f", "filename": "clippy_lints/src/functions.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Ffunctions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Ffunctions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ffunctions.rs?ref=043732797693ea757c8608416fd8591702225106", "patch": "@@ -106,13 +106,13 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Functions {\n     }\n \n     fn check_trait_item(&mut self, cx: &LateContext<'a, 'tcx>, item: &'tcx hir::TraitItem) {\n-        if let hir::TraitItemKind::Method(ref sig, eid) = item.node {\n+        if let hir::TraitItemKind::Method(ref sig, ref eid) = item.node {\n             // don't lint extern functions decls, it's not their fault\n             if sig.abi == Abi::Rust {\n                 self.check_arg_number(cx, &sig.decl, item.span);\n             }\n \n-            if let hir::TraitMethod::Provided(eid) = eid {\n+            if let hir::TraitMethod::Provided(eid) = *eid {\n                 let body = cx.tcx.map.body(eid);\n                 self.check_raw_ptr(cx, sig.unsafety, &sig.decl, &body, item.id);\n             }"}, {"sha": "423071c457af4f3f307ee4edddd02d0e1fef5ee1", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 26, "deletions": 20, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/043732797693ea757c8608416fd8591702225106/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=043732797693ea757c8608416fd8591702225106", "patch": "@@ -326,7 +326,7 @@ declare_lint! {\n /// **Example:**\n /// ```rust\n /// let y: i8 = -1;\n-/// y as u64  // will return 18446744073709551615\n+/// y as u128  // will return 18446744073709551615\n /// ```\n declare_lint! {\n     pub CAST_SIGN_LOSS,\n@@ -889,12 +889,14 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MIN))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MIN))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MIN))) |\n+        (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MIN))) |\n         (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MIN)))) |\n         (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MIN)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MIN))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MIN))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MIN))) |\n-        (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MIN))) => Minimum,\n+        (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MIN))) |\n+        (&ty::TyUint(UintTy::U128), Integral(U128(::std::u128::MIN))) => Minimum,\n \n         (&ty::TyBool, Bool(true)) |\n         (&ty::TyInt(IntTy::Is), Integral(Isize(Is32(::std::i32::MAX)))) |\n@@ -903,12 +905,14 @@ fn detect_extreme_expr<'a>(cx: &LateContext, expr: &'a Expr) -> Option<ExtremeEx\n         (&ty::TyInt(IntTy::I16), Integral(I16(::std::i16::MAX))) |\n         (&ty::TyInt(IntTy::I32), Integral(I32(::std::i32::MAX))) |\n         (&ty::TyInt(IntTy::I64), Integral(I64(::std::i64::MAX))) |\n+        (&ty::TyInt(IntTy::I128), Integral(I128(::std::i128::MAX))) |\n         (&ty::TyUint(UintTy::Us), Integral(Usize(Us32(::std::u32::MAX)))) |\n         (&ty::TyUint(UintTy::Us), Integral(Usize(Us64(::std::u64::MAX)))) |\n         (&ty::TyUint(UintTy::U8), Integral(U8(::std::u8::MAX))) |\n         (&ty::TyUint(UintTy::U16), Integral(U16(::std::u16::MAX))) |\n         (&ty::TyUint(UintTy::U32), Integral(U32(::std::u32::MAX))) |\n-        (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MAX))) => Maximum,\n+        (&ty::TyUint(UintTy::U64), Integral(U64(::std::u64::MAX))) |\n+        (&ty::TyUint(UintTy::U128), Integral(U128(::std::u128::MAX))) => Maximum,\n \n         _ => return None,\n     };\n@@ -985,19 +989,19 @@ impl LintPass for InvalidUpcastComparisons {\n \n #[derive(Copy, Clone, Debug, Eq)]\n enum FullInt {\n-    S(i64),\n-    U(u64),\n+    S(i128),\n+    U(u128),\n }\n \n impl FullInt {\n     #[allow(cast_sign_loss)]\n-    fn cmp_s_u(s: i64, u: u64) -> Ordering {\n+    fn cmp_s_u(s: i128, u: u128) -> Ordering {\n         if s < 0 {\n             Ordering::Less\n-        } else if u > (i64::max_value() as u64) {\n+        } else if u > (i128::max_value() as u128) {\n             Ordering::Greater\n         } else {\n-            (s as u64).cmp(&u)\n+            (s as u128).cmp(&u)\n         }\n     }\n }\n@@ -1034,20 +1038,22 @@ fn numeric_cast_precast_bounds<'a>(cx: &LateContext, expr: &'a Expr) -> Option<(\n         match cx.tcx.tables().expr_ty(cast_exp).sty {\n             TyInt(int_ty) => {\n                 Some(match int_ty {\n-                    IntTy::I8 => (FullInt::S(i8::min_value() as i64), FullInt::S(i8::max_value() as i64)),\n-                    IntTy::I16 => (FullInt::S(i16::min_value() as i64), FullInt::S(i16::max_value() as i64)),\n-                    IntTy::I32 => (FullInt::S(i32::min_value() as i64), FullInt::S(i32::max_value() as i64)),\n-                    IntTy::I64 => (FullInt::S(i64::min_value() as i64), FullInt::S(i64::max_value() as i64)),\n-                    IntTy::Is => (FullInt::S(isize::min_value() as i64), FullInt::S(isize::max_value() as i64)),\n+                    IntTy::I8 => (FullInt::S(i8::min_value() as i128), FullInt::S(i8::max_value() as i128)),\n+                    IntTy::I16 => (FullInt::S(i16::min_value() as i128), FullInt::S(i16::max_value() as i128)),\n+                    IntTy::I32 => (FullInt::S(i32::min_value() as i128), FullInt::S(i32::max_value() as i128)),\n+                    IntTy::I64 => (FullInt::S(i64::min_value() as i128), FullInt::S(i64::max_value() as i128)),\n+                    IntTy::I128 => (FullInt::S(i128::min_value() as i128), FullInt::S(i128::max_value() as i128)),\n+                    IntTy::Is => (FullInt::S(isize::min_value() as i128), FullInt::S(isize::max_value() as i128)),\n                 })\n             },\n             TyUint(uint_ty) => {\n                 Some(match uint_ty {\n-                    UintTy::U8 => (FullInt::U(u8::min_value() as u64), FullInt::U(u8::max_value() as u64)),\n-                    UintTy::U16 => (FullInt::U(u16::min_value() as u64), FullInt::U(u16::max_value() as u64)),\n-                    UintTy::U32 => (FullInt::U(u32::min_value() as u64), FullInt::U(u32::max_value() as u64)),\n-                    UintTy::U64 => (FullInt::U(u64::min_value() as u64), FullInt::U(u64::max_value() as u64)),\n-                    UintTy::Us => (FullInt::U(usize::min_value() as u64), FullInt::U(usize::max_value() as u64)),\n+                    UintTy::U8 => (FullInt::U(u8::min_value() as u128), FullInt::U(u8::max_value() as u128)),\n+                    UintTy::U16 => (FullInt::U(u16::min_value() as u128), FullInt::U(u16::max_value() as u128)),\n+                    UintTy::U32 => (FullInt::U(u32::min_value() as u128), FullInt::U(u32::max_value() as u128)),\n+                    UintTy::U64 => (FullInt::U(u64::min_value() as u128), FullInt::U(u64::max_value() as u128)),\n+                    UintTy::U128 => (FullInt::U(u128::min_value() as u128), FullInt::U(u128::max_value() as u128)),\n+                    UintTy::Us => (FullInt::U(usize::min_value() as u128), FullInt::U(usize::max_value() as u128)),\n                 })\n             },\n             _ => None,\n@@ -1067,8 +1073,8 @@ fn node_as_const_fullint(cx: &LateContext, expr: &Expr) -> Option<FullInt> {\n         Ok(val) => {\n             if let Integral(const_int) = val {\n                 Some(match const_int.erase_type() {\n-                    ConstInt::InferSigned(x) => FullInt::S(x as i64),\n-                    ConstInt::Infer(x) => FullInt::U(x as u64),\n+                    ConstInt::InferSigned(x) => FullInt::S(x as i128),\n+                    ConstInt::Infer(x) => FullInt::U(x as u128),\n                     _ => unreachable!(),\n                 })\n             } else {"}]}