{"sha": "cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiMjg2N2RhODhmMTY1M2Q3NGJjYjc3MTQ0NWU2ZDFlM2ZjMWRlNWI=", "commit": {"author": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-10-31T15:02:14Z"}, "committer": {"name": "Mikhail Modin", "email": "mikhailm1@gmail.com", "date": "2017-11-02T06:43:36Z"}, "message": "fix pre binding false edges", "tree": {"sha": "12de6627ca3040b668123b72a2a46a2ea79920de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/12de6627ca3040b668123b72a2a46a2ea79920de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "html_url": "https://github.com/rust-lang/rust/commit/cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/comments", "author": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mikhail-m1", "id": 5663581, "node_id": "MDQ6VXNlcjU2NjM1ODE=", "avatar_url": "https://avatars.githubusercontent.com/u/5663581?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mikhail-m1", "html_url": "https://github.com/mikhail-m1", "followers_url": "https://api.github.com/users/mikhail-m1/followers", "following_url": "https://api.github.com/users/mikhail-m1/following{/other_user}", "gists_url": "https://api.github.com/users/mikhail-m1/gists{/gist_id}", "starred_url": "https://api.github.com/users/mikhail-m1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mikhail-m1/subscriptions", "organizations_url": "https://api.github.com/users/mikhail-m1/orgs", "repos_url": "https://api.github.com/users/mikhail-m1/repos", "events_url": "https://api.github.com/users/mikhail-m1/events{/privacy}", "received_events_url": "https://api.github.com/users/mikhail-m1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a954dcc72edea804d866b01ec09d10fdb5add37a", "url": "https://api.github.com/repos/rust-lang/rust/commits/a954dcc72edea804d866b01ec09d10fdb5add37a", "html_url": "https://github.com/rust-lang/rust/commit/a954dcc72edea804d866b01ec09d10fdb5add37a"}], "stats": {"total": 201, "additions": 104, "deletions": 97}, "files": [{"sha": "b65d859e7d7568ab596eda5dc5ee54d2dc079034", "filename": "src/librustc_mir/build/matches/mod.rs", "status": "modified", "additions": 17, "deletions": 14, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Fmod.rs?ref=cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "patch": "@@ -56,7 +56,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n         // create binding start block for link them by false edges\n         let candidate_count = arms.iter().fold(0, |ac, c| ac + c.patterns.len());\n-        let binding_start_blocks: Vec<_> = (0..candidate_count + 1)\n+        let pre_binding_blocks: Vec<_> = (0..candidate_count + 1)\n             .map(|_| self.cfg.start_new_block()).collect();\n \n         // assemble a list of candidates: there is one candidate per\n@@ -72,23 +72,23 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                     arm.patterns.iter()\n                                 .map(move |pat| (arm_index, pat, arm.guard.clone()))\n                 })\n-                .zip(binding_start_blocks.iter().zip(binding_start_blocks.iter().skip(1)))\n+                .zip(pre_binding_blocks.iter().zip(pre_binding_blocks.iter().skip(1)))\n                 .map(|((arm_index, pattern, guard),\n-                       (binding_start_block, next_candidate_binding_start_block))| {\n+                       (pre_binding_block, next_candidate_pre_binding_block))| {\n                     Candidate {\n                         span: pattern.span,\n                         match_pairs: vec![MatchPair::new(discriminant_lvalue.clone(), pattern)],\n                         bindings: vec![],\n                         guard,\n                         arm_index,\n-                        binding_start_block: *binding_start_block,\n-                        next_candidate_binding_start_block: *next_candidate_binding_start_block,\n+                        pre_binding_block: *pre_binding_block,\n+                        next_candidate_pre_binding_block: *next_candidate_pre_binding_block,\n                     }\n                 })\n                 .collect();\n \n         let outer_source_info = self.source_info(span);\n-        self.cfg.terminate(*binding_start_blocks.last().unwrap(),\n+        self.cfg.terminate(*pre_binding_blocks.last().unwrap(),\n                            outer_source_info, TerminatorKind::Unreachable);\n \n         // this will generate code to test discriminant_lvalue and\n@@ -165,8 +165,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n \n             // since we don't call `match_candidates`, next fields is unused\n             arm_index: 0,\n-            binding_start_block: block,\n-            next_candidate_binding_start_block: block\n+            pre_binding_block: block,\n+            next_candidate_pre_binding_block: block\n         };\n \n         // Simplify the candidate. Since the pattern is irrefutable, this should\n@@ -298,8 +298,8 @@ pub struct Candidate<'pat, 'tcx:'pat> {\n     arm_index: usize,\n \n     // ...and the blocks for add false edges between candidates\n-    binding_start_block: BasicBlock,\n-    next_candidate_binding_start_block: BasicBlock,\n+    pre_binding_block: BasicBlock,\n+    next_candidate_pre_binding_block: BasicBlock,\n }\n \n #[derive(Clone, Debug)]\n@@ -723,12 +723,15 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n         let candidate_source_info = self.source_info(candidate.span);\n \n         self.cfg.terminate(block, candidate_source_info,\n+                               TerminatorKind::Goto { target: candidate.pre_binding_block });\n+\n+        block = self.cfg.start_new_block();\n+        self.cfg.terminate(candidate.pre_binding_block, candidate_source_info,\n                                TerminatorKind::FalseEdges {\n-                                   real_target: candidate.binding_start_block,\n+                                   real_target: block,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_binding_start_block]});\n+                                       vec![candidate.next_candidate_pre_binding_block]});\n \n-        block = candidate.binding_start_block;\n         self.bind_matched_candidate(block, candidate.bindings);\n \n         if let Some(guard) = candidate.guard {\n@@ -748,7 +751,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                                TerminatorKind::FalseEdges {\n                                    real_target: otherwise,\n                                    imaginary_targets:\n-                                       vec![candidate.next_candidate_binding_start_block] });\n+                                       vec![candidate.next_candidate_pre_binding_block] });\n             Some(otherwise)\n         } else {\n             self.cfg.terminate(block, candidate_source_info,"}, {"sha": "4792bf2b213e64e7567136e0509a3d964b892502", "filename": "src/librustc_mir/build/matches/test.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmatches%2Ftest.rs?ref=cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "patch": "@@ -598,8 +598,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             bindings: candidate.bindings.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n-            binding_start_block: candidate.binding_start_block,\n-            next_candidate_binding_start_block: candidate.next_candidate_binding_start_block,\n+            pre_binding_block: candidate.pre_binding_block,\n+            next_candidate_pre_binding_block: candidate.next_candidate_pre_binding_block,\n         }\n     }\n \n@@ -661,8 +661,8 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n             bindings: candidate.bindings.clone(),\n             guard: candidate.guard.clone(),\n             arm_index: candidate.arm_index,\n-            binding_start_block: candidate.binding_start_block,\n-            next_candidate_binding_start_block: candidate.next_candidate_binding_start_block,\n+            pre_binding_block: candidate.pre_binding_block,\n+            next_candidate_pre_binding_block: candidate.next_candidate_pre_binding_block,\n         }\n     }\n "}, {"sha": "53e5deeb9bd89a7613546d5fe3b41e3de7d1781c", "filename": "src/test/mir-opt/match_false_edges.rs", "status": "modified", "additions": 83, "deletions": 79, "changes": 162, "blob_url": "https://github.com/rust-lang/rust/blob/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb2867da88f1653d74bcb771445e6d1e3fc1de5b/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fmatch_false_edges.rs?ref=cb2867da88f1653d74bcb771445e6d1e3fc1de5b", "patch": "@@ -43,7 +43,7 @@ fn main() {\n //      ...\n //      _2 = std::option::Option<i32>::Some(const 42i32,);\n //      _5 = discriminant(_2);\n-//      switchInt(_5) -> [0isize: bb6, otherwise: bb7];\n+//      switchInt(_5) -> [0isize: bb5, otherwise: bb3];\n //  }\n //  bb1: { // arm1\n //      StorageLive(_7);\n@@ -52,13 +52,35 @@ fn main() {\n //      ...\n //      goto -> bb11;\n //  }\n-//  bb2: { // binding1 guard\n+//  bb2: { // binding3(empty) and arm3\n+//      _1 = const 3i32;\n+//      goto -> bb11;\n+//  }\n+//  bb3: {\n+//      falseEdges -> [real: bb7, imaginary: bb4]; //pre_binding1\n+//  }\n+//  bb4: {\n+//      falseEdges -> [real: bb10, imaginary: bb5]; //pre_binding2\n+//  }\n+//  bb5: {\n+//      falseEdges -> [real: bb2, imaginary: bb6]; //pre_binding3\n+//  }\n+//  bb6: {\n+//      unreachable;\n+//  }\n+//  bb7: { // binding1 and guard\n //      StorageLive(_3);\n //      _3 = ((_2 as Some).0: i32);\n //      StorageLive(_6);\n //      _6 = const guard() -> bb8;\n //  }\n-//  bb3: { // binding2 & arm2\n+//  bb8: { // end of guard\n+//      switchInt(_6) -> [0u8: bb9, otherwise: bb1];\n+//  }\n+//  bb9: { // to pre_binding2\n+//      falseEdges -> [real: bb4, imaginary: bb4];\n+//  }\n+//  bb10: { // binding2 and arm2\n //      StorageLive(_4);\n //      _4 = ((_2 as Some).0: i32);\n //      StorageLive(_8);\n@@ -67,28 +89,6 @@ fn main() {\n //      StorageDead(_8);\n //      goto -> bb11;\n //  }\n-//  bb4: { // binding3(empty) arm3\n-//      _1 = const 3i32;\n-//      goto -> bb11;\n-//  }\n-//  bb5: {\n-//      unreachable;\n-//  }\n-//  bb6: {\n-//      falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding3 to unreachable\n-//  }\n-//  bb7: {\n-//      falseEdges -> [real: bb2, imaginary: bb3]; // from before_binding1 to binding2\n-//  }\n-//  bb8: {\n-//      switchInt(_6) -> [0u8: bb9, otherwise: bb1]; // end of guard\n-//  }\n-//  bb9: {\n-//      falseEdges -> [real: bb10, imaginary: bb3]; // after_guard to binding2\n-//  }\n-//  bb10: {\n-//      falseEdges -> [real: bb3, imaginary: bb4]; // from before_binding2 to binding3\n-//  }\n //  bb11: {\n //      ...\n //      return;\n@@ -102,68 +102,72 @@ fn main() {\n //     ...\n //     _2 = std::option::Option<i32>::Some(const 1i32,);\n //     _7 = discriminant(_2);\n-//     switchInt(_7) -> [1isize: bb8, otherwise: bb11];\n+//     switchInt(_7) -> [1isize: bb3, otherwise: bb4];\n // }\n // bb1: { // arm1\n //      _1 = const 1i32;\n-//      goto -> bb15;\n+//      goto -> bb16;\n // }\n // bb2: { // arm3\n //     _1 = const 3i32;\n-//      goto -> bb15;\n-// }\n-// bb3: { // binding1: Some(w) if guard() =>\n-//     StorageLive(_3);\n-//     _3 = ((_2 as Some).0: i32);\n-//     StorageLive(_8);\n-//     _8 = const guard() -> bb9;\n-// }\n-// bb4: { // binding2 & arm2\n-//     StorageLive(_4);\n-//     _4 = _2;\n-//     _1 = const 2i32;\n-//     goto -> bb15;\n-// }\n-// bb5: { // binding3: Some(y) if guard2(y) =>\n-//     StorageLive(_5);\n-//     _5 = ((_2 as Some).0: i32);\n-//     StorageLive(_10);\n-//     StorageLive(_11);\n-//     _11 = _5;\n-//    _10 = const guard2(_11) -> bb12;\n-// }\n-// bb6: { // binding4 & arm4\n-//     StorageLive(_6);\n-//     _6 = _2;\n-//     _1 = const 4i32;\n-//     goto -> bb15;\n-// }\n-// bb7: {\n-//     unreachable;\n+//      goto -> bb16;\n // }\n-// bb8: {\n-//     falseEdges -> [real: bb3, imaginary: bb4]; // from before_binding1 to binding2\n-// }\n-// bb9: {\n-//     switchInt(_8) -> [0u8: bb10, otherwise: bb1]; // end of gurard\n-// }\n-// bb10: {\n-//     falseEdges -> [real: bb11, imaginary: bb4]; // after guard to binding2\n-// }\n-// bb11: {\n-//     falseEdges -> [real: bb4, imaginary: bb5]; // from before_binding2 to binding3\n-// }\n-// bb12: {\n+//\n+//  bb3: {\n+//      falseEdges -> [real: bb8, imaginary: bb4]; //pre_binding1\n+//  }\n+//  bb4: {\n+//      falseEdges -> [real: bb11, imaginary: bb5]; //pre_binding2\n+//  }\n+//  bb5: {\n+//      falseEdges -> [real: bb12, imaginary: bb6]; //pre_binding3\n+//  }\n+//  bb6: {\n+//      falseEdges -> [real: bb15, imaginary: bb7]; //pre_binding4\n+//  }\n+//  bb7: {\n+//      unreachable;\n+//  }\n+//  bb8: { // binding1: Some(w) if guard()\n+//      StorageLive(_3);\n+//      _3 = ((_2 as Some).0: i32);\n+//      StorageLive(_8);\n+//      _8 = const guard() -> bb9;\n+//  }\n+//  bb9: { //end of guard\n+//      switchInt(_8) -> [0u8: bb10, otherwise: bb1];\n+//  }\n+//  bb10: { // to pre_binding2\n+//      falseEdges -> [real: bb4, imaginary: bb4];\n+//  }\n+//  bb11: { // binding2 & arm2\n+//      StorageLive(_4);\n+//      _4 = _2;\n+//      _1 = const 2i32;\n+//      goto -> bb16;\n+//  }\n+//  bb12: { // binding3: Some(y) if guard2(y)\n+//      StorageLive(_5);\n+//      _5 = ((_2 as Some).0: i32);\n+//      StorageLive(_10);\n+//      StorageLive(_11);\n+//      _11 = _5;\n+//      _10 = const guard2(_11) -> bb13;\n+//  }\n+//  bb13: { // end of guard2\n //      StorageDead(_11);\n-//      switchInt(_10) -> [0u8: bb13, otherwise: bb2]; // end of guard2\n-// }\n-// bb13: {\n-//     falseEdges -> [real: bb14, imaginary: bb6]; // after guard2 to binding4\n-// }\n-// bb14: {\n-//     falseEdges -> [real: bb6, imaginary: bb7]; // from befor binding4 to unreachable\n-// }\n-// bb15: {\n+//      switchInt(_10) -> [0u8: bb14, otherwise: bb2];\n+//  }\n+//  bb14: { // to pre_binding4\n+//      falseEdges -> [real: bb6, imaginary: bb6];\n+//  }\n+//  bb15: { // binding4 & arm4\n+//      StorageLive(_6);\n+//      _6 = _2;\n+//      _1 = const 4i32;\n+//      goto -> bb16;\n+//  }\n+// bb16: {\n //     ...\n //     return;\n // }"}]}