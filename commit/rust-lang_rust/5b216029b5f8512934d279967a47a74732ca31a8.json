{"sha": "5b216029b5f8512934d279967a47a74732ca31a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjViMjE2MDI5YjVmODUxMjkzNGQyNzk5NjdhNDdhNzQ3MzJjYTMxYTg=", "commit": {"author": {"name": "Caleb Cartwright", "email": "caleb.cartwright@outlook.com", "date": "2020-11-28T20:58:10Z"}, "committer": {"name": "Caleb Cartwright", "email": "calebcartwright@users.noreply.github.com", "date": "2020-11-28T23:41:21Z"}, "message": "deps: minor rustc_ast changes for v691", "tree": {"sha": "4de7540354679ded7a87bb476aabd971104dfefc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4de7540354679ded7a87bb476aabd971104dfefc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5b216029b5f8512934d279967a47a74732ca31a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5b216029b5f8512934d279967a47a74732ca31a8", "html_url": "https://github.com/rust-lang/rust/commit/5b216029b5f8512934d279967a47a74732ca31a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5b216029b5f8512934d279967a47a74732ca31a8/comments", "author": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "committer": {"login": "calebcartwright", "id": 13042488, "node_id": "MDQ6VXNlcjEzMDQyNDg4", "avatar_url": "https://avatars.githubusercontent.com/u/13042488?v=4", "gravatar_id": "", "url": "https://api.github.com/users/calebcartwright", "html_url": "https://github.com/calebcartwright", "followers_url": "https://api.github.com/users/calebcartwright/followers", "following_url": "https://api.github.com/users/calebcartwright/following{/other_user}", "gists_url": "https://api.github.com/users/calebcartwright/gists{/gist_id}", "starred_url": "https://api.github.com/users/calebcartwright/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/calebcartwright/subscriptions", "organizations_url": "https://api.github.com/users/calebcartwright/orgs", "repos_url": "https://api.github.com/users/calebcartwright/repos", "events_url": "https://api.github.com/users/calebcartwright/events{/privacy}", "received_events_url": "https://api.github.com/users/calebcartwright/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "baee271013bfc2d2072a266675e16c6d9dde766f", "url": "https://api.github.com/repos/rust-lang/rust/commits/baee271013bfc2d2072a266675e16c6d9dde766f", "html_url": "https://github.com/rust-lang/rust/commit/baee271013bfc2d2072a266675e16c6d9dde766f"}], "stats": {"total": 6, "additions": 3, "deletions": 3}, "files": [{"sha": "d5acf3f1cbcb46aee36f0237b3ac1592f34e380e", "filename": "src/modules/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fmodules%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fmodules%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmodules%2Fvisitor.rs?ref=5b216029b5f8512934d279967a47a74732ca31a8", "patch": "@@ -30,7 +30,7 @@ impl<'a> CfgIfVisitor<'a> {\n }\n \n impl<'a, 'ast: 'a> Visitor<'ast> for CfgIfVisitor<'a> {\n-    fn visit_mac(&mut self, mac: &'ast ast::MacCall) {\n+    fn visit_mac_call(&mut self, mac: &'ast ast::MacCall) {\n         match self.visit_mac_inner(mac) {\n             Ok(()) => (),\n             Err(e) => debug!(\"{}\", e),"}, {"sha": "6c500635a9551dec165511d10f05a1d4b85b3d53", "filename": "src/skip.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fskip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fskip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fskip.rs?ref=5b216029b5f8512934d279967a47a74732ca31a8", "patch": "@@ -58,7 +58,7 @@ fn get_skip_names(kind: &str, attrs: &[ast::Attribute]) -> Vec<String> {\n     for attr in attrs {\n         // rustc_ast::ast::Path is implemented partialEq\n         // but it is designed for segments.len() == 1\n-        if let ast::AttrKind::Normal(attr_item) = &attr.kind {\n+        if let ast::AttrKind::Normal(attr_item, _) = &attr.kind {\n             if pprust::path_to_string(&attr_item.path) != path {\n                 continue;\n             }"}, {"sha": "ecf728331951ff818e15e4094d977c91f0dddd38", "filename": "src/visitor.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fvisitor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5b216029b5f8512934d279967a47a74732ca31a8/src%2Fvisitor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvisitor.rs?ref=5b216029b5f8512934d279967a47a74732ca31a8", "patch": "@@ -851,7 +851,7 @@ impl<'b, 'a: 'b> FmtVisitor<'a> {\n                 );\n             } else {\n                 match &attr.kind {\n-                    ast::AttrKind::Normal(ref attribute_item)\n+                    ast::AttrKind::Normal(ref attribute_item, _)\n                         if self.is_unknown_rustfmt_attr(&attribute_item.path.segments) =>\n                     {\n                         let file_name = self.parse_sess.span_to_filename(attr.span);"}]}