{"sha": "476af31d59e753ce9e36c078a7d19169c560b7b9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3NmFmMzFkNTllNzUzY2U5ZTM2YzA3OGE3ZDE5MTY5YzU2MGI3Yjk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T22:07:24Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-08-07T22:07:24Z"}, "message": "Auto merge of #62457 - zackmdavis:minimax_search_and_the_structure_of_cognition, r=varkor\n\npretty-pretty extremal constants!\n\n(A resurrection of the defunct #57073.)\n\nWhile many programmers may intuitively appreciate the significance of \"magic numbers\" like \u22122147483648, Rust is about empowering everyone to build reliable and efficient software! It's a bit more legible to print the constant names (even noisy fully-qualified-paths thereof).\n\nThe bit-manipulation methods mirror those in `librustc_mir::hair::pattern::_match::all_constructors`; thanks to the immortal Varkor for guidance.\n\nResolves #56393.\n\nr? @varkor", "tree": {"sha": "287cb0eef72b5de9b19f592c16e0e6beb22d15cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/287cb0eef72b5de9b19f592c16e0e6beb22d15cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/476af31d59e753ce9e36c078a7d19169c560b7b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/476af31d59e753ce9e36c078a7d19169c560b7b9", "html_url": "https://github.com/rust-lang/rust/commit/476af31d59e753ce9e36c078a7d19169c560b7b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/476af31d59e753ce9e36c078a7d19169c560b7b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad7c55e1fc55d9af4787b285cec1c64e3480ae84", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad7c55e1fc55d9af4787b285cec1c64e3480ae84", "html_url": "https://github.com/rust-lang/rust/commit/ad7c55e1fc55d9af4787b285cec1c64e3480ae84"}, {"sha": "d1cdb02e4d408bc9be293e081ba0116f9f7670f6", "url": "https://api.github.com/repos/rust-lang/rust/commits/d1cdb02e4d408bc9be293e081ba0116f9f7670f6", "html_url": "https://github.com/rust-lang/rust/commit/d1cdb02e4d408bc9be293e081ba0116f9f7670f6"}], "stats": {"total": 107, "additions": 62, "deletions": 45}, "files": [{"sha": "bf6741dde43b585d2c4c5e1b402599cc39dce395", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 21, "deletions": 4, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -6,12 +6,13 @@ use crate::middle::cstore::{ExternCrate, ExternCrateSource};\n use crate::middle::region;\n use crate::ty::{self, DefIdTree, ParamConst, Ty, TyCtxt, TypeFoldable};\n use crate::ty::subst::{Kind, Subst, UnpackedKind};\n-use crate::ty::layout::Size;\n-use crate::mir::interpret::{ConstValue, sign_extend, Scalar};\n+use crate::ty::layout::{Integer, IntegerExt, Size};\n+use crate::mir::interpret::{ConstValue, sign_extend, Scalar, truncate};\n use syntax::ast;\n use rustc_apfloat::ieee::{Double, Single};\n use rustc_apfloat::Float;\n use rustc_target::spec::abi::Abi;\n+use syntax::attr::{SignedInt, UnsignedInt};\n use syntax::symbol::{kw, InternedString};\n \n use std::cell::Cell;\n@@ -899,15 +900,31 @@ pub trait PrettyPrinter<'tcx>:\n                     return Ok(self);\n                 },\n                 ty::Uint(ui) => {\n-                    p!(write(\"{}{}\", data, ui));\n+                    let bit_size = Integer::from_attr(&self.tcx(), UnsignedInt(ui)).size();\n+                    let max = truncate(u128::max_value(), bit_size);\n+\n+                    if data == max {\n+                        p!(write(\"std::{}::MAX\", ui))\n+                    } else {\n+                        p!(write(\"{}{}\", data, ui))\n+                    };\n                     return Ok(self);\n                 },\n                 ty::Int(i) =>{\n+                    let bit_size = Integer::from_attr(&self.tcx(), SignedInt(i))\n+                        .size().bits() as u128;\n+                    let min = 1u128 << (bit_size - 1);\n+                    let max = min - 1;\n+\n                     let ty = self.tcx().lift_to_global(&ct.ty).unwrap();\n                     let size = self.tcx().layout_of(ty::ParamEnv::empty().and(ty))\n                         .unwrap()\n                         .size;\n-                    p!(write(\"{}{}\", sign_extend(data, size) as i128, i));\n+                    match data {\n+                        d if d == min => p!(write(\"std::{}::MIN\", i)),\n+                        d if d == max => p!(write(\"std::{}::MAX\", i)),\n+                        _ => p!(write(\"{}{}\", sign_extend(data, size) as i128, i))\n+                    }\n                     return Ok(self);\n                 },\n                 ty::Char => {"}, {"sha": "3bcb50c6dcf6f22ec7f9cb87ebe7043de01223bb", "filename": "src/test/ui/consts/const-match-check.eval1.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval1.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:25:15\n    |\n LL |     A = { let 0 = 0; 0 },\n-   |               ^ pattern `-2147483648i32..=-1i32` not covered\n+   |               ^ pattern `std::i32::MIN..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "e292e1cc16585ee47895d1fa5b2d3965470724e0", "filename": "src/test/ui/consts/const-match-check.eval2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.eval2.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:31:24\n    |\n LL |     let x: [i32; { let 0 = 0; 0 }] = [];\n-   |                        ^ pattern `-2147483648i32..=-1i32` not covered\n+   |                        ^ pattern `std::i32::MIN..=-1i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "8a9fbde8537bf6895507b2102381c2f0b35ef9eb", "filename": "src/test/ui/consts/const-match-check.matchck.stderr", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-match-check.matchck.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,26 +1,26 @@\n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:4:22\n    |\n LL | const X: i32 = { let 0 = 0; 0 };\n-   |                      ^ pattern `-2147483648i32..=-1i32` not covered\n+   |                      ^ pattern `std::i32::MIN..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:8:23\n    |\n LL | static Y: i32 = { let 0 = 0; 0 };\n-   |                       ^ pattern `-2147483648i32..=-1i32` not covered\n+   |                       ^ pattern `std::i32::MIN..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:13:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n+   |                          ^ pattern `std::i32::MIN..=-1i32` not covered\n \n-error[E0005]: refutable pattern in local binding: `-2147483648i32..=-1i32` not covered\n+error[E0005]: refutable pattern in local binding: `std::i32::MIN..=-1i32` not covered\n   --> $DIR/const-match-check.rs:19:26\n    |\n LL |     const X: i32 = { let 0 = 0; 0 };\n-   |                          ^ pattern `-2147483648i32..=-1i32` not covered\n+   |                          ^ pattern `std::i32::MIN..=-1i32` not covered\n \n error: aborting due to 4 previous errors\n "}, {"sha": "6c4b7b0cc03529b4764e6514629d8016c875d490", "filename": "src/test/ui/exhaustive_integer_patterns.stderr", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fexhaustive_integer_patterns.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -10,11 +10,11 @@ note: lint level defined here\n LL | #![deny(unreachable_patterns)]\n    |         ^^^^^^^^^^^^^^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n+error[E0004]: non-exhaustive patterns: `128u8..=std::u8::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:28:11\n    |\n LL |     match x {\n-   |           ^ pattern `128u8..=255u8` not covered\n+   |           ^ pattern `128u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n@@ -32,19 +32,19 @@ error: unreachable pattern\n LL |         -2..=20 => {}\n    |         ^^^^^^^\n \n-error[E0004]: non-exhaustive patterns: `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n+error[E0004]: non-exhaustive patterns: `std::i8::MIN..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n   --> $DIR/exhaustive_integer_patterns.rs:41:11\n    |\n LL |     match x {\n-   |           ^ patterns `-128i8..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n+   |           ^ patterns `std::i8::MIN..=-8i8`, `-6i8`, `121i8..=124i8` and 1 more not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `-128i8` not covered\n+error[E0004]: non-exhaustive patterns: `std::i8::MIN` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:82:11\n    |\n LL |     match 0i8 {\n-   |           ^^^ pattern `-128i8` not covered\n+   |           ^^^ pattern `std::i8::MIN` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n@@ -56,19 +56,19 @@ LL |     match 0i16 {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `128u8..=255u8` not covered\n+error[E0004]: non-exhaustive patterns: `128u8..=std::u8::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:108:11\n    |\n LL |     match 0u8 {\n-   |           ^^^ pattern `128u8..=255u8` not covered\n+   |           ^^^ pattern `128u8..=std::u8::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n+error[E0004]: non-exhaustive patterns: `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:120:11\n    |\n LL |     match (0u8, Some(())) {\n-   |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=255u8, Some(_))` not covered\n+   |           ^^^^^^^^^^^^^^^ patterns `(0u8, Some(_))` and `(2u8..=std::u8::MAX, Some(_))` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n@@ -80,19 +80,19 @@ LL |     match (0u8, true) {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `340282366920938463463374607431768211455u128` not covered\n+error[E0004]: non-exhaustive patterns: `std::u128::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:145:11\n    |\n LL |     match 0u128 {\n-   |           ^^^^^ pattern `340282366920938463463374607431768211455u128` not covered\n+   |           ^^^^^ pattern `std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `5u128..=340282366920938463463374607431768211455u128` not covered\n+error[E0004]: non-exhaustive patterns: `5u128..=std::u128::MAX` not covered\n   --> $DIR/exhaustive_integer_patterns.rs:149:11\n    |\n LL |     match 0u128 {\n-   |           ^^^^^ pattern `5u128..=340282366920938463463374607431768211455u128` not covered\n+   |           ^^^^^ pattern `5u128..=std::u128::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "0d77fd4efdb82563bf2c8a9f1801dfecc10d0864", "filename": "src/test/ui/for/for-loop-refutable-pattern-error-message.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffor%2Ffor-loop-refutable-pattern-error-message.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,8 +1,8 @@\n-error[E0005]: refutable pattern in `for` loop binding: `&-2147483648i32..=0i32` not covered\n+error[E0005]: refutable pattern in `for` loop binding: `&std::i32::MIN..=0i32` not covered\n   --> $DIR/for-loop-refutable-pattern-error-message.rs:2:9\n    |\n LL |     for &1 in [1].iter() {}\n-   |         ^^ pattern `&-2147483648i32..=0i32` not covered\n+   |         ^^ pattern `&std::i32::MIN..=0i32` not covered\n \n error: aborting due to previous error\n "}, {"sha": "211f333882b10cba929556cca0ee81b909aaf9fa", "filename": "src/test/ui/match/match-non-exhaustive.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmatch%2Fmatch-non-exhaustive.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,8 +1,8 @@\n-error[E0004]: non-exhaustive patterns: `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n+error[E0004]: non-exhaustive patterns: `std::i32::MIN..=0i32` and `2i32..=std::i32::MAX` not covered\n   --> $DIR/match-non-exhaustive.rs:2:11\n    |\n LL |     match 0 { 1 => () }\n-   |           ^ patterns `-2147483648i32..=0i32` and `2i32..=2147483647i32` not covered\n+   |           ^ patterns `std::i32::MIN..=0i32` and `2i32..=std::i32::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "0e5a9203c5f80ac5f532dc8d61a6f4882c2791ce", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.rs?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -12,8 +12,8 @@ fn main() {\n     match Some(10) { //~ ERROR non-exhaustive patterns: `Some(_)` not covered\n       None => {}\n     }\n-    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)`\n-                      //  and `(_, _, 5i32..=2147483647i32)` not covered\n+    match (2, 3, 4) { //~ ERROR non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)`\n+                      //  and `(_, _, 5i32..=std::i32::MAX)` not covered\n       (_, _, 4) => {}\n     }\n     match (T::A, T::A) { //~ ERROR non-exhaustive patterns: `(A, A)` not covered"}, {"sha": "5dba05e16427a8df24a27d5308bbe316b5d2c2c3", "filename": "src/test/ui/non-exhaustive/non-exhaustive-match.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnon-exhaustive%2Fnon-exhaustive-match.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -28,11 +28,11 @@ LL |     match Some(10) {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n+error[E0004]: non-exhaustive patterns: `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n   --> $DIR/non-exhaustive-match.rs:15:11\n    |\n LL |     match (2, 3, 4) {\n-   |           ^^^^^^^^^ patterns `(_, _, -2147483648i32..=3i32)` and `(_, _, 5i32..=2147483647i32)` not covered\n+   |           ^^^^^^^^^ patterns `(_, _, std::i32::MIN..=3i32)` and `(_, _, 5i32..=std::i32::MAX)` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "2c2c2aa04c233e4296f279dedbabdd768d2b2157", "filename": "src/test/ui/precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprecise_pointer_size_matching.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -1,16 +1,16 @@\n-error[E0004]: non-exhaustive patterns: `$ISIZE_MIN..=-6isize` and `21isize..=$ISIZE_MAX` not covered\n+error[E0004]: non-exhaustive patterns: `std::isize::MIN..=-6isize` and `21isize..=std::isize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:24:11\n    |\n LL |     match 0isize {\n-   |           ^^^^^^ patterns `$ISIZE_MIN..=-6isize` and `21isize..=$ISIZE_MAX` not covered\n+   |           ^^^^^^ patterns `std::isize::MIN..=-6isize` and `21isize..=std::isize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n \n-error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=$USIZE_MAX` not covered\n+error[E0004]: non-exhaustive patterns: `0usize` and `21usize..=std::usize::MAX` not covered\n   --> $DIR/precise_pointer_size_matching.rs:29:11\n    |\n LL |     match 0usize {\n-   |           ^^^^^^ patterns `0usize` and `21usize..=$USIZE_MAX` not covered\n+   |           ^^^^^^ patterns `0usize` and `21usize..=std::usize::MAX` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n "}, {"sha": "aa5fa76bb8cffedd7132f0f2807da55544d4e327", "filename": "src/test/ui/refutable-pattern-errors.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.rs?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -3,5 +3,5 @@ fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n \n fn main() {\n     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-    //~^ ERROR refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n+    //~^ ERROR refutable pattern in local binding: `(std::i32::MIN..=0i32, _)` not covered\n }"}, {"sha": "c67ae7c6d48d21c4356f9b737d8a0d2223415c1b", "filename": "src/test/ui/refutable-pattern-errors.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/476af31d59e753ce9e36c078a7d19169c560b7b9/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frefutable-pattern-errors.stderr?ref=476af31d59e753ce9e36c078a7d19169c560b7b9", "patch": "@@ -4,11 +4,11 @@ error[E0005]: refutable pattern in function argument: `(_, _)` not covered\n LL | fn func((1, (Some(1), 2..=3)): (isize, (Option<isize>, isize))) { }\n    |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(_, _)` not covered\n \n-error[E0005]: refutable pattern in local binding: `(-2147483648i32..=0i32, _)` not covered\n+error[E0005]: refutable pattern in local binding: `(std::i32::MIN..=0i32, _)` not covered\n   --> $DIR/refutable-pattern-errors.rs:5:9\n    |\n LL |     let (1, (Some(1), 2..=3)) = (1, (None, 2));\n-   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(-2147483648i32..=0i32, _)` not covered\n+   |         ^^^^^^^^^^^^^^^^^^^^^ pattern `(std::i32::MIN..=0i32, _)` not covered\n \n error: aborting due to 2 previous errors\n "}]}