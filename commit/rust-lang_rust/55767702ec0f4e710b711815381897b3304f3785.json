{"sha": "55767702ec0f4e710b711815381897b3304f3785", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU1NzY3NzAyZWMwZjRlNzEwYjcxMTgxNTM4MTg5N2IzMzA0ZjM3ODU=", "commit": {"author": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-18T17:56:25Z"}, "committer": {"name": "Ariel Ben-Yehuda", "email": "ariel.byd@gmail.com", "date": "2017-05-28T07:43:25Z"}, "message": "fix RUST_LOG ICE caused by printing a default impl's DefId", "tree": {"sha": "f1542dfcdee1c017b3cb96003f8b3d7752d4c8ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1542dfcdee1c017b3cb96003f8b3d7752d4c8ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/55767702ec0f4e710b711815381897b3304f3785", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/55767702ec0f4e710b711815381897b3304f3785", "html_url": "https://github.com/rust-lang/rust/commit/55767702ec0f4e710b711815381897b3304f3785", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/55767702ec0f4e710b711815381897b3304f3785/comments", "author": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arielb1", "id": 1830974, "node_id": "MDQ6VXNlcjE4MzA5NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1830974?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arielb1", "html_url": "https://github.com/arielb1", "followers_url": "https://api.github.com/users/arielb1/followers", "following_url": "https://api.github.com/users/arielb1/following{/other_user}", "gists_url": "https://api.github.com/users/arielb1/gists{/gist_id}", "starred_url": "https://api.github.com/users/arielb1/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arielb1/subscriptions", "organizations_url": "https://api.github.com/users/arielb1/orgs", "repos_url": "https://api.github.com/users/arielb1/repos", "events_url": "https://api.github.com/users/arielb1/events{/privacy}", "received_events_url": "https://api.github.com/users/arielb1/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7b295eea4296eedf7858a001297eadfaace253d3", "url": "https://api.github.com/repos/rust-lang/rust/commits/7b295eea4296eedf7858a001297eadfaace253d3", "html_url": "https://github.com/rust-lang/rust/commit/7b295eea4296eedf7858a001297eadfaace253d3"}], "stats": {"total": 39, "additions": 24, "deletions": 15}, "files": [{"sha": "6597db9e19bd9e2d49cf0b4c2d39bb1148f70145", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -245,7 +245,6 @@ pub trait CrateStore {\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool;\n-    fn is_default_impl(&self, impl_did: DefId) -> bool;\n     fn is_dllimport_foreign_item(&self, def: DefId) -> bool;\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool;\n \n@@ -364,7 +363,6 @@ impl CrateStore for DummyCrateStore {\n \n     // flags\n     fn is_const_fn(&self, did: DefId) -> bool { bug!(\"is_const_fn\") }\n-    fn is_default_impl(&self, impl_did: DefId) -> bool { bug!(\"is_default_impl\") }\n     fn is_dllimport_foreign_item(&self, id: DefId) -> bool { false }\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool { false }\n "}, {"sha": "78536b53ba8791092df5fe6020d6568101e406a2", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -218,15 +218,15 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n         // Always use types for non-local impls, where types are always\n         // available, and filename/line-number is mostly uninteresting.\n-        let use_types = !impl_def_id.is_local() || {\n+        let use_types = !self.is_default_impl(impl_def_id) && (!impl_def_id.is_local() || {\n             // Otherwise, use filename/line-number if forced.\n             let force_no_types = FORCE_IMPL_FILENAME_LINE.with(|f| f.get());\n             !force_no_types && {\n                 // Otherwise, use types if we can query them without inducing a cycle.\n                 ty::queries::impl_trait_ref::try_get(self, DUMMY_SP, impl_def_id).is_ok() &&\n                     ty::queries::type_of::try_get(self, DUMMY_SP, impl_def_id).is_ok()\n             }\n-        };\n+        });\n \n         if !use_types {\n             return self.push_impl_path_fallback(buffer, impl_def_id);"}, {"sha": "757687f00a20cd69990318bcd88ab099ceedaa81", "filename": "src/librustc/ty/maps.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fty%2Fmaps.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc%2Fty%2Fmaps.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -774,6 +774,9 @@ define_maps! { <'tcx>\n     /// True if this is a foreign item (i.e., linked via `extern { ... }`).\n     [] is_foreign_item: IsForeignItem(DefId) -> bool,\n \n+    /// True if this is a default impl (aka impl Foo for ..)\n+    [] is_default_impl: ItemSignature(DefId) -> bool,\n+\n     /// Get a map with the variance of every item; use `item_variance`\n     /// instead.\n     [] crate_variances: crate_variances(CrateNum) -> Rc<ty::CrateVariancesMap>,"}, {"sha": "2b39d2a256e1fa6cbd96fd611dd9c53bcbd9c1f7", "filename": "src/librustc_borrowck/borrowck/mir/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmir%2Fmod.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -59,7 +59,7 @@ pub fn borrowck_mir(bcx: &mut BorrowckCtxt,\n                     attributes: &[ast::Attribute]) {\n     let tcx = bcx.tcx;\n     let def_id = tcx.hir.local_def_id(id);\n-    debug!(\"borrowck_mir({}) UNIMPLEMENTED\", tcx.item_path_str(def_id));\n+    debug!(\"borrowck_mir({:?}) UNIMPLEMENTED\", def_id);\n \n     // It is safe for us to borrow `mir_validated()`: `optimized_mir`\n     // steals it, but it forces the `borrowck` query."}, {"sha": "b3503713c904ea3acff385cb4337ac0aba044357", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -106,6 +106,7 @@ provide! { <'tcx> tcx, def_id, cdata\n     closure_type => { cdata.closure_ty(def_id.index, tcx) }\n     inherent_impls => { Rc::new(cdata.get_inherent_implementations_for_type(def_id.index)) }\n     is_foreign_item => { cdata.is_foreign_item(def_id.index) }\n+    is_default_impl => { cdata.is_default_impl(def_id.index) }\n     describe_def => { cdata.get_def(def_id.index) }\n     def_span => { cdata.get_span(def_id.index, &tcx.sess) }\n     stability => { cdata.get_stability(def_id.index) }\n@@ -176,11 +177,6 @@ impl CrateStore for cstore::CStore {\n         self.get_crate_data(did.krate).is_const_fn(did.index)\n     }\n \n-    fn is_default_impl(&self, impl_did: DefId) -> bool {\n-        self.dep_graph.read(DepNode::MetaData(impl_did));\n-        self.get_crate_data(impl_did.krate).is_default_impl(impl_did.index)\n-    }\n-\n     fn is_statically_included_foreign_item(&self, def_id: DefId) -> bool\n     {\n         self.do_is_statically_included_foreign_item(def_id)\n@@ -403,7 +399,7 @@ impl CrateStore for cstore::CStore {\n         }\n \n         self.dep_graph.read(DepNode::MetaData(def_id));\n-        debug!(\"item_body({}): inlining item\", tcx.item_path_str(def_id));\n+        debug!(\"item_body({:?}): inlining item\", def_id);\n \n         self.get_crate_data(def_id.krate).item_body(tcx, def_id.index)\n     }\n@@ -515,4 +511,4 @@ impl CrateStore for cstore::CStore {\n         drop(visible_parent_map);\n         self.visible_parent_map.borrow()\n     }\n-}\n\\ No newline at end of file\n+}"}, {"sha": "3b1c54f68e49b878889ba43261671bbb115d0641", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -361,7 +361,7 @@ impl<'a, 'tcx> Qualifier<'a, 'tcx, 'tcx> {\n \n     /// Qualify a whole const, static initializer or const fn.\n     fn qualify_const(&mut self) -> Qualif {\n-        debug!(\"qualifying {} {}\", self.mode, self.tcx.item_path_str(self.def_id));\n+        debug!(\"qualifying {} {:?}\", self.mode, self.def_id);\n \n         let mir = self.mir;\n "}, {"sha": "8258627748f3008df8b7f567fce5345c6604a966", "filename": "src/librustc_mir/transform/type_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Ftype_check.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -744,7 +744,7 @@ impl MirPass for TypeckMir {\n                           mir: &mut Mir<'tcx>) {\n         let item_id = src.item_id();\n         let def_id = tcx.hir.local_def_id(item_id);\n-        debug!(\"run_pass: {}\", tcx.item_path_str(def_id));\n+        debug!(\"run_pass: {:?}\", def_id);\n \n         if tcx.sess.err_count() > 0 {\n             // compiling a broken program can obviously result in a"}, {"sha": "fb3bcd31e21fcbaffe0dbcf0bca3cd3a9a34f315", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -100,6 +100,7 @@ pub fn provide(providers: &mut Providers) {\n         impl_trait_ref,\n         impl_polarity,\n         is_foreign_item,\n+        is_default_impl,\n         ..*providers\n     };\n }\n@@ -1545,3 +1546,14 @@ fn is_foreign_item<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         _ => bug!(\"is_foreign_item applied to non-local def-id {:?}\", def_id)\n     }\n }\n+\n+fn is_default_impl<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n+                             def_id: DefId)\n+                             -> bool {\n+    match tcx.hir.get_if_local(def_id) {\n+        Some(hir_map::NodeItem(&hir::Item { node: hir::ItemDefaultImpl(..), .. }))\n+             => true,\n+        Some(_) => false,\n+        _ => bug!(\"is_default_impl applied to non-local def-id {:?}\", def_id)\n+    }\n+}"}, {"sha": "8f7add14d0a058a70679082c925318eae8a57121", "filename": "src/librustdoc/clean/inline.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustdoc%2Fclean%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/55767702ec0f4e710b711815381897b3304f3785/src%2Flibrustdoc%2Fclean%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Finline.rs?ref=55767702ec0f4e710b711815381897b3304f3785", "patch": "@@ -290,7 +290,7 @@ pub fn build_impl(cx: &DocContext, did: DefId, ret: &mut Vec<clean::Item>) {\n     }\n \n     // If this is a defaulted impl, then bail out early here\n-    if tcx.sess.cstore.is_default_impl(did) {\n+    if tcx.is_default_impl(did) {\n         return ret.push(clean::Item {\n             inner: clean::DefaultImplItem(clean::DefaultImpl {\n                 // FIXME: this should be decoded"}]}