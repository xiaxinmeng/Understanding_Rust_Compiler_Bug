{"sha": "acbcfaaf7b1da91197f58d17687399931bd5653a", "node_id": "C_kwDOAAsO6NoAKGFjYmNmYWFmN2IxZGE5MTE5N2Y1OGQxNzY4NzM5OTkzMWJkNTY1M2E", "commit": {"author": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-16T14:45:26Z"}, "committer": {"name": "Oli Scherer", "email": "git-spam-no-reply9815368754983@oli-obk.de", "date": "2023-02-20T15:28:59Z"}, "message": "Stop passing in values that one can also get from the tcx lazily", "tree": {"sha": "5fd929841afa1e11adbd2743e66987d8f744ae8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5fd929841afa1e11adbd2743e66987d8f744ae8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/acbcfaaf7b1da91197f58d17687399931bd5653a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/acbcfaaf7b1da91197f58d17687399931bd5653a", "html_url": "https://github.com/rust-lang/rust/commit/acbcfaaf7b1da91197f58d17687399931bd5653a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/acbcfaaf7b1da91197f58d17687399931bd5653a/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c3522d063712abb90ff839254a4b269ede4f1fdd", "url": "https://api.github.com/repos/rust-lang/rust/commits/c3522d063712abb90ff839254a4b269ede4f1fdd", "html_url": "https://github.com/rust-lang/rust/commit/c3522d063712abb90ff839254a4b269ede4f1fdd"}], "stats": {"total": 57, "additions": 23, "deletions": 34}, "files": [{"sha": "fd322cb35a3dca6a2bbb9683a0d407330794f477", "filename": "compiler/rustc_interface/src/passes.rs", "status": "modified", "additions": 1, "deletions": 7, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_interface%2Fsrc%2Fpasses.rs?ref=acbcfaaf7b1da91197f58d17687399931bd5653a", "patch": "@@ -571,13 +571,7 @@ fn resolver_for_lowering<'tcx>(\n ) -> &'tcx Steal<(ty::ResolverAstLowering, Lrc<ast::Crate>)> {\n     let arenas = Resolver::arenas();\n     let krate = tcx.crate_for_resolver(()).steal();\n-    let mut resolver = Resolver::new(\n-        tcx,\n-        &krate,\n-        tcx.crate_name(LOCAL_CRATE),\n-        tcx.metadata_loader(()).steal(),\n-        &arenas,\n-    );\n+    let mut resolver = Resolver::new(tcx, &krate, &arenas);\n     let krate = configure_and_expand(tcx, krate, &mut resolver);\n \n     // Make sure we don't mutate the cstore from here on."}, {"sha": "b05626311e8e1f0deccd2b455aa0c5d4f38b770e", "filename": "compiler/rustc_metadata/src/creader.rs", "status": "modified", "additions": 17, "deletions": 12, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Fcreader.rs?ref=acbcfaaf7b1da91197f58d17687399931bd5653a", "patch": "@@ -15,8 +15,8 @@ use rustc_hir::definitions::Definitions;\n use rustc_index::vec::IndexVec;\n use rustc_middle::ty::TyCtxt;\n use rustc_session::config::{self, CrateType, ExternLocation};\n+use rustc_session::cstore::ExternCrateSource;\n use rustc_session::cstore::{CrateDepKind, CrateSource, ExternCrate};\n-use rustc_session::cstore::{ExternCrateSource, MetadataLoaderDyn};\n use rustc_session::lint;\n use rustc_session::output::validate_crate_name;\n use rustc_session::search_paths::PathKind;\n@@ -60,16 +60,22 @@ impl std::fmt::Debug for CStore {\n     }\n }\n \n-pub struct CrateLoader<'a> {\n+pub struct CrateLoader<'a, 'tcx: 'a> {\n     // Immutable configuration.\n-    sess: &'a Session,\n-    metadata_loader: &'a MetadataLoaderDyn,\n-    local_crate_name: Symbol,\n+    tcx: TyCtxt<'tcx>,\n     // Mutable output.\n     cstore: &'a mut CStore,\n     used_extern_options: &'a mut FxHashSet<Symbol>,\n }\n \n+impl<'a, 'tcx> std::ops::Deref for CrateLoader<'a, 'tcx> {\n+    type Target = TyCtxt<'tcx>;\n+\n+    fn deref(&self) -> &Self::Target {\n+        &self.tcx\n+    }\n+}\n+\n pub enum LoadedMacro {\n     MacroDef(ast::Item, Edition),\n     ProcMacro(SyntaxExtension),\n@@ -254,15 +260,13 @@ impl CStore {\n     }\n }\n \n-impl<'a> CrateLoader<'a> {\n+impl<'a, 'tcx> CrateLoader<'a, 'tcx> {\n     pub fn new(\n-        sess: &'a Session,\n-        metadata_loader: &'a MetadataLoaderDyn,\n-        local_crate_name: Symbol,\n+        tcx: TyCtxt<'tcx>,\n         cstore: &'a mut CStore,\n         used_extern_options: &'a mut FxHashSet<Symbol>,\n     ) -> Self {\n-        CrateLoader { sess, metadata_loader, local_crate_name, cstore, used_extern_options }\n+        CrateLoader { tcx, cstore, used_extern_options }\n     }\n     pub fn cstore(&self) -> &CStore {\n         &self.cstore\n@@ -553,9 +557,10 @@ impl<'a> CrateLoader<'a> {\n             (LoadResult::Previous(cnum), None)\n         } else {\n             info!(\"falling back to a load\");\n+            let metadata_loader = self.tcx.metadata_loader(()).borrow();\n             let mut locator = CrateLocator::new(\n                 self.sess,\n-                &*self.metadata_loader,\n+                &**metadata_loader,\n                 name,\n                 hash,\n                 extra_filename,\n@@ -960,7 +965,7 @@ impl<'a> CrateLoader<'a> {\n                     &format!(\n                         \"external crate `{}` unused in `{}`: remove the dependency or add `use {} as _;`\",\n                         name,\n-                        self.local_crate_name,\n+                        self.tcx.crate_name(LOCAL_CRATE),\n                         name),\n                 );\n         }"}, {"sha": "4d2b547d605bc7af42ec67536836d0f1fe44a092", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 5, "deletions": 15, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/acbcfaaf7b1da91197f58d17687399931bd5653a/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=acbcfaaf7b1da91197f58d17687399931bd5653a", "patch": "@@ -44,7 +44,7 @@ use rustc_middle::span_bug;\n use rustc_middle::ty::{self, DefIdTree, MainDefinition, RegisteredTools, TyCtxt};\n use rustc_middle::ty::{ResolverGlobalCtxt, ResolverOutputs};\n use rustc_query_system::ich::StableHashingContext;\n-use rustc_session::cstore::{CrateStore, MetadataLoaderDyn, Untracked};\n+use rustc_session::cstore::{CrateStore, Untracked};\n use rustc_session::lint::LintBuffer;\n use rustc_span::hygiene::{ExpnId, LocalExpnId, MacroKind, SyntaxContext, Transparency};\n use rustc_span::source_map::Spanned;\n@@ -955,8 +955,6 @@ pub struct Resolver<'a, 'tcx> {\n     arenas: &'a ResolverArenas<'a>,\n     dummy_binding: &'a NameBinding<'a>,\n \n-    local_crate_name: Symbol,\n-    metadata_loader: Box<MetadataLoaderDyn>,\n     used_extern_options: FxHashSet<Symbol>,\n     macro_names: FxHashSet<Ident>,\n     builtin_macros: FxHashMap<Symbol, BuiltinMacroState>,\n@@ -1203,8 +1201,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n     pub fn new(\n         tcx: TyCtxt<'tcx>,\n         krate: &Crate,\n-        crate_name: Symbol,\n-        metadata_loader: Box<MetadataLoaderDyn>,\n         arenas: &'a ResolverArenas<'a>,\n     ) -> Resolver<'a, 'tcx> {\n         let root_def_id = CRATE_DEF_ID.to_def_id();\n@@ -1312,8 +1308,6 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n                 vis: ty::Visibility::Public,\n             }),\n \n-            metadata_loader,\n-            local_crate_name: crate_name,\n             used_extern_options: Default::default(),\n             macro_names: FxHashSet::default(),\n             builtin_macros: Default::default(),\n@@ -1464,14 +1458,10 @@ impl<'a, 'tcx> Resolver<'a, 'tcx> {\n         StableHashingContext::new(self.tcx.sess, self.tcx.untracked())\n     }\n \n-    fn crate_loader<T>(&mut self, f: impl FnOnce(&mut CrateLoader<'_>) -> T) -> T {\n-        f(&mut CrateLoader::new(\n-            &self.tcx.sess,\n-            &*self.metadata_loader,\n-            self.local_crate_name,\n-            &mut *self.tcx.untracked().cstore.write().untracked_as_any().downcast_mut().unwrap(),\n-            &mut self.used_extern_options,\n-        ))\n+    fn crate_loader<T>(&mut self, f: impl FnOnce(&mut CrateLoader<'_, '_>) -> T) -> T {\n+        let mut cstore = self.tcx.untracked().cstore.write();\n+        let cstore = cstore.untracked_as_any().downcast_mut().unwrap();\n+        f(&mut CrateLoader::new(self.tcx, &mut *cstore, &mut self.used_extern_options))\n     }\n \n     fn cstore(&self) -> MappedReadGuard<'_, CStore> {"}]}