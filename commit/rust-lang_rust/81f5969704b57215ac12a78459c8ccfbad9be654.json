{"sha": "81f5969704b57215ac12a78459c8ccfbad9be654", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxZjU5Njk3MDRiNTcyMTVhYzEyYTc4NDU5YzhjY2ZiYWQ5YmU2NTQ=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-02-06T21:14:23Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2018-02-06T21:35:11Z"}, "message": "Partly fix incorrect useless_attribute suggestion\n\nThis fixes an incorrect suggestion from the `useless_attribute` lint\nwhen using `cfg_attr`.\n\nAdditionally, it will not show a suggestion anymore, if the attribute\nbegins on a previous line, because it is much harder to construct the\nspan of multi-line `cfg_attr` attributes as they don't appear in the AST.\n\nTo fix it completely, one would have to parse upwards into the file,\nand find the beginning of the `cfg_attr` attribute.", "tree": {"sha": "7c614b9fbf593b1d2f2b3e600e5ea61a225500a1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7c614b9fbf593b1d2f2b3e600e5ea61a225500a1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81f5969704b57215ac12a78459c8ccfbad9be654", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v2\n\niQIcBAABCAAGBQJaeh+RAAoJEGZ8j0taaYpgQu0P/02CGyzZnF1X/F5re0MB0IWd\n6GS5zsJnvfbjoR1TUET6oRwJCr8SfCQ/D3hrDagi7G+h334jvMXuetUvXqm70Zuq\nfwfb9UMtHy/0WxaKwL/ATmy6Dx4B0ztPICncfS8eTnhCniQaAMjE7E2tnw5EnuHS\nyZCg75zp7+7xENpg1KCMPnBrasGUm2qDSpx+1seqXiD8jLmBlfzwGvPpo+mfVc1b\n/yvbPtZfuSLEccntDjgb+4W8P2QSLdAmK2wlY3cmZF6h+8JpRpNiBNc91sh3COkp\nnHQ8jYsegU+9t0j1hmxUnXzURBYree1pFdPM19H5VTzf41I38Q67YUuMMDlpi9Bm\n/57Bcdw6T6Fy7lmLQE716jGVBXeijMi81nJex1Hpp3o7Maxi5rbqV1vMJYW8Ji1Y\ni2vDapzYcdEITf2U6QLtk/oe1/7DwKqvh1v5EXZn3mWVCVi7coeqmFEgvON9gNN0\nzKWyMpD+JkBk5mj71hj60FtEgMfc6gXXdiGH1f+dL1euVkrpcqqVgcUZetVmaN+z\nJpNAInYTCuBACTZRldgktwiaihvlUqPTaZNeKadj6TbR/g6WjKRQxTTToIgQtEuV\nUzjJHobcWG1/0cYlFUoRmqaYyr5IDtdOU+L/tbgxCsK+d3Gvw51ozGFvtizTdvV7\nyJSwgFXzb2J+gyL1S1WP\n=Bstu\n-----END PGP SIGNATURE-----", "payload": "tree 7c614b9fbf593b1d2f2b3e600e5ea61a225500a1\nparent 503a63390df10c6c025f1c1c514a232a0a163c38\nauthor Philipp Hansch <dev@phansch.net> 1517951663 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1517952911 +0100\n\nPartly fix incorrect useless_attribute suggestion\n\nThis fixes an incorrect suggestion from the `useless_attribute` lint\nwhen using `cfg_attr`.\n\nAdditionally, it will not show a suggestion anymore, if the attribute\nbegins on a previous line, because it is much harder to construct the\nspan of multi-line `cfg_attr` attributes as they don't appear in the AST.\n\nTo fix it completely, one would have to parse upwards into the file,\nand find the beginning of the `cfg_attr` attribute.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81f5969704b57215ac12a78459c8ccfbad9be654", "html_url": "https://github.com/rust-lang/rust/commit/81f5969704b57215ac12a78459c8ccfbad9be654", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81f5969704b57215ac12a78459c8ccfbad9be654/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "503a63390df10c6c025f1c1c514a232a0a163c38", "url": "https://api.github.com/repos/rust-lang/rust/commits/503a63390df10c6c025f1c1c514a232a0a163c38", "html_url": "https://github.com/rust-lang/rust/commit/503a63390df10c6c025f1c1c514a232a0a163c38"}], "stats": {"total": 33, "additions": 26, "deletions": 7}, "files": [{"sha": "50aaa66aadaf66155fcb43d9b2f55e9c28ebe2d7", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 8, "deletions": 6, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/81f5969704b57215ac12a78459c8ccfbad9be654/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f5969704b57215ac12a78459c8ccfbad9be654/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=81f5969704b57215ac12a78459c8ccfbad9be654", "patch": "@@ -7,7 +7,7 @@ use rustc::ty::{self, TyCtxt};\n use semver::Version;\n use syntax::ast::{Attribute, AttrStyle, Lit, LitKind, MetaItemKind, NestedMetaItem, NestedMetaItemKind};\n use syntax::codemap::Span;\n-use utils::{in_macro, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n+use utils::{in_macro, last_line_of_span, match_def_path, opt_def_id, paths, snippet_opt, span_lint, span_lint_and_then};\n \n /// **What it does:** Checks for items annotated with `#[inline(always)]`,\n /// unless the annotated function is empty or simply panics.\n@@ -156,17 +156,19 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for AttrPass {\n                                             }\n                                         }\n                                     }\n-                                    if let Some(mut sugg) = snippet_opt(cx, attr.span) {\n-                                        if sugg.len() > 1 {\n+                                    let line_span = last_line_of_span(cx, attr.span);\n+\n+                                    if let Some(mut sugg) = snippet_opt(cx, line_span) {\n+                                        if sugg.contains(\"#[\") {\n                                             span_lint_and_then(\n                                                 cx,\n                                                 USELESS_ATTRIBUTE,\n-                                                attr.span,\n+                                                line_span,\n                                                 \"useless lint attribute\",\n                                                 |db| {\n-                                                    sugg.insert(1, '!');\n+                                                    sugg = sugg.replacen(\"#[\", \"#![\", 1);\n                                                     db.span_suggestion(\n-                                                        attr.span,\n+                                                        line_span,\n                                                         \"if you just forgot a `!`, use\",\n                                                         sugg,\n                                                     );"}, {"sha": "e89163fb52b9f1b59aa04843eea8972f4f20124f", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81f5969704b57215ac12a78459c8ccfbad9be654/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f5969704b57215ac12a78459c8ccfbad9be654/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=81f5969704b57215ac12a78459c8ccfbad9be654", "patch": "@@ -427,6 +427,14 @@ pub fn snippet_block<'a, 'b, T: LintContext<'b>>(cx: &T, span: Span, default: &'\n     trim_multiline(snip, true)\n }\n \n+/// Returns a new Span that covers the full last line of the given Span\n+pub fn last_line_of_span<'a, T: LintContext<'a>>(cx: &T, span: Span) -> Span {\n+    let file_map_and_line = cx.sess().codemap().lookup_line(span.lo()).unwrap();\n+    let line_no = file_map_and_line.line;\n+    let line_start = &file_map_and_line.fm.lines.clone().into_inner()[line_no];\n+    Span::new(*line_start, span.hi(), span.ctxt())\n+}\n+\n /// Like `snippet_block`, but add braces if the expr is not an `ExprBlock`.\n /// Also takes an `Option<String>` which can be put inside the braces.\n pub fn expr_block<'a, 'b, T: LintContext<'b>>("}, {"sha": "217e886c8bece5e85541785ccc5b2b9c6b244e3f", "filename": "tests/ui/useless_attribute.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81f5969704b57215ac12a78459c8ccfbad9be654/tests%2Fui%2Fuseless_attribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81f5969704b57215ac12a78459c8ccfbad9be654/tests%2Fui%2Fuseless_attribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.rs?ref=81f5969704b57215ac12a78459c8ccfbad9be654", "patch": "@@ -3,6 +3,9 @@\n #![warn(useless_attribute)]\n \n #[allow(dead_code, unused_extern_crates)]\n+#[cfg_attr(feature = \"cargo-clippy\", allow(dead_code, unused_extern_crates))]\n+#[cfg_attr(feature = \"cargo-clippy\",\n+           allow(dead_code, unused_extern_crates))]\n extern crate clippy_lints;\n \n // don't lint on unused_import for `use` items"}, {"sha": "84b81e5610792e42e11f907e39999071cb1a910f", "filename": "tests/ui/useless_attribute.stderr", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81f5969704b57215ac12a78459c8ccfbad9be654/tests%2Fui%2Fuseless_attribute.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81f5969704b57215ac12a78459c8ccfbad9be654/tests%2Fui%2Fuseless_attribute.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fuseless_attribute.stderr?ref=81f5969704b57215ac12a78459c8ccfbad9be654", "patch": "@@ -6,5 +6,11 @@ error: useless lint attribute\n   |\n   = note: `-D useless-attribute` implied by `-D warnings`\n \n-error: aborting due to previous error\n+error: useless lint attribute\n+ --> $DIR/useless_attribute.rs:6:1\n+  |\n+6 | #[cfg_attr(feature = \"cargo-clippy\", allow(dead_code, unused_extern_crates))]\n+  | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: if you just forgot a `!`, use: `#![cfg_attr(feature = \"cargo-clippy\", allow(dead_code, unused_extern_crates))`\n+\n+error: aborting due to 2 previous errors\n "}]}