{"sha": "b6f7eef946d4b9830bef2a4264c4b62f880f032b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2ZjdlZWY5NDZkNGI5ODMwYmVmMmE0MjY0YzRiNjJmODgwZjAzMmI=", "commit": {"author": {"name": "Tunahan Karlibas", "email": "dvt.tnhn.krlbs@gmail.com", "date": "2020-12-10T22:59:05Z"}, "committer": {"name": "Tunahan Karlibas", "email": "dvt.tnhn.krlbs@gmail.com", "date": "2020-12-10T22:59:05Z"}, "message": "Remove unnecessary check and fix local_def_id parameter", "tree": {"sha": "2ff3ae7e52a54c6b025622896a02a8f1906db165", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2ff3ae7e52a54c6b025622896a02a8f1906db165"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6f7eef946d4b9830bef2a4264c4b62f880f032b", "comment_count": 0, "verification": {"verified": false, "reason": "no_user", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEjRc1/OFrtBrFGXTf7MSWjcnUU94FAl/SqEwACgkQ7MSWjcnU\nU96Yhg//YSnIFzJflpXqJi20aJovtdCeXNG1IQdx9dL0jxUQswN+c01X9vmIPESK\nh/Yo8GrRiy/fzAF6iVT0K6var3UU943yFYYaoP1nmMOZIvSl0nmUeCLxF218Y3wZ\nEq7mtDYo8N2FkxhiUFv+iSeRo0ka8ndoY54VRgnIknc1gObblphtju+SDfvad/EO\nlDHkTovCct4iY0Le/f3Gcw/txzVviAGvw0R0RZ2VorsM7d6QcvrZvfUSn37WTERY\nedMF7U0tzTKMCVvw4daFzOJZ92W7+WCtDOzhNVp3ogQmaFeY87GH5uAJp9nHccym\nadSlwqaPVOHh97w6jBLzo9uCTBAvcsFTDdw5naBHslV753h6cDBLx8hh/cWc51sT\noTSfHjO91GOcSnyNch03Qk+rM9w/grqhARwaPeZvJQCnOu/eP1WEH6FCon/dPIQ9\n66n0K5cTbRenao9w88zzLq05ehGN5d8D6p7e9qUNcf/3tC4Tk9mUgzIgb/i3apj+\nJRU5oLP2dMP2U9DZz/am1uXpKa5VAvRj1nkWfASsvL1cogu/Ud2/E8mKXCFrPpqr\nNyZ6w9ViJwRRPI/J0Fbbb2kFp+Hj7s2Iy7gN9TpZHBI1wG2omkHc26SPZnASBH77\nBqWJpgTkQMs1aaJHYaJHKpJ0OlxvaJE0zU6f/VnU1JMwe2+d5Qo=\n=OKHi\n-----END PGP SIGNATURE-----", "payload": "tree 2ff3ae7e52a54c6b025622896a02a8f1906db165\nparent de1cd4b36d57b33f4217a46c0c52fbe1eb4530a1\nauthor Tunahan Karlibas <dvt.tnhn.krlbs@gmail.com> 1607641145 +0300\ncommitter Tunahan Karlibas <dvt.tnhn.krlbs@gmail.com> 1607641145 +0300\n\nRemove unnecessary check and fix local_def_id parameter\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6f7eef946d4b9830bef2a4264c4b62f880f032b", "html_url": "https://github.com/rust-lang/rust/commit/b6f7eef946d4b9830bef2a4264c4b62f880f032b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6f7eef946d4b9830bef2a4264c4b62f880f032b/comments", "author": null, "committer": null, "parents": [{"sha": "de1cd4b36d57b33f4217a46c0c52fbe1eb4530a1", "url": "https://api.github.com/repos/rust-lang/rust/commits/de1cd4b36d57b33f4217a46c0c52fbe1eb4530a1", "html_url": "https://github.com/rust-lang/rust/commit/de1cd4b36d57b33f4217a46c0c52fbe1eb4530a1"}], "stats": {"total": 15, "additions": 4, "deletions": 11}, "files": [{"sha": "058a5ced2abd34a4946a32454ceb2742fa44922b", "filename": "compiler/rustc_mir/src/const_eval/eval_queries.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6f7eef946d4b9830bef2a4264c4b62f880f032b/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6f7eef946d4b9830bef2a4264c4b62f880f032b/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fconst_eval%2Feval_queries.rs?ref=b6f7eef946d4b9830bef2a4264c4b62f880f032b", "patch": "@@ -7,7 +7,7 @@ use crate::interpret::{\n };\n \n use rustc_errors::ErrorReported;\n-use rustc_hir::def::DefKind;\n+use rustc_hir::{ConstContext, def::DefKind};\n use rustc_middle::mir;\n use rustc_middle::mir::interpret::ErrorHandled;\n use rustc_middle::traits::Reveal;\n@@ -30,14 +30,14 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     body: &'mir mir::Body<'tcx>,\n ) -> InterpResult<'tcx, MPlaceTy<'tcx>> {\n     debug!(\"eval_body_using_ecx: {:?}, {:?}\", cid, ecx.param_env);\n+    let tcx = *ecx.tcx;\n     assert!(\n         cid.promoted.is_some()\n             || matches!(\n-                ecx.tcx.hir().body_const_context(def_id),\n+                ecx.tcx.hir().body_const_context(cid.instance.def_id().expect_local()),\n                 Some(ConstContext::Const | ConstContext::Static(_))\n             )\n     );\n-    let tcx = *ecx.tcx;\n     let layout = ecx.layout_of(body.return_ty().subst(tcx, cid.instance.substs))?;\n     assert!(!layout.is_unsized());\n     let ret = ecx.allocate(layout, MemoryKind::Stack);\n@@ -47,14 +47,7 @@ fn eval_body_using_ecx<'mir, 'tcx>(\n     let prom = cid.promoted.map_or(String::new(), |p| format!(\"::promoted[{:?}]\", p));\n     trace!(\"eval_body_using_ecx: pushing stack frame for global: {}{}\", name, prom);\n \n-    // Assert all args (if any) are zero-sized types; `eval_body_using_ecx` doesn't\n-    // make sense if the body is expecting nontrivial arguments.\n-    // (The alternative would be to use `eval_fn_call` with an args slice.)\n-    for arg in body.args_iter() {\n-        let decl = body.local_decls.get(arg).expect(\"arg missing from local_decls\");\n-        let layout = ecx.layout_of(decl.ty.subst(tcx, cid.instance.substs))?;\n-        assert!(layout.is_zst())\n-    }\n+\n \n     ecx.push_stack_frame(\n         cid.instance,"}]}