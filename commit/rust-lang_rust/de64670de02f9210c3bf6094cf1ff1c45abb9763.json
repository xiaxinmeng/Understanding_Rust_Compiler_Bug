{"sha": "de64670de02f9210c3bf6094cf1ff1c45abb9763", "node_id": "MDY6Q29tbWl0NzI0NzEyOmRlNjQ2NzBkZTAyZjkyMTBjM2JmNjA5NGNmMWZmMWM0NWFiYjk3NjM=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-04-29T04:01:17Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2016-04-29T04:01:17Z"}, "message": "Fixed some clippy warnings", "tree": {"sha": "deb8a708dc01cb66fecaf51f31bea1847ea16f7f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/deb8a708dc01cb66fecaf51f31bea1847ea16f7f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/de64670de02f9210c3bf6094cf1ff1c45abb9763", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/de64670de02f9210c3bf6094cf1ff1c45abb9763", "html_url": "https://github.com/rust-lang/rust/commit/de64670de02f9210c3bf6094cf1ff1c45abb9763", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/de64670de02f9210c3bf6094cf1ff1c45abb9763/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1531bd675c1074c41616826e57b99eb79ff6eb9e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1531bd675c1074c41616826e57b99eb79ff6eb9e", "html_url": "https://github.com/rust-lang/rust/commit/1531bd675c1074c41616826e57b99eb79ff6eb9e"}], "stats": {"total": 18, "additions": 8, "deletions": 10}, "files": [{"sha": "c0e01c5029e15b3fc5fbef1f7d51dd010ea74a28", "filename": "src/interpreter.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/de64670de02f9210c3bf6094cf1ff1c45abb9763/src%2Finterpreter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64670de02f9210c3bf6094cf1ff1c45abb9763/src%2Finterpreter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finterpreter.rs?ref=de64670de02f9210c3bf6094cf1ff1c45abb9763", "patch": "@@ -169,8 +169,8 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                 for stmt in &block_data.statements {\n                     self.log(0, || print!(\"{:?}\", stmt));\n-                    let mir::StatementKind::Assign(ref lvalue, ref rvalue) = stmt.kind;\n-                    let result = self.eval_assignment(lvalue, rvalue);\n+                    let mir::StatementKind::Assign(ref l_value, ref r_value) = stmt.kind;\n+                    let result = self.eval_assignment(l_value, r_value);\n                     try!(self.maybe_report(stmt.span, result));\n                 }\n \n@@ -830,7 +830,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n \n                     Index(ref operand) => {\n                         let elem_size = match base_ty.sty {\n-                            ty::TyArray(elem_ty, _) => self.type_size(elem_ty),\n+                            ty::TyArray(elem_ty, _) |\n                             ty::TySlice(elem_ty) => self.type_size(elem_ty),\n                             _ => panic!(\"indexing expected an array or slice, got {:?}\", base_ty),\n                         };\n@@ -1109,11 +1109,9 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n         let vtable = selection.map(|predicate| {\n             fulfill_cx.register_predicate_obligation(&infcx, predicate);\n         });\n-        let vtable = infer::drain_fulfillment_cx_or_panic(\n+        infer::drain_fulfillment_cx_or_panic(\n             DUMMY_SP, &infcx, &mut fulfill_cx, &vtable\n-        );\n-\n-        vtable\n+        )\n     }\n \n     /// Trait method, which has to be resolved to an impl method.\n@@ -1166,7 +1164,7 @@ impl<'a, 'tcx: 'a, 'arena> Interpreter<'a, 'tcx, 'arena> {\n     }\n }\n \n-fn pointee_type<'tcx>(ptr_ty: ty::Ty<'tcx>) -> Option<ty::Ty<'tcx>> {\n+fn pointee_type(ptr_ty: ty::Ty) -> Option<ty::Ty> {\n     match ptr_ty.sty {\n         ty::TyRef(_, ty::TypeAndMut { ty, .. }) |\n         ty::TyRawPtr(ty::TypeAndMut { ty, .. }) |"}, {"sha": "285c3554b647b2af279bdf8cd81e0f25542eb7ff", "filename": "src/memory.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/de64670de02f9210c3bf6094cf1ff1c45abb9763/src%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/de64670de02f9210c3bf6094cf1ff1c45abb9763/src%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmemory.rs?ref=de64670de02f9210c3bf6094cf1ff1c45abb9763", "patch": "@@ -47,7 +47,7 @@ pub struct FieldRepr {\n impl Repr {\n     pub fn size(&self) -> usize {\n         match *self {\n-            Repr::Primitive { size } => size,\n+            Repr::Primitive { size } |\n             Repr::Aggregate { size, .. } => size,\n             Repr::Array { elem_size, length } => elem_size * length,\n         }\n@@ -406,7 +406,7 @@ impl Memory {\n     fn clear_relocations(&mut self, ptr: Pointer, size: usize) -> EvalResult<()> {\n         // Find all relocations overlapping the given range.\n         let keys: Vec<_> = try!(self.relocations(ptr, size)).map(|(&k, _)| k).collect();\n-        if keys.len() == 0 { return Ok(()); }\n+        if keys.is_empty() { return Ok(()); }\n \n         // Find the start and end of the given range and its outermost relocations.\n         let start = ptr.offset;"}]}