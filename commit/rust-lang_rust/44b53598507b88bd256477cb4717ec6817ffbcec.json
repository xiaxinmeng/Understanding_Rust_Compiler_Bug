{"sha": "44b53598507b88bd256477cb4717ec6817ffbcec", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ0YjUzNTk4NTA3Yjg4YmQyNTY0NzdjYjQ3MTdlYzY4MTdmZmJjZWM=", "commit": {"author": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T08:25:23Z"}, "committer": {"name": "kennytm", "email": "kennytm@gmail.com", "date": "2018-04-27T08:25:23Z"}, "message": "Rollup merge of #49894 - Zoxc:sync-internedstring, r=michaelwoerister\n\nRename InternedString to LocalInternedString and introduce a new thread-safe InternedString\n\nThis is an allocation-free alternative to https://github.com/rust-lang/rust/pull/46972.", "tree": {"sha": "2fd26639f872cb9d7947e200d54790d6ad3c8e47", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2fd26639f872cb9d7947e200d54790d6ad3c8e47"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/44b53598507b88bd256477cb4717ec6817ffbcec", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEZ1R8CLMp8f2GxWoQ/vbIBR0OATwFAlri3nMACgkQ/vbIBR0O\nATzgtg//QHJ0eKjT0EyG/1wHTXXDWWO65d06qKl3MH+ETC83IR3UWVVsifuhb4ip\nI9NIvJ/56NDIrJFtbunf84lA778ghUPJZjVkJQWS0XC0wpcQiR8INIkThh5og3hm\nNMAMTzZ2Ic//NI3YZBHr8Wlx4zpu5iGuiZN1+YLmZuohiknRehZ4UztZPF2SGNQj\nzrkWdcV+Tgc2Wp4M8BhGgnZ9YUm5trMOzuEdfwqnWsAPXLd1q7KRygPioGEZxHYT\nPu/NndY/zGL6UfWd183m0j2W8cF/UWNmGRel+FRorTsXpideTutTbv8bb8DyVYRU\nNKG2ryUvpk6rHJlq4Zqfzv0NAo/9lRME6Uj9IWRlgl4sEsL1sOPGEhB2w5yn2ZS1\nWDi39sGZkiKfT1HdfbPgNlghCuHqC0nSWPylnHOSJQ43d0tfrJFsaDIeiTaP7RUV\nzY53+6Oudh/76bKpBJaj4poLbCB86SfeqrKsxsHxm1S8/ec8BMgwHgSvPN4cQHXN\nliHntzBV6lr5m+/r2qhdAX1BWbRDbleqvdnvWdjdYpX/Y+i/oXnOwr6lRqcsS5eC\nSG0ohSpW2fyfqJnqGTzW0X3Ru8Om0SmiOfXsSheTDbTIEfK0oN8WJVy1ZVk9NDr/\n7B27czcghuSoHSPF8LJ6Edn7uziWnMF1Ew/976LlJDEkwH/nSpA=\n=Zn2x\n-----END PGP SIGNATURE-----", "payload": "tree 2fd26639f872cb9d7947e200d54790d6ad3c8e47\nparent f1a4c10fb444f7af5fbbfcd3055cef68a1578d72\nparent 4d52751d12429f4508f9a3c537521ba1113fabf5\nauthor kennytm <kennytm@gmail.com> 1524817523 +0800\ncommitter kennytm <kennytm@gmail.com> 1524817523 +0800\n\nRollup merge of #49894 - Zoxc:sync-internedstring, r=michaelwoerister\n\nRename InternedString to LocalInternedString and introduce a new thread-safe InternedString\n\nThis is an allocation-free alternative to https://github.com/rust-lang/rust/pull/46972.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/44b53598507b88bd256477cb4717ec6817ffbcec", "html_url": "https://github.com/rust-lang/rust/commit/44b53598507b88bd256477cb4717ec6817ffbcec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/44b53598507b88bd256477cb4717ec6817ffbcec/comments", "author": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "kennytm", "id": 103023, "node_id": "MDQ6VXNlcjEwMzAyMw==", "avatar_url": "https://avatars.githubusercontent.com/u/103023?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kennytm", "html_url": "https://github.com/kennytm", "followers_url": "https://api.github.com/users/kennytm/followers", "following_url": "https://api.github.com/users/kennytm/following{/other_user}", "gists_url": "https://api.github.com/users/kennytm/gists{/gist_id}", "starred_url": "https://api.github.com/users/kennytm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kennytm/subscriptions", "organizations_url": "https://api.github.com/users/kennytm/orgs", "repos_url": "https://api.github.com/users/kennytm/repos", "events_url": "https://api.github.com/users/kennytm/events{/privacy}", "received_events_url": "https://api.github.com/users/kennytm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f1a4c10fb444f7af5fbbfcd3055cef68a1578d72", "url": "https://api.github.com/repos/rust-lang/rust/commits/f1a4c10fb444f7af5fbbfcd3055cef68a1578d72", "html_url": "https://github.com/rust-lang/rust/commit/f1a4c10fb444f7af5fbbfcd3055cef68a1578d72"}, {"sha": "4d52751d12429f4508f9a3c537521ba1113fabf5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4d52751d12429f4508f9a3c537521ba1113fabf5", "html_url": "https://github.com/rust-lang/rust/commit/4d52751d12429f4508f9a3c537521ba1113fabf5"}], "stats": {"total": 456, "additions": 307, "deletions": 149}, "files": [{"sha": "f5d590f25c80f19e2167ccd8f8cd77be326393bb", "filename": "src/librustc/hir/lowering.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Flowering.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Flowering.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Flowering.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -655,7 +655,7 @@ impl<'a> LoweringContext<'a> {\n                 self.resolver.definitions().create_def_with_parent(\n                     parent_id.index,\n                     def_node_id,\n-                    DefPathData::LifetimeDef(str_name),\n+                    DefPathData::LifetimeDef(str_name.as_interned_str()),\n                     DefIndexAddressSpace::High,\n                     Mark::root(),\n                     span,\n@@ -1302,7 +1302,7 @@ impl<'a> LoweringContext<'a> {\n                     self.context.resolver.definitions().create_def_with_parent(\n                         self.parent,\n                         def_node_id,\n-                        DefPathData::LifetimeDef(name.name().as_str()),\n+                        DefPathData::LifetimeDef(name.name().as_interned_str()),\n                         DefIndexAddressSpace::High,\n                         Mark::root(),\n                         lifetime.span,"}, {"sha": "ebd8e6235825cd4c67d2b18637a2943df72e9c75", "filename": "src/librustc/hir/map/def_collector.rs", "status": "modified", "additions": 18, "deletions": 15, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdef_collector.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -107,18 +107,18 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         // information we encapsulate into\n         let def_data = match i.node {\n             ItemKind::Impl(..) => DefPathData::Impl,\n-            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_str()),\n+            ItemKind::Trait(..) => DefPathData::Trait(i.ident.name.as_interned_str()),\n             ItemKind::Enum(..) | ItemKind::Struct(..) | ItemKind::Union(..) |\n             ItemKind::TraitAlias(..) |\n             ItemKind::ExternCrate(..) | ItemKind::ForeignMod(..) | ItemKind::Ty(..) =>\n-                DefPathData::TypeNs(i.ident.name.as_str()),\n+                DefPathData::TypeNs(i.ident.name.as_interned_str()),\n             ItemKind::Mod(..) if i.ident == keywords::Invalid.ident() => {\n                 return visit::walk_item(self, i);\n             }\n-            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_str()),\n+            ItemKind::Mod(..) => DefPathData::Module(i.ident.name.as_interned_str()),\n             ItemKind::Static(..) | ItemKind::Const(..) | ItemKind::Fn(..) =>\n-                DefPathData::ValueNs(i.ident.name.as_str()),\n-            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_str()),\n+                DefPathData::ValueNs(i.ident.name.as_interned_str()),\n+            ItemKind::MacroDef(..) => DefPathData::MacroDef(i.ident.name.as_interned_str()),\n             ItemKind::Mac(..) => return self.visit_macro_invoc(i.id, false),\n             ItemKind::GlobalAsm(..) => DefPathData::Misc,\n             ItemKind::Use(..) => {\n@@ -133,15 +133,16 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                     for v in &enum_definition.variants {\n                         let variant_def_index =\n                             this.create_def(v.node.data.id(),\n-                                            DefPathData::EnumVariant(v.node.ident.name.as_str()),\n+                                            DefPathData::EnumVariant(v.node.ident\n+                                                                      .name.as_interned_str()),\n                                             REGULAR_SPACE,\n                                             v.span);\n                         this.with_parent(variant_def_index, |this| {\n                             for (index, field) in v.node.data.fields().iter().enumerate() {\n                                 let name = field.ident.map(|ident| ident.name)\n                                     .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n                                 this.create_def(field.id,\n-                                                DefPathData::Field(name.as_str()),\n+                                                DefPathData::Field(name.as_interned_str()),\n                                                 REGULAR_SPACE,\n                                                 field.span);\n                             }\n@@ -165,7 +166,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n                         let name = field.ident.map(|ident| ident.name)\n                             .unwrap_or_else(|| Symbol::intern(&index.to_string()));\n                         this.create_def(field.id,\n-                                        DefPathData::Field(name.as_str()),\n+                                        DefPathData::Field(name.as_interned_str()),\n                                         REGULAR_SPACE,\n                                         field.span);\n                     }\n@@ -187,7 +188,7 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n         }\n \n         let def = self.create_def(foreign_item.id,\n-                                  DefPathData::ValueNs(foreign_item.ident.name.as_str()),\n+                                  DefPathData::ValueNs(foreign_item.ident.name.as_interned_str()),\n                                   REGULAR_SPACE,\n                                   foreign_item.span);\n \n@@ -201,15 +202,15 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n             GenericParam::Lifetime(ref lifetime_def) => {\n                 self.create_def(\n                     lifetime_def.lifetime.id,\n-                    DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_str()),\n+                    DefPathData::LifetimeDef(lifetime_def.lifetime.ident.name.as_interned_str()),\n                     REGULAR_SPACE,\n                     lifetime_def.lifetime.ident.span\n                 );\n             }\n             GenericParam::Type(ref ty_param) => {\n                 self.create_def(\n                     ty_param.id,\n-                    DefPathData::TypeParam(ty_param.ident.name.as_str()),\n+                    DefPathData::TypeParam(ty_param.ident.name.as_interned_str()),\n                     REGULAR_SPACE,\n                     ty_param.ident.span\n                 );\n@@ -222,8 +223,10 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_trait_item(&mut self, ti: &'a TraitItem) {\n         let def_data = match ti.node {\n             TraitItemKind::Method(..) | TraitItemKind::Const(..) =>\n-                DefPathData::ValueNs(ti.ident.name.as_str()),\n-            TraitItemKind::Type(..) => DefPathData::AssocTypeInTrait(ti.ident.name.as_str()),\n+                DefPathData::ValueNs(ti.ident.name.as_interned_str()),\n+            TraitItemKind::Type(..) => {\n+                DefPathData::AssocTypeInTrait(ti.ident.name.as_interned_str())\n+            },\n             TraitItemKind::Macro(..) => return self.visit_macro_invoc(ti.id, false),\n         };\n \n@@ -240,8 +243,8 @@ impl<'a> visit::Visitor<'a> for DefCollector<'a> {\n     fn visit_impl_item(&mut self, ii: &'a ImplItem) {\n         let def_data = match ii.node {\n             ImplItemKind::Method(..) | ImplItemKind::Const(..) =>\n-                DefPathData::ValueNs(ii.ident.name.as_str()),\n-            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_str()),\n+                DefPathData::ValueNs(ii.ident.name.as_interned_str()),\n+            ImplItemKind::Type(..) => DefPathData::AssocTypeInImpl(ii.ident.name.as_interned_str()),\n             ImplItemKind::Macro(..) => return self.visit_macro_invoc(ii.id, false),\n         };\n "}, {"sha": "616dc22486d92a4a4ecb4eda686383cb659d89f3", "filename": "src/librustc/hir/map/definitions.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fdefinitions.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -701,7 +701,7 @@ impl DefPathData {\n             Typeof => \"{{typeof}}\",\n         };\n \n-        Symbol::intern(s).as_str()\n+        Symbol::intern(s).as_interned_str()\n     }\n \n     pub fn to_string(&self) -> String {\n@@ -731,7 +731,7 @@ macro_rules! define_global_metadata_kind {\n                     definitions.create_def_with_parent(\n                         CRATE_DEF_INDEX,\n                         ast::DUMMY_NODE_ID,\n-                        DefPathData::GlobalMetaData(instance.name().as_str()),\n+                        DefPathData::GlobalMetaData(instance.name().as_interned_str()),\n                         GLOBAL_MD_ADDRESS_SPACE,\n                         Mark::root(),\n                         DUMMY_SP\n@@ -746,7 +746,7 @@ macro_rules! define_global_metadata_kind {\n                 let def_key = DefKey {\n                     parent: Some(CRATE_DEF_INDEX),\n                     disambiguated_data: DisambiguatedDefPathData {\n-                        data: DefPathData::GlobalMetaData(self.name().as_str()),\n+                        data: DefPathData::GlobalMetaData(self.name().as_interned_str()),\n                         disambiguator: 0,\n                     }\n                 };"}, {"sha": "c1e86473996d0f82bb3416954ec4e3634e95936f", "filename": "src/librustc/ich/impls_syntax.rs", "status": "modified", "additions": 24, "deletions": 4, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fich%2Fimpls_syntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fich%2Fimpls_syntax.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -19,7 +19,7 @@ use std::mem;\n use syntax::ast;\n use syntax::feature_gate;\n use syntax::parse::token;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::{InternedString, LocalInternedString};\n use syntax::tokenstream;\n use syntax_pos::FileMap;\n \n@@ -34,8 +34,7 @@ impl<'a> HashStable<StableHashingContext<'a>> for InternedString {\n     fn hash_stable<W: StableHasherResult>(&self,\n                                           hcx: &mut StableHashingContext<'a>,\n                                           hasher: &mut StableHasher<W>) {\n-        let s: &str = &**self;\n-        s.hash_stable(hcx, hasher);\n+        self.with(|s| s.hash_stable(hcx, hasher))\n     }\n }\n \n@@ -50,6 +49,27 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for InternedString {\n     }\n }\n \n+impl<'a> HashStable<StableHashingContext<'a>> for LocalInternedString {\n+    #[inline]\n+    fn hash_stable<W: StableHasherResult>(&self,\n+                                          hcx: &mut StableHashingContext<'a>,\n+                                          hasher: &mut StableHasher<W>) {\n+        let s: &str = &**self;\n+        s.hash_stable(hcx, hasher);\n+    }\n+}\n+\n+impl<'a> ToStableHashKey<StableHashingContext<'a>> for LocalInternedString {\n+    type KeyType = LocalInternedString;\n+\n+    #[inline]\n+    fn to_stable_hash_key(&self,\n+                          _: &StableHashingContext<'a>)\n+                          -> LocalInternedString {\n+        self.clone()\n+    }\n+}\n+\n impl<'a> HashStable<StableHashingContext<'a>> for ast::Name {\n     #[inline]\n     fn hash_stable<W: StableHasherResult>(&self,\n@@ -66,7 +86,7 @@ impl<'a> ToStableHashKey<StableHashingContext<'a>> for ast::Name {\n     fn to_stable_hash_key(&self,\n                           _: &StableHashingContext<'a>)\n                           -> InternedString {\n-        self.as_str()\n+        self.as_interned_str()\n     }\n }\n "}, {"sha": "c2b1d7f09149e2c8a3dec39a4b2c3edb30237cb8", "filename": "src/librustc/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flib.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -58,6 +58,7 @@\n #![feature(nonzero)]\n #![feature(proc_macro_internals)]\n #![feature(quote)]\n+#![feature(optin_builtin_traits)]\n #![feature(refcell_replace_swap)]\n #![feature(rustc_diagnostic_macros)]\n #![feature(slice_patterns)]"}, {"sha": "d1fd70ae02d6987b4ec5170570259079822a9367", "filename": "src/librustc/traits/on_unimplemented.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fon_unimplemented.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -18,10 +18,10 @@ use util::nodemap::FxHashMap;\n use syntax::ast::{MetaItem, NestedMetaItem};\n use syntax::attr;\n use syntax_pos::Span;\n-use syntax_pos::symbol::InternedString;\n+use syntax_pos::symbol::LocalInternedString;\n \n #[derive(Clone, Debug)]\n-pub struct OnUnimplementedFormatString(InternedString);\n+pub struct OnUnimplementedFormatString(LocalInternedString);\n \n #[derive(Debug)]\n pub struct OnUnimplementedDirective {\n@@ -225,7 +225,7 @@ impl<'a, 'gcx, 'tcx> OnUnimplementedDirective {\n impl<'a, 'gcx, 'tcx> OnUnimplementedFormatString {\n     pub fn try_parse(tcx: TyCtxt<'a, 'gcx, 'tcx>,\n                      trait_def_id: DefId,\n-                     from: InternedString,\n+                     from: LocalInternedString,\n                      err_sp: Span)\n                      -> Result<Self, ErrorReported>\n     {"}, {"sha": "d38c003ef8aeb6f4992af1cfe5ac1aaf55c2f5b1", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -2471,7 +2471,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     }\n \n     pub fn mk_self_type(self) -> Ty<'tcx> {\n-        self.mk_param(0, keywords::SelfType.name().as_str())\n+        self.mk_param(0, keywords::SelfType.name().as_interned_str())\n     }\n \n     pub fn mk_param_from_def(self, def: &ty::TypeParameterDef) -> Ty<'tcx> {"}, {"sha": "752b7f69a6a7ffc41d14c260d33f9eb6cf218db8", "filename": "src/librustc/ty/item_path.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fitem_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fitem_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fitem_path.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -14,7 +14,7 @@ use ty::{self, Ty, TyCtxt};\n use middle::cstore::{ExternCrate, ExternCrateSource};\n use syntax::ast;\n use syntax::symbol::Symbol;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n \n use std::cell::Cell;\n \n@@ -131,7 +131,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n     {\n         let visible_parent_map = self.visible_parent_map(LOCAL_CRATE);\n \n-        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<InternedString>::new());\n+        let (mut cur_def, mut cur_path) = (external_def_id, Vec::<LocalInternedString>::new());\n         loop {\n             // If `cur_def` is a direct or injected extern crate, push the path to the crate\n             // followed by the path to the item within the crate and return.\n@@ -168,8 +168,9 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             }\n \n             let data = cur_def_key.disambiguated_data.data;\n-            let symbol =\n-                data.get_opt_name().unwrap_or_else(|| Symbol::intern(\"<unnamed>\").as_str());\n+            let symbol = data.get_opt_name().map(|n| n.as_str()).unwrap_or_else(|| {\n+                Symbol::intern(\"<unnamed>\").as_str()\n+            });\n             cur_path.push(symbol);\n \n             match visible_parent_map.get(&cur_def) {\n@@ -221,7 +222,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n             data @ DefPathData::GlobalMetaData(..) => {\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();\n                 self.push_item_path(buffer, parent_def_id);\n-                buffer.push(&data.as_interned_str());\n+                buffer.push(&data.as_interned_str().as_symbol().as_str());\n             }\n             DefPathData::StructCtor => { // present `X` instead of `X::{{constructor}}`\n                 let parent_def_id = self.parent_def_id(def_id).unwrap();"}, {"sha": "d3d06248792400678bd2112a6fc32e1e0c06c7ce", "filename": "src/librustc/ty/maps/values.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmaps%2Fvalues.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -37,7 +37,7 @@ impl<'tcx> Value<'tcx> for Ty<'tcx> {\n \n impl<'tcx> Value<'tcx> for ty::SymbolName {\n     fn from_cycle_error<'a>(_: TyCtxt<'a, 'tcx, 'tcx>) -> Self {\n-        ty::SymbolName { name: Symbol::intern(\"<error>\").as_str() }\n+        ty::SymbolName { name: Symbol::intern(\"<error>\").as_interned_str() }\n     }\n }\n "}, {"sha": "19532bc80aa0d12b1a72cb50a011b5b52685b18c", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -51,7 +51,7 @@ use std::mem;\n use syntax::ast::{self, DUMMY_NODE_ID, Name, Ident, NodeId};\n use syntax::attr;\n use syntax::ext::hygiene::Mark;\n-use syntax::symbol::{Symbol, InternedString};\n+use syntax::symbol::{Symbol, LocalInternedString, InternedString};\n use syntax_pos::{DUMMY_SP, Span};\n \n use rustc_data_structures::accumulate_vec::IntoIter as AccIntoIter;\n@@ -2463,7 +2463,7 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n \n     pub fn item_name(self, id: DefId) -> InternedString {\n         if id.index == CRATE_DEF_INDEX {\n-            self.original_crate_name(id.krate).as_str()\n+            self.original_crate_name(id.krate).as_interned_str()\n         } else {\n             let def_key = self.def_key(id);\n             // The name of a StructCtor is that of its struct parent.\n@@ -2820,15 +2820,13 @@ impl_stable_hash_for!(struct self::SymbolName {\n impl SymbolName {\n     pub fn new(name: &str) -> SymbolName {\n         SymbolName {\n-            name: Symbol::intern(name).as_str()\n+            name: Symbol::intern(name).as_interned_str()\n         }\n     }\n-}\n-\n-impl Deref for SymbolName {\n-    type Target = str;\n \n-    fn deref(&self) -> &str { &self.name }\n+    pub fn as_str(&self) -> LocalInternedString {\n+        self.name.as_str()\n+    }\n }\n \n impl fmt::Display for SymbolName {"}, {"sha": "2220f2b0aaf3a765e53aa74fb684920f8bd50a00", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -864,7 +864,7 @@ impl<'a, 'gcx, 'tcx> ParamTy {\n     }\n \n     pub fn for_self() -> ParamTy {\n-        ParamTy::new(0, keywords::SelfType.name().as_str())\n+        ParamTy::new(0, keywords::SelfType.name().as_interned_str())\n     }\n \n     pub fn for_def(def: &ty::TypeParameterDef) -> ParamTy {"}, {"sha": "b777f513e6df072425698918e36935642be51525", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -462,7 +462,7 @@ impl PrintContext {\n                 0 => Symbol::intern(\"'r\"),\n                 1 => Symbol::intern(\"'s\"),\n                 i => Symbol::intern(&format!(\"'t{}\", i-2)),\n-            }.as_str()\n+            }.as_interned_str()\n         }\n \n         // Replace any anonymous late-bound regions with named"}, {"sha": "d2ee3d8743c2cd74886d8e3b3a5d18098c5d22e7", "filename": "src/librustc_driver/test.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_driver%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_driver%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Ftest.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -303,11 +303,11 @@ impl<'a, 'gcx, 'tcx> Env<'a, 'gcx, 'tcx> {\n \n     pub fn t_param(&self, index: u32) -> Ty<'tcx> {\n         let name = format!(\"T{}\", index);\n-        self.infcx.tcx.mk_param(index, Symbol::intern(&name).as_str())\n+        self.infcx.tcx.mk_param(index, Symbol::intern(&name).as_interned_str())\n     }\n \n     pub fn re_early_bound(&self, index: u32, name: &'static str) -> ty::Region<'tcx> {\n-        let name = Symbol::intern(name).as_str();\n+        let name = Symbol::intern(name).as_interned_str();\n         self.infcx.tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: self.infcx.tcx.hir.local_def_id(ast::CRATE_NODE_ID),\n             index,"}, {"sha": "6906dacfc5ef69af281e585b34bce8d0c50aa994", "filename": "src/librustc_incremental/assert_module_sources.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_incremental%2Fassert_module_sources.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fassert_module_sources.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -74,7 +74,7 @@ impl<'a, 'tcx> AssertModuleSource<'a, 'tcx> {\n \n         let mname = self.field(attr, MODULE);\n         let mangled_cgu_name = CodegenUnit::mangle_name(&mname.as_str());\n-        let mangled_cgu_name = Symbol::intern(&mangled_cgu_name).as_str();\n+        let mangled_cgu_name = Symbol::intern(&mangled_cgu_name).as_interned_str();\n \n         let dep_node = DepNode::new(self.tcx,\n                                     DepConstructor::CompileCodegenUnit(mangled_cgu_name));"}, {"sha": "91f8beeaafb00432242b80bae093a50cb3d29127", "filename": "src/librustc_metadata/cstore_impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_metadata%2Fcstore_impl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_metadata%2Fcstore_impl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fcstore_impl.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -535,7 +535,7 @@ impl CrateStore for cstore::CStore {\n             .insert(local_span, (name.to_string(), data.get_span(id.index, sess)));\n \n         LoadedMacro::MacroDef(ast::Item {\n-            ident: ast::Ident::from_str(&name),\n+            ident: ast::Ident::from_str(&name.as_str()),\n             id: ast::DUMMY_NODE_ID,\n             span: local_span,\n             attrs: attrs.iter().cloned().collect(),"}, {"sha": "388bf1fb99a34ecd35fa11bc0d4158d6bd5ed2e5", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -40,7 +40,7 @@ use rustc_serialize::{Decodable, Decoder, SpecializedDecoder, opaque};\n use syntax::attr;\n use syntax::ast::{self, Ident};\n use syntax::codemap;\n-use syntax::symbol::{InternedString, Symbol};\n+use syntax::symbol::InternedString;\n use syntax::ext::base::MacroKind;\n use syntax_pos::{self, Span, BytePos, Pos, DUMMY_SP, NO_EXPANSION};\n \n@@ -537,12 +537,12 @@ impl<'a, 'tcx> CrateMetadata {\n \n         ty::VariantDef {\n             did: self.local_def_id(data.struct_ctor.unwrap_or(index)),\n-            name: Symbol::intern(&self.item_name(index)),\n+            name: self.item_name(index).as_symbol(),\n             fields: item.children.decode(self).map(|index| {\n                 let f = self.entry(index);\n                 ty::FieldDef {\n                     did: self.local_def_id(index),\n-                    name: Symbol::intern(&self.item_name(index)),\n+                    name: self.item_name(index).as_symbol(),\n                     vis: f.visibility.decode(self)\n                 }\n             }).collect(),\n@@ -730,7 +730,7 @@ impl<'a, 'tcx> CrateMetadata {\n                             if let Some(def) = self.get_def(child_index) {\n                                 callback(def::Export {\n                                     def,\n-                                    ident: Ident::from_str(&self.item_name(child_index)),\n+                                    ident: Ident::from_interned_str(self.item_name(child_index)),\n                                     vis: self.get_visibility(child_index),\n                                     span: self.entry(child_index).span.decode((self, sess)),\n                                     is_import: false,\n@@ -748,7 +748,7 @@ impl<'a, 'tcx> CrateMetadata {\n                 let span = child.span.decode((self, sess));\n                 if let (Some(def), Some(name)) =\n                     (self.get_def(child_index), def_key.disambiguated_data.data.get_opt_name()) {\n-                    let ident = Ident::from_str(&name);\n+                    let ident = Ident::from_interned_str(name);\n                     let vis = self.get_visibility(child_index);\n                     let is_import = false;\n                     callback(def::Export { def, ident, vis, span, is_import });\n@@ -847,7 +847,7 @@ impl<'a, 'tcx> CrateMetadata {\n         };\n \n         ty::AssociatedItem {\n-            name: Symbol::intern(&name),\n+            name: name.as_symbol(),\n             kind,\n             vis: item.visibility.decode(self),\n             defaultness: container.defaultness(),\n@@ -914,7 +914,7 @@ impl<'a, 'tcx> CrateMetadata {\n         self.entry(id)\n             .children\n             .decode(self)\n-            .map(|index| Symbol::intern(&self.item_name(index)))\n+            .map(|index| self.item_name(index).as_symbol())\n             .collect()\n     }\n \n@@ -1106,7 +1106,7 @@ impl<'a, 'tcx> CrateMetadata {\n             DefKey {\n                 parent: Some(CRATE_DEF_INDEX),\n                 disambiguated_data: DisambiguatedDefPathData {\n-                    data: DefPathData::MacroDef(name.as_str()),\n+                    data: DefPathData::MacroDef(name.as_interned_str()),\n                     disambiguator: 0,\n                 }\n             }"}, {"sha": "562f890b4c0fb9704314dc5bc4f2f2aa8b8bcc4c", "filename": "src/librustc_mir/build/expr/into.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fexpr%2Finto.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -220,7 +220,7 @@ impl<'a, 'gcx, 'tcx> Builder<'a, 'gcx, 'tcx> {\n                         let f = ty.fn_sig(this.hir.tcx());\n                         if f.abi() == Abi::RustIntrinsic ||\n                            f.abi() == Abi::PlatformIntrinsic {\n-                            Some(this.hir.tcx().item_name(def_id))\n+                            Some(this.hir.tcx().item_name(def_id).as_str())\n                         } else {\n                             None\n                         }"}, {"sha": "dff9fa271aba52f99b6b03c7ad54dbc03889bbd0", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -263,7 +263,7 @@ impl<'mir, 'tcx> super::Machine<'mir, 'tcx> for CompileTimeEvaluator {\n     ) -> EvalResult<'tcx> {\n         let substs = instance.substs;\n \n-        let intrinsic_name = &ecx.tcx.item_name(instance.def_id())[..];\n+        let intrinsic_name = &ecx.tcx.item_name(instance.def_id()).as_str()[..];\n         match intrinsic_name {\n             \"min_align_of\" => {\n                 let elem_ty = substs.type_at(0);"}, {"sha": "9e43bed1b63af1958dfa089ffb22c4ecd22e5016", "filename": "src/librustc_mir/monomorphize/item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fitem.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -76,7 +76,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug {\n             MonoItem::GlobalAsm(node_id) => {\n                 let def_id = tcx.hir.local_def_id(node_id);\n                 ty::SymbolName {\n-                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_str()\n+                    name: Symbol::intern(&format!(\"global_asm_{:?}\", def_id)).as_interned_str()\n                 }\n             }\n         }"}, {"sha": "3a65cd4ea770b5664ae05aa9c0653706221caaef", "filename": "src/librustc_mir/monomorphize/partitioning.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fpartitioning.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -146,7 +146,7 @@ pub trait CodegenUnitExt<'tcx> {\n     }\n \n     fn work_product_id(&self) -> WorkProductId {\n-        WorkProductId::from_cgu_name(self.name())\n+        WorkProductId::from_cgu_name(&self.name().as_str())\n     }\n \n     fn items_in_deterministic_order<'a>(&self,\n@@ -206,9 +206,9 @@ fn fallback_cgu_name(tcx: TyCtxt) -> InternedString {\n     const FALLBACK_CODEGEN_UNIT: &'static str = \"__rustc_fallback_codegen_unit\";\n \n     if tcx.sess.opts.debugging_opts.human_readable_cgu_names {\n-        Symbol::intern(FALLBACK_CODEGEN_UNIT).as_str()\n+        Symbol::intern(FALLBACK_CODEGEN_UNIT).as_interned_str()\n     } else {\n-        Symbol::intern(&CodegenUnit::mangle_name(FALLBACK_CODEGEN_UNIT)).as_str()\n+        Symbol::intern(&CodegenUnit::mangle_name(FALLBACK_CODEGEN_UNIT)).as_interned_str()\n     }\n }\n \n@@ -740,7 +740,7 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                         }\n                     }) {\n         cgu_name.push_str(\"-\");\n-        cgu_name.push_str(&part.data.as_interned_str());\n+        cgu_name.push_str(&part.data.as_interned_str().as_str());\n     }\n \n     if volatile {\n@@ -753,11 +753,11 @@ fn compute_codegen_unit_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         CodegenUnit::mangle_name(&cgu_name)\n     };\n \n-    Symbol::intern(&cgu_name[..]).as_str()\n+    Symbol::intern(&cgu_name[..]).as_interned_str()\n }\n \n fn numbered_codegen_unit_name(crate_name: &str, index: usize) -> InternedString {\n-    Symbol::intern(&format!(\"{}{}\", crate_name, index)).as_str()\n+    Symbol::intern(&format!(\"{}{}\", crate_name, index)).as_interned_str()\n }\n \n fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n@@ -772,7 +772,7 @@ fn debug_dump<'a, 'b, 'tcx, I>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             debug!(\"CodegenUnit {}:\", cgu.name());\n \n             for (trans_item, linkage) in cgu.items() {\n-                let symbol_name = trans_item.symbol_name(tcx);\n+                let symbol_name = trans_item.symbol_name(tcx).name.as_str();\n                 let symbol_hash_start = symbol_name.rfind('h');\n                 let symbol_hash = symbol_hash_start.map(|i| &symbol_name[i ..])\n                                                    .unwrap_or(\"<no hash>\");"}, {"sha": "2bf5a49c97e8ff31eaf648f27dc810065de63878", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -149,7 +149,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     self.visibility_scope_info[source_info.scope].lint_root;\n                 self.register_violations(&[UnsafetyViolation {\n                     source_info,\n-                    description: Symbol::intern(\"borrow of packed field\").as_str(),\n+                    description: Symbol::intern(\"borrow of packed field\").as_interned_str(),\n                     kind: UnsafetyViolationKind::BorrowPacked(lint_root)\n                 }], &[]);\n             }\n@@ -214,7 +214,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                         self.visibility_scope_info[source_info.scope].lint_root;\n                     self.register_violations(&[UnsafetyViolation {\n                         source_info,\n-                        description: Symbol::intern(\"use of extern static\").as_str(),\n+                        description: Symbol::intern(\"use of extern static\").as_interned_str(),\n                         kind: UnsafetyViolationKind::ExternStatic(lint_root)\n                     }], &[]);\n                 }\n@@ -231,7 +231,7 @@ impl<'a, 'tcx> UnsafetyChecker<'a, 'tcx> {\n         let source_info = self.source_info;\n         self.register_violations(&[UnsafetyViolation {\n             source_info,\n-            description: Symbol::intern(description).as_str(),\n+            description: Symbol::intern(description).as_interned_str(),\n             kind: UnsafetyViolationKind::General,\n         }], &[]);\n     }\n@@ -444,15 +444,15 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                 struct_span_err!(\n                     tcx.sess, source_info.span, E0133,\n                     \"{} requires unsafe function or block\", description)\n-                    .span_label(source_info.span, &description[..])\n+                    .span_label(source_info.span, &description.as_str()[..])\n                     .emit();\n             }\n             UnsafetyViolationKind::ExternStatic(lint_node_id) => {\n                 tcx.lint_node(SAFE_EXTERN_STATICS,\n                               lint_node_id,\n                               source_info.span,\n                               &format!(\"{} requires unsafe function or \\\n-                                        block (error E0133)\", &description[..]));\n+                                        block (error E0133)\", &description.as_str()[..]));\n             }\n             UnsafetyViolationKind::BorrowPacked(lint_node_id) => {\n                 if let Some(impl_def_id) = builtin_derive_def_id(tcx, def_id) {\n@@ -462,7 +462,7 @@ pub fn check_unsafety<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId) {\n                                   lint_node_id,\n                                   source_info.span,\n                                   &format!(\"{} requires unsafe function or \\\n-                                            block (error E0133)\", &description[..]));\n+                                            block (error E0133)\", &description.as_str()[..]));\n                 }\n             }\n         }"}, {"sha": "4762c6aaa27cc8143e78f65ffe3058c493a67d62", "filename": "src/librustc_mir/transform/qualify_consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fqualify_consts.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -868,7 +868,7 @@ This does not pose a problem by itself because they can't be accessed directly.\"\n                     Abi::RustIntrinsic |\n                     Abi::PlatformIntrinsic => {\n                         assert!(!self.tcx.is_const_fn(def_id));\n-                        match &self.tcx.item_name(def_id)[..] {\n+                        match &self.tcx.item_name(def_id).as_str()[..] {\n                             \"size_of\" | \"min_align_of\" | \"type_id\" => is_const_fn = Some(def_id),\n \n                             name if name.starts_with(\"simd_shuffle\") => {"}, {"sha": "14ceb5f59a3ec60b429bbb9e529bd2aa5bb6ccc7", "filename": "src/librustc_resolve/build_reduced_graph.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Fbuild_reduced_graph.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -41,7 +41,6 @@ use syntax::ext::tt::macro_rules;\n use syntax::parse::token::{self, Token};\n use syntax::std_inject::injected_crate_name;\n use syntax::symbol::keywords;\n-use syntax::symbol::Symbol;\n use syntax::visit::{self, Visitor};\n \n use syntax_pos::{Span, DUMMY_SP};\n@@ -544,14 +543,14 @@ impl<'a> Resolver<'a> {\n         }\n \n         let (name, parent) = if def_id.index == CRATE_DEF_INDEX {\n-            (self.cstore.crate_name_untracked(def_id.krate).as_str(), None)\n+            (self.cstore.crate_name_untracked(def_id.krate).as_interned_str(), None)\n         } else {\n             let def_key = self.cstore.def_key(def_id);\n             (def_key.disambiguated_data.data.get_opt_name().unwrap(),\n              Some(self.get_module(DefId { index: def_key.parent.unwrap(), ..def_id })))\n         };\n \n-        let kind = ModuleKind::Def(Def::Mod(def_id), Symbol::intern(&name));\n+        let kind = ModuleKind::Def(Def::Mod(def_id), name.as_symbol());\n         let module =\n             self.arenas.alloc_module(ModuleData::new(parent, kind, def_id, Mark::root(), DUMMY_SP));\n         self.extern_module_map.insert((def_id, macros_only), module);"}, {"sha": "d8520b61d9157b624e6c0917a08a51a5d676504a", "filename": "src/librustc_trans/back/symbol_export.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fback%2Fsymbol_export.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -132,7 +132,7 @@ fn reachable_non_generics_provider<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         })\n         .map(|def_id| {\n             let export_level = if special_runtime_crate {\n-                let name = tcx.symbol_name(Instance::mono(tcx, def_id));\n+                let name = tcx.symbol_name(Instance::mono(tcx, def_id)).as_str();\n                 // We can probably do better here by just ensuring that\n                 // it has hidden visibility rather than public\n                 // visibility, as this is primarily here to ensure it's"}, {"sha": "b756a6695f9415bec8628cbdc980b23f9cd1dfeb", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -1037,7 +1037,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n                 cgus.dedup();\n                 for &(ref cgu_name, (linkage, _)) in cgus.iter() {\n                     output.push_str(\" \");\n-                    output.push_str(&cgu_name);\n+                    output.push_str(&cgu_name.as_str());\n \n                     let linkage_abbrev = match linkage {\n                         Linkage::External => \"External\","}, {"sha": "9263d9a5f5dc2096dfa972a592efe1bec38c9c74", "filename": "src/librustc_trans/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcallee.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -52,7 +52,7 @@ pub fn get_fn<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n         return llfn;\n     }\n \n-    let sym = tcx.symbol_name(instance);\n+    let sym = tcx.symbol_name(instance).as_str();\n     debug!(\"get_fn({:?}: {:?}) => {}\", instance, fn_ty, sym);\n \n     // Create a fn pointer with the substituted signature."}, {"sha": "4a0619b23360df1684b3efffd0566943990b1363", "filename": "src/librustc_trans/common.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcommon.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -33,7 +33,7 @@ use libc::{c_uint, c_char};\n use std::iter;\n \n use rustc_target::spec::abi::Abi;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use syntax_pos::{Span, DUMMY_SP};\n \n pub use context::CodegenCx;\n@@ -183,7 +183,7 @@ pub fn C_u8(cx: &CodegenCx, i: u8) -> ValueRef {\n \n // This is a 'c-like' raw string, which differs from\n // our boxed-and-length-annotated strings.\n-pub fn C_cstr(cx: &CodegenCx, s: InternedString, null_terminated: bool) -> ValueRef {\n+pub fn C_cstr(cx: &CodegenCx, s: LocalInternedString, null_terminated: bool) -> ValueRef {\n     unsafe {\n         if let Some(&llval) = cx.const_cstr_cache.borrow().get(&s) {\n             return llval;\n@@ -208,7 +208,7 @@ pub fn C_cstr(cx: &CodegenCx, s: InternedString, null_terminated: bool) -> Value\n \n // NB: Do not use `do_spill_noroot` to make this into a constant string, or\n // you will be kicked off fast isel. See issue #4352 for an example of this.\n-pub fn C_str_slice(cx: &CodegenCx, s: InternedString) -> ValueRef {\n+pub fn C_str_slice(cx: &CodegenCx, s: LocalInternedString) -> ValueRef {\n     let len = s.len();\n     let cs = consts::ptrcast(C_cstr(cx, s, false),\n         cx.layout_of(cx.tcx.mk_str()).llvm_type(cx).ptr_to());"}, {"sha": "405cb83ad4d754a4e443b0d51b842542435c92bf", "filename": "src/librustc_trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fconsts.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -118,7 +118,7 @@ pub fn get_static(cx: &CodegenCx, def_id: DefId) -> ValueRef {\n              def_id);\n \n     let ty = instance.ty(cx.tcx);\n-    let sym = cx.tcx.symbol_name(instance);\n+    let sym = cx.tcx.symbol_name(instance).as_str();\n \n     let g = if let Some(id) = cx.tcx.hir.as_local_node_id(def_id) {\n "}, {"sha": "90b2fb4b59a7016aa37f38a3ce2d0dbc9361f729", "filename": "src/librustc_trans/context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fcontext.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -39,7 +39,7 @@ use std::ptr;\n use std::iter;\n use std::str;\n use std::sync::Arc;\n-use syntax::symbol::InternedString;\n+use syntax::symbol::LocalInternedString;\n use abi::Abi;\n \n /// There is one `CodegenCx` per compilation unit. Each one has its own LLVM\n@@ -62,7 +62,7 @@ pub struct CodegenCx<'a, 'tcx: 'a> {\n     pub vtables: RefCell<FxHashMap<(Ty<'tcx>,\n                                 Option<ty::PolyExistentialTraitRef<'tcx>>), ValueRef>>,\n     /// Cache of constant strings,\n-    pub const_cstr_cache: RefCell<FxHashMap<InternedString, ValueRef>>,\n+    pub const_cstr_cache: RefCell<FxHashMap<LocalInternedString, ValueRef>>,\n \n     /// Reverse-direction for const ptrs cast from globals.\n     /// Key is a ValueRef holding a *T,\n@@ -273,7 +273,7 @@ impl<'a, 'tcx> CodegenCx<'a, 'tcx> {\n             let dbg_cx = if tcx.sess.opts.debuginfo != NoDebugInfo {\n                 let dctx = debuginfo::CrateDebugContext::new(llmod);\n                 debuginfo::metadata::compile_unit_metadata(tcx,\n-                                                           codegen_unit.name(),\n+                                                           &codegen_unit.name().as_str(),\n                                                            &dctx);\n                 Some(dctx)\n             } else {"}, {"sha": "123b9cf7931a58a1aae89fd4e0d3fdc454105e44", "filename": "src/librustc_trans/debuginfo/metadata.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmetadata.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -1399,7 +1399,7 @@ fn prepare_enum_metadata<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n                     (discr.size(cx), discr.align(cx));\n                 let discriminant_base_type_metadata =\n                     type_metadata(cx, discr.to_ty(cx.tcx), syntax_pos::DUMMY_SP);\n-                let discriminant_name = get_enum_discriminant_name(cx, enum_def_id);\n+                let discriminant_name = get_enum_discriminant_name(cx, enum_def_id).as_str();\n \n                 let name = CString::new(discriminant_name.as_bytes()).unwrap();\n                 let discriminant_type_metadata = unsafe {"}, {"sha": "193db15303f97251d2813c2f5d48a48a82490348", "filename": "src/librustc_trans/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fmod.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -394,7 +394,7 @@ pub fn create_function_debug_context<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             substs.types().zip(names).map(|(ty, name)| {\n                 let actual_type = cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n                 let actual_type_metadata = type_metadata(cx, actual_type, syntax_pos::DUMMY_SP);\n-                let name = CString::new(name.as_bytes()).unwrap();\n+                let name = CString::new(name.as_str().as_bytes()).unwrap();\n                 unsafe {\n                     llvm::LLVMRustDIBuilderCreateTemplateTypeParameter(\n                         DIB(cx),"}, {"sha": "51c45de9dc22a7633f1e8a6bdcaa35d5638acd28", "filename": "src/librustc_trans/debuginfo/namespace.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Fnamespace.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -47,7 +47,7 @@ pub fn item_namespace(cx: &CodegenCx, def_id: DefId) -> DIScope {\n \n     let namespace_name = match def_key.disambiguated_data.data {\n         DefPathData::CrateRoot => cx.tcx.crate_name(def_id.krate).as_str(),\n-        data => data.as_interned_str()\n+        data => data.as_interned_str().as_str()\n     };\n \n     let namespace_name = CString::new(namespace_name.as_bytes()).unwrap();"}, {"sha": "825fac36c93d7bed47119c18a6674bd5f76c215b", "filename": "src/librustc_trans/debuginfo/type_names.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fdebuginfo%2Ftype_names.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -190,10 +190,10 @@ pub fn push_debuginfo_type_name<'a, 'tcx>(cx: &CodegenCx<'a, 'tcx>,\n             output.push_str(&cx.tcx.crate_name(def_id.krate).as_str());\n             for path_element in cx.tcx.def_path(def_id).data {\n                 output.push_str(\"::\");\n-                output.push_str(&path_element.data.as_interned_str());\n+                output.push_str(&path_element.data.as_interned_str().as_str());\n             }\n         } else {\n-            output.push_str(&cx.tcx.item_name(def_id));\n+            output.push_str(&cx.tcx.item_name(def_id).as_str());\n         }\n     }\n "}, {"sha": "49a207a2d8ab5b299f54812d1c45ea0bcf879fd2", "filename": "src/librustc_trans/intrinsic.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fintrinsic.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -103,7 +103,7 @@ pub fn trans_intrinsic_call<'a, 'tcx>(bx: &Builder<'a, 'tcx>,\n     let sig = tcx.normalize_erasing_late_bound_regions(ty::ParamEnv::reveal_all(), &sig);\n     let arg_tys = sig.inputs();\n     let ret_ty = sig.output();\n-    let name = &*tcx.item_name(def_id);\n+    let name = &*tcx.item_name(def_id).as_str();\n \n     let llret_ty = cx.layout_of(ret_ty).llvm_type(cx);\n     let result = PlaceRef::new_sized(llresult, fn_ty.ret.layout, fn_ty.ret.layout.align);"}, {"sha": "fb6a17a1c75b49a3da487c37d118c7f3d968e0f6", "filename": "src/librustc_trans/mir/block.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Fmir%2Fblock.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fblock.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -442,7 +442,7 @@ impl<'a, 'tcx> FunctionCx<'a, 'tcx> {\n                 // Handle intrinsics old trans wants Expr's for, ourselves.\n                 let intrinsic = match def {\n                     Some(ty::InstanceDef::Intrinsic(def_id))\n-                        => Some(bx.tcx().item_name(def_id)),\n+                        => Some(bx.tcx().item_name(def_id).as_str()),\n                     _ => None\n                 };\n                 let intrinsic = intrinsic.as_ref().map(|s| &s[..]);"}, {"sha": "d19b5af25273d30a5de19fbc219306ffcb38d6a5", "filename": "src/librustc_trans/trans_item.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Ftrans_item.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans%2Ftrans_item.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Ftrans_item.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -88,7 +88,7 @@ pub trait MonoItemExt<'a, 'tcx>: fmt::Debug + BaseMonoItemExt<'a, 'tcx> {\n                self.to_raw_string(),\n                cx.codegen_unit.name());\n \n-        let symbol_name = self.symbol_name(cx.tcx);\n+        let symbol_name = self.symbol_name(cx.tcx).as_str();\n \n         debug!(\"symbol {}\", &symbol_name);\n "}, {"sha": "be5bff60805c3b2b8242ff3c755c93211b1afc10", "filename": "src/librustc_trans_utils/symbol_names.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_trans_utils%2Fsymbol_names.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans_utils%2Fsymbol_names.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -229,7 +229,7 @@ fn def_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, def_id: DefId)\n fn symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>)\n                          -> ty::SymbolName\n {\n-    ty::SymbolName { name: Symbol::intern(&compute_symbol_name(tcx, instance)).as_str() }\n+    ty::SymbolName { name: Symbol::intern(&compute_symbol_name(tcx, instance)).as_interned_str() }\n }\n \n fn compute_symbol_name<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>, instance: Instance<'tcx>)\n@@ -355,12 +355,12 @@ impl SymbolPathBuffer {\n             result: String::with_capacity(64),\n             temp_buf: String::with_capacity(16)\n         };\n-        result.result.push_str(&symbol.name);\n+        result.result.push_str(&symbol.name.as_str());\n         result\n     }\n \n     fn into_interned(self) -> ty::SymbolName {\n-        ty::SymbolName { name: Symbol::intern(&self.result).as_str() }\n+        ty::SymbolName { name: Symbol::intern(&self.result).as_interned_str() }\n     }\n \n     fn finish(mut self, hash: u64) -> String {"}, {"sha": "93dbba6e873a9d4f807e906dfd8008c2f1335a93", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -101,7 +101,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n     {\n         let tcx = self.tcx();\n         let lifetime_name = |def_id| {\n-            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_str()\n+            tcx.hir.name(tcx.hir.as_local_node_id(def_id).unwrap()).as_interned_str()\n         };\n \n         let hir_id = tcx.hir.node_to_hir_id(lifetime.id);\n@@ -981,7 +981,7 @@ impl<'o, 'gcx: 'tcx, 'tcx> AstConv<'gcx, 'tcx>+'o {\n                 let item_def_id = tcx.hir.local_def_id(item_id);\n                 let generics = tcx.generics_of(item_def_id);\n                 let index = generics.type_param_to_index[&tcx.hir.local_def_id(node_id)];\n-                tcx.mk_param(index, tcx.hir.name(node_id).as_str())\n+                tcx.mk_param(index, tcx.hir.name(node_id).as_interned_str())\n             }\n             Def::SelfTy(_, Some(def_id)) => {\n                 // Self in impl (we know the concrete type)."}, {"sha": "fcf7541a159b02388449edd83fb53f0e0465d162", "filename": "src/librustc_typeck/check/intrinsic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fintrinsic.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -76,7 +76,7 @@ fn equate_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n /// and in libcore/intrinsics.rs\n pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                       it: &hir::ForeignItem) {\n-    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_str());\n+    let param = |n| tcx.mk_param(n, Symbol::intern(&format!(\"P{}\", n)).as_interned_str());\n     let name = it.name.as_str();\n     let (n_tps, inputs, output) = if name.starts_with(\"atomic_\") {\n         let split : Vec<&str> = name.split('_').collect();\n@@ -341,7 +341,7 @@ pub fn check_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n pub fn check_platform_intrinsic_type<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                                it: &hir::ForeignItem) {\n     let param = |n| {\n-        let name = Symbol::intern(&format!(\"P{}\", n)).as_str();\n+        let name = Symbol::intern(&format!(\"P{}\", n)).as_interned_str();\n         tcx.mk_param(n, name)\n     };\n "}, {"sha": "db859e42057e951999d34f480bf49d2abfaf7d09", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -124,7 +124,7 @@ use syntax::attr;\n use syntax::codemap::{original_sp, Spanned};\n use syntax::feature_gate::{GateIssue, emit_feature_err};\n use syntax::ptr::P;\n-use syntax::symbol::{Symbol, InternedString, keywords};\n+use syntax::symbol::{Symbol, LocalInternedString, keywords};\n use syntax::util::lev_distance::find_best_match_for_name;\n use syntax_pos::{self, BytePos, Span, MultiSpan};\n \n@@ -3172,7 +3172,7 @@ impl<'a, 'gcx, 'tcx> FnCtxt<'a, 'gcx, 'tcx> {\n     // Return an hint about the closest match in field names\n     fn suggest_field_name(variant: &'tcx ty::VariantDef,\n                           field: &Spanned<ast::Name>,\n-                          skip: Vec<InternedString>)\n+                          skip: Vec<LocalInternedString>)\n                           -> Option<Symbol> {\n         let name = field.node.as_str();\n         let names = variant.fields.iter().filter_map(|field| {"}, {"sha": "d0ff44c8e7e10e65da9a3ad874edecb4ecdf7cb3", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -655,7 +655,7 @@ fn reject_shadowing_type_parameters(tcx: TyCtxt, def_id: DefId) {\n             // local so it should be okay to just unwrap everything.\n             let trait_def_id = impl_params[&method_param.name];\n             let trait_decl_span = tcx.def_span(trait_def_id);\n-            error_194(tcx, type_span, trait_decl_span, &method_param.name[..]);\n+            error_194(tcx, type_span, trait_decl_span, &method_param.name.as_str()[..]);\n         }\n     }\n }"}, {"sha": "1b8f2e661c30d95ca827fe68a2af7ac987d69553", "filename": "src/librustc_typeck/collect.rs", "status": "modified", "additions": 9, "deletions": 9, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustc_typeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcollect.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -244,7 +244,7 @@ fn type_param_predicates<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let param_owner_def_id = tcx.hir.local_def_id(param_owner);\n     let generics = tcx.generics_of(param_owner_def_id);\n     let index = generics.type_param_to_index[&def_id];\n-    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_str());\n+    let ty = tcx.mk_param(index, tcx.hir.ty_param_name(param_id).as_interned_str());\n \n     // Don't look for bounds where the type parameter isn't in scope.\n     let parent = if item_def_id == param_owner_def_id {\n@@ -842,7 +842,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n                     opt_self = Some(ty::TypeParameterDef {\n                         index: 0,\n-                        name: keywords::SelfType.name().as_str(),\n+                        name: keywords::SelfType.name().as_interned_str(),\n                         def_id: tcx.hir.local_def_id(param_id),\n                         has_default: false,\n                         object_lifetime_default: rl::Set1::Empty,\n@@ -888,7 +888,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     let early_lifetimes = early_bound_lifetimes_from_generics(tcx, ast_generics);\n     let regions = early_lifetimes.enumerate().map(|(i, l)| {\n         ty::RegionParameterDef {\n-            name: l.lifetime.name.name().as_str(),\n+            name: l.lifetime.name.name().as_interned_str(),\n             index: own_start + i as u32,\n             def_id: tcx.hir.local_def_id(l.lifetime.id),\n             pure_wrt_drop: l.pure_wrt_drop,\n@@ -918,7 +918,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n         ty::TypeParameterDef {\n             index: type_start + i as u32,\n-            name: p.name.as_str(),\n+            name: p.name.as_interned_str(),\n             def_id: tcx.hir.local_def_id(p.id),\n             has_default: p.default.is_some(),\n             object_lifetime_default:\n@@ -937,7 +937,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure kind\n         types.push(ty::TypeParameterDef {\n             index: type_start,\n-            name: Symbol::intern(\"<closure_kind>\").as_str(),\n+            name: Symbol::intern(\"<closure_kind>\").as_interned_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -948,7 +948,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         // add a dummy parameter for the closure signature\n         types.push(ty::TypeParameterDef {\n             index: type_start + 1,\n-            name: Symbol::intern(\"<closure_signature>\").as_str(),\n+            name: Symbol::intern(\"<closure_signature>\").as_interned_str(),\n             def_id,\n             has_default: false,\n             object_lifetime_default: rl::Set1::Empty,\n@@ -959,7 +959,7 @@ fn generics_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         tcx.with_freevars(node_id, |fv| {\n             types.extend(fv.iter().zip(2..).map(|(_, i)| ty::TypeParameterDef {\n                 index: type_start + i,\n-                name: Symbol::intern(\"<upvar>\").as_str(),\n+                name: Symbol::intern(\"<upvar>\").as_interned_str(),\n                 def_id,\n                 has_default: false,\n                 object_lifetime_default: rl::Set1::Empty,\n@@ -1429,7 +1429,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n         let region = tcx.mk_region(ty::ReEarlyBound(ty::EarlyBoundRegion {\n             def_id: tcx.hir.local_def_id(param.lifetime.id),\n             index,\n-            name: param.lifetime.name.name().as_str(),\n+            name: param.lifetime.name.name().as_interned_str(),\n         }));\n         index += 1;\n \n@@ -1443,7 +1443,7 @@ pub fn explicit_predicates_of<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n     // Collect the predicates that were written inline by the user on each\n     // type parameter (e.g., `<T:Foo>`).\n     for param in ast_generics.ty_params() {\n-        let param_ty = ty::ParamTy::new(index, param.name.as_str()).to_ty(tcx);\n+        let param_ty = ty::ParamTy::new(index, param.name.as_interned_str()).to_ty(tcx);\n         index += 1;\n \n         let bounds = compute_bounds(&icx,"}, {"sha": "221fc4dab723253d0c34a364001d14e077106cd0", "filename": "src/librustdoc/clean/auto_trait.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fauto_trait.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -224,7 +224,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     let name = if p.name == \"\" {\n                         hir::LifetimeName::Static\n                     } else {\n-                        hir::LifetimeName::Name(Symbol::intern(&p.name))\n+                        hir::LifetimeName::Name(p.name.as_symbol())\n                     };\n \n                     hir::Lifetime {\n@@ -261,7 +261,7 @@ impl<'a, 'tcx, 'rcx> AutoTraitFinder<'a, 'tcx, 'rcx> {\n                     span: DUMMY_SP,\n                     def: Def::TyParam(param.def_id),\n                     segments: HirVec::from_vec(vec![\n-                        hir::PathSegment::from_name(Symbol::intern(&param.name))\n+                        hir::PathSegment::from_name(param.name.as_symbol())\n                     ]),\n                 }),\n             )),"}, {"sha": "6623d5ab3c2c2176067e4cf3e1dd80b568ccd27a", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -1367,7 +1367,7 @@ impl TyParamBound {\n     fn maybe_sized(cx: &DocContext) -> TyParamBound {\n         let did = cx.tcx.require_lang_item(lang_items::SizedTraitLangItem);\n         let empty = cx.tcx.intern_substs(&[]);\n-        let path = external_path(cx, &cx.tcx.item_name(did),\n+        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n             Some(did), false, vec![], empty);\n         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n         TraitBound(PolyTrait {\n@@ -1474,7 +1474,7 @@ impl<'a, 'tcx> Clean<TyParamBound> for (&'a ty::TraitRef<'tcx>, Vec<TypeBinding>\n     fn clean(&self, cx: &DocContext) -> TyParamBound {\n         let (trait_ref, ref bounds) = *self;\n         inline::record_extern_fqn(cx, trait_ref.def_id, TypeKind::Trait);\n-        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id),\n+        let path = external_path(cx, &cx.tcx.item_name(trait_ref.def_id).as_str(),\n                                  Some(trait_ref.def_id), true, bounds.clone(), trait_ref.substs);\n \n         debug!(\"ty::TraitRef\\n  subst: {:?}\\n\", trait_ref.substs);\n@@ -2801,7 +2801,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     AdtKind::Enum => TypeKind::Enum,\n                 };\n                 inline::record_extern_fqn(cx, did, kind);\n-                let path = external_path(cx, &cx.tcx.item_name(did),\n+                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], substs);\n                 ResolvedPath {\n                     path,\n@@ -2812,7 +2812,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n             }\n             ty::TyForeign(did) => {\n                 inline::record_extern_fqn(cx, did, TypeKind::Foreign);\n-                let path = external_path(cx, &cx.tcx.item_name(did),\n+                let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                                          None, false, vec![], Substs::empty());\n                 ResolvedPath {\n                     path: path,\n@@ -2830,7 +2830,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                     reg.clean(cx).map(|b| typarams.push(RegionBound(b)));\n                     for did in obj.auto_traits() {\n                         let empty = cx.tcx.intern_substs(&[]);\n-                        let path = external_path(cx, &cx.tcx.item_name(did),\n+                        let path = external_path(cx, &cx.tcx.item_name(did).as_str(),\n                             Some(did), false, vec![], empty);\n                         inline::record_extern_fqn(cx, did, TypeKind::Trait);\n                         let bound = TraitBound(PolyTrait {\n@@ -2853,7 +2853,7 @@ impl<'tcx> Clean<Type> for Ty<'tcx> {\n                         });\n                     }\n \n-                    let path = external_path(cx, &cx.tcx.item_name(did), Some(did),\n+                    let path = external_path(cx, &cx.tcx.item_name(did).as_str(), Some(did),\n                         false, bindings, principal.skip_binder().substs);\n                     ResolvedPath {\n                         path,"}, {"sha": "4a8b1e8b1c1e46edb8569c04006a1258a9be7b0a", "filename": "src/libsyntax_pos/symbol.rs", "status": "modified", "additions": 164, "deletions": 28, "changes": 192, "blob_url": "https://github.com/rust-lang/rust/blob/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibsyntax_pos%2Fsymbol.rs", "raw_url": "https://github.com/rust-lang/rust/raw/44b53598507b88bd256477cb4717ec6817ffbcec/src%2Flibsyntax_pos%2Fsymbol.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax_pos%2Fsymbol.rs?ref=44b53598507b88bd256477cb4717ec6817ffbcec", "patch": "@@ -18,6 +18,7 @@ use {Span, DUMMY_SP, GLOBALS};\n use rustc_data_structures::fx::FxHashMap;\n use serialize::{Decodable, Decoder, Encodable, Encoder};\n use std::fmt;\n+use std::cmp::{PartialEq, Ordering, PartialOrd, Ord};\n use std::hash::{Hash, Hasher};\n \n #[derive(Copy, Clone, Eq)]\n@@ -36,6 +37,11 @@ impl Ident {\n         Ident::new(name, DUMMY_SP)\n     }\n \n+    /// Maps an interned string to an identifier with an empty syntax context.\n+    pub fn from_interned_str(string: InternedString) -> Ident {\n+        Ident::with_empty_ctxt(string.as_symbol())\n+    }\n+\n     /// Maps a string to an identifier with an empty syntax context.\n     pub fn from_str(string: &str) -> Ident {\n         Ident::with_empty_ctxt(Symbol::intern(string))\n@@ -138,14 +144,20 @@ impl Symbol {\n         with_interner(|interner| interner.gensymed(self))\n     }\n \n-    pub fn as_str(self) -> InternedString {\n+    pub fn as_str(self) -> LocalInternedString {\n         with_interner(|interner| unsafe {\n-            InternedString {\n+            LocalInternedString {\n                 string: ::std::mem::transmute::<&str, &str>(interner.get(self))\n             }\n         })\n     }\n \n+    pub fn as_interned_str(self) -> InternedString {\n+        with_interner(|interner| InternedString {\n+            symbol: interner.interned(self)\n+        })\n+    }\n+\n     pub fn as_u32(self) -> u32 {\n         self.0\n     }\n@@ -365,84 +377,208 @@ fn with_interner<T, F: FnOnce(&mut Interner) -> T>(f: F) -> T {\n     GLOBALS.with(|globals| f(&mut *globals.symbol_interner.lock()))\n }\n \n-/// Represents a string stored in the thread-local interner. Because the\n-/// interner lives for the life of the thread, this can be safely treated as an\n-/// immortal string, as long as it never crosses between threads.\n-///\n-/// FIXME(pcwalton): You must be careful about what you do in the destructors\n-/// of objects stored in TLS, because they may run after the interner is\n-/// destroyed. In particular, they must not access string contents. This can\n-/// be fixed in the future by just leaking all strings until thread death\n-/// somehow.\n+/// Represents a string stored in the interner. Because the interner outlives any thread\n+/// which uses this type, we can safely treat `string` which points to interner data,\n+/// as an immortal string, as long as this type never crosses between threads.\n+// FIXME: Ensure that the interner outlives any thread which uses LocalInternedString,\n+//        by creating a new thread right after constructing the interner\n #[derive(Clone, Copy, Hash, PartialOrd, Eq, Ord)]\n-pub struct InternedString {\n+pub struct LocalInternedString {\n     string: &'static str,\n }\n \n-impl<U: ?Sized> ::std::convert::AsRef<U> for InternedString where str: ::std::convert::AsRef<U> {\n+impl LocalInternedString {\n+    pub fn as_interned_str(self) -> InternedString {\n+        InternedString {\n+            symbol: Symbol::intern(self.string)\n+        }\n+    }\n+}\n+\n+impl<U: ?Sized> ::std::convert::AsRef<U> for LocalInternedString\n+where\n+    str: ::std::convert::AsRef<U>\n+{\n     fn as_ref(&self) -> &U {\n         self.string.as_ref()\n     }\n }\n \n-impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for InternedString {\n+impl<T: ::std::ops::Deref<Target = str>> ::std::cmp::PartialEq<T> for LocalInternedString {\n     fn eq(&self, other: &T) -> bool {\n         self.string == other.deref()\n     }\n }\n \n-impl ::std::cmp::PartialEq<InternedString> for str {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl ::std::cmp::PartialEq<LocalInternedString> for str {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<InternedString> for &'a str {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a str {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl ::std::cmp::PartialEq<InternedString> for String {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl ::std::cmp::PartialEq<LocalInternedString> for String {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         self == other.string\n     }\n }\n \n-impl<'a> ::std::cmp::PartialEq<InternedString> for &'a String {\n-    fn eq(&self, other: &InternedString) -> bool {\n+impl<'a> ::std::cmp::PartialEq<LocalInternedString> for &'a String {\n+    fn eq(&self, other: &LocalInternedString) -> bool {\n         *self == other.string\n     }\n }\n \n-impl !Send for InternedString { }\n+impl !Send for LocalInternedString {}\n+impl !Sync for LocalInternedString {}\n \n-impl ::std::ops::Deref for InternedString {\n+impl ::std::ops::Deref for LocalInternedString {\n     type Target = str;\n     fn deref(&self) -> &str { self.string }\n }\n \n-impl fmt::Debug for InternedString {\n+impl fmt::Debug for LocalInternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Debug::fmt(self.string, f)\n     }\n }\n \n-impl fmt::Display for InternedString {\n+impl fmt::Display for LocalInternedString {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         fmt::Display::fmt(self.string, f)\n     }\n }\n \n+impl Decodable for LocalInternedString {\n+    fn decode<D: Decoder>(d: &mut D) -> Result<LocalInternedString, D::Error> {\n+        Ok(Symbol::intern(&d.read_str()?).as_str())\n+    }\n+}\n+\n+impl Encodable for LocalInternedString {\n+    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n+        s.emit_str(self.string)\n+    }\n+}\n+\n+/// Represents a string stored in the string interner\n+#[derive(Clone, Copy, Eq)]\n+pub struct InternedString {\n+    symbol: Symbol,\n+}\n+\n+impl InternedString {\n+    pub fn with<F: FnOnce(&str) -> R, R>(self, f: F) -> R {\n+        let str = with_interner(|interner| {\n+            interner.get(self.symbol) as *const str\n+        });\n+        // This is safe because the interner keeps string alive until it is dropped.\n+        // We can access it because we know the interner is still alive since we use a\n+        // scoped thread local to access it, and it was alive at the begining of this scope\n+        unsafe { f(&*str) }\n+    }\n+\n+    pub fn as_symbol(self) -> Symbol {\n+        self.symbol\n+    }\n+\n+    pub fn as_str(self) -> LocalInternedString {\n+        self.symbol.as_str()\n+    }\n+}\n+\n+impl Hash for InternedString {\n+    fn hash<H: Hasher>(&self, state: &mut H) {\n+        self.with(|str| str.hash(state))\n+    }\n+}\n+\n+impl PartialOrd<InternedString> for InternedString {\n+    fn partial_cmp(&self, other: &InternedString) -> Option<Ordering> {\n+        if self.symbol == other.symbol {\n+            return Some(Ordering::Equal);\n+        }\n+        self.with(|self_str| other.with(|other_str| self_str.partial_cmp(&other_str)))\n+    }\n+}\n+\n+impl Ord for InternedString {\n+    fn cmp(&self, other: &InternedString) -> Ordering {\n+        if self.symbol == other.symbol {\n+            return Ordering::Equal;\n+        }\n+        self.with(|self_str| other.with(|other_str| self_str.cmp(&other_str)))\n+    }\n+}\n+\n+impl<T: ::std::ops::Deref<Target = str>> PartialEq<T> for InternedString {\n+    fn eq(&self, other: &T) -> bool {\n+        self.with(|string| string == other.deref())\n+    }\n+}\n+\n+impl PartialEq<InternedString> for InternedString {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        self.symbol == other.symbol\n+    }\n+}\n+\n+impl PartialEq<InternedString> for str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| self == string)\n+    }\n+}\n+\n+impl<'a> PartialEq<InternedString> for &'a str {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| *self == string)\n+    }\n+}\n+\n+impl PartialEq<InternedString> for String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| self == string)\n+    }\n+}\n+\n+impl<'a> PartialEq<InternedString> for &'a String {\n+    fn eq(&self, other: &InternedString) -> bool {\n+        other.with(|string| *self == string)\n+    }\n+}\n+\n+impl ::std::convert::From<InternedString> for String {\n+    fn from(val: InternedString) -> String {\n+        val.as_symbol().to_string()\n+    }\n+}\n+\n+impl fmt::Debug for InternedString {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.with(|str| fmt::Debug::fmt(&str, f))\n+    }\n+}\n+\n+impl fmt::Display for InternedString {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        self.with(|str| fmt::Display::fmt(&str, f))\n+    }\n+}\n+\n impl Decodable for InternedString {\n     fn decode<D: Decoder>(d: &mut D) -> Result<InternedString, D::Error> {\n-        Ok(Symbol::intern(&d.read_str()?).as_str())\n+        Ok(Symbol::intern(&d.read_str()?).as_interned_str())\n     }\n }\n \n impl Encodable for InternedString {\n     fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_str(self.string)\n+        self.with(|string| s.emit_str(string))\n     }\n }\n "}]}