{"sha": "c414b78afed76f63adf4e7538f04b6231f177236", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM0MTRiNzhhZmVkNzZmNjNhZGY0ZTc1MzhmMDRiNjIzMWYxNzcyMzY=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T03:55:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2012-03-15T18:10:52Z"}, "message": "rt: Remove the kernel task table", "tree": {"sha": "38bc7000fdd2750f8b42731e6f7db180603efc59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/38bc7000fdd2750f8b42731e6f7db180603efc59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c414b78afed76f63adf4e7538f04b6231f177236", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c414b78afed76f63adf4e7538f04b6231f177236", "html_url": "https://github.com/rust-lang/rust/commit/c414b78afed76f63adf4e7538f04b6231f177236", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c414b78afed76f63adf4e7538f04b6231f177236/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1366d656605049f2e58525c7cad5433da9977db2", "url": "https://api.github.com/repos/rust-lang/rust/commits/1366d656605049f2e58525c7cad5433da9977db2", "html_url": "https://github.com/rust-lang/rust/commit/1366d656605049f2e58525c7cad5433da9977db2"}], "stats": {"total": 61, "additions": 7, "deletions": 54}, "files": [{"sha": "3880874b76d9d783e4e3ef472733fc2ee12e0849", "filename": "src/rt/rust_kernel.cpp", "status": "modified", "additions": 5, "deletions": 45, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_kernel.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_kernel.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.cpp?ref=c414b78afed76f63adf4e7538f04b6231f177236", "patch": "@@ -166,51 +166,11 @@ rust_kernel::fail() {\n     }\n }\n \n-void\n-rust_kernel::register_task(rust_task *task) {\n-    uintptr_t new_live_tasks;\n-    {\n-        scoped_lock with(task_lock);\n-        task->id = max_task_id++;\n-        task_table.put(task->id, task);\n-        new_live_tasks = task_table.count();\n-    }\n-    K(srv, task->id != INTPTR_MAX, \"Hit the maximum task id\");\n-    KLOG_(\"Registered task %\" PRIdPTR, task->id);\n-    KLOG_(\"Total outstanding tasks: %d\", new_live_tasks);\n-}\n-\n-void\n-rust_kernel::release_task_id(rust_task_id id) {\n-    KLOG_(\"Releasing task %\" PRIdPTR, id);\n-    uintptr_t new_live_tasks;\n-    {\n-        scoped_lock with(task_lock);\n-        task_table.remove(id);\n-        new_live_tasks = task_table.count();\n-    }\n-    KLOG_(\"Total outstanding tasks: %d\", new_live_tasks);\n-}\n-\n-rust_task *\n-rust_kernel::get_task_by_id(rust_task_id id) {\n-    scoped_lock with(task_lock);\n-    rust_task *task = NULL;\n-    // get leaves task unchanged if not found.\n-    task_table.get(id, &task);\n-    if(task) {\n-        if(task->get_ref_count() == 0) {\n-            // FIXME: I don't think this is possible.\n-            // this means the destructor is running, since the destructor\n-            // grabs the kernel lock to unregister the task. Pretend this\n-            // doesn't actually exist.\n-            return NULL;\n-        }\n-        else {\n-            task->ref();\n-        }\n-    }\n-    return task;\n+rust_task_id\n+rust_kernel::generate_task_id() {\n+    rust_task_id id = sync::increment(max_task_id);\n+    K(srv, id != INTPTR_MAX, \"Hit the maximum task id\");\n+    return id;\n }\n \n rust_port_id"}, {"sha": "f97303cae0f4829ee82a31ddeb1c23b833c91dda", "filename": "src/rt/rust_kernel.h", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_kernel.h", "raw_url": "https://github.com/rust-lang/rust/raw/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_kernel.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_kernel.h?ref=c414b78afed76f63adf4e7538f04b6231f177236", "patch": "@@ -24,11 +24,8 @@ class rust_kernel {\n public:\n     rust_srv *srv;\n private:\n-    // Protects max_task_id and task_table\n-    lock_and_signal task_lock;\n     // The next task id\n     rust_task_id max_task_id;\n-    hash_map<rust_task_id, rust_task *> task_table;\n \n     // Protects max_port_id and port_table\n     lock_and_signal port_lock;\n@@ -75,9 +72,7 @@ class rust_kernel {\n     void win32_require(LPCTSTR fn, BOOL ok);\n #endif\n \n-    void register_task(rust_task *task);\n-    rust_task *get_task_by_id(rust_task_id id);\n-    void release_task_id(rust_task_id tid);\n+    rust_task_id generate_task_id();\n \n     rust_port_id register_port(rust_port *port);\n     rust_port *get_port_by_id(rust_port_id id);"}, {"sha": "fd7c10ef6766a8c01a872abdefba74d80db61795", "filename": "src/rt/rust_task_thread.cpp", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_task_thread.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/c414b78afed76f63adf4e7538f04b6231f177236/src%2Frt%2Frust_task_thread.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task_thread.cpp?ref=c414b78afed76f63adf4e7538f04b6231f177236", "patch": "@@ -146,8 +146,6 @@ rust_task_thread::reap_dead_tasks() {\n     // from the scheduler, which may end up trying to take this lock\n     lock.unlock();\n \n-    // Release the task from the kernel so nobody else can get at it\n-    kernel->release_task_id(dead_task->id);\n     dead_task->delete_all_stacks();\n     // Deref the task, which may cause it to request us to release it\n     dead_task->deref();\n@@ -316,7 +314,7 @@ rust_task_thread::create_task(rust_task *spawner, const char *name,\n         newborn_tasks.append(task);\n     }\n \n-    kernel->register_task(task);\n+    task->id = kernel->generate_task_id();\n     return task;\n }\n "}]}