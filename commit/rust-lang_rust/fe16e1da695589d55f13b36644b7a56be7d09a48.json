{"sha": "fe16e1da695589d55f13b36644b7a56be7d09a48", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZlMTZlMWRhNjk1NTg5ZDU1ZjEzYjM2NjQ0YjdhNTZiZTdkMDlhNDg=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2020-07-03T22:02:09Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-07-03T22:02:09Z"}, "message": "Merge #5215\n\n5215: Cleanup more completion tests r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>", "tree": {"sha": "c71705b63e971b5ddf05d1077c09f2f54e46093a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c71705b63e971b5ddf05d1077c09f2f54e46093a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fe16e1da695589d55f13b36644b7a56be7d09a48", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe/6rhCRBK7hj4Ov3rIwAAdHIIAJtpW+djfypwNk5BNIMlsI/W\nW0/WNgQ+zB9PfVguPR52K5W09kNVr7zY84jf6kB8QoAmMpufT7KW3+SgYrwGb2MV\nHX4d01iaOWY6pqNL3Sh6FMUV7QgFuIlRWbcIKXqgCnuxoOkLAEkP74WFVRgTNZKh\nWNv4VrnuZnTrlG/ErttqLemYtOInvB0jfRW/5ELYhjZmMajYKiFTtTBTJknS72RL\nyRNw+ztRYj0+fJCYVEYOdjjORb4M52e63TbkFa76e+Idis4gyqNoSL61yQR20O91\n2S+K20tpMBL0ZgTbCUPsBnJIIIvs9+mIRulV1Rbqyy2p1SK8J9mKGRF2weLjIPc=\n=NSqm\n-----END PGP SIGNATURE-----\n", "payload": "tree c71705b63e971b5ddf05d1077c09f2f54e46093a\nparent f6bff05f2adfabae41ce9d2c5dabc2fb35ad21de\nparent cda1a6c63860013ff43f34c68532db41abc30516\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1593813729 +0000\ncommitter GitHub <noreply@github.com> 1593813729 +0000\n\nMerge #5215\n\n5215: Cleanup more completion tests r=matklad a=matklad\n\nbors r+\n\nCo-authored-by: Aleksey Kladov <aleksey.kladov@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fe16e1da695589d55f13b36644b7a56be7d09a48", "html_url": "https://github.com/rust-lang/rust/commit/fe16e1da695589d55f13b36644b7a56be7d09a48", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fe16e1da695589d55f13b36644b7a56be7d09a48/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f6bff05f2adfabae41ce9d2c5dabc2fb35ad21de", "url": "https://api.github.com/repos/rust-lang/rust/commits/f6bff05f2adfabae41ce9d2c5dabc2fb35ad21de", "html_url": "https://github.com/rust-lang/rust/commit/f6bff05f2adfabae41ce9d2c5dabc2fb35ad21de"}, {"sha": "cda1a6c63860013ff43f34c68532db41abc30516", "url": "https://api.github.com/repos/rust-lang/rust/commits/cda1a6c63860013ff43f34c68532db41abc30516", "html_url": "https://github.com/rust-lang/rust/commit/cda1a6c63860013ff43f34c68532db41abc30516"}], "stats": {"total": 508, "additions": 177, "deletions": 331}, "files": [{"sha": "086b917ce89e579491121117ab8239d36992f670", "filename": "crates/ra_ide/src/completion/complete_keyword.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fcomplete_keyword.rs?ref=fe16e1da695589d55f13b36644b7a56be7d09a48", "patch": "@@ -1,6 +1,7 @@\n //! FIXME: write short doc here\n \n use ra_syntax::{ast, SyntaxKind};\n+use test_utils::mark;\n \n use crate::completion::{\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, Completions,\n@@ -38,6 +39,7 @@ pub(super) fn complete_use_tree_keyword(acc: &mut Completions, ctx: &CompletionC\n \n pub(super) fn complete_expr_keyword(acc: &mut Completions, ctx: &CompletionContext) {\n     if ctx.token.kind() == SyntaxKind::COMMENT {\n+        mark::hit!(no_keyword_completion_in_comments);\n         return;\n     }\n \n@@ -180,6 +182,7 @@ mod tests {\n         test_utils::{check_edit, completion_list},\n         CompletionKind,\n     };\n+    use test_utils::mark;\n \n     fn check(ra_fixture: &str, expect: Expect) {\n         let actual = completion_list(ra_fixture, CompletionKind::Keyword);\n@@ -459,4 +462,32 @@ fn quux() -> i32 {\n             \"#]],\n         );\n     }\n+\n+    #[test]\n+    fn no_keyword_completion_in_comments() {\n+        mark::check!(no_keyword_completion_in_comments);\n+        check(\n+            r#\"\n+fn test() {\n+    let x = 2; // A comment<|>\n+}\n+\"#,\n+            expect![[\"\"]],\n+        );\n+        check(\n+            r#\"\n+/*\n+Some multi-line comment<|>\n+*/\n+\"#,\n+            expect![[\"\"]],\n+        );\n+        check(\n+            r#\"\n+/// Some doc comment\n+/// let test<|> = 1\n+\"#,\n+            expect![[\"\"]],\n+        );\n+    }\n }"}, {"sha": "fd12673b29d8b68fa4ae28ea193a2c50fd7a262b", "filename": "crates/ra_ide/src/completion/presentation.rs", "status": "modified", "additions": 136, "deletions": 330, "changes": 466, "blob_url": "https://github.com/rust-lang/rust/blob/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Fpresentation.rs?ref=fe16e1da695589d55f13b36644b7a56be7d09a48", "patch": "@@ -383,12 +383,14 @@ impl Builder {\n             return self;\n         }\n         if ctx.use_item_syntax.is_some() || ctx.is_call {\n+            mark::hit!(no_parens_in_use_item);\n             return self;\n         }\n \n         // Don't add parentheses if the expected type is some function reference.\n         if let Some(ty) = &ctx.expected_type {\n             if ty.is_fn() {\n+                mark::hit!(no_call_parens_if_fn_ptr_needed);\n                 return self;\n             }\n         }\n@@ -413,7 +415,10 @@ impl Builder {\n                         .sep_by(\", \");\n                     format!(\"{}({})$0\", name, function_params_snippet)\n                 }\n-                _ => format!(\"{}($0)\", name),\n+                _ => {\n+                    mark::hit!(suppress_arg_snippets);\n+                    format!(\"{}($0)\", name)\n+                }\n             };\n \n             (snippet, format!(\"{}(\u2026)\", name))\n@@ -460,21 +465,14 @@ mod tests {\n     use test_utils::mark;\n \n     use crate::completion::{\n-        test_utils::{check_edit, do_completion, do_completion_with_options},\n+        test_utils::{check_edit, check_edit_with_config, do_completion},\n         CompletionConfig, CompletionItem, CompletionKind,\n     };\n \n     fn do_reference_completion(ra_fixture: &str) -> Vec<CompletionItem> {\n         do_completion(ra_fixture, CompletionKind::Reference)\n     }\n \n-    fn do_reference_completion_with_options(\n-        ra_fixture: &str,\n-        options: CompletionConfig,\n-    ) -> Vec<CompletionItem> {\n-        do_completion_with_options(ra_fixture, CompletionKind::Reference, &options)\n-    }\n-\n     #[test]\n     fn enum_detail_includes_names_for_record() {\n         assert_debug_snapshot!(\n@@ -647,6 +645,7 @@ fn no_args() {}\n fn main() { no_args()$0 }\n \"#,\n         );\n+\n         check_edit(\n             \"with_args\",\n             r#\"\n@@ -658,6 +657,7 @@ fn with_args(x: i32, y: String) {}\n fn main() { with_args(${1:x}, ${2:y})$0 }\n \"#,\n         );\n+\n         check_edit(\n             \"foo\",\n             r#\"\n@@ -675,6 +675,45 @@ impl S {\n fn bar(s: &S) { s.foo()$0 }\n \"#,\n         );\n+\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+struct S {}\n+impl S {\n+    fn foo(&self, x: i32) {}\n+}\n+fn bar(s: &S) {\n+    s.f<|>\n+}\n+\"#,\n+            r#\"\n+struct S {}\n+impl S {\n+    fn foo(&self, x: i32) {}\n+}\n+fn bar(s: &S) {\n+    s.foo(${1:x})$0\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn suppress_arg_snippets() {\n+        mark::check!(suppress_arg_snippets);\n+        check_edit_with_config(\n+            \"with_args\",\n+            r#\"\n+fn with_args(x: i32, y: String) {}\n+fn main() { with_<|> }\n+\"#,\n+            r#\"\n+fn with_args(x: i32, y: String) {}\n+fn main() { with_args($0) }\n+\"#,\n+            &CompletionConfig { add_call_argument_snippets: false, ..CompletionConfig::default() },\n+        );\n     }\n \n     #[test]\n@@ -694,294 +733,111 @@ fn main() { foo(${1:foo}, ${2:bar}, ${3:ho_ge_})$0 }\n \n     #[test]\n     fn inserts_parens_for_tuple_enums() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Option<T> { Some(T), None }\n-                use Option::*;\n-                fn main() -> Option<i32> {\n-                    Som<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"None\",\n-                source_range: 79..82,\n-                delete: 79..82,\n-                insert: \"None\",\n-                kind: EnumVariant,\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Option\",\n-                source_range: 79..82,\n-                delete: 79..82,\n-                insert: \"Option\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Some(\u2026)\",\n-                source_range: 79..82,\n-                delete: 79..82,\n-                insert: \"Some($0)\",\n-                kind: EnumVariant,\n-                lookup: \"Some\",\n-                detail: \"(T)\",\n-                trigger_call_info: true,\n-            },\n-            CompletionItem {\n-                label: \"main()\",\n-                source_range: 79..82,\n-                delete: 79..82,\n-                insert: \"main()$0\",\n-                kind: Function,\n-                lookup: \"main\",\n-                detail: \"fn main() -> Option<i32>\",\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"Some\",\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+fn main() -> Option<i32> {\n+    Som<|>\n+}\n+\"#,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+fn main() -> Option<i32> {\n+    Some($0)\n+}\n+\"#,\n         );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                enum Option<T> { Some(T), None }\n-                use Option::*;\n-                fn main(value: Option<i32>) {\n-                    match value {\n-                        Som<|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"None\",\n-                source_range: 104..107,\n-                delete: 104..107,\n-                insert: \"None\",\n-                kind: EnumVariant,\n-                detail: \"()\",\n-            },\n-            CompletionItem {\n-                label: \"Option\",\n-                source_range: 104..107,\n-                delete: 104..107,\n-                insert: \"Option\",\n-                kind: Enum,\n-            },\n-            CompletionItem {\n-                label: \"Some(\u2026)\",\n-                source_range: 104..107,\n-                delete: 104..107,\n-                insert: \"Some($0)\",\n-                kind: EnumVariant,\n-                lookup: \"Some\",\n-                detail: \"(T)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"Some\",\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+fn main(value: Option<i32>) {\n+    match value {\n+        Som<|>\n+    }\n+}\n+\"#,\n+            r#\"\n+enum Option<T> { Some(T), None }\n+use Option::*;\n+fn main(value: Option<i32>) {\n+    match value {\n+        Some($0)\n+    }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n     fn no_call_parens_if_fn_ptr_needed() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                fn somefn(with: u8, a: u8, lot: u8, of: u8, args: u8) {}\n+        mark::check!(no_call_parens_if_fn_ptr_needed);\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+fn foo(foo: u8, bar: u8) {}\n+struct ManualVtable { f: fn(u8, u8) }\n \n-                struct ManualVtable {\n-                    method: fn(u8, u8, u8, u8, u8),\n-                }\n+fn main() -> ManualVtable {\n+    ManualVtable { f: f<|> }\n+}\n+\"#,\n+            r#\"\n+fn foo(foo: u8, bar: u8) {}\n+struct ManualVtable { f: fn(u8, u8) }\n \n-                fn main() -> ManualVtable {\n-                    ManualVtable {\n-                        method: some<|>\n-                    }\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"ManualVtable\",\n-                source_range: 182..186,\n-                delete: 182..186,\n-                insert: \"ManualVtable\",\n-                kind: Struct,\n-            },\n-            CompletionItem {\n-                label: \"main\",\n-                source_range: 182..186,\n-                delete: 182..186,\n-                insert: \"main\",\n-                kind: Function,\n-                detail: \"fn main() -> ManualVtable\",\n-            },\n-            CompletionItem {\n-                label: \"somefn\",\n-                source_range: 182..186,\n-                delete: 182..186,\n-                insert: \"somefn\",\n-                kind: Function,\n-                detail: \"fn somefn(with: u8, a: u8, lot: u8, of: u8, args: u8)\",\n-            },\n-        ]\n-        \"###\n+fn main() -> ManualVtable {\n+    ManualVtable { f: foo }\n+}\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn arg_snippets_for_method_call() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                r\"\n-                struct S {}\n-                impl S {\n-                    fn foo(&self, x: i32) {}\n-                }\n-                fn bar(s: &S) {\n-                    s.f<|>\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo(\u2026)\",\n-                source_range: 74..75,\n-                delete: 74..75,\n-                insert: \"foo(${1:x})$0\",\n-                kind: Method,\n-                lookup: \"foo\",\n-                detail: \"fn foo(&self, x: i32)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n-        )\n-    }\n-\n-    #[test]\n-    fn no_arg_snippets_for_method_call() {\n-        assert_debug_snapshot!(\n-            do_reference_completion_with_options(\n-                r\"\n-                struct S {}\n-                impl S {\n-                    fn foo(&self, x: i32) {}\n-                }\n-                fn bar(s: &S) {\n-                    s.f<|>\n-                }\n-                \",\n-                CompletionConfig {\n-                    add_call_argument_snippets: false,\n-                    .. Default::default()\n-                }\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo(\u2026)\",\n-                source_range: 74..75,\n-                delete: 74..75,\n-                insert: \"foo($0)\",\n-                kind: Method,\n-                lookup: \"foo\",\n-                detail: \"fn foo(&self, x: i32)\",\n-                trigger_call_info: true,\n-            },\n-        ]\n-        \"###\n-        )\n-    }\n-\n-    #[test]\n-    fn dont_render_function_parens_in_use_item() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /lib.rs\n-                mod m { pub fn foo() {} }\n-                use crate::m::f<|>;\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"foo\",\n-                source_range: 40..41,\n-                delete: 40..41,\n-                insert: \"foo\",\n-                kind: Function,\n-                detail: \"pub fn foo()\",\n-            },\n-        ]\n-        \"###\n+    fn no_parens_in_use_item() {\n+        mark::check!(no_parens_in_use_item);\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+mod m { pub fn foo() {} }\n+use crate::m::f<|>;\n+\"#,\n+            r#\"\n+mod m { pub fn foo() {} }\n+use crate::m::foo;\n+\"#,\n         );\n     }\n \n     #[test]\n-    fn dont_render_function_parens_if_already_call() {\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /lib.rs\n-                fn frobnicate() {}\n-                fn main() {\n-                    frob<|>();\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"frobnicate\",\n-                source_range: 35..39,\n-                delete: 35..39,\n-                insert: \"frobnicate\",\n-                kind: Function,\n-                detail: \"fn frobnicate()\",\n-            },\n-            CompletionItem {\n-                label: \"main\",\n-                source_range: 35..39,\n-                delete: 35..39,\n-                insert: \"main\",\n-                kind: Function,\n-                detail: \"fn main()\",\n-            },\n-        ]\n-        \"###\n+    fn no_parens_in_call() {\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+fn foo(x: i32) {}\n+fn main() { f<|>(); }\n+\"#,\n+            r#\"\n+fn foo(x: i32) {}\n+fn main() { foo(); }\n+\"#,\n         );\n-        assert_debug_snapshot!(\n-            do_reference_completion(\n-                \"\n-                //- /lib.rs\n-                struct Foo {}\n-                impl Foo { fn new() -> Foo {} }\n-                fn main() {\n-                    Foo::ne<|>();\n-                }\n-                \"\n-            ),\n-            @r###\"\n-        [\n-            CompletionItem {\n-                label: \"new\",\n-                source_range: 67..69,\n-                delete: 67..69,\n-                insert: \"new\",\n-                kind: Function,\n-                detail: \"fn new() -> Foo\",\n-            },\n-        ]\n-        \"###\n+        check_edit(\n+            \"foo\",\n+            r#\"\n+struct Foo;\n+impl Foo { fn foo(&self){} }\n+fn f(foo: &Foo) { foo.f<|>(); }\n+\"#,\n+            r#\"\n+struct Foo;\n+impl Foo { fn foo(&self){} }\n+fn f(foo: &Foo) { foo.foo(); }\n+\"#,\n         );\n     }\n \n@@ -1450,54 +1306,4 @@ fn main() { foo(${1:foo}, ${2:bar}, ${3:ho_ge_})$0 }\n         \"###\n         );\n     }\n-\n-    #[test]\n-    fn no_keyword_autocompletion_on_line_comments() {\n-        assert_debug_snapshot!(\n-        do_completion(\n-                r\"\n-                    fn test() {\n-                        let x = 2; // A comment<|>\n-                    }\n-                    \",\n-                CompletionKind::Keyword\n-        ),\n-            @r###\"\n-            []\n-            \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn no_keyword_autocompletion_on_multi_line_comments() {\n-        assert_debug_snapshot!(\n-        do_completion(\n-                r\"\n-                    /*\n-                    Some multi-line comment<|>\n-                    */\n-                    \",\n-                CompletionKind::Keyword\n-        ),\n-            @r###\"\n-            []\n-            \"###\n-        );\n-    }\n-\n-    #[test]\n-    fn no_keyword_autocompletion_on_doc_comments() {\n-        assert_debug_snapshot!(\n-        do_completion(\n-                r\"\n-                    /// Some doc comment\n-                    /// let test<|> = 1\n-                    \",\n-                CompletionKind::Keyword\n-        ),\n-            @r###\"\n-            []\n-            \"###\n-        );\n-    }\n }"}, {"sha": "145d36c98bd8d4392cdf006a60d47bc75337d851", "filename": "crates/ra_ide/src/completion/test_utils.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fe16e1da695589d55f13b36644b7a56be7d09a48/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_ide%2Fsrc%2Fcompletion%2Ftest_utils.rs?ref=fe16e1da695589d55f13b36644b7a56be7d09a48", "patch": "@@ -57,10 +57,19 @@ pub(crate) fn completion_list_with_options(\n }\n \n pub(crate) fn check_edit(what: &str, ra_fixture_before: &str, ra_fixture_after: &str) {\n+    check_edit_with_config(what, ra_fixture_before, ra_fixture_after, &CompletionConfig::default())\n+}\n+\n+pub(crate) fn check_edit_with_config(\n+    what: &str,\n+    ra_fixture_before: &str,\n+    ra_fixture_after: &str,\n+    config: &CompletionConfig,\n+) {\n     let ra_fixture_after = trim_indent(ra_fixture_after);\n     let (analysis, position) = analysis_and_position(ra_fixture_before);\n     let completions: Vec<CompletionItem> =\n-        analysis.completions(&CompletionConfig::default(), position).unwrap().unwrap().into();\n+        analysis.completions(config, position).unwrap().unwrap().into();\n     let (completion,) = completions\n         .iter()\n         .filter(|it| it.lookup() == what)"}]}