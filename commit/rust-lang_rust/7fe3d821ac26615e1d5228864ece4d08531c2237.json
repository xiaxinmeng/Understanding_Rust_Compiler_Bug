{"sha": "7fe3d821ac26615e1d5228864ece4d08531c2237", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdmZTNkODIxYWMyNjYxNWUxZDUyMjg4NjRlY2U0ZDA4NTMxYzIyMzc=", "commit": {"author": {"name": "Paul Stansifer", "email": "paul.stansifer@gmail.com", "date": "2011-05-25T18:55:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T02:42:33Z"}, "message": "Add a map from def_id s to items in resolve::env.\nUse it to provide better error messages in the event of\nglob-importing the same name multiple times.", "tree": {"sha": "ac2c2f3333dfef83de5f362e7c77c122cee0e59e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ac2c2f3333dfef83de5f362e7c77c122cee0e59e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7fe3d821ac26615e1d5228864ece4d08531c2237", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7fe3d821ac26615e1d5228864ece4d08531c2237", "html_url": "https://github.com/rust-lang/rust/commit/7fe3d821ac26615e1d5228864ece4d08531c2237", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7fe3d821ac26615e1d5228864ece4d08531c2237/comments", "author": {"login": "paulstansifer", "id": 1431, "node_id": "MDQ6VXNlcjE0MzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1431?v=4", "gravatar_id": "", "url": "https://api.github.com/users/paulstansifer", "html_url": "https://github.com/paulstansifer", "followers_url": "https://api.github.com/users/paulstansifer/followers", "following_url": "https://api.github.com/users/paulstansifer/following{/other_user}", "gists_url": "https://api.github.com/users/paulstansifer/gists{/gist_id}", "starred_url": "https://api.github.com/users/paulstansifer/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/paulstansifer/subscriptions", "organizations_url": "https://api.github.com/users/paulstansifer/orgs", "repos_url": "https://api.github.com/users/paulstansifer/repos", "events_url": "https://api.github.com/users/paulstansifer/events{/privacy}", "received_events_url": "https://api.github.com/users/paulstansifer/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "54ca8565c96601a0ffa99cdf8f7f3d1550f39180", "url": "https://api.github.com/repos/rust-lang/rust/commits/54ca8565c96601a0ffa99cdf8f7f3d1550f39180", "html_url": "https://github.com/rust-lang/rust/commit/54ca8565c96601a0ffa99cdf8f7f3d1550f39180"}], "stats": {"total": 59, "additions": 58, "deletions": 1}, "files": [{"sha": "e14f1719e8640d645a99c88335ed902ad1690d4a", "filename": "src/comp/middle/resolve.rs", "status": "modified", "additions": 24, "deletions": 1, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/7fe3d821ac26615e1d5228864ece4d08531c2237/src%2Fcomp%2Fmiddle%2Fresolve.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe3d821ac26615e1d5228864ece4d08531c2237/src%2Fcomp%2Fmiddle%2Fresolve.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fresolve.rs?ref=7fe3d821ac26615e1d5228864ece4d08531c2237", "patch": "@@ -88,6 +88,7 @@ type def_map = hashmap[uint,def];\n \n type env = rec(crate_map crate_map,\n                def_map def_map,\n+               hashmap[def_id,@ast::item] ast_map,\n                hashmap[ast::def_num,import_state] imports,\n                hashmap[ast::def_num,@indexed_mod] mod_map,\n                hashmap[def_id,vec[ident]] ext_map,\n@@ -107,6 +108,7 @@ tag namespace {\n fn resolve_crate(session sess, @ast::crate crate) -> def_map {\n     auto e = @rec(crate_map = new_uint_hash[ast::crate_num](),\n                   def_map = new_uint_hash[def](),\n+                  ast_map = new_def_hash[@ast::item](),\n                   imports = new_int_hash[import_state](),\n                   mod_map = new_int_hash[@indexed_mod](),\n                   ext_map = new_def_hash[vec[ident]](),\n@@ -157,14 +159,31 @@ fn map_crate(&@env e, &ast::crate c) {\n                 e.mod_map.insert(defid._1, \n                                  @rec(m=some(md), index=index_mod(md),\n                                       glob_imports=vec::empty[def]()));\n+                e.ast_map.insert(defid, i);\n             }\n             case (ast::item_native_mod(_, ?nmd, ?defid)) {\n                 e.mod_map.insert(defid._1, \n                                  @rec(m=none[ast::_mod], \n                                       index=index_nmod(nmd),\n                                       glob_imports=vec::empty[def]()));\n+                e.ast_map.insert(defid, i);\n+            }\n+            case (ast::item_const(_, _, _, ?defid, _)) {\n+                e.ast_map.insert(defid, i);\n+            }\n+            case (ast::item_fn(_, _, _, ?defid, _)) { \n+                e.ast_map.insert(defid, i);\n+            }\n+            case (ast::item_ty(_, _, _, ?defid, _)) {\n+                e.ast_map.insert(defid, i);\n+            }\n+            case (ast::item_tag(_, _, _, ?defid, _)) {\n+                e.ast_map.insert(defid, i);\n+            }\n+            case (ast::item_obj(_, _, _, ?obj_def_ids, _)) { \n+                e.ast_map.insert(obj_def_ids.ty, i);\n+                e.ast_map.insert(obj_def_ids.ctor, i);\n             }\n-            case (_) {}\n         }\n     }\n \n@@ -899,6 +918,10 @@ fn lookup_glob_in_mod(&env e, @indexed_mod info, list[def] m, &span sp,\n     } else if (vec::len(matches) == 1u){\n         ret some[def](matches.(0));\n     } else {\n+        for (def match in matches) {\n+            e.sess.span_note(e.ast_map.get(ast::def_id_of_def(match)).span,\n+                             \"'\" + id + \"' is defined here.\");\n+        }\n         e.sess.span_err(sp, \"'\" + id + \"' is glob-imported from\" +\n                         \" multiple different modules.\");\n         fail;"}, {"sha": "c4064ac5da7dd4da9622d1701bd49eaea0fdd1a3", "filename": "src/test/compile-fail/import-glob-multiple.rs", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/7fe3d821ac26615e1d5228864ece4d08531c2237/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7fe3d821ac26615e1d5228864ece4d08531c2237/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fimport-glob-multiple.rs?ref=7fe3d821ac26615e1d5228864ece4d08531c2237", "patch": "@@ -0,0 +1,34 @@\n+// error-pattern: common2\n+\n+import mod1::*;\n+import mod2::*;\n+\n+mod mod1 {\n+  fn f1() {\n+    log \"f1\";\n+  }\n+  fn common1() {\n+    log \"common\"\n+  }\n+  fn common2() {\n+    log \"common\"\n+  }\n+}\n+\n+mod mod2 {\n+  fn f2() {\n+    log \"f1\";\n+  }\n+  fn common1() {\n+    log \"common\"\n+  }\n+  fn common2() {\n+    log \"common\"\n+  }\n+}\n+\n+\n+\n+fn main() {\n+  common2();\n+}\n\\ No newline at end of file"}]}