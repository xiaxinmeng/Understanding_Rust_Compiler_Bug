{"sha": "0e98621e69890d67d906a436a68436d03a3edb89", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlOTg2MjFlNjk4OTBkNjdkOTA2YTQzNmE2ODQzNmQwM2EzZWRiODk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T10:41:41Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-08-30T10:41:41Z"}, "message": "Auto merge of #53757 - oli-obk:validation, r=RalfJung\n\nUse partial but correct vtable layout\n\nr? @RalfJung who suggested to also do this change for nightly, not just beta", "tree": {"sha": "b336896571fc1e994297f15234dfdf277be1239c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b336896571fc1e994297f15234dfdf277be1239c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0e98621e69890d67d906a436a68436d03a3edb89", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0e98621e69890d67d906a436a68436d03a3edb89", "html_url": "https://github.com/rust-lang/rust/commit/0e98621e69890d67d906a436a68436d03a3edb89", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0e98621e69890d67d906a436a68436d03a3edb89/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "03fe4c79f7cb4b2879277ef8ec123091c4414c6b", "url": "https://api.github.com/repos/rust-lang/rust/commits/03fe4c79f7cb4b2879277ef8ec123091c4414c6b", "html_url": "https://github.com/rust-lang/rust/commit/03fe4c79f7cb4b2879277ef8ec123091c4414c6b"}, {"sha": "f318ba2d2fb542e0b1df9be38671dc64e3c07ab5", "url": "https://api.github.com/repos/rust-lang/rust/commits/f318ba2d2fb542e0b1df9be38671dc64e3c07ab5", "html_url": "https://github.com/rust-lang/rust/commit/f318ba2d2fb542e0b1df9be38671dc64e3c07ab5"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "4524c486272b54e563bd62578b15e777616d4aad", "filename": "src/librustc/ty/layout.rs", "status": "modified", "additions": 9, "deletions": 10, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/0e98621e69890d67d906a436a68436d03a3edb89/src%2Flibrustc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e98621e69890d67d906a436a68436d03a3edb89/src%2Flibrustc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Flayout.rs?ref=0e98621e69890d67d906a436a68436d03a3edb89", "patch": "@@ -1621,20 +1621,19 @@ impl<'a, 'tcx, C> TyLayoutMethods<'tcx, C> for Ty<'tcx>\n                 match tcx.struct_tail(pointee).sty {\n                     ty::Slice(_) |\n                     ty::Str => tcx.types.usize,\n-                    ty::Dynamic(data, _) => {\n-                        let trait_def_id = data.principal().unwrap().def_id();\n-                        let num_fns: u64 = crate::traits::supertrait_def_ids(tcx, trait_def_id)\n-                            .map(|trait_def_id| {\n-                                tcx.associated_items(trait_def_id)\n-                                    .filter(|item| item.kind == ty::AssociatedKind::Method)\n-                                    .count() as u64\n-                            })\n-                            .sum();\n+                    ty::Dynamic(_, _) => {\n                         tcx.mk_imm_ref(\n                             tcx.types.re_static,\n-                            tcx.mk_array(tcx.types.usize, 3 + num_fns),\n+                            tcx.mk_array(tcx.types.usize, 3),\n                         )\n                         /* FIXME use actual fn pointers\n+                        Warning: naively computing the number of entries in the\n+                        vtable by counting the methods on the trait + methods on\n+                        all parent traits does not work, because some methods can\n+                        be not object safe and thus excluded from the vtable.\n+                        Increase this counter if you tried to implement this but\n+                        failed to do it without duplicating a lot of code from\n+                        other places in the compiler: 2\n                         tcx.mk_tup(&[\n                             tcx.mk_array(tcx.types.usize, 3),\n                             tcx.mk_array(Option<fn()>),"}, {"sha": "0bd021f8ae2d68a90127754ec2a9e1719a339e27", "filename": "src/test/codegen/function-arguments.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/0e98621e69890d67d906a436a68436d03a3edb89/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e98621e69890d67d906a436a68436d03a3edb89/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcodegen%2Ffunction-arguments.rs?ref=0e98621e69890d67d906a436a68436d03a3edb89", "patch": "@@ -120,13 +120,13 @@ pub fn unsafe_slice(_: &[UnsafeInner]) {\n pub fn str(_: &[u8]) {\n }\n \n-// CHECK: @trait_borrow({}* nonnull %arg0.0, [4 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}) %arg0.1)\n+// CHECK: @trait_borrow({}* nonnull %arg0.0, [3 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}) %arg0.1)\n // FIXME #25759 This should also have `nocapture`\n #[no_mangle]\n pub fn trait_borrow(_: &Drop) {\n }\n \n-// CHECK: @trait_box({}* noalias nonnull, [4 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}))\n+// CHECK: @trait_box({}* noalias nonnull, [3 x [[USIZE]]]* noalias readonly dereferenceable({{.*}}))\n #[no_mangle]\n pub fn trait_box(_: Box<Drop>) {\n }"}, {"sha": "cb74f4f8f75f371895c5b9c5e2b44bf2fc13578d", "filename": "src/test/ui/consts/const-eval/issue-53401.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/0e98621e69890d67d906a436a68436d03a3edb89/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "raw_url": "https://github.com/rust-lang/rust/raw/0e98621e69890d67d906a436a68436d03a3edb89/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fissue-53401.rs?ref=0e98621e69890d67d906a436a68436d03a3edb89", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-pass\n+\n+pub const STATIC_TRAIT: &Test = &();\n+\n+fn main() {}\n+\n+pub trait Test {\n+    fn test() where Self: Sized {}\n+}\n+\n+impl Test for () {}"}]}