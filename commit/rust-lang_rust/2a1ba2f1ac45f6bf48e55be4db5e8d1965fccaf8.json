{"sha": "2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJhMWJhMmYxYWM0NWY2YmY0OGU1NWJlNGRiNWU4ZDE5NjVmY2NhZjg=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-05T21:01:04Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-01-06T02:50:22Z"}, "message": "Permit method calls based on where clauses.", "tree": {"sha": "e40703073db7bc206f3f6fd6372a3507afb292cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e40703073db7bc206f3f6fd6372a3507afb292cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "html_url": "https://github.com/rust-lang/rust/commit/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "url": "https://api.github.com/repos/rust-lang/rust/commits/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62", "html_url": "https://github.com/rust-lang/rust/commit/c7dd3c4d69aee1c4ad8cc220c194b176bba2ab62"}], "stats": {"total": 81, "additions": 78, "deletions": 3}, "files": [{"sha": "b1dc033b567bbf659f58053bb30d68b553c33efe", "filename": "src/librustc_typeck/check/callee.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcallee.rs?ref=2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "patch": "@@ -22,7 +22,7 @@ use super::TupleArgumentsFlag;\n use super::write_call;\n \n use middle::infer;\n-use middle::ty::{mod, Ty};\n+use middle::ty::{self, Ty};\n use syntax::ast;\n use syntax::codemap::Span;\n use syntax::parse::token;"}, {"sha": "94e535cf2ef95f4aaf226b3d212f9e26a0ad0023", "filename": "src/librustc_typeck/check/method/probe.rs", "status": "modified", "additions": 35, "deletions": 2, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fprobe.rs?ref=2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "patch": "@@ -442,7 +442,7 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n \n     fn assemble_extension_candidates_for_trait(&mut self,\n                                                trait_def_id: ast::DefId) {\n-        debug!(\"assemble_extension_candidates_for_trait: trait_def_id={}\",\n+        debug!(\"assemble_extension_candidates_for_trait(trait_def_id={})\",\n                trait_def_id.repr(self.tcx()));\n \n         // Check whether `trait_def_id` defines a method with suitable name:\n@@ -471,8 +471,12 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n                                                            matching_index);\n \n         self.assemble_unboxed_closure_candidates(trait_def_id,\n-                                                 method,\n+                                                 method.clone(),\n                                                  matching_index);\n+\n+        self.assemble_where_clause_candidates(trait_def_id,\n+                                              method,\n+                                              matching_index);\n     }\n \n     fn assemble_extension_candidates_for_trait_impls(&mut self,\n@@ -599,6 +603,35 @@ impl<'a,'tcx> ProbeContext<'a,'tcx> {\n         }\n     }\n \n+    fn assemble_where_clause_candidates(&mut self,\n+                                        trait_def_id: ast::DefId,\n+                                        method_ty: Rc<ty::Method<'tcx>>,\n+                                        method_index: uint)\n+    {\n+        debug!(\"assemble_where_clause_candidates(trait_def_id={})\",\n+               trait_def_id.repr(self.tcx()));\n+\n+        // Check whether there are any where-clauses pertaining to this trait.\n+        let caller_predicates =\n+            self.fcx.inh.param_env.caller_bounds.predicates.as_slice().to_vec();\n+        for bound in traits::elaborate_predicates(self.tcx(), caller_predicates)\n+                     .filter_map(|p| p.to_opt_poly_trait_ref())\n+                     .filter(|b| b.def_id() == trait_def_id)\n+        {\n+            let xform_self_ty = self.xform_self_ty(&method_ty, bound.substs());\n+\n+            debug!(\"assemble_where_clause_candidates: bound={} xform_self_ty={}\",\n+                   bound.repr(self.tcx()),\n+                   xform_self_ty.repr(self.tcx()));\n+\n+            self.extension_candidates.push(Candidate {\n+                xform_self_ty: xform_self_ty,\n+                method_ty: method_ty.clone(),\n+                kind: WhereClauseCandidate(bound, method_index)\n+            });\n+        }\n+    }\n+\n     ///////////////////////////////////////////////////////////////////////////\n     // THE ACTUAL SEARCH\n "}, {"sha": "4361c22f55a8a00b2681419d3b6bba808ac52b4f", "filename": "src/test/run-pass/method-where-clause.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmethod-where-clause.rs?ref=2a1ba2f1ac45f6bf48e55be4db5e8d1965fccaf8", "patch": "@@ -0,0 +1,42 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that we can use method notation to call methods based on a\n+// where clause type, and not only type parameters.\n+\n+trait Foo {\n+    fn foo(&self) -> int;\n+}\n+\n+impl Foo for Option<int>\n+{\n+    fn foo(&self) -> int {\n+        self.unwrap_or(22)\n+    }\n+}\n+\n+impl Foo for Option<uint>\n+{\n+    fn foo(&self) -> int {\n+        self.unwrap_or(22) as int\n+    }\n+}\n+\n+fn check<T>(x: Option<T>) -> (int, int)\n+    where Option<T> : Foo\n+{\n+    let y: Option<T> = None;\n+    (x.foo(), y.foo())\n+}\n+\n+fn main() {\n+    assert_eq!(check(Some(23u)), (23i, 22i));\n+    assert_eq!(check(Some(23i)), (23i, 22i));\n+}"}]}