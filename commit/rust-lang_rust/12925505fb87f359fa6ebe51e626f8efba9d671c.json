{"sha": "12925505fb87f359fa6ebe51e626f8efba9d671c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyOTI1NTA1ZmI4N2YzNTlmYTZlYmU1MWU2MjZmOGVmYmE5ZDY3MWM=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-27T20:36:23Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-04-27T20:36:23Z"}, "message": "Cache sha1 values of types, use seq-based mangling for glue as it's private anyways.", "tree": {"sha": "3b0fcdad71549274b3c42f31e77fd750cf75b8d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b0fcdad71549274b3c42f31e77fd750cf75b8d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12925505fb87f359fa6ebe51e626f8efba9d671c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12925505fb87f359fa6ebe51e626f8efba9d671c", "html_url": "https://github.com/rust-lang/rust/commit/12925505fb87f359fa6ebe51e626f8efba9d671c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12925505fb87f359fa6ebe51e626f8efba9d671c/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c7886de8008b07e892ea741be08291dae38f7bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c7886de8008b07e892ea741be08291dae38f7bd", "html_url": "https://github.com/rust-lang/rust/commit/4c7886de8008b07e892ea741be08291dae38f7bd"}], "stats": {"total": 27, "additions": 17, "deletions": 10}, "files": [{"sha": "3e316ab4a244f109548220beb4be9b0828a7f006", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 17, "deletions": 10, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/12925505fb87f359fa6ebe51e626f8efba9d671c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12925505fb87f359fa6ebe51e626f8efba9d671c/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=12925505fb87f359fa6ebe51e626f8efba9d671c", "patch": "@@ -113,6 +113,7 @@ state type crate_ctxt = rec(session.session sess,\n                             @glue_fns glues,\n                             namegen names,\n                             std.sha1.sha1 sha,\n+                            hashmap[ty.t, str] type_sha1s,\n                             ty.ctxt tcx);\n \n type local_ctxt = rec(vec[str] path,\n@@ -182,15 +183,19 @@ fn path_name(vec[str] path) -> str {\n \n \n fn mangle_name_by_type(@crate_ctxt ccx, vec[str] path, ty.t t) -> str {\n-    ccx.sha.reset();\n-\n-    auto f = metadata.def_to_str;\n-    auto cx = @rec(ds=f, tcx=ccx.tcx);\n-    ccx.sha.input_str(metadata.Encode.ty_str(cx, t));\n-\n-    ret sep() + \"rust\" + sep()\n-        + _str.substr(ccx.sha.result_str(), 0u, 16u) + sep()\n-        + path_name(path);\n+    auto hash = \"\";\n+    alt (ccx.type_sha1s.find(t)) {\n+        case (some[str](?h)) { hash = h; }\n+        case (none[str]) {\n+            ccx.sha.reset();\n+            auto f = metadata.def_to_str;\n+            auto cx = @rec(ds=f, tcx=ccx.tcx);\n+            ccx.sha.input_str(metadata.Encode.ty_str(cx, t));\n+            hash = _str.substr(ccx.sha.result_str(), 0u, 16u);\n+            ccx.type_sha1s.insert(t, hash);\n+        }\n+    }\n+    ret sep() + \"rust\" + sep() + hash + sep() + path_name(path);\n }\n \n fn mangle_name_by_seq(@crate_ctxt ccx, vec[str] path, str flav) -> str {\n@@ -1721,7 +1726,7 @@ fn declare_generic_glue(@local_ctxt cx,\n                         TypeRef llfnty,\n                         str name) -> ValueRef {\n     auto gcx = @rec(path=vec(\"glue\", name) with *cx);\n-    auto fn_nm = mangle_name_by_type(cx.ccx, cx.path + vec(\"glue\", name), t);\n+    auto fn_nm = mangle_name_by_seq(cx.ccx, cx.path, \"glue\");\n     fn_nm = sanitize(fn_nm);\n     auto llfn = decl_internal_fastcall_fn(cx.ccx.llmod, fn_nm, llfnty);\n     ret llfn;\n@@ -7603,6 +7608,7 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n     auto tag_sizes = map.mk_hashmap[ty.t,uint](hasher, eqer);\n     auto tydescs = map.mk_hashmap[ty.t,@tydesc_info](hasher, eqer);\n     auto lltypes = map.mk_hashmap[ty.t,TypeRef](hasher, eqer);\n+    auto sha1s = map.mk_hashmap[ty.t,str](hasher, eqer);\n \n     auto ccx = @rec(sess = sess,\n                     llmod = llmod,\n@@ -7628,6 +7634,7 @@ fn trans_crate(session.session sess, @ast.crate crate, ty.ctxt tcx,\n                     glues = glues,\n                     names = namegen(0),\n                     sha = std.sha1.mk_sha1(),\n+                    type_sha1s = sha1s,\n                     tcx = tcx);\n     auto cx = new_local_ctxt(ccx);\n "}]}