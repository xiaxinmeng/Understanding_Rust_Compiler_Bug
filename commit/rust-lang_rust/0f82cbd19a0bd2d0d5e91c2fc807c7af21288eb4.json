{"sha": "0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBmODJjYmQxOWEwYmQyZDBkNWU5MWMyZmM4MDdjN2FmMjEyODhlYjQ=", "commit": {"author": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-06T17:09:54Z"}, "committer": {"name": "Corey Richardson", "email": "corey@octayn.net", "date": "2013-12-10T14:43:35Z"}, "message": "Clarify `as`, mention transmute.", "tree": {"sha": "24b7a6bec8532da7257b06c18bddb9e9b00bdd51", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/24b7a6bec8532da7257b06c18bddb9e9b00bdd51"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4", "html_url": "https://github.com/rust-lang/rust/commit/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4/comments", "author": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "committer": {"login": "emberian", "id": 704250, "node_id": "MDQ6VXNlcjcwNDI1MA==", "avatar_url": "https://avatars.githubusercontent.com/u/704250?v=4", "gravatar_id": "", "url": "https://api.github.com/users/emberian", "html_url": "https://github.com/emberian", "followers_url": "https://api.github.com/users/emberian/followers", "following_url": "https://api.github.com/users/emberian/following{/other_user}", "gists_url": "https://api.github.com/users/emberian/gists{/gist_id}", "starred_url": "https://api.github.com/users/emberian/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/emberian/subscriptions", "organizations_url": "https://api.github.com/users/emberian/orgs", "repos_url": "https://api.github.com/users/emberian/repos", "events_url": "https://api.github.com/users/emberian/events{/privacy}", "received_events_url": "https://api.github.com/users/emberian/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d00a407e00a28a3607ff363cfcc1166eb4559673", "url": "https://api.github.com/repos/rust-lang/rust/commits/d00a407e00a28a3607ff363cfcc1166eb4559673", "html_url": "https://github.com/rust-lang/rust/commit/d00a407e00a28a3607ff363cfcc1166eb4559673"}], "stats": {"total": 16, "additions": 10, "deletions": 6}, "files": [{"sha": "14dfc8841220ef4fc745a2c9f5b8ca9e72d18dbe", "filename": "doc/tutorial.md", "status": "modified", "additions": 10, "deletions": 6, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4/doc%2Ftutorial.md", "raw_url": "https://github.com/rust-lang/rust/raw/0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4/doc%2Ftutorial.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Ftutorial.md?ref=0f82cbd19a0bd2d0d5e91c2fc807c7af21288eb4", "patch": "@@ -361,24 +361,28 @@ Rust's set of operators contains very few surprises. Arithmetic is done with\n also a unary prefix operator that negates numbers. As in C, the bitwise operators\n `>>`, `<<`, `&`, `|`, and `^` are also supported.\n \n-Note that, if applied to an integer value, `!` flips all the bits (like `~` in\n-C).\n+Note that, if applied to an integer value, `!` flips all the bits (bitwise\n+NOT, like `~` in C).\n \n The comparison operators are the traditional `==`, `!=`, `<`, `>`,\n `<=`, and `>=`. Short-circuiting (lazy) boolean operators are written\n `&&` (and) and `||` (or).\n \n-For type casting, Rust uses the binary `as` operator.  It takes an\n-expression on the left side and a type on the right side and will,\n-if a meaningful conversion exists, convert the result of the\n-expression to the given type.\n+For compile-time type casting, Rust uses the binary `as` operator.  It takes\n+an expression on the left side and a type on the right side and will, if a\n+meaningful conversion exists, convert the result of the expression to the\n+given type. Generally, `as` is only used with the primitive numeric types or\n+pointers, and is not overloadable.  [`transmute`][transmute] can be used for\n+unsafe C-like casting of same-sized types.\n \n ~~~~\n let x: f64 = 4.0;\n let y: uint = x as uint;\n assert!(y == 4u);\n ~~~~\n \n+[transmute]: http://static.rust-lang.org/doc/master/std/cast/fn.transmute.html\n+\n ## Syntax extensions\n \n *Syntax extensions* are special forms that are not built into the language,"}]}