{"sha": "9225ebd7864876771b996e60a7ddda0be5a6f623", "node_id": "C_kwDOAAsO6NoAKDkyMjVlYmQ3ODY0ODc2NzcxYjk5NmU2MGE3ZGRkYTBiZTVhNmY2MjM", "commit": {"author": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-06-02T14:39:47Z"}, "committer": {"name": "Ding Xiang Fei", "email": "dingxiangfei2009@protonmail.ch", "date": "2022-07-11T21:20:36Z"}, "message": "lower let-else in MIR instead", "tree": {"sha": "64075f540899c7e2c7640501d7474595d2a4ec85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/64075f540899c7e2c7640501d7474595d2a4ec85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9225ebd7864876771b996e60a7ddda0be5a6f623", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9225ebd7864876771b996e60a7ddda0be5a6f623", "html_url": "https://github.com/rust-lang/rust/commit/9225ebd7864876771b996e60a7ddda0be5a6f623", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9225ebd7864876771b996e60a7ddda0be5a6f623/comments", "author": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "committer": {"login": "dingxiangfei2009", "id": 6884440, "node_id": "MDQ6VXNlcjY4ODQ0NDA=", "avatar_url": "https://avatars.githubusercontent.com/u/6884440?v=4", "gravatar_id": "", "url": "https://api.github.com/users/dingxiangfei2009", "html_url": "https://github.com/dingxiangfei2009", "followers_url": "https://api.github.com/users/dingxiangfei2009/followers", "following_url": "https://api.github.com/users/dingxiangfei2009/following{/other_user}", "gists_url": "https://api.github.com/users/dingxiangfei2009/gists{/gist_id}", "starred_url": "https://api.github.com/users/dingxiangfei2009/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/dingxiangfei2009/subscriptions", "organizations_url": "https://api.github.com/users/dingxiangfei2009/orgs", "repos_url": "https://api.github.com/users/dingxiangfei2009/repos", "events_url": "https://api.github.com/users/dingxiangfei2009/events{/privacy}", "received_events_url": "https://api.github.com/users/dingxiangfei2009/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1e033a9818b305b9b22e26e18c81729099aa9c19", "url": "https://api.github.com/repos/rust-lang/rust/commits/1e033a9818b305b9b22e26e18c81729099aa9c19", "html_url": "https://github.com/rust-lang/rust/commit/1e033a9818b305b9b22e26e18c81729099aa9c19"}], "stats": {"total": 119, "additions": 66, "deletions": 53}, "files": [{"sha": "93ce3b30fb1d36d3946f6e39571ed328a425a79b", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -505,7 +505,7 @@ fn is_relevant_block(cx: &LateContext<'_>, typeck_results: &ty::TypeckResults<'_\n             .as_ref()\n             .map_or(false, |e| is_relevant_expr(cx, typeck_results, e)),\n         |stmt| match &stmt.kind {\n-            StmtKind::Local(_) => true,\n+            StmtKind::Local(_, _) => true,\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => is_relevant_expr(cx, typeck_results, expr),\n             StmtKind::Item(_) => false,\n         },"}, {"sha": "0b9fdb891b15cc6882eb2151ce316e7371ce9aee", "filename": "clippy_lints/src/copies.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fcopies.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fcopies.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcopies.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -324,7 +324,7 @@ impl BlockEq {\n \n /// If the statement is a local, checks if the bound names match the expected list of names.\n fn eq_binding_names(s: &Stmt<'_>, names: &[(HirId, Symbol)]) -> bool {\n-    if let StmtKind::Local(l) = s.kind {\n+    if let StmtKind::Local(l, _) = s.kind {\n         let mut i = 0usize;\n         let mut res = true;\n         l.pat.each_binding_or_first(&mut |_, _, _, name| {\n@@ -349,7 +349,7 @@ fn eq_stmts(\n     eq: &mut HirEqInterExpr<'_, '_, '_>,\n     moved_bindings: &mut Vec<(HirId, Symbol)>,\n ) -> bool {\n-    (if let StmtKind::Local(l) = stmt.kind {\n+    (if let StmtKind::Local(l, _) = stmt.kind {\n         let old_count = moved_bindings.len();\n         l.pat.each_binding_or_first(&mut |_, id, _, name| {\n             moved_bindings.push((id, name.name));\n@@ -435,7 +435,7 @@ fn scan_block_for_eq(cx: &LateContext<'_>, _conds: &[&Expr<'_>], block: &Block<'\n                 // Clear out all locals seen at the end so far. None of them can be moved.\n                 let stmts = &blocks[0].stmts;\n                 for stmt in &stmts[stmts.len() - init..=stmts.len() - offset] {\n-                    if let StmtKind::Local(l) = stmt.kind {\n+                    if let StmtKind::Local(l, _) = stmt.kind {\n                         l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                             eq.locals.remove(&id);\n                         });"}, {"sha": "7fe3443858a01296580931e1b513afcdc92b0d8d", "filename": "clippy_lints/src/default.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fdefault.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fdefault.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -126,7 +126,7 @@ impl<'tcx> LateLintPass<'tcx> for Default {\n             // checked and the name of the bound variable\n             let (local, variant, binding_name, binding_type, span) = if_chain! {\n                 // only take `let ...` statements\n-                if let StmtKind::Local(local) = stmt.kind;\n+                if let StmtKind::Local(local, _) = stmt.kind;\n                 if let Some(expr) = local.init;\n                 if !any_parent_is_automatically_derived(cx.tcx, expr.hir_id);\n                 if !expr.span.from_expansion();"}, {"sha": "0f374d12a84f68b1de54a570244acedde20b8b4b", "filename": "clippy_lints/src/default_numeric_fallback.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdefault_numeric_fallback.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -192,7 +192,7 @@ impl<'a, 'tcx> Visitor<'tcx> for NumericFallbackVisitor<'a, 'tcx> {\n \n     fn visit_stmt(&mut self, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 if local.ty.is_some() {\n                     self.ty_bounds.push(TyBound::Any);\n                 } else {"}, {"sha": "e0986b710c5086659b40a00f5854533bfd9381ed", "filename": "clippy_lints/src/entry.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fentry.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -386,7 +386,7 @@ impl<'tcx> Visitor<'tcx> for InsertSearcher<'_, 'tcx> {\n                 }\n             },\n             StmtKind::Expr(e) => self.visit_expr(e),\n-            StmtKind::Local(l) => {\n+            StmtKind::Local(l, _) => {\n                 self.visit_pat(l.pat);\n                 if let Some(e) = l.init {\n                     self.allow_insert_closure &= !self.in_tail_pos;"}, {"sha": "bd1ac3371b0636e74251a2728d0d8c049f660c35", "filename": "clippy_lints/src/explicit_write.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fexplicit_write.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fexplicit_write.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fexplicit_write.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -116,7 +116,7 @@ fn look_in_block<'tcx, 'hir>(cx: &LateContext<'tcx>, kind: &'tcx ExprKind<'hir>)\n     if_chain! {\n         if let ExprKind::Block(block, _label @ None) = kind;\n         if let Block {\n-            stmts: [Stmt { kind: StmtKind::Local(local), .. }],\n+            stmts: [Stmt { kind: StmtKind::Local(local, _), .. }],\n             expr: Some(expr_end_of_block),\n             rules: BlockCheckMode::DefaultBlock,\n             .."}, {"sha": "5dcb86feb7622a6e3d38283f6b33ce05dd21b67a", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -62,7 +62,7 @@ impl<'tcx> LateLintPass<'tcx> for LetIfSeq {\n         while let Some(stmt) = it.next() {\n             if_chain! {\n                 if let Some(expr) = it.peek();\n-                if let hir::StmtKind::Local(local) = stmt.kind;\n+                if let hir::StmtKind::Local(local, _) = stmt.kind;\n                 if let hir::PatKind::Binding(mode, canonical_id, ident, None) = local.pat.kind;\n                 if let hir::StmtKind::Expr(if_) = expr.kind;\n                 if let hir::ExprKind::If(hir::Expr { kind: hir::ExprKind::DropTemps(cond), ..}, then, else_) = if_.kind;"}, {"sha": "a37dfb7b7151d633043b3aa0d54591133d2be76b", "filename": "clippy_lints/src/let_underscore.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Flet_underscore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Flet_underscore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_underscore.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -2,7 +2,7 @@ use clippy_utils::diagnostics::span_lint_and_help;\n use clippy_utils::ty::{is_must_use_ty, match_type};\n use clippy_utils::{is_must_use_func_call, paths};\n use if_chain::if_chain;\n-use rustc_hir::{Local, PatKind};\n+use rustc_hir::{Block, Local, PatKind};\n use rustc_lint::{LateContext, LateLintPass};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n@@ -109,7 +109,7 @@ const SYNC_GUARD_PATHS: [&[&str]; 6] = [\n ];\n \n impl<'tcx> LateLintPass<'tcx> for LetUnderscore {\n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n         if in_external_macro(cx.tcx.sess, local.span) {\n             return;\n         }"}, {"sha": "ba0f01d9ed25b6b0dc9f18ea7c96f7804661ec10", "filename": "clippy_lints/src/loops/needless_collect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fneedless_collect.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -76,7 +76,7 @@ fn check_needless_collect_indirect_usage<'tcx>(expr: &'tcx Expr<'_>, cx: &LateCo\n     if let ExprKind::Block(block, _) = expr.kind {\n         for stmt in block.stmts {\n             if_chain! {\n-                if let StmtKind::Local(local) = stmt.kind;\n+                if let StmtKind::Local(local, _) = stmt.kind;\n                 if let PatKind::Binding(_, id, ..) = local.pat.kind;\n                 if let Some(init_expr) = local.init;\n                 if let ExprKind::MethodCall(method_name, &[ref iter_source], ..) = init_expr.kind;\n@@ -276,7 +276,7 @@ fn get_expr_and_hir_id_from_stmt<'v>(stmt: &'v Stmt<'v>) -> Option<(&'v Expr<'v>\n     match stmt.kind {\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => Some((expr, None)),\n         StmtKind::Item(..) => None,\n-        StmtKind::Local(Local { init, pat, .. }) => {\n+        StmtKind::Local(Local { init, pat, .. }, _) => {\n             if let PatKind::Binding(_, hir_id, ..) = pat.kind {\n                 init.map(|init_expr| (init_expr, Some(hir_id)))\n             } else {"}, {"sha": "c60d55180606796547b0f9f9019846d19d26a76f", "filename": "clippy_lints/src/loops/never_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fnever_loop.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -104,7 +104,7 @@ fn never_loop_expr_seq<'a, T: Iterator<Item = &'a Expr<'a>>>(es: &mut T, main_lo\n fn stmt_to_expr<'tcx>(stmt: &Stmt<'tcx>) -> Option<&'tcx Expr<'tcx>> {\n     match stmt.kind {\n         StmtKind::Semi(e, ..) | StmtKind::Expr(e, ..) => Some(e),\n-        StmtKind::Local(local) => local.init,\n+        StmtKind::Local(local, _) => local.init,\n         StmtKind::Item(..) => None,\n     }\n }"}, {"sha": "661af8fe642f9e78bd92e9e055abf48f40315fd1", "filename": "clippy_lints/src/loops/utils.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Futils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Futils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Futils.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -4,7 +4,7 @@ use if_chain::if_chain;\n use rustc_ast::ast::{LitIntType, LitKind};\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, walk_local, walk_pat, walk_stmt, Visitor};\n-use rustc_hir::{BinOpKind, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n+use rustc_hir::{BinOpKind, Block, BorrowKind, Expr, ExprKind, HirId, HirIdMap, Local, Mutability, Pat, PatKind, Stmt};\n use rustc_lint::LateContext;\n use rustc_middle::hir::nested_filter;\n use rustc_middle::ty::{self, Ty};\n@@ -148,7 +148,7 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n     type NestedFilter = nested_filter::OnlyBodies;\n \n-    fn visit_local(&mut self, l: &'tcx Local<'_>) {\n+    fn visit_local(&mut self, l: &'tcx Local<'_>, e: Option<&'tcx Block<'_>>) {\n         // Look for declarations of the variable\n         if_chain! {\n             if l.pat.hir_id == self.var_id;\n@@ -166,7 +166,7 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             }\n         }\n \n-        walk_local(self, l);\n+        walk_local(self, l, e);\n     }\n \n     fn visit_expr(&mut self, expr: &'tcx Expr<'_>) {"}, {"sha": "8c3524942520b6b7836ac0a6a70d76b8cf255d26", "filename": "clippy_lints/src/loops/while_let_loop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_loop.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -11,7 +11,7 @@ use rustc_lint::LateContext;\n pub(super) fn check<'tcx>(cx: &LateContext<'tcx>, expr: &'tcx Expr<'_>, loop_block: &'tcx Block<'_>) {\n     let (init, has_trailing_exprs) = match (loop_block.stmts, loop_block.expr) {\n         ([stmt, stmts @ ..], expr) => {\n-            if let StmtKind::Local(&Local { init: Some(e), .. }) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n+            if let StmtKind::Local(&Local { init: Some(e), .. }, None) | StmtKind::Semi(e) | StmtKind::Expr(e) = stmt.kind {\n                 (e, !stmts.is_empty() || expr.is_some())\n             } else {\n                 return;"}, {"sha": "1abdfaac7ec64279e08f140d6458b9ef9e0734c4", "filename": "clippy_lints/src/loops/while_let_on_iterator.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops%2Fwhile_let_on_iterator.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -8,7 +8,7 @@ use clippy_utils::{\n use if_chain::if_chain;\n use rustc_errors::Applicability;\n use rustc_hir::intravisit::{walk_expr, Visitor};\n-use rustc_hir::{def::Res, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n+use rustc_hir::{def::Res, Block, Expr, ExprKind, HirId, Local, Mutability, PatKind, QPath, UnOp};\n use rustc_lint::LateContext;\n use rustc_middle::ty::adjustment::Adjust;\n use rustc_span::{symbol::sym, Symbol};\n@@ -283,7 +283,7 @@ fn needs_mutable_borrow(cx: &LateContext<'_>, iter_expr: &IterExpr, loop_expr: &\n         used_after: bool,\n     }\n     impl<'a, 'b, 'tcx> Visitor<'tcx> for NestedLoopVisitor<'a, 'b, 'tcx> {\n-        fn visit_local(&mut self, l: &'tcx Local<'_>) {\n+        fn visit_local(&mut self, l: &'tcx Local<'_>, _: Option<&'tcx Block<'_>>) {\n             if !self.after_loop {\n                 l.pat.each_binding_or_first(&mut |_, id, _, _| {\n                     if id == self.local_id {"}, {"sha": "3bfe5428133fc2b0fea25573fb53319604b19e63", "filename": "clippy_lints/src/map_unit_fn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmap_unit_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_unit_fn.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -144,7 +144,7 @@ fn reduce_unit_expression<'a>(cx: &LateContext<'_>, expr: &'a hir::Expr<'_>) ->\n                     // If block only contains statements,\n                     // reduce `{ X; }` to `X` or `X;`\n                     match inner_stmt.kind {\n-                        hir::StmtKind::Local(local) => Some(local.span),\n+                        hir::StmtKind::Local(local, _) => Some(local.span),\n                         hir::StmtKind::Expr(e) => Some(e.span),\n                         hir::StmtKind::Semi(..) => Some(inner_stmt.span),\n                         hir::StmtKind::Item(..) => None,"}, {"sha": "cc8674a200652e425ee7254df75f26f4d980e3ab", "filename": "clippy_lints/src/matches/mod.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches%2Fmod.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -1,6 +1,6 @@\n use clippy_utils::source::{snippet_opt, span_starts_with, walk_span_to_context};\n use clippy_utils::{higher, in_constant, meets_msrv, msrvs};\n-use rustc_hir::{Arm, Expr, ExprKind, Local, MatchSource, Pat};\n+use rustc_hir::{Arm, Block, Expr, ExprKind, Local, MatchSource, Pat};\n use rustc_lexer::{tokenize, TokenKind};\n use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n@@ -1040,8 +1040,14 @@ impl<'tcx> LateLintPass<'tcx> for Matches {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'_>) {\n-        self.infallible_destructuring_match_linted |= infallible_destructuring_match::check(cx, local);\n+    fn check_local(\n+        &mut self,\n+        cx: &LateContext<'tcx>,\n+        local: &'tcx Local<'_>,\n+        els: Option<&'tcx Block<'_>>,\n+    ) {\n+        self.infallible_destructuring_match_linted |=\n+            els.is_none() && infallible_destructuring_match::check(cx, local);\n     }\n \n     fn check_pat(&mut self, cx: &LateContext<'tcx>, pat: &'tcx Pat<'_>) {"}, {"sha": "80dbd14b2c56ac8af65abf22b9f1cb9fa77caf58", "filename": "clippy_lints/src/methods/str_splitn.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fstr_splitn.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -220,7 +220,7 @@ fn indirect_usage<'tcx>(\n         init: Some(init_expr),\n         hir_id: local_hir_id,\n         ..\n-    }) = stmt.kind\n+    }, _) = stmt.kind\n     {\n         let mut path_to_binding = None;\n         expr_visitor(cx, |expr| {"}, {"sha": "2ad7ac60b92500993a53617988edf6a3a4af2593", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -161,7 +161,7 @@ impl<'tcx> LateLintPass<'tcx> for MiscLints {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         if_chain! {\n             if !in_external_macro(cx.tcx.sess, stmt.span);\n-            if let StmtKind::Local(local) = stmt.kind;\n+            if let StmtKind::Local(local, _) = stmt.kind;\n             if let PatKind::Binding(an, .., name, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if an == BindingAnnotation::Ref || an == BindingAnnotation::RefMut;"}, {"sha": "de993c3c0a47a8136140b2a85d21661764bce9ed", "filename": "clippy_lints/src/mixed_read_write_in_expression.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmixed_read_write_in_expression.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -96,7 +96,7 @@ impl<'tcx> LateLintPass<'tcx> for EvalOrderDependence {\n     }\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         match stmt.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 if let Local { init: Some(e), .. } = local {\n                     DivergenceVisitor { cx }.visit_expr(e);\n                 }\n@@ -273,7 +273,7 @@ fn check_stmt<'a, 'tcx>(vis: &mut ReadVisitor<'a, 'tcx>, stmt: &'tcx Stmt<'_>) -\n         StmtKind::Expr(expr) | StmtKind::Semi(expr) => check_expr(vis, expr),\n         // If the declaration is of a local variable, check its initializer\n         // expression if it has one. Otherwise, keep going.\n-        StmtKind::Local(local) => local\n+        StmtKind::Local(local, _) => local\n             .init\n             .as_ref()\n             .map_or(StopEarly::KeepGoing, |expr| check_expr(vis, expr)),"}, {"sha": "251181165b0224e0d164ef84813a31b0d7b7999c", "filename": "clippy_lints/src/mut_key.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmut_key.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fmut_key.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_key.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -101,7 +101,12 @@ impl<'tcx> LateLintPass<'tcx> for MutableKeyType {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &hir::Local<'_>) {\n+    fn check_local(\n+        &mut self,\n+        cx: &LateContext<'_>,\n+        local: &hir::Local<'_>,\n+        _: Option<&hir::Block<'_>>,\n+    ) {\n         if let hir::PatKind::Wild = local.pat.kind {\n             return;\n         }"}, {"sha": "fa1c09d8f90322615ffe33c624371a1769077745", "filename": "clippy_lints/src/needless_late_init.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fneedless_late_init.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_late_init.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -92,7 +92,7 @@ fn contains_let(cond: &Expr<'_>) -> bool {\n }\n \n fn stmt_needs_ordered_drop(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n-    let StmtKind::Local(local) = stmt.kind else { return false };\n+    let StmtKind::Local(local, _) = stmt.kind else { return false };\n     !local.pat.walk_short(|pat| {\n         if let PatKind::Binding(.., None) = pat.kind {\n             !needs_ordered_drop(cx, cx.typeck_results().pat_ty(pat))\n@@ -367,7 +367,7 @@ fn check<'tcx>(\n }\n \n impl<'tcx> LateLintPass<'tcx> for NeedlessLateInit {\n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n         let mut parents = cx.tcx.hir().parent_iter(local.hir_id);\n         if_chain! {\n             if let Local {"}, {"sha": "105e145ac3069201b548a1783665d4fd2cae4903", "filename": "clippy_lints/src/no_effect.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fno_effect.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -88,10 +88,11 @@ fn check_no_effect(cx: &LateContext<'_>, stmt: &Stmt<'_>) -> bool {\n             span_lint_hir(cx, NO_EFFECT, expr.hir_id, stmt.span, \"statement with no effect\");\n             return true;\n         }\n-    } else if let StmtKind::Local(local) = stmt.kind {\n+    } else if let StmtKind::Local(local, els) = stmt.kind {\n         if_chain! {\n             if !is_lint_allowed(cx, NO_EFFECT_UNDERSCORE_BINDING, local.hir_id);\n             if let Some(init) = local.init;\n+            if els.is_none();\n             if !local.pat.span.from_expansion();\n             if has_no_effect(cx, init);\n             if let PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "c7f8f2f8d7045a39fca0c76f837295169f677c37", "filename": "clippy_lints/src/only_used_in_recursion.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fonly_used_in_recursion.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -261,13 +261,13 @@ impl<'tcx> Visitor<'tcx> for SideEffectVisit<'tcx> {\n         match s.kind {\n             StmtKind::Local(Local {\n                 pat, init: Some(init), ..\n-            }) => {\n+            }, _) => {\n                 self.visit_pat_expr(pat, init, false);\n             },\n             StmtKind::Item(_) | StmtKind::Expr(_) | StmtKind::Semi(_) => {\n                 walk_stmt(self, s);\n             },\n-            StmtKind::Local(_) => {},\n+            StmtKind::Local(_, _) => {},\n         }\n         self.ret_vars.clear();\n     }"}, {"sha": "83e18e207117a277f7715c602ea9e862e789129a", "filename": "clippy_lints/src/pattern_type_mismatch.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpattern_type_mismatch.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -83,7 +83,7 @@ declare_lint_pass!(PatternTypeMismatch => [PATTERN_TYPE_MISMATCH]);\n \n impl<'tcx> LateLintPass<'tcx> for PatternTypeMismatch {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n-        if let StmtKind::Local(local) = stmt.kind {\n+        if let StmtKind::Local(local, _) = stmt.kind {\n             if in_external_macro(cx.sess(), local.pat.span) {\n                 return;\n             }"}, {"sha": "8316efad1ffed51d8bc1bcf068a375a81191d4f7", "filename": "clippy_lints/src/read_zero_byte_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fread_zero_byte_vec.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -53,7 +53,7 @@ impl<'tcx> LateLintPass<'tcx> for ReadZeroByteVec {\n         for (idx, stmt) in block.stmts.iter().enumerate() {\n             if !stmt.span.from_expansion()\n                 // matches `let v = Vec::new();`\n-                && let StmtKind::Local(local) = stmt.kind\n+                && let StmtKind::Local(local, _) = stmt.kind\n                 && let Local { pat, init: Some(init), .. } = local\n                 && let PatKind::Binding(_, _, ident, _) = pat.kind\n                 && let Some(vec_init_kind) = get_vec_init_kind(cx, init)"}, {"sha": "48bf14d511c71d492da5a281a2bbe47f1192004c", "filename": "clippy_lints/src/redundant_closure_call.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fredundant_closure_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fredundant_closure_call.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -133,7 +133,7 @@ impl<'tcx> LateLintPass<'tcx> for RedundantClosureCall {\n \n         for w in block.stmts.windows(2) {\n             if_chain! {\n-                if let hir::StmtKind::Local(local) = w[0].kind;\n+                if let hir::StmtKind::Local(local, _) = w[0].kind;\n                 if let Option::Some(t) = local.init;\n                 if let hir::ExprKind::Closure { .. } = t.kind;\n                 if let hir::PatKind::Binding(_, _, ident, _) = local.pat.kind;"}, {"sha": "b2ec32abb442a2addfeb9c0ce07eb4eac0c722f3", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -10,7 +10,6 @@ use rustc_lint::{LateContext, LateLintPass, LintContext};\n use rustc_middle::lint::in_external_macro;\n use rustc_middle::ty::subst::GenericArgKind;\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n-use rustc_span::hygiene::DesugaringKind;\n use rustc_span::source_map::Span;\n use rustc_span::sym;\n \n@@ -83,7 +82,7 @@ impl<'tcx> LateLintPass<'tcx> for Return {\n         if_chain! {\n             if let Some(retexpr) = block.expr;\n             if let Some(stmt) = block.stmts.iter().last();\n-            if let StmtKind::Local(local) = &stmt.kind;\n+            if let StmtKind::Local(local, _) = &stmt.kind;\n             if local.ty.is_none();\n             if cx.tcx.hir().attrs(local.hir_id).is_empty();\n             if let Some(initexpr) = &local.init;\n@@ -203,9 +202,7 @@ fn check_final_expr<'tcx>(\n                 check_block_return(cx, ifblock);\n             }\n             if let Some(else_clause) = else_clause_opt {\n-                if expr.span.desugaring_kind() != Some(DesugaringKind::LetElse) {\n-                    check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n-                }\n+                check_final_expr(cx, else_clause, None, RetReplacement::Empty);\n             }\n         },\n         // a match expr, check all arms"}, {"sha": "3d7ef747a86c85ad3bfbbdaa3839733d69bd8195", "filename": "clippy_lints/src/slow_vector_initialization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fslow_vector_initialization.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -98,7 +98,7 @@ impl<'tcx> LateLintPass<'tcx> for SlowVectorInit {\n     fn check_stmt(&mut self, cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'_>) {\n         // Matches statements which initializes vectors. For example: `let mut vec = Vec::with_capacity(10)`\n         if_chain! {\n-            if let StmtKind::Local(local) = stmt.kind;\n+            if let StmtKind::Local(local, _) = stmt.kind;\n             if let PatKind::Binding(BindingAnnotation::Mutable, local_id, _, None) = local.pat.kind;\n             if let Some(init) = local.init;\n             if let Some(len_arg) = Self::is_vec_with_capacity(cx, init);"}, {"sha": "a8c96543c7c6ef807be60a444a5dfb7d6e6cdcb4", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -141,7 +141,7 @@ fn check_manual_swap(cx: &LateContext<'_>, block: &Block<'_>) {\n     for w in block.stmts.windows(3) {\n         if_chain! {\n             // let t = foo();\n-            if let StmtKind::Local(tmp) = w[0].kind;\n+            if let StmtKind::Local(tmp, _) = w[0].kind;\n             if let Some(tmp_init) = tmp.init;\n             if let PatKind::Binding(.., ident, None) = tmp.pat.kind;\n "}, {"sha": "2a7d5f2623e2c58e80eb7a573df752faebcf023b", "filename": "clippy_lints/src/types/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes%2Fmod.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -12,7 +12,7 @@ mod vec_box;\n use rustc_hir as hir;\n use rustc_hir::intravisit::FnKind;\n use rustc_hir::{\n-    Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n+    Block, Body, FnDecl, FnRetTy, GenericArg, HirId, ImplItem, ImplItemKind, Item, ItemKind, Local, MutTy, QPath, TraitItem,\n     TraitItemKind, TyKind,\n };\n use rustc_lint::{LateContext, LateLintPass};\n@@ -406,7 +406,7 @@ impl<'tcx> LateLintPass<'tcx> for Types {\n         }\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>) {\n+    fn check_local(&mut self, cx: &LateContext<'_>, local: &Local<'_>, _: Option<&Block<'_>>) {\n         if let Some(ty) = local.ty {\n             self.check_ty(\n                 cx,"}, {"sha": "eab3b9b7b01c2a9c95c020a0aad44367fd33ae79", "filename": "clippy_lints/src/uninit_vec.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Funinit_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Funinit_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funinit_vec.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> VecLocation<'tcx> {\n /// or `self` expression for `Vec::reserve()`.\n fn extract_init_or_reserve_target<'tcx>(cx: &LateContext<'tcx>, stmt: &'tcx Stmt<'tcx>) -> Option<TargetVec<'tcx>> {\n     match stmt.kind {\n-        StmtKind::Local(local) => {\n+        StmtKind::Local(local, _) => {\n             if_chain! {\n                 if let Some(init_expr) = local.init;\n                 if let PatKind::Binding(_, hir_id, _, None) = local.pat.kind;"}, {"sha": "80e7b8de392c7ec35037b2436ab460d208c29bca", "filename": "clippy_lints/src/unit_types/let_unit_value.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funit_types%2Flet_unit_value.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -12,7 +12,7 @@ use rustc_middle::ty::{self, Ty, TypeVisitable, TypeSuperVisitable, TypeVisitor}\n use super::LET_UNIT_VALUE;\n \n pub(super) fn check(cx: &LateContext<'_>, stmt: &Stmt<'_>) {\n-    if let StmtKind::Local(local) = stmt.kind\n+    if let StmtKind::Local(local, _) = stmt.kind\n         && let Some(init) = local.init\n         && !local.pat.span.from_expansion()\n         && !in_external_macro(cx.sess(), stmt.span)"}, {"sha": "99ac84fbaabaee25dbba3413c94d26564ea93bd0", "filename": "clippy_lints/src/utils/author.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Futils%2Fauthor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fauthor.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -685,7 +685,7 @@ impl<'a, 'tcx> PrintVisitor<'a, 'tcx> {\n         }\n \n         match stmt.value.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, _) => {\n                 bind!(self, local);\n                 kind!(\"Local({local})\");\n                 self.option(field!(local.init), \"init\", |init| {"}, {"sha": "c71bacfa29a7089ee33ee2243a317fa0277d92dd", "filename": "clippy_lints/src/vec_init_then_push.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_lints%2Fsrc%2Fvec_init_then_push.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fvec_init_then_push.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -155,7 +155,7 @@ impl<'tcx> LateLintPass<'tcx> for VecInitThenPush {\n         self.searcher = None;\n     }\n \n-    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>) {\n+    fn check_local(&mut self, cx: &LateContext<'tcx>, local: &'tcx Local<'tcx>, _: Option<&'tcx Block<'tcx>>) {\n         if let Some(init_expr) = local.init\n             && let PatKind::Binding(BindingAnnotation::Mutable, id, name, None) = local.pat.kind\n             && !in_external_macro(cx.sess(), local.span)"}, {"sha": "0b5325adfed2079c971136bad06742ebf9dde852", "filename": "clippy_utils/src/hir_utils.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_utils%2Fsrc%2Fhir_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_utils%2Fsrc%2Fhir_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Fhir_utils.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -102,7 +102,7 @@ pub struct HirEqInterExpr<'a, 'b, 'tcx> {\n impl HirEqInterExpr<'_, '_, '_> {\n     pub fn eq_stmt(&mut self, left: &Stmt<'_>, right: &Stmt<'_>) -> bool {\n         match (&left.kind, &right.kind) {\n-            (&StmtKind::Local(l), &StmtKind::Local(r)) => {\n+            (&StmtKind::Local(l, le), &StmtKind::Local(r, re)) => {\n                 // This additional check ensures that the type of the locals are equivalent even if the init\n                 // expression or type have some inferred parts.\n                 if let Some((typeck_lhs, typeck_rhs)) = self.inner.maybe_typeck_results {\n@@ -117,6 +117,7 @@ impl HirEqInterExpr<'_, '_, '_> {\n                 // these only get added if the init and type is equal.\n                 both(&l.init, &r.init, |l, r| self.eq_expr(l, r))\n                     && both(&l.ty, &r.ty, |l, r| self.eq_ty(l, r))\n+                    && both(&le, &re, |l, r| self.eq_block(l, r))\n                     && self.eq_pat(l.pat, r.pat)\n             },\n             (&StmtKind::Expr(l), &StmtKind::Expr(r)) | (&StmtKind::Semi(l), &StmtKind::Semi(r)) => self.eq_expr(l, r),\n@@ -921,11 +922,14 @@ impl<'a, 'tcx> SpanlessHash<'a, 'tcx> {\n         std::mem::discriminant(&b.kind).hash(&mut self.s);\n \n         match &b.kind {\n-            StmtKind::Local(local) => {\n+            StmtKind::Local(local, els) => {\n                 self.hash_pat(local.pat);\n                 if let Some(init) = local.init {\n                     self.hash_expr(init);\n                 }\n+                if let Some(els) = els {\n+                    self.hash_block(els);\n+                }\n             },\n             StmtKind::Item(..) => {},\n             StmtKind::Expr(expr) | StmtKind::Semi(expr) => {"}, {"sha": "ac6490cfd2c72017ba92b85b27550e585e8344a4", "filename": "clippy_utils/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_utils%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9225ebd7864876771b996e60a7ddda0be5a6f623/clippy_utils%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_utils%2Fsrc%2Flib.rs?ref=9225ebd7864876771b996e60a7ddda0be5a6f623", "patch": "@@ -1826,7 +1826,7 @@ pub fn is_expr_used_or_unified(tcx: TyCtxt<'_>, expr: &Expr<'_>) -> bool {\n                             ..\n                         },\n                         ..\n-                    }),\n+                    }, _),\n                 ..\n             }),\n             _"}]}