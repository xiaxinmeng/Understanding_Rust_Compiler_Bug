{"sha": "6f040b48ef3f8bce0706d838f5672ca8a3e07880", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmMDQwYjQ4ZWYzZjhiY2UwNzA2ZDgzOGY1NjcyY2E4YTNlMDc4ODA=", "commit": {"author": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-01T11:54:01Z"}, "committer": {"name": "Jeffrey Seyfried", "email": "jeffrey.seyfried@gmail.com", "date": "2016-12-18T23:26:31Z"}, "message": "Avoid including attributes in bang macro invocations.", "tree": {"sha": "7786310ba8cbb7e8fbb8141e9e25c97aab2e272c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7786310ba8cbb7e8fbb8141e9e25c97aab2e272c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6f040b48ef3f8bce0706d838f5672ca8a3e07880", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6f040b48ef3f8bce0706d838f5672ca8a3e07880", "html_url": "https://github.com/rust-lang/rust/commit/6f040b48ef3f8bce0706d838f5672ca8a3e07880", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6f040b48ef3f8bce0706d838f5672ca8a3e07880/comments", "author": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jseyfried", "id": 8652869, "node_id": "MDQ6VXNlcjg2NTI4Njk=", "avatar_url": "https://avatars.githubusercontent.com/u/8652869?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jseyfried", "html_url": "https://github.com/jseyfried", "followers_url": "https://api.github.com/users/jseyfried/followers", "following_url": "https://api.github.com/users/jseyfried/following{/other_user}", "gists_url": "https://api.github.com/users/jseyfried/gists{/gist_id}", "starred_url": "https://api.github.com/users/jseyfried/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jseyfried/subscriptions", "organizations_url": "https://api.github.com/users/jseyfried/orgs", "repos_url": "https://api.github.com/users/jseyfried/repos", "events_url": "https://api.github.com/users/jseyfried/events{/privacy}", "received_events_url": "https://api.github.com/users/jseyfried/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "421c5d11c1b4bb591bb429577c7b89cba59acefa", "url": "https://api.github.com/repos/rust-lang/rust/commits/421c5d11c1b4bb591bb429577c7b89cba59acefa", "html_url": "https://github.com/rust-lang/rust/commit/421c5d11c1b4bb591bb429577c7b89cba59acefa"}], "stats": {"total": 44, "additions": 19, "deletions": 25}, "files": [{"sha": "8e63f73fdaa7a1f7c6df130338a472fdcbbf6fe8", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6f040b48ef3f8bce0706d838f5672ca8a3e07880/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f040b48ef3f8bce0706d838f5672ca8a3e07880/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=6f040b48ef3f8bce0706d838f5672ca8a3e07880", "patch": "@@ -217,8 +217,7 @@ pub trait IdentMacroExpander {\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree>,\n-                   attrs: Vec<ast::Attribute>)\n+                   token_tree: Vec<tokenstream::TokenTree>)\n                    -> Box<MacResult+'cx>;\n }\n \n@@ -234,8 +233,7 @@ impl<F> IdentMacroExpander for F\n                    cx: &'cx mut ExtCtxt,\n                    sp: Span,\n                    ident: ast::Ident,\n-                   token_tree: Vec<tokenstream::TokenTree>,\n-                   _attrs: Vec<ast::Attribute>)\n+                   token_tree: Vec<tokenstream::TokenTree>)\n                    -> Box<MacResult+'cx>\n     {\n         (*self)(cx, sp, ident, token_tree)"}, {"sha": "e6782884f384e54a91851c2e3b53d7fbd7807a6a", "filename": "src/libsyntax/ext/expand.rs", "status": "modified", "additions": 17, "deletions": 21, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6f040b48ef3f8bce0706d838f5672ca8a3e07880/src%2Flibsyntax%2Fext%2Fexpand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6f040b48ef3f8bce0706d838f5672ca8a3e07880/src%2Flibsyntax%2Fext%2Fexpand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fexpand.rs?ref=6f040b48ef3f8bce0706d838f5672ca8a3e07880", "patch": "@@ -158,7 +158,6 @@ pub struct Invocation {\n \n pub enum InvocationKind {\n     Bang {\n-        attrs: Vec<ast::Attribute>,\n         mac: ast::Mac,\n         ident: Option<Ident>,\n         span: Span,\n@@ -386,8 +385,8 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n     /// Expand a macro invocation. Returns the result of expansion.\n     fn expand_bang_invoc(&mut self, invoc: Invocation, ext: Rc<SyntaxExtension>) -> Expansion {\n         let (mark, kind) = (invoc.expansion_data.mark, invoc.expansion_kind);\n-        let (attrs, mac, ident, span) = match invoc.kind {\n-            InvocationKind::Bang { attrs, mac, ident, span } => (attrs, mac, ident, span),\n+        let (mac, ident, span) = match invoc.kind {\n+            InvocationKind::Bang { mac, ident, span } => (mac, ident, span),\n             _ => unreachable!(),\n         };\n         let Mac_ { path, tts, .. } = mac.node;\n@@ -432,7 +431,7 @@ impl<'a, 'b> MacroExpander<'a, 'b> {\n                     }\n                 });\n \n-                kind.make_from(expander.expand(self.cx, span, ident, marked_tts, attrs))\n+                kind.make_from(expander.expand(self.cx, span, ident, marked_tts))\n             }\n \n             MultiDecorator(..) | MultiModifier(..) | SyntaxExtension::AttrProcMacro(..) => {\n@@ -590,11 +589,8 @@ impl<'a, 'b> InvocationCollector<'a, 'b> {\n         placeholder(expansion_kind, ast::NodeId::from_u32(mark.as_u32()))\n     }\n \n-    fn collect_bang(\n-        &mut self, mac: ast::Mac, attrs: Vec<ast::Attribute>, span: Span, kind: ExpansionKind,\n-    ) -> Expansion {\n-        self.check_attributes(&attrs);\n-        self.collect(kind, InvocationKind::Bang { attrs: attrs, mac: mac, ident: None, span: span })\n+    fn collect_bang(&mut self, mac: ast::Mac, span: Span, kind: ExpansionKind) -> Expansion {\n+        self.collect(kind, InvocationKind::Bang { mac: mac, ident: None, span: span })\n     }\n \n     fn collect_attr(&mut self, attr: ast::Attribute, item: Annotatable, kind: ExpansionKind)\n@@ -663,7 +659,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n         if let ast::ExprKind::Mac(mac) = expr.node {\n-            self.collect_bang(mac, expr.attrs.into(), expr.span, ExpansionKind::Expr).make_expr()\n+            self.check_attributes(&expr.attrs);\n+            self.collect_bang(mac, expr.span, ExpansionKind::Expr).make_expr()\n         } else {\n             P(noop_fold_expr(expr, self))\n         }\n@@ -674,8 +671,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         expr.node = self.cfg.configure_expr_kind(expr.node);\n \n         if let ast::ExprKind::Mac(mac) = expr.node {\n-            self.collect_bang(mac, expr.attrs.into(), expr.span, ExpansionKind::OptExpr)\n-                .make_opt_expr()\n+            self.check_attributes(&expr.attrs);\n+            self.collect_bang(mac, expr.span, ExpansionKind::OptExpr).make_opt_expr()\n         } else {\n             Some(P(noop_fold_expr(expr, self)))\n         }\n@@ -688,8 +685,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         }\n \n         pat.and_then(|pat| match pat.node {\n-            PatKind::Mac(mac) =>\n-                self.collect_bang(mac, Vec::new(), pat.span, ExpansionKind::Pat).make_pat(),\n+            PatKind::Mac(mac) => self.collect_bang(mac, pat.span, ExpansionKind::Pat).make_pat(),\n             _ => unreachable!(),\n         })\n     }\n@@ -710,8 +706,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n             }).collect()\n         };\n \n-        let mut placeholder =\n-            self.collect_bang(mac, attrs.into(), stmt.span, ExpansionKind::Stmts).make_stmts();\n+        self.check_attributes(&attrs);\n+        let mut placeholder = self.collect_bang(mac, stmt.span, ExpansionKind::Stmts).make_stmts();\n \n         // If this is a macro invocation with a semicolon, then apply that\n         // semicolon to the final statement produced by expansion.\n@@ -758,7 +754,6 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n                     ItemKind::Mac(mac) => {\n                         self.collect(ExpansionKind::Items, InvocationKind::Bang {\n                             mac: mac,\n-                            attrs: item.attrs,\n                             ident: Some(item.ident),\n                             span: item.span,\n                         }).make_items()\n@@ -830,7 +825,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         match item.node {\n             ast::TraitItemKind::Macro(mac) => {\n                 let ast::TraitItem { attrs, span, .. } = item;\n-                self.collect_bang(mac, attrs, span, ExpansionKind::TraitItems).make_trait_items()\n+                self.check_attributes(&attrs);\n+                self.collect_bang(mac, span, ExpansionKind::TraitItems).make_trait_items()\n             }\n             _ => fold::noop_fold_trait_item(item, self),\n         }\n@@ -848,7 +844,8 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         match item.node {\n             ast::ImplItemKind::Macro(mac) => {\n                 let ast::ImplItem { attrs, span, .. } = item;\n-                self.collect_bang(mac, attrs, span, ExpansionKind::ImplItems).make_impl_items()\n+                self.check_attributes(&attrs);\n+                self.collect_bang(mac, span, ExpansionKind::ImplItems).make_impl_items()\n             }\n             _ => fold::noop_fold_impl_item(item, self),\n         }\n@@ -861,8 +858,7 @@ impl<'a, 'b> Folder for InvocationCollector<'a, 'b> {\n         };\n \n         match ty.node {\n-            ast::TyKind::Mac(mac) =>\n-                self.collect_bang(mac, Vec::new(), ty.span, ExpansionKind::Ty).make_ty(),\n+            ast::TyKind::Mac(mac) => self.collect_bang(mac, ty.span, ExpansionKind::Ty).make_ty(),\n             _ => unreachable!(),\n         }\n     }"}]}