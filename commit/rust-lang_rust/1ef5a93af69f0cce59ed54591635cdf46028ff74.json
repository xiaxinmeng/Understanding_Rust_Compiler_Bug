{"sha": "1ef5a93af69f0cce59ed54591635cdf46028ff74", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlZjVhOTNhZjY5ZjBjY2U1OWVkNTQ1OTE2MzVjZGY0NjAyOGZmNzQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-04-01T13:57:48Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2020-05-02T07:46:42Z"}, "message": "Also build clippy with `./x.py check`", "tree": {"sha": "bd57c59bc9d601b727321423b4fdd10bd0106dd3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd57c59bc9d601b727321423b4fdd10bd0106dd3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1ef5a93af69f0cce59ed54591635cdf46028ff74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1ef5a93af69f0cce59ed54591635cdf46028ff74", "html_url": "https://github.com/rust-lang/rust/commit/1ef5a93af69f0cce59ed54591635cdf46028ff74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1ef5a93af69f0cce59ed54591635cdf46028ff74/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a1824505d8ddada2598356eaeace3ae17ee5ec30", "url": "https://api.github.com/repos/rust-lang/rust/commits/a1824505d8ddada2598356eaeace3ae17ee5ec30", "html_url": "https://github.com/rust-lang/rust/commit/a1824505d8ddada2598356eaeace3ae17ee5ec30"}], "stats": {"total": 144, "additions": 75, "deletions": 69}, "files": [{"sha": "b77b1b0d20a18d0f3257582cdd19ad7b5edf3935", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1ef5a93af69f0cce59ed54591635cdf46028ff74/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef5a93af69f0cce59ed54591635cdf46028ff74/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=1ef5a93af69f0cce59ed54591635cdf46028ff74", "patch": "@@ -351,7 +351,7 @@ impl<'a> Builder<'a> {\n                 native::Lld\n             ),\n             Kind::Check | Kind::Clippy | Kind::Fix | Kind::Format => {\n-                describe!(check::Std, check::Rustc, check::Rustdoc)\n+                describe!(check::Std, check::Rustc, check::Rustdoc, check::Clippy)\n             }\n             Kind::Test => describe!(\n                 crate::toolstate::ToolStateCheck,"}, {"sha": "7a8bfb2d5d877190661a8a83973a679e3e94709c", "filename": "src/bootstrap/check.rs", "status": "modified", "additions": 74, "deletions": 68, "changes": 142, "blob_url": "https://github.com/rust-lang/rust/blob/1ef5a93af69f0cce59ed54591635cdf46028ff74/src%2Fbootstrap%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1ef5a93af69f0cce59ed54591635cdf46028ff74/src%2Fbootstrap%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fcheck.rs?ref=1ef5a93af69f0cce59ed54591635cdf46028ff74", "patch": "@@ -112,83 +112,89 @@ impl Step for Rustc {\n     }\n }\n \n-#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n-pub struct Rustdoc {\n-    pub target: Interned<String>,\n+macro_rules! tool_check_step {\n+    ($name:ident, $path:expr) => {\n+        #[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]\n+        pub struct $name {\n+            pub target: Interned<String>,\n+        }\n+\n+        impl Step for $name {\n+            type Output = ();\n+            const ONLY_HOSTS: bool = true;\n+            const DEFAULT: bool = true;\n+\n+            fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n+                run.path($path)\n+            }\n+\n+            fn make_run(run: RunConfig<'_>) {\n+                run.builder.ensure($name { target: run.target });\n+            }\n+\n+            fn run(self, builder: &Builder<'_>) {\n+                let compiler = builder.compiler(0, builder.config.build);\n+                let target = self.target;\n+\n+                builder.ensure(Rustc { target });\n+\n+                let cargo = prepare_tool_cargo(\n+                    builder,\n+                    compiler,\n+                    Mode::ToolRustc,\n+                    target,\n+                    cargo_subcommand(builder.kind),\n+                    $path,\n+                    SourceType::InTree,\n+                    &[],\n+                );\n+\n+                println!(\n+                    \"Checking {} artifacts ({} -> {})\",\n+                    stringify!($name).to_lowercase(),\n+                    &compiler.host,\n+                    target\n+                );\n+                run_cargo(\n+                    builder,\n+                    cargo,\n+                    args(builder.kind),\n+                    &stamp(builder, compiler, target),\n+                    vec![],\n+                    true,\n+                );\n+\n+                let libdir = builder.sysroot_libdir(compiler, target);\n+                let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n+                add_to_sysroot(&builder, &libdir, &hostdir, &stamp(builder, compiler, target));\n+\n+                /// Cargo's output path in a given stage, compiled by a particular\n+                /// compiler for the specified target.\n+                fn stamp(\n+                    builder: &Builder<'_>,\n+                    compiler: Compiler,\n+                    target: Interned<String>,\n+                ) -> PathBuf {\n+                    builder\n+                        .cargo_out(compiler, Mode::ToolRustc, target)\n+                        .join(format!(\".{}-check.stamp\", stringify!($name).to_lowercase()))\n+                }\n+            }\n+        }\n+    };\n }\n \n-impl Step for Rustdoc {\n-    type Output = ();\n-    const ONLY_HOSTS: bool = true;\n-    const DEFAULT: bool = true;\n-\n-    fn should_run(run: ShouldRun<'_>) -> ShouldRun<'_> {\n-        run.path(\"src/tools/rustdoc\")\n-    }\n-\n-    fn make_run(run: RunConfig<'_>) {\n-        run.builder.ensure(Rustdoc { target: run.target });\n-    }\n-\n-    fn run(self, builder: &Builder<'_>) {\n-        let compiler = builder.compiler(0, builder.config.build);\n-        let target = self.target;\n-\n-        builder.ensure(Rustc { target });\n-\n-        let cargo = prepare_tool_cargo(\n-            builder,\n-            compiler,\n-            Mode::ToolRustc,\n-            target,\n-            cargo_subcommand(builder.kind),\n-            \"src/tools/rustdoc\",\n-            SourceType::InTree,\n-            &[],\n-        );\n-\n-        println!(\"Checking rustdoc artifacts ({} -> {})\", &compiler.host, target);\n-        run_cargo(\n-            builder,\n-            cargo,\n-            args(builder.kind),\n-            &rustdoc_stamp(builder, compiler, target),\n-            vec![],\n-            true,\n-        );\n-\n-        let libdir = builder.sysroot_libdir(compiler, target);\n-        let hostdir = builder.sysroot_libdir(compiler, compiler.host);\n-        add_to_sysroot(&builder, &libdir, &hostdir, &rustdoc_stamp(builder, compiler, target));\n-    }\n-}\n+tool_check_step!(Rustdoc, \"src/tools/rustdoc\");\n+tool_check_step!(Clippy, \"src/tools/clippy\");\n \n /// Cargo's output path for the standard library in a given stage, compiled\n /// by a particular compiler for the specified target.\n-pub fn libstd_stamp(\n-    builder: &Builder<'_>,\n-    compiler: Compiler,\n-    target: Interned<String>,\n-) -> PathBuf {\n+fn libstd_stamp(builder: &Builder<'_>, compiler: Compiler, target: Interned<String>) -> PathBuf {\n     builder.cargo_out(compiler, Mode::Std, target).join(\".libstd-check.stamp\")\n }\n \n /// Cargo's output path for librustc in a given stage, compiled by a particular\n /// compiler for the specified target.\n-pub fn librustc_stamp(\n-    builder: &Builder<'_>,\n-    compiler: Compiler,\n-    target: Interned<String>,\n-) -> PathBuf {\n+fn librustc_stamp(builder: &Builder<'_>, compiler: Compiler, target: Interned<String>) -> PathBuf {\n     builder.cargo_out(compiler, Mode::Rustc, target).join(\".librustc-check.stamp\")\n }\n-\n-/// Cargo's output path for rustdoc in a given stage, compiled by a particular\n-/// compiler for the specified target.\n-pub fn rustdoc_stamp(\n-    builder: &Builder<'_>,\n-    compiler: Compiler,\n-    target: Interned<String>,\n-) -> PathBuf {\n-    builder.cargo_out(compiler, Mode::ToolRustc, target).join(\".rustdoc-check.stamp\")\n-}"}]}