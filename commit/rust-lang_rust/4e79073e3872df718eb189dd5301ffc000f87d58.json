{"sha": "4e79073e3872df718eb189dd5301ffc000f87d58", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRlNzkwNzNlMzg3MmRmNzE4ZWIxODlkZDUzMDFmZmMwMDBmODdkNTg=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-29T23:23:01Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-07-29T23:23:07Z"}, "message": "Use raw pointers", "tree": {"sha": "ee8b6fd71aeb6d3ed1f4c1c686e5753fdf72e62a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ee8b6fd71aeb6d3ed1f4c1c686e5753fdf72e62a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4e79073e3872df718eb189dd5301ffc000f87d58", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4e79073e3872df718eb189dd5301ffc000f87d58", "html_url": "https://github.com/rust-lang/rust/commit/4e79073e3872df718eb189dd5301ffc000f87d58", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4e79073e3872df718eb189dd5301ffc000f87d58/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b87291a8a46025fa9b709cd9860483528308735f", "url": "https://api.github.com/repos/rust-lang/rust/commits/b87291a8a46025fa9b709cd9860483528308735f", "html_url": "https://github.com/rust-lang/rust/commit/b87291a8a46025fa9b709cd9860483528308735f"}], "stats": {"total": 60, "additions": 15, "deletions": 45}, "files": [{"sha": "4fd0d24d73c839243eef80d311001dc84c4cf2fd", "filename": "src/yellow/mod.rs", "status": "modified", "additions": 0, "deletions": 31, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fmod.rs?ref=4e79073e3872df718eb189dd5301ffc000f87d58", "patch": "@@ -3,41 +3,10 @@ mod red;\n mod syntax;\n mod builder;\n \n-use std::{\n-    sync::{Arc, Weak},\n-    mem\n-};\n pub(crate) use self::{\n     green::{GreenNode, GreenNodeBuilder},\n     red::RedNode,\n     syntax::SyntaxError,\n     builder::GreenBuilder,\n };\n pub use self::syntax::SyntaxNode;\n-\n-// This could be just `*const T`, but we use `Weak` for additional checks\n-#[derive(Debug)]\n-pub(crate) struct Ptr<T>(Weak<T>);\n-\n-impl<T> Clone for Ptr<T> {\n-    fn clone(&self) -> Self {\n-        Ptr(self.0.clone())\n-    }\n-}\n-\n-impl<T> Ptr<T> {\n-    fn clone(self_: &Ptr<T>) -> Ptr<T> {\n-        Ptr(Weak::clone(&self_.0))\n-    }\n-\n-    fn new(arc: &Arc<T>) -> Ptr<T> {\n-        Ptr(Arc::downgrade(arc))\n-    }\n-\n-    unsafe fn get(&self) -> &T {\n-        let t = self.0.upgrade()\n-            .expect(\"caller must guarantee that Ptr is not null\");\n-        let t: &T = &*t;\n-        mem::transmute(t)\n-    }\n-}"}, {"sha": "3fdbfe0c5d06806016b5432cc88691895cae2457", "filename": "src/yellow/red.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fred.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fred.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fred.rs?ref=4e79073e3872df718eb189dd5301ffc000f87d58", "patch": "@@ -1,7 +1,7 @@\n use std::sync::{Arc, RwLock};\n use {\n     TextUnit,\n-    yellow::{Ptr, GreenNode},\n+    yellow::GreenNode,\n };\n \n #[derive(Debug)]\n@@ -13,7 +13,7 @@ pub(crate) struct RedNode {\n \n #[derive(Debug)]\n struct ParentData {\n-    parent: Ptr<RedNode>,\n+    parent: *const RedNode,\n     start_offset: TextUnit,\n     index_in_parent: usize,\n }\n@@ -27,7 +27,7 @@ impl RedNode {\n \n     fn new_child(\n         green: GreenNode,\n-        parent: Ptr<RedNode>,\n+        parent: *const RedNode,\n         start_offset: TextUnit,\n         index_in_parent: usize,\n     ) -> RedNode {\n@@ -62,7 +62,7 @@ impl RedNode {\n         self.green.children().len()\n     }\n \n-    pub(crate) fn nth_child(&self, me: Ptr<RedNode>, idx: usize) -> Arc<RedNode> {\n+    pub(crate) fn nth_child(&self, idx: usize) -> Arc<RedNode> {\n         match &self.children.read().unwrap()[idx] {\n             Some(child) => return child.clone(),\n             None => (),\n@@ -72,7 +72,7 @@ impl RedNode {\n             let green_children = self.green.children();\n             let start_offset = self.start_offset()\n                 + green_children[..idx].iter().map(|x| x.text_len()).sum::<TextUnit>();\n-            let child = RedNode::new_child(green_children[idx].clone(), me, start_offset, idx);\n+            let child = RedNode::new_child(green_children[idx].clone(), self, start_offset, idx);\n             children[idx] = Some(Arc::new(child))\n         }\n         children[idx].as_ref().unwrap().clone()"}, {"sha": "fa51e8d131528dfa6115f734b9440b74c78443f9", "filename": "src/yellow/syntax.rs", "status": "modified", "additions": 10, "deletions": 9, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fsyntax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4e79073e3872df718eb189dd5301ffc000f87d58/src%2Fyellow%2Fsyntax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fyellow%2Fsyntax.rs?ref=4e79073e3872df718eb189dd5301ffc000f87d58", "patch": "@@ -1,18 +1,20 @@\n use std::{\n     fmt,\n     sync::Arc,\n+    ptr\n };\n \n use {\n     TextRange, TextUnit,\n     SyntaxKind::{self, *},\n-    yellow::{Ptr, RedNode, GreenNode},\n+    yellow::{RedNode, GreenNode},\n };\n \n #[derive(Clone)]\n pub struct SyntaxNode {\n     pub(crate) root: SyntaxRoot,\n-    red: Ptr<RedNode>,\n+    // guaranteed to be alive bc SyntaxRoot holds a strong ref\n+    red: ptr::NonNull<RedNode>,\n }\n \n #[derive(Clone)]\n@@ -29,10 +31,10 @@ pub(crate) struct SyntaxError {\n \n impl SyntaxNode {\n     pub(crate) fn new(root: GreenNode, errors: Vec<SyntaxError>) -> SyntaxNode {\n-        let root = Arc::new(RedNode::new_root(root));\n-        let red = Ptr::new(&root);\n-        let root = SyntaxRoot { red: root, errors: Arc::new(errors) };\n-        SyntaxNode { root, red }\n+        let red = Arc::new(RedNode::new_root(root));\n+        let red_weak: ptr::NonNull<RedNode> = (&*red).into();\n+        let root = SyntaxRoot { red, errors: Arc::new(errors) };\n+        SyntaxNode { root, red: red_weak }\n     }\n \n     pub fn kind(&self) -> SyntaxKind {\n@@ -58,15 +60,14 @@ impl SyntaxNode {\n         for i in 0..n_children {\n             res.push(SyntaxNode {\n                 root: self.root.clone(),\n-                red: Ptr::new(&red.nth_child(Ptr::clone(&self.red), i)),\n+                red: (&*red.nth_child(i)).into(),\n             });\n         }\n         res\n     }\n \n     fn red(&self) -> &RedNode {\n-        // Safe b/c root ptr keeps red alive\n-        unsafe { self.red.get() }\n+        unsafe { self.red.as_ref() }\n     }\n }\n "}]}