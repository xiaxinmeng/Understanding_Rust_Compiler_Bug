{"sha": "6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZmY2YyZWU4ZTM0MWM1OTRmZTliOWMxNDhlMTNhNGNiOGNlNmI0YTM=", "commit": {"author": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T03:49:29Z"}, "committer": {"name": "Erick Tryzelaar", "email": "erick.tryzelaar@gmail.com", "date": "2013-08-10T14:33:22Z"}, "message": "std: Transform.find_ -> .find", "tree": {"sha": "ae1cb03b1b91aa2a2baa1a24317952d1c78dbc62", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ae1cb03b1b91aa2a2baa1a24317952d1c78dbc62"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "html_url": "https://github.com/rust-lang/rust/commit/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/comments", "author": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "committer": {"login": "erickt", "id": 84711, "node_id": "MDQ6VXNlcjg0NzEx", "avatar_url": "https://avatars.githubusercontent.com/u/84711?v=4", "gravatar_id": "", "url": "https://api.github.com/users/erickt", "html_url": "https://github.com/erickt", "followers_url": "https://api.github.com/users/erickt/followers", "following_url": "https://api.github.com/users/erickt/following{/other_user}", "gists_url": "https://api.github.com/users/erickt/gists{/gist_id}", "starred_url": "https://api.github.com/users/erickt/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/erickt/subscriptions", "organizations_url": "https://api.github.com/users/erickt/orgs", "repos_url": "https://api.github.com/users/erickt/repos", "events_url": "https://api.github.com/users/erickt/events{/privacy}", "received_events_url": "https://api.github.com/users/erickt/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f9dee04aaabc0ee38f91744e07fe67f36ec6c8e9", "url": "https://api.github.com/repos/rust-lang/rust/commits/f9dee04aaabc0ee38f91744e07fe67f36ec6c8e9", "html_url": "https://github.com/rust-lang/rust/commit/f9dee04aaabc0ee38f91744e07fe67f36ec6c8e9"}], "stats": {"total": 66, "additions": 33, "deletions": 33}, "files": [{"sha": "b8f81a44759cecfaf4bd90fc8b979e8f84c8f79e", "filename": "src/librust/rust.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrust%2Frust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrust%2Frust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrust%2Frust.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -128,7 +128,7 @@ fn rustc_help() {\n }\n \n fn find_cmd(command_string: &str) -> Option<Command> {\n-    do COMMANDS.iter().find_ |command| {\n+    do COMMANDS.iter().find |command| {\n         command.cmd == command_string\n     }.map_move(|x| *x)\n }"}, {"sha": "fdf887574695fb40663b29bf05b1747391726b00", "filename": "src/librustc/driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fdriver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdriver%2Fdriver.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -946,7 +946,7 @@ pub fn build_output_filenames(input: &input,\n           let linkage_metas = attr::find_linkage_metas(attrs);\n           if !linkage_metas.is_empty() {\n               // But if a linkage meta is present, that overrides\n-              let maybe_name = linkage_metas.iter().find_(|m| \"name\" == m.name());\n+              let maybe_name = linkage_metas.iter().find(|m| \"name\" == m.name());\n               match maybe_name.chain(|m| m.value_str()) {\n                   Some(s) => stem = s,\n                   _ => ()"}, {"sha": "82f5c4f88435a8c4a4c2641d239834870bcddf10", "filename": "src/librustc/metadata/creader.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmetadata%2Fcreader.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Fcreader.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -183,7 +183,7 @@ fn visit_item(e: &Env, i: @ast::item) {\n         match fm.sort {\n             ast::named => {\n                 let link_name = i.attrs.iter()\n-                    .find_(|at| \"link_name\" == at.name())\n+                    .find(|at| \"link_name\" == at.name())\n                     .chain(|at| at.value_str());\n \n                 let foreign_name = match link_name {"}, {"sha": "b640181515b38c0d3c9d8bd05d4550ea2f8463d5", "filename": "src/librustc/middle/check_match.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcheck_match.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -169,7 +169,7 @@ pub fn check_exhaustive(cx: &MatchCheckCtxt, sp: span, pats: ~[@pat]) {\n                     };\n                     let variants = ty::enum_variants(cx.tcx, id);\n \n-                    match variants.iter().find_(|v| v.id == vid) {\n+                    match variants.iter().find(|v| v.id == vid) {\n                         Some(v) => Some(cx.tcx.sess.str_of(v.name)),\n                         None => {\n                             fail!(\"check_exhaustive: bad variant in ctor\")\n@@ -222,7 +222,7 @@ pub enum ctor {\n pub fn is_useful(cx: &MatchCheckCtxt, m: &matrix, v: &[@pat]) -> useful {\n     if m.len() == 0u { return useful_; }\n     if m[0].len() == 0u { return not_useful; }\n-    let real_pat = match m.iter().find_(|r| r[0].id != 0) {\n+    let real_pat = match m.iter().find(|r| r[0].id != 0) {\n       Some(r) => r[0], None => v[0]\n     };\n     let left_ty = if real_pat.id == 0 { ty::mk_nil() }\n@@ -470,7 +470,7 @@ pub fn ctor_arity(cx: &MatchCheckCtxt, ctor: &ctor, ty: ty::t) -> uint {\n       ty::ty_enum(eid, _) => {\n           let id = match *ctor { variant(id) => id,\n           _ => fail!(\"impossible case\") };\n-        match ty::enum_variants(cx.tcx, eid).iter().find_(|v| v.id == id ) {\n+        match ty::enum_variants(cx.tcx, eid).iter().find(|v| v.id == id ) {\n             Some(v) => v.args.len(),\n             None => fail!(\"impossible case\")\n         }\n@@ -627,7 +627,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                         if variant(variant_id) == *ctor_id {\n                             // FIXME #4731: Is this right? --pcw\n                             let args = flds.map(|ty_field| {\n-                                match flds.iter().find_(|f|\n+                                match flds.iter().find(|f|\n                                                 f.ident == ty_field.ident) {\n                                     Some(f) => f.pat,\n                                     _ => wild()\n@@ -658,7 +658,7 @@ pub fn specialize(cx: &MatchCheckCtxt,\n                             }\n                         }\n                         let args = class_fields.iter().map(|class_field| {\n-                            match flds.iter().find_(|f|\n+                            match flds.iter().find(|f|\n                                             f.ident == class_field.ident) {\n                                 Some(f) => f.pat,\n                                 _ => wild()"}, {"sha": "1a9c36313df74c6d9be934577004edda112d08b3", "filename": "src/librustc/middle/trans/_match.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2F_match.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -588,7 +588,7 @@ fn enter_opt<'r>(bcx: @mut Block,\n                     let mut reordered_patterns = ~[];\n                     let r = ty::lookup_struct_fields(tcx, struct_id);\n                     for field in r.iter() {\n-                            match field_pats.iter().find_(|p| p.ident == field.ident) {\n+                            match field_pats.iter().find(|p| p.ident == field.ident) {\n                                 None => reordered_patterns.push(dummy),\n                                 Some(fp) => reordered_patterns.push(fp.pat)\n                             }\n@@ -648,7 +648,7 @@ fn enter_rec_or_struct<'r>(bcx: @mut Block,\n             ast::pat_struct(_, ref fpats, _) => {\n                 let mut pats = ~[];\n                 for fname in fields.iter() {\n-                    match fpats.iter().find_(|p| p.ident == *fname) {\n+                    match fpats.iter().find(|p| p.ident == *fname) {\n                         None => pats.push(dummy),\n                         Some(pat) => pats.push(pat.pat)\n                     }"}, {"sha": "f89327c10afc01d168eb3151b34fd721963180dc", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -1277,7 +1277,7 @@ pub fn cleanup_and_leave(bcx: @mut Block,\n                         let mut skip = 0;\n                         let mut dest = None;\n                         {\n-                            let r = (*inf).cleanup_paths.rev_iter().find_(|cp| cp.target == leave);\n+                            let r = (*inf).cleanup_paths.rev_iter().find(|cp| cp.target == leave);\n                             for cp in r.iter() {\n                                 if cp.size == inf.cleanups.len() {\n                                     Br(bcx, cp.dest);"}, {"sha": "1992d71427f2053baacc7413c310324c9602202e", "filename": "src/librustc/middle/trans/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fconsts.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -500,7 +500,7 @@ fn const_expr_unadjusted(cx: @mut CrateContext, e: &ast::expr) -> ValueRef {\n                   |discr, field_tys| {\n                   let cs: ~[ValueRef] = field_tys.iter().enumerate()\n                       .map(|(ix, &field_ty)| {\n-                      match fs.iter().find_(|f| field_ty.ident == f.ident) {\n+                      match fs.iter().find(|f| field_ty.ident == f.ident) {\n                           Some(f) => const_expr(cx, (*f).expr),\n                           None => {\n                               match base_val {"}, {"sha": "4cc4f8fa696d0cb1b92f5b6257351636f614a142", "filename": "src/librustc/middle/trans/meth.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmeth.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -288,7 +288,7 @@ pub fn method_with_name(ccx: &mut CrateContext,\n \n     let imp = ccx.tcx.impls.find(&impl_id)\n         .expect(\"could not find impl while translating\");\n-    let meth = imp.methods.iter().find_(|m| m.ident == name)\n+    let meth = imp.methods.iter().find(|m| m.ident == name)\n         .expect(\"could not find method while translating\");\n \n     ccx.impl_method_cache.insert((impl_id, name), meth.def_id);"}, {"sha": "21ef9058069ab3154c5a3a0be766166b92b56fa2", "filename": "src/librustc/middle/trans/monomorphize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fmonomorphize.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -245,7 +245,7 @@ pub fn monomorphic_fn(ccx: @mut CrateContext,\n       }\n       ast_map::node_variant(ref v, enum_item, _) => {\n         let tvs = ty::enum_variants(ccx.tcx, local_def(enum_item.id));\n-        let this_tv = *tvs.iter().find_(|tv| { tv.id.node == fn_id.node}).unwrap();\n+        let this_tv = *tvs.iter().find(|tv| { tv.id.node == fn_id.node}).unwrap();\n         let d = mk_lldecl();\n         set_inline_hint(d);\n         match v.node.kind {"}, {"sha": "bba5d85083b70ff6377b1f01b6417db10d485c8e", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -4117,7 +4117,7 @@ pub fn lookup_struct_field(cx: ctxt,\n                            field_id: ast::def_id)\n                         -> field_ty {\n     let r = lookup_struct_fields(cx, parent);\n-    match r.iter().find_(\n+    match r.iter().find(\n                  |f| f.id.node == field_id.node) {\n         Some(t) => *t,\n         None => cx.sess.bug(\"struct ID not found in parent's fields\")"}, {"sha": "8bc3241256875fb9ea6e80ec9a5887c89164dd7f", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -1122,7 +1122,7 @@ pub fn lookup_field_ty(tcx: ty::ctxt,\n                        fieldname: ast::ident,\n                        substs: &ty::substs) -> Option<ty::t> {\n \n-    let o_field = items.iter().find_(|f| f.ident == fieldname);\n+    let o_field = items.iter().find(|f| f.ident == fieldname);\n     do o_field.map() |f| {\n         ty::lookup_field_type(tcx, class_id, f.id, substs)\n     }"}, {"sha": "b5516fcc8eba6ed372992b8776740a8f5323a7c9", "filename": "src/librustc/middle/typeck/collect.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcollect.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -675,7 +675,7 @@ pub fn check_methods_against_trait(ccx: &CrateCtxt,\n     // we'll catch it in coherence\n     let trait_ms = ty::trait_methods(tcx, trait_ref.def_id);\n     for impl_m in impl_ms.iter() {\n-        match trait_ms.iter().find_(|trait_m| trait_m.ident == impl_m.mty.ident) {\n+        match trait_ms.iter().find(|trait_m| trait_m.ident == impl_m.mty.ident) {\n             Some(trait_m) => {\n                 let num_impl_tps = generics.ty_params.len();\n                 compare_impl_method("}, {"sha": "b5503cc51e10ce755dda2345e6e32c6effd2ce24", "filename": "src/librustdoc/attr_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fattr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fattr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fattr_pass.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -133,7 +133,7 @@ fn fold_enum(\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n                             let ast_variant =\n-                                (*enum_definition.variants.iter().find_(|v| {\n+                                (*enum_definition.variants.iter().find(|v| {\n                                     to_str(v.node.name) == variant.name\n                                 }).unwrap()).clone();\n "}, {"sha": "877338902cc07ebf4e6b596c7d0fbcf3315708b8", "filename": "src/librustdoc/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fconfig.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -221,7 +221,7 @@ pub fn maybe_find_pandoc(\n       }\n     };\n \n-    let pandoc = do possible_pandocs.iter().find_ |&pandoc| {\n+    let pandoc = do possible_pandocs.iter().find |&pandoc| {\n         let output = process_output(*pandoc, [~\"--version\"]);\n         debug!(\"testing pandoc cmd %s: %?\", *pandoc, output);\n         output.status == 0"}, {"sha": "e1bc059e20f9cc6b23bab4a4319b0c0c60885f37", "filename": "src/librustdoc/prune_private_pass.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fprune_private_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Fprune_private_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fprune_private_pass.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -81,7 +81,7 @@ fn strip_priv_methods(\n     item_vis: ast::visibility\n ) -> doc::ImplDoc {\n     let methods = do doc.methods.iter().filter |method| {\n-        let ast_method = do methods.iter().find_ |m| {\n+        let ast_method = do methods.iter().find |m| {\n             extract::to_str(m.ident) == method.name\n         };\n         assert!(ast_method.is_some());"}, {"sha": "aa4407af76d2e2ba00bc21d220b6cc6d2d0ae893", "filename": "src/librustdoc/tystr_pass.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Ftystr_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustdoc%2Ftystr_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftystr_pass.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -133,7 +133,7 @@ fn fold_enum(\n                             node: ast::item_enum(ref enum_definition, _), _\n                         }, _) => {\n                             let ast_variant =\n-                                (*do enum_definition.variants.iter().find_ |v| {\n+                                (*do enum_definition.variants.iter().find |v| {\n                                 to_str(v.node.name) == variant.name\n                             }.unwrap()).clone();\n \n@@ -187,7 +187,7 @@ fn get_method_sig(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_trait(_, _, ref methods), _\n             }, _) => {\n-                match methods.iter().find_(|&method| {\n+                match methods.iter().find(|&method| {\n                     match (*method).clone() {\n                         ast::required(ty_m) => to_str(ty_m.ident) == method_name,\n                         ast::provided(m) => to_str(m.ident) == method_name,\n@@ -223,7 +223,7 @@ fn get_method_sig(\n             ast_map::node_item(@ast::item {\n                 node: ast::item_impl(_, _, _, ref methods), _\n             }, _) => {\n-                match methods.iter().find_(|method| {\n+                match methods.iter().find(|method| {\n                     to_str(method.ident) == method_name\n                 }) {\n                     Some(method) => {"}, {"sha": "29ad9eb49a3b120526aff145cdd83f9172a50331", "filename": "src/librusti/rusti.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrusti%2Frusti.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrusti%2Frusti.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrusti%2Frusti.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -315,7 +315,7 @@ fn compile_crate(src_filename: ~str, binary: ~str) -> Option<bool> {\n         // file, skip compilation and return None.\n         let mut should_compile = true;\n         let dir = os::list_dir_path(&Path(outputs.out_filename.dirname()));\n-        let maybe_lib_path = do dir.iter().find_ |file| {\n+        let maybe_lib_path = do dir.iter().find |file| {\n             // The actual file's name has a hash value and version\n             // number in it which is unknown at this time, so looking\n             // for a file that matches out_filename won't work,"}, {"sha": "ff485342fbe9871f51b2189379191dcfa8d666fc", "filename": "src/librustpkg/package_source.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustpkg%2Fpackage_source.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibrustpkg%2Fpackage_source.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustpkg%2Fpackage_source.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -55,7 +55,7 @@ impl PkgSrc {\n         let dir;\n         let dirs = pkgid_src_in_workspace(&self.id, &self.root);\n         debug!(\"Checking dirs: %?\", dirs);\n-        let path = dirs.iter().find_(|&d| os::path_exists(d));\n+        let path = dirs.iter().find(|&d| os::path_exists(d));\n         match path {\n             Some(d) => dir = (*d).clone(),\n             None => dir = match self.fetch_git() {"}, {"sha": "a7a1c0bede8dbabf761920061f0bb30ffb8da38a", "filename": "src/libstd/iterator.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibstd%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibstd%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fiterator.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -458,7 +458,7 @@ pub trait Iterator<A> {\n \n     /// Return the first element satisfying the specified predicate\n     #[inline]\n-    fn find_(&mut self, predicate: &fn(&A) -> bool) -> Option<A> {\n+    fn find(&mut self, predicate: &fn(&A) -> bool) -> Option<A> {\n         for x in *self {\n             if predicate(&x) { return Some(x) }\n         }\n@@ -1819,9 +1819,9 @@ mod tests {\n     #[test]\n     fn test_find() {\n         let v: &[int] = &[1, 3, 9, 27, 103, 14, 11];\n-        assert_eq!(*v.iter().find_(|x| *x & 1 == 0).unwrap(), 14);\n-        assert_eq!(*v.iter().find_(|x| *x % 3 == 0).unwrap(), 3);\n-        assert!(v.iter().find_(|x| *x % 12 == 0).is_none());\n+        assert_eq!(*v.iter().find(|x| *x & 1 == 0).unwrap(), 14);\n+        assert_eq!(*v.iter().find(|x| *x % 3 == 0).unwrap(), 3);\n+        assert!(v.iter().find(|x| *x % 12 == 0).is_none());\n     }\n \n     #[test]"}, {"sha": "820c344f739387a207e4ae599bb5f2c2b860a923", "filename": "src/libstd/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -59,7 +59,7 @@ pub fn from_bytes(vv: &[u8]) -> ~str {\n     use str::not_utf8::cond;\n \n     if !is_utf8(vv) {\n-        let first_bad_byte = *vv.iter().find_(|&b| !is_utf8([*b])).unwrap();\n+        let first_bad_byte = *vv.iter().find(|&b| !is_utf8([*b])).unwrap();\n         cond.raise(fmt!(\"from_bytes: input is not UTF-8; first bad byte is %u\",\n                         first_bad_byte as uint))\n     } else {\n@@ -76,7 +76,7 @@ pub fn from_bytes_owned(vv: ~[u8]) -> ~str {\n     use str::not_utf8::cond;\n \n     if !is_utf8(vv) {\n-        let first_bad_byte = *vv.iter().find_(|&b| !is_utf8([*b])).unwrap();\n+        let first_bad_byte = *vv.iter().find(|&b| !is_utf8([*b])).unwrap();\n         cond.raise(fmt!(\"from_bytes: input is not UTF-8; first bad byte is %u\",\n                         first_bad_byte as uint))\n     } else {"}, {"sha": "b0dda2b7dc89f0db4f24d7101411569e5900aeb1", "filename": "src/libsyntax/attr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibsyntax%2Fattr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3/src%2Flibsyntax%2Fattr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fattr.rs?ref=6fcf2ee8e341c594fe9b9c148e13a4cb8ce6b4a3", "patch": "@@ -186,13 +186,13 @@ pub fn contains_name<AM: AttrMetaMethods>(metas: &[AM], name: &str) -> bool {\n pub fn first_attr_value_str_by_name(attrs: &[Attribute], name: &str)\n                                  -> Option<@str> {\n     attrs.iter()\n-        .find_(|at| name == at.name())\n+        .find(|at| name == at.name())\n         .chain(|at| at.value_str())\n }\n \n pub fn last_meta_item_value_str_by_name(items: &[@MetaItem], name: &str)\n                                      -> Option<@str> {\n-    items.rev_iter().find_(|mi| name == mi.name()).chain(|i| i.value_str())\n+    items.rev_iter().find(|mi| name == mi.name()).chain(|i| i.value_str())\n }\n \n /* Higher-level applications */"}]}