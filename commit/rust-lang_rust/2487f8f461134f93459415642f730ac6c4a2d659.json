{"sha": "2487f8f461134f93459415642f730ac6c4a2d659", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI0ODdmOGY0NjExMzRmOTM0NTk0MTU2NDJmNzMwYWM2YzRhMmQ2NTk=", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-11T14:52:25Z"}, "committer": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2020-09-11T14:52:25Z"}, "message": "into_iter_on_ref: rephrase lint message: will not move the x -> will not consume the x\n\nimo that's a bit clearer.", "tree": {"sha": "4bc20f0f19be1685ed52706a8a1e90e211833b77", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4bc20f0f19be1685ed52706a8a1e90e211833b77"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2487f8f461134f93459415642f730ac6c4a2d659", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2487f8f461134f93459415642f730ac6c4a2d659", "html_url": "https://github.com/rust-lang/rust/commit/2487f8f461134f93459415642f730ac6c4a2d659", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2487f8f461134f93459415642f730ac6c4a2d659/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f", "html_url": "https://github.com/rust-lang/rust/commit/0ab75c37b6743d1d8a5ca3b42d8454c52c6eeb0f"}], "stats": {"total": 56, "additions": 28, "deletions": 28}, "files": [{"sha": "98e027b6d2290b7cde3e2bfbc68b64960df4c9ed", "filename": "clippy_lints/src/methods/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2487f8f461134f93459415642f730ac6c4a2d659/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2487f8f461134f93459415642f730ac6c4a2d659/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods%2Fmod.rs?ref=2487f8f461134f93459415642f730ac6c4a2d659", "patch": "@@ -3374,7 +3374,7 @@ fn lint_into_iter(cx: &LateContext<'_>, expr: &hir::Expr<'_>, self_ref_ty: Ty<'_\n             INTO_ITER_ON_REF,\n             method_span,\n             &format!(\n-                \"this `.into_iter()` call is equivalent to `.{}()` and will not move the `{}`\",\n+                \"this `.into_iter()` call is equivalent to `.{}()` and will not consume the `{}`\",\n                 method_name, kind,\n             ),\n             \"call directly\","}, {"sha": "28003b365bbd50f675dd7fb11bf4759a3badb243", "filename": "tests/ui/into_iter_on_ref.stderr", "status": "modified", "additions": 27, "deletions": 27, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/2487f8f461134f93459415642f730ac6c4a2d659/tests%2Fui%2Finto_iter_on_ref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/2487f8f461134f93459415642f730ac6c4a2d659/tests%2Fui%2Finto_iter_on_ref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Finto_iter_on_ref.stderr?ref=2487f8f461134f93459415642f730ac6c4a2d659", "patch": "@@ -1,162 +1,162 @@\n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Vec`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Vec`\n   --> $DIR/into_iter_on_ref.rs:14:30\n    |\n LL |     let _ = (&vec![1, 2, 3]).into_iter(); //~ WARN equivalent to .iter()\n    |                              ^^^^^^^^^ help: call directly: `iter`\n    |\n    = note: `-D clippy::into-iter-on-ref` implied by `-D warnings`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `slice`\n   --> $DIR/into_iter_on_ref.rs:15:46\n    |\n LL |     let _ = vec![1, 2, 3].into_boxed_slice().into_iter(); //~ WARN equivalent to .iter()\n    |                                              ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `slice`\n   --> $DIR/into_iter_on_ref.rs:16:41\n    |\n LL |     let _ = std::rc::Rc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `slice`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `slice`\n   --> $DIR/into_iter_on_ref.rs:17:44\n    |\n LL |     let _ = std::sync::Arc::from(&[X][..]).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `array`\n   --> $DIR/into_iter_on_ref.rs:19:32\n    |\n LL |     let _ = (&&&&&&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `array`\n   --> $DIR/into_iter_on_ref.rs:20:36\n    |\n LL |     let _ = (&&&&mut &&&[1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter()\n    |                                    ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `array`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `array`\n   --> $DIR/into_iter_on_ref.rs:21:40\n    |\n LL |     let _ = (&mut &mut &mut [1, 2, 3]).into_iter(); //~ ERROR equivalent to .iter_mut()\n    |                                        ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Option`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Option`\n   --> $DIR/into_iter_on_ref.rs:23:24\n    |\n LL |     let _ = (&Some(4)).into_iter(); //~ WARN equivalent to .iter()\n    |                        ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Option`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `Option`\n   --> $DIR/into_iter_on_ref.rs:24:28\n    |\n LL |     let _ = (&mut Some(5)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                            ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Result`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Result`\n   --> $DIR/into_iter_on_ref.rs:25:32\n    |\n LL |     let _ = (&Ok::<_, i32>(6)).into_iter(); //~ WARN equivalent to .iter()\n    |                                ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Result`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `Result`\n   --> $DIR/into_iter_on_ref.rs:26:37\n    |\n LL |     let _ = (&mut Err::<i32, _>(7)).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                     ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Vec`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Vec`\n   --> $DIR/into_iter_on_ref.rs:27:34\n    |\n LL |     let _ = (&Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                  ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `Vec`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `Vec`\n   --> $DIR/into_iter_on_ref.rs:28:38\n    |\n LL |     let _ = (&mut Vec::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                      ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BTreeMap`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `BTreeMap`\n   --> $DIR/into_iter_on_ref.rs:29:44\n    |\n LL |     let _ = (&BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                            ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `BTreeMap`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `BTreeMap`\n   --> $DIR/into_iter_on_ref.rs:30:48\n    |\n LL |     let _ = (&mut BTreeMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                                ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `VecDeque`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `VecDeque`\n   --> $DIR/into_iter_on_ref.rs:31:39\n    |\n LL |     let _ = (&VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `VecDeque`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `VecDeque`\n   --> $DIR/into_iter_on_ref.rs:32:43\n    |\n LL |     let _ = (&mut VecDeque::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                           ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `LinkedList`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `LinkedList`\n   --> $DIR/into_iter_on_ref.rs:33:41\n    |\n LL |     let _ = (&LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `LinkedList`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `LinkedList`\n   --> $DIR/into_iter_on_ref.rs:34:45\n    |\n LL |     let _ = (&mut LinkedList::<i32>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                             ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `HashMap`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `HashMap`\n   --> $DIR/into_iter_on_ref.rs:35:43\n    |\n LL |     let _ = (&HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not move the `HashMap`\n+error: this `.into_iter()` call is equivalent to `.iter_mut()` and will not consume the `HashMap`\n   --> $DIR/into_iter_on_ref.rs:36:47\n    |\n LL |     let _ = (&mut HashMap::<i32, u64>::new()).into_iter(); //~ WARN equivalent to .iter_mut()\n    |                                               ^^^^^^^^^ help: call directly: `iter_mut`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BTreeSet`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `BTreeSet`\n   --> $DIR/into_iter_on_ref.rs:38:39\n    |\n LL |     let _ = (&BTreeSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                       ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `BinaryHeap`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `BinaryHeap`\n   --> $DIR/into_iter_on_ref.rs:39:41\n    |\n LL |     let _ = (&BinaryHeap::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                         ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `HashSet`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `HashSet`\n   --> $DIR/into_iter_on_ref.rs:40:38\n    |\n LL |     let _ = (&HashSet::<i32>::new()).into_iter(); //~ WARN equivalent to .iter()\n    |                                      ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `Path`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `Path`\n   --> $DIR/into_iter_on_ref.rs:41:43\n    |\n LL |     let _ = std::path::Path::new(\"12/34\").into_iter(); //~ WARN equivalent to .iter()\n    |                                           ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `PathBuf`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `PathBuf`\n   --> $DIR/into_iter_on_ref.rs:42:47\n    |\n LL |     let _ = std::path::PathBuf::from(\"12/34\").into_iter(); //~ ERROR equivalent to .iter()\n    |                                               ^^^^^^^^^ help: call directly: `iter`\n \n-error: this `.into_iter()` call is equivalent to `.iter()` and will not move the `array`\n+error: this `.into_iter()` call is equivalent to `.iter()` and will not consume the `array`\n   --> $DIR/into_iter_on_ref.rs:44:26\n    |\n LL |     let _ = (&[1, 2, 3]).into_iter().next(); //~ WARN equivalent to .iter()"}]}