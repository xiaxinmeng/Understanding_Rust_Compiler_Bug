{"sha": "5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUyMzNlZGNmMWM3ZWU3MGFjMjVlNGVjMTExNWMzNTQ2ZjUzZDhhMmQ=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T14:34:19Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-03-01T14:34:19Z"}, "message": "Auto merge of #82216 - kulikjak:fix-solaris-target, r=nagisa,Mark-Simulacrum\n\nmake x86_64-pc-solaris the default target for x86-64 Solaris\n\nThis change makes `x86_64-pc-solaris` the default compilation target for x86-64 Solaris/Illumos (based on [this exchange](https://github.com/rust-lang/rust/issues/68214#issuecomment-748042054) with `@varkor).`\n\nI tried several ways of doing this (leveraging the alias support added with #61761 and improved/fixed with #80073) and found out that cross-compilation to the new one is by far the simplest way of doing this. It can be achieved by adding the following arguments: `--build x86_64-sun-solaris --host x86_64-pc-solaris --target x86_64-pc-solaris` and enabling the cross compilation with `PKG_CONFIG_ALLOW_CROSS=1` environment variable.\n\nI also removed alias support altogether - `x86_64-pc-solaris` and `x86_64-sun-solaris` are now two separate targets. The problem with aliases is that even if rust internally knows that two are the same, other tools building with rust don't know that, resulting in build issues like the one with firefox mentioned [here](https://github.com/rust-lang/rust/issues/68214#issuecomment-746144229). I think that once the dust settles and `x86_64-pc-solaris` becomes the default, `x86_64-sun-solaris` can be removed.\n\nIf you agree with the above, I have two subsequent questions:\n1. Is there a preferred way to display deprecation warnings when `x86_64-sun-solaris` is passed into the compiler as an argument? I am not sure whether target deprecation was done before.\n2. Where would be the best way to document this change for those using rust on Solaris? Without the cross-compilation arguments (used once to build a new version), the build won't work. Should I add it into [RELEASES.md](https://github.com/rust-lang/rust/blob/master/RELEASES.md)?\n\nThanks!", "tree": {"sha": "b7e0a8ab549acd56fe34cd90eac7c289b59b8bc8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b7e0a8ab549acd56fe34cd90eac7c289b59b8bc8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "html_url": "https://github.com/rust-lang/rust/commit/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "09db05762b283bed62d4f92729cfee4646519833", "url": "https://api.github.com/repos/rust-lang/rust/commits/09db05762b283bed62d4f92729cfee4646519833", "html_url": "https://github.com/rust-lang/rust/commit/09db05762b283bed62d4f92729cfee4646519833"}, {"sha": "47f291ec2d9d6e4820cca517e69b3efddec40c20", "url": "https://api.github.com/repos/rust-lang/rust/commits/47f291ec2d9d6e4820cca517e69b3efddec40c20", "html_url": "https://github.com/rust-lang/rust/commit/47f291ec2d9d6e4820cca517e69b3efddec40c20"}], "stats": {"total": 95, "additions": 56, "deletions": 39}, "files": [{"sha": "a3900ebcea99c687398df144d1bd0e4145cb5901", "filename": "compiler/rustc_session/src/config.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_session%2Fsrc%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_session%2Fsrc%2Fconfig.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -1536,7 +1536,7 @@ fn parse_target_triple(matches: &getopts::Matches, error_format: ErrorOutputType\n                 early_error(error_format, &format!(\"target file {:?} does not exist\", path))\n             })\n         }\n-        Some(target) => TargetTriple::from_alias(target),\n+        Some(target) => TargetTriple::TargetTriple(target),\n         _ => TargetTriple::from_triple(host_triple()),\n     }\n }"}, {"sha": "039e9a8b2745f9ae7685dbc54a637dbb19383521", "filename": "compiler/rustc_target/src/spec/mod.rs", "status": "modified", "additions": 2, "deletions": 21, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fmod.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -736,9 +736,8 @@ supported_targets! {\n     (\"armv7r-none-eabi\", armv7r_none_eabi),\n     (\"armv7r-none-eabihf\", armv7r_none_eabihf),\n \n-    // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n-    // (See <https://github.com/rust-lang/rust/issues/40531>.)\n-    (\"x86_64-sun-solaris\", \"x86_64-pc-solaris\", x86_64_sun_solaris),\n+    (\"x86_64-pc-solaris\", x86_64_pc_solaris),\n+    (\"x86_64-sun-solaris\", x86_64_sun_solaris),\n     (\"sparcv9-sun-solaris\", sparcv9_sun_solaris),\n \n     (\"x86_64-unknown-illumos\", x86_64_unknown_illumos),\n@@ -1986,24 +1985,6 @@ impl TargetTriple {\n         Ok(TargetTriple::TargetPath(canonicalized_path))\n     }\n \n-    /// Creates a target triple from its alias\n-    pub fn from_alias(triple: String) -> Self {\n-        macro_rules! target_aliases {\n-            ( $(($alias:literal, $target:literal ),)+ ) => {\n-                match triple.as_str() {\n-                    $( $alias => TargetTriple::from_triple($target), )+\n-                    _ => TargetTriple::TargetTriple(triple),\n-                }\n-            }\n-        }\n-\n-        target_aliases! {\n-            // `x86_64-pc-solaris` is an alias for `x86_64_sun_solaris` for backwards compatibility reasons.\n-            // (See <https://github.com/rust-lang/rust/issues/40531>.)\n-            (\"x86_64-pc-solaris\", \"x86_64-sun-solaris\"),\n-        }\n-    }\n-\n     /// Returns a string triple for this target.\n     ///\n     /// If this target is a path, the file name (without extension) is returned."}, {"sha": "59731f25821ffb2e28daba18e0554f492ab973a4", "filename": "compiler/rustc_target/src/spec/solaris_base.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsolaris_base.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -3,7 +3,6 @@ use crate::spec::TargetOptions;\n pub fn opts() -> TargetOptions {\n     TargetOptions {\n         os: \"solaris\".to_string(),\n-        vendor: \"sun\".to_string(),\n         dynamic_linking: true,\n         executables: true,\n         has_rpath: true,"}, {"sha": "abc46a8c9c3ac322209a1a43284fa1c18679ce30", "filename": "compiler/rustc_target/src/spec/sparcv9_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fsparcv9_sun_solaris.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -7,6 +7,7 @@ pub fn target() -> Target {\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     // llvm calls this \"v9\"\n     base.cpu = \"v9\".to_string();\n+    base.vendor = \"sun\".to_string();\n     base.max_atomic_width = Some(64);\n \n     Target {"}, {"sha": "75eece74ff97d8b4b4f6f760b17a5ab789892cde", "filename": "compiler/rustc_target/src/spec/x86_64_pc_solaris.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_pc_solaris.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -0,0 +1,19 @@\n+use crate::spec::{LinkerFlavor, StackProbeType, Target};\n+\n+pub fn target() -> Target {\n+    let mut base = super::solaris_base::opts();\n+    base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n+    base.cpu = \"x86-64\".to_string();\n+    base.vendor = \"pc\".to_string();\n+    base.max_atomic_width = Some(64);\n+    base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n+\n+    Target {\n+        llvm_target: \"x86_64-pc-solaris\".to_string(),\n+        pointer_width: 64,\n+        data_layout: \"e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128\"\n+            .to_string(),\n+        arch: \"x86_64\".to_string(),\n+        options: base,\n+    }\n+}"}, {"sha": "63e524fa8a9a2cf6a75e90085d84599cc4bc952a", "filename": "compiler/rustc_target/src/spec/x86_64_sun_solaris.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fx86_64_sun_solaris.rs?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -4,6 +4,7 @@ pub fn target() -> Target {\n     let mut base = super::solaris_base::opts();\n     base.pre_link_args.insert(LinkerFlavor::Gcc, vec![\"-m64\".to_string()]);\n     base.cpu = \"x86-64\".to_string();\n+    base.vendor = \"sun\".to_string();\n     base.max_atomic_width = Some(64);\n     base.stack_probes = StackProbeType::InlineOrCall { min_llvm_version_for_inline: (11, 0, 1) };\n "}, {"sha": "62bf4ffd380a0fd8bc61c01c6a52a1725a5cddc1", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -240,13 +240,16 @@ def default_build_triple(verbose):\n         else:\n             ostype = 'unknown-linux-gnu'\n     elif ostype == 'SunOS':\n-        ostype = 'sun-solaris'\n+        ostype = 'pc-solaris'\n         # On Solaris, uname -m will return a machine classification instead\n         # of a cpu type, so uname -p is recommended instead.  However, the\n         # output from that option is too generic for our purposes (it will\n         # always emit 'i386' on x86/amd64 systems).  As such, isainfo -k\n         # must be used instead.\n         cputype = require(['isainfo', '-k']).decode(default_encoding)\n+        # sparc cpus have sun as a target vendor\n+        if 'sparc' in cputype:\n+            ostype = 'sun-solaris'\n     elif ostype.startswith('MINGW'):\n         # msys' `uname` does not print gcc configuration, but prints msys\n         # configuration. so we cannot believe `uname -m`:"}, {"sha": "7bb3cb14516887c7ea9171ea442c3c8deddff76a", "filename": "src/ci/docker/host-x86_64/dist-various-2/Dockerfile", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2FDockerfile?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -39,9 +39,9 @@ ENV \\\n     AR_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-ar \\\n     CC_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-gcc \\\n     CXX_sparcv9_sun_solaris=sparcv9-sun-solaris2.10-g++ \\\n-    AR_x86_64_sun_solaris=x86_64-sun-solaris2.10-ar \\\n-    CC_x86_64_sun_solaris=x86_64-sun-solaris2.10-gcc \\\n-    CXX_x86_64_sun_solaris=x86_64-sun-solaris2.10-g++ \\\n+    AR_x86_64_pc_solaris=x86_64-pc-solaris2.10-ar \\\n+    CC_x86_64_pc_solaris=x86_64-pc-solaris2.10-gcc \\\n+    CXX_x86_64_pc_solaris=x86_64-pc-solaris2.10-g++ \\\n     CC_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-gcc-8 \\\n     CXX_armv7_unknown_linux_gnueabi=arm-linux-gnueabi-g++-8 \\\n     AR_x86_64_fortanix_unknown_sgx=ar \\\n@@ -100,7 +100,7 @@ ENV TARGETS=$TARGETS,aarch64-fuchsia\n ENV TARGETS=$TARGETS,wasm32-unknown-unknown\n ENV TARGETS=$TARGETS,wasm32-wasi\n ENV TARGETS=$TARGETS,sparcv9-sun-solaris\n-ENV TARGETS=$TARGETS,x86_64-sun-solaris\n+ENV TARGETS=$TARGETS,x86_64-pc-solaris\n ENV TARGETS=$TARGETS,x86_64-unknown-linux-gnux32\n ENV TARGETS=$TARGETS,x86_64-fortanix-unknown-sgx\n ENV TARGETS=$TARGETS,nvptx64-nvidia-cuda"}, {"sha": "ee76fafb1f94812c96f11bdb354c7648048f28ee", "filename": "src/ci/docker/host-x86_64/dist-various-2/build-solaris-toolchain.sh", "status": "modified", "additions": 21, "deletions": 8, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-solaris-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-solaris-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fdist-various-2%2Fbuild-solaris-toolchain.sh?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -9,14 +9,27 @@ APT_ARCH=$3\n BINUTILS=2.28.1\n GCC=6.5.0\n \n+# Choose correct target based on the $ARCH\n+case \"$ARCH\" in\n+x86_64)\n+  TARGET=x86_64-pc-solaris2.10\n+  ;;\n+sparcv9)\n+  TARGET=sparcv9-sun-solaris2.10\n+  ;;\n+*)\n+  printf 'ERROR: unknown architecture: %s\\n' \"$ARCH\"\n+  exit 1\n+esac\n+\n # First up, build binutils\n mkdir binutils\n cd binutils\n \n curl https://ftp.gnu.org/gnu/binutils/binutils-$BINUTILS.tar.xz | tar xJf -\n mkdir binutils-build\n cd binutils-build\n-hide_output ../binutils-$BINUTILS/configure --target=$ARCH-sun-solaris2.10\n+hide_output ../binutils-$BINUTILS/configure --target=$TARGET\n hide_output make -j10\n hide_output make install\n \n@@ -62,13 +75,13 @@ patch -p0  << 'EOF'\n -extern size_t strnlen(const char *, size_t);\n EOF\n \n-mkdir                  /usr/local/$ARCH-sun-solaris2.10/usr\n-mv usr/include         /usr/local/$ARCH-sun-solaris2.10/usr/include\n-mv usr/lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.10/lib\n-mv     lib/$LIB_ARCH/* /usr/local/$ARCH-sun-solaris2.10/lib\n+mkdir                  /usr/local/$TARGET/usr\n+mv usr/include         /usr/local/$TARGET/usr/include\n+mv usr/lib/$LIB_ARCH/* /usr/local/$TARGET/lib\n+mv     lib/$LIB_ARCH/* /usr/local/$TARGET/lib\n \n-ln -s usr/include /usr/local/$ARCH-sun-solaris2.10/sys-include\n-ln -s usr/include /usr/local/$ARCH-sun-solaris2.10/include\n+ln -s usr/include /usr/local/$TARGET/sys-include\n+ln -s usr/include /usr/local/$TARGET/include\n \n cd ..\n rm -rf solaris\n@@ -84,7 +97,7 @@ mkdir ../gcc-build\n cd ../gcc-build\n hide_output ../gcc-$GCC/configure \\\n   --enable-languages=c,c++        \\\n-  --target=$ARCH-sun-solaris2.10  \\\n+  --target=$TARGET                \\\n   --with-gnu-as                   \\\n   --with-gnu-ld                   \\\n   --disable-multilib              \\"}, {"sha": "3f1d5f3426abf4ca5a60c45a25c7f0559b857528", "filename": "src/ci/docker/scripts/illumos-toolchain.sh", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fscripts%2Fillumos-toolchain.sh", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fci%2Fdocker%2Fscripts%2Fillumos-toolchain.sh", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fscripts%2Fillumos-toolchain.sh?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -18,7 +18,7 @@ x86_64)\n         exit 1\n esac\n \n-BUILD_TARGET=\"$ARCH-sun-solaris2.10\"\n+BUILD_TARGET=\"$ARCH-pc-solaris2.10\"\n \n #\n # The illumos and the Solaris build both use the same GCC-level host triple,"}, {"sha": "d3b88c019f0194d89815aa6c8431a52dc7ef4c86", "filename": "src/doc/rustc/src/platform-support.md", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "raw_url": "https://github.com/rust-lang/rust/raw/5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc%2Fsrc%2Fplatform-support.md?ref=5233edcf1c7ee70ac25e4ec1115c3546f53d8a2d", "patch": "@@ -133,7 +133,7 @@ target | std | host | notes\n `x86_64-fortanix-unknown-sgx` | \u2713 |  | [Fortanix ABI] for 64-bit Intel SGX\n `x86_64-fuchsia` | \u2713 |  | 64-bit Fuchsia\n `x86_64-linux-android` | \u2713 |  | 64-bit x86 Android\n-`x86_64-sun-solaris` | \u2713 |  | 64-bit Solaris 10/11, illumos\n+`x86_64-pc-solaris` | \u2713 |  | 64-bit Solaris 10/11, illumos\n `x86_64-unknown-freebsd` | \u2713 | \u2713 | 64-bit FreeBSD\n `x86_64-unknown-illumos` | \u2713 | \u2713 | illumos\n `x86_64-unknown-linux-gnux32` | \u2713 |  | 64-bit Linux (x32 ABI) (kernel 4.15, glibc 2.27)\n@@ -218,7 +218,7 @@ target | std | host | notes\n `x86_64-apple-ios-macabi` | \u2713 |  | Apple Catalyst on x86_64\n `x86_64-apple-tvos` | * | | x86 64-bit tvOS\n `x86_64-linux-kernel` | * |  | Linux kernel modules\n-`x86_64-pc-solaris` | ? |  |\n+`x86_64-sun-solaris` | ? |  | Deprecated target for 64-bit Solaris 10/11, illumos\n `x86_64-pc-windows-msvc` | \u2713 |  | 64-bit Windows XP support\n `x86_64-unknown-dragonfly` | \u2713 | \u2713 | 64-bit DragonFlyBSD\n `x86_64-unknown-haiku` | \u2713 | \u2713 | 64-bit Haiku"}]}