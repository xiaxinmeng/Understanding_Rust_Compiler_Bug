{"sha": "cf167c9c9c0576472b67f5498a074bc697c9af23", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNmMTY3YzljOWMwNTc2NDcyYjY3ZjU0OThhMDc0YmM2OTdjOWFmMjM=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-24T22:44:57Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2021-07-27T19:18:46Z"}, "message": "Only emit lint for local macros", "tree": {"sha": "63afa5ca0e72cafc07a0a0c10470cde9a9282a1a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/63afa5ca0e72cafc07a0a0c10470cde9a9282a1a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cf167c9c9c0576472b67f5498a074bc697c9af23", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAmEAXBcACgkQtAh+UQ6Y\nsWRmwhAAhNQftdP3PPujfgjN4ir93icBpl8yx/mNK1OOkVhnBFRZEHXrTLIDZeRV\nrH6nzV4QDBdm1s2TW3BAruhjEXQUAKkzSG4z603ldjZXYSDODApxLnmolRMPHR6J\ninFjH9u72v4JQKSth6NL2zeUnWko8SjRv1iEtc/zlDcb3lYJdvi62g7+wWRZYxU1\nu8Jeox2WhnejoJRn7JKMoTNFlZMhuvjSIfxZMON/3QPOGfsi+XIjCWVUqhZBSvU5\nC9kKRA3q+7h0KD/yq7O7Q4S6OTJ7AxYkYs9zq+pbZSM8IZDOz1xcnqrvgyCJyMPy\nibftjoKTkvt5OedmFBdzo80GMMIgUZVxrSyKbZAQx6Mg2mGNwUd8gIuoF9Rsm1WQ\nYRzDe80VloCdU3AV+ScmxMKSK4zxvUWIXUU9JcAQAn5gB3Hecl7wQ2AOXFX/ySce\n25cl4K9QU5Rtv9cW/YHeqobiGCyf2wWSGGoHfDCQsO3iTDCTLPwsJvK1sudDUDr6\n3C7lGhBB+rHb1t4AAbIKrRyXhWPStEkUe4LXUnDWwugWG2pIFUQZKEybVgOD6r3q\n1JTqWw9n8RJ4tOHVBnc8dNUqTEbaE8i132R1e6d6SdcQTq78ML29B2q5pqSUZT24\nTTs1OWd/uGyav6gdr0JTQS6ztdMpZ7fxJdXS7VpqbrnO+jYR+18=\n=4LAo\n-----END PGP SIGNATURE-----", "payload": "tree 63afa5ca0e72cafc07a0a0c10470cde9a9282a1a\nparent 886dea2bcdad68cadc13ea84e42df0c94179f79a\nauthor Aaron Hill <aa1ronham@gmail.com> 1627166697 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1627413526 -0500\n\nOnly emit lint for local macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cf167c9c9c0576472b67f5498a074bc697c9af23", "html_url": "https://github.com/rust-lang/rust/commit/cf167c9c9c0576472b67f5498a074bc697c9af23", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cf167c9c9c0576472b67f5498a074bc697c9af23/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "886dea2bcdad68cadc13ea84e42df0c94179f79a", "url": "https://api.github.com/repos/rust-lang/rust/commits/886dea2bcdad68cadc13ea84e42df0c94179f79a", "html_url": "https://github.com/rust-lang/rust/commit/886dea2bcdad68cadc13ea84e42df0c94179f79a"}], "stats": {"total": 39, "additions": 32, "deletions": 7}, "files": [{"sha": "9aee86c9e57ddec76967dae4e2276312e1b17ac1", "filename": "compiler/rustc_expand/src/mbe/macro_rules.rs", "status": "modified", "additions": 19, "deletions": 7, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/cf167c9c9c0576472b67f5498a074bc697c9af23/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf167c9c9c0576472b67f5498a074bc697c9af23/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fmbe%2Fmacro_rules.rs?ref=cf167c9c9c0576472b67f5498a074bc697c9af23", "patch": "@@ -45,6 +45,8 @@ crate struct ParserAnyMacro<'a> {\n     lint_node_id: NodeId,\n     is_trailing_mac: bool,\n     arm_span: Span,\n+    /// Whether or not this macro is defined in the current crate\n+    is_local: bool,\n }\n \n crate fn annotate_err_with_kind(\n@@ -124,6 +126,7 @@ impl<'a> ParserAnyMacro<'a> {\n             lint_node_id,\n             arm_span,\n             is_trailing_mac,\n+            is_local,\n         } = *self;\n         let snapshot = &mut parser.clone();\n         let fragment = match parse_ast_fragment(parser, kind) {\n@@ -138,13 +141,15 @@ impl<'a> ParserAnyMacro<'a> {\n         // `macro_rules! m { () => { panic!(); } }` isn't parsed by `.parse_expr()`,\n         // but `m!()` is allowed in expression positions (cf. issue #34706).\n         if kind == AstFragmentKind::Expr && parser.token == token::Semi {\n-            parser.sess.buffer_lint_with_diagnostic(\n-                SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n-                parser.token.span,\n-                lint_node_id,\n-                \"trailing semicolon in macro used in expression position\",\n-                BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n-            );\n+            if is_local {\n+                parser.sess.buffer_lint_with_diagnostic(\n+                    SEMICOLON_IN_EXPRESSIONS_FROM_MACROS,\n+                    parser.token.span,\n+                    lint_node_id,\n+                    \"trailing semicolon in macro used in expression position\",\n+                    BuiltinLintDiagnostics::TrailingMacro(is_trailing_mac, macro_ident),\n+                );\n+            }\n             parser.bump();\n         }\n \n@@ -162,6 +167,7 @@ struct MacroRulesMacroExpander {\n     lhses: Vec<mbe::TokenTree>,\n     rhses: Vec<mbe::TokenTree>,\n     valid: bool,\n+    is_local: bool,\n }\n \n impl TTMacroExpander for MacroRulesMacroExpander {\n@@ -183,6 +189,7 @@ impl TTMacroExpander for MacroRulesMacroExpander {\n             input,\n             &self.lhses,\n             &self.rhses,\n+            self.is_local,\n         )\n     }\n }\n@@ -210,6 +217,7 @@ fn generic_extension<'cx>(\n     arg: TokenStream,\n     lhses: &[mbe::TokenTree],\n     rhses: &[mbe::TokenTree],\n+    is_local: bool,\n ) -> Box<dyn MacResult + 'cx> {\n     let sess = &cx.sess.parse_sess;\n \n@@ -311,6 +319,7 @@ fn generic_extension<'cx>(\n                     lint_node_id: cx.current_expansion.lint_node_id,\n                     is_trailing_mac: cx.current_expansion.is_trailing_mac,\n                     arm_span,\n+                    is_local,\n                 });\n             }\n             Failure(token, msg) => match best_failure {\n@@ -544,6 +553,9 @@ pub fn compile_declarative_macro(\n         lhses,\n         rhses,\n         valid,\n+        // Macros defined in the current crate have a real node id,\n+        // whereas macros from an external crate have a dummy id.\n+        is_local: def.id != DUMMY_NODE_ID,\n     }))\n }\n "}, {"sha": "781391cc574a9d53e6fb10c3fa51be9d0a61d58b", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/auxiliary/foreign-crate.rs", "status": "added", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cf167c9c9c0576472b67f5498a074bc697c9af23/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf167c9c9c0576472b67f5498a074bc697c9af23/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fauxiliary%2Fforeign-crate.rs?ref=cf167c9c9c0576472b67f5498a074bc697c9af23", "patch": "@@ -0,0 +1,4 @@\n+#[macro_export]\n+macro_rules! my_macro {\n+    () => { true; }\n+}"}, {"sha": "374506366f80236ed8a73910f08df4b21157b19e", "filename": "src/test/ui/lint/semicolon-in-expressions-from-macros/foreign-crate.rs", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/cf167c9c9c0576472b67f5498a074bc697c9af23/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cf167c9c9c0576472b67f5498a074bc697c9af23/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Fsemicolon-in-expressions-from-macros%2Fforeign-crate.rs?ref=cf167c9c9c0576472b67f5498a074bc697c9af23", "patch": "@@ -0,0 +1,9 @@\n+// aux-build:foreign-crate.rs\n+// check-pass\n+\n+extern crate foreign_crate;\n+\n+// Test that we do not lint for a macro in a foreign crate\n+fn main() {\n+    let _ = foreign_crate::my_macro!();\n+}"}]}