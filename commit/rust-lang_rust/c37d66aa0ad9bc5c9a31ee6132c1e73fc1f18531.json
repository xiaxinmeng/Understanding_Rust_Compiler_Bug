{"sha": "c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMzN2Q2NmFhMGFkOWJjNWM5YTMxZWU2MTMyYzFlNzNmYzFmMTg1MzE=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-05-20T23:48:11Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-05-20T23:48:11Z"}, "message": "Rollup merge of #41892 - Gankro:needs_drop, r=alexcrichton\n\nexpose needs_drop under mem\n\nNote that I purposefully didn't update the intrinsic's documentation, because I think it makes sense for it be more... \"honest\" about its semantics.", "tree": {"sha": "acdbce72969c0c02ae53d72682be6e394f650927", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/acdbce72969c0c02ae53d72682be6e394f650927"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "html_url": "https://github.com/rust-lang/rust/commit/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01951a61a49dca35747dc9ba03e5536f337de239", "url": "https://api.github.com/repos/rust-lang/rust/commits/01951a61a49dca35747dc9ba03e5536f337de239", "html_url": "https://github.com/rust-lang/rust/commit/01951a61a49dca35747dc9ba03e5536f337de239"}, {"sha": "1f01b09ddcd5d5ab0927528b1db0962b4310e3fc", "url": "https://api.github.com/repos/rust-lang/rust/commits/1f01b09ddcd5d5ab0927528b1db0962b4310e3fc", "html_url": "https://github.com/rust-lang/rust/commit/1f01b09ddcd5d5ab0927528b1db0962b4310e3fc"}], "stats": {"total": 85, "additions": 72, "deletions": 13}, "files": [{"sha": "10ae95695a2dbdd55aefc2142a63fe48cddf95df", "filename": "src/doc/unstable-book/src/library-features/needs-drop.md", "status": "added", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fneeds-drop.md?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -0,0 +1,7 @@\n+# `needs_drop`\n+\n+The tracking issue for this feature is: [#41890]\n+\n+[#41890]: https://github.com/rust-lang/rust/issues/41890\n+\n+------------------------"}, {"sha": "4338ac7fd022c362f1065147fad6ecc8eb445b67", "filename": "src/libarena/lib.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibarena%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibarena%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibarena%2Flib.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -32,6 +32,7 @@\n #![feature(core_intrinsics)]\n #![feature(dropck_eyepatch)]\n #![feature(generic_param_attrs)]\n+#![feature(needs_drop)]\n #![cfg_attr(stage0, feature(staged_api))]\n #![cfg_attr(test, feature(test))]\n \n@@ -82,7 +83,7 @@ impl<T> TypedArenaChunk<T> {\n     unsafe fn destroy(&mut self, len: usize) {\n         // The branch on needs_drop() is an -O1 performance optimization.\n         // Without the branch, dropping TypedArena<u8> takes linear time.\n-        if intrinsics::needs_drop::<T>() {\n+        if mem::needs_drop::<T>() {\n             let mut start = self.start();\n             // Destroy all allocated objects.\n             for _ in 0..len {\n@@ -350,7 +351,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc<T>(&self, object: T) -> &mut T {\n         unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n+            assert!(!mem::needs_drop::<T>());\n             assert!(mem::size_of::<T>() != 0);\n \n             self.align_for::<T>();\n@@ -379,9 +380,7 @@ impl DroplessArena {\n     #[inline]\n     pub fn alloc_slice<T>(&self, slice: &[T]) -> &mut [T]\n         where T: Copy {\n-        unsafe {\n-            assert!(!intrinsics::needs_drop::<T>());\n-        }\n+        assert!(!mem::needs_drop::<T>());\n         assert!(mem::size_of::<T>() != 0);\n         assert!(slice.len() != 0);\n         self.align_for::<T>();"}, {"sha": "18428d378e3d24fde213900059110830111ccd7e", "filename": "src/libcore/mem.rs", "status": "modified", "additions": 52, "deletions": 0, "changes": 52, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibcore%2Fmem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibcore%2Fmem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmem.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -302,6 +302,58 @@ pub fn align_of_val<T: ?Sized>(val: &T) -> usize {\n     unsafe { intrinsics::min_align_of_val(val) }\n }\n \n+/// Returns whether dropping values of type `T` matters.\n+///\n+/// This is purely an optimization hint, and may be implemented conservatively.\n+/// For instance, always returning `true` would be a valid implementation of\n+/// this function.\n+///\n+/// Low level implementations of things like collections, which need to manually\n+/// drop their data, should use this function to avoid unnecessarily\n+/// trying to drop all their contents when they are destroyed. This might not\n+/// make a difference in release builds (where a loop that has no side-effects\n+/// is easily detected and eliminated), but is often a big win for debug builds.\n+///\n+/// Note that `ptr::drop_in_place` already performs this check, so if your workload\n+/// can be reduced to some small number of drop_in_place calls, using this is\n+/// unnecessary. In particular note that you can drop_in_place a slice, and that\n+/// will do a single needs_drop check for all the values.\n+///\n+/// Types like Vec therefore just `drop_in_place(&mut self[..])` without using\n+/// needs_drop explicitly. Types like HashMap, on the other hand, have to drop\n+/// values one at a time and should use this API.\n+///\n+///\n+/// # Examples\n+///\n+/// Here's an example of how a collection might make use of needs_drop:\n+///\n+/// ```ignore\n+/// #![feature(needs_drop)]\n+/// use std::{mem, ptr};\n+///\n+/// pub struct MyCollection<T> { /* ... */ }\n+///\n+/// impl<T> Drop for MyCollection<T> {\n+///     fn drop(&mut self) {\n+///         unsafe {\n+///             // drop the data\n+///             if mem::needs_drop::<T>() {\n+///                 for x in self.iter_mut() {\n+///                     ptr::drop_in_place(x);\n+///                 }\n+///             }\n+///             self.free_buffer();\n+///         }\n+///     }\n+/// }\n+/// ```\n+#[inline]\n+#[unstable(feature = \"needs_drop\", issue = \"41890\")]\n+pub fn needs_drop<T>() -> bool {\n+    unsafe { intrinsics::needs_drop::<T>() }\n+}\n+\n /// Creates a value whose bytes are all zero.\n ///\n /// This has the same effect as allocating space with"}, {"sha": "50c721db849aa7307eeb18430e1eca93e4570fa5", "filename": "src/libstd/collections/hash/table.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcollections%2Fhash%2Ftable.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -12,9 +12,8 @@ use alloc::heap::{allocate, deallocate};\n \n use cmp;\n use hash::{BuildHasher, Hash, Hasher};\n-use intrinsics::needs_drop;\n use marker;\n-use mem::{align_of, size_of};\n+use mem::{align_of, size_of, needs_drop};\n use mem;\n use ops::{Deref, DerefMut};\n use ptr::{self, Unique, Shared};"}, {"sha": "b0820d6f05a0533c4471d4b7157e63af7f403de2", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -281,6 +281,7 @@\n #![feature(linkage)]\n #![feature(macro_reexport)]\n #![feature(needs_panic_runtime)]\n+#![feature(needs_drop)]\n #![feature(never_type)]\n #![feature(num_bits_bytes)]\n #![feature(old_wrapping)]"}, {"sha": "7dc61ce6654b9253673d3a9d857b2a557553b7d0", "filename": "src/libstd/sys/redox/fast_thread_local.rs", "status": "modified", "additions": 4, "deletions": 3, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ffast_thread_local.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -12,9 +12,10 @@\n #![unstable(feature = \"thread_local_internals\", issue = \"0\")]\n \n use cell::{Cell, UnsafeCell};\n-use intrinsics;\n+use mem;\n use ptr;\n \n+\n pub struct Key<T> {\n     inner: UnsafeCell<Option<T>>,\n \n@@ -37,7 +38,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -46,7 +47,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}, {"sha": "6b3973de84c97d940a575ff1ea78561fb3954348", "filename": "src/libstd/sys/unix/fast_thread_local.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ffast_thread_local.rs?ref=c37d66aa0ad9bc5c9a31ee6132c1e73fc1f18531", "patch": "@@ -13,7 +13,7 @@\n \n use cell::{Cell, UnsafeCell};\n use fmt;\n-use intrinsics;\n+use mem;\n use ptr;\n \n pub struct Key<T> {\n@@ -44,7 +44,7 @@ impl<T> Key<T> {\n \n     pub fn get(&'static self) -> Option<&'static UnsafeCell<Option<T>>> {\n         unsafe {\n-            if intrinsics::needs_drop::<T>() && self.dtor_running.get() {\n+            if mem::needs_drop::<T>() && self.dtor_running.get() {\n                 return None\n             }\n             self.register_dtor();\n@@ -53,7 +53,7 @@ impl<T> Key<T> {\n     }\n \n     unsafe fn register_dtor(&self) {\n-        if !intrinsics::needs_drop::<T>() || self.dtor_registered.get() {\n+        if !mem::needs_drop::<T>() || self.dtor_registered.get() {\n             return\n         }\n "}]}