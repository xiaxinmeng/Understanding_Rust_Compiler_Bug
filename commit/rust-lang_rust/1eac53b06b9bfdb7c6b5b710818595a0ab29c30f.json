{"sha": "1eac53b06b9bfdb7c6b5b710818595a0ab29c30f", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFlYWM1M2IwNmI5YmZkYjdjNmI1YjcxMDgxODU5NWEwYWIyOWMzMGY=", "commit": {"author": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-01T06:32:10Z"}, "committer": {"name": "Philipp Hansch", "email": "dev@phansch.net", "date": "2019-03-03T14:03:25Z"}, "message": "Cleanup 'Writing code' in CONTRIBUTING.md\n\nThis is now all included in `doc/adding_lints.md`", "tree": {"sha": "433f79b67dd78ab482a918e9e121315dfffb41d7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/433f79b67dd78ab482a918e9e121315dfffb41d7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEvUKv4zqIn2RHUgCKtvoGpuDiZlsFAlx73rMACgkQtvoGpuDi\nZlu10g/9GXrF+XkI4ICJvsseDuqh+ykU2iqeRm8OvcVkcBKM9fWN9qn3miaHa1qh\nxW273PuUpGap8FUWfdondQEB+EX1e01v6DeFgKDRb4cCZW+Ke2PpRn9Iji0wjTt6\nrtO/IC5DDxMsZtudAGX6l4c/7m7ey8Ch5SCXVOvP2LGaYQuqVyA+qjzR0MfvAdvI\njWHDJ+d4ezDHPMVNVose4PYlmyZIvILMIh6UiuLfR1FEWorkO/ySkJQpxV1OjkAR\nnbUjvdAewXI1ktqxm17Vdt7CN1ep4Ad+cRQxFm8sFiDHq9cun17OW7TPd13RfVSU\njSigvzvcrVm14IvY7y0tqSxvsqLSZUB9JJfd+HRFgCHXoRXPDX7yKg5SvNfYlVoN\nW5modwDBnlqLuN3SK3tmyxqlSNhBmRNmVMctiyyGVxJkc3oYDfQz7bC4Xh24aNkz\naeaOlDwHUGx6fdqdde2qDxWjWGV/oRQNKphGhlkykXemDZjh+KiOGn3+//FMmtC3\nmSEz4ia6oiPkNdMOXChtUFye2xZp78SEy2O7O3Ay2FafLxsbEIeJRJ23P+uf2FSw\npRGSxrTnvnas6swaqAWeqRUbtvbEOYEjs0yPVNIMHTKEz3UCIYzv1xD3eBL38VL9\ndDU9zPF2ND/O/hr69AirAkfItpsFP8WFNqtOFdEJt3AZg42d+Qk=\n=S9Jn\n-----END PGP SIGNATURE-----", "payload": "tree 433f79b67dd78ab482a918e9e121315dfffb41d7\nparent 68d04eda7b493668d34d5764dcaf46c5c996450a\nauthor Philipp Hansch <dev@phansch.net> 1551421930 +0100\ncommitter Philipp Hansch <dev@phansch.net> 1551621805 +0100\n\nCleanup 'Writing code' in CONTRIBUTING.md\n\nThis is now all included in `doc/adding_lints.md`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f", "html_url": "https://github.com/rust-lang/rust/commit/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f/comments", "author": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "committer": {"login": "phansch", "id": 2042399, "node_id": "MDQ6VXNlcjIwNDIzOTk=", "avatar_url": "https://avatars.githubusercontent.com/u/2042399?v=4", "gravatar_id": "", "url": "https://api.github.com/users/phansch", "html_url": "https://github.com/phansch", "followers_url": "https://api.github.com/users/phansch/followers", "following_url": "https://api.github.com/users/phansch/following{/other_user}", "gists_url": "https://api.github.com/users/phansch/gists{/gist_id}", "starred_url": "https://api.github.com/users/phansch/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/phansch/subscriptions", "organizations_url": "https://api.github.com/users/phansch/orgs", "repos_url": "https://api.github.com/users/phansch/repos", "events_url": "https://api.github.com/users/phansch/events{/privacy}", "received_events_url": "https://api.github.com/users/phansch/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "68d04eda7b493668d34d5764dcaf46c5c996450a", "url": "https://api.github.com/repos/rust-lang/rust/commits/68d04eda7b493668d34d5764dcaf46c5c996450a", "html_url": "https://github.com/rust-lang/rust/commit/68d04eda7b493668d34d5764dcaf46c5c996450a"}], "stats": {"total": 117, "additions": 3, "deletions": 114}, "files": [{"sha": "3eff20cead74f36cf8acf5498f64db9553becad3", "filename": "CONTRIBUTING.md", "status": "modified", "additions": 3, "deletions": 114, "changes": 117, "blob_url": "https://github.com/rust-lang/rust/blob/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f/CONTRIBUTING.md", "raw_url": "https://github.com/rust-lang/rust/raw/1eac53b06b9bfdb7c6b5b710818595a0ab29c30f/CONTRIBUTING.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CONTRIBUTING.md?ref=1eac53b06b9bfdb7c6b5b710818595a0ab29c30f", "patch": "@@ -14,11 +14,6 @@ All contributors are expected to follow the [Rust Code of Conduct](http://www.ru\n * [Getting started](#getting-started)\n   * [Finding something to fix/improve](#finding-something-to-fiximprove)\n * [Writing code](#writing-code)\n-  * [Author lint](#author-lint)\n-  * [Documentation](#documentation)\n-  * [Running test suite](#running-test-suite)\n-  * [Running rustfmt](#running-rustfmt)\n-  * [Testing manually](#testing-manually)\n * [How Clippy works](#how-clippy-works)\n * [Fixing nightly build failures](#fixing-build-failures-caused-by-rust)\n * [Issue and PR Triage](#issue-and-pr-triage)\n@@ -73,121 +68,15 @@ an AST expression). `match_def_path()` in Clippy's `utils` module can also be us\n \n ## Writing code\n \n-Clippy depends on the current git master version of rustc, which can change rapidly. Make sure you're\n-working near rust-clippy's master, and use the `setup-toolchain.sh` script to configure the appropriate\n-toolchain for this directory.\n-\n-[Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is a nice primer\n-to lint-writing, though it does get into advanced stuff. Most lints consist of an implementation of\n-`LintPass` with one or more of its default methods overridden. See the existing lints for examples\n-of this.\n+Have a look at the [docs for writing lints](doc/adding_lints.md) for more details. [Llogiq's blog post on lints](https://llogiq.github.io/2015/06/04/workflows.html) is also a nice primer\n+to lint-writing, though it does get into advanced stuff and may be a bit\n+outdated.\n \n If you want to add a new lint or change existing ones apart from bugfixing, it's\n also a good idea to give the [stability guarantees][rfc_stability] and\n [lint categories][rfc_lint_cats] sections of the [Clippy 1.0 RFC][clippy_rfc] a\n quick read.\n \n-### Author lint\n-\n-There is also the internal `author` lint to generate Clippy code that detects the offending pattern. It does not work for all of the Rust syntax, but can give a good starting point.\n-\n-First, create a new UI test file in the `tests/ui/` directory with the pattern you want to match:\n-\n-```rust\n-// ./tests/ui/my_lint.rs\n-fn main() {\n-    #[clippy::author]\n-    let arr: [i32; 1] = [7]; // Replace line with the code you want to match\n-}\n-```\n-\n-Now you run `TESTNAME=ui/my_lint cargo uitest` to produce\n-a `.stdout` file with the generated code:\n-\n-```rust\n-// ./tests/ui/my_lint.stdout\n-\n-if_chain! {\n-    if let ExprKind::Array(ref elements) = stmt.node;\n-    if elements.len() == 1;\n-    if let ExprKind::Lit(ref lit) = elements[0].node;\n-    if let LitKind::Int(7, _) = lit.node;\n-    then {\n-        // report your lint here\n-    }\n-}\n-```\n-\n-If the command was executed successfully, you can copy the code over to where you are implementing your lint.\n-\n-### Documentation\n-\n-Please document your lint with a doc comment akin to the following:\n-\n-```rust\n-/// **What it does:** Checks for ... (describe what the lint matches).\n-///\n-/// **Why is this bad?** Supply the reason for linting the code.\n-///\n-/// **Known problems:** None. (Or describe where it could go wrong.)\n-///\n-/// **Example:**\n-///\n-/// ```rust\n-/// // Bad\n-/// Insert a short example of code that triggers the lint\n-///\n-/// // Good\n-/// Insert a short example of improved code that doesn't trigger the lint\n-/// ```\n-```\n-\n-Once your lint is merged it will show up in the [lint list](https://rust-lang.github.io/rust-clippy/master/index.html)\n-\n-### Running test suite\n-\n-Use `cargo test` to run the whole testsuite.\n-\n-If you don't want to wait for all tests to finish, you can also execute a single test file by using `TESTNAME` to specify the test to run:\n-\n-```bash\n-TESTNAME=ui/empty_line_after_outer_attr cargo uitest\n-```\n-\n-Clippy uses UI tests. UI tests check that the output of the compiler is exactly as expected.\n-Of course there's little sense in writing the output yourself or copying it around.\n-Therefore you should use `tests/ui/update-all-references.sh` (after running\n-`cargo test`) and check whether the output looks as you expect with `git diff`. Commit all\n-`*.stderr` files, too.\n-\n-If the lint you are working on is making use of structured suggestions, the\n-test file should include a `// run-rustfix` comment at the top. This will\n-additionally run [rustfix](https://github.com/rust-lang-nursery/rustfix) for\n-that test. Rustfix will apply the suggestions from the lint to the code of the\n-test file and compare that to the contents of a `.fixed` file.\n-\n-Use `tests/ui/update-all-references.sh` to automatically generate the\n-`.fixed` file after running `cargo test`.\n-\n-### Running rustfmt\n-\n-[Rustfmt](https://github.com/rust-lang/rustfmt) is a tool for formatting Rust code according\n-to style guidelines. The code has to be formatted by `rustfmt` before a PR will be merged.\n-\n-It can be installed via `rustup`:\n-```bash\n-rustup component add rustfmt\n-```\n-\n-Use `cargo fmt --all` to format the whole codebase.\n-\n-### Testing manually\n-\n-Manually testing against an example file is useful if you have added some\n-`println!`s and test suite output becomes unreadable.  To try Clippy with your\n-local modifications, run `env CLIPPY_TESTS=true cargo run --bin clippy-driver -- -L ./target/debug input.rs`\n-from the working copy root.\n-\n ## How Clippy works\n \n Clippy is a [rustc compiler plugin][compiler_plugin]. The main entry point is at [`src/lib.rs`][main_entry]. In there, the lint registration is delegated to the [`clippy_lints`][lint_crate] crate."}]}