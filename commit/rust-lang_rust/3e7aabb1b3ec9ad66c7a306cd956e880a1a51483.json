{"sha": "3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlN2FhYmIxYjNlYzlhZDY2YzdhMzA2Y2Q5NTZlODgwYTFhNTE0ODM=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-01T14:41:36Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2020-06-09T13:37:05Z"}, "message": "lint: check for unit ret type after normalization\n\nThis commit moves the check that skips unit return types to after\nwhere the return type has been normalized - therefore ensuring that\nFFI-safety lints are not emitted for types which normalize to unit.\n\nSigned-off-by: David Wood <david@davidtw.co>", "tree": {"sha": "130dda4f7ea84e7bd1eced47df515abb6f4f478c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/130dda4f7ea84e7bd1eced47df515abb6f4f478c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEfgm2/wUjk9OnjxlyJZLnbIc4H9kFAl7fkIEACgkQJZLnbIc4\nH9mi2xAAibMcTckebi52mJWmTm4wJ0d+l4ZwG8GV0h/m/JpcQafoGnTcjKGF+IC4\nTyx8wtkozPNnpE/T9F0ndY1z8ih2dXux6aRYJTgCs6W5tcAEg2VwmpWqGRPQWENX\niXyXwkE4Zrz9QnXVsY7J2nvlrY/NtIopOMaLNuSIbGmDDsC/TqIWWVzS1RoLsLpM\nYVPM+aqxEExyLZGF0lFtU21DvZg2ftwkvNuKw0Fo5retC8wJ5+TEFr6qAVevcouX\nVugZKIRPEb1bi4BeoYAZotrQpcR8lTUeNUPhpTnoVPo3V1vaB/DcSdgl18jYpZdY\nLs9E9KRBfyl2L25erdMid4UDtySTo0g/A5CcE54LdGxDxKt+VFie2wbsnbpHIijF\nhGXjWJUq/xh8tYxcEYraLbMYjYeDnkZqs7NYzn1TES2Df4rIviOg6lZHWArfULRM\n3h2nTuYn/xicBccZmOlMkjwY4I9KIhXugWDhGb8wAZep/15sIP7+0GFGXgGHIJ77\nmWqK9wgncb5aUmDgf+NMAuiHp+m0s55dJxAgdQkvgvZv0hQedozD/SKIPp6vvum6\nAteH4lhbsMP1lId1a9hahDU0neBMCCDD2WD/LzK/evdW4K/ybmN/Qf51KM4Zu8Co\ne70MLAKdPiNWOOZA/J6RO1buEKdINBurCY8kMnAmkm1XZXWWyZ0=\n=OYqd\n-----END PGP SIGNATURE-----", "payload": "tree 130dda4f7ea84e7bd1eced47df515abb6f4f478c\nparent a8640cdf47b5424a1a194551f3e873e8d2726cb4\nauthor David Wood <david@davidtw.co> 1591022496 +0100\ncommitter David Wood <david@davidtw.co> 1591709825 +0100\n\nlint: check for unit ret type after normalization\n\nThis commit moves the check that skips unit return types to after\nwhere the return type has been normalized - therefore ensuring that\nFFI-safety lints are not emitted for types which normalize to unit.\n\nSigned-off-by: David Wood <david@davidtw.co>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "html_url": "https://github.com/rust-lang/rust/commit/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a8640cdf47b5424a1a194551f3e873e8d2726cb4", "url": "https://api.github.com/repos/rust-lang/rust/commits/a8640cdf47b5424a1a194551f3e873e8d2726cb4", "html_url": "https://github.com/rust-lang/rust/commit/a8640cdf47b5424a1a194551f3e873e8d2726cb4"}], "stats": {"total": 51, "additions": 26, "deletions": 25}, "files": [{"sha": "b60867b3d2d45070913a5c1fa074ae947259ae50", "filename": "src/librustc_lint/types.rs", "status": "modified", "additions": 21, "deletions": 10, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Flibrustc_lint%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Flibrustc_lint%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Ftypes.rs?ref=3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "patch": "@@ -946,7 +946,13 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn check_type_for_ffi_and_report_errors(&mut self, sp: Span, ty: Ty<'tcx>, is_static: bool) {\n+    fn check_type_for_ffi_and_report_errors(\n+        &mut self,\n+        sp: Span,\n+        ty: Ty<'tcx>,\n+        is_static: bool,\n+        is_return_type: bool,\n+    ) {\n         // We have to check for opaque types before `normalize_erasing_regions`,\n         // which will replace opaque types with their underlying concrete type.\n         if self.check_for_opaque_ty(sp, ty) {\n@@ -957,14 +963,21 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         // it is only OK to use this function because extern fns cannot have\n         // any generic types right now:\n         let ty = self.cx.tcx.normalize_erasing_regions(ParamEnv::reveal_all(), ty);\n-        // C doesn't really support passing arrays by value.\n-        // The only way to pass an array by value is through a struct.\n-        // So we first test that the top level isn't an array,\n-        // and then recursively check the types inside.\n+\n+        // C doesn't really support passing arrays by value - the only way to pass an array by value\n+        // is through a struct. So, first test that the top level isn't an array, and then\n+        // recursively check the types inside.\n         if !is_static && self.check_for_array_ty(sp, ty) {\n             return;\n         }\n \n+        // Don't report FFI errors for unit return types. This check exists here, and not in\n+        // `check_foreign_fn` (where it would make more sense) so that normalization has definitely\n+        // happened.\n+        if is_return_type && ty.is_unit() {\n+            return;\n+        }\n+\n         match self.check_type_for_ffi(&mut FxHashSet::default(), ty) {\n             FfiResult::FfiSafe => {}\n             FfiResult::FfiPhantom(ty) => {\n@@ -982,21 +995,19 @@ impl<'a, 'tcx> ImproperCTypesVisitor<'a, 'tcx> {\n         let sig = self.cx.tcx.erase_late_bound_regions(&sig);\n \n         for (input_ty, input_hir) in sig.inputs().iter().zip(decl.inputs) {\n-            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false);\n+            self.check_type_for_ffi_and_report_errors(input_hir.span, input_ty, false, false);\n         }\n \n         if let hir::FnRetTy::Return(ref ret_hir) = decl.output {\n             let ret_ty = sig.output();\n-            if !ret_ty.is_unit() {\n-                self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false);\n-            }\n+            self.check_type_for_ffi_and_report_errors(ret_hir.span, ret_ty, false, true);\n         }\n     }\n \n     fn check_foreign_static(&mut self, id: hir::HirId, span: Span) {\n         let def_id = self.cx.tcx.hir().local_def_id(id);\n         let ty = self.cx.tcx.type_of(def_id);\n-        self.check_type_for_ffi_and_report_errors(span, ty, true);\n+        self.check_type_for_ffi_and_report_errors(span, ty, true, false);\n     }\n }\n "}, {"sha": "3fe4560f44bcc93fa3144f8bd0d53534b09f26f1", "filename": "src/test/ui/lint/lint-ctypes-66202.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.rs?ref=3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "patch": "@@ -9,7 +9,6 @@ pub struct W<T>(T);\n extern \"C\" {\n     pub fn bare() -> ();\n     pub fn normalize() -> <() as ToOwned>::Owned;\n-    //~^ ERROR uses type `()`\n     pub fn transparent() -> W<()>;\n     //~^ ERROR uses type `W<()>`\n }"}, {"sha": "759c77deadc7bdd09c39eaf662259fc4eecdd565", "filename": "src/test/ui/lint/lint-ctypes-66202.stderr", "status": "modified", "additions": 5, "deletions": 14, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3e7aabb1b3ec9ad66c7a306cd956e880a1a51483/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-ctypes-66202.stderr?ref=3e7aabb1b3ec9ad66c7a306cd956e880a1a51483", "patch": "@@ -1,29 +1,20 @@\n-error: `extern` block uses type `()`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-66202.rs:11:27\n+error: `extern` block uses type `W<()>`, which is not FFI-safe\n+  --> $DIR/lint-ctypes-66202.rs:12:29\n    |\n-LL |     pub fn normalize() -> <() as ToOwned>::Owned;\n-   |                           ^^^^^^^^^^^^^^^^^^^^^^ not FFI-safe\n+LL |     pub fn transparent() -> W<()>;\n+   |                             ^^^^^ not FFI-safe\n    |\n note: the lint level is defined here\n   --> $DIR/lint-ctypes-66202.rs:1:9\n    |\n LL | #![deny(improper_ctypes)]\n    |         ^^^^^^^^^^^^^^^\n-   = help: consider using a struct instead\n-   = note: tuples have unspecified layout\n-\n-error: `extern` block uses type `W<()>`, which is not FFI-safe\n-  --> $DIR/lint-ctypes-66202.rs:13:29\n-   |\n-LL |     pub fn transparent() -> W<()>;\n-   |                             ^^^^^ not FFI-safe\n-   |\n    = note: composed only of `PhantomData`\n note: the type is defined here\n   --> $DIR/lint-ctypes-66202.rs:7:1\n    |\n LL | pub struct W<T>(T);\n    | ^^^^^^^^^^^^^^^^^^^\n \n-error: aborting due to 2 previous errors\n+error: aborting due to previous error\n "}]}