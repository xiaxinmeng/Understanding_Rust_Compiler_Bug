{"sha": "d285ea791058f7db8bef828740aae95e69becc99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQyODVlYTc5MTA1OGY3ZGI4YmVmODI4NzQwYWFlOTVlNjliZWNjOTk=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T04:15:43Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-09-05T04:15:43Z"}, "message": "auto merge of #8980 : thestinger/rust/bool, r=thestinger\n\nThis is currently unsound since `bool` is represented as `i8`. It will\r\nbecome sound when `bool` is stored as `i8` but always used as `i1`.\r\n\r\nHowever, the current behaviour will always be identical to `x & 1 != 0`,\r\nso there's no need for it. It's also surprising, since `x != 0` is the\r\nexpected behaviour.\r\n\r\nCloses #7311\r\n\r\nd0a1176 r=huonw\r\ne4a76e6 r=thestinger", "tree": {"sha": "c1ad5f27aef3485a5c2c1ec143d7afe3a65e6797", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c1ad5f27aef3485a5c2c1ec143d7afe3a65e6797"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d285ea791058f7db8bef828740aae95e69becc99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d285ea791058f7db8bef828740aae95e69becc99", "html_url": "https://github.com/rust-lang/rust/commit/d285ea791058f7db8bef828740aae95e69becc99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d285ea791058f7db8bef828740aae95e69becc99/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6d825ee567633d917127a91a3f8a98012a24170", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6d825ee567633d917127a91a3f8a98012a24170", "html_url": "https://github.com/rust-lang/rust/commit/b6d825ee567633d917127a91a3f8a98012a24170"}, {"sha": "b153219556e20cb9f0e70c6a064cdfd10469ea32", "url": "https://api.github.com/repos/rust-lang/rust/commits/b153219556e20cb9f0e70c6a064cdfd10469ea32", "html_url": "https://github.com/rust-lang/rust/commit/b153219556e20cb9f0e70c6a064cdfd10469ea32"}], "stats": {"total": 51, "additions": 30, "deletions": 21}, "files": [{"sha": "d8d54e20e97b8991bf45ed38e47652644794a080", "filename": "src/libextra/ebml.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibextra%2Febml.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibextra%2Febml.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Febml.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -410,7 +410,7 @@ pub mod reader {\n         }\n \n         fn read_bool(&mut self) -> bool {\n-            doc_as_u8(self.next_doc(EsBool)) as bool\n+            doc_as_u8(self.next_doc(EsBool)) != 0\n         }\n \n         fn read_f64(&mut self) -> f64 {"}, {"sha": "9b5ba00a34a7e177e91ea1f3553d2dd671c568b7", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -2219,7 +2219,7 @@ pub fn trans_item(ccx: @mut CrateContext, item: &ast::item) {\n               }\n               let v = ccx.const_values.get_copy(&item.id);\n               unsafe {\n-                  if !(llvm::LLVMConstIntGetZExtValue(v) as bool) {\n+                  if !(llvm::LLVMConstIntGetZExtValue(v) != 0) {\n                       ccx.sess.span_fatal(expr.span, \"static assertion failed\");\n                   }\n               }"}, {"sha": "0e335cf3f145d48e79f5328879a26bd0aeee67ae", "filename": "src/librustc/middle/typeck/check/mod.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftypeck%2Fcheck%2Fmod.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -2696,6 +2696,7 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                         }, t_e, None);\n                     }\n \n+                    let t1 = structurally_resolved_type(fcx, e.span, t_1);\n                     let te = structurally_resolved_type(fcx, e.span, t_e);\n                     let t_1_is_char = type_is_char(fcx, expr.span, t_1);\n \n@@ -2710,6 +2711,9 @@ pub fn check_expr_with_unifier(fcx: @mut FnCtxt,\n                                 fmt!(\"only `u8` can be cast as `char`, not `%s`\", actual)\n                             }, t_e, None);\n                         }\n+                    } else if ty::get(t1).sty == ty::ty_bool {\n+                        fcx.tcx().sess.span_err(expr.span,\n+                                                \"cannot cast as `bool`, compare with zero instead\");\n                     } else if type_is_region_ptr(fcx, expr.span, t_e) &&\n                         type_is_unsafe_ptr(fcx, expr.span, t_1) {\n "}, {"sha": "704a9f058568630508540a42acc1fd945569af0c", "filename": "src/libstd/str.rs", "status": "modified", "additions": 12, "deletions": 3, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -799,6 +799,8 @@ pub fn is_utf8(v: &[u8]) -> bool {\n             //        first  C2 80        last DF BF\n             // 3-byte encoding is for codepoints  \\u0800 to  \\uffff\n             //        first  E0 A0 80     last EF BF BF\n+            //   excluding surrogates codepoints  \\ud800 to  \\udfff\n+            //               ED A0 80 to       ED BF BF\n             // 4-byte encoding is for codepoints \\u10000 to \\u10ffff\n             //        first  F0 90 80 80  last F4 8F BF BF\n             //\n@@ -812,8 +814,6 @@ pub fn is_utf8(v: &[u8]) -> bool {\n             // UTF8-4      = %xF0 %x90-BF 2( UTF8-tail ) / %xF1-F3 3( UTF8-tail ) /\n             //               %xF4 %x80-8F 2( UTF8-tail )\n             // UTF8-tail   = %x80-BF\n-            // --\n-            // This code allows surrogate pairs: \\uD800 to \\uDFFF -> ED A0 80 to ED BF BF\n             match w {\n                 2 => if unsafe_get(v, i + 1) & 192u8 != TAG_CONT_U8 {\n                     return false\n@@ -822,7 +822,9 @@ pub fn is_utf8(v: &[u8]) -> bool {\n                             unsafe_get(v, i + 1),\n                             unsafe_get(v, i + 2) & 192u8) {\n                     (0xE0        , 0xA0 .. 0xBF, TAG_CONT_U8) => (),\n-                    (0xE1 .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n+                    (0xE1 .. 0xEC, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n+                    (0xED        , 0x80 .. 0x9F, TAG_CONT_U8) => (),\n+                    (0xEE .. 0xEF, 0x80 .. 0xBF, TAG_CONT_U8) => (),\n                     _ => return false,\n                 },\n                 _ => match (v_i,\n@@ -3012,6 +3014,7 @@ mod tests {\n \n     #[test]\n     fn test_is_utf8() {\n+        // deny overlong encodings\n         assert!(!is_utf8([0xc0, 0x80]));\n         assert!(!is_utf8([0xc0, 0xae]));\n         assert!(!is_utf8([0xe0, 0x80, 0x80]));\n@@ -3020,9 +3023,15 @@ mod tests {\n         assert!(!is_utf8([0xf0, 0x82, 0x82, 0xac]));\n         assert!(!is_utf8([0xf4, 0x90, 0x80, 0x80]));\n \n+        // deny surrogates\n+        assert!(!is_utf8([0xED, 0xA0, 0x80]));\n+        assert!(!is_utf8([0xED, 0xBF, 0xBF]));\n+\n         assert!(is_utf8([0xC2, 0x80]));\n         assert!(is_utf8([0xDF, 0xBF]));\n         assert!(is_utf8([0xE0, 0xA0, 0x80]));\n+        assert!(is_utf8([0xED, 0x9F, 0xBF]));\n+        assert!(is_utf8([0xEE, 0x80, 0x80]));\n         assert!(is_utf8([0xEF, 0xBF, 0xBF]));\n         assert!(is_utf8([0xF0, 0x90, 0x80, 0x80]));\n         assert!(is_utf8([0xF4, 0x8F, 0xBF, 0xBF]));"}, {"sha": "6d68f56b2b18a6c234ec19ba1c0ca7871e16c352", "filename": "src/test/compile-fail/cast-as-bool.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fcast-as-bool.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -0,0 +1,12 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// error-pattern: cannot cast as `bool`, compare with zero instead\n+fn main() { let u = (5 as bool); }"}, {"sha": "8cf7c2eec999319aaece88d29abe31574c238b60", "filename": "src/test/run-pass/cast.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Frun-pass%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Frun-pass%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcast.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -18,6 +18,5 @@ pub fn main() {\n     assert_eq!(i as u8, 'Q' as u8);\n     assert_eq!(i as u8 as i8, 'Q' as u8 as i8);\n     assert_eq!(0x51u8 as char, 'Q');\n-    assert_eq!(true, 1 as bool);\n     assert_eq!(0 as u32, false as u32);\n }"}, {"sha": "663f36ce6739523c13e9e5e133dc6234c8044f75", "filename": "src/test/run-pass/supported-cast.rs", "status": "modified", "additions": 0, "deletions": 15, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d285ea791058f7db8bef828740aae95e69becc99/src%2Ftest%2Frun-pass%2Fsupported-cast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsupported-cast.rs?ref=d285ea791058f7db8bef828740aae95e69becc99", "patch": "@@ -26,7 +26,6 @@ pub fn main() {\n   info!(1 as int);\n   info!(1 as uint);\n   info!(1 as float);\n-  info!(1 as bool);\n   info!(1 as *libc::FILE);\n   info!(1 as i8);\n   info!(1 as i16);\n@@ -42,7 +41,6 @@ pub fn main() {\n   info!(1u as int);\n   info!(1u as uint);\n   info!(1u as float);\n-  info!(1u as bool);\n   info!(1u as *libc::FILE);\n   info!(1u as i8);\n   info!(1u as i16);\n@@ -58,7 +56,6 @@ pub fn main() {\n   info!(1i8 as int);\n   info!(1i8 as uint);\n   info!(1i8 as float);\n-  info!(1i8 as bool);\n   info!(1i8 as *libc::FILE);\n   info!(1i8 as i8);\n   info!(1i8 as i16);\n@@ -74,7 +71,6 @@ pub fn main() {\n   info!(1u8 as int);\n   info!(1u8 as uint);\n   info!(1u8 as float);\n-  info!(1u8 as bool);\n   info!(1u8 as *libc::FILE);\n   info!(1u8 as i8);\n   info!(1u8 as i16);\n@@ -90,7 +86,6 @@ pub fn main() {\n   info!(1i16 as int);\n   info!(1i16 as uint);\n   info!(1i16 as float);\n-  info!(1i16 as bool);\n   info!(1i16 as *libc::FILE);\n   info!(1i16 as i8);\n   info!(1i16 as i16);\n@@ -106,7 +101,6 @@ pub fn main() {\n   info!(1u16 as int);\n   info!(1u16 as uint);\n   info!(1u16 as float);\n-  info!(1u16 as bool);\n   info!(1u16 as *libc::FILE);\n   info!(1u16 as i8);\n   info!(1u16 as i16);\n@@ -122,7 +116,6 @@ pub fn main() {\n   info!(1i32 as int);\n   info!(1i32 as uint);\n   info!(1i32 as float);\n-  info!(1i32 as bool);\n   info!(1i32 as *libc::FILE);\n   info!(1i32 as i8);\n   info!(1i32 as i16);\n@@ -138,7 +131,6 @@ pub fn main() {\n   info!(1u32 as int);\n   info!(1u32 as uint);\n   info!(1u32 as float);\n-  info!(1u32 as bool);\n   info!(1u32 as *libc::FILE);\n   info!(1u32 as i8);\n   info!(1u32 as i16);\n@@ -154,7 +146,6 @@ pub fn main() {\n   info!(1i64 as int);\n   info!(1i64 as uint);\n   info!(1i64 as float);\n-  info!(1i64 as bool);\n   info!(1i64 as *libc::FILE);\n   info!(1i64 as i8);\n   info!(1i64 as i16);\n@@ -170,7 +161,6 @@ pub fn main() {\n   info!(1u64 as int);\n   info!(1u64 as uint);\n   info!(1u64 as float);\n-  info!(1u64 as bool);\n   info!(1u64 as *libc::FILE);\n   info!(1u64 as i8);\n   info!(1u64 as i16);\n@@ -186,7 +176,6 @@ pub fn main() {\n   info!(1u64 as int);\n   info!(1u64 as uint);\n   info!(1u64 as float);\n-  info!(1u64 as bool);\n   info!(1u64 as *libc::FILE);\n   info!(1u64 as i8);\n   info!(1u64 as i16);\n@@ -202,7 +191,6 @@ pub fn main() {\n   info!(true as int);\n   info!(true as uint);\n   info!(true as float);\n-  info!(true as bool);\n   info!(true as *libc::FILE);\n   info!(true as i8);\n   info!(true as i16);\n@@ -218,7 +206,6 @@ pub fn main() {\n   info!(1. as int);\n   info!(1. as uint);\n   info!(1. as float);\n-  info!(1. as bool);\n   info!(1. as i8);\n   info!(1. as i16);\n   info!(1. as i32);\n@@ -233,7 +220,6 @@ pub fn main() {\n   info!(1f32 as int);\n   info!(1f32 as uint);\n   info!(1f32 as float);\n-  info!(1f32 as bool);\n   info!(1f32 as i8);\n   info!(1f32 as i16);\n   info!(1f32 as i32);\n@@ -248,7 +234,6 @@ pub fn main() {\n   info!(1f64 as int);\n   info!(1f64 as uint);\n   info!(1f64 as float);\n-  info!(1f64 as bool);\n   info!(1f64 as i8);\n   info!(1f64 as i16);\n   info!(1f64 as i32);"}]}