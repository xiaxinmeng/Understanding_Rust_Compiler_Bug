{"sha": "42dbe482e3c37ddab6a7138ae5372e1d4831293e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQyZGJlNDgyZTNjMzdkZGFiNmE3MTM4YWU1MzcyZTFkNDgzMTI5M2U=", "commit": {"author": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2017-04-24T17:59:21Z"}, "committer": {"name": "Vincent Esche", "email": "regexident@gmail.com", "date": "2017-05-01T23:03:46Z"}, "message": "Made `type_punctuation_density` apply too all `+` in types", "tree": {"sha": "61dd92ce09e2df574b055c8e65d6cb96f8754fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/61dd92ce09e2df574b055c8e65d6cb96f8754fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/42dbe482e3c37ddab6a7138ae5372e1d4831293e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/42dbe482e3c37ddab6a7138ae5372e1d4831293e", "html_url": "https://github.com/rust-lang/rust/commit/42dbe482e3c37ddab6a7138ae5372e1d4831293e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/42dbe482e3c37ddab6a7138ae5372e1d4831293e/comments", "author": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "committer": {"login": "regexident", "id": 138017, "node_id": "MDQ6VXNlcjEzODAxNw==", "avatar_url": "https://avatars.githubusercontent.com/u/138017?v=4", "gravatar_id": "", "url": "https://api.github.com/users/regexident", "html_url": "https://github.com/regexident", "followers_url": "https://api.github.com/users/regexident/followers", "following_url": "https://api.github.com/users/regexident/following{/other_user}", "gists_url": "https://api.github.com/users/regexident/gists{/gist_id}", "starred_url": "https://api.github.com/users/regexident/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/regexident/subscriptions", "organizations_url": "https://api.github.com/users/regexident/orgs", "repos_url": "https://api.github.com/users/regexident/repos", "events_url": "https://api.github.com/users/regexident/events{/privacy}", "received_events_url": "https://api.github.com/users/regexident/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e809dcbf3ba04898e3b65b3692b5c38d8af7bfa8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e809dcbf3ba04898e3b65b3692b5c38d8af7bfa8", "html_url": "https://github.com/rust-lang/rust/commit/e809dcbf3ba04898e3b65b3692b5c38d8af7bfa8"}], "stats": {"total": 94, "additions": 85, "deletions": 9}, "files": [{"sha": "7a4aa7813052c40ab1fb37c4105017b89dd09d12", "filename": "src/items.rs", "status": "modified", "additions": 11, "deletions": 4, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/42dbe482e3c37ddab6a7138ae5372e1d4831293e/src%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbe482e3c37ddab6a7138ae5372e1d4831293e/src%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fitems.rs?ref=42dbe482e3c37ddab6a7138ae5372e1d4831293e", "patch": "@@ -21,7 +21,7 @@ use expr::{is_empty_block, is_simple_block_stmt, rewrite_assign_rhs, type_annota\n use comment::{FindUncommented, contains_comment};\n use visitor::FmtVisitor;\n use rewrite::{Rewrite, RewriteContext};\n-use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style};\n+use config::{Config, IndentStyle, Density, ReturnIndent, BraceStyle, Style, TypeDensity};\n use itertools::Itertools;\n \n use syntax::{ast, abi, codemap, ptr, symbol};\n@@ -1299,13 +1299,17 @@ pub fn rewrite_associated_type(ident: ast::Ident,\n     let prefix = format!(\"type {}\", ident);\n \n     let type_bounds_str = if let Some(ty_param_bounds) = ty_param_bounds_opt {\n+        let joiner = match context.config.type_punctuation_density {\n+            TypeDensity::Compressed => \"+\",\n+            TypeDensity::Wide => \" + \",\n+        };\n         let bounds: &[_] = ty_param_bounds;\n         let bound_str = try_opt!(bounds\n                                      .iter()\n                                      .map(|ty_bound| {\n             ty_bound.rewrite(context, Shape::legacy(context.config.max_width, indent))\n         })\n-                                     .intersperse(Some(\" + \".to_string()))\n+                                     .intersperse(Some(joiner.to_string()))\n                                      .collect::<Option<String>>());\n         if bounds.len() > 0 {\n             format!(\": {}\", bound_str)\n@@ -2015,11 +2019,14 @@ fn rewrite_trait_bounds(context: &RewriteContext,\n     if bounds.is_empty() {\n         return Some(String::new());\n     }\n-\n+    let joiner = match context.config.type_punctuation_density {\n+        TypeDensity::Compressed => \"+\",\n+        TypeDensity::Wide => \" + \",\n+    };\n     let bound_str = try_opt!(bounds\n                                  .iter()\n                                  .map(|ty_bound| ty_bound.rewrite(&context, shape))\n-                                 .intersperse(Some(\" + \".to_string()))\n+                                 .intersperse(Some(joiner.to_string()))\n                                  .collect::<Option<String>>());\n \n     let mut result = String::new();"}, {"sha": "ca98401db143186c881ed27261cc03ca4cfa21ef", "filename": "src/types.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/42dbe482e3c37ddab6a7138ae5372e1d4831293e/src%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbe482e3c37ddab6a7138ae5372e1d4831293e/src%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftypes.rs?ref=42dbe482e3c37ddab6a7138ae5372e1d4831293e", "patch": "@@ -370,6 +370,10 @@ impl Rewrite for ast::WherePredicate {\n                                      .intersperse(Some(\", \".to_string()))\n                                      .collect());\n \n+                    let joiner = match context.config.type_punctuation_density {\n+                        TypeDensity::Compressed => \"+\",\n+                        TypeDensity::Wide => \" + \",\n+                    };\n                     // 6 = \"for<> \".len()\n                     let used_width = lifetime_str.len() + type_str.len() + colon.len() + 6;\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n@@ -379,7 +383,7 @@ impl Rewrite for ast::WherePredicate {\n                                                                          Shape::legacy(budget,\n                                                                          shape.indent + used_width))\n                                                     })\n-                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .intersperse(Some(joiner.to_string()))\n                                                     .collect());\n \n                     if context.config.spaces_within_angle_brackets && lifetime_str.len() > 0 {\n@@ -392,6 +396,10 @@ impl Rewrite for ast::WherePredicate {\n                         format!(\"for<{}> {}{}{}\", lifetime_str, type_str, colon, bounds_str)\n                     }\n                 } else {\n+                    let joiner = match context.config.type_punctuation_density {\n+                        TypeDensity::Compressed => \"+\",\n+                        TypeDensity::Wide => \" + \",\n+                    };\n                     let used_width = type_str.len() + colon.len();\n                     let budget = try_opt!(shape.width.checked_sub(used_width));\n                     let bounds_str: String = try_opt!(bounds.iter()\n@@ -400,7 +408,7 @@ impl Rewrite for ast::WherePredicate {\n                                                                          Shape::legacy(budget,\n                                                                          shape.indent + used_width))\n                                                     })\n-                                                    .intersperse(Some(\" + \".to_string()))\n+                                                    .intersperse(Some(joiner.to_string()))\n                                                     .collect());\n \n                     format!(\"{}{}{}\", type_str, colon, bounds_str)\n@@ -456,7 +464,11 @@ fn rewrite_bounded_lifetime<'b, I>(lt: &ast::Lifetime,\n                                             .map(|b| b.rewrite(context, shape))\n                                             .collect());\n         let colon = type_bound_colon(context);\n-        let result = format!(\"{}{}{}\", result, colon, appendix.join(\" + \"));\n+        let joiner = match context.config.type_punctuation_density {\n+            TypeDensity::Compressed => \"+\",\n+            TypeDensity::Wide => \" + \",\n+        };\n+        let result = format!(\"{}{}{}\", result, colon, appendix.join(joiner));\n         wrap_str(result, context.config.max_width, shape)\n     }\n }\n@@ -509,12 +521,15 @@ impl Rewrite for ast::TyParam {\n             if context.config.space_after_bound_colon {\n                 result.push_str(\" \");\n             }\n-\n+            let joiner = match context.config.type_punctuation_density {\n+                TypeDensity::Compressed => \"+\",\n+                TypeDensity::Wide => \" + \",\n+            };\n             let bounds: String =\n                 try_opt!(self.bounds\n                              .iter()\n                              .map(|ty_bound| ty_bound.rewrite(context, shape))\n-                             .intersperse(Some(\" + \".to_string()))\n+                             .intersperse(Some(joiner.to_string()))\n                              .collect());\n \n             result.push_str(&bounds);"}, {"sha": "0980e4a3732c363c4a5a6055076633c365cecd9a", "filename": "tests/source/type-punctuation.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/42dbe482e3c37ddab6a7138ae5372e1d4831293e/tests%2Fsource%2Ftype-punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbe482e3c37ddab6a7138ae5372e1d4831293e/tests%2Fsource%2Ftype-punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Ftype-punctuation.rs?ref=42dbe482e3c37ddab6a7138ae5372e1d4831293e", "patch": "@@ -1,5 +1,32 @@\n // rustfmt-type_punctuation_density: Compressed\n \n+struct Foo<T: Eq + Clone, U>\n+    where U: Eq + Clone {\n+    // body\n+}\n+\n+trait Foo<'a, T = usize>\n+    where T: 'a + Eq + Clone\n+{\n+    type Bar: Eq + Clone;\n+}\n+\n+trait Foo: Eq + Clone {\n+    // body\n+}\n+\n+impl<T> Foo<'a> for Bar\n+    where for<'a> T: 'a + Eq + Clone\n+{\n+    // body\n+}\n+\n+fn foo<'a, 'b, 'c>()\n+    where 'a: 'b + 'c\n+{\n+    // body\n+}\n+\n fn Foo<T = Foo, Output = Expr<'tcx> + Foo>() {\n     let i = 6;\n }"}, {"sha": "e7021eca84fb8a9b5edd6233aef2c4f9ad77bea7", "filename": "tests/target/type-punctuation.rs", "status": "modified", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/42dbe482e3c37ddab6a7138ae5372e1d4831293e/tests%2Ftarget%2Ftype-punctuation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/42dbe482e3c37ddab6a7138ae5372e1d4831293e/tests%2Ftarget%2Ftype-punctuation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Ftype-punctuation.rs?ref=42dbe482e3c37ddab6a7138ae5372e1d4831293e", "patch": "@@ -1,5 +1,32 @@\n // rustfmt-type_punctuation_density: Compressed\n \n+struct Foo<T: Eq+Clone, U>\n+    where U: Eq+Clone {\n+    // body\n+}\n+\n+trait Foo<'a, T=usize>\n+    where T: 'a+Eq+Clone\n+{\n+    type Bar: Eq+Clone;\n+}\n+\n+trait Foo: Eq+Clone {\n+    // body\n+}\n+\n+impl<T> Foo<'a> for Bar\n+    where for<'a> T: 'a+Eq+Clone\n+{\n+    // body\n+}\n+\n+fn foo<'a, 'b, 'c>()\n+    where 'a: 'b+'c\n+{\n+    // body\n+}\n+\n fn Foo<T=Foo, Output=Expr<'tcx>+Foo>() {\n     let i = 6;\n }"}]}