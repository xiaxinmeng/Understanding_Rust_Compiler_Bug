{"sha": "ef75860a0a72f79f97216f8aaa5b388d98da6480", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVmNzU4NjBhMGE3MmY3OWY5NzIxNmY4YWFhNWIzODhkOThkYTY0ODA=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T00:53:42Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2011-05-14T00:55:07Z"}, "message": "rustc: Write nil types into the node type table wherever plain_ann() is used", "tree": {"sha": "48a4b22a2dd685c05c310f5a647186bca59582d8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48a4b22a2dd685c05c310f5a647186bca59582d8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef75860a0a72f79f97216f8aaa5b388d98da6480", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef75860a0a72f79f97216f8aaa5b388d98da6480", "html_url": "https://github.com/rust-lang/rust/commit/ef75860a0a72f79f97216f8aaa5b388d98da6480", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef75860a0a72f79f97216f8aaa5b388d98da6480/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5679f5c55e15e4a42542c36b1abc86b469903d19", "url": "https://api.github.com/repos/rust-lang/rust/commits/5679f5c55e15e4a42542c36b1abc86b469903d19", "html_url": "https://github.com/rust-lang/rust/commit/5679f5c55e15e4a42542c36b1abc86b469903d19"}], "stats": {"total": 145, "additions": 101, "deletions": 44}, "files": [{"sha": "f28a8d62df5ee15b941f9dcd146f01aa692db327", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=ef75860a0a72f79f97216f8aaa5b388d98da6480", "patch": "@@ -1492,6 +1492,12 @@ fn triv_ann(uint node_id, t typ) -> ast::ann {\n     ret ast::ann_type(node_id, typ, none[vec[t]], none[@ts_ann]);\n }\n \n+// Creates a nil type annotation.\n+fn plain_ann(uint node_id, ctxt tcx) -> ast::ann {\n+    ret ast::ann_type(node_id, mk_nil(tcx), none[vec[ty::t]], none[@ts_ann]);\n+}\n+\n+\n // Returns the number of distinct type parameters in the given type.\n fn count_ty_params(ctxt cx, t ty) -> uint {\n     fn counter(ctxt cx, @mutable vec[uint] param_indices, t ty) {"}, {"sha": "9487a0b0098b6d175df31ae4537f6782b5f3d8f8", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 94, "deletions": 38, "changes": 132, "blob_url": "https://github.com/rust-lang/rust/blob/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=ef75860a0a72f79f97216f8aaa5b388d98da6480", "patch": "@@ -7,7 +7,6 @@ import middle::fold;\n import driver::session;\n import util::common;\n import util::common::span;\n-import util::common::plain_ann;\n import util::common::new_def_hash;\n import util::common::log_expr_err;\n \n@@ -25,6 +24,7 @@ import middle::ty::mo_either;\n import middle::ty::node_type_table;\n import middle::ty::pat_ty;\n import middle::ty::path_to_str;\n+import middle::ty::plain_ann;\n import middle::ty::struct;\n import middle::ty::triv_ann;\n import middle::ty::ty_param_substs_opt_and_ty;\n@@ -387,6 +387,11 @@ fn write_type_only(&node_type_table ntt, uint node_id, ty::t ty) {\n     be write_type(ntt, node_id, tup(none[vec[ty::t]], ty));\n }\n \n+// Writes a nil type into the node type table.\n+fn write_nil_type(ty::ctxt tcx, &node_type_table ntt, uint node_id) {\n+    be write_type_only(ntt, node_id, ty::mk_nil(tcx));\n+}\n+\n \n // Item collection - a pair of bootstrap passes:\n //\n@@ -1631,15 +1636,20 @@ mod Pushdown {\n                 auto e_1 = pushdown_expr(fcx, expected, e_0);\n                 auto block_ = rec(stmts=bloc.node.stmts,\n                                   expr=some[@ast::expr](e_1),\n-                                  a=plain_ann(bloc.node.a, fcx.ccx.tcx));\n+                                  a=plain_ann(ast::ann_tag(bloc.node.a),\n+                                              fcx.ccx.tcx));\n+                write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                               ast::ann_tag(bloc.node.a));\n                 ret fold::respan[ast::block_](bloc.span, block_);\n             }\n             case (none[@ast::expr]) {\n                 Demand::simple(fcx, bloc.span, expected,\n                               ty::mk_nil(fcx.ccx.tcx));\n-                ret fold::respan(bloc.span,\n-                                rec(a = plain_ann(bloc.node.a, fcx.ccx.tcx)\n-                                    with bloc.node));\n+                auto new_ann = plain_ann(ast::ann_tag(bloc.node.a),\n+                                         fcx.ccx.tcx);\n+                write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                               ast::ann_tag(bloc.node.a));\n+                ret fold::respan(bloc.span, rec(a=new_ann with bloc.node));\n                                             \n             }\n         }\n@@ -2158,21 +2168,29 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n         }\n \n         case (ast::expr_fail(?a)) {\n-            ret @fold::respan[ast::expr_](expr.span,\n-                ast::expr_fail(plain_ann(a, fcx.ccx.tcx)));\n+            // TODO: should be something like 'a or noret\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+            ret @fold::respan[ast::expr_](expr.span, ast::expr_fail(new_ann));\n         }\n \n         case (ast::expr_break(?a)) {\n+            // TODO: should be something like 'a or noret\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n             ret @fold::respan[ast::expr_](expr.span,\n-                ast::expr_break(plain_ann(a, fcx.ccx.tcx)));\n+                                          ast::expr_break(new_ann));\n         }\n \n         case (ast::expr_cont(?a)) {\n-            ret @fold::respan[ast::expr_](expr.span,\n-                ast::expr_cont(plain_ann(a, fcx.ccx.tcx)));\n+            // TODO: should be something like 'a or noret\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+            ret @fold::respan[ast::expr_](expr.span, ast::expr_cont(new_ann));\n         }\n \n         case (ast::expr_ret(?expr_opt, ?a)) {\n+            // TODO: should be something like 'a or noret\n             alt (expr_opt) {\n                 case (none[@ast::expr]) {\n                     auto nil = ty::mk_nil(fcx.ccx.tcx);\n@@ -2181,19 +2199,26 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                                          + \"returning non-nil\");\n                     }\n \n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::expr_]\n                         (expr.span,\n-                         ast::expr_ret(none[@ast::expr],\n-                                      plain_ann(a, fcx.ccx.tcx)));\n+                         ast::expr_ret(none[@ast::expr], new_ann));\n                 }\n \n                 case (some[@ast::expr](?e)) {\n                     auto expr_0 = check_expr(fcx, e);\n                     auto expr_1 = Pushdown::pushdown_expr(fcx, fcx.ret_ty,\n                                                          expr_0);\n+\n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::expr_]\n-                        (expr.span, ast::expr_ret(some(expr_1),\n-                                                 plain_ann(a, fcx.ccx.tcx)));\n+                        (expr.span, ast::expr_ret(some(expr_1), new_ann));\n                 }\n             }\n         }\n@@ -2209,18 +2234,25 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n                                          + \"putting non-nil\");\n                     }\n \n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::expr_]\n-                        (expr.span, ast::expr_put(none[@ast::expr],\n-                                    plain_ann(a, fcx.ccx.tcx)));\n+                        (expr.span, ast::expr_put(none[@ast::expr], new_ann));\n                 }\n \n                 case (some[@ast::expr](?e)) {\n                     auto expr_0 = check_expr(fcx, e);\n                     auto expr_1 = Pushdown::pushdown_expr(fcx, fcx.ret_ty,\n                                                          expr_0);\n+\n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::expr_]\n-                        (expr.span, ast::expr_put(some(expr_1),\n-                                                 plain_ann(a, fcx.ccx.tcx)));\n+                        (expr.span, ast::expr_put(some(expr_1), new_ann));\n                 }\n             }\n         }\n@@ -2230,15 +2262,21 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n             assert (ast::is_call_expr(e));\n             auto expr_0 = check_expr(fcx, e);\n             auto expr_1 = Pushdown::pushdown_expr(fcx, fcx.ret_ty, expr_0);\n-            ret @fold::respan(expr.span,\n-                             ast::expr_be(expr_1, plain_ann(a, fcx.ccx.tcx)));\n+\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+\n+            ret @fold::respan(expr.span, ast::expr_be(expr_1, new_ann));\n         }\n \n         case (ast::expr_log(?l, ?e, ?a)) {\n             auto expr_t = check_expr(fcx, e);\n-            ret @fold::respan[ast::expr_]\n-                (expr.span, ast::expr_log(l, expr_t,\n-                                         plain_ann(a, fcx.ccx.tcx)));\n+\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+\n+            ret @fold::respan[ast::expr_](expr.span,\n+                                          ast::expr_log(l, expr_t, new_ann));\n         }\n \n         case (ast::expr_check(?e, ?a)) {\n@@ -2265,9 +2303,13 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n \n                             require_pure_function(fcx.ccx, d_id, expr.span);\n \n+                            auto new_ann = plain_ann(ast::ann_tag(a),\n+                                                     fcx.ccx.tcx);\n+                            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                           ast::ann_tag(a));\n+\n                             ret @fold::respan[ast::expr_]\n-                                (expr.span, ast::expr_check(expr_t,\n-                                     plain_ann(a, fcx.ccx.tcx)));\n+                                (expr.span, ast::expr_check(expr_t, new_ann));\n                         }\n                         case (_) {\n                            fcx.ccx.sess.span_err(expr.span,\n@@ -2287,9 +2329,12 @@ fn check_expr(&@fn_ctxt fcx, &@ast::expr expr) -> @ast::expr {\n             auto expr_t = check_expr(fcx, e);\n             Demand::simple(fcx, expr.span, ty::mk_bool(fcx.ccx.tcx),\n                           expr_ty(fcx.ccx.tcx, fcx.ccx.node_types, expr_t));\n-            ret @fold::respan[ast::expr_]\n-                (expr.span, ast::expr_assert(expr_t,\n-                                             plain_ann(a, fcx.ccx.tcx)));\n+\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+\n+            ret @fold::respan[ast::expr_](expr.span,\n+                                          ast::expr_assert(expr_t, new_ann));\n         }\n \n         case (ast::expr_assign(?lhs, ?rhs, ?a)) {\n@@ -3033,16 +3078,23 @@ fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) -> @ast::stmt {\n             alt (decl.node) {\n                 case (ast::decl_local(_)) {\n                     auto decl_1 = check_decl_local(fcx, decl);\n+\n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::stmt_](stmt.span,\n-                           ast::stmt_decl(decl_1,\n-                                         plain_ann(a, fcx.ccx.tcx)));\n+                           ast::stmt_decl(decl_1, new_ann));\n                 }\n \n                 case (ast::decl_item(_)) {\n                     // Ignore for now. We'll return later.\n+                    auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+                    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                                   ast::ann_tag(a));\n+\n                     ret @fold::respan[ast::stmt_](stmt.span,\n-                           ast::stmt_decl(decl,\n-                                         plain_ann(a, fcx.ccx.tcx)));\n+                           ast::stmt_decl(decl, new_ann));\n                 }\n             }\n \n@@ -3053,9 +3105,11 @@ fn check_stmt(&@fn_ctxt fcx, &@ast::stmt stmt) -> @ast::stmt {\n             auto expr_t = check_expr(fcx, expr);\n             expr_t = Pushdown::pushdown_expr(fcx,\n                 expr_ty(fcx.ccx.tcx, fcx.ccx.node_types, expr_t), expr_t);\n-            ret @fold::respan(stmt.span,\n-                              ast::stmt_expr(expr_t,\n-                                             plain_ann(a, fcx.ccx.tcx)));\n+\n+            auto new_ann = plain_ann(ast::ann_tag(a), fcx.ccx.tcx);\n+            write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types, ast::ann_tag(a));\n+\n+            ret @fold::respan(stmt.span, ast::stmt_expr(expr_t, new_ann));\n         }\n     }\n \n@@ -3079,9 +3133,11 @@ fn check_block(&@fn_ctxt fcx, &ast::block block) -> ast::block {\n         }\n     }\n \n-    ret fold::respan(block.span,\n-                    rec(stmts=stmts, expr=expr,\n-                        a=plain_ann(block.node.a, fcx.ccx.tcx)));\n+    auto new_ann = plain_ann(ast::ann_tag(block.node.a), fcx.ccx.tcx);\n+    write_nil_type(fcx.ccx.tcx, fcx.ccx.node_types,\n+                   ast::ann_tag(block.node.a));\n+\n+    ret fold::respan(block.span, rec(stmts=stmts, expr=expr, a=new_ann));\n }\n \n fn check_const(&@crate_ctxt ccx, &span sp, &ast::ident ident, &@ast::ty t,"}, {"sha": "c12d02737da002f9f2627b6469cd33f4be9ea1bc", "filename": "src/comp/middle/typestate_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypestate_check.rs?ref=ef75860a0a72f79f97216f8aaa5b388d98da6480", "patch": "@@ -2078,7 +2078,7 @@ fn init_block(&fn_info fi, &span sp, &block_ b) -> block {\n             log(\"init_block: shouldn't see ann_none\");\n             fail;\n         }\n-        case (ann_type(_, ?t,?ps,_)) {\n+        case (ann_type(_, _, ?ps, _)) {\n             auto fld0 = fold::new_identity_fold[fn_info]();\n \n             fld0 = @rec(fold_ann = bind init_ann(_,_) with *fld0);"}, {"sha": "bccd18ed6dcac7a1d6844eb2a4b7cefc65a31f71", "filename": "src/comp/util/common.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Futil%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef75860a0a72f79f97216f8aaa5b388d98da6480/src%2Fcomp%2Futil%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Futil%2Fcommon.rs?ref=ef75860a0a72f79f97216f8aaa5b388d98da6480", "patch": "@@ -117,11 +117,6 @@ fn field_exprs(vec[ast::field] fields) -> vec [@ast::expr] {\n     ret _vec::map[ast::field, @ast::expr](f, fields);\n }\n \n-fn plain_ann(&ast::ann old, middle::ty::ctxt tcx) -> ast::ann {\n-    ret ast::ann_type(ast::ann_tag(old), middle::ty::mk_nil(tcx),\n-                   none[vec[middle::ty::t]], none[@ts_ann]);\n-}\n-\n fn expr_to_str(&@ast::expr e) -> str {\n   let str_writer s = string_writer();\n   auto out_ = mkstate(s.get_writer(), 80u);"}]}