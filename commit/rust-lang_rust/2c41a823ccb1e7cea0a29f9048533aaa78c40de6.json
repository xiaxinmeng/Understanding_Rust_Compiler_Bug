{"sha": "2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjJjNDFhODIzY2NiMWU3Y2VhMGEyOWY5MDQ4NTMzYWFhNzhjNDBkZTY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-17T06:56:45Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2013-12-17T06:56:45Z"}, "message": "auto merge of #10924 : pcwalton/rust/pod, r=pcwalton\n\nThis will be used for the new `Cell`.\r\n\r\nr? @nikomatsakis", "tree": {"sha": "96cbe2d4b82b510d6c1b0f1cb20a36877c1bb587", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96cbe2d4b82b510d6c1b0f1cb20a36877c1bb587"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "html_url": "https://github.com/rust-lang/rust/commit/2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2c2c4d6f3dae07134858266b7f037ea110a6f82", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2c2c4d6f3dae07134858266b7f037ea110a6f82", "html_url": "https://github.com/rust-lang/rust/commit/c2c2c4d6f3dae07134858266b7f037ea110a6f82"}, {"sha": "865701787c2f1751f03812fd30358a484cb34eaf", "url": "https://api.github.com/repos/rust-lang/rust/commits/865701787c2f1751f03812fd30358a484cb34eaf", "html_url": "https://github.com/rust-lang/rust/commit/865701787c2f1751f03812fd30358a484cb34eaf"}], "stats": {"total": 368, "additions": 311, "deletions": 57}, "files": [{"sha": "489a10bb87c482a523cd703da4d51589b7adb486", "filename": "doc/rust.md", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/doc%2Frust.md", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/doc%2Frust.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.md?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -3329,6 +3329,12 @@ The kinds are:\n     This kind includes scalars, owning pointers, owned closures, and\n     structural types containing only other owned types.\n     All `Send` types are `'static`.\n+`Pod`\n+  : Types of this kind consist of \"Plain Old Data\"\n+    which can be copied by simply moving bits.\n+    All values of this kind can be implicitly copied.\n+    This kind includes scalars and immutable references,\n+    as well as structural types containing other `Pod` types.\n `'static`\n   : Types of this kind do not contain any borrowed pointers;\n     this can be a useful guarantee for code"}, {"sha": "6896b951c777854b11a4c1712c0867664b665d42", "filename": "src/librustc/metadata/tyencode.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmetadata%2Ftyencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmetadata%2Ftyencode.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -395,6 +395,7 @@ fn enc_bounds(w: @mut MemWriter, cx: @ctxt, bs: &ty::ParamBounds) {\n             ty::BoundFreeze => mywrite!(w, \"K\"),\n             ty::BoundStatic => mywrite!(w, \"O\"),\n             ty::BoundSized => mywrite!(w, \"Z\"),\n+            ty::BoundPod => mywrite!(w, \"P\"),\n         }\n     }\n "}, {"sha": "97b6d10e05d0aefaa7781e2df92da65ffdee077f", "filename": "src/librustc/middle/lang_items.rs", "status": "modified", "additions": 52, "deletions": 48, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmiddle%2Flang_items.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Flang_items.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -23,7 +23,7 @@\n use driver::session::Session;\n use metadata::csearch::each_lang_item;\n use metadata::cstore::iter_crate_data;\n-use middle::ty::{BuiltinBound, BoundFreeze, BoundSend, BoundSized};\n+use middle::ty::{BuiltinBound, BoundFreeze, BoundPod, BoundSend, BoundSized};\n use syntax::ast;\n use syntax::ast_util::local_def;\n use syntax::attr::AttrMetaMethods;\n@@ -83,6 +83,8 @@ impl LanguageItems {\n             Some(BoundSend)\n         } else if Some(id) == self.sized_trait() {\n             Some(BoundSized)\n+        } else if Some(id) == self.pod_trait() {\n+            Some(BoundPod)\n         } else {\n             None\n         }\n@@ -206,56 +208,58 @@ pub fn collect_language_items(crate: &ast::Crate,\n }\n \n lets_do_this! {\n-    There are 41 lang items.\n+    There are 42 lang items.\n \n //  ID, Variant name,                    Name,                      Method name;\n     0,  FreezeTraitLangItem,             \"freeze\",                  freeze_trait;\n     1,  SendTraitLangItem,               \"send\",                    send_trait;\n     2,  SizedTraitLangItem,              \"sized\",                   sized_trait;\n-\n-    3,  DropTraitLangItem,               \"drop\",                    drop_trait;\n-\n-    4,  AddTraitLangItem,                \"add\",                     add_trait;\n-    5,  SubTraitLangItem,                \"sub\",                     sub_trait;\n-    6,  MulTraitLangItem,                \"mul\",                     mul_trait;\n-    7,  DivTraitLangItem,                \"div\",                     div_trait;\n-    8,  RemTraitLangItem,                \"rem\",                     rem_trait;\n-    9,  NegTraitLangItem,                \"neg\",                     neg_trait;\n-    10, NotTraitLangItem,                \"not\",                     not_trait;\n-    11, BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n-    12, BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n-    13, BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n-    14, ShlTraitLangItem,                \"shl\",                     shl_trait;\n-    15, ShrTraitLangItem,                \"shr\",                     shr_trait;\n-    16, IndexTraitLangItem,              \"index\",                   index_trait;\n-\n-    17, EqTraitLangItem,                 \"eq\",                      eq_trait;\n-    18, OrdTraitLangItem,                \"ord\",                     ord_trait;\n-\n-    19, StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n-    20, UniqStrEqFnLangItem,             \"uniq_str_eq\",             uniq_str_eq_fn;\n-    21, FailFnLangItem,                  \"fail_\",                   fail_fn;\n-    22, FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n-    23, ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n-    24, ClosureExchangeMallocFnLangItem, \"closure_exchange_malloc\", closure_exchange_malloc_fn;\n-    25, ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n-    26, MallocFnLangItem,                \"malloc\",                  malloc_fn;\n-    27, FreeFnLangItem,                  \"free\",                    free_fn;\n-    28, BorrowAsImmFnLangItem,           \"borrow_as_imm\",           borrow_as_imm_fn;\n-    29, BorrowAsMutFnLangItem,           \"borrow_as_mut\",           borrow_as_mut_fn;\n-    30, ReturnToMutFnLangItem,           \"return_to_mut\",           return_to_mut_fn;\n-    31, CheckNotBorrowedFnLangItem,      \"check_not_borrowed\",      check_not_borrowed_fn;\n-    32, StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n-    33, RecordBorrowFnLangItem,          \"record_borrow\",           record_borrow_fn;\n-    34, UnrecordBorrowFnLangItem,        \"unrecord_borrow\",         unrecord_borrow_fn;\n-\n-    35, StartFnLangItem,                 \"start\",                   start_fn;\n-\n-    36, TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n-    37, TyVisitorTraitLangItem,          \"ty_visitor\",              ty_visitor;\n-    38, OpaqueStructLangItem,            \"opaque\",                  opaque;\n-\n-    39, EventLoopFactoryLangItem,        \"event_loop_factory\",      event_loop_factory;\n-\n-    40, TypeIdLangItem,                  \"type_id\",                 type_id;\n+    3,  PodTraitLangItem,                \"pod\",                     pod_trait;\n+\n+    4,  DropTraitLangItem,               \"drop\",                    drop_trait;\n+\n+    5,  AddTraitLangItem,                \"add\",                     add_trait;\n+    6,  SubTraitLangItem,                \"sub\",                     sub_trait;\n+    7,  MulTraitLangItem,                \"mul\",                     mul_trait;\n+    8,  DivTraitLangItem,                \"div\",                     div_trait;\n+    9,  RemTraitLangItem,                \"rem\",                     rem_trait;\n+    10, NegTraitLangItem,                \"neg\",                     neg_trait;\n+    11, NotTraitLangItem,                \"not\",                     not_trait;\n+    12, BitXorTraitLangItem,             \"bitxor\",                  bitxor_trait;\n+    13, BitAndTraitLangItem,             \"bitand\",                  bitand_trait;\n+    14, BitOrTraitLangItem,              \"bitor\",                   bitor_trait;\n+    15, ShlTraitLangItem,                \"shl\",                     shl_trait;\n+    16, ShrTraitLangItem,                \"shr\",                     shr_trait;\n+    17, IndexTraitLangItem,              \"index\",                   index_trait;\n+\n+    18, EqTraitLangItem,                 \"eq\",                      eq_trait;\n+    19, OrdTraitLangItem,                \"ord\",                     ord_trait;\n+\n+    20, StrEqFnLangItem,                 \"str_eq\",                  str_eq_fn;\n+    21, UniqStrEqFnLangItem,             \"uniq_str_eq\",             uniq_str_eq_fn;\n+    22, FailFnLangItem,                  \"fail_\",                   fail_fn;\n+    23, FailBoundsCheckFnLangItem,       \"fail_bounds_check\",       fail_bounds_check_fn;\n+    24, ExchangeMallocFnLangItem,        \"exchange_malloc\",         exchange_malloc_fn;\n+    25, ClosureExchangeMallocFnLangItem, \"closure_exchange_malloc\", closure_exchange_malloc_fn;\n+    26, ExchangeFreeFnLangItem,          \"exchange_free\",           exchange_free_fn;\n+    27, MallocFnLangItem,                \"malloc\",                  malloc_fn;\n+    28, FreeFnLangItem,                  \"free\",                    free_fn;\n+    29, BorrowAsImmFnLangItem,           \"borrow_as_imm\",           borrow_as_imm_fn;\n+    30, BorrowAsMutFnLangItem,           \"borrow_as_mut\",           borrow_as_mut_fn;\n+    31, ReturnToMutFnLangItem,           \"return_to_mut\",           return_to_mut_fn;\n+    32, CheckNotBorrowedFnLangItem,      \"check_not_borrowed\",      check_not_borrowed_fn;\n+    33, StrDupUniqFnLangItem,            \"strdup_uniq\",             strdup_uniq_fn;\n+    34, RecordBorrowFnLangItem,          \"record_borrow\",           record_borrow_fn;\n+    35, UnrecordBorrowFnLangItem,        \"unrecord_borrow\",         unrecord_borrow_fn;\n+\n+    36, StartFnLangItem,                 \"start\",                   start_fn;\n+\n+    37, TyDescStructLangItem,            \"ty_desc\",                 ty_desc;\n+    38, TyVisitorTraitLangItem,          \"ty_visitor\",              ty_visitor;\n+    39, OpaqueStructLangItem,            \"opaque\",                  opaque;\n+\n+    40, EventLoopFactoryLangItem,        \"event_loop_factory\",      event_loop_factory;\n+\n+    41, TypeIdLangItem,                  \"type_id\",                 type_id;\n }\n+"}, {"sha": "86a7250d6b996668ff9bc5d65a995818c314ba99", "filename": "src/librustc/middle/ty.rs", "status": "modified", "additions": 36, "deletions": 9, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fty.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -737,6 +737,7 @@ pub enum BuiltinBound {\n     BoundSend,\n     BoundFreeze,\n     BoundSized,\n+    BoundPod,\n }\n \n pub fn EmptyBuiltinBounds() -> BuiltinBounds {\n@@ -1805,6 +1806,9 @@ def_type_content_sets!(\n         // Things that prevent values from being considered sized\n         Nonsized                            = 0b0000__00000000__0001,\n \n+        // Things that make values considered not POD (same as `Moves`)\n+        Nonpod                              = 0b0000__00001111__0000,\n+\n         // Bits to set when a managed value is encountered\n         //\n         // [1] Do not set the bits TC::OwnsManaged or\n@@ -1828,6 +1832,7 @@ impl TypeContents {\n             BoundFreeze => self.is_freezable(cx),\n             BoundSend => self.is_sendable(cx),\n             BoundSized => self.is_sized(cx),\n+            BoundPod => self.is_pod(cx),\n         }\n     }\n \n@@ -1859,6 +1864,10 @@ impl TypeContents {\n         !self.intersects(TC::Nonsized)\n     }\n \n+    pub fn is_pod(&self, _: ctxt) -> bool {\n+        !self.intersects(TC::Nonpod)\n+    }\n+\n     pub fn moves_by_default(&self, _: ctxt) -> bool {\n         self.intersects(TC::Moves)\n     }\n@@ -1876,15 +1885,32 @@ impl TypeContents {\n             *self & (TC::OwnsAll | TC::ReachesAll))\n     }\n \n-    pub fn other_pointer(&self, bits: TypeContents) -> TypeContents {\n+    pub fn reference(&self, bits: TypeContents) -> TypeContents {\n         /*!\n          * Includes only those bits that still apply\n-         * when indirected through a non-owning pointer (`&`, `@`)\n+         * when indirected through a reference (`&`)\n          */\n         bits | (\n             *self & TC::ReachesAll)\n     }\n \n+    pub fn managed_pointer(&self) -> TypeContents {\n+        /*!\n+         * Includes only those bits that still apply\n+         * when indirected through a managed pointer (`@`)\n+         */\n+        TC::Managed | (\n+            *self & TC::ReachesAll)\n+    }\n+\n+    pub fn unsafe_pointer(&self) -> TypeContents {\n+        /*!\n+         * Includes only those bits that still apply\n+         * when indirected through an unsafe pointer (`*`)\n+         */\n+        *self & TC::ReachesAll\n+    }\n+\n     pub fn union<T>(v: &[T], f: |&T| -> TypeContents) -> TypeContents {\n         v.iter().fold(TC::None, |tc, t| tc | f(t))\n     }\n@@ -1994,19 +2020,19 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_box(mt) => {\n-                tc_mt(cx, mt, cache).other_pointer(TC::Managed)\n+                tc_mt(cx, mt, cache).managed_pointer()\n             }\n \n             ty_trait(_, _, store, mutbl, bounds) => {\n                 object_contents(cx, store, mutbl, bounds)\n             }\n \n             ty_ptr(ref mt) => {\n-                tc_ty(cx, mt.ty, cache).other_pointer(TC::None)\n+                tc_ty(cx, mt.ty, cache).unsafe_pointer()\n             }\n \n             ty_rptr(r, ref mt) => {\n-                tc_ty(cx, mt.ty, cache).other_pointer(\n+                tc_ty(cx, mt.ty, cache).reference(\n                     borrowed_contents(r, mt.mutbl))\n             }\n \n@@ -2019,11 +2045,11 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n             }\n \n             ty_evec(mt, vstore_box) => {\n-                tc_mt(cx, mt, cache).other_pointer(TC::Managed)\n+                tc_mt(cx, mt, cache).managed_pointer()\n             }\n \n             ty_evec(ref mt, vstore_slice(r)) => {\n-                tc_ty(cx, mt.ty, cache).other_pointer(\n+                tc_ty(cx, mt.ty, cache).reference(\n                     borrowed_contents(r, mt.mutbl))\n             }\n \n@@ -2193,10 +2219,10 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 contents.owned_pointer()\n             }\n             BoxTraitStore => {\n-                contents.other_pointer(TC::Managed)\n+                contents.managed_pointer()\n             }\n             RegionTraitStore(r) => {\n-                contents.other_pointer(borrowed_contents(r, mutbl))\n+                contents.reference(borrowed_contents(r, mutbl))\n             }\n         }\n     }\n@@ -2213,6 +2239,7 @@ pub fn type_contents(cx: ctxt, ty: t) -> TypeContents {\n                 BoundSend => TC::Nonsendable,\n                 BoundFreeze => TC::Nonfreezable,\n                 BoundSized => TC::Nonsized,\n+                BoundPod => TC::Nonpod,\n             };\n         });\n         return tc;"}, {"sha": "ca17d8aaab4324f2afeb04b3ea26baed9cdd953c", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -639,6 +639,7 @@ impl Repr for ty::ParamBounds {\n                 ty::BoundSend => ~\"Send\",\n                 ty::BoundFreeze => ~\"Freeze\",\n                 ty::BoundSized => ~\"Sized\",\n+                ty::BoundPod => ~\"Pod\",\n             });\n         }\n         for t in self.trait_bounds.iter() {\n@@ -926,6 +927,7 @@ impl UserString for ty::BuiltinBound {\n             ty::BoundSend => ~\"Send\",\n             ty::BoundFreeze => ~\"Freeze\",\n             ty::BoundSized => ~\"Sized\",\n+            ty::BoundPod => ~\"Pod\",\n         }\n     }\n }"}, {"sha": "b33106a7f66ad06e39b127c54aea2cfd77bf6ca0", "filename": "src/libstd/cell.rs", "status": "modified", "additions": 100, "deletions": 0, "changes": 100, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fcell.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -14,6 +14,71 @@ use prelude::*;\n use cast;\n use util::NonCopyable;\n \n+#[cfg(stage0)]\n+use unstable::intrinsics;\n+\n+/// A mutable memory location that admits only `Pod` data.\n+#[no_freeze]\n+#[deriving(Clone)]\n+pub struct Cell<T> {\n+    priv value: T,\n+}\n+\n+// NB: For `stage0`, we omit the `Pod` bound. This is unsound but will help\n+// us get started on removing `@mut` from `rustc`.\n+\n+#[cfg(stage0)]\n+impl<T> Cell<T> {\n+    /// Creates a new `Cell` containing the given value.\n+    pub fn new(value: T) -> Cell<T> {\n+        Cell {\n+            value: value,\n+        }\n+    }\n+\n+    /// Returns a copy of the contained value.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        unsafe {\n+            let mut result = intrinsics::uninit();\n+            intrinsics::copy_nonoverlapping_memory(&mut result, &self.value, 1);\n+            result\n+        }\n+    }\n+\n+    /// Sets the contained value.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        unsafe {\n+            intrinsics::copy_nonoverlapping_memory(cast::transmute_mut(&self.value), &value, 1)\n+        }\n+    }\n+}\n+\n+#[cfg(not(stage0))]\n+impl<T: ::kinds::Pod> Cell<T> {\n+    /// Creates a new `Cell` containing the given value.\n+    pub fn new(value: T) -> Cell<T> {\n+        Cell {\n+            value: value,\n+        }\n+    }\n+\n+    /// Returns a copy of the contained value.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        self.value\n+    }\n+\n+    /// Sets the contained value.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        unsafe {\n+            *cast::transmute_mut(&self.value) = value\n+        }\n+    }\n+}\n+\n /// A mutable memory location with dynamically checked borrow rules\n #[no_freeze]\n pub struct RefCell<T> {\n@@ -132,6 +197,30 @@ impl<T> RefCell<T> {\n         let mut ptr = self.borrow_mut();\n         blk(ptr.get())\n     }\n+\n+    /// Sets the value, replacing what was there.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the value is currently borrowed.\n+    #[inline]\n+    pub fn set(&self, value: T) {\n+        let mut reference = self.borrow_mut();\n+        *reference.get() = value\n+    }\n+}\n+\n+impl<T:Clone> RefCell<T> {\n+    /// Returns a copy of the contained value.\n+    ///\n+    /// # Failure\n+    ///\n+    /// Fails if the value is currently mutably borrowed.\n+    #[inline]\n+    pub fn get(&self) -> T {\n+        let reference = self.borrow();\n+        (*reference.get()).clone()\n+    }\n }\n \n impl<T: Clone> Clone for RefCell<T> {\n@@ -202,6 +291,17 @@ impl<'b, T> RefMut<'b, T> {\n mod test {\n     use super::*;\n \n+    #[test]\n+    fn smoketest_cell() {\n+        let x = Cell::new(10);\n+        assert_eq!(x.get(), 10);\n+        x.set(20);\n+        assert_eq!(x.get(), 20);\n+\n+        let y = Cell::new((30, 40));\n+        assert_eq!(y.get(), (30, 40));\n+    }\n+\n     #[test]\n     fn double_imm_borrow() {\n         let x = RefCell::new(0);"}, {"sha": "8d9fec1a4b74498ec5f6104fd7df8f85e5aa81da", "filename": "src/libstd/kinds.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fkinds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fkinds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkinds.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -37,3 +37,13 @@ pub trait Freeze {\n pub trait Sized {\n     // Empty.\n }\n+\n+/// Types that can be copied by simply copying bits (i.e. `memcpy`).\n+///\n+/// The name \"POD\" stands for \"Plain Old Data\" and is borrowed from C++.\n+#[cfg(not(stage0))]\n+#[lang=\"pod\"]\n+pub trait Pod {\n+    // Empty.\n+}\n+"}, {"sha": "1a06ce1fb03a6062a6331cf395cc0de2746945e4", "filename": "src/libstd/prelude.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fprelude.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Flibstd%2Fprelude.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprelude.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -37,6 +37,9 @@ pub use ops::{Shl, Shr, Index};\n pub use option::{Option, Some, None};\n pub use result::{Result, Ok, Err};\n \n+#[cfg(not(stage0))]\n+pub use kinds::Pod;\n+\n // Reexported functions\n pub use from_str::from_str;\n pub use iter::range;"}, {"sha": "60de67e214c0c83fe94f82b76d56bb03afccd04d", "filename": "src/test/compile-fail/kindck-pod.rs", "status": "added", "additions": 86, "deletions": 0, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fkindck-pod.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -0,0 +1,86 @@\n+// Copyright 2012 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test which of the builtin types are considered POD.\n+\n+#[feature(managed_boxes)];\n+\n+use std::rc::Rc;\n+\n+fn assert_pod<T:Pod>() { }\n+trait Dummy { }\n+\n+struct MyStruct {\n+    x: int,\n+    y: int,\n+}\n+\n+struct MyNonpodStruct {\n+    x: ~int,\n+}\n+\n+fn test<'a,T,U:Pod>(_: &'a int) {\n+    // lifetime pointers are ok...\n+    assert_pod::<&'static int>();\n+    assert_pod::<&'a int>();\n+    assert_pod::<&'a str>();\n+    assert_pod::<&'a [int]>();\n+\n+    // ...unless they are mutable\n+    assert_pod::<&'static mut int>(); //~ ERROR does not fulfill `Pod`\n+    assert_pod::<&'a mut int>();  //~ ERROR does not fulfill `Pod`\n+\n+    // ~ pointers are not ok\n+    assert_pod::<~int>();   //~ ERROR does not fulfill `Pod`\n+    assert_pod::<~str>();   //~ ERROR does not fulfill `Pod`\n+    assert_pod::<~[int]>(); //~ ERROR does not fulfill `Pod`\n+    assert_pod::<~&'a mut int>(); //~ ERROR does not fulfill `Pod`\n+\n+    // borrowed object types are generally ok\n+    assert_pod::<&'a Dummy>();\n+    assert_pod::<&'a Dummy:Pod>();\n+    assert_pod::<&'static Dummy:Pod>();\n+\n+    // owned object types are not ok\n+    assert_pod::<~Dummy>(); //~ ERROR does not fulfill `Pod`\n+    assert_pod::<~Dummy:Pod>(); //~ ERROR does not fulfill `Pod`\n+\n+    // mutable object types are not ok\n+    assert_pod::<&'a mut Dummy:Pod>();  //~ ERROR does not fulfill `Pod`\n+\n+    // closures are like an `&mut` object\n+    assert_pod::<||>(); //~ ERROR does not fulfill `Pod`\n+\n+    // unsafe ptrs are ok\n+    assert_pod::<*int>();\n+    assert_pod::<*&'a mut int>();\n+\n+    // regular old ints and such are ok\n+    assert_pod::<int>();\n+    assert_pod::<bool>();\n+    assert_pod::<()>();\n+\n+    // tuples are ok\n+    assert_pod::<(int,int)>();\n+\n+    // structs of POD are ok\n+    assert_pod::<MyStruct>();\n+\n+    // structs containing non-POD are not ok\n+    assert_pod::<MyNonpodStruct>(); //~ ERROR does not fulfill `Pod`\n+\n+    // managed or ref counted types are not ok\n+    assert_pod::<@int>();   //~ ERROR does not fulfill `Pod`\n+    assert_pod::<Rc<int>>();   //~ ERROR does not fulfill `Pod`\n+}\n+\n+pub fn main() {\n+}\n+"}, {"sha": "03341e6f946e7addd10927d3c796fb1190c56065", "filename": "src/test/run-pass/can-copy-pod.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2c41a823ccb1e7cea0a29f9048533aaa78c40de6/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fcan-copy-pod.rs?ref=2c41a823ccb1e7cea0a29f9048533aaa78c40de6", "patch": "@@ -0,0 +1,15 @@\n+/* Any copyright is dedicated to the Public Domain.\n+ * http://creativecommons.org/publicdomain/zero/1.0/ */\n+\n+// Tests that type parameters with the `Pod` are implicitly copyable.\n+\n+#[allow(dead_code)];\n+\n+fn can_copy_pod<T:Pod>(v: T) {\n+    let _a = v;\n+    let _b = v;\n+}\n+\n+pub fn main() {}\n+\n+"}]}