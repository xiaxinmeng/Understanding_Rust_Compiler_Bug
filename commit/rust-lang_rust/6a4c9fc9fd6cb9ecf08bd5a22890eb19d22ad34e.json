{"sha": "6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZhNGM5ZmM5ZmQ2Y2I5ZWNmMDhiZDVhMjI4OTBlYjE5ZDIyYWQzNGU=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-17T14:11:29Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-08-17T14:11:29Z"}, "message": "Don't make fields private unless you have to", "tree": {"sha": "8e0cf69fd3addb137fae6babdda625437078b143", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8e0cf69fd3addb137fae6babdda625437078b143"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "html_url": "https://github.com/rust-lang/rust/commit/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33", "html_url": "https://github.com/rust-lang/rust/commit/0b2b9a5508186c16a2e782f47ce7e0e1c5fb8d33"}], "stats": {"total": 78, "additions": 45, "deletions": 33}, "files": [{"sha": "c589b08dc4bdc0bb3288caa83eaee1a48efd298a", "filename": "crates/assists/src/lib.rs", "status": "modified", "additions": 10, "deletions": 27, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Fassists%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Fassists%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Flib.rs?ref=6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "patch": "@@ -66,13 +66,13 @@ pub struct GroupLabel(pub String);\n \n #[derive(Debug, Clone)]\n pub struct Assist {\n-    id: AssistId,\n+    pub id: AssistId,\n     /// Short description of the assist, as shown in the UI.\n     label: String,\n-    group: Option<GroupLabel>,\n+    pub group: Option<GroupLabel>,\n     /// Target ranges are used to sort assists: the smaller the target range,\n     /// the more specific assist is, and so it should be sorted first.\n-    target: TextRange,\n+    pub target: TextRange,\n }\n \n #[derive(Debug, Clone)]\n@@ -82,6 +82,11 @@ pub struct ResolvedAssist {\n }\n \n impl Assist {\n+    fn new(id: AssistId, label: String, group: Option<GroupLabel>, target: TextRange) -> Assist {\n+        assert!(label.starts_with(char::is_uppercase));\n+        Assist { id, label, group, target }\n+    }\n+\n     /// Return all the assists applicable at the given position.\n     ///\n     /// Assists are returned in the \"unresolved\" state, that is only labels are\n@@ -114,30 +119,8 @@ impl Assist {\n         acc.finish_resolved()\n     }\n \n-    pub(crate) fn new(\n-        id: AssistId,\n-        label: String,\n-        group: Option<GroupLabel>,\n-        target: TextRange,\n-    ) -> Assist {\n-        assert!(label.starts_with(|c: char| c.is_uppercase()));\n-        Assist { id, label, group, target }\n-    }\n-\n-    pub fn id(&self) -> AssistId {\n-        self.id\n-    }\n-\n-    pub fn label(&self) -> String {\n-        self.label.clone()\n-    }\n-\n-    pub fn group(&self) -> Option<GroupLabel> {\n-        self.group.clone()\n-    }\n-\n-    pub fn target(&self) -> TextRange {\n-        self.target\n+    pub fn label(&self) -> &str {\n+        self.label.as_str()\n     }\n }\n "}, {"sha": "e05ffc768e87af54bc20ba9fead6d5738aa41320", "filename": "crates/rust-analyzer/src/handlers.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fhandlers.rs?ref=6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "patch": "@@ -859,10 +859,10 @@ pub(crate) fn handle_resolve_code_action(\n         .map(|it| it.into_iter().filter_map(from_proto::assist_kind).collect());\n \n     let assists = snap.analysis.resolved_assists(&snap.config.assist, frange)?;\n-    let (id_string, index) = split_once(&params.id, ':').unwrap();\n+    let (id, index) = split_once(&params.id, ':').unwrap();\n     let index = index.parse::<usize>().unwrap();\n     let assist = &assists[index];\n-    assert!(assist.assist.id().0 == id_string);\n+    assert!(assist.assist.id.0 == id);\n     Ok(to_proto::resolved_code_action(&snap, assist.clone())?.edit)\n }\n "}, {"sha": "535de2f71ab4092d592c0d7bde2a6a4c46698381", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "patch": "@@ -704,10 +704,10 @@ pub(crate) fn unresolved_code_action(\n     index: usize,\n ) -> Result<lsp_ext::CodeAction> {\n     let res = lsp_ext::CodeAction {\n-        title: assist.label(),\n-        id: Some(format!(\"{}:{}\", assist.id().0.to_owned(), index.to_string())),\n-        group: assist.group().filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n-        kind: Some(code_action_kind(assist.id().1)),\n+        title: assist.label().to_string(),\n+        id: Some(format!(\"{}:{}\", assist.id.0, index.to_string())),\n+        group: assist.group.filter(|_| snap.config.client_caps.code_action_group).map(|gr| gr.0),\n+        kind: Some(code_action_kind(assist.id.1)),\n         edit: None,\n         is_preferred: None,\n     };"}, {"sha": "8effddcda55d76f616b902b651242519a08156ae", "filename": "docs/dev/style.md", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/docs%2Fdev%2Fstyle.md", "raw_url": "https://github.com/rust-lang/rust/raw/6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e/docs%2Fdev%2Fstyle.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/docs%2Fdev%2Fstyle.md?ref=6a4c9fc9fd6cb9ecf08bd5a22890eb19d22ad34e", "patch": "@@ -176,6 +176,35 @@ fn frobnicate(walrus: Option<Walrus>) {\n }\n ```\n \n+# Getters & Setters\n+\n+If a field can have any value without breaking invariants, make the field public.\n+Conversely, if there is an invariant, document it, enforce it in the \"constructor\" function, make the field private, and provide a getter.\n+Never provide setters.\n+\n+Getters should return borrowed data:\n+\n+```\n+struct Person {\n+    // Invariant: never empty\n+    first_name: String,\n+    middle_name: Option<String>\n+}\n+\n+// Good\n+impl Person {\n+    fn first_name(&self) -> &str { self.first_name.as_str() }\n+    fn middle_name(&self) -> Option<&str> { self.middle_name.as_ref() }\n+}\n+\n+// Not as good\n+impl Person {\n+    fn first_name(&self) -> String { self.first_name.clone() }\n+    fn middle_name(&self) -> &Option<String> { &self.middle_name }\n+}\n+```\n+\n+\n # Premature Pessimization\n \n Avoid writing code which is slower than it needs to be."}]}