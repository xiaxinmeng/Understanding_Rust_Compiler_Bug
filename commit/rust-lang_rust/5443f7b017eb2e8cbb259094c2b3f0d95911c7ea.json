{"sha": "5443f7b017eb2e8cbb259094c2b3f0d95911c7ea", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU0NDNmN2IwMTdlYjJlOGNiYjI1OTA5NGMyYjNmMGQ5NTkxMWM3ZWE=", "commit": {"author": {"name": "Pietro Albini", "email": "pietro@pietroalbini.org", "date": "2018-10-25T12:31:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-10-25T12:31:24Z"}, "message": "Rollup merge of #55345 - RalfJung:no-null, r=oli-obk\n\nRemove is_null\n\nIt was confusingly named (`is_zero` would have been better, as someone pointed out somewhere but I forgot who or where), and it didn't even reliably test for \"is this value 0 at run-time\" because out-of-bounds pointers *can* be 0.\n\nIt's not used in rustc, and miri only really needs `is_null_ptr` and `to_bytes() == 0`, so let's just kill this method.\n\nr? @oli-obk", "tree": {"sha": "cd59a07265f79bb895b8dfbde64d6edd90f9ece1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cd59a07265f79bb895b8dfbde64d6edd90f9ece1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb0becCRBK7hj4Ov3rIwAAdHIIAJg+GdXIpoBdFy2bAsGHdAT2\nwgq1NkzLf3/zAKexPZbqc3Au9AAifgdAN9cb/dmNvPSjFt6qvVHQZ5P5kqbPtjPU\ngkP/O1u60HzJyuiPO5SsdX3xOPJACR2dIdslywp7lUIdkvvfFBldw4Ink9uQ01UE\nSlV7saAw7ZemXfcYU0uDLwgD76LJ7xf1bH/V83yNN8ky7B+B4V/tbYPfVbg+XztI\nMmqFd2jikd6dWTa44kIc/L4prTNDb/c6IdosngTbM7OdxrhCz0NLfvD/WjJ60Xxk\n2x1p/PKcAAIM5b2rp37doipkZbDsg8GOGSLZ6ehb1TlX98RiauuZ42GuOMYD9LM=\n=vqPW\n-----END PGP SIGNATURE-----\n", "payload": "tree cd59a07265f79bb895b8dfbde64d6edd90f9ece1\nparent 83906ec6adcb839f79099a33d739b44f5b694b6a\nparent cbe6b2298a83e70b06498d1d623b3f15c645e1f8\nauthor Pietro Albini <pietro@pietroalbini.org> 1540470684 +0200\ncommitter GitHub <noreply@github.com> 1540470684 +0200\n\nRollup merge of #55345 - RalfJung:no-null, r=oli-obk\n\nRemove is_null\n\nIt was confusingly named (`is_zero` would have been better, as someone pointed out somewhere but I forgot who or where), and it didn't even reliably test for \"is this value 0 at run-time\" because out-of-bounds pointers *can* be 0.\n\nIt's not used in rustc, and miri only really needs `is_null_ptr` and `to_bytes() == 0`, so let's just kill this method.\n\nr? @oli-obk\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea", "html_url": "https://github.com/rust-lang/rust/commit/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea/comments", "author": {"login": "pietroalbini", "id": 2299951, "node_id": "MDQ6VXNlcjIyOTk5NTE=", "avatar_url": "https://avatars.githubusercontent.com/u/2299951?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pietroalbini", "html_url": "https://github.com/pietroalbini", "followers_url": "https://api.github.com/users/pietroalbini/followers", "following_url": "https://api.github.com/users/pietroalbini/following{/other_user}", "gists_url": "https://api.github.com/users/pietroalbini/gists{/gist_id}", "starred_url": "https://api.github.com/users/pietroalbini/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pietroalbini/subscriptions", "organizations_url": "https://api.github.com/users/pietroalbini/orgs", "repos_url": "https://api.github.com/users/pietroalbini/repos", "events_url": "https://api.github.com/users/pietroalbini/events{/privacy}", "received_events_url": "https://api.github.com/users/pietroalbini/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83906ec6adcb839f79099a33d739b44f5b694b6a", "url": "https://api.github.com/repos/rust-lang/rust/commits/83906ec6adcb839f79099a33d739b44f5b694b6a", "html_url": "https://github.com/rust-lang/rust/commit/83906ec6adcb839f79099a33d739b44f5b694b6a"}, {"sha": "cbe6b2298a83e70b06498d1d623b3f15c645e1f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbe6b2298a83e70b06498d1d623b3f15c645e1f8", "html_url": "https://github.com/rust-lang/rust/commit/cbe6b2298a83e70b06498d1d623b3f15c645e1f8"}], "stats": {"total": 10, "additions": 1, "deletions": 9}, "files": [{"sha": "4304f08a78f0c56b757f8fb0c9f8927f2918d52c", "filename": "src/librustc/mir/interpret/value.rs", "status": "modified", "additions": 1, "deletions": 9, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5443f7b017eb2e8cbb259094c2b3f0d95911c7ea/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Finterpret%2Fvalue.rs?ref=5443f7b017eb2e8cbb259094c2b3f0d95911c7ea", "patch": "@@ -181,22 +181,14 @@ impl<'tcx, Tag> Scalar<Tag> {\n     #[inline]\n     pub fn is_null_ptr(self, cx: impl HasDataLayout) -> bool {\n         match self {\n-            Scalar::Bits { bits, size } =>  {\n+            Scalar::Bits { bits, size } => {\n                 assert_eq!(size as u64, cx.data_layout().pointer_size.bytes());\n                 bits == 0\n             },\n             Scalar::Ptr(_) => false,\n         }\n     }\n \n-    #[inline]\n-    pub fn is_null(self) -> bool {\n-        match self {\n-            Scalar::Bits { bits, .. } => bits == 0,\n-            Scalar::Ptr(_) => false\n-        }\n-    }\n-\n     #[inline]\n     pub fn from_bool(b: bool) -> Self {\n         Scalar::Bits { bits: b as u128, size: 1 }"}]}