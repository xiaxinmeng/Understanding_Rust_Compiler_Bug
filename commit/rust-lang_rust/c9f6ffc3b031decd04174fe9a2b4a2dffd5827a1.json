{"sha": "c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM5ZjZmZmMzYjAzMWRlY2QwNDE3NGZlOWEyYjRhMmRmZmQ1ODI3YTE=", "commit": {"author": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-18T15:34:41Z"}, "committer": {"name": "marmeladema", "email": "xademax@gmail.com", "date": "2020-04-27T22:58:11Z"}, "message": "Change return type of `entry_fn` query to return a `LocalDefId`", "tree": {"sha": "8df7437b70763adc7b1c5e3482c4a0a74e4c6125", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8df7437b70763adc7b1c5e3482c4a0a74e4c6125"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "html_url": "https://github.com/rust-lang/rust/commit/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/comments", "author": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marmeladema", "id": 1629419, "node_id": "MDQ6VXNlcjE2Mjk0MTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1629419?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marmeladema", "html_url": "https://github.com/marmeladema", "followers_url": "https://api.github.com/users/marmeladema/followers", "following_url": "https://api.github.com/users/marmeladema/following{/other_user}", "gists_url": "https://api.github.com/users/marmeladema/gists{/gist_id}", "starred_url": "https://api.github.com/users/marmeladema/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marmeladema/subscriptions", "organizations_url": "https://api.github.com/users/marmeladema/orgs", "repos_url": "https://api.github.com/users/marmeladema/repos", "events_url": "https://api.github.com/users/marmeladema/events{/privacy}", "received_events_url": "https://api.github.com/users/marmeladema/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3877f540006ddb690c687947e299a07c19e98aed", "url": "https://api.github.com/repos/rust-lang/rust/commits/3877f540006ddb690c687947e299a07c19e98aed", "html_url": "https://github.com/rust-lang/rust/commit/3877f540006ddb690c687947e299a07c19e98aed"}], "stats": {"total": 46, "additions": 24, "deletions": 22}, "files": [{"sha": "92e210cdd8cb764d8fc3577d0a89b14e6f5d257d", "filename": "src/librustc_codegen_llvm/debuginfo/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_llvm%2Fdebuginfo%2Fmod.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -290,7 +290,7 @@ impl DebugInfoMethods<'tcx> for CodegenCx<'ll, 'tcx> {\n             spflags |= DISPFlags::SPFlagOptimized;\n         }\n         if let Some((id, _)) = self.tcx.entry_fn(LOCAL_CRATE) {\n-            if id == def_id {\n+            if id.to_def_id() == def_id {\n                 spflags |= DISPFlags::SPFlagMainSubprogram;\n             }\n         }"}, {"sha": "cd43ca8257e926b7c7544d4415b721454b448898", "filename": "src/librustc_codegen_ssa/base.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_codegen_ssa%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_codegen_ssa%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fbase.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -30,7 +30,7 @@ use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::profiling::print_time_passes_entry;\n use rustc_data_structures::sync::{par_iter, Lock, ParallelIterator};\n use rustc_hir as hir;\n-use rustc_hir::def_id::{DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{LocalDefId, LOCAL_CRATE};\n use rustc_hir::lang_items::StartFnLangItem;\n use rustc_index::vec::Idx;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrs;\n@@ -397,7 +397,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         None => return None,\n     };\n \n-    let instance = Instance::mono(cx.tcx(), main_def_id);\n+    let instance = Instance::mono(cx.tcx(), main_def_id.to_def_id());\n \n     if !cx.codegen_unit().contains_item(&MonoItem::Fn(instance)) {\n         // We want to create the wrapper in the same codegen unit as Rust's main\n@@ -416,7 +416,7 @@ pub fn maybe_create_entry_wrapper<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>>(\n         cx: &'a Bx::CodegenCx,\n         sp: Span,\n         rust_main: Bx::Value,\n-        rust_main_def_id: DefId,\n+        rust_main_def_id: LocalDefId,\n         use_start_lang_item: bool,\n     ) -> Bx::Function {\n         // The entry function is either `int main(void)` or `int main(int argc, char **argv)`,"}, {"sha": "9e8f3a84e20e9b0f5714497464c89f6c3422c630", "filename": "src/librustc_interface/queries.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_interface%2Fqueries.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_interface%2Fqueries.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_interface%2Fqueries.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -293,7 +293,7 @@ impl<'tcx> Queries<'tcx> {\n             _ => return,\n         };\n \n-        let attrs = &*tcx.get_attrs(def_id);\n+        let attrs = &*tcx.get_attrs(def_id.to_def_id());\n         let attrs = attrs.iter().filter(|attr| attr.check_name(sym::rustc_error));\n         for attr in attrs {\n             match attr.meta_item_list() {"}, {"sha": "632607e3356266f8d18a56443645764512113b6b", "filename": "src/librustc_middle/mir/mono.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_middle%2Fmir%2Fmono.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fmir%2Fmono.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -7,7 +7,7 @@ use rustc_data_structures::base_n;\n use rustc_data_structures::fingerprint::Fingerprint;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n-use rustc_hir::def_id::{CrateNum, DefId, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefId, LocalDefId, LOCAL_CRATE};\n use rustc_hir::HirId;\n use rustc_session::config::OptLevel;\n use rustc_span::source_map::Span;\n@@ -95,7 +95,7 @@ impl<'tcx> MonoItem<'tcx> {\n                 // linkage, then we'll be creating a globally shared version.\n                 if self.explicit_linkage(tcx).is_some()\n                     || !instance.def.generates_cgu_internal_copy(tcx)\n-                    || Some(instance.def_id()) == entry_def_id\n+                    || Some(instance.def_id()) == entry_def_id.map(LocalDefId::to_def_id)\n                 {\n                     return InstantiationMode::GloballyShared { may_conflict: false };\n                 }"}, {"sha": "654b13648d0f454903bdfb2aa3a5fc4469a2c5b4", "filename": "src/librustc_middle/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_middle%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_middle%2Fquery%2Fmod.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -880,7 +880,7 @@ rustc_queries! {\n \n         /// Identifies the entry-point (e.g., the `main` function) for a given\n         /// crate, returning `None` if there is no entry point (such as for library crates).\n-        query entry_fn(_: CrateNum) -> Option<(DefId, EntryFnType)> {\n+        query entry_fn(_: CrateNum) -> Option<(LocalDefId, EntryFnType)> {\n             desc { \"looking up the entry function of a crate\" }\n         }\n         query plugin_registrar_fn(_: CrateNum) -> Option<DefId> {"}, {"sha": "dfcd2c3c93600d85a82d319167b5c996008d062e", "filename": "src/librustc_mir/monomorphize/collector.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmonomorphize%2Fcollector.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -919,7 +919,7 @@ struct RootCollector<'a, 'tcx> {\n     tcx: TyCtxt<'tcx>,\n     mode: MonoItemCollectionMode,\n     output: &'a mut Vec<MonoItem<'tcx>>,\n-    entry_fn: Option<(DefId, EntryFnType)>,\n+    entry_fn: Option<(LocalDefId, EntryFnType)>,\n }\n \n impl ItemLikeVisitor<'v> for RootCollector<'_, 'v> {\n@@ -1008,7 +1008,7 @@ impl RootCollector<'_, 'v> {\n             && match self.mode {\n                 MonoItemCollectionMode::Eager => true,\n                 MonoItemCollectionMode::Lazy => {\n-                    self.entry_fn.map(|(id, _)| id) == Some(def_id.to_def_id())\n+                    self.entry_fn.map(|(id, _)| id) == Some(def_id)\n                         || self.tcx.is_reachable_non_generic(def_id)\n                         || self\n                             .tcx"}, {"sha": "1b8c053b16e0b92bbf9bf4fa4457dd4fc93b5556", "filename": "src/librustc_passes/dead.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_passes%2Fdead.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_passes%2Fdead.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fdead.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -452,8 +452,7 @@ fn create_and_seed_worklist<'tcx>(\n         )\n         .chain(\n             // Seed entry point\n-            tcx.entry_fn(LOCAL_CRATE)\n-                .map(|(def_id, _)| tcx.hir().as_local_hir_id(def_id.expect_local())),\n+            tcx.entry_fn(LOCAL_CRATE).map(|(def_id, _)| tcx.hir().as_local_hir_id(def_id)),\n         )\n         .collect::<Vec<_>>();\n "}, {"sha": "6a6d0316609078b82f960761cca6876df53e81e7", "filename": "src/librustc_passes/entry.rs", "status": "modified", "additions": 10, "deletions": 7, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_passes%2Fentry.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_passes%2Fentry.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fentry.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -1,7 +1,7 @@\n use rustc_ast::attr;\n use rustc_ast::entry::EntryPointType;\n use rustc_errors::struct_span_err;\n-use rustc_hir::def_id::{CrateNum, DefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, LocalDefId, CRATE_DEF_INDEX, LOCAL_CRATE};\n use rustc_hir::itemlikevisit::ItemLikeVisitor;\n use rustc_hir::{HirId, ImplItem, Item, ItemKind, TraitItem};\n use rustc_middle::hir::map::Map;\n@@ -48,7 +48,7 @@ impl<'a, 'tcx> ItemLikeVisitor<'tcx> for EntryContext<'a, 'tcx> {\n     }\n }\n \n-fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(DefId, EntryFnType)> {\n+fn entry_fn(tcx: TyCtxt<'_>, cnum: CrateNum) -> Option<(LocalDefId, EntryFnType)> {\n     assert_eq!(cnum, LOCAL_CRATE);\n \n     let any_exe =\n@@ -143,13 +143,16 @@ fn find_item(item: &Item<'_>, ctxt: &mut EntryContext<'_, '_>, at_root: bool) {\n     }\n }\n \n-fn configure_main(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) -> Option<(DefId, EntryFnType)> {\n+fn configure_main(\n+    tcx: TyCtxt<'_>,\n+    visitor: &EntryContext<'_, '_>,\n+) -> Option<(LocalDefId, EntryFnType)> {\n     if let Some((hir_id, _)) = visitor.start_fn {\n-        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Start))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Start))\n     } else if let Some((hir_id, _)) = visitor.attr_main_fn {\n-        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Main))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else if let Some((hir_id, _)) = visitor.main_fn {\n-        Some((tcx.hir().local_def_id(hir_id).to_def_id(), EntryFnType::Main))\n+        Some((tcx.hir().local_def_id(hir_id), EntryFnType::Main))\n     } else {\n         no_main_err(tcx, visitor);\n         None\n@@ -211,7 +214,7 @@ fn no_main_err(tcx: TyCtxt<'_>, visitor: &EntryContext<'_, '_>) {\n     err.emit();\n }\n \n-pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(DefId, EntryFnType)> {\n+pub fn find_entry_point(tcx: TyCtxt<'_>) -> Option<(LocalDefId, EntryFnType)> {\n     tcx.entry_fn(LOCAL_CRATE)\n }\n "}, {"sha": "5f49b5ce9ea3170c8ac05005432be6d7c3011ab8", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -1451,7 +1451,7 @@ fn check_fn<'a, 'tcx>(\n     // Check that the main return type implements the termination trait.\n     if let Some(term_id) = tcx.lang_items().termination() {\n         if let Some((def_id, EntryFnType::Main)) = tcx.entry_fn(LOCAL_CRATE) {\n-            let main_id = hir.as_local_hir_id(def_id.expect_local());\n+            let main_id = hir.as_local_hir_id(def_id);\n             if main_id == fn_id {\n                 let substs = tcx.mk_substs_trait(declared_ret_ty, &[]);\n                 let trait_ref = ty::TraitRef::new(term_id, substs);"}, {"sha": "8d8a1b4d9676169c67d4c6dfc77b131a6fb65b1e", "filename": "src/librustc_typeck/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_typeck%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1/src%2Flibrustc_typeck%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Flib.rs?ref=c9f6ffc3b031decd04174fe9a2b4a2dffd5827a1", "patch": "@@ -303,8 +303,8 @@ fn check_start_fn_ty(tcx: TyCtxt<'_>, start_def_id: LocalDefId) {\n \n fn check_for_entry_fn(tcx: TyCtxt<'_>) {\n     match tcx.entry_fn(LOCAL_CRATE) {\n-        Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id.expect_local()),\n-        Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id.expect_local()),\n+        Some((def_id, EntryFnType::Main)) => check_main_fn_ty(tcx, def_id),\n+        Some((def_id, EntryFnType::Start)) => check_start_fn_ty(tcx, def_id),\n         _ => {}\n     }\n }"}]}