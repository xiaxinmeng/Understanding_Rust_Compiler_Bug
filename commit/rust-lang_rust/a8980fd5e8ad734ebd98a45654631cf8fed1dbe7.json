{"sha": "a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE4OTgwZmQ1ZThhZDczNGViZDk4YTQ1NjU0NjMxY2Y4ZmVkMWRiZTc=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-25T13:55:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2017-09-25T13:55:21Z"}, "message": "use exchange_malloc lang item for Box statements", "tree": {"sha": "3629a42ac1e8aaa151202905f0b22c397071ae04", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3629a42ac1e8aaa151202905f0b22c397071ae04"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "html_url": "https://github.com/rust-lang/rust/commit/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a5503a33e6bfe503089cd776c97da9cc8e00bd37", "url": "https://api.github.com/repos/rust-lang/rust/commits/a5503a33e6bfe503089cd776c97da9cc8e00bd37", "html_url": "https://github.com/rust-lang/rust/commit/a5503a33e6bfe503089cd776c97da9cc8e00bd37"}], "stats": {"total": 82, "additions": 66, "deletions": 16}, "files": [{"sha": "79ef3f97a9e9afcd420bbdfa463658c1b6f4937b", "filename": "miri/fn_call.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/miri%2Ffn_call.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/miri%2Ffn_call.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Ffn_call.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -176,8 +176,9 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                     Lvalue::undef(),\n                     StackPopCleanup::Goto(dest_block),\n                 )?;\n+                let mut args = self.frame().mir.args_iter();\n \n-                let arg_local = self.frame().mir.args_iter().next().ok_or(\n+                let arg_local = args.next().ok_or(\n                     EvalErrorKind::AbiViolation(\n                         \"Argument to __rust_maybe_catch_panic does not take enough arguments.\"\n                             .to_owned(),\n@@ -186,6 +187,8 @@ impl<'a, 'tcx> EvalContextExt<'tcx> for EvalContext<'a, 'tcx, super::Evaluator>\n                 let arg_dest = self.eval_lvalue(&mir::Lvalue::Local(arg_local))?;\n                 self.write_ptr(arg_dest, data, u8_ptr_ty)?;\n \n+                assert!(args.next().is_none(), \"__rust_maybe_catch_panic argument has more arguments than expected\");\n+\n                 // We ourselves return 0\n                 self.write_null(dest, dest_ty)?;\n "}, {"sha": "f6ecd6e0b00b71690991bb60d35e814686cc354c", "filename": "miri/lib.rs", "status": "modified", "additions": 50, "deletions": 9, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/miri%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/miri%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri%2Flib.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -114,6 +114,8 @@ pub fn eval_main<'a, 'tcx: 'a>(\n             ecx.memory.write_primval(foo_ptr.into(), PrimVal::Ptr(foo.into()), ptr_size, false)?;\n             ecx.memory.mark_static_initalized(foo_ptr.alloc_id, Mutability::Immutable)?;\n             ecx.write_ptr(dest, foo_ptr.into(), ty)?;\n+\n+            assert!(args.next().is_none(), \"start lang item has more arguments than expected\");\n         } else {\n             ecx.push_stack_frame(\n                 main_instance,\n@@ -122,6 +124,10 @@ pub fn eval_main<'a, 'tcx: 'a>(\n                 Lvalue::undef(),\n                 StackPopCleanup::None,\n             )?;\n+\n+            // No arguments\n+            let mut args = ecx.frame().mir.args_iter();\n+            assert!(args.next().is_none(), \"main function must not have arguments\");\n         }\n \n         while ecx.step()? {}\n@@ -227,17 +233,52 @@ impl<'tcx> Machine<'tcx> for Evaluator {\n     fn box_alloc<'a>(\n         ecx: &mut EvalContext<'a, 'tcx, Self>,\n         ty: ty::Ty<'tcx>,\n-    ) -> EvalResult<'tcx, PrimVal> {\n-        // FIXME: call the `exchange_malloc` lang item if available\n+        dest: Lvalue,\n+    ) -> EvalResult<'tcx> {\n         let size = ecx.type_size(ty)?.expect(\"box only works with sized types\");\n         let align = ecx.type_align(ty)?;\n-        if size == 0 {\n-            Ok(PrimVal::Bytes(align.into()))\n-        } else {\n-            ecx.memory\n-                .allocate(size, align, MemoryKind::Machine(memory::MemoryKind::Rust))\n-                .map(PrimVal::Ptr)\n-        }\n+\n+        // Call the `exchange_malloc` lang item\n+        let malloc = ecx.tcx.lang_items().exchange_malloc_fn().unwrap();\n+        let malloc = ty::Instance::mono(ecx.tcx, malloc);\n+        let malloc_mir = ecx.load_mir(malloc.def)?;\n+        ecx.push_stack_frame(\n+            malloc,\n+            malloc_mir.span,\n+            malloc_mir,\n+            dest,\n+            // Don't do anything when we are done.  The statement() function will increment\n+            // the old stack frame's stmt counter to the next statement, which means that when\n+            // exchange_malloc returns, we go on evaluating exactly where we want to be.\n+            StackPopCleanup::None,\n+        )?;\n+\n+        let mut args = ecx.frame().mir.args_iter();\n+        let usize = ecx.tcx.types.usize;\n+\n+        // First argument: size\n+        let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+        ecx.write_value(\n+            ValTy {\n+                value: Value::ByVal(PrimVal::Bytes(size as u128)),\n+                ty: usize,\n+            },\n+            dest,\n+        )?;\n+\n+        // Second argument: align\n+        let dest = ecx.eval_lvalue(&mir::Lvalue::Local(args.next().unwrap()))?;\n+        ecx.write_value(\n+            ValTy {\n+                value: Value::ByVal(PrimVal::Bytes(align as u128)),\n+                ty: usize,\n+            },\n+            dest,\n+        )?;\n+\n+        // No more arguments\n+        assert!(args.next().is_none(), \"exchange_malloc lang item has more arguments than expected\");\n+        Ok(())\n     }\n \n     fn global_item_with_linkage<'a>("}, {"sha": "075880fc5bfd14662499cf876dfd9018c28ede1e", "filename": "src/librustc_mir/interpret/const_eval.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fconst_eval.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -240,7 +240,8 @@ impl<'tcx> super::Machine<'tcx> for CompileTimeFunctionEvaluator {\n     fn box_alloc<'a>(\n         _ecx: &mut EvalContext<'a, 'tcx, Self>,\n         _ty: ty::Ty<'tcx>,\n-    ) -> EvalResult<'tcx, PrimVal> {\n+        _dest: Lvalue,\n+    ) -> EvalResult<'tcx> {\n         Err(\n             ConstEvalError::NeedsRfc(\"Heap allocations via `box` keyword\".to_string()).into(),\n         )"}, {"sha": "3388031a30cabe62acf0044350c65dbc948bfe0b", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -877,8 +877,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             }\n \n             NullaryOp(mir::NullOp::Box, ty) => {\n-                let ptr = M::box_alloc(self, ty)?;\n-                self.write_primval(dest, ptr, dest_ty)?;\n+                M::box_alloc(self, ty, dest)?;\n             }\n \n             NullaryOp(mir::NullOp::SizeOf, ty) => {"}, {"sha": "36b396a7a2ba5ff71816e912ef0395c5f0e0e156", "filename": "src/librustc_mir/interpret/lvalue.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Flvalue.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -497,7 +497,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         Ok(Lvalue::Ptr { ptr, extra })\n     }\n \n-    pub(super) fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n+    pub fn lvalue_ty(&self, lvalue: &mir::Lvalue<'tcx>) -> Ty<'tcx> {\n         self.monomorphize(\n             lvalue.ty(self.mir(), self.tcx).to_ty(self.tcx),\n             self.substs(),"}, {"sha": "3df5d1b6a31bea95e3ec97fa8d00864747bb45a2", "filename": "src/librustc_mir/interpret/machine.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmachine.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -70,7 +70,8 @@ pub trait Machine<'tcx>: Sized {\n     fn box_alloc<'a>(\n         ecx: &mut EvalContext<'a, 'tcx, Self>,\n         ty: ty::Ty<'tcx>,\n-    ) -> EvalResult<'tcx, PrimVal>;\n+        dest: Lvalue,\n+    ) -> EvalResult<'tcx>;\n \n     /// Called when trying to access a global declared with a `linkage` attribute\n     fn global_item_with_linkage<'a>("}, {"sha": "c701ebfbf4c7519dae19211aeaffde65ee6de734", "filename": "src/librustc_mir/interpret/step.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a8980fd5e8ad734ebd98a45654631cf8fed1dbe7/src%2Flibrustc_mir%2Finterpret%2Fstep.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fstep.rs?ref=a8980fd5e8ad734ebd98a45654631cf8fed1dbe7", "patch": "@@ -92,6 +92,11 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n         trace!(\"{:?}\", stmt);\n \n         use rustc::mir::StatementKind::*;\n+\n+        // Some statements (e.g. box) push new stack frames.  We have to record the stack frame number\n+        // *before* executing the statement.\n+        let frame_idx = self.cur_frame();\n+\n         match stmt.kind {\n             Assign(ref lvalue, ref rvalue) => self.eval_rvalue_into_lvalue(rvalue, lvalue)?,\n \n@@ -175,7 +180,7 @@ impl<'a, 'tcx, M: Machine<'tcx>> EvalContext<'a, 'tcx, M> {\n             InlineAsm { .. } => return err!(InlineAsm),\n         }\n \n-        self.frame_mut().stmt += 1;\n+        self.stack[frame_idx].stmt += 1;\n         Ok(())\n     }\n "}]}