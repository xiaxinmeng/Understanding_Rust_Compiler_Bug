{"sha": "a59b7eabe691695c66a9d3b95735121af1ba0166", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE1OWI3ZWFiZTY5MTY5NWM2NmE5ZDNiOTU3MzUxMjFhZjFiYTAxNjY=", "commit": {"author": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-11T18:31:46Z"}, "committer": {"name": "Aaron Hill", "email": "aa1ronham@gmail.com", "date": "2019-11-24T19:37:24Z"}, "message": "Also fix lifetimes and consts in opaque types", "tree": {"sha": "a7b58c3e994cb2ff11ff758eb12a3390f0de1cca", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a7b58c3e994cb2ff11ff758eb12a3390f0de1cca"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a59b7eabe691695c66a9d3b95735121af1ba0166", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE7J9Gc3TfBwj2K399tAh+UQ6YsWQFAl3a2/QACgkQtAh+UQ6Y\nsWRdmA/+IBpdb52YabfXziLysBBsytEIzfZC7Gkfd0DpZIG8f1/3oFnNtJ/1lEzp\nEu4IYbe2VsPyD6W3YInJjvd0Cz+iYXSnfG8AUzXPJQRR76NnJwu4fugcXIGpr1fZ\nDFhNOZwt/r5WdlJjNfyjIU9zgSi13EEoUW0tfHxHRf/REILWrXI51EeNCULugGCc\nEhDP+JbxeXKgJT1o6o7IDnEZJeY1pYt9joZ037T7vqVdn3nSwzozmAm9RV+rI2fY\nWeIxFB3HO8kDw4k1FO+csjeIaXbVV4C99+k54PHap0tZr8Jc1jyw8L1wOzIK7oeT\nSG7VPfYrB2OKLigiV3WWhntbMBB8X613FB+4W5TFP0GzpSBnEW2dX76xjyHAfj2G\nUSyVhyfS7hjmvtx9JWuhiW3nSTCsSNbHF+5UEFK+1hz9t4hGnCAoNlD6mtB4amyc\nA/bLfLRuJbdYIHs3/M/zXMVWglkREd94cDtwztVhcoK0L55TYFPnw7G5SIQKJ8Sd\nvCPcuHutA/mnX64QBYD4y4UQA/rMIokHTqNDzXiVcO0ZjdpseGg0o16x0CczsF7Q\n9e0+qfncQIHG95JYHLTU2ahfR24SQK9wdl4PW/vxG8UNRlZMxQZPrTcAOSCv/Q+x\nXUuibpCMCAmHTEtHCmzJ0ZxGVEkscGKydNiJdB0dJPJvmaStbgw=\n=UgHi\n-----END PGP SIGNATURE-----", "payload": "tree a7b58c3e994cb2ff11ff758eb12a3390f0de1cca\nparent 6b47cbaee6ae009937bf796da9fb5ae662d5c9f1\nauthor Aaron Hill <aa1ronham@gmail.com> 1573497106 -0500\ncommitter Aaron Hill <aa1ronham@gmail.com> 1574624244 -0500\n\nAlso fix lifetimes and consts in opaque types\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a59b7eabe691695c66a9d3b95735121af1ba0166", "html_url": "https://github.com/rust-lang/rust/commit/a59b7eabe691695c66a9d3b95735121af1ba0166", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a59b7eabe691695c66a9d3b95735121af1ba0166/comments", "author": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Aaron1011", "id": 1408859, "node_id": "MDQ6VXNlcjE0MDg4NTk=", "avatar_url": "https://avatars.githubusercontent.com/u/1408859?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Aaron1011", "html_url": "https://github.com/Aaron1011", "followers_url": "https://api.github.com/users/Aaron1011/followers", "following_url": "https://api.github.com/users/Aaron1011/following{/other_user}", "gists_url": "https://api.github.com/users/Aaron1011/gists{/gist_id}", "starred_url": "https://api.github.com/users/Aaron1011/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Aaron1011/subscriptions", "organizations_url": "https://api.github.com/users/Aaron1011/orgs", "repos_url": "https://api.github.com/users/Aaron1011/repos", "events_url": "https://api.github.com/users/Aaron1011/events{/privacy}", "received_events_url": "https://api.github.com/users/Aaron1011/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "6b47cbaee6ae009937bf796da9fb5ae662d5c9f1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6b47cbaee6ae009937bf796da9fb5ae662d5c9f1", "html_url": "https://github.com/rust-lang/rust/commit/6b47cbaee6ae009937bf796da9fb5ae662d5c9f1"}], "stats": {"total": 17, "additions": 15, "deletions": 2}, "files": [{"sha": "a6dc4fc851fe4670f9160a3b27827436bd1971e9", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 15, "deletions": 2, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/a59b7eabe691695c66a9d3b95735121af1ba0166/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a59b7eabe691695c66a9d3b95735121af1ba0166/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=a59b7eabe691695c66a9d3b95735121af1ba0166", "patch": "@@ -893,7 +893,7 @@ fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: &T) -> T where T: TypeFol\n             match ty.kind {\n                 ty::Opaque(def_id, substs) => {\n                     debug!(\"fixup_opaque_types: found type {:?}\", ty);\n-                    if ty.has_infer_types() {\n+                    if ty.needs_infer() {\n                         let new_substs = InternalSubsts::for_item(self.tcx, def_id, |param, _| {\n                             let old_param = substs[param.index as usize];\n                             match old_param.unpack() {\n@@ -905,7 +905,20 @@ fn fixup_opaque_types<'tcx, T>(tcx: TyCtxt<'tcx>, val: &T) -> T where T: TypeFol\n                                         old_param.fold_with(self)\n                                     }\n                                 },\n-                                _ => old_param\n+                                GenericArgKind::Const(old_const) => {\n+                                    if let ConstValue::Infer(_) = old_const.val {\n+                                        self.tcx.mk_param_from_def(param)\n+                                    } else {\n+                                        old_param.fold_with(self)\n+                                    }\n+                                }\n+                                GenericArgKind::Lifetime(old_region) => {\n+                                    if let RegionKind::ReVar(_) = old_region {\n+                                        self.tcx.mk_param_from_def(param)\n+                                    } else {\n+                                        old_param.fold_with(self)\n+                                    }\n+                                }\n                             }\n                         });\n                         let new_ty = self.tcx.mk_opaque(def_id, new_substs);"}]}