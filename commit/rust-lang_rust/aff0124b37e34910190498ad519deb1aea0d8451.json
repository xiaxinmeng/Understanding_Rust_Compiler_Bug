{"sha": "aff0124b37e34910190498ad519deb1aea0d8451", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFmZjAxMjRiMzdlMzQ5MTAxOTA0OThhZDUxOWRlYjFhZWEwZDg0NTE=", "commit": {"author": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-23T13:01:36Z"}, "committer": {"name": "Bernardo", "email": "berublan@gmail.com", "date": "2018-12-25T19:03:14Z"}, "message": "add line_index proptest", "tree": {"sha": "89a98d0f4212684c076d2c535e74d9683dd03e2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/89a98d0f4212684c076d2c535e74d9683dd03e2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aff0124b37e34910190498ad519deb1aea0d8451", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aff0124b37e34910190498ad519deb1aea0d8451", "html_url": "https://github.com/rust-lang/rust/commit/aff0124b37e34910190498ad519deb1aea0d8451", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aff0124b37e34910190498ad519deb1aea0d8451/comments", "author": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "vemoo", "id": 4866051, "node_id": "MDQ6VXNlcjQ4NjYwNTE=", "avatar_url": "https://avatars.githubusercontent.com/u/4866051?v=4", "gravatar_id": "", "url": "https://api.github.com/users/vemoo", "html_url": "https://github.com/vemoo", "followers_url": "https://api.github.com/users/vemoo/followers", "following_url": "https://api.github.com/users/vemoo/following{/other_user}", "gists_url": "https://api.github.com/users/vemoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/vemoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/vemoo/subscriptions", "organizations_url": "https://api.github.com/users/vemoo/orgs", "repos_url": "https://api.github.com/users/vemoo/repos", "events_url": "https://api.github.com/users/vemoo/events{/privacy}", "received_events_url": "https://api.github.com/users/vemoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c886b72dab918d6f4d3be025135f769bc429cc79", "url": "https://api.github.com/repos/rust-lang/rust/commits/c886b72dab918d6f4d3be025135f769bc429cc79", "html_url": "https://github.com/rust-lang/rust/commit/c886b72dab918d6f4d3be025135f769bc429cc79"}], "stats": {"total": 238, "additions": 132, "deletions": 106}, "files": [{"sha": "5304fbcf6f35fda66bbc33797eba9d280e194e2f", "filename": "crates/ra_editor/src/line_index.rs", "status": "modified", "additions": 130, "deletions": 104, "changes": 234, "blob_url": "https://github.com/rust-lang/rust/blob/aff0124b37e34910190498ad519deb1aea0d8451/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff0124b37e34910190498ad519deb1aea0d8451/crates%2Fra_editor%2Fsrc%2Fline_index.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index.rs?ref=aff0124b37e34910190498ad519deb1aea0d8451", "patch": "@@ -128,7 +128,8 @@ impl LineIndex {\n     }\n }\n \n-// for bench and test\n+/// Simple reference implementation to use in proptests\n+/// and benchmarks as baseline\n pub fn to_line_col(text: &str, offset: TextUnit) -> LineCol {\n     let mut res = LineCol {\n         line: 0,\n@@ -150,111 +151,135 @@ pub fn to_line_col(text: &str, offset: TextUnit) -> LineCol {\n     res\n }\n \n-#[test]\n-fn test_line_index() {\n-    let text = \"hello\\nworld\";\n-    let index = LineIndex::new(text);\n-    assert_eq!(\n-        index.line_col(0.into()),\n-        LineCol {\n-            line: 0,\n-            col_utf16: 0\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(1.into()),\n-        LineCol {\n-            line: 0,\n-            col_utf16: 1\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(5.into()),\n-        LineCol {\n-            line: 0,\n-            col_utf16: 5\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(6.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 0\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(7.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 1\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(8.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 2\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(10.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 4\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(11.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 5\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(12.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 6\n-        }\n-    );\n+#[cfg(test)]\n+mod test_line_index {\n+    use super::*;\n+    use proptest::{prelude::*, proptest, proptest_helper};\n+    use ra_text_edit::test_utils::{arb_text, arb_offset};\n \n-    let text = \"\\nhello\\nworld\";\n-    let index = LineIndex::new(text);\n-    assert_eq!(\n-        index.line_col(0.into()),\n-        LineCol {\n-            line: 0,\n-            col_utf16: 0\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(1.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 0\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(2.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 1\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(6.into()),\n-        LineCol {\n-            line: 1,\n-            col_utf16: 5\n-        }\n-    );\n-    assert_eq!(\n-        index.line_col(7.into()),\n-        LineCol {\n-            line: 2,\n-            col_utf16: 0\n+    #[test]\n+    fn test_line_index() {\n+        let text = \"hello\\nworld\";\n+        let index = LineIndex::new(text);\n+        assert_eq!(\n+            index.line_col(0.into()),\n+            LineCol {\n+                line: 0,\n+                col_utf16: 0\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(1.into()),\n+            LineCol {\n+                line: 0,\n+                col_utf16: 1\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(5.into()),\n+            LineCol {\n+                line: 0,\n+                col_utf16: 5\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(6.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 0\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(7.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 1\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(8.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 2\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(10.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 4\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(11.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 5\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(12.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 6\n+            }\n+        );\n+\n+        let text = \"\\nhello\\nworld\";\n+        let index = LineIndex::new(text);\n+        assert_eq!(\n+            index.line_col(0.into()),\n+            LineCol {\n+                line: 0,\n+                col_utf16: 0\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(1.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 0\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(2.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 1\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(6.into()),\n+            LineCol {\n+                line: 1,\n+                col_utf16: 5\n+            }\n+        );\n+        assert_eq!(\n+            index.line_col(7.into()),\n+            LineCol {\n+                line: 2,\n+                col_utf16: 0\n+            }\n+        );\n+    }\n+\n+    fn arb_text_with_offset() -> BoxedStrategy<(TextUnit, String)> {\n+        arb_text()\n+            .prop_flat_map(|text| (arb_offset(&text), Just(text)))\n+            .boxed()\n+    }\n+\n+    proptest! {\n+        #[test]\n+        fn test_line_index_proptest((offset, text) in arb_text_with_offset()) {\n+            let expected = to_line_col(&text, offset);\n+            let line_index = LineIndex::new(&text);\n+            let actual = line_index.line_col(offset);\n+\n+            assert_eq!(actual, expected);\n         }\n-    );\n+    }\n }\n \n #[cfg(test)]\n@@ -349,4 +374,5 @@ const C: char = \\\"\u30e1 \u30e1\\\";\n \n         assert_eq!(col_index.utf16_to_utf8_col(2, 15), TextUnit::from_usize(15));\n     }\n+\n }"}, {"sha": "a0bb9a6ddc977b7d8d9bd8db895a452138d2386e", "filename": "crates/ra_editor/src/line_index_utils.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aff0124b37e34910190498ad519deb1aea0d8451/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aff0124b37e34910190498ad519deb1aea0d8451/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_editor%2Fsrc%2Fline_index_utils.rs?ref=aff0124b37e34910190498ad519deb1aea0d8451", "patch": "@@ -325,7 +325,7 @@ pub fn translate_offset_with_edit(\n     res.to_line_col(offset)\n }\n \n-// for bench\n+/// Simplest implementation to use as reference in proptest and benchmarks\n pub fn translate_after_edit(\n     pre_edit_text: &str,\n     offset: TextUnit,\n@@ -352,8 +352,8 @@ fn edit_text(pre_edit_text: &str, mut edits: Vec<AtomTextEdit>) -> String {\n \n #[cfg(test)]\n mod test {\n-    use proptest::{prelude::*, proptest, proptest_helper};\n     use super::*;\n+    use proptest::{prelude::*, proptest, proptest_helper};\n     use ra_text_edit::test_utils::{arb_text, arb_offset, arb_edits};\n \n     #[derive(Debug)]"}]}