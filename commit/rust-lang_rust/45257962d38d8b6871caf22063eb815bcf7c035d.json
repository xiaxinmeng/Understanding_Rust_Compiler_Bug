{"sha": "45257962d38d8b6871caf22063eb815bcf7c035d", "node_id": "C_kwDOAAsO6NoAKDQ1MjU3OTYyZDM4ZDhiNjg3MWNhZjIyMDYzZWI4MTViY2Y3YzAzNWQ", "commit": {"author": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-10-05T07:58:29Z"}, "committer": {"name": "Takayuki Maeda", "email": "takoyaki0316@gmail.com", "date": "2022-10-05T07:58:29Z"}, "message": "stop suggesting adding generic args for turbofish", "tree": {"sha": "0ad996750dc26737e419ccb2db15b6ae5205e2c2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0ad996750dc26737e419ccb2db15b6ae5205e2c2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45257962d38d8b6871caf22063eb815bcf7c035d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45257962d38d8b6871caf22063eb815bcf7c035d", "html_url": "https://github.com/rust-lang/rust/commit/45257962d38d8b6871caf22063eb815bcf7c035d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45257962d38d8b6871caf22063eb815bcf7c035d/comments", "author": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "committer": {"login": "TaKO8Ki", "id": 41065217, "node_id": "MDQ6VXNlcjQxMDY1MjE3", "avatar_url": "https://avatars.githubusercontent.com/u/41065217?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TaKO8Ki", "html_url": "https://github.com/TaKO8Ki", "followers_url": "https://api.github.com/users/TaKO8Ki/followers", "following_url": "https://api.github.com/users/TaKO8Ki/following{/other_user}", "gists_url": "https://api.github.com/users/TaKO8Ki/gists{/gist_id}", "starred_url": "https://api.github.com/users/TaKO8Ki/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TaKO8Ki/subscriptions", "organizations_url": "https://api.github.com/users/TaKO8Ki/orgs", "repos_url": "https://api.github.com/users/TaKO8Ki/repos", "events_url": "https://api.github.com/users/TaKO8Ki/events{/privacy}", "received_events_url": "https://api.github.com/users/TaKO8Ki/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8613f792c11d6d348b15eee79da561323fa0199", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8613f792c11d6d348b15eee79da561323fa0199", "html_url": "https://github.com/rust-lang/rust/commit/d8613f792c11d6d348b15eee79da561323fa0199"}], "stats": {"total": 79, "additions": 52, "deletions": 27}, "files": [{"sha": "2775d14a847808c7767b97cfefc52a0f24d006dd", "filename": "compiler/rustc_infer/src/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 32, "deletions": 8, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -435,6 +435,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                 generics_def_id,\n                 def_id: _,\n                 generic_args,\n+                have_turbofish,\n             } => {\n                 let generics = self.tcx.generics_of(generics_def_id);\n                 let is_type = matches!(arg.unpack(), GenericArgKind::Type(_));\n@@ -482,11 +483,13 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     .unwrap()\n                     .into_buffer();\n \n-                infer_subdiags.push(SourceKindSubdiag::GenericSuggestion {\n-                    span: insert_span,\n-                    arg_count: generic_args.len(),\n-                    args,\n-                });\n+                if !have_turbofish {\n+                    infer_subdiags.push(SourceKindSubdiag::GenericSuggestion {\n+                        span: insert_span,\n+                        arg_count: generic_args.len(),\n+                        args,\n+                    });\n+                }\n             }\n             InferSourceKind::FullyQualifiedMethodCall { receiver, successor, substs, def_id } => {\n                 let printer = fmt_printer(self, Namespace::ValueNS);\n@@ -616,6 +619,7 @@ enum InferSourceKind<'tcx> {\n         generics_def_id: DefId,\n         def_id: DefId,\n         generic_args: &'tcx [GenericArg<'tcx>],\n+        have_turbofish: bool,\n     },\n     FullyQualifiedMethodCall {\n         receiver: &'tcx Expr<'tcx>,\n@@ -676,6 +680,7 @@ struct InsertableGenericArgs<'tcx> {\n     substs: SubstsRef<'tcx>,\n     generics_def_id: DefId,\n     def_id: DefId,\n+    have_turbofish: bool,\n }\n \n /// A visitor which searches for the \"best\" spot to use in the inference error.\n@@ -916,6 +921,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                             substs,\n                             generics_def_id: def_id,\n                             def_id,\n+                            have_turbofish: false,\n                         }\n                     };\n                     return Box::new(insertable.into_iter());\n@@ -933,6 +939,9 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n         substs: SubstsRef<'tcx>,\n     ) -> impl Iterator<Item = InsertableGenericArgs<'tcx>> + 'a {\n         let tcx = self.infcx.tcx;\n+        let have_turbofish = path.segments.iter().any(|segment| {\n+            segment.args.map_or(false, |args| args.args.iter().any(|arg| arg.is_ty_or_const()))\n+        });\n         // The last segment of a path often has `Res::Err` and the\n         // correct `Res` is the one of the whole path.\n         //\n@@ -942,7 +951,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n             let generics_def_id = tcx.res_generics_def_id(path.res)?;\n             let generics = tcx.generics_of(generics_def_id);\n             if generics.has_impl_trait() {\n-                None?\n+                None?;\n             }\n             let insert_span =\n                 path.segments.last().unwrap().ident.span.shrink_to_hi().with_hi(path.span.hi());\n@@ -951,6 +960,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                 substs,\n                 generics_def_id,\n                 def_id: path.res.def_id(),\n+                have_turbofish,\n             }\n         };\n \n@@ -970,6 +980,7 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     substs,\n                     generics_def_id,\n                     def_id: res.def_id(),\n+                    have_turbofish,\n                 })\n             })\n             .chain(last_segment_using_path_data)\n@@ -998,7 +1009,13 @@ impl<'a, 'tcx> FindInferSourceVisitor<'a, 'tcx> {\n                     }\n                     let span = tcx.hir().span(segment.hir_id);\n                     let insert_span = segment.ident.span.shrink_to_hi().with_hi(span.hi());\n-                    InsertableGenericArgs { insert_span, substs, generics_def_id: def_id, def_id }\n+                    InsertableGenericArgs {\n+                        insert_span,\n+                        substs,\n+                        generics_def_id: def_id,\n+                        def_id,\n+                        have_turbofish: false,\n+                    }\n                 };\n \n                 let parent_def_id = generics.parent.unwrap();\n@@ -1121,7 +1138,13 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n \n         for args in self.expr_inferred_subst_iter(expr) {\n             debug!(?args);\n-            let InsertableGenericArgs { insert_span, substs, generics_def_id, def_id } = args;\n+            let InsertableGenericArgs {\n+                insert_span,\n+                substs,\n+                generics_def_id,\n+                def_id,\n+                have_turbofish,\n+            } = args;\n             let generics = tcx.generics_of(generics_def_id);\n             if let Some(argument_index) = generics\n                 .own_substs(substs)\n@@ -1144,6 +1167,7 @@ impl<'a, 'tcx> Visitor<'tcx> for FindInferSourceVisitor<'a, 'tcx> {\n                         generics_def_id,\n                         def_id,\n                         generic_args,\n+                        have_turbofish,\n                     },\n                 });\n             }"}, {"sha": "aa32969950d6bd677b5f308e14e844f740f2f4f1", "filename": "src/test/ui/inference/need_type_info/concrete-impl.stderr", "status": "modified", "additions": 0, "deletions": 9, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fconcrete-impl.stderr?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -3,11 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     <Struct as Ambiguous<_>>::method();\n    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `Self` declared on the trait `Ambiguous`\n-   |\n-help: consider specifying the generic argument\n-   |\n-LL |     <Struct as Ambiguous::<_>>::method();\n-   |                         ~~~~~\n \n error[E0283]: type annotations needed\n   --> $DIR/concrete-impl.rs:13:5\n@@ -22,10 +17,6 @@ LL | impl Ambiguous<One> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n LL | impl Ambiguous<Two> for Struct {}\n    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n-help: consider specifying the generic argument\n-   |\n-LL |     <Struct as Ambiguous::<_>>::method();\n-   |                         ~~~~~\n \n error: aborting due to 2 previous errors\n "}, {"sha": "3084f6eac67ab7e4e9858fcc220be646b86f4377", "filename": "src/test/ui/inference/need_type_info/do-not-suggest-generic-arguments-for-turbofish.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.rs?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -0,0 +1,11 @@\n+enum OhNo<T, U> {\n+    A(T),\n+    B(U),\n+    C,\n+}\n+\n+fn uwu() {\n+    OhNo::C::<u32, _>; //~ ERROR type annotations needed\n+}\n+\n+fn main() {}"}, {"sha": "2ad35ab039f4c8062b60d4eebaa09763a077615e", "filename": "src/test/ui/inference/need_type_info/do-not-suggest-generic-arguments-for-turbofish.stderr", "status": "added", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fneed_type_info%2Fdo-not-suggest-generic-arguments-for-turbofish.stderr?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -0,0 +1,9 @@\n+error[E0282]: type annotations needed\n+  --> $DIR/do-not-suggest-generic-arguments-for-turbofish.rs:8:5\n+   |\n+LL |     OhNo::C::<u32, _>;\n+   |     ^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `U` declared on the enum `OhNo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0282`."}, {"sha": "72102f460e0bd37cef0dddc144ce6368d19f2714", "filename": "src/test/ui/issues/issue-24013.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-24013.stderr?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -3,11 +3,6 @@ error[E0282]: type annotations needed\n    |\n LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n    |             ^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `swap`\n-   |\n-help: consider specifying the generic argument\n-   |\n-LL |     unsafe {swap::<&mut _>(transmute(&a), transmute(&b))};\n-   |                 ~~~~~~~~~~\n \n error: aborting due to previous error\n "}, {"sha": "2bd24f08c1e51d0efb6cb4c272b6dc12d1e19c50", "filename": "src/test/ui/issues/issue-47486.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/45257962d38d8b6871caf22063eb815bcf7c035d/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-47486.stderr?ref=45257962d38d8b6871caf22063eb815bcf7c035d", "patch": "@@ -9,11 +9,6 @@ error[E0282]: type annotations needed\n    |\n LL |     [0u8; std::mem::size_of::<_>()];\n    |           ^^^^^^^^^^^^^^^^^^^^^^ cannot infer type of the type parameter `T` declared on the function `size_of`\n-   |\n-help: consider specifying the generic argument\n-   |\n-LL |     [0u8; std::mem::size_of::<_>()];\n-   |                            ~~~~~\n \n error: aborting due to 2 previous errors\n "}]}