{"sha": "f4726c0ad852c788d4c653163cefd192d9e0d0cc", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0NzI2YzBhZDg1MmM3ODhkNGM2NTMxNjNjZWZkMTkyZDllMGQwY2M=", "commit": {"author": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-06-07T16:42:46Z"}, "committer": {"name": "llogiq", "email": "bogusandre@gmail.com", "date": "2016-06-07T16:42:46Z"}, "message": "Merge pull request #983 from Manishearth/fix-tests\n\nFix wrong tests and improve some other", "tree": {"sha": "535ba0c925b85835c96db59e2d2f28c50788992d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/535ba0c925b85835c96db59e2d2f28c50788992d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4726c0ad852c788d4c653163cefd192d9e0d0cc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4726c0ad852c788d4c653163cefd192d9e0d0cc", "html_url": "https://github.com/rust-lang/rust/commit/f4726c0ad852c788d4c653163cefd192d9e0d0cc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4726c0ad852c788d4c653163cefd192d9e0d0cc/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1aab0e6729c82c100efc9b63e8791e26e68187f0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1aab0e6729c82c100efc9b63e8791e26e68187f0", "html_url": "https://github.com/rust-lang/rust/commit/1aab0e6729c82c100efc9b63e8791e26e68187f0"}, {"sha": "35a22bc3f40e1f3c1c73ecf1a960cf0c71374e75", "url": "https://api.github.com/repos/rust-lang/rust/commits/35a22bc3f40e1f3c1c73ecf1a960cf0c71374e75", "html_url": "https://github.com/rust-lang/rust/commit/35a22bc3f40e1f3c1c73ecf1a960cf0c71374e75"}], "stats": {"total": 240, "additions": 176, "deletions": 64}, "files": [{"sha": "0bfd05a0de470824a98b09e9ee8a67cd31c1c15a", "filename": "Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/Cargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/Cargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.toml?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -35,7 +35,7 @@ clippy_lints = { version = \"0.0.74\", path = \"clippy_lints\" }\n rustc-serialize = \"0.3\"\n \n [dev-dependencies]\n-compiletest_rs = \"0.1.0\"\n+compiletest_rs = \"0.2.0\"\n lazy_static = \"0.1.15\"\n regex = \"0.1.56\"\n "}, {"sha": "5dcea35e5a711580724ac6eebf6e53fb9da543ee", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -290,11 +290,15 @@ impl LateLintPass for LoopsPass {\n                        !is_iterator_used_after_while_let(cx, iter_expr) {\n                         let iterator = snippet(cx, method_args[0].span, \"_\");\n                         let loop_var = snippet(cx, pat_args[0].span, \"_\");\n-                        span_help_and_lint(cx,\n+                        span_lint_and_then(cx,\n                                            WHILE_LET_ON_ITERATOR,\n                                            expr.span,\n                                            \"this loop could be written as a `for` loop\",\n-                                           &format!(\"try\\nfor {} in {} {{...}}\", loop_var, iterator));\n+                                           |db| {\n+                        db.span_suggestion(expr.span,\n+                                           \"try\",\n+                                           format!(\"for {} in {} {{ .. }}\", loop_var, iterator));\n+                        });\n                     }\n                 }\n             }\n@@ -446,11 +450,11 @@ fn check_for_loop_reverse_range(cx: &LateContext, arg: &Expr, expr: &Expr) {\n                                        expr.span,\n                                        \"this range is empty so this for loop will never run\",\n                                        |db| {\n-                                           db.span_suggestion(expr.span,\n+                                           db.span_suggestion(arg.span,\n                                                               \"consider using the following if \\\n                                                                you are attempting to iterate \\\n                                                                over this range in reverse\",\n-                                                              format!(\"({}..{}).rev()` \", end_snippet, start_snippet));\n+                                                              format!(\"({}..{}).rev()\", end_snippet, start_snippet));\n                                        });\n                 } else if eq && limits != ast::RangeLimits::Closed {\n                     // if they are equal, it's also problematic - this loop\n@@ -598,7 +602,7 @@ fn check_for_loop_over_map_kv(cx: &LateContext, pat: &Pat, arg: &Expr, body: &Ex\n                                    |db| {\n                                        db.span_suggestion(expr.span,\n                                                           \"use the corresponding method\",\n-                                                          format!(\"for {} in {}.{}() {{...}}\",\n+                                                          format!(\"for {} in {}.{}() {{ .. }}\",\n                                                                   snippet(cx, *pat_span, \"..\"),\n                                                                   snippet(cx, arg_span, \"..\"),\n                                                                   kind));"}, {"sha": "627cd888aac1a2880a7097dbc663acda9549fc39", "filename": "tests/compile-fail/absurd-extreme-comparisons.rs", "status": "modified", "additions": 42, "deletions": 14, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fabsurd-extreme-comparisons.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -8,15 +8,33 @@ fn main() {\n \n     let u: u32 = 42;\n \n-    u <= 0; //~ERROR this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n-    u <= Z; //~ERROR this comparison involving\n-    u < Z; //~ERROR this comparison involving\n-    Z >= u; //~ERROR this comparison involving\n-    Z > u; //~ERROR this comparison involving\n-    u > std::u32::MAX; //~ERROR this comparison involving\n-    u >= std::u32::MAX; //~ERROR this comparison involving\n-    std::u32::MAX < u; //~ERROR this comparison involving\n-    std::u32::MAX <= u; //~ERROR this comparison involving\n+    u <= 0;\n+    //~^ ERROR this comparison involving the minimum or maximum element for this type contains a case that is always true or always false\n+    //~| HELP using u == 0 instead\n+    u <= Z;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using u == Z instead\n+    u < Z;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    Z >= u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using Z == u instead\n+    Z > u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    u > std::u32::MAX;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    u >= std::u32::MAX;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using u == std::u32::MAX instead\n+    std::u32::MAX < u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    std::u32::MAX <= u;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using std::u32::MAX == u instead\n \n     1-1 > u;\n         //~^ ERROR this comparison involving\n@@ -29,13 +47,23 @@ fn main() {\n         //~| HELP because 12 - 2*6 is the minimum value for this type, the case where the two sides are not equal never occurs, consider using u == 12 - 2*6 instead\n \n     let i: i8 = 0;\n-    i < -127 - 1; //~ERROR this comparison involving\n-    std::i8::MAX >= i; //~ERROR this comparison involving\n-    3-7 < std::i32::MIN; //~ERROR this comparison involving\n+    i < -127 - 1;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n+    std::i8::MAX >= i;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always true\n+    3-7 < std::i32::MIN;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n \n     let b = false;\n-    b >= true; //~ERROR this comparison involving\n-    false > b; //~ERROR this comparison involving\n+    b >= true;\n+    //~^ ERROR this comparison involving\n+    //~| HELP using b == true instead\n+    false > b;\n+    //~^ ERROR this comparison involving\n+    //~| HELP comparison is always false\n \n     u > 0; // ok\n "}, {"sha": "193edebf3c4ffb8f37f5067a01120404bd43d9d1", "filename": "tests/compile-fail/booleans.rs", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fbooleans.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -52,29 +52,37 @@ fn equality_stuff() {\n     let c: i32 = unimplemented!();\n     let d: i32 = unimplemented!();\n     let e: i32 = unimplemented!();\n-    let _ = a == b && a != b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a == b && a != b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n-    let _ = a == b && c == 5 && a == b; //~ ERROR this boolean expression can be simplified\n+    let _ = a == b && c == 5 && a == b;\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = a == b && c == 5;\n-    let _ = a == b && c == 5 && b == a; //~ ERROR this boolean expression can be simplified\n+    //~| HELP try\n+    //~| SUGGESTION let _ = !(c != 5 || a != b);\n+    let _ = a == b && c == 5 && b == a;\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = a == b && c == 5;\n     //~| HELP try\n     //~| SUGGESTION let _ = !(c != 5 || a != b);\n-    let _ = a < b && a >= b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a < b && a >= b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n-    let _ = a > b && a <= b; //~ ERROR this boolean expression contains a logic bug\n+    let _ = a > b && a <= b;\n+    //~^ ERROR this boolean expression contains a logic bug\n     //~| HELP this expression can be optimized out\n     //~| HELP it would look like the following\n     //~| SUGGESTION let _ = false;\n     let _ = a > b && a == b;\n \n-    let _ = a != b || !(a != b || c == d); //~ ERROR this boolean expression can be simplified\n+    let _ = a != b || !(a != b || c == d);\n+    //~^ ERROR this boolean expression can be simplified\n     //~| HELP try\n     //~| SUGGESTION let _ = c != d || a != b;\n     //~| HELP try"}, {"sha": "34c55499612007cfcf7c2076fadd065a8502cc77", "filename": "tests/compile-fail/collapsible_if.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fcollapsible_if.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fcollapsible_if.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fcollapsible_if.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -5,13 +5,19 @@\n fn main() {\n     let x = \"hello\";\n     let y = \"world\";\n-    if x == \"hello\" { //~ERROR this if statement can be collapsed\n+    if x == \"hello\" {\n+    //~^ ERROR this if statement can be collapsed\n+    //~| HELP try\n+    //~| SUGGESTION if x == \"hello\" && y == \"world\" {\n         if y == \"world\" {\n             println!(\"Hello world!\");\n         }\n     }\n \n-    if x == \"hello\" || x == \"world\" { //~ERROR this if statement can be collapsed\n+    if x == \"hello\" || x == \"world\" {\n+    //~^ ERROR this if statement can be collapsed\n+    //~| HELP try\n+    //~| SUGGESTION if (x == \"hello\" || x == \"world\") && (y == \"world\" || y == \"hello\") {\n         if y == \"world\" || y == \"hello\" {\n             println!(\"Hello world!\");\n         }"}, {"sha": "d35beb617e05cf0fb0e21e06e47f0104f7387617", "filename": "tests/compile-fail/for_loop.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Ffor_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Ffor_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Ffor_loop.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -200,11 +200,17 @@ fn main() {\n     }\n \n     // testing that the empty range lint folds constants\n-    for i in 10..5+4 { //~ERROR this range is empty so this for loop will never run\n+    for i in 10..5+4 {\n+    //~^ ERROR this range is empty so this for loop will never run\n+    //~| HELP if you are attempting to iterate over this range in reverse\n+    //~| SUGGESTION for i in (5+4..10).rev() {\n         println!(\"{}\", i);\n     }\n \n-    for i in (5+2)..(3-1) { //~ERROR this range is empty so this for loop will never run\n+    for i in (5+2)..(3-1) {\n+    //~^ ERROR this range is empty so this for loop will never run\n+    //~| HELP if you are attempting to iterate over this range in reverse\n+    //~| SUGGESTION for i in ((3-1)..(5+2)).rev() {\n         println!(\"{}\", i);\n     }\n "}, {"sha": "2436f64d216fba9563d4f91c681bbfa87683bd2e", "filename": "tests/compile-fail/formatting.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fformatting.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -11,24 +11,32 @@ fn foo() -> bool { true }\n fn main() {\n     // weird `else if` formatting:\n     if foo() {\n-    } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+    } if foo() {\n+    //~^ ERROR this looks like an `else if` but the `else` is missing\n+    //~| NOTE add the missing `else` or\n     }\n \n     let _ = {\n         if foo() {\n-        } if foo() { //~ERROR this looks like an `else if` but the `else` is missing\n+        } if foo() {\n+        //~^ ERROR this looks like an `else if` but the `else` is missing\n+        //~| NOTE add the missing `else` or\n         }\n         else {\n         }\n     };\n \n     if foo() {\n-    } else //~ERROR this is an `else if` but the formatting might hide it\n+    } else\n+    //~^ ERROR this is an `else if` but the formatting might hide it\n+    //~| NOTE remove the `else` or\n     if foo() { // the span of the above error should continue here\n     }\n \n     if foo() {\n-    } //~ERROR this is an `else if` but the formatting might hide it\n+    }\n+    //~^ ERROR this is an `else if` but the formatting might hide it\n+    //~| NOTE remove the `else` or\n     else\n     if foo() { // the span of the above error should continue here\n     }"}, {"sha": "477786813dbaf19dfda8d2a8a877d355f931deca", "filename": "tests/compile-fail/let_return.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Flet_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Flet_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Flet_return.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -6,13 +6,13 @@\n \n fn test() -> i32 {\n     let _y = 0; // no warning\n-    let x = 5;   //~NOTE\n+    let x = 5;   //~NOTE this expression can be directly returned\n     x            //~ERROR returning the result of a let binding\n }\n \n fn test_inner() -> i32 {\n     if true {\n-        let x = 5;\n+        let x = 5;   //~NOTE this expression can be directly returned\n         x            //~ERROR returning the result of a let binding\n     } else {\n         0"}, {"sha": "650b5917fdcb82581dccb4872500e7a91c9c26f0", "filename": "tests/compile-fail/matches.rs", "status": "modified", "additions": 21, "deletions": 6, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmatches.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -100,28 +100,43 @@ fn single_match_know_enum() {\n fn match_bool() {\n     let test: bool = true;\n \n-    match test {  //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if test { 0 } else { 42 };\n         true => 0,\n         false => 42,\n     };\n \n     let option = 1;\n-    match option == 1 {  //~ ERROR you seem to be trying to match on a boolean expression\n+    match option == 1 {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if option == 1 { 1 } else { 0 };\n         true => 1,\n         false => 0,\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n         true => (),\n         false => { println!(\"Noooo!\"); }\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~^^ SUGGESTION if !test { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         _ => (),\n     };\n \n-    match test { //~ ERROR you seem to be trying to match on a boolean expression\n+    match test {\n+    //~^ ERROR you seem to be trying to match on a boolean expression\n+    //~| HELP try\n+    //~| SUGGESTION if test { println!(\"Yes!\"); } else { println!(\"Noooo!\"); };\n         false => { println!(\"Noooo!\"); }\n         true => { println!(\"Yes!\"); }\n     };\n@@ -216,7 +231,7 @@ fn overlapping() {\n         11 ... 50 => println!(\"0 ... 10\"),\n         _ => (),\n     }\n-    \n+\n     if let None = Some(42) {\n         // nothing\n     } else if let None = Some(42) {"}, {"sha": "89267462f5dfcac76cd9093af5cdaf50b4237627", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -356,13 +356,19 @@ fn starts_with() {\n \n fn use_extend_from_slice() {\n     let mut v : Vec<&'static str> = vec![];\n-    v.extend(&[\"Hello\", \"World\"]); //~ERROR use of `extend`\n+    v.extend(&[\"Hello\", \"World\"]);\n+    //~^ ERROR use of `extend`\n+    //~| HELP try this\n+    //~| SUGGESTION v.extend_from_slice(&[\"Hello\", \"World\"]);\n     v.extend(&vec![\"Some\", \"more\"]);\n-    //~^ERROR use of `extend`\n+    //~^ ERROR use of `extend`\n     //~| HELP try this\n     //~| SUGGESTION v.extend_from_slice(&vec![\"Some\", \"more\"]);\n \n-    v.extend(vec![\"And\", \"even\", \"more\"].iter()); //~ERROR use of `extend`\n+    v.extend(vec![\"And\", \"even\", \"more\"].iter());\n+    //~^ ERROR use of `extend`\n+    //~| HELP try this\n+    //FIXME: the suggestion if broken because of the macro\n     let o : Option<&'static str> = None;\n     v.extend(o);\n     v.extend(Some(\"Bye\"));"}, {"sha": "21c0dcee5115d939aaac47829a9309503db0e571", "filename": "tests/compile-fail/mut_mut.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmut_mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fmut_mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmut_mut.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -38,5 +38,6 @@ fn main() {\n         ***y + **x;\n     }\n \n-    let mut z = mut_ptr!(&mut 3u32); //~ NOTE in this expansion of mut_ptr!\n+    let mut z = mut_ptr!(&mut 3u32);\n+    //~^ NOTE in this expansion of mut_ptr!\n }"}, {"sha": "88099297b98ab661ea9f496832883c88eb9d0e65", "filename": "tests/compile-fail/needless_borrow.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fneedless_borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fneedless_borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_borrow.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -10,7 +10,7 @@ fn x(y: &i32) -> i32 {\n fn main() {\n     let a = 5;\n     let b = x(&a);\n-    let c = x(&&a); //~ ERROR: needless_borrow\n+    let c = x(&&a); //~ ERROR: this expression borrows a reference that is immediately dereferenced by the compiler\n     let s = &String::from(\"hi\");\n     let s_ident = f(&s); // should not error, because `&String` implements Copy, but `String` does not\n     let g_val = g(&Vec::new()); // should not error, because `&Vec<T>` derefs to `&[T]`"}, {"sha": "80fed2818ef54505846ece77a7c50aee51d72772", "filename": "tests/compile-fail/needless_return.rs", "status": "modified", "additions": 20, "deletions": 5, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fneedless_return.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fneedless_return.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fneedless_return.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -23,26 +23,41 @@ fn test_no_semicolon() -> bool {\n \n fn test_if_block() -> bool {\n     if true {\n-        return true;       //~ERROR unneeded return statement\n+        return true;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION true\n     } else {\n-        return false;      //~ERROR unneeded return statement\n+        return false;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION false\n     }\n }\n \n fn test_match(x: bool) -> bool {\n     match x {\n         true => {\n-            return false;  //~ERROR unneeded return statement\n+            return false;\n+            //~^ ERROR unneeded return statement\n+            //~| HELP remove `return` as shown\n+            //~| SUGGESTION false\n         }\n         false => {\n-            return true;   //~ERROR unneeded return statement\n+            return true;\n+            //~^ ERROR unneeded return statement\n+            //~| HELP remove `return` as shown\n+            //~| SUGGESTION true\n         }\n     }\n }\n \n fn test_closure() {\n     let _ = || {\n-        return true;       //~ERROR unneeded return statement\n+        return true;\n+        //~^ ERROR unneeded return statement\n+        //~| HELP remove `return` as shown\n+        //~| SUGGESTION true\n     };\n }\n "}, {"sha": "76c7fa54c019687e8545dd5552afb0642105299c", "filename": "tests/compile-fail/no_effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fno_effect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fno_effect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fno_effect.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -62,7 +62,7 @@ fn main() {\n     //~|SUGGESTION get_number();\n     Struct { ..get_struct() }; //~ERROR statement can be reduced\n     //~^HELP replace it with\n-    //~|SUGGESTION get_number();\n+    //~|SUGGESTION get_struct();\n     Enum::Tuple(get_number()); //~ERROR statement can be reduced\n     //~^HELP replace it with\n     //~|SUGGESTION get_number();\n@@ -74,7 +74,7 @@ fn main() {\n     //~|SUGGESTION 5;get_number();\n     *&get_number(); //~ERROR statement can be reduced\n     //~^HELP replace it with\n-    //~|SUGGESTION &get_number();\n+    //~|SUGGESTION get_number();\n     &get_number(); //~ERROR statement can be reduced\n     //~^HELP replace it with\n     //~|SUGGESTION get_number();"}, {"sha": "d08f8b891bc9907a7faf30561bec88a6e4570994", "filename": "tests/compile-fail/strings.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstrings.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -63,8 +63,11 @@ fn main() {\n     add_assign_only();\n     both();\n \n-    // the add is only caught for String\n+    // the add is only caught for `String`\n     let mut x = 1;\n-    x = x + 1; //~ WARN assign_op_pattern\n+    ; x = x + 1;\n+    //~^ WARN assign_op_pattern\n+    //~| HELP replace\n+    //~| SUGGESTION ; x += 1;\n     assert_eq!(2, x);\n }"}, {"sha": "c8ff2b610d01b8d6f2a7932cac58c2997a29329e", "filename": "tests/compile-fail/swap.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fswap.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -57,12 +57,12 @@ fn main() {\n     //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    let t = a;\n+    ; let t = a;\n     a = b;\n     b = t;\n     //~^^^ ERROR this looks like you are swapping `a` and `b` manually\n     //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut a, &mut b);\n+    //~| SUGGESTION ; std::mem::swap(&mut a, &mut b);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n     let mut c = Foo(42);\n@@ -74,11 +74,11 @@ fn main() {\n     //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n \n-    let t = c.0;\n+    ; let t = c.0;\n     c.0 = a;\n     a = t;\n     //~^^^ ERROR this looks like you are swapping `c.0` and `a` manually\n     //~| HELP try\n-    //~| SUGGESTION std::mem::swap(&mut c.0, &mut a);\n+    //~| SUGGESTION ; std::mem::swap(&mut c.0, &mut a);\n     //~| NOTE or maybe you should use `std::mem::replace`?\n }"}, {"sha": "4c1090876b40c007005b4ef0901a7b2cb57c1249", "filename": "tests/compile-fail/while_loop.rs", "status": "modified", "additions": 16, "deletions": 4, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fwhile_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4726c0ad852c788d4c653163cefd192d9e0d0cc/tests%2Fcompile-fail%2Fwhile_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fwhile_loop.rs?ref=f4726c0ad852c788d4c653163cefd192d9e0d0cc", "patch": "@@ -80,17 +80,26 @@ fn main() {\n     }\n \n     let mut iter = 1..20;\n-    while let Option::Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n+    while let Option::Some(x) = iter.next() {\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for x in iter {\n         println!(\"{}\", x);\n     }\n \n     let mut iter = 1..20;\n-    while let Some(x) = iter.next() { //~ERROR this loop could be written as a `for` loop\n+    while let Some(x) = iter.next() {\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for x in iter {\n         println!(\"{}\", x);\n     }\n \n     let mut iter = 1..20;\n-    while let Some(_) = iter.next() {} //~ERROR this loop could be written as a `for` loop\n+    while let Some(_) = iter.next() {}\n+    //~^ ERROR this loop could be written as a `for` loop\n+    //~| HELP try\n+    //~| SUGGESTION for _ in iter {\n \n     let mut iter = 1..20;\n     while let None = iter.next() {} // this is fine (if nonsensical)\n@@ -130,7 +139,10 @@ fn main() {\n // cause this function to trigger it\n fn no_panic<T>(slice: &[T]) {\n     let mut iter = slice.iter();\n-    loop { //~ERROR\n+    loop {\n+    //~^ ERROR\n+    //~| HELP try\n+    //~| SUGGESTION while let Some(ele) = iter.next() { .. }\n         let _ = match iter.next() {\n             Some(ele) => ele,\n             None => break"}]}