{"sha": "696084c764e5fe3a318eb75a180763fdeab194da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY5NjA4NGM3NjRlNWZlM2EzMThlYjc1YTE4MDc2M2ZkZWFiMTk0ZGE=", "commit": {"author": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-05-21T19:47:09Z"}, "committer": {"name": "Dylan MacKenzie", "email": "ecstaticmorse@gmail.com", "date": "2020-06-28T17:08:10Z"}, "message": "HIR const-checking", "tree": {"sha": "b095e8f54c5a78ad86e2f6369988977a667405ea", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b095e8f54c5a78ad86e2f6369988977a667405ea"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/696084c764e5fe3a318eb75a180763fdeab194da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/696084c764e5fe3a318eb75a180763fdeab194da", "html_url": "https://github.com/rust-lang/rust/commit/696084c764e5fe3a318eb75a180763fdeab194da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/696084c764e5fe3a318eb75a180763fdeab194da/comments", "author": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ecstatic-morse", "id": 29463364, "node_id": "MDQ6VXNlcjI5NDYzMzY0", "avatar_url": "https://avatars.githubusercontent.com/u/29463364?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ecstatic-morse", "html_url": "https://github.com/ecstatic-morse", "followers_url": "https://api.github.com/users/ecstatic-morse/followers", "following_url": "https://api.github.com/users/ecstatic-morse/following{/other_user}", "gists_url": "https://api.github.com/users/ecstatic-morse/gists{/gist_id}", "starred_url": "https://api.github.com/users/ecstatic-morse/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ecstatic-morse/subscriptions", "organizations_url": "https://api.github.com/users/ecstatic-morse/orgs", "repos_url": "https://api.github.com/users/ecstatic-morse/repos", "events_url": "https://api.github.com/users/ecstatic-morse/events{/privacy}", "received_events_url": "https://api.github.com/users/ecstatic-morse/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4c2383810bb783095e285ba56c5ecb3efe139dda", "url": "https://api.github.com/repos/rust-lang/rust/commits/4c2383810bb783095e285ba56c5ecb3efe139dda", "html_url": "https://github.com/rust-lang/rust/commit/4c2383810bb783095e285ba56c5ecb3efe139dda"}], "stats": {"total": 45, "additions": 10, "deletions": 35}, "files": [{"sha": "22a65b6730a8a8f16f22787628a28d5da0275643", "filename": "src/librustc_passes/check_const.rs", "status": "modified", "additions": 10, "deletions": 35, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/696084c764e5fe3a318eb75a180763fdeab194da/src%2Flibrustc_passes%2Fcheck_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/696084c764e5fe3a318eb75a180763fdeab194da/src%2Flibrustc_passes%2Fcheck_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fcheck_const.rs?ref=696084c764e5fe3a318eb75a180763fdeab194da", "patch": "@@ -23,15 +23,13 @@ use rustc_span::{sym, Span, Symbol};\n enum NonConstExpr {\n     Loop(hir::LoopSource),\n     Match(hir::MatchSource),\n-    OrPattern,\n }\n \n impl NonConstExpr {\n     fn name(self) -> String {\n         match self {\n             Self::Loop(src) => format!(\"`{}`\", src.name()),\n             Self::Match(src) => format!(\"`{}`\", src.name()),\n-            Self::OrPattern => \"or-pattern\".to_string(),\n         }\n     }\n \n@@ -40,22 +38,19 @@ impl NonConstExpr {\n         use hir::MatchSource::*;\n \n         let gates: &[_] = match self {\n-            Self::Match(Normal)\n-            | Self::Match(IfDesugar { .. })\n-            | Self::Match(IfLetDesugar { .. })\n-            | Self::OrPattern => &[sym::const_if_match],\n-\n-            Self::Loop(Loop) => &[sym::const_loop],\n+            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n+            // so they are not yet allowed with `#![feature(const_loop)]`.\n+            // Likewise, `?` desugars to a call to `Try::into_result`.\n+            Self::Loop(ForLoop) | Self::Match(ForLoopDesugar | TryDesugar | AwaitDesugar) => {\n+                return None;\n+            }\n \n-            Self::Loop(While)\n-            | Self::Loop(WhileLet)\n-            | Self::Match(WhileDesugar | WhileLetDesugar) => {\n-                &[sym::const_loop, sym::const_if_match]\n+            Self::Loop(Loop | While | WhileLet) | Self::Match(WhileDesugar | WhileLetDesugar) => {\n+                &[sym::const_loop]\n             }\n \n-            // A `for` loop's desugaring contains a call to `IntoIterator::into_iter`,\n-            // so they are not yet allowed with `#![feature(const_loop)]`.\n-            _ => return None,\n+            // All other matches are allowed.\n+            Self::Match(Normal | IfDesugar { .. } | IfLetDesugar { .. }) => &[],\n         };\n \n         Some(gates)\n@@ -114,17 +109,6 @@ impl<'tcx> CheckConstVisitor<'tcx> {\n         match missing_gates.as_slice() {\n             &[] => struct_span_err!(self.tcx.sess, span, E0744, \"{}\", msg).emit(),\n \n-            // If the user enabled `#![feature(const_loop)]` but not `#![feature(const_if_match)]`,\n-            // explain why their `while` loop is being rejected.\n-            &[gate @ sym::const_if_match] if required_gates.contains(&sym::const_loop) => {\n-                feature_err(&self.tcx.sess.parse_sess, gate, span, &msg)\n-                    .note(\n-                        \"`#![feature(const_loop)]` alone is not sufficient, \\\n-                           since this loop expression contains an implicit conditional\",\n-                    )\n-                    .emit();\n-            }\n-\n             &[missing_primary, ref missing_secondary @ ..] => {\n                 let mut err = feature_err(&self.tcx.sess.parse_sess, missing_primary, span, &msg);\n \n@@ -175,15 +159,6 @@ impl<'tcx> Visitor<'tcx> for CheckConstVisitor<'tcx> {\n         self.recurse_into(kind, |this| intravisit::walk_body(this, body));\n     }\n \n-    fn visit_pat(&mut self, p: &'tcx hir::Pat<'tcx>) {\n-        if self.const_kind.is_some() {\n-            if let hir::PatKind::Or { .. } = p.kind {\n-                self.const_check_violated(NonConstExpr::OrPattern, p.span);\n-            }\n-        }\n-        intravisit::walk_pat(self, p)\n-    }\n-\n     fn visit_expr(&mut self, e: &'tcx hir::Expr<'tcx>) {\n         match &e.kind {\n             // Skip the following checks if we are not currently in a const context."}]}