{"sha": "c082e157cae3307ea991e259758b26e855362b8e", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMwODJlMTU3Y2FlMzMwN2VhOTkxZTI1OTc1OGIyNmU4NTUzNjJiOGU=", "commit": {"author": {"name": "Mara Bos", "email": "m-ou.se@m-ou.se", "date": "2021-09-02T17:10:24Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-09-02T17:10:24Z"}, "message": "Rollup merge of #88592 - b-naber:region_substs, r=oli-obk\n\nFix ICE in const check\n\nFixes https://github.com/rust-lang/rust/issues/88433", "tree": {"sha": "e5cb85b9959986a5cd3242c34738ecdd45abea46", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e5cb85b9959986a5cd3242c34738ecdd45abea46"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c082e157cae3307ea991e259758b26e855362b8e", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhMQWBCRBK7hj4Ov3rIwAApgwIAETUQMfAZ2XiRAV+1XU4FX/R\nU9Gy8+Z0T2qLYpgVJuIF2ayOLHY/JdaKSskYNLZV7q7zvIaPpFOpZwSHP6PmraPl\nj88T3+RNy0Mj9MYFHrMLNnd0G6JY26YA/SARN9Cleqx3kXkAZV6JDCMKepDLcJWU\n5JvTlacqhm+Qa1zLdROg6c3B99FLIX28y3wCxvuCijet61lWC0RGTw/lvtc3RU96\n2YmwGTKmQy+QVnpFqEPgok4/souhBabDtwf7zF+2xjLRsYR0hePeSW2c+rcGLsVt\ndB1TLpm9CKMn1i7U6JvLSiigqL+U1WtbpBgFaa57akZOkRP+eb1+nCSA6qm1mYE=\n=FVFo\n-----END PGP SIGNATURE-----\n", "payload": "tree e5cb85b9959986a5cd3242c34738ecdd45abea46\nparent 8f88d44b0dbeefb7e5683cfcee38763427e9cb03\nparent f825d6c6ccb5bc1eab9dfda96d3189f7092eb867\nauthor Mara Bos <m-ou.se@m-ou.se> 1630602624 +0200\ncommitter GitHub <noreply@github.com> 1630602624 +0200\n\nRollup merge of #88592 - b-naber:region_substs, r=oli-obk\n\nFix ICE in const check\n\nFixes https://github.com/rust-lang/rust/issues/88433\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c082e157cae3307ea991e259758b26e855362b8e", "html_url": "https://github.com/rust-lang/rust/commit/c082e157cae3307ea991e259758b26e855362b8e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c082e157cae3307ea991e259758b26e855362b8e/comments", "author": {"login": "m-ou-se", "id": 783247, "node_id": "MDQ6VXNlcjc4MzI0Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/783247?v=4", "gravatar_id": "", "url": "https://api.github.com/users/m-ou-se", "html_url": "https://github.com/m-ou-se", "followers_url": "https://api.github.com/users/m-ou-se/followers", "following_url": "https://api.github.com/users/m-ou-se/following{/other_user}", "gists_url": "https://api.github.com/users/m-ou-se/gists{/gist_id}", "starred_url": "https://api.github.com/users/m-ou-se/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/m-ou-se/subscriptions", "organizations_url": "https://api.github.com/users/m-ou-se/orgs", "repos_url": "https://api.github.com/users/m-ou-se/repos", "events_url": "https://api.github.com/users/m-ou-se/events{/privacy}", "received_events_url": "https://api.github.com/users/m-ou-se/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "url": "https://api.github.com/repos/rust-lang/rust/commits/8f88d44b0dbeefb7e5683cfcee38763427e9cb03", "html_url": "https://github.com/rust-lang/rust/commit/8f88d44b0dbeefb7e5683cfcee38763427e9cb03"}, {"sha": "f825d6c6ccb5bc1eab9dfda96d3189f7092eb867", "url": "https://api.github.com/repos/rust-lang/rust/commits/f825d6c6ccb5bc1eab9dfda96d3189f7092eb867", "html_url": "https://github.com/rust-lang/rust/commit/f825d6c6ccb5bc1eab9dfda96d3189f7092eb867"}], "stats": {"total": 62, "additions": 45, "deletions": 17}, "files": [{"sha": "0c381276823598493e8aa12acd9fa6f30542271f", "filename": "compiler/rustc_mir/src/transform/check_consts/check.rs", "status": "modified", "additions": 19, "deletions": 17, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/c082e157cae3307ea991e259758b26e855362b8e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c082e157cae3307ea991e259758b26e855362b8e/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fcheck.rs?ref=c082e157cae3307ea991e259758b26e855362b8e", "patch": "@@ -9,7 +9,7 @@ use rustc_infer::traits::{ImplSource, Obligation, ObligationCause};\n use rustc_middle::mir::visit::{MutatingUseContext, NonMutatingUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::*;\n use rustc_middle::ty::cast::CastTy;\n-use rustc_middle::ty::subst::GenericArgKind;\n+use rustc_middle::ty::subst::{GenericArgKind, InternalSubsts};\n use rustc_middle::ty::{self, adjustment::PointerCast, Instance, InstanceDef, Ty, TyCtxt};\n use rustc_middle::ty::{Binder, TraitPredicate, TraitRef};\n use rustc_span::{sym, Span, Symbol};\n@@ -793,7 +793,7 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n \n                 let fn_ty = func.ty(body, tcx);\n \n-                let (mut callee, substs) = match *fn_ty.kind() {\n+                let (mut callee, mut substs) = match *fn_ty.kind() {\n                     ty::FnDef(def_id, substs) => (def_id, substs),\n \n                     ty::FnPtr(_) => {\n@@ -846,29 +846,31 @@ impl Visitor<'tcx> for Checker<'mir, 'tcx> {\n                                 .iter()\n                                 .find(|did| tcx.item_name(**did) == callee_name)\n                             {\n+                                // using internal substs is ok here, since this is only\n+                                // used for the `resolve` call below\n+                                substs = InternalSubsts::identity_for_item(tcx, did);\n                                 callee = did;\n                             }\n                         }\n-                        _ => {\n-                            if !tcx.is_const_fn_raw(callee) {\n-                                // At this point, it is only legal when the caller is marked with\n-                                // #[default_method_body_is_const], and the callee is in the same\n-                                // trait.\n-                                let callee_trait = tcx.trait_of_item(callee);\n-                                if callee_trait.is_some() {\n-                                    if tcx.has_attr(caller, sym::default_method_body_is_const) {\n-                                        if tcx.trait_of_item(caller) == callee_trait {\n-                                            nonconst_call_permission = true;\n-                                        }\n+                        _ if !tcx.is_const_fn_raw(callee) => {\n+                            // At this point, it is only legal when the caller is marked with\n+                            // #[default_method_body_is_const], and the callee is in the same\n+                            // trait.\n+                            let callee_trait = tcx.trait_of_item(callee);\n+                            if callee_trait.is_some() {\n+                                if tcx.has_attr(caller, sym::default_method_body_is_const) {\n+                                    if tcx.trait_of_item(caller) == callee_trait {\n+                                        nonconst_call_permission = true;\n                                     }\n                                 }\n+                            }\n \n-                                if !nonconst_call_permission {\n-                                    self.check_op(ops::FnCallNonConst);\n-                                    return;\n-                                }\n+                            if !nonconst_call_permission {\n+                                self.check_op(ops::FnCallNonConst);\n+                                return;\n                             }\n                         }\n+                        _ => {}\n                     }\n \n                     // Resolve a trait method call to its concrete implementation, which may be in a"}, {"sha": "8724fa69825463a33700f615a7d633dce3e27aa7", "filename": "src/test/ui/const-generics/const_trait_fn-issue-88433.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/c082e157cae3307ea991e259758b26e855362b8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c082e157cae3307ea991e259758b26e855362b8e/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst_trait_fn-issue-88433.rs?ref=c082e157cae3307ea991e259758b26e855362b8e", "patch": "@@ -0,0 +1,26 @@\n+// build-pass\n+\n+#![feature(const_trait_impl)]\n+\n+trait Func<T> {\n+    type Output;\n+\n+    fn call_once(self, arg: T) -> Self::Output;\n+}\n+\n+\n+struct Closure;\n+\n+impl const Func<&usize> for Closure {\n+    type Output = usize;\n+\n+    fn call_once(self, arg: &usize) -> Self::Output {\n+        *arg\n+    }\n+}\n+\n+enum Bug<T = [(); Closure.call_once(&0) ]> {\n+    V(T),\n+}\n+\n+fn main() {}"}]}