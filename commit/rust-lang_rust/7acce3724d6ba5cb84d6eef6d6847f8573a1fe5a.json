{"sha": "7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdhY2NlMzcyNGQ2YmE1Y2I4NGQ2ZWVmNmQ2ODQ3Zjg1NzNhMWZlNWE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T08:40:39Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-06-29T08:40:39Z"}, "message": "Auto merge of #42964 - arielb1:rollup, r=arielb1\n\nRollup of 12 pull requests\n\n- Successful merges: #42219, #42831, #42832, #42884, #42886, #42901, #42919, #42920, #42946, #42953, #42955, #42958\n- Failed merges:", "tree": {"sha": "1cdd6109e4d61790d67fb50fa25a88a8da01fdee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1cdd6109e4d61790d67fb50fa25a88a8da01fdee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "html_url": "https://github.com/rust-lang/rust/commit/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dc2003b7cc1af7d7beee0b1ceec3d811c28cb35e", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc2003b7cc1af7d7beee0b1ceec3d811c28cb35e", "html_url": "https://github.com/rust-lang/rust/commit/dc2003b7cc1af7d7beee0b1ceec3d811c28cb35e"}, {"sha": "d3329d7102db78a408bc059600c48fc7f99a0e67", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3329d7102db78a408bc059600c48fc7f99a0e67", "html_url": "https://github.com/rust-lang/rust/commit/d3329d7102db78a408bc059600c48fc7f99a0e67"}], "stats": {"total": 680, "additions": 492, "deletions": 188}, "files": [{"sha": "21877ecb43e105b6e99dfd1dd7fc8a55ce81133d", "filename": ".travis.yml", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/.travis.yml", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/.travis.yml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/.travis.yml?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -171,16 +171,22 @@ before_script:\n       if [[ \"$SKIP_BUILD\" == true ]]; then\n           export RUN_SCRIPT=\"echo 'skipping, not a full build'\";\n       else\n-          RUN_SCRIPT=\"stamp src/ci/init_repo.sh . $HOME/rustsrc\";\n+          RUN_SCRIPT=\"src/ci/init_repo.sh . $HOME/rustsrc\";\n           if [ \"$TRAVIS_OS_NAME\" = \"osx\" ]; then\n-              export RUN_SCRIPT=\"$RUN_SCRIPT && stamp src/ci/run.sh\";\n+              export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/run.sh\";\n           else\n-              export RUN_SCRIPT=\"$RUN_SCRIPT && stamp src/ci/docker/run.sh $IMAGE\";\n+              export RUN_SCRIPT=\"$RUN_SCRIPT && src/ci/docker/run.sh $IMAGE\";\n           fi\n       fi\n \n+# Log time information from this machine and an external machine for insight into possible\n+# clock drift. Timezones don't matter since relative deltas give all the necessary info.\n script:\n-  - sh -x -c \"$RUN_SCRIPT\"\n+  - >\n+      date && curl -s --head https://google.com | grep ^Date: | sed 's/Date: //g'\n+  - stamp sh -x -c \"$RUN_SCRIPT\"\n+  - >\n+      date && curl -s --head https://google.com | grep ^Date: | sed 's/Date: //g'\n \n after_success:\n   - >"}, {"sha": "4b24c0a6a0d39fb9e38c5d5ea2d96f01a5ecfecf", "filename": "src/doc/unstable-book/src/language-features/compile-error.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flanguage-features%2Fcompile-error.md?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -2,7 +2,7 @@\n \n The tracking issue for this feature is: [#40872]\n \n-[#29599]: https://github.com/rust-lang/rust/issues/40872\n+[#40872]: https://github.com/rust-lang/rust/issues/40872\n \n ------------------------\n "}, {"sha": "bf38629ed38a7a344eb5214842a49c340428fab1", "filename": "src/liballoc/allocator.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fliballoc%2Fallocator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fliballoc%2Fallocator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fallocator.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -873,7 +873,7 @@ pub unsafe trait Alloc {\n     {\n         let k = Layout::new::<T>();\n         if k.size() > 0 {\n-            unsafe { self.alloc(k).map(|p|Unique::new(*p as *mut T)) }\n+            unsafe { self.alloc(k).map(|p| Unique::new(p as *mut T)) }\n         } else {\n             Err(AllocErr::invalid_input(\"zero-sized type invalid for alloc_one\"))\n         }"}, {"sha": "4847b21c0b3b5d4c9f9d87653befd5d5b5cca94e", "filename": "src/liballoc/fmt.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fliballoc%2Ffmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Fliballoc%2Ffmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ffmt.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -498,12 +498,10 @@ pub use core::fmt::{DebugList, DebugMap, DebugSet, DebugStruct, DebugTuple};\n \n use string;\n \n-/// The format function takes a precompiled format string and a list of\n-/// arguments, to return the resulting formatted string.\n+/// The `format` function takes an `Arguments` struct and returns the resulting\n+/// formatted string.\n ///\n-/// # Arguments\n-///\n-///   * args - a structure of arguments generated via the `format_args!` macro.\n+/// The `Arguments` instance can be created with the `format_args!` macro.\n ///\n /// # Examples\n ///"}, {"sha": "7882a8ce5c8ec443fe7498c0706a07da98e5d598", "filename": "src/libcore/cmp.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibcore%2Fcmp.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibcore%2Fcmp.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcmp.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -379,8 +379,9 @@ impl<T: Ord> Ord for Reverse<T> {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `Ord`?\n ///\n@@ -512,8 +513,9 @@ impl PartialOrd for Ordering {\n ///\n /// ## Derivable\n ///\n-/// This trait can be used with `#[derive]`. When `derive`d, it will produce a lexicographic\n-/// ordering based on the top-to-bottom declaration order of the struct's members.\n+/// This trait can be used with `#[derive]`. When `derive`d on structs, it will produce a\n+/// lexicographic ordering based on the top-to-bottom declaration order of the struct's members.\n+/// When `derive`d on enums, variants are ordered by their top-to-bottom declaration order.\n ///\n /// ## How can I implement `PartialOrd`?\n ///"}, {"sha": "bcc6d53c81d3bb9764bd94e4cdac15b339d44b31", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -897,14 +897,11 @@ pub trait UpperExp {\n     fn fmt(&self, f: &mut Formatter) -> Result;\n }\n \n-/// The `write` function takes an output stream, a precompiled format string,\n-/// and a list of arguments. The arguments will be formatted according to the\n-/// specified format string into the output stream provided.\n+/// The `write` function takes an output stream, and an `Arguments` struct\n+/// that can be precompiled with the `format_args!` macro.\n ///\n-/// # Arguments\n-///\n-///   * output - the buffer to write output to\n-///   * args - the precompiled arguments generated by `format_args!`\n+/// The arguments will be formatted according to the specified format string\n+/// into the output stream provided.\n ///\n /// # Examples\n ///"}, {"sha": "8202c6106d14753e67db667eaeba4e2582f91a57", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 13, "deletions": 13, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -510,7 +510,6 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n     }\n \n     let name = lint.name_lower();\n-    let mut def = None;\n \n     // Except for possible note details, forbid behaves like deny.\n     let effective_level = if level == Forbid { Deny } else { level };\n@@ -525,7 +524,8 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n \n     match source {\n         Default => {\n-            err.note(&format!(\"#[{}({})] on by default\", level.as_str(), name));\n+            sess.diag_note_once(&mut err, lint,\n+                                &format!(\"#[{}({})] on by default\", level.as_str(), name));\n         },\n         CommandLine(lint_flag_val) => {\n             let flag = match level {\n@@ -534,20 +534,24 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n             };\n             let hyphen_case_lint_name = name.replace(\"_\", \"-\");\n             if lint_flag_val.as_str() == name {\n-                err.note(&format!(\"requested on the command line with `{} {}`\",\n-                                  flag, hyphen_case_lint_name));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"requested on the command line with `{} {}`\",\n+                                             flag, hyphen_case_lint_name));\n             } else {\n                 let hyphen_case_flag_val = lint_flag_val.as_str().replace(\"_\", \"-\");\n-                err.note(&format!(\"`{} {}` implied by `{} {}`\",\n-                                  flag, hyphen_case_lint_name, flag, hyphen_case_flag_val));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"`{} {}` implied by `{} {}`\",\n+                                             flag, hyphen_case_lint_name, flag,\n+                                             hyphen_case_flag_val));\n             }\n         },\n         Node(lint_attr_name, src) => {\n-            def = Some(src);\n+            sess.diag_span_note_once(&mut err, lint, src, \"lint level defined here\");\n             if lint_attr_name.as_str() != name {\n                 let level_str = level.as_str();\n-                err.note(&format!(\"#[{}({})] implied by #[{}({})]\",\n-                                  level_str, name, level_str, lint_attr_name));\n+                sess.diag_note_once(&mut err, lint,\n+                                    &format!(\"#[{}({})] implied by #[{}({})]\",\n+                                             level_str, name, level_str, lint_attr_name));\n             }\n         }\n     }\n@@ -563,10 +567,6 @@ pub fn raw_struct_lint<'a, S>(sess: &'a Session,\n         err.note(&citation);\n     }\n \n-    if let Some(span) = def {\n-        sess.diag_span_note_once(&mut err, lint, span, \"lint level defined here\");\n-    }\n-\n     err\n }\n "}, {"sha": "fb513f573d7e2bf83465b9c3aa1c1bd73888982c", "filename": "src/librustc/session/mod.rs", "status": "modified", "additions": 43, "deletions": 17, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc%2Fsession%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc%2Fsession%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fmod.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -79,10 +79,10 @@ pub struct Session {\n     pub working_dir: (String, bool),\n     pub lint_store: RefCell<lint::LintStore>,\n     pub lints: RefCell<lint::LintTable>,\n-    /// Set of (LintId, span, message) tuples tracking lint (sub)diagnostics\n-    /// that have been set once, but should not be set again, in order to avoid\n-    /// redundantly verbose output (Issue #24690).\n-    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Span, String)>>,\n+    /// Set of (LintId, Option<Span>, message) tuples tracking lint\n+    /// (sub)diagnostics that have been set once, but should not be set again,\n+    /// in order to avoid redundantly verbose output (Issue #24690).\n+    pub one_time_diagnostics: RefCell<FxHashSet<(lint::LintId, Option<Span>, String)>>,\n     pub plugin_llvm_passes: RefCell<Vec<String>>,\n     pub plugin_attributes: RefCell<Vec<(String, AttributeType)>>,\n     pub crate_types: RefCell<Vec<config::CrateType>>,\n@@ -157,6 +157,13 @@ pub struct PerfStats {\n     pub decode_def_path_tables_time: Cell<Duration>,\n }\n \n+/// Enum to support dispatch of one-time diagnostics (in Session.diag_once)\n+enum DiagnosticBuilderMethod {\n+    Note,\n+    SpanNote,\n+    // add more variants as needed to support one-time diagnostics\n+}\n+\n impl Session {\n     pub fn local_crate_disambiguator(&self) -> Symbol {\n         *self.crate_disambiguator.borrow()\n@@ -329,34 +336,53 @@ impl Session {\n         &self.parse_sess.span_diagnostic\n     }\n \n-    /// Analogous to calling `.span_note` on the given DiagnosticBuilder, but\n-    /// deduplicates on lint ID, span, and message for this `Session` if we're\n-    /// not outputting in JSON mode.\n-    //\n-    // FIXME: if the need arises for one-time diagnostics other than\n-    // `span_note`, we almost certainly want to generalize this\n-    // \"check/insert-into the one-time diagnostics map, then set message if\n-    // it's not already there\" code to accomodate all of them\n-    pub fn diag_span_note_once<'a, 'b>(&'a self,\n-                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n-                                       lint: &'static lint::Lint, span: Span, message: &str) {\n+    /// Analogous to calling methods on the given `DiagnosticBuilder`, but\n+    /// deduplicates on lint ID, span (if any), and message for this `Session`\n+    /// if we're not outputting in JSON mode.\n+    fn diag_once<'a, 'b>(&'a self,\n+                         diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                         method: DiagnosticBuilderMethod,\n+                         lint: &'static lint::Lint, message: &str, span: Option<Span>) {\n+        let mut do_method = || {\n+            match method {\n+                DiagnosticBuilderMethod::Note => {\n+                    diag_builder.note(message);\n+                },\n+                DiagnosticBuilderMethod::SpanNote => {\n+                    diag_builder.span_note(span.expect(\"span_note expects a span\"), message);\n+                }\n+            }\n+        };\n+\n         match self.opts.error_format {\n             // when outputting JSON for tool consumption, the tool might want\n             // the duplicates\n             config::ErrorOutputType::Json => {\n-                diag_builder.span_note(span, &message);\n+                do_method()\n             },\n             _ => {\n                 let lint_id = lint::LintId::of(lint);\n                 let id_span_message = (lint_id, span, message.to_owned());\n                 let fresh = self.one_time_diagnostics.borrow_mut().insert(id_span_message);\n                 if fresh {\n-                    diag_builder.span_note(span, &message);\n+                    do_method()\n                 }\n             }\n         }\n     }\n \n+    pub fn diag_span_note_once<'a, 'b>(&'a self,\n+                                       diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                       lint: &'static lint::Lint, span: Span, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::SpanNote, lint, message, Some(span));\n+    }\n+\n+    pub fn diag_note_once<'a, 'b>(&'a self,\n+                                  diag_builder: &'b mut DiagnosticBuilder<'a>,\n+                                  lint: &'static lint::Lint, message: &str) {\n+        self.diag_once(diag_builder, DiagnosticBuilderMethod::Note, lint, message, None);\n+    }\n+\n     pub fn codemap<'a>(&'a self) -> &'a codemap::CodeMap {\n         self.parse_sess.codemap()\n     }"}, {"sha": "2b33150902532536d219720d89c2034c2efd8e4e", "filename": "src/librustc_lint/builtin.rs", "status": "modified", "additions": 3, "deletions": 7, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc_lint%2Fbuiltin.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc_lint%2Fbuiltin.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_lint%2Fbuiltin.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -684,13 +684,9 @@ fn fl_lit_check_expr(cx: &EarlyContext, expr: &ast::Expr) {\n         // These may occur in patterns\n         // and can maybe contain float literals\n         ExprKind::Unary(_, ref f) => fl_lit_check_expr(cx, f),\n-        // These may occur in patterns\n-        // and can't contain float literals\n-        ExprKind::Path(..) => (),\n-        // If something unhandled is encountered, we need to expand the\n-        // search or ignore more ExprKinds.\n-        _ => span_bug!(expr.span, \"Unhandled expression {:?} in float lit pattern lint\",\n-                       expr.node),\n+        // Other kinds of exprs can't occur in patterns so we don't have to check them\n+        // (ast_validation will emit an error if they occur)\n+        _ => (),\n     }\n }\n "}, {"sha": "6ad03186dc778136cc8ca6402207cd463cb325da", "filename": "src/librustc_passes/ast_validation.rs", "status": "modified", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc_passes%2Fast_validation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustc_passes%2Fast_validation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fast_validation.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -93,6 +93,17 @@ impl<'a> AstValidator<'a> {\n             }\n         }\n     }\n+\n+    /// matches '-' lit | lit (cf. parser::Parser::parse_pat_literal_maybe_minus)\n+    fn check_expr_within_pat(&self, expr: &Expr) {\n+        match expr.node {\n+            ExprKind::Lit(..) | ExprKind::Path(..) => {}\n+            ExprKind::Unary(UnOp::Neg, ref inner)\n+                if match inner.node { ExprKind::Lit(_) => true, _ => false } => {}\n+            _ => self.err_handler().span_err(expr.span, \"arbitrary expressions aren't allowed \\\n+                                                         in patterns\")\n+        }\n+    }\n }\n \n impl<'a> Visitor<'a> for AstValidator<'a> {\n@@ -308,6 +319,21 @@ impl<'a> Visitor<'a> for AstValidator<'a> {\n         }\n         visit::walk_generics(self, g)\n     }\n+\n+    fn visit_pat(&mut self, pat: &'a Pat) {\n+        match pat.node {\n+            PatKind::Lit(ref expr) => {\n+                self.check_expr_within_pat(expr);\n+            }\n+            PatKind::Range(ref start, ref end, _) => {\n+                self.check_expr_within_pat(start);\n+                self.check_expr_within_pat(end);\n+            }\n+            _ => {}\n+        }\n+\n+        visit::walk_pat(self, pat)\n+    }\n }\n \n pub fn check_crate(session: &Session, krate: &Crate) {"}, {"sha": "03da451fd9a0a2477fe9226b04f53a23ff08ed2b", "filename": "src/librustdoc/html/markdown.rs", "status": "modified", "additions": 27, "deletions": 18, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fmarkdown.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -769,7 +769,7 @@ pub fn old_find_testable_code(doc: &str, tests: &mut ::test::Collector, position\n                                block_info.should_panic, block_info.no_run,\n                                block_info.ignore, block_info.test_harness,\n                                block_info.compile_fail, block_info.error_codes,\n-                               line, filename);\n+                               line, filename, block_info.allow_fail);\n             } else {\n                 tests.add_old_test(text, filename);\n             }\n@@ -859,7 +859,7 @@ pub fn find_testable_code(doc: &str, tests: &mut ::test::Collector, position: Sp\n                                block_info.should_panic, block_info.no_run,\n                                block_info.ignore, block_info.test_harness,\n                                block_info.compile_fail, block_info.error_codes,\n-                               line, filename);\n+                               line, filename, block_info.allow_fail);\n                 prev_offset = offset;\n             }\n             Event::Start(Tag::Header(level)) => {\n@@ -889,6 +889,7 @@ struct LangString {\n     test_harness: bool,\n     compile_fail: bool,\n     error_codes: Vec<String>,\n+    allow_fail: bool,\n }\n \n impl LangString {\n@@ -902,6 +903,7 @@ impl LangString {\n             test_harness: false,\n             compile_fail: false,\n             error_codes: Vec::new(),\n+            allow_fail: false,\n         }\n     }\n \n@@ -930,6 +932,7 @@ impl LangString {\n                 }\n                 \"no_run\" => { data.no_run = true; seen_rust_tags = !seen_other_tags; }\n                 \"ignore\" => { data.ignore = true; seen_rust_tags = !seen_other_tags; }\n+                \"allow_fail\" => { data.allow_fail = true; seen_rust_tags = !seen_other_tags; }\n                 \"rust\" => { data.rust = true; seen_rust_tags = true; }\n                 \"test_harness\" => {\n                     data.test_harness = true;\n@@ -1118,7 +1121,7 @@ mod tests {\n     fn test_lang_string_parse() {\n         fn t(s: &str,\n             should_panic: bool, no_run: bool, ignore: bool, rust: bool, test_harness: bool,\n-            compile_fail: bool, error_codes: Vec<String>) {\n+            compile_fail: bool, allow_fail: bool, error_codes: Vec<String>) {\n             assert_eq!(LangString::parse(s), LangString {\n                 should_panic: should_panic,\n                 no_run: no_run,\n@@ -1128,25 +1131,31 @@ mod tests {\n                 compile_fail: compile_fail,\n                 error_codes: error_codes,\n                 original: s.to_owned(),\n+                allow_fail: allow_fail,\n             })\n         }\n \n+        fn v() -> Vec<String> {\n+            Vec::new()\n+        }\n+\n         // marker                | should_panic| no_run| ignore| rust | test_harness| compile_fail\n-        //                       | error_codes\n-        t(\"\",                      false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"rust\",                  false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"sh\",                    false,        false,  false,  false, false, false, Vec::new());\n-        t(\"ignore\",                false,        false,  true,   true,  false, false, Vec::new());\n-        t(\"should_panic\",          true,         false,  false,  true,  false, false, Vec::new());\n-        t(\"no_run\",                false,        true,   false,  true,  false, false, Vec::new());\n-        t(\"test_harness\",          false,        false,  false,  true,  true,  false, Vec::new());\n-        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  Vec::new());\n-        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, Vec::new());\n-        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, Vec::new());\n-        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, Vec::new());\n-        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, Vec::new());\n-        t(\"text, no_run\",          false,        true,   false,  false, false, false, Vec::new());\n-        t(\"text,no_run\",           false,        true,   false,  false, false, false, Vec::new());\n+        //                       | allow_fail | error_codes\n+        t(\"\",                      false,        false,  false,  true,  false, false, false, v());\n+        t(\"rust\",                  false,        false,  false,  true,  false, false, false, v());\n+        t(\"sh\",                    false,        false,  false,  false, false, false, false, v());\n+        t(\"ignore\",                false,        false,  true,   true,  false, false, false, v());\n+        t(\"should_panic\",          true,         false,  false,  true,  false, false, false, v());\n+        t(\"no_run\",                false,        true,   false,  true,  false, false, false, v());\n+        t(\"test_harness\",          false,        false,  false,  true,  true,  false, false, v());\n+        t(\"compile_fail\",          false,        true,   false,  true,  false, true,  false, v());\n+        t(\"allow_fail\",            false,        false,  false,  true,  false, false, true,  v());\n+        t(\"{.no_run .example}\",    false,        true,   false,  true,  false, false, false, v());\n+        t(\"{.sh .should_panic}\",   true,         false,  false,  false, false, false, false, v());\n+        t(\"{.example .rust}\",      false,        false,  false,  true,  false, false, false, v());\n+        t(\"{.test_harness .rust}\", false,        false,  false,  true,  true,  false, false, v());\n+        t(\"text, no_run\",          false,        true,   false,  false, false, false, false, v());\n+        t(\"text,no_run\",           false,        true,   false,  false, false, false, false, v());\n     }\n \n     #[test]"}, {"sha": "4766778eed1b88bc00b505f708ad78b39bc83b97", "filename": "src/librustdoc/test.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustdoc%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibrustdoc%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Ftest.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -467,7 +467,7 @@ impl Collector {\n     pub fn add_test(&mut self, test: String,\n                     should_panic: bool, no_run: bool, should_ignore: bool,\n                     as_test_harness: bool, compile_fail: bool, error_codes: Vec<String>,\n-                    line: usize, filename: String) {\n+                    line: usize, filename: String, allow_fail: bool) {\n         let name = self.generate_name(line, &filename);\n         // to be removed when hoedown is removed\n         if self.render_type == RenderType::Pulldown {\n@@ -499,6 +499,7 @@ impl Collector {\n                 ignore: should_ignore,\n                 // compiler failures are test failures\n                 should_panic: testing::ShouldPanic::No,\n+                allow_fail: allow_fail,\n             },\n             testfn: testing::DynTestFn(box move |()| {\n                 let panic = io::set_panic(None);"}, {"sha": "f81adad3ebebf1747578e982ab3fedb8bc021429", "filename": "src/libstd/env.rs", "status": "modified", "additions": 1, "deletions": 81, "changes": 82, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibstd%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibstd%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fenv.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -949,63 +949,9 @@ mod arch {\n mod tests {\n     use super::*;\n \n-    use iter::repeat;\n-    use rand::{self, Rng};\n-    use ffi::{OsString, OsStr};\n+    use ffi::OsStr;\n     use path::{Path, PathBuf};\n \n-    fn make_rand_name() -> OsString {\n-        let mut rng = rand::thread_rng();\n-        let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n-                                     .collect::<String>());\n-        let n = OsString::from(n);\n-        assert!(var_os(&n).is_none());\n-        n\n-    }\n-\n-    fn eq(a: Option<OsString>, b: Option<&str>) {\n-        assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));\n-    }\n-\n-    #[test]\n-    fn test_set_var() {\n-        let n = make_rand_name();\n-        set_var(&n, \"VALUE\");\n-        eq(var_os(&n), Some(\"VALUE\"));\n-    }\n-\n-    #[test]\n-    fn test_remove_var() {\n-        let n = make_rand_name();\n-        set_var(&n, \"VALUE\");\n-        remove_var(&n);\n-        eq(var_os(&n), None);\n-    }\n-\n-    #[test]\n-    fn test_set_var_overwrite() {\n-        let n = make_rand_name();\n-        set_var(&n, \"1\");\n-        set_var(&n, \"2\");\n-        eq(var_os(&n), Some(\"2\"));\n-        set_var(&n, \"\");\n-        eq(var_os(&n), Some(\"\"));\n-    }\n-\n-    #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n-    fn test_var_big() {\n-        let mut s = \"\".to_string();\n-        let mut i = 0;\n-        while i < 100 {\n-            s.push_str(\"aaaaaaaaaa\");\n-            i += 1;\n-        }\n-        let n = make_rand_name();\n-        set_var(&n, &s);\n-        eq(var_os(&n), Some(&s));\n-    }\n-\n     #[test]\n     #[cfg_attr(target_os = \"emscripten\", ignore)]\n     fn test_self_exe_path() {\n@@ -1017,32 +963,6 @@ mod tests {\n         assert!(path.is_absolute());\n     }\n \n-    #[test]\n-    #[cfg_attr(target_os = \"emscripten\", ignore)]\n-    fn test_env_set_get_huge() {\n-        let n = make_rand_name();\n-        let s = repeat(\"x\").take(10000).collect::<String>();\n-        set_var(&n, &s);\n-        eq(var_os(&n), Some(&s));\n-        remove_var(&n);\n-        eq(var_os(&n), None);\n-    }\n-\n-    #[test]\n-    fn test_env_set_var() {\n-        let n = make_rand_name();\n-\n-        let mut e = vars_os();\n-        set_var(&n, \"VALUE\");\n-        assert!(!e.any(|(k, v)| {\n-            &*k == &*n && &*v == \"VALUE\"\n-        }));\n-\n-        assert!(vars_os().any(|(k, v)| {\n-            &*k == &*n && &*v == \"VALUE\"\n-        }));\n-    }\n-\n     #[test]\n     fn test() {\n         assert!((!Path::new(\"test-path\").is_absolute()));"}, {"sha": "472ce6bc4fe9ef8bd7498ba15b6901e6c0ff9cc0", "filename": "src/libstd/path.rs", "status": "modified", "additions": 7, "deletions": 6, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibstd%2Fpath.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibstd%2Fpath.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpath.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -276,7 +276,7 @@ impl<'a> Prefix<'a> {\n /// ```\n /// use std::path;\n ///\n-/// assert!(path::is_separator('/'));\n+/// assert!(path::is_separator('/')); // '/' works for both Unix and Windows\n /// assert!(!path::is_separator('\u2764'));\n /// ```\n #[stable(feature = \"rust1\", since = \"1.0.0\")]\n@@ -1499,9 +1499,9 @@ impl AsRef<OsStr> for PathBuf {\n /// A slice of a path (akin to [`str`]).\n ///\n /// This type supports a number of operations for inspecting a path, including\n-/// breaking the path into its components (separated by `/` or `\\`, depending on\n-/// the platform), extracting the file name, determining whether the path is\n-/// absolute, and so on.\n+/// breaking the path into its components (separated by `/` on Unix and by either\n+/// `/` or `\\` on Windows), extracting the file name, determining whether the path\n+/// is absolute, and so on.\n ///\n /// This is an *unsized* type, meaning that it must always be used behind a\n /// pointer like `&` or [`Box`]. For an owned version of this type,\n@@ -1520,10 +1520,11 @@ impl AsRef<OsStr> for PathBuf {\n /// use std::path::Path;\n /// use std::ffi::OsStr;\n ///\n-/// let path = Path::new(\"/tmp/foo/bar.txt\");\n+/// // Note: this example does work on Windows\n+/// let path = Path::new(\"./foo/bar.txt\");\n ///\n /// let parent = path.parent();\n-/// assert_eq!(parent, Some(Path::new(\"/tmp/foo\")));\n+/// assert_eq!(parent, Some(Path::new(\"./foo\")));\n ///\n /// let file_stem = path.file_stem();\n /// assert_eq!(file_stem, Some(OsStr::new(\"bar\")));"}, {"sha": "74bf19b841e886fe04a3d3788ba57c29c1ad3acc", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -354,6 +354,9 @@ declare_features! (\n \n     // rustc internal\n     (active, abi_thiscall, \"1.19.0\", None),\n+\n+    // Allows a test to fail without failing the whole suite\n+    (active, allow_fail, \"1.19.0\", Some(42219)),\n );\n \n declare_features! (\n@@ -812,6 +815,11 @@ pub const BUILTIN_ATTRIBUTES: &'static [(&'static str, AttributeType, AttributeG\n                                              \"used internally by rustc\",\n                                              cfg_fn!(rustc_attrs))),\n \n+    (\"allow_fail\", Normal, Gated(Stability::Unstable,\n+                                 \"allow_fail\",\n+                                 \"allow_fail attribute is currently unstable\",\n+                                 cfg_fn!(allow_fail))),\n+\n     // Crate level attributes\n     (\"crate_name\", CrateLevel, Ungated),\n     (\"crate_type\", CrateLevel, Ungated),"}, {"sha": "5b0031b2f179fb0ffa62cded3adc83698fd72921", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -1659,8 +1659,10 @@ impl<'a> Parser<'a> {\n         Ok(codemap::Spanned { node: lit, span: lo.to(self.prev_span) })\n     }\n \n-    /// matches '-' lit | lit\n+    /// matches '-' lit | lit (cf. ast_validation::AstValidator::check_expr_within_pat)\n     pub fn parse_pat_literal_maybe_minus(&mut self) -> PResult<'a, P<Expr>> {\n+        maybe_whole_expr!(self);\n+\n         let minus_lo = self.span;\n         let minus_present = self.eat(&token::BinOp(token::Minus));\n         let lo = self.span;"}, {"sha": "86f5f42eac79614c5e74646b26754db314024a8d", "filename": "src/libsyntax/test.rs", "status": "modified", "additions": 11, "deletions": 3, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Ftest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibsyntax%2Ftest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftest.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -52,7 +52,8 @@ struct Test {\n     path: Vec<Ident> ,\n     bench: bool,\n     ignore: bool,\n-    should_panic: ShouldPanic\n+    should_panic: ShouldPanic,\n+    allow_fail: bool,\n }\n \n struct TestCtxt<'a> {\n@@ -133,7 +134,8 @@ impl<'a> fold::Folder for TestHarnessGenerator<'a> {\n                         path: self.cx.path.clone(),\n                         bench: is_bench_fn(&self.cx, &i),\n                         ignore: is_ignored(&i),\n-                        should_panic: should_panic(&i, &self.cx)\n+                        should_panic: should_panic(&i, &self.cx),\n+                        allow_fail: is_allowed_fail(&i),\n                     };\n                     self.cx.testfns.push(test);\n                     self.tests.push(i.ident);\n@@ -383,6 +385,10 @@ fn is_ignored(i: &ast::Item) -> bool {\n     i.attrs.iter().any(|attr| attr.check_name(\"ignore\"))\n }\n \n+fn is_allowed_fail(i: &ast::Item) -> bool {\n+    i.attrs.iter().any(|attr| attr.check_name(\"allow_fail\"))\n+}\n+\n fn should_panic(i: &ast::Item, cx: &TestCtxt) -> ShouldPanic {\n     match i.attrs.iter().find(|attr| attr.check_name(\"should_panic\")) {\n         Some(attr) => {\n@@ -668,14 +674,16 @@ fn mk_test_desc_and_fn_rec(cx: &TestCtxt, test: &Test) -> P<ast::Expr> {\n             }\n         }\n     };\n+    let allow_fail_expr = ecx.expr_bool(span, test.allow_fail);\n \n     // self::test::TestDesc { ... }\n     let desc_expr = ecx.expr_struct(\n         span,\n         test_path(\"TestDesc\"),\n         vec![field(\"name\", name_expr),\n              field(\"ignore\", ignore_expr),\n-             field(\"should_panic\", fail_expr)]);\n+             field(\"should_panic\", fail_expr),\n+             field(\"allow_fail\", allow_fail_expr)]);\n \n \n     let mut visible_path = match cx.toplevel_reexport {"}, {"sha": "92cfb862b16691dafde886409044a087a9736780", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 50, "deletions": 8, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -212,6 +212,7 @@ pub struct TestDesc {\n     pub name: TestName,\n     pub ignore: bool,\n     pub should_panic: ShouldPanic,\n+    pub allow_fail: bool,\n }\n \n #[derive(Clone)]\n@@ -523,6 +524,7 @@ pub enum TestResult {\n     TrFailed,\n     TrFailedMsg(String),\n     TrIgnored,\n+    TrAllowedFail,\n     TrMetrics(MetricMap),\n     TrBench(BenchSamples),\n }\n@@ -543,6 +545,7 @@ struct ConsoleTestState<T> {\n     passed: usize,\n     failed: usize,\n     ignored: usize,\n+    allowed_fail: usize,\n     filtered_out: usize,\n     measured: usize,\n     metrics: MetricMap,\n@@ -572,6 +575,7 @@ impl<T: Write> ConsoleTestState<T> {\n             passed: 0,\n             failed: 0,\n             ignored: 0,\n+            allowed_fail: 0,\n             filtered_out: 0,\n             measured: 0,\n             metrics: MetricMap::new(),\n@@ -594,6 +598,10 @@ impl<T: Write> ConsoleTestState<T> {\n         self.write_short_result(\"ignored\", \"i\", term::color::YELLOW)\n     }\n \n+    pub fn write_allowed_fail(&mut self) -> io::Result<()> {\n+        self.write_short_result(\"FAILED (allowed)\", \"a\", term::color::YELLOW)\n+    }\n+\n     pub fn write_metric(&mut self) -> io::Result<()> {\n         self.write_pretty(\"metric\", term::color::CYAN)\n     }\n@@ -669,6 +677,7 @@ impl<T: Write> ConsoleTestState<T> {\n             TrOk => self.write_ok(),\n             TrFailed | TrFailedMsg(_) => self.write_failed(),\n             TrIgnored => self.write_ignored(),\n+            TrAllowedFail => self.write_allowed_fail(),\n             TrMetrics(ref mm) => {\n                 self.write_metric()?;\n                 self.write_plain(&format!(\": {}\\n\", mm.fmt_metrics()))\n@@ -702,6 +711,7 @@ impl<T: Write> ConsoleTestState<T> {\n                         TrFailed => \"failed\".to_owned(),\n                         TrFailedMsg(ref msg) => format!(\"failed: {}\", msg),\n                         TrIgnored => \"ignored\".to_owned(),\n+                        TrAllowedFail => \"failed (allowed)\".to_owned(),\n                         TrMetrics(ref mm) => mm.fmt_metrics(),\n                         TrBench(ref bs) => fmt_bench_samples(bs),\n                     },\n@@ -761,7 +771,8 @@ impl<T: Write> ConsoleTestState<T> {\n     }\n \n     pub fn write_run_finish(&mut self) -> io::Result<bool> {\n-        assert!(self.passed + self.failed + self.ignored + self.measured == self.total);\n+        assert!(self.passed + self.failed + self.ignored + self.measured +\n+                    self.allowed_fail == self.total);\n \n         if self.options.display_output {\n             self.write_outputs()?;\n@@ -778,12 +789,24 @@ impl<T: Write> ConsoleTestState<T> {\n         } else {\n             self.write_pretty(\"FAILED\", term::color::RED)?;\n         }\n-        let s = format!(\". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n-                        self.passed,\n-                        self.failed,\n-                        self.ignored,\n-                        self.measured,\n-                        self.filtered_out);\n+        let s = if self.allowed_fail > 0 {\n+            format!(\n+                \". {} passed; {} failed ({} allowed); {} ignored; {} measured; {} filtered out\\n\\n\",\n+                self.passed,\n+                self.failed + self.allowed_fail,\n+                self.allowed_fail,\n+                self.ignored,\n+                self.measured,\n+                self.filtered_out)\n+        } else {\n+            format!(\n+                \". {} passed; {} failed; {} ignored; {} measured; {} filtered out\\n\\n\",\n+                self.passed,\n+                self.failed,\n+                self.ignored,\n+                self.measured,\n+                self.filtered_out)\n+        };\n         self.write_plain(&s)?;\n         return Ok(success);\n     }\n@@ -891,6 +914,7 @@ pub fn run_tests_console(opts: &TestOpts, tests: Vec<TestDescAndFn>) -> io::Resu\n                         st.not_failures.push((test, stdout));\n                     }\n                     TrIgnored => st.ignored += 1,\n+                    TrAllowedFail => st.allowed_fail += 1,\n                     TrMetrics(mm) => {\n                         let tname = test.name;\n                         let MetricMap(mm) = mm;\n@@ -945,12 +969,14 @@ fn should_sort_failures_before_printing_them() {\n         name: StaticTestName(\"a\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n+        allow_fail: false,\n     };\n \n     let test_b = TestDesc {\n         name: StaticTestName(\"b\"),\n         ignore: false,\n         should_panic: ShouldPanic::No,\n+        allow_fail: false,\n     };\n \n     let mut st = ConsoleTestState {\n@@ -962,6 +988,7 @@ fn should_sort_failures_before_printing_them() {\n         passed: 0,\n         failed: 0,\n         ignored: 0,\n+        allowed_fail: 0,\n         filtered_out: 0,\n         measured: 0,\n         max_name_len: 10,\n@@ -1471,8 +1498,13 @@ fn calc_result(desc: &TestDesc, task_result: Result<(), Box<Any + Send>>) -> Tes\n                   .unwrap_or(false) {\n                 TrOk\n             } else {\n-                TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+                if desc.allow_fail {\n+                    TrAllowedFail\n+                } else {\n+                    TrFailedMsg(format!(\"Panic did not include expected string '{}'\", msg))\n+                }\n             },\n+        _ if desc.allow_fail => TrAllowedFail,\n         _ => TrFailed,\n     }\n }\n@@ -1706,6 +1738,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1723,6 +1756,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: true,\n                 should_panic: ShouldPanic::No,\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1742,6 +1776,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes,\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1761,6 +1796,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::YesWithMessage(\"error message\"),\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1782,6 +1818,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::YesWithMessage(expected),\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1799,6 +1836,7 @@ mod tests {\n                 name: StaticTestName(\"whatever\"),\n                 ignore: false,\n                 should_panic: ShouldPanic::Yes,\n+                allow_fail: false,\n             },\n             testfn: DynTestFn(Box::new(move |()| f())),\n         };\n@@ -1832,6 +1870,7 @@ mod tests {\n                                  name: StaticTestName(\"1\"),\n                                  ignore: true,\n                                  should_panic: ShouldPanic::No,\n+                                 allow_fail: false,\n                              },\n                              testfn: DynTestFn(Box::new(move |()| {})),\n                          },\n@@ -1840,6 +1879,7 @@ mod tests {\n                                  name: StaticTestName(\"2\"),\n                                  ignore: false,\n                                  should_panic: ShouldPanic::No,\n+                                 allow_fail: false,\n                              },\n                              testfn: DynTestFn(Box::new(move |()| {})),\n                          }];\n@@ -1863,6 +1903,7 @@ mod tests {\n                     name: StaticTestName(name),\n                     ignore: false,\n                     should_panic: ShouldPanic::No,\n+                    allow_fail: false,\n                 },\n                 testfn: DynTestFn(Box::new(move |()| {}))\n             })\n@@ -1944,6 +1985,7 @@ mod tests {\n                         name: DynTestName((*name).clone()),\n                         ignore: false,\n                         should_panic: ShouldPanic::No,\n+                        allow_fail: false,\n                     },\n                     testfn: DynTestFn(Box::new(move |()| testfn())),\n                 };"}, {"sha": "1124740280960de2f7a63106294cec0df364f7b4", "filename": "src/test/compile-fail/feature-gate-allow_fail.rs", "status": "added", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow_fail.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow_fail.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ffeature-gate-allow_fail.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,17 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// check that #[allow_fail] is feature-gated\n+\n+#[allow_fail] //~ ERROR allow_fail attribute is currently unstable\n+fn ok_to_fail() {\n+    assert!(false);\n+}\n+"}, {"sha": "afb2cbb7db397395619453d0c9c2c98a23899f1d", "filename": "src/test/compile-fail/patkind-litrange-no-expr.rs", "status": "added", "additions": 36, "deletions": 0, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fpatkind-litrange-no-expr.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,36 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! enum_number {\n+    ($name:ident { $($variant:ident = $value:expr, )* }) => {\n+        enum $name {\n+            $($variant = $value,)*\n+        }\n+\n+        fn foo(value: i32) -> Option<$name> {\n+            match value {\n+                $( $value => Some($name::$variant), )* // PatKind::Lit\n+                $( $value ... 42 => Some($name::$variant), )* // PatKind::Range\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+enum_number!(Change {\n+    Pos = 1,\n+    Neg = -1,\n+    Arith = 1 + 1, //~ ERROR arbitrary expressions aren't allowed in patterns\n+                   //~^ ERROR arbitrary expressions aren't allowed in patterns\n+                   //~^^ ERROR only char and numeric types are allowed in range patterns\n+});\n+\n+fn main() {}\n+"}, {"sha": "7cc547dcc04e25860c3e495fb88b64a50aa3d469", "filename": "src/test/run-pass/allocator-alloc-one.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fallocator-alloc-one.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(alloc, allocator_api, heap_api, unique)]\n+\n+extern crate alloc;\n+\n+use alloc::heap::HeapAlloc;\n+use alloc::allocator::Alloc;\n+\n+fn main() {\n+    unsafe {\n+        let ptr = HeapAlloc.alloc_one::<i32>().unwrap_or_else(|e| {\n+            HeapAlloc.oom(e)\n+        });\n+        *ptr.as_ptr() = 4;\n+        assert_eq!(*ptr.as_ptr(), 4);\n+        HeapAlloc.dealloc_one(ptr);\n+    }\n+}"}, {"sha": "e602fb2d7d29a20e2f4740e15a1179dc3f5841ad", "filename": "src/test/run-pass/env.rs", "status": "added", "additions": 98, "deletions": 0, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fenv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fenv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fenv.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,98 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+\n+#![feature(rand, std_panic)]\n+\n+use std::env::*;\n+use std::__rand as rand;\n+use std::__rand::Rng;\n+use std::iter::repeat;\n+use std::ffi::{OsString, OsStr};\n+\n+\n+fn make_rand_name() -> OsString {\n+    let mut rng = rand::thread_rng();\n+    let n = format!(\"TEST{}\", rng.gen_ascii_chars().take(10)\n+                                 .collect::<String>());\n+    let n = OsString::from(n);\n+    assert!(var_os(&n).is_none());\n+    n\n+}\n+\n+fn eq(a: Option<OsString>, b: Option<&str>) {\n+    assert_eq!(a.as_ref().map(|s| &**s), b.map(OsStr::new).map(|s| &*s));\n+}\n+\n+#[test]\n+fn test_set_var() {\n+    let n = make_rand_name();\n+    set_var(&n, \"VALUE\");\n+    eq(var_os(&n), Some(\"VALUE\"));\n+}\n+\n+#[test]\n+fn test_remove_var() {\n+    let n = make_rand_name();\n+    set_var(&n, \"VALUE\");\n+    remove_var(&n);\n+    eq(var_os(&n), None);\n+}\n+\n+#[test]\n+fn test_set_var_overwrite() {\n+    let n = make_rand_name();\n+    set_var(&n, \"1\");\n+    set_var(&n, \"2\");\n+    eq(var_os(&n), Some(\"2\"));\n+    set_var(&n, \"\");\n+    eq(var_os(&n), Some(\"\"));\n+}\n+\n+#[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n+fn test_var_big() {\n+    let mut s = \"\".to_string();\n+    let mut i = 0;\n+    while i < 100 {\n+        s.push_str(\"aaaaaaaaaa\");\n+        i += 1;\n+    }\n+    let n = make_rand_name();\n+    set_var(&n, &s);\n+    eq(var_os(&n), Some(&s));\n+}\n+\n+#[test]\n+#[cfg_attr(target_os = \"emscripten\", ignore)]\n+fn test_env_set_get_huge() {\n+    let n = make_rand_name();\n+    let s = repeat(\"x\").take(10000).collect::<String>();\n+    set_var(&n, &s);\n+    eq(var_os(&n), Some(&s));\n+    remove_var(&n);\n+    eq(var_os(&n), None);\n+}\n+\n+#[test]\n+fn test_env_set_var() {\n+    let n = make_rand_name();\n+\n+    let mut e = vars_os();\n+    set_var(&n, \"VALUE\");\n+    assert!(!e.any(|(k, v)| {\n+        &*k == &*n && &*v == \"VALUE\"\n+    }));\n+\n+    assert!(vars_os().any(|(k, v)| {\n+        &*k == &*n && &*v == \"VALUE\"\n+    }));\n+}"}, {"sha": "43ac697edced90f5df4f6a6ec185d582bace6f4c", "filename": "src/test/run-pass/macro-pat-neg-lit.rs", "status": "added", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fmacro-pat-neg-lit.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,35 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+macro_rules! enum_number {\n+    ($name:ident { $($variant:ident = $value:expr, )* }) => {\n+        enum $name {\n+            $($variant = $value,)*\n+        }\n+\n+        fn foo(value: i32) -> Option<$name> {\n+            match value {\n+                $( $value => Some($name::$variant), )*\n+                _ => None\n+            }\n+        }\n+    }\n+}\n+\n+enum_number!(Change {\n+    Down = -1,\n+    None = 0,\n+    Up = 1,\n+});\n+\n+fn main() {\n+    if let Some(Change::Down) = foo(-1) {} else { panic!() }\n+}\n+"}, {"sha": "aa9cf76617f6930761001dd74a6217e441122dbd", "filename": "src/test/run-pass/test-allow-fail-attr.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Ftest-allow-fail-attr.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2016 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// compile-flags: --test\n+#![feature(allow_fail)]\n+\n+#[test]\n+#[allow_fail]\n+fn test1() {\n+    panic!();\n+}\n+\n+#[test]\n+#[allow_fail]\n+fn test2() {\n+    assert!(true);\n+}"}, {"sha": "636370de302b64c710498a7556da0034ea5a27f0", "filename": "src/test/ui/lint/lint-group-style.stderr", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Flint%2Flint-group-style.stderr?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -4,64 +4,64 @@ error: function `CamelCase` should have a snake case name such as `camel_case`\n 14 | fn CamelCase() {}\n    | ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:11:9\n    |\n 11 | #![deny(bad_style)]\n    |         ^^^^^^^^^\n+   = note: #[deny(non_snake_case)] implied by #[deny(bad_style)]\n \n error: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:22:9\n    |\n 22 |         fn CamelCase() {}\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n 20 |     #[forbid(bad_style)]\n    |              ^^^^^^^^^\n+   = note: #[forbid(non_snake_case)] implied by #[forbid(bad_style)]\n \n error: static variable `bad` should have an upper case name such as `BAD`\n   --> $DIR/lint-group-style.rs:24:9\n    |\n 24 |         static bad: isize = 1;\n    |         ^^^^^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:20:14\n    |\n 20 |     #[forbid(bad_style)]\n    |              ^^^^^^^^^\n+   = note: #[forbid(non_upper_case_globals)] implied by #[forbid(bad_style)]\n \n warning: function `CamelCase` should have a snake case name such as `camel_case`\n   --> $DIR/lint-group-style.rs:30:9\n    |\n 30 |         fn CamelCase() {}\n    |         ^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n 28 |         #![warn(bad_style)]\n    |                 ^^^^^^^^^\n+   = note: #[warn(non_snake_case)] implied by #[warn(bad_style)]\n \n warning: type `snake_case` should have a camel case name such as `SnakeCase`\n   --> $DIR/lint-group-style.rs:32:9\n    |\n 32 |         struct snake_case;\n    |         ^^^^^^^^^^^^^^^^^^\n    |\n-   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n note: lint level defined here\n   --> $DIR/lint-group-style.rs:28:17\n    |\n 28 |         #![warn(bad_style)]\n    |                 ^^^^^^^^^\n+   = note: #[warn(non_camel_case_types)] implied by #[warn(bad_style)]\n \n error: aborting due to previous error(s)\n "}, {"sha": "8fd1b8de68787c71e2ffffc6df8de2a65f714a79", "filename": "src/test/ui/path-lookahead.stderr", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fpath-lookahead.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpath-lookahead.stderr?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -23,6 +23,4 @@ warning: function is never used: `no_parens`\n 20 | |   return <T as ToString>::to_string(&arg);\n 21 | | }\n    | |_^\n-   |\n-   = note: #[warn(dead_code)] on by default\n "}, {"sha": "1f72db1e894faa3d081728bc7505f3d6f10e0070", "filename": "src/test/ui/shadowed-type-parameter.rs", "status": "renamed", "additions": 0, "deletions": 0, "changes": 0, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fshadowed-type-parameter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fshadowed-type-parameter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed-type-parameter.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "previous_filename": "src/test/compile-fail/shadowed-type-parameter.rs"}, {"sha": "d77523299bc29c5cc2674b7b73abee5b54d358f4", "filename": "src/test/ui/shadowed-type-parameter.stderr", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fshadowed-type-parameter.stderr?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -0,0 +1,28 @@\n+error[E0194]: type parameter `T` shadows another type parameter of the same name\n+  --> $DIR/shadowed-type-parameter.rs:30:27\n+   |\n+27 | trait Bar<T> {\n+   |           - first `T` declared here\n+...\n+30 |     fn shadow_in_required<T>(&self);\n+   |                           ^ shadows another type parameter\n+\n+error[E0194]: type parameter `T` shadows another type parameter of the same name\n+  --> $DIR/shadowed-type-parameter.rs:33:27\n+   |\n+27 | trait Bar<T> {\n+   |           - first `T` declared here\n+...\n+33 |     fn shadow_in_provided<T>(&self) {}\n+   |                           ^ shadows another type parameter\n+\n+error[E0194]: type parameter `T` shadows another type parameter of the same name\n+  --> $DIR/shadowed-type-parameter.rs:18:25\n+   |\n+17 | impl<T> Foo<T> {\n+   |      - first `T` declared here\n+18 |     fn shadow_in_method<T>(&self) {}\n+   |                         ^ shadows another type parameter\n+\n+error: aborting due to previous error(s)\n+"}, {"sha": "edc150f65eafc0e7ca137ce8e27b0dfbf20fb590", "filename": "src/test/ui/span/issue-24690.stderr", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24690.stderr?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -4,33 +4,31 @@ error: variable `theTwo` should have a snake case name such as `the_two`\n 19 |     let theTwo = 2;\n    |         ^^^^^^\n    |\n-   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n 16 | #![deny(warnings)]\n    |         ^^^^^^^^\n+   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n \n error: variable `theOtherTwo` should have a snake case name such as `the_other_two`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n-   |\n-   = note: #[deny(non_snake_case)] implied by #[deny(warnings)]\n \n error: unused variable: `theOtherTwo`\n   --> $DIR/issue-24690.rs:20:9\n    |\n 20 |     let theOtherTwo = 2;\n    |         ^^^^^^^^^^^\n    |\n-   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n note: lint level defined here\n   --> $DIR/issue-24690.rs:16:9\n    |\n 16 | #![deny(warnings)]\n    |         ^^^^^^^^\n+   = note: #[deny(unused_variables)] implied by #[deny(warnings)]\n \n error: aborting due to previous error(s)\n "}, {"sha": "b4663b0ee6c00677313f7e3c590f1e3e0cdf6420", "filename": "src/tools/compiletest/src/main.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fmain.rs?ref=7acce3724d6ba5cb84d6eef6d6847f8573a1fe5a", "patch": "@@ -476,6 +476,7 @@ pub fn make_test(config: &Config, testpaths: &TestPaths) -> test::TestDescAndFn\n             name: make_test_name(config, testpaths),\n             ignore: ignore,\n             should_panic: should_panic,\n+            allow_fail: false,\n         },\n         testfn: make_test_closure(config, testpaths),\n     }"}]}