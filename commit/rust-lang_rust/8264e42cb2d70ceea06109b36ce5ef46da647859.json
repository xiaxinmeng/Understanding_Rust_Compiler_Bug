{"sha": "8264e42cb2d70ceea06109b36ce5ef46da647859", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyNjRlNDJjYjJkNzBjZWVhMDYxMDliMzZjZTVlZjQ2ZGE2NDc4NTk=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-07T17:17:37Z"}, "committer": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-20T17:23:58Z"}, "message": "Add documentation to Step and related methods on Builder.", "tree": {"sha": "88657088c32f444f2b61aa585f50bc87a21a6219", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/88657088c32f444f2b61aa585f50bc87a21a6219"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8264e42cb2d70ceea06109b36ce5ef46da647859", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8264e42cb2d70ceea06109b36ce5ef46da647859", "html_url": "https://github.com/rust-lang/rust/commit/8264e42cb2d70ceea06109b36ce5ef46da647859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8264e42cb2d70ceea06109b36ce5ef46da647859/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e62fdf3a595d030d50ce5ec51add8b1ff5ee1cce", "url": "https://api.github.com/repos/rust-lang/rust/commits/e62fdf3a595d030d50ce5ec51add8b1ff5ee1cce", "html_url": "https://github.com/rust-lang/rust/commit/e62fdf3a595d030d50ce5ec51add8b1ff5ee1cce"}], "stats": {"total": 38, "additions": 31, "deletions": 7}, "files": [{"sha": "e6432e8938c1c5615f682c6b9b3aea64e893918e", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 31, "deletions": 7, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/8264e42cb2d70ceea06109b36ce5ef46da647859/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8264e42cb2d70ceea06109b36ce5ef46da647859/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=8264e42cb2d70ceea06109b36ce5ef46da647859", "patch": "@@ -44,12 +44,20 @@ impl<'a> Deref for Builder<'a> {\n     }\n }\n \n-pub trait Step<'a>: Sized {\n-    type Output: Serialize + Deserialize<'a>;\n+pub trait Step<'a>: Serialize + Sized {\n+    /// The output type of this step. This is used in a few places to return a\n+    /// `PathBuf` when directories are created or to return a `Compiler` once\n+    /// it's been assembled.\n+    ///\n+    /// When possible, this should be used instead of implicitly creating files\n+    /// in a prearranged directory that will later be used by the build system.\n+    /// It's not always practical, however, since it makes avoiding rebuilds\n+    /// somewhat harder.\n+    type Output: Serialize + Deserialize<'a> + 'a;\n \n     const DEFAULT: bool = false;\n \n-    /// Run this rule for all hosts, and just the same hosts as the targets.\n+    /// Run this rule for all hosts without cross compiling.\n     const ONLY_HOSTS: bool = false;\n \n     /// Run this rule for all targets, but only with the native host.\n@@ -58,10 +66,22 @@ pub trait Step<'a>: Sized {\n     /// Only run this step with the build triple as host and target.\n     const ONLY_BUILD: bool = false;\n \n+    /// Primary function to execute this rule. Can call `builder.ensure(...)`\n+    /// with other steps to run those.\n     fn run(self, builder: &'a Builder) -> Self::Output;\n \n+    /// When bootstrap is passed a set of paths, this controls whether this rule\n+    /// will execute. However, it does not get called in a \"default\" context\n+    /// when we are not passed any paths; in that case, make_run is called\n+    /// directly.\n     fn should_run(_builder: &'a Builder, _path: &Path) -> bool { false }\n \n+    /// Build up a \"root\" rule, either as a default rule or from a path passed\n+    /// to us.\n+    ///\n+    /// When path is `None`, we are executing in a context where no paths were\n+    /// passed. When `./x.py build` is run, for example, this rule could get\n+    /// called if it is in the correct list below with a path of `None`.\n     fn make_run(\n         _builder: &'a Builder,\n         _path: Option<&Path>,\n@@ -145,6 +165,10 @@ impl<'a> Builder<'a> {\n             doc::Nomicon, doc::Reference);\n     }\n \n+    /// Obtain a compiler at a given stage and for a given host. Explictly does\n+    /// not take `Compiler` since all `Compiler` instances are meant to be\n+    /// obtained through this function, since it ensures that they are valid\n+    /// (i.e., built and assembled).\n     pub fn compiler(&'a self, stage: u32, host: &'a str) -> Compiler<'a> {\n         self.ensure(compile::Assemble { target_compiler: Compiler { stage, host } })\n     }\n@@ -426,10 +450,10 @@ impl<'a> Builder<'a> {\n         }\n     }\n \n-    pub fn ensure<S: Step<'a> + Serialize>(&'a self, step: S) -> S::Output\n-    where\n-        S::Output: 'a\n-    {\n+    /// Ensure that a given step is built, returning it's output. This will\n+    /// cache the step, so it is safe (and good!) to call this as often as\n+    /// needed to ensure that all dependencies are built.\n+    pub fn ensure<S: Step<'a>>(&'a self, step: S) -> S::Output {\n         let key = Cache::to_key(&step);\n         {\n             let mut stack = self.stack.borrow_mut();"}]}