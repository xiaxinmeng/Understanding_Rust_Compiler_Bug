{"sha": "58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU4YzY1OTFjZGUxYjhhNTRkYmMxYWQxYjdhYzY0MTMzODM1ZWMxNTQ=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-10T23:20:42Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-10-22T19:42:15Z"}, "message": "Point at associated type for some obligations", "tree": {"sha": "ba64f7bf50e9c354c726b5cd9997a116c5f3b424", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ba64f7bf50e9c354c726b5cd9997a116c5f3b424"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "html_url": "https://github.com/rust-lang/rust/commit/58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "57bfb8096295150c06559da10adc5629e445a4ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/57bfb8096295150c06559da10adc5629e445a4ac", "html_url": "https://github.com/rust-lang/rust/commit/57bfb8096295150c06559da10adc5629e445a4ac"}], "stats": {"total": 134, "additions": 93, "deletions": 41}, "files": [{"sha": "7ab907701bf046a7fd3b5e9fb64535f73d1f4655", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -2199,6 +2199,12 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                     );\n                 }\n             }\n+            ObligationCauseCode::AssocTypeBound(impl_span, orig) => {\n+                err.span_label(orig, \"associated type defined here\");\n+                if let Some(sp) = impl_span {\n+                    err.span_label(sp, \"in this `impl` item\");\n+                }\n+            }\n         }\n     }\n "}, {"sha": "9640a8a29d1e4ef70067e1deb4ec051ee4b44bd1", "filename": "src/librustc/traits/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fmod.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -268,6 +268,8 @@ pub enum ObligationCauseCode<'tcx> {\n \n     /// #[feature(trivial_bounds)] is not enabled\n     TrivialBound,\n+\n+    AssocTypeBound(/*impl*/ Option<Span>, /*original*/ Span),\n }\n \n // `ObligationCauseCode` is used a lot. Make sure it doesn't unintentionally get bigger."}, {"sha": "f81d4b3ca3049ee2ba6fe4f07696e1e2c8c8322d", "filename": "src/librustc/traits/structural_impls.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fstructural_impls.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -544,6 +544,7 @@ impl<'a, 'tcx> Lift<'tcx> for traits::ObligationCauseCode<'a> {\n             super::MethodReceiver => Some(super::MethodReceiver),\n             super::BlockTailExpression(id) => Some(super::BlockTailExpression(id)),\n             super::TrivialBound => Some(super::TrivialBound),\n+            super::AssocTypeBound(impl_sp, sp) => Some(super::AssocTypeBound(impl_sp, sp)),\n         }\n     }\n }"}, {"sha": "d81f5e407011466458bb6726cebd8edacf6b7f1e", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -3139,6 +3139,7 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n }\n \n+#[derive(Clone)]\n pub struct AssocItemsIterator<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     def_ids: &'tcx [DefId],"}, {"sha": "ce92fd82761bb815ea00030eb810e9d85c1f0e35", "filename": "src/librustc/ty/wf.rs", "status": "modified", "additions": 45, "deletions": 19, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Fty%2Fwf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc%2Fty%2Fwf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fwf.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -22,11 +22,14 @@ pub fn obligations<'a, 'tcx>(\n     ty: Ty<'tcx>,\n     span: Span,\n ) -> Option<Vec<traits::PredicateObligation<'tcx>>> {\n-    let mut wf = WfPredicates { infcx,\n-                                param_env,\n-                                body_id,\n-                                span,\n-                                out: vec![] };\n+    let mut wf = WfPredicates {\n+        infcx,\n+        param_env,\n+        body_id,\n+        span,\n+        out: vec![],\n+        item: None,\n+    };\n     if wf.compute(ty) {\n         debug!(\"wf::obligations({:?}, body_id={:?}) = {:?}\", ty, body_id, wf.out);\n         let result = wf.normalize();\n@@ -47,8 +50,9 @@ pub fn trait_obligations<'a, 'tcx>(\n     body_id: hir::HirId,\n     trait_ref: &ty::TraitRef<'tcx>,\n     span: Span,\n+    item: Option<&'tcx hir::Item>,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n-    let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![] };\n+    let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item };\n     wf.compute_trait_ref(trait_ref, Elaborate::All);\n     wf.normalize()\n }\n@@ -60,7 +64,7 @@ pub fn predicate_obligations<'a, 'tcx>(\n     predicate: &ty::Predicate<'tcx>,\n     span: Span,\n ) -> Vec<traits::PredicateObligation<'tcx>> {\n-    let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![] };\n+    let mut wf = WfPredicates { infcx, param_env, body_id, span, out: vec![], item: None };\n \n     // (*) ok to skip binders, because wf code is prepared for it\n     match *predicate {\n@@ -107,6 +111,7 @@ struct WfPredicates<'a, 'tcx> {\n     body_id: hir::HirId,\n     span: Span,\n     out: Vec<traits::PredicateObligation<'tcx>>,\n+    item: Option<&'tcx hir::Item>,\n }\n \n /// Controls whether we \"elaborate\" supertraits and so forth on the WF\n@@ -157,33 +162,54 @@ impl<'a, 'tcx> WfPredicates<'a, 'tcx> {\n                 .collect()\n     }\n \n-    /// Pushes the obligations required for `trait_ref` to be WF into\n-    /// `self.out`.\n+    /// Pushes the obligations required for `trait_ref` to be WF into `self.out`.\n     fn compute_trait_ref(&mut self, trait_ref: &ty::TraitRef<'tcx>, elaborate: Elaborate) {\n         let obligations = self.nominal_obligations(trait_ref.def_id, trait_ref.substs);\n-\n+        let assoc_items = self.infcx.tcx.associated_items(trait_ref.def_id);\n         let cause = self.cause(traits::MiscObligation);\n         let param_env = self.param_env;\n \n         if let Elaborate::All = elaborate {\n             let predicates = obligations.iter()\n-                                        .map(|obligation| obligation.predicate.clone())\n-                                        .collect();\n+                .map(|obligation| obligation.predicate.clone())\n+                .collect();\n             let implied_obligations = traits::elaborate_predicates(self.infcx.tcx, predicates);\n+            let item_span: Option<Span> = self.item.map(|i| i.span);\n+            let item = &self.item;\n             let implied_obligations = implied_obligations.map(|pred| {\n-                traits::Obligation::new(cause.clone(), param_env, pred)\n+                let mut cause = cause.clone();\n+                if let ty::Predicate::Trait(proj) = &pred {\n+                    if let (\n+                        ty::Projection(ty::ProjectionTy { item_def_id, .. }),\n+                        Some(hir::ItemKind::Impl(.., bounds)),\n+                     ) = (&proj.skip_binder().self_ty().kind, item.map(|i| &i.kind)) {\n+                        if let Some((bound, assoc_item)) = assoc_items.clone()\n+                            .filter(|i| i.def_id == *item_def_id)\n+                            .next()\n+                            .and_then(|assoc_item| bounds.iter()\n+                                    .filter(|b| b.ident == assoc_item.ident)\n+                                    .next()\n+                                    .map(|bound| (bound, assoc_item)))\n+                        {\n+                            cause.span = bound.span;\n+                            cause.code = traits::AssocTypeBound(item_span, assoc_item.ident.span);\n+                        }\n+                    }\n+                }\n+                traits::Obligation::new(cause, param_env, pred)\n             });\n             self.out.extend(implied_obligations);\n         }\n \n         self.out.extend(obligations);\n \n-        self.out.extend(\n-            trait_ref.substs.types()\n-                            .filter(|ty| !ty.has_escaping_bound_vars())\n-                            .map(|ty| traits::Obligation::new(cause.clone(),\n-                                                              param_env,\n-                                                              ty::Predicate::WellFormed(ty))));\n+        self.out.extend(trait_ref.substs.types()\n+            .filter(|ty| !ty.has_escaping_bound_vars())\n+            .map(|ty| traits::Obligation::new(\n+                cause.clone(),\n+                param_env,\n+                ty::Predicate::WellFormed(ty),\n+            )));\n     }\n \n     /// Pushes the obligations required for `trait_ref::Item` to be WF"}, {"sha": "b4b8d4566d577a48a40e4900a9449ea8a83e9a0f", "filename": "src/librustc_typeck/check/wfcheck.rs", "status": "modified", "additions": 13, "deletions": 10, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fwfcheck.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -430,7 +430,7 @@ fn check_item_type(\n \n fn check_impl<'tcx>(\n     tcx: TyCtxt<'tcx>,\n-    item: &hir::Item,\n+    item: &'tcx hir::Item,\n     ast_self_ty: &hir::Ty,\n     ast_trait_ref: &Option<hir::TraitRef>,\n ) {\n@@ -445,15 +445,18 @@ fn check_impl<'tcx>(\n                 // therefore don't need to be WF (the trait's `Self: Trait` predicate\n                 // won't hold).\n                 let trait_ref = fcx.tcx.impl_trait_ref(item_def_id).unwrap();\n-                let trait_ref =\n-                    fcx.normalize_associated_types_in(\n-                        ast_trait_ref.path.span, &trait_ref);\n-                let obligations =\n-                    ty::wf::trait_obligations(fcx,\n-                                              fcx.param_env,\n-                                              fcx.body_id,\n-                                              &trait_ref,\n-                                              ast_trait_ref.path.span);\n+                let trait_ref = fcx.normalize_associated_types_in(\n+                    ast_trait_ref.path.span,\n+                    &trait_ref,\n+                );\n+                let obligations = ty::wf::trait_obligations(\n+                    fcx,\n+                    fcx.param_env,\n+                    fcx.body_id,\n+                    &trait_ref,\n+                    ast_trait_ref.path.span,\n+                    Some(item),\n+                );\n                 for obligation in obligations {\n                     fcx.register_predicate(obligation);\n                 }"}, {"sha": "92083d88f1b82a8fc694c81d4bf3b63aeb1c456a", "filename": "src/test/ui/issues/issue-43784-associated-type.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -10,8 +10,8 @@ impl<T> Partial<T> for T::Assoc where\n {\n }\n \n-impl<T> Complete for T { //~ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n-    type Assoc = T;\n+impl<T> Complete for T {\n+    type Assoc = T; //~ ERROR the trait bound `T: std::marker::Copy` is not satisfied\n }\n \n fn main() {}"}, {"sha": "cfab66302cdcab71f670ed7c1f9a5dc727fec76e", "filename": "src/test/ui/issues/issue-43784-associated-type.stderr", "status": "modified", "additions": 12, "deletions": 5, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-43784-associated-type.stderr?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -1,10 +1,17 @@\n error[E0277]: the trait bound `T: std::marker::Copy` is not satisfied\n-  --> $DIR/issue-43784-associated-type.rs:13:9\n+  --> $DIR/issue-43784-associated-type.rs:14:5\n    |\n-LL | impl<T> Complete for T {\n-   |      -  ^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n-   |      |\n-   |      help: consider restricting this bound: `T: std::marker::Copy`\n+LL |       type Assoc: Partial<Self>;\n+   |            ----- associated type defined here\n+...\n+LL | / impl<T> Complete for T {\n+   | |      - help: consider restricting this bound: `T: std::marker::Copy`\n+LL | |     type Assoc = T;\n+   | |     ^^^^^^^^^^^^^^^ the trait `std::marker::Copy` is not implemented for `T`\n+LL | | }\n+   | |_- in this `impl` item\n+   |\n+   = help: consider adding a `where T: std::marker::Copy` bound\n \n error: aborting due to previous error\n "}, {"sha": "cbddef082be6732465e712fc4a213ecd20134c36", "filename": "src/test/ui/traits/cycle-cache-err-60010.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.rs?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -27,8 +27,8 @@ struct SalsaStorage {\n     _parse: <ParseQuery as Query<RootDatabase>>::Data, //~ ERROR overflow\n }\n \n-impl Database for RootDatabase { //~ ERROR overflow\n-    type Storage = SalsaStorage;\n+impl Database for RootDatabase {\n+    type Storage = SalsaStorage; //~ ERROR overflow\n }\n impl HasQueryGroup for RootDatabase {}\n impl<DB> Query<DB> for ParseQuery"}, {"sha": "a7b8dd05527a5a46606a64fd14cb1c6f96896b61", "filename": "src/test/ui/traits/cycle-cache-err-60010.stderr", "status": "modified", "additions": 9, "deletions": 3, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/58c6591cde1b8a54dbc1ad1b7ac64133835ec154/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fcycle-cache-err-60010.stderr?ref=58c6591cde1b8a54dbc1ad1b7ac64133835ec154", "patch": "@@ -7,10 +7,16 @@ LL |     _parse: <ParseQuery as Query<RootDatabase>>::Data,\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n \n error[E0275]: overflow evaluating the requirement `RootDatabase: SourceDatabase`\n-  --> $DIR/cycle-cache-err-60010.rs:30:6\n+  --> $DIR/cycle-cache-err-60010.rs:31:5\n    |\n-LL | impl Database for RootDatabase {\n-   |      ^^^^^^^^\n+LL |       type Storage;\n+   |            ------- associated type defined here\n+...\n+LL | / impl Database for RootDatabase {\n+LL | |     type Storage = SalsaStorage;\n+   | |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+LL | | }\n+   | |_- in this `impl` item\n    |\n    = note: required because of the requirements on the impl of `Query<RootDatabase>` for `ParseQuery`\n    = note: required because it appears within the type `SalsaStorage`"}]}