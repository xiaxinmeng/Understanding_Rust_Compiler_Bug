{"sha": "3bec2be9de400dc044ae924cb0ae36faa454d111", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNiZWMyYmU5ZGU0MDBkYzA0NGFlOTI0Y2IwYWUzNmZhYTQ1NGQxMTE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-10T17:25:37Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-05-10T17:27:12Z"}, "message": "req -> lsp_ext", "tree": {"sha": "4112350b871554073f17ba556f2f557c39e578c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4112350b871554073f17ba556f2f557c39e578c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3bec2be9de400dc044ae924cb0ae36faa454d111", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3bec2be9de400dc044ae924cb0ae36faa454d111", "html_url": "https://github.com/rust-lang/rust/commit/3bec2be9de400dc044ae924cb0ae36faa454d111", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3bec2be9de400dc044ae924cb0ae36faa454d111/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bec3bf701c9e7d0a99c5a89e5c95ce543ce21dbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/bec3bf701c9e7d0a99c5a89e5c95ce543ce21dbe", "html_url": "https://github.com/rust-lang/rust/commit/bec3bf701c9e7d0a99c5a89e5c95ce543ce21dbe"}], "stats": {"total": 111, "additions": 58, "deletions": 53}, "files": [{"sha": "57d0e92188e30a44672a8d49bcbcf4068c052e57", "filename": "crates/rust-analyzer/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flib.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -24,8 +24,7 @@ mod to_proto;\n mod from_proto;\n mod main_loop;\n mod markdown;\n-// TODO: rename to lsp_ext\n-pub mod req;\n+pub mod lsp_ext;\n pub mod config;\n mod world;\n mod diagnostics;"}, {"sha": "313a8c7697e636becc22df52cc42dae278754597", "filename": "crates/rust-analyzer/src/lsp_ext.rs", "status": "renamed", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Flsp_ext.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -1,12 +1,12 @@\n-//! Defines `rust-analyzer` specific custom messages.\n+//! rust-analyzer extensions to the LSP.\n+\n+use std::path::PathBuf;\n \n use lsp_types::request::Request;\n use lsp_types::{Location, Position, Range, TextDocumentIdentifier};\n use rustc_hash::FxHashMap;\n use serde::{Deserialize, Serialize};\n \n-use std::path::PathBuf;\n-\n pub enum AnalyzerStatus {}\n \n impl Request for AnalyzerStatus {", "previous_filename": "crates/rust-analyzer/src/req.rs"}, {"sha": "fa72a9cc64d2353357c812deb091ed998c9a7a95", "filename": "crates/rust-analyzer/src/main_loop.rs", "status": "modified", "additions": 12, "deletions": 13, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -38,12 +38,11 @@ use threadpool::ThreadPool;\n use crate::{\n     config::{Config, FilesWatcher},\n     diagnostics::DiagnosticTask,\n-    from_proto,\n+    from_proto, lsp_ext,\n     main_loop::{\n         pending_requests::{PendingRequest, PendingRequests},\n         subscriptions::Subscriptions,\n     },\n-    req,\n     world::{WorldSnapshot, WorldState},\n     Result,\n };\n@@ -502,26 +501,27 @@ fn on_request(\n         request_received,\n     };\n     pool_dispatcher\n-        .on_sync::<req::CollectGarbage>(|s, ()| Ok(s.collect_garbage()))?\n-        .on_sync::<req::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n-        .on_sync::<req::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n+        .on_sync::<lsp_ext::CollectGarbage>(|s, ()| Ok(s.collect_garbage()))?\n+        .on_sync::<lsp_ext::JoinLines>(|s, p| handlers::handle_join_lines(s.snapshot(), p))?\n+        .on_sync::<lsp_ext::OnEnter>(|s, p| handlers::handle_on_enter(s.snapshot(), p))?\n         .on_sync::<lsp_types::request::SelectionRangeRequest>(|s, p| {\n             handlers::handle_selection_range(s.snapshot(), p)\n         })?\n-        .on_sync::<req::FindMatchingBrace>(|s, p| {\n+        .on_sync::<lsp_ext::FindMatchingBrace>(|s, p| {\n             handlers::handle_find_matching_brace(s.snapshot(), p)\n         })?\n-        .on::<req::AnalyzerStatus>(handlers::handle_analyzer_status)?\n-        .on::<req::SyntaxTree>(handlers::handle_syntax_tree)?\n-        .on::<req::ExpandMacro>(handlers::handle_expand_macro)?\n+        .on::<lsp_ext::AnalyzerStatus>(handlers::handle_analyzer_status)?\n+        .on::<lsp_ext::SyntaxTree>(handlers::handle_syntax_tree)?\n+        .on::<lsp_ext::ExpandMacro>(handlers::handle_expand_macro)?\n+        .on::<lsp_ext::ParentModule>(handlers::handle_parent_module)?\n+        .on::<lsp_ext::Runnables>(handlers::handle_runnables)?\n+        .on::<lsp_ext::InlayHints>(handlers::handle_inlay_hints)?\n         .on::<lsp_types::request::OnTypeFormatting>(handlers::handle_on_type_formatting)?\n         .on::<lsp_types::request::DocumentSymbolRequest>(handlers::handle_document_symbol)?\n         .on::<lsp_types::request::WorkspaceSymbol>(handlers::handle_workspace_symbol)?\n         .on::<lsp_types::request::GotoDefinition>(handlers::handle_goto_definition)?\n         .on::<lsp_types::request::GotoImplementation>(handlers::handle_goto_implementation)?\n         .on::<lsp_types::request::GotoTypeDefinition>(handlers::handle_goto_type_definition)?\n-        .on::<req::ParentModule>(handlers::handle_parent_module)?\n-        .on::<req::Runnables>(handlers::handle_runnables)?\n         .on::<lsp_types::request::Completion>(handlers::handle_completion)?\n         .on::<lsp_types::request::CodeActionRequest>(handlers::handle_code_action)?\n         .on::<lsp_types::request::CodeLensRequest>(handlers::handle_code_lens)?\n@@ -534,7 +534,6 @@ fn on_request(\n         .on::<lsp_types::request::References>(handlers::handle_references)?\n         .on::<lsp_types::request::Formatting>(handlers::handle_formatting)?\n         .on::<lsp_types::request::DocumentHighlightRequest>(handlers::handle_document_highlight)?\n-        .on::<req::InlayHints>(handlers::handle_inlay_hints)?\n         .on::<lsp_types::request::CallHierarchyPrepare>(handlers::handle_call_hierarchy_prepare)?\n         .on::<lsp_types::request::CallHierarchyIncomingCalls>(\n             handlers::handle_call_hierarchy_incoming,\n@@ -546,7 +545,7 @@ fn on_request(\n         .on::<lsp_types::request::SemanticTokensRangeRequest>(\n             handlers::handle_semantic_tokens_range,\n         )?\n-        .on::<req::Ssr>(handlers::handle_ssr)?\n+        .on::<lsp_ext::Ssr>(handlers::handle_ssr)?\n         .finish();\n     Ok(())\n }"}, {"sha": "be8688bc3953f0a309805176446efe39c9043231", "filename": "crates/rust-analyzer/src/main_loop/handlers.rs", "status": "modified", "additions": 22, "deletions": 16, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fmain_loop%2Fhandlers.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -34,7 +34,7 @@ use crate::{\n     config::RustfmtConfig,\n     diagnostics::DiagnosticTask,\n     from_json, from_proto,\n-    req::{self, InlayHint, InlayHintsParams},\n+    lsp_ext::{self, InlayHint, InlayHintsParams},\n     to_proto,\n     world::WorldSnapshot,\n     LspError, Result,\n@@ -52,7 +52,10 @@ pub fn handle_analyzer_status(world: WorldSnapshot, _: ()) -> Result<String> {\n     Ok(buf)\n }\n \n-pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -> Result<String> {\n+pub fn handle_syntax_tree(\n+    world: WorldSnapshot,\n+    params: lsp_ext::SyntaxTreeParams,\n+) -> Result<String> {\n     let _p = profile(\"handle_syntax_tree\");\n     let id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(id)?;\n@@ -63,8 +66,8 @@ pub fn handle_syntax_tree(world: WorldSnapshot, params: req::SyntaxTreeParams) -\n \n pub fn handle_expand_macro(\n     world: WorldSnapshot,\n-    params: req::ExpandMacroParams,\n-) -> Result<Option<req::ExpandedMacro>> {\n+    params: lsp_ext::ExpandMacroParams,\n+) -> Result<Option<lsp_ext::ExpandedMacro>> {\n     let _p = profile(\"handle_expand_macro\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n@@ -74,7 +77,7 @@ pub fn handle_expand_macro(\n         None => Ok(None),\n         Some(offset) => {\n             let res = world.analysis().expand_macro(FilePosition { file_id, offset })?;\n-            Ok(res.map(|it| req::ExpandedMacro { name: it.name, expansion: it.expansion }))\n+            Ok(res.map(|it| lsp_ext::ExpandedMacro { name: it.name, expansion: it.expansion }))\n         }\n     }\n }\n@@ -124,7 +127,7 @@ pub fn handle_selection_range(\n \n pub fn handle_find_matching_brace(\n     world: WorldSnapshot,\n-    params: req::FindMatchingBraceParams,\n+    params: lsp_ext::FindMatchingBraceParams,\n ) -> Result<Vec<Position>> {\n     let _p = profile(\"handle_find_matching_brace\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n@@ -146,8 +149,8 @@ pub fn handle_find_matching_brace(\n \n pub fn handle_join_lines(\n     world: WorldSnapshot,\n-    params: req::JoinLinesParams,\n-) -> Result<req::SourceChange> {\n+    params: lsp_ext::JoinLinesParams,\n+) -> Result<lsp_ext::SourceChange> {\n     let _p = profile(\"handle_join_lines\");\n     let frange = from_proto::file_range(&world, params.text_document, params.range)?;\n     let source_change = world.analysis().join_lines(frange)?;\n@@ -157,7 +160,7 @@ pub fn handle_join_lines(\n pub fn handle_on_enter(\n     world: WorldSnapshot,\n     params: lsp_types::TextDocumentPositionParams,\n-) -> Result<Option<req::SourceChange>> {\n+) -> Result<Option<lsp_ext::SourceChange>> {\n     let _p = profile(\"handle_on_enter\");\n     let position = from_proto::file_position(&world, params)?;\n     match world.analysis().on_enter(position)? {\n@@ -388,8 +391,8 @@ pub fn handle_parent_module(\n \n pub fn handle_runnables(\n     world: WorldSnapshot,\n-    params: req::RunnablesParams,\n-) -> Result<Vec<req::Runnable>> {\n+    params: lsp_ext::RunnablesParams,\n+) -> Result<Vec<lsp_ext::Runnable>> {\n     let _p = profile(\"handle_runnables\");\n     let file_id = from_proto::file_id(&world, &params.text_document.uri)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n@@ -419,7 +422,7 @@ pub fn handle_runnables(\n     match cargo_spec {\n         Some(spec) => {\n             for &cmd in [\"check\", \"test\"].iter() {\n-                res.push(req::Runnable {\n+                res.push(lsp_ext::Runnable {\n                     range: Default::default(),\n                     label: format!(\"cargo {} -p {}\", cmd, spec.package),\n                     bin: \"cargo\".to_string(),\n@@ -431,7 +434,7 @@ pub fn handle_runnables(\n             }\n         }\n         None => {\n-            res.push(req::Runnable {\n+            res.push(lsp_ext::Runnable {\n                 range: Default::default(),\n                 label: \"cargo check --workspace\".to_string(),\n                 bin: \"cargo\".to_string(),\n@@ -972,7 +975,10 @@ pub fn handle_document_highlight(\n     Ok(Some(res))\n }\n \n-pub fn handle_ssr(world: WorldSnapshot, params: req::SsrParams) -> Result<req::SourceChange> {\n+pub fn handle_ssr(\n+    world: WorldSnapshot,\n+    params: lsp_ext::SsrParams,\n+) -> Result<lsp_ext::SourceChange> {\n     let _p = profile(\"handle_ssr\");\n     let source_change =\n         world.analysis().structural_search_replace(&params.query, params.parse_only)??;\n@@ -1003,7 +1009,7 @@ fn to_lsp_runnable(\n     world: &WorldSnapshot,\n     file_id: FileId,\n     runnable: Runnable,\n-) -> Result<req::Runnable> {\n+) -> Result<lsp_ext::Runnable> {\n     let spec = CargoTargetSpec::for_file(world, file_id)?;\n     let (args, extra_args) = CargoTargetSpec::runnable_args(spec, &runnable.kind)?;\n     let line_index = world.analysis().file_line_index(file_id)?;\n@@ -1014,7 +1020,7 @@ fn to_lsp_runnable(\n         RunnableKind::DocTest { test_id, .. } => format!(\"doctest {}\", test_id),\n         RunnableKind::Bin => \"run binary\".to_string(),\n     };\n-    Ok(req::Runnable {\n+    Ok(lsp_ext::Runnable {\n         range: to_proto::range(&line_index, runnable.range),\n         label,\n         bin: \"cargo\".to_string(),"}, {"sha": "4500d49827e3dd04bb9d7e1d4123c20de1b7b7cc", "filename": "crates/rust-analyzer/src/to_proto.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fto_proto.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -10,7 +10,7 @@ use ra_syntax::{SyntaxKind, TextRange, TextSize};\n use ra_text_edit::{Indel, TextEdit};\n use ra_vfs::LineEndings;\n \n-use crate::{req, semantic_tokens, world::WorldSnapshot, Result};\n+use crate::{lsp_ext, semantic_tokens, world::WorldSnapshot, Result};\n \n pub(crate) fn position(line_index: &LineIndex, offset: TextSize) -> lsp_types::Position {\n     let line_col = line_index.line_col(offset);\n@@ -215,14 +215,14 @@ pub(crate) fn signature_information(\n     lsp_types::SignatureInformation { label, documentation, parameters: Some(parameters) }\n }\n \n-pub(crate) fn inlay_int(line_index: &LineIndex, inlay_hint: InlayHint) -> req::InlayHint {\n-    req::InlayHint {\n+pub(crate) fn inlay_int(line_index: &LineIndex, inlay_hint: InlayHint) -> lsp_ext::InlayHint {\n+    lsp_ext::InlayHint {\n         label: inlay_hint.label.to_string(),\n         range: range(line_index, inlay_hint.range),\n         kind: match inlay_hint.kind {\n-            InlayKind::ParameterHint => req::InlayKind::ParameterHint,\n-            InlayKind::TypeHint => req::InlayKind::TypeHint,\n-            InlayKind::ChainingHint => req::InlayKind::ChainingHint,\n+            InlayKind::ParameterHint => lsp_ext::InlayKind::ParameterHint,\n+            InlayKind::TypeHint => lsp_ext::InlayKind::TypeHint,\n+            InlayKind::ChainingHint => lsp_ext::InlayKind::ChainingHint,\n         },\n     }\n }\n@@ -478,7 +478,7 @@ pub(crate) fn resource_op(\n pub(crate) fn source_change(\n     world: &WorldSnapshot,\n     source_change: SourceChange,\n-) -> Result<req::SourceChange> {\n+) -> Result<lsp_ext::SourceChange> {\n     let cursor_position = match source_change.cursor_position {\n         None => None,\n         Some(pos) => {\n@@ -513,7 +513,7 @@ pub(crate) fn source_change(\n         changes: None,\n         document_changes: Some(lsp_types::DocumentChanges::Operations(document_changes)),\n     };\n-    Ok(req::SourceChange { label: source_change.label, workspace_edit, cursor_position })\n+    Ok(lsp_ext::SourceChange { label: source_change.label, workspace_edit, cursor_position })\n }\n \n pub fn call_hierarchy_item("}, {"sha": "5011cc2734dc2234e72f298b40de001193976bf0", "filename": "crates/rust-analyzer/tests/heavy_tests/main.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fmain.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -3,15 +3,16 @@ mod support;\n use std::{collections::HashMap, path::PathBuf, time::Instant};\n \n use lsp_types::{\n-    CodeActionContext, DidOpenTextDocumentParams, DocumentFormattingParams, FormattingOptions,\n-    GotoDefinitionParams, HoverParams, PartialResultParams, Position, Range, TextDocumentItem,\n-    TextDocumentPositionParams, WorkDoneProgressParams,\n-};\n-use rust_analyzer::req::{\n-    CodeActionParams, CodeActionRequest, Completion, CompletionParams, DidOpenTextDocument,\n-    Formatting, GotoDefinition, GotoTypeDefinition, HoverRequest, OnEnter, Runnables,\n-    RunnablesParams,\n+    notification::DidOpenTextDocument,\n+    request::{\n+        CodeActionRequest, Completion, Formatting, GotoDefinition, GotoTypeDefinition, HoverRequest,\n+    },\n+    CodeActionContext, CodeActionParams, CompletionParams, DidOpenTextDocumentParams,\n+    DocumentFormattingParams, FormattingOptions, GotoDefinitionParams, HoverParams,\n+    PartialResultParams, Position, Range, TextDocumentItem, TextDocumentPositionParams,\n+    WorkDoneProgressParams,\n };\n+use rust_analyzer::lsp_ext::{OnEnter, Runnables, RunnablesParams};\n use serde_json::json;\n use tempfile::TempDir;\n use test_utils::skip_slow_tests;"}, {"sha": "8756ad4a3c8a8b0c02b587f928ff93e9eebb119a", "filename": "crates/rust-analyzer/tests/heavy_tests/support.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3bec2be9de400dc044ae924cb0ae36faa454d111/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Ftests%2Fheavy_tests%2Fsupport.rs?ref=3bec2be9de400dc044ae924cb0ae36faa454d111", "patch": "@@ -13,15 +13,15 @@ use lsp_types::{\n     request::Shutdown,\n     DidOpenTextDocumentParams, TextDocumentIdentifier, TextDocumentItem, Url, WorkDoneProgress,\n };\n+use lsp_types::{ProgressParams, ProgressParamsValue};\n use serde::Serialize;\n use serde_json::{to_string_pretty, Value};\n use tempfile::TempDir;\n use test_utils::{find_mismatch, parse_fixture};\n \n-use req::{ProgressParams, ProgressParamsValue};\n use rust_analyzer::{\n     config::{ClientCapsConfig, Config},\n-    main_loop, req,\n+    main_loop,\n };\n \n pub struct Project<'a> {\n@@ -206,7 +206,7 @@ impl Server {\n             Message::Notification(n) if n.method == \"$/progress\" => {\n                 match n.clone().extract::<ProgressParams>(\"$/progress\").unwrap() {\n                     ProgressParams {\n-                        token: req::ProgressToken::String(ref token),\n+                        token: lsp_types::ProgressToken::String(ref token),\n                         value: ProgressParamsValue::WorkDone(WorkDoneProgress::End(_)),\n                     } if token == \"rustAnalyzer/startup\" => true,\n                     _ => false,"}]}