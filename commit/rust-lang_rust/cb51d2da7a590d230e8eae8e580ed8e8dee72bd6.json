{"sha": "cb51d2da7a590d230e8eae8e580ed8e8dee72bd6", "node_id": "C_kwDOAAsO6NoAKGNiNTFkMmRhN2E1OTBkMjMwZThlYWU4ZTU4MGVkOGU4ZGVlNzJiZDY", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:01:44Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-02-26T10:30:27Z"}, "message": "Avoid more calls to typeck.", "tree": {"sha": "0bdd4eeb983d419204961e14cdbc299f68b4b24c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0bdd4eeb983d419204961e14cdbc299f68b4b24c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6", "html_url": "https://github.com/rust-lang/rust/commit/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "url": "https://api.github.com/repos/rust-lang/rust/commits/0915d55d871e16b2fcb2fcf2759cd2b649b014e7", "html_url": "https://github.com/rust-lang/rust/commit/0915d55d871e16b2fcb2fcf2759cd2b649b014e7"}], "stats": {"total": 27, "additions": 15, "deletions": 12}, "files": [{"sha": "15d7613a812deed5d74d9ae928f1216381aa4523", "filename": "compiler/rustc_borrowck/src/universal_regions.rs", "status": "modified", "additions": 15, "deletions": 12, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb51d2da7a590d230e8eae8e580ed8e8dee72bd6/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Funiversal_regions.rs?ref=cb51d2da7a590d230e8eae8e580ed8e8dee72bd6", "patch": "@@ -18,7 +18,7 @@ use rustc_errors::Diagnostic;\n use rustc_hir as hir;\n use rustc_hir::def_id::{DefId, LocalDefId};\n use rustc_hir::lang_items::LangItem;\n-use rustc_hir::{BodyOwnerKind, HirId};\n+use rustc_hir::BodyOwnerKind;\n use rustc_index::vec::{Idx, IndexVec};\n use rustc_infer::infer::NllRegionVariableOrigin;\n use rustc_middle::ty::fold::TypeFoldable;\n@@ -231,9 +231,7 @@ impl<'tcx> UniversalRegions<'tcx> {\n         mir_def: ty::WithOptConstParam<LocalDefId>,\n         param_env: ty::ParamEnv<'tcx>,\n     ) -> Self {\n-        let tcx = infcx.tcx;\n-        let mir_hir_id = tcx.hir().local_def_id_to_hir_id(mir_def.did);\n-        UniversalRegionsBuilder { infcx, mir_def, mir_hir_id, param_env }.build()\n+        UniversalRegionsBuilder { infcx, mir_def, param_env }.build()\n     }\n \n     /// Given a reference to a closure type, extracts all the values\n@@ -390,7 +388,6 @@ impl<'tcx> UniversalRegions<'tcx> {\n struct UniversalRegionsBuilder<'cx, 'tcx> {\n     infcx: &'cx BorrowckInferCtxt<'cx, 'tcx>,\n     mir_def: ty::WithOptConstParam<LocalDefId>,\n-    mir_hir_id: HirId,\n     param_env: ty::ParamEnv<'tcx>,\n }\n \n@@ -560,12 +557,7 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n \n         match tcx.hir().body_owner_kind(self.mir_def.did) {\n             BodyOwnerKind::Closure | BodyOwnerKind::Fn => {\n-                let defining_ty = if self.mir_def.did.to_def_id() == typeck_root_def_id {\n-                    tcx.type_of(typeck_root_def_id).subst_identity()\n-                } else {\n-                    let tables = tcx.typeck(self.mir_def.did);\n-                    tables.node_type(self.mir_hir_id)\n-                };\n+                let defining_ty = tcx.type_of(self.mir_def.def_id_for_type_of()).subst_identity();\n \n                 debug!(\"defining_ty (pre-replacement): {:?}\", defining_ty);\n \n@@ -594,7 +586,18 @@ impl<'cx, 'tcx> UniversalRegionsBuilder<'cx, 'tcx> {\n                         self.infcx.replace_free_regions_with_nll_infer_vars(FR, identity_substs);\n                     DefiningTy::Const(self.mir_def.did.to_def_id(), substs)\n                 } else {\n-                    let ty = tcx.typeck(self.mir_def.did).node_type(self.mir_hir_id);\n+                    // FIXME this line creates a dependency between borrowck and typeck.\n+                    //\n+                    // This is required for `AscribeUserType` canonical query, which will call\n+                    // `type_of(inline_const_def_id)`. That `type_of` would inject erased lifetimes\n+                    // into borrowck, which is ICE #78174.\n+                    //\n+                    // As a workaround, inline consts have an additional generic param (`ty`\n+                    // below), so that `type_of(inline_const_def_id).substs(substs)` uses the\n+                    // proper type with NLL infer vars.\n+                    let ty = tcx\n+                        .typeck(self.mir_def.did)\n+                        .node_type(tcx.local_def_id_to_hir_id(self.mir_def.did));\n                     let substs = InlineConstSubsts::new(\n                         tcx,\n                         InlineConstSubstsParts { parent_substs: identity_substs, ty },"}]}