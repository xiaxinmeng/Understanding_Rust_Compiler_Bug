{"sha": "7deee6daf58cdd9487680d964871436c146656a3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdkZWVlNmRhZjU4Y2RkOTQ4NzY4MGQ5NjQ4NzE0MzZjMTQ2NjU2YTM=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-11T22:06:17Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-09-11T22:06:17Z"}, "message": "Format array literals", "tree": {"sha": "017928f7e5b48e8b93414df0357745a594d37d5c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/017928f7e5b48e8b93414df0357745a594d37d5c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7deee6daf58cdd9487680d964871436c146656a3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7deee6daf58cdd9487680d964871436c146656a3", "html_url": "https://github.com/rust-lang/rust/commit/7deee6daf58cdd9487680d964871436c146656a3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7deee6daf58cdd9487680d964871436c146656a3/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "764793b2e655b14f1aa98e8e966835e0cc5d3914", "url": "https://api.github.com/repos/rust-lang/rust/commits/764793b2e655b14f1aa98e8e966835e0cc5d3914", "html_url": "https://github.com/rust-lang/rust/commit/764793b2e655b14f1aa98e8e966835e0cc5d3914"}], "stats": {"total": 118, "additions": 117, "deletions": 1}, "files": [{"sha": "68b5bd7d487ac617a2a6f194cc88708356be6dd2", "filename": "src/expr.rs", "status": "modified", "additions": 56, "deletions": 1, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/7deee6daf58cdd9487680d964871436c146656a3/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7deee6daf58cdd9487680d964871436c146656a3/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=7deee6daf58cdd9487680d964871436c146656a3", "patch": "@@ -31,12 +31,20 @@ use syntax::visit::Visitor;\n impl Rewrite for ast::Expr {\n     fn rewrite(&self, context: &RewriteContext, width: usize, offset: usize) -> Option<String> {\n         match self.node {\n+            ast::Expr_::ExprVec(ref expr_vec) => {\n+                rewrite_array(expr_vec.iter().map(|e| &**e), self.span, context, width, offset)\n+            }\n             ast::Expr_::ExprLit(ref l) => {\n                 match l.node {\n                     ast::Lit_::LitStr(_, ast::StrStyle::CookedStr) => {\n                         rewrite_string_lit(context, l.span, width, offset)\n                     }\n-                    _ => Some(context.snippet(self.span)),\n+                    _ => {\n+                        wrap_str(context.snippet(self.span),\n+                                 context.config.max_width,\n+                                 width,\n+                                 offset)\n+                    }\n                 }\n             }\n             ast::Expr_::ExprCall(ref callee, ref args) => {\n@@ -151,6 +159,53 @@ impl Rewrite for ast::Expr {\n     }\n }\n \n+fn rewrite_array<'a, I>(expr_iter: I,\n+                        span: Span,\n+                        context: &RewriteContext,\n+                        width: usize,\n+                        offset: usize)\n+                        -> Option<String>\n+    where I: Iterator<Item = &'a ast::Expr> + ExactSizeIterator\n+{\n+    // 2 for brackets;\n+    let max_item_width = try_opt!(width.checked_sub(2));\n+    let items = itemize_list(context.codemap,\n+                             expr_iter,\n+                             \"]\",\n+                             |item| item.span.lo,\n+                             |item| item.span.hi,\n+                             // 1 = [\n+                             // FIXME(#133): itemize_list doesn't support\n+                             // rewrite failure. This may not be its\n+                             // responsibility, but that of write_list.\n+                             |item| {\n+                                 item.rewrite(context, max_item_width, offset + 1)\n+                                     .unwrap_or_else(|| context.snippet(item.span))\n+                             },\n+                             span_after(span, \"[\", context.codemap),\n+                             span.hi)\n+                    .collect::<Vec<_>>();\n+\n+    let tactic = if items.iter().any(|li| li.item.len() > 10 || li.is_multiline()) {\n+        ListTactic::HorizontalVertical\n+    } else {\n+        ListTactic::Mixed\n+    };\n+\n+    let fmt = ListFormatting {\n+        tactic: tactic,\n+        separator: \",\",\n+        trailing_separator: SeparatorTactic::Never,\n+        indent: offset + 1,\n+        h_width: max_item_width,\n+        v_width: max_item_width,\n+        ends_with_newline: false,\n+    };\n+    let list_str = try_opt!(write_list(&items, &fmt));\n+\n+    Some(format!(\"[{}]\", list_str))\n+}\n+\n // This functions is pretty messy because of the wrapping and unwrapping of\n // expressions into and from blocks. See rust issue #27872.\n fn rewrite_closure(capture: ast::CaptureClause,"}, {"sha": "faa0d3775c7197a3eef4a91708bdf5ce3335963a", "filename": "tests/source/expr.rs", "status": "modified", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/7deee6daf58cdd9487680d964871436c146656a3/tests%2Fsource%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7deee6daf58cdd9487680d964871436c146656a3/tests%2Fsource%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fsource%2Fexpr.rs?ref=7deee6daf58cdd9487680d964871436c146656a3", "patch": "@@ -129,3 +129,47 @@ fn issue184(source: &str) {\n         }\n     }\n }\n+\n+fn arrays() {\n+    let x = [0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0,\n+         7,\n+         8,\n+         9,\n+         0,\n+         1,\n+         2,\n+         3,\n+         4,\n+         5,\n+         6,\n+         7,\n+         8,\n+         9,\n+         0];\n+\n+    let y = [/* comment */ 1, 2 /* post comment */, 3];\n+\n+    let z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx, yyyyyyyyyyyyyyyyyyyyyyyyyyy, zzzzzzzzzzzzzzzzzz, q];\n+\n+    [ 1 +   3, 4 ,  5, 6, 7, 7, fncall::<Vec<_>>(3-1)]\n+}"}, {"sha": "bb629f12126664aab9f72b1039b420005c3f13b5", "filename": "tests/target/expr.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/7deee6daf58cdd9487680d964871436c146656a3/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7deee6daf58cdd9487680d964871436c146656a3/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=7deee6daf58cdd9487680d964871436c146656a3", "patch": "@@ -166,3 +166,20 @@ fn issue184(source: &str) {\n         }\n     }\n }\n+\n+fn arrays() {\n+    let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3, 4,\n+             5, 6, 7, 8, 9, 0];\n+\n+    let y = [// comment\n+             1,\n+             2, // post comment\n+             3];\n+\n+    let z = [xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx,\n+             yyyyyyyyyyyyyyyyyyyyyyyyyyy,\n+             zzzzzzzzzzzzzzzzzz,\n+             q];\n+\n+    [1 + 3, 4, 5, 6, 7, 7, fncall::<Vec<_>>(3 - 1)]\n+}"}]}