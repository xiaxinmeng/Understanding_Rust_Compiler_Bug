{"sha": "362f23641a737bb16b85b2da091c222bc7358dc4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2MmYyMzY0MWE3MzdiYjE2Yjg1YjJkYTA5MWMyMjJiYzczNThkYzQ=", "commit": {"author": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-02-29T04:43:39Z"}, "committer": {"name": "Patrick Walton", "email": "pcwalton@mimiga.net", "date": "2012-02-29T04:43:39Z"}, "message": "libcore: Remove vec::to_ptr in favor of vec::unsafe::to_ptr. Closes #1829.", "tree": {"sha": "a5b0003ed1c360a540d1502af9c939c15e924816", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a5b0003ed1c360a540d1502af9c939c15e924816"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/362f23641a737bb16b85b2da091c222bc7358dc4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/362f23641a737bb16b85b2da091c222bc7358dc4", "html_url": "https://github.com/rust-lang/rust/commit/362f23641a737bb16b85b2da091c222bc7358dc4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/362f23641a737bb16b85b2da091c222bc7358dc4/comments", "author": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pcwalton", "id": 157897, "node_id": "MDQ6VXNlcjE1Nzg5Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/157897?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pcwalton", "html_url": "https://github.com/pcwalton", "followers_url": "https://api.github.com/users/pcwalton/followers", "following_url": "https://api.github.com/users/pcwalton/following{/other_user}", "gists_url": "https://api.github.com/users/pcwalton/gists{/gist_id}", "starred_url": "https://api.github.com/users/pcwalton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pcwalton/subscriptions", "organizations_url": "https://api.github.com/users/pcwalton/orgs", "repos_url": "https://api.github.com/users/pcwalton/repos", "events_url": "https://api.github.com/users/pcwalton/events{/privacy}", "received_events_url": "https://api.github.com/users/pcwalton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d3331bce98eefd2f9528c70322f059dcc44553c9", "url": "https://api.github.com/repos/rust-lang/rust/commits/d3331bce98eefd2f9528c70322f059dcc44553c9", "html_url": "https://github.com/rust-lang/rust/commit/d3331bce98eefd2f9528c70322f059dcc44553c9"}], "stats": {"total": 64, "additions": 29, "deletions": 35}, "files": [{"sha": "2dc2945d8de8af643b812bfb7c4ccf4d725ce369", "filename": "src/comp/lib/llvm.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Flib%2Fllvm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Flib%2Fllvm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Flib%2Fllvm.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -988,7 +988,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let n_args = llvm::LLVMCountParamTypes(ty) as uint;\n         let args: [TypeRef] = vec::init_elt::<TypeRef>(n_args, 0 as TypeRef);\n         unsafe {\n-            llvm::LLVMGetParamTypes(ty, vec::to_ptr(args));\n+            llvm::LLVMGetParamTypes(ty, vec::unsafe::to_ptr(args));\n         }\n         s += tys_str(names, outer, args);\n         s += \") -> \";\n@@ -1000,7 +1000,7 @@ fn type_to_str_inner(names: type_names, outer0: [TypeRef], ty: TypeRef) ->\n         let n_elts = llvm::LLVMCountStructElementTypes(ty) as uint;\n         let elts: [TypeRef] = vec::init_elt::<TypeRef>(n_elts, 0 as TypeRef);\n         unsafe {\n-            llvm::LLVMGetStructElementTypes(ty, vec::to_ptr(elts));\n+            llvm::LLVMGetStructElementTypes(ty, vec::unsafe::to_ptr(elts));\n         }\n         s += tys_str(names, outer, elts);\n         s += \"}\";\n@@ -1043,7 +1043,7 @@ fn float_width(llt: TypeRef) -> uint {\n fn fn_ty_param_tys(fn_ty: TypeRef) -> [TypeRef] unsafe {\n     let args = vec::init_elt(llvm::LLVMCountParamTypes(fn_ty) as uint,\n                              0 as TypeRef);\n-    llvm::LLVMGetParamTypes(fn_ty, vec::to_ptr(args));\n+    llvm::LLVMGetParamTypes(fn_ty, vec::unsafe::to_ptr(args));\n     ret args;\n }\n "}, {"sha": "12c8cb10882b35e0d67529d6f28841b34a1ea564", "filename": "src/comp/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbase.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -4428,7 +4428,7 @@ fn create_main_wrapper(ccx: crate_ctxt, sp: span, main_llfn: ValueRef,\n         let args = [rust_main, llvm::LLVMGetParam(llfn, 0 as c_uint),\n                     llvm::LLVMGetParam(llfn, 1 as c_uint), crate_map];\n         let result = unsafe {\n-            llvm::LLVMBuildCall(bld, start, vec::to_ptr(args),\n+            llvm::LLVMBuildCall(bld, start, vec::unsafe::to_ptr(args),\n                                 args.len() as c_uint, noname())\n         };\n         llvm::LLVMBuildRet(bld, result);"}, {"sha": "e449aae2382a97162d6eaaaa85a60102faae44d1", "filename": "src/comp/middle/trans/build.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fbuild.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -41,7 +41,7 @@ fn AggregateRet(cx: block, RetVals: [ValueRef]) {\n     assert (!cx.terminated);\n     cx.terminated = true;\n     unsafe {\n-        llvm::LLVMBuildAggregateRet(B(cx), vec::to_ptr(RetVals),\n+        llvm::LLVMBuildAggregateRet(B(cx), vec::unsafe::to_ptr(RetVals),\n                                     RetVals.len() as c_uint);\n     }\n }\n@@ -98,7 +98,7 @@ fn Invoke(cx: block, Fn: ValueRef, Args: [ValueRef],\n            str::connect(vec::map(Args, {|a|val_str(cx.ccx().tn, a)}),\n                         \", \")];\n     unsafe {\n-        llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n+        llvm::LLVMBuildInvoke(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                               Args.len() as c_uint, Then, Catch,\n                               noname());\n     }\n@@ -110,7 +110,7 @@ fn FastInvoke(cx: block, Fn: ValueRef, Args: [ValueRef],\n     assert (!cx.terminated);\n     cx.terminated = true;\n     unsafe {\n-        let v = llvm::LLVMBuildInvoke(B(cx), Fn, vec::to_ptr(Args),\n+        let v = llvm::LLVMBuildInvoke(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                                       Args.len() as c_uint,\n                                       Then, Catch, noname());\n         lib::llvm::SetInstructionCallConv(v, lib::llvm::FastCallConv);\n@@ -331,7 +331,7 @@ fn Store(cx: block, Val: ValueRef, Ptr: ValueRef) {\n fn GEP(cx: block, Pointer: ValueRef, Indices: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n     unsafe {\n-        ret llvm::LLVMBuildGEP(B(cx), Pointer, vec::to_ptr(Indices),\n+        ret llvm::LLVMBuildGEP(B(cx), Pointer, vec::unsafe::to_ptr(Indices),\n                                Indices.len() as c_uint, noname());\n     }\n }\n@@ -349,7 +349,7 @@ fn InBoundsGEP(cx: block, Pointer: ValueRef, Indices: [ValueRef]) ->\n     if cx.unreachable { ret llvm::LLVMGetUndef(T_ptr(T_nil())); }\n     unsafe {\n         ret llvm::LLVMBuildInBoundsGEP(B(cx), Pointer,\n-                                       vec::to_ptr(Indices),\n+                                       vec::unsafe::to_ptr(Indices),\n                                        Indices.len() as c_uint,\n                                        noname());\n     }\n@@ -496,7 +496,8 @@ fn Phi(cx: block, Ty: TypeRef, vals: [ValueRef], bbs: [BasicBlockRef])\n     assert vals.len() == bbs.len();\n     let phi = EmptyPhi(cx, Ty);\n     unsafe {\n-        llvm::LLVMAddIncoming(phi, vec::to_ptr(vals), vec::to_ptr(bbs),\n+        llvm::LLVMAddIncoming(phi, vec::unsafe::to_ptr(vals),\n+                              vec::unsafe::to_ptr(bbs),\n                               vals.len() as c_uint);\n         ret phi;\n     }\n@@ -547,15 +548,15 @@ fn add_comment(bcx: block, text: str) {\n fn Call(cx: block, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {\n-        ret llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+        ret llvm::LLVMBuildCall(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                                 Args.len() as c_uint, noname());\n     }\n }\n \n fn FastCall(cx: block, Fn: ValueRef, Args: [ValueRef]) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {\n-        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                                     Args.len() as c_uint, noname());\n         lib::llvm::SetInstructionCallConv(v, lib::llvm::FastCallConv);\n         ret v;\n@@ -566,7 +567,7 @@ fn CallWithConv(cx: block, Fn: ValueRef, Args: [ValueRef],\n                 Conv: CallConv) -> ValueRef {\n     if cx.unreachable { ret _UndefReturn(cx, Fn); }\n     unsafe {\n-        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::to_ptr(Args),\n+        let v = llvm::LLVMBuildCall(B(cx), Fn, vec::unsafe::to_ptr(Args),\n                                     Args.len() as c_uint, noname());\n         lib::llvm::SetInstructionCallConv(v, Conv);\n         ret v;\n@@ -642,7 +643,7 @@ fn Trap(cx: block) {\n     assert (T as int != 0);\n     let Args: [ValueRef] = [];\n     unsafe {\n-        llvm::LLVMBuildCall(b, T, vec::to_ptr(Args),\n+        llvm::LLVMBuildCall(b, T, vec::unsafe::to_ptr(Args),\n                             Args.len() as c_uint, noname());\n     }\n }"}, {"sha": "4bc264e40983700284324d6692d978a05f8dfa21", "filename": "src/comp/middle/trans/common.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fcommon.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -4,7 +4,7 @@\n */\n \n import ctypes::unsigned;\n-import vec::to_ptr;\n+import vec::unsafe::to_ptr;\n import std::map::hashmap;\n import syntax::ast;\n import driver::session;\n@@ -805,28 +805,28 @@ fn C_zero_byte_arr(size: uint) -> ValueRef unsafe {\n     let i = 0u;\n     let elts: [ValueRef] = [];\n     while i < size { elts += [C_u8(0u)]; i += 1u; }\n-    ret llvm::LLVMConstArray(T_i8(), vec::to_ptr(elts),\n+    ret llvm::LLVMConstArray(T_i8(), vec::unsafe::to_ptr(elts),\n                              elts.len() as unsigned);\n }\n \n fn C_struct(elts: [ValueRef]) -> ValueRef unsafe {\n-    ret llvm::LLVMConstStruct(vec::to_ptr(elts), elts.len() as unsigned,\n-                              False);\n+    ret llvm::LLVMConstStruct(vec::unsafe::to_ptr(elts),\n+                              elts.len() as unsigned, False);\n }\n \n fn C_named_struct(T: TypeRef, elts: [ValueRef]) -> ValueRef unsafe {\n-    ret llvm::LLVMConstNamedStruct(T, vec::to_ptr(elts),\n+    ret llvm::LLVMConstNamedStruct(T, vec::unsafe::to_ptr(elts),\n                                    elts.len() as unsigned);\n }\n \n fn C_array(ty: TypeRef, elts: [ValueRef]) -> ValueRef unsafe {\n-    ret llvm::LLVMConstArray(ty, vec::to_ptr(elts),\n+    ret llvm::LLVMConstArray(ty, vec::unsafe::to_ptr(elts),\n                              elts.len() as unsigned);\n }\n \n fn C_bytes(bytes: [u8]) -> ValueRef unsafe {\n     ret llvm::LLVMConstString(\n-        unsafe::reinterpret_cast(vec::to_ptr(bytes)),\n+        unsafe::reinterpret_cast(vec::unsafe::to_ptr(bytes)),\n         bytes.len() as unsigned, False);\n }\n "}, {"sha": "e3853127405598b1d940dce50361f6a57b681322", "filename": "src/comp/middle/trans/impl.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans%2Fimpl.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -208,7 +208,7 @@ fn llfn_arg_tys(ft: TypeRef) -> {inputs: [TypeRef], output: TypeRef} {\n     let out_ty = llvm::LLVMGetReturnType(ft);\n     let n_args = llvm::LLVMCountParamTypes(ft);\n     let args = vec::init_elt(n_args as uint, 0 as TypeRef);\n-    unsafe { llvm::LLVMGetParamTypes(ft, vec::to_ptr(args)); }\n+    unsafe { llvm::LLVMGetParamTypes(ft, vec::unsafe::to_ptr(args)); }\n     {inputs: args, output: out_ty}\n }\n "}, {"sha": "d7881c1320bfcd534b501f2a1b7d649acbf84da7", "filename": "src/libcore/str.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Flibcore%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Flibcore%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fstr.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -2017,15 +2017,15 @@ mod tests {\n     #[test]\n     fn test_from_cstr() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n-        let b = vec::to_ptr(a);\n+        let b = vec::unsafe::to_ptr(a);\n         let c = from_cstr(b);\n         assert (c == \"AAAAAAA\");\n     }\n \n     #[test]\n     fn test_from_cstr_len() unsafe {\n         let a = [65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 65u8, 0u8];\n-        let b = vec::to_ptr(a);\n+        let b = vec::unsafe::to_ptr(a);\n         let c = from_cstr_len(b, 3u);\n         assert (c == \"AAA\");\n     }"}, {"sha": "5baebb60f169f07b83a76588125990d96dc4e3af", "filename": "src/libcore/vec.rs", "status": "modified", "additions": 4, "deletions": 11, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Flibcore%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/362f23641a737bb16b85b2da091c222bc7358dc4/src%2Flibcore%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fvec.rs?ref=362f23641a737bb16b85b2da091c222bc7358dc4", "patch": "@@ -1068,13 +1068,6 @@ fn windowed <TT: copy> (nn: uint, xx: [TT]) -> [[TT]] {\n    ret ww;\n }\n \n-/*\n-Function: to_ptr\n-\n-FIXME: We don't need this wrapper\n-*/\n-unsafe fn to_ptr<T>(v: [T]) -> *T { ret unsafe::to_ptr(v); }\n-\n /*\n Function: as_buf\n \n@@ -1159,8 +1152,8 @@ mod u8 {\n         let a_len = len(a);\n         let b_len = len(b);\n         let n = math::min(a_len, b_len) as ctypes::size_t;\n-        let r = libc::memcmp(to_ptr(a) as *libc::c_void,\n-                             to_ptr(b) as *libc::c_void, n) as int;\n+        let r = libc::memcmp(unsafe::to_ptr(a) as *libc::c_void,\n+                             unsafe::to_ptr(b) as *libc::c_void, n) as int;\n \n         if r != 0 { r } else {\n             if a_len == b_len {\n@@ -1253,7 +1246,7 @@ mod tests {\n     fn test_unsafe_ptrs() unsafe {\n         // Test on-stack copy-from-buf.\n         let a = [1, 2, 3];\n-        let ptr = to_ptr(a);\n+        let ptr = unsafe::to_ptr(a);\n         let b = unsafe::from_buf(ptr, 3u);\n         assert (len(b) == 3u);\n         assert (b[0] == 1);\n@@ -1262,7 +1255,7 @@ mod tests {\n \n         // Test on-heap copy-from-buf.\n         let c = [1, 2, 3, 4, 5];\n-        ptr = to_ptr(c);\n+        ptr = unsafe::to_ptr(c);\n         let d = unsafe::from_buf(ptr, 5u);\n         assert (len(d) == 5u);\n         assert (d[0] == 1);"}]}