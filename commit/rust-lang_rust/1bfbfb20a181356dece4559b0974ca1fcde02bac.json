{"sha": "1bfbfb20a181356dece4559b0974ca1fcde02bac", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFiZmJmYjIwYTE4MTM1NmRlY2U0NTU5YjA5NzRjYTFmY2RlMDJiYWM=", "commit": {"author": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-09-23T01:15:30Z"}, "committer": {"name": "Wonwoo Choi", "email": "chwo9843@gmail.com", "date": "2017-09-23T01:15:30Z"}, "message": "Print fn signature when there is closure argument type mismatch\n\nFixes #42143.\nE0281 is totally replaced by E0631. UI tests are updated accordingly.", "tree": {"sha": "9cb8b787adf49733c1a8a532d5573db4fe09b392", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9cb8b787adf49733c1a8a532d5573db4fe09b392"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1bfbfb20a181356dece4559b0974ca1fcde02bac", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1bfbfb20a181356dece4559b0974ca1fcde02bac", "html_url": "https://github.com/rust-lang/rust/commit/1bfbfb20a181356dece4559b0974ca1fcde02bac", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1bfbfb20a181356dece4559b0974ca1fcde02bac/comments", "author": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tirr-c", "id": 2322996, "node_id": "MDQ6VXNlcjIzMjI5OTY=", "avatar_url": "https://avatars.githubusercontent.com/u/2322996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tirr-c", "html_url": "https://github.com/tirr-c", "followers_url": "https://api.github.com/users/tirr-c/followers", "following_url": "https://api.github.com/users/tirr-c/following{/other_user}", "gists_url": "https://api.github.com/users/tirr-c/gists{/gist_id}", "starred_url": "https://api.github.com/users/tirr-c/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tirr-c/subscriptions", "organizations_url": "https://api.github.com/users/tirr-c/orgs", "repos_url": "https://api.github.com/users/tirr-c/repos", "events_url": "https://api.github.com/users/tirr-c/events{/privacy}", "received_events_url": "https://api.github.com/users/tirr-c/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3eb19bf9b160825cd338b9419551670a30962c4e", "url": "https://api.github.com/repos/rust-lang/rust/commits/3eb19bf9b160825cd338b9419551670a30962c4e", "html_url": "https://github.com/rust-lang/rust/commit/3eb19bf9b160825cd338b9419551670a30962c4e"}], "stats": {"total": 364, "additions": 245, "deletions": 119}, "files": [{"sha": "0b0c1bba387bfbd68e882d6b064575f062c8b799", "filename": "src/librustc/diagnostics.rs", "status": "modified", "additions": 4, "deletions": 1, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdiagnostics.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -1139,11 +1139,13 @@ already specify all requirements that will be used for every type parameter.\n \"##,\n \n E0281: r##\"\n+#### Note: this error code is no longer emitted by the compiler.\n+\n You tried to supply a type which doesn't implement some trait in a location\n which expected that trait. This error typically occurs when working with\n `Fn`-based types. Erroneous code example:\n \n-```compile_fail,E0281\n+```compile-fail\n fn foo<F: Fn(usize)>(x: F) { }\n \n fn main() {\n@@ -2086,5 +2088,6 @@ register_diagnostics! {\n     E0566, // conflicting representation hints\n     E0623, // lifetime mismatch where both parameters are anonymous regions\n     E0628, // generators cannot have explicit arguments\n+    E0631, // type mismatch in closure arguments\n     E0637, // \"'_\" is not a valid lifetime bound\n }"}, {"sha": "c7c8141f4f768d06e28ec8e048c11ed98c1b75e8", "filename": "src/librustc/traits/error_reporting.rs", "status": "modified", "additions": 75, "deletions": 66, "changes": 141, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Ferror_reporting.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -37,7 +37,7 @@ use rustc::lint::builtin::EXTRA_REQUIREMENT_IN_IMPL;\n use std::fmt;\n use syntax::ast;\n use ty::{self, AdtKind, ToPredicate, ToPolyTraitRef, Ty, TyCtxt, TypeFoldable};\n-use ty::error::{ExpectedFound, TypeError};\n+use ty::error::ExpectedFound;\n use ty::fast_reject;\n use ty::fold::TypeFolder;\n use ty::subst::Subst;\n@@ -711,7 +711,7 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                 }\n             }\n \n-            OutputTypeParameterMismatch(ref expected_trait_ref, ref actual_trait_ref, ref e) => {\n+            OutputTypeParameterMismatch(ref expected_trait_ref, ref actual_trait_ref, _) => {\n                 let expected_trait_ref = self.resolve_type_vars_if_possible(&*expected_trait_ref);\n                 let actual_trait_ref = self.resolve_type_vars_if_possible(&*actual_trait_ref);\n                 if actual_trait_ref.self_ty().references_error() {\n@@ -722,48 +722,31 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n                     self.tcx.hir.span_if_local(did)\n                 });\n \n-                if let &TypeError::TupleSize(ref expected_found) = e {\n-                    // Expected `|x| { }`, found `|x, y| { }`\n-                    self.report_arg_count_mismatch(span,\n-                                                   found_span,\n-                                                   expected_found.expected,\n-                                                   expected_found.found,\n-                                                   expected_trait_ty.is_closure())\n-                } else if let &TypeError::Sorts(ref expected_found) = e {\n-                    let expected = if let ty::TyTuple(tys, _) = expected_found.expected.sty {\n-                        tys.len()\n-                    } else {\n-                        1\n+                let self_ty_count =\n+                    match expected_trait_ref.skip_binder().substs.type_at(1).sty {\n+                        ty::TyTuple(ref tys, _) => tys.len(),\n+                        _ => 1,\n                     };\n-                    let found = if let ty::TyTuple(tys, _) = expected_found.found.sty {\n-                        tys.len()\n-                    } else {\n-                        1\n+                let arg_ty_count =\n+                    match actual_trait_ref.skip_binder().substs.type_at(1).sty {\n+                        ty::TyTuple(ref tys, _) => tys.len(),\n+                        _ => 1,\n                     };\n-\n-                    if expected != found {\n-                        // Expected `|| { }`, found `|x, y| { }`\n-                        // Expected `fn(x) -> ()`, found `|| { }`\n-                        self.report_arg_count_mismatch(span,\n-                                                       found_span,\n-                                                       expected,\n-                                                       found,\n-                                                       expected_trait_ty.is_closure())\n-                    } else {\n-                        self.report_type_argument_mismatch(span,\n-                                                            found_span,\n-                                                            expected_trait_ty,\n-                                                            expected_trait_ref,\n-                                                            actual_trait_ref,\n-                                                            e)\n-                    }\n+                if self_ty_count == arg_ty_count {\n+                    self.report_closure_arg_mismatch(span,\n+                                                     found_span,\n+                                                     expected_trait_ref,\n+                                                     actual_trait_ref)\n                 } else {\n-                    self.report_type_argument_mismatch(span,\n-                                                        found_span,\n-                                                        expected_trait_ty,\n-                                                        expected_trait_ref,\n-                                                        actual_trait_ref,\n-                                                        e)\n+                    // Expected `|| { }`, found `|x, y| { }`\n+                    // Expected `fn(x) -> ()`, found `|| { }`\n+                    self.report_arg_count_mismatch(\n+                        span,\n+                        found_span,\n+                        arg_ty_count,\n+                        self_ty_count,\n+                        expected_trait_ty.is_closure()\n+                    )\n                 }\n             }\n \n@@ -784,31 +767,6 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         err.emit();\n     }\n \n-    fn report_type_argument_mismatch(&self,\n-                                      span: Span,\n-                                      found_span: Option<Span>,\n-                                      expected_ty: Ty<'tcx>,\n-                                      expected_ref: ty::PolyTraitRef<'tcx>,\n-                                      found_ref: ty::PolyTraitRef<'tcx>,\n-                                      type_error: &TypeError<'tcx>)\n-        -> DiagnosticBuilder<'tcx>\n-    {\n-        let mut err = struct_span_err!(self.tcx.sess, span, E0281,\n-            \"type mismatch: `{}` implements the trait `{}`, but the trait `{}` is required\",\n-            expected_ty,\n-            expected_ref,\n-            found_ref);\n-\n-        err.span_label(span, format!(\"{}\", type_error));\n-\n-        if let Some(sp) = found_span {\n-            err.span_label(span, format!(\"requires `{}`\", found_ref));\n-            err.span_label(sp, format!(\"implements `{}`\", expected_ref));\n-        }\n-\n-        err\n-    }\n-\n     fn report_arg_count_mismatch(&self,\n                                  span: Span,\n                                  found_span: Option<Span>,\n@@ -837,6 +795,57 @@ impl<'a, 'gcx, 'tcx> InferCtxt<'a, 'gcx, 'tcx> {\n         }\n         err\n     }\n+\n+    fn report_closure_arg_mismatch(&self,\n+                           span: Span,\n+                           found_span: Option<Span>,\n+                           expected_ref: ty::PolyTraitRef<'tcx>,\n+                           found: ty::PolyTraitRef<'tcx>)\n+        -> DiagnosticBuilder<'tcx>\n+    {\n+        fn build_fn_sig_string<'a, 'gcx, 'tcx>(tcx: ty::TyCtxt<'a, 'gcx, 'tcx>,\n+                                               trait_ref: &ty::TraitRef<'tcx>) -> String {\n+            let inputs = trait_ref.substs.type_at(1);\n+            let sig = if let ty::TyTuple(inputs, _) = inputs.sty {\n+                tcx.mk_fn_sig(\n+                    inputs.iter().map(|&x| x),\n+                    tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    false,\n+                    hir::Unsafety::Normal,\n+                    ::syntax::abi::Abi::Rust\n+                )\n+            } else {\n+                tcx.mk_fn_sig(\n+                    ::std::iter::once(inputs),\n+                    tcx.mk_infer(ty::TyVar(ty::TyVid { index: 0 })),\n+                    false,\n+                    hir::Unsafety::Normal,\n+                    ::syntax::abi::Abi::Rust\n+                )\n+            };\n+            format!(\"{}\", ty::Binder(sig))\n+        }\n+\n+        let argument_is_closure = expected_ref.skip_binder().substs.type_at(0).is_closure();\n+        let mut err = struct_span_err!(self.tcx.sess, span, E0631,\n+                                       \"type mismatch in {} arguments\",\n+                                       if argument_is_closure { \"closure\" } else { \"function\" });\n+\n+        let found_str = format!(\n+            \"expected signature of `{}`\",\n+            build_fn_sig_string(self.tcx, found.skip_binder())\n+        );\n+        err.span_label(span, found_str);\n+\n+        let found_span = found_span.unwrap_or(span);\n+        let expected_str = format!(\n+            \"found signature of `{}`\",\n+            build_fn_sig_string(self.tcx, expected_ref.skip_binder())\n+        );\n+        err.span_label(found_span, expected_str);\n+\n+        err\n+    }\n }\n \n impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {"}, {"sha": "168eecf9b08fbea167c452dc0552819c09c0f427", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -676,6 +676,12 @@ impl<'tcx> fmt::Display for ty::Binder<ty::TraitRef<'tcx>> {\n     }\n }\n \n+impl<'tcx> fmt::Display for ty::Binder<ty::FnSig<'tcx>> {\n+    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n+        ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))\n+    }\n+}\n+\n impl<'tcx> fmt::Display for ty::Binder<ty::TraitPredicate<'tcx>> {\n     fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {\n         ty::tls::with(|tcx| in_binder(f, tcx, self, tcx.lift(self)))"}, {"sha": "744e8c309392513b9a2f4de9606c4e631f9786f9", "filename": "src/test/ui/mismatched_types/E0281.stderr", "status": "removed", "additions": 0, "deletions": 13, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/3eb19bf9b160825cd338b9419551670a30962c4e/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3eb19bf9b160825cd338b9419551670a30962c4e/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0281.stderr?ref=3eb19bf9b160825cd338b9419551670a30962c4e", "patch": "@@ -1,13 +0,0 @@\n-error[E0281]: type mismatch: `[closure@$DIR/E0281.rs:14:9: 14:24]` implements the trait `std::ops::Fn<(std::string::String,)>`, but the trait `std::ops::Fn<(usize,)>` is required\n-  --> $DIR/E0281.rs:14:5\n-   |\n-14 |     foo(|y: String| { });\n-   |     ^^^ --------------- implements `std::ops::Fn<(std::string::String,)>`\n-   |     |\n-   |     expected usize, found struct `std::string::String`\n-   |     requires `std::ops::Fn<(usize,)>`\n-   |\n-   = note: required by `foo`\n-\n-error: aborting due to previous error\n-"}, {"sha": "e28f15ab0b62e4466e123f034168567b61c9acaa", "filename": "src/test/ui/mismatched_types/E0631.rs", "status": "renamed", "additions": 8, "deletions": 12, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -8,18 +8,14 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-fn foo<F: Fn(usize)>(x: F) { }\n+#![feature(unboxed_closures)]\n \n+fn foo<F: Fn(usize)>(_: F) {}\n+fn bar<F: Fn<usize>>(_: F) {}\n fn main() {\n-    foo(|y: String| { });\n-    //~^ ERROR E0281\n-    //~| ERROR E0281\n-    //~| NOTE implements\n-    //~| NOTE implements\n-    //~| NOTE requires\n-    //~| NOTE requires\n-    //~| NOTE expected usize, found struct `std::string::String`\n-    //~| NOTE expected usize, found struct `std::string::String`\n-    //~| NOTE required by `foo`\n-    //~| NOTE required by `foo`\n+    fn f(_: u64) {}\n+    foo(|_: isize| {});\n+    bar(|_: isize| {});\n+    foo(f);\n+    bar(f);\n }", "previous_filename": "src/test/ui/mismatched_types/E0281.rs"}, {"sha": "235e7a100633d6e91b02f2d0207961fa531891bb", "filename": "src/test/ui/mismatched_types/E0631.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2FE0631.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -0,0 +1,44 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/E0631.rs:17:5\n+   |\n+17 |     foo(|_: isize| {});\n+   |     ^^^ ------------- found signature of `fn(isize) -> _`\n+   |     |\n+   |     expected signature of `fn(usize) -> _`\n+   |\n+   = note: required by `foo`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/E0631.rs:18:5\n+   |\n+18 |     bar(|_: isize| {});\n+   |     ^^^ ------------- found signature of `fn(isize) -> _`\n+   |     |\n+   |     expected signature of `fn(usize) -> _`\n+   |\n+   = note: required by `bar`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/E0631.rs:19:5\n+   |\n+19 |     foo(f);\n+   |     ^^^\n+   |     |\n+   |     expected signature of `fn(usize) -> _`\n+   |     found signature of `fn(u64) -> _`\n+   |\n+   = note: required by `foo`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/E0631.rs:20:5\n+   |\n+20 |     bar(f);\n+   |     ^^^\n+   |     |\n+   |     expected signature of `fn(usize) -> _`\n+   |     found signature of `fn(u64) -> _`\n+   |\n+   = note: required by `bar`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "f94471a73ca271f78fd1f812a0b0587cf80cd867", "filename": "src/test/ui/mismatched_types/closure-arg-count.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -8,8 +8,12 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n+#![feature(unboxed_closures)]\n+\n+fn f<F: Fn<usize>>(_: F) {}\n fn main() {\n     [1, 2, 3].sort_by(|| panic!());\n     [1, 2, 3].sort_by(|tuple| panic!());\n     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+    f(|| panic!());\n }"}, {"sha": "3031a77b1e8288bf4b4c77a41a6e746defce3a27", "filename": "src/test/ui/mismatched_types/closure-arg-count.stderr", "status": "modified", "additions": 19, "deletions": 9, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-count.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -1,35 +1,45 @@\n error[E0593]: closure takes 0 arguments but 2 arguments are required\n-  --> $DIR/closure-arg-count.rs:12:15\n+  --> $DIR/closure-arg-count.rs:15:15\n    |\n-12 |     [1, 2, 3].sort_by(|| panic!());\n+15 |     [1, 2, 3].sort_by(|| panic!());\n    |               ^^^^^^^ ----------- takes 0 arguments\n    |               |\n    |               expected closure that takes 2 arguments\n \n error[E0593]: closure takes 1 argument but 2 arguments are required\n-  --> $DIR/closure-arg-count.rs:13:15\n+  --> $DIR/closure-arg-count.rs:16:15\n    |\n-13 |     [1, 2, 3].sort_by(|tuple| panic!());\n+16 |     [1, 2, 3].sort_by(|tuple| panic!());\n    |               ^^^^^^^ ---------------- takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n error[E0308]: mismatched types\n-  --> $DIR/closure-arg-count.rs:14:24\n+  --> $DIR/closure-arg-count.rs:17:24\n    |\n-14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |                        ^^^^^^^^^^^^^^^ expected &{integer}, found tuple\n    |\n    = note: expected type `&{integer}`\n               found type `(_, _)`\n \n error[E0593]: closure takes 1 argument but 2 arguments are required\n-  --> $DIR/closure-arg-count.rs:14:15\n+  --> $DIR/closure-arg-count.rs:17:15\n    |\n-14 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n+17 |     [1, 2, 3].sort_by(|(tuple, tuple2)| panic!());\n    |               ^^^^^^^ -------------------------- takes 1 argument\n    |               |\n    |               expected closure that takes 2 arguments\n \n-error: aborting due to 4 previous errors\n+error[E0593]: closure takes 0 arguments but 1 argument is required\n+  --> $DIR/closure-arg-count.rs:18:5\n+   |\n+18 |     f(|| panic!());\n+   |     ^ ----------- takes 0 arguments\n+   |     |\n+   |     expected closure that takes 1 argument\n+   |\n+   = note: required by `f`\n+\n+error: aborting due to 5 previous errors\n "}, {"sha": "aa9dba4c3f4178e4369c89ace874f8079db04e6a", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.rs?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -0,0 +1,21 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let a = [(1u32, 2u32)];\n+    a.iter().map(|_: (u32, u32)| 45);\n+    a.iter().map(|_: &(u16, u16)| 45);\n+    a.iter().map(|_: (u16, u16)| 45);\n+}\n+\n+fn baz<F: Fn(*mut &u32)>(_: F) {}\n+fn _test<'a>(f: fn(*mut &'a u32)) {\n+    baz(f);\n+}"}, {"sha": "866a024ab08b8472bf2bb715c81545ffec581d2c", "filename": "src/test/ui/mismatched_types/closure-arg-type-mismatch.stderr", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-arg-type-mismatch.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -0,0 +1,45 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:13:14\n+   |\n+13 |     a.iter().map(|_: (u32, u32)| 45);\n+   |              ^^^ ------------------ found signature of `fn((u32, u32)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:14:14\n+   |\n+14 |     a.iter().map(|_: &(u16, u16)| 45);\n+   |              ^^^ ------------------- found signature of `for<'r> fn(&'r (u16, u16)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:15:14\n+   |\n+15 |     a.iter().map(|_: (u16, u16)| 45);\n+   |              ^^^ ------------------ found signature of `fn((u16, u16)) -> _`\n+   |              |\n+   |              expected signature of `fn(&(u32, u32)) -> _`\n+\n+error[E0631]: type mismatch in function arguments\n+  --> $DIR/closure-arg-type-mismatch.rs:20:5\n+   |\n+20 |     baz(f);\n+   |     ^^^\n+   |     |\n+   |     expected signature of `for<'r> fn(*mut &'r u32) -> _`\n+   |     found signature of `fn(*mut &'a u32) -> _`\n+   |\n+   = note: required by `baz`\n+\n+error[E0271]: type mismatch resolving `for<'r> <fn(*mut &'a u32) as std::ops::FnOnce<(*mut &'r u32,)>>::Output == ()`\n+  --> $DIR/closure-arg-type-mismatch.rs:20:5\n+   |\n+20 |     baz(f);\n+   |     ^^^ expected bound lifetime parameter, found concrete lifetime\n+   |\n+   = note: required by `baz`\n+\n+error: aborting due to 5 previous errors\n+"}, {"sha": "a54fd118cc5ea955bb5332e3e4eb5f3fc45b09b4", "filename": "src/test/ui/mismatched_types/closure-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fclosure-mismatch.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -7,14 +7,13 @@ error[E0271]: type mismatch resolving `for<'r> <[closure@$DIR/closure-mismatch.r\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n    = note: required by `baz`\n \n-error[E0281]: type mismatch: `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]` implements the trait `std::ops::Fn<(_,)>`, but the trait `for<'r> std::ops::Fn<(&'r (),)>` is required\n+error[E0631]: type mismatch in closure arguments\n   --> $DIR/closure-mismatch.rs:18:5\n    |\n 18 |     baz(|_| ());\n-   |     ^^^ ------ implements `std::ops::Fn<(_,)>`\n+   |     ^^^ ------ found signature of `fn(_) -> _`\n    |     |\n-   |     expected concrete lifetime, found bound lifetime parameter\n-   |     requires `for<'r> std::ops::Fn<(&'r (),)>`\n+   |     expected signature of `for<'r> fn(&'r ()) -> _`\n    |\n    = note: required because of the requirements on the impl of `Foo` for `[closure@$DIR/closure-mismatch.rs:18:9: 18:15]`\n    = note: required by `baz`"}, {"sha": "09a90ef3d6be69aa6204cfe2ce7b244ba21120c9", "filename": "src/test/ui/mismatched_types/fn-variance-1.stderr", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Ffn-variance-1.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -1,16 +1,22 @@\n-error[E0281]: type mismatch: `fn(&mut isize) {takes_mut}` implements the trait `for<'r> std::ops::FnOnce<(&'r mut isize,)>`, but the trait `std::ops::FnOnce<(&{integer},)>` is required\n+error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:21:5\n    |\n 21 |     apply(&3, takes_mut);\n-   |     ^^^^^ types differ in mutability\n+   |     ^^^^^\n+   |     |\n+   |     expected signature of `fn(&{integer}) -> _`\n+   |     found signature of `for<'r> fn(&'r mut isize) -> _`\n    |\n    = note: required by `apply`\n \n-error[E0281]: type mismatch: `fn(&isize) {takes_imm}` implements the trait `for<'r> std::ops::FnOnce<(&'r isize,)>`, but the trait `std::ops::FnOnce<(&mut {integer},)>` is required\n+error[E0631]: type mismatch in function arguments\n   --> $DIR/fn-variance-1.rs:27:5\n    |\n 27 |     apply(&mut 3, takes_imm);\n-   |     ^^^^^ types differ in mutability\n+   |     ^^^^^\n+   |     |\n+   |     expected signature of `fn(&mut {integer}) -> _`\n+   |     found signature of `for<'r> fn(&'r isize) -> _`\n    |\n    = note: required by `apply`\n "}, {"sha": "71a3a0a5714e89a8687876cac4f02c0d08e27ce6", "filename": "src/test/ui/mismatched_types/issue-36053-2.stderr", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Fissue-36053-2.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -8,14 +8,13 @@ error[E0599]: no method named `count` found for type `std::iter::Filter<std::ite\n            `std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n            `&mut std::iter::Filter<std::iter::Fuse<std::iter::Once<&str>>, [closure@$DIR/issue-36053-2.rs:17:39: 17:53]> : std::iter::Iterator`\n \n-error[E0281]: type mismatch: `[closure@$DIR/issue-36053-2.rs:17:39: 17:53]` implements the trait `for<'r> std::ops::FnMut<(&'r str,)>`, but the trait `for<'r> std::ops::FnMut<(&'r &str,)>` is required\n+error[E0631]: type mismatch in closure arguments\n   --> $DIR/issue-36053-2.rs:17:32\n    |\n 17 |     once::<&str>(\"str\").fuse().filter(|a: &str| true).count();\n-   |                                ^^^^^^ -------------- implements `for<'r> std::ops::FnMut<(&'r str,)>`\n+   |                                ^^^^^^ -------------- found signature of `for<'r> fn(&'r str) -> _`\n    |                                |\n-   |                                expected &str, found str\n-   |                                requires `for<'r> std::ops::FnMut<(&'r &str,)>`\n+   |                                expected signature of `for<'r> fn(&'r &str) -> _`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "598836492801363d6324ff6776961ba75894ba88", "filename": "src/test/ui/mismatched_types/unboxed-closures-vtable-mismatch.stderr", "status": "modified", "additions": 3, "deletions": 6, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/1bfbfb20a181356dece4559b0974ca1fcde02bac/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmismatched_types%2Funboxed-closures-vtable-mismatch.stderr?ref=1bfbfb20a181356dece4559b0974ca1fcde02bac", "patch": "@@ -1,14 +1,11 @@\n-error[E0281]: type mismatch: `[closure@$DIR/unboxed-closures-vtable-mismatch.rs:22:23: 22:73]` implements the trait `std::ops::FnMut<(usize, isize)>`, but the trait `std::ops::FnMut<(isize, isize)>` is required\n+error[E0631]: type mismatch in closure arguments\n   --> $DIR/unboxed-closures-vtable-mismatch.rs:25:13\n    |\n 22 |     let f = to_fn_mut(|x: usize, y: isize| -> isize { (x as isize) + y });\n-   |                       -------------------------------------------------- implements `std::ops::FnMut<(usize, isize)>`\n+   |                       -------------------------------------------------- found signature of `fn(usize, isize) -> _`\n ...\n 25 |     let z = call_it(3, f);\n-   |             ^^^^^^^\n-   |             |\n-   |             expected isize, found usize\n-   |             requires `std::ops::FnMut<(isize, isize)>`\n+   |             ^^^^^^^ expected signature of `fn(isize, isize) -> _`\n    |\n    = note: required by `call_it`\n "}]}