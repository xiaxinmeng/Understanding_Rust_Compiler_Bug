{"sha": "819b008d8be8d154d9561bed1e4b770c741f23a2", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxOWIwMDhkOGJlOGQxNTRkOTU2MWJlZDFlNGI3NzBjNzQxZjIzYTI=", "commit": {"author": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-23T12:35:45Z"}, "committer": {"name": "oli", "email": "github35764891676564198441@oli-obk.de", "date": "2021-01-23T12:35:45Z"}, "message": "Put dynamic check tests into their own file", "tree": {"sha": "a9a37977fda87e0805a58322c49aee67d7246931", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a9a37977fda87e0805a58322c49aee67d7246931"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/819b008d8be8d154d9561bed1e4b770c741f23a2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/819b008d8be8d154d9561bed1e4b770c741f23a2", "html_url": "https://github.com/rust-lang/rust/commit/819b008d8be8d154d9561bed1e4b770c741f23a2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/819b008d8be8d154d9561bed1e4b770c741f23a2/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cd0987115765efdf4f834f0f0bf24c4cef063b1a", "url": "https://api.github.com/repos/rust-lang/rust/commits/cd0987115765efdf4f834f0f0bf24c4cef063b1a", "html_url": "https://github.com/rust-lang/rust/commit/cd0987115765efdf4f834f0f0bf24c4cef063b1a"}], "stats": {"total": 88, "additions": 64, "deletions": 24}, "files": [{"sha": "166ba20f124e6d9629dabd04890a4890611acbf3", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.rs", "status": "modified", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.rs?ref=819b008d8be8d154d9561bed1e4b770c741f23a2", "patch": "@@ -1,6 +1,5 @@\n #![feature(const_mut_refs)]\n #![feature(const_fn)]\n-#![feature(const_transmute)]\n #![feature(raw_ref_op)]\n #![feature(const_raw_ptr_deref)]\n \n@@ -18,18 +17,8 @@ const B2: Option<&mut i32> = None;\n // Not ok, can't prove that no mutable allocation ends up in final value\n const B3: Option<&mut i32> = Some(&mut 42); //~ ERROR temporary value dropped while borrowed\n \n-const fn helper() -> Option<&'static mut i32> { unsafe {\n-    // Undefined behaviour, who doesn't love tests like this.\n-    // This code never gets executed, because the static checks fail before that.\n-    Some(&mut *(42 as *mut i32))\n-} }\n-// Check that we do not look into function bodies.\n-// We treat all functions as not returning a mutable reference, because there is no way to\n-// do that without causing the borrow checker to complain (see the B5/helper2 test below).\n-const B4: Option<&mut i32> = helper();\n-\n-const fn helper2(x: &mut i32) -> Option<&mut i32> { Some(x) }\n-const B5: Option<&mut i32> = helper2(&mut 42); //~ ERROR temporary value dropped while borrowed\n+const fn helper(x: &mut i32) -> Option<&mut i32> { Some(x) }\n+const B4: Option<&mut i32> = helper(&mut 42); //~ ERROR temporary value dropped while borrowed\n \n // Ok, because no references to mutable data exist here, since the `{}` moves\n // its value and then takes a reference to that."}, {"sha": "cbae74cce6f6b414901305350d853a305d847fb6", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final.stderr", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final.stderr?ref=819b008d8be8d154d9561bed1e4b770c741f23a2", "patch": "@@ -1,11 +1,11 @@\n error[E0764]: mutable references are not allowed in the final value of constants\n-  --> $DIR/mut_ref_in_final.rs:13:21\n+  --> $DIR/mut_ref_in_final.rs:12:21\n    |\n LL | const B: *mut i32 = &mut 4;\n    |                     ^^^^^^\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:19:40\n+  --> $DIR/mut_ref_in_final.rs:18:40\n    |\n LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              ----------^^-\n@@ -15,17 +15,17 @@ LL | const B3: Option<&mut i32> = Some(&mut 42);\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:32:43\n+  --> $DIR/mut_ref_in_final.rs:21:42\n    |\n-LL | const B5: Option<&mut i32> = helper2(&mut 42);\n-   |                              -------------^^-\n-   |                              |            | |\n-   |                              |            | temporary value is freed at the end of this statement\n-   |                              |            creates a temporary which is freed while still in use\n+LL | const B4: Option<&mut i32> = helper(&mut 42);\n+   |                              ------------^^-\n+   |                              |           | |\n+   |                              |           | temporary value is freed at the end of this statement\n+   |                              |           creates a temporary which is freed while still in use\n    |                              using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:47:65\n+  --> $DIR/mut_ref_in_final.rs:36:65\n    |\n LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  -------------------------------^^--\n@@ -35,7 +35,7 @@ LL | const FOO: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                  using this value as a constant requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:50:67\n+  --> $DIR/mut_ref_in_final.rs:39:67\n    |\n LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    -------------------------------^^--\n@@ -45,7 +45,7 @@ LL | static FOO2: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                    using this value as a static requires that borrow lasts for `'static`\n \n error[E0716]: temporary value dropped while borrowed\n-  --> $DIR/mut_ref_in_final.rs:53:71\n+  --> $DIR/mut_ref_in_final.rs:42:71\n    |\n LL | static mut FOO3: NotAMutex<&mut i32> = NotAMutex(UnsafeCell::new(&mut 42));\n    |                                        -------------------------------^^--"}, {"sha": "1e856ec0a0accecbfd98da066535975601426501", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.rs?ref=819b008d8be8d154d9561bed1e4b770c741f23a2", "patch": "@@ -0,0 +1,28 @@\n+#![feature(const_mut_refs)]\n+#![feature(const_fn)]\n+#![feature(raw_ref_op)]\n+#![feature(const_raw_ptr_deref)]\n+\n+// This file checks that our dynamic checks catch things that the static checks miss.\n+// We do not have static checks for these, because we do not look into function bodies.\n+// We treat all functions as not returning a mutable reference, because there is no way to\n+// do that without causing the borrow checker to complain (see the B4/helper test in\n+// mut_ref_in_final.rs).\n+\n+const fn helper() -> Option<&'static mut i32> { unsafe {\n+    // Undefined behaviour (integer as pointer), who doesn't love tests like this.\n+    // This code never gets executed, because the static checks fail before that.\n+    Some(&mut *(42 as *mut i32)) //~ ERROR any use of this value will cause an error\n+} }\n+// The error is an evaluation error and not a validation error, so the error is reported\n+// directly at the site where it occurs.\n+const A: Option<&mut i32> = helper();\n+\n+const fn helper2() -> Option<&'static mut i32> { unsafe {\n+    // Undefined behaviour (dangling pointer), who doesn't love tests like this.\n+    // This code never gets executed, because the static checks fail before that.\n+    Some(&mut *(&mut 42 as *mut i32))\n+} }\n+const B: Option<&mut i32> = helper2(); //~ ERROR encountered dangling pointer in final constant\n+\n+fn main() {}"}, {"sha": "0bbf84b71bb685db66fecaa8ea46101fea67e7ef", "filename": "src/test/ui/consts/const-mut-refs/mut_ref_in_final_dynamic_check.stderr", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/819b008d8be8d154d9561bed1e4b770c741f23a2/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-mut-refs%2Fmut_ref_in_final_dynamic_check.stderr?ref=819b008d8be8d154d9561bed1e4b770c741f23a2", "patch": "@@ -0,0 +1,23 @@\n+error: any use of this value will cause an error\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n+   |\n+LL |     Some(&mut *(42 as *mut i32))\n+   |          ^^^^^^^^^^^^^^^^^^^^^^\n+   |          |\n+   |          unable to turn bytes into a pointer\n+   |          inside `helper` at $DIR/mut_ref_in_final_dynamic_check.rs:15:10\n+   |          inside `A` at $DIR/mut_ref_in_final_dynamic_check.rs:19:29\n+...\n+LL | const A: Option<&mut i32> = helper();\n+   | -------------------------------------\n+   |\n+   = note: `#[deny(const_err)]` on by default\n+\n+error: encountered dangling pointer in final constant\n+  --> $DIR/mut_ref_in_final_dynamic_check.rs:26:1\n+   |\n+LL | const B: Option<&mut i32> = helper2();\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+\n+error: aborting due to 2 previous errors\n+"}]}