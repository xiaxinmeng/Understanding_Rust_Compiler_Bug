{"sha": "9f548a02957314819aa0530d01f7c4a27dffdfc8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlmNTQ4YTAyOTU3MzE0ODE5YWEwNTMwZDAxZjdjNGEyN2RmZmRmYzg=", "commit": {"author": {"name": "jDomantas", "email": "djadenkus@gmail.com", "date": "2020-08-14T13:10:52Z"}, "committer": {"name": "jDomantas", "email": "djadenkus@gmail.com", "date": "2020-08-14T13:10:52Z"}, "message": "fixup whitespace when adding missing impl items", "tree": {"sha": "bb3502c55790678c57118a4fbff36b42ebc78e06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bb3502c55790678c57118a4fbff36b42ebc78e06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9f548a02957314819aa0530d01f7c4a27dffdfc8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9f548a02957314819aa0530d01f7c4a27dffdfc8", "html_url": "https://github.com/rust-lang/rust/commit/9f548a02957314819aa0530d01f7c4a27dffdfc8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9f548a02957314819aa0530d01f7c4a27dffdfc8/comments", "author": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jDomantas", "id": 8329015, "node_id": "MDQ6VXNlcjgzMjkwMTU=", "avatar_url": "https://avatars.githubusercontent.com/u/8329015?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jDomantas", "html_url": "https://github.com/jDomantas", "followers_url": "https://api.github.com/users/jDomantas/followers", "following_url": "https://api.github.com/users/jDomantas/following{/other_user}", "gists_url": "https://api.github.com/users/jDomantas/gists{/gist_id}", "starred_url": "https://api.github.com/users/jDomantas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jDomantas/subscriptions", "organizations_url": "https://api.github.com/users/jDomantas/orgs", "repos_url": "https://api.github.com/users/jDomantas/repos", "events_url": "https://api.github.com/users/jDomantas/events{/privacy}", "received_events_url": "https://api.github.com/users/jDomantas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "url": "https://api.github.com/repos/rust-lang/rust/commits/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4", "html_url": "https://github.com/rust-lang/rust/commit/1ec23e7d33e29c6e14f4fe504e1e253e91339ea4"}], "stats": {"total": 96, "additions": 89, "deletions": 7}, "files": [{"sha": "83a2ada9a288f42d6518235145087d452cd7ee74", "filename": "crates/assists/src/handlers/add_missing_impl_members.rs", "status": "modified", "additions": 59, "deletions": 4, "changes": 63, "blob_url": "https://github.com/rust-lang/rust/blob/9f548a02957314819aa0530d01f7c4a27dffdfc8/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f548a02957314819aa0530d01f7c4a27dffdfc8/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fassists%2Fsrc%2Fhandlers%2Fadd_missing_impl_members.rs?ref=9f548a02957314819aa0530d01f7c4a27dffdfc8", "patch": "@@ -48,7 +48,6 @@ enum AddMissingImplMembersMode {\n //     fn foo(&self) -> u32 {\n //         ${0:todo!()}\n //     }\n-//\n // }\n // ```\n pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -89,8 +88,8 @@ pub(crate) fn add_missing_impl_members(acc: &mut Assists, ctx: &AssistContext) -\n // impl Trait for () {\n //     Type X = ();\n //     fn foo(&self) {}\n-//     $0fn bar(&self) {}\n //\n+//     $0fn bar(&self) {}\n // }\n // ```\n pub(crate) fn add_missing_default_members(acc: &mut Assists, ctx: &AssistContext) -> Option<()> {\n@@ -240,15 +239,18 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n+\n     $0type Output;\n+\n     const CONST: usize = 42;\n+\n     fn foo(&self) {\n         todo!()\n     }\n+\n     fn baz(&self) {\n         todo!()\n     }\n-\n }\"#,\n         );\n     }\n@@ -281,10 +283,10 @@ struct S;\n \n impl Foo for S {\n     fn bar(&self) {}\n+\n     fn foo(&self) {\n         ${0:todo!()}\n     }\n-\n }\"#,\n         );\n     }\n@@ -599,6 +601,7 @@ trait Foo {\n struct S;\n impl Foo for S {\n     $0type Output;\n+\n     fn foo(&self) {\n         todo!()\n     }\n@@ -705,6 +708,58 @@ trait Tr {\n \n impl Tr for () {\n     $0type Ty;\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_whitespace_fixup_preserves_bad_tokens() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for ()<|> {\n+    +++\n+}\"#,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for () {\n+    fn foo() {\n+        ${0:todo!()}\n+    }\n+    +++\n+}\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn test_whitespace_fixup_preserves_comments() {\n+        check_assist(\n+            add_missing_impl_members,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for ()<|> {\n+    // very important\n+}\"#,\n+            r#\"\n+trait Tr {\n+    fn foo();\n+}\n+\n+impl Tr for () {\n+    fn foo() {\n+        ${0:todo!()}\n+    }\n+    // very important\n }\"#,\n         )\n     }"}, {"sha": "b295b5bc67decb9cff53e538f226fe51435ed44f", "filename": "crates/syntax/src/ast/edit.rs", "status": "modified", "additions": 30, "deletions": 3, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/9f548a02957314819aa0530d01f7c4a27dffdfc8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9f548a02957314819aa0530d01f7c4a27dffdfc8/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fsyntax%2Fsrc%2Fast%2Fedit.rs?ref=9f548a02957314819aa0530d01f7c4a27dffdfc8", "patch": "@@ -91,29 +91,56 @@ impl ast::AssocItemList {\n             res = make_multiline(res);\n         }\n         items.into_iter().for_each(|it| res = res.append_item(it));\n-        res\n+        res.fixup_trailing_whitespace().unwrap_or(res)\n     }\n \n     #[must_use]\n     pub fn append_item(&self, item: ast::AssocItem) -> ast::AssocItemList {\n-        let (indent, position) = match self.assoc_items().last() {\n+        let (indent, position, whitespace) = match self.assoc_items().last() {\n             Some(it) => (\n                 leading_indent(it.syntax()).unwrap_or_default().to_string(),\n                 InsertPosition::After(it.syntax().clone().into()),\n+                \"\\n\\n\",\n             ),\n             None => match self.l_curly_token() {\n                 Some(it) => (\n                     \"    \".to_string() + &leading_indent(self.syntax()).unwrap_or_default(),\n                     InsertPosition::After(it.into()),\n+                    \"\\n\",\n                 ),\n                 None => return self.clone(),\n             },\n         };\n-        let ws = tokens::WsBuilder::new(&format!(\"\\n{}\", indent));\n+        let ws = tokens::WsBuilder::new(&format!(\"{}{}\", whitespace, indent));\n         let to_insert: ArrayVec<[SyntaxElement; 2]> =\n             [ws.ws().into(), item.syntax().clone().into()].into();\n         self.insert_children(position, to_insert)\n     }\n+\n+    /// Remove extra whitespace between last item and closing curly brace.\n+    fn fixup_trailing_whitespace(&self) -> Option<ast::AssocItemList> {\n+        let first_token_after_items = self\n+            .assoc_items()\n+            .last()?\n+            .syntax()\n+            .next_sibling_or_token()?;\n+        let last_token_before_curly = self\n+            .r_curly_token()?\n+            .prev_sibling_or_token()?;\n+        if last_token_before_curly != first_token_after_items {\n+            // there is something more between last item and\n+            // right curly than just whitespace - bail out\n+            return None;\n+        }\n+        let whitespace = last_token_before_curly\n+            .clone()\n+            .into_token()\n+            .and_then(ast::Whitespace::cast)?;\n+        let text = whitespace.syntax().text();\n+        let newline = text.rfind(\"\\n\")?;\n+        let keep = tokens::WsBuilder::new(&text[newline..]);\n+        Some(self.replace_children(first_token_after_items..=last_token_before_curly, std::iter::once(keep.ws().into())))\n+    }\n }\n \n impl ast::RecordExprFieldList {"}]}