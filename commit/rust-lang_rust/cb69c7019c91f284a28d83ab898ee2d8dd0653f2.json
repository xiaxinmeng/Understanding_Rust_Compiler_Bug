{"sha": "cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiNjljNzAxOWM5MWYyODRhMjhkODNhYjg5OGVlMmQ4ZGQwNjUzZjI=", "commit": {"author": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T13:19:09Z"}, "committer": {"name": "CohenArthur", "email": "arthur.cohen@epita.fr", "date": "2020-08-22T13:19:09Z"}, "message": "FunctionCx: Replace .module with .codegen_cx.module", "tree": {"sha": "3e2044791e106ef08d9aa530b09116202754b5c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3e2044791e106ef08d9aa530b09116202754b5c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "html_url": "https://github.com/rust-lang/rust/commit/cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/comments", "author": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "committer": {"login": "CohenArthur", "id": 43524065, "node_id": "MDQ6VXNlcjQzNTI0MDY1", "avatar_url": "https://avatars.githubusercontent.com/u/43524065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/CohenArthur", "html_url": "https://github.com/CohenArthur", "followers_url": "https://api.github.com/users/CohenArthur/followers", "following_url": "https://api.github.com/users/CohenArthur/following{/other_user}", "gists_url": "https://api.github.com/users/CohenArthur/gists{/gist_id}", "starred_url": "https://api.github.com/users/CohenArthur/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/CohenArthur/subscriptions", "organizations_url": "https://api.github.com/users/CohenArthur/orgs", "repos_url": "https://api.github.com/users/CohenArthur/repos", "events_url": "https://api.github.com/users/CohenArthur/events{/privacy}", "received_events_url": "https://api.github.com/users/CohenArthur/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "297d65c247511a1415975d6a1d850f9484a6f3c0", "url": "https://api.github.com/repos/rust-lang/rust/commits/297d65c247511a1415975d6a1d850f9484a6f3c0", "html_url": "https://github.com/rust-lang/rust/commit/297d65c247511a1415975d6a1d850f9484a6f3c0"}], "stats": {"total": 124, "additions": 62, "deletions": 62}, "files": [{"sha": "73f6e3719cd92a1f68d9c96da0ff32ca4c1167b5", "filename": "src/abi/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fabi%2Fmod.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -226,9 +226,9 @@ pub(crate) fn import_function<'tcx>(\n impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     /// Instance must be monomorphized\n     pub(crate) fn get_function_ref(&mut self, inst: Instance<'tcx>) -> FuncRef {\n-        let func_id = import_function(selfcodegen_cx.tcx, self.module, inst);\n+        let func_id = import_function(selfcodegen_cx.tcx, selfcodegen_cx.module, inst);\n         let func_ref = self\n-            .module\n+            codegen_cx.module\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n \n         #[cfg(debug_assertions)]\n@@ -250,11 +250,11 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n             call_conv: CallConv::triple_default(self.triple()),\n         };\n         let func_id = self\n-            .module\n+            codegen_cx.module\n             .declare_function(&name, Linkage::Import, &sig)\n             .unwrap();\n         let func_ref = self\n-            .module\n+            codegen_cx.module\n             .declare_func_in_func(func_id, &mut self.bcx.func);\n         let call_inst = self.bcx.ins().call(func_ref, args);\n         #[cfg(debug_assertions)]"}, {"sha": "7d64e16e88d281b1490f94c0419690e24ee290fe", "filename": "src/atomic_shim.rs", "status": "modified", "additions": 14, "deletions": 14, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fatomic_shim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fatomic_shim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fatomic_shim.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -81,51 +81,51 @@ pub(crate) fn init_global_lock_constructor(\n }\n \n pub(crate) fn lock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n-    let atomic_mutex = fx.module.declare_data(\n+    let atomic_mutex = fxcodegen_cx.module.declare_data(\n         \"__cg_clif_global_atomic_mutex\",\n         Linkage::Import,\n         true,\n         false,\n         None,\n     ).unwrap();\n \n-    let pthread_mutex_lock = fx.module.declare_function(\"pthread_mutex_lock\", Linkage::Import, &cranelift_codegen::ir::Signature {\n-        call_conv: fx.module.target_config().default_call_conv,\n+    let pthread_mutex_lock = fxcodegen_cx.module.declare_function(\"pthread_mutex_lock\", Linkage::Import, &cranelift_codegen::ir::Signature {\n+        call_conv: fxcodegen_cx.module.target_config().default_call_conv,\n         params: vec![\n-            AbiParam::new(fx.module.target_config().pointer_type() /* *mut pthread_mutex_t */),\n+            AbiParam::new(fxcodegen_cx.module.target_config().pointer_type() /* *mut pthread_mutex_t */),\n         ],\n         returns: vec![AbiParam::new(types::I32 /* c_int */)],\n     }).unwrap();\n \n-    let pthread_mutex_lock = fx.module.declare_func_in_func(pthread_mutex_lock, fx.bcx.func);\n+    let pthread_mutex_lock = fxcodegen_cx.module.declare_func_in_func(pthread_mutex_lock, fx.bcx.func);\n \n-    let atomic_mutex = fx.module.declare_data_in_func(atomic_mutex, fx.bcx.func);\n-    let atomic_mutex = fx.bcx.ins().global_value(fx.module.target_config().pointer_type(), atomic_mutex);\n+    let atomic_mutex = fxcodegen_cx.module.declare_data_in_func(atomic_mutex, fx.bcx.func);\n+    let atomic_mutex = fx.bcx.ins().global_value(fxcodegen_cx.module.target_config().pointer_type(), atomic_mutex);\n \n     fx.bcx.ins().call(pthread_mutex_lock, &[atomic_mutex]);\n }\n \n pub(crate) fn unlock_global_lock(fx: &mut FunctionCx<'_, '_, impl Backend>) {\n-    let atomic_mutex = fx.module.declare_data(\n+    let atomic_mutex = fxcodegen_cx.module.declare_data(\n         \"__cg_clif_global_atomic_mutex\",\n         Linkage::Import,\n         true,\n         false,\n         None,\n     ).unwrap();\n \n-    let pthread_mutex_unlock = fx.module.declare_function(\"pthread_mutex_unlock\", Linkage::Import, &cranelift_codegen::ir::Signature {\n-        call_conv: fx.module.target_config().default_call_conv,\n+    let pthread_mutex_unlock = fxcodegen_cx.module.declare_function(\"pthread_mutex_unlock\", Linkage::Import, &cranelift_codegen::ir::Signature {\n+        call_conv: fxcodegen_cx.module.target_config().default_call_conv,\n         params: vec![\n-            AbiParam::new(fx.module.target_config().pointer_type() /* *mut pthread_mutex_t */),\n+            AbiParam::new(fxcodegen_cx.module.target_config().pointer_type() /* *mut pthread_mutex_t */),\n         ],\n         returns: vec![AbiParam::new(types::I32 /* c_int */)],\n     }).unwrap();\n \n-    let pthread_mutex_unlock = fx.module.declare_func_in_func(pthread_mutex_unlock, fx.bcx.func);\n+    let pthread_mutex_unlock = fxcodegen_cx.module.declare_func_in_func(pthread_mutex_unlock, fx.bcx.func);\n \n-    let atomic_mutex = fx.module.declare_data_in_func(atomic_mutex, fx.bcx.func);\n-    let atomic_mutex = fx.bcx.ins().global_value(fx.module.target_config().pointer_type(), atomic_mutex);\n+    let atomic_mutex = fxcodegen_cx.module.declare_data_in_func(atomic_mutex, fx.bcx.func);\n+    let atomic_mutex = fx.bcx.ins().global_value(fxcodegen_cx.module.target_config().pointer_type(), atomic_mutex);\n \n     fx.bcx.ins().call(pthread_mutex_unlock, &[atomic_mutex]);\n }"}, {"sha": "bb7ee9e995b55d6f372bb5accc524c2658c8200e", "filename": "src/base.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbase.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -13,8 +13,8 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let mir = tcx.instance_mir(instance.def);\n \n     // Declare function\n-    let (name, sig) = get_function_name_and_sig(tcx, cx.module.isa().triple(), instance, false);\n-    let func_id = cx.module.declare_function(&name, linkage, &sig).unwrap();\n+    let (name, sig) = get_function_name_and_sig(tcx, cxcodegen_cx.module.isa().triple(), instance, false);\n+    let func_id = cxcodegen_cx.module.declare_function(&name, linkage, &sig).unwrap();\n \n     // Make FunctionBuilder\n     let context = &mut cx.cached_context;\n@@ -30,12 +30,12 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     let block_map: IndexVec<BasicBlock, Block> = (0..mir.basic_blocks().len()).map(|_| bcx.create_block()).collect();\n \n     // Make FunctionCx\n-    let pointer_type = cx.module.target_config().pointer_type();\n+    let pointer_type = cxcodegen_cx.module.target_config().pointer_type();\n     let clif_comments = crate::pretty_clif::CommentWriter::new(tcx, instance);\n \n     let mut fx = FunctionCx {\n         tcx,\n-        module: &mut cx.module,\n+        module: &mut cxcodegen_cx.module,\n         global_asm: &mut cx.global_asm,\n         pointer_type,\n \n@@ -98,10 +98,10 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     // instruction, which doesn't have an encoding.\n     context.compute_cfg();\n     context.compute_domtree();\n-    context.eliminate_unreachable_code(cx.module.isa()).unwrap();\n+    context.eliminate_unreachable_code(cxcodegen_cx.module.isa()).unwrap();\n \n     // Define function\n-    let module = &mut cx.module;\n+    let module = &mut cxcodegen_cx.module;\n     tcx.sess.time(\n         \"define function\",\n         || module.define_function(\n@@ -115,14 +115,14 @@ pub(crate) fn trans_fn<'tcx, B: Backend + 'static>(\n     crate::pretty_clif::write_clif_file(\n         cxcodegen_cx.tcx,\n         \"opt\",\n-        Some(cx.module.isa()),\n+        Some(cxcodegen_cx.module.isa()),\n         instance,\n         &context,\n         &clif_comments,\n     );\n \n     // Define debuginfo for function\n-    let isa = cx.module.isa();\n+    let isa = cxcodegen_cx.module.isa();\n     let debug_context = &mut cx.debug_context;\n     let unwind_context = &mut cx.unwind_context;\n     tcx.sess.time(\"generate debug info\", || {"}, {"sha": "56bf9df7cc2bb8d3ee27f513c75662e6bec05849", "filename": "src/common.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fcommon.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fcommon.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcommon.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -395,7 +395,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n     }\n \n     pub(crate) fn triple(&self) -> &target_lexicon::Triple {\n-        self.module.isa().triple()\n+        selfcodegen_cx.module.isa().triple()\n     }\n \n     pub(crate) fn anonymous_str(&mut self, prefix: &str, msg: &str) -> Value {\n@@ -408,7 +408,7 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n         let mut data_ctx = DataContext::new();\n         data_ctx.define(msg.as_bytes().to_vec().into_boxed_slice());\n         let msg_id = self\n-            .module\n+            codegen_cx.module\n             .declare_data(\n                 &format!(\"__{}_{:08x}\", prefix, msg_hash),\n                 Linkage::Local,\n@@ -419,9 +419,9 @@ impl<'tcx, B: Backend + 'static> FunctionCx<'_, 'tcx, B> {\n             .unwrap();\n \n         // Ignore DuplicateDefinition error, as the data will be the same\n-        let _ = self.module.define_data(msg_id, &data_ctx);\n+        let _ = selfcodegen_cx.module.define_data(msg_id, &data_ctx);\n \n-        let local_msg_id = self.module.declare_data_in_func(msg_id, self.bcx.func);\n+        let local_msg_id = selfcodegen_cx.module.declare_data_in_func(msg_id, self.bcx.func);\n         #[cfg(debug_assertions)]\n         {\n             self.add_comment(local_msg_id, msg);"}, {"sha": "0f84982cb3e3dd13ccc5f0423d088a7fcc41a4de", "filename": "src/constant.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -67,8 +67,8 @@ pub(crate) fn codegen_tls_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CValue<'tcx> {\n-    let data_id = data_id_for_static(fxcodegen_cx.tcx, fx.module, def_id, false);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    let data_id = data_id_for_static(fxcodegen_cx.tcx, fxcodegen_cx.module, def_id, false);\n+    let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"tls {:?}\", def_id));\n     let tls_ptr = fx.bcx.ins().tls_value(fx.pointer_type, local_data_id);\n@@ -80,8 +80,8 @@ fn codegen_static_ref<'tcx>(\n     def_id: DefId,\n     layout: TyAndLayout<'tcx>,\n ) -> CPlace<'tcx> {\n-    let data_id = data_id_for_static(fxcodegen_cx.tcx, fx.module, def_id, false);\n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    let data_id = data_id_for_static(fxcodegen_cx.tcx, fxcodegen_cx.module, def_id, false);\n+    let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);\n@@ -168,21 +168,21 @@ pub(crate) fn trans_const_value<'tcx>(\n                     let base_addr = match alloc_kind {\n                         Some(GlobalAlloc::Memory(alloc)) => {\n                             fx.constants_cx.todo.push(TodoItem::Alloc(ptr.alloc_id));\n-                            let data_id = data_id_for_alloc_id(fx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n-                            let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                            let data_id = data_id_for_alloc_id(fxcodegen_cx.module, ptr.alloc_id, alloc.align, alloc.mutability);\n+                            let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", ptr.alloc_id));\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n                         }\n                         Some(GlobalAlloc::Function(instance)) => {\n-                            let func_id = crate::abi::import_function(fxcodegen_cx.tcx, fx.module, instance);\n-                            let local_func_id = fx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n+                            let func_id = crate::abi::import_function(fxcodegen_cx.tcx, fxcodegen_cx.module, instance);\n+                            let local_func_id = fxcodegen_cx.module.declare_func_in_func(func_id, &mut fx.bcx.func);\n                             fx.bcx.ins().func_addr(fx.pointer_type, local_func_id)\n                         }\n                         Some(GlobalAlloc::Static(def_id)) => {\n                             assert!(fxcodegen_cx.tcx.is_static(def_id));\n-                            let data_id = data_id_for_static(fxcodegen_cx.tcx, fx.module, def_id, false);\n-                            let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+                            let data_id = data_id_for_static(fxcodegen_cx.tcx, fxcodegen_cx.module, def_id, false);\n+                            let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n                             #[cfg(debug_assertions)]\n                             fx.add_comment(local_data_id, format!(\"{:?}\", def_id));\n                             fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n@@ -217,9 +217,9 @@ fn pointer_for_allocation<'tcx>(\n ) -> crate::pointer::Pointer {\n     let alloc_id = fxcodegen_cx.tcx.create_memory_alloc(alloc);\n     fx.constants_cx.todo.push(TodoItem::Alloc(alloc_id));\n-    let data_id = data_id_for_alloc_id(fx.module, alloc_id, alloc.align, alloc.mutability);\n+    let data_id = data_id_for_alloc_id(fxcodegen_cx.module, alloc_id, alloc.align, alloc.mutability);\n \n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(local_data_id, format!(\"{:?}\", alloc_id));\n     let global_ptr = fx.bcx.ins().global_value(fx.pointer_type, local_data_id);"}, {"sha": "ceb0f169f07fcb63aaa6d378d06f83c4a7ce87ce", "filename": "src/driver/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fdriver%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fdriver%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver%2Fmod.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -38,9 +38,9 @@ fn codegen_mono_items<'tcx>(\n             match mono_item {\n                 MonoItem::Fn(instance) => {\n                     let (name, sig) =\n-                        get_function_name_and_sig(cxcodegen_cx.tcx, cx.module.isa().triple(), instance, false);\n+                        get_function_name_and_sig(cxcodegen_cx.tcx, cxcodegen_cx.module.isa().triple(), instance, false);\n                     let linkage = crate::linkage::get_clif_linkage(mono_item, linkage, visibility);\n-                    cx.module.declare_function(&name, linkage, &sig).unwrap();\n+                    cxcodegen_cx.module.declare_function(&name, linkage, &sig).unwrap();\n                 }\n                 MonoItem::Static(_) | MonoItem::GlobalAsm(_) => {}\n             }"}, {"sha": "ed4b1d6e43072402244dc1034b2a2f0dcd4fefc8", "filename": "src/inline_asm.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Finline_asm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Finline_asm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Finline_asm.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -169,12 +169,12 @@ fn call_inline_asm<'tcx>(\n     #[cfg(debug_assertions)]\n     fx.add_comment(stack_slot, \"inline asm scratch slot\");\n \n-    let inline_asm_func = fx.module.declare_function(asm_name, Linkage::Import, &Signature {\n+    let inline_asm_func = fxcodegen_cx.module.declare_function(asm_name, Linkage::Import, &Signature {\n         call_conv: CallConv::SystemV,\n         params: vec![AbiParam::new(fx.pointer_type)],\n         returns: vec![],\n     }).unwrap();\n-    let inline_asm_func = fx.module.declare_func_in_func(inline_asm_func, &mut fx.bcx.func);\n+    let inline_asm_func = fxcodegen_cx.module.declare_func_in_func(inline_asm_func, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     fx.add_comment(inline_asm_func, asm_name);\n "}, {"sha": "1ff05170d73783f5db7b95f185dbfce45331233a", "filename": "src/intrinsics/mod.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fintrinsics%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fintrinsics%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fmod.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -494,10 +494,10 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n \n             if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n-                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memcpy(fxcodegen_cx.module.target_config(), dst, src, byte_amount);\n             } else {\n                 // FIXME emit_small_memmove\n-                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memmove(fxcodegen_cx.module.target_config(), dst, src, byte_amount);\n             }\n         };\n         // NOTE: the volatile variants have src and dst swapped\n@@ -513,10 +513,10 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             // FIXME make the copy actually volatile when using emit_small_mem{cpy,move}\n             if intrinsic.contains(\"nonoverlapping\") {\n                 // FIXME emit_small_memcpy\n-                fx.bcx.call_memcpy(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memcpy(fxcodegen_cx.module.target_config(), dst, src, byte_amount);\n             } else {\n                 // FIXME emit_small_memmove\n-                fx.bcx.call_memmove(fx.module.target_config(), dst, src, byte_amount);\n+                fx.bcx.call_memmove(fxcodegen_cx.module.target_config(), dst, src, byte_amount);\n             }\n         };\n         discriminant_value, (c ptr) {\n@@ -680,7 +680,7 @@ pub(crate) fn codegen_intrinsic_call<'tcx>(\n             let dst_ptr = dst.load_scalar(fx);\n             // FIXME make the memset actually volatile when switching to emit_small_memset\n             // FIXME use emit_small_memset\n-            fx.bcx.call_memset(fx.module.target_config(), dst_ptr, val, count);\n+            fx.bcx.call_memset(fxcodegen_cx.module.target_config(), dst_ptr, val, count);\n         };\n         ctlz | ctlz_nonzero, <T> (v arg) {\n             // FIXME trap on `ctlz_nonzero` with zero arg."}, {"sha": "269c66e8b0c7a6049f106d905e723636a2e981ad", "filename": "src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -160,8 +160,8 @@ impl<'tcx, B: Backend + 'static> CodegenCx<'tcx, B> {\n     }\n \n     fn finalize(mut self) -> (Module<B>, String, Option<DebugContext<'tcx>>, UnwindContext<'tcx>) {\n-        self.constants_cx.finalize(selfcodegen_cx.tcx, &mut self.module);\n-        (self.module, self.global_asm, self.debug_context, self.unwind_context)\n+        self.constants_cx.finalize(selfcodegen_cx.tcx, &mut selfcodegen_cx.module);\n+        (selfcodegen_cx.module, self.global_asm, self.debug_context, self.unwind_context)\n     }\n }\n "}, {"sha": "2f059e284765749ea69b2707dc5909301a0995ba", "filename": "src/trap.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Ftrap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Ftrap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftrap.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -2,7 +2,7 @@ use crate::prelude::*;\n \n fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, msg: &str) {\n     let puts = fx\n-        .module\n+        codegen_cx.module\n         .declare_function(\n             \"puts\",\n             Linkage::Import,\n@@ -13,7 +13,7 @@ fn codegen_print(fx: &mut FunctionCx<'_, '_, impl cranelift_module::Backend>, ms\n             },\n         )\n         .unwrap();\n-    let puts = fx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n+    let puts = fxcodegen_cx.module.declare_func_in_func(puts, &mut fx.bcx.func);\n     #[cfg(debug_assertions)]\n     {\n         fx.add_comment(puts, \"puts\");"}, {"sha": "8db4afa00f9328c9a27eb14bcacdefcf2a011de5", "filename": "src/value_and_place.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fvalue_and_place.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fvalue_and_place.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvalue_and_place.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -595,7 +595,7 @@ impl<'tcx> CPlace<'tcx> {\n                 let src_align = src_layout.align.abi.bytes() as u8;\n                 let dst_align = dst_layout.align.abi.bytes() as u8;\n                 fx.bcx.emit_small_memory_copy(\n-                    fx.module.target_config(),\n+                    fxcodegen_cx.module.target_config(),\n                     to_addr,\n                     from_addr,\n                     size,"}, {"sha": "f11c881a65dd6bf22499f55b7041db27374a9f46", "filename": "src/vtable.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fvtable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cb69c7019c91f284a28d83ab898ee2d8dd0653f2/src%2Fvtable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fvtable.rs?ref=cb69c7019c91f284a28d83ab898ee2d8dd0653f2", "patch": "@@ -80,7 +80,7 @@ pub(crate) fn get_vtable<'tcx>(\n         data_id\n     };\n \n-    let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n+    let local_data_id = fxcodegen_cx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     fx.bcx.ins().global_value(fx.pointer_type, local_data_id)\n }\n \n@@ -93,7 +93,7 @@ fn build_vtable<'tcx>(\n     let usize_size = fx.layout_of(fxcodegen_cx.tcx.types.usize).size.bytes() as usize;\n \n     let drop_in_place_fn =\n-        import_function(tcx, fx.module, Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fxcodegen_cx.tcx));\n+        import_function(tcx, fxcodegen_cx.module, Instance::resolve_drop_in_place(tcx, layout.ty).polymorphize(fxcodegen_cx.tcx));\n \n     let mut components: Vec<_> = vec![Some(drop_in_place_fn), None, None];\n \n@@ -108,7 +108,7 @@ fn build_vtable<'tcx>(\n         opt_mth.map_or(None, |(def_id, substs)| {\n             Some(import_function(\n                 tcx,\n-                fx.module,\n+                fxcodegen_cx.module,\n                 Instance::resolve_for_vtable(tcx, ParamEnv::reveal_all(), def_id, substs).unwrap().polymorphize(fxcodegen_cx.tcx),\n             ))\n         })\n@@ -127,13 +127,13 @@ fn build_vtable<'tcx>(\n \n     for (i, component) in components.into_iter().enumerate() {\n         if let Some(func_id) = component {\n-            let func_ref = fx.module.declare_func_in_data(func_id, &mut data_ctx);\n+            let func_ref = fxcodegen_cx.module.declare_func_in_data(func_id, &mut data_ctx);\n             data_ctx.write_function_addr((i * usize_size) as u32, func_ref);\n         }\n     }\n \n     let data_id = fx\n-        .module\n+        codegen_cx.module\n         .declare_data(\n             &format!(\n                 \"__vtable.{}.for.{:?}.{}\",\n@@ -159,7 +159,7 @@ fn build_vtable<'tcx>(\n         )\n         .unwrap();\n \n-    fx.module.define_data(data_id, &data_ctx).unwrap();\n+    fxcodegen_cx.module.define_data(data_id, &data_ctx).unwrap();\n \n     data_id\n }"}]}