{"sha": "3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "node_id": "C_kwDOAAsO6NoAKDNmYTYzN2RhY2I3OGRkMWEwN2MzNmRmMDBmZWQyY2QzZTBmMTlkNzQ", "commit": {"author": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-10T21:59:33Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2022-07-11T20:58:57Z"}, "message": "Remove box syntax for Box<rustdoc::clean::types::Type> construction\n\nThe type has 80 bytes according to compiler internal rustdoc.", "tree": {"sha": "711d675199973df93039bccdd8c747fe806189ff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/711d675199973df93039bccdd8c747fe806189ff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "html_url": "https://github.com/rust-lang/rust/commit/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74/comments", "author": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "88d72a97fc11097d971568c8b291274be7710ba2", "url": "https://api.github.com/repos/rust-lang/rust/commits/88d72a97fc11097d971568c8b291274be7710ba2", "html_url": "https://github.com/rust-lang/rust/commit/88d72a97fc11097d971568c8b291274be7710ba2"}], "stats": {"total": 22, "additions": 11, "deletions": 11}, "files": [{"sha": "cd028bc4b46111fb340e2b900d9f2ec403c82cc7", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3fa637dacb78dd1a07c36df00fed2cd3e0f19d74/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=3fa637dacb78dd1a07c36df00fed2cd3e0f19d74", "patch": "@@ -403,7 +403,7 @@ fn clean_projection<'tcx>(\n     Type::QPath {\n         assoc: Box::new(projection_to_path_segment(ty, cx)),\n         should_show_cast,\n-        self_type: box self_type,\n+        self_type: Box::new(self_type),\n         trait_,\n     }\n }\n@@ -1320,7 +1320,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             Type::QPath {\n                 assoc: Box::new(p.segments.last().expect(\"segments were empty\").clean(cx)),\n                 should_show_cast,\n-                self_type: box self_type,\n+                self_type: Box::new(self_type),\n                 trait_,\n             }\n         }\n@@ -1340,7 +1340,7 @@ fn clean_qpath<'tcx>(hir_ty: &hir::Ty<'tcx>, cx: &mut DocContext<'tcx>) -> Type\n             Type::QPath {\n                 assoc: Box::new(segment.clean(cx)),\n                 should_show_cast,\n-                self_type: box self_type,\n+                self_type: Box::new(self_type),\n                 trait_,\n             }\n         }\n@@ -1440,7 +1440,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n \n         match self.kind {\n             TyKind::Never => Primitive(PrimitiveType::Never),\n-            TyKind::Ptr(ref m) => RawPointer(m.mutbl, box m.ty.clean(cx)),\n+            TyKind::Ptr(ref m) => RawPointer(m.mutbl, Box::new(m.ty.clean(cx))),\n             TyKind::Rptr(ref l, ref m) => {\n                 // There are two times a `Fresh` lifetime can be created:\n                 // 1. For `&'_ x`, written by the user. This corresponds to `lower_lifetime` in `rustc_ast_lowering`.\n@@ -1452,9 +1452,9 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                 let elided =\n                     l.is_elided() || matches!(l.name, LifetimeName::Param(_, ParamName::Fresh));\n                 let lifetime = if elided { None } else { Some(l.clean(cx)) };\n-                BorrowedRef { lifetime, mutability: m.mutbl, type_: box m.ty.clean(cx) }\n+                BorrowedRef { lifetime, mutability: m.mutbl, type_: Box::new(m.ty.clean(cx)) }\n             }\n-            TyKind::Slice(ty) => Slice(box ty.clean(cx)),\n+            TyKind::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n             TyKind::Array(ty, ref length) => {\n                 let length = match length {\n                     hir::ArrayLen::Infer(_, _) => \"_\".to_string(),\n@@ -1473,7 +1473,7 @@ impl<'tcx> Clean<'tcx, Type> for hir::Ty<'tcx> {\n                     }\n                 };\n \n-                Array(box ty.clean(cx), length)\n+                Array(Box::new(ty.clean(cx)), length)\n             }\n             TyKind::Tup(tys) => Tuple(tys.iter().map(|x| x.clean(cx)).collect()),\n             TyKind::OpaqueDef(item_id, _) => {\n@@ -1540,16 +1540,16 @@ fn clean_ty<'tcx>(this: Ty<'tcx>, cx: &mut DocContext<'tcx>, def_id: Option<DefI\n         ty::Uint(uint_ty) => Primitive(uint_ty.into()),\n         ty::Float(float_ty) => Primitive(float_ty.into()),\n         ty::Str => Primitive(PrimitiveType::Str),\n-        ty::Slice(ty) => Slice(box ty.clean(cx)),\n+        ty::Slice(ty) => Slice(Box::new(ty.clean(cx))),\n         ty::Array(ty, n) => {\n             let mut n = cx.tcx.lift(n).expect(\"array lift failed\");\n             n = n.eval(cx.tcx, ty::ParamEnv::reveal_all());\n             let n = print_const(cx, n);\n-            Array(box ty.clean(cx), n)\n+            Array(Box::new(ty.clean(cx)), n)\n         }\n-        ty::RawPtr(mt) => RawPointer(mt.mutbl, box mt.ty.clean(cx)),\n+        ty::RawPtr(mt) => RawPointer(mt.mutbl, Box::new(mt.ty.clean(cx))),\n         ty::Ref(r, ty, mutbl) => {\n-            BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: box ty.clean(cx) }\n+            BorrowedRef { lifetime: r.clean(cx), mutability: mutbl, type_: Box::new(ty.clean(cx)) }\n         }\n         ty::FnDef(..) | ty::FnPtr(_) => {\n             let ty = cx.tcx.lift(this).expect(\"FnPtr lift failed\");"}]}