{"sha": "7c6274d464d729faa9bab45086df847d5374431b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjdjNjI3NGQ0NjRkNzI5ZmFhOWJhYjQ1MDg2ZGY4NDdkNTM3NDQzMWI=", "commit": {"author": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2020-12-17T03:46:19Z"}, "committer": {"name": "Tyson Nottingham", "email": "tgnottingham@gmail.com", "date": "2021-01-02T06:49:16Z"}, "message": "rustc_serialize: have read_raw_bytes take MaybeUninit<u8> slice", "tree": {"sha": "15380974ccc9da4e68a7b1949a4cb8f6742cc5c4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/15380974ccc9da4e68a7b1949a4cb8f6742cc5c4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c6274d464d729faa9bab45086df847d5374431b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c6274d464d729faa9bab45086df847d5374431b", "html_url": "https://github.com/rust-lang/rust/commit/7c6274d464d729faa9bab45086df847d5374431b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c6274d464d729faa9bab45086df847d5374431b/comments", "author": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tgnottingham", "id": 3668166, "node_id": "MDQ6VXNlcjM2NjgxNjY=", "avatar_url": "https://avatars.githubusercontent.com/u/3668166?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tgnottingham", "html_url": "https://github.com/tgnottingham", "followers_url": "https://api.github.com/users/tgnottingham/followers", "following_url": "https://api.github.com/users/tgnottingham/following{/other_user}", "gists_url": "https://api.github.com/users/tgnottingham/gists{/gist_id}", "starred_url": "https://api.github.com/users/tgnottingham/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tgnottingham/subscriptions", "organizations_url": "https://api.github.com/users/tgnottingham/orgs", "repos_url": "https://api.github.com/users/tgnottingham/repos", "events_url": "https://api.github.com/users/tgnottingham/events{/privacy}", "received_events_url": "https://api.github.com/users/tgnottingham/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "url": "https://api.github.com/repos/rust-lang/rust/commits/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b", "html_url": "https://github.com/rust-lang/rust/commit/a4daa63a90f46e3c6e36efe5e0743eab09f6f12b"}], "stats": {"total": 20, "additions": 15, "deletions": 5}, "files": [{"sha": "8afe94ac8dba845679f30ed04bae4b2128317dde", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7c6274d464d729faa9bab45086df847d5374431b/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6274d464d729faa9bab45086df847d5374431b/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=7c6274d464d729faa9bab45086df847d5374431b", "patch": "@@ -4,7 +4,7 @@ use rustc_serialize::{\n     Decodable, Encodable,\n };\n use std::hash::{Hash, Hasher};\n-use std::mem;\n+use std::mem::{self, MaybeUninit};\n \n #[derive(Eq, PartialEq, Ord, PartialOrd, Debug, Clone, Copy)]\n pub struct Fingerprint(u64, u64);\n@@ -61,7 +61,7 @@ impl Fingerprint {\n     }\n \n     pub fn decode_opaque(decoder: &mut opaque::Decoder<'_>) -> Result<Fingerprint, String> {\n-        let mut bytes = [0; 16];\n+        let mut bytes: [MaybeUninit<u8>; 16] = MaybeUninit::uninit_array();\n \n         decoder.read_raw_bytes(&mut bytes)?;\n "}, {"sha": "5ef1c7241debae8dbc717b8c5bd328cbd4e75669", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 13, "deletions": 3, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/7c6274d464d729faa9bab45086df847d5374431b/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c6274d464d729faa9bab45086df847d5374431b/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=7c6274d464d729faa9bab45086df847d5374431b", "patch": "@@ -1,6 +1,8 @@\n use crate::leb128::{self, read_signed_leb128, write_signed_leb128};\n use crate::serialize;\n use std::borrow::Cow;\n+use std::mem::MaybeUninit;\n+use std::ptr;\n \n // -----------------------------------------------------------------------------\n // Encoder\n@@ -179,11 +181,19 @@ impl<'a> Decoder<'a> {\n     }\n \n     #[inline]\n-    pub fn read_raw_bytes(&mut self, s: &mut [u8]) -> Result<(), String> {\n+    pub fn read_raw_bytes(&mut self, s: &mut [MaybeUninit<u8>]) -> Result<(), String> {\n         let start = self.position;\n         let end = start + s.len();\n-\n-        s.copy_from_slice(&self.data[start..end]);\n+        assert!(end <= self.data.len());\n+\n+        // SAFETY: Both `src` and `dst` point to at least `s.len()` elements:\n+        // `src` points to at least `s.len()` elements by above assert, and\n+        // `dst` points to `s.len()` elements by derivation from `s`.\n+        unsafe {\n+            let src = self.data.as_ptr().add(start);\n+            let dst = s.as_mut_ptr() as *mut u8;\n+            ptr::copy_nonoverlapping(src, dst, s.len());\n+        }\n \n         self.position = end;\n "}]}