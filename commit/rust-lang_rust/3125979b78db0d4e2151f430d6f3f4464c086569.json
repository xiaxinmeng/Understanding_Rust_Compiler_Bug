{"sha": "3125979b78db0d4e2151f430d6f3f4464c086569", "node_id": "C_kwDOAAsO6NoAKDMxMjU5NzliNzhkYjBkNGUyMTUxZjQzMGQ2ZjNmNDQ2NGMwODY1Njk", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T01:32:44Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2023-04-27T01:34:03Z"}, "message": "Fix a bad binop error when we need a call", "tree": {"sha": "13ee1fa00775a66ae717ce79fbf91d7df5f98a9e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13ee1fa00775a66ae717ce79fbf91d7df5f98a9e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3125979b78db0d4e2151f430d6f3f4464c086569", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3125979b78db0d4e2151f430d6f3f4464c086569", "html_url": "https://github.com/rust-lang/rust/commit/3125979b78db0d4e2151f430d6f3f4464c086569", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3125979b78db0d4e2151f430d6f3f4464c086569/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "015acc261101aa7efcd3b72c31ff5f320dda65e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/015acc261101aa7efcd3b72c31ff5f320dda65e3", "html_url": "https://github.com/rust-lang/rust/commit/015acc261101aa7efcd3b72c31ff5f320dda65e3"}], "stats": {"total": 60, "additions": 39, "deletions": 21}, "files": [{"sha": "43f40ada5acb612a54fcf4ce9cc158cccff3023d", "filename": "compiler/rustc_hir_typeck/src/method/suggest.rs", "status": "modified", "additions": 26, "deletions": 13, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/3125979b78db0d4e2151f430d6f3f4464c086569/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3125979b78db0d4e2151f430d6f3f4464c086569/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fmethod%2Fsuggest.rs?ref=3125979b78db0d4e2151f430d6f3f4464c086569", "patch": "@@ -27,8 +27,8 @@ use rustc_middle::traits::util::supertraits;\n use rustc_middle::ty::fast_reject::DeepRejectCtxt;\n use rustc_middle::ty::fast_reject::{simplify_type, TreatParams};\n use rustc_middle::ty::print::{with_crate_prefix, with_forced_trimmed_paths};\n+use rustc_middle::ty::IsSuggestable;\n use rustc_middle::ty::{self, GenericArgKind, Ty, TyCtxt, TypeVisitableExt};\n-use rustc_middle::ty::{IsSuggestable, ToPolyTraitRef};\n use rustc_span::symbol::{kw, sym, Ident};\n use rustc_span::Symbol;\n use rustc_span::{edit_distance, source_map, ExpnKind, FileName, MacroKind, Span};\n@@ -2068,7 +2068,11 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let mut derives = Vec::<(String, Span, Symbol)>::new();\n         let mut traits = Vec::new();\n         for (pred, _, _) in unsatisfied_predicates {\n-            let ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred)) = pred.kind().skip_binder() else { continue };\n+            let Some(ty::PredicateKind::Clause(ty::Clause::Trait(trait_pred))) =\n+                pred.kind().no_bound_vars()\n+            else {\n+                continue\n+            };\n             let adt = match trait_pred.self_ty().ty_adt_def() {\n                 Some(adt) if adt.did().is_local() => adt,\n                 _ => continue,\n@@ -2085,22 +2089,31 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     | sym::Hash\n                     | sym::Debug => true,\n                     _ => false,\n+                } && match trait_pred.trait_ref.substs.as_slice() {\n+                    // Only suggest deriving if lhs == rhs...\n+                    [lhs, rhs] => {\n+                        if let Some(lhs) = lhs.as_type()\n+                            && let Some(rhs) = rhs.as_type()\n+                        {\n+                            self.can_eq(self.param_env, lhs, rhs)\n+                        } else {\n+                            false\n+                        }\n+                    },\n+                    // Unary ops can always be derived\n+                    [_] => true,\n+                    _ => false,\n                 };\n                 if can_derive {\n                     let self_name = trait_pred.self_ty().to_string();\n                     let self_span = self.tcx.def_span(adt.did());\n-                    if let Some(poly_trait_ref) = pred.to_opt_poly_trait_pred() {\n-                        for super_trait in supertraits(self.tcx, poly_trait_ref.to_poly_trait_ref())\n+                    for super_trait in\n+                        supertraits(self.tcx, ty::Binder::dummy(trait_pred.trait_ref))\n+                    {\n+                        if let Some(parent_diagnostic_name) =\n+                            self.tcx.get_diagnostic_name(super_trait.def_id())\n                         {\n-                            if let Some(parent_diagnostic_name) =\n-                                self.tcx.get_diagnostic_name(super_trait.def_id())\n-                            {\n-                                derives.push((\n-                                    self_name.clone(),\n-                                    self_span,\n-                                    parent_diagnostic_name,\n-                                ));\n-                            }\n+                            derives.push((self_name.clone(), self_span, parent_diagnostic_name));\n                         }\n                     }\n                     derives.push((self_name, self_span, diagnostic_name));"}, {"sha": "e91ae4466eb87a20ef6a81e9301858c10c500c0d", "filename": "compiler/rustc_hir_typeck/src/op.rs", "status": "modified", "additions": 8, "deletions": 4, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/3125979b78db0d4e2151f430d6f3f4464c086569/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3125979b78db0d4e2151f430d6f3f4464c086569/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_hir_typeck%2Fsrc%2Fop.rs?ref=3125979b78db0d4e2151f430d6f3f4464c086569", "patch": "@@ -408,14 +408,18 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                     }\n                 };\n \n-                let is_compatible = |lhs_ty, rhs_ty| {\n+                let is_compatible_after_call = |lhs_ty, rhs_ty| {\n                     self.lookup_op_method(\n                         lhs_ty,\n                         Some((rhs_expr, rhs_ty)),\n                         Op::Binary(op, is_assign),\n                         expected,\n                     )\n                     .is_ok()\n+                        // Suggest calling even if, after calling, the types don't\n+                        // implement the operator, since it'll lead to better\n+                        // diagnostics later.\n+                        || self.can_eq(self.param_env, lhs_ty, rhs_ty)\n                 };\n \n                 // We should suggest `a + b` => `*a + b` if `a` is copy, and suggest\n@@ -436,16 +440,16 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                         suggest_deref_binop(*lhs_deref_ty);\n                     }\n                 } else if self.suggest_fn_call(&mut err, lhs_expr, lhs_ty, |lhs_ty| {\n-                    is_compatible(lhs_ty, rhs_ty)\n+                    is_compatible_after_call(lhs_ty, rhs_ty)\n                 }) || self.suggest_fn_call(&mut err, rhs_expr, rhs_ty, |rhs_ty| {\n-                    is_compatible(lhs_ty, rhs_ty)\n+                    is_compatible_after_call(lhs_ty, rhs_ty)\n                 }) || self.suggest_two_fn_call(\n                     &mut err,\n                     rhs_expr,\n                     rhs_ty,\n                     lhs_expr,\n                     lhs_ty,\n-                    |lhs_ty, rhs_ty| is_compatible(lhs_ty, rhs_ty),\n+                    |lhs_ty, rhs_ty| is_compatible_after_call(lhs_ty, rhs_ty),\n                 ) {\n                     // Cool\n                 }"}, {"sha": "cd632e64fe5fccf2c5b589f8820a82bb1e2f1c4b", "filename": "tests/ui/issues/issue-62375.stderr", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/3125979b78db0d4e2151f430d6f3f4464c086569/tests%2Fui%2Fissues%2Fissue-62375.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3125979b78db0d4e2151f430d6f3f4464c086569/tests%2Fui%2Fissues%2Fissue-62375.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Fissues%2Fissue-62375.stderr?ref=3125979b78db0d4e2151f430d6f3f4464c086569", "patch": "@@ -11,11 +11,12 @@ note: an implementation of `PartialEq<fn(()) -> A {A::Value}>` might be missing\n    |\n LL | enum A {\n    | ^^^^^^ must implement `PartialEq<fn(()) -> A {A::Value}>`\n-help: consider annotating `A` with `#[derive(PartialEq)]`\n-   |\n-LL + #[derive(PartialEq)]\n-LL | enum A {\n+note: the trait `PartialEq` must be implemented\n+  --> $SRC_DIR/core/src/cmp.rs:LL:COL\n+help: use parentheses to construct this tuple variant\n    |\n+LL |     a == A::Value(/* () */);\n+   |                  ++++++++++\n \n error: aborting due to previous error\n "}]}