{"sha": "82efdff34bf24680bef58eca399ec3f20748a96a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgyZWZkZmYzNGJmMjQ2ODBiZWY1OGVjYTM5OWVjM2YyMDc0OGE5NmE=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T14:12:00Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2018-08-04T14:12:00Z"}, "message": "no-struct-literal-restr", "tree": {"sha": "c7f5d7346b0e8eaf4d9df8d728c985db523f1938", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c7f5d7346b0e8eaf4d9df8d728c985db523f1938"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/82efdff34bf24680bef58eca399ec3f20748a96a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/82efdff34bf24680bef58eca399ec3f20748a96a", "html_url": "https://github.com/rust-lang/rust/commit/82efdff34bf24680bef58eca399ec3f20748a96a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/82efdff34bf24680bef58eca399ec3f20748a96a/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c5483822520e9c754f3ec8b9eb8e68bd5ef7c373", "url": "https://api.github.com/repos/rust-lang/rust/commits/c5483822520e9c754f3ec8b9eb8e68bd5ef7c373", "html_url": "https://github.com/rust-lang/rust/commit/c5483822520e9c754f3ec8b9eb8e68bd5ef7c373"}], "stats": {"total": 237, "additions": 137, "deletions": 100}, "files": [{"sha": "ad654df9e1a70dc23d32c457c5ec8ff264e78e9d", "filename": "src/grammar/expressions/atom.rs", "status": "modified", "additions": 7, "deletions": 5, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/src%2Fgrammar%2Fexpressions%2Fatom.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/src%2Fgrammar%2Fexpressions%2Fatom.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fatom.rs?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -33,13 +33,13 @@ pub(super) const ATOM_EXPR_FIRST: TokenSet =\n                    IDENT, SELF_KW, SUPER_KW, COLONCOLON ],\n     ];\n \n-pub(super) fn atom_expr(p: &mut Parser) -> Option<CompletedMarker> {\n+pub(super) fn atom_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n     match literal(p) {\n         Some(m) => return Some(m),\n         None => (),\n     }\n     if paths::is_path_start(p) {\n-        return Some(path_expr(p));\n+        return Some(path_expr(p, r));\n     }\n     let la = p.nth(1);\n     let done = match p.current() {\n@@ -91,7 +91,8 @@ fn lambda_expr(p: &mut Parser) -> CompletedMarker {\n // fn foo() {\n //     if true {};\n //     if true {} else {};\n-//     if true {} else if false {} else {}\n+//     if true {} else if false {} else {};\n+//     if S {};\n // }\n fn if_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(IF_KW));\n@@ -112,18 +113,19 @@ fn if_expr(p: &mut Parser) -> CompletedMarker {\n fn if_head(p: &mut Parser) {\n     assert!(p.at(IF_KW));\n     p.bump();\n-    expr(p);\n+    expr_no_struct(p);\n }\n \n // test match_expr\n // fn foo() {\n //     match () { };\n+//     match S {};\n // }\n fn match_expr(p: &mut Parser) -> CompletedMarker {\n     assert!(p.at(MATCH_KW));\n     let m = p.start();\n     p.bump();\n-    expr(p);\n+    expr_no_struct(p);\n     p.eat(L_CURLY);\n     while !p.at(EOF) && !p.at(R_CURLY) {\n         match_arm(p);"}, {"sha": "cedbc235f9669ae496fbc662f17d32b3539e9b0b", "filename": "src/grammar/expressions/mod.rs", "status": "modified", "additions": 56, "deletions": 54, "changes": 110, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/src%2Fgrammar%2Fexpressions%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/src%2Fgrammar%2Fexpressions%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fgrammar%2Fexpressions%2Fmod.rs?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -6,7 +6,13 @@ pub(super) use self::atom::literal;\n const EXPR_FIRST: TokenSet = UNARY_EXPR_FIRST;\n \n pub(super) fn expr(p: &mut Parser) {\n-    expr_bp(p, 1)\n+    let r = Restrictions { forbid_structs: false };\n+    expr_bp(p, r, 1)\n+}\n+\n+fn expr_no_struct(p: &mut Parser) {\n+    let r = Restrictions { forbid_structs: true };\n+    expr_bp(p, r, 1)\n }\n \n // test block\n@@ -22,6 +28,11 @@ pub(super) fn block(p: &mut Parser) {\n     atom::block_expr(p);\n }\n \n+#[derive(Clone, Copy)]\n+struct Restrictions {\n+    forbid_structs: bool\n+}\n+\n // test expr_binding_power\n // fn foo() {\n //     1 + 2 * 3 == 1 * 2 + 3\n@@ -36,8 +47,8 @@ fn bp_of(op: SyntaxKind) -> u8 {\n }\n \n // Parses expression with binding power of at least bp.\n-fn expr_bp(p: &mut Parser, bp: u8) {\n-    let mut lhs = match unary_expr(p) {\n+fn expr_bp(p: &mut Parser, r: Restrictions, bp: u8) {\n+    let mut lhs = match unary_expr(p, r) {\n         Some(lhs) => lhs,\n         None => return,\n     };\n@@ -47,7 +58,7 @@ fn expr_bp(p: &mut Parser, bp: u8) {\n         if op_bp < bp {\n             break;\n         }\n-        lhs = bin_expr(p, lhs, op_bp);\n+        lhs = bin_expr(p, r, lhs, op_bp);\n     }\n }\n \n@@ -57,17 +68,46 @@ const UNARY_EXPR_FIRST: TokenSet =\n         atom::ATOM_EXPR_FIRST,\n     ];\n \n-fn unary_expr(p: &mut Parser) -> Option<CompletedMarker> {\n-    let done = match p.current() {\n-        AMPERSAND => ref_expr(p),\n-        STAR => deref_expr(p),\n-        EXCL => not_expr(p),\n+fn unary_expr(p: &mut Parser, r: Restrictions) -> Option<CompletedMarker> {\n+    let m;\n+    let kind = match p.current() {\n+        // test ref_expr\n+        // fn foo() {\n+        //     let _ = &1;\n+        //     let _ = &mut &f();\n+        // }\n+        AMPERSAND => {\n+            m = p.start();\n+            p.bump();\n+            p.eat(MUT_KW);\n+            REF_EXPR\n+\n+        },\n+        // test deref_expr\n+        // fn foo() {\n+        //     **&1;\n+        // }\n+        STAR => {\n+            m = p.start();\n+            p.bump();\n+            DEREF_EXPR\n+        },\n+        // test not_expr\n+        // fn foo() {\n+        //     !!true;\n+        // }\n+        EXCL => {\n+            m = p.start();\n+            p.bump();\n+            NOT_EXPR\n+        },\n         _ => {\n-            let lhs = atom::atom_expr(p)?;\n-            postfix_expr(p, lhs)\n+            let lhs = atom::atom_expr(p, r)?;\n+            return Some(postfix_expr(p, lhs))\n         }\n     };\n-    Some(done)\n+    expr(p);\n+    Some(m.complete(p, kind))\n }\n \n fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n@@ -87,44 +127,6 @@ fn postfix_expr(p: &mut Parser, mut lhs: CompletedMarker) -> CompletedMarker {\n     lhs\n }\n \n-// test ref_expr\n-// fn foo() {\n-//     let _ = &1;\n-//     let _ = &mut &f();\n-// }\n-fn ref_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(AMPERSAND));\n-    let m = p.start();\n-    p.bump();\n-    p.eat(MUT_KW);\n-    expr(p);\n-    m.complete(p, REF_EXPR)\n-}\n-\n-// test deref_expr\n-// fn foo() {\n-//     **&1;\n-// }\n-fn deref_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(STAR));\n-    let m = p.start();\n-    p.bump();\n-    expr(p);\n-    m.complete(p, DEREF_EXPR)\n-}\n-\n-// test not_expr\n-// fn foo() {\n-//     !!true;\n-// }\n-fn not_expr(p: &mut Parser) -> CompletedMarker {\n-    assert!(p.at(EXCL));\n-    let m = p.start();\n-    p.bump();\n-    expr(p);\n-    m.complete(p, NOT_EXPR)\n-}\n-\n // test call_expr\n // fn foo() {\n //     let _ = f();\n@@ -199,11 +201,11 @@ fn arg_list(p: &mut Parser) {\n //     let _ = a::b;\n //     let _ = ::a::<b>;\n // }\n-fn path_expr(p: &mut Parser) -> CompletedMarker {\n+fn path_expr(p: &mut Parser, r: Restrictions) -> CompletedMarker {\n     assert!(paths::is_path_start(p));\n     let m = p.start();\n     paths::expr_path(p);\n-    if p.at(L_CURLY) {\n+    if p.at(L_CURLY) && !r.forbid_structs {\n         struct_lit(p);\n         m.complete(p, STRUCT_LIT)\n     } else {\n@@ -243,13 +245,13 @@ fn struct_lit(p: &mut Parser) {\n     p.expect(R_CURLY);\n }\n \n-fn bin_expr(p: &mut Parser, lhs: CompletedMarker, bp: u8) -> CompletedMarker {\n+fn bin_expr(p: &mut Parser, r: Restrictions, lhs: CompletedMarker, bp: u8) -> CompletedMarker {\n     assert!(match p.current() {\n         MINUS | PLUS | STAR | SLASH | EQEQ | NEQ => true,\n         _ => false,\n     });\n     let m = lhs.precede(p);\n     p.bump();\n-    expr_bp(p, bp);\n+    expr_bp(p, r, bp);\n     m.complete(p, BIN_EXPR)\n }"}, {"sha": "4b0d9af89521c6df7ffc6521ddc1c63aaf534293", "filename": "tests/data/parser/inline/0065_if_expr.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.rs?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -1,5 +1,6 @@\n fn foo() {\n     if true {};\n     if true {} else {};\n-    if true {} else if false {} else {}\n+    if true {} else if false {} else {};\n+    if S {};\n }"}, {"sha": "8bfbf7d17c8b4210a3bc3a25cfa50faef0dd83dd", "filename": "tests/data/parser/inline/0065_if_expr.txt", "status": "modified", "additions": 50, "deletions": 33, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0065_if_expr.txt?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 93)\n-  FN_ITEM@[0; 93)\n+FILE@[0; 107)\n+  FN_ITEM@[0; 107)\n     FN_KW@[0; 2)\n     NAME@[2; 6)\n       WHITESPACE@[2; 3)\n@@ -8,7 +8,7 @@ FILE@[0; 93)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n       WHITESPACE@[8; 9)\n-    BLOCK_EXPR@[9; 93)\n+    BLOCK_EXPR@[9; 107)\n       L_CURLY@[9; 10)\n       EXPR_STMT@[10; 31)\n         IF_EXPR@[10; 25)\n@@ -41,33 +41,50 @@ FILE@[0; 93)\n             R_CURLY@[48; 49)\n         SEMI@[49; 50)\n         WHITESPACE@[50; 55)\n-      IF_EXPR@[55; 91)\n-        IF_KW@[55; 57)\n-        LITERAL@[57; 63)\n-          WHITESPACE@[57; 58)\n-          TRUE_KW@[58; 62)\n-          WHITESPACE@[62; 63)\n-        BLOCK_EXPR@[63; 66)\n-          L_CURLY@[63; 64)\n-          R_CURLY@[64; 65)\n-          WHITESPACE@[65; 66)\n-        ELSE_KW@[66; 70)\n-        IF_EXPR@[70; 91)\n-          WHITESPACE@[70; 71)\n-          IF_KW@[71; 73)\n-          LITERAL@[73; 80)\n-            WHITESPACE@[73; 74)\n-            FALSE_KW@[74; 79)\n-            WHITESPACE@[79; 80)\n-          BLOCK_EXPR@[80; 83)\n-            L_CURLY@[80; 81)\n-            R_CURLY@[81; 82)\n-            WHITESPACE@[82; 83)\n-          ELSE_KW@[83; 87)\n-          BLOCK_EXPR@[87; 91)\n-            WHITESPACE@[87; 88)\n-            L_CURLY@[88; 89)\n-            R_CURLY@[89; 90)\n-            WHITESPACE@[90; 91)\n-      R_CURLY@[91; 92)\n-      WHITESPACE@[92; 93)\n+      EXPR_STMT@[55; 96)\n+        IF_EXPR@[55; 90)\n+          IF_KW@[55; 57)\n+          LITERAL@[57; 63)\n+            WHITESPACE@[57; 58)\n+            TRUE_KW@[58; 62)\n+            WHITESPACE@[62; 63)\n+          BLOCK_EXPR@[63; 66)\n+            L_CURLY@[63; 64)\n+            R_CURLY@[64; 65)\n+            WHITESPACE@[65; 66)\n+          ELSE_KW@[66; 70)\n+          IF_EXPR@[70; 90)\n+            WHITESPACE@[70; 71)\n+            IF_KW@[71; 73)\n+            LITERAL@[73; 80)\n+              WHITESPACE@[73; 74)\n+              FALSE_KW@[74; 79)\n+              WHITESPACE@[79; 80)\n+            BLOCK_EXPR@[80; 83)\n+              L_CURLY@[80; 81)\n+              R_CURLY@[81; 82)\n+              WHITESPACE@[82; 83)\n+            ELSE_KW@[83; 87)\n+            BLOCK_EXPR@[87; 90)\n+              WHITESPACE@[87; 88)\n+              L_CURLY@[88; 89)\n+              R_CURLY@[89; 90)\n+        SEMI@[90; 91)\n+        WHITESPACE@[91; 96)\n+      EXPR_STMT@[96; 105)\n+        IF_EXPR@[96; 103)\n+          IF_KW@[96; 98)\n+          PATH_EXPR@[98; 101)\n+            PATH@[98; 101)\n+              PATH_SEGMENT@[98; 101)\n+                NAME_REF@[98; 101)\n+                  WHITESPACE@[98; 99)\n+                  IDENT@[99; 100) \"S\"\n+                  WHITESPACE@[100; 101)\n+          BLOCK_EXPR@[101; 103)\n+            L_CURLY@[101; 102)\n+            R_CURLY@[102; 103)\n+        SEMI@[103; 104)\n+        WHITESPACE@[104; 105)\n+      R_CURLY@[105; 106)\n+      WHITESPACE@[106; 107)"}, {"sha": "c9205dfa30fc5a54e6277114db00878aca39f346", "filename": "tests/data/parser/inline/0070_match_expr.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.rs?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -1,3 +1,4 @@\n fn foo() {\n     match () { };\n+    match S {};\n }"}, {"sha": "6a3ac09a153d01db24c2c9922da48a34eace9464", "filename": "tests/data/parser/inline/0070_match_expr.txt", "status": "modified", "additions": 21, "deletions": 7, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt", "raw_url": "https://github.com/rust-lang/rust/raw/82efdff34bf24680bef58eca399ec3f20748a96a/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fdata%2Fparser%2Finline%2F0070_match_expr.txt?ref=82efdff34bf24680bef58eca399ec3f20748a96a", "patch": "@@ -1,5 +1,5 @@\n-FILE@[0; 31)\n-  FN_ITEM@[0; 31)\n+FILE@[0; 47)\n+  FN_ITEM@[0; 47)\n     FN_KW@[0; 2)\n     NAME@[2; 6)\n       WHITESPACE@[2; 3)\n@@ -8,9 +8,9 @@ FILE@[0; 31)\n       L_PAREN@[6; 7)\n       R_PAREN@[7; 8)\n       WHITESPACE@[8; 9)\n-    BLOCK_EXPR@[9; 31)\n+    BLOCK_EXPR@[9; 47)\n       L_CURLY@[9; 10)\n-      EXPR_STMT@[10; 29)\n+      EXPR_STMT@[10; 33)\n         MATCH_EXPR@[10; 27)\n           WHITESPACE@[10; 15)\n           MATCH_KW@[15; 20)\n@@ -23,6 +23,20 @@ FILE@[0; 31)\n           WHITESPACE@[25; 26)\n           R_CURLY@[26; 27)\n         SEMI@[27; 28)\n-        WHITESPACE@[28; 29)\n-      R_CURLY@[29; 30)\n-      WHITESPACE@[30; 31)\n+        WHITESPACE@[28; 33)\n+      EXPR_STMT@[33; 45)\n+        MATCH_EXPR@[33; 43)\n+          MATCH_KW@[33; 38)\n+          PATH_EXPR@[38; 41)\n+            PATH@[38; 41)\n+              PATH_SEGMENT@[38; 41)\n+                NAME_REF@[38; 41)\n+                  WHITESPACE@[38; 39)\n+                  IDENT@[39; 40) \"S\"\n+                  WHITESPACE@[40; 41)\n+          L_CURLY@[41; 42)\n+          R_CURLY@[42; 43)\n+        SEMI@[43; 44)\n+        WHITESPACE@[44; 45)\n+      R_CURLY@[45; 46)\n+      WHITESPACE@[46; 47)"}]}