{"sha": "ff33001f7ef365b7dd3276e3c766a7a63f29d266", "node_id": "C_kwDOAAsO6NoAKGZmMzMwMDFmN2VmMzY1YjdkZDMyNzZlM2M3NjZhN2E2M2YyOWQyNjY", "commit": {"author": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-05-28T07:36:41Z"}, "committer": {"name": "Urgau", "email": "urgau@numericable.fr", "date": "2022-06-03T13:46:41Z"}, "message": "Use new cargo argument of cfg checking in bootstrap", "tree": {"sha": "9f3484049a041a047019743561caf10a4b472420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9f3484049a041a047019743561caf10a4b472420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ff33001f7ef365b7dd3276e3c766a7a63f29d266", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ff33001f7ef365b7dd3276e3c766a7a63f29d266", "html_url": "https://github.com/rust-lang/rust/commit/ff33001f7ef365b7dd3276e3c766a7a63f29d266", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ff33001f7ef365b7dd3276e3c766a7a63f29d266/comments", "author": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Urgau", "id": 3616612, "node_id": "MDQ6VXNlcjM2MTY2MTI=", "avatar_url": "https://avatars.githubusercontent.com/u/3616612?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Urgau", "html_url": "https://github.com/Urgau", "followers_url": "https://api.github.com/users/Urgau/followers", "following_url": "https://api.github.com/users/Urgau/following{/other_user}", "gists_url": "https://api.github.com/users/Urgau/gists{/gist_id}", "starred_url": "https://api.github.com/users/Urgau/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Urgau/subscriptions", "organizations_url": "https://api.github.com/users/Urgau/orgs", "repos_url": "https://api.github.com/users/Urgau/repos", "events_url": "https://api.github.com/users/Urgau/events{/privacy}", "received_events_url": "https://api.github.com/users/Urgau/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "url": "https://api.github.com/repos/rust-lang/rust/commits/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8", "html_url": "https://github.com/rust-lang/rust/commit/bef2b7cd1c7bcb3393f10d5752fcf9ee3026bce8"}], "stats": {"total": 37, "additions": 17, "deletions": 20}, "files": [{"sha": "bb52a72b3c29e708d9484b5f1e4593e0fbadffeb", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 17, "deletions": 20, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/ff33001f7ef365b7dd3276e3c766a7a63f29d266/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ff33001f7ef365b7dd3276e3c766a7a63f29d266/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=ff33001f7ef365b7dd3276e3c766a7a63f29d266", "patch": "@@ -1355,29 +1355,26 @@ impl<'a> Builder<'a> {\n         // get some support for setting `--check-cfg` within build script, it's the least invasive\n         // hack that still let's us have cfg checking for the vast majority of the codebase.\n         if stage != 0 {\n-            // Enable cfg checking of cargo features for everything but std.\n+            // Enable cfg checking of cargo features for everything but std and also enable cfg\n+            // checking of names and values.\n             //\n             // Note: `std`, `alloc` and `core` imports some dependencies by #[path] (like\n-            // backtrace, core_simd, std_float, ...), those dependencies have their own features\n-            // but cargo isn't involved in the #[path] and so cannot pass the complete list of\n-            // features, so for that reason we don't enable checking of features for std.\n+            // backtrace, core_simd, std_float, ...), those dependencies have their own\n+            // features but cargo isn't involved in the #[path] process and so cannot pass the\n+            // complete list of features, so for that reason we don't enable checking of\n+            // features for std crates.\n+            cargo.arg(if mode != Mode::Std {\n+                \"-Zcheck-cfg=names,values,features\"\n+            } else {\n+                \"-Zcheck-cfg=names,values\"\n+            });\n+\n+            // Add extra cfg not defined in/by rustc\n             //\n-            // FIXME: Re-enable this after the beta bump as apperently rustc-perf doesn't use the\n-            // beta cargo. See https://github.com/rust-lang/rust/pull/96984#issuecomment-1126678773\n-            // #[cfg(not(bootstrap))]\n-            // if mode != Mode::Std {\n-            //     cargo.arg(\"-Zcheck-cfg-features\"); // -Zcheck-cfg=features after bump\n-            // }\n-\n-            // Enable cfg checking of well known names/values\n-            rustflags\n-                .arg(\"-Zunstable-options\")\n-                // Enable checking of well known names\n-                .arg(\"--check-cfg=names()\")\n-                // Enable checking of well known values\n-                .arg(\"--check-cfg=values()\");\n-\n-            // Add extra cfg not defined in rustc\n+            // Note: Altrough it would seems that \"-Zunstable-options\" to `rustflags` is useless as\n+            // cargo would implicitly add it, it was discover that sometimes bootstrap only use\n+            // `rustflags` without `cargo` making it required.\n+            rustflags.arg(\"-Zunstable-options\");\n             for (restricted_mode, name, values) in EXTRA_CHECK_CFGS {\n                 if *restricted_mode == None || *restricted_mode == Some(mode) {\n                     // Creating a string of the values by concatenating each value:"}]}