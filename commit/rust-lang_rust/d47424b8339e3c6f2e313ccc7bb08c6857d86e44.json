{"sha": "d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "node_id": "C_kwDOAAsO6NoAKGQ0NzQyNGI4MzM5ZTNjNmYyZTMxM2NjYzdiYjA4YzY4NTdkODZlNDQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T12:10:09Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2022-11-11T13:02:37Z"}, "message": "Hash spans when interning.", "tree": {"sha": "70b3de7918d9cfea98ac63fd24e59bc7de3e8f3c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/70b3de7918d9cfea98ac63fd24e59bc7de3e8f3c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "html_url": "https://github.com/rust-lang/rust/commit/d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c42a4245cc8dac5da7386de68ec6a37a4f63b8ed", "url": "https://api.github.com/repos/rust-lang/rust/commits/c42a4245cc8dac5da7386de68ec6a37a4f63b8ed", "html_url": "https://github.com/rust-lang/rust/commit/c42a4245cc8dac5da7386de68ec6a37a4f63b8ed"}], "stats": {"total": 56, "additions": 6, "deletions": 50}, "files": [{"sha": "8c94ce29b42174ea9f25fb7eea8388b58b52c1de", "filename": "compiler/rustc_data_structures/src/intern.rs", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Fintern.rs?ref=d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "patch": "@@ -110,11 +110,6 @@ where\n     }\n }\n \n-/// A helper trait so that `Interned` things can cache stable hashes reproducibly.\n-pub trait InternedHashingContext {\n-    fn with_def_path_and_no_spans(&mut self, f: impl FnOnce(&mut Self));\n-}\n-\n /// A helper type that you can wrap round your own type in order to automatically\n /// cache the stable hash on creation and not recompute it whenever the stable hash\n /// of the type is computed.\n@@ -165,7 +160,7 @@ impl<T: Hash> Hash for WithStableHash<T> {\n     }\n }\n \n-impl<T: HashStable<CTX>, CTX: InternedHashingContext> HashStable<CTX> for WithStableHash<T> {\n+impl<T: HashStable<CTX>, CTX> HashStable<CTX> for WithStableHash<T> {\n     fn hash_stable(&self, hcx: &mut CTX, hasher: &mut StableHasher) {\n         if self.stable_hash == Fingerprint::ZERO || cfg!(debug_assertions) {\n             // No cached hash available. This can only mean that incremental is disabled.\n@@ -176,7 +171,7 @@ impl<T: HashStable<CTX>, CTX: InternedHashingContext> HashStable<CTX> for WithSt\n             // otherwise the hashes will differ between cached and non-cached mode.\n             let stable_hash: Fingerprint = {\n                 let mut hasher = StableHasher::new();\n-                hcx.with_def_path_and_no_spans(|hcx| self.internee.hash_stable(hcx, &mut hasher));\n+                self.internee.hash_stable(hcx, &mut hasher);\n                 hasher.finish()\n             };\n             if cfg!(debug_assertions) && self.stable_hash != Fingerprint::ZERO {"}, {"sha": "8f96f5a9eb3e99b3e8db919853a31c4c5aff0b0b", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "patch": "@@ -198,12 +198,8 @@ impl<'tcx> CtxtInterners<'tcx> {\n                         Fingerprint::ZERO\n                     } else {\n                         let mut hasher = StableHasher::new();\n-                        let mut hcx = StableHashingContext::ignore_spans(\n-                            sess,\n-                            definitions,\n-                            cstore,\n-                            source_span,\n-                        );\n+                        let mut hcx =\n+                            StableHashingContext::new(sess, definitions, cstore, source_span);\n                         kind.hash_stable(&mut hcx, &mut hasher);\n                         hasher.finish()\n                     };"}, {"sha": "6378ec10875d038e087236d195810b573ff6c48b", "filename": "compiler/rustc_query_system/src/ich/hcx.rs", "status": "modified", "additions": 2, "deletions": 37, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d47424b8339e3c6f2e313ccc7bb08c6857d86e44/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fich%2Fhcx.rs?ref=d47424b8339e3c6f2e313ccc7bb08c6857d86e44", "patch": "@@ -49,15 +49,13 @@ pub(super) enum BodyResolver<'tcx> {\n \n impl<'a> StableHashingContext<'a> {\n     #[inline]\n-    fn new_with_or_without_spans(\n+    pub fn new(\n         sess: &'a Session,\n         definitions: &'a Definitions,\n         cstore: &'a dyn CrateStore,\n         source_span: &'a IndexVec<LocalDefId, Span>,\n-        always_ignore_spans: bool,\n     ) -> Self {\n-        let hash_spans_initial =\n-            !always_ignore_spans && !sess.opts.unstable_opts.incremental_ignore_spans;\n+        let hash_spans_initial = !sess.opts.unstable_opts.incremental_ignore_spans;\n \n         StableHashingContext {\n             body_resolver: BodyResolver::Forbidden,\n@@ -71,33 +69,6 @@ impl<'a> StableHashingContext<'a> {\n         }\n     }\n \n-    #[inline]\n-    pub fn new(\n-        sess: &'a Session,\n-        definitions: &'a Definitions,\n-        cstore: &'a dyn CrateStore,\n-        source_span: &'a IndexVec<LocalDefId, Span>,\n-    ) -> Self {\n-        Self::new_with_or_without_spans(\n-            sess,\n-            definitions,\n-            cstore,\n-            source_span,\n-            /*always_ignore_spans=*/ false,\n-        )\n-    }\n-\n-    #[inline]\n-    pub fn ignore_spans(\n-        sess: &'a Session,\n-        definitions: &'a Definitions,\n-        cstore: &'a dyn CrateStore,\n-        source_span: &'a IndexVec<LocalDefId, Span>,\n-    ) -> Self {\n-        let always_ignore_spans = true;\n-        Self::new_with_or_without_spans(sess, definitions, cstore, source_span, always_ignore_spans)\n-    }\n-\n     #[inline]\n     pub fn without_hir_bodies(&mut self, f: impl FnOnce(&mut StableHashingContext<'_>)) {\n         f(&mut StableHashingContext { body_resolver: BodyResolver::Ignore, ..self.clone() });\n@@ -202,10 +173,4 @@ impl<'a> rustc_span::HashStableContext for StableHashingContext<'a> {\n     }\n }\n \n-impl<'a> rustc_data_structures::intern::InternedHashingContext for StableHashingContext<'a> {\n-    fn with_def_path_and_no_spans(&mut self, f: impl FnOnce(&mut Self)) {\n-        self.while_hashing_spans(false, f);\n-    }\n-}\n-\n impl<'a> rustc_session::HashStableContext for StableHashingContext<'a> {}"}]}