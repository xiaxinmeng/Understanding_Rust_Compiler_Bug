{"sha": "13c207d3756754c54a6b20d852087616d5abfbf4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzYzIwN2QzNzU2NzU0YzU0YTZiMjBkODUyMDg3NjE2ZDVhYmZiZjQ=", "commit": {"author": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-06-10T03:14:57Z"}, "committer": {"name": "rail", "email": "12975677+rail-rain@users.noreply.github.com", "date": "2020-09-24T21:02:05Z"}, "message": "Generalise `InitializeVisitor`", "tree": {"sha": "7f7b0250aca6c9b6412658991fea3b5b52227293", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7f7b0250aca6c9b6412658991fea3b5b52227293"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13c207d3756754c54a6b20d852087616d5abfbf4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13c207d3756754c54a6b20d852087616d5abfbf4", "html_url": "https://github.com/rust-lang/rust/commit/13c207d3756754c54a6b20d852087616d5abfbf4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13c207d3756754c54a6b20d852087616d5abfbf4/comments", "author": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "committer": {"login": "rail-rain", "id": 12975677, "node_id": "MDQ6VXNlcjEyOTc1Njc3", "avatar_url": "https://avatars.githubusercontent.com/u/12975677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/rail-rain", "html_url": "https://github.com/rail-rain", "followers_url": "https://api.github.com/users/rail-rain/followers", "following_url": "https://api.github.com/users/rail-rain/following{/other_user}", "gists_url": "https://api.github.com/users/rail-rain/gists{/gist_id}", "starred_url": "https://api.github.com/users/rail-rain/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/rail-rain/subscriptions", "organizations_url": "https://api.github.com/users/rail-rain/orgs", "repos_url": "https://api.github.com/users/rail-rain/repos", "events_url": "https://api.github.com/users/rail-rain/events{/privacy}", "received_events_url": "https://api.github.com/users/rail-rain/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "url": "https://api.github.com/repos/rust-lang/rust/commits/c599e2fcfaaedb12b560f4136bab3d0b450acf8f", "html_url": "https://github.com/rust-lang/rust/commit/c599e2fcfaaedb12b560f4136bab3d0b450acf8f"}], "stats": {"total": 38, "additions": 21, "deletions": 17}, "files": [{"sha": "bf067c70a7ec67164cafdc2bb69f0dfca7e2145d", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 20, "deletions": 16, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/13c207d3756754c54a6b20d852087616d5abfbf4/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c207d3756754c54a6b20d852087616d5abfbf4/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=13c207d3756754c54a6b20d852087616d5abfbf4", "patch": "@@ -1528,6 +1528,9 @@ fn check_arg_type(cx: &LateContext<'_>, pat: &Pat<'_>, arg: &Expr<'_>) {\n     }\n }\n \n+// To trigger the EXPLICIT_COUNTER_LOOP lint, a variable must be\n+// incremented exactly once in the loop body, and initialized to zero\n+// at the start of the loop.\n fn check_for_loop_explicit_counter<'tcx>(\n     cx: &LateContext<'tcx>,\n     pat: &'tcx Pat<'_>,\n@@ -1546,7 +1549,10 @@ fn check_for_loop_explicit_counter<'tcx>(\n             let mut visitor2 = InitializeVisitor::new(cx, expr, id);\n             walk_block(&mut visitor2, block);\n \n-            if let Some(name) = visitor2.get_result() {\n+            if_chain! {\n+                if let Some((name, initializer)) = visitor2.get_result();\n+                if is_integer_const(cx, initializer, 0);\n+                then {\n                     let mut applicability = Applicability::MachineApplicable;\n \n                     // for some reason this is the only way to get the `Span`\n@@ -1571,6 +1577,7 @@ fn check_for_loop_explicit_counter<'tcx>(\n                         ),\n                         applicability,\n                     );\n+                }\n             }\n         }\n     }\n@@ -2198,20 +2205,20 @@ impl<'a, 'tcx> Visitor<'tcx> for IncrementVisitor<'a, 'tcx> {\n     }\n }\n \n-enum InitializeVisitorState {\n+enum InitializeVisitorState<'hir> {\n     Initial,          // Not examined yet\n     Declared(Symbol), // Declared but not (yet) initialized\n-    Initialized { name: Symbol },\n+    Initialized { name: Symbol, initializer: &'hir Expr<'hir> },\n     DontWarn,\n }\n \n-/// Checks whether a variable is initialized to zero at the start of a loop and not modified\n+/// Checks whether a variable is initialized at the start of a loop and not modified\n /// and used after the loop.\n struct InitializeVisitor<'a, 'tcx> {\n     cx: &'a LateContext<'tcx>,  // context reference\n     end_expr: &'tcx Expr<'tcx>, // the for loop. Stop scanning here.\n     var_id: HirId,\n-    state: InitializeVisitorState,\n+    state: InitializeVisitorState<'tcx>,\n     depth: u32, // depth of conditional expressions\n     past_loop: bool,\n }\n@@ -2228,9 +2235,9 @@ impl<'a, 'tcx> InitializeVisitor<'a, 'tcx> {\n         }\n     }\n \n-    fn get_result(&self) -> Option<Name> {\n-        if let InitializeVisitorState::Initialized { name } = self.state {\n-            Some(name)\n+    fn get_result(&self) -> Option<(Name, &'tcx Expr<'tcx>)> {\n+        if let InitializeVisitorState::Initialized { name, initializer } = self.state {\n+            Some((name, initializer))\n         } else {\n             None\n         }\n@@ -2247,19 +2254,16 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n             if local.pat.hir_id == self.var_id;\n             if let PatKind::Binding(.., ident, _) = local.pat.kind;\n             then {\n-                self.state = if_chain! {\n-                    if let Some(ref init) = local.init;\n-                    if is_integer_const(&self.cx, init, 0);\n-                    then {\n+                self.state = if let Some(ref init) = local.init {\n                     InitializeVisitorState::Initialized {\n-                        name: ident.name\n+                        initializer: init,\n+                        name: ident.name,\n                     }\n                 } else {\n                     InitializeVisitorState::Declared(ident.name)\n                 }\n             }\n         }\n-        }\n         walk_stmt(self, stmt);\n     }\n \n@@ -2291,11 +2295,11 @@ impl<'a, 'tcx> Visitor<'tcx> for InitializeVisitor<'a, 'tcx> {\n                     },\n                     ExprKind::Assign(ref lhs, ref rhs, _) if lhs.hir_id == expr.hir_id => {\n                         self.state = if_chain! {\n-                            if is_integer_const(&self.cx, rhs, 0) && self.depth == 0;\n+                            if self.depth == 0;\n                             if let InitializeVisitorState::Declared(name)\n                                 | InitializeVisitorState::Initialized { name, ..} = self.state;\n                             then {\n-                                InitializeVisitorState::Initialized { name }\n+                                InitializeVisitorState::Initialized { initializer: rhs, name }\n                             } else {\n                                 InitializeVisitorState::DontWarn\n                             }"}, {"sha": "a0ddcce111e1cac40eb8df87aad39b03b5ea36cf", "filename": "clippy_lints/src/utils/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13c207d3756754c54a6b20d852087616d5abfbf4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13c207d3756754c54a6b20d852087616d5abfbf4/clippy_lints%2Fsrc%2Futils%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fmod.rs?ref=13c207d3756754c54a6b20d852087616d5abfbf4", "patch": "@@ -707,7 +707,7 @@ fn reindent_multiline_inner(s: &str, ignore_first: bool, indent: Option<usize>,\n }\n \n /// Gets the parent expression, if any \u2013- this is useful to constrain a lint.\n-pub fn get_parent_expr<'c>(cx: &'c LateContext<'_>, e: &Expr<'_>) -> Option<&'c Expr<'c>> {\n+pub fn get_parent_expr<'tcx>(cx: &LateContext<'tcx>, e: &Expr<'_>) -> Option<&'tcx Expr<'tcx>> {\n     let map = &cx.tcx.hir();\n     let hir_id = e.hir_id;\n     let parent_id = map.get_parent_node(hir_id);"}]}