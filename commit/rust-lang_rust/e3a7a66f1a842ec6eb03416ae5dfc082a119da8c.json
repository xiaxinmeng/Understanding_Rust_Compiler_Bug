{"sha": "e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUzYTdhNjZmMWE4NDJlYzZlYjAzNDE2YWU1ZGZjMDgyYTExOWRhOGM=", "commit": {"author": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-26T18:59:04Z"}, "committer": {"name": "Benjamin Herr", "email": "ben@0x539.de", "date": "2016-03-31T20:04:23Z"}, "message": "librustc: replace panic!() with bug!()", "tree": {"sha": "bd9a772a5d15d66843238eb05bd7fd0b154e75a5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/bd9a772a5d15d66843238eb05bd7fd0b154e75a5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "html_url": "https://github.com/rust-lang/rust/commit/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/comments", "author": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "committer": {"login": "ben0x539", "id": 24142, "node_id": "MDQ6VXNlcjI0MTQy", "avatar_url": "https://avatars.githubusercontent.com/u/24142?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ben0x539", "html_url": "https://github.com/ben0x539", "followers_url": "https://api.github.com/users/ben0x539/followers", "following_url": "https://api.github.com/users/ben0x539/following{/other_user}", "gists_url": "https://api.github.com/users/ben0x539/gists{/gist_id}", "starred_url": "https://api.github.com/users/ben0x539/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ben0x539/subscriptions", "organizations_url": "https://api.github.com/users/ben0x539/orgs", "repos_url": "https://api.github.com/users/ben0x539/repos", "events_url": "https://api.github.com/users/ben0x539/events{/privacy}", "received_events_url": "https://api.github.com/users/ben0x539/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "url": "https://api.github.com/repos/rust-lang/rust/commits/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc", "html_url": "https://github.com/rust-lang/rust/commit/2fa867a2031bd580cd763fa9dcd8d7d4ba9e2bfc"}], "stats": {"total": 110, "additions": 55, "deletions": 55}, "files": [{"sha": "d3ced8aa518bbb3f6e9a1d21aaaad3bbacf43188", "filename": "src/librustc/dep_graph/edges.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fdep_graph%2Fedges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fedges.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -122,7 +122,7 @@ impl DepGraphEdges {\n     {\n         match self.current_node() {\n             Some(open_node) => self.add_edge_from_open_node(open_node, op),\n-            None => panic!(\"no current node, cannot add edge into dependency graph\")\n+            None => bug!(\"no current node, cannot add edge into dependency graph\")\n         }\n     }\n "}, {"sha": "1b1d3469bc53f6428a9fc6c1f12c0a82a7a7f8dd", "filename": "src/librustc/dep_graph/thread.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fdep_graph%2Fthread.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fdep_graph%2Fthread.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -148,7 +148,7 @@ impl DepGraphThreadData {\n \n     // Outline this too.\n     fn invalid_message(&self, string: &str) {\n-        panic!(\"{}; see src/librustc/dep_graph/README.md for more information\", string)\n+        bug!(\"{}; see src/librustc/dep_graph/README.md for more information\", string)\n     }\n }\n "}, {"sha": "2eb3d56bb5e4e1be3921b68d30d80bbbfc2c816b", "filename": "src/librustc/front/map/blocks.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fblocks.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -231,21 +231,21 @@ impl<'a> FnLikeNode<'a> {\n                         span: i.span,\n                         attrs: &i.attrs,\n                     }),\n-                _ => panic!(\"item FnLikeNode that is not fn-like\"),\n+                _ => bug!(\"item FnLikeNode that is not fn-like\"),\n             },\n             map::NodeTraitItem(ti) => match ti.node {\n                 ast::MethodTraitItem(ref sig, Some(ref body)) => {\n                     method(ti.id, ti.name, sig, None, body, ti.span, &ti.attrs)\n                 }\n-                _ => panic!(\"trait method FnLikeNode that is not fn-like\"),\n+                _ => bug!(\"trait method FnLikeNode that is not fn-like\"),\n             },\n             map::NodeImplItem(ii) => {\n                 match ii.node {\n                     ast::ImplItemKind::Method(ref sig, ref body) => {\n                         method(ii.id, ii.name, sig, Some(ii.vis), body, ii.span, &ii.attrs)\n                     }\n                     _ => {\n-                        panic!(\"impl method FnLikeNode that is not fn-like\")\n+                        bug!(\"impl method FnLikeNode that is not fn-like\")\n                     }\n                 }\n             }\n@@ -256,9 +256,9 @@ impl<'a> FnLikeNode<'a> {\n                                               e.id,\n                                               e.span,\n                                               e.attrs.as_attr_slice())),\n-                _ => panic!(\"expr FnLikeNode that is not fn-like\"),\n+                _ => bug!(\"expr FnLikeNode that is not fn-like\"),\n             },\n-            _ => panic!(\"other FnLikeNode that is not fn-like\"),\n+            _ => bug!(\"other FnLikeNode that is not fn-like\"),\n         }\n     }\n }"}, {"sha": "817bec5840797dff8ccde08b696c298c5f57192c", "filename": "src/librustc/front/map/mod.rs", "status": "modified", "additions": 20, "deletions": 20, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ffront%2Fmap%2Fmod.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -335,9 +335,9 @@ impl<'ast> Map<'ast> {\n                     return self.opt_local_def_id(id)\n                                .map(|def_id| DepNode::Hir(def_id))\n                                .unwrap_or_else(|| {\n-                                   panic!(\"Walking parents from `{}` \\\n-                                           led to `NotPresent` at `{}`\",\n-                                          id0, id)\n+                                   bug!(\"Walking parents from `{}` \\\n+                                         led to `NotPresent` at `{}`\",\n+                                        id0, id)\n                                }),\n             }\n         }\n@@ -363,8 +363,8 @@ impl<'ast> Map<'ast> {\n \n     pub fn local_def_id(&self, node: NodeId) -> DefId {\n         self.opt_local_def_id(node).unwrap_or_else(|| {\n-            panic!(\"local_def_id: no entry for `{}`, which has a map of `{:?}`\",\n-                   node, self.find_entry(node))\n+            bug!(\"local_def_id: no entry for `{}`, which has a map of `{:?}`\",\n+                 node, self.find_entry(node))\n         })\n     }\n \n@@ -402,7 +402,7 @@ impl<'ast> Map<'ast> {\n     pub fn get(&self, id: NodeId) -> Node<'ast> {\n         match self.find(id) {\n             Some(node) => node, // read recorded by `find`\n-            None => panic!(\"couldn't find node id {} in the AST map\", id)\n+            None => bug!(\"couldn't find node id {} in the AST map\", id)\n         }\n     }\n \n@@ -576,22 +576,22 @@ impl<'ast> Map<'ast> {\n                 self.read(id); // reveals some of the content of a node\n                 abi\n             }\n-            None => panic!(\"expected foreign mod or inlined parent, found {}\",\n+            None => bug!(\"expected foreign mod or inlined parent, found {}\",\n                           self.node_to_string(parent))\n         }\n     }\n \n     pub fn expect_item(&self, id: NodeId) -> &'ast Item {\n         match self.find(id) { // read recorded by `find`\n             Some(NodeItem(item)) => item,\n-            _ => panic!(\"expected item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_trait_item(&self, id: NodeId) -> &'ast TraitItem {\n         match self.find(id) {\n             Some(NodeTraitItem(item)) => item,\n-            _ => panic!(\"expected trait item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected trait item, found {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -600,38 +600,38 @@ impl<'ast> Map<'ast> {\n             Some(NodeItem(i)) => {\n                 match i.node {\n                     ItemStruct(ref struct_def, _) => struct_def,\n-                    _ => panic!(\"struct ID bound to non-struct\")\n+                    _ => bug!(\"struct ID bound to non-struct\")\n                 }\n             }\n             Some(NodeVariant(variant)) => {\n                 if variant.node.data.is_struct() {\n                     &variant.node.data\n                 } else {\n-                    panic!(\"struct ID bound to enum variant that isn't struct-like\")\n+                    bug!(\"struct ID bound to enum variant that isn't struct-like\")\n                 }\n             }\n-            _ => panic!(format!(\"expected struct, found {}\", self.node_to_string(id))),\n+            _ => bug!(\"expected struct, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_variant(&self, id: NodeId) -> &'ast Variant {\n         match self.find(id) {\n             Some(NodeVariant(variant)) => variant,\n-            _ => panic!(format!(\"expected variant, found {}\", self.node_to_string(id))),\n+            _ => bug!(\"expected variant, found {}\", self.node_to_string(id)),\n         }\n     }\n \n     pub fn expect_foreign_item(&self, id: NodeId) -> &'ast ForeignItem {\n         match self.find(id) {\n             Some(NodeForeignItem(item)) => item,\n-            _ => panic!(\"expected foreign item, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected foreign item, found {}\", self.node_to_string(id))\n         }\n     }\n \n     pub fn expect_expr(&self, id: NodeId) -> &'ast Expr {\n         match self.find(id) { // read recorded by find\n             Some(NodeExpr(expr)) => expr,\n-            _ => panic!(\"expected expr, found {}\", self.node_to_string(id))\n+            _ => bug!(\"expected expr, found {}\", self.node_to_string(id))\n         }\n     }\n \n@@ -656,7 +656,7 @@ impl<'ast> Map<'ast> {\n             NodeLocal(&Pat { node: PatKind::Ident(_,l,_), .. }) => {\n                 PathName(l.node.name)\n             },\n-            _ => panic!(\"no path elem for {:?}\", node)\n+            _ => bug!(\"no path elem for {:?}\", node)\n         }\n     }\n \n@@ -773,7 +773,7 @@ impl<'ast> Map<'ast> {\n     pub fn span(&self, id: NodeId) -> Span {\n         self.read(id); // reveals span from node\n         self.opt_span(id)\n-            .unwrap_or_else(|| panic!(\"AstMap.span: could not find span for id {:?}\", id))\n+            .unwrap_or_else(|| bug!(\"AstMap.span: could not find span for id {:?}\", id))\n     }\n \n     pub fn span_if_local(&self, id: DefId) -> Option<Span> {\n@@ -1019,12 +1019,12 @@ impl<'a> NodePrinter for pprust::State<'a> {\n             NodePat(a)         => self.print_pat(&a),\n             NodeBlock(a)       => self.print_block(&a),\n             NodeLifetime(a)    => self.print_lifetime(&a),\n-            NodeTyParam(_)     => panic!(\"cannot print TyParam\"),\n+            NodeTyParam(_)     => bug!(\"cannot print TyParam\"),\n             // these cases do not carry enough information in the\n             // ast_map to reconstruct their full structure for pretty\n             // printing.\n-            NodeLocal(_)       => panic!(\"cannot print isolated Local\"),\n-            NodeStructCtor(_)  => panic!(\"cannot print isolated StructCtor\"),\n+            NodeLocal(_)       => bug!(\"cannot print isolated Local\"),\n+            NodeStructCtor(_)  => bug!(\"cannot print isolated StructCtor\"),\n         }\n     }\n }"}, {"sha": "8079a6d1bbcaf2765b76caabe52df7121f4d0b17", "filename": "src/librustc/infer/error_reporting.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -404,7 +404,7 @@ impl<'a, 'tcx> ErrorReporting<'tcx> for InferCtxt<'a, 'tcx> {\n                     bound_failures.push((origin.clone(), kind.clone(), region));\n                 }\n                 ProcessedErrors(..) => {\n-                    panic!(\"should not encounter a `ProcessedErrors` yet: {:?}\", error)\n+                    bug!(\"should not encounter a `ProcessedErrors` yet: {:?}\", error)\n                 }\n             }\n         }"}, {"sha": "e611c005691f0ccc6ba44dda974ebe17d081e5a2", "filename": "src/librustc/infer/region_inference/graphviz.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fgraphviz.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -182,13 +182,13 @@ impl<'a, 'tcx> dot::Labeller<'a> for ConstraintGraph<'a, 'tcx> {\n     fn node_id(&self, n: &Node) -> dot::Id {\n         let node_id = match self.node_ids.get(n) {\n             Some(node_id) => node_id,\n-            None => panic!(\"no node_id found for node: {:?}\", n),\n+            None => bug!(\"no node_id found for node: {:?}\", n),\n         };\n         let name = || format!(\"node_{}\", node_id);\n         match dot::Id::new(name()) {\n             Ok(id) => id,\n             Err(_) => {\n-                panic!(\"failed to create graphviz node identified by {}\", name());\n+                bug!(\"failed to create graphviz node identified by {}\", name());\n             }\n         }\n     }"}, {"sha": "2f610bf2380fc67f6b34343eaa74ecd897c08cf2", "filename": "src/librustc/infer/region_inference/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Fregion_inference%2Fmod.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -309,7 +309,7 @@ impl<'a, 'tcx> RegionVarBindings<'a, 'tcx> {\n         while undo_log.len() > snapshot.length + 1 {\n             match undo_log.pop().unwrap() {\n                 OpenSnapshot => {\n-                    panic!(\"Failure to observe stack discipline\");\n+                    bug!(\"Failure to observe stack discipline\");\n                 }\n                 CommitedSnapshot => {}\n                 AddVar(vid) => {"}, {"sha": "3cc076f1f00be2343710241fd0c0ff7a5b0bcb9c", "filename": "src/librustc/infer/type_variable.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Finfer%2Ftype_variable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ftype_variable.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -159,8 +159,8 @@ impl<'tcx> TypeVariableTable<'tcx> {\n \n         let (relations, default) = match old_value {\n             Bounded { relations, default } => (relations, default),\n-            Known(_) => panic!(\"Asked to instantiate variable that is \\\n-                               already instantiated\")\n+            Known(_) => bug!(\"Asked to instantiate variable that is \\\n+                              already instantiated\")\n         };\n \n         for &(dir, vid) in &relations {\n@@ -318,7 +318,7 @@ impl<'tcx> sv::SnapshotVecDelegate for Delegate<'tcx> {\n \n fn relations<'a>(v: &'a mut TypeVariableData) -> &'a mut Vec<Relation> {\n     match v.value {\n-        Known(_) => panic!(\"var_sub_var: variable is known\"),\n+        Known(_) => bug!(\"var_sub_var: variable is known\"),\n         Bounded { ref mut relations, .. } => relations\n     }\n }"}, {"sha": "e78ff513ac47379e969b7b556f166cc2f5adafc0", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -232,7 +232,7 @@ impl LintStore {\n     pub fn register_renamed(&mut self, old_name: &str, new_name: &str) {\n         let target = match self.by_name.get(new_name) {\n             Some(&Id(lint_id)) => lint_id.clone(),\n-            _ => panic!(\"invalid lint renaming of {} to {}\", old_name, new_name)\n+            _ => bug!(\"invalid lint renaming of {} to {}\", old_name, new_name)\n         };\n         self.by_name.insert(old_name.to_string(), Renamed(new_name.to_string(), target));\n     }\n@@ -430,7 +430,7 @@ pub fn raw_struct_lint<'a>(sess: &'a Session,\n             format!(\"{} [-{} {}]\", msg,\n                     match level {\n                         Warn => 'W', Deny => 'D', Forbid => 'F',\n-                        Allow => panic!()\n+                        Allow => bug!()\n                     }, name.replace(\"_\", \"-\"))\n         },\n         Node(src) => {"}, {"sha": "4efb40abdb0a3f4fbeff8669bf7a75bd44951721", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -309,7 +309,7 @@ pub fn validate_crate_name(sess: Option<&Session>, s: &str, sp: Option<Span>) {\n     {\n         let mut say = |s: &str| {\n             match (sp, sess) {\n-                (_, None) => panic!(\"{}\", s),\n+                (_, None) => bug!(\"{}\", s),\n                 (Some(sp), Some(sess)) => sess.span_err(sp, s),\n                 (None, Some(sess)) => sess.err(s),\n             }"}, {"sha": "e6ea000936cab8cb9fa572a63af5e54a83bc59ac", "filename": "src/librustc/middle/def.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fdef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fdef.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -71,7 +71,7 @@ impl PathResolution {\n     /// Get the definition, if fully resolved, otherwise panic.\n     pub fn full_def(&self) -> Def {\n         if self.depth != 0 {\n-            panic!(\"path not fully resolved: {:?}\", self);\n+            bug!(\"path not fully resolved: {:?}\", self);\n         }\n         self.base_def\n     }\n@@ -116,7 +116,7 @@ impl Def {\n             Def::TyParam(..) | Def::Struct(..) | Def::Trait(..) |\n             Def::Method(..) | Def::Const(..) | Def::AssociatedConst(..) |\n             Def::PrimTy(..) | Def::Label(..) | Def::SelfTy(..) | Def::Err => {\n-                panic!(\"attempted .var_id() on invalid {:?}\", self)\n+                bug!(\"attempted .var_id() on invalid {:?}\", self)\n             }\n         }\n     }\n@@ -135,7 +135,7 @@ impl Def {\n             Def::PrimTy(..) |\n             Def::SelfTy(..) |\n             Def::Err => {\n-                panic!(\"attempted .def_id() on invalid def: {:?}\", self)\n+                bug!(\"attempted .def_id() on invalid def: {:?}\", self)\n             }\n         }\n     }"}, {"sha": "ef031ad13f16c27d78b7bec1a7e4790ac37e3b5f", "filename": "src/librustc/middle/mem_categorization.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fmem_categorization.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -611,7 +611,7 @@ impl<'t, 'a,'tcx> MemCategorizationContext<'t, 'a, 'tcx> {\n             }))\n           }\n \n-          Def::Err => panic!(\"Def::Err in memory categorization\")\n+          Def::Err => bug!(\"Def::Err in memory categorization\")\n         }\n     }\n "}, {"sha": "2cde6ce93208f27c0148c19ec58b112dc0c16ad2", "filename": "src/librustc/middle/region.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fmiddle%2Fregion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fregion.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -343,7 +343,7 @@ impl RegionMaps {\n     pub fn lookup_code_extent(&self, e: CodeExtentData) -> CodeExtent {\n         match self.code_extent_interner.borrow().get(&e) {\n             Some(&d) => d,\n-            None => panic!(\"unknown code extent {:?}\", e)\n+            None => bug!(\"unknown code extent {:?}\", e)\n         }\n     }\n     pub fn node_extent(&self, n: ast::NodeId) -> CodeExtent {\n@@ -470,7 +470,7 @@ impl RegionMaps {\n     pub fn var_scope(&self, var_id: ast::NodeId) -> CodeExtent {\n         match self.var_map.borrow().get(&var_id) {\n             Some(&r) => r,\n-            None => { panic!(\"no enclosing scope for id {:?}\", var_id); }\n+            None => { bug!(\"no enclosing scope for id {:?}\", var_id); }\n         }\n     }\n "}, {"sha": "e54acf3fdc3078f9f004686d0faa4d08b0676863", "filename": "src/librustc/session/filesearch.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fsession%2Ffilesearch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Ffilesearch.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -155,14 +155,14 @@ pub fn get_or_default_sysroot() -> PathBuf {\n                 // gcc chokes on verbatim paths which fs::canonicalize generates\n                 // so we try to avoid those kinds of paths.\n                 Ok(canon) => Some(rustcfs::fix_windows_verbatim_for_gcc(&canon)),\n-                Err(e) => panic!(\"failed to get realpath: {}\", e),\n+                Err(e) => bug!(\"failed to get realpath: {}\", e),\n             }\n         })\n     }\n \n     match canonicalize(env::current_exe().ok()) {\n         Some(mut p) => { p.pop(); p.pop(); p }\n-        None => panic!(\"can't determine value for sysroot\")\n+        None => bug!(\"can't determine value for sysroot\")\n     }\n }\n "}, {"sha": "d3146697ee6271cd97c3860f071a5581138bb472", "filename": "src/librustc/traits/specialize/specialization_graph.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Ftraits%2Fspecialize%2Fspecialization_graph.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -145,8 +145,8 @@ impl Graph {\n     /// Insert cached metadata mapping from a child impl back to its parent.\n     pub fn record_impl_from_cstore(&mut self, parent: DefId, child: DefId) {\n         if self.parent.insert(child, parent).is_some() {\n-            panic!(\"When recording an impl from the crate store, information about its parent \\\n-                    was already present.\");\n+            bug!(\"When recording an impl from the crate store, information about its parent \\\n+                  was already present.\");\n         }\n \n         self.children.entry(parent).or_insert(vec![]).push(child);"}, {"sha": "edfad09ae1fa1d5968298498482652288d384c2a", "filename": "src/librustc/ty/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fmod.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -1647,7 +1647,7 @@ impl<'tcx, 'container> AdtDefData<'tcx, 'container> {\n         match def {\n             Def::Variant(_, vid) => self.variant_with_id(vid),\n             Def::Struct(..) | Def::TyAlias(..) => self.struct_variant(),\n-            _ => panic!(\"unexpected def {:?} in variant_of_def\", def)\n+            _ => bug!(\"unexpected def {:?} in variant_of_def\", def)\n         }\n     }\n \n@@ -1857,7 +1857,7 @@ fn lookup_locally_or_in_crate_store<M, F>(descr: &str,\n {\n     map.memoize(def_id, || {\n         if def_id.is_local() {\n-            panic!(\"No def'n found for {:?} in tcx.{}\", def_id, descr);\n+            bug!(\"No def'n found for {:?} in tcx.{}\", def_id, descr);\n         }\n         load_external()\n     })"}, {"sha": "fee0aaff44593cd17a2529717da49347e74ca097", "filename": "src/librustc/ty/sty.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fsty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fsty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsty.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -987,14 +987,14 @@ impl<'tcx> TyS<'tcx> {\n             TyStruct(def, substs) => {\n                 def.struct_variant().fields[0].ty(cx, substs)\n             }\n-            _ => panic!(\"simd_type called on invalid type\")\n+            _ => bug!(\"simd_type called on invalid type\")\n         }\n     }\n \n     pub fn simd_size(&self, _cx: &TyCtxt) -> usize {\n         match self.sty {\n             TyStruct(def, _) => def.struct_variant().fields.len(),\n-            _ => panic!(\"simd_size called on invalid type\")\n+            _ => bug!(\"simd_size called on invalid type\")\n         }\n     }\n \n@@ -1147,15 +1147,15 @@ impl<'tcx> TyS<'tcx> {\n     pub fn fn_sig(&self) -> &'tcx PolyFnSig<'tcx> {\n         match self.sty {\n             TyFnDef(_, _, ref f) | TyFnPtr(ref f) => &f.sig,\n-            _ => panic!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n+            _ => bug!(\"Ty::fn_sig() called on non-fn type: {:?}\", self)\n         }\n     }\n \n     /// Returns the ABI of the given function.\n     pub fn fn_abi(&self) -> abi::Abi {\n         match self.sty {\n             TyFnDef(_, _, ref f) | TyFnPtr(ref f) => f.abi,\n-            _ => panic!(\"Ty::fn_abi() called on non-fn type\"),\n+            _ => bug!(\"Ty::fn_abi() called on non-fn type\"),\n         }\n     }\n "}, {"sha": "5b05c632a97c6f0315257ea238050cdf6fe9b7f1", "filename": "src/librustc/ty/subst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fsubst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Fsubst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fsubst.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -193,7 +193,7 @@ impl ParamSpace {\n             0 => TypeSpace,\n             1 => SelfSpace,\n             2 => FnSpace,\n-            _ => panic!(\"Invalid ParamSpace: {}\", u)\n+            _ => bug!(\"Invalid ParamSpace: {}\", u)\n         }\n     }\n }"}, {"sha": "6e8363f629b69e3ce55f1813087d5dddd6fb877e", "filename": "src/librustc/ty/util.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e3a7a66f1a842ec6eb03416ae5dfc082a119da8c/src%2Flibrustc%2Fty%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Futil.rs?ref=e3a7a66f1a842ec6eb03416ae5dfc082a119da8c", "patch": "@@ -88,7 +88,7 @@ impl IntTypeExt for attr::IntType {\n             (UnsignedInt(ast::UintTy::U32), ConstInt::U32(_)) => {},\n             (UnsignedInt(ast::UintTy::U64), ConstInt::U64(_)) => {},\n             (UnsignedInt(ast::UintTy::Us), ConstInt::Usize(_)) => {},\n-            _ => panic!(\"disr type mismatch: {:?} vs {:?}\", self, val),\n+            _ => bug!(\"disr type mismatch: {:?} vs {:?}\", self, val),\n         }\n     }\n "}]}