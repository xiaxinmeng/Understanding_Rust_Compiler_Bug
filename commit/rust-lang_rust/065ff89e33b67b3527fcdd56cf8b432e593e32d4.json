{"sha": "065ff89e33b67b3527fcdd56cf8b432e593e32d4", "node_id": "C_kwDOAAsO6NoAKDA2NWZmODllMzNiNjdiMzUyN2ZjZGQ1NmNmOGI0MzJlNTkzZTMyZDQ", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T07:52:48Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-30T07:52:48Z"}, "message": "Auto merge of #2158 - rust-lang:gesundheit, r=RalfJung\n\nAvoid error patterns matching themselves\n\nfixes #2156\nfixes https://github.com/rust-lang/miri/issues/2155\n\nthis will be obsolete the moment I extract that data from json diagnostics instead of just regexing the stderr.", "tree": {"sha": "21f706a3447ef3fed048a5dcf861394b1933b72d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/21f706a3447ef3fed048a5dcf861394b1933b72d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/065ff89e33b67b3527fcdd56cf8b432e593e32d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/065ff89e33b67b3527fcdd56cf8b432e593e32d4", "html_url": "https://github.com/rust-lang/rust/commit/065ff89e33b67b3527fcdd56cf8b432e593e32d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/065ff89e33b67b3527fcdd56cf8b432e593e32d4/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5c3e4b6556431c816d05b262a890905a2a50841a", "url": "https://api.github.com/repos/rust-lang/rust/commits/5c3e4b6556431c816d05b262a890905a2a50841a", "html_url": "https://github.com/rust-lang/rust/commit/5c3e4b6556431c816d05b262a890905a2a50841a"}, {"sha": "3832227734d2ac87254a7cd057f4280f443563e5", "url": "https://api.github.com/repos/rust-lang/rust/commits/3832227734d2ac87254a7cd057f4280f443563e5", "html_url": "https://github.com/rust-lang/rust/commit/3832227734d2ac87254a7cd057f4280f443563e5"}], "stats": {"total": 448, "additions": 428, "deletions": 20}, "files": [{"sha": "352aed530b19181e4022dee6fa2d9f57a723cb5c", "filename": "miri", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/miri", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/miri", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/miri?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -133,8 +133,9 @@ test|test-debug|bless|bless-debug)\n         ;;\n     esac\n     # Then test, and let caller control flags.\n-    # Only in root project as `cargo-miri` has no tests.\n-    exec cargo test $CARGO_BUILD_FLAGS \"$@\"\n+    # Only in root project and ui_test as `cargo-miri` has no tests.\n+    cargo test $CARGO_BUILD_FLAGS \"$@\"\n+    cargo test $CARGO_BUILD_FLAGS --manifest-path ui_test/Cargo.toml \"$@\"\n     ;;\n run|run-debug)\n     # Scan for \"--target\" to set the \"MIRI_TEST_TARGET\" env var so"}, {"sha": "84f4de93461e7aec452e0edb7f07e2be7313b3c4", "filename": "tests/compile-fail/intrinsics/copy_unaligned.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fintrinsics%2Fcopy_unaligned.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -9,5 +9,5 @@ fn main() {\n     let mut data = [0u16; 8];\n     let ptr = (&mut data[0] as *mut u16 as *mut u8).wrapping_add(1) as *mut u16;\n     // Even copying 0 elements to something unaligned should error\n-    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment ALIGN, but alignment ALIGN is required\n+    unsafe { copy_nonoverlapping(&data[5], ptr, 0); } //~ ERROR accessing memory with alignment 1, but alignment 2 is required\n }"}, {"sha": "417a03bb0335b55e1eceb9ce3a56ed5b7ded8c52", "filename": "tests/compile-fail/stacked_borrows/static_memory_modification.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fstacked_borrows%2Fstatic_memory_modification.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -3,6 +3,6 @@ static X: usize = 5;\n #[allow(mutable_transmutes)]\n fn main() {\n     let _x = unsafe {\n-        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to ALLOC which is read-only\n+        std::mem::transmute::<&usize, &mut usize>(&X) //~ ERROR writing to alloc1 which is read-only\n     };\n }"}, {"sha": "91d9ec475b1fefca737d72f41752131490f305cb", "filename": "tests/compile-fail/unaligned_pointers/dyn_alignment.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fdyn_alignment.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -16,6 +16,6 @@ fn main() {\n         // Overwrite the data part of `ptr` so it points to `buf`.\n         unsafe { (&mut ptr as *mut _ as *mut *const u8).write(&buf as *const _ as *const u8); }\n         // Re-borrow that. This should be UB.\n-        let _ptr = &*ptr; //~ERROR alignment ALIGN is required\n+        let _ptr = &*ptr; //~ERROR alignment 256 is required\n     }\n }"}, {"sha": "9872a493c02a9b6c68c0f1a19fe63e9de576514f", "filename": "tests/compile-fail/unaligned_pointers/intptrcast_alignment_check.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Fintptrcast_alignment_check.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -12,6 +12,6 @@ fn main() {\n     // Manually make sure the pointer is properly aligned.\n     let base_addr_aligned = if base_addr % 2 == 0 { base_addr } else { base_addr+1 };\n     let u16_ptr = base_addr_aligned as *mut u16;\n-    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+    unsafe { *u16_ptr = 2; } //~ERROR memory with alignment 1, but alignment 2 is required\n     println!(\"{:?}\", x);\n }"}, {"sha": "b376859d22c11ec97f918b1085ae378973c8517d", "filename": "tests/compile-fail/unaligned_pointers/reference_to_packed.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Freference_to_packed.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -16,6 +16,6 @@ fn main() {\n             y: 99,\n         };\n         let p = &foo.x;\n-        let i = *p; //~ERROR alignment ALIGN is required\n+        let i = *p; //~ERROR alignment 4 is required\n     }\n }"}, {"sha": "1d72e5170b7c2d99f770f88f206dfc7af2fbaff9", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr1.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -6,6 +6,6 @@ fn main() {\n         let x = [2u16, 3, 4]; // Make it big enough so we don't get an out-of-bounds error.\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n-        let _x = unsafe { *x }; //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+        let _x = unsafe { *x }; //~ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "49612e2b8a0964087d7a6f3e1233218fd362fdce", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr2.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr2.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -8,5 +8,5 @@ fn main() {\n     let x = (x.as_ptr() as *const u8).wrapping_offset(3) as *const u32;\n     // This must fail because alignment is violated: the offset is not sufficiently aligned.\n     // Also make the offset not a power of 2, that used to ICE.\n-    let _x = unsafe { *x }; //~ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+    let _x = unsafe { *x }; //~ERROR memory with alignment 1, but alignment 4 is required\n }"}, {"sha": "e33f3c8598f332b1f0f3eb046c02dafeb897b34b", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_addr_of.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_addr_of.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -8,6 +8,6 @@ fn main() {\n         let x = &x[0] as *const _ as *const u32;\n         // This must fail because alignment is violated: the allocation's base is not sufficiently aligned.\n         // The deref is UB even if we just put the result into a raw pointer.\n-        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment ALIGN, but alignment ALIGN is required\n+        let _x = unsafe { ptr::addr_of!(*x) }; //~ ERROR memory with alignment 2, but alignment 4 is required\n     }\n }"}, {"sha": "27403c11abc7466281a4780642f74e9cbcc6fc4d", "filename": "tests/compile-fail/unaligned_pointers/unaligned_ptr_zst.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Funaligned_pointers%2Funaligned_ptr_zst.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -7,6 +7,6 @@ fn main() {\n         let x = i as u8;\n         let x = &x as *const _ as *const [u32; 0];\n         // This must fail because alignment is violated. Test specifically for loading ZST.\n-        let _x = unsafe { *x }; //~ERROR alignment ALIGN is required\n+        let _x = unsafe { *x }; //~ERROR alignment 4 is required\n     }\n }"}, {"sha": "78425cde4a8aae51fa8b29220193ddc9ae905d4f", "filename": "tests/compile-fail/validity/dangling_ref1.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Fdangling_ref1.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -3,5 +3,5 @@\n use std::mem;\n \n fn main() {\n-    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address 0x10 is unallocated)\n }"}, {"sha": "079823f894a86cc9ef7187720a12c4cc133a6dc3", "filename": "tests/compile-fail/validity/invalid_char.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fvalidity%2Finvalid_char.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -1,6 +1,6 @@\n fn main() {\n     assert!(std::char::from_u32(-1_i32 as u32).is_none());\n-    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered $HEX, but expected a valid unicode scalar value\n+    let _val = match unsafe { std::mem::transmute::<i32, char>(-1) } { //~ ERROR encountered 0xffffffff, but expected a valid unicode scalar value\n         'a' => {true},\n         'b' => {false},\n         _ => {true},"}, {"sha": "4be658e86cba434a3e74734f80e7a9611c5432fa", "filename": "tests/compiletest.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompiletest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/tests%2Fcompiletest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompiletest.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -47,13 +47,16 @@ fn run_tests(mode: Mode, path: &str, target: Option<String>) {\n         (true, true) => panic!(\"cannot use MIRI_BLESS and MIRI_SKIP_UI_CHECKS at the same time\"),\n     };\n \n+    let path_filter = std::env::args().skip(1).next();\n+\n     let config = Config {\n         args: flags,\n         target,\n         stderr_filters: STDERR.clone(),\n         stdout_filters: STDOUT.clone(),\n         root_dir: PathBuf::from(path),\n         mode,\n+        path_filter,\n         program: miri_path(),\n         output_conflict_handling,\n     };"}, {"sha": "185af43ac0b418d13a3d50e1657647d80e03f7f8", "filename": "ui_test/Cargo.lock", "status": "added", "additions": 304, "deletions": 0, "changes": 304, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2FCargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2FCargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2FCargo.lock?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -0,0 +1,304 @@\n+# This file is automatically @generated by Cargo.\n+# It is not intended for manual editing.\n+version = 3\n+\n+[[package]]\n+name = \"aho-corasick\"\n+version = \"0.7.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1e37cfd5e7657ada45f742d6e99ca5788580b5c529dc78faf11ece6dc702656f\"\n+dependencies = [\n+ \"memchr\",\n+]\n+\n+[[package]]\n+name = \"ansi_term\"\n+version = \"0.12.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d52a9bb7ec0cf484c551830a7ce27bd20d67eac647e1befb56b0be4ee39a55d2\"\n+dependencies = [\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"atty\"\n+version = \"0.2.14\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d9b39be18770d11421cdb1b9947a45dd3f37e93092cbf377614828a319d5fee8\"\n+dependencies = [\n+ \"hermit-abi\",\n+ \"libc\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"autocfg\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d468802bab17cbc0cc575e9b053f41e72aa36bfa6b7f55e3529ffa43161b97fa\"\n+\n+[[package]]\n+name = \"cfg-if\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"baf1de4339761588bc0619e3cbc0120ee582ebb74b53b4efbf79117bd2da40fd\"\n+\n+[[package]]\n+name = \"colored\"\n+version = \"2.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"b3616f750b84d8f0de8a58bda93e08e2a81ad3f523089b05f1dffecab48c6cbd\"\n+dependencies = [\n+ \"atty\",\n+ \"lazy_static\",\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"crossbeam\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"4ae5588f6b3c3cb05239e90bd110f257254aecd01e4635400391aeae07497845\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-channel\",\n+ \"crossbeam-deque\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-queue\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-channel\"\n+version = \"0.5.4\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5aaa7bd5fb665c6864b5f963dd9097905c54125909c7aa94c9e18507cdbe6c53\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-deque\"\n+version = \"0.8.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"6455c0ca19f0d2fbf751b908d5c55c1f5cbc65e03c4225427254b46890bdde1e\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-epoch\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-epoch\"\n+version = \"0.9.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1145cf131a2c6ba0615079ab6a638f7e1973ac9c2634fcbeaaad6114246efe8c\"\n+dependencies = [\n+ \"autocfg\",\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+ \"lazy_static\",\n+ \"memoffset\",\n+ \"scopeguard\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-queue\"\n+version = \"0.3.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"1f25d8400f4a7a5778f0e4e52384a48cbd9b5c495d110786187fc750075277a2\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"crossbeam-utils\",\n+]\n+\n+[[package]]\n+name = \"crossbeam-utils\"\n+version = \"0.8.8\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0bf124c720b7686e3c2663cf54062ab0f68a88af2fb6a030e87e30bf721fcb38\"\n+dependencies = [\n+ \"cfg-if\",\n+ \"lazy_static\",\n+]\n+\n+[[package]]\n+name = \"ctor\"\n+version = \"0.1.22\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"f877be4f7c9f246b183111634f75baa039715e3f46ce860677d3b19a69fb229c\"\n+dependencies = [\n+ \"quote\",\n+ \"syn\",\n+]\n+\n+[[package]]\n+name = \"diff\"\n+version = \"0.1.12\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"0e25ea47919b1560c4e3b7fe0aaab9becf5b84a10325ddf7db0f0ba5e1026499\"\n+\n+[[package]]\n+name = \"hermit-abi\"\n+version = \"0.1.19\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"62b467343b94ba476dcb2500d242dadbb39557df889310ac77c5d99100aaac33\"\n+dependencies = [\n+ \"libc\",\n+]\n+\n+[[package]]\n+name = \"lazy_static\"\n+version = \"1.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"e2abad23fbc42b3700f2f279844dc832adb2b2eb069b2df918f455c4e18cc646\"\n+\n+[[package]]\n+name = \"libc\"\n+version = \"0.2.126\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"349d5a591cd28b49e1d1037471617a32ddcda5731b99419008085f72d5a53836\"\n+\n+[[package]]\n+name = \"memchr\"\n+version = \"2.5.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"2dffe52ecf27772e601905b7522cb4ef790d2cc203488bbd0e2fe85fcb74566d\"\n+\n+[[package]]\n+name = \"memoffset\"\n+version = \"0.6.5\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5aa361d4faea93603064a027415f07bd8e1d5c88c9fbf68bf56a285428fd79ce\"\n+dependencies = [\n+ \"autocfg\",\n+]\n+\n+[[package]]\n+name = \"output_vt100\"\n+version = \"0.1.3\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"628223faebab4e3e40667ee0b2336d34a5b960ff60ea743ddfdbcf7770bcfb66\"\n+dependencies = [\n+ \"winapi\",\n+]\n+\n+[[package]]\n+name = \"pretty_assertions\"\n+version = \"1.2.1\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c89f989ac94207d048d92db058e4f6ec7342b0971fc58d1271ca148b799b3563\"\n+dependencies = [\n+ \"ansi_term\",\n+ \"ctor\",\n+ \"diff\",\n+ \"output_vt100\",\n+]\n+\n+[[package]]\n+name = \"proc-macro2\"\n+version = \"1.0.39\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"c54b25569025b7fc9651de43004ae593a75ad88543b17178aa5e1b9c4f15f56f\"\n+dependencies = [\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"quote\"\n+version = \"1.0.18\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"a1feb54ed693b93a84e14094943b84b7c4eae204c512b7ccb95ab0c66d278ad1\"\n+dependencies = [\n+ \"proc-macro2\",\n+]\n+\n+[[package]]\n+name = \"regex\"\n+version = \"1.5.6\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d83f127d94bdbcda4c8cc2e50f6f84f4b611f69c902699ca385a39c3a75f9ff1\"\n+dependencies = [\n+ \"aho-corasick\",\n+ \"memchr\",\n+ \"regex-syntax\",\n+]\n+\n+[[package]]\n+name = \"regex-syntax\"\n+version = \"0.6.26\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"49b3de9ec5dc0a3417da371aab17d729997c15010e7fd24ff707773a33bddb64\"\n+\n+[[package]]\n+name = \"rustc_version\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"bfa0f585226d2e68097d4f95d113b15b83a82e819ab25717ec0590d9584ef366\"\n+dependencies = [\n+ \"semver\",\n+]\n+\n+[[package]]\n+name = \"scopeguard\"\n+version = \"1.1.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d29ab0c6d3fc0ee92fe66e2d99f700eab17a8d57d1c1d3b748380fb20baa78cd\"\n+\n+[[package]]\n+name = \"semver\"\n+version = \"1.0.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"8cb243bdfdb5936c8dc3c45762a19d12ab4550cdc753bc247637d4ec35a040fd\"\n+\n+[[package]]\n+name = \"syn\"\n+version = \"1.0.95\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"fbaf6116ab8924f39d52792136fb74fd60a80194cf1b1c6ffa6453eef1c3f942\"\n+dependencies = [\n+ \"proc-macro2\",\n+ \"quote\",\n+ \"unicode-ident\",\n+]\n+\n+[[package]]\n+name = \"ui_test\"\n+version = \"0.1.0\"\n+dependencies = [\n+ \"colored\",\n+ \"crossbeam\",\n+ \"lazy_static\",\n+ \"pretty_assertions\",\n+ \"regex\",\n+ \"rustc_version\",\n+]\n+\n+[[package]]\n+name = \"unicode-ident\"\n+version = \"1.0.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"d22af068fba1eb5edcb4aea19d382b2a3deb4c8f9d475c589b6ada9e0fd493ee\"\n+\n+[[package]]\n+name = \"winapi\"\n+version = \"0.3.9\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"5c839a674fcd7a98952e593242ea400abe93992746761e38641405d28b00f419\"\n+dependencies = [\n+ \"winapi-i686-pc-windows-gnu\",\n+ \"winapi-x86_64-pc-windows-gnu\",\n+]\n+\n+[[package]]\n+name = \"winapi-i686-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"ac3b87c63620426dd9b991e5ce0329eff545bccbbb34f3be09ff6fb6ab51b7b6\"\n+\n+[[package]]\n+name = \"winapi-x86_64-pc-windows-gnu\"\n+version = \"0.4.0\"\n+source = \"registry+https://github.com/rust-lang/crates.io-index\"\n+checksum = \"712e227841d057c1ee1cd2fb22fa7e5a5461ae8e48fa2ca79ec42cfc1931183f\""}, {"sha": "e6e45de4160e0addab33499880dae184864ad20a", "filename": "ui_test/src/comments.rs", "status": "modified", "additions": 15, "deletions": 5, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Fcomments.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Fcomments.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -2,11 +2,14 @@ use std::path::Path;\n \n use regex::Regex;\n \n+#[cfg(test)]\n+mod tests;\n+\n /// This crate supports various magic comments that get parsed as file-specific\n /// configuration values. This struct parses them all in one go and then they\n /// get processed by their respective use sites.\n-#[derive(Default)]\n-pub struct Comments {\n+#[derive(Default, Debug)]\n+pub(crate) struct Comments {\n     /// List of revision names to execute. Can only be speicified once\n     pub revisions: Option<Vec<String>>,\n     /// Don't run this test if any of these filters apply\n@@ -26,16 +29,23 @@ pub struct Comments {\n     pub error_matches: Vec<ErrorMatch>,\n }\n \n-pub struct ErrorMatch {\n+#[derive(Debug)]\n+pub(crate) struct ErrorMatch {\n     pub matched: String,\n     pub revision: Option<String>,\n     pub definition_line: usize,\n }\n \n impl Comments {\n-    pub fn parse(path: &Path) -> Self {\n-        let mut this = Self::default();\n+    pub(crate) fn parse_file(path: &Path) -> Self {\n         let content = std::fs::read_to_string(path).unwrap();\n+        Self::parse(path, &content)\n+    }\n+\n+    /// Parse comments in `content`.\n+    /// `path` is only used to emit diagnostics if parsing fails.\n+    pub(crate) fn parse(path: &Path, content: &str) -> Self {\n+        let mut this = Self::default();\n         let error_pattern_regex =\n             Regex::new(r\"//(\\[(?P<revision>[^\\]]+)\\])?~[|^]*\\s*(ERROR|HELP|WARN)?:?(?P<text>.*)\")\n                 .unwrap();"}, {"sha": "0140fdf4a9c6e2aecccb64acd6110da527e071d1", "filename": "ui_test/src/comments/tests.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Fcomments%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Fcomments%2Ftests.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -0,0 +1,22 @@\n+use std::path::Path;\n+\n+use super::Comments;\n+\n+#[test]\n+fn parse_simple_comment() {\n+    let s = r\"\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+}\n+    \";\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    println!(\"parsed comments: {:#?}\", comments);\n+    assert_eq!(comments.error_matches[0].definition_line, 4);\n+    assert_eq!(comments.error_matches[0].revision, None);\n+    assert_eq!(\n+        comments.error_matches[0].matched,\n+        \"encountered a dangling reference (address $HEX is unallocated)\"\n+    );\n+}"}, {"sha": "81560db6dff7691e44bf4a9eb2bad981343421c2", "filename": "ui_test/src/lib.rs", "status": "modified", "additions": 20, "deletions": 2, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Flib.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -12,6 +12,8 @@ use regex::Regex;\n use crate::comments::Comments;\n \n mod comments;\n+#[cfg(test)]\n+mod tests;\n \n #[derive(Debug)]\n pub struct Config {\n@@ -28,6 +30,8 @@ pub struct Config {\n     pub mode: Mode,\n     pub program: PathBuf,\n     pub output_conflict_handling: OutputConflictHandling,\n+    /// Only run tests with this string in their path/name\n+    pub path_filter: Option<String>,\n }\n \n #[derive(Debug)]\n@@ -73,7 +77,18 @@ pub fn run_tests(config: Config) {\n                     if !path.extension().map(|ext| ext == \"rs\").unwrap_or(false) {\n                         continue;\n                     }\n-                    let comments = Comments::parse(&path);\n+                    if let Some(path_filter) = &config.path_filter {\n+                        if !path.display().to_string().contains(path_filter) {\n+                            ignored.fetch_add(1, Ordering::Relaxed);\n+                            eprintln!(\n+                                \"{} .. {}\",\n+                                path.display(),\n+                                \"ignored (command line filter)\".yellow()\n+                            );\n+                            continue;\n+                        }\n+                    }\n+                    let comments = Comments::parse_file(&path);\n                     // Ignore file if only/ignore rules do (not) apply\n                     if ignore_file(&comments, &target) {\n                         ignored.fetch_add(1, Ordering::Relaxed);\n@@ -129,7 +144,7 @@ pub fn run_tests(config: Config) {\n                         eprintln!(\"`{pattern}` {} in stderr output\", \"not found\".red());\n                         eprintln!(\n                             \"expected because of pattern here: {}:{definition_line}\",\n-                            path.display()\n+                            path.display().to_string().bold()\n                         );\n                         dump_stderr = Some(stderr.clone())\n                     }\n@@ -257,6 +272,9 @@ fn check_annotations(\n     comments: &Comments,\n ) {\n     let unnormalized_stderr = std::str::from_utf8(unnormalized_stderr).unwrap();\n+    // erase annotations from the stderr so they don't match themselves\n+    let annotations = Regex::new(r\"\\s*//~.*\").unwrap();\n+    let unnormalized_stderr = annotations.replace(unnormalized_stderr, \"\");\n     let mut found_annotation = false;\n     if let Some((ref error_pattern, definition_line)) = comments.error_pattern {\n         if !unnormalized_stderr.contains(error_pattern) {"}, {"sha": "5485e6b4f26b32c6b39d3f5d111135998a215e2a", "filename": "ui_test/src/tests.rs", "status": "added", "additions": 50, "deletions": 0, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/065ff89e33b67b3527fcdd56cf8b432e593e32d4/ui_test%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/ui_test%2Fsrc%2Ftests.rs?ref=065ff89e33b67b3527fcdd56cf8b432e593e32d4", "patch": "@@ -0,0 +1,50 @@\n+use std::path::{Path, PathBuf};\n+\n+use super::{check_annotations, Comments, Config, Error, Mode, OutputConflictHandling};\n+\n+fn config() -> Config {\n+    Config {\n+        args: vec![],\n+        target: None,\n+        stderr_filters: vec![],\n+        stdout_filters: vec![],\n+        root_dir: PathBuf::from(\".\"),\n+        mode: Mode::Fail,\n+        path_filter: None,\n+        program: PathBuf::from(\"cake\"),\n+        output_conflict_handling: OutputConflictHandling::Error,\n+    }\n+}\n+\n+#[test]\n+fn issue_2156() {\n+    let s = r\"\n+use std::mem;\n+\n+fn main() {\n+    let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+}\n+    \";\n+    let comments = Comments::parse(Path::new(\"<dummy>\"), s);\n+    let mut errors = vec![];\n+    let config = config();\n+    let unnormalized_stderr = r\"\n+error: Undefined Behavior: type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n+  --> tests/compile-fail/validity/dangling_ref1.rs:6:29\n+   |\n+LL |     let _x: &i32 = unsafe { mem::transmute(16usize) }; //~ ERROR encountered a dangling reference (address $HEX is unallocated)\n+   |                             ^^^^^^^^^^^^^^^^^^^^^^^ type validation failed: encountered a dangling reference (address 0x10 is unallocated)\n+   |\n+   = help: this indicates a bug in the program: it performed an invalid operation, and caused Undefined Behavior\n+   = help: see https://doc.rust-lang.org/nightly/reference/behavior-considered-undefined.html for further information\n+           \n+   = note: inside `main` at tests/compile-fail/validity/dangling_ref1.rs:6:29\n+note: some details are omitted, run with `MIRIFLAGS=-Zmiri-backtrace=full` for a verbose backtrace\n+error: aborting due to previous error\n+    \";\n+    check_annotations(unnormalized_stderr.as_bytes(), &mut errors, &config, \"\", &comments);\n+    match &errors[..] {\n+        [Error::PatternNotFound { .. }] => {}\n+        _ => panic!(\"{:#?}\", errors),\n+    }\n+}"}]}