{"sha": "c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMyNTNkZjUyNDliNWYzYzdkNmY4NWUxZWQyOGFmYmYwYWRjMTM5MGI=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-01T16:47:00Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2017-05-02T20:21:55Z"}, "message": "remove `Pass` and (temporarily) drop `Inline`", "tree": {"sha": "514b990a3d896f6b2592e94daf7c8d4b1985f390", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/514b990a3d896f6b2592e94daf7c8d4b1985f390"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "html_url": "https://github.com/rust-lang/rust/commit/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "69c8f9dd254982b3bf0908839bb7dc173b6cbaaa", "url": "https://api.github.com/repos/rust-lang/rust/commits/69c8f9dd254982b3bf0908839bb7dc173b6cbaaa", "html_url": "https://github.com/rust-lang/rust/commit/69c8f9dd254982b3bf0908839bb7dc173b6cbaaa"}], "stats": {"total": 49, "additions": 12, "deletions": 37}, "files": [{"sha": "28b34459b30f988422c7556d2aa6d47cccb7a28e", "filename": "src/librustc/mir/transform.rs", "status": "modified", "additions": 3, "deletions": 29, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc%2Fmir%2Ftransform.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc%2Fmir%2Ftransform.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Ftransform.rs?ref=c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "patch": "@@ -15,8 +15,6 @@ use hir::def_id::DefId;\n use hir::map::DefPathData;\n use mir::{Mir, Promoted};\n use ty::TyCtxt;\n-use ty::maps::Multi;\n-use ty::steal::Steal;\n use std::cell::Ref;\n use std::rc::Rc;\n use syntax::ast::NodeId;\n@@ -135,19 +133,6 @@ pub trait PassHook {\n /// application of a pass to a def-id.\n pub type PassId = (MirSuite, MirPassIndex, DefId);\n \n-/// The most generic sort of MIR pass. You only want to implement this\n-/// rather general trait if you are doing an interprocedural pass that\n-/// may inspect and affect the MIR of many def-ids. Otherwise, prefer\n-/// the more steamlined `DefIdPass` or `MirPass`.\n-pub trait Pass {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n-        default_name::<Self>()\n-    }\n-\n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>)\n-                              -> Multi<PassId, &'tcx Steal<Mir<'tcx>>>;\n-}\n-\n /// A streamlined trait that you can implement to create an\n /// intraprocedural pass; the pass will be invoked to process the MIR\n /// with the given `def_id`.  This lets you do things before we fetch\n@@ -160,17 +145,6 @@ pub trait DefIdPass {\n     fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>) -> Mir<'tcx>;\n }\n \n-impl<T: DefIdPass> Pass for T {\n-    fn name<'a>(&'a self) -> Cow<'a, str> {\n-        DefIdPass::name(self)\n-    }\n-\n-    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>)\n-                              -> Multi<PassId, &'tcx Steal<Mir<'tcx>>> {\n-        Multi::from(mir_cx.tcx().alloc_steal_mir(DefIdPass::run_pass(self, mir_cx)))\n-    }\n-}\n-\n /// A streamlined trait that you can implement to create a pass; the\n /// pass will be named after the type, and it will consist of a main\n /// loop that goes over each available MIR and applies `run_pass`.\n@@ -210,7 +184,7 @@ impl<T: MirPass> DefIdPass for T {\n #[derive(Clone)]\n pub struct Passes {\n     pass_hooks: Vec<Rc<PassHook>>,\n-    suites: Vec<Vec<Rc<Pass>>>,\n+    suites: Vec<Vec<Rc<DefIdPass>>>,\n }\n \n /// The number of \"pass suites\" that we have:\n@@ -238,7 +212,7 @@ impl<'a, 'tcx> Passes {\n     }\n \n     /// Pushes a built-in pass.\n-    pub fn push_pass<T: Pass + 'static>(&mut self, suite: MirSuite, pass: T) {\n+    pub fn push_pass<T: DefIdPass + 'static>(&mut self, suite: MirSuite, pass: T) {\n         self.suites[suite.0].push(Rc::new(pass));\n     }\n \n@@ -251,7 +225,7 @@ impl<'a, 'tcx> Passes {\n         self.suites[suite.0].len()\n     }\n \n-    pub fn pass(&self, suite: MirSuite, pass: MirPassIndex) -> &Pass {\n+    pub fn pass(&self, suite: MirSuite, pass: MirPassIndex) -> &DefIdPass {\n         &*self.suites[suite.0][pass.0]\n     }\n "}, {"sha": "a08fd1f9bf67e820aef96bde1a58fdc075dcce3e", "filename": "src/librustc_driver/driver.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_driver%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_driver%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_driver%2Fdriver.rs?ref=c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "patch": "@@ -928,7 +928,7 @@ pub fn phase_3_run_analysis_passes<'tcx, F, R>(sess: &'tcx Session,\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::simplify::SimplifyCfg::new(\"elaborate-drops\"));\n \n     // No lifetime analysis based on borrowing can be done from here on out.\n-    passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n+    // TODO passes.push_pass(MIR_OPTIMIZED, mir::transform::inline::Inline);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::instcombine::InstCombine);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::deaggregator::Deaggregator);\n     passes.push_pass(MIR_OPTIMIZED, mir::transform::copy_prop::CopyPropagation);"}, {"sha": "2323b55951d7618578bac57893f32f66706c55b3", "filename": "src/librustc_mir/transform/inline.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_mir%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Finline.rs?ref=c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "patch": "@@ -18,7 +18,7 @@ use rustc_data_structures::graph;\n \n use rustc::dep_graph::DepNode;\n use rustc::mir::*;\n-use rustc::mir::transform::{MirCtxt, MirSource, Pass, PassId};\n+use rustc::mir::transform::{MirCtxt, MirSource, PassId};\n use rustc::mir::visit::*;\n use rustc::traits;\n use rustc::ty::{self, Ty, TyCtxt};\n@@ -45,6 +45,11 @@ const UNKNOWN_SIZE_COST: usize = 10;\n \n pub struct Inline;\n \n+pub trait Pass {\n+    fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>)\n+                              -> Multi<PassId, &'tcx Steal<Mir<'tcx>>>;\n+}\n+\n impl Pass for Inline {\n     fn run_pass<'a, 'tcx: 'a>(&self, mir_cx: &MirCtxt<'a, 'tcx>)\n                               -> Multi<PassId, &'tcx Steal<Mir<'tcx>>> {"}, {"sha": "feef7a197c59df346381df6d58da1073d3edc1b6", "filename": "src/librustc_mir/transform/mod.rs", "status": "modified", "additions": 2, "deletions": 6, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c253df5249b5f3c7d6f85e1ed28afbf0adc1390b/src%2Flibrustc_mir%2Ftransform%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fmod.rs?ref=c253df5249b5f3c7d6f85e1ed28afbf0adc1390b", "patch": "@@ -70,15 +70,11 @@ fn mir_pass<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     let mir = pass.run_pass(&mir_ctxt);\n \n-    let key = &(suite, pass_num, def_id);\n     for hook in passes.hooks() {\n-        for (&(_, _, k), v) in mir.iter(key) {\n-            let v = &v.borrow();\n-            hook.on_mir_pass(&mir_ctxt, Some((k, v)));\n-        }\n+        hook.on_mir_pass(&mir_ctxt, Some((def_id, &mir)));\n     }\n \n-    mir\n+    Multi::from(tcx.alloc_steal_mir(mir))\n }\n \n struct MirCtxtImpl<'a, 'tcx: 'a> {"}]}