{"sha": "87644d85a2e91c285af9e3159a70581afd6a70bd", "node_id": "C_kwDOAAsO6NoAKDg3NjQ0ZDg1YTJlOTFjMjg1YWY5ZTMxNTlhNzA1ODFhZmQ2YTcwYmQ", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2021-12-10T10:34:05Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-28T11:42:46Z"}, "message": "Print a backtrace when query forcing fails.", "tree": {"sha": "0fea3535769cb4946e5058b77c787825aab03ce9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0fea3535769cb4946e5058b77c787825aab03ce9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87644d85a2e91c285af9e3159a70581afd6a70bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87644d85a2e91c285af9e3159a70581afd6a70bd", "html_url": "https://github.com/rust-lang/rust/commit/87644d85a2e91c285af9e3159a70581afd6a70bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87644d85a2e91c285af9e3159a70581afd6a70bd/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7919ef0ec5776c72dace7fec1c68551a617505ad", "url": "https://api.github.com/repos/rust-lang/rust/commits/7919ef0ec5776c72dace7fec1c68551a617505ad", "html_url": "https://github.com/rust-lang/rust/commit/7919ef0ec5776c72dace7fec1c68551a617505ad"}], "stats": {"total": 56, "additions": 45, "deletions": 11}, "files": [{"sha": "11c10b9c6efafca5c162dd338b715c0477eae2bf", "filename": "compiler/rustc_query_system/src/dep_graph/graph.rs", "status": "modified", "additions": 45, "deletions": 11, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/87644d85a2e91c285af9e3159a70581afd6a70bd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87644d85a2e91c285af9e3159a70581afd6a70bd/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_query_system%2Fsrc%2Fdep_graph%2Fgraph.rs?ref=87644d85a2e91c285af9e3159a70581afd6a70bd", "patch": "@@ -671,15 +671,45 @@ impl<K: DepKind> DepGraph<K> {\n         let prev_index = data.previous.node_to_index_opt(dep_node)?;\n \n         match data.colors.get(prev_index) {\n-            Some(DepNodeColor::Green(dep_node_index)) => Some((prev_index, dep_node_index)),\n-            Some(DepNodeColor::Red) => None,\n-            None => {\n-                // This DepNode and the corresponding query invocation existed\n-                // in the previous compilation session too, so we can try to\n-                // mark it as green by recursively marking all of its\n-                // dependencies green.\n-                self.try_mark_previous_green(qcx, data, prev_index, &dep_node)\n-                    .map(|dep_node_index| (prev_index, dep_node_index))\n+            Some(DepNodeColor::Green(dep_node_index)) => return Some((prev_index, dep_node_index)),\n+            Some(DepNodeColor::Red) => return None,\n+            None => {}\n+        }\n+\n+        let mut stack =\n+            MarkingStack { stack: vec![prev_index], sess: qcx.dep_context().sess(), graph: data };\n+\n+        // This DepNode and the corresponding query invocation existed\n+        // in the previous compilation session too, so we can try to\n+        // mark it as green by recursively marking all of its\n+        // dependencies green.\n+        return self\n+            .try_mark_previous_green(qcx, data, prev_index, &dep_node, &mut stack.stack)\n+            .map(|dep_node_index| (prev_index, dep_node_index));\n+\n+        /// Remember the stack of queries we are forcing in the event of an incr. comp. panic.\n+        struct MarkingStack<'a, K: DepKind> {\n+            stack: Vec<SerializedDepNodeIndex>,\n+            sess: &'a rustc_session::Session,\n+            graph: &'a DepGraphData<K>,\n+        }\n+\n+        impl<'a, K: DepKind> Drop for MarkingStack<'a, K> {\n+            /// Print the forcing backtrace.\n+            fn drop(&mut self) {\n+                for &frame in self.stack.iter().skip(1).rev() {\n+                    let node = self.graph.previous.index_to_node(frame);\n+                    // Do not try to rely on DepNode's Debug implementation,\n+                    // since it may panic.\n+                    let diag = rustc_errors::Diagnostic::new(\n+                        rustc_errors::Level::FailureNote,\n+                        &format!(\n+                            \"encountered while trying to mark dependency green: {:?}({})\",\n+                            node.kind, node.hash\n+                        ),\n+                    );\n+                    self.sess.diagnostic().force_print_diagnostic(diag);\n+                }\n             }\n         }\n     }\n@@ -691,6 +721,7 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         parent_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n+        stack: &mut Vec<SerializedDepNodeIndex>,\n     ) -> Option<()> {\n         let dep_dep_node_color = data.colors.get(parent_dep_node_index);\n         let dep_dep_node = &data.previous.index_to_node(parent_dep_node_index);\n@@ -723,7 +754,7 @@ impl<K: DepKind> DepGraph<K> {\n             );\n \n             let node_index =\n-                self.try_mark_previous_green(qcx, data, parent_dep_node_index, dep_dep_node);\n+                self.try_mark_previous_green(qcx, data, parent_dep_node_index, dep_dep_node, stack);\n \n             if node_index.is_some() {\n                 debug!(\"managed to MARK dependency {dep_dep_node:?} as green\",);\n@@ -779,6 +810,7 @@ impl<K: DepKind> DepGraph<K> {\n         data: &DepGraphData<K>,\n         prev_dep_node_index: SerializedDepNodeIndex,\n         dep_node: &DepNode<K>,\n+        stack: &mut Vec<SerializedDepNodeIndex>,\n     ) -> Option<DepNodeIndex> {\n         #[cfg(not(parallel_compiler))]\n         {\n@@ -794,7 +826,9 @@ impl<K: DepKind> DepGraph<K> {\n         let prev_deps = data.previous.edge_targets_from(prev_dep_node_index);\n \n         for &dep_dep_node_index in prev_deps {\n-            self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node)?\n+            stack.push(dep_dep_node_index);\n+            self.try_mark_parent_green(qcx, data, dep_dep_node_index, dep_node, stack)?;\n+            stack.pop();\n         }\n \n         // If we got here without hitting a `return` that means that all"}]}