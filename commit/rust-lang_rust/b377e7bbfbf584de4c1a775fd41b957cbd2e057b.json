{"sha": "b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIzNzdlN2JiZmJmNTg0ZGU0YzFhNzc1ZmQ0MWI5NTdjYmQyZTA1N2I=", "commit": {"author": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-24T14:22:41Z"}, "committer": {"name": "David Wood", "email": "david@davidtw.co", "date": "2018-07-27T10:48:47Z"}, "message": "Change label from closure to function where appropriate.", "tree": {"sha": "cc971126db8d0f01669a998725f74e515a2654a3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cc971126db8d0f01669a998725f74e515a2654a3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEWwgxPGhT5b/6kagXAXYLT59T8VQFAlta+I8ACgkQAXYLT59T\n8VRhXhAAlcg/VC6Fs6z4LrtgMh9ao45huV9N8lD6Bayw3lxjvdQRnUWLMz3xE220\n/nSresfRsKvi0062dCWkxaFmG63MQeyf/EfNIaUH0y1UKySti6urShhTj8JIrHlz\ngiEds90luBFWk20gLm8+iMSXTlxn9MqnYvUOBr+6+kyjm1SKQvw9M46c42KWCe++\nNEOACHC3tT9LYrqyVi5ygk5j/4T5IFPjdNNRxd4aoTuVZfewCvLjY47rVMofHSqw\n0shidKKqI0wX8RMyCyhQrAOMqtO68uVaQrBT+zDZ+IdvJf++UmDQuE3splAvHRnq\nWKl1/AFnrzuS8zFb5QEJ/pYYt+EE0fYOzo3FqBKEpMFu+xM4v3itaFLRYKtdxg9/\niuSE9Vr9eb9+MGw8i8Y/j/o81lPoupebM4zmcGBI73QPVTcPOrh9KlmUKU4YpQ95\n2rJumhXcglVFb+EZc3idMDwDkOZ2XY8FQIQFWuh+KNXeakh1lkH4abKjhxgAX+2q\nHgP0jdkbs4QKIIYOKL0Lye/+QETus+vMC6Mj88IinnyOz7K2UcVtUUZD6bq2zHK8\nsnQMFXgtQrhRbp2FqeWXhR55CiAgwRVbvrZ7APjnTWP5+oRGEA5KDAQ6SxahYXZ1\nhLpl2fVQlkBBhw31fJXho1GzMom7p6KxytdCRsrhr8JfFCSdrm8=\n=4MGY\n-----END PGP SIGNATURE-----", "payload": "tree cc971126db8d0f01669a998725f74e515a2654a3\nparent 055aaaf765eee0eb951b55898d943ff7dde3d4ae\nauthor David Wood <david@davidtw.co> 1532442161 +0200\ncommitter David Wood <david@davidtw.co> 1532688527 +0200\n\nChange label from closure to function where appropriate.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "html_url": "https://github.com/rust-lang/rust/commit/b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/comments", "author": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "committer": {"login": "davidtwco", "id": 1295100, "node_id": "MDQ6VXNlcjEyOTUxMDA=", "avatar_url": "https://avatars.githubusercontent.com/u/1295100?v=4", "gravatar_id": "", "url": "https://api.github.com/users/davidtwco", "html_url": "https://github.com/davidtwco", "followers_url": "https://api.github.com/users/davidtwco/followers", "following_url": "https://api.github.com/users/davidtwco/following{/other_user}", "gists_url": "https://api.github.com/users/davidtwco/gists{/gist_id}", "starred_url": "https://api.github.com/users/davidtwco/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/davidtwco/subscriptions", "organizations_url": "https://api.github.com/users/davidtwco/orgs", "repos_url": "https://api.github.com/users/davidtwco/repos", "events_url": "https://api.github.com/users/davidtwco/events{/privacy}", "received_events_url": "https://api.github.com/users/davidtwco/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "055aaaf765eee0eb951b55898d943ff7dde3d4ae", "url": "https://api.github.com/repos/rust-lang/rust/commits/055aaaf765eee0eb951b55898d943ff7dde3d4ae", "html_url": "https://github.com/rust-lang/rust/commit/055aaaf765eee0eb951b55898d943ff7dde3d4ae"}], "stats": {"total": 98, "additions": 49, "deletions": 49}, "files": [{"sha": "c88259d5e8fe34455d9ceae4ca651edd82de82e0", "filename": "src/librustc_mir/borrow_check/nll/region_infer/error_reporting/mod.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Fnll%2Fregion_infer%2Ferror_reporting%2Fmod.rs?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -324,16 +324,16 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         match (category, fr_is_local, outlived_fr_is_local) {\n             (ConstraintCategory::Assignment, true, false) |\n             (ConstraintCategory::CallArgument, true, false) =>\n-                self.report_escapes_closure_error(mir, infcx, mir_def_id, fr, outlived_fr,\n-                                                  category, span, errors_buffer),\n+                self.report_escaping_data_error(mir, infcx, mir_def_id, fr, outlived_fr,\n+                                                category, span, errors_buffer),\n             _ =>\n                 self.report_general_error(mir, infcx, mir_def_id, fr, fr_is_local,\n                                           outlived_fr, outlived_fr_is_local,\n                                           category, span, errors_buffer),\n         };\n     }\n \n-    fn report_escapes_closure_error(\n+    fn report_escaping_data_error(\n         &self,\n         mir: &Mir<'tcx>,\n         infcx: &InferCtxt<'_, '_, 'tcx>,\n@@ -348,22 +348,23 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let outlived_fr_name_and_span =\n             self.get_var_name_and_span_for_region(infcx.tcx, mir, outlived_fr);\n \n+        let escapes_from = if infcx.tcx.is_closure(mir_def_id) { \"closure\" } else { \"function\" };\n+\n         if fr_name_and_span.is_none() && outlived_fr_name_and_span.is_none() {\n             return self.report_general_error(mir, infcx, mir_def_id,\n                                              fr, true, outlived_fr, false,\n                                              category, span, errors_buffer);\n         }\n \n-        let mut diag = infcx\n-            .tcx\n-            .sess\n-            .struct_span_err(span, &format!(\"borrowed data escapes outside of closure\"));\n+        let mut diag = infcx.tcx.sess.struct_span_err(\n+            span, &format!(\"borrowed data escapes outside of {}\", escapes_from),\n+        );\n \n         if let Some((outlived_fr_name, outlived_fr_span)) = outlived_fr_name_and_span {\n             if let Some(name) = outlived_fr_name {\n                 diag.span_label(\n                     outlived_fr_span,\n-                    format!(\"`{}` is declared here, outside of the closure body\", name),\n+                    format!(\"`{}` is declared here, outside of the {} body\", name, escapes_from),\n                 );\n             }\n         }\n@@ -372,13 +373,12 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n             if let Some(name) = fr_name {\n                 diag.span_label(\n                     fr_span,\n-                    format!(\n-                        \"`{}` is a reference that is only valid in the closure body\",\n-                        name\n-                    ),\n+                    format!(\"`{}` is a reference that is only valid in the {} body\",\n+                            name, escapes_from),\n                 );\n \n-                diag.span_label(span, format!(\"`{}` escapes the closure body here\", name));\n+                diag.span_label(span, format!(\"`{}` escapes the {} body here\",\n+                                               name, escapes_from));\n             }\n         }\n \n@@ -409,12 +409,14 @@ impl<'tcx> RegionInferenceContext<'tcx> {\n         let outlived_fr_name = self.give_region_a_name(\n             infcx, mir, mir_def_id, outlived_fr, counter, &mut diag);\n \n+        let mir_def_name = if infcx.tcx.is_closure(mir_def_id) { \"closure\" } else { \"function\" };\n+\n         match (category, outlived_fr_is_local, fr_is_local) {\n             (ConstraintCategory::Return, true, _) => {\n                 diag.span_label(span, format!(\n-                    \"closure was supposed to return data with lifetime `{}` but it is returning \\\n+                    \"{} was supposed to return data with lifetime `{}` but it is returning \\\n                     data with lifetime `{}`\",\n-                    fr_name, outlived_fr_name,\n+                    mir_def_name, fr_name, outlived_fr_name,\n                 ));\n             },\n             _ => {"}, {"sha": "123a93636d237e36e85b3367cc78890161199025", "filename": "src/test/ui/impl-trait/static-return-lifetime-infered.nll.stderr", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fstatic-return-lifetime-infered.nll.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -10,21 +10,19 @@ warning: not reporting region error due to nll\n LL |         self.x.iter().map(|a| a.0)\n    |                ^^^^\n \n-error: borrowed data escapes outside of closure\n+error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:17:9\n    |\n LL |     fn iter_values_anon(&self) -> impl Iterator<Item=u32> {\n-   |                         ----- `self` is a reference that is only valid in the closure body\n+   |                         - let's call the lifetime of this reference `'1`\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^^^^ free region requires that `'1` must outlive `'static`\n \n-error: borrowed data escapes outside of closure\n+error: unsatisfied lifetime constraints\n   --> $DIR/static-return-lifetime-infered.rs:21:9\n    |\n-LL |     fn iter_values<'a>(&'a self) -> impl Iterator<Item=u32> {\n-   |                        -------- `self` is a reference that is only valid in the closure body\n LL |         self.x.iter().map(|a| a.0)\n-   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^^^^ free region requires that `'a` must outlive `'static`\n \n error: aborting due to 2 previous errors\n "}, {"sha": "f5d98e04ad804009fdef311814c7c8eaaa86076c", "filename": "src/test/ui/in-band-lifetimes/impl/dyn-trait.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fin-band-lifetimes%2Fimpl%2Fdyn-trait.nll.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -4,13 +4,13 @@ warning: not reporting region error due to nll\n LL |     static_val(x); //~ ERROR cannot infer\n    |                ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/dyn-trait.rs:32:5\n    |\n LL | fn with_dyn_debug_static<'a>(x: Box<dyn Debug + 'a>) {\n-   |                              - `x` is a reference that is only valid in the closure body\n+   |                              - `x` is a reference that is only valid in the function body\n LL |     static_val(x); //~ ERROR cannot infer\n-   |     ^^^^^^^^^^^^^ `x` escapes the closure body here\n+   |     ^^^^^^^^^^^^^ `x` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "890bb426441e2182b569952ec8dfcbaa4c1805db", "filename": "src/test/ui/issue-16683.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-16683.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-16683.nll.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.a(); //~ ERROR cannot infer\n    |              ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-16683.rs:14:9\n    |\n LL |     fn b(&self) {\n-   |          ----- `self` is a reference that is only valid in the closure body\n+   |          ----- `self` is a reference that is only valid in the function body\n LL |         self.a(); //~ ERROR cannot infer\n-   |         ^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^ `self` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "c51a72f885d6c83487eab1d2cbb8c07375e06403", "filename": "src/test/ui/issue-17758.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-17758.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-17758.nll.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -10,13 +10,13 @@ warning: not reporting region error due to nll\n LL |         self.foo();\n    |              ^^^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-17758.rs:17:9\n    |\n LL |     fn bar(&self) {\n-   |            ----- `self` is a reference that is only valid in the closure body\n+   |            ----- `self` is a reference that is only valid in the function body\n LL |         self.foo();\n-   |         ^^^^^^^^^^ `self` escapes the closure body here\n+   |         ^^^^^^^^^^ `self` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "c288cf9ed820c8dc2f8baf8034570d49847d8214", "filename": "src/test/ui/issue-52213.nll.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-52213.nll.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fissue-52213.nll.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-52213.nll.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -5,10 +5,10 @@ LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n    |           ^^^^^\n \n error: unsatisfied lifetime constraints\n-  --> $DIR/issue-52213.rs:12:11\n+  --> $DIR/issue-52213.rs:13:11\n    |\n-LL |     match (&t,) { //~ ERROR cannot infer an appropriate lifetime\n-   |           ^^^^^ free region requires that `'a` must outlive `'b`\n+LL |         ((u,),) => u,\n+   |           ^ free region requires that `'a` must outlive `'b`\n \n error: aborting due to previous error\n "}, {"sha": "33e4240736f5bfdd7c8ad17cf6bb0218ac0cddaa", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-no-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-no-bound.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -23,18 +23,18 @@ LL | |     });\n    = note: number of external vids: 2\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:45:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the closure body\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives, x, y| {\n LL | |         //~^ ERROR\n LL | |\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get()) //~ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ `cell_a` escapes the closure body here\n+   | |______^ `cell_a` escapes the function body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-no-bound.rs:44:1"}, {"sha": "5f98a0fd36d7989414fb691283e84b221add3b04", "filename": "src/test/ui/nll/closure-requirements/propagate-approximated-shorter-to-static-wrong-bound.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fclosure-requirements%2Fpropagate-approximated-shorter-to-static-wrong-bound.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -23,18 +23,18 @@ LL | |     });\n    = note: number of external vids: 3\n    = note: where '_#1r: '_#0r\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:48:5\n    |\n LL |   fn supply<'a, 'b>(cell_a: Cell<&'a u32>, cell_b: Cell<&'b u32>) {\n-   |                     ------ `cell_a` is a reference that is only valid in the closure body\n+   |                     ------ `cell_a` is a reference that is only valid in the function body\n LL | /     establish_relationships(&cell_a, &cell_b, |_outlives1, _outlives2, x, y| {\n LL | |         //~^ ERROR\n LL | |         // Only works if 'x: 'y:\n LL | |         demand_y(x, y, x.get())\n LL | |         //~^ WARNING not reporting region error due to nll\n LL | |     });\n-   | |______^ `cell_a` escapes the closure body here\n+   | |______^ `cell_a` escapes the function body here\n \n note: No external requirements\n   --> $DIR/propagate-approximated-shorter-to-static-wrong-bound.rs:47:1"}, {"sha": "f12ab9b4f9602f8f9f326e088a5297933ab2b9b8", "filename": "src/test/ui/nll/issue-50716.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-50716.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -1,11 +1,11 @@\n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/issue-50716.rs:25:14\n    |\n LL | fn foo<'a, T: 'static>(s: Box<<&'a T as A>::X>)\n-   |                        - `s` is a reference that is only valid in the closure body\n+   |                        - `s` is a reference that is only valid in the function body\n ...\n LL |     let _x = *s; //~ ERROR\n-   |              ^^ `s` escapes the closure body here\n+   |              ^^ `s` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "d8f186a22324bbc06fc6d1d3155d3997633ca82d", "filename": "src/test/ui/nll/mir_check_cast_reify.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_reify.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let f: fn(_) -> _ = foo;\n    |                         ^^^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/mir_check_cast_reify.rs:48:5\n    |\n LL | fn bar<'a>(x: &'a u32) -> &'static u32 {\n-   |            - `x` is a reference that is only valid in the closure body\n+   |            - `x` is a reference that is only valid in the function body\n ...\n LL |     f(x)\n-   |     ^^^^ `x` escapes the closure body here\n+   |     ^^^^ `x` escapes the function body here\n \n error: aborting due to previous error\n "}, {"sha": "98c03e378147a7890bc55dae34df7c2f8a4903c7", "filename": "src/test/ui/nll/mir_check_cast_unsafe_fn.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b377e7bbfbf584de4c1a775fd41b957cbd2e057b/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmir_check_cast_unsafe_fn.stderr?ref=b377e7bbfbf584de4c1a775fd41b957cbd2e057b", "patch": "@@ -4,14 +4,14 @@ warning: not reporting region error due to nll\n LL |     let g: unsafe fn(_) -> _ = f;\n    |                                ^\n \n-error: borrowed data escapes outside of closure\n+error: borrowed data escapes outside of function\n   --> $DIR/mir_check_cast_unsafe_fn.rs:20:14\n    |\n LL | fn bar<'a>(input: &'a u32, f: fn(&'a u32) -> &'a u32) -> &'static u32 {\n-   |            ----- `input` is a reference that is only valid in the closure body\n+   |            ----- `input` is a reference that is only valid in the function body\n ...\n LL |     unsafe { g(input) }\n-   |              ^^^^^^^^ `input` escapes the closure body here\n+   |              ^^^^^^^^ `input` escapes the function body here\n \n error: aborting due to previous error\n "}]}