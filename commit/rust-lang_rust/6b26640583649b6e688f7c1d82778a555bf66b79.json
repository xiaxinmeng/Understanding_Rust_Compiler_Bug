{"sha": "6b26640583649b6e688f7c1d82778a555bf66b79", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiMjY2NDA1ODM2NDliNmU2ODhmN2MxZDgyNzc4YTU1NWJmNjZiNzk=", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-12T16:45:56Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2021-07-12T18:09:42Z"}, "message": "remove unnecessary deallocate_local hack", "tree": {"sha": "49e01c119a666ce2957248670defe489638e0c6a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/49e01c119a666ce2957248670defe489638e0c6a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6b26640583649b6e688f7c1d82778a555bf66b79", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6b26640583649b6e688f7c1d82778a555bf66b79", "html_url": "https://github.com/rust-lang/rust/commit/6b26640583649b6e688f7c1d82778a555bf66b79", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6b26640583649b6e688f7c1d82778a555bf66b79/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c8baac5776141d9e844b05fef8d144e3664e7a75", "url": "https://api.github.com/repos/rust-lang/rust/commits/c8baac5776141d9e844b05fef8d144e3664e7a75", "html_url": "https://github.com/rust-lang/rust/commit/c8baac5776141d9e844b05fef8d144e3664e7a75"}], "stats": {"total": 23, "additions": 8, "deletions": 15}, "files": [{"sha": "8cd459265dfc54fe2a1f81170068eddab5dfdbfc", "filename": "compiler/rustc_mir/src/interpret/eval_context.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6b26640583649b6e688f7c1d82778a555bf66b79/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b26640583649b6e688f7c1d82778a555bf66b79/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Feval_context.rs?ref=6b26640583649b6e688f7c1d82778a555bf66b79", "patch": "@@ -18,8 +18,8 @@ use rustc_span::{Pos, Span};\n use rustc_target::abi::{Align, HasDataLayout, LayoutOf, Size, TargetDataLayout};\n \n use super::{\n-    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, Operand, Place, PlaceTy,\n-    ScalarMaybeUninit, StackPopJump,\n+    Immediate, MPlaceTy, Machine, MemPlace, MemPlaceMeta, Memory, MemoryKind, Operand, Place,\n+    PlaceTy, ScalarMaybeUninit, StackPopJump,\n };\n use crate::transform::validate::equal_up_to_regions;\n use crate::util::storage::AlwaysLiveLocals;\n@@ -900,7 +900,7 @@ impl<'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             // due to the local having ZST type.\n             let ptr = ptr.assert_ptr();\n             trace!(\"deallocating local: {:?}\", self.memory.dump_alloc(ptr.alloc_id));\n-            self.memory.deallocate_local(ptr)?;\n+            self.memory.deallocate(ptr, None, MemoryKind::Stack)?;\n         };\n         Ok(())\n     }"}, {"sha": "5f719cc160706d09aa3fa9d1e0cee62a7ac00d46", "filename": "compiler/rustc_mir/src/interpret/memory.rs", "status": "modified", "additions": 5, "deletions": 12, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/6b26640583649b6e688f7c1d82778a555bf66b79/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6b26640583649b6e688f7c1d82778a555bf66b79/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Finterpret%2Fmemory.rs?ref=6b26640583649b6e688f7c1d82778a555bf66b79", "patch": "@@ -276,17 +276,6 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         Ok(new_ptr)\n     }\n \n-    /// Deallocate a local, or do nothing if that local has been made into a global.\n-    pub fn deallocate_local(&mut self, ptr: Pointer<M::PointerTag>) -> InterpResult<'tcx> {\n-        // The allocation might be already removed by global interning.\n-        // This can only really happen in the CTFE instance, not in miri.\n-        if self.alloc_map.contains_key(&ptr.alloc_id) {\n-            self.deallocate(ptr, None, MemoryKind::Stack)\n-        } else {\n-            Ok(())\n-        }\n-    }\n-\n     pub fn deallocate(\n         &mut self,\n         ptr: Pointer<M::PointerTag>,\n@@ -1110,7 +1099,11 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'mir, 'tcx, M> {\n         }\n \n         // now fill in all the \"init\" data\n-        dest_alloc.mark_compressed_init_range(&compressed, alloc_range(dest.offset, size), num_copies);\n+        dest_alloc.mark_compressed_init_range(\n+            &compressed,\n+            alloc_range(dest.offset, size),\n+            num_copies,\n+        );\n         // copy the relocations to the destination\n         dest_alloc.mark_relocation_range(relocations);\n "}]}