{"sha": "349bda2051e94b7aefb33d6541f48f561bf06dbc", "node_id": "C_kwDOAAsO6NoAKDM0OWJkYTIwNTFlOTRiN2FlZmIzM2Q2NTQxZjQ4ZjU2MWJmMDZkYmM", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T23:50:20Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-16T23:50:20Z"}, "message": "Auto merge of #98181 - JohnTitor:rollup-65ztwnz, r=JohnTitor\n\nRollup of 5 pull requests\n\nSuccessful merges:\n\n - #97377 (Do not suggest adding semicolon/changing delimiters for macros in item position that originates in macros)\n - #97675 (Make `std::mem::needs_drop` accept `?Sized`)\n - #98118 (Test NLL fix of bad lifetime inference for reference captured in closure.)\n - #98166 (Add rustdoc-json regression test for #98009)\n - #98169 (Keyword docs: Link to wikipedia article for dynamic dispatch)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "53b5320c033a44c0e0ed2f23b2ad5b194f083d2c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/53b5320c033a44c0e0ed2f23b2ad5b194f083d2c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/349bda2051e94b7aefb33d6541f48f561bf06dbc", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/349bda2051e94b7aefb33d6541f48f561bf06dbc", "html_url": "https://github.com/rust-lang/rust/commit/349bda2051e94b7aefb33d6541f48f561bf06dbc", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/349bda2051e94b7aefb33d6541f48f561bf06dbc/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cacc75c82ebe15cf63d31034fcf7f1016cddf0e2", "url": "https://api.github.com/repos/rust-lang/rust/commits/cacc75c82ebe15cf63d31034fcf7f1016cddf0e2", "html_url": "https://github.com/rust-lang/rust/commit/cacc75c82ebe15cf63d31034fcf7f1016cddf0e2"}, {"sha": "6ac93185f4daacacb537d5b61e900eb9d58edcd1", "url": "https://api.github.com/repos/rust-lang/rust/commits/6ac93185f4daacacb537d5b61e900eb9d58edcd1", "html_url": "https://github.com/rust-lang/rust/commit/6ac93185f4daacacb537d5b61e900eb9d58edcd1"}], "stats": {"total": 220, "additions": 194, "deletions": 26}, "files": [{"sha": "489259d1a6bc6564e03002712ed5c6e53f0272f0", "filename": "compiler/rustc_codegen_cranelift/example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -567,7 +567,7 @@ pub mod intrinsics {\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn needs_drop<T>() -> bool;\n+        pub fn needs_drop<T: ?::Sized>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "0f1245c2758edabc691d4932a3fae3c66d7492cd", "filename": "compiler/rustc_codegen_cranelift/example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_cranelift%2Fexample%2Fmini_core_hello_world.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -55,6 +55,11 @@ struct NoisyDrop {\n     inner: NoisyDropInner,\n }\n \n+struct NoisyDropUnsized {\n+    inner: NoisyDropInner,\n+    text: str,\n+}\n+\n struct NoisyDropInner;\n \n impl Drop for NoisyDrop {\n@@ -170,7 +175,9 @@ fn main() {\n         assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n \n         assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(!intrinsics::needs_drop::<[u8]>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n+        assert!(intrinsics::needs_drop::<NoisyDropUnsized>());\n \n         Unique {\n             pointer: NonNull(1 as *mut &str),"}, {"sha": "ddcbb0d9fc7e822b1aeac5ecb84e9f2c68be1970", "filename": "compiler/rustc_codegen_gcc/example/mini_core.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -514,7 +514,7 @@ pub mod intrinsics {\n         pub fn copy<T>(src: *const T, dst: *mut T, count: usize);\n         pub fn transmute<T, U>(e: T) -> U;\n         pub fn ctlz_nonzero<T>(x: T) -> T;\n-        pub fn needs_drop<T>() -> bool;\n+        pub fn needs_drop<T: ?::Sized>() -> bool;\n         pub fn bitreverse<T>(x: T) -> T;\n         pub fn bswap<T>(x: T) -> T;\n         pub fn write_bytes<T>(dst: *mut T, val: u8, count: usize);"}, {"sha": "14fd9eeffa6acd6c839f00be7aa91c5c7c798943", "filename": "compiler/rustc_codegen_gcc/example/mini_core_hello_world.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_gcc%2Fexample%2Fmini_core_hello_world.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -47,6 +47,11 @@ struct NoisyDrop {\n     inner: NoisyDropInner,\n }\n \n+struct NoisyDropUnsized {\n+    inner: NoisyDropInner,\n+    text: str,\n+}\n+\n struct NoisyDropInner;\n \n impl Drop for NoisyDrop {\n@@ -184,7 +189,9 @@ fn main() {\n         assert_eq!(intrinsics::min_align_of_val(&a) as u8, intrinsics::min_align_of::<&str>() as u8);\n \n         assert!(!intrinsics::needs_drop::<u8>());\n+        assert!(!intrinsics::needs_drop::<[u8]>());\n         assert!(intrinsics::needs_drop::<NoisyDrop>());\n+        assert!(intrinsics::needs_drop::<NoisyDropUnsized>());\n \n         Unique {\n             pointer: 0 as *const &str,"}, {"sha": "bf685aa8cadc34005755d89ccade55924b2b79f6", "filename": "compiler/rustc_parse/src/parser/item.rs", "status": "modified", "additions": 25, "deletions": 21, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fitem.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -1775,30 +1775,34 @@ impl<'a> Parser<'a> {\n             span,\n             \"macros that expand to items must be delimited with braces or followed by a semicolon\",\n         );\n-        if self.unclosed_delims.is_empty() {\n-            let DelimSpan { open, close } = match args {\n-                MacArgs::Empty | MacArgs::Eq(..) => unreachable!(),\n-                MacArgs::Delimited(dspan, ..) => *dspan,\n-            };\n-            err.multipart_suggestion(\n-                \"change the delimiters to curly braces\",\n-                vec![(open, \"{\".to_string()), (close, '}'.to_string())],\n-                Applicability::MaybeIncorrect,\n-            );\n-        } else {\n+        // FIXME: This will make us not emit the help even for declarative\n+        // macros within the same crate (that we can fix), which is sad.\n+        if !span.from_expansion() {\n+            if self.unclosed_delims.is_empty() {\n+                let DelimSpan { open, close } = match args {\n+                    MacArgs::Empty | MacArgs::Eq(..) => unreachable!(),\n+                    MacArgs::Delimited(dspan, ..) => *dspan,\n+                };\n+                err.multipart_suggestion(\n+                    \"change the delimiters to curly braces\",\n+                    vec![(open, \"{\".to_string()), (close, '}'.to_string())],\n+                    Applicability::MaybeIncorrect,\n+                );\n+            } else {\n+                err.span_suggestion(\n+                    span,\n+                    \"change the delimiters to curly braces\",\n+                    \" { /* items */ }\",\n+                    Applicability::HasPlaceholders,\n+                );\n+            }\n             err.span_suggestion(\n-                span,\n-                \"change the delimiters to curly braces\",\n-                \" { /* items */ }\",\n-                Applicability::HasPlaceholders,\n+                span.shrink_to_hi(),\n+                \"add a semicolon\",\n+                ';',\n+                Applicability::MaybeIncorrect,\n             );\n         }\n-        err.span_suggestion(\n-            span.shrink_to_hi(),\n-            \"add a semicolon\",\n-            ';',\n-            Applicability::MaybeIncorrect,\n-        );\n         err.emit();\n     }\n "}, {"sha": "ba837ea9a7898fbebbd11e88fca8867a257f3e46", "filename": "library/core/src/intrinsics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fcore%2Fsrc%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fintrinsics.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -1162,7 +1162,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is [`mem::needs_drop`](crate::mem::needs_drop).\n     #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n-    pub fn needs_drop<T>() -> bool;\n+    pub fn needs_drop<T: ?Sized>() -> bool;\n \n     /// Calculates the offset from a pointer.\n     ///"}, {"sha": "71ea3b4ba85a255a696bfa0bece8b306791e4ddf", "filename": "library/core/src/mem/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fmem%2Fmod.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -592,7 +592,7 @@ pub const unsafe fn align_of_val_raw<T: ?Sized>(val: *const T) -> usize {\n #[stable(feature = \"needs_drop\", since = \"1.21.0\")]\n #[rustc_const_stable(feature = \"const_mem_needs_drop\", since = \"1.36.0\")]\n #[rustc_diagnostic_item = \"needs_drop\"]\n-pub const fn needs_drop<T>() -> bool {\n+pub const fn needs_drop<T: ?Sized>() -> bool {\n     intrinsics::needs_drop::<T>()\n }\n "}, {"sha": "7157b5af00cf48fd1440ec7970b8bd1ef7ca481f", "filename": "library/std/src/keyword_docs.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fstd%2Fsrc%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fkeyword_docs.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -2257,7 +2257,7 @@ mod await_keyword {}\n /// `dyn` is a prefix of a [trait object]'s type.\n ///\n /// The `dyn` keyword is used to highlight that calls to methods on the associated `Trait`\n-/// are dynamically dispatched. To use the trait this way, it must be 'object safe'.\n+/// are [dynamically dispatched]. To use the trait this way, it must be 'object safe'.\n ///\n /// Unlike generic parameters or `impl Trait`, the compiler does not know the concrete type that\n /// is being passed. That is, the type has been [erased].\n@@ -2281,6 +2281,7 @@ mod await_keyword {}\n /// the method won't be duplicated for each concrete type.\n ///\n /// [trait object]: ../book/ch17-02-trait-objects.html\n+/// [dynamically dispatched]: https://en.wikipedia.org/wiki/Dynamic_dispatch\n /// [ref-trait-obj]: ../reference/types/trait-object.html\n /// [ref-obj-safety]: ../reference/items/traits.html#object-safety\n /// [erased]: https://en.wikipedia.org/wiki/Type_erasure"}, {"sha": "ec68b5291880298aa8b31926dee073cf9b695810", "filename": "library/std/src/thread/tests.rs", "status": "modified", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fthread%2Ftests.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -316,3 +316,16 @@ fn test_scoped_threads_drop_result_before_join() {\n     });\n     assert!(actually_finished.load(Ordering::Relaxed));\n }\n+\n+#[test]\n+fn test_scoped_threads_nll() {\n+    // this is mostly a *compilation test* for this exact function:\n+    fn foo(x: &u8) {\n+        thread::scope(|s| {\n+            s.spawn(|| drop(x));\n+        });\n+    }\n+    // let's also run it for good measure\n+    let x = 42_u8;\n+    foo(&x);\n+}"}, {"sha": "d80656c7fc8aad584706916c082afa779b4b8b70", "filename": "src/test/rustdoc-json/output_generics.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Foutput_generics.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -0,0 +1,38 @@\n+// compile-flags: --document-private-items --document-hidden-items\n+\n+// This is a regression test for #98009.\n+\n+// @has output_generics.json\n+// @has - \"$.index[*][?(@.name=='this_compiles')]\"\n+// @has - \"$.index[*][?(@.name=='this_does_not')]\"\n+// @has - \"$.index[*][?(@.name=='Events')]\"\n+// @has - \"$.index[*][?(@.name=='Other')]\"\n+// @has - \"$.index[*][?(@.name=='Trait')]\"\n+\n+struct Events<R>(R);\n+\n+struct Other;\n+\n+pub trait Trait<T> {\n+    fn handle(value: T) -> Self;\n+}\n+\n+impl<T, U> Trait<U> for T where T: From<U> {\n+    fn handle(_: U) -> Self { unimplemented!() }\n+}\n+\n+impl<'a, R> Trait<&'a mut Events<R>> for Other {\n+    fn handle(_: &'a mut Events<R>) -> Self { unimplemented!() }\n+}\n+\n+fn this_compiles<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(&mut *value);\n+    }\n+}\n+\n+fn this_does_not<'a, R>(value: &'a mut Events<R>) {\n+    for _ in 0..3 {\n+        Other::handle(value);\n+    }\n+}"}, {"sha": "958a8bed9e2d19e4bc2c4786bece56bb7b2641d4", "filename": "src/test/ui/proc-macro/auxiliary/issue-91800-macro.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-91800-macro.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-91800-macro.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fauxiliary%2Fissue-91800-macro.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -0,0 +1,26 @@\n+// force-host\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+fn compile_error() -> TokenStream {\n+    r#\"compile_error!(\"\")\"#.parse().unwrap()\n+}\n+\n+#[proc_macro_derive(MyTrait)]\n+pub fn derive(input: TokenStream) -> TokenStream {\n+    compile_error()\n+}\n+#[proc_macro_attribute]\n+pub fn attribute_macro(_attr: TokenStream, mut input: TokenStream) -> TokenStream {\n+    input.extend(compile_error());\n+    input\n+}\n+#[proc_macro]\n+pub fn fn_macro(_item: TokenStream) -> TokenStream {\n+    compile_error()\n+}"}, {"sha": "0c1281de4f8c25ad0060c459fadf5358d2e2c289", "filename": "src/test/ui/proc-macro/issue-91800.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.rs", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.rs?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -0,0 +1,16 @@\n+// aux-build: issue-91800-macro.rs\n+\n+#[macro_use]\n+extern crate issue_91800_macro;\n+\n+#[derive(MyTrait)]\n+//~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n+//~| ERROR proc-macro derive produced unparseable tokens\n+#[attribute_macro]\n+//~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n+struct MyStruct;\n+\n+fn_macro! {}\n+//~^ ERROR macros that expand to items must be delimited with braces or followed by a semicolon\n+\n+fn main() {}"}, {"sha": "9c356263a36b20ae2ee69b2d484ffe1a418f90de", "filename": "src/test/ui/proc-macro/issue-91800.stderr", "status": "added", "additions": 56, "deletions": 0, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/349bda2051e94b7aefb33d6541f48f561bf06dbc/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fissue-91800.stderr?ref=349bda2051e94b7aefb33d6541f48f561bf06dbc", "patch": "@@ -0,0 +1,56 @@\n+error: macros that expand to items must be delimited with braces or followed by a semicolon\n+  --> $DIR/issue-91800.rs:6:10\n+   |\n+LL | #[derive(MyTrait)]\n+   |          ^^^^^^^\n+   |\n+   = note: this error originates in the derive macro `MyTrait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: proc-macro derive produced unparseable tokens\n+  --> $DIR/issue-91800.rs:6:10\n+   |\n+LL | #[derive(MyTrait)]\n+   |          ^^^^^^^\n+\n+error: \n+  --> $DIR/issue-91800.rs:6:10\n+   |\n+LL | #[derive(MyTrait)]\n+   |          ^^^^^^^\n+   |\n+   = note: this error originates in the derive macro `MyTrait` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: macros that expand to items must be delimited with braces or followed by a semicolon\n+  --> $DIR/issue-91800.rs:9:1\n+   |\n+LL | #[attribute_macro]\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the attribute macro `attribute_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: \n+  --> $DIR/issue-91800.rs:9:1\n+   |\n+LL | #[attribute_macro]\n+   | ^^^^^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the attribute macro `attribute_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: macros that expand to items must be delimited with braces or followed by a semicolon\n+  --> $DIR/issue-91800.rs:13:1\n+   |\n+LL | fn_macro! {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `fn_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: \n+  --> $DIR/issue-91800.rs:13:1\n+   |\n+LL | fn_macro! {}\n+   | ^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `fn_macro` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 7 previous errors\n+"}]}