{"sha": "85c1a4b1ba09dae786b3554e0ab596814efabe0e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjg1YzFhNGIxYmEwOWRhZTc4NmIzNTU0ZTBhYjU5NjgxNGVmYWJlMGU=", "commit": {"author": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2014-12-21T21:57:09Z"}, "committer": {"name": "Chris Wong", "email": "lambda.fairy@gmail.com", "date": "2014-12-23T09:06:32Z"}, "message": "Rename include_bin! to include_bytes!\n\nAccording to [RFC 344][], methods that return `&[u8]` should have names\nending in `bytes`. Though `include_bin!` is a macro not a method, it\nseems reasonable to follow the convention anyway.\n\nWe keep the old name around for now, but trigger a deprecation warning\nwhen it is used.\n\n[RFC 344]: https://github.com/rust-lang/rfcs/blob/master/text/0344-conventions-galore.md\n\n[breaking-change]", "tree": {"sha": "361dd0205510de3ea787361683a12de74efb9400", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/361dd0205510de3ea787361683a12de74efb9400"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/85c1a4b1ba09dae786b3554e0ab596814efabe0e", "comment_count": 7, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/85c1a4b1ba09dae786b3554e0ab596814efabe0e", "html_url": "https://github.com/rust-lang/rust/commit/85c1a4b1ba09dae786b3554e0ab596814efabe0e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/85c1a4b1ba09dae786b3554e0ab596814efabe0e/comments", "author": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lambda-fairy", "id": 1572323, "node_id": "MDQ6VXNlcjE1NzIzMjM=", "avatar_url": "https://avatars.githubusercontent.com/u/1572323?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lambda-fairy", "html_url": "https://github.com/lambda-fairy", "followers_url": "https://api.github.com/users/lambda-fairy/followers", "following_url": "https://api.github.com/users/lambda-fairy/following{/other_user}", "gists_url": "https://api.github.com/users/lambda-fairy/gists{/gist_id}", "starred_url": "https://api.github.com/users/lambda-fairy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lambda-fairy/subscriptions", "organizations_url": "https://api.github.com/users/lambda-fairy/orgs", "repos_url": "https://api.github.com/users/lambda-fairy/repos", "events_url": "https://api.github.com/users/lambda-fairy/events{/privacy}", "received_events_url": "https://api.github.com/users/lambda-fairy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "62fb41c32bd97c4e9bc286a1db5d7126a06b8b91", "url": "https://api.github.com/repos/rust-lang/rust/commits/62fb41c32bd97c4e9bc286a1db5d7126a06b8b91", "html_url": "https://github.com/rust-lang/rust/commit/62fb41c32bd97c4e9bc286a1db5d7126a06b8b91"}], "stats": {"total": 55, "additions": 34, "deletions": 21}, "files": [{"sha": "b71994c9836a16548f93d20a35bf31acb6033467", "filename": "src/doc/reference.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Fdoc%2Freference.md", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Fdoc%2Freference.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference.md?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -640,7 +640,7 @@ names, and invoked through a consistent syntax: `name!(...)`. Examples include:\n * `stringify!` : pretty-print the Rust expression given as an argument\n * `include!` : include the Rust expression in the given file\n * `include_str!` : include the contents of the given file as a string\n-* `include_bin!` : include the contents of the given file as a binary blob\n+* `include_bytes!` : include the contents of the given file as a binary blob\n * `error!`, `warn!`, `info!`, `debug!` : provide diagnostic information.\n \n All of the above extensions are expressions with values."}, {"sha": "304dbe201e8fd5021945996168a5a4a626127a62", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 12, "deletions": 12, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -491,26 +491,26 @@ fn write_shared(cx: &Context,\n     // Add all the static files. These may already exist, but we just\n     // overwrite them anyway to make sure that they're fresh and up-to-date.\n     try!(write(cx.dst.join(\"jquery.js\"),\n-               include_bin!(\"static/jquery-2.1.0.min.js\")));\n-    try!(write(cx.dst.join(\"main.js\"), include_bin!(\"static/main.js\")));\n-    try!(write(cx.dst.join(\"playpen.js\"), include_bin!(\"static/playpen.js\")));\n-    try!(write(cx.dst.join(\"main.css\"), include_bin!(\"static/main.css\")));\n+               include_bytes!(\"static/jquery-2.1.0.min.js\")));\n+    try!(write(cx.dst.join(\"main.js\"), include_bytes!(\"static/main.js\")));\n+    try!(write(cx.dst.join(\"playpen.js\"), include_bytes!(\"static/playpen.js\")));\n+    try!(write(cx.dst.join(\"main.css\"), include_bytes!(\"static/main.css\")));\n     try!(write(cx.dst.join(\"normalize.css\"),\n-               include_bin!(\"static/normalize.css\")));\n+               include_bytes!(\"static/normalize.css\")));\n     try!(write(cx.dst.join(\"FiraSans-Regular.woff\"),\n-               include_bin!(\"static/FiraSans-Regular.woff\")));\n+               include_bytes!(\"static/FiraSans-Regular.woff\")));\n     try!(write(cx.dst.join(\"FiraSans-Medium.woff\"),\n-               include_bin!(\"static/FiraSans-Medium.woff\")));\n+               include_bytes!(\"static/FiraSans-Medium.woff\")));\n     try!(write(cx.dst.join(\"Heuristica-Italic.woff\"),\n-               include_bin!(\"static/Heuristica-Italic.woff\")));\n+               include_bytes!(\"static/Heuristica-Italic.woff\")));\n     try!(write(cx.dst.join(\"SourceSerifPro-Regular.woff\"),\n-               include_bin!(\"static/SourceSerifPro-Regular.woff\")));\n+               include_bytes!(\"static/SourceSerifPro-Regular.woff\")));\n     try!(write(cx.dst.join(\"SourceSerifPro-Bold.woff\"),\n-               include_bin!(\"static/SourceSerifPro-Bold.woff\")));\n+               include_bytes!(\"static/SourceSerifPro-Bold.woff\")));\n     try!(write(cx.dst.join(\"SourceCodePro-Regular.woff\"),\n-               include_bin!(\"static/SourceCodePro-Regular.woff\")));\n+               include_bytes!(\"static/SourceCodePro-Regular.woff\")));\n     try!(write(cx.dst.join(\"SourceCodePro-Semibold.woff\"),\n-               include_bin!(\"static/SourceCodePro-Semibold.woff\")));\n+               include_bytes!(\"static/SourceCodePro-Semibold.woff\")));\n \n     fn collect(path: &Path, krate: &str,\n                key: &str) -> io::IoResult<Vec<String>> {"}, {"sha": "d90a47ea4ea8c3cdb8328b402b634e7a0713a873", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -621,10 +621,14 @@ pub mod builtin {\n     /// # Example\n     ///\n     /// ```rust,ignore\n-    /// let secret_key = include_bin!(\"secret-key.bin\");\n+    /// let secret_key = include_bytes!(\"secret-key.bin\");\n     /// ```\n     #[macro_export]\n-    macro_rules! include_bin { ($file:expr) => ({ /* compiler built-in */ }) }\n+    macro_rules! include_bytes { ($file:expr) => ({ /* compiler built-in */ }) }\n+\n+    /// Deprecated alias for `include_bytes!()`.\n+    #[macro_export]\n+    macro_rules! include_bin { ($file:expr) => ({ /* compiler built-in */}) }\n \n     /// Expands to a string that represents the current module path.\n     ///"}, {"sha": "8e69076a2c50e1ba2561a189558803b85c194f1d", "filename": "src/libsyntax/ext/base.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibsyntax%2Fext%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibsyntax%2Fext%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fbase.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -442,6 +442,9 @@ fn initial_syntax_expander_table(ecfg: &expand::ExpansionConfig) -> SyntaxEnv {\n     syntax_expanders.insert(intern(\"include_bin\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_include_bin));\n+    syntax_expanders.insert(intern(\"include_bytes\"),\n+                            builtin_normal_expander(\n+                                    ext::source_util::expand_include_bytes));\n     syntax_expanders.insert(intern(\"module_path\"),\n                             builtin_normal_expander(\n                                     ext::source_util::expand_mod));"}, {"sha": "a49df457cb35ba21ad42758ed38c71419ac35f7c", "filename": "src/libsyntax/ext/source_util.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Flibsyntax%2Fext%2Fsource_util.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fsource_util.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -163,7 +163,13 @@ pub fn expand_include_str(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n \n pub fn expand_include_bin(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n                           -> Box<base::MacResult+'static> {\n-    let file = match get_single_str_from_tts(cx, sp, tts, \"include_bin!\") {\n+    cx.span_warn(sp, \"include_bin! is deprecated; use include_bytes! instead\");\n+    expand_include_bytes(cx, sp, tts)\n+}\n+\n+pub fn expand_include_bytes(cx: &mut ExtCtxt, sp: Span, tts: &[ast::TokenTree])\n+                            -> Box<base::MacResult+'static> {\n+    let file = match get_single_str_from_tts(cx, sp, tts, \"include_bytes!\") {\n         Some(f) => f,\n         None => return DummyResult::expr(sp)\n     };"}, {"sha": "9243f6966fc390e4b89ea5096c3dff3089f97daa", "filename": "src/test/bench/shootout-k-nucleotide-pipes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fbench%2Fshootout-k-nucleotide-pipes.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -148,7 +148,7 @@ fn main() {\n     use std::io::{stdio, MemReader, BufferedReader};\n \n     let rdr = if os::getenv(\"RUST_BENCH\").is_some() {\n-        let foo = include_bin!(\"shootout-k-nucleotide.data\");\n+        let foo = include_bytes!(\"shootout-k-nucleotide.data\");\n         box MemReader::new(foo.to_vec()) as Box<Reader>\n     } else {\n         box stdio::stdin() as Box<Reader>"}, {"sha": "8bd26a3a5e098bf604ec23c8fac567cb55210934", "filename": "src/test/compile-fail/macros-nonfatal-errors.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fmacros-nonfatal-errors.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -43,8 +43,8 @@ fn main() {\n \n     include_str!(invalid); //~ ERROR\n     include_str!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n-    include_bin!(invalid); //~ ERROR\n-    include_bin!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n+    include_bytes!(invalid); //~ ERROR\n+    include_bytes!(\"i'd be quite surprised if a file with this name existed\"); //~ ERROR\n \n     trace_macros!(invalid); //~ ERROR\n }"}, {"sha": "7cfebb31b22905ade5038f05bb624427cf5fed4c", "filename": "src/test/run-make/symbols-are-reasonable/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-make%2Fsymbols-are-reasonable%2Flib.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -9,7 +9,7 @@\n // except according to those terms.\n \n pub static X: &'static str = \"foobarbaz\";\n-pub static Y: &'static [u8] = include_bin!(\"lib.rs\");\n+pub static Y: &'static [u8] = include_bytes!(\"lib.rs\");\n \n trait Foo {}\n impl Foo for uint {}"}, {"sha": "f6708536a9d99280fd78ac85fe18b5fe5f60540f", "filename": "src/test/run-pass/syntax-extension-source-utils.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "raw_url": "https://github.com/rust-lang/rust/raw/85c1a4b1ba09dae786b3554e0ab596814efabe0e/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fsyntax-extension-source-utils.rs?ref=85c1a4b1ba09dae786b3554e0ab596814efabe0e", "patch": "@@ -39,7 +39,7 @@ pub fn main() {\n         .as_slice()\n         .starts_with(\"/* this is for \"));\n     assert!(\n-        include_bin!(\"syntax-extension-source-utils-files/includeme.fragment\")\n+        include_bytes!(\"syntax-extension-source-utils-files/includeme.fragment\")\n         [1] == (42 as u8)); // '*'\n     // The Windows tests are wrapped in an extra module for some reason\n     assert!((m1::m2::where_am_i().as_slice().ends_with(\"m1::m2\")));"}]}