{"sha": "ef5d5e78958f70be656b29a993e4658783919bcb", "node_id": "C_kwDOAAsO6NoAKGVmNWQ1ZTc4OTU4ZjcwYmU2NTZiMjlhOTkzZTQ2NTg3ODM5MTliY2I", "commit": {"author": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-28T09:27:21Z"}, "committer": {"name": "Ralf Jung", "email": "post@ralfj.de", "date": "2022-11-28T09:29:15Z"}, "message": "decreasw yield count a bit and explain reasoning a bit more", "tree": {"sha": "78771c84af9c9ead1c97bb0e177f0e167bb0681b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/78771c84af9c9ead1c97bb0e177f0e167bb0681b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ef5d5e78958f70be656b29a993e4658783919bcb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ef5d5e78958f70be656b29a993e4658783919bcb", "html_url": "https://github.com/rust-lang/rust/commit/ef5d5e78958f70be656b29a993e4658783919bcb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ef5d5e78958f70be656b29a993e4658783919bcb/comments", "author": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "committer": {"login": "RalfJung", "id": 330628, "node_id": "MDQ6VXNlcjMzMDYyOA==", "avatar_url": "https://avatars.githubusercontent.com/u/330628?v=4", "gravatar_id": "", "url": "https://api.github.com/users/RalfJung", "html_url": "https://github.com/RalfJung", "followers_url": "https://api.github.com/users/RalfJung/followers", "following_url": "https://api.github.com/users/RalfJung/following{/other_user}", "gists_url": "https://api.github.com/users/RalfJung/gists{/gist_id}", "starred_url": "https://api.github.com/users/RalfJung/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/RalfJung/subscriptions", "organizations_url": "https://api.github.com/users/RalfJung/orgs", "repos_url": "https://api.github.com/users/RalfJung/repos", "events_url": "https://api.github.com/users/RalfJung/events{/privacy}", "received_events_url": "https://api.github.com/users/RalfJung/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63eae2b30fcb249fd5cb412b5f23ee14a21dd192", "url": "https://api.github.com/repos/rust-lang/rust/commits/63eae2b30fcb249fd5cb412b5f23ee14a21dd192", "html_url": "https://github.com/rust-lang/rust/commit/63eae2b30fcb249fd5cb412b5f23ee14a21dd192"}], "stats": {"total": 6, "additions": 5, "deletions": 1}, "files": [{"sha": "b8578b1277f53ad94a7103e963556d900d2ba47c", "filename": "src/tools/miri/src/eval.rs", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/ef5d5e78958f70be656b29a993e4658783919bcb/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ef5d5e78958f70be656b29a993e4658783919bcb/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fmiri%2Fsrc%2Feval.rs?ref=ef5d5e78958f70be656b29a993e4658783919bcb", "patch": "@@ -27,7 +27,7 @@ use crate::*;\n /// When the main thread would exit, we will yield to any other thread that is ready to execute.\n /// But we must only do that a finite number of times, or a background thread running `loop {}`\n /// will hang the program.\n-const MAIN_THREAD_YIELDS_AT_SHUTDOWN: u32 = 1_000;\n+const MAIN_THREAD_YIELDS_AT_SHUTDOWN: u32 = 256;\n \n #[derive(Copy, Clone, Debug, PartialEq)]\n pub enum AlignmentCheck {\n@@ -208,8 +208,12 @@ impl MainThreadState {\n                         // Give background threads a chance to finish by yielding the main thread a\n                         // couple of times -- but only if we would also preempt threads randomly.\n                         if this.machine.preemption_rate > 0.0 {\n+                            // There is a non-zero chance they will yield back to us often enough to\n+                            // make Miri terminate eventually.\n                             *self = Yield { remaining: MAIN_THREAD_YIELDS_AT_SHUTDOWN };\n                         } else {\n+                            // The other threads did not get preempted, so no need to yield back to\n+                            // them.\n                             *self = Done;\n                         }\n                     }"}]}