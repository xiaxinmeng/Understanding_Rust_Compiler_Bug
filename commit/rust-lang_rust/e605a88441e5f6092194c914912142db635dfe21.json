{"sha": "e605a88441e5f6092194c914912142db635dfe21", "node_id": "C_kwDOAAsO6NoAKGU2MDVhODg0NDFlNWY2MDkyMTk0YzkxNDkxMjE0MmRiNjM1ZGZlMjE", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-24T02:08:52Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-06-24T02:08:52Z"}, "message": "Auto merge of #98438 - compiler-errors:rollup-fudubjn, r=compiler-errors\n\nRollup of 16 pull requests\n\nSuccessful merges:\n\n - #96173 (Fix documentation for  `with_capacity` and `reserve` families of methods)\n - #98184 (Give name if anonymous region appears in impl signature)\n - #98259 (Greatly improve error reporting for futures and generators in `note_obligation_cause_code`)\n - #98269 (Provide a `PathSegment.res` in more cases)\n - #98283 (Point at private fields in struct literal)\n - #98305 (prohibit_generics: don't alloc error string if no error emitted)\n - #98310 (rustdoc: optimize loading of source sidebar)\n - #98353 (Migrate two diagnostics from the `rustc_builtin_macros` crate)\n - #98355 (Update no_default_libraries handling for emscripten target)\n - #98364 (clarify Arc::clone overflow check comment)\n - #98365 (Address review comments from #98259)\n - #98388 (implement `iter_projections` function on `PlaceRef`)\n - #98390 (Fixes handling of keywords in rustdoc json output)\n - #98409 (triagebot.toml: Allow applying nominated labels)\n - #98410 (Update books)\n - #98422 (Update browser-ui-test version to 0.9.6)\n\nFailed merges:\n\nr? `@ghost`\n`@rustbot` modify labels: rollup", "tree": {"sha": "dd4616de14094ed377b51ab7bdd02bbc8b2fc3d2", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dd4616de14094ed377b51ab7bdd02bbc8b2fc3d2"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e605a88441e5f6092194c914912142db635dfe21", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e605a88441e5f6092194c914912142db635dfe21", "html_url": "https://github.com/rust-lang/rust/commit/e605a88441e5f6092194c914912142db635dfe21", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e605a88441e5f6092194c914912142db635dfe21/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "43347397f7c5ca9a670a3bb3890c7187e24a52ab", "url": "https://api.github.com/repos/rust-lang/rust/commits/43347397f7c5ca9a670a3bb3890c7187e24a52ab", "html_url": "https://github.com/rust-lang/rust/commit/43347397f7c5ca9a670a3bb3890c7187e24a52ab"}, {"sha": "c9b16749870a64b53b6760cd0938293696f139f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/c9b16749870a64b53b6760cd0938293696f139f8", "html_url": "https://github.com/rust-lang/rust/commit/c9b16749870a64b53b6760cd0938293696f139f8"}], "stats": {"total": 1555, "additions": 1119, "deletions": 436}, "files": [{"sha": "1677422122e2bcf26711c2c0b551fa131feb8fbc", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -3669,6 +3669,7 @@ dependencies = [\n  \"rustc_feature\",\n  \"rustc_lexer\",\n  \"rustc_lint_defs\",\n+ \"rustc_macros\",\n  \"rustc_parse\",\n  \"rustc_parse_format\",\n  \"rustc_session\","}, {"sha": "d359d7efb626801905958a91c983f866105a1fce", "filename": "compiler/rustc_borrowck/src/diagnostics/outlives_suggestion.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Foutlives_suggestion.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -62,7 +62,8 @@ impl OutlivesSuggestionBuilder {\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n-            | RegionNameSource::AnonRegionFromAsyncFn(..) => {\n+            | RegionNameSource::AnonRegionFromAsyncFn(..)\n+            | RegionNameSource::AnonRegionFromImplSignature(..) => {\n                 debug!(\"Region {:?} is NOT suggestable\", name);\n                 false\n             }"}, {"sha": "8f3699553d92cd9a6fd6dc4877efb5a7b9a44cc8", "filename": "compiler/rustc_borrowck/src/diagnostics/region_name.rs", "status": "modified", "additions": 54, "deletions": 4, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fregion_name.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -6,7 +6,7 @@ use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n use rustc_middle::ty::print::RegionHighlightMode;\n use rustc_middle::ty::subst::{GenericArgKind, SubstsRef};\n-use rustc_middle::ty::{self, RegionVid, Ty};\n+use rustc_middle::ty::{self, DefIdTree, RegionVid, Ty};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::{Span, DUMMY_SP};\n \n@@ -45,6 +45,8 @@ pub(crate) enum RegionNameSource {\n     AnonRegionFromYieldTy(Span, String),\n     /// An anonymous region from an async fn.\n     AnonRegionFromAsyncFn(Span),\n+    /// An anonymous region from an impl self type or trait\n+    AnonRegionFromImplSignature(Span, &'static str),\n }\n \n /// Describes what to highlight to explain to the user that we're giving an anonymous region a\n@@ -75,7 +77,8 @@ impl RegionName {\n             | RegionNameSource::AnonRegionFromUpvar(..)\n             | RegionNameSource::AnonRegionFromOutput(..)\n             | RegionNameSource::AnonRegionFromYieldTy(..)\n-            | RegionNameSource::AnonRegionFromAsyncFn(..) => false,\n+            | RegionNameSource::AnonRegionFromAsyncFn(..)\n+            | RegionNameSource::AnonRegionFromImplSignature(..) => false,\n         }\n     }\n \n@@ -87,7 +90,8 @@ impl RegionName {\n             | RegionNameSource::SynthesizedFreeEnvRegion(span, _)\n             | RegionNameSource::AnonRegionFromUpvar(span, _)\n             | RegionNameSource::AnonRegionFromYieldTy(span, _)\n-            | RegionNameSource::AnonRegionFromAsyncFn(span) => Some(span),\n+            | RegionNameSource::AnonRegionFromAsyncFn(span)\n+            | RegionNameSource::AnonRegionFromImplSignature(span, _) => Some(span),\n             RegionNameSource::AnonRegionFromArgument(ref highlight)\n             | RegionNameSource::AnonRegionFromOutput(ref highlight, _) => match *highlight {\n                 RegionNameHighlight::MatchedHirTy(span)\n@@ -166,6 +170,12 @@ impl RegionName {\n             RegionNameSource::AnonRegionFromYieldTy(span, type_name) => {\n                 diag.span_label(*span, format!(\"yield type is {type_name}\"));\n             }\n+            RegionNameSource::AnonRegionFromImplSignature(span, location) => {\n+                diag.span_label(\n+                    *span,\n+                    format!(\"lifetime `{self}` appears in the `impl`'s {location}\"),\n+                );\n+            }\n             RegionNameSource::Static => {}\n         }\n     }\n@@ -240,7 +250,8 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_arguments(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_upvars(fr))\n             .or_else(|| self.give_name_if_anonymous_region_appears_in_output(fr))\n-            .or_else(|| self.give_name_if_anonymous_region_appears_in_yield_ty(fr));\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_yield_ty(fr))\n+            .or_else(|| self.give_name_if_anonymous_region_appears_in_impl_signature(fr));\n \n         if let Some(ref value) = value {\n             self.region_names.try_borrow_mut().unwrap().insert(fr, value.clone());\n@@ -847,4 +858,43 @@ impl<'tcx> MirBorrowckCtxt<'_, 'tcx> {\n             source: RegionNameSource::AnonRegionFromYieldTy(yield_span, type_name),\n         })\n     }\n+\n+    fn give_name_if_anonymous_region_appears_in_impl_signature(\n+        &self,\n+        fr: RegionVid,\n+    ) -> Option<RegionName> {\n+        let ty::ReEarlyBound(region) = *self.to_error_region(fr)? else {\n+            return None;\n+        };\n+        if region.has_name() {\n+            return None;\n+        };\n+\n+        let tcx = self.infcx.tcx;\n+        let body_parent_did = tcx.opt_parent(self.mir_def_id().to_def_id())?;\n+        if tcx.parent(region.def_id) != body_parent_did\n+            || tcx.def_kind(body_parent_did) != DefKind::Impl\n+        {\n+            return None;\n+        }\n+\n+        let mut found = false;\n+        tcx.fold_regions(tcx.type_of(body_parent_did), &mut true, |r: ty::Region<'tcx>, _| {\n+            if *r == ty::ReEarlyBound(region) {\n+                found = true;\n+            }\n+            r\n+        });\n+\n+        Some(RegionName {\n+            name: self.synthesize_region_name(),\n+            source: RegionNameSource::AnonRegionFromImplSignature(\n+                tcx.def_span(region.def_id),\n+                // FIXME(compiler-errors): Does this ever actually show up\n+                // anywhere other than the self type? I couldn't create an\n+                // example of a `'_` in the impl's trait being referenceable.\n+                if found { \"self type\" } else { \"header\" },\n+            ),\n+        })\n+    }\n }"}, {"sha": "7dc947f7d9a143fb1e72d6cdf9ae97814c7908ca", "filename": "compiler/rustc_builtin_macros/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_builtin_macros%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_builtin_macros%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2FCargo.toml?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -16,6 +16,7 @@ rustc_errors = { path = \"../rustc_errors\" }\n rustc_feature = { path = \"../rustc_feature\" }\n rustc_lexer = { path = \"../rustc_lexer\" }\n rustc_lint_defs = { path = \"../rustc_lint_defs\" }\n+rustc_macros = { path = \"../rustc_macros\" }\n rustc_parse = { path = \"../rustc_parse\" }\n rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }"}, {"sha": "c75d83bd0a0e360a0611d156bb41a6e06ba6089d", "filename": "compiler/rustc_builtin_macros/src/cfg.rs", "status": "modified", "additions": 19, "deletions": 5, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Fcfg.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -8,6 +8,7 @@ use rustc_ast::tokenstream::TokenStream;\n use rustc_attr as attr;\n use rustc_errors::PResult;\n use rustc_expand::base::{self, *};\n+use rustc_macros::SessionDiagnostic;\n use rustc_span::Span;\n \n pub fn expand_cfg(\n@@ -34,21 +35,34 @@ pub fn expand_cfg(\n     }\n }\n \n-fn parse_cfg<'a>(cx: &mut ExtCtxt<'a>, sp: Span, tts: TokenStream) -> PResult<'a, ast::MetaItem> {\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"builtin-macros-requires-cfg-pattern\")]\n+struct RequiresCfgPattern {\n+    #[primary_span]\n+    #[label]\n+    span: Span,\n+}\n+\n+#[derive(SessionDiagnostic)]\n+#[error(slug = \"builtin-macros-expected-one-cfg-pattern\")]\n+struct OneCfgPattern {\n+    #[primary_span]\n+    span: Span,\n+}\n+\n+fn parse_cfg<'a>(cx: &mut ExtCtxt<'a>, span: Span, tts: TokenStream) -> PResult<'a, ast::MetaItem> {\n     let mut p = cx.new_parser_from_tts(tts);\n \n     if p.token == token::Eof {\n-        let mut err = cx.struct_span_err(sp, \"macro requires a cfg-pattern as an argument\");\n-        err.span_label(sp, \"cfg-pattern required\");\n-        return Err(err);\n+        return Err(cx.create_err(RequiresCfgPattern { span }));\n     }\n \n     let cfg = p.parse_meta_item()?;\n \n     let _ = p.eat(&token::Comma);\n \n     if !p.eat(&token::Eof) {\n-        return Err(cx.struct_span_err(sp, \"expected 1 cfg-pattern\"));\n+        return Err(cx.create_err(OneCfgPattern { span }));\n     }\n \n     Ok(cfg)"}, {"sha": "b5b63942e2c6ecac60ff6e0d7b4e91ba965ccb2d", "filename": "compiler/rustc_codegen_ssa/src/back/linker.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Flinker.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1140,7 +1140,7 @@ impl<'a> Linker for EmLinker<'a> {\n     fn no_crt_objects(&mut self) {}\n \n     fn no_default_libraries(&mut self) {\n-        self.cmd.args(&[\"-s\", \"DEFAULT_LIBRARY_FUNCS_TO_INCLUDE=[]\"]);\n+        self.cmd.arg(\"-nodefaultlibs\");\n     }\n \n     fn export_symbols(&mut self, _tmpdir: &Path, _crate_type: CrateType, symbols: &[String]) {"}, {"sha": "1d3e33c81851f5cb84b1132f51fdda2a535f81ad", "filename": "compiler/rustc_error_messages/locales/en-US/builtin_macros.ftl", "status": "added", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Flocales%2Fen-US%2Fbuiltin_macros.ftl?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,5 @@\n+builtin-macros-requires-cfg-pattern =\n+    macro requires a cfg-pattern as an argument\n+    .label = cfg-pattern required\n+\n+builtin-macros-expected-one-cfg-pattern = expected 1 cfg-pattern"}, {"sha": "7211c05432698207809919d940e152cddc9c6dac", "filename": "compiler/rustc_error_messages/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_error_messages%2Fsrc%2Flib.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -33,6 +33,7 @@ pub use unic_langid::{langid, LanguageIdentifier};\n fluent_messages! {\n     parser => \"../locales/en-US/parser.ftl\",\n     typeck => \"../locales/en-US/typeck.ftl\",\n+    builtin_macros => \"../locales/en-US/builtin_macros.ftl\",\n }\n \n pub use fluent_generated::{self as fluent, DEFAULT_LOCALE_RESOURCES};"}, {"sha": "245719bff120216eae37a08b0a1ee051375a8e85", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 12, "deletions": 1, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -14,7 +14,7 @@ use rustc_errors::{Applicability, DiagnosticBuilder, ErrorGuaranteed, MultiSpan,\n use rustc_lint_defs::builtin::PROC_MACRO_BACK_COMPAT;\n use rustc_lint_defs::BuiltinLintDiagnostics;\n use rustc_parse::{self, parser, MACRO_ARGUMENTS};\n-use rustc_session::{parse::ParseSess, Limit, Session};\n+use rustc_session::{parse::ParseSess, Limit, Session, SessionDiagnostic};\n use rustc_span::def_id::{CrateNum, DefId, LocalDefId};\n use rustc_span::edition::Edition;\n use rustc_span::hygiene::{AstPass, ExpnData, ExpnKind, LocalExpnId};\n@@ -1085,6 +1085,17 @@ impl<'a> ExtCtxt<'a> {\n         self.sess.parse_sess.span_diagnostic.struct_span_err(sp, msg)\n     }\n \n+    pub fn create_err(\n+        &self,\n+        err: impl SessionDiagnostic<'a>,\n+    ) -> DiagnosticBuilder<'a, ErrorGuaranteed> {\n+        self.sess.create_err(err)\n+    }\n+\n+    pub fn emit_err(&self, err: impl SessionDiagnostic<'a>) -> ErrorGuaranteed {\n+        self.sess.emit_err(err)\n+    }\n+\n     /// Emit `msg` attached to `sp`, without immediately stopping\n     /// compilation.\n     ///"}, {"sha": "1cd19c7eaab35c61cd6eb12b7ff6681ea916ccee", "filename": "compiler/rustc_lint_defs/src/lib.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_lint_defs%2Fsrc%2Flib.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -26,6 +26,9 @@ macro_rules! pluralize {\n     (\"is\", $x:expr) => {\n         if $x == 1 { \"is\" } else { \"are\" }\n     };\n+    (\"was\", $x:expr) => {\n+        if $x == 1 { \"was\" } else { \"were\" }\n+    };\n     (\"this\", $x:expr) => {\n         if $x == 1 { \"this\" } else { \"these\" }\n     };"}, {"sha": "3f5b16d5ea5f7a9d7014d17075e4c109b29d3fce", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -2145,10 +2145,7 @@ impl<'tcx> Place<'tcx> {\n     pub fn iter_projections(\n         self,\n     ) -> impl Iterator<Item = (PlaceRef<'tcx>, PlaceElem<'tcx>)> + DoubleEndedIterator {\n-        self.projection.iter().enumerate().map(move |(i, proj)| {\n-            let base = PlaceRef { local: self.local, projection: &self.projection[..i] };\n-            (base, proj)\n-        })\n+        self.as_ref().iter_projections()\n     }\n \n     /// Generates a new place by appending `more_projections` to the existing ones\n@@ -2208,6 +2205,23 @@ impl<'tcx> PlaceRef<'tcx> {\n             None\n         }\n     }\n+\n+    /// Iterate over the projections in evaluation order, i.e., the first element is the base with\n+    /// its projection and then subsequently more projections are added.\n+    /// As a concrete example, given the place a.b.c, this would yield:\n+    /// - (a, .b)\n+    /// - (a.b, .c)\n+    ///\n+    /// Given a place without projections, the iterator is empty.\n+    #[inline]\n+    pub fn iter_projections(\n+        self,\n+    ) -> impl Iterator<Item = (PlaceRef<'tcx>, PlaceElem<'tcx>)> + DoubleEndedIterator {\n+        self.projection.iter().enumerate().map(move |(i, proj)| {\n+            let base = PlaceRef { local: self.local, projection: &self.projection[..i] };\n+            (base, *proj)\n+        })\n+    }\n }\n \n impl Debug for Place<'_> {"}, {"sha": "c3df9a66fe7186881df6ab4c29b8501ef23e98ed", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 15, "deletions": 1, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -74,7 +74,7 @@ use std::mem;\n use std::ops::{Bound, Deref};\n use std::sync::Arc;\n \n-use super::RvalueScopes;\n+use super::{ImplPolarity, RvalueScopes};\n \n pub trait OnDiskCache<'tcx>: rustc_data_structures::sync::Sync {\n     /// Creates a new `OnDiskCache` instance from the serialized data in `data`.\n@@ -2230,6 +2230,20 @@ impl<'tcx> TyCtxt<'tcx> {\n         })\n     }\n \n+    /// Given a `ty`, return whether it's an `impl Future<...>`.\n+    pub fn ty_is_opaque_future(self, ty: Ty<'_>) -> bool {\n+        let ty::Opaque(def_id, _) = ty.kind() else { return false };\n+        let future_trait = self.lang_items().future_trait().unwrap();\n+\n+        self.explicit_item_bounds(def_id).iter().any(|(predicate, _)| {\n+            let ty::PredicateKind::Trait(trait_predicate) = predicate.kind().skip_binder() else {\n+                return false;\n+            };\n+            trait_predicate.trait_ref.def_id == future_trait\n+                && trait_predicate.polarity == ImplPolarity::Positive\n+        })\n+    }\n+\n     /// Computes the def-ids of the transitive supertraits of `trait_def_id`. This (intentionally)\n     /// does not compute the full elaborated super-predicates but just the set of def-ids. It is used\n     /// to identify which traits may define a given associated type to help avoid cycle errors."}, {"sha": "0cc6d05d1d086ac072ea3c175978268e9cd36c51", "filename": "compiler/rustc_resolve/src/ident.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_resolve%2Fsrc%2Fident.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fident.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1502,6 +1502,7 @@ impl<'a> Resolver<'a> {\n                         return PathResult::NonModule(PartialRes::new(Res::Err));\n                     } else if opt_ns.is_some() && (is_last || maybe_assoc) {\n                         self.lint_if_path_starts_with_module(finalize, path, second_binding);\n+                        record_segment_res(self, res);\n                         return PathResult::NonModule(PartialRes::with_unresolved_segments(\n                             res,\n                             path.len() - i - 1,"}, {"sha": "6a1a5e7a1d7127c1f76920e8679cf962abd96a57", "filename": "compiler/rustc_target/src/spec/wasm32_unknown_emscripten.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fspec%2Fwasm32_unknown_emscripten.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -28,6 +28,7 @@ pub fn target() -> Target {\n         linker: None,\n         is_like_emscripten: true,\n         panic_strategy: PanicStrategy::Unwind,\n+        no_default_libraries: false,\n         post_link_args,\n         families: cvs![\"unix\", \"wasm\"],\n         ..options"}, {"sha": "fbe66d7dcdd2bd98e0fb4589383139017178fdba", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 75, "deletions": 12, "changes": 87, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -2386,24 +2386,87 @@ impl<'a, 'tcx> InferCtxtExt<'tcx> for InferCtxt<'a, 'tcx> {\n                     {\n                         let parent_trait_ref =\n                             self.resolve_vars_if_possible(data.parent_trait_pred);\n-                        let ty = parent_trait_ref.skip_binder().self_ty();\n-                        matches!(ty.kind(), ty::Generator(..))\n-                            || matches!(ty.kind(), ty::Closure(..))\n+                        let nested_ty = parent_trait_ref.skip_binder().self_ty();\n+                        matches!(nested_ty.kind(), ty::Generator(..))\n+                            || matches!(nested_ty.kind(), ty::Closure(..))\n                     } else {\n                         false\n                     }\n                 };\n \n+                let from_generator = tcx.lang_items().from_generator_fn().unwrap();\n+\n                 // Don't print the tuple of capture types\n-                if !is_upvar_tys_infer_tuple {\n-                    let msg = format!(\"required because it appears within the type `{}`\", ty);\n-                    match ty.kind() {\n-                        ty::Adt(def, _) => match self.tcx.opt_item_ident(def.did()) {\n-                            Some(ident) => err.span_note(ident.span, &msg),\n-                            None => err.note(&msg),\n-                        },\n-                        _ => err.note(&msg),\n-                    };\n+                'print: {\n+                    if !is_upvar_tys_infer_tuple {\n+                        let msg = format!(\"required because it appears within the type `{}`\", ty);\n+                        match ty.kind() {\n+                            ty::Adt(def, _) => {\n+                                // `gen_future` is used in all async functions; it doesn't add any additional info.\n+                                if self.tcx.is_diagnostic_item(sym::gen_future, def.did()) {\n+                                    break 'print;\n+                                }\n+                                match self.tcx.opt_item_ident(def.did()) {\n+                                    Some(ident) => err.span_note(ident.span, &msg),\n+                                    None => err.note(&msg),\n+                                }\n+                            }\n+                            ty::Opaque(def_id, _) => {\n+                                // Avoid printing the future from `core::future::from_generator`, it's not helpful\n+                                if tcx.parent(*def_id) == from_generator {\n+                                    break 'print;\n+                                }\n+\n+                                // If the previous type is `from_generator`, this is the future generated by the body of an async function.\n+                                // Avoid printing it twice (it was already printed in the `ty::Generator` arm below).\n+                                let is_future = tcx.ty_is_opaque_future(ty);\n+                                debug!(\n+                                    ?obligated_types,\n+                                    ?is_future,\n+                                    \"note_obligation_cause_code: check for async fn\"\n+                                );\n+                                if is_future\n+                                    && obligated_types.last().map_or(false, |ty| match ty.kind() {\n+                                        ty::Opaque(last_def_id, _) => {\n+                                            tcx.parent(*last_def_id) == from_generator\n+                                        }\n+                                        _ => false,\n+                                    })\n+                                {\n+                                    break 'print;\n+                                }\n+                                err.span_note(self.tcx.def_span(def_id), &msg)\n+                            }\n+                            ty::GeneratorWitness(bound_tys) => {\n+                                use std::fmt::Write;\n+\n+                                // FIXME: this is kind of an unusual format for rustc, can we make it more clear?\n+                                // Maybe we should just remove this note altogether?\n+                                // FIXME: only print types which don't meet the trait requirement\n+                                let mut msg =\n+                                    \"required because it captures the following types: \".to_owned();\n+                                for ty in bound_tys.skip_binder() {\n+                                    write!(msg, \"`{}`, \", ty).unwrap();\n+                                }\n+                                err.note(msg.trim_end_matches(\", \"))\n+                            }\n+                            ty::Generator(def_id, _, _) => {\n+                                let sp = self.tcx.def_span(def_id);\n+\n+                                // Special-case this to say \"async block\" instead of `[static generator]`.\n+                                let kind = tcx.generator_kind(def_id).unwrap();\n+                                err.span_note(\n+                                    sp,\n+                                    &format!(\"required because it's used within this {}\", kind),\n+                                )\n+                            }\n+                            ty::Closure(def_id, _) => err.span_note(\n+                                self.tcx.def_span(def_id),\n+                                &format!(\"required because it's used within this closure\"),\n+                            ),\n+                            _ => err.note(&msg),\n+                        };\n+                    }\n                 }\n \n                 obligated_types.push(ty);"}, {"sha": "eec3b24aec260b18caea3ab49848b0808bf42e60", "filename": "compiler/rustc_typeck/src/astconv/mod.rs", "status": "modified", "additions": 33, "deletions": 32, "changes": 65, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fastconv%2Fmod.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -2111,14 +2111,24 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n         extend: impl Fn(&mut DiagnosticBuilder<'tcx, ErrorGuaranteed>),\n     ) -> bool {\n         let args = segments.clone().flat_map(|segment| segment.args().args);\n-        let types_and_spans: Vec<_> = segments\n-            .clone()\n-            .flat_map(|segment| {\n-                segment.res.and_then(|res| {\n-                    if segment.args().args.is_empty() {\n-                        None\n-                    } else {\n-                        Some((\n+\n+        let (lt, ty, ct, inf) =\n+            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n+                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n+                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n+                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n+                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n+            });\n+        let mut emitted = false;\n+        if lt || ty || ct || inf {\n+            let types_and_spans: Vec<_> = segments\n+                .clone()\n+                .flat_map(|segment| {\n+                    segment.res.and_then(|res| {\n+                        if segment.args().args.is_empty() {\n+                            None\n+                        } else {\n+                            Some((\n                             match res {\n                                 Res::PrimTy(ty) => format!(\"{} `{}`\", res.descr(), ty.name()),\n                                 Res::Def(_, def_id)\n@@ -2130,32 +2140,23 @@ impl<'o, 'tcx> dyn AstConv<'tcx> + 'o {\n                             },\n                             segment.ident.span,\n                         ))\n-                    }\n+                        }\n+                    })\n                 })\n-            })\n-            .collect();\n-        let this_type = match &types_and_spans[..] {\n-            [.., _, (last, _)] => format!(\n-                \"{} and {last}\",\n-                types_and_spans[..types_and_spans.len() - 1]\n-                    .iter()\n-                    .map(|(x, _)| x.as_str())\n-                    .intersperse(&\", \")\n-                    .collect::<String>()\n-            ),\n-            [(only, _)] => only.to_string(),\n-            [] => \"this type\".to_string(),\n-        };\n+                .collect();\n+            let this_type = match &types_and_spans[..] {\n+                [.., _, (last, _)] => format!(\n+                    \"{} and {last}\",\n+                    types_and_spans[..types_and_spans.len() - 1]\n+                        .iter()\n+                        .map(|(x, _)| x.as_str())\n+                        .intersperse(&\", \")\n+                        .collect::<String>()\n+                ),\n+                [(only, _)] => only.to_string(),\n+                [] => \"this type\".to_string(),\n+            };\n \n-        let (lt, ty, ct, inf) =\n-            args.clone().fold((false, false, false, false), |(lt, ty, ct, inf), arg| match arg {\n-                hir::GenericArg::Lifetime(_) => (true, ty, ct, inf),\n-                hir::GenericArg::Type(_) => (lt, true, ct, inf),\n-                hir::GenericArg::Const(_) => (lt, ty, true, inf),\n-                hir::GenericArg::Infer(_) => (lt, ty, ct, true),\n-            });\n-        let mut emitted = false;\n-        if lt || ty || ct || inf {\n             let arg_spans: Vec<Span> = args.map(|arg| arg.span()).collect();\n \n             let mut kinds = Vec::with_capacity(4);"}, {"sha": "b4476d5c59b2bb0f0baee7eb9fb1aabdcfb1b425", "filename": "compiler/rustc_typeck/src/check/expr.rs", "status": "modified", "additions": 59, "deletions": 13, "changes": 72, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_typeck%2Fsrc%2Fcheck%2Fexpr.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -26,10 +26,10 @@ use crate::errors::{AddressOfTemporaryTaken, ReturnStmtOutsideOfFnBody, StructEx\n use rustc_ast as ast;\n use rustc_data_structures::fx::FxHashMap;\n use rustc_data_structures::stack::ensure_sufficient_stack;\n-use rustc_errors::Diagnostic;\n-use rustc_errors::EmissionGuarantee;\n-use rustc_errors::ErrorGuaranteed;\n-use rustc_errors::{pluralize, struct_span_err, Applicability, DiagnosticBuilder, DiagnosticId};\n+use rustc_errors::{\n+    pluralize, struct_span_err, Applicability, Diagnostic, DiagnosticBuilder, DiagnosticId,\n+    EmissionGuarantee, ErrorGuaranteed,\n+};\n use rustc_hir as hir;\n use rustc_hir::def::{CtorKind, DefKind, Res};\n use rustc_hir::def_id::DefId;\n@@ -1701,12 +1701,17 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n             };\n             self.typeck_results.borrow_mut().fru_field_types_mut().insert(expr_id, fru_tys);\n         } else if adt_kind != AdtKind::Union && !remaining_fields.is_empty() {\n-            let inaccessible_remaining_fields = remaining_fields.iter().any(|(_, (_, field))| {\n-                !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n-            });\n+            debug!(?remaining_fields);\n+            let private_fields: Vec<&ty::FieldDef> = variant\n+                .fields\n+                .iter()\n+                .filter(|field| {\n+                    !field.vis.is_accessible_from(tcx.parent_module(expr_id).to_def_id(), tcx)\n+                })\n+                .collect();\n \n-            if inaccessible_remaining_fields {\n-                self.report_inaccessible_fields(adt_ty, span);\n+            if !private_fields.is_empty() {\n+                self.report_private_fields(adt_ty, span, private_fields, ast_fields);\n             } else {\n                 self.report_missing_fields(\n                     adt_ty,\n@@ -1830,21 +1835,62 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n     /// Report an error for a struct field expression when there are invisible fields.\n     ///\n     /// ```text\n-    /// error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    /// error: cannot construct `Foo` with struct literal syntax due to private fields\n     ///  --> src/main.rs:8:5\n     ///   |\n     /// 8 |     foo::Foo {};\n     ///   |     ^^^^^^^^\n     ///\n     /// error: aborting due to previous error\n     /// ```\n-    fn report_inaccessible_fields(&self, adt_ty: Ty<'tcx>, span: Span) {\n-        self.tcx.sess.span_err(\n+    fn report_private_fields(\n+        &self,\n+        adt_ty: Ty<'tcx>,\n+        span: Span,\n+        private_fields: Vec<&ty::FieldDef>,\n+        used_fields: &'tcx [hir::ExprField<'tcx>],\n+    ) {\n+        let mut err = self.tcx.sess.struct_span_err(\n             span,\n             &format!(\n-                \"cannot construct `{adt_ty}` with struct literal syntax due to inaccessible fields\",\n+                \"cannot construct `{adt_ty}` with struct literal syntax due to private fields\",\n             ),\n         );\n+        let (used_private_fields, remaining_private_fields): (\n+            Vec<(Symbol, Span, bool)>,\n+            Vec<(Symbol, Span, bool)>,\n+        ) = private_fields\n+            .iter()\n+            .map(|field| {\n+                match used_fields.iter().find(|used_field| field.name == used_field.ident.name) {\n+                    Some(used_field) => (field.name, used_field.span, true),\n+                    None => (field.name, self.tcx.def_span(field.did), false),\n+                }\n+            })\n+            .partition(|field| field.2);\n+        err.span_labels(used_private_fields.iter().map(|(_, span, _)| *span), \"private field\");\n+        if !remaining_private_fields.is_empty() {\n+            let remaining_private_fields_len = remaining_private_fields.len();\n+            let names = match &remaining_private_fields\n+                .iter()\n+                .map(|(name, _, _)| name.to_string())\n+                .collect::<Vec<_>>()[..]\n+            {\n+                _ if remaining_private_fields_len > 6 => String::new(),\n+                [name] => format!(\"`{name}` \"),\n+                [names @ .., last] => {\n+                    let names = names.iter().map(|name| format!(\"`{name}`\")).collect::<Vec<_>>();\n+                    format!(\"{} and `{last}` \", names.join(\", \"))\n+                }\n+                [] => unreachable!(),\n+            };\n+            err.note(format!(\n+                \"... and other private field{s} {names}that {were} not provided\",\n+                s = pluralize!(remaining_private_fields_len),\n+                were = pluralize!(\"was\", remaining_private_fields_len),\n+            ));\n+        }\n+        err.emit();\n     }\n \n     fn report_unknown_field("}, {"sha": "197e7aaaccf3d34d59d180582ee54426ef6c0e1b", "filename": "library/alloc/src/collections/binary_heap.rs", "status": "modified", "additions": 29, "deletions": 22, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fbinary_heap.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -374,10 +374,11 @@ impl<T: Ord> BinaryHeap<T> {\n         BinaryHeap { data: vec![] }\n     }\n \n-    /// Creates an empty `BinaryHeap` with a specific capacity.\n-    /// This preallocates enough memory for `capacity` elements,\n-    /// so that the `BinaryHeap` does not have to be reallocated\n-    /// until it contains at least that many values.\n+    /// Creates an empty `BinaryHeap` with at least the specified capacity.\n+    ///\n+    /// The binary heap will be able to hold at least `capacity` elements without\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the binary heap will not allocate.\n     ///\n     /// # Examples\n     ///\n@@ -906,16 +907,18 @@ impl<T> BinaryHeap<T> {\n         self.data.capacity()\n     }\n \n-    /// Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n-    /// given `BinaryHeap`. Does nothing if the capacity is already sufficient.\n+    /// Reserves the minimum capacity for at least `additional` elements more than\n+    /// the current length. Unlike [`reserve`], this will not\n+    /// deliberately over-allocate to speculatively avoid frequent allocations.\n+    /// After calling `reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional`. Does nothing if the capacity is already\n+    /// sufficient.\n     ///\n-    /// Note that the allocator may give the collection more space than it requests. Therefore\n-    /// capacity can not be relied upon to be precisely minimal. Prefer [`reserve`] if future\n-    /// insertions are expected.\n+    /// [`reserve`]: BinaryHeap::reserve\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the new capacity overflows `usize`.\n+    /// Panics if the new capacity overflows [`usize`].\n     ///\n     /// # Examples\n     ///\n@@ -935,12 +938,15 @@ impl<T> BinaryHeap<T> {\n         self.data.reserve_exact(additional);\n     }\n \n-    /// Reserves capacity for at least `additional` more elements to be inserted in the\n-    /// `BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.\n+    /// Reserves capacity for at least `additional` elements more than the\n+    /// current length. The allocator may reserve more space to speculatively\n+    /// avoid frequent allocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the new capacity overflows `usize`.\n+    /// Panics if the new capacity overflows [`usize`].\n     ///\n     /// # Examples\n     ///\n@@ -958,10 +964,11 @@ impl<T> BinaryHeap<T> {\n         self.data.reserve(additional);\n     }\n \n-    /// Tries to reserve the minimum capacity for exactly `additional`\n-    /// elements to be inserted in the given `BinaryHeap<T>`. After calling\n-    /// `try_reserve_exact`, capacity will be greater than or equal to\n-    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Tries to reserve the minimum capacity for at least `additional` elements\n+    /// more than the current length. Unlike [`try_reserve`], this will not\n+    /// deliberately over-allocate to speculatively avoid frequent allocations.\n+    /// After calling `try_reserve_exact`, capacity will be greater than or\n+    /// equal to `self.len() + additional` if it returns `Ok(())`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it\n@@ -999,11 +1006,11 @@ impl<T> BinaryHeap<T> {\n         self.data.try_reserve_exact(additional)\n     }\n \n-    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `BinaryHeap<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `try_reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// Tries to reserve capacity for at least `additional` elements more than the\n+    /// current length. The allocator may reserve more space to speculatively\n+    /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional` if it returns\n+    /// `Ok(())`. Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///"}, {"sha": "4d895d83745b219951368e91196794cc97cdd249", "filename": "library/alloc/src/collections/vec_deque/mod.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fcollections%2Fvec_deque%2Fmod.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -688,7 +688,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         self.cap() - 1\n     }\n \n-    /// Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\n+    /// Reserves the minimum capacity for at least `additional` more elements to be inserted in the\n     /// given deque. Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it requests. Therefore\n@@ -716,7 +716,7 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Reserves capacity for at least `additional` more elements to be inserted in the given\n-    /// deque. The collection may reserve more space to avoid frequent reallocations.\n+    /// deque. The collection may reserve more space to speculatively avoid frequent reallocations.\n     ///\n     /// # Panics\n     ///\n@@ -748,10 +748,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n         }\n     }\n \n-    /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n+    /// Tries to reserve the minimum capacity for at least `additional` more elements to\n     /// be inserted in the given deque. After calling `try_reserve_exact`,\n-    /// capacity will be greater than or equal to `self.len() + additional`.\n-    /// Does nothing if the capacity is already sufficient.\n+    /// capacity will be greater than or equal to `self.len() + additional` if\n+    /// it returns `Ok(())`. Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n@@ -791,10 +791,10 @@ impl<T, A: Allocator> VecDeque<T, A> {\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given deque. The collection may reserve more space to avoid\n+    /// in the given deque. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// greater than or equal to `self.len() + additional` if it returns\n+    /// `Ok(())`. Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///"}, {"sha": "8883880726594f29fbbfc9296642001a90971db1", "filename": "library/alloc/src/string.rs", "status": "modified", "additions": 35, "deletions": 35, "changes": 70, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fstring.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -455,13 +455,13 @@ impl String {\n         String { vec: Vec::new() }\n     }\n \n-    /// Creates a new empty `String` with a particular capacity.\n+    /// Creates a new empty `String` with at least the specified capacity.\n     ///\n     /// `String`s have an internal buffer to hold their data. The capacity is\n     /// the length of that buffer, and can be queried with the [`capacity`]\n     /// method. This method creates an empty `String`, but one with an initial\n-    /// buffer that can hold `capacity` bytes. This is useful when you may be\n-    /// appending a bunch of data to the `String`, reducing the number of\n+    /// buffer that can hold at least `capacity` bytes. This is useful when you\n+    /// may be appending a bunch of data to the `String`, reducing the number of\n     /// reallocations it needs to do.\n     ///\n     /// [`capacity`]: String::capacity\n@@ -979,21 +979,16 @@ impl String {\n         self.vec.capacity()\n     }\n \n-    /// Ensures that this `String`'s capacity is at least `additional` bytes\n-    /// larger than its length.\n-    ///\n-    /// The capacity may be increased by more than `additional` bytes if it\n-    /// chooses, to prevent frequent reallocations.\n-    ///\n-    /// If you do not want this \"at least\" behavior, see the [`reserve_exact`]\n-    /// method.\n+    /// Reserves capacity for at least `additional` bytes more than the\n+    /// current length. The allocator may reserve more space to speculatively\n+    /// avoid frequent allocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n     /// Panics if the new capacity overflows [`usize`].\n     ///\n-    /// [`reserve_exact`]: String::reserve_exact\n-    ///\n     /// # Examples\n     ///\n     /// Basic usage:\n@@ -1013,15 +1008,16 @@ impl String {\n     /// s.push('a');\n     /// s.push('b');\n     ///\n-    /// // s now has a length of 2 and a capacity of 10\n+    /// // s now has a length of 2 and a capacity of at least 10\n+    /// let capacity = s.capacity();\n     /// assert_eq!(2, s.len());\n-    /// assert_eq!(10, s.capacity());\n+    /// assert!(capacity >= 10);\n     ///\n-    /// // Since we already have an extra 8 capacity, calling this...\n+    /// // Since we already have at least an extra 8 capacity, calling this...\n     /// s.reserve(8);\n     ///\n     /// // ... doesn't actually increase.\n-    /// assert_eq!(10, s.capacity());\n+    /// assert_eq!(capacity, s.capacity());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n@@ -1030,17 +1026,18 @@ impl String {\n         self.vec.reserve(additional)\n     }\n \n-    /// Ensures that this `String`'s capacity is `additional` bytes\n-    /// larger than its length.\n-    ///\n-    /// Consider using the [`reserve`] method unless you absolutely know\n-    /// better than the allocator.\n+    /// Reserves the minimum capacity for at least `additional` bytes more than\n+    /// the current length. Unlike [`reserve`], this will not\n+    /// deliberately over-allocate to speculatively avoid frequent allocations.\n+    /// After calling `reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional`. Does nothing if the capacity is already\n+    /// sufficient.\n     ///\n     /// [`reserve`]: String::reserve\n     ///\n     /// # Panics\n     ///\n-    /// Panics if the new capacity overflows `usize`.\n+    /// Panics if the new capacity overflows [`usize`].\n     ///\n     /// # Examples\n     ///\n@@ -1061,15 +1058,16 @@ impl String {\n     /// s.push('a');\n     /// s.push('b');\n     ///\n-    /// // s now has a length of 2 and a capacity of 10\n+    /// // s now has a length of 2 and a capacity of at least 10\n+    /// let capacity = s.capacity();\n     /// assert_eq!(2, s.len());\n-    /// assert_eq!(10, s.capacity());\n+    /// assert!(capacity >= 10);\n     ///\n-    /// // Since we already have an extra 8 capacity, calling this...\n+    /// // Since we already have at least an extra 8 capacity, calling this...\n     /// s.reserve_exact(8);\n     ///\n     /// // ... doesn't actually increase.\n-    /// assert_eq!(10, s.capacity());\n+    /// assert_eq!(capacity, s.capacity());\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n@@ -1078,11 +1076,11 @@ impl String {\n         self.vec.reserve_exact(additional)\n     }\n \n-    /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `String`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// Tries to reserve capacity for at least `additional` bytes more than the\n+    /// current length. The allocator may reserve more space to speculatively\n+    /// avoid frequent allocations. After calling `try_reserve`, capacity will be\n+    /// greater than or equal to `self.len() + additional` if it returns\n+    /// `Ok(())`. Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///\n@@ -1112,9 +1110,11 @@ impl String {\n         self.vec.try_reserve(additional)\n     }\n \n-    /// Tries to reserve the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `String`. After calling `try_reserve_exact`,\n-    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Tries to reserve the minimum capacity for at least `additional` bytes\n+    /// more than the current length. Unlike [`try_reserve`], this will not\n+    /// deliberately over-allocate to speculatively avoid frequent allocations.\n+    /// After calling `try_reserve_exact`, capacity will be greater than or\n+    /// equal to `self.len() + additional` if it returns `Ok(())`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it"}, {"sha": "24e849aab4cce442da669ea7e23d4d651f4c5bc3", "filename": "library/alloc/src/sync.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fsync.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fsync.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fsync.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1355,15 +1355,16 @@ impl<T: ?Sized> Clone for Arc<T> {\n         // [1]: (www.boost.org/doc/libs/1_55_0/doc/html/atomic/usage_examples.html)\n         let old_size = self.inner().strong.fetch_add(1, Relaxed);\n \n-        // However we need to guard against massive refcounts in case someone\n-        // is `mem::forget`ing Arcs. If we don't do this the count can overflow\n-        // and users will use-after free. We racily saturate to `isize::MAX` on\n-        // the assumption that there aren't ~2 billion threads incrementing\n-        // the reference count at once. This branch will never be taken in\n-        // any realistic program.\n+        // However we need to guard against massive refcounts in case someone is `mem::forget`ing\n+        // Arcs. If we don't do this the count can overflow and users will use-after free. This\n+        // branch will never be taken in any realistic program. We abort because such a program is\n+        // incredibly degenerate, and we don't care to support it.\n         //\n-        // We abort because such a program is incredibly degenerate, and we\n-        // don't care to support it.\n+        // This check is not 100% water-proof: we error when the refcount grows beyond `isize::MAX`.\n+        // But we do that check *after* having done the increment, so there is a chance here that\n+        // the worst already happened and we actually do overflow the `usize` counter. However, that\n+        // requires the counter to grow from `isize::MAX` to `usize::MAX` between the increment\n+        // above and the `abort` below, which seems exceedingly unlikely.\n         if old_size > MAX_REFCOUNT {\n             abort();\n         }"}, {"sha": "e25f98d8aa69570079f4c5eed15c9f6a01c4e7d1", "filename": "library/alloc/src/vec/mod.rs", "status": "modified", "additions": 57, "deletions": 28, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Fsrc%2Fvec%2Fmod.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -425,17 +425,25 @@ impl<T> Vec<T> {\n         Vec { buf: RawVec::NEW, len: 0 }\n     }\n \n-    /// Constructs a new, empty `Vec<T>` with the specified capacity.\n+    /// Constructs a new, empty `Vec<T>` with at least the specified capacity.\n     ///\n-    /// The vector will be able to hold exactly `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the vector will not allocate.\n+    /// The vector will be able to hold at least `capacity` elements without\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n     ///\n     /// It is important to note that although the returned vector has the\n-    /// *capacity* specified, the vector will have a zero *length*. For an\n-    /// explanation of the difference between length and capacity, see\n+    /// minimum *capacity* specified, the vector will have a zero *length*. For\n+    /// an explanation of the difference between length and capacity, see\n     /// *[Capacity and reallocation]*.\n     ///\n+    /// If it is imporant to know the exact allocated capacity of a `Vec`,\n+    /// always use the [`capacity`] method after construction.\n+    ///\n+    /// For `Vec<T>` where `T` is a zero-sized type, there will be no allocation\n+    /// and the capacity will always be `usize::MAX`.\n+    ///\n     /// [Capacity and reallocation]: #capacity-and-reallocation\n+    /// [`capacity`]: Vec::capacity\n     ///\n     /// # Panics\n     ///\n@@ -448,19 +456,24 @@ impl<T> Vec<T> {\n     ///\n     /// // The vector contains no items, even though it has capacity for more\n     /// assert_eq!(vec.len(), 0);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // These are all done without reallocating...\n     /// for i in 0..10 {\n     ///     vec.push(i);\n     /// }\n     /// assert_eq!(vec.len(), 10);\n-    /// assert_eq!(vec.capacity(), 10);\n+    /// assert!(vec.capacity() >= 10);\n     ///\n     /// // ...but this may make the vector reallocate\n     /// vec.push(11);\n     /// assert_eq!(vec.len(), 11);\n     /// assert!(vec.capacity() >= 11);\n+    ///\n+    /// // A vector of a zero-sized type will always over-allocate, since no\n+    /// // allocation is necessary\n+    /// let vec_units = Vec::<()>::with_capacity(10);\n+    /// assert_eq!(vec_units.capacity(), usize::MAX);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n@@ -566,18 +579,26 @@ impl<T, A: Allocator> Vec<T, A> {\n         Vec { buf: RawVec::new_in(alloc), len: 0 }\n     }\n \n-    /// Constructs a new, empty `Vec<T, A>` with the specified capacity with the provided\n-    /// allocator.\n+    /// Constructs a new, empty `Vec<T, A>` with at least the specified capacity\n+    /// with the provided allocator.\n     ///\n-    /// The vector will be able to hold exactly `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the vector will not allocate.\n+    /// The vector will be able to hold at least `capacity` elements without\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the vector will not allocate.\n     ///\n     /// It is important to note that although the returned vector has the\n-    /// *capacity* specified, the vector will have a zero *length*. For an\n-    /// explanation of the difference between length and capacity, see\n+    /// minimum *capacity* specified, the vector will have a zero *length*. For\n+    /// an explanation of the difference between length and capacity, see\n     /// *[Capacity and reallocation]*.\n     ///\n+    /// If it is imporant to know the exact allocated capacity of a `Vec`,\n+    /// always use the [`capacity`] method after construction.\n+    ///\n+    /// For `Vec<T, A>` where `T` is a zero-sized type, there will be no allocation\n+    /// and the capacity will always be `usize::MAX`.\n+    ///\n     /// [Capacity and reallocation]: #capacity-and-reallocation\n+    /// [`capacity`]: Vec::capacity\n     ///\n     /// # Panics\n     ///\n@@ -607,6 +628,11 @@ impl<T, A: Allocator> Vec<T, A> {\n     /// vec.push(11);\n     /// assert_eq!(vec.len(), 11);\n     /// assert!(vec.capacity() >= 11);\n+    ///\n+    /// // A vector of a zero-sized type will always over-allocate, since no\n+    /// // allocation is necessary\n+    /// let vec_units = Vec::<(), System>::with_capacity_in(10, System);\n+    /// assert_eq!(vec_units.capacity(), usize::MAX);\n     /// ```\n     #[cfg(not(no_global_oom_handling))]\n     #[inline]\n@@ -793,10 +819,10 @@ impl<T, A: Allocator> Vec<T, A> {\n     }\n \n     /// Reserves capacity for at least `additional` more elements to be inserted\n-    /// in the given `Vec<T>`. The collection may reserve more space to avoid\n-    /// frequent reallocations. After calling `reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// in the given `Vec<T>`. The collection may reserve more space to\n+    /// speculatively avoid frequent reallocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n@@ -815,10 +841,12 @@ impl<T, A: Allocator> Vec<T, A> {\n         self.buf.reserve(self.len, additional);\n     }\n \n-    /// Reserves the minimum capacity for exactly `additional` more elements to\n-    /// be inserted in the given `Vec<T>`. After calling `reserve_exact`,\n-    /// capacity will be greater than or equal to `self.len() + additional`.\n-    /// Does nothing if the capacity is already sufficient.\n+    /// Reserves the minimum capacity for at least `additional` more elements to\n+    /// be inserted in the given `Vec<T>`. Unlike [`reserve`], this will not\n+    /// deliberately over-allocate to speculatively avoid frequent allocations.\n+    /// After calling `reserve_exact`, capacity will be greater than or equal to\n+    /// `self.len() + additional`. Does nothing if the capacity is already\n+    /// sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it\n     /// requests. Therefore, capacity can not be relied upon to be precisely\n@@ -844,10 +872,10 @@ impl<T, A: Allocator> Vec<T, A> {\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `Vec<T>`. The collection may reserve more space to avoid\n+    /// in the given `Vec<T>`. The collection may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// greater than or equal to `self.len() + additional` if it returns\n+    /// `Ok(())`. Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///\n@@ -879,10 +907,11 @@ impl<T, A: Allocator> Vec<T, A> {\n         self.buf.try_reserve(self.len, additional)\n     }\n \n-    /// Tries to reserve the minimum capacity for exactly `additional`\n-    /// elements to be inserted in the given `Vec<T>`. After calling\n-    /// `try_reserve_exact`, capacity will be greater than or equal to\n-    /// `self.len() + additional` if it returns `Ok(())`.\n+    /// Tries to reserve the minimum capacity for at least `additional`\n+    /// elements to be inserted in the given `Vec<T>`. Unlike [`try_reserve`],\n+    /// this will not deliberately over-allocate to speculatively avoid frequent\n+    /// allocations. After calling `try_reserve_exact`, capacity will be greater\n+    /// than or equal to `self.len() + additional` if it returns `Ok(())`.\n     /// Does nothing if the capacity is already sufficient.\n     ///\n     /// Note that the allocator may give the collection more space than it"}, {"sha": "5520f6ebf19045d4232eb413dc09034d8cd3a466", "filename": "library/alloc/tests/vec.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Ftests%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Falloc%2Ftests%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Falloc%2Ftests%2Fvec.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -2128,6 +2128,15 @@ fn test_vec_cycle_wrapped() {\n     c3.refs.v[1].set(Some(&c2));\n }\n \n+#[test]\n+fn test_zero_sized_capacity() {\n+    for len in [0, 1, 2, 4, 8, 16, 32, 64, 128, 256] {\n+        let v = Vec::<()>::with_capacity(len);\n+        assert_eq!(v.len(), 0);\n+        assert_eq!(v.capacity(), usize::MAX);\n+    }\n+}\n+\n #[test]\n fn test_zero_sized_vec_push() {\n     const N: usize = 8;"}, {"sha": "db811343fa32248d779bf2ed8e48eaecc6c84b68", "filename": "library/std/src/collections/hash/map.rs", "status": "modified", "additions": 21, "deletions": 14, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fmap.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -233,10 +233,11 @@ impl<K, V> HashMap<K, V, RandomState> {\n         Default::default()\n     }\n \n-    /// Creates an empty `HashMap` with the specified capacity.\n+    /// Creates an empty `HashMap` with at least the specified capacity.\n     ///\n     /// The hash map will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the hash set will not allocate.\n     ///\n     /// # Examples\n     ///\n@@ -282,18 +283,19 @@ impl<K, V, S> HashMap<K, V, S> {\n         HashMap { base: base::HashMap::with_hasher(hash_builder) }\n     }\n \n-    /// Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n-    /// to hash the keys.\n+    /// Creates an empty `HashMap` with at least the specified capacity, using\n+    /// `hasher` to hash the keys.\n     ///\n     /// The hash map will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash map will not allocate.\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the hash map will not allocate.\n     ///\n-    /// Warning: `hash_builder` is normally randomly generated, and\n+    /// Warning: `hasher` is normally randomly generated, and\n     /// is designed to allow HashMaps to be resistant to attacks that\n     /// cause many collisions and very poor performance. Setting it\n     /// manually using this function can expose a DoS attack vector.\n     ///\n-    /// The `hash_builder` passed should implement the [`BuildHasher`] trait for\n+    /// The `hasher` passed should implement the [`BuildHasher`] trait for\n     /// the HashMap to be useful, see its documentation for details.\n     ///\n     /// # Examples\n@@ -308,8 +310,8 @@ impl<K, V, S> HashMap<K, V, S> {\n     /// ```\n     #[inline]\n     #[stable(feature = \"hashmap_build_hasher\", since = \"1.7.0\")]\n-    pub fn with_capacity_and_hasher(capacity: usize, hash_builder: S) -> HashMap<K, V, S> {\n-        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hash_builder) }\n+    pub fn with_capacity_and_hasher(capacity: usize, hasher: S) -> HashMap<K, V, S> {\n+        HashMap { base: base::HashMap::with_capacity_and_hasher(capacity, hasher) }\n     }\n \n     /// Returns the number of elements the map can hold without reallocating.\n@@ -731,8 +733,10 @@ where\n     S: BuildHasher,\n {\n     /// Reserves capacity for at least `additional` more elements to be inserted\n-    /// in the `HashMap`. The collection may reserve more space to avoid\n-    /// frequent reallocations.\n+    /// in the `HashMap`. The collection may reserve more space to speculatively\n+    /// avoid frequent reallocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n@@ -752,8 +756,11 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashMap<K, V>`. The collection may reserve more space to avoid\n-    /// frequent reallocations.\n+    /// in the `HashMap`. The collection may reserve more space to speculatively\n+    /// avoid frequent reallocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional` if\n+    /// it returns `Ok(())`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///\n@@ -766,7 +773,7 @@ where\n     /// use std::collections::HashMap;\n     ///\n     /// let mut map: HashMap<&str, isize> = HashMap::new();\n-    /// map.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n+    /// map.try_reserve(10).expect(\"why is the test harness OOMing on a handful of bytes?\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"try_reserve\", since = \"1.57.0\")]"}, {"sha": "abff82788a38dc55d9a8cfbb3b5900c5ea9ac53d", "filename": "library/std/src/collections/hash/set.rs", "status": "modified", "additions": 16, "deletions": 9, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fcollections%2Fhash%2Fset.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -133,10 +133,11 @@ impl<T> HashSet<T, RandomState> {\n         Default::default()\n     }\n \n-    /// Creates an empty `HashSet` with the specified capacity.\n+    /// Creates an empty `HashSet` with at least the specified capacity.\n     ///\n     /// The hash set will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash set will not allocate.\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the hash set will not allocate.\n     ///\n     /// # Examples\n     ///\n@@ -379,11 +380,12 @@ impl<T, S> HashSet<T, S> {\n         HashSet { base: base::HashSet::with_hasher(hasher) }\n     }\n \n-    /// Creates an empty `HashSet` with the specified capacity, using\n+    /// Creates an empty `HashSet` with at least the specified capacity, using\n     /// `hasher` to hash the keys.\n     ///\n     /// The hash set will be able to hold at least `capacity` elements without\n-    /// reallocating. If `capacity` is 0, the hash set will not allocate.\n+    /// reallocating. This method is allowed to allocate for more elements than\n+    /// `capacity`. If `capacity` is 0, the hash set will not allocate.\n     ///\n     /// Warning: `hasher` is normally randomly generated, and\n     /// is designed to allow `HashSet`s to be resistant to attacks that\n@@ -434,8 +436,10 @@ where\n     S: BuildHasher,\n {\n     /// Reserves capacity for at least `additional` more elements to be inserted\n-    /// in the `HashSet`. The collection may reserve more space to avoid\n-    /// frequent reallocations.\n+    /// in the `HashSet`. The collection may reserve more space to speculatively\n+    /// avoid frequent reallocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Panics\n     ///\n@@ -456,8 +460,11 @@ where\n     }\n \n     /// Tries to reserve capacity for at least `additional` more elements to be inserted\n-    /// in the given `HashSet<K, V>`. The collection may reserve more space to avoid\n-    /// frequent reallocations.\n+    /// in the `HashSet`. The collection may reserve more space to speculatively\n+    /// avoid frequent reallocations. After calling `reserve`,\n+    /// capacity will be greater than or equal to `self.len() + additional` if\n+    /// it returns `Ok(())`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// # Errors\n     ///\n@@ -469,7 +476,7 @@ where\n     /// ```\n     /// use std::collections::HashSet;\n     /// let mut set: HashSet<i32> = HashSet::new();\n-    /// set.try_reserve(10).expect(\"why is the test harness OOMing on 10 bytes?\");\n+    /// set.try_reserve(10).expect(\"why is the test harness OOMing on a handful of bytes?\");\n     /// ```\n     #[inline]\n     #[stable(feature = \"try_reserve\", since = \"1.57.0\")]"}, {"sha": "f2bbcc85cecda0c793e3988a0e90cd05cf84cbf2", "filename": "library/std/src/ffi/os_str.rs", "status": "modified", "additions": 12, "deletions": 10, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fffi%2Fos_str.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -196,10 +196,11 @@ impl OsString {\n         self.inner.push_slice(&s.as_ref().inner)\n     }\n \n-    /// Creates a new `OsString` with the given capacity.\n+    /// Creates a new `OsString` with at least the given capacity.\n     ///\n-    /// The string will be able to hold exactly `capacity` length units of other\n-    /// OS strings without reallocating. If `capacity` is 0, the string will not\n+    /// The string will be able to hold at least `capacity` length units of other\n+    /// OS strings without reallocating. This method is allowed to allocate for\n+    /// more units than `capacity`. If `capacity` is 0, the string will not\n     /// allocate.\n     ///\n     /// See the main `OsString` documentation information about encoding and capacity units.\n@@ -263,9 +264,10 @@ impl OsString {\n     }\n \n     /// Reserves capacity for at least `additional` more capacity to be inserted\n-    /// in the given `OsString`.\n+    /// in the given `OsString`. Does nothing if the capacity is\n+    /// already sufficient.\n     ///\n-    /// The collection may reserve more space to avoid frequent reallocations.\n+    /// The collection may reserve more space to speculatively avoid frequent reallocations.\n     ///\n     /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n@@ -285,10 +287,10 @@ impl OsString {\n     }\n \n     /// Tries to reserve capacity for at least `additional` more length units\n-    /// in the given `OsString`. The string may reserve more space to avoid\n+    /// in the given `OsString`. The string may reserve more space to speculatively avoid\n     /// frequent reallocations. After calling `try_reserve`, capacity will be\n-    /// greater than or equal to `self.len() + additional`. Does nothing if\n-    /// capacity is already sufficient.\n+    /// greater than or equal to `self.len() + additional` if it returns `Ok(())`.\n+    /// Does nothing if capacity is already sufficient.\n     ///\n     /// See the main `OsString` documentation information about encoding and capacity units.\n     ///\n@@ -322,7 +324,7 @@ impl OsString {\n         self.inner.try_reserve(additional)\n     }\n \n-    /// Reserves the minimum capacity for exactly `additional` more capacity to\n+    /// Reserves the minimum capacity for at least `additional` more capacity to\n     /// be inserted in the given `OsString`. Does nothing if the capacity is\n     /// already sufficient.\n     ///\n@@ -349,7 +351,7 @@ impl OsString {\n         self.inner.reserve_exact(additional)\n     }\n \n-    /// Tries to reserve the minimum capacity for exactly `additional`\n+    /// Tries to reserve the minimum capacity for at least `additional`\n     /// more length units in the given `OsString`. After calling\n     /// `try_reserve_exact`, capacity will be greater than or equal to\n     /// `self.len() + additional` if it returns `Ok(())`."}, {"sha": "6acb937e78479e404757ce77eda9c3adda4d4157", "filename": "library/std/src/io/buffered/bufwriter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Fbufwriter.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -97,11 +97,11 @@ impl<W: Write> BufWriter<W> {\n         BufWriter::with_capacity(DEFAULT_BUF_SIZE, inner)\n     }\n \n-    /// Creates a new `BufWriter<W>` with the specified buffer capacity.\n+    /// Creates a new `BufWriter<W>` with at least the specified buffer capacity.\n     ///\n     /// # Examples\n     ///\n-    /// Creating a buffer with a buffer of a hundred bytes.\n+    /// Creating a buffer with a buffer of at least a hundred bytes.\n     ///\n     /// ```no_run\n     /// use std::io::BufWriter;"}, {"sha": "a26a4ab330e7a5ae6307a1d81f7975f13d82989e", "filename": "library/std/src/io/buffered/linewriter.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fbuffered%2Flinewriter.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -89,8 +89,8 @@ impl<W: Write> LineWriter<W> {\n         LineWriter::with_capacity(1024, inner)\n     }\n \n-    /// Creates a new `LineWriter` with a specified capacity for the internal\n-    /// buffer.\n+    /// Creates a new `LineWriter` with at least the specified capacity for the\n+    /// internal buffer.\n     ///\n     /// # Examples\n     ///"}, {"sha": "9cf038687f117939cd7f52f80c054204743e678e", "filename": "src/ci/docker/host-x86_64/x86_64-gnu-tools/browser-ui-test.version", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fci%2Fdocker%2Fhost-x86_64%2Fx86_64-gnu-tools%2Fbrowser-ui-test.version?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-0.9.5\n\\ No newline at end of file\n+0.9.6\n\\ No newline at end of file"}, {"sha": "efbafdba3618487fbc9305318fcab9775132ac15", "filename": "src/doc/book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fbook?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-Subproject commit 396fdb69de7fb18f24b15c7ad13491b1c1fa7231\n+Subproject commit efbafdba3618487fbc9305318fcab9775132ac15"}, {"sha": "e17dcef5e96346ee3d7fa56820ddc7e5c39636bc", "filename": "src/doc/embedded-book", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Fembedded-book?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-Subproject commit cbb494f96da3268c2925bdadc65ca83d42f2d4ef\n+Subproject commit e17dcef5e96346ee3d7fa56820ddc7e5c39636bc"}, {"sha": "9fce337a55ee4a4629205f6094656195cecad231", "filename": "src/doc/reference", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Freference?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-Subproject commit 683bfe5cd64d589c6a1645312ab5f93b6385ccbb\n+Subproject commit 9fce337a55ee4a4629205f6094656195cecad231"}, {"sha": "1095df2a5850f2d345fad43a30633133365875ba", "filename": "src/doc/rust-by-example", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frust-by-example?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-Subproject commit dbb7e5e2345ee26199ffba218156b6009016a20c\n+Subproject commit 1095df2a5850f2d345fad43a30633133365875ba"}, {"sha": "048d925f0a955aac601c4160c0e7f05771bcf63b", "filename": "src/doc/rustc-dev-guide", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Frustc-dev-guide?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1 +1 @@\n-Subproject commit 6e4d6435db89bcc027b1bba9742e4f59666f5412\n+Subproject commit 048d925f0a955aac601c4160c0e7f05771bcf63b"}, {"sha": "b4b7790eebba1fa87431a8ec2f1fdd1451494998", "filename": "src/librustdoc/html/static/css/rustdoc.css", "status": "modified", "additions": 23, "deletions": 12, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fcss%2Frustdoc.css?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -387,16 +387,20 @@ nav.sub {\n \toverflow-y: hidden;\n }\n \n+.rustdoc.source .sidebar .sidebar-logo {\n+\tdisplay: none;\n+}\n+\n .source .sidebar > *:not(#sidebar-toggle) {\n \topacity: 0;\n \tvisibility: hidden;\n }\n \n-.source .sidebar.expanded {\n+.source-sidebar-expanded .source .sidebar {\n \toverflow-y: auto;\n }\n \n-.source .sidebar.expanded > *:not(#sidebar-toggle) {\n+.source-sidebar-expanded .source .sidebar > *:not(#sidebar-toggle) {\n \topacity: 1;\n \tvisibility: visible;\n }\n@@ -1682,11 +1686,11 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \n \t/* When we expand the sidebar on the source code page, we hide the logo on the left of the\n \tsearch bar to have more space. */\n-\t.sidebar.expanded + main .width-limiter .sub-logo-container.rust-logo {\n+\t.source-sidebar-expanded .source .sidebar + main .width-limiter .sub-logo-container.rust-logo {\n \t\tdisplay: none;\n \t}\n \n-\t.source .sidebar.expanded {\n+\t.source-sidebar-expanded .source .sidebar {\n \t\twidth: 300px;\n \t}\n }\n@@ -1766,7 +1770,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t}\n \n \t.sidebar.shown,\n-\t.sidebar.expanded,\n+\t.source-sidebar-expanded .source .sidebar,\n \t.sidebar:focus-within {\n \t\tleft: 0;\n \t}\n@@ -1889,11 +1893,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tleft: -11px;\n \t}\n \n-\t.sidebar.expanded #sidebar-toggle {\n-\t\tfont-size: 1.5rem;\n-\t}\n-\n-\t.sidebar:not(.expanded) #sidebar-toggle {\n+\t#sidebar-toggle {\n \t\tposition: fixed;\n \t\tleft: 1px;\n \t\ttop: 100px;\n@@ -1910,6 +1910,14 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tborder-left: 0;\n \t}\n \n+\t.source-sidebar-expanded #sidebar-toggle {\n+\t\tleft: unset;\n+\t\ttop: unset;\n+\t\twidth: unset;\n+\t\tborder-top-right-radius: unset;\n+\t\tborder-bottom-right-radius: unset;\n+\t}\n+\n \t#source-sidebar {\n \t\tz-index: 11;\n \t}\n@@ -1952,7 +1960,7 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\tpadding-left: 2em;\n \t}\n \n-\t.source .sidebar.expanded {\n+\t.source-sidebar-expanded .source .sidebar {\n \t\tmax-width: 100vw;\n \t\twidth: 100vw;\n \t}\n@@ -2010,9 +2018,12 @@ details.rustdoc-toggle[open] > summary.hideme::after {\n \t\twidth: 35px;\n \t}\n \n-\t.sidebar:not(.expanded) #sidebar-toggle {\n+\t#sidebar-toggle {\n \t\ttop: 10px;\n \t}\n+\t.source-sidebar-expanded #sidebar-toggle {\n+\t\ttop: unset;\n+\t}\n }\n \n .method-toggle summary,"}, {"sha": "290c29d3141a2cb0f07e37fa9a1a70460ae0fabe", "filename": "src/librustdoc/html/static/js/source-script.js", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fsource-script.js?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -63,14 +63,13 @@ function createDirEntry(elem, parent, fullPath, hasFoundFile) {\n }\n \n function toggleSidebar() {\n-    const sidebar = document.querySelector(\"nav.sidebar\");\n     const child = this.children[0];\n     if (child.innerText === \">\") {\n-        sidebar.classList.add(\"expanded\");\n+        addClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \"<\";\n         updateLocalStorage(\"source-sidebar-show\", \"true\");\n     } else {\n-        sidebar.classList.remove(\"expanded\");\n+        removeClass(document.documentElement, \"source-sidebar-expanded\");\n         child.innerText = \">\";\n         updateLocalStorage(\"source-sidebar-show\", \"false\");\n     }\n@@ -103,11 +102,6 @@ function createSourceSidebar() {\n \n     const sidebar = document.createElement(\"div\");\n     sidebar.id = \"source-sidebar\";\n-    if (getCurrentValue(\"source-sidebar-show\") !== \"true\") {\n-        container.classList.remove(\"expanded\");\n-    } else {\n-        container.classList.add(\"expanded\");\n-    }\n \n     let hasFoundFile = false;\n "}, {"sha": "1c4c88344888cf28dd6c6aca00d3fcae540790d2", "filename": "src/librustdoc/html/static/js/storage.js", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fjs%2Fstorage.js?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,3 +1,8 @@\n+// storage.js is loaded in the `<head>` of all rustdoc pages and doesn't\n+// use `async` or `defer`. That means it blocks further parsing and rendering\n+// of the page: https://developer.mozilla.org/en-US/docs/Web/HTML/Element/script.\n+// This makes it the correct place to act on settings that affect the display of\n+// the page, so we don't see major layout changes during the load of the page.\n \"use strict\";\n \n const darkThemes = [\"dark\", \"ayu\"];\n@@ -236,6 +241,12 @@ if (getSettingValue(\"use-system-theme\") !== \"false\" && window.matchMedia) {\n     switchToSavedTheme();\n }\n \n+if (getSettingValue(\"source-sidebar-show\") === \"true\") {\n+    // At this point in page load, `document.body` is not available yet.\n+    // Set a class on the `<html>` element instead.\n+    addClass(document.documentElement, \"source-sidebar-expanded\");\n+}\n+\n // If we navigate away (for example to a settings page), and then use the back or\n // forward button to get back to a page, the theme may have changed in the meantime.\n // But scripts may not be re-loaded in such a case due to the bfcache"}, {"sha": "c627dcc30d667bc16a906249c2d6a2703d07efcb", "filename": "src/librustdoc/json/conversions.rs", "status": "modified", "additions": 4, "deletions": 7, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Flibrustdoc%2Fjson%2Fconversions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fjson%2Fconversions.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -43,7 +43,7 @@ impl JsonRenderer<'_> {\n         let span = item.span(self.tcx);\n         let clean::Item { name, attrs: _, kind: _, visibility, item_id, cfg: _ } = item;\n         let inner = match *item.kind {\n-            clean::StrippedItem(_) => return None,\n+            clean::StrippedItem(_) | clean::KeywordItem(_) => return None,\n             _ => from_clean_item(item, self.tcx),\n         };\n         Some(Item {\n@@ -254,11 +254,8 @@ fn from_clean_item(item: clean::Item, tcx: TyCtxt<'_>) -> ItemEnum {\n         },\n         // FIXME: do not map to Typedef but to a custom variant\n         AssocTypeItem(t, _) => ItemEnum::Typedef(t.into_tcx(tcx)),\n-        // `convert_item` early returns `None` for striped items\n-        StrippedItem(_) => unreachable!(),\n-        KeywordItem(_) => {\n-            panic!(\"{:?} is not supported for JSON output\", item)\n-        }\n+        // `convert_item` early returns `None` for striped items and keywords.\n+        StrippedItem(_) | KeywordItem(_) => unreachable!(),\n         ExternCrateItem { ref src } => ItemEnum::ExternCrate {\n             name: name.as_ref().unwrap().to_string(),\n             rename: src.map(|x| x.to_string()),\n@@ -764,7 +761,7 @@ impl FromWithTcx<ItemType> for ItemKind {\n fn ids(items: impl IntoIterator<Item = clean::Item>, tcx: TyCtxt<'_>) -> Vec<Id> {\n     items\n         .into_iter()\n-        .filter(|x| !x.is_stripped())\n+        .filter(|x| !x.is_stripped() && !x.is_keyword())\n         .map(|i| from_item_id_with_name(i.item_id, tcx, i.name))\n         .collect()\n }"}, {"sha": "724520bc399d0da0743f9eafaee98195034a0f61", "filename": "src/test/rustdoc-gui/sidebar-source-code.goml", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsidebar-source-code.goml?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -8,12 +8,12 @@ assert-css: (\"nav.sidebar\", {\"width\": \"50px\"})\n // We now click on the button to expand the sidebar.\n click: (10, 10)\n // We wait for the sidebar to be expanded.\n-wait-for-css: (\"nav.sidebar.expanded\", {\"width\": \"300px\"})\n-assert-css: (\"nav.sidebar.expanded a\", {\"font-size\": \"14px\"})\n+wait-for-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"300px\"})\n+assert-css: (\".source-sidebar-expanded nav.sidebar a\", {\"font-size\": \"14px\"})\n // We collapse the sidebar.\n click: (10, 10)\n // We ensure that the class has been removed.\n-wait-for: \"nav.sidebar:not(.expanded)\"\n+wait-for: \"html:not(.expanded)\"\n assert: \"nav.sidebar\"\n \n // We now switch to mobile mode.\n@@ -22,11 +22,11 @@ size: (600, 600)\n assert-css: (\"nav.sidebar\", {\"width\": \"1px\"})\n // We expand the sidebar.\n click: \"#sidebar-toggle\"\n-assert-css: (\"nav.sidebar.expanded\", {\"width\": \"600px\"})\n+assert-css: (\".source-sidebar-expanded nav.sidebar\", {\"width\": \"600px\"})\n // We collapse the sidebar.\n click: (10, 10)\n // We ensure that the class has been removed.\n-assert-false: \"nav.sidebar.expanded\"\n+assert-false: \".source-sidebar-expanded\"\n assert: \"nav.sidebar\"\n \n // Check that the topbar is not visible"}, {"sha": "b45512601f2087703010813314d5ccc9322c34a0", "filename": "src/test/rustdoc-gui/source-code-page.goml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-gui%2Fsource-code-page.goml?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -32,7 +32,7 @@ assert-document-property: ({\"URL\": \"/lib.rs.html\"}, ENDS_WITH)\n \n // First we \"open\" it.\n click: \"#sidebar-toggle\"\n-assert: \".sidebar.expanded\"\n+assert: \".source-sidebar-expanded\"\n \n // We check that the first entry of the sidebar is collapsed (which, for whatever reason,\n // is number 2 and not 1...)."}, {"sha": "78a843aca7b9513e663d37c16477f6e026bf780a", "filename": "src/test/rustdoc-json/keyword.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-json%2Fkeyword.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Frustdoc-json%2Fkeyword.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc-json%2Fkeyword.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,21 @@\n+// Regression test for <https://github.com/rust-lang/rust/issues/98002>.\n+\n+// Keywords should not be generated in rustdoc JSON output and this test\n+// ensures it.\n+\n+#![feature(rustdoc_internals)]\n+#![no_std]\n+\n+// @has keyword.json\n+// @!has - \"$.index[*][?(@.name=='match')]\"\n+// @has - \"$.index[*][?(@.name=='foo')]\"\n+\n+#[doc(keyword = \"match\")]\n+/// this is a test!\n+pub mod foo {}\n+\n+// @!has - \"$.index[*][?(@.name=='hello')]\"\n+// @!has - \"$.index[*][?(@.name=='bar')]\"\n+#[doc(keyword = \"hello\")]\n+/// hello\n+mod bar {}"}, {"sha": "4285fbbeceb604f72011b33290dfc7ed0cfe46be", "filename": "src/test/ui/async-await/issue-68112.stderr", "status": "modified", "additions": 21, "deletions": 9, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-68112.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -42,15 +42,27 @@ LL |     require_send(send_fut);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:47:31: 47:36]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:47:31: 47:36]>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `{ResumeTy, impl Future<Output = Arc<RefCell<i32>>>, (), i32, Ready<i32>}`\n-   = note: required because it appears within the type `[static generator@$DIR/issue-68112.rs:55:26: 59:6]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/issue-68112.rs:55:26: 59:6]>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-68112.rs:47:31\n+   |\n+LL | async fn ready2<T>(t: T) -> T { t }\n+   |                               ^^^^^\n+note: required because it appears within the type `impl Future<Output = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:48:31\n+   |\n+LL | fn make_non_send_future2() -> impl Future<Output = Arc<RefCell<i32>>> {\n+   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = Arc<RefCell<i32>>>`, `()`, `i32`, `Ready<i32>`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-68112.rs:55:26\n+   |\n+LL |       let send_fut = async {\n+   |  __________________________^\n+LL | |         let non_send_fut = make_non_send_future2();\n+LL | |         let _ = non_send_fut.await;\n+LL | |         ready(0).await;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:11:25\n    |"}, {"sha": "43b7cb8cece365d8b488b449db1a2e7b33ea0702", "filename": "src/test/ui/async-await/issue-70935-complex-spans.drop_tracking.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.drop_tracking.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,40 @@\n+error[E0277]: `Sender<i32>` cannot be shared between threads safely\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n+   |\n+LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n+   |                                             ^^^^^^^^^^^^^^^^^^ `Sender<i32>` cannot be shared between threads safely\n+   |\n+   = help: the trait `Sync` is not implemented for `Sender<i32>`\n+   = note: required because of the requirements on the impl of `Send` for `&Sender<i32>`\n+note: required because it's used within this closure\n+  --> $DIR/issue-70935-complex-spans.rs:25:13\n+   |\n+LL |           baz(|| async{\n+   |  _____________^\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+   | |_________^\n+note: required because it's used within this `async fn` body\n+  --> $DIR/issue-70935-complex-spans.rs:9:67\n+   |\n+LL |   async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+   |  ___________________________________________________________________^\n+LL | |\n+LL | | }\n+   | |_^\n+   = note: required because it captures the following types: `ResumeTy`, `impl Future<Output = ()>`, `()`\n+note: required because it's used within this `async` block\n+  --> $DIR/issue-70935-complex-spans.rs:23:16\n+   |\n+LL |       async move {\n+   |  ________________^\n+LL | |\n+LL | |         baz(|| async{\n+LL | |             foo(tx.clone());\n+LL | |         }).await;\n+LL | |     }\n+   | |_____^\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0277`."}, {"sha": "2174f260a713592e337d04630fff8ff0c9113d04", "filename": "src/test/ui/async-await/issue-70935-complex-spans.normal.stderr", "status": "renamed", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.normal.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,22 +1,22 @@\n error: future cannot be sent between threads safely\n-  --> $DIR/issue-70935-complex-spans.rs:10:45\n+  --> $DIR/issue-70935-complex-spans.rs:13:45\n    |\n LL | fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n    |                                             ^^^^^^^^^^^^^^^^^^ future created by async block is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `Sender<i32>`\n note: future is not `Send` as this value is used across an await\n-  --> $DIR/issue-70935-complex-spans.rs:15:11\n+  --> $DIR/issue-70935-complex-spans.rs:27:11\n    |\n LL |           baz(|| async{\n    |  _____________-\n LL | |             foo(tx.clone());\n LL | |         }).await;\n    | |         - ^^^^^^ await occurs here, with the value maybe used later\n    | |_________|\n-   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:13:13: 15:10]` which is not `Send`\n+   |           has type `[closure@$DIR/issue-70935-complex-spans.rs:25:13: 27:10]` which is not `Send`\n note: the value is later dropped here\n-  --> $DIR/issue-70935-complex-spans.rs:15:17\n+  --> $DIR/issue-70935-complex-spans.rs:27:17\n    |\n LL |         }).await;\n    |                 ^", "previous_filename": "src/test/ui/async-await/issue-70935-complex-spans.stderr"}, {"sha": "f45ce1f25efa0b7a6364ad1171911ab49aa5bb78", "filename": "src/test/ui/async-await/issue-70935-complex-spans.rs", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fissue-70935-complex-spans.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,16 +1,28 @@\n // edition:2018\n+// revisions: normal drop_tracking\n+// [drop_tracking]compile-flags:-Zdrop-tracking\n // #70935: Check if we do not emit snippet\n // with newlines which lead complex diagnostics.\n \n use std::future::Future;\n \n async fn baz<T>(_c: impl FnMut() -> T) where T: Future<Output=()> {\n+//[drop_tracking]~^ within this `async fn` body\n }\n \n fn foo(tx: std::sync::mpsc::Sender<i32>) -> impl Future + Send {\n-    //~^ ERROR: future cannot be sent between threads safely\n+    //[normal]~^ ERROR: future cannot be sent between threads safely\n+    //[drop_tracking]~^^ ERROR: `Sender<i32>` cannot be shared\n+    //[drop_tracking]~|  NOTE: cannot be shared\n+    //[drop_tracking]~|  NOTE: requirements on the impl of `Send`\n+    //[drop_tracking]~|  NOTE: captures the following types\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n+    //[drop_tracking]~|  NOTE: in this expansion\n     async move {\n-        baz(|| async{\n+    //[drop_tracking]~^ within this `async` block\n+        baz(|| async{ //[drop_tracking]~ NOTE: used within this closure\n             foo(tx.clone());\n         }).await;\n     }"}, {"sha": "fe0fce7afd9f9c8a4a21d5e37579102a6b178366", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -5,9 +5,15 @@\n fn main() {\n     gimme_send(foo());\n     //~^ ERROR cannot be sent between threads safely\n+    //~| NOTE cannot be sent\n+    //~| NOTE bound introduced by\n+    //~| NOTE appears within the type\n+    //~| NOTE captures the following types\n }\n \n fn gimme_send<T: Send>(t: T) {\n+//~^ NOTE required by this bound\n+//~| NOTE required by a bound\n     drop(t);\n }\n \n@@ -20,6 +26,8 @@ impl Drop for NotSend {\n impl !Send for NotSend {}\n \n async fn foo() {\n+//~^ NOTE used within this `async fn` body\n+//~| NOTE within this `impl Future\n     let mut x = (NotSend {},);\n     drop(x.0);\n     x.0 = NotSend {};"}, {"sha": "05f5358340a9877866270449c9af8702fd094606", "filename": "src/test/ui/async-await/partial-drop-partial-reinit.stderr", "status": "modified", "additions": 14, "deletions": 6, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fpartial-drop-partial-reinit.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -11,13 +11,21 @@ LL | async fn foo() {\n    |\n    = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `NotSend`\n    = note: required because it appears within the type `(NotSend,)`\n-   = note: required because it appears within the type `{ResumeTy, (NotSend,), impl Future<Output = ()>, ()}`\n-   = note: required because it appears within the type `[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]`\n-   = note: required because it appears within the type `std::future::from_generator::GenFuture<[static generator@$DIR/partial-drop-partial-reinit.rs:22:16: 27:2]>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n-   = note: required because it appears within the type `impl Future<Output = ()>`\n+   = note: required because it captures the following types: `ResumeTy`, `(NotSend,)`, `impl Future<Output = ()>`, `()`\n+note: required because it's used within this `async fn` body\n+  --> $DIR/partial-drop-partial-reinit.rs:28:16\n+   |\n+LL |   async fn foo() {\n+   |  ________________^\n+LL | |\n+LL | |\n+LL | |     let mut x = (NotSend {},);\n+...  |\n+LL | |     bar().await;\n+LL | | }\n+   | |_^\n note: required by a bound in `gimme_send`\n-  --> $DIR/partial-drop-partial-reinit.rs:10:18\n+  --> $DIR/partial-drop-partial-reinit.rs:14:18\n    |\n LL | fn gimme_send<T: Send>(t: T) {\n    |                  ^^^^ required by this bound in `gimme_send`"}, {"sha": "cbc4e2e52315fe496cc687d3f42ce452e22b11f2", "filename": "src/test/ui/closures/closure-move-sync.stderr", "status": "modified", "additions": 14, "deletions": 2, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fclosure-move-sync.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -6,7 +6,15 @@ LL |     let t = thread::spawn(|| {\n    |\n    = help: the trait `Sync` is not implemented for `std::sync::mpsc::Receiver<()>`\n    = note: required because of the requirements on the impl of `Send` for `&std::sync::mpsc::Receiver<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:6:27: 9:6]`\n+note: required because it's used within this closure\n+  --> $DIR/closure-move-sync.rs:6:27\n+   |\n+LL |       let t = thread::spawn(|| {\n+   |  ___________________________^\n+LL | |         recv.recv().unwrap();\n+LL | |\n+LL | |     });\n+   | |_____^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |\n@@ -21,7 +29,11 @@ LL |     thread::spawn(|| tx.send(()).unwrap());\n    |\n    = help: the trait `Sync` is not implemented for `Sender<()>`\n    = note: required because of the requirements on the impl of `Send` for `&Sender<()>`\n-   = note: required because it appears within the type `[closure@$DIR/closure-move-sync.rs:18:19: 18:42]`\n+note: required because it's used within this closure\n+  --> $DIR/closure-move-sync.rs:18:19\n+   |\n+LL |     thread::spawn(|| tx.send(()).unwrap());\n+   |                   ^^^^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "8f4cb86de99a01a0e8dff24c1e212c655a9c4f5e", "filename": "src/test/ui/error-codes/E0109.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0109.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u32`\n   --> $DIR/E0109.rs:1:14\n    |\n LL | type X = u32<i32>;\n    |          --- ^^^ type argument not allowed\n    |          |\n-   |          not allowed on this type\n+   |          not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "4ce2a0a410ce4ef9d688490bee1158bcb7aeeee6", "filename": "src/test/ui/error-codes/E0110.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0110.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u32`\n   --> $DIR/E0110.rs:1:14\n    |\n LL | type X = u32<'static>;\n    |          --- ^^^^^^^ lifetime argument not allowed\n    |          |\n-   |          not allowed on this type\n+   |          not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |"}, {"sha": "3fcef773b68abf5ed428ce53d7e0a5d03d5ef519", "filename": "src/test/ui/generator/issue-68112.rs", "status": "modified", "additions": 18, "deletions": 4, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -20,6 +20,10 @@ pub fn make_gen1<T>(t: T) -> Ready<T> {\n }\n \n fn require_send(_: impl Send) {}\n+//~^ NOTE required by a bound\n+//~| NOTE required by a bound\n+//~| NOTE required by this bound\n+//~| NOTE required by this bound\n \n fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n     make_gen1(Arc::new(RefCell::new(0)))\n@@ -28,29 +32,39 @@ fn make_non_send_generator() -> impl Generator<Return = Arc<RefCell<i32>>> {\n fn test1() {\n     let send_gen = || {\n         let _non_send_gen = make_non_send_generator();\n+        //~^ NOTE not `Send`\n         yield;\n-    };\n+        //~^ NOTE yield occurs here\n+        //~| NOTE value is used across a yield\n+    }; //~ NOTE later dropped here\n     require_send(send_gen);\n     //~^ ERROR generator cannot be sent between threads\n+    //~| NOTE not `Send`\n }\n \n pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n-    || {\n+//~^ NOTE appears within the type\n+//~| NOTE expansion of desugaring\n+    || { //~ NOTE used within this generator\n         yield;\n         t\n     }\n }\n-fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> { //~ NOTE appears within the type\n+//~^ NOTE expansion of desugaring\n     make_gen2(Arc::new(RefCell::new(0)))\n }\n \n fn test2() {\n-    let send_gen = || {\n+    let send_gen = || { //~ NOTE used within this generator\n         let _non_send_gen = make_non_send_generator2();\n         yield;\n     };\n     require_send(send_gen);\n     //~^ ERROR `RefCell<i32>` cannot be shared between threads safely\n+    //~| NOTE `RefCell<i32>` cannot be shared between threads safely\n+    //~| NOTE requirements on the impl\n+    //~| NOTE captures the following types\n }\n \n fn main() {}"}, {"sha": "83f068c2076438f769877a1d00a1e14e053aa8c3", "filename": "src/test/ui/generator/issue-68112.stderr", "status": "modified", "additions": 33, "deletions": 8, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fissue-68112.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,17 +1,19 @@\n error: generator cannot be sent between threads safely\n-  --> $DIR/issue-68112.rs:33:5\n+  --> $DIR/issue-68112.rs:40:5\n    |\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ generator is not `Send`\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n note: generator is not `Send` as this value is used across a yield\n-  --> $DIR/issue-68112.rs:31:9\n+  --> $DIR/issue-68112.rs:36:9\n    |\n LL |         let _non_send_gen = make_non_send_generator();\n    |             ------------- has type `impl Generator<Return = Arc<RefCell<i32>>>` which is not `Send`\n+LL |\n LL |         yield;\n    |         ^^^^^ yield occurs here, with `_non_send_gen` maybe used later\n+...\n LL |     };\n    |     - `_non_send_gen` is later dropped here\n note: required by a bound in `require_send`\n@@ -21,18 +23,41 @@ LL | fn require_send(_: impl Send) {}\n    |                         ^^^^ required by this bound in `require_send`\n \n error[E0277]: `RefCell<i32>` cannot be shared between threads safely\n-  --> $DIR/issue-68112.rs:52:5\n+  --> $DIR/issue-68112.rs:63:5\n    |\n LL |     require_send(send_gen);\n    |     ^^^^^^^^^^^^ `RefCell<i32>` cannot be shared between threads safely\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:38:5: 41:6]`\n-   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n-   = note: required because it appears within the type `{impl Generator<Return = Arc<RefCell<i32>>>, ()}`\n-   = note: required because it appears within the type `[generator@$DIR/issue-68112.rs:48:20: 51:6]`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:48:5\n+   |\n+LL | /     || {\n+LL | |         yield;\n+LL | |         t\n+LL | |     }\n+   | |_____^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:45:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Generator<Return = Arc<RefCell<i32>>>`\n+  --> $DIR/issue-68112.rs:53:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `impl Generator<Return = Arc<RefCell<i32>>>`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/issue-68112.rs:59:20\n+   |\n+LL |       let send_gen = || {\n+   |  ____________________^\n+LL | |         let _non_send_gen = make_non_send_generator2();\n+LL | |         yield;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/issue-68112.rs:22:25\n    |"}, {"sha": "edf9ee628a2bc25200c8bb68e59c4ea56575d7e5", "filename": "src/test/ui/generator/not-send-sync.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fnot-send-sync.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -6,7 +6,16 @@ LL |     assert_send(|| {\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&Cell<i32>`\n-   = note: required because it appears within the type `[generator@$DIR/not-send-sync.rs:16:17: 20:6]`\n+note: required because it's used within this generator\n+  --> $DIR/not-send-sync.rs:16:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^\n note: required by a bound in `assert_send`\n   --> $DIR/not-send-sync.rs:7:23\n    |"}, {"sha": "3ee4c1458bad38d1e5349878c83001ca2975c9f9", "filename": "src/test/ui/generator/print/generator-print-verbose-1.stderr", "status": "modified", "additions": 28, "deletions": 5, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-1.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -28,11 +28,34 @@ LL |     require_send(send_gen);\n    |\n    = help: the trait `Sync` is not implemented for `RefCell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `Arc<RefCell<i32>>`\n-   = note: required because it appears within the type `[make_gen2<Arc<RefCell<i32>>>::{closure#0} upvar_tys=(Arc<RefCell<i32>>) {()}]`\n-   = note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n-   = note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n-   = note: required because it appears within the type `{Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}`\n-   = note: required because it appears within the type `[test2::{closure#0} upvar_tys=() {Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), []), ()}]`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:42:5\n+   |\n+LL | /     || {\n+LL | |         yield;\n+LL | |         t\n+LL | |     }\n+   | |_____^\n+note: required because it appears within the type `Opaque(DefId(0:39 ~ generator_print_verbose_1[749a]::make_gen2::{opaque#0}), [std::sync::Arc<std::cell::RefCell<i32>>])`\n+  --> $DIR/generator-print-verbose-1.rs:41:30\n+   |\n+LL | pub fn make_gen2<T>(t: T) -> impl Generator<Return = T> {\n+   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`\n+  --> $DIR/generator-print-verbose-1.rs:47:34\n+   |\n+LL | fn make_non_send_generator2() -> impl Generator<Return = Arc<RefCell<i32>>> {\n+   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n+   = note: required because it captures the following types: `Opaque(DefId(0:42 ~ generator_print_verbose_1[749a]::make_non_send_generator2::{opaque#0}), [])`, `()`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-1.rs:52:20\n+   |\n+LL |       let send_gen = || {\n+   |  ____________________^\n+LL | |         let _non_send_gen = make_non_send_generator2();\n+LL | |         yield;\n+LL | |     };\n+   | |_____^\n note: required by a bound in `require_send`\n   --> $DIR/generator-print-verbose-1.rs:26:25\n    |"}, {"sha": "1356fa5f15295db37399e3eff7463df577b4761c", "filename": "src/test/ui/generator/print/generator-print-verbose-2.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fgenerator%2Fprint%2Fgenerator-print-verbose-2.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -6,7 +6,16 @@ LL |     assert_send(|| {\n    |\n    = help: the trait `Sync` is not implemented for `Cell<i32>`\n    = note: required because of the requirements on the impl of `Send` for `&'_#4r Cell<i32>`\n-   = note: required because it appears within the type `[main::{closure#1} upvar_tys=(&'_#4r Cell<i32>) _#17t]`\n+note: required because it's used within this generator\n+  --> $DIR/generator-print-verbose-2.rs:19:17\n+   |\n+LL |       assert_send(|| {\n+   |  _________________^\n+LL | |\n+LL | |         drop(&a);\n+LL | |         yield;\n+LL | |     });\n+   | |_____^\n note: required by a bound in `assert_send`\n   --> $DIR/generator-print-verbose-2.rs:10:23\n    |"}, {"sha": "09450089adaa8652eb80991173c0b9ac9da596f7", "filename": "src/test/ui/impl-trait/auto-trait-leak2.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -3,23 +3,37 @@ use std::rc::Rc;\n \n // Fast path, main can see the concrete type returned.\n fn before() -> impl Fn(i32) {\n+//~^ NOTE within this `impl Fn\n+//~| NOTE within the type `impl Fn\n+//~| NOTE expansion of desugaring\n     let p = Rc::new(Cell::new(0));\n-    move |x| p.set(x)\n+    move |x| p.set(x) //~ NOTE used within this closure\n }\n \n fn send<T: Send>(_: T) {}\n+//~^ NOTE required by a bound\n+//~| NOTE required by a bound\n+//~| NOTE required by this bound\n+//~| NOTE required by this bound\n \n fn main() {\n     send(before());\n     //~^ ERROR `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE required by a bound\n \n     send(after());\n     //~^ ERROR `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE `Rc<Cell<i32>>` cannot be sent between threads safely\n+    //~| NOTE required by a bound\n }\n \n // Deferred path, main has to wait until typeck finishes,\n // to check if the return type of after is Send.\n fn after() -> impl Fn(i32) {\n+//~^ NOTE within this `impl Fn(i32)`\n+//~| NOTE in this expansion\n+//~| NOTE appears within the type\n     let p = Rc::new(Cell::new(0));\n-    move |x| p.set(x)\n+    move |x| p.set(x) //~ NOTE used within this closure\n }"}, {"sha": "d825843492d49c3a5436e2d520c8cea4e5c7db08", "filename": "src/test/ui/impl-trait/auto-trait-leak2.stderr", "status": "modified", "additions": 24, "deletions": 8, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Fauto-trait-leak2.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:13:10\n+  --> $DIR/auto-trait-leak2.rs:20:10\n    |\n LL | fn before() -> impl Fn(i32) {\n    |                ------------ within this `impl Fn(i32)`\n@@ -10,16 +10,24 @@ LL |     send(before());\n    |     required by a bound introduced by this call\n    |\n    = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:7:5: 7:22]`\n-   = note: required because it appears within the type `impl Fn(i32)`\n+note: required because it's used within this closure\n+  --> $DIR/auto-trait-leak2.rs:10:5\n+   |\n+LL |     move |x| p.set(x)\n+   |     ^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Fn(i32)`\n+  --> $DIR/auto-trait-leak2.rs:5:16\n+   |\n+LL | fn before() -> impl Fn(i32) {\n+   |                ^^^^^^^^^^^^\n note: required by a bound in `send`\n-  --> $DIR/auto-trait-leak2.rs:10:12\n+  --> $DIR/auto-trait-leak2.rs:13:12\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`\n \n error[E0277]: `Rc<Cell<i32>>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leak2.rs:16:10\n+  --> $DIR/auto-trait-leak2.rs:25:10\n    |\n LL |     send(after());\n    |     ---- ^^^^^^^ `Rc<Cell<i32>>` cannot be sent between threads safely\n@@ -30,10 +38,18 @@ LL | fn after() -> impl Fn(i32) {\n    |               ------------ within this `impl Fn(i32)`\n    |\n    = help: within `impl Fn(i32)`, the trait `Send` is not implemented for `Rc<Cell<i32>>`\n-   = note: required because it appears within the type `[closure@$DIR/auto-trait-leak2.rs:24:5: 24:22]`\n-   = note: required because it appears within the type `impl Fn(i32)`\n+note: required because it's used within this closure\n+  --> $DIR/auto-trait-leak2.rs:38:5\n+   |\n+LL |     move |x| p.set(x)\n+   |     ^^^^^^^^^^^^^^^^^\n+note: required because it appears within the type `impl Fn(i32)`\n+  --> $DIR/auto-trait-leak2.rs:33:15\n+   |\n+LL | fn after() -> impl Fn(i32) {\n+   |               ^^^^^^^^^^^^\n note: required by a bound in `send`\n-  --> $DIR/auto-trait-leak2.rs:10:12\n+  --> $DIR/auto-trait-leak2.rs:13:12\n    |\n LL | fn send<T: Send>(_: T) {}\n    |            ^^^^ required by this bound in `send`"}, {"sha": "affb481496d02a8af7fc9dac41d91d9d8a9b1de5", "filename": "src/test/ui/inference/cannot-infer-closure-circular.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -4,10 +4,10 @@ fn main() {\n     // error handles this gracefully, and in particular doesn't generate an extra\n     // note about the `?` operator in the closure body, which isn't relevant to\n     // the inference.\n-    let x = |r| {\n+    let x = |r| { //~ ERROR type annotations needed for `Result<(), E>`\n         let v = r?;\n         Ok(v)\n     };\n \n-    let _ = x(x(Ok(())));  //~ ERROR type annotations needed for `Result<(), E>`\n+    let _ = x(x(Ok(())));\n }"}, {"sha": "b706cd2bc36e8a0ba3f53291fcdc7b44e6bd2cf2", "filename": "src/test/ui/inference/cannot-infer-closure-circular.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finference%2Fcannot-infer-closure-circular.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,13 +1,13 @@\n error[E0282]: type annotations needed for `Result<(), E>`\n-  --> $DIR/cannot-infer-closure-circular.rs:12:9\n+  --> $DIR/cannot-infer-closure-circular.rs:7:14\n    |\n-LL |     let _ = x(x(Ok(())));\n-   |         ^\n+LL |     let x = |r| {\n+   |              ^\n    |\n-help: consider giving this pattern a type, where the type for type parameter `E` is specified\n+help: consider giving this closure parameter an explicit type, where the type for type parameter `E` is specified\n    |\n-LL |     let _: Result<(), E> = x(x(Ok(())));\n-   |          +++++++++++++++\n+LL |     let x = |r: Result<(), E>| {\n+   |               +++++++++++++++\n \n error: aborting due to previous error\n "}, {"sha": "66fe3c74e2c872fc5ee1d8d2b264a2b5ce7af199", "filename": "src/test/ui/interior-mutability/interior-mutability.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finterior-mutability%2Finterior-mutability.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -7,7 +7,11 @@ LL |     catch_unwind(|| { x.set(23); });\n    = help: within `Cell<i32>`, the trait `RefUnwindSafe` is not implemented for `UnsafeCell<i32>`\n    = note: required because it appears within the type `Cell<i32>`\n    = note: required because of the requirements on the impl of `UnwindSafe` for `&Cell<i32>`\n-   = note: required because it appears within the type `[closure@$DIR/interior-mutability.rs:5:18: 5:35]`\n+note: required because it's used within this closure\n+  --> $DIR/interior-mutability.rs:5:18\n+   |\n+LL |     catch_unwind(|| { x.set(23); });\n+   |                  ^^^^^^^^^^^^^^^^^\n note: required by a bound in `catch_unwind`\n   --> $SRC_DIR/std/src/panic.rs:LL:COL\n    |"}, {"sha": "2d29093b01b02e5b6635f70d6c662e183235d81c", "filename": "src/test/ui/issues/issue-76077.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -6,5 +6,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "197ca8d5a7b25ca280caaacc10107564abef3adf", "filename": "src/test/ui/issues/issue-76077.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-76077.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,8 +1,10 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-76077.rs:8:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `you_cant_use_this_field` that was not provided\n \n error: aborting due to previous error\n "}, {"sha": "727573a0be4edb753d7d8ab745c34f96e873f28d", "filename": "src/test/ui/kindck/kindck-nonsendable-1.stderr", "status": "modified", "additions": 5, "deletions": 1, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fkindck%2Fkindck-nonsendable-1.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -7,7 +7,11 @@ LL |     bar(move|| foo(x));\n    |     `Rc<usize>` cannot be sent between threads safely\n    |\n    = help: within `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`, the trait `Send` is not implemented for `Rc<usize>`\n-   = note: required because it appears within the type `[closure@$DIR/kindck-nonsendable-1.rs:9:9: 9:22]`\n+note: required because it's used within this closure\n+  --> $DIR/kindck-nonsendable-1.rs:9:9\n+   |\n+LL |     bar(move|| foo(x));\n+   |         ^^^^^^^^^^^^^\n note: required by a bound in `bar`\n   --> $DIR/kindck-nonsendable-1.rs:5:21\n    |"}, {"sha": "2aac50a9d011afb85bbfb5d0c7616664981b3d18", "filename": "src/test/ui/macros/cfg.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fmacros%2Fcfg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fmacros%2Fcfg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcfg.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -2,4 +2,5 @@ fn main() {\n     cfg!(); //~ ERROR macro requires a cfg-pattern\n     cfg!(123); //~ ERROR expected identifier\n     cfg!(foo = 123); //~ ERROR literal in `cfg` predicate value must be a string\n+    cfg!(foo, bar); //~ ERROR expected 1 cfg-pattern\n }"}, {"sha": "2633d5f720d7078a4a7c98aff10fdf446c240aa1", "filename": "src/test/ui/macros/cfg.stderr", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmacros%2Fcfg.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -18,6 +18,14 @@ error[E0565]: literal in `cfg` predicate value must be a string\n LL |     cfg!(foo = 123);\n    |                ^^^\n \n-error: aborting due to 3 previous errors\n+error: expected 1 cfg-pattern\n+  --> $DIR/cfg.rs:5:5\n+   |\n+LL |     cfg!(foo, bar);\n+   |     ^^^^^^^^^^^^^^\n+   |\n+   = note: this error originates in the macro `cfg` (in Nightly builds, run with -Z macro-backtrace for more info)\n+\n+error: aborting due to 4 previous errors\n \n For more information about this error, try `rustc --explain E0565`."}, {"sha": "6bb12f52d3f3eabe404dca57ccd04a49655037ff", "filename": "src/test/ui/nll/issue-98170.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98170.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,25 @@\n+pub struct MyStruct<'a> {\n+    field: &'a [u32],\n+}\n+\n+impl MyStruct<'_> {\n+    pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+        Self { field }\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+    }\n+}\n+\n+trait Trait<'a> {\n+    fn new(field: &'a [u32]) -> MyStruct<'a>;\n+}\n+\n+impl<'a> Trait<'a> for MyStruct<'_> {\n+    fn new(field: &'a [u32]) -> MyStruct<'a> {\n+        Self { field }\n+        //~^ ERROR lifetime may not live long enough\n+        //~| ERROR lifetime may not live long enough\n+    }\n+}\n+\n+fn main() {}"}, {"sha": "0d17365e71b4ae215970ceb2dd9ed727f7275e75", "filename": "src/test/ui/nll/issue-98170.stderr", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-98170.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,44 @@\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:7:9\n+   |\n+LL | impl MyStruct<'_> {\n+   |               -- lifetime `'1` appears in the `impl`'s self type\n+LL |     pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+   |                -- lifetime `'a` defined here\n+LL |         Self { field }\n+   |         ^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:7:16\n+   |\n+LL | impl MyStruct<'_> {\n+   |               -- lifetime `'1` appears in the `impl`'s self type\n+LL |     pub fn new<'a>(field: &'a [u32]) -> MyStruct<'a> {\n+   |                -- lifetime `'a` defined here\n+LL |         Self { field }\n+   |                ^^^^^ this usage requires that `'a` must outlive `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:19:9\n+   |\n+LL | impl<'a> Trait<'a> for MyStruct<'_> {\n+   |      --                         -- lifetime `'1` appears in the `impl`'s self type\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     fn new(field: &'a [u32]) -> MyStruct<'a> {\n+LL |         Self { field }\n+   |         ^^^^^^^^^^^^^^ associated function was supposed to return data with lifetime `'a` but it is returning data with lifetime `'1`\n+\n+error: lifetime may not live long enough\n+  --> $DIR/issue-98170.rs:19:16\n+   |\n+LL | impl<'a> Trait<'a> for MyStruct<'_> {\n+   |      --                         -- lifetime `'1` appears in the `impl`'s self type\n+   |      |\n+   |      lifetime `'a` defined here\n+LL |     fn new(field: &'a [u32]) -> MyStruct<'a> {\n+LL |         Self { field }\n+   |                ^^^^^ this usage requires that `'a` must outlive `'1`\n+\n+error: aborting due to 4 previous errors\n+"}, {"sha": "e4c57c04e7269d468d1be7a12761bf8a914e2266", "filename": "src/test/ui/no-send-res-ports.stderr", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fno-send-res-ports.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fno-send-res-ports.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -22,7 +22,16 @@ note: required because it appears within the type `Foo`\n    |\n LL |     struct Foo {\n    |            ^^^\n-   = note: required because it appears within the type `[closure@$DIR/no-send-res-ports.rs:25:19: 29:6]`\n+note: required because it's used within this closure\n+  --> $DIR/no-send-res-ports.rs:25:19\n+   |\n+LL |       thread::spawn(move|| {\n+   |  ___________________^\n+LL | |\n+LL | |         let y = x;\n+LL | |         println!(\"{:?}\", y);\n+LL | |     });\n+   | |_____^\n note: required by a bound in `spawn`\n   --> $SRC_DIR/std/src/thread/mod.rs:LL:COL\n    |"}, {"sha": "bebf561b120b5280405d92aa73f1474399d05ea6", "filename": "src/test/ui/not-clone-closure.stderr", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fnot-clone-closure.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnot-clone-closure.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -10,7 +10,14 @@ LL |\n LL |       let hello = hello.clone();\n    |                         ^^^^^ within `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`, the trait `Clone` is not implemented for `S`\n    |\n-   = note: required because it appears within the type `[closure@$DIR/not-clone-closure.rs:7:17: 9:6]`\n+note: required because it's used within this closure\n+  --> $DIR/not-clone-closure.rs:7:17\n+   |\n+LL |       let hello = move || {\n+   |  _________________^\n+LL | |         println!(\"Hello {}\", a.0);\n+LL | |     };\n+   | |_____^\n help: consider annotating `S` with `#[derive(Clone)]`\n    |\n LL | #[derive(Clone)]"}, {"sha": "39c222f7c3414c052fab7b5ecb4d55c93cd53a23", "filename": "src/test/ui/privacy/issue-79593.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -16,7 +16,7 @@ mod foo {\n \n fn correct() {\n     foo::Pub {};\n-    //~^ ERROR cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Pub` with struct literal syntax due to private fields\n }\n \n fn wrong() {"}, {"sha": "21ba760ad0bcc3e438ba4cf7ac0e13dc1a2ae664", "filename": "src/test/ui/privacy/issue-79593.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fprivacy%2Fissue-79593.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -10,11 +10,13 @@ error[E0063]: missing field `y` in initializer of `Enum`\n LL |         Enum::Variant { x: () };\n    |         ^^^^^^^^^^^^^ missing `y`\n \n-error: cannot construct `Pub` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Pub` with struct literal syntax due to private fields\n   --> $DIR/issue-79593.rs:18:5\n    |\n LL |     foo::Pub {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `private` that was not provided\n \n error[E0063]: missing field `y` in initializer of `Enum`\n   --> $DIR/issue-79593.rs:23:5"}, {"sha": "0031a4665c814478dbaf28ffb2f4b86f90fce216", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -52,7 +52,7 @@ fn main() {\n     // Tuple struct variant\n \n     Enum::<()>::TSVariant::<()>(());\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on tuple variant `TSVariant` [E0109]\n \n     Alias::TSVariant::<()>(());\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n@@ -70,7 +70,7 @@ fn main() {\n     // Struct variant\n \n     Enum::<()>::SVariant::<()> { v: () };\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on variant `SVariant` [E0109]\n \n     Alias::SVariant::<()> { v: () };\n     //~^ ERROR type arguments are not allowed on this type [E0109]\n@@ -88,7 +88,7 @@ fn main() {\n     // Unit variant\n \n     Enum::<()>::UVariant::<()>;\n-    //~^ ERROR type arguments are not allowed on this type [E0109]\n+    //~^ ERROR type arguments are not allowed on unit variant `UVariant` [E0109]\n \n     Alias::UVariant::<()>;\n     //~^ ERROR type arguments are not allowed on this type [E0109]"}, {"sha": "5467f61bee40f131a58987ba0885d65c822f0002", "filename": "src/test/ui/type-alias-enum-variants/enum-variant-generic-args.stderr", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-enum-variants%2Fenum-variant-generic-args.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -272,13 +272,13 @@ LL |         Self::<()>::UVariant::<()>;\n    |                     |\n    |                     not allowed on this type\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on tuple variant `TSVariant`\n   --> $DIR/enum-variant-generic-args.rs:54:29\n    |\n LL |     Enum::<()>::TSVariant::<()>(());\n    |                 ---------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on tuple variant `TSVariant`\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:57:24\n@@ -340,13 +340,13 @@ LL |     AliasFixed::<()>::TSVariant::<()>(());\n    |                       |\n    |                       not allowed on this type\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on variant `SVariant`\n   --> $DIR/enum-variant-generic-args.rs:72:28\n    |\n LL |     Enum::<()>::SVariant::<()> { v: () };\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on variant `SVariant`\n    |\n    = note: enum variants can't have type parameters\n \n@@ -438,13 +438,13 @@ LL -     AliasFixed::<()>::SVariant::<()> { v: () };\n LL +     AliasFixed::<()>::SVariant { v: () };\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on unit variant `UVariant`\n   --> $DIR/enum-variant-generic-args.rs:90:28\n    |\n LL |     Enum::<()>::UVariant::<()>;\n    |                 --------   ^^ type argument not allowed\n    |                 |\n-   |                 not allowed on this type\n+   |                 not allowed on unit variant `UVariant`\n \n error[E0109]: type arguments are not allowed on this type\n   --> $DIR/enum-variant-generic-args.rs:93:23"}, {"sha": "fc89b0e870e39f52389b112de573f2875c94e19c", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -4,16 +4,22 @@\n mod m {\n     use std::rc::Rc;\n \n-    type Foo = impl std::fmt::Debug;\n+    type Foo = impl std::fmt::Debug; //~ NOTE appears within the type\n+    //~^ within this `Foo`\n+    //~| expansion of desugaring\n \n     pub fn foo() -> Foo {\n         Rc::new(22_u32)\n     }\n }\n \n fn is_send<T: Send>(_: T) {}\n+//~^ required by this bound\n+//~| required by a bound\n \n fn main() {\n     is_send(m::foo());\n     //~^ ERROR: `Rc<u32>` cannot be sent between threads safely [E0277]\n+    //~| NOTE cannot be sent\n+    //~| NOTE required by a bound\n }"}, {"sha": "d7247302dd1e06b206e28e9c3585685ac5a9119b", "filename": "src/test/ui/type-alias-impl-trait/auto-trait-leakage2.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype-alias-impl-trait%2Fauto-trait-leakage2.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,5 +1,5 @@\n error[E0277]: `Rc<u32>` cannot be sent between threads safely\n-  --> $DIR/auto-trait-leakage2.rs:17:13\n+  --> $DIR/auto-trait-leakage2.rs:21:13\n    |\n LL |     type Foo = impl std::fmt::Debug;\n    |                -------------------- within this `Foo`\n@@ -10,9 +10,13 @@ LL |     is_send(m::foo());\n    |     required by a bound introduced by this call\n    |\n    = help: within `Foo`, the trait `Send` is not implemented for `Rc<u32>`\n-   = note: required because it appears within the type `Foo`\n+note: required because it appears within the type `Foo`\n+  --> $DIR/auto-trait-leakage2.rs:7:16\n+   |\n+LL |     type Foo = impl std::fmt::Debug;\n+   |                ^^^^^^^^^^^^^^^^^^^^\n note: required by a bound in `is_send`\n-  --> $DIR/auto-trait-leakage2.rs:14:15\n+  --> $DIR/auto-trait-leakage2.rs:16:15\n    |\n LL | fn is_send<T: Send>(_: T) {}\n    |               ^^^^ required by this bound in `is_send`"}, {"sha": "f1e16bc7bd3c15a74f90074d85ce6d005d9ccc3e", "filename": "src/test/ui/type/issue-91268.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,7 +1,7 @@\n // error-pattern: this file contains an unclosed delimiter\n // error-pattern: cannot find type `\u0163` in this scope\n // error-pattern: parenthesized type parameters may only be used with a `Fn` trait\n-// error-pattern: type arguments are not allowed on this type\n+// error-pattern: type arguments are not allowed on builtin type `u8`\n // error-pattern: mismatched types\n // ignore-tidy-trailing-newlines\n // `\u0163` must be the last character in this file, it cannot be followed by a newline"}, {"sha": "6c9ee9945844d812d20f81b0c97af77438955cd4", "filename": "src/test/ui/type/issue-91268.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype%2Fissue-91268.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -35,13 +35,13 @@ help: use angle brackets instead\n LL |     0: u8<\u0163>\n    |          ~ +\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u8`\n   --> $DIR/issue-91268.rs:9:11\n    |\n LL |     0: u8(\u0163\n    |        -- ^ type argument not allowed\n    |        |\n-   |        not allowed on this type\n+   |        not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |"}, {"sha": "326e958aaa94f55fe83226c3b636ceb0814f0c9a", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -7,5 +7,5 @@ pub mod foo {\n \n fn main() {\n     foo::Foo {};\n-    //~^ ERROR cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+    //~^ ERROR cannot construct `Foo` with struct literal syntax due to private fields\n }"}, {"sha": "f0bd3e0ddf768002cf8af4d82fa92e4843666675", "filename": "src/test/ui/typeck/issue-87872-missing-inaccessible-field-literal.stderr", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fissue-87872-missing-inaccessible-field-literal.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,8 +1,10 @@\n-error: cannot construct `Foo` with struct literal syntax due to inaccessible fields\n+error: cannot construct `Foo` with struct literal syntax due to private fields\n   --> $DIR/issue-87872-missing-inaccessible-field-literal.rs:9:5\n    |\n LL |     foo::Foo {};\n    |     ^^^^^^^^\n+   |\n+   = note: ... and other private field `you_cant_use_this_field` that was not provided\n \n error: aborting due to previous error\n "}, {"sha": "9f1560bfb8dfeebfad9e75b6ba2cc459d40fbdad", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,18 @@\n+pub mod m {\n+    pub struct S {\n+        pub visible: bool,\n+        a: (),\n+        b: (),\n+        c: (),\n+        d: (),\n+        e: (),\n+    }\n+}\n+\n+fn main() {\n+    let _ = m::S { //~ ERROR cannot construct `S` with struct literal syntax due to private fields\n+        visible: true,\n+        a: (),\n+        b: (),\n+    };\n+}"}, {"sha": "234110f31f79c5a41e4e311615f39bd7e4923a63", "filename": "src/test/ui/typeck/missing-private-fields-in-struct-literal.stderr", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fmissing-private-fields-in-struct-literal.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -0,0 +1,15 @@\n+error: cannot construct `S` with struct literal syntax due to private fields\n+  --> $DIR/missing-private-fields-in-struct-literal.rs:13:13\n+   |\n+LL |     let _ = m::S {\n+   |             ^^^^\n+LL |         visible: true,\n+LL |         a: (),\n+   |         ----- private field\n+LL |         b: (),\n+   |         ----- private field\n+   |\n+   = note: ... and other private fields `c`, `d` and `e` that were not provided\n+\n+error: aborting due to previous error\n+"}, {"sha": "e3f99479a38091eac7ad95c178cb4a0f629dd88e", "filename": "src/test/ui/typeck/prim-with-args.fixed", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.fixed?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize; //~ ERROR type arguments are not allowed on this type\n-let _x: i8; //~ ERROR type arguments are not allowed on this type\n-let _x: i16; //~ ERROR type arguments are not allowed on this type\n-let _x: i32; //~ ERROR type arguments are not allowed on this type\n-let _x: i64; //~ ERROR type arguments are not allowed on this type\n-let _x: usize; //~ ERROR type arguments are not allowed on this type\n-let _x: u8; //~ ERROR type arguments are not allowed on this type\n-let _x: u16; //~ ERROR type arguments are not allowed on this type\n-let _x: u32; //~ ERROR type arguments are not allowed on this type\n-let _x: u64; //~ ERROR type arguments are not allowed on this type\n-let _x: char; //~ ERROR type arguments are not allowed on this type\n+let _x: isize; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i8; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i16; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i32; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i64; //~ ERROR type arguments are not allowed on builtin type\n+let _x: usize; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u8; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u16; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u32; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u64; //~ ERROR type arguments are not allowed on builtin type\n+let _x: char; //~ ERROR type arguments are not allowed on builtin type\n \n-let _x: isize; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i8; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i16; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i32; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i64; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: usize; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u8; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u16; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u32; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u64; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: char; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: isize; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i8; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i16; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i32; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i64; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: usize; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u8; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u16; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u32; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u64; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: char; //~ ERROR lifetime arguments are not allowed on builtin type\n \n }"}, {"sha": "b10471eccee68b0f20b8486139026e9d72d1206a", "filename": "src/test/ui/typeck/prim-with-args.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,28 +1,28 @@\n // run-rustfix\n fn main() {\n \n-let _x: isize<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i8<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i16<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i32<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: i64<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: usize<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u8<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u16<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u32<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: u64<isize>; //~ ERROR type arguments are not allowed on this type\n-let _x: char<isize>; //~ ERROR type arguments are not allowed on this type\n+let _x: isize<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i8<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i16<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i32<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: i64<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: usize<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u8<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u16<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u32<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: u64<isize>; //~ ERROR type arguments are not allowed on builtin type\n+let _x: char<isize>; //~ ERROR type arguments are not allowed on builtin type\n \n-let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed on this type\n-let _x: char<'static>; //~ ERROR lifetime arguments are not allowed on this type\n+let _x: isize<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i8<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i16<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i32<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: i64<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: usize<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u8<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u16<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u32<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: u64<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n+let _x: char<'static>; //~ ERROR lifetime arguments are not allowed on builtin type\n \n }"}, {"sha": "2ddad5ad71e4619364c10b63a4416d96f2c57661", "filename": "src/test/ui/typeck/prim-with-args.stderr", "status": "modified", "additions": 44, "deletions": 44, "changes": 88, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftypeck%2Fprim-with-args.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,304 +1,304 @@\n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `isize`\n   --> $DIR/prim-with-args.rs:4:15\n    |\n LL | let _x: isize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `isize`\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<isize>;\n LL + let _x: isize;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i8`\n   --> $DIR/prim-with-args.rs:5:12\n    |\n LL | let _x: i8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i8`\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<isize>;\n LL + let _x: i8;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i16`\n   --> $DIR/prim-with-args.rs:6:13\n    |\n LL | let _x: i16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i16`\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<isize>;\n LL + let _x: i16;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i32`\n   --> $DIR/prim-with-args.rs:7:13\n    |\n LL | let _x: i32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i32`\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<isize>;\n LL + let _x: i32;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `i64`\n   --> $DIR/prim-with-args.rs:8:13\n    |\n LL | let _x: i64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i64`\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<isize>;\n LL + let _x: i64;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `usize`\n   --> $DIR/prim-with-args.rs:9:15\n    |\n LL | let _x: usize<isize>;\n    |         ----- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<isize>;\n LL + let _x: usize;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u8`\n   --> $DIR/prim-with-args.rs:10:12\n    |\n LL | let _x: u8<isize>;\n    |         -- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<isize>;\n LL + let _x: u8;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u16`\n   --> $DIR/prim-with-args.rs:11:13\n    |\n LL | let _x: u16<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u16`\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<isize>;\n LL + let _x: u16;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u32`\n   --> $DIR/prim-with-args.rs:12:13\n    |\n LL | let _x: u32<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<isize>;\n LL + let _x: u32;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `u64`\n   --> $DIR/prim-with-args.rs:13:13\n    |\n LL | let _x: u64<isize>;\n    |         --- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u64`\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<isize>;\n LL + let _x: u64;\n    |\n \n-error[E0109]: type arguments are not allowed on this type\n+error[E0109]: type arguments are not allowed on builtin type `char`\n   --> $DIR/prim-with-args.rs:14:14\n    |\n LL | let _x: char<isize>;\n    |         ---- ^^^^^ type argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `char`\n    |\n help: primitive type `char` doesn't have generic parameters\n    |\n LL - let _x: char<isize>;\n LL + let _x: char;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `isize`\n   --> $DIR/prim-with-args.rs:16:15\n    |\n LL | let _x: isize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `isize`\n    |\n help: primitive type `isize` doesn't have generic parameters\n    |\n LL - let _x: isize<'static>;\n LL + let _x: isize;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i8`\n   --> $DIR/prim-with-args.rs:17:12\n    |\n LL | let _x: i8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i8`\n    |\n help: primitive type `i8` doesn't have generic parameters\n    |\n LL - let _x: i8<'static>;\n LL + let _x: i8;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i16`\n   --> $DIR/prim-with-args.rs:18:13\n    |\n LL | let _x: i16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i16`\n    |\n help: primitive type `i16` doesn't have generic parameters\n    |\n LL - let _x: i16<'static>;\n LL + let _x: i16;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i32`\n   --> $DIR/prim-with-args.rs:19:13\n    |\n LL | let _x: i32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i32`\n    |\n help: primitive type `i32` doesn't have generic parameters\n    |\n LL - let _x: i32<'static>;\n LL + let _x: i32;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `i64`\n   --> $DIR/prim-with-args.rs:20:13\n    |\n LL | let _x: i64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `i64`\n    |\n help: primitive type `i64` doesn't have generic parameters\n    |\n LL - let _x: i64<'static>;\n LL + let _x: i64;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `usize`\n   --> $DIR/prim-with-args.rs:21:15\n    |\n LL | let _x: usize<'static>;\n    |         ----- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |\n LL - let _x: usize<'static>;\n LL + let _x: usize;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u8`\n   --> $DIR/prim-with-args.rs:22:12\n    |\n LL | let _x: u8<'static>;\n    |         -- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u8`\n    |\n help: primitive type `u8` doesn't have generic parameters\n    |\n LL - let _x: u8<'static>;\n LL + let _x: u8;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u16`\n   --> $DIR/prim-with-args.rs:23:13\n    |\n LL | let _x: u16<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u16`\n    |\n help: primitive type `u16` doesn't have generic parameters\n    |\n LL - let _x: u16<'static>;\n LL + let _x: u16;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u32`\n   --> $DIR/prim-with-args.rs:24:13\n    |\n LL | let _x: u32<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u32`\n    |\n help: primitive type `u32` doesn't have generic parameters\n    |\n LL - let _x: u32<'static>;\n LL + let _x: u32;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `u64`\n   --> $DIR/prim-with-args.rs:25:13\n    |\n LL | let _x: u64<'static>;\n    |         --- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `u64`\n    |\n help: primitive type `u64` doesn't have generic parameters\n    |\n LL - let _x: u64<'static>;\n LL + let _x: u64;\n    |\n \n-error[E0109]: lifetime arguments are not allowed on this type\n+error[E0109]: lifetime arguments are not allowed on builtin type `char`\n   --> $DIR/prim-with-args.rs:26:14\n    |\n LL | let _x: char<'static>;\n    |         ---- ^^^^^^^ lifetime argument not allowed\n    |         |\n-   |         not allowed on this type\n+   |         not allowed on builtin type `char`\n    |\n help: primitive type `char` doesn't have generic parameters\n    |"}, {"sha": "4ab80d944a56fd98fd6ff3e1ab211c175b56c276", "filename": "src/test/ui/usize-generic-argument-parent.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.rs?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,5 +1,5 @@\n fn foo() {\n-    let x: usize<foo>; //~ ERROR const arguments are not allowed on this type\n+    let x: usize<foo>; //~ ERROR const arguments are not allowed on builtin type `usize`\n }\n \n fn main() {}"}, {"sha": "131c476aa55c0c2ba808c918af3feb00f023c690", "filename": "src/test/ui/usize-generic-argument-parent.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fusize-generic-argument-parent.stderr?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,10 +1,10 @@\n-error[E0109]: const arguments are not allowed on this type\n+error[E0109]: const arguments are not allowed on builtin type `usize`\n   --> $DIR/usize-generic-argument-parent.rs:2:18\n    |\n LL |     let x: usize<foo>;\n    |            ----- ^^^ const argument not allowed\n    |            |\n-   |            not allowed on this type\n+   |            not allowed on builtin type `usize`\n    |\n help: primitive type `usize` doesn't have generic parameters\n    |"}, {"sha": "cef78cc3b336e44c5c9a4351166223cd87a23793", "filename": "triagebot.toml", "status": "modified", "additions": 10, "deletions": 3, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/e605a88441e5f6092194c914912142db635dfe21/triagebot.toml", "raw_url": "https://github.com/rust-lang/rust/raw/e605a88441e5f6092194c914912142db635dfe21/triagebot.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/triagebot.toml?ref=e605a88441e5f6092194c914912142db635dfe21", "patch": "@@ -1,14 +1,21 @@\n [relabel]\n allow-unauthenticated = [\n-    \"C-*\", \"A-*\", \"E-*\", \"NLL-*\", \"O-*\", \"S-*\", \"T-*\", \"WG-*\", \"F-*\",\n+    \"A-*\",\n+    \"C-*\",\n     \"D-*\",\n+    \"E-*\",\n+    \"F-*\",\n+    \"I-*\",\n+    \"NLL-*\",\n+    \"O-*\",\n+    \"S-*\",\n+    \"T-*\",\n+    \"WG-*\",\n     \"needs-fcp\",\n     \"relnotes\",\n     \"requires-nightly\",\n     \"regression-*\",\n     \"perf-*\",\n-    # I-* without I-*nominated\n-    \"I-*\", \"!I-*nominated\",\n     \"AsyncAwait-OnDeck\",\n ]\n "}]}