{"sha": "d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ4YjY5MTlkNGZjZDFiNjk0OTQyNzhiYjQ0NzJlMDk1ZTJjZDUyZjM=", "commit": {"author": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-01-31T10:32:39Z"}, "committer": {"name": "Huon Wilson", "email": "dbau.pp+github@gmail.com", "date": "2014-02-02T03:19:05Z"}, "message": "std::fmt: prepare to convert the formatting traits to methods, and work\naround the lack of UFCS.\n\nThe further work is pending a snapshot, to avoid putting #[cfg(stage0)]\nattributes on all the traits and duplicating them.", "tree": {"sha": "92da37db20ade45e9fd1e86c599b5caceb87d533", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/92da37db20ade45e9fd1e86c599b5caceb87d533"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "comment_count": 4, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "html_url": "https://github.com/rust-lang/rust/commit/d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d8b6919d4fcd1b69494278bb4472e095e2cd52f3/comments", "author": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "committer": {"login": "huonw", "id": 1203825, "node_id": "MDQ6VXNlcjEyMDM4MjU=", "avatar_url": "https://avatars.githubusercontent.com/u/1203825?v=4", "gravatar_id": "", "url": "https://api.github.com/users/huonw", "html_url": "https://github.com/huonw", "followers_url": "https://api.github.com/users/huonw/followers", "following_url": "https://api.github.com/users/huonw/following{/other_user}", "gists_url": "https://api.github.com/users/huonw/gists{/gist_id}", "starred_url": "https://api.github.com/users/huonw/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/huonw/subscriptions", "organizations_url": "https://api.github.com/users/huonw/orgs", "repos_url": "https://api.github.com/users/huonw/repos", "events_url": "https://api.github.com/users/huonw/events{/privacy}", "received_events_url": "https://api.github.com/users/huonw/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "003ce502350ed1e374b740ee2d719e500c165615", "url": "https://api.github.com/repos/rust-lang/rust/commits/003ce502350ed1e374b740ee2d719e500c165615", "html_url": "https://github.com/rust-lang/rust/commit/003ce502350ed1e374b740ee2d719e500c165615"}], "stats": {"total": 47, "additions": 40, "deletions": 7}, "files": [{"sha": "14bf0206c287a652253315dafb66ee82e66ee20e", "filename": "src/libstd/fmt/mod.rs", "status": "modified", "additions": 35, "deletions": 0, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/d8b6919d4fcd1b69494278bb4472e095e2cd52f3/src%2Flibstd%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b6919d4fcd1b69494278bb4472e095e2cd52f3/src%2Flibstd%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffmt%2Fmod.rs?ref=d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "patch": "@@ -606,6 +606,41 @@ pub trait LowerExp { fn fmt(&Self, &mut Formatter); }\n #[allow(missing_doc)]\n pub trait UpperExp { fn fmt(&Self, &mut Formatter); }\n \n+// FIXME #11938 - UFCS would make us able call the above methods\n+// directly Show::show(x, fmt).\n+\n+// FIXME(huonw's WIP): this is a intermediate state waiting for a\n+// snapshot (at the time of writing we're at 2014-01-20 b6400f9), to\n+// be able to make the `fmt` functions into normal methods and have\n+// `format!()` still work.\n+macro_rules! uniform_fn_call_workaround {\n+    ($( $name: ident, $trait_: ident; )*) => {\n+        $(\n+            #[doc(hidden)]\n+            pub fn $name<T: $trait_>(x: &T, fmt: &mut Formatter) {\n+                $trait_::fmt(x, fmt)\n+            }\n+            )*\n+    }\n+}\n+uniform_fn_call_workaround! {\n+    secret_show, Show;\n+    secret_bool, Bool;\n+    secret_char, Char;\n+    secret_signed, Signed;\n+    secret_unsigned, Unsigned;\n+    secret_octal, Octal;\n+    secret_binary, Binary;\n+    secret_lower_hex, LowerHex;\n+    secret_upper_hex, UpperHex;\n+    secret_string, String;\n+    secret_poly, Poly;\n+    secret_pointer, Pointer;\n+    secret_float, Float;\n+    secret_lower_exp, LowerExp;\n+    secret_upper_exp, UpperExp;\n+}\n+\n /// The `write` function takes an output stream, a precompiled format string,\n /// and a list of arguments. The arguments will be formatted according to the\n /// specified format string into the output stream provided."}, {"sha": "1893cc0c722a99d3d34ef844c47d7eb3a424c89c", "filename": "src/libsyntax/ext/format.rs", "status": "modified", "additions": 5, "deletions": 7, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/d8b6919d4fcd1b69494278bb4472e095e2cd52f3/src%2Flibsyntax%2Fext%2Fformat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d8b6919d4fcd1b69494278bb4472e095e2cd52f3/src%2Flibsyntax%2Fext%2Fformat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fext%2Fformat.rs?ref=d8b6919d4fcd1b69494278bb4472e095e2cd52f3", "patch": "@@ -702,7 +702,7 @@ impl<'a> Context<'a> {\n             Named(ref s) => self.name_types.get(s)\n         };\n \n-        let fmt_trait = match *ty {\n+        let fmt_fn = match *ty {\n             Known(ref tyname) => {\n                 match tyname.as_slice() {\n                     \"\"  => \"secret_show\",\n@@ -721,10 +721,9 @@ impl<'a> Context<'a> {\n                     \"x\" => \"secret_lower_hex\",\n                     \"X\" => \"secret_upper_hex\",\n                     _ => {\n-                        self.ecx.span_err(sp,\n-                                          format!(\"unknown format trait `{}`\",\n-                                                  *tyname));\n-                        \"Dummy\"\n+                        self.ecx.span_err(sp, format!(\"unknown format trait `{}`\",\n+                                                      *tyname));\n+                        \"dummy\"\n                     }\n                 }\n             }\n@@ -747,8 +746,7 @@ impl<'a> Context<'a> {\n         let format_fn = self.ecx.path_global(sp, ~[\n                 self.ecx.ident_of(\"std\"),\n                 self.ecx.ident_of(\"fmt\"),\n-                self.ecx.ident_of(fmt_trait),\n-                self.ecx.ident_of(\"fmt\"),\n+                self.ecx.ident_of(fmt_fn),\n             ]);\n         self.ecx.expr_call_global(sp, ~[\n                 self.ecx.ident_of(\"std\"),"}]}