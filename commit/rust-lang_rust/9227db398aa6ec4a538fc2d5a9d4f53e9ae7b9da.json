{"sha": "9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMjdkYjM5OGFhNmVjNGE1MzhmYzJkNWE5ZDRmNTNlOWFlN2I5ZGE=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:14:39Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2015-01-21T17:14:39Z"}, "message": "rollup merge of #21392: japaric/iter\n\ncloses #20953\ncloses #21361\n\n---\n\nIn the future, we will likely derive these `impl`s via syntax extensions or using compiler magic (see #20617). For the time being we can use these manual `impl`s.\n\nr? @aturon\ncc @burntsushi @Kroisse", "tree": {"sha": "0d7c55ee7a31fd538ecd591d6551fa43762d9583", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0d7c55ee7a31fd538ecd591d6551fa43762d9583"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "html_url": "https://github.com/rust-lang/rust/commit/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ad2c3e8dbc53eee30bbbcfa1a0927f58d5ad8536", "url": "https://api.github.com/repos/rust-lang/rust/commits/ad2c3e8dbc53eee30bbbcfa1a0927f58d5ad8536", "html_url": "https://github.com/rust-lang/rust/commit/ad2c3e8dbc53eee30bbbcfa1a0927f58d5ad8536"}, {"sha": "00cddb068c4cb17a91cca646103e0fba8c0a8077", "url": "https://api.github.com/repos/rust-lang/rust/commits/00cddb068c4cb17a91cca646103e0fba8c0a8077", "html_url": "https://github.com/rust-lang/rust/commit/00cddb068c4cb17a91cca646103e0fba8c0a8077"}], "stats": {"total": 71, "additions": 71, "deletions": 0}, "files": [{"sha": "92ac41e2058a3802712c3b301ac5932e9ea39236", "filename": "src/liballoc/boxed.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Fliballoc%2Fboxed.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Fliballoc%2Fboxed.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fboxed.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -18,6 +18,7 @@ use core::cmp::{PartialEq, PartialOrd, Eq, Ord, Ordering};\n use core::default::Default;\n use core::fmt;\n use core::hash::{self, Hash};\n+use core::iter::Iterator;\n use core::marker::Sized;\n use core::mem;\n use core::option::Option;\n@@ -187,6 +188,20 @@ impl<T: ?Sized> DerefMut for Box<T> {\n     fn deref_mut(&mut self) -> &mut T { &mut **self }\n }\n \n+// FIXME(#21363) remove `old_impl_check` when bug is fixed\n+#[old_impl_check]\n+impl<'a, T> Iterator for Box<Iterator<Item=T> + 'a> {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> {\n+        (**self).next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (**self).size_hint()\n+    }\n+}\n+\n #[cfg(test)]\n mod test {\n     #[test]"}, {"sha": "47715fe9e5dbe087babeb9b22a7efc55eea53577", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -70,6 +70,8 @@\n #![feature(lang_items, unsafe_destructor)]\n #![feature(box_syntax)]\n #![feature(optin_builtin_traits)]\n+// FIXME(#21363) remove `old_impl_check` when bug is fixed\n+#![feature(old_impl_check)]\n #![allow(unknown_features)] #![feature(int_uint)]\n \n #[macro_use]"}, {"sha": "2a21ceef7a152d27d9758d32bf5d1cc582860192", "filename": "src/libcore/iter.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Flibcore%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Flibcore%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -99,6 +99,20 @@ pub trait Iterator {\n     fn size_hint(&self) -> (uint, Option<uint>) { (0, None) }\n }\n \n+// FIXME(#21363) remove `old_impl_check` when bug is fixed\n+#[old_impl_check]\n+impl<'a, T> Iterator for &'a mut (Iterator<Item=T> + 'a) {\n+    type Item = T;\n+\n+    fn next(&mut self) -> Option<T> {\n+        (**self).next()\n+    }\n+\n+    fn size_hint(&self) -> (usize, Option<usize>) {\n+        (**self).size_hint()\n+    }\n+}\n+\n /// Conversion from an `Iterator`\n #[stable]\n #[rustc_on_unimplemented=\"a collection of type `{Self}` cannot be \\"}, {"sha": "f7ba07fd2a68a1a9ae6c0b1e3a61c90b26eeb713", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -63,6 +63,8 @@\n #![feature(unboxed_closures)]\n #![allow(unknown_features)] #![feature(int_uint)]\n #![feature(on_unimplemented)]\n+// FIXME(#21363) remove `old_impl_check` when bug is fixed\n+#![feature(old_impl_check)]\n #![deny(missing_docs)]\n \n #[macro_use]"}, {"sha": "647302bbc930467023e17fc4f18c485b49d1a40c", "filename": "src/test/run-pass/issue-20953.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Ftest%2Frun-pass%2Fissue-20953.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Ftest%2Frun-pass%2Fissue-20953.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-20953.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let mut shrinker: Box<Iterator<Item=i32>> = Box::new(vec![1].into_iter());\n+    println!(\"{:?}\", shrinker.next());\n+    for v in shrinker { assert!(false); }\n+\n+    let mut shrinker: &mut Iterator<Item=i32> = &mut vec![1].into_iter();\n+    println!(\"{:?}\", shrinker.next());\n+    for v in shrinker { assert!(false); }\n+}"}, {"sha": "bb20b3a321569a8f2f24acf940002350b06c56a1", "filename": "src/test/run-pass/issue-21361.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Ftest%2Frun-pass%2Fissue-21361.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da/src%2Ftest%2Frun-pass%2Fissue-21361.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fissue-21361.rs?ref=9227db398aa6ec4a538fc2d5a9d4f53e9ae7b9da", "patch": "@@ -0,0 +1,19 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+fn main() {\n+    let v = vec![1, 2, 3];\n+    let boxed: Box<Iterator<Item=i32>> = Box::new(v.into_iter());\n+    assert_eq!(boxed.max(), Some(3));\n+\n+    let v = vec![1, 2, 3];\n+    let boxed: &mut Iterator<Item=i32> = &mut v.into_iter();\n+    assert_eq!(boxed.max(), Some(3));\n+}"}]}