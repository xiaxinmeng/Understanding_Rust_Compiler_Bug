{"sha": "ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "node_id": "MDY6Q29tbWl0NzI0NzEyOmVhNWY4MjkzMDdjM2E0YmE2MmY2ZDgzZTNjM2NmMGI2YWZmYzM0ZjA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-01T08:53:41Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2013-08-01T08:54:34Z"}, "message": "Resolve globals having different addresses across crates\n\n* All globals marked as `pub` won't have the `internal` linkage type set\n* All global references across crates are forced to use the address of the\n  global in the other crate via an external reference.", "tree": {"sha": "a48be5509cc743add132ecbfb71a366881884d44", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a48be5509cc743add132ecbfb71a366881884d44"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "html_url": "https://github.com/rust-lang/rust/commit/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9", "html_url": "https://github.com/rust-lang/rust/commit/8ec70ae5de0e33ab62732c59b0b2b0620cb8dce9"}], "stats": {"total": 75, "additions": 58, "deletions": 17}, "files": [{"sha": "fd875451b22ea4aa549a6c0af9d9865ba9492907", "filename": "src/librustc/middle/trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fbase.rs?ref=ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "patch": "@@ -2460,7 +2460,7 @@ pub fn get_item_val(ccx: @mut CrateContext, id: ast::NodeId) -> ValueRef {\n                             // LLVM type is not fully determined by the Rust type.\n                             let v = consts::const_expr(ccx, expr);\n                             ccx.const_values.insert(id, v);\n-                            exprt = m == ast::m_mutbl;\n+                            exprt = (m == ast::m_mutbl || i.vis == ast::public);\n \n                             unsafe {\n                                 let llty = llvm::LLVMTypeOf(v);"}, {"sha": "8e832d9ff3ddacc5d73dc986d657317dbe2ec1f5", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 7, "deletions": 16, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "patch": "@@ -115,7 +115,7 @@ return type, such as `while` loops or assignments (`a = b`).\n \n \n use back::abi;\n-use lib::llvm::{ValueRef, llvm};\n+use lib::llvm::{ValueRef, llvm, SetLinkage, ExternalLinkage};\n use lib;\n use metadata::csearch;\n use middle::trans::_match;\n@@ -132,7 +132,6 @@ use middle::trans::consts;\n use middle::trans::controlflow;\n use middle::trans::datum::*;\n use middle::trans::debuginfo;\n-use middle::trans::inline;\n use middle::trans::machine;\n use middle::trans::meth;\n use middle::trans::tvec;\n@@ -148,7 +147,6 @@ use middle::trans::machine::llsize_of;\n \n use middle::trans::type_::Type;\n \n-use std::cast::transmute;\n use std::hashmap::HashMap;\n use std::vec;\n use syntax::print::pprust::{expr_to_str};\n@@ -936,20 +934,10 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::expr) -> DatumBlock {\n         //! Translates a reference to a path.\n \n         let _icx = push_ctxt(\"trans_def_lvalue\");\n-        let ccx = bcx.ccx();\n         match def {\n             ast::def_static(did, _) => {\n                 let const_ty = expr_ty(bcx, ref_expr);\n \n-                fn get_did(ccx: @mut CrateContext, did: ast::def_id)\n-                    -> ast::def_id {\n-                    if did.crate != ast::LOCAL_CRATE {\n-                        inline::maybe_instantiate_inline(ccx, did)\n-                    } else {\n-                        did\n-                    }\n-                }\n-\n                 fn get_val(bcx: @mut Block, did: ast::def_id, const_ty: ty::t)\n                            -> ValueRef {\n                     // For external constants, we don't inline.\n@@ -976,16 +964,19 @@ fn trans_lvalue_unadjusted(bcx: @mut Block, expr: @ast::expr) -> DatumBlock {\n                             let symbol = csearch::get_symbol(\n                                 bcx.ccx().sess.cstore,\n                                 did);\n-                            let llval = llvm::LLVMAddGlobal( bcx.ccx().llmod, llty.to_ref(),\n-                                transmute::<&u8,*i8>(&symbol[0]));\n+                            let llval = do symbol.as_c_str |buf| {\n+                                llvm::LLVMAddGlobal(bcx.ccx().llmod,\n+                                                    llty.to_ref(),\n+                                                    buf)\n+                            };\n+                            SetLinkage(llval, ExternalLinkage);\n                             let extern_const_values = &mut bcx.ccx().extern_const_values;\n                             extern_const_values.insert(did, llval);\n                             llval\n                         }\n                     }\n                 }\n \n-                let did = get_did(ccx, did);\n                 let val = get_val(bcx, did, const_ty);\n                 DatumBlock {\n                     bcx: bcx,"}, {"sha": "3a05462d856da20c25c56543abbaa85026b19e9d", "filename": "src/test/auxiliary/xcrate_static_addresses.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fauxiliary%2Fxcrate_static_addresses.rs?ref=ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+pub static global: int = 3;\n+\n+pub fn verify_same(a: &'static int) {\n+    let a = a as *int as uint;\n+    let b = &global as *int as uint;\n+    assert_eq!(a, b);\n+}\n+\n+condition!{ pub test: int -> (); }\n+\n+pub fn raise() {\n+    test::cond.raise(3);\n+}"}, {"sha": "059a6f75ac82e2cbbdc92dc96bc64bb826dc0f36", "filename": "src/test/run-pass/xcrate-static-addresses.rs", "status": "added", "additions": 27, "deletions": 0, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fxcrate-static-addresses.rs?ref=ea5f829307c3a4ba62f6d83e3c3cf0b6affc34f0", "patch": "@@ -0,0 +1,27 @@\n+// Copyright 2013 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// xfail-fast\n+// aux-build:xcrate_static_addresses.rs\n+\n+extern mod xcrate_static_addresses;\n+\n+use other = xcrate_static_addresses;\n+\n+pub fn main() {\n+    other::verify_same(&other::global);\n+\n+    // Previously this fail'd because there were two addresses that were being\n+    // used when declaring constants.\n+    do other::test::cond.trap(|_| {\n+    }).inside {\n+        other::raise();\n+    }\n+}"}]}