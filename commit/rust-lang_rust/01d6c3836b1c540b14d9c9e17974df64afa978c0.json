{"sha": "01d6c3836b1c540b14d9c9e17974df64afa978c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjAxZDZjMzgzNmIxYzU0MGIxNGQ5YzllMTc5NzRkZjY0YWZhOTc4YzA=", "commit": {"author": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T17:10:46Z"}, "committer": {"name": "Aleksey Kladov", "email": "aleksey.kladov@gmail.com", "date": "2020-07-30T17:10:46Z"}, "message": "Dead code", "tree": {"sha": "3c62efe45e37bc960d39aabecdee84b9eef4a2d9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3c62efe45e37bc960d39aabecdee84b9eef4a2d9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/01d6c3836b1c540b14d9c9e17974df64afa978c0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/01d6c3836b1c540b14d9c9e17974df64afa978c0", "html_url": "https://github.com/rust-lang/rust/commit/01d6c3836b1c540b14d9c9e17974df64afa978c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/01d6c3836b1c540b14d9c9e17974df64afa978c0/comments", "author": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matklad", "id": 1711539, "node_id": "MDQ6VXNlcjE3MTE1Mzk=", "avatar_url": "https://avatars.githubusercontent.com/u/1711539?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matklad", "html_url": "https://github.com/matklad", "followers_url": "https://api.github.com/users/matklad/followers", "following_url": "https://api.github.com/users/matklad/following{/other_user}", "gists_url": "https://api.github.com/users/matklad/gists{/gist_id}", "starred_url": "https://api.github.com/users/matklad/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matklad/subscriptions", "organizations_url": "https://api.github.com/users/matklad/orgs", "repos_url": "https://api.github.com/users/matklad/repos", "events_url": "https://api.github.com/users/matklad/events{/privacy}", "received_events_url": "https://api.github.com/users/matklad/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "71a4d325620ede42e8e6fad55ab95430eb47e1fd", "url": "https://api.github.com/repos/rust-lang/rust/commits/71a4d325620ede42e8e6fad55ab95430eb47e1fd", "html_url": "https://github.com/rust-lang/rust/commit/71a4d325620ede42e8e6fad55ab95430eb47e1fd"}], "stats": {"total": 181, "additions": 76, "deletions": 105}, "files": [{"sha": "e898c9181efcf5b919500e8ba90f2d1baafe3166", "filename": "crates/ra_syntax/src/ast/generated/nodes.rs", "status": "modified", "additions": 76, "deletions": 102, "changes": 178, "blob_url": "https://github.com/rust-lang/rust/blob/01d6c3836b1c540b14d9c9e17974df64afa978c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/01d6c3836b1c540b14d9c9e17974df64afa978c0/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fra_syntax%2Fsrc%2Fast%2Fgenerated%2Fnodes.rs?ref=01d6c3836b1c540b14d9c9e17974df64afa978c0", "patch": "@@ -502,6 +502,23 @@ impl ConstParam {\n     pub fn default_val(&self) -> Option<Expr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct Literal {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl Literal {}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub struct TokenTree {\n+    pub(crate) syntax: SyntaxNode,\n+}\n+impl TokenTree {\n+    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n+    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n+    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n+    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n+    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n+    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct ParenType {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -908,11 +925,6 @@ pub struct BinExpr {\n impl ast::AttrsOwner for BinExpr {}\n impl BinExpr {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct Literal {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl Literal {}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MatchExpr {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1131,18 +1143,6 @@ impl TuplePat {\n     pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct TokenTree {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl TokenTree {\n-    pub fn l_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['(']) }\n-    pub fn r_paren_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![')']) }\n-    pub fn l_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['{']) }\n-    pub fn r_curly_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['}']) }\n-    pub fn l_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T!['[']) }\n-    pub fn r_brack_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![']']) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub struct MacroDef {\n     pub(crate) syntax: SyntaxNode,\n }\n@@ -1263,16 +1263,6 @@ impl ConstArg {\n     pub fn block_expr(&self) -> Option<BlockExpr> { support::child(&self.syntax) }\n }\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub struct MetaItem {\n-    pub(crate) syntax: SyntaxNode,\n-}\n-impl MetaItem {\n-    pub fn path(&self) -> Option<Path> { support::child(&self.syntax) }\n-    pub fn eq_token(&self) -> Option<SyntaxToken> { support::token(&self.syntax, T![=]) }\n-    pub fn attr_input(&self) -> Option<AttrInput> { support::child(&self.syntax) }\n-    pub fn nested_meta_items(&self) -> AstChildren<MetaItem> { support::children(&self.syntax) }\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Item {\n     Const(Const),\n     Enum(Enum),\n@@ -1388,17 +1378,17 @@ pub enum GenericParam {\n }\n impl ast::AttrsOwner for GenericParam {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n+pub enum AttrInput {\n+    Literal(Literal),\n+    TokenTree(TokenTree),\n+}\n+#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum Stmt {\n     LetStmt(LetStmt),\n     ExprStmt(ExprStmt),\n }\n impl ast::AttrsOwner for Stmt {}\n #[derive(Debug, Clone, PartialEq, Eq, Hash)]\n-pub enum AttrInput {\n-    Literal(Literal),\n-    TokenTree(TokenTree),\n-}\n-#[derive(Debug, Clone, PartialEq, Eq, Hash)]\n pub enum AdtDef {\n     Struct(Struct),\n     Enum(Enum),\n@@ -1892,6 +1882,28 @@ impl AstNode for ConstParam {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n+impl AstNode for Literal {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n+impl AstNode for TokenTree {\n+    fn can_cast(kind: SyntaxKind) -> bool { kind == TOKEN_TREE }\n+    fn cast(syntax: SyntaxNode) -> Option<Self> {\n+        if Self::can_cast(syntax.kind()) {\n+            Some(Self { syntax })\n+        } else {\n+            None\n+        }\n+    }\n+    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n+}\n impl AstNode for ParenType {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == PAREN_TYPE }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2354,17 +2366,6 @@ impl AstNode for BinExpr {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for Literal {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == LITERAL }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for MatchExpr {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MATCH_EXPR }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2629,17 +2630,6 @@ impl AstNode for TuplePat {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for TokenTree {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == TOKEN_TREE }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl AstNode for MacroDef {\n     fn can_cast(kind: SyntaxKind) -> bool { kind == MACRO_DEF }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n@@ -2772,17 +2762,6 @@ impl AstNode for ConstArg {\n     }\n     fn syntax(&self) -> &SyntaxNode { &self.syntax }\n }\n-impl AstNode for MetaItem {\n-    fn can_cast(kind: SyntaxKind) -> bool { kind == META_ITEM }\n-    fn cast(syntax: SyntaxNode) -> Option<Self> {\n-        if Self::can_cast(syntax.kind()) {\n-            Some(Self { syntax })\n-        } else {\n-            None\n-        }\n-    }\n-    fn syntax(&self) -> &SyntaxNode { &self.syntax }\n-}\n impl From<Const> for Item {\n     fn from(node: Const) -> Item { Item::Const(node) }\n }\n@@ -3363,59 +3342,59 @@ impl AstNode for GenericParam {\n         }\n     }\n }\n-impl From<LetStmt> for Stmt {\n-    fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n+impl From<Literal> for AttrInput {\n+    fn from(node: Literal) -> AttrInput { AttrInput::Literal(node) }\n }\n-impl From<ExprStmt> for Stmt {\n-    fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n+impl From<TokenTree> for AttrInput {\n+    fn from(node: TokenTree) -> AttrInput { AttrInput::TokenTree(node) }\n }\n-impl AstNode for Stmt {\n+impl AstNode for AttrInput {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            LET_STMT | EXPR_STMT => true,\n+            LITERAL | TOKEN_TREE => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n-            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n+            LITERAL => AttrInput::Literal(Literal { syntax }),\n+            TOKEN_TREE => AttrInput::TokenTree(TokenTree { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            Stmt::LetStmt(it) => &it.syntax,\n-            Stmt::ExprStmt(it) => &it.syntax,\n+            AttrInput::Literal(it) => &it.syntax,\n+            AttrInput::TokenTree(it) => &it.syntax,\n         }\n     }\n }\n-impl From<Literal> for AttrInput {\n-    fn from(node: Literal) -> AttrInput { AttrInput::Literal(node) }\n+impl From<LetStmt> for Stmt {\n+    fn from(node: LetStmt) -> Stmt { Stmt::LetStmt(node) }\n }\n-impl From<TokenTree> for AttrInput {\n-    fn from(node: TokenTree) -> AttrInput { AttrInput::TokenTree(node) }\n+impl From<ExprStmt> for Stmt {\n+    fn from(node: ExprStmt) -> Stmt { Stmt::ExprStmt(node) }\n }\n-impl AstNode for AttrInput {\n+impl AstNode for Stmt {\n     fn can_cast(kind: SyntaxKind) -> bool {\n         match kind {\n-            LITERAL | TOKEN_TREE => true,\n+            LET_STMT | EXPR_STMT => true,\n             _ => false,\n         }\n     }\n     fn cast(syntax: SyntaxNode) -> Option<Self> {\n         let res = match syntax.kind() {\n-            LITERAL => AttrInput::Literal(Literal { syntax }),\n-            TOKEN_TREE => AttrInput::TokenTree(TokenTree { syntax }),\n+            LET_STMT => Stmt::LetStmt(LetStmt { syntax }),\n+            EXPR_STMT => Stmt::ExprStmt(ExprStmt { syntax }),\n             _ => return None,\n         };\n         Some(res)\n     }\n     fn syntax(&self) -> &SyntaxNode {\n         match self {\n-            AttrInput::Literal(it) => &it.syntax,\n-            AttrInput::TokenTree(it) => &it.syntax,\n+            Stmt::LetStmt(it) => &it.syntax,\n+            Stmt::ExprStmt(it) => &it.syntax,\n         }\n     }\n }\n@@ -3492,12 +3471,12 @@ impl std::fmt::Display for GenericParam {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Stmt {\n+impl std::fmt::Display for AttrInput {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for AttrInput {\n+impl std::fmt::Display for Stmt {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n@@ -3727,6 +3706,16 @@ impl std::fmt::Display for ConstParam {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n+impl std::fmt::Display for Literal {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n+impl std::fmt::Display for TokenTree {\n+    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n+        std::fmt::Display::fmt(self.syntax(), f)\n+    }\n+}\n impl std::fmt::Display for ParenType {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -3937,11 +3926,6 @@ impl std::fmt::Display for BinExpr {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for Literal {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for MatchExpr {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4062,11 +4046,6 @@ impl std::fmt::Display for TuplePat {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for TokenTree {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}\n impl std::fmt::Display for MacroDef {\n     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n         std::fmt::Display::fmt(self.syntax(), f)\n@@ -4127,8 +4106,3 @@ impl std::fmt::Display for ConstArg {\n         std::fmt::Display::fmt(self.syntax(), f)\n     }\n }\n-impl std::fmt::Display for MetaItem {\n-    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n-        std::fmt::Display::fmt(self.syntax(), f)\n-    }\n-}"}, {"sha": "a97cc80e99231030eaf9762a458bb8d0213af2be", "filename": "xtask/src/codegen/rust.ungram", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/01d6c3836b1c540b14d9c9e17974df64afa978c0/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "raw_url": "https://github.com/rust-lang/rust/raw/01d6c3836b1c540b14d9c9e17974df64afa978c0/xtask%2Fsrc%2Fcodegen%2Frust.ungram", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/xtask%2Fsrc%2Fcodegen%2Frust.ungram?ref=01d6c3836b1c540b14d9c9e17974df64afa978c0", "patch": "@@ -473,9 +473,6 @@ LifetimeArg =\n ConstArg =\n   Literal | BlockExpr BlockExpr\n \n-MetaItem =\n-  Path '=' AttrInput nested_meta_items:MetaItem*\n-\n AdtDef =\n   Struct\n | Enum"}]}