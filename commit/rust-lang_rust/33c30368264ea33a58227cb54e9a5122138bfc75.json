{"sha": "33c30368264ea33a58227cb54e9a5122138bfc75", "node_id": "C_kwDOAAsO6NoAKDMzYzMwMzY4MjY0ZWEzM2E1ODIyN2NiNTRlOWE1MTIyMTM4YmZjNzU", "commit": {"author": {"name": "Matthias Kr\u00fcger", "email": "matthias.krueger@famsik.de", "date": "2023-03-08T20:24:53Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2023-03-08T20:24:53Z"}, "message": "Rollup merge of #108901 - LYF1999:yf/108897, r=lcnr\n\nfix: evaluate with wrong obligation stack\n\nfix #108897\nr? ``@lcnr``", "tree": {"sha": "778e3e6017ecccdd70afbf21c9c67790c4a9d1bc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/778e3e6017ecccdd70afbf21c9c67790c4a9d1bc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/33c30368264ea33a58227cb54e9a5122138bfc75", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJkCO8VCRBK7hj4Ov3rIwAAmFYIAC+IoehHOBkZOKUnlvGA+dFQ\n9Hq5XEFvCwdJ1nXu5l8evKfsNZ2JcxlcMYtVKOnnqmtS0kIDjxRO8KUqJUrm4Q0m\ndMYqOP0ZhAJjpRs0YVClDuSJIDQkmKcQSduWAV1BTrtuvasAWo4Ff786IHDrOzyr\n7GZm0FDoI0pdUK07y7CkIFPlg1zkiGGQLIggmIWqWo2VaqbNPSHT25ngsS1OoMLs\nmLk5edBR0x1y5GbYWTR/YRVIGwCrMm9Ok8UB5hh3Svk4iqBA4Y7ioG+80dg1atfk\nY1o+Oic1c1UOAoQBhBCuP2i+Ln9Xvl9MaNqZ+5aBkIj32B0aIJQn3Qro+gMIk8M=\n=Gg0f\n-----END PGP SIGNATURE-----\n", "payload": "tree 778e3e6017ecccdd70afbf21c9c67790c4a9d1bc\nparent a95943b77dc74f75afe0f9884f56bc3eef2d871e\nparent 204ba3224ef06f99622fd733cdc14afbc5d83c7e\nauthor Matthias Kr\u00fcger <matthias.krueger@famsik.de> 1678307093 +0100\ncommitter GitHub <noreply@github.com> 1678307093 +0100\n\nRollup merge of #108901 - LYF1999:yf/108897, r=lcnr\n\nfix: evaluate with wrong obligation stack\n\nfix #108897\nr? ``@lcnr``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/33c30368264ea33a58227cb54e9a5122138bfc75", "html_url": "https://github.com/rust-lang/rust/commit/33c30368264ea33a58227cb54e9a5122138bfc75", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/33c30368264ea33a58227cb54e9a5122138bfc75/comments", "author": {"login": "matthiaskrgr", "id": 476013, "node_id": "MDQ6VXNlcjQ3NjAxMw==", "avatar_url": "https://avatars.githubusercontent.com/u/476013?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthiaskrgr", "html_url": "https://github.com/matthiaskrgr", "followers_url": "https://api.github.com/users/matthiaskrgr/followers", "following_url": "https://api.github.com/users/matthiaskrgr/following{/other_user}", "gists_url": "https://api.github.com/users/matthiaskrgr/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthiaskrgr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthiaskrgr/subscriptions", "organizations_url": "https://api.github.com/users/matthiaskrgr/orgs", "repos_url": "https://api.github.com/users/matthiaskrgr/repos", "events_url": "https://api.github.com/users/matthiaskrgr/events{/privacy}", "received_events_url": "https://api.github.com/users/matthiaskrgr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "a95943b77dc74f75afe0f9884f56bc3eef2d871e", "url": "https://api.github.com/repos/rust-lang/rust/commits/a95943b77dc74f75afe0f9884f56bc3eef2d871e", "html_url": "https://github.com/rust-lang/rust/commit/a95943b77dc74f75afe0f9884f56bc3eef2d871e"}, {"sha": "204ba3224ef06f99622fd733cdc14afbc5d83c7e", "url": "https://api.github.com/repos/rust-lang/rust/commits/204ba3224ef06f99622fd733cdc14afbc5d83c7e", "html_url": "https://github.com/rust-lang/rust/commit/204ba3224ef06f99622fd733cdc14afbc5d83c7e"}], "stats": {"total": 49, "additions": 47, "deletions": 2}, "files": [{"sha": "48c3b3601b4d3ce5e0a05cedfe11dc5ab1af2333", "filename": "compiler/rustc_trait_selection/src/traits/select/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/33c30368264ea33a58227cb54e9a5122138bfc75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c30368264ea33a58227cb54e9a5122138bfc75/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Fselect%2Fmod.rs?ref=33c30368264ea33a58227cb54e9a5122138bfc75", "patch": "@@ -1083,7 +1083,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                     let mut nested_result = EvaluationResult::EvaluatedToOk;\n                     for obligation in nested_obligations {\n                         nested_result = cmp::max(\n-                            this.evaluate_predicate_recursively(stack.list(), obligation)?,\n+                            this.evaluate_predicate_recursively(previous_stack, obligation)?,\n                             nested_result,\n                         );\n                     }\n@@ -1092,7 +1092,7 @@ impl<'cx, 'tcx> SelectionContext<'cx, 'tcx> {\n                         let obligation = obligation.with(this.tcx(), predicate);\n                         result = cmp::max(\n                             nested_result,\n-                            this.evaluate_trait_predicate_recursively(stack.list(), obligation)?,\n+                            this.evaluate_trait_predicate_recursively(previous_stack, obligation)?,\n                         );\n                     }\n                 }"}, {"sha": "fbbc07b11e74378b35f31b9193238e6f7264f973", "filename": "tests/ui/traits/unsend-future.rs", "status": "added", "additions": 21, "deletions": 0, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/33c30368264ea33a58227cb54e9a5122138bfc75/tests%2Fui%2Ftraits%2Funsend-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/33c30368264ea33a58227cb54e9a5122138bfc75/tests%2Fui%2Ftraits%2Funsend-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Funsend-future.rs?ref=33c30368264ea33a58227cb54e9a5122138bfc75", "patch": "@@ -0,0 +1,21 @@\n+// edition:2021\n+\n+// issue 108897\n+trait Handler {}\n+impl<F, Fut> Handler for F\n+where\n+    Fut: Send,\n+    F: FnOnce() -> Fut,\n+{}\n+\n+fn require_handler<H: Handler>(h: H) {}\n+\n+async fn handler() {\n+    let a = &1 as *const i32;\n+    async {}.await;\n+}\n+\n+fn main() {\n+    require_handler(handler)\n+     //~^ ERROR future cannot be sent between threads safely\n+}"}, {"sha": "4aaa7c4a92426f37d28cc4fa455b466f29498f05", "filename": "tests/ui/traits/unsend-future.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/33c30368264ea33a58227cb54e9a5122138bfc75/tests%2Fui%2Ftraits%2Funsend-future.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/33c30368264ea33a58227cb54e9a5122138bfc75/tests%2Fui%2Ftraits%2Funsend-future.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftraits%2Funsend-future.stderr?ref=33c30368264ea33a58227cb54e9a5122138bfc75", "patch": "@@ -0,0 +1,24 @@\n+error: future cannot be sent between threads safely\n+  --> $DIR/unsend-future.rs:19:21\n+   |\n+LL |     require_handler(handler)\n+   |                     ^^^^^^^ future returned by `handler` is not `Send`\n+   |\n+   = help: within `impl Future<Output = ()>`, the trait `Send` is not implemented for `*const i32`\n+note: future is not `Send` as this value is used across an await\n+  --> $DIR/unsend-future.rs:15:13\n+   |\n+LL |     let a = &1 as *const i32;\n+   |         - has type `*const i32` which is not `Send`\n+LL |     async {}.await;\n+   |             ^^^^^^ await occurs here, with `a` maybe used later\n+LL | }\n+   | - `a` is later dropped here\n+note: required by a bound in `require_handler`\n+  --> $DIR/unsend-future.rs:11:23\n+   |\n+LL | fn require_handler<H: Handler>(h: H) {}\n+   |                       ^^^^^^^ required by this bound in `require_handler`\n+\n+error: aborting due to previous error\n+"}]}