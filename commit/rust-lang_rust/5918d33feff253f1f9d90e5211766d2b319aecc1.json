{"sha": "5918d33feff253f1f9d90e5211766d2b319aecc1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU5MThkMzNmZWZmMjUzZjFmOWQ5MGU1MjExNzY2ZDJiMzE5YWVjYzE=", "commit": {"author": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-01-29T11:50:19Z"}, "committer": {"name": "Eduard Burtescu", "email": "edy.burt@gmail.com", "date": "2015-02-16T14:29:22Z"}, "message": "rust_typeck: remove unnecessary typing of `&[]` as `&'static [T; 0]`.", "tree": {"sha": "d9390ca15a7969f4422b5513760dffa09c9670b1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d9390ca15a7969f4422b5513760dffa09c9670b1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5918d33feff253f1f9d90e5211766d2b319aecc1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5918d33feff253f1f9d90e5211766d2b319aecc1", "html_url": "https://github.com/rust-lang/rust/commit/5918d33feff253f1f9d90e5211766d2b319aecc1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5918d33feff253f1f9d90e5211766d2b319aecc1/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bd9c67e181aaf304767593a239486e07119286cc", "url": "https://api.github.com/repos/rust-lang/rust/commits/bd9c67e181aaf304767593a239486e07119286cc", "html_url": "https://github.com/rust-lang/rust/commit/bd9c67e181aaf304767593a239486e07119286cc"}], "stats": {"total": 26, "additions": 2, "deletions": 24}, "files": [{"sha": "72454046eb94515315f3d637f5c0fb29aeab187d", "filename": "src/librustc/middle/infer/error_reporting.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Ferror_reporting.rs?ref=5918d33feff253f1f9d90e5211766d2b319aecc1", "patch": "@@ -1435,7 +1435,6 @@ impl<'a, 'tcx> ErrorReportingHelpers<'tcx> for InferCtxt<'a, 'tcx> {\n             infer::MiscVariable(_) => \"\".to_string(),\n             infer::PatternRegion(_) => \" for pattern\".to_string(),\n             infer::AddrOfRegion(_) => \" for borrow expression\".to_string(),\n-            infer::AddrOfSlice(_) => \" for slice expression\".to_string(),\n             infer::Autoref(_) => \" for autoref\".to_string(),\n             infer::Coercion(_) => \" for automatic coercion\".to_string(),\n             infer::LateBoundRegion(_, br, infer::FnCall) => {"}, {"sha": "00e377d65fea7830d9820e1e055ff348e0d07404", "filename": "src/librustc/middle/infer/mod.rs", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Finfer%2Fmod.rs?ref=5918d33feff253f1f9d90e5211766d2b319aecc1", "patch": "@@ -247,9 +247,6 @@ pub enum RegionVariableOrigin<'tcx> {\n     // Regions created by `&` operator\n     AddrOfRegion(Span),\n \n-    // Regions created by `&[...]` literal\n-    AddrOfSlice(Span),\n-\n     // Regions created as part of an autoref of a method receiver\n     Autoref(Span),\n \n@@ -1273,7 +1270,6 @@ impl<'tcx> RegionVariableOrigin<'tcx> {\n             MiscVariable(a) => a,\n             PatternRegion(a) => a,\n             AddrOfRegion(a) => a,\n-            AddrOfSlice(a) => a,\n             Autoref(a) => a,\n             Coercion(ref a) => a.span(),\n             EarlyBoundRegion(a, _) => a,\n@@ -1296,7 +1292,6 @@ impl<'tcx> Repr<'tcx> for RegionVariableOrigin<'tcx> {\n             AddrOfRegion(a) => {\n                 format!(\"AddrOfRegion({})\", a.repr(tcx))\n             }\n-            AddrOfSlice(a) => format!(\"AddrOfSlice({})\", a.repr(tcx)),\n             Autoref(a) => format!(\"Autoref({})\", a.repr(tcx)),\n             Coercion(ref a) => format!(\"Coercion({})\", a.repr(tcx)),\n             EarlyBoundRegion(a, b) => {"}, {"sha": "1c15e295ad934dbfd9769da829e9f455455838e4", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 18, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5918d33feff253f1f9d90e5211766d2b319aecc1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=5918d33feff253f1f9d90e5211766d2b319aecc1", "patch": "@@ -3586,24 +3586,8 @@ fn check_expr_with_unifier<'a, 'tcx, F>(fcx: &FnCtxt<'a, 'tcx>,\n             // Finally, borrowck is charged with guaranteeing that the\n             // value whose address was taken can actually be made to live\n             // as long as it needs to live.\n-            match oprnd.node {\n-                // String literals are already, implicitly converted to slices.\n-                //ast::ExprLit(lit) if ast_util::lit_is_str(lit) => fcx.expr_ty(oprnd),\n-                // Empty slices live in static memory.\n-                ast::ExprVec(ref elements) if elements.len() == 0 => {\n-                    // Note: we do not assign a lifetime of\n-                    // static. This is because the resulting type\n-                    // `&'static [T]` would require that T outlives\n-                    // `'static`!\n-                    let region = fcx.infcx().next_region_var(\n-                        infer::AddrOfSlice(expr.span));\n-                    ty::mk_rptr(tcx, tcx.mk_region(region), tm)\n-                }\n-                _ => {\n-                    let region = fcx.infcx().next_region_var(infer::AddrOfRegion(expr.span));\n-                    ty::mk_rptr(tcx, tcx.mk_region(region), tm)\n-                }\n-            }\n+            let region = fcx.infcx().next_region_var(infer::AddrOfRegion(expr.span));\n+            ty::mk_rptr(tcx, tcx.mk_region(region), tm)\n         };\n         fcx.write_ty(id, oprnd_t);\n       }"}]}