{"sha": "693485373b971d1574388b9da785b66c19dc86d2", "node_id": "C_kwDOAAsO6NoAKDY5MzQ4NTM3M2I5NzFkMTU3NDM4OGI5ZGE3ODViNjZjMTlkYzg2ZDI", "commit": {"author": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-09-03T04:57:21Z"}, "committer": {"name": "Michael Goulet", "email": "michael@errs.io", "date": "2022-10-10T05:05:26Z"}, "message": "Point out incompatible closure bounds", "tree": {"sha": "73bade4831cbe9e5993151b205b1cabd341b6c59", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/73bade4831cbe9e5993151b205b1cabd341b6c59"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/693485373b971d1574388b9da785b66c19dc86d2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/693485373b971d1574388b9da785b66c19dc86d2", "html_url": "https://github.com/rust-lang/rust/commit/693485373b971d1574388b9da785b66c19dc86d2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/693485373b971d1574388b9da785b66c19dc86d2/comments", "author": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "compiler-errors", "id": 3674314, "node_id": "MDQ6VXNlcjM2NzQzMTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/3674314?v=4", "gravatar_id": "", "url": "https://api.github.com/users/compiler-errors", "html_url": "https://github.com/compiler-errors", "followers_url": "https://api.github.com/users/compiler-errors/followers", "following_url": "https://api.github.com/users/compiler-errors/following{/other_user}", "gists_url": "https://api.github.com/users/compiler-errors/gists{/gist_id}", "starred_url": "https://api.github.com/users/compiler-errors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/compiler-errors/subscriptions", "organizations_url": "https://api.github.com/users/compiler-errors/orgs", "repos_url": "https://api.github.com/users/compiler-errors/repos", "events_url": "https://api.github.com/users/compiler-errors/events{/privacy}", "received_events_url": "https://api.github.com/users/compiler-errors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7c203e7f89f92598a793c6f6406735c024e7ee", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7c203e7f89f92598a793c6f6406735c024e7ee", "html_url": "https://github.com/rust-lang/rust/commit/1a7c203e7f89f92598a793c6f6406735c024e7ee"}], "stats": {"total": 107, "additions": 107, "deletions": 0}, "files": [{"sha": "4e8baa2dfab6c3d176d6f0ff25a362f234eaa208", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/693485373b971d1574388b9da785b66c19dc86d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693485373b971d1574388b9da785b66c19dc86d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fmod.rs?ref=693485373b971d1574388b9da785b66c19dc86d2", "patch": "@@ -1255,6 +1255,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n                         found_span,\n                         found_trait_ref,\n                         expected_trait_ref,\n+                        obligation.cause.code(),\n                     )\n                 } else {\n                     let (closure_span, found) = found_did"}, {"sha": "fda6a2236b1957b1c81e9580a52b69da6200ab17", "filename": "compiler/rustc_trait_selection/src/traits/error_reporting/suggestions.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/693485373b971d1574388b9da785b66c19dc86d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693485373b971d1574388b9da785b66c19dc86d2/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_trait_selection%2Fsrc%2Ftraits%2Ferror_reporting%2Fsuggestions.rs?ref=693485373b971d1574388b9da785b66c19dc86d2", "patch": "@@ -254,8 +254,15 @@ pub trait TypeErrCtxtExt<'tcx> {\n         found_span: Option<Span>,\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n+        cause: &ObligationCauseCode<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed>;\n \n+    fn note_conflicting_closure_bounds(\n+        &self,\n+        cause: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    );\n+\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,\n@@ -1584,6 +1591,7 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         found_span: Option<Span>,\n         found: ty::PolyTraitRef<'tcx>,\n         expected: ty::PolyTraitRef<'tcx>,\n+        cause: &ObligationCauseCode<'tcx>,\n     ) -> DiagnosticBuilder<'tcx, ErrorGuaranteed> {\n         pub(crate) fn build_fn_sig_ty<'tcx>(\n             infcx: &InferCtxt<'tcx>,\n@@ -1645,9 +1653,68 @@ impl<'tcx> TypeErrCtxtExt<'tcx> for TypeErrCtxt<'_, 'tcx> {\n         let signature_kind = format!(\"{argument_kind} signature\");\n         err.note_expected_found(&signature_kind, expected_str, &signature_kind, found_str);\n \n+        self.note_conflicting_closure_bounds(cause, &mut err);\n+\n         err\n     }\n \n+    // Add a note if there are two `Fn`-family bounds that have conflicting argument\n+    // requirements, which will always cause a closure to have a type error.\n+    fn note_conflicting_closure_bounds(\n+        &self,\n+        cause: &ObligationCauseCode<'tcx>,\n+        err: &mut DiagnosticBuilder<'tcx, ErrorGuaranteed>,\n+    ) {\n+        // First, look for an `ExprBindingObligation`, which means we can get\n+        // the unsubstituted predicate list of the called function. And check\n+        // that the predicate that we failed to satisfy is a `Fn`-like trait.\n+        if let ObligationCauseCode::ExprBindingObligation(def_id, _, _, idx) = cause\n+            && let predicates = self.tcx.predicates_of(def_id).instantiate_identity(self.tcx)\n+            && let Some(pred) = predicates.predicates.get(*idx)\n+            && let ty::PredicateKind::Trait(trait_pred) = pred.kind().skip_binder()\n+            && ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id()).is_some()\n+        {\n+            let expected_self =\n+                self.tcx.anonymize_late_bound_regions(pred.kind().rebind(trait_pred.self_ty()));\n+            let expected_substs = self\n+                .tcx\n+                .anonymize_late_bound_regions(pred.kind().rebind(trait_pred.trait_ref.substs));\n+\n+            // Find another predicate whose self-type is equal to the expected self type,\n+            // but whose substs don't match.\n+            let other_pred = std::iter::zip(&predicates.predicates, &predicates.spans)\n+                .enumerate()\n+                .find(|(other_idx, (pred, _))| match pred.kind().skip_binder() {\n+                    ty::PredicateKind::Trait(trait_pred)\n+                        if ty::ClosureKind::from_def_id(self.tcx, trait_pred.def_id())\n+                            .is_some()\n+                            && other_idx != idx\n+                            // Make sure that the self type matches\n+                            // (i.e. constraining this closure)\n+                            && expected_self\n+                                == self.tcx.anonymize_late_bound_regions(\n+                                    pred.kind().rebind(trait_pred.self_ty()),\n+                                )\n+                            // But the substs don't match (i.e. incompatible args)\n+                            && expected_substs\n+                                != self.tcx.anonymize_late_bound_regions(\n+                                    pred.kind().rebind(trait_pred.trait_ref.substs),\n+                                ) =>\n+                    {\n+                        true\n+                    }\n+                    _ => false,\n+                });\n+            // If we found one, then it's very likely the cause of the error.\n+            if let Some((_, (_, other_pred_span))) = other_pred {\n+                err.span_note(\n+                    *other_pred_span,\n+                    \"closure inferred to have a different signature due to this bound\",\n+                );\n+            }\n+        }\n+    }\n+\n     fn suggest_fully_qualified_path(\n         &self,\n         err: &mut Diagnostic,"}, {"sha": "6bb4098e2bbe5125fc967f298399bb6055e95d31", "filename": "src/test/ui/closures/multiple-fn-bounds.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/693485373b971d1574388b9da785b66c19dc86d2/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/693485373b971d1574388b9da785b66c19dc86d2/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.rs?ref=693485373b971d1574388b9da785b66c19dc86d2", "patch": "@@ -0,0 +1,15 @@\n+fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+    //~^ NOTE required by a bound in `foo`\n+    //~| NOTE required by this bound in `foo`\n+    //~| NOTE closure inferred to have a different signature due to this bound\n+    todo!();\n+}\n+\n+fn main() {\n+    let v = true;\n+    foo(move |x| v);\n+    //~^ ERROR type mismatch in closure arguments\n+    //~| NOTE expected closure signature\n+    //~| NOTE expected due to this\n+    //~| NOTE found signature defined here\n+}"}, {"sha": "eefc123fed7ac3ed07714d9666abfafc89141c6f", "filename": "src/test/ui/closures/multiple-fn-bounds.stderr", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/693485373b971d1574388b9da785b66c19dc86d2/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/693485373b971d1574388b9da785b66c19dc86d2/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fclosures%2Fmultiple-fn-bounds.stderr?ref=693485373b971d1574388b9da785b66c19dc86d2", "patch": "@@ -0,0 +1,24 @@\n+error[E0631]: type mismatch in closure arguments\n+  --> $DIR/multiple-fn-bounds.rs:10:5\n+   |\n+LL |     foo(move |x| v);\n+   |     ^^^ -------- found signature defined here\n+   |     |\n+   |     expected due to this\n+   |\n+   = note: expected closure signature `fn(char) -> _`\n+              found closure signature `for<'a> fn(&'a char) -> _`\n+note: closure inferred to have a different signature due to this bound\n+  --> $DIR/multiple-fn-bounds.rs:1:11\n+   |\n+LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+   |           ^^^^^^^^^^^^^^^^^\n+note: required by a bound in `foo`\n+  --> $DIR/multiple-fn-bounds.rs:1:31\n+   |\n+LL | fn foo<F: Fn(&char) -> bool + Fn(char) -> bool>(f: F) {\n+   |                               ^^^^^^^^^^^^^^^^ required by this bound in `foo`\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0631`."}]}