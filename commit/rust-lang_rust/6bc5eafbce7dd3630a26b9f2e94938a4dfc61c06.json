{"sha": "6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "node_id": "MDY6Q29tbWl0NzI0NzEyOjZiYzVlYWZiY2U3ZGQzNjMwYTI2YjlmMmU5NDkzOGE0ZGZjNjFjMDY=", "commit": {"author": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-02-08T19:31:09Z"}, "committer": {"name": "Eduard-Mihai Burtescu", "email": "edy.burt@gmail.com", "date": "2020-10-21T01:43:56Z"}, "message": "rustc_mir: track inlined callees in SourceScopeData.", "tree": {"sha": "3454affe556960f7a1e59f4dd3f9a5124663b2b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3454affe556960f7a1e59f4dd3f9a5124663b2b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "html_url": "https://github.com/rust-lang/rust/commit/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/comments", "author": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "eddyb", "id": 77424, "node_id": "MDQ6VXNlcjc3NDI0", "avatar_url": "https://avatars.githubusercontent.com/u/77424?v=4", "gravatar_id": "", "url": "https://api.github.com/users/eddyb", "html_url": "https://github.com/eddyb", "followers_url": "https://api.github.com/users/eddyb/followers", "following_url": "https://api.github.com/users/eddyb/following{/other_user}", "gists_url": "https://api.github.com/users/eddyb/gists{/gist_id}", "starred_url": "https://api.github.com/users/eddyb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/eddyb/subscriptions", "organizations_url": "https://api.github.com/users/eddyb/orgs", "repos_url": "https://api.github.com/users/eddyb/repos", "events_url": "https://api.github.com/users/eddyb/events{/privacy}", "received_events_url": "https://api.github.com/users/eddyb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "708fc0b692b4ec7894986369214dc1f13ca33882", "url": "https://api.github.com/repos/rust-lang/rust/commits/708fc0b692b4ec7894986369214dc1f13ca33882", "html_url": "https://github.com/rust-lang/rust/commit/708fc0b692b4ec7894986369214dc1f13ca33882"}], "stats": {"total": 198, "additions": 124, "deletions": 74}, "files": [{"sha": "09bcf4b1d3e11248044bf8b4798f6b5c9b1b699a", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 9, "deletions": 4, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -161,7 +161,7 @@ pub struct Body<'tcx> {\n \n     /// A list of source scopes; these are referenced by statements\n     /// and used for debuginfo. Indexed by a `SourceScope`.\n-    pub source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+    pub source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n \n     /// The yield type of the function, if it is a generator.\n     pub yield_ty: Option<Ty<'tcx>>,\n@@ -244,7 +244,7 @@ impl<'tcx> Body<'tcx> {\n     pub fn new(\n         source: MirSource<'tcx>,\n         basic_blocks: IndexVec<BasicBlock, BasicBlockData<'tcx>>,\n-        source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+        source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n         local_decls: LocalDecls<'tcx>,\n         user_type_annotations: ty::CanonicalUserTypeAnnotations<'tcx>,\n         arg_count: usize,\n@@ -1868,11 +1868,16 @@ rustc_index::newtype_index! {\n     }\n }\n \n-#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable)]\n-pub struct SourceScopeData {\n+#[derive(Clone, Debug, TyEncodable, TyDecodable, HashStable, TypeFoldable)]\n+pub struct SourceScopeData<'tcx> {\n     pub span: Span,\n     pub parent_scope: Option<SourceScope>,\n \n+    /// Whether this scope is the root of a scope tree of another body,\n+    /// inlined into this body by the MIR inliner.\n+    /// `ty::Instance` is the callee, and the `Span` is the call site.\n+    pub inlined: Option<(ty::Instance<'tcx>, Span)>,\n+\n     /// Crate-local information for this source scope, that can't (and\n     /// needn't) be tracked across crates.\n     pub local_data: ClearCrossCrate<SourceScopeLocalData>,"}, {"sha": "6aab54b92748d61c224f23f8f5116355d9e752cd", "filename": "compiler/rustc_middle/src/mir/type_foldable.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Ftype_foldable.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -10,7 +10,6 @@ CloneTypeFoldableAndLiftImpls! {\n     FakeReadCause,\n     RetagKind,\n     SourceScope,\n-    SourceScopeData,\n     SourceScopeLocalData,\n     UserTypeAnnotationIndex,\n }"}, {"sha": "a9049ef02a694cb447782c62a6dcc4d00b0bdab8", "filename": "compiler/rustc_middle/src/mir/visit.rs", "status": "modified", "additions": 31, "deletions": 2, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fvisit.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -85,7 +85,7 @@ macro_rules! make_mir_visitor {\n             }\n \n             fn visit_source_scope_data(&mut self,\n-                                           scope_data: & $($mutability)? SourceScopeData) {\n+                                           scope_data: & $($mutability)? SourceScopeData<'tcx>) {\n                 self.super_source_scope_data(scope_data);\n             }\n \n@@ -317,17 +317,46 @@ macro_rules! make_mir_visitor {\n                 }\n             }\n \n-            fn super_source_scope_data(&mut self, scope_data: & $($mutability)? SourceScopeData) {\n+            fn super_source_scope_data(\n+                &mut self,\n+                scope_data: & $($mutability)? SourceScopeData<'tcx>,\n+            ) {\n                 let SourceScopeData {\n                     span,\n                     parent_scope,\n+                    inlined,\n                     local_data: _,\n                 } = scope_data;\n \n                 self.visit_span(span);\n                 if let Some(parent_scope) = parent_scope {\n                     self.visit_source_scope(parent_scope);\n                 }\n+                if let Some((callee, callsite_span)) = inlined {\n+                    let location = START_BLOCK.start_location();\n+\n+                    self.visit_span(callsite_span);\n+\n+                    let ty::Instance { def: callee_def, substs: callee_substs } = callee;\n+                    match callee_def {\n+                        ty::InstanceDef::Item(_def_id) => {}\n+\n+                        ty::InstanceDef::Intrinsic(_def_id) |\n+                        ty::InstanceDef::VtableShim(_def_id) |\n+                        ty::InstanceDef::ReifyShim(_def_id) |\n+                        ty::InstanceDef::Virtual(_def_id, _) |\n+                        ty::InstanceDef::ClosureOnceShim { call_once: _def_id } |\n+                        ty::InstanceDef::DropGlue(_def_id, None) => {}\n+\n+                        ty::InstanceDef::FnPtrShim(_def_id, ty) |\n+                        ty::InstanceDef::DropGlue(_def_id, Some(ty)) |\n+                        ty::InstanceDef::CloneShim(_def_id, ty) => {\n+                            // FIXME(eddyb) use a better `TyContext` here.\n+                            self.visit_ty(ty, TyContext::Location(location));\n+                        }\n+                    }\n+                    self.visit_substs(callee_substs, location);\n+                }\n             }\n \n             fn super_statement(&mut self,"}, {"sha": "877ee30bcedfd99aacdf3c4c211fb84694503701", "filename": "compiler/rustc_mir/src/shim.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Fshim.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fshim.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -212,7 +212,12 @@ fn new_body<'tcx>(\n         source,\n         basic_blocks,\n         IndexVec::from_elem_n(\n-            SourceScopeData { span, parent_scope: None, local_data: ClearCrossCrate::Clear },\n+            SourceScopeData {\n+                span,\n+                parent_scope: None,\n+                inlined: None,\n+                local_data: ClearCrossCrate::Clear,\n+            },\n             1,\n         ),\n         local_decls,"}, {"sha": "c743104f6ba1904eabc373aa0a4bac957b3c1a99", "filename": "compiler/rustc_mir/src/transform/const_prop.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fconst_prop.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -313,7 +313,7 @@ struct ConstPropagator<'mir, 'tcx> {\n     param_env: ParamEnv<'tcx>,\n     // FIXME(eddyb) avoid cloning these two fields more than once,\n     // by accessing them through `ecx` instead.\n-    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+    source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n     local_decls: IndexVec<Local, LocalDecl<'tcx>>,\n     // Because we have `MutVisitor` we can't obtain the `SourceInfo` from a `Location`. So we store\n     // the last known `SourceInfo` here and just keep revisiting it."}, {"sha": "b6d8ca8e5a6eda0cdbfcf33f8d53c727e1f4e896", "filename": "compiler/rustc_mir/src/transform/inline.rs", "status": "modified", "additions": 5, "deletions": 9, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Finline.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -112,7 +112,7 @@ impl Inliner<'tcx> {\n \n                 let callee_body = if let Some(callee_def_id) = callsite.callee.def_id().as_local() {\n                     let callee_hir_id = self.tcx.hir().local_def_id_to_hir_id(callee_def_id);\n-                    // Avoid a cycle here by only using `optimized_mir` only if we have\n+                    // Avoid a cycle here by only using `instance_mir` only if we have\n                     // a lower `HirId` than the callee. This ensures that the callee will\n                     // not inline us. This trick only works without incremental compilation.\n                     // So don't do it if that is enabled. Also avoid inlining into generators,\n@@ -442,15 +442,11 @@ impl Inliner<'tcx> {\n                 for mut scope in callee_body.source_scopes.iter().cloned() {\n                     if scope.parent_scope.is_none() {\n                         scope.parent_scope = Some(callsite.source_info.scope);\n-                        // FIXME(eddyb) is this really needed?\n-                        // (also note that it's always overwritten below)\n-                        scope.span = callee_body.span;\n-                    }\n \n-                    // FIXME(eddyb) this doesn't seem right at all.\n-                    // The inlined source scopes should probably be annotated as\n-                    // such, but also contain all of the original information.\n-                    scope.span = callsite.source_info.span;\n+                        // Mark the outermost callee scope as an inlined one.\n+                        assert_eq!(scope.inlined, None);\n+                        scope.inlined = Some((callsite.callee, callsite.source_info.span));\n+                    }\n \n                     let idx = caller_body.source_scopes.push(scope);\n                     scope_map.push(idx);"}, {"sha": "a8db273e7c7eea3774c5523ec78d34c6f6660101", "filename": "compiler/rustc_mir/src/util/pretty.rs", "status": "modified", "additions": 17, "deletions": 2, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Futil%2Fpretty.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -548,8 +548,23 @@ fn write_scope_tree(\n     };\n \n     for &child in children {\n-        assert_eq!(body.source_scopes[child].parent_scope, Some(parent));\n-        writeln!(w, \"{0:1$}scope {2} {{\", \"\", indent, child.index())?;\n+        let child_data = &body.source_scopes[child];\n+        assert_eq!(child_data.parent_scope, Some(parent));\n+\n+        if let Some((callee, callsite_span)) = child_data.inlined {\n+            let indented_header =\n+                format!(\"{0:1$}scope {2} (inlined {3}) {{\", \"\", indent, child.index(), callee);\n+            writeln!(\n+                w,\n+                \"{0:1$} // at {2}\",\n+                indented_header,\n+                ALIGN,\n+                tcx.sess.source_map().span_to_string(callsite_span),\n+            )?;\n+        } else {\n+            writeln!(w, \"{0:1$}scope {2} {{\", \"\", indent, child.index())?;\n+        }\n+\n         write_scope_tree(tcx, body, scope_tree, w, child, depth + 1)?;\n         writeln!(w, \"{0:1$}}}\", \"\", depth * INDENT.len())?;\n     }"}, {"sha": "f9995f43f5a8d9e1cd4656c86a1e7fb49601103a", "filename": "compiler/rustc_mir_build/src/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fmod.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -334,7 +334,7 @@ struct Builder<'a, 'tcx> {\n \n     /// The vector of all scopes that we have created thus far;\n     /// we track this for debuginfo later.\n-    source_scopes: IndexVec<SourceScope, SourceScopeData>,\n+    source_scopes: IndexVec<SourceScope, SourceScopeData<'tcx>>,\n     source_scope: SourceScope,\n \n     /// The guard-context: each time we build the guard expression for"}, {"sha": "2b1affbd6aa683c810b74241fad307c42a2bf845", "filename": "compiler/rustc_mir_build/src/build/scope.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fbuild%2Fscope.rs?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -705,6 +705,7 @@ impl<'a, 'tcx> Builder<'a, 'tcx> {\n         self.source_scopes.push(SourceScopeData {\n             span,\n             parent_scope: Some(parent),\n+            inlined: None,\n             local_data: ClearCrossCrate::Set(scope_local_data),\n         })\n     }"}, {"sha": "bba10f09c3fbb1efa5aa18fd12a7936ddcf1b687", "filename": "src/test/mir-opt/dest-prop/cycle.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Fcycle.main.DestinationPropagation.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -18,7 +18,7 @@\n               scope 3 {\n -                 debug z => _3;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n +                 debug z => _4;           // in scope 3 at $DIR/cycle.rs:11:9: 11:10\n-                  scope 4 {\n+                  scope 4 (inlined std::mem::drop::<i32>) { // at $DIR/cycle.rs:14:5: 14:12\n                       debug _x => _6;      // in scope 4 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n                   }\n               }"}, {"sha": "0028e280516da956a5701c212bd4a9464472e57d", "filename": "src/test/mir-opt/dest-prop/union.main.DestinationPropagation.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdest-prop%2Funion.main.DestinationPropagation.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -11,7 +11,7 @@\n           debug un => _1;                  // in scope 1 at $DIR/union.rs:13:9: 13:11\n           scope 2 {\n           }\n-          scope 3 {\n+          scope 3 (inlined std::mem::drop::<u32>) { // at $DIR/union.rs:15:5: 15:27\n               debug _x => _4;              // in scope 3 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n           }\n       }"}, {"sha": "27b86d66ded2dd071fa7c3a95b11dbcb6071f43f", "filename": "src/test/mir-opt/generator_drop_cleanup.main-{closure#0}.generator_drop.0.mir", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fgenerator_drop_cleanup.main-%7Bclosure%230%7D.generator_drop.0.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -26,9 +26,9 @@ fn main::{closure#0}(_1: *mut [generator@$DIR/generator-drop-cleanup.rs:10:15: 1\n     scope 1 {\n         debug _s => (((*_1) as variant#3).0: std::string::String); // in scope 1 at $DIR/generator-drop-cleanup.rs:11:13: 11:15\n     }\n-    scope 2 {\n+    scope 2 (inlined String::new) {      // at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n         let mut _6: std::vec::Vec<u8>;   // in scope 2 at $DIR/generator-drop-cleanup.rs:11:18: 11:31\n-        scope 3 {\n+        scope 3 (inlined Vec::<u8>::new) { // at $SRC_DIR/alloc/src/string.rs:LL:COL\n         }\n     }\n "}, {"sha": "1ced3fe5d1570b86145d4836e7547d4dcdd01c5f", "filename": "src/test/mir-opt/inline/inline_any_operand.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_any_operand.bar.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -8,7 +8,7 @@ fn bar() -> bool {\n     let mut _6: i32;                     // in scope 0 at $DIR/inline-any-operand.rs:12:5: 12:13\n     scope 1 {\n         debug f => _1;                   // in scope 1 at $DIR/inline-any-operand.rs:11:9: 11:10\n-        scope 2 {\n+        scope 2 (inlined foo) {          // at $DIR/inline-any-operand.rs:12:5: 12:13\n             debug x => _5;               // in scope 2 at $DIR/inline-any-operand.rs:16:8: 16:9\n             debug y => _6;               // in scope 2 at $DIR/inline-any-operand.rs:16:16: 16:17\n             let mut _3: i32;             // in scope 2 at $DIR/inline-any-operand.rs:12:5: 12:13"}, {"sha": "93a63c84783915312b0f14afcb29e7faae19dbc1", "filename": "src/test/mir-opt/inline/inline_closure.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure.foo.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -13,7 +13,7 @@ fn foo(_1: T, _2: i32) -> i32 {\n     let mut _9: i32;                     // in scope 0 at $DIR/inline-closure.rs:12:5: 12:12\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure.rs:11:9: 11:10\n-        scope 2 {\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure.rs:12:5: 12:12\n             debug _t => _8;              // in scope 2 at $DIR/inline-closure.rs:11:14: 11:16\n             debug _q => _9;              // in scope 2 at $DIR/inline-closure.rs:11:18: 11:20\n         }"}, {"sha": "390b2320ef613f41087396b8d23358a9712459ca", "filename": "src/test/mir-opt/inline/inline_closure_borrows_arg.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_borrows_arg.foo.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -13,7 +13,7 @@ fn foo(_1: T, _2: &i32) -> i32 {\n     let mut _10: &i32;                   // in scope 0 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-borrows-arg.rs:12:9: 12:10\n-        scope 2 {\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12\n             debug r => _9;               // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:14: 12:15\n             debug _s => _10;             // in scope 2 at $DIR/inline-closure-borrows-arg.rs:12:23: 12:25\n             let _8: &i32;                // in scope 2 at $DIR/inline-closure-borrows-arg.rs:16:5: 16:12"}, {"sha": "c6d1e8147a3318996ce4a62c6213411483198f16", "filename": "src/test/mir-opt/inline/inline_closure_captures.foo.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_closure_captures.foo.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -13,7 +13,7 @@ fn foo(_1: T, _2: i32) -> (i32, T) {\n     let mut _10: i32;                    // in scope 0 at $DIR/inline-closure-captures.rs:12:5: 12:9\n     scope 1 {\n         debug x => _3;                   // in scope 1 at $DIR/inline-closure-captures.rs:11:9: 11:10\n-        scope 2 {\n+        scope 2 (inlined foo::<T>::{closure#0}) { // at $DIR/inline-closure-captures.rs:12:5: 12:9\n             debug _q => _10;             // in scope 2 at $DIR/inline-closure-captures.rs:11:14: 11:16\n             debug q => (*((*_6).0: &i32)); // in scope 2 at $DIR/inline-closure-captures.rs:10:23: 10:24\n             debug t => (*((*_6).1: &T)); // in scope 2 at $DIR/inline-closure-captures.rs:10:17: 10:18"}, {"sha": "2fc908b51f39aef24ff0ecd14a073fe0fa81a236", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_no_sanitize.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_no_sanitize.Inline.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -4,7 +4,7 @@\n   fn inlined_no_sanitize() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:24:37: 24:37\n       let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:25:5: 25:18\n-+     scope 1 {\n++     scope 1 (inlined no_sanitize) {      // at $DIR/inline-compatibility.rs:25:5: 25:18\n +     }\n   \n       bb0: {"}, {"sha": "c92594d08de2bec9c71081a8abc150066559435d", "filename": "src/test/mir-opt/inline/inline_compatibility.inlined_target_feature.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_compatibility.inlined_target_feature.Inline.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -4,7 +4,7 @@\n   fn inlined_target_feature() -> () {\n       let mut _0: ();                      // return place in scope 0 at $DIR/inline-compatibility.rs:13:40: 13:40\n       let _1: ();                          // in scope 0 at $DIR/inline-compatibility.rs:14:5: 14:21\n-+     scope 1 {\n++     scope 1 (inlined target_feature) {   // at $DIR/inline-compatibility.rs:14:5: 14:21\n +     }\n   \n       bb0: {"}, {"sha": "f5c8ee134dbab00a0b488d2a6b7f85123458ad39", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.32bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.32bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -10,7 +10,7 @@\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 {\n++     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {"}, {"sha": "5aeffa9c2a542aa136e8d08e01c3656f1d34d306", "filename": "src/test/mir-opt/inline/inline_into_box_place.main.Inline.64bit.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_into_box_place.main.Inline.64bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -10,7 +10,7 @@\n       scope 1 {\n           debug _x => _1;                  // in scope 1 at $DIR/inline-into-box-place.rs:8:9: 8:11\n       }\n-+     scope 2 {\n++     scope 2 (inlined Vec::<u32>::new) {  // at $DIR/inline-into-box-place.rs:8:33: 8:43\n +     }\n   \n       bb0: {"}, {"sha": "cdcfeec98f990e1068fac17fb397f741e8308052", "filename": "src/test/mir-opt/inline/inline_retag.bar.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_retag.bar.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -14,7 +14,7 @@ fn bar() -> bool {\n         debug f => _1;                   // in scope 1 at $DIR/inline-retag.rs:11:9: 11:10\n         let mut _9: &i32;                // in scope 1 at $DIR/inline-retag.rs:12:11: 12:14\n         let mut _10: &i32;               // in scope 1 at $DIR/inline-retag.rs:12:7: 12:9\n-        scope 2 {\n+        scope 2 (inlined foo) {          // at $DIR/inline-retag.rs:12:5: 12:15\n             debug x => _3;               // in scope 2 at $DIR/inline-retag.rs:16:8: 16:9\n             debug y => _6;               // in scope 2 at $DIR/inline-retag.rs:16:17: 16:18\n             let mut _11: i32;            // in scope 2 at $DIR/inline-retag.rs:12:5: 12:15"}, {"sha": "96442842bd5983c4831322f40e46de93f914ea58", "filename": "src/test/mir-opt/inline/inline_specialization.main.Inline.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_specialization.main.Inline.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -7,7 +7,7 @@\n       scope 1 {\n           debug x => _1;                   // in scope 1 at $DIR/inline-specialization.rs:5:9: 5:10\n       }\n-+     scope 2 {\n++     scope 2 (inlined <Vec<()> as Foo>::bar) { // at $DIR/inline-specialization.rs:5:13: 5:38\n +     }\n   \n       bb0: {"}, {"sha": "8c7eb753cc037771809ac2bf5ae8de1992480607", "filename": "src/test/mir-opt/inline/inline_trait_method_2.test2.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Finline_trait_method_2.test2.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -5,7 +5,7 @@ fn test2(_1: &dyn X) -> bool {\n     let mut _0: bool;                    // return place in scope 0 at $DIR/inline-trait-method_2.rs:4:24: 4:28\n     let mut _2: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n     let mut _3: &dyn X;                  // in scope 0 at $DIR/inline-trait-method_2.rs:5:10: 5:11\n-    scope 1 {\n+    scope 1 (inlined test) {             // at $DIR/inline-trait-method_2.rs:5:5: 5:12\n         debug x => _2;                   // in scope 1 at $DIR/inline-trait-method_2.rs:9:9: 9:10\n         let mut _4: &dyn X;              // in scope 1 at $DIR/inline-trait-method_2.rs:5:5: 5:12\n     }"}, {"sha": "e91b79b8db5f0d96b2851d5707e33580d4057c2e", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.a.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@ fn a(_1: &mut [T]) -> &mut [T] {\n     let mut _2: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _3: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     let mut _4: &mut [T];                // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:6\n-    scope 1 {\n+    scope 1 (inlined <[T] as AsMut<[T]>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n         let mut _5: &mut [T];            // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:3:5: 3:15\n     }"}, {"sha": "9378489fabab1f303d8a30d45c7b4a6caa38aaae", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.b.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@ fn b(_1: &mut Box<T>) -> &mut T {\n     let mut _2: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _3: &mut T;                  // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n     let mut _4: &mut std::boxed::Box<T>; // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:6\n-    scope 1 {\n+    scope 1 (inlined <Box<T> as AsMut<T>>::as_mut) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         debug self => _4;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n         let mut _5: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15\n         let mut _6: &mut T;              // in scope 1 at $DIR/issue-58867-inline-as-ref-as-mut.rs:8:5: 8:15"}, {"sha": "670f055dc054b164b850921057a2adf52b8760bf", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.c.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -5,7 +5,7 @@ fn c(_1: &[T]) -> &[T] {\n     let mut _0: &[T];                    // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:12:25: 12:29\n     let _2: &[T];                        // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n     let mut _3: &[T];                    // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:6\n-    scope 1 {\n+    scope 1 (inlined <[T] as AsRef<[T]>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:13:5: 13:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n     }\n "}, {"sha": "c33e859eb6b0c3b531fbaae3dd64f177a48e1c70", "filename": "src/test/mir-opt/inline/issue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Finline%2Fissue_58867_inline_as_ref_as_mut.d.Inline.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -5,7 +5,7 @@ fn d(_1: &Box<T>) -> &T {\n     let mut _0: &T;                      // return place in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:17:28: 17:30\n     let _2: &T;                          // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n     let mut _3: &std::boxed::Box<T>;     // in scope 0 at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:6\n-    scope 1 {\n+    scope 1 (inlined <Box<T> as AsRef<T>>::as_ref) { // at $DIR/issue-58867-inline-as-ref-as-mut.rs:18:5: 18:15\n         debug self => _3;                // in scope 1 at $SRC_DIR/alloc/src/boxed.rs:LL:COL\n     }\n "}, {"sha": "ac08a4512d0e31788b9effe640aaed21418bb064", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.32bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -35,22 +35,22 @@\n                   scope 5 {\n                       debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 {\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n-                      scope 8 {\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n-                  scope 10 {\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                       debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "ac08a4512d0e31788b9effe640aaed21418bb064", "filename": "src/test/mir-opt/issue_73223.main.PreCodegen.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.PreCodegen.64bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -35,22 +35,22 @@\n                   scope 5 {\n                       debug arg0 => _25;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _28;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 {\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _25;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _24;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _23: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _24: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _25: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n-                      scope 8 {\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _28;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _27;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _26: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _27: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _28: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n-                  scope 10 {\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                       debug pieces => _29; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       debug args => _31;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       let mut _29: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "b302114fa1787717b5c7cae1bb737d86968846e4", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.32bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.32bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -58,15 +58,15 @@\n                   scope 5 {\n                       debug arg0 => _36;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _37;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 {\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _39;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _40;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _49: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n-                      scope 8 {\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _42;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _43;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -75,7 +75,7 @@\n                           let mut _53: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n-                  scope 10 {\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                       debug pieces => _23; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       let mut _54: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "b302114fa1787717b5c7cae1bb737d86968846e4", "filename": "src/test/mir-opt/issue_73223.main.SimplifyArmIdentity.64bit.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fissue_73223.main.SimplifyArmIdentity.64bit.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -58,15 +58,15 @@\n                   scope 5 {\n                       debug arg0 => _36;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n                       debug arg1 => _37;   // in scope 5 at $SRC_DIR/core/src/macros/mod.rs:LL:COL\n-                      scope 6 {\n+                      scope 6 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _39;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _40;  // in scope 6 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _46: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _47: for<'r, 's, 't0> fn(&'r &i32, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _48: &core::fmt::Opaque; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                           let mut _49: &&i32; // in scope 6 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n-                      scope 8 {\n+                      scope 8 (inlined ArgumentV1::new::<&i32>) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                           debug x => _42;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           debug f => _43;  // in scope 8 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                           let mut _50: for<'r, 's, 't0> fn(&'r core::fmt::Opaque, &'s mut std::fmt::Formatter<'t0>) -> std::result::Result<(), std::fmt::Error>; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n@@ -75,7 +75,7 @@\n                           let mut _53: &&i32; // in scope 8 at $SRC_DIR/std/src/macros.rs:LL:COL\n                       }\n                   }\n-                  scope 10 {\n+                  scope 10 (inlined Arguments::new_v1) { // at $SRC_DIR/std/src/macros.rs:LL:COL\n                       debug pieces => _23; // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       debug args => _27;   // in scope 10 at $SRC_DIR/core/src/fmt/mod.rs:LL:COL\n                       let mut _54: &[&str]; // in scope 10 at $SRC_DIR/std/src/macros.rs:LL:COL"}, {"sha": "d84012295e4d3c81dba9842f41331c0ce0e79441", "filename": "src/test/mir-opt/remove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.cannot_opt_generic.RemoveUnneededDrops.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/remove_unneeded_drops.rs:20:32: 20:32\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:21:10: 21:11\n-      scope 1 {\n+      scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:21:5: 21:12\n           debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   "}, {"sha": "b0b1e80e864c4ec22bff2e6dd5c4802ae502d4e9", "filename": "src/test/mir-opt/remove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.dont_opt.RemoveUnneededDrops.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/remove_unneeded_drops.rs:8:27: 8:27\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n       let mut _3: std::vec::Vec<bool>;     // in scope 0 at $DIR/remove_unneeded_drops.rs:9:10: 9:11\n-      scope 1 {\n+      scope 1 (inlined std::mem::drop::<Vec<bool>>) { // at $DIR/remove_unneeded_drops.rs:9:5: 9:12\n           debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   "}, {"sha": "0984829435b66bb144078f48c041075162ebcf6f", "filename": "src/test/mir-opt/remove_unneeded_drops.opt.RemoveUnneededDrops.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt.RemoveUnneededDrops.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/remove_unneeded_drops.rs:3:17: 3:17\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n       let mut _3: bool;                    // in scope 0 at $DIR/remove_unneeded_drops.rs:4:10: 4:11\n-      scope 1 {\n+      scope 1 (inlined std::mem::drop::<bool>) { // at $DIR/remove_unneeded_drops.rs:4:5: 4:12\n           debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   "}, {"sha": "0b0ce968af076068678acfb28cc916a5d98adb26", "filename": "src/test/mir-opt/remove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fremove_unneeded_drops.opt_generic_copy.RemoveUnneededDrops.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -6,7 +6,7 @@\n       let mut _0: ();                      // return place in scope 0 at $DIR/remove_unneeded_drops.rs:13:36: 13:36\n       let _2: ();                          // in scope 0 at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n       let mut _3: T;                       // in scope 0 at $DIR/remove_unneeded_drops.rs:14:10: 14:11\n-      scope 1 {\n+      scope 1 (inlined std::mem::drop::<T>) { // at $DIR/remove_unneeded_drops.rs:14:5: 14:12\n           debug _x => _3;                  // in scope 1 at $SRC_DIR/core/src/mem/mod.rs:LL:COL\n       }\n   "}, {"sha": "56ae6cae8071c4d5a4b29427b5c75d0a43310af9", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyArmIdentity.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -22,11 +22,11 @@\n -         debug err => _6;                 // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n +         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n-              scope 7 {\n+              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n -                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n +                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n-              scope 8 {\n+              scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n@@ -39,7 +39,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 {\n+      scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   "}, {"sha": "9cfa3d2231ae09f8b252d45cac22cda7eb43edb2", "filename": "src/test/mir-opt/simplify_arm.id_try.SimplifyBranchSame.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_arm.id_try.SimplifyBranchSame.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -20,10 +20,10 @@\n       scope 2 {\n           debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify-arm.rs:24:14: 24:15\n           scope 3 {\n-              scope 7 {\n+              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify-arm.rs:24:14: 24:15\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n-              scope 8 {\n+              scope 8 (inlined <std::result::Result<u8, i32> as Try>::from_error) { // at $DIR/simplify-arm.rs:24:13: 24:15\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify-arm.rs:24:13: 24:15\n               }\n@@ -34,7 +34,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 {\n+      scope 6 (inlined <std::result::Result<u8, i32> as Try>::into_result) { // at $DIR/simplify-arm.rs:24:13: 24:15\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   "}, {"sha": "d36ab58f43027522cc670f66a9a2d2143c3bc8b6", "filename": "src/test/mir-opt/simplify_try.try_identity.DestinationPropagation.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.DestinationPropagation.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -20,10 +20,10 @@\n       scope 2 {\n           debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n-              scope 7 {\n+              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                   debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n-              scope 8 {\n+              scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                   debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n               }\n@@ -34,7 +34,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 {\n+      scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n -         debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n +         debug self => _0;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }"}, {"sha": "ab99f122c3bcd015fe1758d73256502dc759bb74", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyArmIdentity.diff", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyArmIdentity.diff?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -22,11 +22,11 @@\n -         debug err => _6;                 // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n +         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n           scope 3 {\n-              scope 7 {\n+              scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n -                 debug t => _9;           // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n +                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n               }\n-              scope 8 {\n+              scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n -                 debug v => _8;           // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n +                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                   let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n@@ -39,7 +39,7 @@\n           scope 5 {\n           }\n       }\n-      scope 6 {\n+      scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n           debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n       }\n   "}, {"sha": "a084542321dd871927a015ce239854e696607193", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyBranchSame.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyBranchSame.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -19,10 +19,10 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     scope 2 {\n         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n-            scope 7 {\n+            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n             }\n-            scope 8 {\n+            scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n                 let mut _12: i32;        // in scope 8 at $DIR/simplify_try.rs:8:13: 8:15\n             }\n@@ -33,7 +33,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         scope 5 {\n         }\n     }\n-    scope 6 {\n+    scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n         debug self => _4;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n "}, {"sha": "51029c3021a8b5fec7656d9c5723325e669858cf", "filename": "src/test/mir-opt/simplify_try.try_identity.SimplifyLocals.after.mir", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "raw_url": "https://github.com/rust-lang/rust/raw/6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fsimplify_try.try_identity.SimplifyLocals.after.mir?ref=6bc5eafbce7dd3630a26b9f2e94938a4dfc61c06", "patch": "@@ -9,10 +9,10 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n     scope 2 {\n         debug err => ((_0 as Err).0: i32); // in scope 2 at $DIR/simplify_try.rs:8:14: 8:15\n         scope 3 {\n-            scope 7 {\n+            scope 7 (inlined <i32 as From<i32>>::from) { // at $DIR/simplify_try.rs:8:14: 8:15\n                 debug t => ((_0 as Err).0: i32); // in scope 7 at $SRC_DIR/core/src/convert/mod.rs:LL:COL\n             }\n-            scope 8 {\n+            scope 8 (inlined <std::result::Result<u32, i32> as Try>::from_error) { // at $DIR/simplify_try.rs:8:13: 8:15\n                 debug v => ((_0 as Err).0: i32); // in scope 8 at $SRC_DIR/core/src/result.rs:LL:COL\n             }\n         }\n@@ -22,7 +22,7 @@ fn try_identity(_1: std::result::Result<u32, i32>) -> std::result::Result<u32, i\n         scope 5 {\n         }\n     }\n-    scope 6 {\n+    scope 6 (inlined <std::result::Result<u32, i32> as Try>::into_result) { // at $DIR/simplify_try.rs:8:13: 8:15\n         debug self => _0;                // in scope 6 at $SRC_DIR/core/src/result.rs:LL:COL\n     }\n "}]}