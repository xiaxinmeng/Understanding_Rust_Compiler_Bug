{"sha": "5633783f473e63578091aefbd6ac4e81797596a8", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2MzM3ODNmNDczZTYzNTc4MDkxYWVmYmQ2YWM0ZTgxNzk3NTk2YTg=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-02T02:19:57Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2013-02-02T05:22:49Z"}, "message": "rustdoc: Convert to pipes", "tree": {"sha": "f1ef253b8060e92e3c0281294084e85888e55e56", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f1ef253b8060e92e3c0281294084e85888e55e56"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5633783f473e63578091aefbd6ac4e81797596a8", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5633783f473e63578091aefbd6ac4e81797596a8", "html_url": "https://github.com/rust-lang/rust/commit/5633783f473e63578091aefbd6ac4e81797596a8", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5633783f473e63578091aefbd6ac4e81797596a8/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "90f00a1c37f8df90144b552c3dfa5125f40805b6", "url": "https://api.github.com/repos/rust-lang/rust/commits/90f00a1c37f8df90144b552c3dfa5125f40805b6", "html_url": "https://github.com/rust-lang/rust/commit/90f00a1c37f8df90144b552c3dfa5125f40805b6"}], "stats": {"total": 26, "additions": 12, "deletions": 14}, "files": [{"sha": "09adc507a908997f07a4a4cdd500e79c5bb21150", "filename": "src/librustdoc/astsrv.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fastsrv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fastsrv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fastsrv.rs?ref=5633783f473e63578091aefbd6ac4e81797596a8", "patch": "@@ -23,7 +23,6 @@ use parse;\n use util;\n \n use core::pipes::{stream, Chan, SharedChan, Port};\n-use core::oldcomm;\n use core::vec;\n use core::ops::Drop;\n use rustc::back::link;"}, {"sha": "fc13af8a22133807a457b9b6b2f28c07d54483ff", "filename": "src/librustdoc/markdown_pass.rs", "status": "modified", "additions": 7, "deletions": 7, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fmarkdown_pass.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_pass.rs?ref=5633783f473e63578091aefbd6ac4e81797596a8", "patch": "@@ -35,16 +35,17 @@ use trim_pass;\n use unindent_pass;\n \n use core::iter;\n-use core::oldcomm;\n use core::str;\n use core::vec;\n use std::par;\n+use std::cell::Cell;\n use syntax;\n \n pub fn mk_pass(writer_factory: WriterFactory) -> Pass {\n+    let writer_factory = Cell(writer_factory);\n     let f = fn~(move writer_factory,\n                 srv: astsrv::Srv, doc: doc::Doc) -> doc::Doc {\n-        run(srv, doc, copy writer_factory)\n+        run(srv, doc, writer_factory.take())\n     };\n \n     Pass {\n@@ -155,7 +156,7 @@ fn should_request_new_writer_for_each_page() {\n     write_markdown(doc, move writer_factory);\n     // We expect two pages to have been written\n     for iter::repeat(2) {\n-        oldcomm::recv(po);\n+        po.recv();\n     }\n }\n \n@@ -186,7 +187,7 @@ fn should_write_title_for_each_page() {\n     let doc = (page_pass::mk_pass(config::DocPerMod).f)(srv, doc);\n     write_markdown(doc, move writer_factory);\n     for iter::repeat(2) {\n-        let (page, markdown) = oldcomm::recv(po);\n+        let (page, markdown) = po.recv();\n         match page {\n           doc::CratePage(_) => {\n             assert str::contains(markdown, ~\"% Crate core\");\n@@ -848,7 +849,6 @@ mod test {\n     use tystr_pass;\n     use unindent_pass;\n \n-    use core::oldcomm;\n     use core::path::Path;\n     use core::str;\n \n@@ -900,7 +900,7 @@ mod test {\n     ) -> ~str {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         write_markdown(doc, move writer_factory);\n-        return oldcomm::recv(po).second();\n+        return po.recv().second();\n     }\n \n     pub fn write_markdown_str_srv(\n@@ -910,7 +910,7 @@ mod test {\n         let (writer_factory, po) = markdown_writer::future_writer_factory();\n         let pass = mk_pass(move writer_factory);\n         (pass.f)(srv, doc);\n-        return oldcomm::recv(po).second();\n+        return po.recv().second();\n     }\n \n     #[test]"}, {"sha": "986194d961d6568c58d529ebee422d26d8a5ce64", "filename": "src/librustdoc/markdown_writer.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Fmarkdown_writer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fmarkdown_writer.rs?ref=5633783f473e63578091aefbd6ac4e81797596a8", "patch": "@@ -19,7 +19,6 @@ use pass::Pass;\n use core::io::ReaderUtil;\n use core::io;\n use core::libc;\n-use core::oldcomm;\n use core::os;\n use core::pipes;\n use core::result;\n@@ -293,16 +292,17 @@ fn write_file(path: &Path, s: ~str) {\n }\n \n pub fn future_writer_factory(\n-) -> (WriterFactory, oldcomm::Port<(doc::Page, ~str)>) {\n-    let markdown_po = oldcomm::Port();\n-    let markdown_ch = oldcomm::Chan(&markdown_po);\n+) -> (WriterFactory, Port<(doc::Page, ~str)>) {\n+    let (markdown_po, markdown_ch) = stream();\n+    let markdown_ch = SharedChan(markdown_ch);\n     let writer_factory = fn~(page: doc::Page) -> Writer {\n         let (writer_po, writer_ch) = pipes::stream();\n+        let markdown_ch = markdown_ch.clone();\n         do task::spawn |move writer_ch| {\n             let (writer, future) = future_writer();\n             writer_ch.send(move writer);\n             let s = future.get();\n-            oldcomm::send(markdown_ch, (copy page, s));\n+            markdown_ch.send((copy page, s));\n         }\n         writer_po.recv()\n     };"}, {"sha": "aa15c104540f60f2371f5a117bbd500cbf8aff7d", "filename": "src/librustdoc/util.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Futil.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5633783f473e63578091aefbd6ac4e81797596a8/src%2Flibrustdoc%2Futil.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Futil.rs?ref=5633783f473e63578091aefbd6ac4e81797596a8", "patch": "@@ -10,7 +10,6 @@\n \n use core::prelude::*;\n \n-use core::oldcomm;\n use core::task;\n \n // Just a named container for our op, so it can have impls"}]}