{"sha": "bd8369089c38c190533b41ce76b073f5478f17d4", "node_id": "C_kwDOAAsO6NoAKGJkODM2OTA4OWMzOGMxOTA1MzNiNDFjZTc2YjA3M2Y1NDc4ZjE3ZDQ", "commit": {"author": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-25T11:32:49Z"}, "committer": {"name": "Alex Macleod", "email": "alex@macleod.io", "date": "2022-10-25T11:32:49Z"}, "message": "Track `clippy.toml` and `Cargo.toml` in `file_depinfo`\n\nCauses cargo to re-run clippy when those paths are modified\n\nAlso tracks the path to `clippy-driver` in debug mode to remove the\nworkarounds in `cargo dev lint` and `lintcheck`", "tree": {"sha": "33522089e2b61338dc3d14d0427e0575873454d5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/33522089e2b61338dc3d14d0427e0575873454d5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bd8369089c38c190533b41ce76b073f5478f17d4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bd8369089c38c190533b41ce76b073f5478f17d4", "html_url": "https://github.com/rust-lang/rust/commit/bd8369089c38c190533b41ce76b073f5478f17d4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bd8369089c38c190533b41ce76b073f5478f17d4/comments", "author": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Alexendoo", "id": 1830331, "node_id": "MDQ6VXNlcjE4MzAzMzE=", "avatar_url": "https://avatars.githubusercontent.com/u/1830331?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Alexendoo", "html_url": "https://github.com/Alexendoo", "followers_url": "https://api.github.com/users/Alexendoo/followers", "following_url": "https://api.github.com/users/Alexendoo/following{/other_user}", "gists_url": "https://api.github.com/users/Alexendoo/gists{/gist_id}", "starred_url": "https://api.github.com/users/Alexendoo/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Alexendoo/subscriptions", "organizations_url": "https://api.github.com/users/Alexendoo/orgs", "repos_url": "https://api.github.com/users/Alexendoo/repos", "events_url": "https://api.github.com/users/Alexendoo/events{/privacy}", "received_events_url": "https://api.github.com/users/Alexendoo/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5b09d4e1f7082aff024faf27263f78e7fc7190a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/5b09d4e1f7082aff024faf27263f78e7fc7190a2", "html_url": "https://github.com/rust-lang/rust/commit/5b09d4e1f7082aff024faf27263f78e7fc7190a2"}], "stats": {"total": 106, "additions": 47, "deletions": 59}, "files": [{"sha": "510c7e852af6e9629f90ff90aeaf1886fa174fb9", "filename": "clippy_dev/Cargo.toml", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_dev%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_dev%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2FCargo.toml?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -10,7 +10,6 @@ indoc = \"1.0\"\n itertools = \"0.10.1\"\n opener = \"0.5\"\n shell-escape = \"0.1\"\n-tempfile = \"3.2\"\n walkdir = \"2.3\"\n \n [features]"}, {"sha": "aafd0f71a59bc15951a87d2065d68820d1e398a9", "filename": "clippy_dev/src/lint.rs", "status": "modified", "additions": 0, "deletions": 8, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_dev%2Fsrc%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_dev%2Fsrc%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_dev%2Fsrc%2Flint.rs?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -36,20 +36,12 @@ pub fn run<'a>(path: &str, args: impl Iterator<Item = &'a String>) {\n     } else {\n         exit_if_err(Command::new(\"cargo\").arg(\"build\").status());\n \n-        // Run in a tempdir as changes to clippy do not retrigger linting\n-        let target = tempfile::Builder::new()\n-            .prefix(\"clippy\")\n-            .tempdir()\n-            .expect(\"failed to create tempdir\");\n-\n         let status = Command::new(cargo_clippy_path())\n             .arg(\"clippy\")\n             .args(args)\n             .current_dir(path)\n-            .env(\"CARGO_TARGET_DIR\", target.as_ref())\n             .status();\n \n-        target.close().expect(\"failed to remove tempdir\");\n         exit_if_err(status);\n     }\n }"}, {"sha": "85a28d1fd9e0ae1ab965a4d34bf81cf8345dbef0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 7, "deletions": 4, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -49,6 +49,9 @@ extern crate clippy_utils;\n #[macro_use]\n extern crate declare_clippy_lint;\n \n+use std::io;\n+use std::path::PathBuf;\n+\n use clippy_utils::parse_msrv;\n use rustc_data_structures::fx::FxHashSet;\n use rustc_lint::{Lint, LintId};\n@@ -303,8 +306,8 @@ mod zero_div_zero;\n mod zero_sized_map_values;\n // end lints modules, do not remove this comment, it\u2019s used in `update_lints`\n \n-pub use crate::utils::conf::Conf;\n use crate::utils::conf::{format_error, TryConf};\n+pub use crate::utils::conf::{lookup_conf_file, Conf};\n \n /// Register all pre expansion lints\n ///\n@@ -361,8 +364,8 @@ fn read_msrv(conf: &Conf, sess: &Session) -> Option<RustcVersion> {\n }\n \n #[doc(hidden)]\n-pub fn read_conf(sess: &Session) -> Conf {\n-    let file_name = match utils::conf::lookup_conf_file() {\n+pub fn read_conf(sess: &Session, path: &io::Result<Option<PathBuf>>) -> Conf {\n+    let file_name = match path {\n         Ok(Some(path)) => path,\n         Ok(None) => return Conf::default(),\n         Err(error) => {\n@@ -372,7 +375,7 @@ pub fn read_conf(sess: &Session) -> Conf {\n         },\n     };\n \n-    let TryConf { conf, errors, warnings } = utils::conf::read(&file_name);\n+    let TryConf { conf, errors, warnings } = utils::conf::read(file_name);\n     // all conf errors are non-fatal, we just use the default conf in case of error\n     for error in errors {\n         sess.err(format!("}, {"sha": "65788f51a267d532cfbfbd38d656f4602af296db", "filename": "clippy_lints/src/utils/conf.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/clippy_lints%2Fsrc%2Futils%2Fconf.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fconf.rs?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -390,6 +390,10 @@ define_Conf! {\n }\n \n /// Search for the configuration file.\n+///\n+/// # Errors\n+///\n+/// Returns any unexpected filesystem error encountered when searching for the config file\n pub fn lookup_conf_file() -> io::Result<Option<PathBuf>> {\n     /// Possible filename to search for.\n     const CONFIG_FILE_NAMES: [&str; 2] = [\".clippy.toml\", \"clippy.toml\"];"}, {"sha": "ee8ab7c1d7cbbc60395caddeb15bc8d3dcf24d58", "filename": "lintcheck/src/main.rs", "status": "modified", "additions": 0, "deletions": 45, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/lintcheck%2Fsrc%2Fmain.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/lintcheck%2Fsrc%2Fmain.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/lintcheck%2Fsrc%2Fmain.rs?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -544,34 +544,6 @@ fn gather_stats(clippy_warnings: &[ClippyWarning]) -> (String, HashMap<&String,\n     (stats_string, counter)\n }\n \n-/// check if the latest modification of the logfile is older than the modification date of the\n-/// clippy binary, if this is true, we should clean the lintchec shared target directory and recheck\n-fn lintcheck_needs_rerun(lintcheck_logs_path: &Path, paths: [&Path; 2]) -> bool {\n-    if !lintcheck_logs_path.exists() {\n-        return true;\n-    }\n-\n-    let clippy_modified: std::time::SystemTime = {\n-        let [cargo, driver] = paths.map(|p| {\n-            std::fs::metadata(p)\n-                .expect(\"failed to get metadata of file\")\n-                .modified()\n-                .expect(\"failed to get modification date\")\n-        });\n-        // the oldest modification of either of the binaries\n-        std::cmp::max(cargo, driver)\n-    };\n-\n-    let logs_modified: std::time::SystemTime = std::fs::metadata(lintcheck_logs_path)\n-        .expect(\"failed to get metadata of file\")\n-        .modified()\n-        .expect(\"failed to get modification date\");\n-\n-    // time is represented in seconds since X\n-    // logs_modified 2 and clippy_modified 5 means clippy binary is older and we need to recheck\n-    logs_modified < clippy_modified\n-}\n-\n #[allow(clippy::too_many_lines)]\n fn main() {\n     // We're being executed as a `RUSTC_WRAPPER` as part of `--recursive`\n@@ -594,23 +566,6 @@ fn main() {\n     let cargo_clippy_path = fs::canonicalize(format!(\"target/debug/cargo-clippy{EXE_SUFFIX}\")).unwrap();\n     let clippy_driver_path = fs::canonicalize(format!(\"target/debug/clippy-driver{EXE_SUFFIX}\")).unwrap();\n \n-    // if the clippy bin is newer than our logs, throw away target dirs to force clippy to\n-    // refresh the logs\n-    if lintcheck_needs_rerun(\n-        &config.lintcheck_results_path,\n-        [&cargo_clippy_path, &clippy_driver_path],\n-    ) {\n-        let shared_target_dir = \"target/lintcheck/shared_target_dir\";\n-        // if we get an Err here, the shared target dir probably does simply not exist\n-        if let Ok(metadata) = std::fs::metadata(shared_target_dir) {\n-            if metadata.is_dir() {\n-                println!(\"Clippy is newer than lint check logs, clearing lintcheck shared target dir...\");\n-                std::fs::remove_dir_all(shared_target_dir)\n-                    .expect(\"failed to remove target/lintcheck/shared_target_dir\");\n-            }\n-        }\n-    }\n-\n     // assert that clippy is found\n     assert!(\n         cargo_clippy_path.is_file(),"}, {"sha": "2601cab8c85563580fe26cd97b43dd8694bb46f5", "filename": "src/driver.rs", "status": "modified", "additions": 36, "deletions": 1, "changes": 37, "blob_url": "https://github.com/rust-lang/rust/blob/bd8369089c38c190533b41ce76b073f5478f17d4/src%2Fdriver.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bd8369089c38c190533b41ce76b073f5478f17d4/src%2Fdriver.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdriver.rs?ref=bd8369089c38c190533b41ce76b073f5478f17d4", "patch": "@@ -1,4 +1,5 @@\n #![feature(rustc_private)]\n+#![feature(let_chains)]\n #![feature(once_cell)]\n #![cfg_attr(feature = \"deny-warnings\", deny(warnings))]\n // warn on lints, that are included in `rust-lang/rust`s bootstrap\n@@ -71,6 +72,32 @@ fn track_clippy_args(parse_sess: &mut ParseSess, args_env_var: &Option<String>)\n     ));\n }\n \n+/// Track files that may be accessed at runtime in `file_depinfo` so that cargo will re-run clippy\n+/// when any of them are modified\n+fn track_files(parse_sess: &mut ParseSess, conf_path_string: Option<String>) {\n+    let file_depinfo = parse_sess.file_depinfo.get_mut();\n+\n+    // Used by `clippy::cargo` lints and to determine the MSRV. `cargo clippy` executes `clippy-driver`\n+    // with the current directory set to `CARGO_MANIFEST_DIR` so a relative path is fine\n+    if Path::new(\"Cargo.toml\").exists() {\n+        file_depinfo.insert(Symbol::intern(\"Cargo.toml\"));\n+    }\n+\n+    // `clippy.toml`\n+    if let Some(path) = conf_path_string {\n+        file_depinfo.insert(Symbol::intern(&path));\n+    }\n+\n+    // During development track the `clippy-driver` executable so that cargo will re-run clippy whenever\n+    // it is rebuilt\n+    if cfg!(debug_assertions)\n+        && let Ok(current_exe) = env::current_exe()\n+        && let Some(current_exe) = current_exe.to_str()\n+    {\n+        file_depinfo.insert(Symbol::intern(current_exe));\n+    }\n+}\n+\n struct DefaultCallbacks;\n impl rustc_driver::Callbacks for DefaultCallbacks {}\n \n@@ -97,10 +124,18 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n     // JUSTIFICATION: necessary in clippy driver to set `mir_opt_level`\n     #[allow(rustc::bad_opt_access)]\n     fn config(&mut self, config: &mut interface::Config) {\n+        let conf_path = clippy_lints::lookup_conf_file();\n+        let conf_path_string = if let Ok(Some(path)) = &conf_path {\n+            path.to_str().map(String::from)\n+        } else {\n+            None\n+        };\n+\n         let previous = config.register_lints.take();\n         let clippy_args_var = self.clippy_args_var.take();\n         config.parse_sess_created = Some(Box::new(move |parse_sess| {\n             track_clippy_args(parse_sess, &clippy_args_var);\n+            track_files(parse_sess, conf_path_string);\n         }));\n         config.register_lints = Some(Box::new(move |sess, lint_store| {\n             // technically we're ~guaranteed that this is none but might as well call anything that\n@@ -109,7 +144,7 @@ impl rustc_driver::Callbacks for ClippyCallbacks {\n                 (previous)(sess, lint_store);\n             }\n \n-            let conf = clippy_lints::read_conf(sess);\n+            let conf = clippy_lints::read_conf(sess, &conf_path);\n             clippy_lints::register_plugins(lint_store, sess, &conf);\n             clippy_lints::register_pre_expansion_lints(lint_store, sess, &conf);\n             clippy_lints::register_renamed(lint_store);"}]}