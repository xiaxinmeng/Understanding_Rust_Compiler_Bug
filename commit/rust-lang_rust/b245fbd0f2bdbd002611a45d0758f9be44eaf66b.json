{"sha": "b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIyNDVmYmQwZjJiZGJkMDAyNjExYTQ1ZDA3NThmOWJlNDRlYWY2NmI=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-08T02:23:23Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2019-12-08T02:23:23Z"}, "message": "Auto merge of #4889 - krishna-veerareddy:issue-3993-float-to-int-transmute, r=llogiq\n\nAdd lint to detect transmutes from float to integer\n\nAdd lint that detects transmutation from a float to an integer and suggests usage of `{f32, f64}.to_bits()` instead.\n\nFixes #3993\n\nchangelog: Add lint `transmute_float_to_int`", "tree": {"sha": "9057c4ed964352440d5d413d9885747e9e318a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9057c4ed964352440d5d413d9885747e9e318a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "html_url": "https://github.com/rust-lang/rust/commit/b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "61b19a1a284186d010cd4f605a0d6fd6fdfc365a", "url": "https://api.github.com/repos/rust-lang/rust/commits/61b19a1a284186d010cd4f605a0d6fd6fdfc365a", "html_url": "https://github.com/rust-lang/rust/commit/61b19a1a284186d010cd4f605a0d6fd6fdfc365a"}, {"sha": "23c03e499492b6d56c7c15f2868035005067ae21", "url": "https://api.github.com/repos/rust-lang/rust/commits/23c03e499492b6d56c7c15f2868035005067ae21", "html_url": "https://github.com/rust-lang/rust/commit/23c03e499492b6d56c7c15f2868035005067ae21"}], "stats": {"total": 133, "additions": 131, "deletions": 2}, "files": [{"sha": "962f9067a4e4a88e9db91e955b52aa4564e0edcc", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -1214,6 +1214,7 @@ Released 2018-09-13\n [`too_many_lines`]: https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines\n [`toplevel_ref_arg`]: https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg\n [`transmute_bytes_to_str`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_bytes_to_str\n+[`transmute_float_to_int`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_float_to_int\n [`transmute_int_to_bool`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_bool\n [`transmute_int_to_char`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_char\n [`transmute_int_to_float`]: https://rust-lang.github.io/rust-clippy/master/index.html#transmute_int_to_float"}, {"sha": "6133fa4c3a57fe27291bd3aebae7f8cdb200ddd5", "filename": "README.md", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -6,7 +6,7 @@\n \n A collection of lints to catch common mistakes and improve your [Rust](https://github.com/rust-lang/rust) code.\n \n-[There are 339 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n+[There are 340 lints included in this crate!](https://rust-lang.github.io/rust-clippy/master/index.html)\n \n We have a bunch of lint categories to allow you to choose how much Clippy is supposed to ~~annoy~~ help you:\n "}, {"sha": "736ff30c81a7b3432498eb81e341fd96fe563c0c", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -735,6 +735,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         &trait_bounds::TYPE_REPETITION_IN_BOUNDS,\n         &transmute::CROSSPOINTER_TRANSMUTE,\n         &transmute::TRANSMUTE_BYTES_TO_STR,\n+        &transmute::TRANSMUTE_FLOAT_TO_INT,\n         &transmute::TRANSMUTE_INT_TO_BOOL,\n         &transmute::TRANSMUTE_INT_TO_CHAR,\n         &transmute::TRANSMUTE_INT_TO_FLOAT,\n@@ -1586,6 +1587,7 @@ pub fn register_plugins(store: &mut lint::LintStore, sess: &Session, conf: &Conf\n         LintId::of(&mutex_atomic::MUTEX_INTEGER),\n         LintId::of(&needless_borrow::NEEDLESS_BORROW),\n         LintId::of(&path_buf_push_overwrite::PATH_BUF_PUSH_OVERWRITE),\n+        LintId::of(&transmute::TRANSMUTE_FLOAT_TO_INT),\n         LintId::of(&use_self::USE_SELF),\n     ]);\n }"}, {"sha": "3c63ef765fed76053a850f5d0e65a3f9e55eb197", "filename": "clippy_lints/src/transmute.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/clippy_lints%2Fsrc%2Ftransmute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/clippy_lints%2Fsrc%2Ftransmute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftransmute.rs?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -190,6 +190,28 @@ declare_clippy_lint! {\n     \"transmutes from an integer to a float\"\n }\n \n+declare_clippy_lint! {\n+    /// **What it does:** Checks for transmutes from a float to an integer.\n+    ///\n+    /// **Why is this bad?** Transmutes are dangerous and error-prone, whereas `to_bits` is intuitive\n+    /// and safe.\n+    ///\n+    /// **Known problems:** None.\n+    ///\n+    /// **Example:**\n+    /// ```rust\n+    /// unsafe {\n+    ///     let _: u32 = std::mem::transmute(1f32);\n+    /// }\n+    ///\n+    /// // should be:\n+    /// let _: u32 = 1f32.to_bits();\n+    /// ```\n+    pub TRANSMUTE_FLOAT_TO_INT,\n+    nursery,\n+    \"transmutes from a float to an integer\"\n+}\n+\n declare_clippy_lint! {\n     /// **What it does:** Checks for transmutes from a pointer to a pointer, or\n     /// from a reference to a reference.\n@@ -254,6 +276,7 @@ declare_lint_pass!(Transmute => [\n     TRANSMUTE_BYTES_TO_STR,\n     TRANSMUTE_INT_TO_BOOL,\n     TRANSMUTE_INT_TO_FLOAT,\n+    TRANSMUTE_FLOAT_TO_INT,\n     UNSOUND_COLLECTION_TRANSMUTE,\n ]);\n \n@@ -520,6 +543,50 @@ impl<'a, 'tcx> LateLintPass<'a, 'tcx> for Transmute {\n                             );\n                         },\n                     ),\n+                    (&ty::Float(float_ty), &ty::Int(_)) | (&ty::Float(float_ty), &ty::Uint(_)) => span_lint_and_then(\n+                        cx,\n+                        TRANSMUTE_FLOAT_TO_INT,\n+                        e.span,\n+                        &format!(\"transmute from a `{}` to a `{}`\", from_ty, to_ty),\n+                        |db| {\n+                            let mut expr = &args[0];\n+                            let mut arg = sugg::Sugg::hir(cx, expr, \"..\");\n+\n+                            if let ExprKind::Unary(UnOp::UnNeg, inner_expr) = &expr.kind {\n+                                expr = &inner_expr;\n+                            }\n+\n+                            if_chain! {\n+                                // if the expression is a float literal and it is unsuffixed then\n+                                // add a suffix so the suggestion is valid and unambiguous\n+                                let op = format!(\"{}{}\", arg, float_ty.name_str()).into();\n+                                if let ExprKind::Lit(lit) = &expr.kind;\n+                                if let ast::LitKind::Float(_, ast::LitFloatType::Unsuffixed) = lit.node;\n+                                then {\n+                                    match arg {\n+                                        sugg::Sugg::MaybeParen(_) => arg = sugg::Sugg::MaybeParen(op),\n+                                        _ => arg = sugg::Sugg::NonParen(op)\n+                                    }\n+                                }\n+                            }\n+\n+                            arg = sugg::Sugg::NonParen(format!(\"{}.to_bits()\", arg.maybe_par()).into());\n+\n+                            // cast the result of `to_bits` if `to_ty` is signed\n+                            arg = if let ty::Int(int_ty) = to_ty.kind {\n+                                arg.as_ty(int_ty.name_str().to_string())\n+                            } else {\n+                                arg\n+                            };\n+\n+                            db.span_suggestion(\n+                                e.span,\n+                                \"consider using\",\n+                                arg.to_string(),\n+                                Applicability::Unspecified,\n+                            );\n+                        },\n+                    ),\n                     (&ty::Adt(ref from_adt, ref from_substs), &ty::Adt(ref to_adt, ref to_substs)) => {\n                         if from_adt.did != to_adt.did ||\n                                 !COLLECTIONS.iter().any(|path| match_def_path(cx, to_adt.did, path)) {"}, {"sha": "f4ebf6cbd918311fa5520b56e872094d62542392", "filename": "src/lintlist/mod.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/src%2Flintlist%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/src%2Flintlist%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flintlist%2Fmod.rs?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -6,7 +6,7 @@ pub use lint::Lint;\n pub use lint::LINT_LEVELS;\n \n // begin lint list, do not remove this comment, it\u2019s used in `update_lints`\n-pub const ALL_LINTS: [Lint; 339] = [\n+pub const ALL_LINTS: [Lint; 340] = [\n     Lint {\n         name: \"absurd_extreme_comparisons\",\n         group: \"correctness\",\n@@ -1953,6 +1953,13 @@ pub const ALL_LINTS: [Lint; 339] = [\n         deprecation: None,\n         module: \"transmute\",\n     },\n+    Lint {\n+        name: \"transmute_float_to_int\",\n+        group: \"nursery\",\n+        desc: \"transmutes from a float to an integer\",\n+        deprecation: None,\n+        module: \"transmute\",\n+    },\n     Lint {\n         name: \"transmute_int_to_bool\",\n         group: \"complexity\","}, {"sha": "ce942751ada82cee06778cf4599528b3073e5397", "filename": "tests/ui/transmute_float_to_int.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/tests%2Fui%2Ftransmute_float_to_int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/tests%2Fui%2Ftransmute_float_to_int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.rs?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -0,0 +1,12 @@\n+#[warn(clippy::transmute_float_to_int)]\n+\n+fn float_to_int() {\n+    let _: u32 = unsafe { std::mem::transmute(1f32) };\n+    let _: i32 = unsafe { std::mem::transmute(1f32) };\n+    let _: u64 = unsafe { std::mem::transmute(1f64) };\n+    let _: i64 = unsafe { std::mem::transmute(1f64) };\n+    let _: u64 = unsafe { std::mem::transmute(1.0) };\n+    let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+}\n+\n+fn main() {}"}, {"sha": "eb786bb39f95aa5c1f7110d053acf78cd96b340b", "filename": "tests/ui/transmute_float_to_int.stderr", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/tests%2Fui%2Ftransmute_float_to_int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b245fbd0f2bdbd002611a45d0758f9be44eaf66b/tests%2Fui%2Ftransmute_float_to_int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fui%2Ftransmute_float_to_int.stderr?ref=b245fbd0f2bdbd002611a45d0758f9be44eaf66b", "patch": "@@ -0,0 +1,40 @@\n+error: transmute from a `f32` to a `u32`\n+  --> $DIR/transmute_float_to_int.rs:4:27\n+   |\n+LL |     let _: u32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits()`\n+   |\n+   = note: `-D clippy::transmute-float-to-int` implied by `-D warnings`\n+\n+error: transmute from a `f32` to a `i32`\n+  --> $DIR/transmute_float_to_int.rs:5:27\n+   |\n+LL |     let _: i32 = unsafe { std::mem::transmute(1f32) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f32.to_bits() as i32`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:6:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits()`\n+\n+error: transmute from a `f64` to a `i64`\n+  --> $DIR/transmute_float_to_int.rs:7:27\n+   |\n+LL |     let _: i64 = unsafe { std::mem::transmute(1f64) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1f64.to_bits() as i64`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:8:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `1.0f64.to_bits()`\n+\n+error: transmute from a `f64` to a `u64`\n+  --> $DIR/transmute_float_to_int.rs:9:27\n+   |\n+LL |     let _: u64 = unsafe { std::mem::transmute(-1.0) };\n+   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider using: `(-1.0f64).to_bits()`\n+\n+error: aborting due to 6 previous errors\n+"}]}