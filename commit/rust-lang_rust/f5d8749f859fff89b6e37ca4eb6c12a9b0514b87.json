{"sha": "f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY1ZDg3NDlmODU5ZmZmODliNmUzN2NhNGViNmMxMmE5YjA1MTRiODc=", "commit": {"author": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-08-28T09:11:33Z"}, "committer": {"name": "Andreas Liljeqvist", "email": "bonega@gmail.com", "date": "2021-09-09T08:41:18Z"}, "message": "Remove `contains_zero`, respect the compiler", "tree": {"sha": "752d0f9f65f77c5719d6e3708308c892214cf7b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/752d0f9f65f77c5719d6e3708308c892214cf7b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "html_url": "https://github.com/rust-lang/rust/commit/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/comments", "author": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bonega", "id": 411677, "node_id": "MDQ6VXNlcjQxMTY3Nw==", "avatar_url": "https://avatars.githubusercontent.com/u/411677?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bonega", "html_url": "https://github.com/bonega", "followers_url": "https://api.github.com/users/bonega/followers", "following_url": "https://api.github.com/users/bonega/following{/other_user}", "gists_url": "https://api.github.com/users/bonega/gists{/gist_id}", "starred_url": "https://api.github.com/users/bonega/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bonega/subscriptions", "organizations_url": "https://api.github.com/users/bonega/orgs", "repos_url": "https://api.github.com/users/bonega/repos", "events_url": "https://api.github.com/users/bonega/events{/privacy}", "received_events_url": "https://api.github.com/users/bonega/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "021c3346edcd63f88a2137d8abeb2eaa7d445f95", "url": "https://api.github.com/repos/rust-lang/rust/commits/021c3346edcd63f88a2137d8abeb2eaa7d445f95", "html_url": "https://github.com/rust-lang/rust/commit/021c3346edcd63f88a2137d8abeb2eaa7d445f95"}], "stats": {"total": 13, "additions": 3, "deletions": 10}, "files": [{"sha": "c7b1a805223bfdf37a8a614a3139a6bfad401150", "filename": "compiler/rustc_codegen_llvm/src/builder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_llvm%2Fsrc%2Fbuilder.rs?ref=f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "patch": "@@ -468,7 +468,7 @@ impl BuilderMethods<'a, 'tcx> for Builder<'a, 'll, 'tcx> {\n                         bx.range_metadata(load, &scalar.valid_range);\n                     }\n                 }\n-                abi::Pointer if !scalar.valid_range.contains_zero() => {\n+                abi::Pointer if !scalar.valid_range.contains(0) => {\n                     bx.nonnull_metadata(load);\n                 }\n                 _ => {}"}, {"sha": "9f9806f272e5a3c08928cf976dbdf423a678b1dd", "filename": "compiler/rustc_middle/src/ty/layout.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Flayout.rs?ref=f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "patch": "@@ -2921,7 +2921,7 @@ where\n                 return;\n             }\n \n-            if !scalar.valid_range.contains_zero() {\n+            if !scalar.valid_range.contains(0) {\n                 attrs.set(ArgAttribute::NonNull);\n             }\n "}, {"sha": "7e9fc41d10f26fb4c79d2af400e97cf7318bb326", "filename": "compiler/rustc_target/src/abi/mod.rs", "status": "modified", "additions": 1, "deletions": 8, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f5d8749f859fff89b6e37ca4eb6c12a9b0514b87/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_target%2Fsrc%2Fabi%2Fmod.rs?ref=f5d8749f859fff89b6e37ca4eb6c12a9b0514b87", "patch": "@@ -759,13 +759,6 @@ impl WrappingRange {\n         }\n     }\n \n-    /// Returns `true` if zero is contained in the range.\n-    /// Equal to `range.contains(0)` but should be faster.\n-    #[inline(always)]\n-    pub fn contains_zero(&self) -> bool {\n-        self.start > self.end || self.start == 0\n-    }\n-\n     /// Returns `self` with replaced `start`\n     #[inline(always)]\n     pub fn with_start(mut self, start: u128) -> Self {\n@@ -1266,7 +1259,7 @@ impl<'a, Ty> TyAndLayout<'a, Ty> {\n         let scalar_allows_raw_init = move |s: &Scalar| -> bool {\n             if zero {\n                 // The range must contain 0.\n-                s.valid_range.contains_zero()\n+                s.valid_range.contains(0)\n             } else {\n                 // The range must include all values.\n                 s.is_always_valid_for(cx)"}]}