{"sha": "79c9e130731c6fc471c946fb289a67348749a0b7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5YzllMTMwNzMxYzZmYzQ3MWM5NDZmYjI4OWE2NzM0ODc0OWEwYjc=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T01:20:48Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2011-05-27T01:21:02Z"}, "message": "More delicious dead code removal from runtime, upcalls.", "tree": {"sha": "f2c7c9de98883872b2302d698ebfb12f6499bb7b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f2c7c9de98883872b2302d698ebfb12f6499bb7b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/79c9e130731c6fc471c946fb289a67348749a0b7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/79c9e130731c6fc471c946fb289a67348749a0b7", "html_url": "https://github.com/rust-lang/rust/commit/79c9e130731c6fc471c946fb289a67348749a0b7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/79c9e130731c6fc471c946fb289a67348749a0b7/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4f792f2dbb40ae069b2625425fab58009e19ac74", "url": "https://api.github.com/repos/rust-lang/rust/commits/4f792f2dbb40ae069b2625425fab58009e19ac74", "html_url": "https://github.com/rust-lang/rust/commit/4f792f2dbb40ae069b2625425fab58009e19ac74"}], "stats": {"total": 652, "additions": 50, "deletions": 602}, "files": [{"sha": "2b1617a07ee7a272fe6447fca9ddb46cf268d84e", "filename": "mk/rt.mk", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/mk%2Frt.mk", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/mk%2Frt.mk", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/mk%2Frt.mk?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -8,9 +8,7 @@ RUNTIME_CS := rt/sync/timer.cpp \\\n               rt/rust.cpp \\\n               rt/rust_builtin.cpp \\\n               rt/rust_run_program.cpp \\\n-              rt/rust_crate.cpp \\\n               rt/rust_crate_cache.cpp \\\n-              rt/rust_crate_reader.cpp \\\n               rt/rust_comm.cpp \\\n               rt/rust_dom.cpp \\\n               rt/rust_task.cpp \\\n@@ -37,7 +35,6 @@ RUNTIME_S := rt/activate_glue.s rt/yield_glue.s\n \n RUNTIME_HDR := rt/globals.h \\\n                rt/rust.h \\\n-               rt/rust_dwarf.h \\\n                rt/rust_internal.h \\\n                rt/rust_util.h \\\n                rt/rust_chan.h \\"}, {"sha": "f05ea3d75762c6cacb415387d5d553af6ebe16c2", "filename": "src/comp/back/upcall.rs", "status": "modified", "additions": 3, "deletions": 14, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Fcomp%2Fback%2Fupcall.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Fcomp%2Fback%2Fupcall.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fupcall.rs?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -6,13 +6,13 @@ import trans::ModuleRef;\n import trans::TypeRef;\n import trans::ValueRef;\n \n-import trans::T_crate;\n import trans::T_f32;\n import trans::T_f64;\n import trans::T_fn;\n import trans::T_i8;\n import trans::T_i32;\n import trans::T_int;\n+import trans::T_nil;\n import trans::T_opaque_chan_ptr;\n import trans::T_opaque_port_ptr;\n import trans::T_opaque_vec_ptr;\n@@ -51,8 +51,6 @@ type upcalls = rec(\n     ValueRef new_str,\n     ValueRef new_vec,\n     ValueRef vec_grow,\n-    ValueRef require_rust_sym,\n-    ValueRef require_c_sym,\n     ValueRef get_type_desc,\n     ValueRef new_task,\n     ValueRef start_task,\n@@ -109,18 +107,9 @@ fn declare_upcalls(type_names tn, ModuleRef llmod) -> @upcalls {\n         vec_grow=d(\"vec_grow\", [T_opaque_vec_ptr(), T_size_t(),\n                                    T_ptr(T_int()), T_ptr(T_tydesc(tn))],\n                    T_opaque_vec_ptr()),\n-        require_rust_sym=d(\"require_rust_sym\",\n-                           [T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n-                               T_size_t(), T_ptr(T_i8()),\n-                               T_ptr(T_ptr(T_i8()))],\n-                           T_int()),\n-        require_c_sym=d(\"require_c_sym\",\n-                        [T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n-                            T_ptr(T_i8()), T_ptr(T_i8())],\n-                        T_int()),\n         get_type_desc=d(\"get_type_desc\",\n-                        [T_ptr(T_crate(tn)), T_size_t(), T_size_t(),\n-                            T_size_t(), T_ptr(T_ptr(T_tydesc(tn)))],\n+                        [T_ptr(T_nil()), T_size_t(), T_size_t(),\n+                         T_size_t(), T_ptr(T_ptr(T_tydesc(tn)))],\n                         T_ptr(T_tydesc(tn))),\n         new_task=d(\"new_task\", [T_ptr(T_str())], T_taskptr(tn)),\n         start_task=d(\"start_task\", [T_taskptr(tn), "}, {"sha": "9c3f5178fec193aabeb2cc75261c29497e86e7d6", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 8, "deletions": 65, "changes": 73, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -95,7 +95,6 @@ state type crate_ctxt = rec(session::session sess,\n                             ModuleRef llmod,\n                             target_data td,\n                             type_names tn,\n-                            ValueRef crate_ptr,\n                             hashmap[str, ValueRef] externs,\n                             hashmap[str, ValueRef] intrinsics,\n                             hashmap[ast::def_id, ValueRef] item_ids,\n@@ -482,31 +481,6 @@ fn T_chan(TypeRef t) -> TypeRef {\n     ret T_struct([T_int()]); // Refcount\n }\n \n-fn T_crate(&type_names tn) -> TypeRef {\n-    auto s = \"crate\";\n-    if (tn.name_has_type(s)) {\n-        ret tn.get_type(s);\n-    }\n-\n-    auto t = T_struct([T_int(),      // ptrdiff_t image_base_off\n-                          T_int(),      // uintptr_t self_addr\n-                          T_int(),      // ptrdiff_t debug_abbrev_off\n-                          T_int(),      // size_t debug_abbrev_sz\n-                          T_int(),      // ptrdiff_t debug_info_off\n-                          T_int(),      // size_t debug_info_sz\n-                          T_int(),      // size_t activate_glue\n-                          T_int(),      // size_t yield_glue\n-                          T_int(),      // size_t unwind_glue\n-                          T_int(),      // size_t pad\n-                          T_int(),      // size_t pad\n-                          T_int(),      // int n_rust_syms\n-                          T_int(),      // int n_c_syms\n-                          T_int()       // int n_libs\n-                          ]);\n-    tn.associate(s, t);\n-    ret t;\n-}\n-\n fn T_taskptr(&type_names tn) -> TypeRef {\n     ret T_ptr(T_task(tn));\n }\n@@ -1670,11 +1644,11 @@ fn get_derived_tydesc(&@block_ctxt cx, &ty::t t, bool escapes,\n             T_ptr(T_ptr(T_tydesc(bcx.fcx.lcx.ccx.tn))));\n         auto td_val = bcx.build.Call(bcx.fcx.lcx.ccx.upcalls.get_type_desc,\n             [bcx.fcx.lltaskptr,\n-                bcx.fcx.lcx.ccx.crate_ptr,\n-                sz.val,\n-                align.val,\n-                C_int((1u + n_params) as int),\n-                lltydescsptr]);\n+             C_null(T_ptr(T_nil())),\n+             sz.val,\n+             align.val,\n+             C_int((1u + n_params) as int),\n+             lltydescsptr]);\n         v = td_val;\n     } else {\n         auto llparamtydescs = alloca(bcx,\n@@ -7615,35 +7589,10 @@ fn i2p(ValueRef v, TypeRef t) -> ValueRef {\n }\n \n fn create_typedefs(&@crate_ctxt cx) {\n-    llvm::LLVMAddTypeName(cx.llmod, str::buf(\"crate\"), T_crate(cx.tn));\n     llvm::LLVMAddTypeName(cx.llmod, str::buf(\"task\"), T_task(cx.tn));\n     llvm::LLVMAddTypeName(cx.llmod, str::buf(\"tydesc\"), T_tydesc(cx.tn));\n }\n \n-fn create_crate_constant(ValueRef crate_ptr, @glue_fns glues) {\n-\n-    let ValueRef crate_addr = p2i(crate_ptr);\n-\n-    let ValueRef crate_val =\n-        C_struct([C_null(T_int()),     // ptrdiff_t image_base_off\n-                     p2i(crate_ptr),      // uintptr_t self_addr\n-                     C_null(T_int()),     // ptrdiff_t debug_abbrev_off\n-                     C_null(T_int()),     // size_t debug_abbrev_sz\n-                     C_null(T_int()),     // ptrdiff_t debug_info_off\n-                     C_null(T_int()),     // size_t debug_info_sz\n-                     C_null(T_int()),     // size_t pad\n-                     C_null(T_int()),     // size_t pad2\n-                     C_null(T_int()),     // size_t pad3\n-                     C_null(T_int()),     // size_t pad4\n-                     C_null(T_int()),     // size_t pad5\n-                     C_null(T_int()),     // int n_rust_syms\n-                     C_null(T_int()),     // int n_c_syms\n-                     C_null(T_int())      // int n_libs\n-                     ]);\n-\n-    llvm::LLVMSetInitializer(crate_ptr, crate_val);\n-}\n-\n fn find_main_fn(&@crate_ctxt cx) -> ValueRef {\n     auto e = sep() + \"main\";\n     let ValueRef v = C_nil();\n@@ -7668,7 +7617,7 @@ fn find_main_fn(&@crate_ctxt cx) -> ValueRef {\n     fail;\n }\n \n-fn trans_main_fn(@local_ctxt cx, ValueRef llcrate, ValueRef crate_map) {\n+fn trans_main_fn(@local_ctxt cx, ValueRef crate_map) {\n     auto T_main_args = [T_int(), T_int()];\n     auto T_rust_start_args = [T_int(), T_int(), T_int(), T_int()];\n \n@@ -7693,7 +7642,7 @@ fn trans_main_fn(@local_ctxt cx, ValueRef llcrate, ValueRef crate_map) {\n     // Emit the moral equivalent of:\n     //\n     // main(int argc, char **argv) {\n-    //     rust_start(&_rust.main, &crate, argc, argv);\n+    //     rust_start(&_rust.main, argc, argv);\n     // }\n     //\n \n@@ -8002,15 +7951,12 @@ fn make_common_glue(&session::session sess, &str output) {\n     llvm::LLVMSetTarget(llmod, str::buf(x86::get_target_triple()));\n     auto td = mk_target_data(x86::get_data_layout());\n     auto tn = mk_type_names();\n-    let ValueRef crate_ptr =\n-        llvm::LLVMAddGlobal(llmod, T_crate(tn), str::buf(\"rust_crate\"));\n \n     auto intrinsics = declare_intrinsics(llmod);\n \n     llvm::LLVMSetModuleInlineAsm(llmod, str::buf(x86::get_module_asm()));\n \n     auto glues = make_glues(llmod, tn);\n-    create_crate_constant(crate_ptr, glues);\n \n     link::write::run_passes(sess, llmod, output);\n }\n@@ -8076,8 +8022,6 @@ fn trans_crate(&session::session sess, &@ast::crate crate,\n     llvm::LLVMSetTarget(llmod, str::buf(x86::get_target_triple()));\n     auto td = mk_target_data(x86::get_data_layout());\n     auto tn = mk_type_names();\n-    let ValueRef crate_ptr =\n-        llvm::LLVMAddGlobal(llmod, T_crate(tn), str::buf(\"rust_crate\"));\n \n     auto intrinsics = declare_intrinsics(llmod);\n \n@@ -8095,7 +8039,6 @@ fn trans_crate(&session::session sess, &@ast::crate crate,\n                     llmod = llmod,\n                     td = td,\n                     tn = tn,\n-                    crate_ptr = crate_ptr,\n                     externs = new_str_hash[ValueRef](),\n                     intrinsics = intrinsics,\n                     item_ids = new_def_hash[ValueRef](),\n@@ -8135,7 +8078,7 @@ fn trans_crate(&session::session sess, &@ast::crate crate,\n     trans_vec_append_glue(cx, crate.span);\n     auto crate_map = create_crate_map(ccx);\n     if (!sess.get_opts().shared) {\n-        trans_main_fn(cx, crate_ptr, crate_map);\n+        trans_main_fn(cx, crate_map);\n     }\n \n     emit_tydescs(ccx);"}, {"sha": "135304215b7946dc9477d4d878e76afd9a133aeb", "filename": "src/rt/rust.cpp", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -93,10 +93,6 @@ new_rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n         DLOG(dom, dom, \"startup: arg[%d] = '%s'\", i, args->argv[i]);\n     }\n \n-    if (log_rt_dwarf) {\n-        rust_crate_reader create_reader(dom);\n-    }\n-\n     uintptr_t main_args[4] = {0, 0, 0, (uintptr_t)args->args};\n     dom->root_task->start(main_fn,\n                           (uintptr_t)&main_args, sizeof(main_args));\n@@ -118,8 +114,7 @@ new_rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n }\n \n extern \"C\" CDECL int\n-rust_start(uintptr_t main_fn, rust_crate const *crate, int argc,\n-           char **argv, void* crate_map) {\n+rust_start(uintptr_t main_fn, int argc, char **argv, void* crate_map) {\n     return new_rust_start(main_fn, argc, argv, crate_map);\n }\n "}, {"sha": "0b63e4bd40e257f4deaba37579c7be6544137305", "filename": "src/rt/rust_crate.cpp", "status": "removed", "additions": 0, "deletions": 51, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_crate.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_crate.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate.cpp?ref=4f792f2dbb40ae069b2625425fab58009e19ac74", "patch": "@@ -1,51 +0,0 @@\n-\n-#include \"rust_internal.h\"\n-\n-uintptr_t\n-rust_crate::get_image_base() const {\n-  return ((uintptr_t)this + image_base_off);\n-}\n-\n-ptrdiff_t\n-rust_crate::get_relocation_diff() const {\n-  return ((uintptr_t)this - self_addr);\n-}\n-\n-rust_crate::mem_area::mem_area(rust_dom *dom, uintptr_t pos, size_t sz)\n-  : dom(dom),\n-    base(pos),\n-    lim(pos + sz)\n-{\n-  DLOG(dom, mem, \"new mem_area [0x%\" PRIxPTR \",0x%\" PRIxPTR \"]\",\n-       base, lim);\n-}\n-\n-rust_crate::mem_area\n-rust_crate::get_debug_info(rust_dom *dom) const {\n-    if (debug_info_off)\n-        return mem_area(dom,\n-                        ((uintptr_t)this + debug_info_off),\n-                        debug_info_sz);\n-    else\n-        return mem_area(dom, 0, 0);\n-}\n-\n-rust_crate::mem_area\n-rust_crate::get_debug_abbrev(rust_dom *dom) const {\n-    if (debug_abbrev_off)\n-        return mem_area(dom,\n-                        ((uintptr_t)this + debug_abbrev_off),\n-                        debug_abbrev_sz);\n-    else\n-        return mem_area(dom, 0, 0);\n-}\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}, {"sha": "1f66e0e0084e169ed6baae7814fbf5f60d068c37", "filename": "src/rt/rust_crate_cache.cpp", "status": "modified", "additions": 1, "deletions": 12, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_crate_cache.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_crate_cache.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_cache.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -1,15 +1,6 @@\n \n #include \"rust_internal.h\"\n \n-static inline void\n-adjust_disp(uintptr_t &disp, const void *oldp, const void *newp)\n-{\n-    if (disp) {\n-        disp += (uintptr_t)oldp;\n-        disp -= (uintptr_t)newp;\n-    }\n-}\n-\n type_desc *\n rust_crate_cache::get_type_desc(size_t size,\n                                 size_t align,\n@@ -47,10 +38,8 @@ rust_crate_cache::get_type_desc(size_t size,\n     return td;\n }\n \n-rust_crate_cache::rust_crate_cache(rust_dom *dom,\n-                                   rust_crate const *crate)\n+rust_crate_cache::rust_crate_cache(rust_dom *dom)\n     : type_descs(NULL),\n-      crate(crate),\n       dom(dom),\n       idx(0)\n {"}, {"sha": "15f4bc8c092e91298de3bd785370c328f1c0e1fe", "filename": "src/rt/rust_crate_reader.cpp", "status": "removed", "additions": 0, "deletions": 79, "changes": 79, "blob_url": "https://github.com/rust-lang/rust/blob/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_crate_reader.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_crate_reader.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_crate_reader.cpp?ref=4f792f2dbb40ae069b2625425fab58009e19ac74", "patch": "@@ -1,79 +0,0 @@\n-\n-#include \"rust_internal.h\"\n-\n-rust_crate_reader::abbrev::abbrev(rust_dom *dom,\n-                                  uintptr_t body_off,\n-                                  size_t body_sz,\n-                                  uintptr_t tag,\n-                                  uint8_t has_children) :\n-  dom(dom),\n-  body_off(body_off),\n-  tag(tag),\n-  has_children(has_children),\n-  idx(0)\n-{}\n-\n-bool\n-rust_crate_reader::attr::is_numeric() const\n-{\n-  switch (form) {\n-  case DW_FORM_ref_addr:\n-  case DW_FORM_addr:\n-  case DW_FORM_data4:\n-  case DW_FORM_data1:\n-  case DW_FORM_flag:\n-    return true;\n-  default:\n-    break;\n-  }\n-  return false;\n-}\n-\n-bool\n-rust_crate_reader::attr::is_string() const\n-{\n-  return form == DW_FORM_string;\n-}\n-\n-size_t\n-rust_crate_reader::attr::get_ssz(rust_dom *dom) const\n-{\n-  I(dom, is_string());\n-  return val.str.sz;\n-}\n-\n-char const *\n-rust_crate_reader::attr::get_str(rust_dom *dom) const\n-{\n-  I(dom, is_string());\n-  return val.str.s;\n-}\n-\n-uintptr_t\n-rust_crate_reader::attr::get_num(rust_dom *dom) const\n-{\n-  I(dom, is_numeric());\n-  return val.num;\n-}\n-\n-bool\n-rust_crate_reader::attr::is_unknown() const {\n-  return !(is_numeric() || is_string());\n-}\n-\n-rust_crate_reader::rust_crate_reader(rust_dom *dom)\n-  : dom(dom)\n-{\n-  DLOG(dom, mem, \"crate_reader on crate: 0x%\" PRIxPTR, this);\n-}\n-\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:"}, {"sha": "6a5c4631f5e7c1d53ad384884ce6b2e6cd49e013", "filename": "src/rt/rust_dom.cpp", "status": "modified", "additions": 3, "deletions": 22, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_dom.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_dom.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -16,7 +16,7 @@ rust_dom::rust_dom(rust_kernel *kernel,\n     running_tasks(this, \"running\"),\n     blocked_tasks(this, \"blocked\"),\n     dead_tasks(this, \"dead\"),\n-    caches(this),\n+    cache(this),\n     root_task(NULL),\n     curr_task(NULL),\n     rval(0),\n@@ -42,9 +42,6 @@ rust_dom::~rust_dom() {\n #ifndef __WIN32__\n     pthread_attr_destroy(&attr);\n #endif\n-    while (caches.length()) {\n-        delete caches.pop();\n-    }\n }\n \n extern \"C\" void new_rust_activate_glue(rust_task *)\n@@ -341,24 +338,8 @@ rust_dom::start_main_loop() {\n \n \n rust_crate_cache *\n-rust_dom::get_cache(rust_crate const *crate) {\n-    DLOG(this, cache, \"looking for crate-cache for crate 0x%\" PRIxPTR, crate);\n-    rust_crate_cache *cache = NULL;\n-    for (size_t i = 0; i < caches.length(); ++i) {\n-        rust_crate_cache *c = caches[i];\n-        if (c->crate == crate) {\n-            cache = c;\n-            break;\n-        }\n-    }\n-    if (!cache) {\n-        DLOG(this, cache,\n-            \"making new crate-cache for crate 0x%\" PRIxPTR, crate);\n-        cache = new (this) rust_crate_cache(this, crate);\n-        caches.push(cache);\n-    }\n-    cache->ref();\n-    return cache;\n+rust_dom::get_cache() {\n+    return &cache;\n }\n \n rust_task *"}, {"sha": "2b88a2c713f716cdd539d220ee12e63d949e1733", "filename": "src/rt/rust_dom.h", "status": "modified", "additions": 27, "deletions": 2, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_dom.h", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_dom.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dom.h?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -1,6 +1,31 @@\n #ifndef RUST_DOM_H\n #define RUST_DOM_H\n \n+struct rust_dom;\n+\n+class\n+rust_crate_cache\n+{\n+public:\n+    type_desc *get_type_desc(size_t size,\n+                             size_t align,\n+                             size_t n_descs,\n+                             type_desc const **descs);\n+\n+private:\n+\n+    type_desc *type_descs;\n+\n+public:\n+\n+    rust_dom *dom;\n+    size_t idx;\n+\n+    rust_crate_cache(rust_dom *dom);\n+    ~rust_crate_cache();\n+    void flush();\n+};\n+\n struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n {\n     // Fields known to the compiler:\n@@ -19,7 +44,7 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n     rust_task_list blocked_tasks;\n     rust_task_list dead_tasks;\n \n-    ptr_vec<rust_crate_cache> caches;\n+    rust_crate_cache cache;\n \n     randctx rctx;\n     rust_task *root_task;\n@@ -65,7 +90,7 @@ struct rust_dom : public kernel_owned<rust_dom>, rc_base<rust_dom>\n     void win32_require(LPCTSTR fn, BOOL ok);\n #endif\n \n-    rust_crate_cache *get_cache(rust_crate const *crate);\n+    rust_crate_cache *get_cache();\n     size_t number_of_live_tasks();\n \n     void reap_dead_tasks();"}, {"sha": "8eff3b8ce2b67bb43962aeebd2d2cb86fef98428", "filename": "src/rt/rust_dwarf.h", "status": "removed", "additions": 0, "deletions": 198, "changes": 198, "blob_url": "https://github.com/rust-lang/rust/blob/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_dwarf.h", "raw_url": "https://github.com/rust-lang/rust/raw/4f792f2dbb40ae069b2625425fab58009e19ac74/src%2Frt%2Frust_dwarf.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_dwarf.h?ref=4f792f2dbb40ae069b2625425fab58009e19ac74", "patch": "@@ -1,198 +0,0 @@\n-#ifndef RUST_DWARF_H\n-#define RUST_DWARF_H\n-\n-enum\n-dw_form\n-  {\n-    DW_FORM_addr = 0x01,\n-    DW_FORM_block2 = 0x03,\n-    DW_FORM_block4 = 0x04,\n-    DW_FORM_data2 = 0x05,\n-    DW_FORM_data4 = 0x06,\n-    DW_FORM_data8 = 0x07,\n-    DW_FORM_string = 0x08,\n-    DW_FORM_block = 0x09,\n-    DW_FORM_block1 = 0x0a,\n-    DW_FORM_data1 = 0x0b,\n-    DW_FORM_flag = 0x0c,\n-    DW_FORM_sdata = 0x0d,\n-    DW_FORM_strp = 0x0e,\n-    DW_FORM_udata = 0x0f,\n-    DW_FORM_ref_addr = 0x10,\n-    DW_FORM_ref1 = 0x11,\n-    DW_FORM_ref2 = 0x12,\n-    DW_FORM_ref4 = 0x13,\n-    DW_FORM_ref8 = 0x14,\n-    DW_FORM_ref_udata = 0x15,\n-    DW_FORM_indirect = 0x16\n-  };\n-\n-enum\n-dw_at\n-  {\n-    DW_AT_sibling = 0x01,\n-    DW_AT_location = 0x02,\n-    DW_AT_name = 0x03,\n-    DW_AT_ordering = 0x09,\n-    DW_AT_byte_size = 0x0b,\n-    DW_AT_bit_offset = 0x0c,\n-    DW_AT_bit_size = 0x0d,\n-    DW_AT_stmt_list = 0x10,\n-    DW_AT_low_pc = 0x11,\n-    DW_AT_high_pc = 0x12,\n-    DW_AT_language = 0x13,\n-    DW_AT_discr = 0x15,\n-    DW_AT_discr_value = 0x16,\n-    DW_AT_visibility = 0x17,\n-    DW_AT_import = 0x18,\n-    DW_AT_string_length = 0x19,\n-    DW_AT_common_reference = 0x1a,\n-    DW_AT_comp_dir = 0x1b,\n-    DW_AT_const_value = 0x1c,\n-    DW_AT_containing_type = 0x1d,\n-    DW_AT_default_value = 0x1e,\n-    DW_AT_inline = 0x20,\n-    DW_AT_is_optional = 0x21,\n-    DW_AT_lower_bound = 0x22,\n-    DW_AT_producer = 0x25,\n-    DW_AT_prototyped = 0x27,\n-    DW_AT_return_addr = 0x2a,\n-    DW_AT_start_scope = 0x2c,\n-    DW_AT_bit_stride = 0x2e,\n-    DW_AT_upper_bound = 0x2f,\n-    DW_AT_abstract_origin = 0x31,\n-    DW_AT_accessibility = 0x32,\n-    DW_AT_address_class = 0x33,\n-    DW_AT_artificial = 0x34,\n-    DW_AT_base_types = 0x35,\n-    DW_AT_calling_convention = 0x36,\n-    DW_AT_count = 0x37,\n-    DW_AT_data_member_location = 0x38,\n-    DW_AT_decl_column = 0x39,\n-    DW_AT_decl_file = 0x3a,\n-    DW_AT_decl_line = 0x3b,\n-    DW_AT_declaration = 0x3c,\n-    DW_AT_discr_list = 0x3d,\n-    DW_AT_encoding = 0x3e,\n-    DW_AT_external = 0x3f,\n-    DW_AT_frame_base = 0x40,\n-    DW_AT_friend = 0x41,\n-    DW_AT_identifier_case = 0x42,\n-    DW_AT_macro_info = 0x43,\n-    DW_AT_namelist_item = 0x44,\n-    DW_AT_priority = 0x45,\n-    DW_AT_segment = 0x46,\n-    DW_AT_specification = 0x47,\n-    DW_AT_static_link = 0x48,\n-    DW_AT_type = 0x49,\n-    DW_AT_use_location = 0x4a,\n-    DW_AT_variable_parameter = 0x4b,\n-    DW_AT_virtuality = 0x4c,\n-    DW_AT_vtable_elem_location = 0x4d,\n-    DW_AT_allocated = 0x4e,\n-    DW_AT_associated = 0x4f,\n-    DW_AT_data_location = 0x50,\n-    DW_AT_byte_stride = 0x51,\n-    DW_AT_entry_pc = 0x52,\n-    DW_AT_use_UTF8 = 0x53,\n-    DW_AT_extension = 0x54,\n-    DW_AT_ranges = 0x55,\n-    DW_AT_trampoline = 0x56,\n-    DW_AT_call_column = 0x57,\n-    DW_AT_call_file = 0x58,\n-    DW_AT_call_line = 0x59,\n-    DW_AT_description = 0x5a,\n-    DW_AT_binary_scale = 0x5b,\n-    DW_AT_decimal_scale = 0x5c,\n-    DW_AT_small = 0x5d,\n-    DW_AT_decimal_sign = 0x5e,\n-    DW_AT_digit_count = 0x5f,\n-    DW_AT_picture_string = 0x60,\n-    DW_AT_mutable = 0x61,\n-    DW_AT_threads_scaled = 0x62,\n-    DW_AT_explicit = 0x63,\n-    DW_AT_object_pointer = 0x64,\n-    DW_AT_endianity = 0x65,\n-    DW_AT_elemental = 0x66,\n-    DW_AT_pure = 0x67,\n-    DW_AT_recursive = 0x68,\n-    DW_AT_lo_user = 0x2000,\n-    DW_AT_hi_user = 0x3fff\n-};\n-\n-enum\n-dw_tag\n-  {\n-    DW_TAG_array_type = 0x01,\n-    DW_TAG_class_type = 0x02,\n-    DW_TAG_entry_point = 0x03,\n-    DW_TAG_enumeration_type = 0x04,\n-    DW_TAG_formal_parameter = 0x05,\n-    DW_TAG_imported_declaration = 0x08,\n-    DW_TAG_label = 0x0a,\n-    DW_TAG_lexical_block = 0x0b,\n-    DW_TAG_member = 0x0d,\n-    DW_TAG_pointer_type = 0x0f,\n-    DW_TAG_reference_type = 0x10,\n-    DW_TAG_compile_unit = 0x11,\n-    DW_TAG_string_type = 0x12,\n-    DW_TAG_structure_type = 0x13,\n-    DW_TAG_subroutine_type = 0x15,\n-    DW_TAG_typedef = 0x16,\n-    DW_TAG_union_type = 0x17,\n-    DW_TAG_unspecified_parameters = 0x18,\n-    DW_TAG_variant = 0x19,\n-    DW_TAG_common_block = 0x1a,\n-    DW_TAG_common_inclusion = 0x1b,\n-    DW_TAG_inheritance = 0x1c,\n-    DW_TAG_inlined_subroutine = 0x1d,\n-    DW_TAG_module = 0x1e,\n-    DW_TAG_ptr_to_member_type = 0x1f,\n-    DW_TAG_set_type = 0x20,\n-    DW_TAG_subrange_type = 0x21,\n-    DW_TAG_with_stmt = 0x22,\n-    DW_TAG_access_declaration = 0x23,\n-    DW_TAG_base_type = 0x24,\n-    DW_TAG_catch_block = 0x25,\n-    DW_TAG_const_type = 0x26,\n-    DW_TAG_constant = 0x27,\n-    DW_TAG_enumerator = 0x28,\n-    DW_TAG_file_type = 0x29,\n-    DW_TAG_friend = 0x2a,\n-    DW_TAG_namelist = 0x2b,\n-    DW_TAG_namelist_item = 0x2c,\n-    DW_TAG_packed_type = 0x2d,\n-    DW_TAG_subprogram = 0x2e,\n-    DW_TAG_template_type_parameter = 0x2f,\n-    DW_TAG_template_value_parameter = 0x30,\n-    DW_TAG_thrown_type = 0x31,\n-    DW_TAG_try_block = 0x32,\n-    DW_TAG_variant_part = 0x33,\n-    DW_TAG_variable = 0x34,\n-    DW_TAG_volatile_type = 0x35,\n-    DW_TAG_dwarf_procedure = 0x36,\n-    DW_TAG_restrict_type = 0x37,\n-    DW_TAG_interface_type = 0x38,\n-    DW_TAG_namespace = 0x39,\n-    DW_TAG_imported_module = 0x3a,\n-    DW_TAG_unspecified_type = 0x3b,\n-    DW_TAG_partial_unit = 0x3c,\n-    DW_TAG_imported_unit = 0x3d,\n-    DW_TAG_condition = 0x3f,\n-    DW_TAG_shared_type = 0x40,\n-    DW_TAG_lo_user = 0x4080,\n-    DW_TAG_hi_user = 0xffff,\n-  };\n-\n-//\n-// Local Variables:\n-// mode: C++\n-// fill-column: 78;\n-// indent-tabs-mode: nil\n-// c-basic-offset: 4\n-// buffer-file-coding-system: utf-8-unix\n-// compile-command: \"make -k -C .. 2>&1 | sed -e 's/\\\\/x\\\\//x:\\\\//g'\";\n-// End:\n-//\n-\n-#endif"}, {"sha": "6b38004bc2632f35eea2a4bdd6ee30944aa5c351", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 0, "deletions": 130, "changes": 130, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -54,7 +54,6 @@ class rust_port;\n class rust_chan;\n struct rust_token;\n class rust_kernel;\n-class rust_crate;\n class rust_crate_cache;\n \n struct stk_seg;\n@@ -204,63 +203,8 @@ struct rust_timer {\n \n #include \"rust_util.h\"\n \n-// Crates.\n-\n-template<typename T> T*\n-crate_rel(rust_crate const *crate, T *t) {\n-    return (T*)(((uintptr_t)crate) + ((ptrdiff_t)t));\n-}\n-\n-template<typename T> T const*\n-crate_rel(rust_crate const *crate, T const *t) {\n-    return (T const*)(((uintptr_t)crate) + ((ptrdiff_t)t));\n-}\n-\n typedef void CDECL (*activate_glue_ty)(rust_task *);\n \n-class rust_crate {\n-    // The following fields are emitted by the compiler for the static\n-    // rust_crate object inside each compiled crate.\n-\n-    ptrdiff_t image_base_off;     // (Loaded image base) - this.\n-    uintptr_t self_addr;          // Un-relocated addres of 'this'.\n-\n-    ptrdiff_t debug_abbrev_off;   // Offset from this to .debug_abbrev.\n-    size_t debug_abbrev_sz;       // Size of .debug_abbrev.\n-\n-    ptrdiff_t debug_info_off;     // Offset from this to .debug_info.\n-    size_t debug_info_sz;         // Size of .debug_info.\n-\n-    ptrdiff_t pad;\n-    ptrdiff_t pad2;\n-    ptrdiff_t pad3;\n-    ptrdiff_t pad4;\n-    ptrdiff_t pad5;\n-\n-public:\n-\n-    size_t pad6;\n-    size_t pad7;\n-    size_t pad8;\n-\n-    // Crates are immutable, constructed by the compiler.\n-\n-    uintptr_t get_image_base() const;\n-    ptrdiff_t get_relocation_diff() const;\n-\n-    struct mem_area\n-    {\n-      rust_dom *dom;\n-      uintptr_t base;\n-      uintptr_t lim;\n-      mem_area(rust_dom *dom, uintptr_t pos, size_t sz);\n-    };\n-\n-    mem_area get_debug_info(rust_dom *dom) const;\n-    mem_area get_debug_abbrev(rust_dom *dom) const;\n-};\n-\n-\n struct type_desc {\n     // First part of type_desc is known to compiler.\n     // first_param = &descs[1] if dynamic, null if static.\n@@ -281,80 +225,6 @@ struct type_desc {\n     const type_desc *descs[];\n };\n \n-class\n-rust_crate_cache : public dom_owned<rust_crate_cache>,\n-                   public rc_base<rust_crate_cache>\n-{\n-public:\n-    type_desc *get_type_desc(size_t size,\n-                             size_t align,\n-                             size_t n_descs,\n-                             type_desc const **descs);\n-\n-private:\n-\n-    type_desc *type_descs;\n-\n-public:\n-\n-    rust_crate const *crate;\n-    rust_dom *dom;\n-    size_t idx;\n-\n-    rust_crate_cache(rust_dom *dom,\n-                     rust_crate const *crate);\n-    ~rust_crate_cache();\n-    void flush();\n-};\n-\n-#include \"rust_dwarf.h\"\n-\n-class\n-rust_crate_reader\n-{\n-    struct\n-    abbrev : dom_owned<abbrev>\n-    {\n-        rust_dom *dom;\n-        uintptr_t body_off;\n-        size_t body_sz;\n-        uintptr_t tag;\n-        uint8_t has_children;\n-        size_t idx;\n-        abbrev(rust_dom *dom, uintptr_t body_off, size_t body_sz,\n-               uintptr_t tag, uint8_t has_children);\n-    };\n-\n-    rust_dom *dom;\n-    size_t idx;\n-\n-\n-public:\n-\n-    struct\n-    attr\n-    {\n-        dw_form form;\n-        dw_at at;\n-        union {\n-            struct {\n-                char const *s;\n-                size_t sz;\n-            } str;\n-            uintptr_t num;\n-        } val;\n-\n-        bool is_numeric() const;\n-        bool is_string() const;\n-        size_t get_ssz(rust_dom *dom) const;\n-        char const *get_str(rust_dom *dom) const;\n-        uintptr_t get_num(rust_dom *dom) const;\n-        bool is_unknown() const;\n-    };\n-\n-    rust_crate_reader(rust_dom *dom);\n-};\n-\n // An alarm can be put into a wait queue and the task will be notified\n // when the wait queue is flushed.\n "}, {"sha": "9a83190f645b59d10e4f9e2d3fd3cb75cbac64cc", "filename": "src/rt/rust_log.cpp", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_log.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_log.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -209,7 +209,6 @@ size_t log_rt_comm;\n size_t log_rt_task;\n size_t log_rt_dom;\n size_t log_rt_trace;\n-size_t log_rt_dwarf;\n size_t log_rt_cache;\n size_t log_rt_upcall;\n size_t log_rt_timer;\n@@ -224,7 +223,6 @@ static const mod_entry _rt_module_map[] =\n      {\"rt.task\", &log_rt_task},\n      {\"rt.dom\", &log_rt_dom},\n      {\"rt.trace\", &log_rt_trace},\n-     {\"rt.dwarf\", &log_rt_dwarf},\n      {\"rt.cache\", &log_rt_cache},\n      {\"rt.upcall\", &log_rt_upcall},\n      {\"rt.timer\", &log_rt_timer},"}, {"sha": "334b4d9477573487f45f25280a1c2f8cba1f85a0", "filename": "src/rt/rust_log.h", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_log.h", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_log.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_log.h?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -66,7 +66,6 @@ extern size_t log_rt_comm;\n extern size_t log_rt_task;\n extern size_t log_rt_dom;\n extern size_t log_rt_trace;\n-extern size_t log_rt_dwarf;\n extern size_t log_rt_cache;\n extern size_t log_rt_upcall;\n extern size_t log_rt_timer;"}, {"sha": "e937bd42ffca0093870c2573c6eb3656f1cb7807", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 2, "deletions": 11, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -131,8 +131,6 @@ rust_task::~rust_task()\n       (ref_count == 1 && this == dom->root_task));\n \n     del_stk(dom, stk);\n-    if (cache)\n-        cache->deref();\n }\n \n extern \"C\" void rust_new_exit_task_glue();\n@@ -597,18 +595,11 @@ rust_task::unblock() {\n }\n \n rust_crate_cache *\n-rust_task::get_crate_cache(rust_crate const *curr_crate)\n+rust_task::get_crate_cache()\n {\n-    if (cache && cache->crate != curr_crate) {\n-        DLOG(dom, task, \"switching task crate-cache to crate 0x%\"\n-             PRIxPTR, curr_crate);\n-        cache->deref();\n-        cache = NULL;\n-    }\n-\n     if (!cache) {\n         DLOG(dom, task, \"fetching cache for current crate\");\n-        cache = dom->get_cache(curr_crate);\n+        cache = dom->get_cache();\n     }\n     return cache;\n }"}, {"sha": "65c0df4e457143a0dc4cbf3d6dae115a1cfb3354", "filename": "src/rt/rust_task.h", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_task.h", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_task.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.h?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -117,7 +117,7 @@ rust_task : public maybe_proxy<rust_task>,\n     uintptr_t get_fp();\n     uintptr_t get_previous_fp(uintptr_t fp);\n     frame_glue_fns *get_frame_glue_fns(uintptr_t fp);\n-    rust_crate_cache * get_crate_cache(rust_crate const *curr_crate);\n+    rust_crate_cache * get_crate_cache();\n };\n \n //"}, {"sha": "b0c362ecc7a6c6cdf745a910139d578fe1465133", "filename": "src/rt/rust_upcall.cpp", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_upcall.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Frust_upcall.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_upcall.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -438,7 +438,7 @@ upcall_vec_grow(rust_task *task,\n \n extern \"C\" CDECL type_desc *\n upcall_get_type_desc(rust_task *task,\n-                     rust_crate const *curr_crate,\n+                     void *curr_crate, // ignored, legacy compat.\n                      size_t size,\n                      size_t align,\n                      size_t n_descs,\n@@ -447,7 +447,7 @@ upcall_get_type_desc(rust_task *task,\n     LOG(task, cache, \"upcall get_type_desc with size=%\" PRIdPTR\n         \", align=%\" PRIdPTR \", %\" PRIdPTR \" descs\", size, align,\n         n_descs);\n-    rust_crate_cache *cache = task->get_crate_cache(curr_crate);\n+    rust_crate_cache *cache = task->get_crate_cache();\n     type_desc *td = cache->get_type_desc(size, align, n_descs, descs);\n     LOG(task, cache, \"returning tydesc 0x%\" PRIxPTR, td);\n     return td;"}, {"sha": "cca199dcdb98bc3389579bd357c74131406dfeb4", "filename": "src/rt/test/rust_test_harness.cpp", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Ftest%2Frust_test_harness.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Ftest%2Frust_test_harness.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.cpp?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -10,7 +10,7 @@ rust_test::name() {\n     return \"untitled\";\n }\n \n-rust_test_suite::rust_test_suite(rust_crate *crate) : crate(crate) {\n+rust_test_suite::rust_test_suite() {\n     tests.append(new rust_domain_test());\n     tests.append(new rust_task_test(this));\n     tests.append(new rust_array_list_test());"}, {"sha": "401015e4508900fe23010baf657cb646667718b2", "filename": "src/rt/test/rust_test_harness.h", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Ftest%2Frust_test_harness.h", "raw_url": "https://github.com/rust-lang/rust/raw/79c9e130731c6fc471c946fb289a67348749a0b7/src%2Frt%2Ftest%2Frust_test_harness.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Ftest%2Frust_test_harness.h?ref=79c9e130731c6fc471c946fb289a67348749a0b7", "patch": "@@ -13,9 +13,8 @@ class rust_test {\n \n class rust_test_suite : public rust_test {\n public:\n-    rust_crate *crate;\n     array_list<rust_test*> tests;\n-    rust_test_suite(rust_crate *crate);\n+    rust_test_suite();\n     virtual ~rust_test_suite();\n     bool run();\n };"}]}