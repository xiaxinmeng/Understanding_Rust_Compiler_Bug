{"sha": "13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEzZDczZTk5ZDZhODg0MDBkYTgxZWM2YTExNzdhNzVhODFmZmU5Y2E=", "commit": {"author": {"name": "Cadence Marseille", "email": "cadencemarseille@gmail.com", "date": "2014-03-16T22:03:58Z"}, "committer": {"name": "Cadence Marseille", "email": "cadencemarseille@gmail.com", "date": "2014-03-16T22:54:10Z"}, "message": "Remove AtomicFlag\n\nfixes #12943", "tree": {"sha": "057c9a64b96e9d5856cc79d5613024a8dfcb55b7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/057c9a64b96e9d5856cc79d5613024a8dfcb55b7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "comment_count": 5, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "html_url": "https://github.com/rust-lang/rust/commit/13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13d73e99d6a88400da81ec6a1177a75a81ffe9ca/comments", "author": {"login": "cadencemarseille", "id": 5514909, "node_id": "MDQ6VXNlcjU1MTQ5MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5514909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cadencemarseille", "html_url": "https://github.com/cadencemarseille", "followers_url": "https://api.github.com/users/cadencemarseille/followers", "following_url": "https://api.github.com/users/cadencemarseille/following{/other_user}", "gists_url": "https://api.github.com/users/cadencemarseille/gists{/gist_id}", "starred_url": "https://api.github.com/users/cadencemarseille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cadencemarseille/subscriptions", "organizations_url": "https://api.github.com/users/cadencemarseille/orgs", "repos_url": "https://api.github.com/users/cadencemarseille/repos", "events_url": "https://api.github.com/users/cadencemarseille/events{/privacy}", "received_events_url": "https://api.github.com/users/cadencemarseille/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cadencemarseille", "id": 5514909, "node_id": "MDQ6VXNlcjU1MTQ5MDk=", "avatar_url": "https://avatars.githubusercontent.com/u/5514909?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cadencemarseille", "html_url": "https://github.com/cadencemarseille", "followers_url": "https://api.github.com/users/cadencemarseille/followers", "following_url": "https://api.github.com/users/cadencemarseille/following{/other_user}", "gists_url": "https://api.github.com/users/cadencemarseille/gists{/gist_id}", "starred_url": "https://api.github.com/users/cadencemarseille/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cadencemarseille/subscriptions", "organizations_url": "https://api.github.com/users/cadencemarseille/orgs", "repos_url": "https://api.github.com/users/cadencemarseille/repos", "events_url": "https://api.github.com/users/cadencemarseille/events{/privacy}", "received_events_url": "https://api.github.com/users/cadencemarseille/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "76478492ef087ad0fcdcc873940a048507445c7a", "url": "https://api.github.com/repos/rust-lang/rust/commits/76478492ef087ad0fcdcc873940a048507445c7a", "html_url": "https://github.com/rust-lang/rust/commit/76478492ef087ad0fcdcc873940a048507445c7a"}], "stats": {"total": 49, "additions": 6, "deletions": 43}, "files": [{"sha": "86efa0875dce91b356fd3906606a7b08fe3dc14b", "filename": "src/libstd/sync/atomics.rs", "status": "modified", "additions": 6, "deletions": 41, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/13d73e99d6a88400da81ec6a1177a75a81ffe9ca/src%2Flibstd%2Fsync%2Fatomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d73e99d6a88400da81ec6a1177a75a81ffe9ca/src%2Flibstd%2Fsync%2Fatomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fatomics.rs?ref=13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "patch": "@@ -27,14 +27,6 @@ use std::kinds::marker;\n use option::{Option,Some,None};\n use ops::Drop;\n \n-/**\n- * A simple atomic flag, that can be set and cleared. The most basic atomic type.\n- */\n-pub struct AtomicFlag {\n-    priv v: int,\n-    priv nopod: marker::NoPod\n-}\n-\n /**\n  * An atomic boolean type.\n  */\n@@ -92,36 +84,11 @@ pub enum Ordering {\n     SeqCst\n }\n \n-pub static INIT_ATOMIC_FLAG : AtomicFlag = AtomicFlag { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_BOOL : AtomicBool = AtomicBool { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_INT  : AtomicInt  = AtomicInt  { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_UINT : AtomicUint = AtomicUint { v: 0, nopod: marker::NoPod };\n pub static INIT_ATOMIC_U64 : AtomicU64 = AtomicU64 { v: 0, nopod: marker::NoPod };\n \n-impl AtomicFlag {\n-\n-    pub fn new() -> AtomicFlag {\n-        AtomicFlag { v: 0, nopod: marker::NoPod}\n-    }\n-\n-    /**\n-     * Clears the atomic flag\n-     */\n-    #[inline]\n-    pub fn clear(&mut self, order: Ordering) {\n-        unsafe {atomic_store(&mut self.v, 0, order)}\n-    }\n-\n-    /**\n-     * Sets the flag if it was previously unset, returns the previous value of the\n-     * flag.\n-     */\n-    #[inline]\n-    pub fn test_and_set(&mut self, order: Ordering) -> bool {\n-        unsafe { atomic_compare_and_swap(&mut self.v, 0, 1, order) > 0 }\n-    }\n-}\n-\n impl AtomicBool {\n     pub fn new(v: bool) -> AtomicBool {\n         AtomicBool { v: if v { 1 } else { 0 }, nopod: marker::NoPod }\n@@ -539,13 +506,13 @@ mod test {\n     use super::*;\n \n     #[test]\n-    fn flag() {\n-        let mut flg = AtomicFlag::new();\n-        assert!(!flg.test_and_set(SeqCst));\n-        assert!(flg.test_and_set(SeqCst));\n+    fn bool_() {\n+        let mut a = AtomicBool::new(false);\n+        assert_eq!(a.compare_and_swap(false, true, SeqCst), false);\n+        assert_eq!(a.compare_and_swap(false, true, SeqCst), true);\n \n-        flg.clear(SeqCst);\n-        assert!(!flg.test_and_set(SeqCst));\n+        a.store(false, SeqCst);\n+        assert_eq!(a.compare_and_swap(false, true, SeqCst), false);\n     }\n \n     #[test]\n@@ -595,15 +562,13 @@ mod test {\n         assert_eq!(a.load(SeqCst),false);\n     }\n \n-    static mut S_FLAG : AtomicFlag = INIT_ATOMIC_FLAG;\n     static mut S_BOOL : AtomicBool = INIT_ATOMIC_BOOL;\n     static mut S_INT  : AtomicInt  = INIT_ATOMIC_INT;\n     static mut S_UINT : AtomicUint = INIT_ATOMIC_UINT;\n \n     #[test]\n     fn static_init() {\n         unsafe {\n-            assert!(!S_FLAG.test_and_set(SeqCst));\n             assert!(!S_BOOL.load(SeqCst));\n             assert!(S_INT.load(SeqCst) == 0);\n             assert!(S_UINT.load(SeqCst) == 0);"}, {"sha": "1b2f1fc32072db5f2234f2c499543157513b156c", "filename": "src/test/compile-fail/std-uncopyable-atomics.rs", "status": "modified", "additions": 0, "deletions": 2, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/13d73e99d6a88400da81ec6a1177a75a81ffe9ca/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13d73e99d6a88400da81ec6a1177a75a81ffe9ca/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstd-uncopyable-atomics.rs?ref=13d73e99d6a88400da81ec6a1177a75a81ffe9ca", "patch": "@@ -16,8 +16,6 @@ use std::sync::atomics::*;\n use std::ptr;\n \n fn main() {\n-    let x = INIT_ATOMIC_FLAG; //~ ERROR cannot move out of static item\n-    let x = *&x; //~ ERROR: cannot move out of dereference\n     let x = INIT_ATOMIC_BOOL; //~ ERROR cannot move out of static item\n     let x = *&x; //~ ERROR: cannot move out of dereference\n     let x = INIT_ATOMIC_INT; //~ ERROR cannot move out of static item"}]}