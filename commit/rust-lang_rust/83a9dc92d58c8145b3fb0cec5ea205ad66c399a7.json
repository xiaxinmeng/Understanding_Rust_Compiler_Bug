{"sha": "83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgzYTlkYzkyZDU4YzgxNDViM2ZiMGNlYzVlYTIwNWFkNjZjMzk5YTc=", "commit": {"author": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-23T08:34:35Z"}, "committer": {"name": "Tyler Mandry", "email": "tmandry@gmail.com", "date": "2020-07-23T08:34:35Z"}, "message": "Normalize bounds fully when checking defaulted types", "tree": {"sha": "48b9b1ae74d3fbe56c5ea296016aa93fc0a97a87", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/48b9b1ae74d3fbe56c5ea296016aa93fc0a97a87"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "html_url": "https://github.com/rust-lang/rust/commit/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7/comments", "author": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "committer": {"login": "tmandry", "id": 2280544, "node_id": "MDQ6VXNlcjIyODA1NDQ=", "avatar_url": "https://avatars.githubusercontent.com/u/2280544?v=4", "gravatar_id": "", "url": "https://api.github.com/users/tmandry", "html_url": "https://github.com/tmandry", "followers_url": "https://api.github.com/users/tmandry/followers", "following_url": "https://api.github.com/users/tmandry/following{/other_user}", "gists_url": "https://api.github.com/users/tmandry/gists{/gist_id}", "starred_url": "https://api.github.com/users/tmandry/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/tmandry/subscriptions", "organizations_url": "https://api.github.com/users/tmandry/orgs", "repos_url": "https://api.github.com/users/tmandry/repos", "events_url": "https://api.github.com/users/tmandry/events{/privacy}", "received_events_url": "https://api.github.com/users/tmandry/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8ad7bc3f428300aee6764f6e23527e19eb235e81", "url": "https://api.github.com/repos/rust-lang/rust/commits/8ad7bc3f428300aee6764f6e23527e19eb235e81", "html_url": "https://github.com/rust-lang/rust/commit/8ad7bc3f428300aee6764f6e23527e19eb235e81"}], "stats": {"total": 61, "additions": 58, "deletions": 3}, "files": [{"sha": "fac87866b804923ec571d775f68c74c78df19b33", "filename": "src/librustc_typeck/check/compare_method.rs", "status": "modified", "additions": 33, "deletions": 3, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fcompare_method.rs?ref=83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "patch": "@@ -1196,8 +1196,6 @@ fn compare_projection_bounds<'tcx>(\n         return Ok(());\n     }\n \n-    let param_env = tcx.param_env(impl_ty.def_id);\n-\n     // Given\n     //\n     // impl<A, B> Foo<u32> for (A, B) {\n@@ -1212,6 +1210,36 @@ fn compare_projection_bounds<'tcx>(\n         impl_ty_substs.rebase_onto(tcx, impl_ty.container.id(), impl_trait_ref.substs);\n     let impl_ty_value = tcx.type_of(impl_ty.def_id);\n \n+    let param_env = tcx.param_env(impl_ty.def_id);\n+\n+    // When checking something like\n+    //\n+    // trait X { type Y: PartialEq<<Self as X>::Y> }\n+    // impl X for T { default type Y = S; }\n+    //\n+    // We will have to prove the bound S: PartialEq<<T as X>::Y>. In this case\n+    // we want <T as X>::Y to normalize to S. This is valid because we are\n+    // checking the default value specifically here. Add this equality to the\n+    // ParamEnv for normalization specifically.\n+    let normalize_param_env = if impl_ty.defaultness.is_final() {\n+        // If the associated type is final then normalization can already\n+        // do this without the explicit predicate.\n+        param_env\n+    } else {\n+        let mut predicates = param_env.caller_bounds().iter().collect::<Vec<_>>();\n+        predicates.push(\n+            ty::Binder::dummy(ty::ProjectionPredicate {\n+                projection_ty: ty::ProjectionTy {\n+                    item_def_id: trait_ty.def_id,\n+                    substs: rebased_substs,\n+                },\n+                ty: impl_ty_value,\n+            })\n+            .to_predicate(tcx),\n+        );\n+        ty::ParamEnv::new(tcx.intern_predicates(&predicates), Reveal::UserFacing, None)\n+    };\n+\n     // Map the predicate from the trait to the corresponding one for the impl.\n     // For example:\n     //\n@@ -1275,9 +1303,11 @@ fn compare_projection_bounds<'tcx>(\n                 _ => bug!(\"unexepected projection predicate kind: `{:?}`\", predicate),\n             };\n \n+            debug!(\"compare_projection_bounds: concrete predicate = {:?}\", concrete_ty_predicate);\n+\n             let traits::Normalized { value: normalized_predicate, obligations } = traits::normalize(\n                 &mut selcx,\n-                param_env,\n+                normalize_param_env,\n                 normalize_cause.clone(),\n                 &concrete_ty_predicate,\n             );"}, {"sha": "bb890f72a32cfd3b943fd06140673798813e4951", "filename": "src/test/ui/associated-type-bounds/issue-73818.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-73818.rs", "raw_url": "https://github.com/rust-lang/rust/raw/83a9dc92d58c8145b3fb0cec5ea205ad66c399a7/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-73818.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fassociated-type-bounds%2Fissue-73818.rs?ref=83a9dc92d58c8145b3fb0cec5ea205ad66c399a7", "patch": "@@ -0,0 +1,25 @@\n+// Test that associated type bounds are correctly normalized when checking\n+// default associated type values.\n+// check-pass\n+\n+#![allow(incomplete_features)]\n+#![feature(specialization)]\n+\n+#[derive(PartialEq)]\n+enum Never {}\n+trait Foo {\n+    type Assoc: PartialEq; // PartialEq<<Self as Foo>::Assoc>\n+}\n+impl<T> Foo for T {\n+    default type Assoc = Never;\n+}\n+\n+trait Trait1 {\n+    type Selection: PartialEq;\n+}\n+trait Trait2: PartialEq<Self> {}\n+impl<T: Trait2> Trait1 for T {\n+    default type Selection = T;\n+}\n+\n+fn main() {}"}]}