{"sha": "9be0615bde83a4a67c8319bce31f5929239d2fd9", "node_id": "C_kwDOAAsO6NoAKDliZTA2MTViZGU4M2E0YTY3YzgzMTliY2UzMWY1OTI5MjM5ZDJmZDk", "commit": {"author": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-08T17:05:07Z"}, "committer": {"name": "Jonas Schievink", "email": "jonas.schievink@ferrous-systems.com", "date": "2022-11-08T17:05:07Z"}, "message": "Don't canonicalize self type when querying FnOnce signature", "tree": {"sha": "8af946712cc3d7c30ff78804180206ece1c6bb82", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8af946712cc3d7c30ff78804180206ece1c6bb82"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9be0615bde83a4a67c8319bce31f5929239d2fd9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9be0615bde83a4a67c8319bce31f5929239d2fd9", "html_url": "https://github.com/rust-lang/rust/commit/9be0615bde83a4a67c8319bce31f5929239d2fd9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9be0615bde83a4a67c8319bce31f5929239d2fd9/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "977a029c1ec97a62810943bcdc8c6e540ad16baa", "url": "https://api.github.com/repos/rust-lang/rust/commits/977a029c1ec97a62810943bcdc8c6e540ad16baa", "html_url": "https://github.com/rust-lang/rust/commit/977a029c1ec97a62810943bcdc8c6e540ad16baa"}], "stats": {"total": 82, "additions": 54, "deletions": 28}, "files": [{"sha": "39514fc44e6c8091849b73b3d9c06549ba585b7b", "filename": "crates/hir-ty/src/lib.rs", "status": "modified", "additions": 22, "deletions": 26, "changes": 48, "blob_url": "https://github.com/rust-lang/rust/blob/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fhir-ty%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fhir-ty%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-ty%2Fsrc%2Flib.rs?ref=9be0615bde83a4a67c8319bce31f5929239d2fd9", "patch": "@@ -523,35 +523,36 @@ where\n }\n \n pub fn callable_sig_from_fnonce(\n-    self_ty: &Canonical<Ty>,\n+    self_ty: &Ty,\n     env: Arc<TraitEnvironment>,\n     db: &dyn HirDatabase,\n ) -> Option<CallableSig> {\n     let krate = env.krate;\n     let fn_once_trait = FnTrait::FnOnce.get_id(db, krate)?;\n     let output_assoc_type = db.trait_data(fn_once_trait).associated_type_by_name(&name![Output])?;\n \n-    let mut kinds = self_ty.binders.interned().to_vec();\n     let b = TyBuilder::trait_ref(db, fn_once_trait);\n     if b.remaining() != 2 {\n         return None;\n     }\n-    let fn_once = b\n-        .push(self_ty.value.clone())\n-        .fill_with_bound_vars(DebruijnIndex::INNERMOST, kinds.len())\n-        .build();\n-    kinds.extend(fn_once.substitution.iter(Interner).skip(1).map(|x| {\n-        let vk = match x.data(Interner) {\n-            chalk_ir::GenericArgData::Ty(_) => {\n-                chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General)\n-            }\n-            chalk_ir::GenericArgData::Lifetime(_) => chalk_ir::VariableKind::Lifetime,\n-            chalk_ir::GenericArgData::Const(c) => {\n-                chalk_ir::VariableKind::Const(c.data(Interner).ty.clone())\n-            }\n-        };\n-        chalk_ir::WithKind::new(vk, UniverseIndex::ROOT)\n-    }));\n+    let fn_once = b.push(self_ty.clone()).fill_with_bound_vars(DebruijnIndex::INNERMOST, 0).build();\n+    let kinds = fn_once\n+        .substitution\n+        .iter(Interner)\n+        .skip(1)\n+        .map(|x| {\n+            let vk = match x.data(Interner) {\n+                chalk_ir::GenericArgData::Ty(_) => {\n+                    chalk_ir::VariableKind::Ty(chalk_ir::TyVariableKind::General)\n+                }\n+                chalk_ir::GenericArgData::Lifetime(_) => chalk_ir::VariableKind::Lifetime,\n+                chalk_ir::GenericArgData::Const(c) => {\n+                    chalk_ir::VariableKind::Const(c.data(Interner).ty.clone())\n+                }\n+            };\n+            chalk_ir::WithKind::new(vk, UniverseIndex::ROOT)\n+        })\n+        .collect::<Vec<_>>();\n \n     // FIXME: chalk refuses to solve `<Self as FnOnce<^0.0>>::Output == ^0.1`, so we first solve\n     // `<Self as FnOnce<^0.0>>` and then replace `^0.0` with the concrete argument tuple.\n@@ -563,21 +564,16 @@ pub fn callable_sig_from_fnonce(\n         Some(Solution::Unique(vars)) => vars.value.subst,\n         _ => return None,\n     };\n-    let args = subst.at(Interner, self_ty.binders.interned().len()).ty(Interner)?;\n+    let args = subst.at(Interner, 0).ty(Interner)?;\n     let params = match args.kind(Interner) {\n         chalk_ir::TyKind::Tuple(_, subst) => {\n             subst.iter(Interner).filter_map(|arg| arg.ty(Interner).cloned()).collect::<Vec<_>>()\n         }\n         _ => return None,\n     };\n-    if params.iter().any(|ty| ty.is_unknown()) {\n-        return None;\n-    }\n \n-    let fn_once = TyBuilder::trait_ref(db, fn_once_trait)\n-        .push(self_ty.value.clone())\n-        .push(args.clone())\n-        .build();\n+    let fn_once =\n+        TyBuilder::trait_ref(db, fn_once_trait).push(self_ty.clone()).push(args.clone()).build();\n     let projection =\n         TyBuilder::assoc_type_projection(db, output_assoc_type, Some(fn_once.substitution.clone()))\n             .build();"}, {"sha": "cbbcaebb428554a107ffcec8babdac21f3efac15", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=9be0615bde83a4a67c8319bce31f5929239d2fd9", "patch": "@@ -2997,8 +2997,7 @@ impl Type {\n             TyKind::Function(_) => Callee::FnPtr,\n             TyKind::FnDef(..) => Callee::Def(self.ty.callable_def(db)?),\n             _ => {\n-                let ty = hir_ty::replace_errors_with_variables(&self.ty);\n-                let sig = hir_ty::callable_sig_from_fnonce(&ty, self.env.clone(), db)?;\n+                let sig = hir_ty::callable_sig_from_fnonce(&self.ty, self.env.clone(), db)?;\n                 return Some(Callable {\n                     ty: self.clone(),\n                     sig,"}, {"sha": "e7412d27faf446452a33962d6e70ca5220cc1122", "filename": "crates/ide/src/signature_help.rs", "status": "modified", "additions": 31, "deletions": 0, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fide%2Fsrc%2Fsignature_help.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9be0615bde83a4a67c8319bce31f5929239d2fd9/crates%2Fide%2Fsrc%2Fsignature_help.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Fsignature_help.rs?ref=9be0615bde83a4a67c8319bce31f5929239d2fd9", "patch": "@@ -1345,5 +1345,36 @@ fn f<F: FnOnce(u8, u16) -> i32>(f: F) {\n                  ^^  ---\n             \"#]],\n         );\n+        check(\n+            r#\"\n+fn f<T, F: FnOnce(&T, u16) -> &T>(f: F) {\n+    f($0)\n+}\n+\"#,\n+            expect![[r#\"\n+                (&T, u16) -> &T\n+                 ^^  ---\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn regression_13579() {\n+        check(\n+            r#\"\n+fn f() {\n+    take(2)($0);\n+}\n+\n+fn take<C, Error>(\n+    count: C\n+) -> impl Fn() -> C  {\n+    move || count\n+}\n+\"#,\n+            expect![[r#\"\n+                () -> i32\n+            \"#]],\n+        );\n     }\n }"}]}