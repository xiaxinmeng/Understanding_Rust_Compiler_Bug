{"sha": "12c68bcd6df325cc369adce018c07dfe3e2b767a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjEyYzY4YmNkNmRmMzI1Y2MzNjlhZGNlMDE4YzA3ZGZlM2UyYjc2N2E=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-01-11T21:24:30Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2012-03-02T14:47:25Z"}, "message": "make sure we do not bind unique closures (or blocks, for that matter)", "tree": {"sha": "5f0136c67cf30df88601a837fe5559dcdddf0fb8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f0136c67cf30df88601a837fe5559dcdddf0fb8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/12c68bcd6df325cc369adce018c07dfe3e2b767a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/12c68bcd6df325cc369adce018c07dfe3e2b767a", "html_url": "https://github.com/rust-lang/rust/commit/12c68bcd6df325cc369adce018c07dfe3e2b767a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/12c68bcd6df325cc369adce018c07dfe3e2b767a/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8478349b8be3b15d50569f55bd97ef2d62786fe4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8478349b8be3b15d50569f55bd97ef2d62786fe4", "html_url": "https://github.com/rust-lang/rust/commit/8478349b8be3b15d50569f55bd97ef2d62786fe4"}], "stats": {"total": 53, "additions": 43, "deletions": 10}, "files": [{"sha": "e1c56b9fc549df1f3b0fb9301fc7dbc65409f3ca", "filename": "src/comp/middle/typeck.rs", "status": "modified", "additions": 11, "deletions": 10, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Fcomp%2Fmiddle%2Ftypeck.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftypeck.rs?ref=12c68bcd6df325cc369adce018c07dfe3e2b767a", "patch": "@@ -2394,6 +2394,16 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n           _ { fail \"LHS of bind expr didn't have a function type?!\"; }\n         }\n \n+        let proto = alt proto {\n+          ast::proto_bare | ast::proto_box { ast::proto_box }\n+          ast::proto_uniq | ast::proto_any | ast::proto_block {\n+            tcx.sess.span_err(expr.span,\n+                              #fmt[\"cannot bind %s closures\",\n+                                   proto_to_str(proto)]);\n+            proto // dummy value so compilation can proceed\n+          }\n+        };\n+\n         // For each blank argument, add the type of that argument\n         // to the resulting function type.\n         let out_args = [];\n@@ -2406,16 +2416,7 @@ fn check_expr_with_unifier(fcx: @fn_ctxt, expr: @ast::expr, unify: unifier,\n             i += 1u;\n         }\n \n-        // Determine what fn prototype results from binding\n-        fn lower_bound_proto(proto: ast::proto) -> ast::proto {\n-            // FIXME: This is right for bare fns, possibly not others\n-            alt proto {\n-              ast::proto_bare { ast::proto_box }\n-              _ { proto }\n-            }\n-        }\n-\n-        let ft = ty::mk_fn(tcx, {proto: lower_bound_proto(proto),\n+        let ft = ty::mk_fn(tcx, {proto: proto,\n                                  inputs: out_args, output: rt,\n                                  ret_style: cf, constraints: constrs});\n         write_ty(tcx, id, ft);"}, {"sha": "6a08b9b56c0b8d506a0957160e75e25e05df8eb9", "filename": "src/test/compile-fail/bind-stack-closure.rs", "status": "added", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Ftest%2Fcompile-fail%2Fbind-stack-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Ftest%2Fcompile-fail%2Fbind-stack-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-stack-closure.rs?ref=12c68bcd6df325cc369adce018c07dfe3e2b767a", "patch": "@@ -0,0 +1,10 @@\n+fn foo(x: fn()) {\n+    bind x(); //! ERROR cannot bind fn closures\n+}\n+\n+fn bar(x: fn&()) {\n+    bind x(); //! ERROR cannot bind fn& closures\n+}\n+\n+fn main() {\n+}"}, {"sha": "233c92b7bb39ee4e3c97d6e0e354fb7a13cdcd52", "filename": "src/test/compile-fail/bind-unique-closure.rs", "status": "added", "additions": 22, "deletions": 0, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Ftest%2Fcompile-fail%2Fbind-unique-closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/12c68bcd6df325cc369adce018c07dfe3e2b767a/src%2Ftest%2Fcompile-fail%2Fbind-unique-closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fbind-unique-closure.rs?ref=12c68bcd6df325cc369adce018c07dfe3e2b767a", "patch": "@@ -0,0 +1,22 @@\n+// -*- rust -*-\n+\n+// I originally made this test to ensure that bind does the right\n+// thing when binding a unique closure (which is to copy the closure,\n+// I suppose?).  But I've since decided it's not worth the effort, and\n+// so I just made it a simple error.  But I left the test as is in\n+// case we ever decide that bind should work with unique closures,\n+// though a simpler test would suffice for now.\n+\n+fn make_addr(-x: ~int) -> fn~() -> uint {\n+    (fn~[move x]() -> uint { ptr::addr_of(*x) as uint })\n+}\n+\n+fn main() {\n+    let x = ~3;\n+    let a = ptr::addr_of(*x) as uint;\n+    let adder: fn~() -> uint = make_addr(x);\n+    let bound_adder: fn~() -> uint = bind adder();\n+    //!^ ERROR cannot bind fn~ closures\n+    assert adder() == a;\n+    assert bound_adder() != a;\n+}"}]}