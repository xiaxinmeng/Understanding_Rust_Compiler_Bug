{"sha": "7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "node_id": "C_kwDOAAsO6NoAKDdkYzNhY2U2YTk2MmQ0YzgzYTFkYmQxOWIzZWM5ZjAzMzM1Njg3NWQ", "commit": {"author": {"name": "Dylan DPC", "email": "99973273+Dylan-DPC@users.noreply.github.com", "date": "2022-11-01T08:42:26Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-11-01T08:42:26Z"}, "message": "Rollup merge of #103706 - zbyrn:issue-101637-fix, r=estebank\n\nFix E0433 No Typo Suggestions\n\nFixes #48676\nFixes #87791\nFixes #96625\nFixes #95462\nFixes #101637\nFollows up PR #72923\n\nSeveral open issues refer to the problem that E0433 does not suggest typos like other errors normally do. This fix augments the implementation of PR #72923.\n\n**Background**\nWhen the path of a function call, e.g. `Struct::foo()`, involves names that cannot be resolved, there are two errors that could be emitted by the compiler:\n - If `Struct` is not found, it is ``E0433: failed to resolve: use of undeclared type `Struct` ``.\n - If `foo` is not found in `Struct`, it is ``E0599: no function or associated item named `foo` found for struct `Struct` in the current scope``\n\nWhen a name is used as a type, `e.g. fn foo() -> Struct`, and the name cannot be resolved, it is ``E0412: cannot find type `Struct` in this scope``.\n\nBefore #72923, `E0433` does not implement any suggestions, and the PR introduces suggestions for missing `use`s. When a resolution error occurs in the path of a function call, it tries to smart resolve just the type part of the path, e.g. `module::Struct` of a call to `module::Struct::foo()`. However, along with the suggestions, the smart-resolve function will report `E0412` since it only knows that it is a type that we cannot resolve instead of being a part of the path. So, the original implementation swap out `E0412` errors returned by the smart-resolve function with the real `E0433` error, but keeps the \"missing `use`\" suggestions to be reported to the programmer.\n\n**Issue**\nThe current implementation only reports if there are \"missing `use`\" suggestions returned by the smart-resolve function; otherwise, it would fall back the normal reporting, which does not emit suggestions. But the smart-resolve function could also produce typo suggestions, which are omitted currently.\n\nAlso, it seems like that not all info has been swapped out when there are missing suggestions. The error message underlining the name in the snippet still says ``not found in this scope``, which is a `E0412` messages, if there are `use` suggestions, but says the normal `use of undeclared type` otherwise.\n\n**Fixes**\nThis fix swaps out all fields in `Diagnostic` returned by the smart-resolve function except for `suggestions` with the current error, and merges the `suggestions` of the returned error and that of the current error together. If there are `use` suggestions, the error is saved to `use_injection` to be reported at the end; otherwise, the error is emitted immediately as `Resolver::report_error` does.\n\nSome tests are updated to use the correct underlining error messages, and one additional test for typo suggestion is added to the test suite.\n\nr? rust-lang/diagnostics", "tree": {"sha": "fe77c66257615c63911516a18c3ff0d1a2dee263", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fe77c66257615c63911516a18c3ff0d1a2dee263"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjYNvyCRBK7hj4Ov3rIwAAd1UIAJ50OXMEqm/UCOdjSnWQeCMO\nM2/Uavizdw54JuyRJfJI+wcupF9+FdEq/UEVieDUOkIsUqTLh9KsGDoDxoydzsG7\ntI5VSd4JqVj+t9PX3psqpIYvyr0bVAFwyFmw154qBoKOZYdhd7W9jyMoQJSNo/Xp\n7g++H/es71dUDuUsDwS3EK05MVj4tNe77DcmTw150Tnuzssq8PpPdJAwEmRGau3b\nmtBYha5CJaZoKmqGv+JQ84WSqhRwLId95up2gAEegBuUwEZnZwJI2QTWnBeWckyE\nTOR+plVLSk2ZaBoDVBvj6Q4O4HYXCwcI46o+YRUE0wCg45BvWI0tkNML6aMOAEc=\n=K6tf\n-----END PGP SIGNATURE-----\n", "payload": "tree fe77c66257615c63911516a18c3ff0d1a2dee263\nparent 94241e7eaf45f681d3629286c810bb3050c6114c\nparent a10737c37aadcb34766e5d237e108bddb3da2d66\nauthor Dylan DPC <99973273+Dylan-DPC@users.noreply.github.com> 1667292146 +0530\ncommitter GitHub <noreply@github.com> 1667292146 +0530\n\nRollup merge of #103706 - zbyrn:issue-101637-fix, r=estebank\n\nFix E0433 No Typo Suggestions\n\nFixes #48676\nFixes #87791\nFixes #96625\nFixes #95462\nFixes #101637\nFollows up PR #72923\n\nSeveral open issues refer to the problem that E0433 does not suggest typos like other errors normally do. This fix augments the implementation of PR #72923.\n\n**Background**\nWhen the path of a function call, e.g. `Struct::foo()`, involves names that cannot be resolved, there are two errors that could be emitted by the compiler:\n - If `Struct` is not found, it is ``E0433: failed to resolve: use of undeclared type `Struct` ``.\n - If `foo` is not found in `Struct`, it is ``E0599: no function or associated item named `foo` found for struct `Struct` in the current scope``\n\nWhen a name is used as a type, `e.g. fn foo() -> Struct`, and the name cannot be resolved, it is ``E0412: cannot find type `Struct` in this scope``.\n\nBefore #72923, `E0433` does not implement any suggestions, and the PR introduces suggestions for missing `use`s. When a resolution error occurs in the path of a function call, it tries to smart resolve just the type part of the path, e.g. `module::Struct` of a call to `module::Struct::foo()`. However, along with the suggestions, the smart-resolve function will report `E0412` since it only knows that it is a type that we cannot resolve instead of being a part of the path. So, the original implementation swap out `E0412` errors returned by the smart-resolve function with the real `E0433` error, but keeps the \"missing `use`\" suggestions to be reported to the programmer.\n\n**Issue**\nThe current implementation only reports if there are \"missing `use`\" suggestions returned by the smart-resolve function; otherwise, it would fall back the normal reporting, which does not emit suggestions. But the smart-resolve function could also produce typo suggestions, which are omitted currently.\n\nAlso, it seems like that not all info has been swapped out when there are missing suggestions. The error message underlining the name in the snippet still says ``not found in this scope``, which is a `E0412` messages, if there are `use` suggestions, but says the normal `use of undeclared type` otherwise.\n\n**Fixes**\nThis fix swaps out all fields in `Diagnostic` returned by the smart-resolve function except for `suggestions` with the current error, and merges the `suggestions` of the returned error and that of the current error together. If there are `use` suggestions, the error is saved to `use_injection` to be reported at the end; otherwise, the error is emitted immediately as `Resolver::report_error` does.\n\nSome tests are updated to use the correct underlining error messages, and one additional test for typo suggestion is added to the test suite.\n\nr? rust-lang/diagnostics\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "html_url": "https://github.com/rust-lang/rust/commit/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/comments", "author": {"login": "Dylan-DPC", "id": 99973273, "node_id": "U_kgDOBfV4mQ", "avatar_url": "https://avatars.githubusercontent.com/u/99973273?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Dylan-DPC", "html_url": "https://github.com/Dylan-DPC", "followers_url": "https://api.github.com/users/Dylan-DPC/followers", "following_url": "https://api.github.com/users/Dylan-DPC/following{/other_user}", "gists_url": "https://api.github.com/users/Dylan-DPC/gists{/gist_id}", "starred_url": "https://api.github.com/users/Dylan-DPC/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Dylan-DPC/subscriptions", "organizations_url": "https://api.github.com/users/Dylan-DPC/orgs", "repos_url": "https://api.github.com/users/Dylan-DPC/repos", "events_url": "https://api.github.com/users/Dylan-DPC/events{/privacy}", "received_events_url": "https://api.github.com/users/Dylan-DPC/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94241e7eaf45f681d3629286c810bb3050c6114c", "url": "https://api.github.com/repos/rust-lang/rust/commits/94241e7eaf45f681d3629286c810bb3050c6114c", "html_url": "https://github.com/rust-lang/rust/commit/94241e7eaf45f681d3629286c810bb3050c6114c"}, {"sha": "a10737c37aadcb34766e5d237e108bddb3da2d66", "url": "https://api.github.com/repos/rust-lang/rust/commits/a10737c37aadcb34766e5d237e108bddb3da2d66", "html_url": "https://github.com/rust-lang/rust/commit/a10737c37aadcb34766e5d237e108bddb3da2d66"}], "stats": {"total": 184, "additions": 148, "deletions": 36}, "files": [{"sha": "6d2ee25df320dd0898115e07c70b9cdb7c73a8fd", "filename": "compiler/rustc_resolve/src/late.rs", "status": "modified", "additions": 37, "deletions": 17, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/compiler%2Frustc_resolve%2Fsrc%2Flate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate.rs?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -32,7 +32,7 @@ use smallvec::{smallvec, SmallVec};\n use rustc_span::source_map::{respan, Spanned};\n use std::assert_matches::debug_assert_matches;\n use std::collections::{hash_map::Entry, BTreeSet};\n-use std::mem::{replace, take};\n+use std::mem::{replace, swap, take};\n \n mod diagnostics;\n \n@@ -3369,11 +3369,6 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             let (mut err, candidates) =\n                 this.smart_resolve_report_errors(path, path_span, PathSource::Type, None);\n \n-            if candidates.is_empty() {\n-                err.cancel();\n-                return Some(parent_err);\n-            }\n-\n             // There are two different error messages user might receive at\n             // this point:\n             // - E0412 cannot find type `{}` in this scope\n@@ -3383,37 +3378,62 @@ impl<'a: 'ast, 'b, 'ast> LateResolutionVisitor<'a, 'b, 'ast> {\n             // latter one - for paths in expression-position.\n             //\n             // Thus (since we're in expression-position at this point), not to\n-            // confuse the user, we want to keep the *message* from E0432 (so\n+            // confuse the user, we want to keep the *message* from E0433 (so\n             // `parent_err`), but we want *hints* from E0412 (so `err`).\n             //\n             // And that's what happens below - we're just mixing both messages\n             // into a single one.\n             let mut parent_err = this.r.into_struct_error(parent_err.span, parent_err.node);\n \n+            // overwrite all properties with the parent's error message\n             err.message = take(&mut parent_err.message);\n             err.code = take(&mut parent_err.code);\n+            swap(&mut err.span, &mut parent_err.span);\n             err.children = take(&mut parent_err.children);\n+            err.sort_span = parent_err.sort_span;\n+            err.is_lint = parent_err.is_lint;\n+\n+            // merge the parent's suggestions with the typo suggestions\n+            fn append_result<T, E>(res1: &mut Result<Vec<T>, E>, res2: Result<Vec<T>, E>) {\n+                match res1 {\n+                    Ok(vec1) => match res2 {\n+                        Ok(mut vec2) => vec1.append(&mut vec2),\n+                        Err(e) => *res1 = Err(e),\n+                    },\n+                    Err(_) => (),\n+                };\n+            }\n+            append_result(&mut err.suggestions, parent_err.suggestions.clone());\n \n             parent_err.cancel();\n \n             let def_id = this.parent_scope.module.nearest_parent_mod();\n \n             if this.should_report_errs() {\n-                this.r.use_injections.push(UseError {\n-                    err,\n-                    candidates,\n-                    def_id,\n-                    instead: false,\n-                    suggestion: None,\n-                    path: path.into(),\n-                    is_call: source.is_call(),\n-                });\n+                if candidates.is_empty() {\n+                    // When there is no suggested imports, we can just emit the error\n+                    // and suggestions immediately. Note that we bypass the usually error\n+                    // reporting routine (ie via `self.r.report_error`) because we need\n+                    // to post-process the `ResolutionError` above.\n+                    err.emit();\n+                } else {\n+                    // If there are suggested imports, the error reporting is delayed\n+                    this.r.use_injections.push(UseError {\n+                        err,\n+                        candidates,\n+                        def_id,\n+                        instead: false,\n+                        suggestion: None,\n+                        path: path.into(),\n+                        is_call: source.is_call(),\n+                    });\n+                }\n             } else {\n                 err.cancel();\n             }\n \n             // We don't return `Some(parent_err)` here, because the error will\n-            // be already printed as part of the `use` injections\n+            // be already printed either immediately or as part of the `use` injections\n             None\n         };\n "}, {"sha": "d2320293e857ee296fc049686501afa675e0d0b7", "filename": "src/test/ui/const-generics/issues/issue-82956.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fissues%2Fissue-82956.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -2,7 +2,7 @@ error[E0433]: failed to resolve: use of undeclared type `IntoIter`\n   --> $DIR/issue-82956.rs:25:24\n    |\n LL |         let mut iter = IntoIter::new(self);\n-   |                        ^^^^^^^^ not found in this scope\n+   |                        ^^^^^^^^ use of undeclared type `IntoIter`\n    |\n help: consider importing one of these items\n    |"}, {"sha": "2f4aabf845311168ad1a3bea2e1735e6bf5d6cd7", "filename": "src/test/ui/derived-errors/issue-31997-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fderived-errors%2Fissue-31997-1.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -2,7 +2,7 @@ error[E0433]: failed to resolve: use of undeclared type `HashMap`\n   --> $DIR/issue-31997-1.rs:20:19\n    |\n LL |     let mut map = HashMap::new();\n-   |                   ^^^^^^^ not found in this scope\n+   |                   ^^^^^^^ use of undeclared type `HashMap`\n    |\n help: consider importing this struct\n    |"}, {"sha": "c48c840352fa09c72d907b6fd1dbc969a87354cd", "filename": "src/test/ui/hygiene/no_implicit_prelude.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fhygiene%2Fno_implicit_prelude.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -5,7 +5,7 @@ LL |     fn f() { ::bar::m!(); }\n    |              ----------- in this macro invocation\n ...\n LL |         Vec::new();\n-   |         ^^^ not found in this scope\n+   |         ^^^ use of undeclared type `Vec`\n    |\n    = note: this error originates in the macro `::bar::m` (in Nightly builds, run with -Z macro-backtrace for more info)\n help: consider importing this struct"}, {"sha": "ab467041144604264932ab5e62875d9e6a4e5168", "filename": "src/test/ui/proc-macro/amputate-span.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Famputate-span.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -2,7 +2,7 @@ error[E0433]: failed to resolve: use of undeclared type `Command`\n   --> $DIR/amputate-span.rs:49:5\n    |\n LL |     Command::new(\"git\");\n-   |     ^^^^^^^ not found in this scope\n+   |     ^^^^^^^ use of undeclared type `Command`\n    |\n help: consider importing this struct\n    |\n@@ -13,7 +13,7 @@ error[E0433]: failed to resolve: use of undeclared type `Command`\n   --> $DIR/amputate-span.rs:63:9\n    |\n LL |         Command::new(\"git\");\n-   |         ^^^^^^^ not found in this scope\n+   |         ^^^^^^^ use of undeclared type `Command`\n    |\n help: consider importing this struct\n    |"}, {"sha": "fc925ba3b6a8f2fb1a3110308a59df96d016427b", "filename": "src/test/ui/resolve/missing-in-namespace.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fmissing-in-namespace.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -1,8 +1,8 @@\n error[E0433]: failed to resolve: could not find `hahmap` in `std`\n-  --> $DIR/missing-in-namespace.rs:2:29\n+  --> $DIR/missing-in-namespace.rs:2:21\n    |\n LL |     let _map = std::hahmap::HashMap::new();\n-   |                             ^^^^^^^ not found in `std::hahmap`\n+   |                     ^^^^^^ could not find `hahmap` in `std`\n    |\n help: consider importing this struct\n    |"}, {"sha": "3ce17a14f146b8a2b42933a1f3278cfe215dec2e", "filename": "src/test/ui/resolve/typo-suggestion-mistyped-in-path.rs", "status": "added", "additions": 42, "deletions": 0, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.rs?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -0,0 +1,42 @@\n+struct Struct;\n+//~^ NOTE function or associated item `fob` not found for this struct\n+\n+impl Struct {\n+    fn foo() { }\n+}\n+\n+mod module {\n+    fn foo() { }\n+\n+    struct Struct;\n+\n+    impl Struct {\n+        fn foo() { }\n+    }\n+}\n+\n+trait Trait {\n+    fn foo();\n+}\n+\n+fn main() {\n+    Struct::fob();\n+    //~^ ERROR no function or associated item named `fob` found for struct `Struct` in the current scope\n+    //~| NOTE function or associated item not found in `Struct`\n+\n+    Struc::foo();\n+    //~^ ERROR failed to resolve: use of undeclared type `Struc`\n+    //~| NOTE use of undeclared type `Struc`\n+\n+    modul::foo();\n+    //~^ ERROR failed to resolve: use of undeclared crate or module `modul`\n+    //~| NOTE use of undeclared crate or module `modul`\n+\n+    module::Struc::foo();\n+    //~^ ERROR failed to resolve: could not find `Struc` in `module`\n+    //~| NOTE could not find `Struc` in `module`\n+\n+    Trai::foo();\n+    //~^ ERROR failed to resolve: use of undeclared type `Trai`\n+    //~| NOTE use of undeclared type `Trai`\n+}"}, {"sha": "ff7cf531c06dd9bbedf494cb9b1786c0c00348ea", "filename": "src/test/ui/resolve/typo-suggestion-mistyped-in-path.stderr", "status": "added", "additions": 54, "deletions": 0, "changes": 54, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Ftypo-suggestion-mistyped-in-path.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -0,0 +1,54 @@\n+error[E0433]: failed to resolve: use of undeclared type `Struc`\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:27:5\n+   |\n+LL |     Struc::foo();\n+   |     ^^^^^\n+   |     |\n+   |     use of undeclared type `Struc`\n+   |     help: a struct with a similar name exists: `Struct`\n+\n+error[E0433]: failed to resolve: use of undeclared crate or module `modul`\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:31:5\n+   |\n+LL |     modul::foo();\n+   |     ^^^^^ use of undeclared crate or module `modul`\n+   |\n+help: there is a crate or module with a similar name\n+   |\n+LL |     module::foo();\n+   |     ~~~~~~\n+\n+error[E0433]: failed to resolve: could not find `Struc` in `module`\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:35:13\n+   |\n+LL |     module::Struc::foo();\n+   |             ^^^^^\n+   |             |\n+   |             could not find `Struc` in `module`\n+   |             help: a struct with a similar name exists: `Struct`\n+\n+error[E0433]: failed to resolve: use of undeclared type `Trai`\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:39:5\n+   |\n+LL |     Trai::foo();\n+   |     ^^^^\n+   |     |\n+   |     use of undeclared type `Trai`\n+   |     help: a trait with a similar name exists: `Trait`\n+\n+error[E0599]: no function or associated item named `fob` found for struct `Struct` in the current scope\n+  --> $DIR/typo-suggestion-mistyped-in-path.rs:23:13\n+   |\n+LL | struct Struct;\n+   | ------------- function or associated item `fob` not found for this struct\n+...\n+LL |     Struct::fob();\n+   |             ^^^\n+   |             |\n+   |             function or associated item not found in `Struct`\n+   |             help: there is an associated function with a similar name: `foo`\n+\n+error: aborting due to 5 previous errors\n+\n+Some errors have detailed explanations: E0433, E0599.\n+For more information about an error, try `rustc --explain E0433`."}, {"sha": "58cb659e822035b2bf4fcba5f1cea7f74f7de426", "filename": "src/test/ui/resolve/use_suggestion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fresolve%2Fuse_suggestion.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -8,7 +8,7 @@ error[E0433]: failed to resolve: use of undeclared type `HashMap`\n   --> $DIR/use_suggestion.rs:2:14\n    |\n LL |     let x1 = HashMap::new();\n-   |              ^^^^^^^ not found in this scope\n+   |              ^^^^^^^ use of undeclared type `HashMap`\n    |\n help: consider importing this struct\n    |"}, {"sha": "e4e1fc591c4760d3f6acf2897ee2e6a5c5538d01", "filename": "src/test/ui/suggestions/core-std-import-order-issue-83564.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fcore-std-import-order-issue-83564.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -2,7 +2,7 @@ error[E0433]: failed to resolve: use of undeclared type `NonZeroU32`\n   --> $DIR/core-std-import-order-issue-83564.rs:8:14\n    |\n LL |     let _x = NonZeroU32::new(5).unwrap();\n-   |              ^^^^^^^^^^ not found in this scope\n+   |              ^^^^^^^^^^ use of undeclared type `NonZeroU32`\n    |\n help: consider importing one of these items\n    |"}, {"sha": "70c4b210d3a7bad6eb8f87c2a54b105947870e55", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.rs?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -10,18 +10,19 @@ fn test() {\n \n     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n     //~^ ERROR failed to resolve: use of undeclared type\n-    //~| NOTE not found in this scope\n+    //~| NOTE use of undeclared type\n     //~| NOTE 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n     //~| NOTE 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n \n     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n     //~^ ERROR failed to resolve: use of undeclared type\n-    //~| NOTE not found in this scope\n+    //~| NOTE use of undeclared type\n     //~| NOTE 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n     //~| NOTE 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n \n     let _v: Vec<_> = FromIterator::from_iter(&[1]);\n     //~^ ERROR failed to resolve: use of undeclared type\n+    //~| NOTE use of undeclared type\n     //~| NOTE 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n     //~| NOTE 'core::iter::FromIterator' is included in the prelude starting in Edition 2021\n }"}, {"sha": "3d1f2492360bf29ba658b5e469f2a526f9636bc4", "filename": "src/test/ui/suggestions/suggest-tryinto-edition-change.stderr", "status": "modified", "additions": 3, "deletions": 8, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/7dc3ace6a962d4c83a1dbd19b3ec9f033356875d/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fsuggest-tryinto-edition-change.stderr?ref=7dc3ace6a962d4c83a1dbd19b3ec9f033356875d", "patch": "@@ -2,7 +2,7 @@ error[E0433]: failed to resolve: use of undeclared type `TryFrom`\n   --> $DIR/suggest-tryinto-edition-change.rs:11:19\n    |\n LL |     let _i: i16 = TryFrom::try_from(0_i32).unwrap();\n-   |                   ^^^^^^^ not found in this scope\n+   |                   ^^^^^^^ use of undeclared type `TryFrom`\n    |\n    = note: 'std::convert::TryFrom' is included in the prelude starting in Edition 2021\n    = note: 'core::convert::TryFrom' is included in the prelude starting in Edition 2021\n@@ -17,7 +17,7 @@ error[E0433]: failed to resolve: use of undeclared type `TryInto`\n   --> $DIR/suggest-tryinto-edition-change.rs:17:19\n    |\n LL |     let _i: i16 = TryInto::try_into(0_i32).unwrap();\n-   |                   ^^^^^^^ not found in this scope\n+   |                   ^^^^^^^ use of undeclared type `TryInto`\n    |\n    = note: 'std::convert::TryInto' is included in the prelude starting in Edition 2021\n    = note: 'core::convert::TryInto' is included in the prelude starting in Edition 2021\n@@ -32,12 +32,7 @@ error[E0433]: failed to resolve: use of undeclared type `FromIterator`\n   --> $DIR/suggest-tryinto-edition-change.rs:23:22\n    |\n LL |     let _v: Vec<_> = FromIterator::from_iter(&[1]);\n-   |                      ^^^^^^^^^^^^\n-   |\n-  ::: $SRC_DIR/core/src/iter/traits/collect.rs:LL:COL\n-   |\n-LL | pub trait IntoIterator {\n-   | ---------------------- similarly named trait `IntoIterator` defined here\n+   |                      ^^^^^^^^^^^^ use of undeclared type `FromIterator`\n    |\n    = note: 'std::iter::FromIterator' is included in the prelude starting in Edition 2021\n    = note: 'core::iter::FromIterator' is included in the prelude starting in Edition 2021"}]}