{"sha": "c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "node_id": "C_kwDOAAsO6NoAKGM2ZTViYjMyZmJiM2QwYTg1MTg5ZTU2MDg2NzI2YzE4M2Y2OGFkMGM", "commit": {"author": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T19:12:51Z"}, "committer": {"name": "Maybe Waffle", "email": "waffle.lapkin@gmail.com", "date": "2022-06-05T19:12:51Z"}, "message": "Do not suggest adding labeled block if there are no labeled breaks", "tree": {"sha": "ea543b569b0b10c7348d15fe3a53696b65ef7ff3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ea543b569b0b10c7348d15fe3a53696b65ef7ff3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "html_url": "https://github.com/rust-lang/rust/commit/c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/comments", "author": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "committer": {"login": "WaffleLapkin", "id": 38225716, "node_id": "MDQ6VXNlcjM4MjI1NzE2", "avatar_url": "https://avatars.githubusercontent.com/u/38225716?v=4", "gravatar_id": "", "url": "https://api.github.com/users/WaffleLapkin", "html_url": "https://github.com/WaffleLapkin", "followers_url": "https://api.github.com/users/WaffleLapkin/followers", "following_url": "https://api.github.com/users/WaffleLapkin/following{/other_user}", "gists_url": "https://api.github.com/users/WaffleLapkin/gists{/gist_id}", "starred_url": "https://api.github.com/users/WaffleLapkin/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/WaffleLapkin/subscriptions", "organizations_url": "https://api.github.com/users/WaffleLapkin/orgs", "repos_url": "https://api.github.com/users/WaffleLapkin/repos", "events_url": "https://api.github.com/users/WaffleLapkin/events{/privacy}", "received_events_url": "https://api.github.com/users/WaffleLapkin/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f21c0a274ebfb35612359e32bee965afb09640d6", "url": "https://api.github.com/repos/rust-lang/rust/commits/f21c0a274ebfb35612359e32bee965afb09640d6", "html_url": "https://github.com/rust-lang/rust/commit/f21c0a274ebfb35612359e32bee965afb09640d6"}], "stats": {"total": 57, "additions": 33, "deletions": 24}, "files": [{"sha": "0d252c3d465d22dac65b4f38650d25a353a6e8f9", "filename": "compiler/rustc_parse/src/parser/expr.rs", "status": "modified", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_parse%2Fsrc%2Fparser%2Fexpr.rs?ref=c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "patch": "@@ -13,6 +13,7 @@ use rustc_ast::tokenstream::Spacing;\n use rustc_ast::util::classify;\n use rustc_ast::util::literal::LitError;\n use rustc_ast::util::parser::{prec_let_scrutinee_needs_par, AssocOp, Fixity};\n+use rustc_ast::visit::Visitor;\n use rustc_ast::StmtKind;\n use rustc_ast::{self as ast, AttrStyle, AttrVec, CaptureBy, ExprField, Lit, UnOp, DUMMY_NODE_ID};\n use rustc_ast::{AnonConst, BinOp, BinOpKind, FnDecl, FnRetTy, MacCall, Param, Ty, TyKind};\n@@ -1556,6 +1557,28 @@ impl<'a> Parser<'a> {\n \n             // Continue as an expression in an effort to recover on `'label: non_block_expr`.\n             let expr = self.parse_expr().map(|expr| {\n+                let found_labeled_breaks = {\n+                    struct FindLabeledBreaksVisitor(bool);\n+\n+                    impl<'ast> Visitor<'ast> for FindLabeledBreaksVisitor {\n+                        fn visit_expr_post(&mut self, ex: &'ast Expr) {\n+                            if let ExprKind::Break(Some(_label), _) = ex.kind {\n+                                self.0 = true;\n+                            }\n+                        }\n+                    }\n+\n+                    let mut vis = FindLabeledBreaksVisitor(false);\n+                    vis.visit_expr(&expr);\n+                    vis.0\n+                };\n+\n+                // Suggestion involves adding a (as of time of writing this, unstable) labeled block\n+                // so if the label is not used, just return the unmodified expression\n+                if !found_labeled_breaks {\n+                    return expr;\n+                }\n+\n                 let span = expr.span;\n                 let sugg_msg = \"consider enclosing expression in a block\";\n                 let suggestions = vec!["}, {"sha": "26884dc5d745220e5255834a9ceea4c6917360e2", "filename": "src/test/ui/parser/labeled-no-colon-expr.stderr", "status": "modified", "additions": 0, "deletions": 5, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Flabeled-no-colon-expr.stderr?ref=c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "patch": "@@ -47,11 +47,6 @@ error: expected `while`, `for`, `loop` or `{` after a label\n    |\n LL |     'l4 0;\n    |         ^ expected `while`, `for`, `loop` or `{` after a label\n-   |\n-help: consider enclosing expression in a block\n-   |\n-LL |     'l4 {0};\n-   |         + +\n \n error: labeled expression must be followed by `:`\n   --> $DIR/labeled-no-colon-expr.rs:8:9"}, {"sha": "aabda4a67a182cae1e9d4de22f8f5d66dbc05257", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.fixed", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.fixed?ref=c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "patch": "@@ -1,8 +1,9 @@\n // run-rustfix\n #![feature(label_break_value)]\n fn main() {\n-    #[allow(unused_labels)]\n-    'label: {1 + 1}; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    // FIXME(waffle): add this back\n+    // #[allow(unused_labels)]\n+    // 'label: 1 + 1; // ERROR expected `while`, `for`, `loop` or `{` after a label\n \n     'label: {match () { () => break 'label, }}; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n "}, {"sha": "9244acabc26466ae5a1e79b5cdd99ecfd6529d16", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.rs?ref=c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "patch": "@@ -1,8 +1,9 @@\n // run-rustfix\n #![feature(label_break_value)]\n fn main() {\n-    #[allow(unused_labels)]\n-    'label: 1 + 1; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n+    // FIXME(waffle): add this back\n+    // #[allow(unused_labels)]\n+    // 'label: 1 + 1; // ERROR expected `while`, `for`, `loop` or `{` after a label\n \n     'label: match () { () => break 'label, }; //~ ERROR expected `while`, `for`, `loop` or `{` after a label\n "}, {"sha": "37843141ef3b10633a83ae385ae48ec128fb3afe", "filename": "src/test/ui/parser/recover-labeled-non-block-expr.stderr", "status": "modified", "additions": 4, "deletions": 15, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6e5bb32fbb3d0a85189e56086726c183f68ad0c/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Frecover-labeled-non-block-expr.stderr?ref=c6e5bb32fbb3d0a85189e56086726c183f68ad0c", "patch": "@@ -1,16 +1,5 @@\n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:5:13\n-   |\n-LL |     'label: 1 + 1;\n-   |             ^ expected `while`, `for`, `loop` or `{` after a label\n-   |\n-help: consider enclosing expression in a block\n-   |\n-LL |     'label: {1 + 1};\n-   |             +     +\n-\n-error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:7:13\n+  --> $DIR/recover-labeled-non-block-expr.rs:8:13\n    |\n LL |     'label: match () { () => break 'label, };\n    |             ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -21,7 +10,7 @@ LL |     'label: {match () { () => break 'label, }};\n    |             +                                +\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:10:22\n+  --> $DIR/recover-labeled-non-block-expr.rs:11:22\n    |\n LL |     let _i = 'label: match x {\n    |                      ^^^^^ expected `while`, `for`, `loop` or `{` after a label\n@@ -37,7 +26,7 @@ LL |                 break 'label 13\n  ...\n \n error: expected `while`, `for`, `loop` or `{` after a label\n-  --> $DIR/recover-labeled-non-block-expr.rs:24:24\n+  --> $DIR/recover-labeled-non-block-expr.rs:25:24\n    |\n LL |     let _val = 'label: (1, if other == 3 { break 'label (2, 3) } else { other });\n    |                        ^ expected `while`, `for`, `loop` or `{` after a label\n@@ -47,5 +36,5 @@ help: consider enclosing expression in a block\n LL |     let _val = 'label: {(1, if other == 3 { break 'label (2, 3) } else { other })};\n    |                        +                                                         +\n \n-error: aborting due to 4 previous errors\n+error: aborting due to 3 previous errors\n "}]}