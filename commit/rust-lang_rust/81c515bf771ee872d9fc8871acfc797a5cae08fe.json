{"sha": "81c515bf771ee872d9fc8871acfc797a5cae08fe", "node_id": "C_kwDOAAsO6NoAKDgxYzUxNWJmNzcxZWU4NzJkOWZjODg3MWFjZmM3OTdhNWNhZTA4ZmU", "commit": {"author": {"name": "Eric Huss", "email": "eric@huss.org", "date": "2022-01-08T04:20:56Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-01-08T04:20:56Z"}, "message": "Rollup merge of #92336 - dtolnay:printstateself, r=michaelwoerister\n\nRemove &self from PrintState::to_string\n\nThe point of `PrintState::to_string` is to create a `State` and evaluate the caller's closure on it:\n\nhttps://github.com/rust-lang/rust/blob/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler/rustc_ast_pretty/src/pprust/state.rs#L868-L872\n\nMaking the caller *also* construct and pass in a `State`, which is then ignored, was confusing.", "tree": {"sha": "747a6da0a860eebdb2edd24638522cc1e4d9bca9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/747a6da0a860eebdb2edd24638522cc1e4d9bca9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81c515bf771ee872d9fc8871acfc797a5cae08fe", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJh2REoCRBK7hj4Ov3rIwAAEGIIAEA6++7KG6bQJ8+IK/sg6TEK\nG5nQSPDk4Us8of2NYp2Vde6wIouCJvTjUYa2RvFf5NKK7BG3CVb5mgligSfgLIXB\nc1N6POFeKoT8ZjRRQ1j6ooS8apMxnCzKmDA3HCZT84PnBZ/jJBCwI4o4hWWs+1Cv\nJOwpxgUp+OJ/HKsgJ2KzMyWOfLOsK5k/dmejUYEHh62zjSyAcwTfY40pBz7fYpmi\nvjvLQTDNNU+IoTZA1ER7FN/+QFRPGg+60jzGYIZuWXCnwWCF9g5Q9+lDy98VYXrn\nYFOg5ifhN1pLdIhap2y2jLOkc2ynVtyp00iCnB55buhk6xmGN0KoOnCHilrRy0w=\n=xk4i\n-----END PGP SIGNATURE-----\n", "payload": "tree 747a6da0a860eebdb2edd24638522cc1e4d9bca9\nparent 83de77dd5e2b853b95a12ac8c6cc202eec81892b\nparent e9fbe79292783972a222afd270db3f77c0b4f3c8\nauthor Eric Huss <eric@huss.org> 1641615656 -0800\ncommitter GitHub <noreply@github.com> 1641615656 -0800\n\nRollup merge of #92336 - dtolnay:printstateself, r=michaelwoerister\n\nRemove &self from PrintState::to_string\n\nThe point of `PrintState::to_string` is to create a `State` and evaluate the caller's closure on it:\n\nhttps://github.com/rust-lang/rust/blob/e9fbe79292783972a222afd270db3f77c0b4f3c8/compiler/rustc_ast_pretty/src/pprust/state.rs#L868-L872\n\nMaking the caller *also* construct and pass in a `State`, which is then ignored, was confusing.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81c515bf771ee872d9fc8871acfc797a5cae08fe", "html_url": "https://github.com/rust-lang/rust/commit/81c515bf771ee872d9fc8871acfc797a5cae08fe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81c515bf771ee872d9fc8871acfc797a5cae08fe/comments", "author": {"login": "ehuss", "id": 43198, "node_id": "MDQ6VXNlcjQzMTk4", "avatar_url": "https://avatars.githubusercontent.com/u/43198?v=4", "gravatar_id": "", "url": "https://api.github.com/users/ehuss", "html_url": "https://github.com/ehuss", "followers_url": "https://api.github.com/users/ehuss/followers", "following_url": "https://api.github.com/users/ehuss/following{/other_user}", "gists_url": "https://api.github.com/users/ehuss/gists{/gist_id}", "starred_url": "https://api.github.com/users/ehuss/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/ehuss/subscriptions", "organizations_url": "https://api.github.com/users/ehuss/orgs", "repos_url": "https://api.github.com/users/ehuss/repos", "events_url": "https://api.github.com/users/ehuss/events{/privacy}", "received_events_url": "https://api.github.com/users/ehuss/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "83de77dd5e2b853b95a12ac8c6cc202eec81892b", "url": "https://api.github.com/repos/rust-lang/rust/commits/83de77dd5e2b853b95a12ac8c6cc202eec81892b", "html_url": "https://github.com/rust-lang/rust/commit/83de77dd5e2b853b95a12ac8c6cc202eec81892b"}, {"sha": "e9fbe79292783972a222afd270db3f77c0b4f3c8", "url": "https://api.github.com/repos/rust-lang/rust/commits/e9fbe79292783972a222afd270db3f77c0b4f3c8", "html_url": "https://github.com/rust-lang/rust/commit/e9fbe79292783972a222afd270db3f77c0b4f3c8"}], "stats": {"total": 48, "additions": 24, "deletions": 24}, "files": [{"sha": "ac9e7d06c4e4006fb9563cd55fe0af516869272b", "filename": "compiler/rustc_ast_pretty/src/pprust/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81c515bf771ee872d9fc8871acfc797a5cae08fe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c515bf771ee872d9fc8871acfc797a5cae08fe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fmod.rs?ref=81c515bf771ee872d9fc8871acfc797a5cae08fe", "patch": "@@ -73,11 +73,11 @@ pub fn attribute_to_string(attr: &ast::Attribute) -> String {\n }\n \n pub fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n-    State::new().to_string(f)\n+    State::to_string(f)\n }\n \n pub fn crate_to_string_for_macros(krate: &ast::Crate) -> String {\n-    State::new().to_string(|s| {\n+    State::to_string(|s| {\n         s.print_inner_attributes(&krate.attrs);\n         for item in &krate.items {\n             s.print_item(item);"}, {"sha": "fa9a20f2e03584192cd6ac3dfdd55bcbf93bebf1", "filename": "compiler/rustc_ast_pretty/src/pprust/state.rs", "status": "modified", "additions": 22, "deletions": 22, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/81c515bf771ee872d9fc8871acfc797a5cae08fe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81c515bf771ee872d9fc8871acfc797a5cae08fe/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_pretty%2Fsrc%2Fpprust%2Fstate.rs?ref=81c515bf771ee872d9fc8871acfc797a5cae08fe", "patch": "@@ -211,7 +211,7 @@ pub fn literal_to_string(lit: token::Lit) -> String {\n }\n \n fn visibility_qualified(vis: &ast::Visibility, s: &str) -> String {\n-    format!(\"{}{}\", State::new().to_string(|s| s.print_visibility(vis)), s)\n+    format!(\"{}{}\", State::to_string(|s| s.print_visibility(vis)), s)\n }\n \n impl std::ops::Deref for State<'_> {\n@@ -793,55 +793,55 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn ty_to_string(&self, ty: &ast::Ty) -> String {\n-        self.to_string(|s| s.print_type(ty))\n+        Self::to_string(|s| s.print_type(ty))\n     }\n \n     fn bounds_to_string(&self, bounds: &[ast::GenericBound]) -> String {\n-        self.to_string(|s| s.print_type_bounds(\"\", bounds))\n+        Self::to_string(|s| s.print_type_bounds(\"\", bounds))\n     }\n \n     fn pat_to_string(&self, pat: &ast::Pat) -> String {\n-        self.to_string(|s| s.print_pat(pat))\n+        Self::to_string(|s| s.print_pat(pat))\n     }\n \n     fn expr_to_string(&self, e: &ast::Expr) -> String {\n-        self.to_string(|s| s.print_expr(e))\n+        Self::to_string(|s| s.print_expr(e))\n     }\n \n     fn tt_to_string(&self, tt: &TokenTree) -> String {\n-        self.to_string(|s| s.print_tt(tt, false))\n+        Self::to_string(|s| s.print_tt(tt, false))\n     }\n \n     fn tts_to_string(&self, tokens: &TokenStream) -> String {\n-        self.to_string(|s| s.print_tts(tokens, false))\n+        Self::to_string(|s| s.print_tts(tokens, false))\n     }\n \n     fn stmt_to_string(&self, stmt: &ast::Stmt) -> String {\n-        self.to_string(|s| s.print_stmt(stmt))\n+        Self::to_string(|s| s.print_stmt(stmt))\n     }\n \n     fn item_to_string(&self, i: &ast::Item) -> String {\n-        self.to_string(|s| s.print_item(i))\n+        Self::to_string(|s| s.print_item(i))\n     }\n \n     fn generic_params_to_string(&self, generic_params: &[ast::GenericParam]) -> String {\n-        self.to_string(|s| s.print_generic_params(generic_params))\n+        Self::to_string(|s| s.print_generic_params(generic_params))\n     }\n \n     fn path_to_string(&self, p: &ast::Path) -> String {\n-        self.to_string(|s| s.print_path(p, false, 0))\n+        Self::to_string(|s| s.print_path(p, false, 0))\n     }\n \n     fn path_segment_to_string(&self, p: &ast::PathSegment) -> String {\n-        self.to_string(|s| s.print_path_segment(p, false))\n+        Self::to_string(|s| s.print_path_segment(p, false))\n     }\n \n     fn vis_to_string(&self, v: &ast::Visibility) -> String {\n-        self.to_string(|s| s.print_visibility(v))\n+        Self::to_string(|s| s.print_visibility(v))\n     }\n \n     fn block_to_string(&self, blk: &ast::Block) -> String {\n-        self.to_string(|s| {\n+        Self::to_string(|s| {\n             // Containing cbox, will be closed by `print_block` at `}`.\n             s.cbox(INDENT_UNIT);\n             // Head-ibox, will be closed by `print_block` after `{`.\n@@ -851,22 +851,22 @@ pub trait PrintState<'a>: std::ops::Deref<Target = pp::Printer> + std::ops::Dere\n     }\n \n     fn meta_list_item_to_string(&self, li: &ast::NestedMetaItem) -> String {\n-        self.to_string(|s| s.print_meta_list_item(li))\n+        Self::to_string(|s| s.print_meta_list_item(li))\n     }\n \n     fn attr_item_to_string(&self, ai: &ast::AttrItem) -> String {\n-        self.to_string(|s| s.print_attr_item(ai, ai.path.span))\n+        Self::to_string(|s| s.print_attr_item(ai, ai.path.span))\n     }\n \n     fn attribute_to_string(&self, attr: &ast::Attribute) -> String {\n-        self.to_string(|s| s.print_attribute(attr))\n+        Self::to_string(|s| s.print_attribute(attr))\n     }\n \n     fn param_to_string(&self, arg: &ast::Param) -> String {\n-        self.to_string(|s| s.print_param(arg, false))\n+        Self::to_string(|s| s.print_param(arg, false))\n     }\n \n-    fn to_string(&self, f: impl FnOnce(&mut State<'_>)) -> String {\n+    fn to_string(f: impl FnOnce(&mut State<'_>)) -> String {\n         let mut printer = State::new();\n         f(&mut printer);\n         printer.s.eof()\n@@ -1202,7 +1202,7 @@ impl<'a> State<'a> {\n                 );\n             }\n             ast::ItemKind::Mod(unsafety, ref mod_kind) => {\n-                self.head(self.to_string(|s| {\n+                self.head(Self::to_string(|s| {\n                     s.print_visibility(&item.vis);\n                     s.print_unsafety(unsafety);\n                     s.word(\"mod\");\n@@ -1228,7 +1228,7 @@ impl<'a> State<'a> {\n                 }\n             }\n             ast::ItemKind::ForeignMod(ref nmod) => {\n-                self.head(self.to_string(|s| {\n+                self.head(Self::to_string(|s| {\n                     s.print_unsafety(nmod.unsafety);\n                     s.word(\"extern\");\n                 }));\n@@ -1450,7 +1450,7 @@ impl<'a> State<'a> {\n                 ast::CrateSugar::JustCrate => self.word_nbsp(\"crate\"),\n             },\n             ast::VisibilityKind::Restricted { ref path, .. } => {\n-                let path = self.to_string(|s| s.print_path(path, false, 0));\n+                let path = Self::to_string(|s| s.print_path(path, false, 0));\n                 if path == \"self\" || path == \"super\" {\n                     self.word_nbsp(format!(\"pub({})\", path))\n                 } else {"}]}