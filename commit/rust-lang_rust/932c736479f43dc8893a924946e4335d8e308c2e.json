{"sha": "932c736479f43dc8893a924946e4335d8e308c2e", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkzMmM3MzY0NzlmNDNkYzg4OTNhOTI0OTQ2ZTQzMzVkOGUzMDhjMmU=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-08T06:38:30Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-02-08T06:38:30Z"}, "message": "Auto merge of #48057 - scottmcm:less-match-more-compare, r=dtolnay\n\nSimplify RangeInclusive::next[_back]\n\n`match`ing on an `Option<Ordering>` seems cause some confusion for LLVM; switching to just using comparison operators removes a few jumps from the simple `for` loops I was trying.\n\ncc https://github.com/rust-lang/rust/issues/45222 https://github.com/rust-lang/rust/issues/28237#issuecomment-363706510\n\nExample:\n```rust\n#[no_mangle]\npub fn coresum(x: std::ops::RangeInclusive<u64>) -> u64 {\n    let mut sum = 0;\n    for i in x {\n        sum += i ^ (i-1);\n    }\n    sum\n}\n```\nToday:\n```asm\ncoresum:\n    xor r8d, r8d\n    mov r9, -1\n    xor eax, eax\n    jmp .LBB0_1\n.LBB0_4:\n    lea rcx, [rdi - 1]\n    xor rcx, rdi\n    add rax, rcx\n    mov rsi, rdx\n    mov rdi, r10\n.LBB0_1:\n    cmp rdi, rsi\n    mov ecx, 1\n    cmovb   rcx, r9\n    cmove   rcx, r8\n    test    rcx, rcx\n    mov edx, 0\n    mov r10d, 1\n    je  .LBB0_4         // 1\n    cmp rcx, -1\n    jne .LBB0_5         // 2\n    lea r10, [rdi + 1]\n    mov rdx, rsi\n    jmp .LBB0_4         // 3\n.LBB0_5:\n    ret\n```\nWith this PR:\n```asm\ncoresum:\n\tcmp\trcx, rdx\n\tjbe\t.LBB0_2\n\txor\teax, eax\n\tret\n.LBB0_2:\n\txor\tr8d, r8d\n\tmov\tr9d, 1\n\txor\teax, eax\n\t.p2align\t4, 0x90\n.LBB0_3:\n\tlea\tr10, [rcx + 1]\n\tcmp\trcx, rdx\n\tcmovae\trdx, r8\n\tcmovae\tr10, r9\n\tlea\tr11, [rcx - 1]\n\txor\tr11, rcx\n\tadd\trax, r11\n\tmov\trcx, r10\n\tcmp\tr10, rdx\n\tjbe\t.LBB0_3         // Just this\n\tret\n```\n\n<details><summary>Though using internal iteration (`.map(|i| i ^ (i-1)).sum()`) is still shorter to type, and lets the compiler unroll it</summary>\n\n```asm\ncoresum_inner:\n.Lcfi0:\n.seh_proc coresum_inner\n\tsub\trsp, 168\n.Lcfi1:\n\t.seh_stackalloc 168\n\tvmovdqa\txmmword ptr [rsp + 144], xmm15\n.Lcfi2:\n\t.seh_savexmm 15, 144\n\tvmovdqa\txmmword ptr [rsp + 128], xmm14\n.Lcfi3:\n\t.seh_savexmm 14, 128\n\tvmovdqa\txmmword ptr [rsp + 112], xmm13\n.Lcfi4:\n\t.seh_savexmm 13, 112\n\tvmovdqa\txmmword ptr [rsp + 96], xmm12\n.Lcfi5:\n\t.seh_savexmm 12, 96\n\tvmovdqa\txmmword ptr [rsp + 80], xmm11\n.Lcfi6:\n\t.seh_savexmm 11, 80\n\tvmovdqa\txmmword ptr [rsp + 64], xmm10\n.Lcfi7:\n\t.seh_savexmm 10, 64\n\tvmovdqa\txmmword ptr [rsp + 48], xmm9\n.Lcfi8:\n\t.seh_savexmm 9, 48\n\tvmovdqa\txmmword ptr [rsp + 32], xmm8\n.Lcfi9:\n\t.seh_savexmm 8, 32\n\tvmovdqa\txmmword ptr [rsp + 16], xmm7\n.Lcfi10:\n\t.seh_savexmm 7, 16\n\tvmovdqa\txmmword ptr [rsp], xmm6\n.Lcfi11:\n\t.seh_savexmm 6, 0\n.Lcfi12:\n\t.seh_endprologue\n\tcmp\trdx, rcx\n\tjae\t.LBB1_2\n\txor\teax, eax\n\tjmp\t.LBB1_13\n.LBB1_2:\n\tmov\tr8, rdx\n\tsub\tr8, rcx\n\tjbe\t.LBB1_3\n\tcmp\tr8, 7\n\tjbe\t.LBB1_5\n\tmov\trax, r8\n\tand\trax, -8\n\tmov\tr9, r8\n\tand\tr9, -8\n\tje\t.LBB1_5\n\tadd\trax, rcx\n\tvmovq\txmm0, rcx\n\tvpshufd\txmm0, xmm0, 68\n\tmov\tecx, 1\n\tvmovq\txmm1, rcx\n\tvpslldq\txmm1, xmm1, 8\n\tvpaddq\txmm1, xmm0, xmm1\n\tvpxor\txmm0, xmm0, xmm0\n\tvpcmpeqd\txmm11, xmm11, xmm11\n\tvmovdqa\txmm12, xmmword ptr [rip + __xmm@00000000000000010000000000000001]\n\tvmovdqa\txmm13, xmmword ptr [rip + __xmm@00000000000000030000000000000003]\n\tvmovdqa\txmm14, xmmword ptr [rip + __xmm@00000000000000050000000000000005]\n\tvmovdqa\txmm15, xmmword ptr [rip + __xmm@00000000000000080000000000000008]\n\tmov\trcx, r9\n\tvpxor\txmm4, xmm4, xmm4\n\tvpxor\txmm5, xmm5, xmm5\n\tvpxor\txmm6, xmm6, xmm6\n\t.p2align\t4, 0x90\n.LBB1_9:\n\tvpaddq\txmm7, xmm1, xmmword ptr [rip + __xmm@00000000000000020000000000000002]\n\tvpaddq\txmm9, xmm1, xmmword ptr [rip + __xmm@00000000000000040000000000000004]\n\tvpaddq\txmm10, xmm1, xmmword ptr [rip + __xmm@00000000000000060000000000000006]\n\tvpaddq\txmm8, xmm1, xmm12\n\tvpxor\txmm7, xmm8, xmm7\n\tvpaddq\txmm2, xmm1, xmm13\n\tvpxor\txmm8, xmm2, xmm9\n\tvpaddq\txmm3, xmm1, xmm14\n\tvpxor\txmm3, xmm3, xmm10\n\tvpaddq\txmm2, xmm1, xmm11\n\tvpxor\txmm2, xmm2, xmm1\n\tvpaddq\txmm0, xmm2, xmm0\n\tvpaddq\txmm4, xmm7, xmm4\n\tvpaddq\txmm5, xmm8, xmm5\n\tvpaddq\txmm6, xmm3, xmm6\n\tvpaddq\txmm1, xmm1, xmm15\n\tadd\trcx, -8\n\tjne\t.LBB1_9\n\tvpaddq\txmm0, xmm4, xmm0\n\tvpaddq\txmm0, xmm5, xmm0\n\tvpaddq\txmm0, xmm6, xmm0\n\tvpshufd\txmm1, xmm0, 78\n\tvpaddq\txmm0, xmm0, xmm1\n\tvmovq\tr10, xmm0\n\tcmp\tr8, r9\n\tjne\t.LBB1_6\n\tjmp\t.LBB1_11\n.LBB1_3:\n\txor\tr10d, r10d\n\tjmp\t.LBB1_12\n.LBB1_5:\n\txor\tr10d, r10d\n\tmov\trax, rcx\n\t.p2align\t4, 0x90\n.LBB1_6:\n\tlea\trcx, [rax - 1]\n\txor\trcx, rax\n\tinc\trax\n\tadd\tr10, rcx\n\tcmp\trdx, rax\n\tjne\t.LBB1_6\n.LBB1_11:\n\tmov\trcx, rdx\n.LBB1_12:\n\tlea\trax, [rcx - 1]\n\txor\trax, rcx\n\tadd\trax, r10\n.LBB1_13:\n\tvmovaps\txmm6, xmmword ptr [rsp]\n\tvmovaps\txmm7, xmmword ptr [rsp + 16]\n\tvmovaps\txmm8, xmmword ptr [rsp + 32]\n\tvmovaps\txmm9, xmmword ptr [rsp + 48]\n\tvmovaps\txmm10, xmmword ptr [rsp + 64]\n\tvmovaps\txmm11, xmmword ptr [rsp + 80]\n\tvmovaps\txmm12, xmmword ptr [rsp + 96]\n\tvmovaps\txmm13, xmmword ptr [rsp + 112]\n\tvmovaps\txmm14, xmmword ptr [rsp + 128]\n\tvmovaps\txmm15, xmmword ptr [rsp + 144]\n\tadd\trsp, 168\n\tret\n\t.seh_handlerdata\n\t.section\t.text,\"xr\",one_only,coresum_inner\n.Lcfi13:\n\t.seh_endproc\n```\n\n</details>", "tree": {"sha": "07073a967d51e8400f9eebb692f2826db049d0cb", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/07073a967d51e8400f9eebb692f2826db049d0cb"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/932c736479f43dc8893a924946e4335d8e308c2e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/932c736479f43dc8893a924946e4335d8e308c2e", "html_url": "https://github.com/rust-lang/rust/commit/932c736479f43dc8893a924946e4335d8e308c2e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/932c736479f43dc8893a924946e4335d8e308c2e/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c", "html_url": "https://github.com/rust-lang/rust/commit/29c8276cee4a0eab7e0634ff25c6b47bd9f87c6c"}, {"sha": "27d4d51670710aa44a73baf04130bc262b8de244", "url": "https://api.github.com/repos/rust-lang/rust/commits/27d4d51670710aa44a73baf04130bc262b8de244", "html_url": "https://github.com/rust-lang/rust/commit/27d4d51670710aa44a73baf04130bc262b8de244"}], "stats": {"total": 47, "additions": 31, "deletions": 16}, "files": [{"sha": "65b38c94dda3f7b2de5402b156bbec509fb6ca81", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 12, "deletions": 16, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/932c736479f43dc8893a924946e4335d8e308c2e/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932c736479f43dc8893a924946e4335d8e308c2e/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=932c736479f43dc8893a924946e4335d8e308c2e", "patch": "@@ -334,19 +334,17 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n \n     #[inline]\n     fn next(&mut self) -> Option<A> {\n-        use cmp::Ordering::*;\n-\n-        match self.start.partial_cmp(&self.end) {\n-            Some(Less) => {\n+        if self.start <= self.end {\n+            if self.start < self.end {\n                 let n = self.start.add_one();\n                 Some(mem::replace(&mut self.start, n))\n-            },\n-            Some(Equal) => {\n+            } else {\n                 let last = self.start.replace_one();\n                 self.end.replace_zero();\n                 Some(last)\n-            },\n-            _ => None,\n+            }\n+        } else {\n+            None\n         }\n     }\n \n@@ -428,19 +426,17 @@ impl<A: Step> Iterator for ops::RangeInclusive<A> {\n impl<A: Step> DoubleEndedIterator for ops::RangeInclusive<A> {\n     #[inline]\n     fn next_back(&mut self) -> Option<A> {\n-        use cmp::Ordering::*;\n-\n-        match self.start.partial_cmp(&self.end) {\n-            Some(Less) => {\n+        if self.start <= self.end {\n+            if self.start < self.end {\n                 let n = self.end.sub_one();\n                 Some(mem::replace(&mut self.end, n))\n-            },\n-            Some(Equal) => {\n+            } else {\n                 let last = self.end.replace_zero();\n                 self.start.replace_one();\n                 Some(last)\n-            },\n-            _ => None,\n+            }\n+        } else {\n+            None\n         }\n     }\n "}, {"sha": "b2a5243d5e67b86f7e449e380a93aacdd1c8aea5", "filename": "src/libcore/tests/iter.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/932c736479f43dc8893a924946e4335d8e308c2e/src%2Flibcore%2Ftests%2Fiter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/932c736479f43dc8893a924946e4335d8e308c2e/src%2Flibcore%2Ftests%2Fiter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Fiter.rs?ref=932c736479f43dc8893a924946e4335d8e308c2e", "patch": "@@ -1332,6 +1332,18 @@ fn test_range_inclusive_exhaustion() {\n     assert_eq!(r.next_back(), Some(10));\n     assert_eq!(r, 1..=0);\n \n+    let mut r = 10..=12;\n+    assert_eq!(r.next(), Some(10));\n+    assert_eq!(r.next(), Some(11));\n+    assert_eq!(r.next(), Some(12));\n+    assert_eq!(r, 1..=0);\n+\n+    let mut r = 10..=12;\n+    assert_eq!(r.next_back(), Some(12));\n+    assert_eq!(r.next_back(), Some(11));\n+    assert_eq!(r.next_back(), Some(10));\n+    assert_eq!(r, 1..=0);\n+\n     let mut r = 10..=12;\n     assert_eq!(r.nth(2), Some(12));\n     assert_eq!(r, 1..=0);\n@@ -1340,6 +1352,13 @@ fn test_range_inclusive_exhaustion() {\n     assert_eq!(r.nth(5), None);\n     assert_eq!(r, 1..=0);\n \n+    let mut r = 100..=10;\n+    assert_eq!(r.next(), None);\n+    assert_eq!(r, 100..=10);\n+\n+    let mut r = 100..=10;\n+    assert_eq!(r.next_back(), None);\n+    assert_eq!(r, 100..=10);\n }\n \n #[test]"}]}