{"sha": "ab1a3f09fd3e1dbce850b9e1b691dc8338584e65", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFiMWEzZjA5ZmQzZTFkYmNlODUwYjllMWI2OTFkYzgzMzg1ODRlNjU=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-16T17:06:07Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-09-16T20:13:45Z"}, "message": "add test for drop order of temporary in tail return expression", "tree": {"sha": "9fc79668a573874d72d5e61d6b2319a0e7fa8e85", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9fc79668a573874d72d5e61d6b2319a0e7fa8e85"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65", "html_url": "https://github.com/rust-lang/rust/commit/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe", "url": "https://api.github.com/repos/rust-lang/rust/commits/b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe", "html_url": "https://github.com/rust-lang/rust/commit/b6269f27d99d7da9e95f0b3fdc53193dc8c42fbe"}], "stats": {"total": 94, "additions": 94, "deletions": 0}, "files": [{"sha": "e250506cdf0af90b4e0e4b379964fdd9d7b38949", "filename": "src/test/ui/async-await/drop-order/drop-order-for-temporary-in-tail-return-expr.rs", "status": "added", "additions": 94, "deletions": 0, "changes": 94, "blob_url": "https://github.com/rust-lang/rust/blob/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-temporary-in-tail-return-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/ab1a3f09fd3e1dbce850b9e1b691dc8338584e65/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-temporary-in-tail-return-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fasync-await%2Fdrop-order%2Fdrop-order-for-temporary-in-tail-return-expr.rs?ref=ab1a3f09fd3e1dbce850b9e1b691dc8338584e65", "patch": "@@ -0,0 +1,94 @@\n+// aux-build:arc_wake.rs\n+// edition:2018\n+// run-pass\n+\n+#![allow(unused_variables)]\n+\n+// Test that the drop order for parameters in a fn and async fn matches up. Also test that\n+// parameters (used or unused) are not dropped until the async fn completes execution.\n+// See also #54716.\n+\n+extern crate arc_wake;\n+\n+use arc_wake::ArcWake;\n+use std::cell::RefCell;\n+use std::future::Future;\n+use std::sync::Arc;\n+use std::rc::Rc;\n+use std::task::Context;\n+\n+struct EmptyWaker;\n+\n+impl ArcWake for EmptyWaker {\n+    fn wake(self: Arc<Self>) {}\n+}\n+\n+#[derive(Debug, Eq, PartialEq)]\n+enum DropOrder {\n+    Function,\n+    Val(&'static str),\n+}\n+\n+type DropOrderListPtr = Rc<RefCell<Vec<DropOrder>>>;\n+\n+struct D(&'static str, DropOrderListPtr);\n+\n+impl Drop for D {\n+    fn drop(&mut self) {\n+        self.1.borrow_mut().push(DropOrder::Val(self.0));\n+    }\n+}\n+\n+/// Check drop order of temporary \"temp\" as compared to x, y, and z.\n+///\n+/// Expected order:\n+/// - z\n+/// - temp\n+/// - y\n+/// - x\n+async fn foo_async(x: D, _y: D) {\n+    let l = x.1.clone();\n+    let z = D(\"z\", l.clone());\n+    l.borrow_mut().push(DropOrder::Function);\n+    helper_async(&D(\"temp\", l)).await\n+}\n+\n+async fn helper_async(v: &D) { }\n+\n+fn foo_sync(x: D, _y: D) {\n+    let l = x.1.clone();\n+    let z = D(\"z\", l.clone());\n+    l.borrow_mut().push(DropOrder::Function);\n+    helper_sync(&D(\"temp\", l))\n+}\n+\n+fn helper_sync(v: &D) { }\n+\n+fn assert_drop_order_after_poll<Fut: Future<Output = ()>>(\n+    f: impl FnOnce(DropOrderListPtr) -> Fut,\n+    g: impl FnOnce(DropOrderListPtr),\n+) {\n+    let empty = Arc::new(EmptyWaker);\n+    let waker = ArcWake::into_waker(empty);\n+    let mut cx = Context::from_waker(&waker);\n+\n+    let actual_order = Rc::new(RefCell::new(Vec::new()));\n+    let mut fut = Box::pin(f(actual_order.clone()));\n+    let r = fut.as_mut().poll(&mut cx);\n+\n+    assert!(match r {\n+        std::task::Poll::Ready(()) => true,\n+        _ => false,\n+    });\n+\n+    let expected_order = Rc::new(RefCell::new(Vec::new()));\n+    g(expected_order.clone());\n+\n+    assert_eq!(*actual_order.borrow(), *expected_order.borrow());\n+}\n+\n+fn main() {\n+    // Free functions (see doc comment on function for what it tests).\n+    assert_drop_order_after_poll(|l| foo_async(D(\"x\", l.clone()), D(\"_y\", l.clone())),\n+                                 |l| foo_sync(D(\"x\", l.clone()), D(\"_y\", l.clone())));\n+}"}]}