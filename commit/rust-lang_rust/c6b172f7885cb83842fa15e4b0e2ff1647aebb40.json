{"sha": "c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "node_id": "MDY6Q29tbWl0NzI0NzEyOmM2YjE3MmY3ODg1Y2I4Mzg0MmZhMTVlNGIwZTJmZjE2NDdhZWJiNDA=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T21:57:38Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2020-03-21T21:57:38Z"}, "message": "Auto merge of #70246 - Dylan-DPC:rollup-vt9wex2, r=Dylan-DPC\n\nRollup of 10 pull requests\n\nSuccessful merges:\n\n - #70003 (symbol_names: treat ReifyShim like VtableShim.)\n - #70051 (Allow `hir().find` to return `None`)\n - #70126 (Fix ICE caused by truncating a negative ZST enum discriminant)\n - #70197 (For issue 53957: revise unit test to focus on underlying bug of 23076.)\n - #70215 (ast: Compress `AttrId` from `usize` to `u32`)\n - #70218 (Fix deprecated Error.description() usage in docs)\n - #70228 (Remove CARGO_BUILD_TARGET from bootstrap.py)\n - #70231 (Add explanation message for E0224)\n - #70232 (Tweak wording for std::io::Read::read function)\n - #70238 (Add a test for out-of-line module passed through a proc macro)\n\nFailed merges:\n\nr? @ghost", "tree": {"sha": "c9c762cf63210999b8cdc8630b98efa02bc8a6ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c9c762cf63210999b8cdc8630b98efa02bc8a6ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "html_url": "https://github.com/rust-lang/rust/commit/c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "url": "https://api.github.com/repos/rust-lang/rust/commits/38114ff16e7856f98b2b4be7ab4cd29b38bed59a", "html_url": "https://github.com/rust-lang/rust/commit/38114ff16e7856f98b2b4be7ab4cd29b38bed59a"}, {"sha": "17e6ed1fd97980146f63fb65e83da8702f294d31", "url": "https://api.github.com/repos/rust-lang/rust/commits/17e6ed1fd97980146f63fb65e83da8702f294d31", "html_url": "https://github.com/rust-lang/rust/commit/17e6ed1fd97980146f63fb65e83da8702f294d31"}], "stats": {"total": 266, "additions": 208, "deletions": 58}, "files": [{"sha": "d5efed61b541e8fccf24852e4d4a499da6d5fb05", "filename": "src/bootstrap/bootstrap.py", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Fbootstrap%2Fbootstrap.py", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Fbootstrap%2Fbootstrap.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbootstrap.py?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -664,6 +664,10 @@ def build_bootstrap(self):\n         if self.clean and os.path.exists(build_dir):\n             shutil.rmtree(build_dir)\n         env = os.environ.copy()\n+        # `CARGO_BUILD_TARGET` breaks bootstrap build.\n+        # See also: <https://github.com/rust-lang/rust/issues/70208>.\n+        if \"CARGO_BUILD_TARGET\" in env:\n+            del env[\"CARGO_BUILD_TARGET\"]\n         env[\"RUSTC_BOOTSTRAP\"] = '1'\n         env[\"CARGO_TARGET_DIR\"] = build_dir\n         env[\"RUSTC\"] = self.rustc()"}, {"sha": "49b7ce3445ba827901fc2cebdca8326e59307ccf", "filename": "src/librustc/hir/map/mod.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fmod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -337,23 +337,28 @@ impl<'hir> Map<'hir> {\n     }\n \n     fn find_entry(&self, id: HirId) -> Option<Entry<'hir>> {\n-        Some(self.get_entry(id))\n-    }\n-\n-    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n         if id.local_id == ItemLocalId::from_u32(0) {\n             let owner = self.tcx.hir_owner(id.owner);\n-            Entry { parent: owner.parent, node: owner.node }\n+            owner.map(|owner| Entry { parent: owner.parent, node: owner.node })\n         } else {\n             let owner = self.tcx.hir_owner_nodes(id.owner);\n-            let node = owner.nodes[id.local_id].as_ref().unwrap();\n-            // FIXME(eddyb) use a single generic type insted of having both\n-            // `Entry` and `ParentedNode`, which are effectively the same.\n-            // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n-            Entry { parent: HirId { owner: id.owner, local_id: node.parent }, node: node.node }\n+            owner.and_then(|owner| {\n+                let node = owner.nodes[id.local_id].as_ref();\n+                // FIXME(eddyb) use a single generic type insted of having both\n+                // `Entry` and `ParentedNode`, which are effectively the same.\n+                // Alternatively, rewrite code using `Entry` to use `ParentedNode`.\n+                node.map(|node| Entry {\n+                    parent: HirId { owner: id.owner, local_id: node.parent },\n+                    node: node.node,\n+                })\n+            })\n         }\n     }\n \n+    fn get_entry(&self, id: HirId) -> Entry<'hir> {\n+        self.find_entry(id).unwrap()\n+    }\n+\n     pub fn item(&self, id: HirId) -> &'hir Item<'hir> {\n         match self.find(id).unwrap() {\n             Node::Item(item) => item,\n@@ -376,7 +381,7 @@ impl<'hir> Map<'hir> {\n     }\n \n     pub fn body(&self, id: BodyId) -> &'hir Body<'hir> {\n-        self.tcx.hir_owner_nodes(id.hir_id.owner).bodies.get(&id.hir_id.local_id).unwrap()\n+        self.tcx.hir_owner_nodes(id.hir_id.owner).unwrap().bodies.get(&id.hir_id.local_id).unwrap()\n     }\n \n     pub fn fn_decl_by_hir_id(&self, hir_id: HirId) -> Option<&'hir FnDecl<'hir>> {\n@@ -536,8 +541,9 @@ impl<'hir> Map<'hir> {\n \n     /// Retrieves the `Node` corresponding to `id`, returning `None` if cannot be found.\n     pub fn find(&self, hir_id: HirId) -> Option<Node<'hir>> {\n-        let node = self.get_entry(hir_id).node;\n-        if let Node::Crate(..) = node { None } else { Some(node) }\n+        self.find_entry(hir_id).and_then(|entry| {\n+            if let Node::Crate(..) = entry.node { None } else { Some(entry.node) }\n+        })\n     }\n \n     /// Similar to `get_parent`; returns the parent HIR Id, or just `hir_id` if there"}, {"sha": "ce8e1f48daa77dcf5c0e925b90e743c3a7dca14b", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 4, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -78,9 +78,8 @@ pub fn provide(providers: &mut Providers<'_>) {\n         let module = hir.as_local_hir_id(id.to_def_id()).unwrap();\n         &tcx.untracked_crate.modules[&module]\n     };\n-    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature.unwrap();\n-    providers.hir_owner_nodes = |tcx, id| {\n-        tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes).unwrap()\n-    };\n+    providers.hir_owner = |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].signature;\n+    providers.hir_owner_nodes =\n+        |tcx, id| tcx.index_hir(LOCAL_CRATE).map[id].with_bodies.as_ref().map(|nodes| &**nodes);\n     map::provide(providers);\n }"}, {"sha": "54f5103f736ec07875cb2174d5176415dbf0e1e8", "filename": "src/librustc/query/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fquery%2Fmod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -76,7 +76,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner(key: LocalDefId) -> &'tcx crate::hir::Owner<'tcx> {\n+        query hir_owner(key: LocalDefId) -> Option<&'tcx crate::hir::Owner<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner of `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }\n@@ -85,7 +85,7 @@ rustc_queries! {\n         //\n         // This can be conveniently accessed by methods on `tcx.hir()`.\n         // Avoid calling this query directly.\n-        query hir_owner_nodes(key: LocalDefId) -> &'tcx crate::hir::OwnerNodes<'tcx> {\n+        query hir_owner_nodes(key: LocalDefId) -> Option<&'tcx crate::hir::OwnerNodes<'tcx>> {\n             eval_always\n             desc { |tcx| \"HIR owner items in `{}`\", tcx.def_path_str(key.to_def_id()) }\n         }"}, {"sha": "46372701a92544eec022aed942edc5b584df7d54", "filename": "src/librustc/ty/instance.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fty%2Finstance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc%2Fty%2Finstance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Finstance.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -406,10 +406,6 @@ impl<'tcx> Instance<'tcx> {\n             | InstanceDef::VtableShim(..) => Some(self.substs),\n         }\n     }\n-\n-    pub fn is_vtable_shim(&self) -> bool {\n-        if let InstanceDef::VtableShim(..) = self.def { true } else { false }\n-    }\n }\n \n fn needs_fn_once_adapter_shim("}, {"sha": "b7b50617eaaf897839a0ec4950ec8d88576484c5", "filename": "src/librustc_ast/ast.rs", "status": "modified", "additions": 8, "deletions": 14, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_ast%2Fast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_ast%2Fast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fast.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -31,7 +31,6 @@ use crate::tokenstream::{DelimSpan, TokenStream, TokenTree};\n use rustc_data_structures::stable_hasher::{HashStable, StableHasher};\n use rustc_data_structures::sync::Lrc;\n use rustc_data_structures::thin_vec::ThinVec;\n-use rustc_index::vec::Idx;\n use rustc_macros::HashStable_Generic;\n use rustc_serialize::{self, Decoder, Encoder};\n use rustc_span::source_map::{respan, Spanned};\n@@ -2251,27 +2250,22 @@ pub enum AttrStyle {\n     Inner,\n }\n \n-#[derive(Clone, PartialEq, Eq, Hash, Debug, PartialOrd, Ord, Copy)]\n-pub struct AttrId(pub usize);\n-\n-impl Idx for AttrId {\n-    fn new(idx: usize) -> Self {\n-        AttrId(idx)\n-    }\n-    fn index(self) -> usize {\n-        self.0\n+rustc_index::newtype_index! {\n+    pub struct AttrId {\n+        ENCODABLE = custom\n+        DEBUG_FORMAT = \"AttrId({})\"\n     }\n }\n \n impl rustc_serialize::Encodable for AttrId {\n-    fn encode<S: Encoder>(&self, s: &mut S) -> Result<(), S::Error> {\n-        s.emit_unit()\n+    fn encode<S: Encoder>(&self, _: &mut S) -> Result<(), S::Error> {\n+        Ok(())\n     }\n }\n \n impl rustc_serialize::Decodable for AttrId {\n-    fn decode<D: Decoder>(d: &mut D) -> Result<AttrId, D::Error> {\n-        d.read_nil().map(|_| crate::attr::mk_attr_id())\n+    fn decode<D: Decoder>(_: &mut D) -> Result<AttrId, D::Error> {\n+        Ok(crate::attr::mk_attr_id())\n     }\n }\n "}, {"sha": "d53d77677859879c904a39e4b429ec6152e73524", "filename": "src/librustc_ast/attr/mod.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_ast%2Fattr%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_ast%2Fattr%2Fmod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -366,14 +366,14 @@ pub fn mk_nested_word_item(ident: Ident) -> NestedMetaItem {\n }\n \n crate fn mk_attr_id() -> AttrId {\n-    use std::sync::atomic::AtomicUsize;\n+    use std::sync::atomic::AtomicU32;\n     use std::sync::atomic::Ordering;\n \n-    static NEXT_ATTR_ID: AtomicUsize = AtomicUsize::new(0);\n+    static NEXT_ATTR_ID: AtomicU32 = AtomicU32::new(0);\n \n     let id = NEXT_ATTR_ID.fetch_add(1, Ordering::SeqCst);\n-    assert!(id != ::std::usize::MAX);\n-    AttrId(id)\n+    assert!(id != u32::MAX);\n+    AttrId::from_u32(id)\n }\n \n pub fn mk_attr(style: AttrStyle, path: Path, args: MacArgs, span: Span) -> Attribute {"}, {"sha": "245df0846b583cc8c77ad0140d6b09250a8bbcfb", "filename": "src/librustc_codegen_ssa/mir/rvalue.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_ssa%2Fmir%2Frvalue.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -293,7 +293,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n                                 if let Some(discr) =\n                                     operand.layout.ty.discriminant_for_variant(bx.tcx(), index)\n                                 {\n-                                    let discr_val = bx.cx().const_uint_big(ll_t_out, discr.val);\n+                                    let discr_layout = bx.cx().layout_of(discr.ty);\n+                                    let discr_t = bx.cx().immediate_backend_type(discr_layout);\n+                                    let discr_val = bx.cx().const_uint_big(discr_t, discr.val);\n+                                    let discr_val =\n+                                        bx.intcast(discr_val, ll_t_out, discr.ty.is_signed());\n+\n                                     return (\n                                         bx,\n                                         OperandRef {"}, {"sha": "33bfaddc39c9d21eddf958cf2202a92509a43d12", "filename": "src/librustc_error_codes/error_codes.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_error_codes%2Ferror_codes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_error_codes%2Ferror_codes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -118,6 +118,7 @@ E0220: include_str!(\"./error_codes/E0220.md\"),\n E0221: include_str!(\"./error_codes/E0221.md\"),\n E0222: include_str!(\"./error_codes/E0222.md\"),\n E0223: include_str!(\"./error_codes/E0223.md\"),\n+E0224: include_str!(\"./error_codes/E0224.md\"),\n E0225: include_str!(\"./error_codes/E0225.md\"),\n E0229: include_str!(\"./error_codes/E0229.md\"),\n E0230: include_str!(\"./error_codes/E0230.md\"),\n@@ -469,7 +470,6 @@ E0748: include_str!(\"./error_codes/E0748.md\"),\n //  E0217, // ambiguous associated type, defined in multiple supertraits\n //  E0218, // no associated type defined\n //  E0219, // associated type defined in higher-ranked supertrait\n-    E0224, // at least one non-builtin train is required for an object type\n     E0226, // only a single explicit lifetime bound is permitted\n     E0227, // ambiguous lifetime bound, explicit lifetime bound required\n     E0228, // explicit lifetime bound required"}, {"sha": "fd89c1d52560f79ed10b2a7dbc8b3ef8c2f9b20b", "filename": "src/librustc_error_codes/error_codes/E0224.md", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_error_codes%2Ferror_codes%2FE0224.md", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_error_codes%2Ferror_codes%2FE0224.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_error_codes%2Ferror_codes%2FE0224.md?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -0,0 +1,15 @@\n+A trait object was declaired with no traits.\n+\n+Erroneous code example:\n+\n+```compile_fail,E0224\n+type Foo = dyn 'static +;\n+```\n+\n+Rust does not currently support this.\n+\n+To solve ensure the the trait object has at least one trait:\n+\n+```\n+type Foo = dyn 'static + Copy;\n+```"}, {"sha": "5c70b28a56786bcc1bf65833ba47bd9f43d641e5", "filename": "src/librustc_mir/interpret/cast.rs", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_mir%2Finterpret%2Fcast.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fcast.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -3,6 +3,7 @@ use rustc::ty::layout::{self, Size, TyLayout};\n use rustc::ty::{self, Ty, TypeAndMut, TypeFoldable};\n use rustc_ast::ast::FloatTy;\n use rustc_span::symbol::sym;\n+use rustc_target::abi::LayoutOf;\n \n use rustc::mir::interpret::{InterpResult, PointerArithmetic, Scalar};\n use rustc::mir::CastKind;\n@@ -134,7 +135,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n             layout::Variants::Single { index } => {\n                 if let Some(discr) = src.layout.ty.discriminant_for_variant(*self.tcx, index) {\n                     assert!(src.layout.is_zst());\n-                    return Ok(Scalar::from_uint(discr.val, dest_layout.size).into());\n+                    let discr_layout = self.layout_of(discr.ty)?;\n+                    return Ok(self\n+                        .cast_from_int_like(discr.val, discr_layout, dest_layout)?\n+                        .into());\n                 }\n             }\n             layout::Variants::Multiple { .. } => {}\n@@ -171,10 +175,10 @@ impl<'mir, 'tcx, M: Machine<'mir, 'tcx>> InterpCx<'mir, 'tcx, M> {\n         // (b) cast from an integer-like (including bool, char, enums).\n         // In both cases we want the bits.\n         let bits = self.force_bits(src.to_scalar()?, src.layout.size)?;\n-        Ok(self.cast_from_int(bits, src.layout, dest_layout)?.into())\n+        Ok(self.cast_from_int_like(bits, src.layout, dest_layout)?.into())\n     }\n \n-    fn cast_from_int(\n+    fn cast_from_int_like(\n         &self,\n         v: u128, // raw bits\n         src_layout: TyLayout<'tcx>,"}, {"sha": "7b082309f34b549343cd01a36a19bc1926381720", "filename": "src/librustc_symbol_mangling/legacy.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_symbol_mangling%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Flegacy.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -59,10 +59,14 @@ pub(super) fn mangle(\n         .print_def_path(def_id, &[])\n         .unwrap();\n \n-    if instance.is_vtable_shim() {\n+    if let ty::InstanceDef::VtableShim(..) = instance.def {\n         let _ = printer.write_str(\"{{vtable-shim}}\");\n     }\n \n+    if let ty::InstanceDef::ReifyShim(..) = instance.def {\n+        let _ = printer.write_str(\"{{reify-shim}}\");\n+    }\n+\n     printer.path.finish(hash)\n }\n \n@@ -123,7 +127,8 @@ fn get_symbol_hash<'tcx>(\n         }\n \n         // We want to avoid accidental collision between different types of instances.\n-        // Especially, VtableShim may overlap with its original instance without this.\n+        // Especially, `VtableShim`s and `ReifyShim`s may overlap with their original\n+        // instances without this.\n         discriminant(&instance.def).hash_stable(&mut hcx, &mut hasher);\n     });\n "}, {"sha": "e22a49061bb19efb1dc556ef4e8baf89f5bf9306", "filename": "src/librustc_symbol_mangling/v0.rs", "status": "modified", "additions": 11, "deletions": 2, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_symbol_mangling%2Fv0.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibrustc_symbol_mangling%2Fv0.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_symbol_mangling%2Fv0.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -34,8 +34,17 @@ pub(super) fn mangle(\n         binders: vec![],\n         out: String::from(prefix),\n     };\n-    cx = if instance.is_vtable_shim() {\n-        cx.path_append_ns(|cx| cx.print_def_path(def_id, substs), 'S', 0, \"\").unwrap()\n+\n+    // Append `::{shim:...#0}` to shims that can coexist with a non-shim instance.\n+    let shim_kind = match instance.def {\n+        ty::InstanceDef::VtableShim(_) => Some(\"vtable\"),\n+        ty::InstanceDef::ReifyShim(_) => Some(\"reify\"),\n+\n+        _ => None,\n+    };\n+\n+    cx = if let Some(shim_kind) = shim_kind {\n+        cx.path_append_ns(|cx| cx.print_def_path(def_id, substs), 'S', 0, shim_kind).unwrap()\n     } else {\n         cx.print_def_path(def_id, substs).unwrap()\n     };"}, {"sha": "b394f2efc2e35cfa5ee1b309f035b3dec343368c", "filename": "src/libstd/error.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Ferror.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Ferror.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ferror.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -88,7 +88,7 @@ pub trait Error: Debug + Display {\n     /// fn main() {\n     ///     match get_super_error() {\n     ///         Err(e) => {\n-    ///             println!(\"Error: {}\", e.description());\n+    ///             println!(\"Error: {}\", e);\n     ///             println!(\"Caused by: {}\", e.source().unwrap());\n     ///         }\n     ///         _ => println!(\"No error\"),"}, {"sha": "83c492fecf9745d0c936d339b73b3b93ee3df62c", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -502,7 +502,7 @@ pub trait Read {\n     /// how many bytes were read.\n     ///\n     /// This function does not provide any guarantees about whether it blocks\n-    /// waiting for data, but if an object needs to block for a read but cannot\n+    /// waiting for data, but if an object needs to block for a read and cannot,\n     /// it will typically signal this via an [`Err`] return value.\n     ///\n     /// If the return value of this method is [`Ok(n)`], then it must be"}, {"sha": "de6360cf020f5740cd3a31a5ff80a5d6748be1da", "filename": "src/libstd/net/addr.rs", "status": "modified", "additions": 19, "deletions": 4, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Fnet%2Faddr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Flibstd%2Fnet%2Faddr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Faddr.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -989,11 +989,26 @@ mod tests {\n         // s has been moved into the tsa call\n     }\n \n-    // FIXME: figure out why this fails on openbsd and fix it\n     #[test]\n-    #[cfg(not(any(windows, target_os = \"openbsd\")))]\n-    fn to_socket_addr_str_bad() {\n-        assert!(tsa(\"1200::AB00:1234::2552:7777:1313:34300\").is_err());\n+    fn bind_udp_socket_bad() {\n+        // rust-lang/rust#53957: This is a regression test for a parsing problem\n+        // discovered as part of issue rust-lang/rust#23076, where we were\n+        // incorrectly parsing invalid input and then that would result in a\n+        // successful `UdpSocket` binding when we would expect failure.\n+        //\n+        // At one time, this test was written as a call to `tsa` with\n+        // INPUT_23076. However, that structure yields an unreliable test,\n+        // because it ends up passing junk input to the DNS server, and some DNS\n+        // servers will respond with `Ok` to such input, with the ip address of\n+        // the DNS server itself.\n+        //\n+        // This form of the test is more robust: even when the DNS server\n+        // returns its own address, it is still an error to bind a UDP socket to\n+        // a non-local address, and so we still get an error here in that case.\n+\n+        const INPUT_23076: &'static str = \"1200::AB00:1234::2552:7777:1313:34300\";\n+\n+        assert!(crate::net::UdpSocket::bind(INPUT_23076).is_err())\n     }\n \n     #[test]"}, {"sha": "a77258120111e70d668e6e87694f83a1a0dbfe88", "filename": "src/test/ui/consts/cast-discriminant-zst-enum.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fcast-discriminant-zst-enum.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -0,0 +1,47 @@\n+// run-pass\n+// Test a ZST enum whose dicriminant is ~0i128. This caused an ICE when casting to a i32.\n+\n+#[derive(Copy, Clone)]\n+enum Nums {\n+    NegOne = -1,\n+}\n+\n+const NEG_ONE_I8: i8 = Nums::NegOne as i8;\n+const NEG_ONE_I16: i16 = Nums::NegOne as i16;\n+const NEG_ONE_I32: i32 = Nums::NegOne as i32;\n+const NEG_ONE_I64: i64 = Nums::NegOne as i64;\n+const NEG_ONE_I128: i128 = Nums::NegOne as i128;\n+\n+#[inline(never)]\n+fn identity<T>(t: T) -> T { t }\n+\n+fn test_as_arg(n: Nums) {\n+    assert_eq!(-1i8, n as i8);\n+    assert_eq!(-1i16, n as i16);\n+    assert_eq!(-1i32, n as i32);\n+    assert_eq!(-1i64, n as i64);\n+    assert_eq!(-1i128, n as i128);\n+}\n+\n+fn main() {\n+    let kind = Nums::NegOne;\n+    assert_eq!(-1i8, kind as i8);\n+    assert_eq!(-1i16, kind as i16);\n+    assert_eq!(-1i32, kind as i32);\n+    assert_eq!(-1i64, kind as i64);\n+    assert_eq!(-1i128, kind as i128);\n+\n+    assert_eq!(-1i8, identity(kind) as i8);\n+    assert_eq!(-1i16, identity(kind) as i16);\n+    assert_eq!(-1i32, identity(kind) as i32);\n+    assert_eq!(-1i64, identity(kind) as i64);\n+    assert_eq!(-1i128, identity(kind) as i128);\n+\n+    test_as_arg(Nums::NegOne);\n+\n+    assert_eq!(-1i8, NEG_ONE_I8);\n+    assert_eq!(-1i16, NEG_ONE_I16);\n+    assert_eq!(-1i32, NEG_ONE_I32);\n+    assert_eq!(-1i64, NEG_ONE_I64);\n+    assert_eq!(-1i128, NEG_ONE_I128);\n+}"}, {"sha": "22e42295eedf302a992441e24eb303f17c838c92", "filename": "src/test/ui/issues/issue-70041.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70041.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -0,0 +1,13 @@\n+// compile-flags: --edition=2018\n+// run-pass\n+\n+macro_rules! regex {\n+    //~^ WARN unused macro definition\n+    () => {};\n+}\n+\n+#[allow(dead_code)]\n+use regex;\n+//~^ WARN unused import\n+\n+fn main() {}"}, {"sha": "b180175c5ab76a7a5750ea1cd0b94942d33bfff6", "filename": "src/test/ui/issues/issue-70041.stderr", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-70041.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -0,0 +1,19 @@\n+warning: unused macro definition\n+  --> $DIR/issue-70041.rs:4:1\n+   |\n+LL | / macro_rules! regex {\n+LL | |\n+LL | |     () => {};\n+LL | | }\n+   | |_^\n+   |\n+   = note: `#[warn(unused_macros)]` on by default\n+\n+warning: unused import: `regex`\n+  --> $DIR/issue-70041.rs:10:5\n+   |\n+LL | use regex;\n+   |     ^^^^^\n+   |\n+   = note: `#[warn(unused_imports)]` on by default\n+"}, {"sha": "967eee06e282f94078d7fac788d82f6f589ba79e", "filename": "src/test/ui/parser/issue-68890-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fissue-68890-2.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -20,3 +20,4 @@ LL | type X<'a> = (?'a) +;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "a6fa9f8dddc275df9a43de66e878d9b90630f037", "filename": "src/test/ui/parser/macro/trait-object-macro-matcher.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fparser%2Fmacro%2Ftrait-object-macro-matcher.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -20,3 +20,4 @@ LL |     m!('static);\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "658ed6c18e05acace9a36c4beaffa5264ba1996f", "filename": "src/test/ui/proc-macro/out-of-line-mod.rs", "status": "added", "additions": 13, "deletions": 0, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fproc-macro%2Fout-of-line-mod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Fproc-macro%2Fout-of-line-mod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fproc-macro%2Fout-of-line-mod.rs?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -0,0 +1,13 @@\n+// Out-of-line module is found on the filesystem if passed through a proc macro (issue #58818).\n+\n+// check-pass\n+// aux-build:test-macros.rs\n+\n+#[macro_use]\n+extern crate test_macros;\n+\n+mod outer {\n+    identity! { mod inner; }\n+}\n+\n+fn main() {}"}, {"sha": "594115d980c8b54a2d66ffe4e2e96e7aa2141b16", "filename": "src/test/ui/traits/trait-alias/trait-alias-only-maybe-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-alias%2Ftrait-alias-only-maybe-bound.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -12,3 +12,4 @@ LL | type _T1 = dyn _2;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "cb48bd1258ea2f4ebb5fbb7b014d9f63ea0c747f", "filename": "src/test/ui/traits/trait-object-macro-matcher.stderr", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-macro-matcher.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -14,4 +14,5 @@ LL |     m!(dyn Copy + Send + 'static);\n \n error: aborting due to 2 previous errors\n \n-For more information about this error, try `rustc --explain E0038`.\n+Some errors have detailed explanations: E0038, E0224.\n+For more information about an error, try `rustc --explain E0038`."}, {"sha": "28b8e11f1330c89dff348b69a8f11e56afeeb033", "filename": "src/test/ui/traits/trait-object-vs-lifetime-2.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime-2.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -6,3 +6,4 @@ LL |     dyn 'static +: 'static + Copy,\n \n error: aborting due to previous error\n \n+For more information about this error, try `rustc --explain E0224`."}, {"sha": "ff3fc2a197c66bbe4bede56bbc8095bd37c20efe", "filename": "src/test/ui/traits/trait-object-vs-lifetime.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Ftrait-object-vs-lifetime.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -32,5 +32,5 @@ LL |     let _: S<dyn 'static +, 'static>;\n \n error: aborting due to 5 previous errors\n \n-Some errors have detailed explanations: E0107, E0747.\n+Some errors have detailed explanations: E0107, E0224, E0747.\n For more information about an error, try `rustc --explain E0107`."}, {"sha": "482410886329e1989fe4dbd09eeabbfcc1f07f83", "filename": "src/test/ui/traits/wf-trait-object-only-maybe-bound.stderr", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c6b172f7885cb83842fa15e4b0e2ff1647aebb40/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftraits%2Fwf-trait-object-only-maybe-bound.stderr?ref=c6b172f7885cb83842fa15e4b0e2ff1647aebb40", "patch": "@@ -12,3 +12,4 @@ LL | type _0 = dyn ?Sized;\n \n error: aborting due to 2 previous errors\n \n+For more information about this error, try `rustc --explain E0224`."}]}