{"sha": "5671647902e5dc34e2620f7d4b0b1c7b717f514a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjU2NzE2NDc5MDJlNWRjMzRlMjYyMGY3ZDRiMGIxYzdiNzE3ZjUxNGE=", "commit": {"author": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-25T17:04:23Z"}, "committer": {"name": "Scott McMurray", "email": "scottmcm@users.noreply.github.com", "date": "2021-04-25T17:04:23Z"}, "message": "Documentation improvements (hopefully)", "tree": {"sha": "2c1783495d9770784a1103bec8c67cdee252e9d0", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c1783495d9770784a1103bec8c67cdee252e9d0"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5671647902e5dc34e2620f7d4b0b1c7b717f514a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5671647902e5dc34e2620f7d4b0b1c7b717f514a", "html_url": "https://github.com/rust-lang/rust/commit/5671647902e5dc34e2620f7d4b0b1c7b717f514a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5671647902e5dc34e2620f7d4b0b1c7b717f514a/comments", "author": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "committer": {"login": "scottmcm", "id": 18526288, "node_id": "MDQ6VXNlcjE4NTI2Mjg4", "avatar_url": "https://avatars.githubusercontent.com/u/18526288?v=4", "gravatar_id": "", "url": "https://api.github.com/users/scottmcm", "html_url": "https://github.com/scottmcm", "followers_url": "https://api.github.com/users/scottmcm/followers", "following_url": "https://api.github.com/users/scottmcm/following{/other_user}", "gists_url": "https://api.github.com/users/scottmcm/gists{/gist_id}", "starred_url": "https://api.github.com/users/scottmcm/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/scottmcm/subscriptions", "organizations_url": "https://api.github.com/users/scottmcm/orgs", "repos_url": "https://api.github.com/users/scottmcm/repos", "events_url": "https://api.github.com/users/scottmcm/events{/privacy}", "received_events_url": "https://api.github.com/users/scottmcm/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1864970430d967699142b3e610f818d2f03b496e", "url": "https://api.github.com/repos/rust-lang/rust/commits/1864970430d967699142b3e610f818d2f03b496e", "html_url": "https://github.com/rust-lang/rust/commit/1864970430d967699142b3e610f818d2f03b496e"}], "stats": {"total": 46, "additions": 32, "deletions": 14}, "files": [{"sha": "0c819b000aaab7e590643384b862277b3cb23824", "filename": "library/core/src/ops/try_trait.rs", "status": "modified", "additions": 32, "deletions": 14, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/5671647902e5dc34e2620f7d4b0b1c7b717f514a/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5671647902e5dc34e2620f7d4b0b1c7b717f514a/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fops%2Ftry_trait.rs?ref=5671647902e5dc34e2620f7d4b0b1c7b717f514a", "patch": "@@ -1,7 +1,17 @@\n use crate::ops::ControlFlow;\n \n-/// The trait used for a variety of operations related to short-circuits,\n-/// such as the `?` operator, `try {}` blocks, and `try_*` methods.\n+/// The `?` operator and `try {}` blocks.\n+///\n+/// `try_*` methods typically involve a type implementing this trait.  For\n+/// example, the closures passed to [`Iterator::try_fold`] and\n+/// [`Iterator::try_for_each`] must return such a type.\n+///\n+/// `Try` types are typically those containing two or more categories of values,\n+/// some subset of which are so commonly handled via early returns that it's\n+/// worth providing a terse (but still visible) syntax to make that easy.\n+///\n+/// This is most often seen for error handling with [`Result`] and [`Option`].\n+/// The quintessential implementation of this trait is on [`ControlFlow`].\n ///\n /// # Using `Try` in Generic Code\n ///\n@@ -42,8 +52,8 @@ use crate::ops::ControlFlow;\n /// }\n /// ```\n ///\n-/// `Try` is also the trait we need to get the updated accumulator from `f`'s return\n-/// value and return the result if we manage to get through the entire iterator:\n+/// If we get through the entire iterator, we need to wrap up the accumulator\n+/// into the return type using [`Try::from_output`]:\n /// ```\n /// # #![feature(try_trait_v2)]\n /// # #![feature(try_trait_transition)]\n@@ -65,9 +75,9 @@ use crate::ops::ControlFlow;\n /// }\n /// ```\n ///\n-/// We'll also need `FromResidual::from_residual` to turn the residual back into\n-/// the original type.  But because it's a supertrait of `Try`, we don't need to\n-/// mention it in the bounds.  All types which implement `Try` can always be\n+/// We'll also need [`FromResidual::from_residual`] to turn the residual back\n+/// into the original type.  But because it's a supertrait of `Try`, we don't\n+/// need to mention it in the bounds.  All types which implement `Try` can be\n /// recreated from their corresponding residual, so we'll just call it:\n /// ```\n /// # #![feature(try_trait_v2)]\n@@ -131,14 +141,18 @@ pub trait Try: FromResidual {\n     /// That way it's distinct from `ControlFlow<E>::Residual`, for example,\n     /// and thus `?` on `ControlFlow` cannot be used in a method returning `Result`.\n     ///\n-    /// In a type that's generic on a parameter that's used as the `Output` type,\n-    /// call it `Foo<T> : Try` where `Foo<T>::Output == T`, it's typically easiest\n-    /// to make the corresponding `Residual` type by filling in that generic\n-    /// with an uninhabited type: `type Residual = Foo<Infallible>;`.\n+    /// If you're making a generic type `Foo<T>` that implements `Try<Output = T>`,\n+    /// then typically you can use `Foo<std::convert::Infallible>` as its `Residual`\n+    /// type: that type will have a \"hole\" in the correct place, and will maintain the\n+    /// \"foo-ness\" of the residual so other types need to opt-in to interconversion.\n     #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n     type Residual;\n \n-    /// Wraps up a value such that `?` on the value will produce the original value.\n+    /// Constructs the type from its `Output` type.\n+    ///\n+    /// This should be implemented consistently with the `branch` method\n+    /// such that applying the `?` operator will get back the original value:\n+    /// `Try::from_output(x).branch() --> ControlFlow::Continue(x)`.\n     ///\n     /// # Examples\n     ///\n@@ -203,8 +217,12 @@ pub trait Try: FromResidual {\n /// to support interconversion with other `Try` types.\n #[unstable(feature = \"try_trait_v2\", issue = \"84277\")]\n pub trait FromResidual<R = <Self as Try>::Residual> {\n-    /// Produces the return value of the function from the residual\n-    /// when the `?` operator results in an early exit.\n+    /// Constructs the type from a compatible `Residual` type.\n+    ///\n+    /// This should be implemented consistently with the `branch` method such\n+    /// that applying the `?` operator will get back an equivalent residual:\n+    /// `FromResidual::from_residual(r).branch() --> ControlFlow::Break(r)`.\n+    /// (It may not be an *identical* residual when interconversion is involved.)\n     ///\n     /// # Examples\n     ///"}]}