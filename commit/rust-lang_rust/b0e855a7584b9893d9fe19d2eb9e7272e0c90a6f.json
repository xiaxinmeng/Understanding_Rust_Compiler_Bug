{"sha": "b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmIwZTg1NWE3NTg0Yjk4OTNkOWZlMTlkMmViOWU3MjcyZTBjOTBhNmY=", "commit": {"author": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-03-09T21:57:22Z"}, "committer": {"name": "Piotr Czarnecki", "email": "pioczarn@gmail.com", "date": "2014-03-10T12:55:02Z"}, "message": "libstd: Update docs for `slice_shift_char` and {shift,pop}_{char,byte}", "tree": {"sha": "9d568bb68964d3dca9d9b51227038c754ff0b898", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9d568bb68964d3dca9d9b51227038c754ff0b898"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f", "comment_count": 21, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f", "html_url": "https://github.com/rust-lang/rust/commit/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f/comments", "author": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "committer": {"login": "pczarn", "id": 3356767, "node_id": "MDQ6VXNlcjMzNTY3Njc=", "avatar_url": "https://avatars.githubusercontent.com/u/3356767?v=4", "gravatar_id": "", "url": "https://api.github.com/users/pczarn", "html_url": "https://github.com/pczarn", "followers_url": "https://api.github.com/users/pczarn/followers", "following_url": "https://api.github.com/users/pczarn/following{/other_user}", "gists_url": "https://api.github.com/users/pczarn/gists{/gist_id}", "starred_url": "https://api.github.com/users/pczarn/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/pczarn/subscriptions", "organizations_url": "https://api.github.com/users/pczarn/orgs", "repos_url": "https://api.github.com/users/pczarn/repos", "events_url": "https://api.github.com/users/pczarn/events{/privacy}", "received_events_url": "https://api.github.com/users/pczarn/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "262d1543db6eba077e9f31a4e734c337746e7ea8", "url": "https://api.github.com/repos/rust-lang/rust/commits/262d1543db6eba077e9f31a4e734c337746e7ea8", "html_url": "https://github.com/rust-lang/rust/commit/262d1543db6eba077e9f31a4e734c337746e7ea8"}], "stats": {"total": 27, "additions": 10, "deletions": 17}, "files": [{"sha": "5bd14e717b1b91b11eb246a31b07b47af2b41b24", "filename": "src/libstd/str.rs", "status": "modified", "additions": 10, "deletions": 17, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=b0e855a7584b9893d9fe19d2eb9e7272e0c90a6f", "patch": "@@ -1465,6 +1465,7 @@ pub mod raw {\n     }\n \n     /// Removes the last byte from a string and returns it.\n+    /// Returns None when an empty string is passed.\n     /// The caller must preserve the valid UTF-8 property.\n     pub unsafe fn pop_byte(s: &mut ~str) -> Option<u8> {\n         let len = s.len();\n@@ -1478,6 +1479,7 @@ pub mod raw {\n     }\n \n     /// Removes the first byte from a string and returns it.\n+    /// Returns None when an empty string is passed.\n     /// The caller must preserve the valid UTF-8 property.\n     pub unsafe fn shift_byte(s: &mut ~str) -> Option<u8> {\n         let len = s.len();\n@@ -2280,22 +2282,19 @@ pub trait StrSlice<'a> {\n     /// Retrieves the first character from a string slice and returns\n     /// it. This does not allocate a new string; instead, it returns a\n     /// slice that point one character beyond the character that was\n-    /// shifted.\n-    ///\n-    /// # Failure\n-    ///\n-    /// If the string does not contain any characters.\n+    /// shifted. If the string does not contain any characters,\n+    /// a tuple of None and an empty string is returned instead.\n     ///\n     /// # Example\n     ///\n     /// ```rust\n     /// let s = \"L\u00f6we \u8001\u864e L\u00e9opard\";\n     /// let (c, s1) = s.slice_shift_char();\n-    /// assert_eq!(c, 'L');\n+    /// assert_eq!(c, Some('L'));\n     /// assert_eq!(s1, \"\u00f6we \u8001\u864e L\u00e9opard\");\n     ///\n     /// let (c, s2) = s1.slice_shift_char();\n-    /// assert_eq!(c, '\u00f6');\n+    /// assert_eq!(c, Some('\u00f6'));\n     /// assert_eq!(s2, \"we \u8001\u864e L\u00e9opard\");\n     /// ```\n     fn slice_shift_char(&self) -> (Option<char>, &'a str);\n@@ -2821,18 +2820,12 @@ pub trait OwnedStr {\n     /// Appends a character to the back of a string\n     fn push_char(&mut self, c: char);\n \n-    /// Remove the final character from a string and return it\n-    ///\n-    /// # Failure\n-    ///\n-    /// If the string does not contain any characters\n+    /// Remove the final character from a string and return it. Return None\n+    /// when the string is empty.\n     fn pop_char(&mut self) -> Option<char>;\n \n-    /// Remove the first character from a string and return it\n-    ///\n-    /// # Failure\n-    ///\n-    /// If the string does not contain any characters\n+    /// Remove the first character from a string and return it. Return None\n+    /// when the string is empty.\n     fn shift_char(&mut self) -> Option<char>;\n \n     /// Prepend a char to a string"}]}