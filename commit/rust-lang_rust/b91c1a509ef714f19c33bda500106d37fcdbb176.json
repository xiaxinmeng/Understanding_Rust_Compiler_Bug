{"sha": "b91c1a509ef714f19c33bda500106d37fcdbb176", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5MWMxYTUwOWVmNzE0ZjE5YzMzYmRhNTAwMTA2ZDM3ZmNkYmIxNzY=", "commit": {"author": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-06T08:18:36Z"}, "committer": {"name": "Georg Brandl", "email": "georg@python.org", "date": "2016-08-07T06:09:26Z"}, "message": "Make lint descriptions short and to the point; always fitting the column \"triggers on\".", "tree": {"sha": "5cf0b950cea640f10471c4689cb0309c32ac93ee", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5cf0b950cea640f10471c4689cb0309c32ac93ee"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b91c1a509ef714f19c33bda500106d37fcdbb176", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b91c1a509ef714f19c33bda500106d37fcdbb176", "html_url": "https://github.com/rust-lang/rust/commit/b91c1a509ef714f19c33bda500106d37fcdbb176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b91c1a509ef714f19c33bda500106d37fcdbb176/comments", "author": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "committer": {"login": "birkenfeld", "id": 144359, "node_id": "MDQ6VXNlcjE0NDM1OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/144359?v=4", "gravatar_id": "", "url": "https://api.github.com/users/birkenfeld", "html_url": "https://github.com/birkenfeld", "followers_url": "https://api.github.com/users/birkenfeld/followers", "following_url": "https://api.github.com/users/birkenfeld/following{/other_user}", "gists_url": "https://api.github.com/users/birkenfeld/gists{/gist_id}", "starred_url": "https://api.github.com/users/birkenfeld/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/birkenfeld/subscriptions", "organizations_url": "https://api.github.com/users/birkenfeld/orgs", "repos_url": "https://api.github.com/users/birkenfeld/repos", "events_url": "https://api.github.com/users/birkenfeld/events{/privacy}", "received_events_url": "https://api.github.com/users/birkenfeld/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3b5ff0f813f8846677905fcf355221d4862d24db", "url": "https://api.github.com/repos/rust-lang/rust/commits/3b5ff0f813f8846677905fcf355221d4862d24db", "html_url": "https://github.com/rust-lang/rust/commit/3b5ff0f813f8846677905fcf355221d4862d24db"}], "stats": {"total": 583, "additions": 340, "deletions": 243}, "files": [{"sha": "b5e69b918b364ff79884e3506b3fe04b010e3188", "filename": "README.md", "status": "modified", "additions": 70, "deletions": 70, "changes": 140, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -19,86 +19,86 @@ Table of contents:\n \n There are 162 lints included in this crate:\n \n-name                                                                                                                 | default | meaning\n----------------------------------------------------------------------------------------------------------------------|---------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n-[absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)             | warn    | a comparison involving a maximum or minimum value involves a case that is always true or always false\n+name                                                                                                                 | default | triggers on\n+---------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n+[absurd_extreme_comparisons](https://github.com/Manishearth/rust-clippy/wiki#absurd_extreme_comparisons)             | warn    | a comparison with a maximum or minimum value that is always true or false\n [almost_swapped](https://github.com/Manishearth/rust-clippy/wiki#almost_swapped)                                     | warn    | `foo = bar; bar = foo` sequence\n-[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                   | warn    | the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) is found; suggests to use the constant\n+[approx_constant](https://github.com/Manishearth/rust-clippy/wiki#approx_constant)                                   | warn    | the approximate of a known float constant (in `std::fXX::consts`)\n [assign_op_pattern](https://github.com/Manishearth/rust-clippy/wiki#assign_op_pattern)                               | warn    | assigning the result of an operation on a variable to that same variable\n-[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                             | allow   | any assignment operation\n-[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false` (because in the example `select` containing bits that `mask` doesn't have)\n+[assign_ops](https://github.com/Manishearth/rust-clippy/wiki#assign_ops)                                             | allow   | any compound assignment operation\n+[bad_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#bad_bit_mask)                                         | warn    | expressions of the form `_ & mask == select` that will only ever return `true` or `false`\n [blacklisted_name](https://github.com/Manishearth/rust-clippy/wiki#blacklisted_name)                                 | warn    | usage of a blacklisted/placeholder name\n-[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)             | warn    | braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\n-[block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)             | warn    | avoid complex blocks in conditions, instead move the block higher and bind it with 'let'; e.g: `if { let x = true; x } ...`\n+[block_in_if_condition_expr](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_expr)             | warn    | braces that can be eliminated in conditions, e.g `if { true } ...`\n+[block_in_if_condition_stmt](https://github.com/Manishearth/rust-clippy/wiki#block_in_if_condition_stmt)             | warn    | complex blocks in conditions, e.g. `if { let x = true; x } ...`\n [bool_comparison](https://github.com/Manishearth/rust-clippy/wiki#bool_comparison)                                   | warn    | comparing a variable to a boolean, e.g. `if x == true`\n [box_vec](https://github.com/Manishearth/rust-clippy/wiki#box_vec)                                                   | warn    | usage of `Box<Vec<T>>`, vector elements are already on the heap\n [boxed_local](https://github.com/Manishearth/rust-clippy/wiki#boxed_local)                                           | warn    | using `Box<T>` where unnecessary\n [cast_possible_truncation](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_truncation)                 | allow   | casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\n [cast_possible_wrap](https://github.com/Manishearth/rust-clippy/wiki#cast_possible_wrap)                             | allow   | casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\n [cast_precision_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_precision_loss)                           | allow   | casts that cause loss of precision, e.g `x as f32` where `x: u64`\n [cast_sign_loss](https://github.com/Manishearth/rust-clippy/wiki#cast_sign_loss)                                     | allow   | casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\n-[char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                     | warn    | Casting a character literal to u8\n+[char_lit_as_u8](https://github.com/Manishearth/rust-clippy/wiki#char_lit_as_u8)                                     | warn    | casting a character literal to u8\n [chars_next_cmp](https://github.com/Manishearth/rust-clippy/wiki#chars_next_cmp)                                     | warn    | using `.chars().next()` to check if a string starts with a char\n [clone_double_ref](https://github.com/Manishearth/rust-clippy/wiki#clone_double_ref)                                 | warn    | using `clone` on `&&T`\n [clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#clone_on_copy)                                       | warn    | using `clone` on a `Copy` type\n-[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                   | deny    | comparisons to NAN (which will always return false, which is probably not intended)\n+[cmp_nan](https://github.com/Manishearth/rust-clippy/wiki#cmp_nan)                                                   | deny    | comparisons to NAN, which will always return false, probably not intended\n [cmp_owned](https://github.com/Manishearth/rust-clippy/wiki#cmp_owned)                                               | warn    | creating owned instances for comparing with others, e.g. `x == \"foo\".to_string()`\n [collapsible_if](https://github.com/Manishearth/rust-clippy/wiki#collapsible_if)                                     | warn    | `if`s that can be collapsed (e.g. `if x { if y { ... } }` and `else { if x { ... } }`)\n [crosspointer_transmute](https://github.com/Manishearth/rust-clippy/wiki#crosspointer_transmute)                     | warn    | transmutes that have to or from types that are a pointer to the other\n-[cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | finds functions that should be split up into multiple functions\n-[deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | `Warn` on `#[deprecated(since = \"x\")]` where x is not semver\n+[cyclomatic_complexity](https://github.com/Manishearth/rust-clippy/wiki#cyclomatic_complexity)                       | warn    | functions that should be split up into multiple functions\n+[deprecated_semver](https://github.com/Manishearth/rust-clippy/wiki#deprecated_semver)                               | warn    | use of `#[deprecated(since = \"x\")]` where x is not semver\n [derive_hash_xor_eq](https://github.com/Manishearth/rust-clippy/wiki#derive_hash_xor_eq)                             | warn    | deriving `Hash` but implementing `PartialEq` explicitly\n-[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | checks for the presence of `_`, `::` or camel-case outside ticks in documentation\n-[double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                             | warn    | `--x` is a double negation of `x` and not a pre-decrement as in C or C++\n-[drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | call to `std::mem::drop` with a reference instead of an owned value, which will not call the `Drop::drop` method on the underlying value\n-[duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | Function arguments having names which only differ by an underscore\n-[empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}` detected\n-[enum_clike_unportable_variant](https://github.com/Manishearth/rust-clippy/wiki#enum_clike_unportable_variant)       | warn    | finds C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n-[enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                       | allow   | finds use items that import all variants of an enum\n-[enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                             | warn    | finds enums where all variants share a prefix/postfix\n+[doc_markdown](https://github.com/Manishearth/rust-clippy/wiki#doc_markdown)                                         | warn    | presence of `_`, `::` or camel-case outside backticks in documentation\n+[double_neg](https://github.com/Manishearth/rust-clippy/wiki#double_neg)                                             | warn    | `--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\n+[drop_ref](https://github.com/Manishearth/rust-clippy/wiki#drop_ref)                                                 | warn    | calls to `std::mem::drop` with a reference instead of an owned value\n+[duplicate_underscore_argument](https://github.com/Manishearth/rust-clippy/wiki#duplicate_underscore_argument)       | warn    | function arguments having names which only differ by an underscore\n+[empty_loop](https://github.com/Manishearth/rust-clippy/wiki#empty_loop)                                             | warn    | empty `loop {}`, which should block or sleep\n+[enum_clike_unportable_variant](https://github.com/Manishearth/rust-clippy/wiki#enum_clike_unportable_variant)       | warn    | C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\n+[enum_glob_use](https://github.com/Manishearth/rust-clippy/wiki#enum_glob_use)                                       | allow   | use items that import all variants of an enum\n+[enum_variant_names](https://github.com/Manishearth/rust-clippy/wiki#enum_variant_names)                             | warn    | enums where all variants share a prefix/postfix\n [eq_op](https://github.com/Manishearth/rust-clippy/wiki#eq_op)                                                       | warn    | equal operands on both sides of a comparison or bitwise combination (e.g. `x == x`)\n [expl_impl_clone_on_copy](https://github.com/Manishearth/rust-clippy/wiki#expl_impl_clone_on_copy)                   | warn    | implementing `Clone` explicitly on `Copy` types\n [explicit_counter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_counter_loop)                       | warn    | for-looping with an explicit counter when `_.enumerate()` would do\n [explicit_iter_loop](https://github.com/Manishearth/rust-clippy/wiki#explicit_iter_loop)                             | warn    | for-looping over `_.iter()` or `_.iter_mut()` when `&_` or `&mut _` would do\n [extend_from_slice](https://github.com/Manishearth/rust-clippy/wiki#extend_from_slice)                               | warn    | `.extend_from_slice(_)` is a faster way to extend a Vec by a slice\n [filter_map](https://github.com/Manishearth/rust-clippy/wiki#filter_map)                                             | allow   | using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\n [filter_next](https://github.com/Manishearth/rust-clippy/wiki#filter_next)                                           | warn    | using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\n-[float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                 | allow   | Any floating-point arithmetic statement\n-[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                               | warn    | using `==` or `!=` on float values (as floating-point operations usually involve rounding errors, it is always better to check for approximate equality within small bounds)\n+[float_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#float_arithmetic)                                 | allow   | any floating-point arithmetic statement\n+[float_cmp](https://github.com/Manishearth/rust-clippy/wiki#float_cmp)                                               | warn    | using `==` or `!=` on float values instead of comparing difference with an epsilon\n [for_kv_map](https://github.com/Manishearth/rust-clippy/wiki#for_kv_map)                                             | warn    | looping on a map using `iter` when `keys` or `values` would do\n [for_loop_over_option](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_option)                         | warn    | for-looping over an `Option`, which is more clearly expressed as an `if let`\n [for_loop_over_result](https://github.com/Manishearth/rust-clippy/wiki#for_loop_over_result)                         | warn    | for-looping over a `Result`, which is more clearly expressed as an `if let`\n [identity_op](https://github.com/Manishearth/rust-clippy/wiki#identity_op)                                           | warn    | using identity operations, e.g. `x + 0` or `y / 1`\n-[if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                           | allow   | finds if branches that could be swapped so no negation operation is necessary on the condition\n+[if_not_else](https://github.com/Manishearth/rust-clippy/wiki#if_not_else)                                           | allow   | `if` branches that could be swapped so no negation operation is necessary on the condition\n [if_same_then_else](https://github.com/Manishearth/rust-clippy/wiki#if_same_then_else)                               | warn    | if with the same *then* and *else* blocks\n [ifs_same_cond](https://github.com/Manishearth/rust-clippy/wiki#ifs_same_cond)                                       | warn    | consecutive `ifs` with the same condition\n [indexing_slicing](https://github.com/Manishearth/rust-clippy/wiki#indexing_slicing)                                 | allow   | indexing/slicing usage\n [ineffective_bit_mask](https://github.com/Manishearth/rust-clippy/wiki#ineffective_bit_mask)                         | warn    | expressions where a bit mask will be rendered useless by a comparison, e.g. `(x | 1) > 2`\n-[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                       | warn    | `#[inline(always)]` is a bad idea in most cases\n-[integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                             | allow   | Any integer arithmetic statement\n-[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                       | deny    | finds invalid regular expressions\n+[inline_always](https://github.com/Manishearth/rust-clippy/wiki#inline_always)                                       | warn    | use of `#[inline(always)]`\n+[integer_arithmetic](https://github.com/Manishearth/rust-clippy/wiki#integer_arithmetic)                             | allow   | any integer arithmetic statement\n+[invalid_regex](https://github.com/Manishearth/rust-clippy/wiki#invalid_regex)                                       | deny    | invalid regular expressions\n [invalid_upcast_comparisons](https://github.com/Manishearth/rust-clippy/wiki#invalid_upcast_comparisons)             | allow   | a comparison involving an upcast which is always true or false\n-[items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | finds blocks where an item comes after a statement\n+[items_after_statements](https://github.com/Manishearth/rust-clippy/wiki#items_after_statements)                     | allow   | blocks where an item comes after a statement\n [iter_next_loop](https://github.com/Manishearth/rust-clippy/wiki#iter_next_loop)                                     | warn    | for-looping over `_.next()` which is probably not intended\n [iter_nth](https://github.com/Manishearth/rust-clippy/wiki#iter_nth)                                                 | warn    | using `.iter().nth()` on a standard library type with O(1) element access\n [len_without_is_empty](https://github.com/Manishearth/rust-clippy/wiki#len_without_is_empty)                         | warn    | traits and impls that have `.len()` but not `.is_empty()`\n [len_zero](https://github.com/Manishearth/rust-clippy/wiki#len_zero)                                                 | warn    | checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` could be used instead\n [let_and_return](https://github.com/Manishearth/rust-clippy/wiki#let_and_return)                                     | warn    | creating a let-binding and then immediately returning it like `let x = expr; x` at the end of a block\n [let_unit_value](https://github.com/Manishearth/rust-clippy/wiki#let_unit_value)                                     | warn    | creating a let binding to a value of unit type, which usually can't be used afterwards\n [linkedlist](https://github.com/Manishearth/rust-clippy/wiki#linkedlist)                                             | warn    | usage of LinkedList, usually a vector is faster, or a more specialized data structure like a VecDeque\n-[logic_bug](https://github.com/Manishearth/rust-clippy/wiki#logic_bug)                                               | warn    | checks for boolean expressions that contain terminals which can be eliminated\n-[manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                           | warn    | manual swap\n+[logic_bug](https://github.com/Manishearth/rust-clippy/wiki#logic_bug)                                               | warn    | boolean expressions that contain terminals which can be eliminated\n+[manual_swap](https://github.com/Manishearth/rust-clippy/wiki#manual_swap)                                           | warn    | manual swap of two variables\n [many_single_char_names](https://github.com/Manishearth/rust-clippy/wiki#many_single_char_names)                     | warn    | too many single character bindings\n-[map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                               | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends `.cloned()` instead)\n+[map_clone](https://github.com/Manishearth/rust-clippy/wiki#map_clone)                                               | warn    | using `.map(|x| x.clone())` to clone an iterator or option's contents\n [map_entry](https://github.com/Manishearth/rust-clippy/wiki#map_entry)                                               | warn    | use of `contains_key` followed by `insert` on a `HashMap` or `BTreeMap`\n-[match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                             | warn    | a match on boolean expression; recommends `if..else` block instead\n-[match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                       | warn    | a match has overlapping arms\n-[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                     | warn    | a match or `if let` has all arms prefixed with `&`; the match expression can be dereferenced instead\n+[match_bool](https://github.com/Manishearth/rust-clippy/wiki#match_bool)                                             | warn    | a match on a boolean expression instead of an `if..else` block\n+[match_overlapping_arm](https://github.com/Manishearth/rust-clippy/wiki#match_overlapping_arm)                       | warn    | a match with overlapping arms\n+[match_ref_pats](https://github.com/Manishearth/rust-clippy/wiki#match_ref_pats)                                     | warn    | a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\n [match_same_arms](https://github.com/Manishearth/rust-clippy/wiki#match_same_arms)                                   | warn    | `match` with identical arm bodies\n-[mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                             | allow   | `mem::forget` usage on `Drop` types is likely to cause memory leaks\n+[mem_forget](https://github.com/Manishearth/rust-clippy/wiki#mem_forget)                                             | allow   | `mem::forget` usage on `Drop` types, likely to cause memory leaks\n [min_max](https://github.com/Manishearth/rust-clippy/wiki#min_max)                                                   | warn    | `min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\n [misrefactored_assign_op](https://github.com/Manishearth/rust-clippy/wiki#misrefactored_assign_op)                   | warn    | having a variable on both sides of an assign op\n-[mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                   | warn    | letter digits in hex literals should be either completely upper- or lowercased\n+[mixed_case_hex_literals](https://github.com/Manishearth/rust-clippy/wiki#mixed_case_hex_literals)                   | warn    | hex literals whose letter digits are not consistently upper- or lowercased\n [modulo_one](https://github.com/Manishearth/rust-clippy/wiki#modulo_one)                                             | warn    | taking a number modulo 1, which always returns 0\n [mut_mut](https://github.com/Manishearth/rust-clippy/wiki#mut_mut)                                                   | allow   | usage of double-mut refs, e.g. `&mut &mut ...`\n [mutex_atomic](https://github.com/Manishearth/rust-clippy/wiki#mutex_atomic)                                         | warn    | using a mutex where an atomic value could be used instead\n@@ -109,74 +109,74 @@ name\n [needless_range_loop](https://github.com/Manishearth/rust-clippy/wiki#needless_range_loop)                           | warn    | for-looping over a range of indices where an iterator over items would do\n [needless_return](https://github.com/Manishearth/rust-clippy/wiki#needless_return)                                   | warn    | using a return statement like `return expr;` where an expression would suffice\n [needless_update](https://github.com/Manishearth/rust-clippy/wiki#needless_update)                                   | warn    | using `Foo { ..base }` when there are no missing fields\n-[neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                         | warn    | Warns on multiplying integers with -1\n+[neg_multiply](https://github.com/Manishearth/rust-clippy/wiki#neg_multiply)                                         | warn    | multiplying integers with -1\n [new_ret_no_self](https://github.com/Manishearth/rust-clippy/wiki#new_ret_no_self)                                   | warn    | not returning `Self` in a `new` method\n [new_without_default](https://github.com/Manishearth/rust-clippy/wiki#new_without_default)                           | warn    | `fn new() -> Self` method without `Default` implementation\n [new_without_default_derive](https://github.com/Manishearth/rust-clippy/wiki#new_without_default_derive)             | warn    | `fn new() -> Self` without `#[derive]`able `Default` implementation\n [no_effect](https://github.com/Manishearth/rust-clippy/wiki#no_effect)                                               | warn    | statements with no effect\n-[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                               | allow   | using any literal non-ASCII chars in a string literal; suggests using the `\\\\u` escape instead\n-[nonminimal_bool](https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool)                                   | allow   | checks for boolean expressions that can be written more concisely\n+[non_ascii_literal](https://github.com/Manishearth/rust-clippy/wiki#non_ascii_literal)                               | allow   | using any literal non-ASCII chars in a string literal instead of using the `\\\\u` escape\n+[nonminimal_bool](https://github.com/Manishearth/rust-clippy/wiki#nonminimal_bool)                                   | allow   | boolean expressions that can be written more concisely\n [nonsensical_open_options](https://github.com/Manishearth/rust-clippy/wiki#nonsensical_open_options)                 | warn    | nonsensical combination of options for opening a file\n [not_unsafe_ptr_arg_deref](https://github.com/Manishearth/rust-clippy/wiki#not_unsafe_ptr_arg_deref)                 | warn    | public functions dereferencing raw pointer arguments but not marked `unsafe`\n [ok_expect](https://github.com/Manishearth/rust-clippy/wiki#ok_expect)                                               | warn    | using `ok().expect()`, which gives worse error messages than calling `expect` directly on the Result\n [option_map_unwrap_or](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or)                         | warn    | using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as `map_or(a, f)`\n [option_map_unwrap_or_else](https://github.com/Manishearth/rust-clippy/wiki#option_map_unwrap_or_else)               | warn    | using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as `map_or_else(g, f)`\n [option_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#option_unwrap_used)                             | allow   | using `Option.unwrap()`, which should at least get a better message using `expect()`\n-[or_fun_call](https://github.com/Manishearth/rust-clippy/wiki#or_fun_call)                                           | warn    | using any `*or` method when the `*or_else` would do\n-[out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                     | deny    | out of bound constant indexing\n-[overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)             | warn    | Using overflow checks which are likely to panic\n-[panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                         | warn    | missing parameters in `panic!`\n-[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                             | warn    | catches operations where precedence may be unclear\n+[or_fun_call](https://github.com/Manishearth/rust-clippy/wiki#or_fun_call)                                           | warn    | using any `*or` method with a function call, which suggests `*or_else`\n+[out_of_bounds_indexing](https://github.com/Manishearth/rust-clippy/wiki#out_of_bounds_indexing)                     | deny    | out of bounds constant indexing\n+[overflow_check_conditional](https://github.com/Manishearth/rust-clippy/wiki#overflow_check_conditional)             | warn    | overflow checks inspired by C which are likely to panic\n+[panic_params](https://github.com/Manishearth/rust-clippy/wiki#panic_params)                                         | warn    | missing parameters in `panic!` calls\n+[precedence](https://github.com/Manishearth/rust-clippy/wiki#precedence)                                             | warn    | operations where precedence may be unclear\n [print_stdout](https://github.com/Manishearth/rust-clippy/wiki#print_stdout)                                         | allow   | printing on stdout\n-[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                   | warn    | fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` instead, respectively\n-[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                             | warn    | using Range::step_by(0), which produces an infinite iterator\n-[range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                             | warn    | zipping iterator with a range when enumerate() would do\n-[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                               | warn    | using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n-[redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                     | warn    | Closures should not be called in the expression they are defined\n+[ptr_arg](https://github.com/Manishearth/rust-clippy/wiki#ptr_arg)                                                   | warn    | arguments of the type `&Vec<...>` (instead of `&[...]`) or `&String` (instead of `&str`)\n+[range_step_by_zero](https://github.com/Manishearth/rust-clippy/wiki#range_step_by_zero)                             | warn    | using `Range::step_by(0)`, which produces an infinite iterator\n+[range_zip_with_len](https://github.com/Manishearth/rust-clippy/wiki#range_zip_with_len)                             | warn    | zipping iterator with a range when `enumerate()` would do\n+[redundant_closure](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure)                               | warn    | redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\n+[redundant_closure_call](https://github.com/Manishearth/rust-clippy/wiki#redundant_closure_call)                     | warn    | throwaway closures called in the expression they are defined\n [redundant_pattern](https://github.com/Manishearth/rust-clippy/wiki#redundant_pattern)                               | warn    | using `name @ _` in a pattern\n-[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                           | warn    | finds use of `regex!(_)`, suggests `Regex::new(_)` instead\n+[regex_macro](https://github.com/Manishearth/rust-clippy/wiki#regex_macro)                                           | warn    | use of `regex!(_)` instead of `Regex::new(_)`\n [result_unwrap_used](https://github.com/Manishearth/rust-clippy/wiki#result_unwrap_used)                             | allow   | using `Result.unwrap()`, which might be better handled\n-[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                             | warn    | Iterating over an empty range, such as `10..0` or `5..5`\n+[reverse_range_loop](https://github.com/Manishearth/rust-clippy/wiki#reverse_range_loop)                             | warn    | iteration over an empty range, such as `10..0` or `5..5`\n [search_is_some](https://github.com/Manishearth/rust-clippy/wiki#search_is_some)                                     | warn    | using an iterator search followed by `is_some()`, which is more succinctly expressed as a call to `any()`\n-[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                 | warn    | Various things that will negatively affect your serde experience\n+[serde_api_misuse](https://github.com/Manishearth/rust-clippy/wiki#serde_api_misuse)                                 | warn    | various things that will negatively affect your serde experience\n [shadow_reuse](https://github.com/Manishearth/rust-clippy/wiki#shadow_reuse)                                         | allow   | rebinding a name to an expression that re-uses the original value, e.g. `let x = x + 1`\n [shadow_same](https://github.com/Manishearth/rust-clippy/wiki#shadow_same)                                           | allow   | rebinding a name to itself, e.g. `let mut x = &mut x`\n-[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                 | allow   | The name is re-bound without even using the original value\n+[shadow_unrelated](https://github.com/Manishearth/rust-clippy/wiki#shadow_unrelated)                                 | allow   | rebinding a name without even using the original value\n [should_implement_trait](https://github.com/Manishearth/rust-clippy/wiki#should_implement_trait)                     | warn    | defining a method that should be implementing a std trait\n [similar_names](https://github.com/Manishearth/rust-clippy/wiki#similar_names)                                       | allow   | similarly named items and bindings\n [single_char_pattern](https://github.com/Manishearth/rust-clippy/wiki#single_char_pattern)                           | warn    | using a single-character str where a char could be used, e.g. `_.split(\"x\")`\n-[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) is used; recommends `if let` instead\n-[single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                               | allow   | a match statement with a two arms where the second arm's pattern is a wildcard; recommends `if let` instead\n-[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                             | allow   | using `x + ..` where x is a `String`; suggests using `push_str()` instead\n-[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                               | allow   | using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\n-[string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal; suggests using a byte string literal instead\n-[stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                   | allow   | finds type names prefixed/postfixed with their containing module's name\n+[single_match](https://github.com/Manishearth/rust-clippy/wiki#single_match)                                         | warn    | a match statement with a single nontrivial arm (i.e, where the other arm is `_ => {}`) instead of `if let`\n+[single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                               | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n+[string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                             | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n+[string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                               | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n+[string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                           | warn    | calling `as_bytes` on a string literal instead of using a byte string literal\n+[stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                   | allow   | type names prefixed/postfixed with their containing module's name\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting) | warn    | suspicious formatting of `*=`, `-=` or `!=`\n [suspicious_else_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_else_formatting)             | warn    | suspicious formatting of `else if`\n [temporary_assignment](https://github.com/Manishearth/rust-clippy/wiki#temporary_assignment)                         | warn    | assignments to temporaries\n [temporary_cstring_as_ptr](https://github.com/Manishearth/rust-clippy/wiki#temporary_cstring_as_ptr)                 | warn    | getting the inner pointer of a temporary `CString`\n [too_many_arguments](https://github.com/Manishearth/rust-clippy/wiki#too_many_arguments)                             | warn    | functions with too many arguments\n-[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take references with `&`.\n+[toplevel_ref_arg](https://github.com/Manishearth/rust-clippy/wiki#toplevel_ref_arg)                                 | warn    | an entire binding declared as `ref`, in a function argument or a `let` statement\n [transmute_ptr_to_ref](https://github.com/Manishearth/rust-clippy/wiki#transmute_ptr_to_ref)                         | warn    | transmutes from a pointer to a reference type\n-[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | finds trivial regular expressions\n-[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                   | warn    | usage of very complex types; recommends factoring out parts into `type` definitions\n+[trivial_regex](https://github.com/Manishearth/rust-clippy/wiki#trivial_regex)                                       | warn    | trivial regular expressions\n+[type_complexity](https://github.com/Manishearth/rust-clippy/wiki#type_complexity)                                   | warn    | usage of very complex types that might be better factored into `type` definitions\n [unicode_not_nfc](https://github.com/Manishearth/rust-clippy/wiki#unicode_not_nfc)                                   | allow   | using a unicode literal not in NFC normal form (see [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\n-[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values (which is always `true` or `false`, respectively)\n-[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument is passed as a mutable reference although the function/method only demands an immutable reference\n+[unit_cmp](https://github.com/Manishearth/rust-clippy/wiki#unit_cmp)                                                 | warn    | comparing unit values\n+[unnecessary_mut_passed](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_mut_passed)                     | warn    | an argument passed as a mutable reference although the callee only demands an immutable reference\n [unnecessary_operation](https://github.com/Manishearth/rust-clippy/wiki#unnecessary_operation)                       | warn    | outer expressions with no effect\n-[unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | Struct fields are bound to a wildcard instead of using `..`\n-[unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                 | warn    | unsafe removed from name\n-[unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)             | allow   | literal suffixes should be separated with an underscore\n+[unneeded_field_pattern](https://github.com/Manishearth/rust-clippy/wiki#unneeded_field_pattern)                     | warn    | struct fields bound to a wildcard instead of using `..`\n+[unsafe_removed_from_name](https://github.com/Manishearth/rust-clippy/wiki#unsafe_removed_from_name)                 | warn    | `unsafe` removed from API names on import\n+[unseparated_literal_suffix](https://github.com/Manishearth/rust-clippy/wiki#unseparated_literal_suffix)             | allow   | literals whose suffix is not separated by an underscore\n [unused_collect](https://github.com/Manishearth/rust-clippy/wiki#unused_collect)                                     | warn    | `collect()`ing an iterator without using the result; this is usually better written as a for loop\n-[unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                         | warn    | unused label\n+[unused_label](https://github.com/Manishearth/rust-clippy/wiki#unused_label)                                         | warn    | unused labels\n [unused_lifetimes](https://github.com/Manishearth/rust-clippy/wiki#unused_lifetimes)                                 | warn    | unused lifetimes in function definitions\n-[use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                               | allow   | use `Debug`-based formatting\n+[use_debug](https://github.com/Manishearth/rust-clippy/wiki#use_debug)                                               | allow   | use of `Debug`-based formatting\n [used_underscore_binding](https://github.com/Manishearth/rust-clippy/wiki#used_underscore_binding)                   | allow   | using a binding which is prefixed with an underscore\n [useless_format](https://github.com/Manishearth/rust-clippy/wiki#useless_format)                                     | warn    | useless use of `format!`\n-[useless_let_if_seq](https://github.com/Manishearth/rust-clippy/wiki#useless_let_if_seq)                             | warn    | Checks for unidiomatic `let mut` declaration followed by initialization in `if`\n+[useless_let_if_seq](https://github.com/Manishearth/rust-clippy/wiki#useless_let_if_seq)                             | warn    | unidiomatic `let mut` declaration followed by initialization in `if`\n [useless_transmute](https://github.com/Manishearth/rust-clippy/wiki#useless_transmute)                               | warn    | transmutes that have the same to and from types or could be a cast/coercion\n [useless_vec](https://github.com/Manishearth/rust-clippy/wiki#useless_vec)                                           | warn    | useless `vec!`\n-[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                                     | warn    | `loop { if let { ... } else break }` can be written as a `while let` loop\n+[while_let_loop](https://github.com/Manishearth/rust-clippy/wiki#while_let_loop)                                     | warn    | `loop { if let { ... } else break }`, which can be written as a `while let` loop\n [while_let_on_iterator](https://github.com/Manishearth/rust-clippy/wiki#while_let_on_iterator)                       | warn    | using a while-let loop instead of a for loop on an iterator\n [wrong_pub_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_pub_self_convention)               | allow   | defining a public method named with an established prefix (like \"into_\") that takes `self` with the wrong convention\n [wrong_self_convention](https://github.com/Manishearth/rust-clippy/wiki#wrong_self_convention)                       | warn    | defining a method named with an established prefix (like \"into_\") that takes `self` with the wrong convention"}, {"sha": "01877465c00a06631a67762934768ef86d18ac93", "filename": "clippy_lints/src/approx_const.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fapprox_const.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fapprox_const.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fapprox_const.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -28,8 +28,7 @@ use utils::span_lint;\n declare_lint! {\n     pub APPROX_CONSTANT,\n     Warn,\n-    \"the approximate of a known float constant (in `std::f64::consts` or `std::f32::consts`) \\\n-     is found; suggests to use the constant\"\n+    \"the approximate of a known float constant (in `std::fXX::consts`)\"\n }\n \n // Tuples are of the form (constant, name, min_digits)"}, {"sha": "55d0e82059c355367ef6a6c1736d8db8b8efbc4e", "filename": "clippy_lints/src/arithmetic.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Farithmetic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Farithmetic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farithmetic.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -17,7 +17,7 @@ use utils::span_lint;\n /// ```\n declare_restriction_lint! {\n     pub INTEGER_ARITHMETIC,\n-    \"Any integer arithmetic statement\"\n+    \"any integer arithmetic statement\"\n }\n \n /// **What it does:** Checks for float arithmetic.\n@@ -33,7 +33,7 @@ declare_restriction_lint! {\n /// ```\n declare_restriction_lint! {\n     pub FLOAT_ARITHMETIC,\n-    \"Any floating-point arithmetic statement\"\n+    \"any floating-point arithmetic statement\"\n }\n \n #[derive(Copy, Clone, Default)]"}, {"sha": "5d8a0b8b8f0f8ccb73f28543f8b9764c4c34b4e5", "filename": "clippy_lints/src/array_indexing.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Farray_indexing.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Farray_indexing.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Farray_indexing.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -24,7 +24,7 @@ use utils::{self, higher};\n declare_lint! {\n     pub OUT_OF_BOUNDS_INDEXING,\n     Deny,\n-    \"out of bound constant indexing\"\n+    \"out of bounds constant indexing\"\n }\n \n /// **What it does:** Checks for usage of indexing or slicing."}, {"sha": "36814808a2bcf596f01390d65700ed9a1fbd769c", "filename": "clippy_lints/src/assign_ops.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fassign_ops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fassign_ops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fassign_ops.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -16,7 +16,7 @@ use utils::{higher, sugg};\n /// ```\n declare_restriction_lint! {\n     pub ASSIGN_OPS,\n-    \"any assignment operation\"\n+    \"any compound assignment operation\"\n }\n \n /// **What it does:** Checks for `a = a op b` or `a = b commutative_op a` patterns."}, {"sha": "0679bf50aa7ee2cf0d4758649a8d41829cf3a5c2", "filename": "clippy_lints/src/attrs.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fattrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fattrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fattrs.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -30,8 +30,9 @@ use utils::paths;\n /// fn not_quite_hot_code(..) { ... }\n /// ```\n declare_lint! {\n-    pub INLINE_ALWAYS, Warn,\n-    \"`#[inline(always)]` is a bad idea in most cases\"\n+    pub INLINE_ALWAYS,\n+    Warn,\n+    \"use of `#[inline(always)]`\"\n }\n \n /// **What it does:** Checks for `#[deprecated]` annotations with a `since`\n@@ -48,8 +49,9 @@ declare_lint! {\n /// fn something_else(..) { ... }\n /// ```\n declare_lint! {\n-    pub DEPRECATED_SEMVER, Warn,\n-    \"`Warn` on `#[deprecated(since = \\\"x\\\")]` where x is not semver\"\n+    pub DEPRECATED_SEMVER,\n+    Warn,\n+    \"use of `#[deprecated(since = \\\"x\\\")]` where x is not semver\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "b021079fd975f2bca10b314d430fb5a1676ec3cf", "filename": "clippy_lints/src/bit_mask.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fbit_mask.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fbit_mask.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbit_mask.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -39,8 +39,7 @@ use utils::span_lint;\n declare_lint! {\n     pub BAD_BIT_MASK,\n     Warn,\n-    \"expressions of the form `_ & mask == select` that will only ever return `true` or `false` \\\n-     (because in the example `select` containing bits that `mask` doesn't have)\"\n+    \"expressions of the form `_ & mask == select` that will only ever return `true` or `false`\"\n }\n \n /// **What it does:** Checks for bit masks in comparisons which can be removed"}, {"sha": "3f506e4f26d3a763d495f734ca1b7fc87840e376", "filename": "clippy_lints/src/block_in_if_condition.rs", "status": "modified", "additions": 6, "deletions": 5, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fblock_in_if_condition.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -16,8 +16,9 @@ use utils::*;\n /// if { true } ..\n /// ```\n declare_lint! {\n-    pub BLOCK_IN_IF_CONDITION_EXPR, Warn,\n-    \"braces can be eliminated in conditions that are expressions, e.g `if { true } ...`\"\n+    pub BLOCK_IN_IF_CONDITION_EXPR,\n+    Warn,\n+    \"braces that can be eliminated in conditions, e.g `if { true } ...`\"\n }\n \n /// **What it does:** Checks for `if` conditions that use blocks containing\n@@ -34,9 +35,9 @@ declare_lint! {\n /// if somefunc(|x| { x == 47 }) ..\n /// ```\n declare_lint! {\n-    pub BLOCK_IN_IF_CONDITION_STMT, Warn,\n-    \"avoid complex blocks in conditions, instead move the block higher and bind it \\\n-    with 'let'; e.g: `if { let x = true; x } ...`\"\n+    pub BLOCK_IN_IF_CONDITION_STMT,\n+    Warn,\n+    \"complex blocks in conditions, e.g. `if { let x = true; x } ...`\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "c6c70640bbae08a8fd4d023850599fd85998b285", "filename": "clippy_lints/src/booleans.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fbooleans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fbooleans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fbooleans.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -20,8 +20,9 @@ use utils::{span_lint_and_then, in_macro, snippet_opt, SpanlessEq};\n /// if a && true  // should be: if a\n /// if !(a == b)  // should be: if a != b\n declare_lint! {\n-    pub NONMINIMAL_BOOL, Allow,\n-    \"checks for boolean expressions that can be written more concisely\"\n+    pub NONMINIMAL_BOOL,\n+    Allow,\n+    \"boolean expressions that can be written more concisely\"\n }\n \n /// **What it does:** Checks for boolean expressions that contain terminals that\n@@ -37,8 +38,9 @@ declare_lint! {\n /// ```\n /// The `b` is unnecessary, the expression is equivalent to `if a`.\n declare_lint! {\n-    pub LOGIC_BUG, Warn,\n-    \"checks for boolean expressions that contain terminals which can be eliminated\"\n+    pub LOGIC_BUG,\n+    Warn,\n+    \"boolean expressions that contain terminals which can be eliminated\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "3e3237ffe08796b44ca4d00c8e242fad6415ffcc", "filename": "clippy_lints/src/cyclomatic_complexity.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fcyclomatic_complexity.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -20,8 +20,9 @@ use utils::{in_macro, LimitStack, span_help_and_lint, paths, match_type};\n ///\n /// **Example:** No. You'll see it when you get the warning.\n declare_lint! {\n-    pub CYCLOMATIC_COMPLEXITY, Warn,\n-    \"finds functions that should be split up into multiple functions\"\n+    pub CYCLOMATIC_COMPLEXITY,\n+    Warn,\n+    \"functions that should be split up into multiple functions\"\n }\n \n pub struct CyclomaticComplexity {"}, {"sha": "1cfe6c109297781b796ac3493c4e4550fc35cc06", "filename": "clippy_lints/src/doc.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fdoc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fdoc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdoc.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -21,8 +21,9 @@ use utils::span_lint;\n /// fn doit(foo_bar) { .. }\n /// ```\n declare_lint! {\n-    pub DOC_MARKDOWN, Warn,\n-    \"checks for the presence of `_`, `::` or camel-case outside ticks in documentation\"\n+    pub DOC_MARKDOWN,\n+    Warn,\n+    \"presence of `_`, `::` or camel-case outside backticks in documentation\"\n }\n \n #[derive(Clone)]"}, {"sha": "88739bb6d78ea707c8f2e462dfad66101b914ba0", "filename": "clippy_lints/src/drop_ref.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fdrop_ref.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fdrop_ref.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fdrop_ref.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -21,9 +21,9 @@ use utils::{match_def_path, paths, span_note_and_lint};\n /// operation_that_requires_mutex_to_be_unlocked();\n /// ```\n declare_lint! {\n-    pub DROP_REF, Warn,\n-    \"call to `std::mem::drop` with a reference instead of an owned value, \\\n-    which will not call the `Drop::drop` method on the underlying value\"\n+    pub DROP_REF,\n+    Warn,\n+    \"calls to `std::mem::drop` with a reference instead of an owned value\"\n }\n \n #[allow(missing_copy_implementations)]"}, {"sha": "9188c421ccd486748b56ca2739fc5a7c79228e0c", "filename": "clippy_lints/src/enum_clike.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_clike.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_clike.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_clike.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -23,8 +23,9 @@ use utils::span_lint;\n /// }\n /// ```\n declare_lint! {\n-    pub ENUM_CLIKE_UNPORTABLE_VARIANT, Warn,\n-    \"finds C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\"\n+    pub ENUM_CLIKE_UNPORTABLE_VARIANT,\n+    Warn,\n+    \"C-like enums that are `repr(isize/usize)` and have values that don't fit into an `i32`\"\n }\n \n pub struct UnportableVariant;"}, {"sha": "214390054753da864160028ec5092908ec542b2e", "filename": "clippy_lints/src/enum_glob_use.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_glob_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_glob_use.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -21,8 +21,11 @@ use utils::span_lint;\n /// ```rust\n /// use std::cmp::Ordering::*;\n /// ```\n-declare_lint! { pub ENUM_GLOB_USE, Allow,\n-    \"finds use items that import all variants of an enum\" }\n+declare_lint! {\n+    pub ENUM_GLOB_USE,\n+    Allow,\n+    \"use items that import all variants of an enum\"\n+}\n \n pub struct EnumGlobUse;\n "}, {"sha": "17c3de480480e3eae6010fbf0b9e74d66a6b6c5d", "filename": "clippy_lints/src/enum_variants.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_variants.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fenum_variants.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fenum_variants.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -23,8 +23,9 @@ use utils::{camel_case_from, camel_case_until, in_macro};\n /// }\n /// ```\n declare_lint! {\n-    pub ENUM_VARIANT_NAMES, Warn,\n-    \"finds enums where all variants share a prefix/postfix\"\n+    pub ENUM_VARIANT_NAMES,\n+    Warn,\n+    \"enums where all variants share a prefix/postfix\"\n }\n \n /// **What it does:** Detects type names that are prefixed or suffixed by the\n@@ -41,8 +42,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub STUTTER, Allow,\n-    \"finds type names prefixed/postfixed with their containing module's name\"\n+    pub STUTTER,\n+    Allow,\n+    \"type names prefixed/postfixed with their containing module's name\"\n }\n \n pub struct EnumVariantNames {"}, {"sha": "2e7cd04d78ecc4017d394707b1434dff9bfc8937", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -35,7 +35,9 @@ pub struct Pass {\n /// }\n /// ```\n declare_lint! {\n-    pub BOXED_LOCAL, Warn, \"using `Box<T>` where unnecessary\"\n+    pub BOXED_LOCAL,\n+    Warn,\n+    \"using `Box<T>` where unnecessary\"\n }\n \n fn is_non_trait_box(ty: ty::Ty) -> bool {"}, {"sha": "1d9eb70b008de253959eff1731815ac1162454af", "filename": "clippy_lints/src/eta_reduction.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Feta_reduction.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Feta_reduction.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Feta_reduction.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -22,8 +22,9 @@ pub struct EtaPass;\n /// ```\n /// where `foo(_)` is a plain function that takes the exact argument type of `x`.\n declare_lint! {\n-    pub REDUNDANT_CLOSURE, Warn,\n-    \"using redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\"\n+    pub REDUNDANT_CLOSURE,\n+    Warn,\n+    \"redundant closures, i.e. `|a| foo(a)` (which can be written as just `foo`)\"\n }\n \n impl LintPass for EtaPass {"}, {"sha": "92901aa7855bacb0c0ae55a6942865112790efa4", "filename": "clippy_lints/src/identity_op.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fidentity_op.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fidentity_op.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fidentity_op.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -17,7 +17,8 @@ use rustc_const_math::ConstInt;\n /// x / 1 + 0 * 1 - 0 | 0\n /// ```\n declare_lint! {\n-    pub IDENTITY_OP, Warn,\n+    pub IDENTITY_OP,\n+    Warn,\n     \"using identity operations, e.g. `x + 0` or `y / 1`\"\n }\n "}, {"sha": "273c1bd0eb0aa97275a0134302d936649cc5c5b0", "filename": "clippy_lints/src/if_not_else.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fif_not_else.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fif_not_else.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fif_not_else.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -31,8 +31,9 @@ use utils::span_help_and_lint;\n /// }\n /// ```\n declare_lint! {\n-    pub IF_NOT_ELSE, Allow,\n-    \"finds if branches that could be swapped so no negation operation is necessary on the condition\"\n+    pub IF_NOT_ELSE,\n+    Allow,\n+    \"`if` branches that could be swapped so no negation operation is necessary on the condition\"\n }\n \n pub struct IfNotElse;"}, {"sha": "78b43974364d8a1e513b01acea45b6ab8b54627f", "filename": "clippy_lints/src/items_after_statements.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fitems_after_statements.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fitems_after_statements.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -29,7 +29,7 @@ use utils::{in_macro, span_lint};\n declare_lint! {\n     pub ITEMS_AFTER_STATEMENTS,\n     Allow,\n-    \"finds blocks where an item comes after a statement\"\n+    \"blocks where an item comes after a statement\"\n }\n \n pub struct ItemsAfterStatements;"}, {"sha": "e8ca113fab1f1532babaab296169a6636784fc4d", "filename": "clippy_lints/src/len_zero.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Flen_zero.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Flen_zero.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flen_zero.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -22,7 +22,8 @@ use utils::{get_item_name, in_macro, snippet, span_lint, span_lint_and_then, wal\n /// if x.len() == 0 { .. }\n /// ```\n declare_lint! {\n-    pub LEN_ZERO, Warn,\n+    pub LEN_ZERO,\n+    Warn,\n     \"checking `.len() == 0` or `.len() > 0` (or similar) when `.is_empty()` \\\n      could be used instead\"\n }\n@@ -45,7 +46,8 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub LEN_WITHOUT_IS_EMPTY, Warn,\n+    pub LEN_WITHOUT_IS_EMPTY,\n+    Warn,\n     \"traits and impls that have `.len()` but not `.is_empty()`\"\n }\n "}, {"sha": "9c78e864c02ed77e917245f3da8a9c7824b39ea0", "filename": "clippy_lints/src/let_if_seq.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Flet_if_seq.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Flet_if_seq.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flet_if_seq.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -45,7 +45,7 @@ use utils::{snippet, span_lint_and_then};\n declare_lint! {\n     pub USELESS_LET_IF_SEQ,\n     Warn,\n-    \"Checks for unidiomatic `let mut` declaration followed by initialization in `if`\"\n+    \"unidiomatic `let mut` declaration followed by initialization in `if`\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "612133a1ddff405fe89d8b5f9f2bdb912e1f1015", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -145,7 +145,7 @@ declare_lint! {\n declare_lint! {\n     pub WHILE_LET_LOOP,\n     Warn,\n-    \"`loop { if let { ... } else break }` can be written as a `while let` loop\"\n+    \"`loop { if let { ... } else break }`, which can be written as a `while let` loop\"\n }\n \n /// **What it does:** Checks for using `collect()` on an iterator without using\n@@ -186,7 +186,7 @@ declare_lint! {\n declare_lint! {\n     pub REVERSE_RANGE_LOOP,\n     Warn,\n-    \"Iterating over an empty range, such as `10..0` or `5..5`\"\n+    \"iteration over an empty range, such as `10..0` or `5..5`\"\n }\n \n /// **What it does:** Checks `for` loops over slices with an explicit counter\n@@ -224,7 +224,7 @@ declare_lint! {\n declare_lint! {\n     pub EMPTY_LOOP,\n     Warn,\n-    \"empty `loop {}` detected\"\n+    \"empty `loop {}`, which should block or sleep\"\n }\n \n /// **What it does:** Checks for `while let` expressions on iterators."}, {"sha": "39b0c7d80a59c6128611a119ee8def888135d2bf", "filename": "clippy_lints/src/map_clone.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmap_clone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmap_clone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmap_clone.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -16,9 +16,9 @@ use utils::{is_adjusted, match_path, match_trait_method, match_type, paths, snip\n /// x.map(|e| e.clone());\n /// ```\n declare_lint! {\n-    pub MAP_CLONE, Warn,\n-    \"using `.map(|x| x.clone())` to clone an iterator or option's contents (recommends \\\n-     `.cloned()` instead)\"\n+    pub MAP_CLONE,\n+    Warn,\n+    \"using `.map(|x| x.clone())` to clone an iterator or option's contents\"\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "d96854cc38ab54d194d5a5dc08ea05a430063f19", "filename": "clippy_lints/src/matches.rs", "status": "modified", "additions": 16, "deletions": 11, "changes": 27, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmatches.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmatches.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmatches.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -27,9 +27,10 @@ use utils::sugg::Sugg;\n /// }\n /// ```\n declare_lint! {\n-    pub SINGLE_MATCH, Warn,\n+    pub SINGLE_MATCH,\n+    Warn,\n     \"a match statement with a single nontrivial arm (i.e, where the other arm \\\n-     is `_ => {}`) is used; recommends `if let` instead\"\n+     is `_ => {}`) instead of `if let`\"\n }\n \n /// **What it does:** Checks for matches with a two arms where an `if let` will\n@@ -47,9 +48,10 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub SINGLE_MATCH_ELSE, Allow,\n-    \"a match statement with a two arms where the second arm's pattern is a wildcard; \\\n-     recommends `if let` instead\"\n+    pub SINGLE_MATCH_ELSE,\n+    Allow,\n+    \"a match statement with a two arms where the second arm's pattern is a wildcard \\\n+     instead of `if let`\"\n }\n \n /// **What it does:** Checks for matches where all arms match a reference,\n@@ -70,9 +72,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub MATCH_REF_PATS, Warn,\n-    \"a match or `if let` has all arms prefixed with `&`; the match expression can be \\\n-     dereferenced instead\"\n+    pub MATCH_REF_PATS,\n+    Warn,\n+    \"a match or `if let` with all arms prefixed with `&` instead of deref-ing the match expression\"\n }\n \n /// **What it does:** Checks for matches where match expression is a `bool`. It\n@@ -91,8 +93,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub MATCH_BOOL, Warn,\n-    \"a match on boolean expression; recommends `if..else` block instead\"\n+    pub MATCH_BOOL,\n+    Warn,\n+    \"a match on a boolean expression instead of an `if..else` block\"\n }\n \n /// **What it does:** Checks for overlapping match arms.\n@@ -112,7 +115,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub MATCH_OVERLAPPING_ARM, Warn, \"a match has overlapping arms\"\n+    pub MATCH_OVERLAPPING_ARM,\n+    Warn,\n+    \"a match with overlapping arms\"\n }\n \n #[allow(missing_copy_implementations)]"}, {"sha": "41151835ce1848cce9fae8ee0cd7b7df5f69a296", "filename": "clippy_lints/src/mem_forget.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmem_forget.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmem_forget.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmem_forget.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -16,7 +16,7 @@ use utils::{match_def_path, paths, span_lint};\n declare_lint! {\n     pub MEM_FORGET,\n     Allow,\n-    \"`mem::forget` usage on `Drop` types is likely to cause memory leaks\"\n+    \"`mem::forget` usage on `Drop` types, likely to cause memory leaks\"\n }\n \n pub struct MemForget;"}, {"sha": "b329bc3d09956f7291e129c45d6f6af2f5c05385", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 40, "deletions": 19, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -34,7 +34,8 @@ pub struct Pass;\n /// x.unwrap()\n /// ```\n declare_lint! {\n-    pub OPTION_UNWRAP_USED, Allow,\n+    pub OPTION_UNWRAP_USED,\n+    Allow,\n     \"using `Option.unwrap()`, which should at least get a better message using `expect()`\"\n }\n \n@@ -55,7 +56,8 @@ declare_lint! {\n /// x.unwrap()\n /// ```\n declare_lint! {\n-    pub RESULT_UNWRAP_USED, Allow,\n+    pub RESULT_UNWRAP_USED,\n+    Allow,\n     \"using `Result.unwrap()`, which might be better handled\"\n }\n \n@@ -79,7 +81,8 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub SHOULD_IMPLEMENT_TRAIT, Warn,\n+    pub SHOULD_IMPLEMENT_TRAIT,\n+    Warn,\n     \"defining a method that should be implementing a std trait\"\n }\n \n@@ -107,7 +110,8 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub WRONG_SELF_CONVENTION, Warn,\n+    pub WRONG_SELF_CONVENTION,\n+    Warn,\n     \"defining a method named with an established prefix (like \\\"into_\\\") that takes \\\n      `self` with the wrong convention\"\n }\n@@ -128,7 +132,8 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub WRONG_PUB_SELF_CONVENTION, Allow,\n+    pub WRONG_PUB_SELF_CONVENTION,\n+    Allow,\n     \"defining a public method named with an established prefix (like \\\"into_\\\") that takes \\\n      `self` with the wrong convention\"\n }\n@@ -145,7 +150,8 @@ declare_lint! {\n /// x.ok().expect(\"why did I do this again?\")\n /// ```\n declare_lint! {\n-    pub OK_EXPECT, Warn,\n+    pub OK_EXPECT,\n+    Warn,\n     \"using `ok().expect()`, which gives worse error messages than \\\n      calling `expect` directly on the Result\"\n }\n@@ -162,7 +168,8 @@ declare_lint! {\n /// x.map(|a| a + 1).unwrap_or(0)\n /// ```\n declare_lint! {\n-    pub OPTION_MAP_UNWRAP_OR, Warn,\n+    pub OPTION_MAP_UNWRAP_OR,\n+    Warn,\n     \"using `Option.map(f).unwrap_or(a)`, which is more succinctly expressed as \\\n      `map_or(a, f)`\"\n }\n@@ -179,7 +186,8 @@ declare_lint! {\n /// x.map(|a| a + 1).unwrap_or_else(some_function)\n /// ```\n declare_lint! {\n-    pub OPTION_MAP_UNWRAP_OR_ELSE, Warn,\n+    pub OPTION_MAP_UNWRAP_OR_ELSE,\n+    Warn,\n     \"using `Option.map(f).unwrap_or_else(g)`, which is more succinctly expressed as \\\n      `map_or_else(g, f)`\"\n }\n@@ -196,7 +204,8 @@ declare_lint! {\n /// iter.filter(|x| x == 0).next()\n /// ```\n declare_lint! {\n-    pub FILTER_NEXT, Warn,\n+    pub FILTER_NEXT,\n+    Warn,\n     \"using `filter(p).next()`, which is more succinctly expressed as `.find(p)`\"\n }\n \n@@ -214,8 +223,10 @@ declare_lint! {\n /// iter.filter(|x| x == 0).map(|x| x * 2)\n /// ```\n declare_lint! {\n-    pub FILTER_MAP, Allow,\n-    \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can usually be written as a single method call\"\n+    pub FILTER_MAP,\n+    Allow,\n+    \"using combinations of `filter`, `map`, `filter_map` and `flat_map` which can \\\n+     usually be written as a single method call\"\n }\n \n /// **What it does:** Checks for an iterator search (such as `find()`,\n@@ -231,7 +242,8 @@ declare_lint! {\n /// iter.find(|x| x == 0).is_some()\n /// ```\n declare_lint! {\n-    pub SEARCH_IS_SOME, Warn,\n+    pub SEARCH_IS_SOME,\n+    Warn,\n     \"using an iterator search followed by `is_some()`, which is more succinctly \\\n      expressed as a call to `any()`\"\n }\n@@ -249,7 +261,8 @@ declare_lint! {\n /// name.chars().next() == Some('_')\n /// ```\n declare_lint! {\n-    pub CHARS_NEXT_CMP, Warn,\n+    pub CHARS_NEXT_CMP,\n+    Warn,\n     \"using `.chars().next()` to check if a string starts with a char\"\n }\n \n@@ -276,8 +289,9 @@ declare_lint! {\n /// foo.unwrap_or_default()\n /// ```\n declare_lint! {\n-    pub OR_FUN_CALL, Warn,\n-    \"using any `*or` method when the `*or_else` would do\"\n+    pub OR_FUN_CALL,\n+    Warn,\n+    \"using any `*or` method with a function call, which suggests `*or_else`\"\n }\n \n /// **What it does:** Checks for usage of `.extend(s)` on a `Vec` to extend the\n@@ -293,7 +307,8 @@ declare_lint! {\n /// my_vec.extend(&xs)\n /// ```\n declare_lint! {\n-    pub EXTEND_FROM_SLICE, Warn,\n+    pub EXTEND_FROM_SLICE,\n+    Warn,\n     \"`.extend_from_slice(_)` is a faster way to extend a Vec by a slice\"\n }\n \n@@ -309,7 +324,9 @@ declare_lint! {\n /// 42u64.clone()\n /// ```\n declare_lint! {\n-    pub CLONE_ON_COPY, Warn, \"using `clone` on a `Copy` type\"\n+    pub CLONE_ON_COPY,\n+    Warn,\n+    \"using `clone` on a `Copy` type\"\n }\n \n /// **What it does:** Checks for usage of `.clone()` on an `&&T`.\n@@ -329,7 +346,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub CLONE_DOUBLE_REF, Warn, \"using `clone` on `&&T`\"\n+    pub CLONE_DOUBLE_REF,\n+    Warn,\n+    \"using `clone` on `&&T`\"\n }\n \n /// **What it does:** Checks for `new` not returning `Self`.\n@@ -347,7 +366,9 @@ declare_lint! {\n /// }\n /// ```\n declare_lint! {\n-    pub NEW_RET_NO_SELF, Warn, \"not returning `Self` in a `new` method\"\n+    pub NEW_RET_NO_SELF,\n+    Warn,\n+    \"not returning `Self` in a `new` method\"\n }\n \n /// **What it does:** Checks for string methods that receive a single-character"}, {"sha": "05d4d40e0abe003217a584ab6b9a3d278339d12a", "filename": "clippy_lints/src/minmax.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fminmax.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fminmax.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fminmax.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -20,7 +20,8 @@ use utils::{match_def_path, paths, span_lint};\n /// It will always be equal to `0`. Probably the author meant to clamp the value\n /// between 0 and 100, but has erroneously swapped `min` and `max`.\n declare_lint! {\n-    pub MIN_MAX, Warn,\n+    pub MIN_MAX,\n+    Warn,\n     \"`min(_, max(_, _))` (or vice versa) with bounds clamping the result to a constant\"\n }\n "}, {"sha": "3dc30110b9252e2f2bb151e2465acacab52abf86", "filename": "clippy_lints/src/misc.rs", "status": "modified", "additions": 33, "deletions": 16, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmisc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmisc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -35,10 +35,9 @@ use utils::sugg::Sugg;\n /// fn foo(ref x: u8) -> bool { .. }\n /// ```\n declare_lint! {\n-    pub TOPLEVEL_REF_ARG, Warn,\n-    \"An entire binding was declared as `ref`, in a function argument (`fn foo(ref x: Bar)`), \\\n-     or a `let` statement (`let ref x = foo()`). In such cases, it is preferred to take \\\n-     references with `&`.\"\n+    pub TOPLEVEL_REF_ARG,\n+    Warn,\n+    \"an entire binding declared as `ref`, in a function argument or a `let` statement\"\n }\n \n #[allow(missing_copy_implementations)]\n@@ -111,8 +110,11 @@ impl LateLintPass for TopLevelRefPass {\n /// ```rust\n /// x == NAN\n /// ```\n-declare_lint!(pub CMP_NAN, Deny,\n-              \"comparisons to NAN (which will always return false, which is probably not intended)\");\n+declare_lint! {\n+    pub CMP_NAN,\n+    Deny,\n+    \"comparisons to NAN, which will always return false, probably not intended\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct CmpNan;\n@@ -165,10 +167,11 @@ fn check_nan(cx: &LateContext, path: &Path, span: Span) {\n /// y == 1.23f64\n /// y != x  // where both are floats\n /// ```\n-declare_lint!(pub FLOAT_CMP, Warn,\n-              \"using `==` or `!=` on float values (as floating-point operations \\\n-               usually involve rounding errors, it is always better to check for approximate \\\n-               equality within small bounds)\");\n+declare_lint! {\n+    pub FLOAT_CMP,\n+    Warn,\n+    \"using `==` or `!=` on float values instead of comparing difference with an epsilon\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct FloatCmp;\n@@ -257,8 +260,11 @@ fn is_float(cx: &LateContext, expr: &Expr) -> bool {\n /// ```rust\n /// x.to_owned() == y\n /// ```\n-declare_lint!(pub CMP_OWNED, Warn,\n-              \"creating owned instances for comparing with others, e.g. `x == \\\"foo\\\".to_string()`\");\n+declare_lint! {\n+    pub CMP_OWNED,\n+    Warn,\n+    \"creating owned instances for comparing with others, e.g. `x == \\\"foo\\\".to_string()`\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct CmpOwned;\n@@ -353,7 +359,11 @@ fn is_str_arg(cx: &LateContext, args: &[P<Expr>]) -> bool {\n /// ```rust\n /// x % 1\n /// ```\n-declare_lint!(pub MODULO_ONE, Warn, \"taking a number modulo 1, which always returns 0\");\n+declare_lint! {\n+    pub MODULO_ONE,\n+    Warn,\n+    \"taking a number modulo 1, which always returns 0\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct ModuloOne;\n@@ -389,7 +399,11 @@ impl LateLintPass for ModuloOne {\n ///     y @ _   => (), // easier written as `y`,\n /// }\n /// ```\n-declare_lint!(pub REDUNDANT_PATTERN, Warn, \"using `name @ _` in a pattern\");\n+declare_lint! {\n+    pub REDUNDANT_PATTERN,\n+    Warn,\n+    \"using `name @ _` in a pattern\"\n+}\n \n #[derive(Copy,Clone)]\n pub struct PatternPass;\n@@ -431,8 +445,11 @@ impl LateLintPass for PatternPass {\n /// let y = _x + 1; // Here we are using `_x`, even though it has a leading underscore.\n ///                 // We should rename `_x` to `x`\n /// ```\n-declare_lint!(pub USED_UNDERSCORE_BINDING, Allow,\n-              \"using a binding which is prefixed with an underscore\");\n+declare_lint! {\n+    pub USED_UNDERSCORE_BINDING,\n+    Allow,\n+    \"using a binding which is prefixed with an underscore\"\n+}\n \n #[derive(Copy, Clone)]\n pub struct UsedUnderscoreBinding;"}, {"sha": "63b27f48f0d9caf91102bb3459c24bb1ae7ddfb2", "filename": "clippy_lints/src/misc_early.rs", "status": "modified", "additions": 18, "deletions": 12, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmisc_early.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmisc_early.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmisc_early.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -18,8 +18,9 @@ use utils::{span_lint, span_help_and_lint, snippet, snippet_opt, span_lint_and_t\n /// let { a: _, b: ref b, c: _ } = ..\n /// ```\n declare_lint! {\n-    pub UNNEEDED_FIELD_PATTERN, Warn,\n-    \"Struct fields are bound to a wildcard instead of using `..`\"\n+    pub UNNEEDED_FIELD_PATTERN,\n+    Warn,\n+    \"struct fields bound to a wildcard instead of using `..`\"\n }\n \n /// **What it does:** Checks for function arguments having the similar names\n@@ -34,8 +35,9 @@ declare_lint! {\n /// fn foo(a: i32, _a: i32) {}\n /// ```\n declare_lint! {\n-    pub DUPLICATE_UNDERSCORE_ARGUMENT, Warn,\n-    \"Function arguments having names which only differ by an underscore\"\n+    pub DUPLICATE_UNDERSCORE_ARGUMENT,\n+    Warn,\n+    \"function arguments having names which only differ by an underscore\"\n }\n \n /// **What it does:** Detects closures called in the same expression where they are defined.\n@@ -49,8 +51,9 @@ declare_lint! {\n /// (|| 42)()\n /// ```\n declare_lint! {\n-    pub REDUNDANT_CLOSURE_CALL, Warn,\n-    \"Closures should not be called in the expression they are defined\"\n+    pub REDUNDANT_CLOSURE_CALL,\n+    Warn,\n+    \"throwaway closures called in the expression they are defined\"\n }\n \n /// **What it does:** Detects expressions of the form `--x`.\n@@ -65,8 +68,9 @@ declare_lint! {\n /// --x;\n /// ```\n declare_lint! {\n-    pub DOUBLE_NEG, Warn,\n-    \"`--x` is a double negation of `x` and not a pre-decrement as in C or C++\"\n+    pub DOUBLE_NEG,\n+    Warn,\n+    \"`--x`, which is a double negation of `x` and not a pre-decrement as in C/C++\"\n }\n \n /// **What it does:** Warns on hexadecimal literals with mixed-case letter digits.\n@@ -80,8 +84,9 @@ declare_lint! {\n /// let y = 0x1a9BAcD;\n /// ```\n declare_lint! {\n-    pub MIXED_CASE_HEX_LITERALS, Warn,\n-    \"letter digits in hex literals should be either completely upper- or lowercased\"\n+    pub MIXED_CASE_HEX_LITERALS,\n+    Warn,\n+    \"hex literals whose letter digits are not consistently upper- or lowercased\"\n }\n \n /// **What it does:** Warns if literal suffixes are not separated by an underscore.\n@@ -95,8 +100,9 @@ declare_lint! {\n /// let y = 123832i32;\n /// ```\n declare_lint! {\n-    pub UNSEPARATED_LITERAL_SUFFIX, Allow,\n-    \"literal suffixes should be separated with an underscore\"\n+    pub UNSEPARATED_LITERAL_SUFFIX,\n+    Allow,\n+    \"literals whose suffix is not separated by an underscore\"\n }\n \n "}, {"sha": "21aa21e08a4198785381900cce681627eb10d185", "filename": "clippy_lints/src/mut_reference.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmut_reference.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fmut_reference.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmut_reference.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -19,7 +19,7 @@ use utils::span_lint;\n declare_lint! {\n     pub UNNECESSARY_MUT_PASSED,\n     Warn,\n-    \"an argument is passed as a mutable reference although the function/method only demands an \\\n+    \"an argument passed as a mutable reference although the callee only demands an \\\n      immutable reference\"\n }\n "}, {"sha": "64f0af90aa81d041f17b385b3695ca813fdb0bb0", "filename": "clippy_lints/src/needless_bool.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fneedless_bool.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fneedless_bool.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_bool.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -44,8 +44,7 @@ declare_lint! {\n declare_lint! {\n     pub BOOL_COMPARISON,\n     Warn,\n-    \"comparing a variable to a boolean, e.g. \\\n-     `if x == true`\"\n+    \"comparing a variable to a boolean, e.g. `if x == true`\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "3749b36540c496fad41080a4010d0503bef66855", "filename": "clippy_lints/src/neg_multiply.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fneg_multiply.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fneg_multiply.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneg_multiply.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -18,7 +18,7 @@ use utils::span_lint;\n declare_lint! {\n     pub NEG_MULTIPLY,\n     Warn,\n-    \"Warns on multiplying integers with -1\"\n+    \"multiplying integers with -1\"\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "24bccf687f18130dc89cd2edd28299691f76b842", "filename": "clippy_lints/src/overflow_check_conditional.rs", "status": "modified", "additions": 5, "deletions": 2, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Foverflow_check_conditional.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -14,8 +14,11 @@ use utils::span_lint;\n /// a + b < a\n /// ```\n \n-declare_lint!(pub OVERFLOW_CHECK_CONDITIONAL, Warn,\n-              \"Using overflow checks which are likely to panic\");\n+declare_lint! {\n+    pub OVERFLOW_CHECK_CONDITIONAL,\n+    Warn,\n+    \"overflow checks inspired by C which are likely to panic\"\n+}\n \n #[derive(Copy, Clone)]\n pub struct OverflowCheckConditional;"}, {"sha": "d4b7c0fb75aeaa01a52d3e2865a734d6bd87bd6d", "filename": "clippy_lints/src/panic.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fpanic.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -18,7 +18,9 @@ use utils::{is_direct_expn_of, match_path, paths, span_lint};\n /// panic!(\"This `panic!` is probably missing a parameter there: {}\");\n /// ```\n declare_lint! {\n-    pub PANIC_PARAMS, Warn, \"missing parameters in `panic!`\"\n+    pub PANIC_PARAMS,\n+    Warn,\n+    \"missing parameters in `panic!` calls\"\n }\n \n #[allow(missing_copy_implementations)]"}, {"sha": "1d10fb19c7338876aec16da36ea96bb6268b84ab", "filename": "clippy_lints/src/precedence.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fprecedence.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fprecedence.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprecedence.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -19,8 +19,9 @@ use utils::{span_lint, snippet};\n /// * `1 << 2 + 3` equals 32, while `(1 << 2) + 3` equals 7\n /// * `-1i32.abs()` equals -1, while `(-1i32).abs()` equals 1\n declare_lint! {\n-    pub PRECEDENCE, Warn,\n-    \"catches operations where precedence may be unclear\"\n+    pub PRECEDENCE,\n+    Warn,\n+    \"operations where precedence may be unclear\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "39f1f5b39a211a159be1b84aaeee1515292ec870", "filename": "clippy_lints/src/print.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fprint.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -35,7 +35,7 @@ declare_lint! {\n declare_lint! {\n     pub USE_DEBUG,\n     Allow,\n-    \"use `Debug`-based formatting\"\n+    \"use of `Debug`-based formatting\"\n }\n \n #[derive(Copy, Clone, Debug)]"}, {"sha": "f985b2a00319566a6692cf9a695b5094b49850cb", "filename": "clippy_lints/src/ptr_arg.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fptr_arg.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fptr_arg.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fptr_arg.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -23,8 +23,7 @@ use utils::{match_type, paths, span_lint};\n declare_lint! {\n     pub PTR_ARG,\n     Warn,\n-    \"fn arguments of the type `&Vec<...>` or `&String`, suggesting to use `&[...]` or `&str` \\\n-     instead, respectively\"\n+    \"arguments of the type `&Vec<...>` (instead of `&[...]`) or `&String` (instead of `&str`)\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "2e9a72e54a9dfde61be8879ac6e2c9efd33f8ee5", "filename": "clippy_lints/src/ranges.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Franges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Franges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Franges.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -17,8 +17,9 @@ use utils::higher;\n /// for x in (5..5).step_by(0) { .. }\n /// ```\n declare_lint! {\n-    pub RANGE_STEP_BY_ZERO, Warn,\n-    \"using Range::step_by(0), which produces an infinite iterator\"\n+    pub RANGE_STEP_BY_ZERO,\n+    Warn,\n+    \"using `Range::step_by(0)`, which produces an infinite iterator\"\n }\n /// **What it does:** Checks for zipping a collection with the range of `0.._.len()`.\n ///\n@@ -31,8 +32,9 @@ declare_lint! {\n /// x.iter().zip(0..x.len())\n /// ```\n declare_lint! {\n-    pub RANGE_ZIP_WITH_LEN, Warn,\n-    \"zipping iterator with a range when enumerate() would do\"\n+    pub RANGE_ZIP_WITH_LEN,\n+    Warn,\n+    \"zipping iterator with a range when `enumerate()` would do\"\n }\n \n #[derive(Copy,Clone)]"}, {"sha": "770c524b946cc8af56242143a6d5cb019d903626", "filename": "clippy_lints/src/regex.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fregex.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fregex.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fregex.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -27,7 +27,7 @@ use utils::{is_expn_of, match_def_path, match_type, paths, span_lint, span_help_\n declare_lint! {\n     pub INVALID_REGEX,\n     Deny,\n-    \"finds invalid regular expressions\"\n+    \"invalid regular expressions\"\n }\n \n /// **What it does:** Checks for trivial [regex] creation (with `Regex::new`,\n@@ -48,7 +48,7 @@ declare_lint! {\n declare_lint! {\n     pub TRIVIAL_REGEX,\n     Warn,\n-    \"finds trivial regular expressions\"\n+    \"trivial regular expressions\"\n }\n \n /// **What it does:** Checks for usage of `regex!(_)` which (as of now) is\n@@ -67,7 +67,7 @@ declare_lint! {\n declare_lint! {\n     pub REGEX_MACRO,\n     Warn,\n-    \"finds use of `regex!(_)`, suggests `Regex::new(_)` instead\"\n+    \"use of `regex!(_)` instead of `Regex::new(_)`\"\n }\n \n #[derive(Clone, Default)]"}, {"sha": "770194dddbe141f615666346b719a9080b791ace", "filename": "clippy_lints/src/returns.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Freturns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Freturns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Freturns.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -20,7 +20,8 @@ use utils::{span_note_and_lint, span_lint_and_then, snippet_opt, match_path_ast,\n /// fn foo(x: usize) { return x; }\n /// ```\n declare_lint! {\n-    pub NEEDLESS_RETURN, Warn,\n+    pub NEEDLESS_RETURN,\n+    Warn,\n     \"using a return statement like `return expr;` where an expression would suffice\"\n }\n \n@@ -39,7 +40,8 @@ declare_lint! {\n /// { let x = ..; x }\n /// ```\n declare_lint! {\n-    pub LET_AND_RETURN, Warn,\n+    pub LET_AND_RETURN,\n+    Warn,\n     \"creating a let-binding and then immediately returning it like `let x = expr; x` at \\\n      the end of a block\"\n }"}, {"sha": "6cf10d883d31d47767bc5dbd90dcc03231e3264b", "filename": "clippy_lints/src/serde.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fserde.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fserde.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fserde.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -11,8 +11,9 @@ use utils::{span_lint, get_trait_def_id, paths};\n ///\n /// **Example:** Implementing `Visitor::visit_string` but not `Visitor::visit_str`.\n declare_lint! {\n-    pub SERDE_API_MISUSE, Warn,\n-    \"Various things that will negatively affect your serde experience\"\n+    pub SERDE_API_MISUSE,\n+    Warn,\n+    \"various things that will negatively affect your serde experience\"\n }\n \n "}, {"sha": "8e3a44031ab516cf1963d7ba191ad01e8f81ff43", "filename": "clippy_lints/src/shadow.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fshadow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fshadow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fshadow.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -22,7 +22,8 @@ use utils::{higher, in_external_macro, snippet, span_lint_and_then};\n /// let x = &x;\n /// ```\n declare_lint! {\n-    pub SHADOW_SAME, Allow,\n+    pub SHADOW_SAME,\n+    Allow,\n     \"rebinding a name to itself, e.g. `let mut x = &mut x`\"\n }\n \n@@ -42,9 +43,10 @@ declare_lint! {\n /// let x = x + 1;\n /// ```\n declare_lint! {\n-    pub SHADOW_REUSE, Allow,\n+    pub SHADOW_REUSE,\n+    Allow,\n     \"rebinding a name to an expression that re-uses the original value, e.g. \\\n-    `let x = x + 1`\"\n+     `let x = x + 1`\"\n }\n \n /// **What it does:** Checks for bindings that shadow other bindings already in\n@@ -64,8 +66,9 @@ declare_lint! {\n /// let x = y; let x = z; // shadows the earlier binding\n /// ```\n declare_lint! {\n-    pub SHADOW_UNRELATED, Allow,\n-    \"The name is re-bound without even using the original value\"\n+    pub SHADOW_UNRELATED,\n+    Allow,\n+    \"rebinding a name without even using the original value\"\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "28e61cf2e206893c4303c7b0c864607348d219b0", "filename": "clippy_lints/src/strings.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fstrings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fstrings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fstrings.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -21,7 +21,7 @@ use utils::{match_type, paths, span_lint, span_lint_and_then, walk_ptrs_ty, get_\n declare_lint! {\n     pub STRING_ADD_ASSIGN,\n     Allow,\n-    \"using `x = x + ..` where x is a `String`; suggests using `push_str()` instead\"\n+    \"using `x = x + ..` where x is a `String` instead of `push_str()`\"\n }\n \n /// **What it does:** Checks for all instances of `x + _` where `x` is of type\n@@ -49,7 +49,7 @@ declare_lint! {\n declare_lint! {\n     pub STRING_ADD,\n     Allow,\n-    \"using `x + ..` where x is a `String`; suggests using `push_str()` instead\"\n+    \"using `x + ..` where x is a `String` instead of `push_str()`\"\n }\n \n /// **What it does:** Checks for the `as_bytes` method called on string literals\n@@ -67,7 +67,7 @@ declare_lint! {\n declare_lint! {\n     pub STRING_LIT_AS_BYTES,\n     Warn,\n-    \"calling `as_bytes` on a string literal; suggests using a byte string literal instead\"\n+    \"calling `as_bytes` on a string literal instead of using a byte string literal\"\n }\n \n #[derive(Copy, Clone)]"}, {"sha": "584bcb0d866a76ea0b1d40c1485beb0a4a5f3120", "filename": "clippy_lints/src/swap.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fswap.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Fswap.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fswap.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -21,7 +21,7 @@ use utils::sugg::Sugg;\n declare_lint! {\n     pub MANUAL_SWAP,\n     Warn,\n-    \"manual swap\"\n+    \"manual swap of two variables\"\n }\n \n /// **What it does:** Checks for `foo = bar; bar = foo` sequences."}, {"sha": "b240fb6199cf83701797f271378e8740d4dd106b", "filename": "clippy_lints/src/types.rs", "status": "modified", "additions": 32, "deletions": 19, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Ftypes.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -29,7 +29,8 @@ pub struct TypePass;\n /// }\n /// ```\n declare_lint! {\n-    pub BOX_VEC, Warn,\n+    pub BOX_VEC,\n+    Warn,\n     \"usage of `Box<Vec<T>>`, vector elements are already on the heap\"\n }\n \n@@ -56,7 +57,8 @@ declare_lint! {\n /// let x = LinkedList::new();\n /// ```\n declare_lint! {\n-    pub LINKEDLIST, Warn,\n+    pub LINKEDLIST,\n+    Warn,\n     \"usage of LinkedList, usually a vector is faster, or a more specialized data \\\n      structure like a VecDeque\"\n }\n@@ -117,7 +119,8 @@ pub struct LetPass;\n /// let x = { 1; };\n /// ```\n declare_lint! {\n-    pub LET_UNIT_VALUE, Warn,\n+    pub LET_UNIT_VALUE,\n+    Warn,\n     \"creating a let binding to a value of unit type, which usually can't be used afterwards\"\n }\n \n@@ -169,8 +172,9 @@ impl LateLintPass for LetPass {\n /// { foo(); bar(); baz(); }\n /// ```\n declare_lint! {\n-    pub UNIT_CMP, Warn,\n-    \"comparing unit values (which is always `true` or `false`, respectively)\"\n+    pub UNIT_CMP,\n+    Warn,\n+    \"comparing unit values\"\n }\n \n #[allow(missing_copy_implementations)]\n@@ -227,7 +231,8 @@ pub struct CastPass;\n /// let x = u64::MAX; x as f64\n /// ```\n declare_lint! {\n-    pub CAST_PRECISION_LOSS, Allow,\n+    pub CAST_PRECISION_LOSS,\n+    Allow,\n     \"casts that cause loss of precision, e.g `x as f32` where `x: u64`\"\n }\n \n@@ -247,7 +252,8 @@ declare_lint! {\n /// y as u64  // will return 18446744073709551615\n /// ```\n declare_lint! {\n-    pub CAST_SIGN_LOSS, Allow,\n+    pub CAST_SIGN_LOSS,\n+    Allow,\n     \"casts from signed types to unsigned types, e.g `x as u32` where `x: i32`\"\n }\n \n@@ -266,8 +272,10 @@ declare_lint! {\n /// fn as_u8(x: u64) -> u8 { x as u8 }\n /// ```\n declare_lint! {\n-    pub CAST_POSSIBLE_TRUNCATION, Allow,\n-    \"casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, or `x as i32` where `x: f32`\"\n+    pub CAST_POSSIBLE_TRUNCATION,\n+    Allow,\n+    \"casts that may cause truncation of the value, e.g `x as u8` where `x: u32`, \\\n+     or `x as i32` where `x: f32`\"\n }\n \n /// **What it does:** Checks for casts from an unsigned type to a signed type of\n@@ -288,8 +296,10 @@ declare_lint! {\n /// u32::MAX as i32  // will yield a value of `-1`\n /// ```\n declare_lint! {\n-    pub CAST_POSSIBLE_WRAP, Allow,\n-    \"casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` and `x > i32::MAX`\"\n+    pub CAST_POSSIBLE_WRAP,\n+    Allow,\n+    \"casts that may cause wrapping around the value, e.g `x as i32` where `x: u32` \\\n+     and `x > i32::MAX`\"\n }\n \n /// Returns the size in bits of an integral type.\n@@ -494,8 +504,9 @@ impl LateLintPass for CastPass {\n /// struct Foo { inner: Rc<Vec<Vec<Box<(u32, u32, u32, u32)>>>> }\n /// ```\n declare_lint! {\n-    pub TYPE_COMPLEXITY, Warn,\n-    \"usage of very complex types; recommends factoring out parts into `type` definitions\"\n+    pub TYPE_COMPLEXITY,\n+    Warn,\n+    \"usage of very complex types that might be better factored into `type` definitions\"\n }\n \n #[allow(missing_copy_implementations)]\n@@ -644,8 +655,9 @@ impl<'v> Visitor<'v> for TypeComplexityVisitor {\n /// 'x' as u8\n /// ```\n declare_lint! {\n-    pub CHAR_LIT_AS_U8, Warn,\n-    \"Casting a character literal to u8\"\n+    pub CHAR_LIT_AS_U8,\n+    Warn,\n+    \"casting a character literal to u8\"\n }\n \n pub struct CharLitAsU8;\n@@ -695,9 +707,9 @@ impl LateLintPass for CharLitAsU8 {\n /// 100 > std::i32::MAX\n /// ```\n declare_lint! {\n-    pub ABSURD_EXTREME_COMPARISONS, Warn,\n-    \"a comparison involving a maximum or minimum value involves a case that is always \\\n-    true or always false\"\n+    pub ABSURD_EXTREME_COMPARISONS,\n+    Warn,\n+    \"a comparison with a maximum or minimum value that is always true or false\"\n }\n \n pub struct AbsurdExtremeComparisons;\n@@ -872,7 +884,8 @@ impl LateLintPass for AbsurdExtremeComparisons {\n /// let x : u8 = ...; (x as u32) > 300\n /// ```\n declare_lint! {\n-    pub INVALID_UPCAST_COMPARISONS, Allow,\n+    pub INVALID_UPCAST_COMPARISONS,\n+    Allow,\n     \"a comparison involving an upcast which is always true or false\"\n }\n "}, {"sha": "afe519893a9f86ad77a1677af5f6b389a7c364b6", "filename": "clippy_lints/src/unicode.rs", "status": "modified", "additions": 8, "deletions": 5, "changes": 13, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funicode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funicode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funicode.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -14,7 +14,8 @@ use utils::{snippet, span_help_and_lint};\n ///\n /// **Example:** You don't see it, but there may be a zero-width space somewhere in this text.\n declare_lint! {\n-    pub ZERO_WIDTH_SPACE, Deny,\n+    pub ZERO_WIDTH_SPACE,\n+    Deny,\n     \"using a zero-width space in a string literal, which is confusing\"\n }\n \n@@ -33,9 +34,10 @@ declare_lint! {\n /// let x = \"H\u00e4?\"\n /// ```\n declare_lint! {\n-    pub NON_ASCII_LITERAL, Allow,\n-    \"using any literal non-ASCII chars in a string literal; suggests \\\n-     using the `\\\\u` escape instead\"\n+    pub NON_ASCII_LITERAL,\n+    Allow,\n+    \"using any literal non-ASCII chars in a string literal instead of \\\n+     using the `\\\\u` escape\"\n }\n \n /// **What it does:** Checks for string literals that contain Unicode in a form\n@@ -50,7 +52,8 @@ declare_lint! {\n /// **Example:** You may not see it, but \u201ca\u0300\u201d and \u201c\u00e0\u201d aren't the same string. The\n /// former when escaped is actually `\"a\\u{300}\"` while the latter is `\"\\u{e0}\"`.\n declare_lint! {\n-    pub UNICODE_NOT_NFC, Allow,\n+    pub UNICODE_NOT_NFC,\n+    Allow,\n     \"using a unicode literal not in NFC normal form (see \\\n      [unicode tr15](http://www.unicode.org/reports/tr15/) for further information)\"\n }"}, {"sha": "8d5e01db570f99012f3b1ab1981e350884b10840", "filename": "clippy_lints/src/unsafe_removed_from_name.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funsafe_removed_from_name.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -23,7 +23,7 @@ use utils::span_lint;\n declare_lint! {\n     pub UNSAFE_REMOVED_FROM_NAME,\n     Warn,\n-    \"unsafe removed from name\"\n+    \"`unsafe` removed from API names on import\"\n }\n \n pub struct UnsafeNameRemoval;"}, {"sha": "899fc940cf13dfda746a2d28ae4a385cb34566d6", "filename": "clippy_lints/src/unused_label.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funused_label.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Funused_label.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Funused_label.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -24,7 +24,7 @@ use utils::{in_macro, span_lint};\n declare_lint! {\n     pub UNUSED_LABEL,\n     Warn,\n-    \"unused label\"\n+    \"unused labels\"\n }\n \n pub struct UnusedLabel;"}, {"sha": "443d433e1d368ecfdc197bf14ff3022ed5431424", "filename": "clippy_lints/src/utils/internal_lints.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Finternal_lints.rs?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -11,8 +11,9 @@ use syntax::ast::*;\n ///\n /// **Example:** Wrong ordering of the util::paths constants.\n declare_lint! {\n-    pub CLIPPY_LINTS_INTERNAL, Allow,\n-    \"Various things that will negatively affect your clippy experience\"\n+    pub CLIPPY_LINTS_INTERNAL,\n+    Allow,\n+    \"various things that will negatively affect your clippy experience\"\n }\n \n "}, {"sha": "965d7e272c5b10b25ef16e29c4e250619f98f395", "filename": "util/update_lints.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/b91c1a509ef714f19c33bda500106d37fcdbb176/util%2Fupdate_lints.py", "raw_url": "https://github.com/rust-lang/rust/raw/b91c1a509ef714f19c33bda500106d37fcdbb176/util%2Fupdate_lints.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/util%2Fupdate_lints.py?ref=b91c1a509ef714f19c33bda500106d37fcdbb176", "patch": "@@ -72,7 +72,7 @@ def gen_table(lints, link=None):\n     w_name = max(len(l[1]) for l in lints)\n     w_desc = max(len(l[3]) for l in lints)\n     # header and underline\n-    yield '%-*s | default | meaning\\n' % (w_name, 'name')\n+    yield '%-*s | default | triggers on\\n' % (w_name, 'name')\n     yield '%s-|-%s-|-%s\\n' % ('-' * w_name, '-' * 7, '-' * w_desc)\n     # one table row per lint\n     for (_, name, default, meaning) in sorted(lints, key=lambda l: l[1]):"}]}