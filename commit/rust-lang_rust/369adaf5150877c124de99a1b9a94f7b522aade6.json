{"sha": "369adaf5150877c124de99a1b9a94f7b522aade6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjM2OWFkYWY1MTUwODc3YzEyNGRlOTlhMWI5YTk0ZjdiNTIyYWFkZTY=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-12T14:37:52Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2015-02-16T15:55:37Z"}, "message": "Implement the rules for RFC 599, and add various tests.\nFixes #22211.", "tree": {"sha": "6a8524bd83db4dc3e2f082a63556e4d715d0fe27", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6a8524bd83db4dc3e2f082a63556e4d715d0fe27"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/369adaf5150877c124de99a1b9a94f7b522aade6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/369adaf5150877c124de99a1b9a94f7b522aade6", "html_url": "https://github.com/rust-lang/rust/commit/369adaf5150877c124de99a1b9a94f7b522aade6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/369adaf5150877c124de99a1b9a94f7b522aade6/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ab579883f27e511d6325f7b20dbc147ad0ecef6f", "url": "https://api.github.com/repos/rust-lang/rust/commits/ab579883f27e511d6325f7b20dbc147ad0ecef6f", "html_url": "https://github.com/rust-lang/rust/commit/ab579883f27e511d6325f7b20dbc147ad0ecef6f"}], "stats": {"total": 610, "additions": 542, "deletions": 68}, "files": [{"sha": "dd814962c71f903986b3817cf50377d934acc7f5", "filename": "src/librustc_typeck/astconv.rs", "status": "modified", "additions": 55, "deletions": 16, "changes": 71, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Flibrustc_typeck%2Fastconv.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Flibrustc_typeck%2Fastconv.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fastconv.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -438,23 +438,25 @@ fn convert_angle_bracketed_parameters<'tcx>(this: &AstConv<'tcx>,\n {\n     let regions: Vec<_> =\n         data.lifetimes.iter()\n-        .map(|l| ast_region_to_region(this.tcx(), l))\n-        .collect();\n+                      .map(|l| ast_region_to_region(this.tcx(), l))\n+                      .collect();\n \n     let region_substs =\n         create_region_substs(this, rscope, span, decl_generics, regions);\n \n     let types: Vec<_> =\n         data.types.iter()\n-        .map(|t| ast_ty_to_ty(this, rscope, &**t))\n-        .collect();\n+                  .enumerate()\n+                  .map(|(i,t)| ast_ty_arg_to_ty(this, rscope, decl_generics,\n+                                                i, &region_substs, t))\n+                  .collect();\n \n     let assoc_bindings: Vec<_> =\n         data.bindings.iter()\n-        .map(|b| ConvertedBinding { item_name: b.ident.name,\n-                                    ty: ast_ty_to_ty(this, rscope, &*b.ty),\n-                                    span: b.span })\n-        .collect();\n+                     .map(|b| ConvertedBinding { item_name: b.ident.name,\n+                                                 ty: ast_ty_to_ty(this, rscope, &*b.ty),\n+                                                 span: b.span })\n+                     .collect();\n \n     (region_substs, types, assoc_bindings)\n }\n@@ -525,9 +527,11 @@ fn convert_parenthesized_parameters<'tcx>(this: &AstConv<'tcx>,\n         create_region_substs(this, rscope, span, decl_generics, Vec::new());\n \n     let binding_rscope = BindingRscope::new();\n-    let inputs = data.inputs.iter()\n-                            .map(|a_t| ast_ty_to_ty(this, &binding_rscope, &**a_t))\n-                            .collect::<Vec<Ty<'tcx>>>();\n+    let inputs =\n+        data.inputs.iter()\n+                   .map(|a_t| ast_ty_arg_to_ty(this, &binding_rscope, decl_generics,\n+                                               0, &region_substs, a_t))\n+                   .collect::<Vec<Ty<'tcx>>>();\n \n     let input_params: Vec<_> = repeat(String::new()).take(inputs.len()).collect();\n     let (implied_output_region,\n@@ -655,7 +659,7 @@ fn ast_path_to_trait_ref<'a,'tcx>(\n \n     let (regions, types, assoc_bindings) = match path.segments.last().unwrap().parameters {\n         ast::AngleBracketedParameters(ref data) => {\n-            // For now, require that parenthetical5D notation be used\n+            // For now, require that parenthetical notation be used\n             // only with `Fn()` etc.\n             if !this.tcx().sess.features.borrow().unboxed_closures && trait_def.paren_sugar {\n                 span_err!(this.tcx().sess, path.span, E0215,\n@@ -1070,10 +1074,45 @@ fn qpath_to_ty<'tcx>(this: &AstConv<'tcx>,\n                              qpath.item_path.identifier.name);\n }\n \n-// Parses the programmer's textual representation of a type into our\n-// internal notion of a type.\n-pub fn ast_ty_to_ty<'tcx>(\n-        this: &AstConv<'tcx>, rscope: &RegionScope, ast_ty: &ast::Ty) -> Ty<'tcx>\n+/// Convert a type supplied as value for a type argument from AST into our\n+/// our internal representation. This is the same as `ast_ty_to_ty` but that\n+/// it applies the object lifetime default.\n+///\n+/// # Parameters\n+///\n+/// * `this`, `rscope`: the surrounding context\n+/// * `decl_generics`: the generics of the struct/enum/trait declaration being\n+///   referenced\n+/// * `index`: the index of the type parameter being instantiated from the list\n+///   (we assume it is in the `TypeSpace`)\n+/// * `region_substs`: a partial substitution consisting of\n+///   only the region type parameters being supplied to this type.\n+/// * `ast_ty`: the ast representation of the type being supplied\n+pub fn ast_ty_arg_to_ty<'tcx>(this: &AstConv<'tcx>,\n+                              rscope: &RegionScope,\n+                              decl_generics: &ty::Generics<'tcx>,\n+                              index: usize,\n+                              region_substs: &Substs<'tcx>,\n+                              ast_ty: &ast::Ty)\n+                              -> Ty<'tcx>\n+{\n+    let tcx = this.tcx();\n+\n+    if let Some(def) = decl_generics.types.opt_get(TypeSpace, index) {\n+        let object_lifetime_default = def.object_lifetime_default.subst(tcx, region_substs);\n+        let rscope1 = &ObjectLifetimeDefaultRscope::new(rscope, object_lifetime_default);\n+        ast_ty_to_ty(this, rscope1, ast_ty)\n+    } else {\n+        ast_ty_to_ty(this, rscope, ast_ty)\n+    }\n+}\n+\n+/// Parses the programmer's textual representation of a type into our\n+/// internal notion of a type.\n+pub fn ast_ty_to_ty<'tcx>(this: &AstConv<'tcx>,\n+                          rscope: &RegionScope,\n+                          ast_ty: &ast::Ty)\n+                          -> Ty<'tcx>\n {\n     debug!(\"ast_ty_to_ty(ast_ty={})\",\n            ast_ty.repr(this.tcx()));"}, {"sha": "09d7293a3d0c020202b99da5a11299e531d68e74", "filename": "src/test/compile-fail/issue-11374.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-11374.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -12,7 +12,7 @@ use std::old_io;\n use std::vec;\n \n pub struct Container<'a> {\n-    reader: &'a mut Reader //~ ERROR explicit lifetime bound required\n+    reader: &'a mut Reader\n }\n \n impl<'a> Container<'a> {\n@@ -33,5 +33,5 @@ pub fn for_stdin<'a>() -> Container<'a> {\n fn main() {\n     let mut c = for_stdin();\n     let mut v = Vec::new();\n-    c.read_to(v);\n+    c.read_to(v); //~ ERROR mismatched types\n }"}, {"sha": "81424577d491bce1c04a2d7b29e452117bb35c1e", "filename": "src/test/compile-fail/issue-5216.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fissue-5216.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -9,12 +9,12 @@\n // except according to those terms.\n \n fn f() { }\n-struct S(Box<FnMut()>); //~ ERROR explicit lifetime bound required\n-pub static C: S = S(f);\n+struct S(Box<FnMut()>);\n+pub static C: S = S(f); //~ ERROR mismatched types\n \n \n fn g() { }\n-type T = Box<FnMut()>;  //~ ERROR explicit lifetime bound required\n-pub static D: T = g;\n+type T = Box<FnMut()>;\n+pub static D: T = g; //~ ERROR mismatched types\n \n fn main() {}"}, {"sha": "c899232b7338d9a23851f7a78042a78eeef47bb6", "filename": "src/test/compile-fail/object-lifetime-default-ambiguous.rs", "status": "added", "additions": 60, "deletions": 0, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-ambiguous.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,60 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that if a struct declares multiple region bounds for a given\n+// type parameter, an explicit lifetime bound is required on object\n+// lifetimes within.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct Ref0<T:?Sized> {\n+    r: *mut T\n+}\n+\n+struct Ref1<'a,T:'a+?Sized> {\n+    r: &'a T\n+}\n+\n+struct Ref2<'a,'b:'a,T:'a+'b+?Sized> {\n+    r: &'a &'b T\n+}\n+\n+fn a<'a,'b>(t: Ref2<'a,'b,Test>) {\n+    //~^ ERROR lifetime bound for this object type cannot be deduced from context\n+}\n+\n+fn b(t: Ref2<Test>) {\n+    //~^ ERROR lifetime bound for this object type cannot be deduced from context\n+}\n+\n+fn c(t: Ref2<&Test>) {\n+    // In this case, the &'a overrides.\n+}\n+\n+fn d(t: Ref2<Ref1<Test>>) {\n+    // In this case, the lifetime parameter from the Ref1 overrides.\n+}\n+\n+fn e(t: Ref2<Ref0<Test>>) {\n+    //~^ ERROR lifetime bound for this object type cannot be deduced from context\n+    //\n+    // In this case, Ref0 just inherits.\n+}\n+\n+fn f(t: &Ref2<Test>) {\n+    //~^ ERROR lifetime bound for this object type cannot be deduced from context\n+}\n+\n+fn main() {\n+}"}, {"sha": "0077d10e6ca826e4a8312615a66b3837817c0fae", "filename": "src/test/compile-fail/object-lifetime-default-elision.rs", "status": "added", "additions": 89, "deletions": 0, "changes": 89, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-elision.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,89 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test various cases where the old rules under lifetime elision\n+// yield slightly different results than the new rules.\n+\n+#![allow(dead_code)]\n+\n+trait SomeTrait {\n+    fn dummy(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    r: Box<SomeTrait+'a>\n+}\n+\n+fn deref<T>(ss: &T) -> T {\n+    // produces the type of a deref without worrying about whether a\n+    // move out would actually be legal\n+    loop { }\n+}\n+\n+fn load0<'a>(ss: &'a Box<SomeTrait>) -> Box<SomeTrait> {\n+    // Under old rules, the fully elaborated types of input/output were:\n+    //\n+    // for<'a,'b> fn(&'a Box<SomeTrait+'b>) -> Box<SomeTrait+'a>\n+    //\n+    // Under new rules the result is:\n+    //\n+    // for<'a> fn(&'a Box<SomeTrait+'a>) -> Box<SomeTrait+'static>\n+    //\n+    // Therefore, we get a type error attempting to return `deref(ss)`\n+    // since `SomeTrait+'a <: SomeTrait+'static` does not hold.\n+\n+    deref(ss)\n+        //~^ ERROR cannot infer\n+}\n+\n+fn load1(ss: &SomeTrait) -> &SomeTrait {\n+    // Under old rules, the fully elaborated types of input/output were:\n+    //\n+    // for<'a,'b> fn(&'a (SomeTrait+'b)) -> &'a (SomeTrait+'a)\n+    //\n+    // Under new rules the result is:\n+    //\n+    // for<'a> fn(&'a (SomeTrait+'a)) -> &'a (SomeTrait+'a)\n+    //\n+    // In both cases, returning `ss` is legal.\n+\n+    ss\n+}\n+\n+fn load2<'a>(ss: &'a SomeTrait) -> &SomeTrait {\n+    // Same as `load1` but with an explicit name thrown in for fun.\n+\n+    ss\n+}\n+\n+fn load3<'a,'b>(ss: &'a SomeTrait) -> &'b SomeTrait {\n+    // Under old rules, the fully elaborated types of input/output were:\n+    //\n+    // for<'a,'b,'c>fn(&'a (SomeTrait+'c)) -> &'b (SomeTrait+'a)\n+    //\n+    // Based on the input/output types, the compiler could infer that\n+    //     'c : 'a\n+    //     'b : 'a\n+    // must hold, and therefore it permitted `&'a (Sometrait+'c)` to be\n+    // coerced to `&'b (SomeTrait+'a)`.\n+    //\n+    // Under the newer defaults, though, we get:\n+    //\n+    // for<'a,'b> fn(&'a (SomeTrait+'a)) -> &'b (SomeTrait+'b)\n+    //\n+    // which fails to type check.\n+\n+    ss\n+        //~^ ERROR cannot infer\n+        //~| ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "70752cbfda19f11396ec29a6c288a365e1da3336", "filename": "src/test/compile-fail/object-lifetime-default-from-box-error.rs", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-from-box-error.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,45 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test various cases where the defaults should lead to errors being\n+// reported.\n+\n+#![allow(dead_code)]\n+\n+trait SomeTrait {\n+    fn dummy(&self) { }\n+}\n+\n+struct SomeStruct<'a> {\n+    r: Box<SomeTrait+'a>\n+}\n+\n+fn load(ss: &mut SomeStruct) -> Box<SomeTrait> {\n+    // `Box<SomeTrait>` defaults to a `'static` bound, so this return\n+    // is illegal.\n+\n+    ss.r //~ ERROR mismatched types\n+}\n+\n+fn store(ss: &mut SomeStruct, b: Box<SomeTrait>) {\n+    // No error: b is bounded by 'static which outlives the\n+    // (anonymous) lifetime on the struct.\n+\n+    ss.r = b;\n+}\n+\n+fn store1<'b>(ss: &mut SomeStruct, b: Box<SomeTrait+'b>) {\n+    // Here we override the lifetimes explicitly, and so naturally we get an error.\n+\n+    ss.r = b; //~ ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "c107c8d131d3a8f01672639bbfda0d7f810d0636", "filename": "src/test/compile-fail/object-lifetime-default-mybox.rs", "status": "added", "additions": 44, "deletions": 0, "changes": 44, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fobject-lifetime-default-mybox.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,44 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test a \"pass-through\" object-lifetime-default that produces errors.\n+\n+#![allow(dead_code)]\n+\n+trait SomeTrait {\n+    fn dummy(&self) { }\n+}\n+\n+struct MyBox<T:?Sized> {\n+    r: Box<T>\n+}\n+\n+fn deref<T>(ss: &T) -> T {\n+    // produces the type of a deref without worrying about whether a\n+    // move out would actually be legal\n+    loop { }\n+}\n+\n+fn load0(ss: &MyBox<SomeTrait>) -> MyBox<SomeTrait> {\n+    deref(ss) //~ ERROR cannot infer\n+}\n+\n+fn load1<'a,'b>(a: &'a MyBox<SomeTrait>,\n+                b: &'b MyBox<SomeTrait>)\n+                -> &'b MyBox<SomeTrait>\n+{\n+    a\n+      //~^ ERROR cannot infer\n+      //~| ERROR mismatched types\n+      //~| ERROR mismatched types\n+}\n+\n+fn main() {\n+}"}, {"sha": "b8cbbdbe9ec3e93c30461e13e3c8fab1ed550658", "filename": "src/test/compile-fail/region-bounds-on-objects-and-type-parameters.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-bounds-on-objects-and-type-parameters.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -25,7 +25,7 @@ struct Foo<'a,'b,'c> {\n     c: Box<Is<'a>>,\n     d: Box<IsSend>,\n     e: Box<Is<'a>+Send>, // we can derive two bounds, but one is 'static, so ok\n-    f: Box<SomeTrait>, //~ ERROR explicit lifetime bound required\n+    f: Box<SomeTrait>,   // OK, defaults to 'static due to RFC 599.\n     g: Box<SomeTrait+'a>,\n \n     z: Box<Is<'a>+'b+'c>, //~ ERROR only a single explicit lifetime bound is permitted"}, {"sha": "bb37d55fb08d067157623166d9ee1bce52b813a6", "filename": "src/test/compile-fail/region-object-lifetime-1.rs", "status": "modified", "additions": 4, "deletions": 25, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-1.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -11,6 +11,8 @@\n // Various tests related to testing how region inference works\n // with respect to the object receivers.\n \n+#![allow(warnings)]\n+\n trait Foo {\n     fn borrowed<'a>(&'a self) -> &'a ();\n }\n@@ -21,29 +23,6 @@ fn borrowed_receiver_same_lifetime<'a>(x: &'a Foo) -> &'a () {\n     x.borrowed()\n }\n \n-// Borrowed receiver but two distinct lifetimes, we get an error.\n-fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n-    x.borrowed() //~ ERROR cannot infer\n-}\n-\n-// Borrowed receiver with two distinct lifetimes, but we know that\n-// 'b:'a, hence &'a () is permitted.\n-fn borrowed_receiver_related_lifetimes<'a,'b>(x: &'a (Foo+'b)) -> &'a () {\n-    x.borrowed()\n-}\n-\n-// Here we have two distinct lifetimes, but we try to return a pointer\n-// with the longer lifetime when (from the signature) we only know\n-// that it lives as long as the shorter lifetime. Therefore, error.\n-fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (Foo+'b)) -> &'b () {\n-    x.borrowed() //~ ERROR cannot infer\n-}\n-\n-// Here, the object is bounded by an anonymous lifetime and returned\n-// as `&'static`, so you get an error.\n-fn owned_receiver(x: Box<Foo>) -> &'static () {\n-    x.borrowed() //~ ERROR cannot infer\n-}\n-\n-fn main() {}\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful\n "}, {"sha": "f9bf4e257b3638188003768a744bad8ead6526b8", "filename": "src/test/compile-fail/region-object-lifetime-2.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-2.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various tests related to testing how region inference works\n+// with respect to the object receivers.\n+\n+trait Foo {\n+    fn borrowed<'a>(&'a self) -> &'a ();\n+}\n+\n+// Borrowed receiver but two distinct lifetimes, we get an error.\n+fn borrowed_receiver_different_lifetimes<'a,'b>(x: &'a Foo) -> &'b () {\n+    x.borrowed() //~ ERROR cannot infer\n+}\n+\n+fn main() {}\n+"}, {"sha": "7f00334f67e9f750c29fadda423b0b1fdf311d33", "filename": "src/test/compile-fail/region-object-lifetime-3.rs", "status": "added", "additions": 28, "deletions": 0, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-3.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,28 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various tests related to testing how region inference works\n+// with respect to the object receivers.\n+\n+#![allow(warnings)]\n+\n+trait Foo {\n+    fn borrowed<'a>(&'a self) -> &'a ();\n+}\n+\n+// Borrowed receiver with two distinct lifetimes, but we know that\n+// 'b:'a, hence &'a () is permitted.\n+fn borrowed_receiver_related_lifetimes<'a,'b>(x: &'a (Foo+'b)) -> &'a () {\n+    x.borrowed()\n+}\n+\n+#[rustc_error]\n+fn main() {} //~ ERROR compilation successful\n+"}, {"sha": "fe0ff8dc3fe5d2d9e38d96d23479e9915b50fd87", "filename": "src/test/compile-fail/region-object-lifetime-4.rs", "status": "added", "additions": 26, "deletions": 0, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-4.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,26 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various tests related to testing how region inference works\n+// with respect to the object receivers.\n+\n+trait Foo {\n+    fn borrowed<'a>(&'a self) -> &'a ();\n+}\n+\n+// Here we have two distinct lifetimes, but we try to return a pointer\n+// with the longer lifetime when (from the signature) we only know\n+// that it lives as long as the shorter lifetime. Therefore, error.\n+fn borrowed_receiver_related_lifetimes2<'a,'b>(x: &'a (Foo+'b)) -> &'b () {\n+    x.borrowed() //~ ERROR cannot infer\n+}\n+\n+fn main() {}\n+"}, {"sha": "f07f753d82529965f2b306eda2f2513c8c050f2d", "filename": "src/test/compile-fail/region-object-lifetime-5.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-5.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-5.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-5.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2012-2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Various tests related to testing how region inference works\n+// with respect to the object receivers.\n+\n+trait Foo {\n+    fn borrowed<'a>(&'a self) -> &'a ();\n+}\n+\n+// Here, the object is bounded by an anonymous lifetime and returned\n+// as `&'static`, so you get an error.\n+fn owned_receiver(x: Box<Foo>) -> &'static () {\n+    x.borrowed() //~ ERROR `*x` does not live long enough\n+}\n+\n+fn main() {}\n+"}, {"sha": "cf1e516901cfc4f3c717f8b41ffca97b0f5baab5", "filename": "src/test/compile-fail/region-object-lifetime-in-coercion.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregion-object-lifetime-in-coercion.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -26,7 +26,9 @@ fn b(v: &[u8]) -> Box<Foo + 'static> {\n }\n \n fn c(v: &[u8]) -> Box<Foo> {\n-    box v // OK thanks to lifetime elision\n+    // same as previous case due to RFC 599\n+\n+    box v //~ ERROR declared lifetime bound not satisfied\n }\n \n fn d<'a,'b>(v: &'a [u8]) -> Box<Foo+'b> {"}, {"sha": "7a0e3cf4611c7156e0ef22218d2b3023a3449d2d", "filename": "src/test/compile-fail/regions-close-object-into-object-1.rs", "status": "renamed", "additions": 2, "deletions": 13, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-1.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -9,6 +9,7 @@\n // except according to those terms.\n \n #![feature(box_syntax)]\n+#![allow(warnings)]\n \n trait A<T> {}\n struct B<'a, T>(&'a (A<T>+'a));\n@@ -17,19 +18,7 @@ trait X {}\n impl<'a, T> X for B<'a, T> {}\n \n fn f<'a, T, U>(v: Box<A<T>+'static>) -> Box<X+'static> {\n-    box B(&*v) as Box<X>\n-}\n-\n-fn g<'a, T: 'static>(v: Box<A<T>>) -> Box<X+'static> {\n-    box B(&*v) as Box<X> //~ ERROR cannot infer\n-}\n-\n-fn h<'a, T, U>(v: Box<A<U>+'static>) -> Box<X+'static> {\n-    box B(&*v) as Box<X>\n-}\n-\n-fn i<'a, T, U>(v: Box<A<U>>) -> Box<X+'static> {\n-    box B(&*v) as Box<X> //~ ERROR cannot infer\n+    box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n }\n \n fn main() {}", "previous_filename": "src/test/compile-fail/regions-close-object-into-object.rs"}, {"sha": "7861fb95fef666d315e46f2b989199eea7a8038c", "filename": "src/test/compile-fail/regions-close-object-into-object-2.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-2.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+\n+trait A<T> {}\n+struct B<'a, T>(&'a (A<T>+'a));\n+\n+trait X {}\n+impl<'a, T> X for B<'a, T> {}\n+\n+fn g<'a, T: 'static>(v: Box<A<T>+'a>) -> Box<X+'static> {\n+    box B(&*v) as Box<X> //~ ERROR cannot infer\n+}\n+\n+fn main() { }"}, {"sha": "31354de2a27df7aac0a0ac73c4dbf7130a6daf46", "filename": "src/test/compile-fail/regions-close-object-into-object-3.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-3.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+#![allow(warnings)]\n+\n+trait A<T> {}\n+struct B<'a, T>(&'a (A<T>+'a));\n+\n+trait X {}\n+impl<'a, T> X for B<'a, T> {}\n+\n+fn h<'a, T, U>(v: Box<A<U>+'static>) -> Box<X+'static> {\n+    box B(&*v) as Box<X> //~ ERROR `*v` does not live long enough\n+}\n+\n+fn main() {}\n+"}, {"sha": "c60975f97e13d5dd07e24c03ec7cfc542fc994f9", "filename": "src/test/compile-fail/regions-close-object-into-object-4.rs", "status": "added", "additions": 24, "deletions": 0, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fregions-close-object-into-object-4.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,24 @@\n+// Copyright 2014 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(box_syntax)]\n+\n+trait A<T> {}\n+struct B<'a, T>(&'a (A<T>+'a));\n+\n+trait X {}\n+impl<'a, T> X for B<'a, T> {}\n+\n+fn i<'a, T, U>(v: Box<A<U>+'a>) -> Box<X+'static> {\n+    box B(&*v) as Box<X> //~ ERROR cannot infer\n+}\n+\n+fn main() {}\n+"}, {"sha": "44b049d6561d5f7cbdc2e4dd681b659a577187ba", "filename": "src/test/compile-fail/seq-args.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fseq-args.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fseq-args.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -14,7 +14,7 @@ trait seq { }\n impl<T> seq<T> for Vec<T> { //~ ERROR wrong number of type arguments\n     /* ... */\n }\n-impl seq<bool> for u32 {\n+impl seq<bool> for u32 { //~ ERROR wrong number of type arguments\n    /* Treat the integer as a sequence of bits */\n }\n "}, {"sha": "c276228b18ee3552cadd01ab33491abcb2828759", "filename": "src/test/compile-fail/structure-constructor-type-mismatch.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fstructure-constructor-type-mismatch.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -57,6 +57,7 @@ fn main() {\n \n     let pt3 = PointF::<i32> {\n         //~^ ERROR wrong number of type arguments\n+        //~| ERROR structure constructor specifies a structure of type\n         x: 9i32,\n         y: 10i32,\n     };"}, {"sha": "89e89cf82469391d4de8f1bd89799aea061385e0", "filename": "src/test/compile-fail/trait-bounds-cant-coerce.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-cant-coerce.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -22,7 +22,7 @@ fn c(x: Box<Foo+Sync+Send>) {\n fn d(x: Box<Foo>) {\n     a(x); //~  ERROR mismatched types\n           //~| expected `Box<Foo + Send>`\n-          //~| found `Box<Foo>`\n+          //~| found `Box<Foo + 'static>`\n           //~| expected bounds `Send`\n           //~| found no bounds\n }"}, {"sha": "3d264e681a3d25c6b0ea5d7f88e24068dcecdf38", "filename": "src/test/compile-fail/trait-bounds-sugar.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Ftrait-bounds-sugar.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -24,8 +24,7 @@ fn c(x: Box<Foo+Sync>) {\n }\n \n fn d(x: &'static (Foo+Sync)) {\n-    b(x); //~ ERROR cannot infer\n-    //~^ ERROR mismatched types\n+    b(x);\n }\n \n fn main() {}"}, {"sha": "9f0682df3fe443c70b639a85a9515b06067ab5ed", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters-3.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -12,7 +12,9 @@\n \n trait Three<A,B,C> { fn dummy(&self) -> (A,B,C); }\n \n-fn foo(_: &Three()) //~ ERROR wrong number of type arguments\n+fn foo(_: &Three())\n+//~^ ERROR wrong number of type arguments\n+//~| ERROR no associated type `Output`\n {}\n \n fn main() { }"}, {"sha": "40635cf3ddda32ca7bd689f94c011bad1eaa42e3", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-number-number-type-parameters.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-number-number-type-parameters.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -12,7 +12,9 @@\n \n trait Zero { fn dummy(&self); }\n \n-fn foo(_: Zero()) //~ ERROR wrong number of type arguments\n+fn foo(_: Zero())\n+    //~^ ERROR wrong number of type arguments\n+    //~| ERROR no associated type `Output` defined in `Zero`\n {}\n \n fn main() { }"}, {"sha": "5810ffcf21ab69e569974f9aa8fee6f92a6f810e", "filename": "src/test/compile-fail/unboxed-closure-sugar-wrong-trait.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Funboxed-closure-sugar-wrong-trait.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -14,6 +14,7 @@ trait Trait {}\n \n fn f<F:Trait(isize) -> isize>(x: F) {}\n //~^ ERROR wrong number of type arguments: expected 0, found 1\n+//~| ERROR no associated type `Output`\n \n fn main() {}\n "}, {"sha": "24da9603679065f404866242f82aa9210200de87", "filename": "src/test/run-pass/object-lifetime-default-from-ref-struct.rs", "status": "added", "additions": 47, "deletions": 0, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-ref-struct.rs", "raw_url": "https://github.com/rust-lang/rust/raw/369adaf5150877c124de99a1b9a94f7b522aade6/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-ref-struct.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fobject-lifetime-default-from-ref-struct.rs?ref=369adaf5150877c124de99a1b9a94f7b522aade6", "patch": "@@ -0,0 +1,47 @@\n+// Copyright 2015 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Test that the lifetime of the enclosing `&` is used for the object\n+// lifetime bound.\n+\n+#![allow(dead_code)]\n+\n+trait Test {\n+    fn foo(&self) { }\n+}\n+\n+struct Ref<'a,T:'a+?Sized> {\n+    r: &'a T\n+}\n+\n+struct SomeStruct<'a> {\n+    t: Ref<'a,Test>,\n+    u: Ref<'a,Test+'a>,\n+}\n+\n+fn a<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn b<'a>(t: Ref<'a,Test>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+fn c<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.t = t;\n+}\n+\n+fn d<'a>(t: Ref<'a,Test+'a>, mut ss: SomeStruct<'a>) {\n+    ss.u = t;\n+}\n+\n+\n+fn main() {\n+}"}]}