{"sha": "e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "node_id": "MDY6Q29tbWl0NzI0NzEyOmU1Mjg4YzlkNmM1NGM0MDE0YjEyYzRlZDAyMDI4ZjFlMTZjMjM1NmI=", "commit": {"author": {"name": "Mark Simulacrum", "email": "mark.simulacrum@gmail.com", "date": "2017-07-12T12:58:45Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2017-07-12T12:58:45Z"}, "message": "Rollup merge of #43011 - qnighy:unsized-tuple-impls, r=aturon\n\nImplement Eq/Hash/Debug etc. for unsized tuples.\n\nAs I mentioned in [the comment in #18469](https://github.com/rust-lang/rust/issues/18469#issuecomment-306767422), the implementations of `PartialEq`, `Eq`, `PartialOrd`, `Ord`, `Debug`, `Hash` can be generalized to unsized tuples.\n\nThis is consistent with the `derive` behavior for unsized structs.\n\n```rust\n#[derive(Clone, Copy, PartialEq, Eq, PartialOrd, Ord, Debug, Default, Hash)]\nstruct MyTuple<X, Y, Z: ?Sized>(X, Y, Z);\n\nfn f(x: &MyTuple<i32, i32, [i32]>) {\n    x == x;\n    x < x;\n    println!(\"{:?}\", x);\n}\n```\n\nQuestions:\n\n- Need an RFC?\n- Need a feature gate? I don't think it does because the unsized tuple coercion #42527 is feature-gated.\n- I changed `builder.field($name);` into `builder.field(&$name);` in the `Debug` implementation to pass compilation. This won't affect the behavior because `Debug for &'a T` is a mere redirection to `Debug for T`. However, I don't know if it affects code size / performance.", "tree": {"sha": "d1b15e18e12a5e6055fc175b0c41fbeecf085071", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d1b15e18e12a5e6055fc175b0c41fbeecf085071"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "html_url": "https://github.com/rust-lang/rust/commit/e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3", "html_url": "https://github.com/rust-lang/rust/commit/1a7dc0a2cb8ddf8c767dafb288069ceed7ab92e3"}, {"sha": "728d26c8861265c15d997117be31ca2b9d3fa44b", "url": "https://api.github.com/repos/rust-lang/rust/commits/728d26c8861265c15d997117be31ca2b9d3fa44b", "html_url": "https://github.com/rust-lang/rust/commit/728d26c8861265c15d997117be31ca2b9d3fa44b"}], "stats": {"total": 59, "additions": 52, "deletions": 7}, "files": [{"sha": "750e86114c4bb057446f1024dcaff0a22d7b066d", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 7, "deletions": 2, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "patch": "@@ -1627,13 +1627,13 @@ macro_rules! tuple {\n     () => ();\n     ( $($name:ident,)+ ) => (\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-        impl<$($name:Debug),*> Debug for ($($name,)*) {\n+        impl<$($name:Debug),*> Debug for ($($name,)*) where last_type!($($name,)+): ?Sized {\n             #[allow(non_snake_case, unused_assignments, deprecated)]\n             fn fmt(&self, f: &mut Formatter) -> Result {\n                 let mut builder = f.debug_tuple(\"\");\n                 let ($(ref $name,)*) = *self;\n                 $(\n-                    builder.field($name);\n+                    builder.field(&$name);\n                 )*\n \n                 builder.finish()\n@@ -1643,6 +1643,11 @@ macro_rules! tuple {\n     )\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple! { T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, }\n \n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "2000ba91460292347aa9c04930347f4a907a17b4", "filename": "src/libcore/hash/mod.rs", "status": "modified", "additions": 6, "deletions": 1, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Fhash%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Fhash%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fhash%2Fmod.rs?ref=e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "patch": "@@ -559,7 +559,7 @@ mod impls {\n \n         ( $($name:ident)+) => (\n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($name: Hash),*> Hash for ($($name,)*) {\n+            impl<$($name: Hash),*> Hash for ($($name,)*) where last_type!($($name,)+): ?Sized {\n                 #[allow(non_snake_case)]\n                 fn hash<S: Hasher>(&self, state: &mut S) {\n                     let ($(ref $name,)*) = *self;\n@@ -569,6 +569,11 @@ mod impls {\n         );\n     }\n \n+    macro_rules! last_type {\n+        ($a:ident,) => { $a };\n+        ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+    }\n+\n     impl_hash_tuple! {}\n     impl_hash_tuple! { A }\n     impl_hash_tuple! { A B }"}, {"sha": "47e9c7c903880ca053555e1a91731551077e6160", "filename": "src/libcore/tuple.rs", "status": "modified", "additions": 10, "deletions": 4, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Ftuple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Flibcore%2Ftuple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftuple.rs?ref=e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "patch": "@@ -29,7 +29,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) {\n+            impl<$($T:PartialEq),+> PartialEq for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn eq(&self, other: &($($T,)+)) -> bool {\n                     $(self.$idx == other.$idx)&&+\n@@ -41,10 +41,11 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Eq),+> Eq for ($($T,)+) {}\n+            impl<$($T:Eq),+> Eq for ($($T,)+) where last_type!($($T,)+): ?Sized {}\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+) {\n+            impl<$($T:PartialOrd + PartialEq),+> PartialOrd for ($($T,)+)\n+                    where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn partial_cmp(&self, other: &($($T,)+)) -> Option<Ordering> {\n                     lexical_partial_cmp!($(self.$idx, other.$idx),+)\n@@ -68,7 +69,7 @@ macro_rules! tuple_impls {\n             }\n \n             #[stable(feature = \"rust1\", since = \"1.0.0\")]\n-            impl<$($T:Ord),+> Ord for ($($T,)+) {\n+            impl<$($T:Ord),+> Ord for ($($T,)+) where last_type!($($T,)+): ?Sized {\n                 #[inline]\n                 fn cmp(&self, other: &($($T,)+)) -> Ordering {\n                     lexical_cmp!($(self.$idx, other.$idx),+)\n@@ -118,6 +119,11 @@ macro_rules! lexical_cmp {\n     ($a:expr, $b:expr) => { ($a).cmp(&$b) };\n }\n \n+macro_rules! last_type {\n+    ($a:ident,) => { $a };\n+    ($a:ident, $($rest_a:ident,)+) => { last_type!($($rest_a,)+) };\n+}\n+\n tuple_impls! {\n     Tuple1 {\n         (0) -> A"}, {"sha": "591b19f89e897898bba9efb4ec979c3e2ee74460", "filename": "src/test/run-pass/unsized-tuple-impls.rs", "status": "added", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e5288c9d6c54c4014b12c4ed02028f1e16c2356b/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Funsized-tuple-impls.rs?ref=e5288c9d6c54c4014b12c4ed02028f1e16c2356b", "patch": "@@ -0,0 +1,29 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(unsized_tuple_coercion)]\n+\n+use std::collections::HashSet;\n+\n+fn main() {\n+    let x : &(i32, i32, [i32]) = &(0, 1, [2, 3]);\n+    let y : &(i32, i32, [i32]) = &(0, 1, [2, 3, 4]);\n+    let mut a = [y, x];\n+    a.sort();\n+    assert_eq!(a, [x, y]);\n+\n+    assert_eq!(&format!(\"{:?}\", a), \"[(0, 1, [2, 3]), (0, 1, [2, 3, 4])]\");\n+\n+    let mut h = HashSet::new();\n+    h.insert(x);\n+    h.insert(y);\n+    assert!(h.contains(x));\n+    assert!(h.contains(y));\n+}"}]}