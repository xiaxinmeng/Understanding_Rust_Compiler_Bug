{"sha": "8c6354ceb905895c9f305716c66d5c7a8e4d0225", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhjNjM1NGNlYjkwNTg5NWM5ZjMwNTcxNmM2NmQ1YzdhOGU0ZDAyMjU=", "commit": {"author": {"name": "unknown", "email": "Mozilla@.(none)", "date": "2011-06-17T22:52:37Z"}, "committer": {"name": "Eric Holk", "email": "eholk@mozilla.com", "date": "2011-06-17T22:53:21Z"}, "message": "Made sure getcwd and friends work well on Windows.", "tree": {"sha": "9b1f779db59ab4732350afc4058c5ce538e2dba8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9b1f779db59ab4732350afc4058c5ce538e2dba8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8c6354ceb905895c9f305716c66d5c7a8e4d0225", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8c6354ceb905895c9f305716c66d5c7a8e4d0225", "html_url": "https://github.com/rust-lang/rust/commit/8c6354ceb905895c9f305716c66d5c7a8e4d0225", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8c6354ceb905895c9f305716c66d5c7a8e4d0225/comments", "author": null, "committer": null, "parents": [{"sha": "7c57b8baf5e71e114da226293f15cd96d5baacac", "url": "https://api.github.com/repos/rust-lang/rust/commits/7c57b8baf5e71e114da226293f15cd96d5baacac", "html_url": "https://github.com/rust-lang/rust/commit/7c57b8baf5e71e114da226293f15cd96d5baacac"}], "stats": {"total": 18, "additions": 14, "deletions": 4}, "files": [{"sha": "f1c175d137c56efeb638c55aa6b7fcd15d6b32f5", "filename": "src/lib/fs.rs", "status": "modified", "additions": 5, "deletions": 4, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Ffs.rs?ref=8c6354ceb905895c9f305716c66d5c7a8e4d0225", "patch": "@@ -1,5 +1,7 @@\n \n import os::getcwd;\n+import os_fs;\n+import str;\n \n native \"rust\" mod rustrt {\n     fn rust_file_is_dir(str path) -> int;\n@@ -58,13 +60,12 @@ fn list_dir(path p) -> vec[str] {\n     ret full_paths;\n }\n \n-// FIXME: Windows absolute paths can start with \\ for C:\\ or\n-// whatever... However, we're under MinGW32 so we have the same rules and\n-// posix has.\n fn path_is_absolute(path p) -> bool {\n-    ret p.(0) == '/';\n+    ret os_fs::path_is_absolute(p);\n }\n \n+// FIXME: under Windows, we should prepend the current drive letter to paths\n+// that start with a slash.\n fn make_absolute(path p) -> path {\n     if(path_is_absolute(p)) {\n         ret p;"}, {"sha": "70296c623aa09e9d272cbdee0db5bbc992614fbf", "filename": "src/lib/posix_fs.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Fposix_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Fposix_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fposix_fs.rs?ref=8c6354ceb905895c9f305716c66d5c7a8e4d0225", "patch": "@@ -32,6 +32,10 @@ fn list_dir(str path) -> vec[str] {\n \n }\n \n+fn path_is_absolute(str p) -> bool {\n+    ret str::char_at(p, 0u) == '/';\n+}\n+\n const char path_sep = '/';\n \n const char alt_path_sep = '/';"}, {"sha": "356bf6048f9d25220d68975278ed0b9a893443af", "filename": "src/lib/win32_fs.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Fwin32_fs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8c6354ceb905895c9f305716c66d5c7a8e4d0225/src%2Flib%2Fwin32_fs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flib%2Fwin32_fs.rs?ref=8c6354ceb905895c9f305716c66d5c7a8e4d0225", "patch": "@@ -7,6 +7,11 @@ native \"rust\" mod rustrt {\n \n fn list_dir(str path) -> vec[str] { ret rustrt::rust_list_files(path + \"*\"); }\n \n+fn path_is_absolute(str p) -> bool {\n+    ret str::char_at(p, 0u) == '/' \n+        || (str::char_at(p, 1u) == ':' && str::char_at(p, 2u) == '\\\\');\n+}\n+\n /* FIXME: win32 path handling actually accepts '/' or '\\' and has subtly\n  * different semantics for each. Since we build on mingw, we are usually\n  * dealing with /-separated paths. But the whole interface to splitting and"}]}