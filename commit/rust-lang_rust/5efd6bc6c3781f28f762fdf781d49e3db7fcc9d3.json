{"sha": "5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "node_id": "C_kwDOAAsO6NoAKDVlZmQ2YmM2YzM3ODFmMjhmNzYyZmRmNzgxZDQ5ZTNkYjdmY2M5ZDM", "commit": {"author": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-09-23T04:22:27Z"}, "committer": {"name": "Jason Newcomb", "email": "jsnewcomb@pm.me", "date": "2021-09-23T05:13:21Z"}, "message": "Don't lint `suspicious_else_formatting` inside proc-macros", "tree": {"sha": "96e6623ea719a1b5b3151a9d3d1b6b0f250bb40e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/96e6623ea719a1b5b3151a9d3d1b6b0f250bb40e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nComment: Created with Krypton\n\niF4EABYKAAYFAmFMDPwACgkQ2lnoZDo37QajXQD9Fn4TKN0nycoGHKAAjD2D5Bll\nf4TncEJzbYgFqjcNMSIA/A3gg8QqfHqmiQaq+NfbO3Kr1QwhhpehXjkokb7HWOwF\n=M/jy\n-----END PGP SIGNATURE-----", "payload": "tree 96e6623ea719a1b5b3151a9d3d1b6b0f250bb40e\nparent 848e5518d66ff2084c10a4c1cfcf5da5e0534033\nauthor Jason Newcomb <jsnewcomb@pm.me> 1632370947 -0400\ncommitter Jason Newcomb <jsnewcomb@pm.me> 1632374001 -0400\n\nDon't lint `suspicious_else_formatting` inside proc-macros\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "html_url": "https://github.com/rust-lang/rust/commit/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3/comments", "author": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Jarcho", "id": 7761774, "node_id": "MDQ6VXNlcjc3NjE3NzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/7761774?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Jarcho", "html_url": "https://github.com/Jarcho", "followers_url": "https://api.github.com/users/Jarcho/followers", "following_url": "https://api.github.com/users/Jarcho/following{/other_user}", "gists_url": "https://api.github.com/users/Jarcho/gists{/gist_id}", "starred_url": "https://api.github.com/users/Jarcho/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Jarcho/subscriptions", "organizations_url": "https://api.github.com/users/Jarcho/orgs", "repos_url": "https://api.github.com/users/Jarcho/repos", "events_url": "https://api.github.com/users/Jarcho/events{/privacy}", "received_events_url": "https://api.github.com/users/Jarcho/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "848e5518d66ff2084c10a4c1cfcf5da5e0534033", "url": "https://api.github.com/repos/rust-lang/rust/commits/848e5518d66ff2084c10a4c1cfcf5da5e0534033", "html_url": "https://github.com/rust-lang/rust/commit/848e5518d66ff2084c10a4c1cfcf5da5e0534033"}], "stats": {"total": 57, "additions": 31, "deletions": 26}, "files": [{"sha": "b4f186525c562ea4cd33c4dcdcf9bddd08ed1d92", "filename": "clippy_lints/src/formatting.rs", "status": "modified", "additions": 31, "deletions": 26, "changes": 57, "blob_url": "https://github.com/rust-lang/rust/blob/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3/clippy_lints%2Fsrc%2Fformatting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3/clippy_lints%2Fsrc%2Fformatting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fformatting.rs?ref=5efd6bc6c3781f28f762fdf781d49e3db7fcc9d3", "patch": "@@ -286,34 +286,39 @@ fn check_array(cx: &EarlyContext<'_>, expr: &Expr) {\n }\n \n fn check_missing_else(cx: &EarlyContext<'_>, first: &Expr, second: &Expr) {\n-    if !differing_macro_contexts(first.span, second.span)\n-        && !first.span.from_expansion()\n-        && is_if(first)\n-        && (is_block(second) || is_if(second))\n-    {\n-        // where the else would be\n-        let else_span = first.span.between(second.span);\n+    if_chain! {\n+        if !differing_macro_contexts(first.span, second.span);\n+        if !first.span.from_expansion();\n+        if let ExprKind::If(cond_expr, ..) = &first.kind;\n+        if is_block(second) || is_if(second);\n \n-        if let Some(else_snippet) = snippet_opt(cx, else_span) {\n-            if !else_snippet.contains('\\n') {\n-                let (looks_like, next_thing) = if is_if(second) {\n-                    (\"an `else if`\", \"the second `if`\")\n-                } else {\n-                    (\"an `else {..}`\", \"the next block\")\n-                };\n+        // Proc-macros can give weird spans. Make sure this is actually an `if`.\n+        if let Some(if_snip) = snippet_opt(cx, first.span.until(cond_expr.span));\n+        if if_snip.starts_with(\"if\");\n \n-                span_lint_and_note(\n-                    cx,\n-                    SUSPICIOUS_ELSE_FORMATTING,\n-                    else_span,\n-                    &format!(\"this looks like {} but the `else` is missing\", looks_like),\n-                    None,\n-                    &format!(\n-                        \"to remove this lint, add the missing `else` or add a new line before {}\",\n-                        next_thing,\n-                    ),\n-                );\n-            }\n+        // If there is a line break between the two expressions, don't lint.\n+        // If there is a non-whitespace character, this span came from a proc-macro.\n+        let else_span = first.span.between(second.span);\n+        if let Some(else_snippet) = snippet_opt(cx, else_span);\n+        if !else_snippet.chars().any(|c| c == '\\n' || !c.is_whitespace());\n+        then {\n+            let (looks_like, next_thing) = if is_if(second) {\n+                (\"an `else if`\", \"the second `if`\")\n+            } else {\n+                (\"an `else {..}`\", \"the next block\")\n+            };\n+\n+            span_lint_and_note(\n+                cx,\n+                SUSPICIOUS_ELSE_FORMATTING,\n+                else_span,\n+                &format!(\"this looks like {} but the `else` is missing\", looks_like),\n+                None,\n+                &format!(\n+                    \"to remove this lint, add the missing `else` or add a new line before {}\",\n+                    next_thing,\n+                ),\n+            );\n         }\n     }\n }"}]}