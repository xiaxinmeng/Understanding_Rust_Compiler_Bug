{"sha": "9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494", "node_id": "MDY6Q29tbWl0NzI0NzEyOjlkOTZhNmQ3YWYwYmY4ZjZjMmU0MmM0YzIwMjM3ZWQwNDQwZjA0OTQ=", "commit": {"author": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-06T00:24:37Z"}, "committer": {"name": "Jonas Schievink", "email": "jonasschievink@gmail.com", "date": "2020-12-06T00:24:37Z"}, "message": "Emit additional diagnostics for hints/help/etc", "tree": {"sha": "fbac86a3fe790d448a3ea763c2d6cf0027843b6c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fbac86a3fe790d448a3ea763c2d6cf0027843b6c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494", "html_url": "https://github.com/rust-lang/rust/commit/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494/comments", "author": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jonas-schievink", "id": 1786438, "node_id": "MDQ6VXNlcjE3ODY0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1786438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jonas-schievink", "html_url": "https://github.com/jonas-schievink", "followers_url": "https://api.github.com/users/jonas-schievink/followers", "following_url": "https://api.github.com/users/jonas-schievink/following{/other_user}", "gists_url": "https://api.github.com/users/jonas-schievink/gists{/gist_id}", "starred_url": "https://api.github.com/users/jonas-schievink/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jonas-schievink/subscriptions", "organizations_url": "https://api.github.com/users/jonas-schievink/orgs", "repos_url": "https://api.github.com/users/jonas-schievink/repos", "events_url": "https://api.github.com/users/jonas-schievink/events{/privacy}", "received_events_url": "https://api.github.com/users/jonas-schievink/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8d5aa08712e782f22f04525f291ec74dae183568", "url": "https://api.github.com/repos/rust-lang/rust/commits/8d5aa08712e782f22f04525f291ec74dae183568", "html_url": "https://github.com/rust-lang/rust/commit/8d5aa08712e782f22f04525f291ec74dae183568"}], "stats": {"total": 189, "additions": 116, "deletions": 73}, "files": [{"sha": "766c342f1ff7f8d554d224c88f978dff339af8d3", "filename": "crates/rust-analyzer/src/diagnostics/to_proto.rs", "status": "modified", "additions": 116, "deletions": 73, "changes": 189, "blob_url": "https://github.com/rust-lang/rust/blob/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fdiagnostics%2Fto_proto.rs?ref=9d96a6d7af0bf8f6c2e42c4c20237ed0440f0494", "patch": "@@ -75,8 +75,10 @@ fn diagnostic_related_information(\n }\n \n enum MappedRustChildDiagnostic {\n-    Related(lsp_types::DiagnosticRelatedInformation),\n-    SuggestedFix(lsp_ext::CodeAction),\n+    Related {\n+        related: lsp_types::DiagnosticRelatedInformation,\n+        suggested_fix: Option<lsp_ext::CodeAction>,\n+    },\n     MessageLine(String),\n }\n \n@@ -103,23 +105,32 @@ fn map_rust_child_diagnostic(\n     }\n \n     if edit_map.is_empty() {\n-        MappedRustChildDiagnostic::Related(lsp_types::DiagnosticRelatedInformation {\n-            location: location(workspace_root, spans[0]),\n-            message: rd.message.clone(),\n-        })\n+        MappedRustChildDiagnostic::Related {\n+            related: lsp_types::DiagnosticRelatedInformation {\n+                location: location(workspace_root, spans[0]),\n+                message: rd.message.clone(),\n+            },\n+            suggested_fix: None,\n+        }\n     } else {\n-        MappedRustChildDiagnostic::SuggestedFix(lsp_ext::CodeAction {\n-            title: rd.message.clone(),\n-            group: None,\n-            kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n-            edit: Some(lsp_ext::SnippetWorkspaceEdit {\n-                // FIXME: there's no good reason to use edit_map here....\n-                changes: Some(edit_map),\n-                document_changes: None,\n+        MappedRustChildDiagnostic::Related {\n+            related: lsp_types::DiagnosticRelatedInformation {\n+                location: location(workspace_root, spans[0]),\n+                message: rd.message.clone(),\n+            },\n+            suggested_fix: Some(lsp_ext::CodeAction {\n+                title: rd.message.clone(),\n+                group: None,\n+                kind: Some(lsp_types::CodeActionKind::QUICKFIX),\n+                edit: Some(lsp_ext::SnippetWorkspaceEdit {\n+                    // FIXME: there's no good reason to use edit_map here....\n+                    changes: Some(edit_map),\n+                    document_changes: None,\n+                }),\n+                is_preferred: Some(true),\n+                data: None,\n             }),\n-            is_preferred: Some(true),\n-            data: None,\n-        })\n+        }\n     }\n }\n \n@@ -179,8 +190,12 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n     for child in &rd.children {\n         let child = map_rust_child_diagnostic(workspace_root, &child);\n         match child {\n-            MappedRustChildDiagnostic::Related(related) => related_information.push(related),\n-            MappedRustChildDiagnostic::SuggestedFix(code_action) => fixes.push(code_action),\n+            MappedRustChildDiagnostic::Related { related, suggested_fix } => {\n+                related_information.push(related);\n+                if let Some(code_action) = suggested_fix {\n+                    fixes.push(code_action);\n+                }\n+            }\n             MappedRustChildDiagnostic::MessageLine(message_line) => {\n                 format_to!(message, \"\\n{}\", message_line);\n \n@@ -219,7 +234,7 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n \n     primary_spans\n         .iter()\n-        .map(|primary_span| {\n+        .flat_map(|primary_span| {\n             let location = location(workspace_root, &primary_span);\n \n             let mut message = message.clone();\n@@ -229,72 +244,100 @@ pub(crate) fn map_rust_diagnostic_to_lsp(\n                 }\n             }\n \n+            // Each primary diagnostic span may result in multiple LSP diagnostics.\n+            let mut diagnostics = Vec::new();\n+\n+            let mut related_macro_info = None;\n+\n             // If error occurs from macro expansion, add related info pointing to\n             // where the error originated\n             // Also, we would generate an additional diagnostic, so that exact place of macro\n             // will be highlighted in the error origin place.\n-            let additional_diagnostic =\n-                if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n-                    let in_macro_location = location_naive(workspace_root, &primary_span);\n+            if !is_from_macro(&primary_span.file_name) && primary_span.expansion.is_some() {\n+                let in_macro_location = location_naive(workspace_root, &primary_span);\n \n-                    // Add related information for the main disagnostic.\n-                    related_information.push(lsp_types::DiagnosticRelatedInformation {\n-                        location: in_macro_location.clone(),\n-                        message: \"Error originated from macro here\".to_string(),\n-                    });\n+                // Add related information for the main disagnostic.\n+                related_macro_info = Some(lsp_types::DiagnosticRelatedInformation {\n+                    location: in_macro_location.clone(),\n+                    message: \"Error originated from macro here\".to_string(),\n+                });\n \n-                    // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n-                    let information_for_additional_diagnostic =\n-                        vec![lsp_types::DiagnosticRelatedInformation {\n-                            location: location.clone(),\n-                            message: \"Exact error occured here\".to_string(),\n-                        }];\n+                // For the additional in-macro diagnostic we add the inverse message pointing to the error location in code.\n+                let information_for_additional_diagnostic =\n+                    vec![lsp_types::DiagnosticRelatedInformation {\n+                        location: location.clone(),\n+                        message: \"Exact error occured here\".to_string(),\n+                    }];\n \n-                    let diagnostic = lsp_types::Diagnostic {\n-                        range: in_macro_location.range,\n-                        severity,\n-                        code: code.clone().map(lsp_types::NumberOrString::String),\n-                        code_description: code_description.clone(),\n-                        source: Some(source.clone()),\n-                        message: message.clone(),\n-                        related_information: Some(information_for_additional_diagnostic),\n-                        tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                        data: None,\n-                    };\n-\n-                    Some(MappedRustDiagnostic {\n-                        url: in_macro_location.uri,\n-                        diagnostic,\n-                        fixes: fixes.clone(),\n-                    })\n-                } else {\n-                    None\n+                let diagnostic = lsp_types::Diagnostic {\n+                    range: in_macro_location.range,\n+                    severity,\n+                    code: code.clone().map(lsp_types::NumberOrString::String),\n+                    code_description: code_description.clone(),\n+                    source: Some(source.clone()),\n+                    message: message.clone(),\n+                    related_information: Some(information_for_additional_diagnostic),\n+                    tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n+                    data: None,\n                 };\n \n-            let diagnostic = lsp_types::Diagnostic {\n-                range: location.range,\n-                severity,\n-                code: code.clone().map(lsp_types::NumberOrString::String),\n-                code_description: code_description.clone(),\n-                source: Some(source.clone()),\n-                message,\n-                related_information: if related_information.is_empty() {\n-                    None\n-                } else {\n-                    Some(related_information.clone())\n+                diagnostics.push(MappedRustDiagnostic {\n+                    url: in_macro_location.uri,\n+                    diagnostic,\n+                    fixes: fixes.clone(),\n+                });\n+            }\n+\n+            // Emit the primary diagnostic.\n+            diagnostics.push(MappedRustDiagnostic {\n+                url: location.uri.clone(),\n+                diagnostic: lsp_types::Diagnostic {\n+                    range: location.range,\n+                    severity,\n+                    code: code.clone().map(lsp_types::NumberOrString::String),\n+                    code_description: code_description.clone(),\n+                    source: Some(source.clone()),\n+                    message,\n+                    related_information: if related_information.is_empty() {\n+                        None\n+                    } else {\n+                        let mut related = related_information.clone();\n+                        related.extend(related_macro_info);\n+                        Some(related)\n+                    },\n+                    tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n+                    data: None,\n                 },\n-                tags: if tags.is_empty() { None } else { Some(tags.clone()) },\n-                data: None,\n-            };\n+                fixes: fixes.clone(),\n+            });\n \n-            let main_diagnostic =\n-                MappedRustDiagnostic { url: location.uri, diagnostic, fixes: fixes.clone() };\n-            match additional_diagnostic {\n-                None => vec![main_diagnostic],\n-                Some(additional_diagnostic) => vec![main_diagnostic, additional_diagnostic],\n+            // Emit hint-level diagnostics for all `related_information` entries such as \"help\"s.\n+            // This is useful because they will show up in the user's editor, unlike\n+            // `related_information`, which just produces hard-to-read links, at least in VS Code.\n+            let back_ref = lsp_types::DiagnosticRelatedInformation {\n+                location,\n+                message: \"original diagnostic\".to_string(),\n+            };\n+            for info in &related_information {\n+                diagnostics.push(MappedRustDiagnostic {\n+                    url: info.location.uri.clone(),\n+                    fixes: fixes.clone(), // share fixes to make them easier to apply\n+                    diagnostic: lsp_types::Diagnostic {\n+                        range: info.location.range,\n+                        severity: Some(lsp_types::DiagnosticSeverity::Hint),\n+                        code: code.clone().map(lsp_types::NumberOrString::String),\n+                        code_description: code_description.clone(),\n+                        source: Some(source.clone()),\n+                        message: info.message.clone(),\n+                        related_information: Some(vec![back_ref.clone()]),\n+                        tags: None, // don't apply modifiers again\n+                        data: None,\n+                    },\n+                });\n             }\n+\n+            diagnostics\n         })\n-        .flatten()\n         .collect()\n }\n "}]}