{"sha": "3e4ac8a2c9136052c6394014048095e5c2468859", "node_id": "C_kwDOAAsO6NoAKDNlNGFjOGEyYzkxMzYwNTJjNjM5NDAxNDA0ODA5NWU1YzI0Njg4NTk", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-11-23T21:22:27Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-11-23T21:22:27Z"}, "message": "Merge #10846\n\n10846: fix: qualify struct name in struct constructor completion r=Veykril a=andrewleverette\n\n* Alter `add_struct_literal` method signature to take an optional module path\r\n* Update `render_literal` method to use a qualified  \r\n\r\nRelates to issue #10771 \r\n\r\nSide note: This is my first contribution. Any feedback is welcome!\n\nCo-authored-by: Andrew Leverette <andrewleverette@gmail.com>", "tree": {"sha": "6d12976d17fbe854ffac07256ab37862e8c18f9f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6d12976d17fbe854ffac07256ab37862e8c18f9f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e4ac8a2c9136052c6394014048095e5c2468859", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJhnVuTCRBK7hj4Ov3rIwAA5KEIAKjVJYnBXqnz5ZmgH8tf0c4k\nvuJPwK5zu5gdAce5T4luEnkmlu/WMvbhJ97vqpcCNl6EeQXFVp043M8A3vUwqf8X\ni/xMCEY+Sh8cM1QRNO90zvv9N7rI49VF0rB3yc7xzqs4g+Bmc2BN/AIIW1Apuwoc\njIubt0mSAZ+RHGMJzJGLXHmhIhp+28PVfC30sW6y27WHn/D5gUB5QXGS5YrMfHbp\ncZBg++Iqma+dOB+NwedkxLCMS4eB3CipL5du9iW7M9PsbyA8VJ2x7BfDu6QlnnfA\nGGOGqo6YNY2hoPO5nnEaQlyrrlyf2O+8leEunVuAbmlxMrKGTOqB9ZTuIS+5IUk=\n=+9M/\n-----END PGP SIGNATURE-----\n", "payload": "tree 6d12976d17fbe854ffac07256ab37862e8c18f9f\nparent 4b1bf5f5403024efc8994b9146755fb0b1eb392d\nparent 7f15537fa9e8fcda5d3dfc1f9cc0f777fc11e62a\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1637702547 +0000\ncommitter GitHub <noreply@github.com> 1637702547 +0000\n\nMerge #10846\n\n10846: fix: qualify struct name in struct constructor completion r=Veykril a=andrewleverette\n\n* Alter `add_struct_literal` method signature to take an optional module path\r\n* Update `render_literal` method to use a qualified  \r\n\r\nRelates to issue #10771 \r\n\r\nSide note: This is my first contribution. Any feedback is welcome!\n\nCo-authored-by: Andrew Leverette <andrewleverette@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ac8a2c9136052c6394014048095e5c2468859", "html_url": "https://github.com/rust-lang/rust/commit/3e4ac8a2c9136052c6394014048095e5c2468859", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e4ac8a2c9136052c6394014048095e5c2468859/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4b1bf5f5403024efc8994b9146755fb0b1eb392d", "url": "https://api.github.com/repos/rust-lang/rust/commits/4b1bf5f5403024efc8994b9146755fb0b1eb392d", "html_url": "https://github.com/rust-lang/rust/commit/4b1bf5f5403024efc8994b9146755fb0b1eb392d"}, {"sha": "7f15537fa9e8fcda5d3dfc1f9cc0f777fc11e62a", "url": "https://api.github.com/repos/rust-lang/rust/commits/7f15537fa9e8fcda5d3dfc1f9cc0f777fc11e62a", "html_url": "https://github.com/rust-lang/rust/commit/7f15537fa9e8fcda5d3dfc1f9cc0f777fc11e62a"}], "stats": {"total": 61, "additions": 56, "deletions": 5}, "files": [{"sha": "8474ebec0d9c51ea5b3250a4ee7aa015390a952f", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=3e4ac8a2c9136052c6394014048095e5c2468859", "patch": "@@ -191,9 +191,10 @@ impl Completions {\n         &mut self,\n         ctx: &CompletionContext,\n         strukt: hir::Struct,\n+        path: Option<hir::ModPath>,\n         local_name: Option<hir::Name>,\n     ) {\n-        let item = render_struct_literal(RenderContext::new(ctx), strukt, local_name);\n+        let item = render_struct_literal(RenderContext::new(ctx), strukt, path, local_name);\n         self.add_opt(item);\n     }\n "}, {"sha": "d50f889ee47ad96b36f67ee9d8f7f18a9cbc4a6a", "filename": "crates/ide_completion/src/completions/record.rs", "status": "modified", "additions": 35, "deletions": 1, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Frecord.rs?ref=3e4ac8a2c9136052c6394014048095e5c2468859", "patch": "@@ -59,7 +59,12 @@ pub(crate) fn complete_record_literal(\n     }\n \n     if let hir::Adt::Struct(strukt) = ctx.expected_type.as_ref()?.as_adt()? {\n-        acc.add_struct_literal(ctx, strukt, None);\n+        let module =\n+            if let Some(module) = ctx.scope.module() { module } else { strukt.module(ctx.db) };\n+\n+        let path = module.find_use_path(ctx.db, hir::ModuleDef::from(strukt));\n+\n+        acc.add_struct_literal(ctx, strukt, path, None);\n     }\n \n     Some(())\n@@ -94,6 +99,35 @@ fn baz() {\n         )\n     }\n \n+    #[test]\n+    fn literal_struct_completion_from_sub_modules() {\n+        check_edit(\n+            \"Struct {\u2026}\",\n+            r#\"\n+mod submod {\n+    pub struct Struct {\n+        pub a: u64,\n+    }\n+}\n+\n+fn f() -> submod::Struct {\n+    Stru$0\n+}\n+            \"#,\n+            r#\"\n+mod submod {\n+    pub struct Struct {\n+        pub a: u64,\n+    }\n+}\n+\n+fn f() -> submod::Struct {\n+    submod::Struct { a: ${1:()} }$0\n+}\n+            \"#,\n+        )\n+    }\n+\n     #[test]\n     fn literal_struct_complexion_module() {\n         check_edit("}, {"sha": "bfbcc263b1deb5d53627504d4bf2fd608d0460c9", "filename": "crates/ide_completion/src/render/struct_literal.rs", "status": "modified", "additions": 19, "deletions": 3, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e4ac8a2c9136052c6394014048095e5c2468859/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender%2Fstruct_literal.rs?ref=3e4ac8a2c9136052c6394014048095e5c2468859", "patch": "@@ -10,6 +10,7 @@ use crate::{render::RenderContext, CompletionItem, CompletionItemKind};\n pub(crate) fn render_struct_literal(\n     ctx: RenderContext<'_>,\n     strukt: hir::Struct,\n+    path: Option<hir::ModPath>,\n     local_name: Option<Name>,\n ) -> Option<CompletionItem> {\n     let _p = profile::span(\"render_struct_literal\");\n@@ -23,7 +24,8 @@ pub(crate) fn render_struct_literal(\n     }\n \n     let name = local_name.unwrap_or_else(|| strukt.name(ctx.db())).to_smol_str();\n-    let literal = render_literal(&ctx, &name, strukt.kind(ctx.db()), &visible_fields)?;\n+\n+    let literal = render_literal(&ctx, path, &name, strukt.kind(ctx.db()), &visible_fields)?;\n \n     Some(build_completion(ctx, name, literal, strukt))\n }\n@@ -49,13 +51,27 @@ fn build_completion(\n \n fn render_literal(\n     ctx: &RenderContext<'_>,\n+    path: Option<hir::ModPath>,\n     name: &str,\n     kind: StructKind,\n     fields: &[hir::Field],\n ) -> Option<String> {\n+    let path_string;\n+\n+    let qualified_name = if let Some(path) = path {\n+        path_string = path.to_string();\n+        &path_string\n+    } else {\n+        name\n+    };\n+\n     let mut literal = match kind {\n-        StructKind::Tuple if ctx.snippet_cap().is_some() => render_tuple_as_literal(fields, name),\n-        StructKind::Record => render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, name),\n+        StructKind::Tuple if ctx.snippet_cap().is_some() => {\n+            render_tuple_as_literal(fields, qualified_name)\n+        }\n+        StructKind::Record => {\n+            render_record_as_literal(ctx.db(), ctx.snippet_cap(), fields, qualified_name)\n+        }\n         _ => return None,\n     };\n "}]}