{"sha": "3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNjYTFjNWQ1YjVlMGQxOWY1NTU3MGY1ZDQ5ZDk3MTAwZTliNTI0YjM=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-01-31T04:12:46Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2020-02-02T19:53:10Z"}, "message": "Point at `Sized` requirements\n\nMake #47990 easier to understand", "tree": {"sha": "cdbe4c43bbee1bccfd607f62b53105b056bde420", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cdbe4c43bbee1bccfd607f62b53105b056bde420"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "html_url": "https://github.com/rust-lang/rust/commit/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "06fea9235642cec6e360da5654db9262245dc862", "url": "https://api.github.com/repos/rust-lang/rust/commits/06fea9235642cec6e360da5654db9262245dc862", "html_url": "https://github.com/rust-lang/rust/commit/06fea9235642cec6e360da5654db9262245dc862"}], "stats": {"total": 44, "additions": 32, "deletions": 12}, "files": [{"sha": "eee9dc99d35b473cbbb65a35ca227d7f0b97f32d", "filename": "src/librustc_typeck/check/method/confirm.rs", "status": "modified", "additions": 16, "deletions": 8, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fconfirm.rs?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -32,7 +32,7 @@ impl<'a, 'tcx> Deref for ConfirmContext<'a, 'tcx> {\n \n pub struct ConfirmResult<'tcx> {\n     pub callee: MethodCallee<'tcx>,\n-    pub illegal_sized_bound: bool,\n+    pub illegal_sized_bound: Option<Span>,\n }\n \n impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n@@ -112,7 +112,7 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n         // Add any trait/regions obligations specified on the method's type parameters.\n         // We won't add these if we encountered an illegal sized bound, so that we can use\n         // a custom error in that case.\n-        if !illegal_sized_bound {\n+        if illegal_sized_bound.is_none() {\n             let method_ty = self.tcx.mk_fn_ptr(ty::Binder::bind(method_sig));\n             self.add_obligations(method_ty, all_substs, &method_predicates);\n         }\n@@ -561,23 +561,31 @@ impl<'a, 'tcx> ConfirmContext<'a, 'tcx> {\n     fn predicates_require_illegal_sized_bound(\n         &self,\n         predicates: &ty::InstantiatedPredicates<'tcx>,\n-    ) -> bool {\n+    ) -> Option<Span> {\n         let sized_def_id = match self.tcx.lang_items().sized_trait() {\n             Some(def_id) => def_id,\n-            None => return false,\n+            None => return None,\n         };\n \n         traits::elaborate_predicates(self.tcx, predicates.predicates.clone())\n             .filter_map(|predicate| match predicate {\n                 ty::Predicate::Trait(trait_pred, _) if trait_pred.def_id() == sized_def_id => {\n-                    Some(trait_pred)\n+                    let span = predicates\n+                        .predicates\n+                        .iter()\n+                        .zip(predicates.spans.iter())\n+                        .filter_map(|(p, span)| if *p == predicate { Some(*span) } else { None })\n+                        .next()\n+                        .unwrap_or(rustc_span::DUMMY_SP);\n+                    Some((trait_pred, span))\n                 }\n                 _ => None,\n             })\n-            .any(|trait_pred| match trait_pred.skip_binder().self_ty().kind {\n-                ty::Dynamic(..) => true,\n-                _ => false,\n+            .filter_map(|(trait_pred, span)| match trait_pred.skip_binder().self_ty().kind {\n+                ty::Dynamic(..) => Some(span),\n+                _ => None,\n             })\n+            .next()\n     }\n \n     fn enforce_illegal_method_limitations(&self, pick: &probe::Pick<'_>) {"}, {"sha": "e90c2ef5e4361090a863380935ca6b39981bd504", "filename": "src/librustc_typeck/check/method/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fmod.rs?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -58,7 +58,7 @@ pub enum MethodError<'tcx> {\n \n     // Found a `Self: Sized` bound where `Self` is a trait object, also the caller may have\n     // forgotten to import a trait.\n-    IllegalSizedBound(Vec<DefId>, bool),\n+    IllegalSizedBound(Vec<DefId>, bool, Span),\n \n     // Found a match, but the return type is wrong\n     BadReturnType,\n@@ -204,7 +204,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n         let result =\n             self.confirm_method(span, self_expr, call_expr, self_ty, pick.clone(), segment);\n \n-        if result.illegal_sized_bound {\n+        if let Some(span) = result.illegal_sized_bound {\n             let mut needs_mut = false;\n             if let ty::Ref(region, t_type, mutability) = self_ty.kind {\n                 let trait_type = self\n@@ -249,7 +249,7 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 _ => Vec::new(),\n             };\n \n-            return Err(IllegalSizedBound(candidates, needs_mut));\n+            return Err(IllegalSizedBound(candidates, needs_mut, span));\n         }\n \n         Ok(result.callee)"}, {"sha": "789bac2705b07c2d61ce6c2facf22f5a59e0a184", "filename": "src/librustc_typeck/check/method/suggest.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmethod%2Fsuggest.rs?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -640,9 +640,10 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 err.emit();\n             }\n \n-            MethodError::IllegalSizedBound(candidates, needs_mut) => {\n+            MethodError::IllegalSizedBound(candidates, needs_mut, bound_span) => {\n                 let msg = format!(\"the `{}` method cannot be invoked on a trait object\", item_name);\n                 let mut err = self.sess().struct_span_err(span, &msg);\n+                err.span_label(bound_span, \"this has a `Sized` requirement\");\n                 if !candidates.is_empty() {\n                     let help = format!(\n                         \"{an}other candidate{s} {were} found in the following trait{s}, perhaps \\"}, {"sha": "f9b9b7dbd34bb7c46dadcd414bc00017930cd5bc", "filename": "src/test/ui/issues/issue-35976.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-35976.stderr?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -1,6 +1,9 @@\n error: the `wait` method cannot be invoked on a trait object\n   --> $DIR/issue-35976.rs:14:9\n    |\n+LL |         fn wait(&self) where Self: Sized;\n+   |                                    ----- this has a `Sized` requirement\n+...\n LL |     arg.wait();\n    |         ^^^^\n    |"}, {"sha": "37c20535229610f60879c7fe58763e0d164e9128", "filename": "src/test/ui/suggestions/imm-ref-trait-object.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fimm-ref-trait-object.stderr?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -3,6 +3,11 @@ error: the `min` method cannot be invoked on a trait object\n    |\n LL |      t.min().unwrap()\n    |        ^^^\n+   | \n+  ::: $SRC_DIR/libcore/iter/traits/iterator.rs:LL:COL\n+   |\n+LL |         Self: Sized,\n+   |               ----- this has a `Sized` requirement\n    |\n    = note: you need `&mut dyn std::iter::Iterator<Item = &u64>` instead of `&dyn std::iter::Iterator<Item = &u64>`\n "}, {"sha": "4cd2098eef256c651aade2aa6957afc67547ffc1", "filename": "src/test/ui/unsized-locals/by-value-trait-object-safety.stderr", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsized-locals%2Fby-value-trait-object-safety.stderr?ref=3ca1c5d5b5e0d19f55570f5d49d97100e9b524b3", "patch": "@@ -1,6 +1,9 @@\n error: the `foo` method cannot be invoked on a trait object\n   --> $DIR/by-value-trait-object-safety.rs:18:7\n    |\n+LL |     fn foo(self) -> String where Self: Sized;\n+   |                                        ----- this has a `Sized` requirement\n+...\n LL |     x.foo();\n    |       ^^^\n "}]}