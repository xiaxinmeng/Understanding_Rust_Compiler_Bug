{"sha": "b6199de706868dcbf57d9821829381609212d851", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI2MTk5ZGU3MDY4NjhkY2JmNTdkOTgyMTgyOTM4MTYwOTIxMmQ4NTE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-08T19:09:13Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-08T19:09:13Z"}, "message": "Merge #9181 #9182\n\n9181: Don't complete values in type position r=jonas-schievink a=Veykril\n\nWill add some proper tests in a bit\n\n9182: fix: don't complete derive macros as fn-like macros r=jonas-schievink a=jonas-schievink\n\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/8518\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>", "tree": {"sha": "13206544d38ce3bef18d86ba8203af10cee26d73", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/13206544d38ce3bef18d86ba8203af10cee26d73"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b6199de706868dcbf57d9821829381609212d851", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgv8BZCRBK7hj4Ov3rIwAAGncIAFtVIdT/wQUztSZy6A8YUNfE\ndvgYUDx6nocEpzP/T5gZ1r5yFxA0+EhKlbPsrIbiaC+FobM8MQizDl9UpGOy8ljE\n+F1D+4AGkmpLMyJzzFwuR7X/I9yTlGhAZnkecVNfUAFSdN09eILoZwn7nA3V3FB1\nT19RA0j9i/+enwKwFgLmWFUy9b8ub59ZAVK4hemY0BEFGoOkXZYI3i2DVg4A473i\nv3T9znzfPd183iRK7HqqoLuaWLJNQHqE3U0k0CYlH/Fts7VMiyOITcFMJ/fRZ6Cf\nuTx2i9E8uTC2t7dGK7rVM3xYZa1zXCWNZEL/3WRNxx9CYtKJE1PHzSIp3zeTa/A=\n=K2g/\n-----END PGP SIGNATURE-----\n", "payload": "tree 13206544d38ce3bef18d86ba8203af10cee26d73\nparent 4e3769fbf2ff94a863ddb931cf6dfa7da9ac8172\nparent 1a26af15ef190bf605d3a04005aea02664815fb0\nparent ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1623179353 +0000\ncommitter GitHub <noreply@github.com> 1623179353 +0000\n\nMerge #9181 #9182\n\n9181: Don't complete values in type position r=jonas-schievink a=Veykril\n\nWill add some proper tests in a bit\n\n9182: fix: don't complete derive macros as fn-like macros r=jonas-schievink a=jonas-schievink\n\nPart of https://github.com/rust-analyzer/rust-analyzer/issues/8518\r\n\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\nCo-authored-by: Jonas Schievink <jonasschievink@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b6199de706868dcbf57d9821829381609212d851", "html_url": "https://github.com/rust-lang/rust/commit/b6199de706868dcbf57d9821829381609212d851", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b6199de706868dcbf57d9821829381609212d851/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4e3769fbf2ff94a863ddb931cf6dfa7da9ac8172", "url": "https://api.github.com/repos/rust-lang/rust/commits/4e3769fbf2ff94a863ddb931cf6dfa7da9ac8172", "html_url": "https://github.com/rust-lang/rust/commit/4e3769fbf2ff94a863ddb931cf6dfa7da9ac8172"}, {"sha": "1a26af15ef190bf605d3a04005aea02664815fb0", "url": "https://api.github.com/repos/rust-lang/rust/commits/1a26af15ef190bf605d3a04005aea02664815fb0", "html_url": "https://github.com/rust-lang/rust/commit/1a26af15ef190bf605d3a04005aea02664815fb0"}, {"sha": "ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "url": "https://api.github.com/repos/rust-lang/rust/commits/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8", "html_url": "https://github.com/rust-lang/rust/commit/ee374ff1ee7ad1af6bc0624f98b2028cef6ed4a8"}], "stats": {"total": 278, "additions": 219, "deletions": 59}, "files": [{"sha": "dba46df04f9b756cbf8cdf4452cf3f3df51245be", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -1351,6 +1351,13 @@ impl MacroDef {\n             MacroDefKind::ProcMacro(_, base_db::ProcMacroKind::FuncLike, _) => MacroKind::ProcMacro,\n         }\n     }\n+\n+    pub fn is_fn_like(&self) -> bool {\n+        match self.kind() {\n+            MacroKind::Declarative | MacroKind::BuiltIn | MacroKind::ProcMacro => true,\n+            MacroKind::Attr | MacroKind::Derive => false,\n+        }\n+    }\n }\n \n /// Invariant: `inner.as_assoc_item(db).is_some()`\n@@ -2496,6 +2503,18 @@ impl ScopeDef {\n \n         items\n     }\n+\n+    pub fn is_value_def(&self) -> bool {\n+        matches!(\n+            self,\n+            ScopeDef::ModuleDef(ModuleDef::Function(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Variant(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Const(_))\n+                | ScopeDef::ModuleDef(ModuleDef::Static(_))\n+                | ScopeDef::GenericParam(GenericParam::ConstParam(_))\n+                | ScopeDef::Local(_)\n+        )\n+    }\n }\n \n impl From<ItemInNs> for ScopeDef {"}, {"sha": "827e23e2bd05a3bef8f394da70a9adbea8135f16", "filename": "crates/hir/src/semantics.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fhir%2Fsrc%2Fsemantics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fhir%2Fsrc%2Fsemantics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsemantics.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -35,8 +35,9 @@ pub enum PathResolution {\n     Def(ModuleDef),\n     /// A local binding (only value namespace)\n     Local(Local),\n-    /// A generic parameter\n+    /// A type parameter\n     TypeParam(TypeParam),\n+    /// A const parameter\n     ConstParam(ConstParam),\n     SelfType(Impl),\n     Macro(MacroDef),"}, {"sha": "fbd499900a9a83baf7a57b6c13cd99252b0a1007", "filename": "crates/ide_completion/src/completions.rs", "status": "modified", "additions": 25, "deletions": 26, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -56,10 +56,16 @@ impl Builder {\n }\n \n impl Completions {\n-    pub(crate) fn add(&mut self, item: CompletionItem) {\n+    fn add(&mut self, item: CompletionItem) {\n         self.buf.push(item)\n     }\n \n+    fn add_opt(&mut self, item: Option<CompletionItem>) {\n+        if let Some(item) = item {\n+            self.buf.push(item)\n+        }\n+    }\n+\n     pub(crate) fn add_all<I>(&mut self, items: I)\n     where\n         I: IntoIterator,\n@@ -103,9 +109,10 @@ impl Completions {\n         local_name: hir::Name,\n         resolution: &hir::ScopeDef,\n     ) {\n-        if let Some(item) = render_resolution(RenderContext::new(ctx), local_name, resolution) {\n-            self.add(item);\n+        if ctx.expects_type() && resolution.is_value_def() {\n+            return;\n         }\n+        self.add_opt(render_resolution(RenderContext::new(ctx), local_name, resolution));\n     }\n \n     pub(crate) fn add_macro(\n@@ -118,9 +125,7 @@ impl Completions {\n             Some(it) => it,\n             None => return,\n         };\n-        if let Some(item) = render_macro(RenderContext::new(ctx), None, name, macro_) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_macro(RenderContext::new(ctx), None, name, macro_));\n     }\n \n     pub(crate) fn add_function(\n@@ -129,9 +134,10 @@ impl Completions {\n         func: hir::Function,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_fn(RenderContext::new(ctx), None, local_name, func) {\n-            self.add(item)\n+        if ctx.expects_type() {\n+            return;\n         }\n+        self.add_opt(render_fn(RenderContext::new(ctx), None, local_name, func));\n     }\n \n     pub(crate) fn add_method(\n@@ -141,10 +147,7 @@ impl Completions {\n         receiver: Option<hir::Name>,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_method(RenderContext::new(ctx), None, receiver, local_name, func)\n-        {\n-            self.add(item)\n-        }\n+        self.add_opt(render_method(RenderContext::new(ctx), None, receiver, local_name, func));\n     }\n \n     pub(crate) fn add_variant_pat(\n@@ -153,9 +156,7 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_variant_pat(RenderContext::new(ctx), variant, local_name, None) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, local_name, None));\n     }\n \n     pub(crate) fn add_qualified_variant_pat(\n@@ -164,9 +165,7 @@ impl Completions {\n         variant: hir::Variant,\n         path: hir::ModPath,\n     ) {\n-        if let Some(item) = render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_variant_pat(RenderContext::new(ctx), variant, None, Some(path)));\n     }\n \n     pub(crate) fn add_struct_pat(\n@@ -175,21 +174,18 @@ impl Completions {\n         strukt: hir::Struct,\n         local_name: Option<hir::Name>,\n     ) {\n-        if let Some(item) = render_struct_pat(RenderContext::new(ctx), strukt, local_name) {\n-            self.add(item);\n-        }\n+        self.add_opt(render_struct_pat(RenderContext::new(ctx), strukt, local_name));\n     }\n \n     pub(crate) fn add_const(&mut self, ctx: &CompletionContext, constant: hir::Const) {\n-        if let Some(item) = render_const(RenderContext::new(ctx), constant) {\n-            self.add(item);\n+        if ctx.expects_type() {\n+            return;\n         }\n+        self.add_opt(render_const(RenderContext::new(ctx), constant));\n     }\n \n     pub(crate) fn add_type_alias(&mut self, ctx: &CompletionContext, type_alias: hir::TypeAlias) {\n-        if let Some(item) = render_type_alias(RenderContext::new(ctx), type_alias) {\n-            self.add(item)\n-        }\n+        self.add_opt(render_type_alias(RenderContext::new(ctx), type_alias));\n     }\n \n     pub(crate) fn add_qualified_enum_variant(\n@@ -208,6 +204,9 @@ impl Completions {\n         variant: hir::Variant,\n         local_name: Option<hir::Name>,\n     ) {\n+        if ctx.expects_type() {\n+            return;\n+        }\n         let item = render_variant(RenderContext::new(ctx), None, local_name, variant, None);\n         self.add(item);\n     }"}, {"sha": "7f76e357ec34d01e14b4ec96fb4284883d0d49f8", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -69,7 +69,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n         }\n \n         if is_inner || !attr_completion.prefer_inner {\n-            acc.add(item.build());\n+            item.add_to(acc);\n         }\n     };\n \n@@ -96,7 +96,7 @@ fn complete_new_attribute(acc: &mut Completions, ctx: &CompletionContext, attrib\n                 if let Some(docs) = mac.docs(ctx.sema.db) {\n                     item.documentation(docs);\n                 }\n-                acc.add(item.build());\n+                item.add_to(acc);\n             }\n         }\n     });"}, {"sha": "c010cbbca64058ef1e33e2383ce5613eaf1e9572", "filename": "crates/ide_completion/src/completions/flyimport.rs", "status": "modified", "additions": 1, "deletions": 2, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fflyimport.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -90,7 +90,6 @@\n //! Note that having this flag set to `true` does not guarantee that the feature is enabled: your client needs to have the corredponding\n //! capability enabled.\n \n-use hir::ModPath;\n use ide_db::helpers::{\n     import_assets::{ImportAssets, ImportCandidate},\n     insert_use::ImportScope,\n@@ -208,7 +207,7 @@ fn import_assets(ctx: &CompletionContext, fuzzy_name: String) -> Option<ImportAs\n }\n \n fn compute_fuzzy_completion_order_key(\n-    proposed_mod_path: &ModPath,\n+    proposed_mod_path: &hir::ModPath,\n     user_input_lowercased: &str,\n ) -> usize {\n     cov_mark::hit!(certain_fuzzy_order_test);"}, {"sha": "1daa8595a6a1d45406e4cbfda508719e38cc8a42", "filename": "crates/ide_completion/src/completions/pattern.rs", "status": "modified", "additions": 23, "deletions": 1, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fpattern.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -39,7 +39,7 @@ pub(crate) fn complete_pattern(acc: &mut Completions, ctx: &CompletionContext) {\n                 | hir::ModuleDef::Module(..) => refutable,\n                 _ => false,\n             },\n-            hir::ScopeDef::MacroDef(_) => true,\n+            hir::ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n             hir::ScopeDef::ImplSelfType(impl_) => match impl_.self_ty(ctx.db).as_adt() {\n                 Some(hir::Adt::Struct(strukt)) => {\n                     acc.add_struct_pat(ctx, strukt, Some(name.clone()));\n@@ -101,6 +101,28 @@ fn foo() {\n         );\n     }\n \n+    #[test]\n+    fn does_not_complete_non_fn_macros() {\n+        check(\n+            r#\"\n+macro_rules! m { ($e:expr) => { $e } }\n+enum E { X }\n+\n+#[rustc_builtin_macro]\n+macro Clone {}\n+\n+fn foo() {\n+   match E::X { $0 }\n+}\n+\"#,\n+            expect![[r#\"\n+                ev E::X  ()\n+                en E\n+                ma m!(\u2026) macro_rules! m\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn completes_in_simple_macro_call() {\n         check("}, {"sha": "0b0a81410bee5473c7dd3bc87366d0ee2af735f4", "filename": "crates/ide_completion/src/completions/qualified_path.rs", "status": "modified", "additions": 40, "deletions": 1, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fqualified_path.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -26,7 +26,9 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n             let module_scope = module.scope(ctx.db, context_module);\n             for (name, def) in module_scope {\n                 if let hir::ScopeDef::MacroDef(macro_def) = def {\n-                    acc.add_macro(ctx, Some(name.clone()), macro_def);\n+                    if macro_def.is_fn_like() {\n+                        acc.add_macro(ctx, Some(name.clone()), macro_def);\n+                    }\n                 }\n                 if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = def {\n                     acc.add_resolution(ctx, name, &def);\n@@ -58,6 +60,13 @@ pub(crate) fn complete_qualified_path(acc: &mut Completions, ctx: &CompletionCon\n                     }\n                 }\n \n+                if let hir::ScopeDef::MacroDef(macro_def) = def {\n+                    if !macro_def.is_fn_like() {\n+                        // Don't suggest attribute macros and derives.\n+                        continue;\n+                    }\n+                }\n+\n                 acc.add_resolution(ctx, name, &def);\n             }\n         }\n@@ -198,6 +207,36 @@ mod tests {\n         check(r#\"use self::foo$0;\"#, expect![[\"\"]]);\n     }\n \n+    #[test]\n+    fn dont_complete_values_in_type_pos() {\n+        check(\n+            r#\"\n+const FOO: () = ();\n+static BAR: () = ();\n+struct Baz;\n+fn foo() {\n+    let _: self::$0;\n+}\n+\"#,\n+            expect![[r#\"\n+                st Baz\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn dont_complete_enum_variants_in_type_pos() {\n+        check(\n+            r#\"\n+enum Foo { Bar }\n+fn foo() {\n+    let _: Foo::$0;\n+}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn dont_complete_current_use_in_braces_with_glob() {\n         check("}, {"sha": "1f6c4069f0f71a9630ed0dc1843022461501422a", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 70, "deletions": 6, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -13,7 +13,9 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         // only show macros in {Assoc}ItemList\n         ctx.scope.process_all_names(&mut |name, res| {\n             if let hir::ScopeDef::MacroDef(mac) = res {\n-                acc.add_macro(ctx, Some(name.clone()), mac);\n+                if mac.is_fn_like() {\n+                    acc.add_macro(ctx, Some(name.clone()), mac);\n+                }\n             }\n             if let hir::ScopeDef::ModuleDef(hir::ModuleDef::Module(_)) = res {\n                 acc.add_resolution(ctx, name, &res);\n@@ -46,7 +48,13 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n             cov_mark::hit!(skip_lifetime_completion);\n             return;\n         }\n-        acc.add_resolution(ctx, name, &res);\n+        let add_resolution = match res {\n+            ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+            _ => true,\n+        };\n+        if add_resolution {\n+            acc.add_resolution(ctx, name, &res);\n+        }\n     });\n }\n \n@@ -68,6 +76,28 @@ mod tests {\n         expect.assert_eq(&actual)\n     }\n \n+    #[test]\n+    fn dont_complete_values_in_type_pos() {\n+        check(\n+            r#\"\n+const FOO: () = ();\n+static BAR: () = ();\n+enum Foo {\n+    Bar\n+}\n+struct Baz;\n+fn foo() {\n+    let local = ();\n+    let _: $0;\n+}\n+\"#,\n+            expect![[r#\"\n+                en Foo\n+                st Baz\n+            \"#]],\n+        );\n+    }\n+\n     #[test]\n     fn only_completes_modules_in_import() {\n         cov_mark::check!(only_completes_modules_in_import);\n@@ -339,7 +369,6 @@ fn x() -> $0\n \"#,\n             expect![[r#\"\n                 st Foo\n-                fn x() fn()\n             \"#]],\n         );\n     }\n@@ -391,7 +420,6 @@ pub mod prelude {\n }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn()\n                 md std\n                 st Option\n             \"#]],\n@@ -426,6 +454,44 @@ mod macros {\n         );\n     }\n \n+    #[test]\n+    fn does_not_complete_non_fn_macros() {\n+        check(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+fn f() {$0}\n+\"#,\n+            expect![[r#\"\n+                fn f() fn()\n+            \"#]],\n+        );\n+        check(\n+            r#\"\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\n+struct S;\n+impl S {\n+    $0\n+}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+        check(\n+            r#\"\n+mod m {\n+    #[rustc_builtin_macro]\n+    pub macro Clone {}\n+}\n+\n+fn f() {m::$0}\n+\"#,\n+            expect![[r#\"\"#]],\n+        );\n+    }\n+\n     #[test]\n     fn completes_std_prelude_if_core_is_defined() {\n         check(\n@@ -448,7 +514,6 @@ pub mod prelude {\n }\n \"#,\n             expect![[r#\"\n-                fn foo()  fn()\n                 md std\n                 md core\n                 st String\n@@ -509,7 +574,6 @@ macro_rules! foo { () => {} }\n fn main() { let x: $0 }\n \"#,\n             expect![[r#\"\n-                fn main()  fn()\n                 ma foo!(\u2026) macro_rules! foo\n             \"#]],\n         );"}, {"sha": "2c2a4aa6bf1de96496ef0886561b79f555abb56b", "filename": "crates/ide_completion/src/context.rs", "status": "modified", "additions": 29, "deletions": 13, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcontext.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -29,20 +29,25 @@ pub(crate) enum PatternRefutability {\n     Irrefutable,\n }\n \n+#[derive(Debug)]\n+pub(super) enum PathKind {\n+    Expr,\n+    Type,\n+}\n+\n #[derive(Debug)]\n pub(crate) struct PathCompletionContext {\n     /// If this is a call with () already there\n     call_kind: Option<CallKind>,\n     /// A single-indent path, like `foo`. `::foo` should not be considered a trivial path.\n     pub(super) is_trivial_path: bool,\n     /// If not a trivial path, the prefix (qualifier).\n-    pub(super) path_qual: Option<ast::Path>,\n-    pub(super) is_path_type: bool,\n+    pub(super) qualifier: Option<ast::Path>,\n+    pub(super) kind: Option<PathKind>,\n+    /// Whether the path segment has type args or not.\n     pub(super) has_type_args: bool,\n     /// `true` if we are a statement or a last expr in the block.\n     pub(super) can_be_stmt: bool,\n-    /// `true` if we expect an expression at the cursor position.\n-    pub(super) is_expr: bool,\n     pub(super) in_loop_body: bool,\n }\n \n@@ -308,19 +313,23 @@ impl<'a> CompletionContext<'a> {\n     }\n \n     pub(crate) fn expects_expression(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.is_expr)\n+        matches!(self.path_context, Some(PathCompletionContext { kind: Some(PathKind::Expr), .. }))\n+    }\n+\n+    pub(crate) fn expects_type(&self) -> bool {\n+        matches!(self.path_context, Some(PathCompletionContext { kind: Some(PathKind::Type), .. }))\n     }\n \n     pub(crate) fn path_call_kind(&self) -> Option<CallKind> {\n         self.path_context.as_ref().and_then(|it| it.call_kind)\n     }\n \n     pub(crate) fn is_trivial_path(&self) -> bool {\n-        self.path_context.as_ref().map_or(false, |it| it.is_trivial_path)\n+        matches!(self.path_context, Some(PathCompletionContext { is_trivial_path: true, .. }))\n     }\n \n     pub(crate) fn path_qual(&self) -> Option<&ast::Path> {\n-        self.path_context.as_ref().and_then(|it| it.path_qual.as_ref())\n+        self.path_context.as_ref().and_then(|it| it.qualifier.as_ref())\n     }\n \n     fn fill_impl_def(&mut self) {\n@@ -573,12 +582,11 @@ impl<'a> CompletionContext<'a> {\n             let path_ctx = self.path_context.get_or_insert(PathCompletionContext {\n                 call_kind: None,\n                 is_trivial_path: false,\n-                path_qual: None,\n+                qualifier: None,\n                 has_type_args: false,\n-                is_path_type: false,\n                 can_be_stmt: false,\n-                is_expr: false,\n                 in_loop_body: false,\n+                kind: None,\n             });\n             path_ctx.in_loop_body = is_in_loop_body(name_ref.syntax());\n             let path = segment.parent_path();\n@@ -593,11 +601,20 @@ impl<'a> CompletionContext<'a> {\n                     }\n                 };\n             }\n-            path_ctx.is_path_type = path.syntax().parent().and_then(ast::PathType::cast).is_some();\n+\n+            if let Some(parent) = path.syntax().parent() {\n+                path_ctx.kind = match_ast! {\n+                    match parent {\n+                        ast::PathType(_it) => Some(PathKind::Type),\n+                        ast::PathExpr(_it) => Some(PathKind::Expr),\n+                        _ => None,\n+                    }\n+                };\n+            }\n             path_ctx.has_type_args = segment.generic_arg_list().is_some();\n \n             if let Some(path) = path_or_use_tree_qualifier(&path) {\n-                path_ctx.path_qual = path\n+                path_ctx.qualifier = path\n                     .segment()\n                     .and_then(|it| {\n                         find_node_with_range::<ast::PathSegment>(\n@@ -635,7 +652,6 @@ impl<'a> CompletionContext<'a> {\n                     None\n                 })\n                 .unwrap_or(false);\n-            path_ctx.is_expr = path.syntax().parent().and_then(ast::PathExpr::cast).is_some();\n         }\n     }\n }"}, {"sha": "7118183fe061fab31423773e5c61c636cee21be7", "filename": "crates/ide_completion/src/render.rs", "status": "modified", "additions": 8, "deletions": 7, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b6199de706868dcbf57d9821829381609212d851/crates%2Fide_completion%2Fsrc%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Frender.rs?ref=b6199de706868dcbf57d9821829381609212d851", "patch": "@@ -18,6 +18,7 @@ use ide_db::{\n use syntax::TextRange;\n \n use crate::{\n+    context::{PathCompletionContext, PathKind},\n     item::{CompletionRelevanceTypeMatch, ImportEdit},\n     render::{enum_variant::render_variant, function::render_fn, macro_::render_macro},\n     CompletionContext, CompletionItem, CompletionItemKind, CompletionKind, CompletionRelevance,\n@@ -54,6 +55,9 @@ pub(crate) fn render_resolution_with_import<'a>(\n     import_edit: ImportEdit,\n ) -> Option<CompletionItem> {\n     let resolution = hir::ScopeDef::from(import_edit.import.original_item);\n+    if ctx.completion.expects_type() && resolution.is_value_def() {\n+        return None;\n+    }\n     let local_name = match resolution {\n         hir::ScopeDef::ModuleDef(hir::ModuleDef::Function(f)) => f.name(ctx.completion.db),\n         hir::ScopeDef::ModuleDef(hir::ModuleDef::Const(c)) => c.name(ctx.completion.db)?,\n@@ -275,13 +279,10 @@ impl<'a> Render<'a> {\n         };\n \n         // Add `<>` for generic types\n-        if self\n-            .ctx\n-            .completion\n-            .path_context\n-            .as_ref()\n-            .map_or(false, |it| it.is_path_type && !it.has_type_args)\n-            && self.ctx.completion.config.add_call_parenthesis\n+        if matches!(\n+            self.ctx.completion.path_context,\n+            Some(PathCompletionContext { kind: Some(PathKind::Type), has_type_args: false, .. })\n+        ) && self.ctx.completion.config.add_call_parenthesis\n         {\n             if let Some(cap) = self.ctx.snippet_cap() {\n                 let has_non_default_type_params = match resolution {"}]}