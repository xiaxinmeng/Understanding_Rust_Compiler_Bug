{"sha": "fa97793139a6b055eb0fba91ef7d64f6a545ca99", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZhOTc3OTMxMzlhNmIwNTVlYjBmYmE5MWVmN2Q2NGY2YTU0NWNhOTk=", "commit": {"author": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-24T18:30:20Z"}, "committer": {"name": "Marijn Haverbeke", "email": "marijnh@gmail.com", "date": "2011-08-24T18:30:20Z"}, "message": "Revert \"Back out copy-glue\"\n\nThis reverts commit 629ee94a0b360e2df1a1bbf7bf61ef346adf36ad.", "tree": {"sha": "1dec35c744ab29903926a7e2465f4415995a7161", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1dec35c744ab29903926a7e2465f4415995a7161"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fa97793139a6b055eb0fba91ef7d64f6a545ca99", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fa97793139a6b055eb0fba91ef7d64f6a545ca99", "html_url": "https://github.com/rust-lang/rust/commit/fa97793139a6b055eb0fba91ef7d64f6a545ca99", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fa97793139a6b055eb0fba91ef7d64f6a545ca99/comments", "author": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marijnh", "id": 144427, "node_id": "MDQ6VXNlcjE0NDQyNw==", "avatar_url": "https://avatars.githubusercontent.com/u/144427?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marijnh", "html_url": "https://github.com/marijnh", "followers_url": "https://api.github.com/users/marijnh/followers", "following_url": "https://api.github.com/users/marijnh/following{/other_user}", "gists_url": "https://api.github.com/users/marijnh/gists{/gist_id}", "starred_url": "https://api.github.com/users/marijnh/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marijnh/subscriptions", "organizations_url": "https://api.github.com/users/marijnh/orgs", "repos_url": "https://api.github.com/users/marijnh/repos", "events_url": "https://api.github.com/users/marijnh/events{/privacy}", "received_events_url": "https://api.github.com/users/marijnh/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "60547f6500b0bf726e675b058ad0bdfe21455c11", "url": "https://api.github.com/repos/rust-lang/rust/commits/60547f6500b0bf726e675b058ad0bdfe21455c11", "html_url": "https://github.com/rust-lang/rust/commit/60547f6500b0bf726e675b058ad0bdfe21455c11"}], "stats": {"total": 118, "additions": 111, "deletions": 7}, "files": [{"sha": "2e2bddba592c5a1bd42bbfc0d4a1947561be0672", "filename": "src/comp/back/abi.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fback%2Fabi.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fback%2Fabi.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fback%2Fabi.rs?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -52,7 +52,7 @@ const tydesc_field_align: int = 2;\n const tydesc_field_take_glue: int = 3;\n const tydesc_field_drop_glue: int = 4;\n const tydesc_field_free_glue: int = 5;\n-const tydesc_field_unused: int = 6;\n+const tydesc_field_copy_glue: int = 6;\n const tydesc_field_sever_glue: int = 7;\n const tydesc_field_mark_glue: int = 8;\n const tydesc_field_is_stateful: int = 9;"}, {"sha": "7d41a1e6bd7b1db6feab6d0b8f574c88589f9d35", "filename": "src/comp/middle/trans.rs", "status": "modified", "additions": 81, "deletions": 4, "changes": 85, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans.rs?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -1122,6 +1122,7 @@ fn declare_tydesc(cx: &@local_ctxt, sp: &span, t: ty::t, ty_params: &[uint])\n           mutable drop_glue: none::<ValueRef>,\n           mutable free_glue: none::<ValueRef>,\n           mutable cmp_glue: none::<ValueRef>,\n+          mutable copy_glue: none::<ValueRef>,\n           ty_params: ty_params};\n     log \"--- declare_tydesc \" + ty_to_str(cx.ccx.tcx, t);\n     ret info;\n@@ -1215,6 +1216,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     for each pair: @{key: ty::t, val: @tydesc_info} in ccx.tydescs.items() {\n         let glue_fn_ty = T_ptr(T_glue_fn(*ccx));\n         let cmp_fn_ty = T_ptr(T_cmp_glue_fn(*ccx));\n+        let copy_fn_ty = T_ptr(T_copy_glue_fn(*ccx));\n         let ti = pair.val;\n         let take_glue =\n             alt { ti.take_glue } {\n@@ -1236,6 +1238,11 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n               none. { ccx.stats.n_null_glues += 1u; C_null(cmp_fn_ty) }\n               some(v) { ccx.stats.n_real_glues += 1u; v }\n             };\n+        let copy_glue =\n+            alt { ti.copy_glue } {\n+              none. { ccx.stats.n_null_glues += 1u; C_null(copy_fn_ty) }\n+              some(v) { ccx.stats.n_real_glues += 1u; v }\n+            };\n \n         let shape = shape::shape_of(ccx, pair.key);\n         let shape_tables =\n@@ -1250,7 +1257,7 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n                             take_glue, // take_glue\n                             drop_glue, // drop_glue\n                             free_glue, // free_glue\n-                            C_null(T_ptr(T_i8())), // unused\n+                            copy_glue, // copy_glue\n                             C_null(glue_fn_ty), // sever_glue\n                             C_null(glue_fn_ty), // mark_glue\n                             C_null(glue_fn_ty), // is_stateful\n@@ -1267,6 +1274,14 @@ fn emit_tydescs(ccx: &@crate_ctxt) {\n     }\n }\n \n+// NOTE this is currently just a complicated way to do memmove. I'm working on\n+// a representation of ivecs that will need pointers into itself, which must\n+// be adjusted when copying. Will flesh this out when the time comes.\n+fn make_copy_glue(cx: &@block_ctxt, src: ValueRef, dst: ValueRef, t: ty::t) {\n+    let bcx = memmove_ty(cx, dst, src, t).bcx;\n+    build_return(bcx);\n+}\n+\n fn make_take_glue(cx: &@block_ctxt, v: ValueRef, t: ty::t) {\n     // NB: v is an *alias* of type t here, not a direct value.\n \n@@ -1988,6 +2003,7 @@ fn lazily_emit_all_tydesc_glue(cx: &@block_ctxt,\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_drop_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_free_glue, static_ti);\n     lazily_emit_tydesc_glue(cx, abi::tydesc_field_cmp_glue, static_ti);\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, static_ti);\n }\n \n fn lazily_emit_all_generic_info_tydesc_glues(cx: &@block_ctxt,\n@@ -2067,6 +2083,20 @@ fn lazily_emit_tydesc_glue(cx: &@block_ctxt, field: int,\n                          ty_to_str(bcx_tcx(cx), ti.ty)];\n               }\n             }\n+        } else if field == abi::tydesc_field_copy_glue {\n+            alt { ti.copy_glue } {\n+              some(_) {}\n+              none. {\n+                let lcx = cx.fcx.lcx;\n+                let glue_fn =\n+                    declare_generic_glue(lcx, ti.ty, T_copy_glue_fn(*lcx.ccx),\n+                                         \"copy\");\n+                ti.copy_glue = some(glue_fn);\n+                make_generic_glue(lcx, cx.sp, ti.ty, glue_fn,\n+                                  copy_helper(make_copy_glue),\n+                                  ti.ty_params, \"copy\");\n+              }\n+            }\n         }\n       }\n     }\n@@ -2156,6 +2186,45 @@ fn call_cmp_glue(cx: &@block_ctxt, lhs: ValueRef, rhs: ValueRef, t: ty::t,\n     ret rslt(r.bcx, bld::Load(r.bcx, llcmpresultptr));\n }\n \n+fn call_copy_glue(cx: &@block_ctxt, dst: ValueRef, src: ValueRef, t: ty::t,\n+                  take: bool) -> @block_ctxt {\n+    // You can't call this on immediate types. Those are simply copied with\n+    // Load/Store.\n+    assert !type_is_immediate(bcx_ccx(cx), t);\n+    let srcptr = bld::BitCast(cx, src, T_ptr(T_i8()));\n+    let dstptr = bld::BitCast(cx, dst, T_ptr(T_i8()));\n+    let ti = none;\n+    let {bcx, val: lltydesc} = get_tydesc(cx, t, false, ti).result;\n+    lazily_emit_tydesc_glue(cx, abi::tydesc_field_copy_glue, ti);\n+    let lltydescs = bld::GEP\n+        (bcx, lltydesc, [C_int(0), C_int(abi::tydesc_field_first_param)]);\n+    lltydescs = bld::Load(bcx, lltydescs);\n+\n+    let llfn = alt ti {\n+      none. {\n+        bld::Load(bcx, bld::GEP\n+            (bcx, lltydesc, [C_int(0), C_int(abi::tydesc_field_copy_glue)]))\n+      }\n+      some(sti) { option::get(sti.copy_glue) }\n+    };\n+    bld::Call(bcx, llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n+                          C_null(T_ptr(T_nil())), lltydescs, srcptr, dstptr]);\n+    if take {\n+        lazily_emit_tydesc_glue(cx, abi::tydesc_field_take_glue, ti);\n+        llfn = alt ti {\n+          none. {\n+            bld::Load(bcx, bld::GEP(bcx, lltydesc,\n+                                    [C_int(0),\n+                                     C_int(abi::tydesc_field_take_glue)]))\n+          }\n+          some(sti) { option::get(sti.take_glue) }\n+        };\n+        bld::Call(bcx, llfn, [C_null(T_ptr(T_nil())), bcx.fcx.lltaskptr,\n+                              C_null(T_ptr(T_nil())), lltydescs, dstptr]);\n+    }\n+    ret bcx;\n+}\n+\n \n // Compares two values. Performs the simple scalar comparison if the types are\n // scalar and calls to comparison glue otherwise.\n@@ -2310,8 +2379,12 @@ fn copy_val_no_check(cx: &@block_ctxt, action: copy_action, dst: ValueRef,\n         let bcx = if action == DROP_EXISTING {\n             drop_ty(cx, dst, t).bcx\n         } else { cx };\n-        bcx = memmove_ty(bcx, dst, src, t).bcx;\n-        ret take_ty(bcx, dst, t).bcx;\n+        if ty::type_needs_copy_glue(ccx.tcx, t) {\n+            ret call_copy_glue(bcx, dst, src, t, true);\n+        } else {\n+            bcx = memmove_ty(bcx, dst, src, t).bcx;\n+            ret take_ty(bcx, dst, t).bcx;\n+        }\n     }\n     ccx.sess.bug(\"unexpected type in trans::copy_val_no_check: \" +\n                      ty_to_str(ccx.tcx, t));\n@@ -2348,7 +2421,11 @@ fn move_val(cx: @block_ctxt, action: copy_action, dst: ValueRef,\n         ret cx;\n     } else if type_is_structural_or_param(tcx, t) {\n         if action == DROP_EXISTING { cx = drop_ty(cx, dst, t).bcx; }\n-        cx = memmove_ty(cx, dst, src_val, t).bcx;\n+        if ty::type_needs_copy_glue(tcx, t) {\n+            cx = call_copy_glue(cx, dst, src_val, t, false);\n+        } else {\n+            cx = memmove_ty(cx, dst, src_val, t).bcx;\n+        }\n         if src.is_mem {\n             ret zero_alloca(cx, src_val, t).bcx;\n         } else { // Temporary value"}, {"sha": "b457ff22b3077fb3af1f29e13bc0c21da933494c", "filename": "src/comp/middle/trans_common.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans_common.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_common.rs?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -85,6 +85,7 @@ type tydesc_info =\n      mutable drop_glue: option::t<ValueRef>,\n      mutable free_glue: option::t<ValueRef>,\n      mutable cmp_glue: option::t<ValueRef>,\n+     mutable copy_glue: option::t<ValueRef>,\n      ty_params: [uint]};\n \n /*\n@@ -614,6 +615,14 @@ fn T_cmp_glue_fn(cx: &crate_ctxt) -> TypeRef {\n     ret t;\n }\n \n+fn T_copy_glue_fn(cx: &crate_ctxt) -> TypeRef {\n+    let s = \"copy_glue_fn\";\n+    if cx.tn.name_has_type(s) { ret cx.tn.get_type(s); }\n+    let t = T_tydesc_field(cx, abi::tydesc_field_copy_glue);\n+    cx.tn.associate(s, t);\n+    ret t;\n+}\n+\n fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let tydesc = T_named_struct(\"tydesc\");\n     let tydescpp = T_ptr(T_ptr(tydesc));\n@@ -624,10 +633,13 @@ fn T_tydesc(taskptr_type: TypeRef) -> TypeRef {\n     let cmp_glue_fn_ty =\n         T_ptr(T_fn([T_ptr(T_i1()), taskptr_type, T_ptr(tydesc), tydescpp,\n                     pvoid, pvoid, T_i8()], T_void()));\n+    let copy_glue_fn_ty =\n+        T_ptr(T_fn([T_ptr(T_nil()), taskptr_type, T_ptr(T_nil()), tydescpp,\n+                    pvoid, pvoid], T_void()));\n \n     let elems =\n         [tydescpp, T_int(), T_int(), glue_fn_ty, glue_fn_ty, glue_fn_ty,\n-         T_ptr(T_i8()), glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n+         copy_glue_fn_ty, glue_fn_ty, glue_fn_ty, glue_fn_ty, cmp_glue_fn_ty,\n          T_ptr(T_i8()), T_ptr(T_i8()), T_int()];\n     set_struct_body(tydesc, elems);\n     ret tydesc;"}, {"sha": "b0c18dbc522722e27cb06df81d2fe4206b5aa9e5", "filename": "src/comp/middle/trans_ivec.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Ftrans_ivec.rs?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -367,6 +367,7 @@ fn trans_append(cx: &@block_ctxt, t: ty::t, lhs: ValueRef,\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_take_glue, none);\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_drop_glue, none);\n     lazily_emit_tydesc_glue(bcx, abi::tydesc_field_free_glue, none);\n+    lazily_emit_tydesc_glue(bcx, abi::tydesc_field_copy_glue, none);\n     let rhs_len_and_data = get_len_and_data(bcx, rhs, unit_ty);\n     let rhs_len = rhs_len_and_data.len;\n     let rhs_data = rhs_len_and_data.data;"}, {"sha": "5d448825b890b3d33a5a2518fcd2889a14c285ec", "filename": "src/comp/middle/ty.rs", "status": "modified", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Fty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Fcomp%2Fmiddle%2Fty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fcomp%2Fmiddle%2Fty.rs?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -156,6 +156,7 @@ export type_kind;\n export type_err;\n export type_err_to_str;\n export type_has_dynamic_size;\n+export type_needs_copy_glue;\n export type_has_pointers;\n export type_needs_drop;\n export type_is_bool;\n@@ -1177,6 +1178,17 @@ fn type_has_dynamic_size(cx: &ctxt, ty: t) -> bool {\n     });\n }\n \n+fn type_needs_copy_glue(cx: &ctxt, ty: t) -> bool {\n+    ret type_structurally_contains(cx, ty, fn(sty: &sty) -> bool {\n+        ret alt sty {\n+          ty_param(_, _) { true }\n+          ty_vec(_) { true }\n+          ty_istr. { true }\n+          _ { false }\n+        };\n+    });\n+}\n+\n fn type_is_integral(cx: &ctxt, ty: t) -> bool {\n     alt struct(cx, ty) {\n       ty_int. { ret true; }"}, {"sha": "dd9f1d0cbc89bf0ca4dda4197a8b2be09157d74e", "filename": "src/rt/rust_internal.h", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Frt%2Frust_internal.h", "raw_url": "https://github.com/rust-lang/rust/raw/fa97793139a6b055eb0fba91ef7d64f6a545ca99/src%2Frt%2Frust_internal.h", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_internal.h?ref=fa97793139a6b055eb0fba91ef7d64f6a545ca99", "patch": "@@ -257,6 +257,8 @@ struct rust_timer {\n \n typedef void CDECL (glue_fn)(void *, rust_task *, void *,\n                              const type_desc **, void *);\n+typedef void CDECL (copy_glue_fn)(void *, rust_task *, void *,\n+                                  const type_desc **, void *, void *);\n typedef void CDECL (cmp_glue_fn)(void *, rust_task *, void *,\n                                  const type_desc **,\n                                  void *, void *, int8_t);\n@@ -275,7 +277,7 @@ struct type_desc {\n     glue_fn *take_glue;\n     glue_fn *drop_glue;\n     glue_fn *free_glue;\n-    void *unused;\n+    copy_glue_fn *copy_glue;\n     glue_fn *sever_glue;    // For GC.\n     glue_fn *mark_glue;     // For GC.\n     uintptr_t is_stateful;"}]}