{"sha": "bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "node_id": "MDY6Q29tbWl0NzI0NzEyOmJmMjRjYjNlOGRiOTRhODRmYjRhMjRjNDA3Nzk3YWI2ZmY1ZWUxMDk=", "commit": {"author": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-08T12:38:43Z"}, "committer": {"name": "Kirill Bulatov", "email": "mail4score@gmail.com", "date": "2020-12-08T13:05:09Z"}, "message": "Tweak the search query params for better lookup speed", "tree": {"sha": "ec3e2e0696147459460950ead2bc90591a6347ce", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec3e2e0696147459460950ead2bc90591a6347ce"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "html_url": "https://github.com/rust-lang/rust/commit/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109/comments", "author": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SomeoneToIgnore", "id": 2690773, "node_id": "MDQ6VXNlcjI2OTA3NzM=", "avatar_url": "https://avatars.githubusercontent.com/u/2690773?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SomeoneToIgnore", "html_url": "https://github.com/SomeoneToIgnore", "followers_url": "https://api.github.com/users/SomeoneToIgnore/followers", "following_url": "https://api.github.com/users/SomeoneToIgnore/following{/other_user}", "gists_url": "https://api.github.com/users/SomeoneToIgnore/gists{/gist_id}", "starred_url": "https://api.github.com/users/SomeoneToIgnore/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SomeoneToIgnore/subscriptions", "organizations_url": "https://api.github.com/users/SomeoneToIgnore/orgs", "repos_url": "https://api.github.com/users/SomeoneToIgnore/repos", "events_url": "https://api.github.com/users/SomeoneToIgnore/events{/privacy}", "received_events_url": "https://api.github.com/users/SomeoneToIgnore/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "cbd3717f2c52b17aa9b15c2df4a364c62d17e4e1", "url": "https://api.github.com/repos/rust-lang/rust/commits/cbd3717f2c52b17aa9b15c2df4a364c62d17e4e1", "html_url": "https://github.com/rust-lang/rust/commit/cbd3717f2c52b17aa9b15c2df4a364c62d17e4e1"}], "stats": {"total": 70, "additions": 38, "deletions": 32}, "files": [{"sha": "4e4e2b36f07c75a3e56f6351e45e05295489c690", "filename": "crates/completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 29, "deletions": 31, "changes": 60, "blob_url": "https://github.com/rust-lang/rust/blob/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fcompletion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "patch": "@@ -99,7 +99,6 @@ fn complete_enum_variants(acc: &mut Completions, ctx: &CompletionContext, ty: &T\n //\n // To avoid an excessive amount of the results returned, completion input is checked for inclusion in the identifiers only\n // (i.e. in `HashMap` in the `std::collections::HashMap` path), also not in the module indentifiers.\n-// It also avoids searching for any imports for inputs with their length less that 3 symbols.\n //\n // .Merge Behaviour\n //\n@@ -123,40 +122,39 @@ fn fuzzy_completion(acc: &mut Completions, ctx: &CompletionContext) -> Option<()\n     let _p = profile::span(\"fuzzy_completion\");\n     let potential_import_name = ctx.token.to_string();\n \n-    if potential_import_name.len() < 3 {\n-        return None;\n-    }\n-\n     let current_module = ctx.scope.module()?;\n     let anchor = ctx.name_ref_syntax.as_ref()?;\n     let import_scope = ImportScope::find_insert_use_container(anchor.syntax(), &ctx.sema)?;\n \n-    let possible_imports =\n-        imports_locator::find_similar_imports(&ctx.sema, ctx.krate?, &potential_import_name, true)\n-            .filter_map(|import_candidate| {\n-                Some(match import_candidate {\n-                    Either::Left(module_def) => (\n-                        current_module.find_use_path(ctx.db, module_def)?,\n-                        ScopeDef::ModuleDef(module_def),\n-                    ),\n-                    Either::Right(macro_def) => (\n-                        current_module.find_use_path(ctx.db, macro_def)?,\n-                        ScopeDef::MacroDef(macro_def),\n-                    ),\n-                })\n-            })\n-            .filter(|(mod_path, _)| mod_path.len() > 1)\n-            .filter_map(|(import_path, definition)| {\n-                render_resolution_with_import(\n-                    RenderContext::new(ctx),\n-                    ImportEdit {\n-                        import_path: import_path.clone(),\n-                        import_scope: import_scope.clone(),\n-                        merge_behaviour: ctx.config.merge,\n-                    },\n-                    &definition,\n-                )\n-            });\n+    let possible_imports = imports_locator::find_similar_imports(\n+        &ctx.sema,\n+        ctx.krate?,\n+        Some(100),\n+        &potential_import_name,\n+        true,\n+    )\n+    .filter_map(|import_candidate| {\n+        Some(match import_candidate {\n+            Either::Left(module_def) => {\n+                (current_module.find_use_path(ctx.db, module_def)?, ScopeDef::ModuleDef(module_def))\n+            }\n+            Either::Right(macro_def) => {\n+                (current_module.find_use_path(ctx.db, macro_def)?, ScopeDef::MacroDef(macro_def))\n+            }\n+        })\n+    })\n+    .filter(|(mod_path, _)| mod_path.len() > 1)\n+    .filter_map(|(import_path, definition)| {\n+        render_resolution_with_import(\n+            RenderContext::new(ctx),\n+            ImportEdit {\n+                import_path: import_path.clone(),\n+                import_scope: import_scope.clone(),\n+                merge_behaviour: ctx.config.merge,\n+            },\n+            &definition,\n+        )\n+    });\n \n     acc.add_all(possible_imports);\n     Some(())"}, {"sha": "b2980a5d69df2e651791ddc74c1b92e0d679f062", "filename": "crates/ide_db/src/imports_locator.rs", "status": "modified", "additions": 9, "deletions": 1, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf24cb3e8db94a84fb4a24c407797ab6ff5ee109/crates%2Fide_db%2Fsrc%2Fimports_locator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fimports_locator.rs?ref=bf24cb3e8db94a84fb4a24c407797ab6ff5ee109", "patch": "@@ -34,6 +34,7 @@ pub fn find_exact_imports<'a>(\n pub fn find_similar_imports<'a>(\n     sema: &Semantics<'a, RootDatabase>,\n     krate: Crate,\n+    limit: Option<usize>,\n     name_to_import: &str,\n     ignore_modules: bool,\n ) -> impl Iterator<Item = Either<ModuleDef, MacroDef>> {\n@@ -44,7 +45,14 @@ pub fn find_similar_imports<'a>(\n         external_query = external_query.exclude_import_kind(import_map::ImportKind::Module);\n     }\n \n-    find_imports(sema, krate, symbol_index::Query::new(name_to_import.to_string()), external_query)\n+    let mut local_query = symbol_index::Query::new(name_to_import.to_string());\n+\n+    if let Some(limit) = limit {\n+        local_query.limit(limit);\n+        external_query = external_query.limit(limit);\n+    }\n+\n+    find_imports(sema, krate, local_query, external_query)\n }\n \n fn find_imports<'a>("}]}