{"sha": "b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "node_id": "MDY6Q29tbWl0NzI0NzEyOmI5M2VjYzFkYWNkM2Q1MzRiMGZhMjRlNGIxNGNkM2IwN2JhZTk4ODk=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-04T18:40:59Z"}, "committer": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-07-04T18:43:43Z"}, "message": "Address code reviews", "tree": {"sha": "3f371ffe374d490ad1e403003bbfbc9574f6764e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3f371ffe374d490ad1e403003bbfbc9574f6764e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEXmatGLoofN5+9u4rsJhshcDi2qEFAl8Azd8ACgkQsJhshcDi\n2qGHww//Rq7aIOywJL4Gq7C0vUp637Wnj173SITpcW8/u19B3/myhXqu+NkR0JuM\nO1esq4FDZj8bfB/3cCXRLqTZAxF6yNdlQ3+crz5+DnrY488DHDwcyIz23KNHd4bI\nsVM3Hqt3Nx7ZCM4UY6WXS48hPCxDAQ1wWdJDezFuFcaJ0A//KXS+QiCWD4XJq7ud\nGZhtRpN1wxR/h4WCKy6VZDGZKWUjCiW3rXW5VLB9lqUcaB3EWz92itRdzxwldDtC\nrNUNu1QPvXlj1I4j+Gvyj8l2oGebZ3hK9ejf+szRHuuvzunil1CJA/C/zQRQbomJ\nnU1hjhuTekM+uN+XPgYOijFFRubxGaZS8mZfaa9n62Qu/Wapdi/y4yTaPhq0oJ3u\n8xBxaPTEURqVUIcY8ftLt0QKbGN3C+YVK4432NU8Se6AcHYK1hYD5zw19HnwDcH7\nSDxC9ZUFxe7V9e8TUlKgHr16o2zBvO8TCX8kd5vmqJaOkvX0U3Z4+yVT56T/vx8Z\nilMI8g40mpZiqicQMyC+s2UoYFa/gL2XLu1of3ILBxonCF5I1cMaw1CaVGv7uz6I\n+LDWCV5QrdC4CO9OP8FpOzHT04IvL4zCyIo/WEJ12gKIyMRjxvrwZTW31Q1BcB4o\nXGVRhmkODVMnBdHKlFimt6eY3lmgadi22jnuiQsOobXqM0nNR2U=\n=/Dn/\n-----END PGP SIGNATURE-----", "payload": "tree 3f371ffe374d490ad1e403003bbfbc9574f6764e\nparent dcbe85abad8ddd3a39fcafe70a884db4e71f0b03\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1593888059 +0900\ncommitter Yuki Okushi <huyuumi.dev@gmail.com> 1593888223 +0900\n\nAddress code reviews\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "html_url": "https://github.com/rust-lang/rust/commit/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "url": "https://api.github.com/repos/rust-lang/rust/commits/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03", "html_url": "https://github.com/rust-lang/rust/commit/dcbe85abad8ddd3a39fcafe70a884db4e71f0b03"}], "stats": {"total": 64, "additions": 43, "deletions": 21}, "files": [{"sha": "4bfb6cccbcb300df71192b8b40db83df41a32c6d", "filename": "src/librustc_mir_build/hair/pattern/check_match.rs", "status": "modified", "additions": 18, "deletions": 7, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir_build%2Fhair%2Fpattern%2Fcheck_match.rs?ref=b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "patch": "@@ -12,6 +12,7 @@ use rustc_hir::def_id::DefId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{HirId, Pat};\n use rustc_middle::ty::{self, Ty, TyCtxt};\n+use rustc_session::config::nightly_options;\n use rustc_session::lint::builtin::BINDINGS_WITH_VARIANT_NAME;\n use rustc_session::lint::builtin::{IRREFUTABLE_LET_PATTERNS, UNREACHABLE_PATTERNS};\n use rustc_session::parse::feature_err;\n@@ -468,14 +469,14 @@ fn check_exhaustive<'p, 'tcx>(\n     // In the case of an empty match, replace the '`_` not covered' diagnostic with something more\n     // informative.\n     let mut err;\n-    let joined_patterns = joined_uncovered_patterns(&witnesses);\n     if is_empty_match && !non_empty_enum {\n         err = create_e0004(\n             cx.tcx.sess,\n             sp,\n             format!(\"non-exhaustive patterns: type `{}` is non-empty\", scrut_ty),\n         );\n     } else {\n+        let joined_patterns = joined_uncovered_patterns(&witnesses);\n         err = create_e0004(\n             cx.tcx.sess,\n             sp,\n@@ -487,16 +488,26 @@ fn check_exhaustive<'p, 'tcx>(\n     adt_defined_here(cx, &mut err, scrut_ty, &witnesses);\n     err.help(\n         \"ensure that all possible cases are being handled, \\\n-         possibly by adding wildcards or more match arms\",\n+              possibly by adding wildcards or more match arms\",\n     );\n     err.note(&format!(\"the matched value is of type `{}`\", scrut_ty));\n     if (scrut_ty == cx.tcx.types.usize || scrut_ty == cx.tcx.types.isize)\n-        && joined_patterns == \"`_`\"\n+        && !is_empty_match\n+        && witnesses.len() == 1\n+        && witnesses[0].is_wildcard()\n     {\n-        err.note(\"for `usize` and `isize`, no assumptions about the maximum value are permitted\");\n-        err.note(\n-            \"to exhaustively match on either pointer-size integer type, wildcards must be used\",\n-        );\n+        err.note(&format!(\n+            \"`{}` does not have a fixed maximum value, \\\n+                so a wildcard `_` is necessary to match exhaustively\",\n+            scrut_ty,\n+        ));\n+        if nightly_options::is_nightly_build() {\n+            err.help(&format!(\n+                \"add `#![feature(precise_pointer_size_matching)]` \\\n+                    to the crate attributes to enable precise `{}` matching\",\n+                scrut_ty,\n+            ));\n+        }\n     }\n     err.emit();\n }"}, {"sha": "c7a63e5d50252cc02765ee334de9ee95e727c203", "filename": "src/test/ui/feature-gates/feature-gate-precise_pointer_size_matching.stderr", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ffeature-gates%2Ffeature-gate-precise_pointer_size_matching.stderr?ref=b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "patch": "@@ -6,8 +6,8 @@ LL |     match 0usize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n-   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n-   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n   --> $DIR/feature-gate-precise_pointer_size_matching.rs:10:11\n@@ -17,8 +17,8 @@ LL |     match 0isize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n-   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n-   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n error: aborting due to 2 previous errors\n "}, {"sha": "0c52876e21f9519b370765f838445936d98bbec0", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.rs", "status": "modified", "additions": 6, "deletions": 4, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "raw_url": "https://github.com/rust-lang/rust/raw/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.rs?ref=b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "patch": "@@ -5,17 +5,19 @@ fn main() {\n         //~^ ERROR non-exhaustive patterns\n         //~| NOTE pattern `_` not covered\n         //~| NOTE the matched value is of type `usize`\n-        //~| NOTE for `usize` and `isize`, no assumptions about the maximum value are permitted\n-        //~| NOTE to exhaustively match on either pointer-size integer type, wildcards must be used\n+        //~| NOTE `usize` does not have a fixed maximum value\n         0 ..= usize::MAX => {}\n     }\n \n     match 0isize {\n         //~^ ERROR non-exhaustive patterns\n         //~| NOTE pattern `_` not covered\n         //~| NOTE the matched value is of type `isize`\n-        //~| NOTE for `usize` and `isize`, no assumptions about the maximum value are permitted\n-        //~| NOTE to exhaustively match on either pointer-size integer type, wildcards must be used\n+        //~| NOTE `isize` does not have a fixed maximum value\n         isize::MIN ..= isize::MAX => {}\n     }\n+\n+    match 7usize {}\n+    //~^ ERROR non-exhaustive patterns\n+    //~| NOTE the matched value is of type `usize`\n }"}, {"sha": "d0aa452fd386176ea93435fe1fee7fdbd51fb4de", "filename": "src/test/ui/pattern/usefulness/non-exhaustive-pattern-pointer-size-int.stderr", "status": "modified", "additions": 15, "deletions": 6, "changes": 21, "blob_url": "https://github.com/rust-lang/rust/blob/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fusefulness%2Fnon-exhaustive-pattern-pointer-size-int.stderr?ref=b93ecc1dacd3d534b0fa24e4b14cd3b07bae9889", "patch": "@@ -6,20 +6,29 @@ LL |     match 0usize {\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `usize`\n-   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n-   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+   = note: `usize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `usize` matching\n \n error[E0004]: non-exhaustive patterns: `_` not covered\n-  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:13:11\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:12:11\n    |\n LL |     match 0isize {\n    |           ^^^^^^ pattern `_` not covered\n    |\n    = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n    = note: the matched value is of type `isize`\n-   = note: for `usize` and `isize`, no assumptions about the maximum value are permitted\n-   = note: to exhaustively match on either pointer-size integer type, wildcards must be used\n+   = note: `isize` does not have a fixed maximum value, so a wildcard `_` is necessary to match exhaustively\n+   = help: add `#![feature(precise_pointer_size_matching)]` to the crate attributes to enable precise `isize` matching\n \n-error: aborting due to 2 previous errors\n+error[E0004]: non-exhaustive patterns: type `usize` is non-empty\n+  --> $DIR/non-exhaustive-pattern-pointer-size-int.rs:20:11\n+   |\n+LL |     match 7usize {}\n+   |           ^^^^^^\n+   |\n+   = help: ensure that all possible cases are being handled, possibly by adding wildcards or more match arms\n+   = note: the matched value is of type `usize`\n+\n+error: aborting due to 3 previous errors\n \n For more information about this error, try `rustc --explain E0004`."}]}