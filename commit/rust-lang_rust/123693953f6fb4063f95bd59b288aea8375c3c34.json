{"sha": "123693953f6fb4063f95bd59b288aea8375c3c34", "node_id": "C_kwDOAAsO6NoAKDEyMzY5Mzk1M2Y2ZmI0MDYzZjk1YmQ1OWIyODhhZWE4Mzc1YzNjMzQ", "commit": {"author": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-11T15:13:02Z"}, "committer": {"name": "jyn", "email": "github@jyn.dev", "date": "2023-06-11T15:14:37Z"}, "message": "Don't override `debuginfo-level = 1` to mean `line-tables-only`\n\nThis has real differences in the effective debuginfo: in particular, it omits the module-level information and breaks perf.\n\nAllow passing `line-tables-only` directly in config.toml instead.", "tree": {"sha": "a3766440fa2218e8733f0edd94a3f5c41e4363c1", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a3766440fa2218e8733f0edd94a3f5c41e4363c1"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/123693953f6fb4063f95bd59b288aea8375c3c34", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/123693953f6fb4063f95bd59b288aea8375c3c34", "html_url": "https://github.com/rust-lang/rust/commit/123693953f6fb4063f95bd59b288aea8375c3c34", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/123693953f6fb4063f95bd59b288aea8375c3c34/comments", "author": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jyn514", "id": 23638587, "node_id": "MDQ6VXNlcjIzNjM4NTg3", "avatar_url": "https://avatars.githubusercontent.com/u/23638587?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jyn514", "html_url": "https://github.com/jyn514", "followers_url": "https://api.github.com/users/jyn514/followers", "following_url": "https://api.github.com/users/jyn514/following{/other_user}", "gists_url": "https://api.github.com/users/jyn514/gists{/gist_id}", "starred_url": "https://api.github.com/users/jyn514/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jyn514/subscriptions", "organizations_url": "https://api.github.com/users/jyn514/orgs", "repos_url": "https://api.github.com/users/jyn514/repos", "events_url": "https://api.github.com/users/jyn514/events{/privacy}", "received_events_url": "https://api.github.com/users/jyn514/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "34d64ab7a21f704adb496ee2749242fc3511f0f8", "url": "https://api.github.com/repos/rust-lang/rust/commits/34d64ab7a21f704adb496ee2749242fc3511f0f8", "html_url": "https://github.com/rust-lang/rust/commit/34d64ab7a21f704adb496ee2749242fc3511f0f8"}], "stats": {"total": 93, "additions": 73, "deletions": 20}, "files": [{"sha": "51d94c48f7ffb7fe8f6f1ddcd68cfbb037ac7fb0", "filename": "src/bootstrap/builder.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/123693953f6fb4063f95bd59b288aea8375c3c34/src%2Fbootstrap%2Fbuilder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123693953f6fb4063f95bd59b288aea8375c3c34/src%2Fbootstrap%2Fbuilder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fbuilder.rs?ref=123693953f6fb4063f95bd59b288aea8375c3c34", "patch": "@@ -1649,12 +1649,7 @@ impl<'a> Builder<'a> {\n                 self.config.rust_debuginfo_level_tools\n             }\n         };\n-        if debuginfo_level == 1 {\n-            // Use less debuginfo than the default to save on disk space.\n-            cargo.env(profile_var(\"DEBUG\"), \"line-tables-only\");\n-        } else {\n-            cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n-        };\n+        cargo.env(profile_var(\"DEBUG\"), debuginfo_level.to_string());\n         if self.cc[&target].args().iter().any(|arg| arg == \"-gz\") {\n             rustflags.arg(\"-Clink-arg=-gz\");\n         }"}, {"sha": "b521ad75d63a1fb8172e92803dd193f8cb99f3b6", "filename": "src/bootstrap/config.rs", "status": "modified", "additions": 72, "deletions": 14, "changes": 86, "blob_url": "https://github.com/rust-lang/rust/blob/123693953f6fb4063f95bd59b288aea8375c3c34/src%2Fbootstrap%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/123693953f6fb4063f95bd59b288aea8375c3c34/src%2Fbootstrap%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fconfig.rs?ref=123693953f6fb4063f95bd59b288aea8375c3c34", "patch": "@@ -10,7 +10,7 @@ use std::cell::{Cell, RefCell};\n use std::cmp;\n use std::collections::{HashMap, HashSet};\n use std::env;\n-use std::fmt;\n+use std::fmt::{self, Display};\n use std::fs;\n use std::io::IsTerminal;\n use std::path::{Path, PathBuf};\n@@ -50,6 +50,57 @@ pub enum DryRun {\n     UserSelected,\n }\n \n+#[derive(Copy, Clone, Default)]\n+pub enum DebuginfoLevel {\n+    #[default]\n+    None,\n+    LineTablesOnly,\n+    Limited,\n+    Full,\n+}\n+\n+// NOTE: can't derive(Deserialize) because the intermediate trip through toml::Value only\n+// deserializes i64, and derive() only generates visit_u64\n+impl<'de> Deserialize<'de> for DebuginfoLevel {\n+    fn deserialize<D>(deserializer: D) -> Result<Self, D::Error>\n+    where\n+        D: Deserializer<'de>,\n+    {\n+        use serde::de::Error;\n+\n+        Ok(match Deserialize::deserialize(deserializer)? {\n+            StringOrInt::String(\"none\") | StringOrInt::Int(0) => DebuginfoLevel::None,\n+            StringOrInt::String(\"line-tables-only\") => DebuginfoLevel::LineTablesOnly,\n+            StringOrInt::String(\"limited\") | StringOrInt::Int(1) => DebuginfoLevel::Limited,\n+            StringOrInt::String(\"full\") | StringOrInt::Int(2) => DebuginfoLevel::Full,\n+            StringOrInt::Int(n) => {\n+                let other = serde::de::Unexpected::Signed(n);\n+                return Err(D::Error::invalid_value(other, &\"expected 0, 1, or 2\"));\n+            }\n+            StringOrInt::String(s) => {\n+                let other = serde::de::Unexpected::Str(s);\n+                return Err(D::Error::invalid_value(\n+                    other,\n+                    &\"expected none, line-tables-only, limited, or full\",\n+                ));\n+            }\n+        })\n+    }\n+}\n+\n+/// Suitable for passing to `-C debuginfo`\n+impl Display for DebuginfoLevel {\n+    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {\n+        use DebuginfoLevel::*;\n+        f.write_str(match self {\n+            None => \"0\",\n+            LineTablesOnly => \"line-tables-only\",\n+            Limited => \"1\",\n+            Full => \"2\",\n+        })\n+    }\n+}\n+\n /// Global configuration for the entire build and/or bootstrap.\n ///\n /// This structure is parsed from `config.toml`, and some of the fields are inferred from `git` or build-time parameters.\n@@ -159,10 +210,10 @@ pub struct Config {\n     pub rust_overflow_checks: bool,\n     pub rust_overflow_checks_std: bool,\n     pub rust_debug_logging: bool,\n-    pub rust_debuginfo_level_rustc: u32,\n-    pub rust_debuginfo_level_std: u32,\n-    pub rust_debuginfo_level_tools: u32,\n-    pub rust_debuginfo_level_tests: u32,\n+    pub rust_debuginfo_level_rustc: DebuginfoLevel,\n+    pub rust_debuginfo_level_std: DebuginfoLevel,\n+    pub rust_debuginfo_level_tools: DebuginfoLevel,\n+    pub rust_debuginfo_level_tests: DebuginfoLevel,\n     pub rust_split_debuginfo: SplitDebuginfo,\n     pub rust_rpath: bool,\n     pub rustc_parallel: bool,\n@@ -810,6 +861,13 @@ impl Default for StringOrBool {\n     }\n }\n \n+#[derive(Deserialize)]\n+#[serde(untagged)]\n+enum StringOrInt<'a> {\n+    String(&'a str),\n+    Int(i64),\n+}\n+\n define_config! {\n     /// TOML representation of how the Rust build is configured.\n     struct Rust {\n@@ -822,11 +880,11 @@ define_config! {\n         overflow_checks: Option<bool> = \"overflow-checks\",\n         overflow_checks_std: Option<bool> = \"overflow-checks-std\",\n         debug_logging: Option<bool> = \"debug-logging\",\n-        debuginfo_level: Option<u32> = \"debuginfo-level\",\n-        debuginfo_level_rustc: Option<u32> = \"debuginfo-level-rustc\",\n-        debuginfo_level_std: Option<u32> = \"debuginfo-level-std\",\n-        debuginfo_level_tools: Option<u32> = \"debuginfo-level-tools\",\n-        debuginfo_level_tests: Option<u32> = \"debuginfo-level-tests\",\n+        debuginfo_level: Option<DebuginfoLevel> = \"debuginfo-level\",\n+        debuginfo_level_rustc: Option<DebuginfoLevel> = \"debuginfo-level-rustc\",\n+        debuginfo_level_std: Option<DebuginfoLevel> = \"debuginfo-level-std\",\n+        debuginfo_level_tools: Option<DebuginfoLevel> = \"debuginfo-level-tools\",\n+        debuginfo_level_tests: Option<DebuginfoLevel> = \"debuginfo-level-tests\",\n         split_debuginfo: Option<String> = \"split-debuginfo\",\n         run_dsymutil: Option<bool> = \"run-dsymutil\",\n         backtrace: Option<bool> = \"backtrace\",\n@@ -1478,17 +1536,17 @@ impl Config {\n \n         config.rust_debug_logging = debug_logging.unwrap_or(config.rust_debug_assertions);\n \n-        let with_defaults = |debuginfo_level_specific: Option<u32>| {\n+        let with_defaults = |debuginfo_level_specific: Option<_>| {\n             debuginfo_level_specific.or(debuginfo_level).unwrap_or(if debug == Some(true) {\n-                1\n+                DebuginfoLevel::Limited\n             } else {\n-                0\n+                DebuginfoLevel::None\n             })\n         };\n         config.rust_debuginfo_level_rustc = with_defaults(debuginfo_level_rustc);\n         config.rust_debuginfo_level_std = with_defaults(debuginfo_level_std);\n         config.rust_debuginfo_level_tools = with_defaults(debuginfo_level_tools);\n-        config.rust_debuginfo_level_tests = debuginfo_level_tests.unwrap_or(0);\n+        config.rust_debuginfo_level_tests = debuginfo_level_tests.unwrap_or(DebuginfoLevel::None);\n \n         let download_rustc = config.download_rustc_commit.is_some();\n         // See https://github.com/rust-lang/compiler-team/issues/326"}]}