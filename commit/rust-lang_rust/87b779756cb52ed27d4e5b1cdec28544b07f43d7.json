{"sha": "87b779756cb52ed27d4e5b1cdec28544b07f43d7", "node_id": "C_kwDOAAsO6NoAKDg3Yjc3OTc1NmNiNTJlZDI3ZDRlNWIxY2RlYzI4NTQ0YjA3ZjQzZDc", "commit": {"author": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-08-20T07:58:43Z"}, "committer": {"name": "Kartavya Vashishtha", "email": "sendtokartavya@gmail.com", "date": "2022-08-20T07:58:43Z"}, "message": "make impl and trait inactive diagnostics work", "tree": {"sha": "2a591a2e4d7a3a2e25a13486208d5a1ede92b307", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2a591a2e4d7a3a2e25a13486208d5a1ede92b307"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/87b779756cb52ed27d4e5b1cdec28544b07f43d7", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEE+fRQYdEX7Emd36W/pQASwjJOXfAFAmMAlDQACgkQpQASwjJO\nXfAWyA//aGJ11nGu0Zk1IQriRViqxgJyU5fvCpS0WNVdl3/FYSYmyzOPrVxw+Fj2\nXWJUwBtRfZXTNd/Wv5ZplCQusYEuI+hqq42Vhn8t0ApWHGHUvuhv3Spvna5f6r5l\nbveBxcoq5ED7/r3epwx0/JiMPECm+NvktHV3QWiknCKxMxMxCBcpCJUdzcdOrP3j\nXQzo69XWKejMuc/LjtAE+pfK9W2/B/OliRbxLaPRzippZxhSVpxSy5ddZ0riVPma\nfbI7zIAomQhIGz6S7d/XkRfq9we802UK9ns/QKcVHa6XFBSDzxhpw3ScxpcEbXpQ\nqHryGTDZ6EPDcNqUmxTBFfl/rarmrMm68mZoKVL6YQQYFnGXGNL160RE3EkoX6gJ\nG2TwW1+tM6s2Hwe1H3mFAVdeTQF7nCYRU4JUmV92/nlJ4xAKDmYrRP92sZPduV1l\n/E4eyvIo9H//d51f1maKDzg+g3Wc+eZpZkcPf9rsRQXes5wpW4O6FBCIYAcaAw+3\nwJ/l9KasLByDrfQOUTASHfgggaDpOQli3n48sf5TcDavy5Q0MX0RKKCZ8CAQp/SD\nYJ25RMLUBdmJcYp1VQTaTpiAsF940E5V6yhGOVteTYl622PWqrS2maR3dHJEpcQt\nABoeImW/0XLg68MzzG6IHXotftpUZEZGury/64M4nRzL9nZXcLo=\n=Fu7o\n-----END PGP SIGNATURE-----", "payload": "tree 2a591a2e4d7a3a2e25a13486208d5a1ede92b307\nparent c1eae3d0281e1e34f64332b02a7dc4bdd0ae6e5b\nauthor Kartavya Vashishtha <sendtokartavya@gmail.com> 1660982323 +0530\ncommitter Kartavya Vashishtha <sendtokartavya@gmail.com> 1660982323 +0530\n\nmake impl and trait inactive diagnostics work\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/87b779756cb52ed27d4e5b1cdec28544b07f43d7", "html_url": "https://github.com/rust-lang/rust/commit/87b779756cb52ed27d4e5b1cdec28544b07f43d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/87b779756cb52ed27d4e5b1cdec28544b07f43d7/comments", "author": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "committer": {"login": "DesmondWillowbrook", "id": 51814158, "node_id": "MDQ6VXNlcjUxODE0MTU4", "avatar_url": "https://avatars.githubusercontent.com/u/51814158?v=4", "gravatar_id": "", "url": "https://api.github.com/users/DesmondWillowbrook", "html_url": "https://github.com/DesmondWillowbrook", "followers_url": "https://api.github.com/users/DesmondWillowbrook/followers", "following_url": "https://api.github.com/users/DesmondWillowbrook/following{/other_user}", "gists_url": "https://api.github.com/users/DesmondWillowbrook/gists{/gist_id}", "starred_url": "https://api.github.com/users/DesmondWillowbrook/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/DesmondWillowbrook/subscriptions", "organizations_url": "https://api.github.com/users/DesmondWillowbrook/orgs", "repos_url": "https://api.github.com/users/DesmondWillowbrook/repos", "events_url": "https://api.github.com/users/DesmondWillowbrook/events{/privacy}", "received_events_url": "https://api.github.com/users/DesmondWillowbrook/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1eae3d0281e1e34f64332b02a7dc4bdd0ae6e5b", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1eae3d0281e1e34f64332b02a7dc4bdd0ae6e5b", "html_url": "https://github.com/rust-lang/rust/commit/c1eae3d0281e1e34f64332b02a7dc4bdd0ae6e5b"}], "stats": {"total": 69, "additions": 49, "deletions": 20}, "files": [{"sha": "891104cbb37f054004df1865e691032640479a40", "filename": "crates/hir-def/src/data.rs", "status": "modified", "additions": 31, "deletions": 18, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir-def%2Fsrc%2Fdata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir-def%2Fsrc%2Fdata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdata.rs?ref=87b779756cb52ed27d4e5b1cdec28544b07f43d7", "patch": "@@ -210,6 +210,10 @@ pub struct TraitData {\n \n impl TraitData {\n     pub(crate) fn trait_data_query(db: &dyn DefDatabase, tr: TraitId) -> Arc<TraitData> {\n+        db.trait_data_with_diagnostics(tr).0\n+    }\n+\n+    pub(crate) fn trait_data_with_diagnostics_query(db: &dyn DefDatabase, tr: TraitId) -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>) {\n         let tr_loc @ ItemLoc { container: module_id, id: tree_id } = tr.lookup(db);\n         let item_tree = tree_id.item_tree(db);\n         let tr_def = &item_tree[tree_id.value];\n@@ -229,17 +233,20 @@ impl TraitData {\n         let mut collector =\n             AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::TraitId(tr));\n         collector.collect(&item_tree, tree_id.tree_id(), &tr_def.items);\n-        let (items, attribute_calls) = collector.finish();\n-\n-        Arc::new(TraitData {\n-            name,\n-            attribute_calls,\n-            items,\n-            is_auto,\n-            is_unsafe,\n-            visibility,\n-            skip_array_during_method_dispatch,\n-        })\n+        let (items, attribute_calls, diagnostics) = collector.finish();\n+\n+        (\n+            Arc::new(TraitData {\n+                name,\n+                attribute_calls,\n+                items,\n+                is_auto,\n+                is_unsafe,\n+                visibility,\n+                skip_array_during_method_dispatch,\n+            }),\n+            Arc::new(diagnostics)\n+        )\n     }\n \n     pub fn associated_types(&self) -> impl Iterator<Item = TypeAliasId> + '_ {\n@@ -280,7 +287,11 @@ pub struct ImplData {\n \n impl ImplData {\n     pub(crate) fn impl_data_query(db: &dyn DefDatabase, id: ImplId) -> Arc<ImplData> {\n-        let _p = profile::span(\"impl_data_query\");\n+        db.impl_data_with_diagnostics(id).0\n+    }\n+\n+    pub(crate) fn impl_data_with_diagnostics_query(db: &dyn DefDatabase, id: ImplId) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>) {\n+        let _p = profile::span(\"impl_data_with_diagnostics_query\");\n         let ItemLoc { container: module_id, id: tree_id } = id.lookup(db);\n \n         let item_tree = tree_id.item_tree(db);\n@@ -293,10 +304,10 @@ impl ImplData {\n             AssocItemCollector::new(db, module_id, tree_id.file_id(), ItemContainerId::ImplId(id));\n         collector.collect(&item_tree, tree_id.tree_id(), &impl_def.items);\n \n-        let (items, attribute_calls) = collector.finish();\n+        let (items, attribute_calls, diagnostics) = collector.finish();\n         let items = items.into_iter().map(|(_, item)| item).collect();\n \n-        Arc::new(ImplData { target_trait, self_ty, items, is_negative, attribute_calls })\n+        (Arc::new(ImplData { target_trait, self_ty, items, is_negative, attribute_calls }), Arc::new(diagnostics))\n     }\n \n     pub fn attribute_calls(&self) -> impl Iterator<Item = (AstId<ast::Item>, MacroCallId)> + '_ {\n@@ -437,6 +448,7 @@ struct AssocItemCollector<'a> {\n     db: &'a dyn DefDatabase,\n     module_id: ModuleId,\n     def_map: Arc<DefMap>,\n+    inactive_diagnostics: Vec<DefDiagnostic>,\n     container: ItemContainerId,\n     expander: Expander,\n \n@@ -459,15 +471,17 @@ impl<'a> AssocItemCollector<'a> {\n             expander: Expander::new(db, file_id, module_id),\n             items: Vec::new(),\n             attr_calls: Vec::new(),\n+            inactive_diagnostics: Vec::new(),\n         }\n     }\n \n     fn finish(\n         self,\n-    ) -> (Vec<(Name, AssocItemId)>, Option<Box<Vec<(AstId<ast::Item>, MacroCallId)>>>) {\n+    ) -> (Vec<(Name, AssocItemId)>, Option<Box<Vec<(AstId<ast::Item>, MacroCallId)>>>, Vec<DefDiagnostic>) {\n         (\n             self.items,\n             if self.attr_calls.is_empty() { None } else { Some(Box::new(self.attr_calls)) },\n+            self.inactive_diagnostics\n         )\n     }\n \n@@ -479,13 +493,12 @@ impl<'a> AssocItemCollector<'a> {\n         'items: for &item in assoc_items {\n             let attrs = item_tree.attrs(self.db, self.module_id.krate, ModItem::from(item).into());\n             if !attrs.is_cfg_enabled(self.expander.cfg_options()) {\n-                self.def_map.push_diagnostic(DefDiagnostic::unconfigured_code(\n+                self.inactive_diagnostics.push(DefDiagnostic::unconfigured_code(\n                     self.module_id.local_id,\n-                    InFile::new(tree_id.file_id(), item.ast_id(&item_tree).upcast()),\n+                    InFile::new(self.expander.current_file_id(), item.ast_id(&item_tree).upcast()),\n                     attrs.cfg().unwrap(),\n                     self.expander.cfg_options().clone()\n                 ));\n-                dbg!(\"Ignoring assoc item!\");\n                 continue;\n             }\n "}, {"sha": "2f5ee80cd8584c41b3269d86ff8739e1b6705c8f", "filename": "crates/hir-def/src/db.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir-def%2Fsrc%2Fdb.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir-def%2Fsrc%2Fdb.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir-def%2Fsrc%2Fdb.rs?ref=87b779756cb52ed27d4e5b1cdec28544b07f43d7", "patch": "@@ -20,7 +20,7 @@ use crate::{\n     intern::Interned,\n     item_tree::{AttrOwner, ItemTree},\n     lang_item::{LangItemTarget, LangItems},\n-    nameres::DefMap,\n+    nameres::{DefMap, diagnostics::DefDiagnostic},\n     visibility::{self, Visibility},\n     AttrDefId, BlockId, BlockLoc, ConstId, ConstLoc, DefWithBodyId, EnumId, EnumLoc, ExternBlockId,\n     ExternBlockLoc, FunctionId, FunctionLoc, GenericDefId, ImplId, ImplLoc, LocalEnumVariantId,\n@@ -106,9 +106,15 @@ pub trait DefDatabase: InternDatabase + AstDatabase + Upcast<dyn AstDatabase> {\n     #[salsa::invoke(ImplData::impl_data_query)]\n     fn impl_data(&self, e: ImplId) -> Arc<ImplData>;\n \n+    #[salsa::invoke(ImplData::impl_data_with_diagnostics_query)]\n+    fn impl_data_with_diagnostics(&self, e: ImplId) -> (Arc<ImplData>, Arc<Vec<DefDiagnostic>>);\n+\n     #[salsa::invoke(TraitData::trait_data_query)]\n     fn trait_data(&self, e: TraitId) -> Arc<TraitData>;\n \n+    #[salsa::invoke(TraitData::trait_data_with_diagnostics_query)]\n+    fn trait_data_with_diagnostics(&self, tr: TraitId) -> (Arc<TraitData>, Arc<Vec<DefDiagnostic>>);\n+\n     #[salsa::invoke(TypeAliasData::type_alias_data_query)]\n     fn type_alias_data(&self, e: TypeAliasId) -> Arc<TypeAliasData>;\n "}, {"sha": "45bb057d31a69d6ee90aad22b3bdc71324061570", "filename": "crates/hir/src/lib.rs", "status": "modified", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fhir%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Flib.rs?ref=87b779756cb52ed27d4e5b1cdec28544b07f43d7", "patch": "@@ -511,6 +511,7 @@ impl Module {\n             .collect()\n     }\n \n+    /// Fills `acc` with the module's diagnostics.\n     pub fn diagnostics(self, db: &dyn HirDatabase, acc: &mut Vec<AnyDiagnostic>) {\n         let _p = profile::span(\"Module::diagnostics\").detail(|| {\n             format!(\"{:?}\", self.name(db).map_or(\"<unknown>\".into(), |name| name.to_string()))\n@@ -530,12 +531,22 @@ impl Module {\n                     if def_map[m.id.local_id].origin.is_inline() {\n                         m.diagnostics(db, acc)\n                     }\n+                },\n+                ModuleDef::Trait(t) => {\n+                    for diag in db.trait_data_with_diagnostics(t.id).1.iter() {\n+                        emit_def_diagnostic(db, acc, diag);\n+                    }\n+                    acc.extend(decl.diagnostics(db))\n                 }\n                 _ => acc.extend(decl.diagnostics(db)),\n             }\n         }\n \n         for impl_def in self.impl_defs(db) {\n+            for diag in db.impl_data_with_diagnostics(impl_def.id).1.iter() {\n+                emit_def_diagnostic(db, acc, diag);\n+            }\n+\n             for item in impl_def.items(db) {\n                 let def: DefWithBody = match item {\n                     AssocItem::Function(it) => it.into(),"}, {"sha": "18fd1c644a168e29360dbd6202a9f14e75ea1b25", "filename": "crates/ide-diagnostics/src/handlers/inactive_code.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "raw_url": "https://github.com/rust-lang/rust/raw/87b779756cb52ed27d4e5b1cdec28544b07f43d7/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide-diagnostics%2Fsrc%2Fhandlers%2Finactive_code.rs?ref=87b779756cb52ed27d4e5b1cdec28544b07f43d7", "patch": "@@ -106,7 +106,6 @@ fn f() {\n \n     #[test]\n     fn inactive_assoc_item() {\n-        // FIXME these currently don't work, hence the *\n         check(\n             r#\"\n struct Foo;"}]}