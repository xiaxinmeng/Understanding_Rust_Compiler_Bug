{"sha": "3a471b5fd8dcf4444be200b41925396a90a2188a", "node_id": "C_kwDOAAsO6NoAKDNhNDcxYjVmZDhkY2Y0NDQ0YmUyMDBiNDE5MjUzOTZhOTBhMjE4OGE", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-15T17:01:20Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2022-11-23T20:17:48Z"}, "message": "Account for `x @ y` and suggest `ref x @ ref y`", "tree": {"sha": "58efabdb97f44545788cad898839b869ac8df74d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/58efabdb97f44545788cad898839b869ac8df74d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3a471b5fd8dcf4444be200b41925396a90a2188a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3a471b5fd8dcf4444be200b41925396a90a2188a", "html_url": "https://github.com/rust-lang/rust/commit/3a471b5fd8dcf4444be200b41925396a90a2188a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3a471b5fd8dcf4444be200b41925396a90a2188a/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3c905d4ccdcec76358716285a7f6409c3b84e7be", "url": "https://api.github.com/repos/rust-lang/rust/commits/3c905d4ccdcec76358716285a7f6409c3b84e7be", "html_url": "https://github.com/rust-lang/rust/commit/3c905d4ccdcec76358716285a7f6409c3b84e7be"}], "stats": {"total": 392, "additions": 362, "deletions": 30}, "files": [{"sha": "70ad3b62805fa9e70a7659101ac8f35ff1b77bf9", "filename": "compiler/rustc_borrowck/src/diagnostics/conflict_errors.rs", "status": "modified", "additions": 22, "deletions": 8, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_borrowck%2Fsrc%2Fdiagnostics%2Fconflict_errors.rs?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -315,6 +315,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             expr_span: Span,\n             expr: Option<&'hir hir::Expr<'hir>>,\n             pat: Option<&'hir hir::Pat<'hir>>,\n+            parent_pat: Option<&'hir hir::Pat<'hir>>,\n         }\n         impl<'hir> Visitor<'hir> for ExpressionFinder<'hir> {\n             fn visit_expr(&mut self, e: &'hir hir::Expr<'hir>) {\n@@ -327,10 +328,19 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 if p.span == self.expr_span {\n                     self.pat = Some(p);\n                 }\n-                if let hir::PatKind::Binding(hir::BindingAnnotation::NONE, _, i, _) = p.kind\n-                    && i.span == self.expr_span\n-                {\n-                    self.pat = Some(p);\n+                if let hir::PatKind::Binding(hir::BindingAnnotation::NONE, _, i, sub) = p.kind {\n+                    if i.span == self.expr_span || p.span == self.expr_span {\n+                        self.pat = Some(p);\n+                    }\n+                    // Check if we are in a situation of `ident @ ident` where we want to suggest\n+                    // `ref ident @ ref ident` or `ref ident @ Struct { ref ident }`.\n+                    if let Some(subpat) = sub && self.pat.is_none() {\n+                        self.visit_pat(subpat);\n+                        if self.pat.is_some() {\n+                            self.parent_pat = Some(p);\n+                        }\n+                        return;\n+                    }\n                 }\n                 hir::intravisit::walk_pat(self, p);\n             }\n@@ -349,6 +359,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                 expr_span: move_span,\n                 expr: None,\n                 pat: None,\n+                parent_pat: None,\n             };\n             finder.visit_expr(expr);\n             if let Some(span) = span && let Some(expr) = finder.expr {\n@@ -414,7 +425,7 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n                             span,\n                             format!(\n                                 \"consider changing this parameter type in {descr} `{ident}` to \\\n-                                 borrow instead if ownering the value isn't necessary\",\n+                                 borrow instead if owning the value isn't necessary\",\n                             ),\n                         );\n                     }\n@@ -434,10 +445,13 @@ impl<'cx, 'tcx> MirBorrowckCtxt<'cx, 'tcx> {\n             }\n             if let Some(pat) = finder.pat {\n                 *in_pattern = true;\n-                err.span_suggestion_verbose(\n-                    pat.span.shrink_to_lo(),\n+                let mut sugg = vec![(pat.span.shrink_to_lo(), \"ref \".to_string())];\n+                if let Some(pat) = finder.parent_pat {\n+                    sugg.insert(0, (pat.span.shrink_to_lo(), \"ref \".to_string()));\n+                }\n+                err.multipart_suggestion_verbose(\n                     \"borrow this binding in the pattern to avoid moving the value\",\n-                    \"ref \".to_string(),\n+                    sugg,\n                     Applicability::MachineApplicable,\n                 );\n             }"}, {"sha": "e369dba55242c8f1703b38120a99489ca2c80e0f", "filename": "compiler/rustc_mir_build/src/thir/pattern/check_match.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fpattern%2Fcheck_match.rs?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -1044,11 +1044,19 @@ fn check_borrow_conflicts_in_at_patterns(cx: &MatchVisitor<'_, '_, '_>, pat: &Pa\n                     name,\n                     typeck_results.node_type(pat.hir_id),\n                 );\n-                sess.struct_span_err(pat.span, \"borrow of moved value\")\n-                    .span_label(binding_span, format!(\"value moved into `{}` here\", name))\n+                let mut err = sess.struct_span_err(pat.span, \"borrow of moved value\");\n+                err.span_label(binding_span, format!(\"value moved into `{}` here\", name))\n                     .span_label(binding_span, occurs_because)\n-                    .span_labels(conflicts_ref, \"value borrowed here after move\")\n-                    .emit();\n+                    .span_labels(conflicts_ref, \"value borrowed here after move\");\n+                if pat.span.contains(binding_span) {\n+                    err.span_suggestion_verbose(\n+                        binding_span.shrink_to_lo(),\n+                        \"borrow this binding in the pattern to avoid moving the value\",\n+                        \"ref \".to_string(),\n+                        Applicability::MachineApplicable,\n+                    );\n+                }\n+                err.emit();\n             }\n             return;\n         }"}, {"sha": "c8b45fd24d98c00c916c3b7b292ecf6be0d7c480", "filename": "src/test/ui/pattern/bindings-after-at/bind-by-move-neither-can-live-while-the-other-survives-1.stderr", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fbind-by-move-neither-can-live-while-the-other-survives-1.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -16,6 +16,11 @@ LL |         Some(_z @ ref _y) => {}\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Some(ref _z @ ref _y) => {}\n+   |              +++\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:26:14\n@@ -35,6 +40,11 @@ LL |         Some(_z @ ref mut _y) => {}\n    |              |    value borrowed here after move\n    |              value moved into `_z` here\n    |              move occurs because `_z` has type `X` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Some(ref _z @ ref mut _y) => {}\n+   |              +++\n \n error[E0382]: borrow of moved value\n   --> $DIR/bind-by-move-neither-can-live-while-the-other-survives-1.rs:12:14"}, {"sha": "324897151124cba965713e64fb97bd208fb0d815", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-move-and-move.stderr", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-move-and-move.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -9,8 +9,8 @@ LL |     let a @ b = U;\n    |\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ ref b = U;\n-   |             +++\n+LL |     let ref a @ ref b = U;\n+   |         +++     +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:13:9\n@@ -23,8 +23,8 @@ LL |     let a @ (b, c) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ (b, ref c) = (U, U);\n-   |                 +++\n+LL |     let ref a @ (b, ref c) = (U, U);\n+   |         +++         +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:15:9\n@@ -37,8 +37,8 @@ LL |     let a @ (b, c) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ (b, ref c) = (u(), u());\n-   |                 +++\n+LL |     let ref a @ (b, ref c) = (u(), u());\n+   |         +++         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:18:16\n@@ -81,8 +81,8 @@ LL |         xs @ [a, .., b] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |         xs @ [a, .., ref b] => {}\n-   |                      +++\n+LL |         ref xs @ [a, .., ref b] => {}\n+   |         +++              +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-move-and-move.rs:29:9\n@@ -95,8 +95,8 @@ LL |         xs @ [_, ys @ .., _] => {}\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |         xs @ [_, ref ys @ .., _] => {}\n-   |                  +++\n+LL |         ref xs @ [_, ref ys @ .., _] => {}\n+   |         +++          +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-move-and-move.rs:22:12"}, {"sha": "d6474f1b49fb0f5c112ffec62a4ca78646afb718", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse-promotion.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse-promotion.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -7,6 +7,11 @@ LL |     let a @ ref b = U;\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = U;\n+   |         +++\n \n error: aborting due to previous error\n "}, {"sha": "389e86e646457ec2586b521ea93ee7dc065e080a", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-by-move-and-ref-inverse.stderr", "status": "modified", "additions": 129, "deletions": 4, "changes": 133, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-by-move-and-ref-inverse.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -7,6 +7,11 @@ LL |     let a @ ref b = U;\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = U;\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n@@ -18,6 +23,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:14\n@@ -28,6 +38,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (ref mut b @ ref mut c, d @ ref e) = (U, U);\n+   |              +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:33\n@@ -38,6 +53,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n+   |                                 +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:29:9\n@@ -49,6 +69,11 @@ LL |     let a @ [ref mut b, ref c] = [U, U];\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ [ref mut b, ref c] = [U, U];\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:31:9\n@@ -59,6 +84,11 @@ LL |     let a @ ref b = u();\n    |         |   value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ ref b = u();\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n@@ -70,6 +100,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |         |            value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:14\n@@ -80,6 +115,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |              |       value borrowed here after move\n    |              value moved into `b` here\n    |              move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (ref mut b @ ref mut c, d @ ref e) = (u(), u());\n+   |              +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:33\n@@ -90,6 +130,11 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    |                                 |   value borrowed here after move\n    |                                 value moved into `d` here\n    |                                 move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n+   |                                 +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:38:9\n@@ -101,6 +146,11 @@ LL |     let a @ [ref mut b, ref c] = [u(), u()];\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ [ref mut b, ref c] = [u(), u()];\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:42:9\n@@ -111,6 +161,11 @@ LL |         a @ Some(ref b) => {}\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:9\n@@ -122,6 +177,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:19\n@@ -132,6 +192,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38\n@@ -142,6 +207,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:55:9\n@@ -153,6 +223,11 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:61:9\n@@ -163,6 +238,11 @@ LL |         a @ Some(ref b) => {}\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<U>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some(ref b) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:9\n@@ -174,6 +254,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |         |                 value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<(U, U)>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:19\n@@ -184,6 +269,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                   |       value borrowed here after move\n    |                   value moved into `b` here\n    |                   move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((ref mut b @ ref mut c, d @ ref e)) => {}\n+   |                   +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:67:38\n@@ -194,6 +284,11 @@ LL |         a @ Some((mut b @ ref mut c, d @ ref e)) => {}\n    |                                      |   value borrowed here after move\n    |                                      value moved into `d` here\n    |                                      move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         a @ Some((mut b @ ref mut c, ref d @ ref e)) => {}\n+   |                                      +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:75:9\n@@ -205,6 +300,11 @@ LL |         mut a @ Some([ref b, ref mut c]) => {}\n    |         |             value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `Option<[U; 2]>` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         ref mut a @ Some([ref b, ref mut c]) => {}\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:11:11\n@@ -215,6 +315,11 @@ LL |     fn f1(a @ ref b: U) {}\n    |           |   value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f1(ref a @ ref b: U) {}\n+   |           +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:11\n@@ -226,6 +331,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |           |            value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(ref mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n+   |           +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:20\n@@ -236,6 +346,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                    |   value borrowed here after move\n    |                    value moved into `b` here\n    |                    move occurs because `b` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (ref b @ ref c, mut d @ ref e): (U, U)) {}\n+   |                    +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:14:31\n@@ -246,6 +361,11 @@ LL |     fn f2(mut a @ (b @ ref c, mut d @ ref e): (U, U)) {}\n    |                               |       value borrowed here after move\n    |                               value moved into `d` here\n    |                               move occurs because `d` has type `U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f2(mut a @ (b @ ref c, ref mut d @ ref e): (U, U)) {}\n+   |                               +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:19:11\n@@ -257,6 +377,11 @@ LL |     fn f3(a @ [ref mut b, ref c]: [U; 2]) {}\n    |           |    value borrowed here after move\n    |           value moved into `a` here\n    |           move occurs because `a` has type `[U; 2]` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     fn f3(ref a @ [ref mut b, ref c]: [U; 2]) {}\n+   |           +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:24:9\n@@ -269,8 +394,8 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (U, U);\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n-   |                                 +++\n+LL |     let ref a @ (mut b @ ref mut c, ref d @ ref e) = (U, U);\n+   |         +++                         +++\n \n error[E0382]: use of partially moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:33:9\n@@ -283,8 +408,8 @@ LL |     let a @ (mut b @ ref mut c, d @ ref e) = (u(), u());\n    = note: partial move occurs because value has type `U`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n-   |                                 +++\n+LL |     let ref a @ (mut b @ ref mut c, ref d @ ref e) = (u(), u());\n+   |         +++                         +++\n \n error[E0382]: use of moved value\n   --> $DIR/borrowck-pat-by-move-and-ref-inverse.rs:47:38"}, {"sha": "ad4ce7952ca7494b065b86b9f62107b24655d5ea", "filename": "src/test/ui/pattern/bindings-after-at/borrowck-pat-ref-mut-twice.stderr", "status": "modified", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fborrowck-pat-ref-mut-twice.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -97,6 +97,11 @@ LL |     let a @ (ref mut b, ref mut c) = (U, U);\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `(U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (ref mut b, ref mut c) = (U, U);\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:67:9\n@@ -109,6 +114,11 @@ LL |     let a @ (b, [c, d]) = &mut val; // Same as ^--\n    |         |    value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (U, [U; 2])` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ (b, [c, d]) = &mut val; // Same as ^--\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:70:9\n@@ -119,6 +129,11 @@ LL |     let a @ &mut ref mut b = &mut U;\n    |         |        value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut U` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ &mut ref mut b = &mut U;\n+   |         +++\n \n error: borrow of moved value\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:72:9\n@@ -130,6 +145,11 @@ LL |     let a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n    |         |         value borrowed here after move\n    |         value moved into `a` here\n    |         move occurs because `a` has type `&mut (U, U)` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref a @ &mut (ref mut b, ref mut c) = &mut (U, U);\n+   |         +++\n \n error: cannot borrow value as mutable more than once at a time\n   --> $DIR/borrowck-pat-ref-mut-twice.rs:76:9"}, {"sha": "e0e623fa544f773af68f1d0dfc9719e2631d788b", "filename": "src/test/ui/pattern/bindings-after-at/copy-and-move-mixed.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fcopy-and-move-mixed.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -9,8 +9,8 @@ LL |     let a @ NC(b, c @ NC(d, e)) = NC(C, NC(C, C));\n    = note: partial move occurs because value has type `NC<C, C>`, which does not implement the `Copy` trait\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let a @ NC(b, ref c @ NC(d, e)) = NC(C, NC(C, C));\n-   |                   +++\n+LL |     let ref a @ NC(b, ref c @ NC(d, e)) = NC(C, NC(C, C));\n+   |         +++           +++\n \n error: aborting due to previous error\n "}, {"sha": "638bdd6db7606761b035dfea6375a9b9761c5487", "filename": "src/test/ui/pattern/bindings-after-at/default-binding-modes-both-sides-independent.stderr", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fpattern%2Fbindings-after-at%2Fdefault-binding-modes-both-sides-independent.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -34,6 +34,11 @@ LL |         Ok(ref a @ b) | Err(b @ ref a) => {\n    |                             |   value borrowed here after move\n    |                             value moved into `b` here\n    |                             move occurs because `b` has type `NotCopy` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |         Ok(ref a @ b) | Err(ref b @ ref a) => {\n+   |                             +++\n \n error: cannot move out of value because it is borrowed\n   --> $DIR/default-binding-modes-both-sides-independent.rs:42:9"}, {"sha": "c36040eeca3012397ccc38058b1ab566d4c45e96", "filename": "src/test/ui/suggestions/ref-pattern-binding.fixed", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.fixed?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+fn main() {\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); // ok\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; // ok\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+}"}, {"sha": "c0d4feb033098844624c30c67819776d9b122f42", "filename": "src/test/ui/suggestions/ref-pattern-binding.rs", "status": "added", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.rs?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -0,0 +1,19 @@\n+// run-rustfix\n+#![allow(unused)]\n+\n+struct S {\n+    f: String,\n+}\n+\n+fn main() {\n+    let _moved @ _from = String::from(\"foo\"); //~ ERROR\n+    let _moved @ ref _from = String::from(\"foo\"); //~ ERROR\n+    let ref _moved @ _from = String::from(\"foo\"); //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ ref _from = String::from(\"foo\"); // ok\n+    let _moved @ S { f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    let ref _moved @ S { f } = S { f: String::from(\"foo\") }; //~ ERROR\n+    //~^ ERROR\n+    let ref _moved @ S { ref f } = S { f: String::from(\"foo\") }; // ok\n+    let _moved @ S { ref f } = S { f: String::from(\"foo\") }; //~ ERROR\n+}"}, {"sha": "10447ba7089caae7eff7065aefdd1ccf4b8a63f3", "filename": "src/test/ui/suggestions/ref-pattern-binding.stderr", "status": "added", "additions": 107, "deletions": 0, "changes": 107, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fsuggestions%2Fref-pattern-binding.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -0,0 +1,107 @@\n+error: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:10:9\n+   |\n+LL |     let _moved @ ref _from = String::from(\"foo\");\n+   |         ------^^^---------\n+   |         |        |\n+   |         |        value borrowed here after move\n+   |         value moved into `_moved` here\n+   |         move occurs because `_moved` has type `String` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/ref-pattern-binding.rs:11:9\n+   |\n+LL |     let ref _moved @ _from = String::from(\"foo\");\n+   |         ----------^^^-----\n+   |         |            |\n+   |         |            value moved into `_from` here\n+   |         value borrowed, by `_moved`, here\n+\n+error: cannot move out of value because it is borrowed\n+  --> $DIR/ref-pattern-binding.rs:15:9\n+   |\n+LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ----------^^^^^^^-^^\n+   |         |                |\n+   |         |                value moved into `f` here\n+   |         value borrowed, by `_moved`, here\n+\n+error: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:18:9\n+   |\n+LL |     let _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         ------^^^^^^^-----^^\n+   |         |            |\n+   |         |            value borrowed here after move\n+   |         value moved into `_moved` here\n+   |         move occurs because `_moved` has type `S` which does not implement the `Copy` trait\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         +++\n+\n+error[E0382]: use of moved value\n+  --> $DIR/ref-pattern-binding.rs:9:9\n+   |\n+LL |     let _moved @ _from = String::from(\"foo\");\n+   |         ^^^^^^   -----   ------------------- move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |         |        |\n+   |         |        value moved here\n+   |         value used here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++          +++\n+\n+error[E0382]: borrow of moved value\n+  --> $DIR/ref-pattern-binding.rs:11:9\n+   |\n+LL |     let ref _moved @ _from = String::from(\"foo\");\n+   |         ^^^^^^^^^^   -----   ------------------- move occurs because value has type `String`, which does not implement the `Copy` trait\n+   |         |            |\n+   |         |            value moved here\n+   |         value borrowed here after move\n+   |\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |                      +++\n+\n+error[E0382]: use of partially moved value\n+  --> $DIR/ref-pattern-binding.rs:14:9\n+   |\n+LL |     let _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ^^^^^^       - value partially moved here\n+   |         |\n+   |         value used here after partial move\n+   |\n+   = note: partial move occurs because value has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |         +++              +++\n+\n+error[E0382]: borrow of partially moved value\n+  --> $DIR/ref-pattern-binding.rs:15:9\n+   |\n+LL |     let ref _moved @ S { f } = S { f: String::from(\"foo\") };\n+   |         ^^^^^^^^^^       - value partially moved here\n+   |         |\n+   |         value borrowed here after partial move\n+   |\n+   = note: partial move occurs because value has type `String`, which does not implement the `Copy` trait\n+help: borrow this binding in the pattern to avoid moving the value\n+   |\n+LL |     let ref _moved @ S { ref f } = S { f: String::from(\"foo\") };\n+   |                          +++\n+\n+error: aborting due to 8 previous errors\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "fe13e5ef3f5467ab93e85e200dca553d4958a4df", "filename": "src/test/ui/track-diagnostics/track2.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/3a471b5fd8dcf4444be200b41925396a90a2188a/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftrack-diagnostics%2Ftrack2.stderr?ref=3a471b5fd8dcf4444be200b41925396a90a2188a", "patch": "@@ -10,8 +10,8 @@ LL |     let _moved @ _from = String::from(\"foo\");\n    |\n help: borrow this binding in the pattern to avoid moving the value\n    |\n-LL |     let _moved @ ref _from = String::from(\"foo\");\n-   |                  +++\n+LL |     let ref _moved @ ref _from = String::from(\"foo\");\n+   |         +++          +++\n \n error: aborting due to previous error\n "}]}