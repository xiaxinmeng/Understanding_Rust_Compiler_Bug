{"sha": "c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "node_id": "C_kwDOAAsO6NoAKGM5NzhkNGJmMGM5MmU3N2VmOTRmMzU0YWY4NDAyYWY3MWJkN2I1YWI", "commit": {"author": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-07T19:06:32Z"}, "committer": {"name": "Ryo Yoshida", "email": "low.ryoshida@gmail.com", "date": "2023-04-12T10:03:57Z"}, "message": "Implement text edits for inlay hints", "tree": {"sha": "b3ab82616b6453c666f8ba5fc97905c10c610e68", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b3ab82616b6453c666f8ba5fc97905c10c610e68"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCgAdFiEEkSbsQIURluxz4rzf4laYqTBYYXEFAmQ2gg0ACgkQ4laYqTBY\nYXFz+A/9Hq+A4J4u/5UCEQuC2bHru/TO7S06MiF6sp+9g0NV2lKnwWXR1aXswDQs\nqSZVcDG/FJx+9g2kxijyVUBW7UwjnwgrZ60p6AoLcyCw86LWCNixsbhycu3vTYPO\nsCdYnSfsRODCm/NKCMm9EZo6fejrVCPtY3qpC1EW+vJWkwaZlwO1p66qvbnecIAy\nLpjV5v8NezCI+aJuMyt8FSjbMWaOOl1ccEyj+ei+/ANXNsYB7RVAb7xkPHljwfY3\nmqq/ac02UqbinPQL+xKMoX51i2orlMbI2bC4F5MW9AgB5NoDBEHqtt+/j+xIkpe4\nMc11JTfQNsBybftk67TaBaljv36BPlpdjnmscqmtmjlg1c1uXfR5heFytUyEjRWO\nB4vomzJXImJ7Vu/lNFhaweuHJv18OiaWiGkTKrEV4GbZOeSfoH34Fl0OcVD29SbS\nR+3SLTO3t50Cm6PcnT/SFMO3jK6cysCLncNVMQLGMGJkDPOpOa3MZxvtvMXGAlcJ\nVwZ4uSFJercJhXQ6nfJBI6JBs0I2L5/hkKJUi6kAZCjrix/ykAEqb82ep2D8y65m\n4ufhJjsac6PGqsljPH+9WRfipA0ZRTpNVEesRDFwrsADeloaYSjs7RabI3OSJL11\nXL8nvUsXwPNeEYbHTx2TZeIAFtr6cYKOp9iMNXNtxAlmrVwpub0=\n=HOzN\n-----END PGP SIGNATURE-----", "payload": "tree b3ab82616b6453c666f8ba5fc97905c10c610e68\nparent fcbc250723cdaf329ffd941dccb9e37568b88736\nauthor Ryo Yoshida <low.ryoshida@gmail.com> 1680894392 +0900\ncommitter Ryo Yoshida <low.ryoshida@gmail.com> 1681293837 +0900\n\nImplement text edits for inlay hints\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "html_url": "https://github.com/rust-lang/rust/commit/c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/comments", "author": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lowr", "id": 24381114, "node_id": "MDQ6VXNlcjI0MzgxMTE0", "avatar_url": "https://avatars.githubusercontent.com/u/24381114?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lowr", "html_url": "https://github.com/lowr", "followers_url": "https://api.github.com/users/lowr/followers", "following_url": "https://api.github.com/users/lowr/following{/other_user}", "gists_url": "https://api.github.com/users/lowr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lowr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lowr/subscriptions", "organizations_url": "https://api.github.com/users/lowr/orgs", "repos_url": "https://api.github.com/users/lowr/repos", "events_url": "https://api.github.com/users/lowr/events{/privacy}", "received_events_url": "https://api.github.com/users/lowr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fcbc250723cdaf329ffd941dccb9e37568b88736", "url": "https://api.github.com/repos/rust-lang/rust/commits/fcbc250723cdaf329ffd941dccb9e37568b88736", "html_url": "https://github.com/rust-lang/rust/commit/fcbc250723cdaf329ffd941dccb9e37568b88736"}], "stats": {"total": 279, "additions": 262, "deletions": 17}, "files": [{"sha": "7a8edfea83560b332ff24055bd4daf4da8c7cfcd", "filename": "crates/ide/src/inlay_hints.rs", "status": "modified", "additions": 49, "deletions": 1, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints.rs?ref=c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "patch": "@@ -14,7 +14,7 @@ use smallvec::{smallvec, SmallVec};\n use stdx::never;\n use syntax::{\n     ast::{self, AstNode},\n-    match_ast, NodeOrToken, SyntaxNode, TextRange,\n+    match_ast, NodeOrToken, SyntaxNode, TextRange, TextSize,\n };\n use text_edit::TextEdit;\n \n@@ -359,6 +359,23 @@ fn label_of_ty(\n     Some(r)\n }\n \n+fn ty_to_text_edit(\n+    sema: &Semantics<'_, RootDatabase>,\n+    node_for_hint: &SyntaxNode,\n+    ty: &hir::Type,\n+    offset_to_insert: TextSize,\n+    prefix: String,\n+) -> Option<TextEdit> {\n+    let scope = sema.scope(node_for_hint)?;\n+    // FIXME: Limit the length and bail out on excess somehow?\n+    let rendered = ty.display_source_code(scope.db, scope.module().into(), false).ok()?;\n+\n+    let mut builder = TextEdit::builder();\n+    builder.insert(offset_to_insert, prefix);\n+    builder.insert(offset_to_insert, rendered);\n+    Some(builder.finish())\n+}\n+\n // Feature: Inlay Hints\n //\n // rust-analyzer shows additional information inline with the source code.\n@@ -566,6 +583,37 @@ mod tests {\n         expect.assert_debug_eq(&inlay_hints)\n     }\n \n+    /// Computes inlay hints for the fixture, applies all the provided text edits and then runs\n+    /// expect test.\n+    #[track_caller]\n+    pub(super) fn check_edit(config: InlayHintsConfig, ra_fixture: &str, expect: Expect) {\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n+\n+        let edits = inlay_hints\n+            .into_iter()\n+            .filter_map(|hint| hint.text_edit)\n+            .reduce(|mut acc, next| {\n+                acc.union(next).expect(\"merging text edits failed\");\n+                acc\n+            })\n+            .expect(\"no edit returned\");\n+\n+        let mut actual = analysis.file_text(file_id).unwrap().to_string();\n+        edits.apply(&mut actual);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[track_caller]\n+    pub(super) fn check_no_edit(config: InlayHintsConfig, ra_fixture: &str) {\n+        let (analysis, file_id) = fixture::file(ra_fixture);\n+        let inlay_hints = analysis.inlay_hints(&config, file_id, None).unwrap();\n+\n+        let edits: Vec<_> = inlay_hints.into_iter().filter_map(|hint| hint.text_edit).collect();\n+\n+        assert!(edits.is_empty(), \"unexpected edits: {edits:?}\");\n+    }\n+\n     #[test]\n     fn hints_disabled() {\n         check_with_config("}, {"sha": "a131427f5fd91c961f295b5c86780f835f1cb0d5", "filename": "crates/ide/src/inlay_hints/bind_pat.rs", "status": "modified", "additions": 181, "deletions": 6, "changes": 187, "blob_url": "https://github.com/rust-lang/rust/blob/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fbind_pat.rs?ref=c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "patch": "@@ -13,7 +13,7 @@ use syntax::{\n };\n \n use crate::{\n-    inlay_hints::{closure_has_block_body, label_of_ty},\n+    inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n     InlayHint, InlayHintsConfig, InlayKind,\n };\n \n@@ -36,22 +36,39 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    let label = label_of_ty(famous_defs, config, ty)?;\n+    let label = label_of_ty(famous_defs, config, ty.clone())?;\n \n     if config.hide_named_constructor_hints\n         && is_named_constructor(sema, pat, &label.to_string()).is_some()\n     {\n         return None;\n     }\n \n+    let type_annotation_is_valid = desc_pat\n+        .syntax()\n+        .parent()\n+        .map(|it| ast::LetStmt::can_cast(it.kind()) || ast::Param::can_cast(it.kind()))\n+        .unwrap_or(false);\n+    let text_edit = if type_annotation_is_valid {\n+        ty_to_text_edit(\n+            sema,\n+            desc_pat.syntax(),\n+            &ty,\n+            pat.syntax().text_range().end(),\n+            String::from(\": \"),\n+        )\n+    } else {\n+        None\n+    };\n+\n     acc.push(InlayHint {\n         range: match pat.name() {\n             Some(name) => name.syntax().text_range(),\n             None => pat.syntax().text_range(),\n         },\n         kind: InlayKind::Type,\n         label,\n-        text_edit: None,\n+        text_edit,\n     });\n \n     Some(())\n@@ -178,14 +195,16 @@ fn pat_is_enum_variant(db: &RootDatabase, bind_pat: &ast::IdentPat, pat_ty: &hir\n mod tests {\n     // This module also contains tests for super::closure_ret\n \n+    use expect_test::expect;\n     use hir::ClosureStyle;\n     use syntax::{TextRange, TextSize};\n     use test_utils::extract_annotations;\n \n-    use crate::{fixture, inlay_hints::InlayHintsConfig};\n+    use crate::{fixture, inlay_hints::InlayHintsConfig, ClosureReturnTypeHints};\n \n-    use crate::inlay_hints::tests::{check, check_with_config, DISABLED_CONFIG, TEST_CONFIG};\n-    use crate::ClosureReturnTypeHints;\n+    use crate::inlay_hints::tests::{\n+        check, check_edit, check_no_edit, check_with_config, DISABLED_CONFIG, TEST_CONFIG,\n+    };\n \n     #[track_caller]\n     fn check_types(ra_fixture: &str) {\n@@ -1014,4 +1033,160 @@ fn main() {\n }\"#,\n         );\n     }\n+\n+    #[test]\n+    fn edit_for_let_stmt() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+struct S<T>(T);\n+fn test<F>(v: S<(S<i32>, S<()>)>, f: F) {\n+    let a = v;\n+    let S((b, c)) = v;\n+    let a @ S((b, c)) = v;\n+    let a = f;\n+}\n+\"#,\n+            expect![[r#\"\n+                struct S<T>(T);\n+                fn test<F>(v: S<(S<i32>, S<()>)>, f: F) {\n+                    let a: S<(S<i32>, S<()>)> = v;\n+                    let S((b, c)) = v;\n+                    let a @ S((b, c)): S<(S<i32>, S<()>)> = v;\n+                    let a: F = f;\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_for_closure_param() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+fn test<T>(t: T) {\n+    let f = |a, b, c| {};\n+    let result = f(42, \"\", t);\n+}\n+\"#,\n+            expect![[r#\"\n+                fn test<T>(t: T) {\n+                    let f = |a: i32, b: &str, c: T| {};\n+                    let result: () = f(42, \"\", t);\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_for_closure_ret() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+struct S<T>(T);\n+fn test() {\n+    let f = || { 3 };\n+    let f = |a: S<usize>| { S(a) };\n+}\n+\"#,\n+            expect![[r#\"\n+                struct S<T>(T);\n+                fn test() {\n+                    let f = || -> i32 { 3 };\n+                    let f = |a: S<usize>| -> S<S<usize>> { S(a) };\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn edit_prefixes_paths() {\n+        check_edit(\n+            TEST_CONFIG,\n+            r#\"\n+pub struct S<T>(T);\n+mod middle {\n+    pub struct S<T, U>(T, U);\n+    pub fn make() -> S<inner::S<i64>, super::S<usize>> { loop {} }\n+\n+    mod inner {\n+        pub struct S<T>(T);\n+    }\n+\n+    fn test() {\n+        let a = make();\n+    }\n+}\n+\"#,\n+            expect![[r#\"\n+                pub struct S<T>(T);\n+                mod middle {\n+                    pub struct S<T, U>(T, U);\n+                    pub fn make() -> S<inner::S<i64>, super::S<usize>> { loop {} }\n+\n+                    mod inner {\n+                        pub struct S<T>(T);\n+                    }\n+\n+                    fn test() {\n+                        let a: S<inner::S<i64>, crate::S<usize>> = make();\n+                    }\n+                }\n+            \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn no_edit_for_top_pat_where_type_annotation_is_invalid() {\n+        check_no_edit(\n+            TEST_CONFIG,\n+            r#\"\n+fn test() {\n+    if let a = 42 {}\n+    while let a = 42 {}\n+    match 42 {\n+        a => (),\n+    }\n+}\n+\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn no_edit_for_opaque_type() {\n+        check_no_edit(\n+            TEST_CONFIG,\n+            r#\"\n+trait Trait {}\n+struct S<T>(T);\n+fn foo() -> impl Trait {}\n+fn bar() -> S<impl Trait> {}\n+fn test() {\n+    let a = foo();\n+    let a = bar();\n+    let f = || { foo() };\n+    let f = || { bar() };\n+}\n+\"#,\n+        );\n+    }\n+\n+    #[test]\n+    fn no_edit_for_closure_return_without_body_block() {\n+        // We can lift this limitation; see FIXME in closure_ret module.\n+        let config = InlayHintsConfig {\n+            closure_return_type_hints: ClosureReturnTypeHints::Always,\n+            ..TEST_CONFIG\n+        };\n+        check_no_edit(\n+            config,\n+            r#\"\n+struct S<T>(T);\n+fn test() {\n+    let f = || 3;\n+    let f = |a: S<usize>| S(a);\n+}\n+\"#,\n+        );\n+    }\n }"}, {"sha": "6db9b8b5443108ad08908307afd06a0ad772e1d6", "filename": "crates/ide/src/inlay_hints/chaining.rs", "status": "modified", "additions": 10, "deletions": 1, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fchaining.rs?ref=c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "patch": "@@ -603,7 +603,16 @@ fn main() {\n                             },\n                             \"\",\n                         ],\n-                        text_edit: None,\n+                        text_edit: Some(\n+                            TextEdit {\n+                                indels: [\n+                                    Indel {\n+                                        insert: \": Struct\",\n+                                        delete: 130..130,\n+                                    },\n+                                ],\n+                            },\n+                        ),\n                     },\n                     InlayHint {\n                         range: 145..185,"}, {"sha": "6214e9c8e7ff371e941bf33b46902c0389b019b7", "filename": "crates/ide/src/inlay_hints/closure_ret.rs", "status": "modified", "additions": 22, "deletions": 9, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c978d4bf0c92e77ef94f354af8402af71bd7b5ab/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide%2Fsrc%2Finlay_hints%2Fclosure_ret.rs?ref=c978d4bf0c92e77ef94f354af8402af71bd7b5ab", "patch": "@@ -1,14 +1,14 @@\n //! Implementation of \"closure return type\" inlay hints.\n+//!\n+//! Tests live in [`bind_pat`][super::bind_pat] module.\n use ide_db::{base_db::FileId, famous_defs::FamousDefs};\n use syntax::ast::{self, AstNode};\n \n use crate::{\n-    inlay_hints::closure_has_block_body, ClosureReturnTypeHints, InlayHint, InlayHintsConfig,\n-    InlayKind,\n+    inlay_hints::{closure_has_block_body, label_of_ty, ty_to_text_edit},\n+    ClosureReturnTypeHints, InlayHint, InlayHintsConfig, InlayKind,\n };\n \n-use super::label_of_ty;\n-\n pub(super) fn hints(\n     acc: &mut Vec<InlayHint>,\n     famous_defs @ FamousDefs(sema, _): &FamousDefs<'_, '_>,\n@@ -24,26 +24,39 @@ pub(super) fn hints(\n         return None;\n     }\n \n-    if !closure_has_block_body(&closure)\n-        && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock\n-    {\n+    let has_block_body = closure_has_block_body(&closure);\n+    if !has_block_body && config.closure_return_type_hints == ClosureReturnTypeHints::WithBlock {\n         return None;\n     }\n \n     let param_list = closure.param_list()?;\n \n     let closure = sema.descend_node_into_attributes(closure).pop()?;\n-    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure))?.adjusted();\n+    let ty = sema.type_of_expr(&ast::Expr::ClosureExpr(closure.clone()))?.adjusted();\n     let callable = ty.as_callable(sema.db)?;\n     let ty = callable.return_type();\n     if ty.is_unit() {\n         return None;\n     }\n+\n+    // FIXME?: We could provide text edit to insert braces for closures with non-block body.\n+    let text_edit = if has_block_body {\n+        ty_to_text_edit(\n+            sema,\n+            closure.syntax(),\n+            &ty,\n+            param_list.syntax().text_range().end(),\n+            String::from(\" -> \"),\n+        )\n+    } else {\n+        None\n+    };\n+\n     acc.push(InlayHint {\n         range: param_list.syntax().text_range(),\n         kind: InlayKind::ClosureReturnType,\n         label: label_of_ty(famous_defs, config, ty)?,\n-        text_edit: None,\n+        text_edit,\n     });\n     Some(())\n }"}]}