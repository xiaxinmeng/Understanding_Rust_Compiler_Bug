{"sha": "f0da190f17faddd5ebb55ba3d940c334b01bd77f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmYwZGExOTBmMTdmYWRkZDVlYmI1NWJhM2Q5NDBjMzM0YjAxYmQ3N2Y=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-07-15T14:27:57Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-07-15T14:27:57Z"}, "message": "Merge #9603\n\n9603: internal: Move attribute completion tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "937ee577eec966dd9184cec2d457d099ced27192", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/937ee577eec966dd9184cec2d457d099ced27192"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f0da190f17faddd5ebb55ba3d940c334b01bd77f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg8EXtCRBK7hj4Ov3rIwAAzUcIAHgXEhAnT1NRqQJUIz/aCbcK\nRbzTHdEdn5MYLCnQXIZLgOUCTSy9Z7bbZntghq4cCPEGSt0B8z4fhKKoVGpqGY0n\nR4nqqKumHE5+lxOHPbrjNkcuFFJLHzy3O912ekYPgqz4XBs8XACjBhIYSt6NP2s2\nxU6RA/43A2Z82PzRdvzsPIiYhPHOIiyMlrK8Rmv0qIjgQ+l6/M/otzrkYX3gNqh8\nsGnUFarqvLRH2yTI816wkYqrEsi2WybOBU95JHvevBO899/R2vmbXlOL0MucJLKg\nj34vYVjk0z4a8b03lRNa5f68eKydorOoYGE9CkivRCAJL32Udy33sgSGMAWtC8o=\n=NdsU\n-----END PGP SIGNATURE-----\n", "payload": "tree 937ee577eec966dd9184cec2d457d099ced27192\nparent 190f37afab27a890291a11d9dda2658e676c47bd\nparent 317b0c2e6df8b82ed6d5ff73e8cf70862cb8deac\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1626359277 +0000\ncommitter GitHub <noreply@github.com> 1626359277 +0000\n\nMerge #9603\n\n9603: internal: Move attribute completion tests r=Veykril a=Veykril\n\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f0da190f17faddd5ebb55ba3d940c334b01bd77f", "html_url": "https://github.com/rust-lang/rust/commit/f0da190f17faddd5ebb55ba3d940c334b01bd77f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f0da190f17faddd5ebb55ba3d940c334b01bd77f/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "190f37afab27a890291a11d9dda2658e676c47bd", "url": "https://api.github.com/repos/rust-lang/rust/commits/190f37afab27a890291a11d9dda2658e676c47bd", "html_url": "https://github.com/rust-lang/rust/commit/190f37afab27a890291a11d9dda2658e676c47bd"}, {"sha": "317b0c2e6df8b82ed6d5ff73e8cf70862cb8deac", "url": "https://api.github.com/repos/rust-lang/rust/commits/317b0c2e6df8b82ed6d5ff73e8cf70862cb8deac", "html_url": "https://github.com/rust-lang/rust/commit/317b0c2e6df8b82ed6d5ff73e8cf70862cb8deac"}], "stats": {"total": 1656, "additions": 832, "deletions": 824}, "files": [{"sha": "53cee3f4e25427051a235f1b67b7f5f3df94bca1", "filename": "crates/ide_completion/src/completions/attribute.rs", "status": "modified", "additions": 13, "deletions": 545, "changes": 558, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -322,550 +322,18 @@ fn parse_comma_sep_input(derive_input: ast::TokenTree) -> Option<FxHashSet<Strin\n     Some(input_derives)\n }\n \n-#[cfg(test)]\n-mod tests {\n-    use super::*;\n-\n-    use expect_test::{expect, Expect};\n-\n-    use crate::tests::completion_list;\n-\n-    #[test]\n-    fn attributes_are_sorted() {\n-        let mut attrs = ATTRIBUTES.iter().map(|attr| attr.key());\n-        let mut prev = attrs.next().unwrap();\n-\n-        attrs.for_each(|next| {\n-            assert!(\n-                prev < next,\n-                r#\"ATTRIBUTES array is not sorted, \"{}\" should come after \"{}\"\"#,\n-                prev,\n-                next\n-            );\n-            prev = next;\n-        });\n-    }\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture);\n-        expect.assert_eq(&actual);\n-    }\n-\n-    #[test]\n-    fn test_attribute_completion_inside_nested_attr() {\n-        check(r#\"#[cfg($0)]\"#, expect![[]])\n-    }\n-\n-    #[test]\n-    fn test_attribute_completion_with_existing_attr() {\n-        check(\n-            r#\"#[no_mangle] #[$0] mcall!();\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_source_file() {\n-        check(\n-            r#\"#![$0]\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at crate_name = \"\"\n-                at feature(\u2026)\n-                at no_implicit_prelude\n-                at no_main\n-                at no_std\n-                at recursion_limit = \u2026\n-                at type_length_limit = \u2026\n-                at windows_subsystem = \"\u2026\"\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_module() {\n-        check(\n-            r#\"#[$0] mod foo;\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at macro_use\n-                at path = \"\u2026\"\n-            \"#]],\n-        );\n-        check(\n-            r#\"mod foo {#![$0]}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at no_implicit_prelude\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_macro_rules() {\n-        check(\n-            r#\"#[$0] macro_rules! foo {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at macro_export\n-                at macro_use\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_macro_def() {\n-        check(\n-            r#\"#[$0] macro foo {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_extern_crate() {\n-        check(\n-            r#\"#[$0] extern crate foo;\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at macro_use\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_use() {\n-        check(\n-            r#\"#[$0] use foo;\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_type_alias() {\n-        check(\n-            r#\"#[$0] type foo = ();\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_struct() {\n-        check(\n-            r#\"#[$0] struct Foo;\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at derive(\u2026)\n-                at repr(\u2026)\n-                at non_exhaustive\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_enum() {\n-        check(\n-            r#\"#[$0] enum Foo {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at derive(\u2026)\n-                at repr(\u2026)\n-                at non_exhaustive\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_const() {\n-        check(\n-            r#\"#[$0] const FOO: () = ();\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_static() {\n-        check(\n-            r#\"#[$0] static FOO: () = ()\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at export_name = \"\u2026\"\n-                at link_name = \"\u2026\"\n-                at link_section = \"\u2026\"\n-                at global_allocator\n-                at used\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_trait() {\n-        check(\n-            r#\"#[$0] trait Foo {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at must_use\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_impl() {\n-        check(\n-            r#\"#[$0] impl () {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at automatically_derived\n-            \"#]],\n-        );\n-        check(\n-            r#\"impl () {#![$0]}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_extern_block() {\n-        check(\n-            r#\"#[$0] extern {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at link\n-            \"#]],\n+#[test]\n+fn attributes_are_sorted() {\n+    let mut attrs = ATTRIBUTES.iter().map(|attr| attr.key());\n+    let mut prev = attrs.next().unwrap();\n+\n+    attrs.for_each(|next| {\n+        assert!(\n+            prev < next,\n+            r#\"ATTRIBUTES array is not sorted, \"{}\" should come after \"{}\"\"#,\n+            prev,\n+            next\n         );\n-        check(\n-            r#\"extern {#![$0]}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at link\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_variant() {\n-        check(\n-            r#\"enum Foo { #[$0] Bar }\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at non_exhaustive\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_fn() {\n-        check(\n-            r#\"#[$0] fn main() {}\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-                at deprecated\n-                at doc = \"\u2026\"\n-                at doc(hidden)\n-                at doc(alias = \"\u2026\")\n-                at must_use\n-                at no_mangle\n-                at export_name = \"\u2026\"\n-                at link_name = \"\u2026\"\n-                at link_section = \"\u2026\"\n-                at cold\n-                at ignore = \"\u2026\"\n-                at inline\n-                at must_use\n-                at panic_handler\n-                at proc_macro\n-                at proc_macro_derive(\u2026)\n-                at proc_macro_attribute\n-                at should_panic\n-                at target_feature = \"\u2026\"\n-                at test\n-                at track_caller\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_on_expr() {\n-        cov_mark::check!(no_keyword_completion_in_attr_of_expr);\n-        check(\n-            r#\"fn main() { #[$0] foo() }\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at deny(\u2026)\n-                at forbid(\u2026)\n-                at warn(\u2026)\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn complete_attribute_in_source_file_end() {\n-        check(\n-            r#\"#[$0]\"#,\n-            expect![[r#\"\n-                at allow(\u2026)\n-                at automatically_derived\n-                at cfg(\u2026)\n-                at cfg_attr(\u2026)\n-                at cold\n-                at deny(\u2026)\n-                at deprecated\n-                at derive(\u2026)\n-                at doc = \"\u2026\"\n-                at doc(alias = \"\u2026\")\n-                at doc(hidden)\n-                at export_name = \"\u2026\"\n-                at forbid(\u2026)\n-                at global_allocator\n-                at ignore = \"\u2026\"\n-                at inline\n-                at link\n-                at link_name = \"\u2026\"\n-                at link_section = \"\u2026\"\n-                at macro_export\n-                at macro_use\n-                at must_use\n-                at no_mangle\n-                at non_exhaustive\n-                at panic_handler\n-                at path = \"\u2026\"\n-                at proc_macro\n-                at proc_macro_attribute\n-                at proc_macro_derive(\u2026)\n-                at repr(\u2026)\n-                at should_panic\n-                at target_feature = \"\u2026\"\n-                at test\n-                at track_caller\n-                at used\n-                at warn(\u2026)\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn test_cfg() {\n-        check(\n-            r#\"#[cfg(target_endian = $0\"#,\n-            expect![[r#\"\n-                at little\n-                at big\n-\"#]],\n-        );\n-    }\n+        prev = next;\n+    });\n }"}, {"sha": "f482d44646d966a5749e6cde4a794a370a7b5276", "filename": "crates/ide_completion/src/completions/attribute/derive.rs", "status": "modified", "additions": 0, "deletions": 90, "changes": 90, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Fderive.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -77,93 +77,3 @@ const DEFAULT_DERIVE_COMPLETIONS: &[DeriveDependencies] = &[\n     DeriveDependencies { label: \"Ord\", dependencies: &[\"PartialOrd\", \"Eq\", \"PartialEq\"] },\n     DeriveDependencies { label: \"PartialOrd\", dependencies: &[\"PartialEq\"] },\n ];\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::tests::completion_list;\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let builtin_derives = r#\"\n-#[rustc_builtin_macro]\n-pub macro Clone {}\n-#[rustc_builtin_macro]\n-pub macro Copy {}\n-#[rustc_builtin_macro]\n-pub macro Default {}\n-#[rustc_builtin_macro]\n-pub macro Debug {}\n-#[rustc_builtin_macro]\n-pub macro Hash {}\n-#[rustc_builtin_macro]\n-pub macro PartialEq {}\n-#[rustc_builtin_macro]\n-pub macro Eq {}\n-#[rustc_builtin_macro]\n-pub macro PartialOrd {}\n-#[rustc_builtin_macro]\n-pub macro Ord {}\n-\n-\"#;\n-        let actual = completion_list(&format!(\"{} {}\", builtin_derives, ra_fixture));\n-        expect.assert_eq(&actual);\n-    }\n-\n-    #[test]\n-    fn no_completion_for_incorrect_derive() {\n-        check(r#\"#[derive{$0)] struct Test;\"#, expect![[]])\n-    }\n-\n-    #[test]\n-    fn empty_derive() {\n-        check(\n-            r#\"#[derive($0)] struct Test;\"#,\n-            expect![[r#\"\n-            at PartialEq\n-            at Default\n-            at PartialEq, Eq\n-            at PartialEq, Eq, PartialOrd, Ord\n-            at Clone, Copy\n-            at Debug\n-            at Clone\n-            at Hash\n-            at PartialEq, PartialOrd\n-        \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn derive_with_input() {\n-        check(\n-            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at Default\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone, Copy\n-                at Debug\n-                at Clone\n-                at Hash\n-                at PartialOrd\n-            \"#]],\n-        )\n-    }\n-\n-    #[test]\n-    fn derive_with_input2() {\n-        check(\n-            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n-            expect![[r#\"\n-                at Default\n-                at Eq\n-                at Eq, PartialOrd, Ord\n-                at Clone, Copy\n-                at Debug\n-                at Clone\n-                at Hash\n-                at PartialOrd\n-            \"#]],\n-        )\n-    }\n-}"}, {"sha": "bb7f4c8d3b376f726bb006c608dc69b67728b964", "filename": "crates/ide_completion/src/completions/attribute/lint.rs", "status": "modified", "additions": 0, "deletions": 41, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Flint.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -30,44 +30,3 @@ pub(super) fn complete_lint(\n         }\n     }\n }\n-\n-#[cfg(test)]\n-mod tests {\n-    use crate::tests::check_edit;\n-\n-    #[test]\n-    fn check_empty() {\n-        check_edit(\n-            \"deprecated\",\n-            r#\"#[allow($0)] struct Test;\"#,\n-            r#\"#[allow(deprecated)] struct Test;\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn check_with_existing() {\n-        check_edit(\n-            \"deprecated\",\n-            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n-            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn check_qualified() {\n-        check_edit(\n-            \"deprecated\",\n-            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n-            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n-        )\n-    }\n-\n-    #[test]\n-    fn check_feature() {\n-        check_edit(\n-            \"box_syntax\",\n-            r#\"#[feature(box_$0)] struct Test;\"#,\n-            r#\"#[feature(box_syntax)] struct Test;\"#,\n-        )\n-    }\n-}"}, {"sha": "3df04826d448cffe518183ecba18cd757b8952bd", "filename": "crates/ide_completion/src/completions/attribute/repr.rs", "status": "modified", "additions": 0, "deletions": 129, "changes": 129, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fattribute%2Frepr.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -68,132 +68,3 @@ const REPR_COMPLETIONS: &[ReprCompletion] = &[\n     attr(\"i28\",    &[\"transparent\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"i8\", \"i16\", \"i32\", \"i64\", \"isize\"]),\n     attr(\"isize\",  &[\"transparent\", \"u8\", \"u16\", \"u32\", \"u64\", \"u128\", \"usize\", \"i8\", \"i16\", \"i32\", \"i64\", \"i128\"]),\n ];\n-\n-#[cfg(test)]\n-mod tests {\n-    use expect_test::{expect, Expect};\n-\n-    use crate::tests::completion_list;\n-\n-    fn check(ra_fixture: &str, expect: Expect) {\n-        let actual = completion_list(ra_fixture);\n-        expect.assert_eq(&actual);\n-    }\n-\n-    #[test]\n-    fn no_completion_for_incorrect_repr() {\n-        check(r#\"#[repr{$0)] struct Test;\"#, expect![[]])\n-    }\n-\n-    #[test]\n-    fn empty() {\n-        check(\n-            r#\"#[repr($0)] struct Test;\"#,\n-            expect![[r#\"\n-                at align($0)\n-                at packed\n-                at transparent\n-                at C\n-                at u8\n-                at u16\n-                at u32\n-                at u64\n-                at u128\n-                at usize\n-                at i8\n-                at i16\n-                at i32\n-                at i64\n-                at i28\n-                at isize\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn transparent() {\n-        check(r#\"#[repr(transparent, $0)] struct Test;\"#, expect![[r#\"\"#]]);\n-    }\n-\n-    #[test]\n-    fn align() {\n-        check(\n-            r#\"#[repr(align(1), $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at align($0)\n-                at transparent\n-                at C\n-                at u8\n-                at u16\n-                at u32\n-                at u64\n-                at u128\n-                at usize\n-                at i8\n-                at i16\n-                at i32\n-                at i64\n-                at i28\n-                at isize\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn packed() {\n-        check(\n-            r#\"#[repr(packed, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at transparent\n-                at C\n-                at u8\n-                at u16\n-                at u32\n-                at u64\n-                at u128\n-                at usize\n-                at i8\n-                at i16\n-                at i32\n-                at i64\n-                at i28\n-                at isize\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn c() {\n-        check(\n-            r#\"#[repr(C, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at align($0)\n-                at packed\n-                at u8\n-                at u16\n-                at u32\n-                at u64\n-                at u128\n-                at usize\n-                at i8\n-                at i16\n-                at i32\n-                at i64\n-                at i28\n-                at isize\n-            \"#]],\n-        );\n-    }\n-\n-    #[test]\n-    fn prim() {\n-        check(\n-            r#\"#[repr(usize, $0)] struct Test;\"#,\n-            expect![[r#\"\n-                at align($0)\n-                at packed\n-                at C\n-            \"#]],\n-        );\n-    }\n-}"}, {"sha": "facfe005186f951ffc4bca84a053ad43e67801ae", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 0, "deletions": 12, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -601,16 +601,4 @@ fn f() -> m::E { V$0 }\n             \"#]],\n         )\n     }\n-\n-    #[test]\n-    fn dont_complete_attr() {\n-        check(\n-            r#\"\n-struct Foo;\n-#[$0]\n-fn f() {}\n-\"#,\n-            expect![[\"\"]],\n-        )\n-    }\n }"}, {"sha": "20f7d360c6d59aae4914ad4583113e2d8ddea395", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 5, "deletions": 3, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -4,12 +4,14 @@\n //! `attributes` or `lifetimes` where the completed concept is a distinct thing.\n //! Notable examples for completions that are being tested in this module's submodule are paths.\n \n+mod attribute;\n mod item_list;\n-mod use_tree;\n-mod items;\n+mod item;\n mod pattern;\n-mod type_pos;\n mod predicate;\n+mod type_pos;\n+mod use_tree;\n+\n mod sourcegen;\n \n use std::mem;"}, {"sha": "012071a8173075c8c6055b8850cee3a5ccad11df", "filename": "crates/ide_completion/src/tests/attribute.rs", "status": "added", "additions": 809, "deletions": 0, "changes": 809, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fattribute.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -0,0 +1,809 @@\n+//! Completion tests for attributes.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::{check_edit, completion_list};\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(ra_fixture);\n+    expect.assert_eq(&actual);\n+}\n+\n+#[test]\n+fn doesnt_complete_items() {\n+    check(\n+        r#\"\n+struct Foo;\n+#[$0]\n+use self as this;\n+\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn inside_nested_attr() {\n+    check(r#\"#[cfg($0)]\"#, expect![[]])\n+}\n+\n+#[test]\n+fn with_existing_attr() {\n+    check(\n+        r#\"#[no_mangle] #[$0] mcall!();\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+        \"#]],\n+    )\n+}\n+\n+#[test]\n+fn attr_on_source_file() {\n+    check(\n+        r#\"#![$0]\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at crate_name = \"\"\n+            at feature(\u2026)\n+            at no_implicit_prelude\n+            at no_main\n+            at no_std\n+            at recursion_limit = \u2026\n+            at type_length_limit = \u2026\n+            at windows_subsystem = \"\u2026\"\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_module() {\n+    check(\n+        r#\"#[$0] mod foo;\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at macro_use\n+            at path = \"\u2026\"\n+        \"#]],\n+    );\n+    check(\n+        r#\"mod foo {#![$0]}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at no_implicit_prelude\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_macro_rules() {\n+    check(\n+        r#\"#[$0] macro_rules! foo {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at macro_export\n+            at macro_use\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_macro_def() {\n+    check(\n+        r#\"#[$0] macro foo {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_extern_crate() {\n+    check(\n+        r#\"#[$0] extern crate foo;\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at macro_use\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_use() {\n+    check(\n+        r#\"#[$0] use foo;\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_type_alias() {\n+    check(\n+        r#\"#[$0] type foo = ();\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_struct() {\n+    check(\n+        r#\"#[$0] struct Foo;\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at derive(\u2026)\n+            at repr(\u2026)\n+            at non_exhaustive\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_enum() {\n+    check(\n+        r#\"#[$0] enum Foo {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at derive(\u2026)\n+            at repr(\u2026)\n+            at non_exhaustive\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_const() {\n+    check(\n+        r#\"#[$0] const FOO: () = ();\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_static() {\n+    check(\n+        r#\"#[$0] static FOO: () = ()\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at export_name = \"\u2026\"\n+            at link_name = \"\u2026\"\n+            at link_section = \"\u2026\"\n+            at global_allocator\n+            at used\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_trait() {\n+    check(\n+        r#\"#[$0] trait Foo {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at must_use\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_impl() {\n+    check(\n+        r#\"#[$0] impl () {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at automatically_derived\n+        \"#]],\n+    );\n+    check(\n+        r#\"impl () {#![$0]}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_extern_block() {\n+    check(\n+        r#\"#[$0] extern {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at link\n+        \"#]],\n+    );\n+    check(\n+        r#\"extern {#![$0]}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at link\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_variant() {\n+    check(\n+        r#\"enum Foo { #[$0] Bar }\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at non_exhaustive\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_fn() {\n+    check(\n+        r#\"#[$0] fn main() {}\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+            at deprecated\n+            at doc = \"\u2026\"\n+            at doc(hidden)\n+            at doc(alias = \"\u2026\")\n+            at must_use\n+            at no_mangle\n+            at export_name = \"\u2026\"\n+            at link_name = \"\u2026\"\n+            at link_section = \"\u2026\"\n+            at cold\n+            at ignore = \"\u2026\"\n+            at inline\n+            at must_use\n+            at panic_handler\n+            at proc_macro\n+            at proc_macro_derive(\u2026)\n+            at proc_macro_attribute\n+            at should_panic\n+            at target_feature = \"\u2026\"\n+            at test\n+            at track_caller\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_on_expr() {\n+    cov_mark::check!(no_keyword_completion_in_attr_of_expr);\n+    check(\n+        r#\"fn main() { #[$0] foo() }\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at deny(\u2026)\n+            at forbid(\u2026)\n+            at warn(\u2026)\n+        \"#]],\n+    );\n+}\n+\n+#[test]\n+fn attr_in_source_file_end() {\n+    check(\n+        r#\"#[$0]\"#,\n+        expect![[r#\"\n+            at allow(\u2026)\n+            at automatically_derived\n+            at cfg(\u2026)\n+            at cfg_attr(\u2026)\n+            at cold\n+            at deny(\u2026)\n+            at deprecated\n+            at derive(\u2026)\n+            at doc = \"\u2026\"\n+            at doc(alias = \"\u2026\")\n+            at doc(hidden)\n+            at export_name = \"\u2026\"\n+            at forbid(\u2026)\n+            at global_allocator\n+            at ignore = \"\u2026\"\n+            at inline\n+            at link\n+            at link_name = \"\u2026\"\n+            at link_section = \"\u2026\"\n+            at macro_export\n+            at macro_use\n+            at must_use\n+            at no_mangle\n+            at non_exhaustive\n+            at panic_handler\n+            at path = \"\u2026\"\n+            at proc_macro\n+            at proc_macro_attribute\n+            at proc_macro_derive(\u2026)\n+            at repr(\u2026)\n+            at should_panic\n+            at target_feature = \"\u2026\"\n+            at test\n+            at track_caller\n+            at used\n+            at warn(\u2026)\n+        \"#]],\n+    );\n+}\n+\n+mod cfg {\n+    use super::*;\n+\n+    #[test]\n+    fn cfg_target_endian() {\n+        check(\n+            r#\"#[cfg(target_endian = $0\"#,\n+            expect![[r#\"\n+            at little\n+            at big\n+\"#]],\n+        );\n+    }\n+}\n+\n+mod derive {\n+    use super::*;\n+\n+    fn check_derive(ra_fixture: &str, expect: Expect) {\n+        let builtin_derives = r#\"\n+    #[rustc_builtin_macro]\n+    pub macro Clone {}\n+    #[rustc_builtin_macro]\n+    pub macro Copy {}\n+    #[rustc_builtin_macro]\n+    pub macro Default {}\n+    #[rustc_builtin_macro]\n+    pub macro Debug {}\n+    #[rustc_builtin_macro]\n+    pub macro Hash {}\n+    #[rustc_builtin_macro]\n+    pub macro PartialEq {}\n+    #[rustc_builtin_macro]\n+    pub macro Eq {}\n+    #[rustc_builtin_macro]\n+    pub macro PartialOrd {}\n+    #[rustc_builtin_macro]\n+    pub macro Ord {}\n+\n+    \"#;\n+        let actual = completion_list(&format!(\"{} {}\", builtin_derives, ra_fixture));\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn no_completion_for_incorrect_derive() {\n+        check_derive(r#\"#[derive{$0)] struct Test;\"#, expect![[]])\n+    }\n+\n+    #[test]\n+    fn empty_derive() {\n+        check_derive(\n+            r#\"#[derive($0)] struct Test;\"#,\n+            expect![[r#\"\n+        at PartialEq\n+        at Default\n+        at PartialEq, Eq\n+        at PartialEq, Eq, PartialOrd, Ord\n+        at Clone, Copy\n+        at Debug\n+        at Clone\n+        at Hash\n+        at PartialEq, PartialOrd\n+    \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn derive_with_input_before() {\n+        check_derive(\n+            r#\"#[derive(serde::Serialize, PartialEq, $0)] struct Test;\"#,\n+            expect![[r#\"\n+            at Default\n+            at Eq\n+            at Eq, PartialOrd, Ord\n+            at Clone, Copy\n+            at Debug\n+            at Clone\n+            at Hash\n+            at PartialOrd\n+        \"#]],\n+        )\n+    }\n+\n+    #[test]\n+    fn derive_with_input_after() {\n+        check_derive(\n+            r#\"#[derive($0 serde::Serialize, PartialEq)] struct Test;\"#,\n+            expect![[r#\"\n+            at Default\n+            at Eq\n+            at Eq, PartialOrd, Ord\n+            at Clone, Copy\n+            at Debug\n+            at Clone\n+            at Hash\n+            at PartialOrd\n+        \"#]],\n+        )\n+    }\n+}\n+\n+mod lint {\n+    use super::*;\n+\n+    #[test]\n+    fn lint_empty() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow($0)] struct Test;\"#,\n+            r#\"#[allow(deprecated)] struct Test;\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn lint_with_existing() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n+            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn lint_qualified() {\n+        check_edit(\n+            \"deprecated\",\n+            r#\"#[allow(keyword_idents, $0)] struct Test;\"#,\n+            r#\"#[allow(keyword_idents, deprecated)] struct Test;\"#,\n+        )\n+    }\n+\n+    #[test]\n+    fn lint_feature() {\n+        check_edit(\n+            \"box_syntax\",\n+            r#\"#[feature(box_$0)] struct Test;\"#,\n+            r#\"#[feature(box_syntax)] struct Test;\"#,\n+        )\n+    }\n+}\n+\n+mod repr {\n+    use super::*;\n+\n+    fn check_repr(ra_fixture: &str, expect: Expect) {\n+        let actual = completion_list(ra_fixture);\n+        expect.assert_eq(&actual);\n+    }\n+\n+    #[test]\n+    fn no_completion_for_incorrect_repr() {\n+        check_repr(r#\"#[repr{$0)] struct Test;\"#, expect![[]])\n+    }\n+\n+    #[test]\n+    fn empty() {\n+        check_repr(\n+            r#\"#[repr($0)] struct Test;\"#,\n+            expect![[r#\"\n+            at align($0)\n+            at packed\n+            at transparent\n+            at C\n+            at u8\n+            at u16\n+            at u32\n+            at u64\n+            at u128\n+            at usize\n+            at i8\n+            at i16\n+            at i32\n+            at i64\n+            at i28\n+            at isize\n+        \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn transparent() {\n+        check_repr(r#\"#[repr(transparent, $0)] struct Test;\"#, expect![[r#\"\"#]]);\n+    }\n+\n+    #[test]\n+    fn align() {\n+        check_repr(\n+            r#\"#[repr(align(1), $0)] struct Test;\"#,\n+            expect![[r#\"\n+            at align($0)\n+            at transparent\n+            at C\n+            at u8\n+            at u16\n+            at u32\n+            at u64\n+            at u128\n+            at usize\n+            at i8\n+            at i16\n+            at i32\n+            at i64\n+            at i28\n+            at isize\n+        \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn packed() {\n+        check_repr(\n+            r#\"#[repr(packed, $0)] struct Test;\"#,\n+            expect![[r#\"\n+            at transparent\n+            at C\n+            at u8\n+            at u16\n+            at u32\n+            at u64\n+            at u128\n+            at usize\n+            at i8\n+            at i16\n+            at i32\n+            at i64\n+            at i28\n+            at isize\n+        \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn c() {\n+        check_repr(\n+            r#\"#[repr(C, $0)] struct Test;\"#,\n+            expect![[r#\"\n+            at align($0)\n+            at packed\n+            at u8\n+            at u16\n+            at u32\n+            at u64\n+            at u128\n+            at usize\n+            at i8\n+            at i16\n+            at i32\n+            at i64\n+            at i28\n+            at isize\n+        \"#]],\n+        );\n+    }\n+\n+    #[test]\n+    fn prim() {\n+        check_repr(\n+            r#\"#[repr(usize, $0)] struct Test;\"#,\n+            expect![[r#\"\n+            at align($0)\n+            at packed\n+            at C\n+        \"#]],\n+        );\n+    }\n+}"}, {"sha": "c9629c9d131a702171398010270aaf6dd09162b9", "filename": "crates/ide_completion/src/tests/item.rs", "status": "renamed", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -1,4 +1,4 @@\n-//! Completions tests for item specifics overall.\n+//! Completion tests for item specifics overall.\n //!\n //! Except for use items which are tested in [super::use_tree] and mod declarations with are tested\n //! in [crate::completions::mod_].", "previous_filename": "crates/ide_completion/src/tests/items.rs"}, {"sha": "129c9e51728f249206bc68bba7e68cad104b49d7", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -1,3 +1,4 @@\n+//! Completion tests for item list position.\n use expect_test::{expect, Expect};\n \n use crate::tests::{completion_list, BASE_FIXTURE};"}, {"sha": "b5c2fef85e14af2fb9b7e620b2b479130d985d1f", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -1,4 +1,4 @@\n-//! Completions tests for pattern position.\n+//! Completion tests for pattern position.\n use expect_test::{expect, Expect};\n \n use crate::tests::{completion_list, BASE_FIXTURE};"}, {"sha": "844e20950502efbe17c40cb0dc63805fc4a3d88d", "filename": "crates/ide_completion/src/tests/type_pos.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Ftype_pos.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -1,4 +1,4 @@\n-//! Completions tests for type position.\n+//! Completion tests for type position.\n use expect_test::{expect, Expect};\n \n use crate::tests::completion_list;"}, {"sha": "cb626046f44c225a7e190ff8c13fb7d449bb8c11", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f0da190f17faddd5ebb55ba3d940c334b01bd77f/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=f0da190f17faddd5ebb55ba3d940c334b01bd77f", "patch": "@@ -1,4 +1,4 @@\n-//! Completions tests for use trees.\n+//! Completion tests for use trees.\n use expect_test::{expect, Expect};\n \n use crate::tests::completion_list;"}]}