{"sha": "a9bd695723d22222b994ed6f2867cf587e79923f", "node_id": "MDY6Q29tbWl0NzI0NzEyOmE5YmQ2OTU3MjNkMjIyMjJiOTk0ZWQ2ZjI4NjdjZjU4N2U3OTkyM2Y=", "commit": {"author": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-16T20:54:32Z"}, "committer": {"name": "Marcus Klaas", "email": "mail@marcusklaas.nl", "date": "2015-10-16T20:55:42Z"}, "message": "Format vec! macro using brackets", "tree": {"sha": "8c7dd575a26aa4803394591e0ef4b83ffe8c108d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8c7dd575a26aa4803394591e0ef4b83ffe8c108d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a9bd695723d22222b994ed6f2867cf587e79923f", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a9bd695723d22222b994ed6f2867cf587e79923f", "html_url": "https://github.com/rust-lang/rust/commit/a9bd695723d22222b994ed6f2867cf587e79923f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a9bd695723d22222b994ed6f2867cf587e79923f/comments", "author": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "committer": {"login": "marcusklaas", "id": 1255413, "node_id": "MDQ6VXNlcjEyNTU0MTM=", "avatar_url": "https://avatars.githubusercontent.com/u/1255413?v=4", "gravatar_id": "", "url": "https://api.github.com/users/marcusklaas", "html_url": "https://github.com/marcusklaas", "followers_url": "https://api.github.com/users/marcusklaas/followers", "following_url": "https://api.github.com/users/marcusklaas/following{/other_user}", "gists_url": "https://api.github.com/users/marcusklaas/gists{/gist_id}", "starred_url": "https://api.github.com/users/marcusklaas/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/marcusklaas/subscriptions", "organizations_url": "https://api.github.com/users/marcusklaas/orgs", "repos_url": "https://api.github.com/users/marcusklaas/repos", "events_url": "https://api.github.com/users/marcusklaas/events{/privacy}", "received_events_url": "https://api.github.com/users/marcusklaas/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "00aa232834e112ec7f96cf8cd8b90c850f12e0d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/00aa232834e112ec7f96cf8cd8b90c850f12e0d5", "html_url": "https://github.com/rust-lang/rust/commit/00aa232834e112ec7f96cf8cd8b90c850f12e0d5"}], "stats": {"total": 62, "additions": 43, "deletions": 19}, "files": [{"sha": "0b64ecf35ffcf19f4514f49b74c88990785d1527", "filename": "src/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fexpr.rs?ref=a9bd695723d22222b994ed6f2867cf587e79923f", "patch": "@@ -35,7 +35,7 @@ impl Rewrite for ast::Expr {\n         match self.node {\n             ast::Expr_::ExprVec(ref expr_vec) => {\n                 rewrite_array(expr_vec.iter().map(|e| &**e),\n-                              self.span,\n+                              mk_sp(span_after(self.span, \"[\", context.codemap), self.span.hi),\n                               context,\n                               width,\n                               offset)\n@@ -266,7 +266,7 @@ pub fn rewrite_array<'a, I>(expr_iter: I,\n                              |item| item.span.hi,\n                              // 1 = [\n                              |item| item.rewrite(&inner_context, max_item_width, offset),\n-                             span_after(span, \"[\", context.codemap),\n+                             span.lo,\n                              span.hi)\n                     .collect::<Vec<_>>();\n "}, {"sha": "8182189178a77b91e5b5a1545385510465c914e1", "filename": "src/lists.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Flists.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Flists.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flists.rs?ref=a9bd695723d22222b994ed6f2867cf587e79923f", "patch": "@@ -232,7 +232,8 @@ pub fn write_list<'b, I, T>(items: I, formatting: &ListFormatting<'b>) -> Option\n             DefinitiveListTactic::Mixed => {\n                 let total_width = total_item_width(item) + item_sep_len;\n \n-                if line_len > 0 && line_len + total_width > formatting.width {\n+                // 1 is space between separator and item.\n+                if line_len > 0 && line_len + 1 + total_width > formatting.width {\n                     result.push('\\n');\n                     result.push_str(indent_str);\n                     line_len = 0;"}, {"sha": "9035b0c7d8b11cf7c49fccd21149c1364cc0058b", "filename": "src/macros.rs", "status": "modified", "additions": 26, "deletions": 3, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bd695723d22222b994ed6f2867cf587e79923f/src%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fmacros.rs?ref=a9bd695723d22222b994ed6f2867cf587e79923f", "patch": "@@ -24,12 +24,15 @@ use std::thread;\n use syntax::ast;\n use syntax::parse::token::{Eof, Comma, Token};\n use syntax::parse::{ParseSess, tts_to_parser};\n+use syntax::codemap::{mk_sp, BytePos};\n \n use Indent;\n use rewrite::RewriteContext;\n use expr::{rewrite_call, rewrite_array};\n use comment::FindUncommented;\n-use utils::wrap_str;\n+use utils::{wrap_str, span_after};\n+\n+static FORCED_BRACKET_MACROS: &'static [&'static str] = &[\"vec!\"];\n \n // We need to pass `TokenTree`s to our expression parsing thread, but they are\n // not `Send`. We wrap them in a `Send` container to force our will.\n@@ -38,19 +41,35 @@ struct ForceSend<T>(pub T);\n unsafe impl<T> Send for ForceSend<T> {}\n \n // FIXME: use the enum from libsyntax?\n+#[derive(Clone, Copy)]\n enum MacroStyle {\n     Parens,\n     Brackets,\n     Braces,\n }\n \n+impl MacroStyle {\n+    fn opener(&self) -> &'static str {\n+        match *self {\n+            MacroStyle::Parens => \"(\",\n+            MacroStyle::Brackets => \"[\",\n+            MacroStyle::Braces => \"{\",\n+        }\n+    }\n+}\n+\n pub fn rewrite_macro(mac: &ast::Mac,\n                      context: &RewriteContext,\n                      width: usize,\n                      offset: Indent)\n                      -> Option<String> {\n-    let style = macro_style(mac, context);\n+    let original_style = macro_style(mac, context);\n     let macro_name = format!(\"{}!\", mac.node.path);\n+    let style = if FORCED_BRACKET_MACROS.contains(&&macro_name[..]) {\n+        MacroStyle::Brackets\n+    } else {\n+        original_style\n+    };\n \n     if let MacroStyle::Braces = style {\n         return None;\n@@ -100,10 +119,14 @@ pub fn rewrite_macro(mac: &ast::Mac,\n             // Format macro invocation as array literal.\n             let extra_offset = macro_name.len();\n             let rewrite = try_opt!(rewrite_array(expr_vec.iter().map(|x| &**x),\n-                                                 mac.span,\n+                                                 mk_sp(span_after(mac.span,\n+                                                                  original_style.opener(),\n+                                                                  context.codemap),\n+                                                       mac.span.hi - BytePos(1)),\n                                                  context,\n                                                  try_opt!(width.checked_sub(extra_offset)),\n                                                  offset + extra_offset));\n+\n             Some(format!(\"{}{}\", macro_name, rewrite))\n         }\n         MacroStyle::Braces => {"}, {"sha": "555d8f37e01e36de454fcf1fe50044f12396c849", "filename": "tests/target/expr.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/a9bd695723d22222b994ed6f2867cf587e79923f/tests%2Ftarget%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bd695723d22222b994ed6f2867cf587e79923f/tests%2Ftarget%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fexpr.rs?ref=a9bd695723d22222b994ed6f2867cf587e79923f", "patch": "@@ -168,8 +168,8 @@ fn issue184(source: &str) {\n }\n \n fn arrays() {\n-    let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3, 4,\n-             5, 6, 7, 8, 9, 0];\n+    let x = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 7, 8, 9, 0, 1, 2, 3,\n+             4, 5, 6, 7, 8, 9, 0];\n \n     let y = [// comment\n              1,"}, {"sha": "fe833dffb62b90396b1025f1900885adc330b73a", "filename": "tests/target/match.rs", "status": "modified", "additions": 11, "deletions": 11, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/a9bd695723d22222b994ed6f2867cf587e79923f/tests%2Ftarget%2Fmatch.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a9bd695723d22222b994ed6f2867cf587e79923f/tests%2Ftarget%2Fmatch.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Ftarget%2Fmatch.rs?ref=a9bd695723d22222b994ed6f2867cf587e79923f", "patch": "@@ -66,16 +66,16 @@ fn main() {\n fn main() {\n     match r {\n         Variableeeeeeeeeeeeeeeeee => (\"variable\",\n-                                      vec!(\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"),\n+                                      vec![\"id\", \"name\", \"qualname\", \"value\", \"type\", \"scopeid\"],\n                                       true,\n                                       true),\n         Enummmmmmmmmmmmmmmmmmmmm => (\"enum\",\n-                                     vec!(\"id\", \"qualname\", \"scopeid\", \"value\"),\n+                                     vec![\"id\", \"qualname\", \"scopeid\", \"value\"],\n                                      true,\n                                      true),\n         Variantttttttttttttttttttttttt =>\n             (\"variant\",\n-             vec!(\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"),\n+             vec![\"id\", \"name\", \"qualname\", \"type\", \"value\", \"scopeid\"],\n              true,\n              true),\n     }\n@@ -142,32 +142,32 @@ fn issue339() {\n fn issue355() {\n     match mac {\n         a => println!(\"a\", b),\n-        b => vec!(1, 2),\n+        b => vec![1, 2],\n         c => vec!(3; 4),\n         d => {\n             println!(\"a\", b)\n         }\n         e => {\n-            vec!(1, 2)\n+            vec![1, 2]\n         }\n         f => {\n             vec!(3; 4)\n         }\n         h => println!(\"a\", b), // h comment\n-        i => vec!(1, 2), // i comment\n+        i => vec![1, 2], // i comment\n         j => vec!(3; 4), // j comment\n         // k comment\n         k => println!(\"a\", b),\n         // l comment\n-        l => vec!(1, 2),\n+        l => vec![1, 2],\n         // m comment\n         m => vec!(3; 4),\n         // Rewrite splits macro\n         nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn =>\n             println!(\"a\", b),\n         // Rewrite splits macro\n         oooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo =>\n-            vec!(1, 2),\n+            vec![1, 2],\n         // Macro support fails to recognise this macro as splitable\n         // We push the whole expr to a new line, TODO split this macro as well\n         pppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppppp =>\n@@ -176,19 +176,19 @@ fn issue355() {\n         qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq =>\n             println!(\"a\", b),\n         rrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr =>\n-            vec!(1, 2),\n+            vec![1, 2],\n         ssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssssss =>\n             vec!(3; 4),\n         // Funky bracketing styles\n         t => println!{\"a\", b},\n-        u => vec!{1, 2},\n+        u => vec![1, 2],\n         v => vec!{3; 4},\n         w => println![\"a\", b],\n         x => vec![1, 2],\n         y => vec![3; 4],\n         // Brackets with comments\n         tc => println!{\"a\", b}, // comment\n-        uc => vec!{1, 2}, // comment\n+        uc => vec![1, 2], // comment\n         vc => vec!{3; 4}, // comment\n         wc => println![\"a\", b], // comment\n         xc => vec![1, 2], // comment"}]}