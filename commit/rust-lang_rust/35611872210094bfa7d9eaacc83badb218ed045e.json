{"sha": "35611872210094bfa7d9eaacc83badb218ed045e", "node_id": "C_kwDOAAsO6NoAKDM1NjExODcyMjEwMDk0YmZhN2Q5ZWFhY2M4M2JhZGIyMThlZDA0NWU", "commit": {"author": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-30T15:58:43Z"}, "committer": {"name": "Pyry Kontio", "email": "pyry.kontio@drasa.eu", "date": "2022-03-30T17:10:13Z"}, "message": "Improve floating point documentation:\n\n- Refine the \"NaN as a special value\" top level explanation of f32\n- Refine `const NAN` docstring.\n- Refine `fn is_sign_positive` and `fn is_sign_negative` docstrings.\n- Refine `fn min` and `fn max` docstrings.\n- Refine `fn trunc` docstrings.\n- Refine `fn powi` docstrings.\n- Refine `fn copysign` docstrings.\n- Reword `NaN` and `NAN` as plain \"NaN\", unless they refer to the specific `const NAN`.\n- Reword \"a number\" to `self` in function docstrings to clarify.\n- Remove \"Returns NAN if the number is NAN\" as this is told to be the default behavior in the top explanation.\n- Remove \"propagating NaNs\", as full propagation (preservation of payloads) is not guaranteed.", "tree": {"sha": "94546ea036aa3db9bdaf97481dcf904861ec3855", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/94546ea036aa3db9bdaf97481dcf904861ec3855"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/35611872210094bfa7d9eaacc83badb218ed045e", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/35611872210094bfa7d9eaacc83badb218ed045e", "html_url": "https://github.com/rust-lang/rust/commit/35611872210094bfa7d9eaacc83badb218ed045e", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/35611872210094bfa7d9eaacc83badb218ed045e/comments", "author": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "committer": {"login": "golddranks", "id": 2675542, "node_id": "MDQ6VXNlcjI2NzU1NDI=", "avatar_url": "https://avatars.githubusercontent.com/u/2675542?v=4", "gravatar_id": "", "url": "https://api.github.com/users/golddranks", "html_url": "https://github.com/golddranks", "followers_url": "https://api.github.com/users/golddranks/followers", "following_url": "https://api.github.com/users/golddranks/following{/other_user}", "gists_url": "https://api.github.com/users/golddranks/gists{/gist_id}", "starred_url": "https://api.github.com/users/golddranks/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/golddranks/subscriptions", "organizations_url": "https://api.github.com/users/golddranks/orgs", "repos_url": "https://api.github.com/users/golddranks/repos", "events_url": "https://api.github.com/users/golddranks/events{/privacy}", "received_events_url": "https://api.github.com/users/golddranks/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3e7514670db841a7f0d7656f3b13b1c8b2c11599", "url": "https://api.github.com/repos/rust-lang/rust/commits/3e7514670db841a7f0d7656f3b13b1c8b2c11599", "html_url": "https://github.com/rust-lang/rust/commit/3e7514670db841a7f0d7656f3b13b1c8b2c11599"}], "stats": {"total": 190, "additions": 126, "deletions": 64}, "files": [{"sha": "835651c5057fadb4806cdaa64e64c7645c842268", "filename": "library/core/src/num/f32.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff32.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -418,6 +418,15 @@ impl f32 {\n     pub const MAX_10_EXP: i32 = 38;\n \n     /// Not a Number (NaN).\n+    ///\n+    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// a plethora of bit patterns are considered to be NaN.\n+    /// Furthermore, the standard makes a difference\n+    /// between a \"signaling\" and a \"quiet\" NaN,\n+    /// and allows inspecting its \"payload\" (the unspecified bits in the bit pattern).\n+    /// This constant isn't guaranteed to equal to any specific NaN bitpattern,\n+    /// and the stability of its representation over Rust versions\n+    /// and target platforms isn't guaranteed.\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f32 = 0.0_f32 / 0.0_f32;\n     /// Infinity (\u221e).\n@@ -427,7 +436,7 @@ impl f32 {\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f32 = -1.0_f32 / 0.0_f32;\n \n-    /// Returns `true` if this value is `NaN`.\n+    /// Returns `true` if this value is NaN.\n     ///\n     /// ```\n     /// let nan = f32::NAN;\n@@ -476,7 +485,7 @@ impl f32 {\n         self.abs_private() == Self::INFINITY\n     }\n \n-    /// Returns `true` if this number is neither infinite nor `NaN`.\n+    /// Returns `true` if this number is neither infinite nor NaN.\n     ///\n     /// ```\n     /// let f = 7.0f32;\n@@ -527,7 +536,7 @@ impl f32 {\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,\n-    /// [subnormal], or `NaN`.\n+    /// [subnormal], or NaN.\n     ///\n     /// ```\n     /// let min = f32::MIN_POSITIVE; // 1.17549435e-38f32\n@@ -582,8 +591,12 @@ impl f32 {\n         }\n     }\n \n-    /// Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s with\n-    /// positive sign bit and positive infinity.\n+    /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n+    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n+    /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n+    /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n+    /// See [explanation of NaN as a special value](f32) for more info.\n     ///\n     /// ```\n     /// let f = 7.0_f32;\n@@ -600,8 +613,12 @@ impl f32 {\n         !self.is_sign_negative()\n     }\n \n-    /// Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s with\n-    /// negative sign bit and negative infinity.\n+    /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n+    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n+    /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n+    /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n+    /// See [explanation of NaN as a special value](f32) for more info.\n     ///\n     /// ```\n     /// let f = 7.0f32;\n@@ -674,17 +691,17 @@ impl f32 {\n \n     /// Returns the maximum of the two numbers.\n     ///\n-    /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmax.\n+    /// If one of the arguments is NaN, then the other argument is returned.\n+    /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n+    /// this function handles all NaNs the same way and avoids maxNum's problems with associativity.\n+    /// This also matches the behavior of libm\u2019s fmax.\n     ///\n     /// ```\n     /// let x = 1.0f32;\n     /// let y = 2.0f32;\n     ///\n     /// assert_eq!(x.max(y), y);\n     /// ```\n-    ///\n-    /// If one of the arguments is NaN, then the other argument is returned.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -694,25 +711,25 @@ impl f32 {\n \n     /// Returns the minimum of the two numbers.\n     ///\n-    /// Follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmin.\n+    /// If one of the arguments is NaN, then the other argument is returned.\n+    /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n+    /// this function handles all NaNs the same way and avoids minNum's problems with associativity.\n+    /// This also matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0f32;\n     /// let y = 2.0f32;\n     ///\n     /// assert_eq!(x.min(y), x);\n     /// ```\n-    ///\n-    /// If one of the arguments is NaN, then the other argument is returned.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f32) -> f32 {\n         intrinsics::minnumf32(self, other)\n     }\n \n-    /// Returns the maximum of the two numbers, propagating NaNs.\n+    /// Returns the maximum of the two numbers.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f32::max`] which only returns NaN when *both* arguments are NaN.\n@@ -744,7 +761,7 @@ impl f32 {\n         }\n     }\n \n-    /// Returns the minimum of the two numbers, propagating NaNs.\n+    /// Returns the minimum of the two numbers.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f32::min`] which only returns NaN when *both* arguments are NaN."}, {"sha": "b0971233f250f4a589581858b5378e1467bfb77d", "filename": "library/core/src/num/f64.rs", "status": "modified", "additions": 34, "deletions": 17, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fnum%2Ff64.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -417,6 +417,15 @@ impl f64 {\n     pub const MAX_10_EXP: i32 = 308;\n \n     /// Not a Number (NaN).\n+    ///\n+    /// Note that IEEE-745 doesn't define just a single NaN value;\n+    /// a plethora of bit patterns are considered to be NaN.\n+    /// Furthermore, the standard makes a difference\n+    /// between a \"signaling\" and a \"quiet\" NaN,\n+    /// and allows inspecting its \"payload\" (the unspecified bits in the bit pattern).\n+    /// This constant isn't guaranteed to equal to any specific NaN bitpattern,\n+    /// and the stability of its representation over Rust versions\n+    /// and target platforms isn't guaranteed.\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NAN: f64 = 0.0_f64 / 0.0_f64;\n     /// Infinity (\u221e).\n@@ -426,7 +435,7 @@ impl f64 {\n     #[stable(feature = \"assoc_int_consts\", since = \"1.43.0\")]\n     pub const NEG_INFINITY: f64 = -1.0_f64 / 0.0_f64;\n \n-    /// Returns `true` if this value is `NaN`.\n+    /// Returns `true` if this value is NaN.\n     ///\n     /// ```\n     /// let nan = f64::NAN;\n@@ -475,7 +484,7 @@ impl f64 {\n         self.abs_private() == Self::INFINITY\n     }\n \n-    /// Returns `true` if this number is neither infinite nor `NaN`.\n+    /// Returns `true` if this number is neither infinite nor NaN.\n     ///\n     /// ```\n     /// let f = 7.0f64;\n@@ -526,7 +535,7 @@ impl f64 {\n     }\n \n     /// Returns `true` if the number is neither zero, infinite,\n-    /// [subnormal], or `NaN`.\n+    /// [subnormal], or NaN.\n     ///\n     /// ```\n     /// let min = f64::MIN_POSITIVE; // 2.2250738585072014e-308f64\n@@ -581,8 +590,12 @@ impl f64 {\n         }\n     }\n \n-    /// Returns `true` if `self` has a positive sign, including `+0.0`, `NaN`s with\n-    /// positive sign bit and positive infinity.\n+    /// Returns `true` if `self` has a positive sign, including `+0.0`, NaNs with\n+    /// positive sign bit and positive infinity. Note that IEEE-745 doesn't assign any\n+    /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n+    /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n+    /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n+    /// See [explanation of NaN as a special value](f32) for more info.\n     ///\n     /// ```\n     /// let f = 7.0_f64;\n@@ -608,8 +621,12 @@ impl f64 {\n         self.is_sign_positive()\n     }\n \n-    /// Returns `true` if `self` has a negative sign, including `-0.0`, `NaN`s with\n-    /// negative sign bit and negative infinity.\n+    /// Returns `true` if `self` has a negative sign, including `-0.0`, NaNs with\n+    /// negative sign bit and negative infinity. Note that IEEE-745 doesn't assign any\n+    /// meaning to the sign bit in case of a NaN, and as Rust doesn't guarantee that\n+    /// the bit pattern of NaNs are conserved over arithmetic operations, the result of\n+    /// `is_sign_positive` on a NaN might produce an unexpected result in some cases.\n+    /// See [explanation of NaN as a special value](f32) for more info.\n     ///\n     /// ```\n     /// let f = 7.0_f64;\n@@ -690,17 +707,17 @@ impl f64 {\n \n     /// Returns the maximum of the two numbers.\n     ///\n-    /// Follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmax.\n+    /// If one of the arguments is NaN, then the other argument is returned.\n+    /// This follows the IEEE-754 2008 semantics for maxNum, except for handling of signaling NaNs;\n+    /// this function handles all NaNs the same way and avoids maxNum's problems with associativity.\n+    /// This also matches the behavior of libm\u2019s fmax.\n     ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let y = 2.0_f64;\n     ///\n     /// assert_eq!(x.max(y), y);\n     /// ```\n-    ///\n-    /// If one of the arguments is NaN, then the other argument is returned.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n@@ -710,25 +727,25 @@ impl f64 {\n \n     /// Returns the minimum of the two numbers.\n     ///\n-    /// Follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs.\n-    /// This matches the behavior of libm\u2019s fmin.\n+    /// If one of the arguments is NaN, then the other argument is returned.\n+    /// This follows the IEEE-754 2008 semantics for minNum, except for handling of signaling NaNs;\n+    /// this function handles all NaNs the same way and avoids minNum's problems with associativity.\n+    /// This also matches the behavior of libm\u2019s fmin.\n     ///\n     /// ```\n     /// let x = 1.0_f64;\n     /// let y = 2.0_f64;\n     ///\n     /// assert_eq!(x.min(y), x);\n     /// ```\n-    ///\n-    /// If one of the arguments is NaN, then the other argument is returned.\n     #[must_use = \"this returns the result of the comparison, without modifying either input\"]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     #[inline]\n     pub fn min(self, other: f64) -> f64 {\n         intrinsics::minnumf64(self, other)\n     }\n \n-    /// Returns the maximum of the two numbers, propagating NaNs.\n+    /// Returns the maximum of the two numbers.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f64::max`] which only returns NaN when *both* arguments are NaN.\n@@ -760,7 +777,7 @@ impl f64 {\n         }\n     }\n \n-    /// Returns the minimum of the two numbers, propagating NaNs.\n+    /// Returns the minimum of the two numbers.\n     ///\n     /// This returns NaN when *either* argument is NaN, as opposed to\n     /// [`f64::min`] which only returns NaN when *both* arguments are NaN."}, {"sha": "188cb8f983bc197a68cbc64c0b73121d0bcc21fc", "filename": "library/core/src/primitive_docs.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fcore%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Fprimitive_docs.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -977,10 +977,20 @@ mod prim_tuple {}\n ///   like `1.0 / 0.0`.\n /// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n ///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected\n-///   behavior: it is unequal to any float, including itself! It is also neither\n-///   smaller nor greater than any float, making it impossible to sort. Lastly,\n-///   it is considered infectious as almost all calculations where one of the\n-///   operands is NaN will also result in NaN.\n+///   behavior:\n+///   - It is unequal to any float, including itself!\n+///   - It is also neither smaller nor greater than any float, making it\n+///     impossible to sort by the default comparison operation. This is the\n+///     reason `f32` doesn't implement the `Ord` and `Eq` traits.\n+///   - It is also considered *infectious* as almost all calculations where one\n+///     of the operands is NaN will also result in NaN. The explanations on this\n+///     page only explicitly document behavior on NaN operands if this default\n+///     is *not* observed by the operation.\n+///   - Lastly, there are multiple bit patterns that are considered NaN.\n+///     Rust does not currently guarantee that the bit patterns of NaN are\n+///     preserved over arithmetic operations,\n+///     so there may be some surprising results upon inspecting the bit patterns,\n+///     as the same calculations might produce NaNs with different bit patterns.\n ///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///"}, {"sha": "469db1b7c2836d1632e532dbb89bedc9bba8301c", "filename": "library/std/src/f32.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Ff32.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Ff32.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff32.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -30,7 +30,7 @@ pub use core::f32::{\n #[cfg(not(test))]\n #[cfg_attr(bootstrap, lang = \"f32_runtime\")]\n impl f32 {\n-    /// Returns the largest integer less than or equal to a number.\n+    /// Returns the largest integer less than or equal to `self`.\n     ///\n     /// # Examples\n     ///\n@@ -51,7 +51,7 @@ impl f32 {\n         unsafe { intrinsics::floorf32(self) }\n     }\n \n-    /// Returns the smallest integer greater than or equal to a number.\n+    /// Returns the smallest integer greater than or equal to `self`.\n     ///\n     /// # Examples\n     ///\n@@ -70,7 +70,7 @@ impl f32 {\n         unsafe { intrinsics::ceilf32(self) }\n     }\n \n-    /// Returns the nearest integer to a number. Round half-way cases away from\n+    /// Returns the nearest integer to `self`. Round half-way cases away from\n     /// `0.0`.\n     ///\n     /// # Examples\n@@ -90,7 +90,8 @@ impl f32 {\n         unsafe { intrinsics::roundf32(self) }\n     }\n \n-    /// Returns the integer part of a number.\n+    /// Returns the integer part of `self`.\n+    /// This means that non-integer numbers are always truncated towards zero.\n     ///\n     /// # Examples\n     ///\n@@ -111,7 +112,7 @@ impl f32 {\n         unsafe { intrinsics::truncf32(self) }\n     }\n \n-    /// Returns the fractional part of a number.\n+    /// Returns the fractional part of `self`.\n     ///\n     /// # Examples\n     ///\n@@ -132,8 +133,7 @@ impl f32 {\n         self - self.trunc()\n     }\n \n-    /// Computes the absolute value of `self`. Returns `NAN` if the\n-    /// number is `NAN`.\n+    /// Computes the absolute value of `self`.\n     ///\n     /// # Examples\n     ///\n@@ -161,7 +161,7 @@ impl f32 {\n     ///\n     /// - `1.0` if the number is positive, `+0.0` or `INFINITY`\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-    /// - `NAN` if the number is `NAN`\n+    /// - NaN if the number is NaN\n     ///\n     /// # Examples\n     ///\n@@ -185,8 +185,10 @@ impl f32 {\n     /// `sign`.\n     ///\n     /// Equal to `self` if the sign of `self` and `sign` are the same, otherwise\n-    /// equal to `-self`. If `self` is a `NAN`, then a `NAN` with the sign of\n-    /// `sign` is returned.\n+    /// equal to `-self`. If `self` is a NaN, then a NaN with the sign bit of\n+    /// `sign` is returned. Note, however, that conserving the sign bit on NaN\n+    /// across arithmetical operations is not generally guaranteed.\n+    /// See [explanation of NaN as a special value](primitive@f32) for more info.\n     ///\n     /// # Examples\n     ///\n@@ -299,7 +301,9 @@ impl f32 {\n \n     /// Raises a number to an integer power.\n     ///\n-    /// Using this function is generally faster than using `powf`\n+    /// Using this function is generally faster than using `powf`.\n+    /// It might have different sequence of rounding operations than `powf`,\n+    /// so the results are not guaranteed to agree.\n     ///\n     /// # Examples\n     ///"}, {"sha": "a291a777e5565df7e26ad5738a20dca1416abe85", "filename": "library/std/src/f64.rs", "status": "modified", "additions": 15, "deletions": 11, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Ff64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Ff64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Ff64.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -30,7 +30,7 @@ pub use core::f64::{\n #[cfg(not(test))]\n #[cfg_attr(bootstrap, lang = \"f64_runtime\")]\n impl f64 {\n-    /// Returns the largest integer less than or equal to a number.\n+    /// Returns the largest integer less than or equal to `self`.\n     ///\n     /// # Examples\n     ///\n@@ -51,7 +51,7 @@ impl f64 {\n         unsafe { intrinsics::floorf64(self) }\n     }\n \n-    /// Returns the smallest integer greater than or equal to a number.\n+    /// Returns the smallest integer greater than or equal to `self`.\n     ///\n     /// # Examples\n     ///\n@@ -70,7 +70,7 @@ impl f64 {\n         unsafe { intrinsics::ceilf64(self) }\n     }\n \n-    /// Returns the nearest integer to a number. Round half-way cases away from\n+    /// Returns the nearest integer to `self`. Round half-way cases away from\n     /// `0.0`.\n     ///\n     /// # Examples\n@@ -90,7 +90,8 @@ impl f64 {\n         unsafe { intrinsics::roundf64(self) }\n     }\n \n-    /// Returns the integer part of a number.\n+    /// Returns the integer part of `self`.\n+    /// This means that non-integer numbers are always truncated towards zero.\n     ///\n     /// # Examples\n     ///\n@@ -111,7 +112,7 @@ impl f64 {\n         unsafe { intrinsics::truncf64(self) }\n     }\n \n-    /// Returns the fractional part of a number.\n+    /// Returns the fractional part of `self`.\n     ///\n     /// # Examples\n     ///\n@@ -132,8 +133,7 @@ impl f64 {\n         self - self.trunc()\n     }\n \n-    /// Computes the absolute value of `self`. Returns `NAN` if the\n-    /// number is `NAN`.\n+    /// Computes the absolute value of `self`.\n     ///\n     /// # Examples\n     ///\n@@ -161,7 +161,7 @@ impl f64 {\n     ///\n     /// - `1.0` if the number is positive, `+0.0` or `INFINITY`\n     /// - `-1.0` if the number is negative, `-0.0` or `NEG_INFINITY`\n-    /// - `NAN` if the number is `NAN`\n+    /// - NaN if the number is NaN\n     ///\n     /// # Examples\n     ///\n@@ -185,8 +185,10 @@ impl f64 {\n     /// `sign`.\n     ///\n     /// Equal to `self` if the sign of `self` and `sign` are the same, otherwise\n-    /// equal to `-self`. If `self` is a `NAN`, then a `NAN` with the sign of\n-    /// `sign` is returned.\n+    /// equal to `-self`. If `self` is a NaN, then a NaN with the sign bit of\n+    /// `sign` is returned. Note, however, that conserving the sign bit on NaN\n+    /// across arithmetical operations is not generally guaranteed.\n+    /// See [explanation of NaN as a special value](primitive@f32) for more info.\n     ///\n     /// # Examples\n     ///\n@@ -299,7 +301,9 @@ impl f64 {\n \n     /// Raises a number to an integer power.\n     ///\n-    /// Using this function is generally faster than using `powf`\n+    /// Using this function is generally faster than using `powf`.\n+    /// It might have different sequence of rounding operations than `powf`,\n+    /// so the results are not guaranteed to agree.\n     ///\n     /// # Examples\n     ///"}, {"sha": "188cb8f983bc197a68cbc64c0b73121d0bcc21fc", "filename": "library/std/src/primitive_docs.rs", "status": "modified", "additions": 14, "deletions": 4, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/35611872210094bfa7d9eaacc83badb218ed045e/library%2Fstd%2Fsrc%2Fprimitive_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fprimitive_docs.rs?ref=35611872210094bfa7d9eaacc83badb218ed045e", "patch": "@@ -977,10 +977,20 @@ mod prim_tuple {}\n ///   like `1.0 / 0.0`.\n /// - [NaN (not a number)](#associatedconstant.NAN): this value results from\n ///   calculations like `(-1.0).sqrt()`. NaN has some potentially unexpected\n-///   behavior: it is unequal to any float, including itself! It is also neither\n-///   smaller nor greater than any float, making it impossible to sort. Lastly,\n-///   it is considered infectious as almost all calculations where one of the\n-///   operands is NaN will also result in NaN.\n+///   behavior:\n+///   - It is unequal to any float, including itself!\n+///   - It is also neither smaller nor greater than any float, making it\n+///     impossible to sort by the default comparison operation. This is the\n+///     reason `f32` doesn't implement the `Ord` and `Eq` traits.\n+///   - It is also considered *infectious* as almost all calculations where one\n+///     of the operands is NaN will also result in NaN. The explanations on this\n+///     page only explicitly document behavior on NaN operands if this default\n+///     is *not* observed by the operation.\n+///   - Lastly, there are multiple bit patterns that are considered NaN.\n+///     Rust does not currently guarantee that the bit patterns of NaN are\n+///     preserved over arithmetic operations,\n+///     so there may be some surprising results upon inspecting the bit patterns,\n+///     as the same calculations might produce NaNs with different bit patterns.\n ///\n /// For more information on floating point numbers, see [Wikipedia][wikipedia].\n ///"}]}