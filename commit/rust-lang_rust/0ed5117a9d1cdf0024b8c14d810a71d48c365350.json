{"sha": "0ed5117a9d1cdf0024b8c14d810a71d48c365350", "node_id": "MDY6Q29tbWl0NzI0NzEyOjBlZDUxMTdhOWQxY2RmMDAyNGI4YzE0ZDgxMGE3MWQ0OGMzNjUzNTA=", "commit": {"author": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-14T23:36:31Z"}, "committer": {"name": "Brian Anderson", "email": "banderson@mozilla.com", "date": "2011-12-17T21:45:38Z"}, "message": "rt: Set the default stack size to 768 bytes. Double on each alloc", "tree": {"sha": "a113f51dbf15dc1f8386ee45116feafc40aee75e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/a113f51dbf15dc1f8386ee45116feafc40aee75e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/0ed5117a9d1cdf0024b8c14d810a71d48c365350", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed5117a9d1cdf0024b8c14d810a71d48c365350", "html_url": "https://github.com/rust-lang/rust/commit/0ed5117a9d1cdf0024b8c14d810a71d48c365350", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/0ed5117a9d1cdf0024b8c14d810a71d48c365350/comments", "author": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "committer": {"login": "brson", "id": 147214, "node_id": "MDQ6VXNlcjE0NzIxNA==", "avatar_url": "https://avatars.githubusercontent.com/u/147214?v=4", "gravatar_id": "", "url": "https://api.github.com/users/brson", "html_url": "https://github.com/brson", "followers_url": "https://api.github.com/users/brson/followers", "following_url": "https://api.github.com/users/brson/following{/other_user}", "gists_url": "https://api.github.com/users/brson/gists{/gist_id}", "starred_url": "https://api.github.com/users/brson/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/brson/subscriptions", "organizations_url": "https://api.github.com/users/brson/orgs", "repos_url": "https://api.github.com/users/brson/repos", "events_url": "https://api.github.com/users/brson/events{/privacy}", "received_events_url": "https://api.github.com/users/brson/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1a2c2f6b0340bfd1a82ff7c3a0a8a76951969ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1a2c2f6b0340bfd1a82ff7c3a0a8a76951969ac", "html_url": "https://github.com/rust-lang/rust/commit/c1a2c2f6b0340bfd1a82ff7c3a0a8a76951969ac"}], "stats": {"total": 50, "additions": 39, "deletions": 11}, "files": [{"sha": "b220c459c0ba6bfbb5513cc5ef4706ac0530b6d9", "filename": "src/rt/rust_env.cpp", "status": "modified", "additions": 1, "deletions": 4, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/0ed5117a9d1cdf0024b8c14d810a71d48c365350/src%2Frt%2Frust_env.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0ed5117a9d1cdf0024b8c14d810a71d48c365350/src%2Frt%2Frust_env.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_env.cpp?ref=0ed5117a9d1cdf0024b8c14d810a71d48c365350", "patch": "@@ -67,17 +67,14 @@ get_num_threads()\n     return get_num_cpus();\n }\n \n-// FIXME (issue #151): This should be 0x300; the change here is for\n-// practicality's sake until stack growth is working.\n-\n static size_t\n get_min_stk_size() {\n     char *stack_size = getenv(RUST_MIN_STACK);\n     if(stack_size) {\n         return strtol(stack_size, NULL, 0);\n     }\n     else {\n-        return 0x300000;\n+        return 0x300;\n     }\n }\n "}, {"sha": "bd3a21054ab80c0355ec82e9cd3938582ef922df", "filename": "src/rt/rust_task.cpp", "status": "modified", "additions": 38, "deletions": 7, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/0ed5117a9d1cdf0024b8c14d810a71d48c365350/src%2Frt%2Frust_task.cpp", "raw_url": "https://github.com/rust-lang/rust/raw/0ed5117a9d1cdf0024b8c14d810a71d48c365350/src%2Frt%2Frust_task.cpp", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Frt%2Frust_task.cpp?ref=0ed5117a9d1cdf0024b8c14d810a71d48c365350", "patch": "@@ -11,6 +11,7 @@\n #include <iostream>\n #include <cassert>\n #include <cstring>\n+#include <algorithm>\n \n #include \"globals.h\"\n \n@@ -44,25 +45,55 @@ get_min_stk_size(size_t default_size) {\n     }\n }\n \n+static size_t\n+get_next_stk_size(rust_scheduler *sched, rust_task *task,\n+                  size_t min, size_t current, size_t requested) {\n+    LOG(task, mem, \"calculating new stack size for 0x%\" PRIxPTR, task);\n+    LOG(task, mem,\n+        \"min: %\" PRIdPTR \" current: %\" PRIdPTR \" requested: %\" PRIdPTR,\n+        min, current, requested);\n+\n+    // Allocate at least enough to accomodate the next frame\n+    size_t sz = std::max(min, requested);\n+\n+    // And double the stack size each allocation\n+    const size_t max = 1024 * 1024;\n+    size_t next = std::min(max, current * 2);\n+\n+    sz = std::max(sz, next);\n+\n+    LOG(task, mem, \"next stack size: %\" PRIdPTR, sz);\n+    return sz;\n+}\n \n // Task stack segments. Heap allocated and chained together.\n \n static stk_seg*\n-new_stk(rust_scheduler *sched, rust_task *task, size_t minsz)\n+new_stk(rust_scheduler *sched, rust_task *task, size_t requested_sz)\n {\n-    size_t min_stk_bytes = get_min_stk_size(sched->min_stack_size);\n-    if (minsz < min_stk_bytes)\n-        minsz = min_stk_bytes;\n-    size_t sz = sizeof(stk_seg) + minsz + RED_ZONE_SIZE;\n+    // The minimum stack size, in bytes, of a Rust stack, excluding red zone\n+    size_t min_sz = get_min_stk_size(sched->min_stack_size);\n+    // The size of the current stack segment, excluding red zone\n+    size_t current_sz = 0;\n+    if (task->stk != NULL) {\n+        current_sz = (size_t)(task->stk->end\n+                              - (uintptr_t)&task->stk->data[0]\n+                              - RED_ZONE_SIZE);\n+    }\n+    // The calculated size of the new stack, excluding red zone\n+    size_t rust_stk_sz = get_next_stk_size(sched, task, min_sz,\n+                                           current_sz, requested_sz);\n+\n+    size_t sz = sizeof(stk_seg) + rust_stk_sz + RED_ZONE_SIZE;\n     stk_seg *stk = (stk_seg *)task->malloc(sz, \"stack\");\n     LOGPTR(task->sched, \"new stk\", (uintptr_t)stk);\n     memset(stk, 0, sizeof(stk_seg));\n     stk->next = task->stk;\n-    stk->end = (uintptr_t) &stk->data[minsz + RED_ZONE_SIZE];\n+    stk->end = (uintptr_t) &stk->data[rust_stk_sz + RED_ZONE_SIZE];\n     LOGPTR(task->sched, \"stk end\", stk->end);\n     stk->valgrind_id =\n         VALGRIND_STACK_REGISTER(&stk->data[0],\n-                                &stk->data[minsz + RED_ZONE_SIZE]);\n+                                &stk->data[rust_stk_sz + RED_ZONE_SIZE]);\n #ifndef NVALGRIND\n     VALGRIND_MAKE_MEM_NOACCESS(stk->data, STACK_NOACCESS_SIZE);\n #endif"}]}