{"sha": "47121d6d884bb60dad47e345f52f2ad6aadecaaf", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ3MTIxZDZkODg0YmI2MGRhZDQ3ZTM0NWY1MmYyYWQ2YWFkZWNhYWY=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T08:59:37Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2021-01-19T08:59:37Z"}, "message": "Auto merge of #81110 - LeSeulArtichaut:fix-unused-unsafe-label, r=RalfJung\n\nFix `unused_unsafe` label with `unsafe_block_in_unsafe_fn\n\nPreviously, the following code:\n\n```rust\n#![feature(unsafe_block_in_unsafe_fn)]\n\nunsafe fn foo() {\n    unsafe { unsf() }\n}\n\nunsafe fn unsf() {}\n```\n\nWould give the following warning:\n\n```\nwarning: unnecessary `unsafe` block\n --> src/lib.rs:4:5\n  |\n4 |     unsafe { unsf() }\n  |     ^^^^^^ unnecessary `unsafe` block\n  |\n  = note: `#[warn(unused_unsafe)]` on by default\n```\nwhich doesn't point out that the block is in an `unsafe fn`.\n\nTracking issue: #71668\ncc #79208", "tree": {"sha": "ec79f7cc389fcaad1402c0a7f8880c8779323ec8", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ec79f7cc389fcaad1402c0a7f8880c8779323ec8"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/47121d6d884bb60dad47e345f52f2ad6aadecaaf", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/47121d6d884bb60dad47e345f52f2ad6aadecaaf", "html_url": "https://github.com/rust-lang/rust/commit/47121d6d884bb60dad47e345f52f2ad6aadecaaf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/47121d6d884bb60dad47e345f52f2ad6aadecaaf/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7d7b22d78fa71cf18109dc9d186611f2ddf60d8e", "url": "https://api.github.com/repos/rust-lang/rust/commits/7d7b22d78fa71cf18109dc9d186611f2ddf60d8e", "html_url": "https://github.com/rust-lang/rust/commit/7d7b22d78fa71cf18109dc9d186611f2ddf60d8e"}, {"sha": "2136a5cfad69337222b5b02f934825e5d346f9ca", "url": "https://api.github.com/repos/rust-lang/rust/commits/2136a5cfad69337222b5b02f934825e5d346f9ca", "html_url": "https://github.com/rust-lang/rust/commit/2136a5cfad69337222b5b02f934825e5d346f9ca"}], "stats": {"total": 72, "additions": 48, "deletions": 24}, "files": [{"sha": "f0472758dfb8edecc71ec157e395a6e594461997", "filename": "compiler/rustc_mir/src/transform/check_unsafety.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/47121d6d884bb60dad47e345f52f2ad6aadecaaf/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47121d6d884bb60dad47e345f52f2ad6aadecaaf/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_unsafety.rs?ref=47121d6d884bb60dad47e345f52f2ad6aadecaaf", "patch": "@@ -568,24 +568,23 @@ fn is_enclosed(\n     tcx: TyCtxt<'_>,\n     used_unsafe: &FxHashSet<hir::HirId>,\n     id: hir::HirId,\n-) -> Option<(String, hir::HirId)> {\n+    unsafe_op_in_unsafe_fn_allowed: bool,\n+) -> Option<(&'static str, hir::HirId)> {\n     let parent_id = tcx.hir().get_parent_node(id);\n     if parent_id != id {\n         if used_unsafe.contains(&parent_id) {\n-            Some((\"block\".to_string(), parent_id))\n+            Some((\"block\", parent_id))\n         } else if let Some(Node::Item(&hir::Item {\n             kind: hir::ItemKind::Fn(ref sig, _, _), ..\n         })) = tcx.hir().find(parent_id)\n         {\n-            if sig.header.unsafety == hir::Unsafety::Unsafe\n-                && !tcx.features().unsafe_block_in_unsafe_fn\n-            {\n-                Some((\"fn\".to_string(), parent_id))\n+            if sig.header.unsafety == hir::Unsafety::Unsafe && unsafe_op_in_unsafe_fn_allowed {\n+                Some((\"fn\", parent_id))\n             } else {\n                 None\n             }\n         } else {\n-            is_enclosed(tcx, used_unsafe, parent_id)\n+            is_enclosed(tcx, used_unsafe, parent_id, unsafe_op_in_unsafe_fn_allowed)\n         }\n     } else {\n         None\n@@ -598,7 +597,9 @@ fn report_unused_unsafe(tcx: TyCtxt<'_>, used_unsafe: &FxHashSet<hir::HirId>, id\n         let msg = \"unnecessary `unsafe` block\";\n         let mut db = lint.build(msg);\n         db.span_label(span, msg);\n-        if let Some((kind, id)) = is_enclosed(tcx, used_unsafe, id) {\n+        if let Some((kind, id)) =\n+            is_enclosed(tcx, used_unsafe, id, unsafe_op_in_unsafe_fn_allowed(tcx, id))\n+        {\n             db.span_label(\n                 tcx.sess.source_map().guess_head_span(tcx.hir().span(id)),\n                 format!(\"because it's nested under this `unsafe` {}\", kind),"}, {"sha": "9eec7e0e8fe62c2958f87f1d1eb71f081497537a", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.rs", "status": "modified", "additions": 5, "deletions": 0, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/47121d6d884bb60dad47e345f52f2ad6aadecaaf/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/47121d6d884bb60dad47e345f52f2ad6aadecaaf/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.rs?ref=47121d6d884bb60dad47e345f52f2ad6aadecaaf", "patch": "@@ -13,6 +13,9 @@ unsafe fn deny_level() {\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n     //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+\n+    unsafe {}\n+    //~^ ERROR unnecessary `unsafe` block\n }\n \n // Check that `unsafe_op_in_unsafe_fn` works starting from the `warn` level.\n@@ -25,6 +28,8 @@ unsafe fn warning_level() {\n     //~^ ERROR dereference of raw pointer is unsafe and requires unsafe block\n     VOID = ();\n     //~^ ERROR use of mutable static is unsafe and requires unsafe block\n+    unsafe {}\n+    //~^ ERROR unnecessary `unsafe` block\n }\n \n unsafe fn explicit_block() {"}, {"sha": "278a036c9f19faab7a9cc809716f2bc4899a5e6a", "filename": "src/test/ui/unsafe/rfc-2585-unsafe_op_in_unsafe_fn.stderr", "status": "modified", "additions": 34, "deletions": 16, "changes": 50, "blob_url": "https://github.com/rust-lang/rust/blob/47121d6d884bb60dad47e345f52f2ad6aadecaaf/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/47121d6d884bb60dad47e345f52f2ad6aadecaaf/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funsafe%2Frfc-2585-unsafe_op_in_unsafe_fn.stderr?ref=47121d6d884bb60dad47e345f52f2ad6aadecaaf", "patch": "@@ -27,78 +27,96 @@ LL |     VOID = ();\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:17:5\n+   |\n+LL |     unsafe {}\n+   |     ^^^^^^ unnecessary `unsafe` block\n+   |\n+note: the lint level is defined here\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:3:9\n+   |\n+LL | #![deny(unused_unsafe)]\n+   |         ^^^^^^^^^^^^^\n+\n error: call to unsafe function is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:22:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:25:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:20:8\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:23:8\n    |\n LL | #[deny(warnings)]\n    |        ^^^^^^^^\n    = note: `#[deny(unsafe_op_in_unsafe_fn)]` implied by `#[deny(warnings)]`\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error: dereference of raw pointer is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:24:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:27:5\n    |\n LL |     *PTR;\n    |     ^^^^ dereference of raw pointer\n    |\n    = note: raw pointers may be NULL, dangling or unaligned; they can violate aliasing rules and cause data races: all of these are undefined behavior\n \n error: use of mutable static is unsafe and requires unsafe block (error E0133)\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:26:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:29:5\n    |\n LL |     VOID = ();\n    |     ^^^^^^^^^ use of mutable static\n    |\n    = note: mutable statics can be mutated by multiple threads: aliasing violations or data races will cause undefined behavior\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:40:14\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:31:5\n+   |\n+LL |     unsafe {}\n+   |     ^^^^^^ unnecessary `unsafe` block\n+\n+error: unnecessary `unsafe` block\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:45:14\n    |\n LL |     unsafe { unsafe { unsf() } }\n    |     ------   ^^^^^^ unnecessary `unsafe` block\n    |     |\n    |     because it's nested under this `unsafe` block\n-   |\n-note: the lint level is defined here\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:3:9\n-   |\n-LL | #![deny(unused_unsafe)]\n-   |         ^^^^^^^^^^^^^\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:51:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:56:5\n    |\n+LL | unsafe fn allow_level() {\n+   | ----------------------- because it's nested under this `unsafe` fn\n+...\n LL |     unsafe { unsf() }\n    |     ^^^^^^ unnecessary `unsafe` block\n \n error: unnecessary `unsafe` block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:63:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:68:9\n    |\n+LL | unsafe fn nested_allow_level() {\n+   | ------------------------------ because it's nested under this `unsafe` fn\n+...\n LL |         unsafe { unsf() }\n    |         ^^^^^^ unnecessary `unsafe` block\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:69:5\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:74:5\n    |\n LL |     unsf();\n    |     ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n error[E0133]: call to unsafe function is unsafe and requires unsafe function or block\n-  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:73:9\n+  --> $DIR/rfc-2585-unsafe_op_in_unsafe_fn.rs:78:9\n    |\n LL |         unsf();\n    |         ^^^^^^ call to unsafe function\n    |\n    = note: consult the function's documentation for information on how to avoid undefined behavior\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 13 previous errors\n \n For more information about this error, try `rustc --explain E0133`."}]}