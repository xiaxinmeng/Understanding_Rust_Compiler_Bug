{"sha": "210e46bf24a8cef7f513f0116909d57d76304086", "node_id": "MDY6Q29tbWl0NzI0NzEyOjIxMGU0NmJmMjRhOGNlZjdmNTEzZjAxMTY5MDlkNTdkNzYzMDQwODY=", "commit": {"author": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-16T20:36:43Z"}, "committer": {"name": "Smitty", "email": "me@smitop.com", "date": "2021-06-16T20:36:43Z"}, "message": "Add pattern walking support to THIR walker", "tree": {"sha": "ca33f1260496b26c3db6491896129461fd96ecf7", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/ca33f1260496b26c3db6491896129461fd96ecf7"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/210e46bf24a8cef7f513f0116909d57d76304086", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/210e46bf24a8cef7f513f0116909d57d76304086", "html_url": "https://github.com/rust-lang/rust/commit/210e46bf24a8cef7f513f0116909d57d76304086", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/210e46bf24a8cef7f513f0116909d57d76304086/comments", "author": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "committer": {"login": "syvb", "id": 10530973, "node_id": "MDQ6VXNlcjEwNTMwOTcz", "avatar_url": "https://avatars.githubusercontent.com/u/10530973?v=4", "gravatar_id": "", "url": "https://api.github.com/users/syvb", "html_url": "https://github.com/syvb", "followers_url": "https://api.github.com/users/syvb/followers", "following_url": "https://api.github.com/users/syvb/following{/other_user}", "gists_url": "https://api.github.com/users/syvb/gists{/gist_id}", "starred_url": "https://api.github.com/users/syvb/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/syvb/subscriptions", "organizations_url": "https://api.github.com/users/syvb/orgs", "repos_url": "https://api.github.com/users/syvb/repos", "events_url": "https://api.github.com/users/syvb/events{/privacy}", "received_events_url": "https://api.github.com/users/syvb/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "url": "https://api.github.com/repos/rust-lang/rust/commits/9fef8d91b4a6c5bfe07c025c434f2d623ad83337", "html_url": "https://github.com/rust-lang/rust/commit/9fef8d91b4a6c5bfe07c025c434f2d623ad83337"}], "stats": {"total": 53, "additions": 48, "deletions": 5}, "files": [{"sha": "0f3276a1b0576c7f6d9b20260a72f725ac3dc18d", "filename": "compiler/rustc_mir_build/src/thir/visit.rs", "status": "modified", "additions": 48, "deletions": 5, "changes": 53, "blob_url": "https://github.com/rust-lang/rust/blob/210e46bf24a8cef7f513f0116909d57d76304086/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/210e46bf24a8cef7f513f0116909d57d76304086/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_build%2Fsrc%2Fthir%2Fvisit.rs?ref=210e46bf24a8cef7f513f0116909d57d76304086", "patch": "@@ -20,6 +20,10 @@ pub trait Visitor<'a, 'tcx: 'a>: Sized {\n         walk_arm(self, arm);\n     }\n \n+    fn visit_pat(&mut self, pat: &Pat<'tcx>) {\n+        walk_pat(self, pat);\n+    }\n+\n     fn visit_const(&mut self, _cnst: &'tcx Const<'tcx>) {}\n }\n \n@@ -142,18 +146,19 @@ pub fn walk_expr<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, expr: &Exp\n }\n \n pub fn walk_stmt<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, stmt: &Stmt<'tcx>) {\n-    match stmt.kind {\n-        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(&visitor.thir()[expr]),\n+    match &stmt.kind {\n+        StmtKind::Expr { expr, scope: _ } => visitor.visit_expr(&visitor.thir()[*expr]),\n         StmtKind::Let {\n             initializer,\n             remainder_scope: _,\n             init_scope: _,\n-            pattern: _,\n+            pattern,\n             lint_level: _,\n         } => {\n             if let Some(init) = initializer {\n-                visitor.visit_expr(&visitor.thir()[init]);\n+                visitor.visit_expr(&visitor.thir()[*init]);\n             }\n+            visitor.visit_pat(&pattern);\n         }\n     }\n }\n@@ -170,10 +175,48 @@ pub fn walk_block<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, block: &B\n pub fn walk_arm<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, arm: &Arm<'tcx>) {\n     match arm.guard {\n         Some(Guard::If(expr)) => visitor.visit_expr(&visitor.thir()[expr]),\n-        Some(Guard::IfLet(ref _pat, expr)) => {\n+        Some(Guard::IfLet(ref pat, expr)) => {\n+            visitor.visit_pat(pat);\n             visitor.visit_expr(&visitor.thir()[expr]);\n         }\n         None => {}\n     }\n+    visitor.visit_pat(&arm.pattern);\n     visitor.visit_expr(&visitor.thir()[arm.body]);\n }\n+\n+pub fn walk_pat<'a, 'tcx: 'a, V: Visitor<'a, 'tcx>>(visitor: &mut V, pat: &Pat<'tcx>) {\n+    use PatKind::*;\n+    match pat.kind.as_ref() {\n+        AscribeUserType { subpattern, .. }\n+        | Deref { subpattern, .. }\n+        | Binding { subpattern: Some(subpattern), .. } => visitor.visit_pat(&subpattern),\n+        Binding { .. } | Wild => {}\n+        Variant { subpatterns, .. } | Leaf { subpatterns } => {\n+            for subpattern in subpatterns {\n+                visitor.visit_pat(&subpattern.pattern);\n+            }\n+        }\n+        Constant { value } => visitor.visit_const(value),\n+        Range(range) => {\n+            visitor.visit_const(range.lo);\n+            visitor.visit_const(range.hi);\n+        }\n+        Slice { prefix, slice, suffix } | Array { prefix, slice, suffix } => {\n+            for subpattern in prefix {\n+                visitor.visit_pat(&subpattern);\n+            }\n+            if let Some(pat) = slice {\n+                visitor.visit_pat(pat);\n+            }\n+            for subpattern in suffix {\n+                visitor.visit_pat(&subpattern);\n+            }\n+        }\n+        Or { pats } => {\n+            for pat in pats {\n+                visitor.visit_pat(&pat);\n+            }\n+        }\n+    };\n+}"}]}