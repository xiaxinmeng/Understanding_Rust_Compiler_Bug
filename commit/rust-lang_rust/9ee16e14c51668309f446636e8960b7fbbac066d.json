{"sha": "9ee16e14c51668309f446636e8960b7fbbac066d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjllZTE2ZTE0YzUxNjY4MzA5ZjQ0NjYzNmU4OTYwYjdmYmJhYzA2NmQ=", "commit": {"author": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-20T22:15:50Z"}, "committer": {"name": "Oliver Scherer", "email": "github35764891676564198441@oli-obk.de", "date": "2019-12-20T22:15:50Z"}, "message": "Require const stability attributes on intrinsics to be able to use them in constant contexts", "tree": {"sha": "b1e4bbcc65f8ac787c7d4fea3011fa3884324d1f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1e4bbcc65f8ac787c7d4fea3011fa3884324d1f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9ee16e14c51668309f446636e8960b7fbbac066d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9ee16e14c51668309f446636e8960b7fbbac066d", "html_url": "https://github.com/rust-lang/rust/commit/9ee16e14c51668309f446636e8960b7fbbac066d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9ee16e14c51668309f446636e8960b7fbbac066d/comments", "author": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "committer": {"login": "oli-obk", "id": 332036, "node_id": "MDQ6VXNlcjMzMjAzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/332036?v=4", "gravatar_id": "", "url": "https://api.github.com/users/oli-obk", "html_url": "https://github.com/oli-obk", "followers_url": "https://api.github.com/users/oli-obk/followers", "following_url": "https://api.github.com/users/oli-obk/following{/other_user}", "gists_url": "https://api.github.com/users/oli-obk/gists{/gist_id}", "starred_url": "https://api.github.com/users/oli-obk/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/oli-obk/subscriptions", "organizations_url": "https://api.github.com/users/oli-obk/orgs", "repos_url": "https://api.github.com/users/oli-obk/repos", "events_url": "https://api.github.com/users/oli-obk/events{/privacy}", "received_events_url": "https://api.github.com/users/oli-obk/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a46509a4c2dc430ebebf940a26232fdaeeba81", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a46509a4c2dc430ebebf940a26232fdaeeba81", "html_url": "https://github.com/rust-lang/rust/commit/01a46509a4c2dc430ebebf940a26232fdaeeba81"}], "stats": {"total": 135, "additions": 38, "deletions": 97}, "files": [{"sha": "a194db52eb2a8ba93d51fb9e30c1ebf47243063d", "filename": "src/libcore/intrinsics.rs", "status": "modified", "additions": 28, "deletions": 1, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Fintrinsics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Fintrinsics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fintrinsics.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -667,14 +667,17 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::size_of`](../../std/mem/fn.size_of.html).\n+    #[rustc_const_stable(feature = \"const_size_of\", since = \"1.40.0\")]\n     pub fn size_of<T>() -> usize;\n \n     /// Moves a value to an uninitialized memory location.\n     ///\n     /// Drop glue is not run on the destination.\n     pub fn move_val_init<T>(dst: *mut T, src: T);\n \n+    #[rustc_const_stable(feature = \"const_min_align_of\", since = \"1.40.0\")]\n     pub fn min_align_of<T>() -> usize;\n+    #[rustc_const_unstable(feature = \"const_pref_align_of\", issue = \"0\")]\n     pub fn pref_align_of<T>() -> usize;\n \n     /// The size of the referenced value in bytes.\n@@ -685,18 +688,21 @@ extern \"rust-intrinsic\" {\n     pub fn min_align_of_val<T: ?Sized>(_: &T) -> usize;\n \n     /// Gets a static string slice containing the name of a type.\n+    #[rustc_const_unstable(feature = \"const_type_name\", issue = \"0\")]\n     pub fn type_name<T: ?Sized>() -> &'static str;\n \n     /// Gets an identifier which is globally unique to the specified type. This\n     /// function will return the same value for a type regardless of whichever\n     /// crate it is invoked in.\n+    #[rustc_const_unstable(feature = \"const_type_id\", issue = \"0\")]\n     pub fn type_id<T: ?Sized + 'static>() -> u64;\n \n     /// A guard for unsafe functions that cannot ever be executed if `T` is uninhabited:\n     /// This will statically either panic, or do nothing.\n     pub fn panic_if_uninhabited<T>();\n \n     /// Gets a reference to a static `Location` indicating where it was called.\n+    #[rustc_const_unstable(feature = \"const_caller_location\", issue = \"47809\")]\n     pub fn caller_location() -> &'static crate::panic::Location<'static>;\n \n     /// Creates a value initialized to zero.\n@@ -951,6 +957,7 @@ extern \"rust-intrinsic\" {\n     ///\n     /// The stabilized version of this intrinsic is\n     /// [`std::mem::needs_drop`](../../std/mem/fn.needs_drop.html).\n+    #[rustc_const_stable(feature = \"const_needs_drop\", since = \"1.40.0\")]\n     pub fn needs_drop<T>() -> bool;\n \n     /// Calculates the offset from a pointer.\n@@ -1150,6 +1157,7 @@ extern \"rust-intrinsic\" {\n \n \n     /// Returns the number of bits set in an integer type `T`\n+    #[rustc_const_stable(feature = \"const_ctpop\", since = \"1.40.0\")]\n     pub fn ctpop<T>(x: T) -> T;\n \n     /// Returns the number of leading unset bits (zeroes) in an integer type `T`.\n@@ -1177,6 +1185,7 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = ctlz(x);\n     /// assert_eq!(num_leading, 16);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_ctlz\", since = \"1.40.0\")]\n     pub fn ctlz<T>(x: T) -> T;\n \n     /// Like `ctlz`, but extra-unsafe as it returns `undef` when\n@@ -1193,6 +1202,7 @@ extern \"rust-intrinsic\" {\n     /// let num_leading = unsafe { ctlz_nonzero(x) };\n     /// assert_eq!(num_leading, 3);\n     /// ```\n+    #[rustc_const_unstable(feature = \"constctlz\", issue = \"0\")]\n     pub fn ctlz_nonzero<T>(x: T) -> T;\n \n     /// Returns the number of trailing unset bits (zeroes) in an integer type `T`.\n@@ -1220,6 +1230,7 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = cttz(x);\n     /// assert_eq!(num_trailing, 16);\n     /// ```\n+    #[rustc_const_stable(feature = \"const_cttz\", since = \"1.40.0\")]\n     pub fn cttz<T>(x: T) -> T;\n \n     /// Like `cttz`, but extra-unsafe as it returns `undef` when\n@@ -1236,30 +1247,36 @@ extern \"rust-intrinsic\" {\n     /// let num_trailing = unsafe { cttz_nonzero(x) };\n     /// assert_eq!(num_trailing, 3);\n     /// ```\n+    #[rustc_const_unstable(feature = \"const_cttz\", issue = \"0\")]\n     pub fn cttz_nonzero<T>(x: T) -> T;\n \n     /// Reverses the bytes in an integer type `T`.\n+    #[rustc_const_stable(feature = \"const_bswap\", since = \"1.40.0\")]\n     pub fn bswap<T>(x: T) -> T;\n \n     /// Reverses the bits in an integer type `T`.\n+    #[rustc_const_stable(feature = \"const_bitreverse\", since = \"1.40.0\")]\n     pub fn bitreverse<T>(x: T) -> T;\n \n     /// Performs checked integer addition.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_add` method. For example,\n     /// [`std::u32::overflowing_add`](../../std/primitive.u32.html#method.overflowing_add)\n+    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn add_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer subtraction\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_sub` method. For example,\n     /// [`std::u32::overflowing_sub`](../../std/primitive.u32.html#method.overflowing_sub)\n+    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn sub_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs checked integer multiplication\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `overflowing_mul` method. For example,\n     /// [`std::u32::overflowing_mul`](../../std/primitive.u32.html#method.overflowing_mul)\n+    #[rustc_const_stable(feature = \"const_int_overflow\", since = \"1.40.0\")]\n     pub fn mul_with_overflow<T>(x: T, y: T) -> (T, bool);\n \n     /// Performs an exact division, resulting in undefined behavior where\n@@ -1275,9 +1292,11 @@ extern \"rust-intrinsic\" {\n \n     /// Performs an unchecked left shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shl<T>(x: T, y: T) -> T;\n     /// Performs an unchecked right shift, resulting in undefined behavior when\n     /// y < 0 or y >= N, where N is the width of T in bits.\n+    #[rustc_const_stable(feature = \"const_int_unchecked\", since = \"1.40.0\")]\n     pub fn unchecked_shr<T>(x: T, y: T) -> T;\n \n     /// Returns the result of an unchecked addition, resulting in\n@@ -1296,39 +1315,46 @@ extern \"rust-intrinsic\" {\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_left` method. For example,\n     /// [`std::u32::rotate_left`](../../std/primitive.u32.html#method.rotate_left)\n+    #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_left<T>(x: T, y: T) -> T;\n \n     /// Performs rotate right.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `rotate_right` method. For example,\n-    /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right)\n+    /// [`std::u32::rotate_right`](../../std/primitive.u32.html#method.rotate_right\n+    #[rustc_const_stable(feature = \"const_int_rotate\", since = \"1.40.0\")]\n     pub fn rotate_right<T>(x: T, y: T) -> T;\n \n     /// Returns (a + b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_add` method. For example,\n     /// [`std::u32::wrapping_add`](../../std/primitive.u32.html#method.wrapping_add)\n+    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_add<T>(a: T, b: T) -> T;\n     /// Returns (a - b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_sub` method. For example,\n     /// [`std::u32::wrapping_sub`](../../std/primitive.u32.html#method.wrapping_sub)\n+    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_sub<T>(a: T, b: T) -> T;\n     /// Returns (a * b) mod 2<sup>N</sup>, where N is the width of T in bits.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `wrapping_mul` method. For example,\n     /// [`std::u32::wrapping_mul`](../../std/primitive.u32.html#method.wrapping_mul)\n+    #[rustc_const_stable(feature = \"const_int_wrapping\", since = \"1.40.0\")]\n     pub fn wrapping_mul<T>(a: T, b: T) -> T;\n \n     /// Computes `a + b`, while saturating at numeric bounds.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_add` method. For example,\n     /// [`std::u32::saturating_add`](../../std/primitive.u32.html#method.saturating_add)\n+    #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_add<T>(a: T, b: T) -> T;\n     /// Computes `a - b`, while saturating at numeric bounds.\n     /// The stabilized versions of this intrinsic are available on the integer\n     /// primitives via the `saturating_sub` method. For example,\n     /// [`std::u32::saturating_sub`](../../std/primitive.u32.html#method.saturating_sub)\n+    #[rustc_const_stable(feature = \"const_int_saturating\", since = \"1.40.0\")]\n     pub fn saturating_sub<T>(a: T, b: T) -> T;\n \n     /// Returns the value of the discriminant for the variant in 'v',\n@@ -1350,6 +1376,7 @@ extern \"rust-intrinsic\" {\n     pub fn nontemporal_store<T>(ptr: *mut T, val: T);\n \n     /// See documentation of `<*const T>::offset_from` for details.\n+    #[rustc_const_unstable(feature = \"const_ptr_offset_from\", issue = \"0\")]\n     pub fn ptr_offset_from<T>(ptr: *const T, base: *const T) -> isize;\n \n     /// Internal hook used by Miri to implement unwinding."}, {"sha": "74dc56c156aeaa0e61434c86e6eed47684e8dd01", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -128,6 +128,8 @@\n #![feature(maybe_uninit_slice)]\n #![feature(external_doc)]\n #![feature(associated_type_bounds)]\n+#![feature(const_type_id)]\n+#![feature(const_caller_location)]\n \n #[prelude_import]\n #[allow(unused)]"}, {"sha": "b1475f2ad9fc464c4227f78d6a6ae1e1cfc9d5cd", "filename": "src/libcore/macros/mod.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Fmacros%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibcore%2Fmacros%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fmacros%2Fmod.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -5,6 +5,7 @@\n     // the `caller_location` intrinsic, but once  `#[track_caller]` is implemented,\n     // `panicking::{panic, panic_fmt}` can use that instead of a `Location` argument.\n     core_intrinsics,\n+    const_caller_location,\n )]\n #[stable(feature = \"core\", since = \"1.6.0\")]\n macro_rules! panic {"}, {"sha": "7fe950ef7b7f6050268fcf4bd69a92e836f26070", "filename": "src/librustc/ty/constness.rs", "status": "modified", "additions": 2, "deletions": 96, "changes": 98, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibrustc%2Fty%2Fconstness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Flibrustc%2Fty%2Fconstness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fconstness.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -2,7 +2,7 @@ use crate::ty::query::Providers;\n use crate::hir::def_id::DefId;\n use crate::hir;\n use crate::ty::TyCtxt;\n-use syntax_pos::symbol::{sym, Symbol};\n+use syntax_pos::symbol::Symbol;\n use rustc_target::spec::abi::Abi;\n use crate::hir::map::blocks::FnLikeNode;\n use syntax::attr;\n@@ -41,51 +41,12 @@ impl<'tcx> TyCtxt<'tcx> {\n         }\n     }\n \n-    /// Returns `true` if the `def_id` refers to an intrisic which we've whitelisted\n-    /// for being called from stable `const fn`s (`min_const_fn`).\n-    ///\n-    /// Adding more intrinsics requires sign-off from @rust-lang/lang.\n-    ///\n-    /// This list differs from the list in `is_const_intrinsic` in the sense that any item on this\n-    /// list must be on the `is_const_intrinsic` list, too, because if an intrinsic is callable from\n-    /// stable, it must be callable at all.\n-    fn is_intrinsic_min_const_fn(self, def_id: DefId) -> bool {\n-        match self.item_name(def_id) {\n-            | sym::size_of\n-            | sym::min_align_of\n-            | sym::needs_drop\n-            // Arithmetic:\n-            | sym::add_with_overflow // ~> .overflowing_add\n-            | sym::sub_with_overflow // ~> .overflowing_sub\n-            | sym::mul_with_overflow // ~> .overflowing_mul\n-            | sym::wrapping_add // ~> .wrapping_add\n-            | sym::wrapping_sub // ~> .wrapping_sub\n-            | sym::wrapping_mul // ~> .wrapping_mul\n-            | sym::saturating_add // ~> .saturating_add\n-            | sym::saturating_sub // ~> .saturating_sub\n-            | sym::unchecked_shl // ~> .wrapping_shl\n-            | sym::unchecked_shr // ~> .wrapping_shr\n-            | sym::rotate_left // ~> .rotate_left\n-            | sym::rotate_right // ~> .rotate_right\n-            | sym::ctpop // ~> .count_ones\n-            | sym::ctlz // ~> .leading_zeros\n-            | sym::cttz // ~> .trailing_zeros\n-            | sym::bswap // ~> .swap_bytes\n-            | sym::bitreverse // ~> .reverse_bits\n-            => true,\n-            _ => false,\n-        }\n-    }\n-\n     /// Returns `true` if this function must conform to `min_const_fn`\n     pub fn is_min_const_fn(self, def_id: DefId) -> bool {\n         // Bail out if the signature doesn't contain `const`\n         if !self.is_const_fn_raw(def_id) {\n             return false;\n         }\n-        if let Abi::RustIntrinsic = self.fn_sig(def_id).abi() {\n-            return self.is_intrinsic_min_const_fn(def_id);\n-        }\n \n         if self.features().staged_api {\n             // In order for a libstd function to be considered min_const_fn\n@@ -134,62 +95,7 @@ pub fn provide(providers: &mut Providers<'_>) {\n     fn is_const_intrinsic(tcx: TyCtxt<'_>, def_id: DefId) -> Option<bool> {\n         match tcx.fn_sig(def_id).abi() {\n             Abi::RustIntrinsic |\n-            Abi::PlatformIntrinsic => {\n-                // FIXME: deduplicate these two lists as much as possible\n-                match tcx.item_name(def_id) {\n-                    // Keep this list in the same order as the match patterns in\n-                    // `librustc_mir/interpret/intrinsics.rs`\n-\n-                    // This whitelist is a list of intrinsics that have a miri-engine implementation\n-                    // and can thus be called when enabling enough feature gates. The similar\n-                    // whitelist in `is_intrinsic_min_const_fn` (in this file), exists for allowing\n-                    // the intrinsics to be called by stable const fns.\n-                    | sym::caller_location\n-\n-                    | sym::min_align_of\n-                    | sym::pref_align_of\n-                    | sym::needs_drop\n-                    | sym::size_of\n-                    | sym::type_id\n-                    | sym::type_name\n-\n-                    | sym::ctpop\n-                    | sym::cttz\n-                    | sym::cttz_nonzero\n-                    | sym::ctlz\n-                    | sym::ctlz_nonzero\n-                    | sym::bswap\n-                    | sym::bitreverse\n-\n-                    | sym::wrapping_add\n-                    | sym::wrapping_sub\n-                    | sym::wrapping_mul\n-                    | sym::add_with_overflow\n-                    | sym::sub_with_overflow\n-                    | sym::mul_with_overflow\n-\n-                    | sym::saturating_add\n-                    | sym::saturating_sub\n-\n-                    | sym::unchecked_shl\n-                    | sym::unchecked_shr\n-\n-                    | sym::rotate_left\n-                    | sym::rotate_right\n-\n-                    | sym::ptr_offset_from\n-\n-                    | sym::transmute\n-\n-                    | sym::simd_insert\n-\n-                    | sym::simd_extract\n-\n-                    => Some(true),\n-\n-                    _ => Some(false)\n-                }\n-            }\n+            Abi::PlatformIntrinsic => Some(tcx.lookup_const_stability(def_id).is_some()),\n             _ => None\n         }\n     }"}, {"sha": "92231d4ced321ea9f87d0ff529ed9deedbca36b2", "filename": "src/test/ui/consts/const-eval/simd/insert_extract.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-eval%2Fsimd%2Finsert_extract.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -2,14 +2,18 @@\n #![feature(const_fn)]\n #![feature(repr_simd)]\n #![feature(platform_intrinsics)]\n+#![feature(staged_api)]\n+#![stable(feature = \"foo\", since = \"1.33.7\")]\n #![allow(non_camel_case_types)]\n \n #[repr(simd)] struct i8x1(i8);\n #[repr(simd)] struct u16x2(u16, u16);\n #[repr(simd)] struct f32x3(f32, f32, f32);\n \n extern \"platform-intrinsic\" {\n+    #[rustc_const_stable(feature = \"foo\", since = \"1.3.37\")]\n     fn simd_insert<T, U>(x: T, idx: u32, val: U) -> T;\n+    #[rustc_const_stable(feature = \"foo\", since = \"1.3.37\")]\n     fn simd_extract<T, U>(x: T, idx: u32) -> U;\n }\n "}, {"sha": "72fac19c191739171f29d3e6fcd5c4380d8086d6", "filename": "src/test/ui/consts/const-fn-type-name.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9ee16e14c51668309f446636e8960b7fbbac066d/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-fn-type-name.rs?ref=9ee16e14c51668309f446636e8960b7fbbac066d", "patch": "@@ -2,6 +2,7 @@\n \n #![feature(core_intrinsics)]\n #![feature(const_fn)]\n+#![feature(const_type_name)]\n #![allow(dead_code)]\n \n const fn type_name_wrapper<T>(_: &T) -> &'static str {"}]}