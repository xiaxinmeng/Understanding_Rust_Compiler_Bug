{"sha": "7c1a318c7b801e7020918b238428f484f0f13aa7", "node_id": "C_kwDOAAsO6NoAKDdjMWEzMThjN2I4MDFlNzAyMDkxOGIyMzg0MjhmNDg0ZjBmMTNhYTc", "commit": {"author": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-01T20:15:04Z"}, "committer": {"name": "Nicholas Nethercote", "email": "n.nethercote@gmail.com", "date": "2022-03-06T21:25:50Z"}, "message": "Introduce `ConstAllocation`.\n\nCurrently some `Allocation`s are interned, some are not, and it's very\nhard to tell at a use point which is which.\n\nThis commit introduces `ConstAllocation` for the known-interned ones,\nwhich makes the division much clearer. `ConstAllocation::inner()` is\nused to get the underlying `Allocation`.\n\nIn some places it's natural to use an `Allocation`, in some it's natural\nto use a `ConstAllocation`, and in some places there's no clear choice.\nI've tried to make things look as nice as possible, while generally\nfavouring `ConstAllocation`, which is the type that embodies more\ninformation. This does require quite a few calls to `inner()`.\n\nThe commit also tweaks how `PartialOrd` works for `Interned`. The\nprevious code was too clever by half, building on `T: Ord` to make the\ncode shorter. That caused problems with deriving `PartialOrd` and `Ord`\nfor `ConstAllocation`, so I changed it to build on `T: PartialOrd`,\nwhich is slightly more verbose but much more standard and avoided the\nproblems.", "tree": {"sha": "9210553407b1213710f8236a7448e503dbf8bf5a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/9210553407b1213710f8236a7448e503dbf8bf5a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/7c1a318c7b801e7020918b238428f484f0f13aa7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/7c1a318c7b801e7020918b238428f484f0f13aa7", "html_url": "https://github.com/rust-lang/rust/commit/7c1a318c7b801e7020918b238428f484f0f13aa7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/7c1a318c7b801e7020918b238428f484f0f13aa7/comments", "author": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nnethercote", "id": 1940286, "node_id": "MDQ6VXNlcjE5NDAyODY=", "avatar_url": "https://avatars.githubusercontent.com/u/1940286?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nnethercote", "html_url": "https://github.com/nnethercote", "followers_url": "https://api.github.com/users/nnethercote/followers", "following_url": "https://api.github.com/users/nnethercote/following{/other_user}", "gists_url": "https://api.github.com/users/nnethercote/gists{/gist_id}", "starred_url": "https://api.github.com/users/nnethercote/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nnethercote/subscriptions", "organizations_url": "https://api.github.com/users/nnethercote/orgs", "repos_url": "https://api.github.com/users/nnethercote/repos", "events_url": "https://api.github.com/users/nnethercote/events{/privacy}", "received_events_url": "https://api.github.com/users/nnethercote/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "346108202d8fb663343c1d48740b0763aef5ca66", "url": "https://api.github.com/repos/rust-lang/rust/commits/346108202d8fb663343c1d48740b0763aef5ca66", "html_url": "https://github.com/rust-lang/rust/commit/346108202d8fb663343c1d48740b0763aef5ca66"}], "stats": {"total": 21, "additions": 13, "deletions": 8}, "files": [{"sha": "aff3603303a98ff8f90120303d3804bbac681487", "filename": "src/constant.rs", "status": "modified", "additions": 12, "deletions": 7, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/7c1a318c7b801e7020918b238428f484f0f13aa7/src%2Fconstant.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1a318c7b801e7020918b238428f484f0f13aa7/src%2Fconstant.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fconstant.rs?ref=7c1a318c7b801e7020918b238428f484f0f13aa7", "patch": "@@ -4,7 +4,7 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::ErrorGuaranteed;\n use rustc_middle::middle::codegen_fn_attrs::CodegenFnAttrFlags;\n use rustc_middle::mir::interpret::{\n-    read_target_uint, AllocId, Allocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n+    read_target_uint, AllocId, ConstAllocation, ConstValue, ErrorHandled, GlobalAlloc, Scalar,\n };\n use rustc_middle::ty::ConstKind;\n use rustc_span::DUMMY_SP;\n@@ -202,7 +202,7 @@ pub(crate) fn codegen_const_value<'tcx>(\n                             &mut fx.constants_cx,\n                             fx.module,\n                             alloc_id,\n-                            alloc.mutability,\n+                            alloc.inner().mutability,\n                         );\n                         let local_data_id =\n                             fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n@@ -257,11 +257,15 @@ pub(crate) fn codegen_const_value<'tcx>(\n \n pub(crate) fn pointer_for_allocation<'tcx>(\n     fx: &mut FunctionCx<'_, '_, 'tcx>,\n-    alloc: &'tcx Allocation,\n+    alloc: ConstAllocation<'tcx>,\n ) -> crate::pointer::Pointer {\n     let alloc_id = fx.tcx.create_memory_alloc(alloc);\n-    let data_id =\n-        data_id_for_alloc_id(&mut fx.constants_cx, &mut *fx.module, alloc_id, alloc.mutability);\n+    let data_id = data_id_for_alloc_id(\n+        &mut fx.constants_cx,\n+        &mut *fx.module,\n+        alloc_id,\n+        alloc.inner().mutability,\n+    );\n \n     let local_data_id = fx.module.declare_data_in_func(data_id, &mut fx.bcx.func);\n     if fx.clif_comments.enabled() {\n@@ -361,7 +365,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                 let data_id = *cx.anon_allocs.entry(alloc_id).or_insert_with(|| {\n                     module\n                         .declare_anonymous_data(\n-                            alloc.mutability == rustc_hir::Mutability::Mut,\n+                            alloc.inner().mutability == rustc_hir::Mutability::Mut,\n                             false,\n                         )\n                         .unwrap()\n@@ -386,6 +390,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n         }\n \n         let mut data_ctx = DataContext::new();\n+        let alloc = alloc.inner();\n         data_ctx.set_align(alloc.align.bytes());\n \n         if let Some(section_name) = section_name {\n@@ -429,7 +434,7 @@ fn define_all_allocs(tcx: TyCtxt<'_>, module: &mut dyn Module, cx: &mut Constant\n                     continue;\n                 }\n                 GlobalAlloc::Memory(target_alloc) => {\n-                    data_id_for_alloc_id(cx, module, alloc_id, target_alloc.mutability)\n+                    data_id_for_alloc_id(cx, module, alloc_id, target_alloc.inner().mutability)\n                 }\n                 GlobalAlloc::Static(def_id) => {\n                     if tcx.codegen_fn_attrs(def_id).flags.contains(CodegenFnAttrFlags::THREAD_LOCAL)"}, {"sha": "49022ebd3e26fd19dfd4ec31b914b123ce1303fb", "filename": "src/intrinsics/simd.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/7c1a318c7b801e7020918b238428f484f0f13aa7/src%2Fintrinsics%2Fsimd.rs", "raw_url": "https://github.com/rust-lang/rust/raw/7c1a318c7b801e7020918b238428f484f0f13aa7/src%2Fintrinsics%2Fsimd.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fintrinsics%2Fsimd.rs?ref=7c1a318c7b801e7020918b238428f484f0f13aa7", "patch": "@@ -159,7 +159,7 @@ pub(super) fn codegen_simd_intrinsic_call<'tcx>(\n                 let idx_bytes = match idx_const {\n                     ConstValue::ByRef { alloc, offset } => {\n                         let size = Size::from_bytes(4 * ret_lane_count /* size_of([u32; ret_lane_count]) */);\n-                        alloc.get_bytes(fx, alloc_range(offset, size)).unwrap()\n+                        alloc.inner().get_bytes(fx, alloc_range(offset, size)).unwrap()\n                     }\n                     _ => unreachable!(\"{:?}\", idx_const),\n                 };"}]}