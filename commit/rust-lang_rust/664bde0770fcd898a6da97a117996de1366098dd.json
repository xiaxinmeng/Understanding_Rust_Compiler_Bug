{"sha": "664bde0770fcd898a6da97a117996de1366098dd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjY2NGJkZTA3NzBmY2Q4OThhNmRhOTdhMTE3OTk2ZGUxMzY2MDk4ZGQ=", "commit": {"author": {"name": "S\u00f6ren Meier", "email": "soeren@s-me.ch", "date": "2021-06-17T00:14:53Z"}, "committer": {"name": "S\u00f6ren Meier", "email": "soeren@s-me.ch", "date": "2021-06-17T00:14:53Z"}, "message": "rename `remaining` to `remaining_slice` and add a new `remaining`", "tree": {"sha": "3b8b2bfaea43e95eadf34261a619cc906d791e2b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3b8b2bfaea43e95eadf34261a619cc906d791e2b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/664bde0770fcd898a6da97a117996de1366098dd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/664bde0770fcd898a6da97a117996de1366098dd", "html_url": "https://github.com/rust-lang/rust/commit/664bde0770fcd898a6da97a117996de1366098dd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/664bde0770fcd898a6da97a117996de1366098dd/comments", "author": {"login": "soerenmeier", "id": 16178877, "node_id": "MDQ6VXNlcjE2MTc4ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/16178877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soerenmeier", "html_url": "https://github.com/soerenmeier", "followers_url": "https://api.github.com/users/soerenmeier/followers", "following_url": "https://api.github.com/users/soerenmeier/following{/other_user}", "gists_url": "https://api.github.com/users/soerenmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/soerenmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soerenmeier/subscriptions", "organizations_url": "https://api.github.com/users/soerenmeier/orgs", "repos_url": "https://api.github.com/users/soerenmeier/repos", "events_url": "https://api.github.com/users/soerenmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/soerenmeier/received_events", "type": "User", "site_admin": false}, "committer": {"login": "soerenmeier", "id": 16178877, "node_id": "MDQ6VXNlcjE2MTc4ODc3", "avatar_url": "https://avatars.githubusercontent.com/u/16178877?v=4", "gravatar_id": "", "url": "https://api.github.com/users/soerenmeier", "html_url": "https://github.com/soerenmeier", "followers_url": "https://api.github.com/users/soerenmeier/followers", "following_url": "https://api.github.com/users/soerenmeier/following{/other_user}", "gists_url": "https://api.github.com/users/soerenmeier/gists{/gist_id}", "starred_url": "https://api.github.com/users/soerenmeier/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/soerenmeier/subscriptions", "organizations_url": "https://api.github.com/users/soerenmeier/orgs", "repos_url": "https://api.github.com/users/soerenmeier/repos", "events_url": "https://api.github.com/users/soerenmeier/events{/privacy}", "received_events_url": "https://api.github.com/users/soerenmeier/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "212e91a3568b3f65fb504ce23ffe31d8d00bbb90", "url": "https://api.github.com/repos/rust-lang/rust/commits/212e91a3568b3f65fb504ce23ffe31d8d00bbb90", "html_url": "https://github.com/rust-lang/rust/commit/212e91a3568b3f65fb504ce23ffe31d8d00bbb90"}], "stats": {"total": 42, "additions": 34, "deletions": 8}, "files": [{"sha": "04f13cdeb88e353f629c282ddf8bc904bf3d684b", "filename": "library/std/src/io/cursor.rs", "status": "modified", "additions": 34, "deletions": 8, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/664bde0770fcd898a6da97a117996de1366098dd/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "raw_url": "https://github.com/rust-lang/rust/raw/664bde0770fcd898a6da97a117996de1366098dd/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fcursor.rs?ref=664bde0770fcd898a6da97a117996de1366098dd", "patch": "@@ -209,6 +209,32 @@ impl<T> Cursor<T>\n where\n     T: AsRef<[u8]>,\n {\n+    /// Returns the remaining length.\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(cursor_remaining)]\n+    /// use std::io::Cursor;\n+    ///\n+    /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n+    ///\n+    /// assert_eq!(buff.remaining(), 5);\n+    ///\n+    /// buff.set_position(2);\n+    /// assert_eq!(buff.remaining(), 3);\n+    ///\n+    /// buff.set_position(4);\n+    /// assert_eq!(buff.remaining(), 1);\n+    ///\n+    /// buff.set_position(6);\n+    /// assert_eq!(buff.remaining(), 0);\n+    /// ```\n+    #[unstable(feature = \"cursor_remaining\", issue = \"86369\")]\n+    pub fn remaining(&self) -> u64 {\n+        (self.inner.as_ref().len() as u64).checked_sub(self.pos).unwrap_or(0)\n+    }\n+\n     /// Returns the remaining slice.\n     ///\n     /// # Examples\n@@ -219,19 +245,19 @@ where\n     ///\n     /// let mut buff = Cursor::new(vec![1, 2, 3, 4, 5]);\n     ///\n-    /// assert_eq!(buff.remaining(), &[1, 2, 3, 4, 5]);\n+    /// assert_eq!(buff.remaining_slice(), &[1, 2, 3, 4, 5]);\n     ///\n     /// buff.set_position(2);\n-    /// assert_eq!(buff.remaining(), &[3, 4, 5]);\n+    /// assert_eq!(buff.remaining_slice(), &[3, 4, 5]);\n     ///\n     /// buff.set_position(4);\n-    /// assert_eq!(buff.remaining(), &[5]);\n+    /// assert_eq!(buff.remaining_slice(), &[5]);\n     ///\n     /// buff.set_position(6);\n-    /// assert_eq!(buff.remaining(), &[]);\n+    /// assert_eq!(buff.remaining_slice(), &[]);\n     /// ```\n     #[unstable(feature = \"cursor_remaining\", issue = \"86369\")]\n-    pub fn remaining(&self) -> &[u8] {\n+    pub fn remaining_slice(&self) -> &[u8] {\n         let len = self.pos.min(self.inner.as_ref().len() as u64);\n         &self.inner.as_ref()[(len as usize)..]\n     }\n@@ -324,7 +350,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {\n-        let n = Read::read(&mut self.remaining(), buf)?;\n+        let n = Read::read(&mut self.remaining_slice(), buf)?;\n         self.pos += n as u64;\n         Ok(n)\n     }\n@@ -347,7 +373,7 @@ where\n \n     fn read_exact(&mut self, buf: &mut [u8]) -> io::Result<()> {\n         let n = buf.len();\n-        Read::read_exact(&mut self.remaining(), buf)?;\n+        Read::read_exact(&mut self.remaining_slice(), buf)?;\n         self.pos += n as u64;\n         Ok(())\n     }\n@@ -364,7 +390,7 @@ where\n     T: AsRef<[u8]>,\n {\n     fn fill_buf(&mut self) -> io::Result<&[u8]> {\n-        Ok(self.remaining())\n+        Ok(self.remaining_slice())\n     }\n     fn consume(&mut self, amt: usize) {\n         self.pos += amt as u64;"}]}