{"sha": "f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY0ZWYwN2MyYTlhZGY2ZGY1NzE3YzZkNjY0ZmFkMGI4ZmVhN2ExYmQ=", "commit": {"author": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-05T17:02:41Z"}, "committer": {"name": "Cameron Steffen", "email": "cam.steffen94@gmail.com", "date": "2021-08-16T16:28:16Z"}, "message": "Get piece unchecked in write", "tree": {"sha": "c21e61a3c9253dfca73eaea68429fe7fbdf3940d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c21e61a3c9253dfca73eaea68429fe7fbdf3940d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd", "html_url": "https://github.com/rust-lang/rust/commit/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd/comments", "author": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "committer": {"login": "camsteffen", "id": 5565418, "node_id": "MDQ6VXNlcjU1NjU0MTg=", "avatar_url": "https://avatars.githubusercontent.com/u/5565418?v=4", "gravatar_id": "", "url": "https://api.github.com/users/camsteffen", "html_url": "https://github.com/camsteffen", "followers_url": "https://api.github.com/users/camsteffen/followers", "following_url": "https://api.github.com/users/camsteffen/following{/other_user}", "gists_url": "https://api.github.com/users/camsteffen/gists{/gist_id}", "starred_url": "https://api.github.com/users/camsteffen/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/camsteffen/subscriptions", "organizations_url": "https://api.github.com/users/camsteffen/orgs", "repos_url": "https://api.github.com/users/camsteffen/repos", "events_url": "https://api.github.com/users/camsteffen/events{/privacy}", "received_events_url": "https://api.github.com/users/camsteffen/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "975bc18481879b69603674266a5239ecb579f928", "url": "https://api.github.com/repos/rust-lang/rust/commits/975bc18481879b69603674266a5239ecb579f928", "html_url": "https://github.com/rust-lang/rust/commit/975bc18481879b69603674266a5239ecb579f928"}], "stats": {"total": 11, "additions": 8, "deletions": 3}, "files": [{"sha": "1d75ac3d254bd641ff9d4783b3de73219920de38", "filename": "library/core/src/fmt/mod.rs", "status": "modified", "additions": 8, "deletions": 3, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fcore%2Fsrc%2Ffmt%2Fmod.rs?ref=f4ef07c2a9adf6df5717c6d664fad0b8fea7a1bd", "patch": "@@ -4,7 +4,6 @@\n \n use crate::cell::{Cell, Ref, RefCell, RefMut, UnsafeCell};\n use crate::char::EscapeDebugExtArgs;\n-use crate::iter;\n use crate::marker::PhantomData;\n use crate::mem;\n use crate::num::fmt as numfmt;\n@@ -1141,7 +1140,10 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n     match args.fmt {\n         None => {\n             // We can use default formatting parameters for all arguments.\n-            for (arg, piece) in iter::zip(args.args, args.pieces) {\n+            for (i, arg) in args.args.iter().enumerate() {\n+                // SAFETY: args.args and args.pieces come from the same Arguments,\n+                // which guarantees the indexes are always within bounds.\n+                let piece = unsafe { args.pieces.get_unchecked(i) };\n                 if !piece.is_empty() {\n                     formatter.buf.write_str(*piece)?;\n                 }\n@@ -1152,7 +1154,10 @@ pub fn write(output: &mut dyn Write, args: Arguments<'_>) -> Result {\n         Some(fmt) => {\n             // Every spec has a corresponding argument that is preceded by\n             // a string piece.\n-            for (arg, piece) in iter::zip(fmt, args.pieces) {\n+            for (i, arg) in fmt.iter().enumerate() {\n+                // SAFETY: fmt and args.pieces come from the same Arguments,\n+                // which guarantees the indexes are always within bounds.\n+                let piece = unsafe { args.pieces.get_unchecked(i) };\n                 if !piece.is_empty() {\n                     formatter.buf.write_str(*piece)?;\n                 }"}]}