{"sha": "9b2d9a9539d77695e915ebed189575d1249e7064", "node_id": "MDY6Q29tbWl0NzI0NzEyOjliMmQ5YTk1MzlkNzc2OTVlOTE1ZWJlZDE4OTU3NWQxMjQ5ZTcwNjQ=", "commit": {"author": {"name": "reus", "email": "reusee@ymail.com", "date": "2013-06-22T09:49:32Z"}, "committer": {"name": "reus", "email": "reusee@ymail.com", "date": "2013-06-22T09:49:32Z"}, "message": "replaced some 'std::' with 'extra::' in comments", "tree": {"sha": "f3cd5df9d067b8c9d62ceb95b6452f185a79dd8f", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f3cd5df9d067b8c9d62ceb95b6452f185a79dd8f"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9b2d9a9539d77695e915ebed189575d1249e7064", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9b2d9a9539d77695e915ebed189575d1249e7064", "html_url": "https://github.com/rust-lang/rust/commit/9b2d9a9539d77695e915ebed189575d1249e7064", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9b2d9a9539d77695e915ebed189575d1249e7064/comments", "author": null, "committer": null, "parents": [{"sha": "dc4560dc26498573516d833cb2333b54071070e3", "url": "https://api.github.com/repos/rust-lang/rust/commits/dc4560dc26498573516d833cb2333b54071070e3", "html_url": "https://github.com/rust-lang/rust/commit/dc4560dc26498573516d833cb2333b54071070e3"}], "stats": {"total": 32, "additions": 16, "deletions": 16}, "files": [{"sha": "7746e0f06a658681f169b583db4dbe824e76284f", "filename": "src/libextra/arc.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Farc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Farc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Farc.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -19,7 +19,7 @@\n  *\n  * ~~~ {.rust}\n  * extern mod std;\n- * use std::arc;\n+ * use extra::arc;\n  * let numbers=vec::from_fn(100, |ind| (ind as float)*rand::random());\n  * let shared_numbers=arc::ARC(numbers);\n  *"}, {"sha": "392e7ff29a22624e3d64e00fc4b8ada2624b98b2", "filename": "src/libextra/base64.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Fbase64.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Fbase64.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fbase64.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -36,8 +36,8 @@ impl<'self> ToBase64 for &'self [u8] {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64();\n@@ -99,8 +99,8 @@ impl<'self> ToBase64 for &'self str {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n      *\n      * fn main () {\n      *     let str = \"Hello, World\".to_base64();\n@@ -127,9 +127,9 @@ impl<'self> FromBase64 for &'self [u8] {\n      * # Example\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n-     * use std::base64::FromBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n+     * use extra::base64::FromBase64;\n      *\n      * fn main () {\n      *     let str = [52,32].to_base64();\n@@ -207,9 +207,9 @@ impl<'self> FromBase64 for &'self str {\n      * This converts a string literal to base64 and back.\n      *\n      * ~~~ {.rust}\n-     * extern mod std;\n-     * use std::base64::ToBase64;\n-     * use std::base64::FromBase64;\n+     * extern mod extra;\n+     * use extra::base64::ToBase64;\n+     * use extra::base64::FromBase64;\n      * use core::str;\n      *\n      * fn main () {"}, {"sha": "030e63adca967d007e9050f36d9257724d697763", "filename": "src/libextra/future.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Ffuture.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Ffuture.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Ffuture.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -17,7 +17,7 @@\n  * ~~~ {.rust}\n  * # fn fib(n: uint) -> uint {42};\n  * # fn make_a_sandwich() {};\n- * let mut delayed_fib = std::future::spawn (|| fib(5000) );\n+ * let mut delayed_fib = extra::future::spawn (|| fib(5000) );\n  * make_a_sandwich();\n  * println(fmt!(\"fib(5000) = %?\", delayed_fib.get()))\n  * ~~~"}, {"sha": "718da87af250e130971aff130455c30150b8f23c", "filename": "src/libextra/net_ip.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Fnet_ip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibextra%2Fnet_ip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibextra%2Fnet_ip.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -55,7 +55,7 @@ pub struct ParseAddrErr {\n  *\n  * # Arguments\n  *\n- * * ip - a `std::net::ip::IpAddr`\n+ * * ip - a `extra::net::ip::IpAddr`\n  */\n pub fn format_addr(ip: &IpAddr) -> ~str {\n     match *ip {\n@@ -80,7 +80,7 @@ pub fn format_addr(ip: &IpAddr) -> ~str {\n  * Get the associated port\n  *\n  * # Arguments\n- * * ip - a `std::net::ip::IpAddr`\n+ * * ip - a `extra::net::ip::IpAddr`\n  */\n pub fn get_port(ip: &IpAddr) -> uint {\n     match *ip {"}, {"sha": "dff72e844bf904f3ec24b3ca0de6610c19f344b2", "filename": "src/libstd/os.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibstd%2Fos.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibstd%2Fos.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -1716,5 +1716,5 @@ mod tests {\n         assert!(!os::mkdir_recursive(&path, (S_IRUSR | S_IWUSR | S_IXUSR) as i32));\n     }\n \n-    // More recursive_mkdir tests are in std::tempfile\n+    // More recursive_mkdir tests are in extra::tempfile\n }"}, {"sha": "33380c9e150625384e51a754ce98ccd9fe33be18", "filename": "src/libstd/str.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibstd%2Fstr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9b2d9a9539d77695e915ebed189575d1249e7064/src%2Flibstd%2Fstr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fstr.rs?ref=9b2d9a9539d77695e915ebed189575d1249e7064", "patch": "@@ -14,7 +14,7 @@\n  * Strings are a packed UTF-8 representation of text, stored as null\n  * terminated buffers of u8 bytes.  Strings should be indexed in bytes,\n  * for efficiency, but UTF-8 unsafe operations should be avoided.  For\n- * some heavy-duty uses, try std::rope.\n+ * some heavy-duty uses, try extra::rope.\n  */\n \n use at_vec;"}]}