{"sha": "8a9ced1551a8f44798989f99f32ed1657c70bfce", "node_id": "MDY6Q29tbWl0NzI0NzEyOjhhOWNlZDE1NTFhOGY0NDc5ODk4OWY5OWYzMmVkMTY1N2M3MGJmY2U=", "commit": {"author": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-11-01T06:31:16Z"}, "committer": {"name": "Brian Koropoff", "email": "bkoropoff@gmail.com", "date": "2014-11-01T06:31:16Z"}, "message": "Fix trans of index overload expressions with DST result types\n\nCloses #18487", "tree": {"sha": "34db03f331c099476751271b4041bc038ea76d03", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/34db03f331c099476751271b4041bc038ea76d03"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/8a9ced1551a8f44798989f99f32ed1657c70bfce", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/8a9ced1551a8f44798989f99f32ed1657c70bfce", "html_url": "https://github.com/rust-lang/rust/commit/8a9ced1551a8f44798989f99f32ed1657c70bfce", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/8a9ced1551a8f44798989f99f32ed1657c70bfce/comments", "author": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bkoropoff", "id": 2101303, "node_id": "MDQ6VXNlcjIxMDEzMDM=", "avatar_url": "https://avatars.githubusercontent.com/u/2101303?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bkoropoff", "html_url": "https://github.com/bkoropoff", "followers_url": "https://api.github.com/users/bkoropoff/followers", "following_url": "https://api.github.com/users/bkoropoff/following{/other_user}", "gists_url": "https://api.github.com/users/bkoropoff/gists{/gist_id}", "starred_url": "https://api.github.com/users/bkoropoff/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bkoropoff/subscriptions", "organizations_url": "https://api.github.com/users/bkoropoff/orgs", "repos_url": "https://api.github.com/users/bkoropoff/repos", "events_url": "https://api.github.com/users/bkoropoff/events{/privacy}", "received_events_url": "https://api.github.com/users/bkoropoff/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5e834243b6837a2386d623e1d546a3d25057b8f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/5e834243b6837a2386d623e1d546a3d25057b8f5", "html_url": "https://github.com/rust-lang/rust/commit/5e834243b6837a2386d623e1d546a3d25057b8f5"}], "stats": {"total": 32, "additions": 19, "deletions": 13}, "files": [{"sha": "37e9a10d670f188d15fe45935c1c8284f6457438", "filename": "src/librustc/middle/trans/expr.rs", "status": "modified", "additions": 19, "deletions": 13, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/8a9ced1551a8f44798989f99f32ed1657c70bfce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/8a9ced1551a8f44798989f99f32ed1657c70bfce/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Ftrans%2Fexpr.rs?ref=8a9ced1551a8f44798989f99f32ed1657c70bfce", "patch": "@@ -745,18 +745,6 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n             // Translate index expression.\n             let ix_datum = unpack_datum!(bcx, trans(bcx, idx));\n \n-            // Overloaded. Evaluate `trans_overloaded_op`, which will\n-            // invoke the user's index() method, which basically yields\n-            // a `&T` pointer.  We can then proceed down the normal\n-            // path (below) to dereference that `&T`.\n-            let val =\n-                unpack_result!(bcx,\n-                               trans_overloaded_op(bcx,\n-                                                   index_expr,\n-                                                   method_call,\n-                                                   base_datum,\n-                                                   vec![(ix_datum, idx.id)],\n-                                                   None));\n             let ref_ty = ty::ty_fn_ret(monomorphize_type(bcx, method_ty)).unwrap();\n             let elt_ty = match ty::deref(ref_ty, true) {\n                 None => {\n@@ -766,7 +754,25 @@ fn trans_index<'blk, 'tcx>(bcx: Block<'blk, 'tcx>,\n                 }\n                 Some(elt_tm) => elt_tm.ty,\n             };\n-            Datum::new(val, elt_ty, LvalueExpr)\n+\n+            // Overloaded. Evaluate `trans_overloaded_op`, which will\n+            // invoke the user's index() method, which basically yields\n+            // a `&T` pointer.  We can then proceed down the normal\n+            // path (below) to dereference that `&T`.\n+            let scratch = rvalue_scratch_datum(bcx, ref_ty, \"overloaded_index_elt\");\n+            unpack_result!(bcx,\n+                           trans_overloaded_op(bcx,\n+                                               index_expr,\n+                                               method_call,\n+                                               base_datum,\n+                                               vec![(ix_datum, idx.id)],\n+                                               Some(SaveIn(scratch.val))));\n+            let datum = scratch.to_expr_datum();\n+            if ty::type_is_sized(bcx.tcx(), elt_ty) {\n+                Datum::new(datum.to_llscalarish(bcx), elt_ty, LvalueExpr)\n+            } else {\n+                Datum::new(datum.val, ty::mk_open(bcx.tcx(), elt_ty), LvalueExpr)\n+            }\n         }\n         None => {\n             let base_datum = unpack_datum!(bcx, trans_to_lvalue(bcx,"}]}