{"sha": "a84909c1e78aef244385b46db080bf78ce548881", "node_id": "C_kwDOAAsO6NoAKGE4NDkwOWMxZTc4YWVmMjQ0Mzg1YjQ2ZGIwODBiZjc4Y2U1NDg4ODE", "commit": {"author": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-01-14T22:23:49Z"}, "committer": {"name": "Camille GILLOT", "email": "gillot.camille@gmail.com", "date": "2023-04-03T17:44:12Z"}, "message": "Enforce VarDebugInfo::Place in MIR validation.", "tree": {"sha": "2c21eca796335944e31ecff2d92a1cad5c45d82e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c21eca796335944e31ecff2d92a1cad5c45d82e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a84909c1e78aef244385b46db080bf78ce548881", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a84909c1e78aef244385b46db080bf78ce548881", "html_url": "https://github.com/rust-lang/rust/commit/a84909c1e78aef244385b46db080bf78ce548881", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a84909c1e78aef244385b46db080bf78ce548881/comments", "author": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "committer": {"login": "cjgillot", "id": 1822483, "node_id": "MDQ6VXNlcjE4MjI0ODM=", "avatar_url": "https://avatars.githubusercontent.com/u/1822483?v=4", "gravatar_id": "", "url": "https://api.github.com/users/cjgillot", "html_url": "https://github.com/cjgillot", "followers_url": "https://api.github.com/users/cjgillot/followers", "following_url": "https://api.github.com/users/cjgillot/following{/other_user}", "gists_url": "https://api.github.com/users/cjgillot/gists{/gist_id}", "starred_url": "https://api.github.com/users/cjgillot/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/cjgillot/subscriptions", "organizations_url": "https://api.github.com/users/cjgillot/orgs", "repos_url": "https://api.github.com/users/cjgillot/repos", "events_url": "https://api.github.com/users/cjgillot/events{/privacy}", "received_events_url": "https://api.github.com/users/cjgillot/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "86792086646b61342c9417b78b8a535392f1045f", "url": "https://api.github.com/repos/rust-lang/rust/commits/86792086646b61342c9417b78b8a535392f1045f", "html_url": "https://github.com/rust-lang/rust/commit/86792086646b61342c9417b78b8a535392f1045f"}], "stats": {"total": 81, "additions": 65, "deletions": 16}, "files": [{"sha": "8549abd6e390cba36a8589a3ee8aae2f4afbf3b7", "filename": "compiler/rustc_codegen_ssa/src/mir/debuginfo.rs", "status": "modified", "additions": 9, "deletions": 5, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fdebuginfo.rs?ref=a84909c1e78aef244385b46db080bf78ce548881", "patch": "@@ -165,11 +165,15 @@ fn calculate_debuginfo_offset<\n             mir::ProjectionElem::Downcast(_, variant) => {\n                 place = place.downcast(bx, variant);\n             }\n-            _ => span_bug!(\n-                var.source_info.span,\n-                \"unsupported var debuginfo place `{:?}`\",\n-                mir::Place { local, projection: var.projection },\n-            ),\n+            _ => {\n+                // Sanity check for `can_use_in_debuginfo`.\n+                debug_assert!(!elem.can_use_in_debuginfo());\n+                span_bug!(\n+                    var.source_info.span,\n+                    \"unsupported var debuginfo place `{:?}`\",\n+                    mir::Place { local, projection: var.projection },\n+                )\n+            }\n         }\n     }\n "}, {"sha": "5d7c0faf8517a27ab95b48067cad30ea09c06b3b", "filename": "compiler/rustc_const_eval/src/transform/validate.rs", "status": "modified", "additions": 39, "deletions": 4, "changes": 43, "blob_url": "https://github.com/rust-lang/rust/blob/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_const_eval%2Fsrc%2Ftransform%2Fvalidate.rs?ref=a84909c1e78aef244385b46db080bf78ce548881", "patch": "@@ -5,13 +5,12 @@ use rustc_index::bit_set::BitSet;\n use rustc_index::vec::IndexVec;\n use rustc_infer::traits::Reveal;\n use rustc_middle::mir::interpret::Scalar;\n-use rustc_middle::mir::visit::NonUseContext::VarDebugInfo;\n-use rustc_middle::mir::visit::{PlaceContext, Visitor};\n+use rustc_middle::mir::visit::{NonUseContext, PlaceContext, Visitor};\n use rustc_middle::mir::{\n     traversal, BasicBlock, BinOp, Body, BorrowKind, CastKind, CopyNonOverlapping, Local, Location,\n     MirPass, MirPhase, NonDivergingIntrinsic, Operand, Place, PlaceElem, PlaceRef, ProjectionElem,\n     RetagKind, RuntimePhase, Rvalue, SourceScope, Statement, StatementKind, Terminator,\n-    TerminatorKind, UnOp, START_BLOCK,\n+    TerminatorKind, UnOp, VarDebugInfo, VarDebugInfoContents, START_BLOCK,\n };\n use rustc_middle::ty::{self, InstanceDef, ParamEnv, Ty, TyCtxt, TypeVisitableExt};\n use rustc_mir_dataflow::impls::MaybeStorageLive;\n@@ -419,13 +418,49 @@ impl<'a, 'tcx> Visitor<'tcx> for TypeChecker<'a, 'tcx> {\n         self.super_projection_elem(local, proj_base, elem, context, location);\n     }\n \n+    fn visit_var_debug_info(&mut self, debuginfo: &VarDebugInfo<'tcx>) {\n+        let check_place = |place: Place<'_>| {\n+            if place.projection.iter().any(|p| !p.can_use_in_debuginfo()) {\n+                self.fail(\n+                    START_BLOCK.start_location(),\n+                    format!(\"illegal place {:?} in debuginfo for {:?}\", place, debuginfo.name),\n+                );\n+            }\n+        };\n+        match debuginfo.value {\n+            VarDebugInfoContents::Const(_) => {}\n+            VarDebugInfoContents::Place(place) => check_place(place),\n+            VarDebugInfoContents::Composite { ty, ref fragments } => {\n+                for f in fragments {\n+                    check_place(f.contents);\n+                    if ty.is_union() || ty.is_enum() {\n+                        self.fail(\n+                            START_BLOCK.start_location(),\n+                            format!(\"invalid type {:?} for composite debuginfo\", ty),\n+                        );\n+                    }\n+                    if f.projection.iter().any(|p| !matches!(p, PlaceElem::Field(..))) {\n+                        self.fail(\n+                            START_BLOCK.start_location(),\n+                            format!(\n+                                \"illegal projection {:?} in debuginfo for {:?}\",\n+                                f.projection, debuginfo.name\n+                            ),\n+                        );\n+                    }\n+                }\n+            }\n+        }\n+        self.super_var_debug_info(debuginfo);\n+    }\n+\n     fn visit_place(&mut self, place: &Place<'tcx>, cntxt: PlaceContext, location: Location) {\n         // Set off any `bug!`s in the type computation code\n         let _ = place.ty(&self.body.local_decls, self.tcx);\n \n         if self.mir_phase >= MirPhase::Runtime(RuntimePhase::Initial)\n             && place.projection.len() > 1\n-            && cntxt != PlaceContext::NonUse(VarDebugInfo)\n+            && cntxt != PlaceContext::NonUse(NonUseContext::VarDebugInfo)\n             && place.projection[1..].contains(&ProjectionElem::Deref)\n         {\n             self.fail(location, format!(\"{:?}, has deref at the wrong place\", place));"}, {"sha": "9604fb5743d37f4751ca32223d313d9eef02891c", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 17, "deletions": 7, "changes": 24, "blob_url": "https://github.com/rust-lang/rust/blob/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a84909c1e78aef244385b46db080bf78ce548881/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=a84909c1e78aef244385b46db080bf78ce548881", "patch": "@@ -1029,8 +1029,7 @@ impl<'tcx> LocalDecl<'tcx> {\n \n #[derive(Clone, TyEncodable, TyDecodable, HashStable, TypeFoldable, TypeVisitable)]\n pub enum VarDebugInfoContents<'tcx> {\n-    /// NOTE(eddyb) There's an unenforced invariant that this `Place` is\n-    /// based on a `Local`, not a `Static`, and contains no indexing.\n+    /// This `Place` only contains projection which satisfy `can_use_in_debuginfo`.\n     Place(Place<'tcx>),\n     Const(Constant<'tcx>),\n     /// The user variable's data is split across several fragments,\n@@ -1040,6 +1039,7 @@ pub enum VarDebugInfoContents<'tcx> {\n     /// the underlying debuginfo feature this relies on.\n     Composite {\n         /// Type of the original user variable.\n+        /// This cannot contain a union or an enum.\n         ty: Ty<'tcx>,\n         /// All the parts of the original user variable, which ended\n         /// up in disjoint places, due to optimizations.\n@@ -1068,17 +1068,16 @@ pub struct VarDebugInfoFragment<'tcx> {\n     /// Where in the composite user variable this fragment is,\n     /// represented as a \"projection\" into the composite variable.\n     /// At lower levels, this corresponds to a byte/bit range.\n-    // NOTE(eddyb) there's an unenforced invariant that this contains\n-    // only `Field`s, and not into `enum` variants or `union`s.\n-    // FIXME(eddyb) support this for `enum`s by either using DWARF's\n+    ///\n+    /// This can only contain `PlaceElem::Field`.\n+    // FIXME support this for `enum`s by either using DWARF's\n     // more advanced control-flow features (unsupported by LLVM?)\n     // to match on the discriminant, or by using custom type debuginfo\n     // with non-overlapping variants for the composite variable.\n     pub projection: Vec<PlaceElem<'tcx>>,\n \n     /// Where the data for this fragment can be found.\n-    // NOTE(eddyb) There's an unenforced invariant that this `Place` is\n-    // contains no indexing (with a non-constant index).\n+    /// This `Place` only contains projection which satisfy `can_use_in_debuginfo`.\n     pub contents: Place<'tcx>,\n }\n \n@@ -1515,6 +1514,17 @@ impl<V, T> ProjectionElem<V, T> {\n     pub fn is_field_to(&self, f: Field) -> bool {\n         matches!(*self, Self::Field(x, _) if x == f)\n     }\n+\n+    /// Returns `true` if this is accepted inside `VarDebugInfoContents::Place`.\n+    pub fn can_use_in_debuginfo(&self) -> bool {\n+        match self {\n+            Self::Deref | Self::Downcast(_, _) | Self::Field(_, _) => true,\n+            Self::ConstantIndex { .. }\n+            | Self::Index(_)\n+            | Self::OpaqueCast(_)\n+            | Self::Subslice { .. } => false,\n+        }\n+    }\n }\n \n /// Alias for projections as they appear in `UserTypeProjection`, where we"}]}