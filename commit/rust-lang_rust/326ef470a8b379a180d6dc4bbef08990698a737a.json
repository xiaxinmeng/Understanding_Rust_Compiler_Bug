{"sha": "326ef470a8b379a180d6dc4bbef08990698a737a", "node_id": "C_kwDOAAsO6NoAKDMyNmVmNDcwYThiMzc5YTE4MGQ2ZGM0YmJlZjA4OTkwNjk4YTczN2E", "commit": {"author": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-06-12T21:10:18Z"}, "committer": {"name": "Josh Triplett", "email": "josh@joshtriplett.org", "date": "2022-10-14T23:35:38Z"}, "message": "Add `IsTerminal` trait to determine if a descriptor or handle is a terminal\n\nThe UNIX and WASI implementations use `isatty`. The Windows\nimplementation uses the same logic the `atty` crate uses, including the\nhack needed to detect msys terminals.\n\nImplement this trait for `File` and for `Stdin`/`Stdout`/`Stderr` and\ntheir locked counterparts on all platforms. On UNIX and WASI, implement\nit for `BorrowedFd`/`OwnedFd`. On Windows, implement it for\n`BorrowedHandle`/`OwnedHandle`.\n\nBased on https://github.com/rust-lang/rust/pull/91121\n\nCo-authored-by: Matt Wilkinson <mattwilki17@gmail.com>", "tree": {"sha": "1466bde52b4eb3e910ec2811981bd656f9e9c757", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1466bde52b4eb3e910ec2811981bd656f9e9c757"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/326ef470a8b379a180d6dc4bbef08990698a737a", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/326ef470a8b379a180d6dc4bbef08990698a737a", "html_url": "https://github.com/rust-lang/rust/commit/326ef470a8b379a180d6dc4bbef08990698a737a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/326ef470a8b379a180d6dc4bbef08990698a737a/comments", "author": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "committer": {"login": "joshtriplett", "id": 162737, "node_id": "MDQ6VXNlcjE2MjczNw==", "avatar_url": "https://avatars.githubusercontent.com/u/162737?v=4", "gravatar_id": "", "url": "https://api.github.com/users/joshtriplett", "html_url": "https://github.com/joshtriplett", "followers_url": "https://api.github.com/users/joshtriplett/followers", "following_url": "https://api.github.com/users/joshtriplett/following{/other_user}", "gists_url": "https://api.github.com/users/joshtriplett/gists{/gist_id}", "starred_url": "https://api.github.com/users/joshtriplett/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/joshtriplett/subscriptions", "organizations_url": "https://api.github.com/users/joshtriplett/orgs", "repos_url": "https://api.github.com/users/joshtriplett/repos", "events_url": "https://api.github.com/users/joshtriplett/events{/privacy}", "received_events_url": "https://api.github.com/users/joshtriplett/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "bf15a9e5263fcea065a7ae9c179b2d24c2deb670", "url": "https://api.github.com/repos/rust-lang/rust/commits/bf15a9e5263fcea065a7ae9c179b2d24c2deb670", "html_url": "https://github.com/rust-lang/rust/commit/bf15a9e5263fcea065a7ae9c179b2d24c2deb670"}], "stats": {"total": 187, "additions": 152, "deletions": 35}, "files": [{"sha": "0c29b001f011854f229153eb7843f715c16a2034", "filename": "library/std/src/io/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fmod.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -266,6 +266,8 @@ pub(crate) use self::stdio::attempt_print_to_stderr;\n #[unstable(feature = \"internal_output_capture\", issue = \"none\")]\n #[doc(no_inline, hidden)]\n pub use self::stdio::set_output_capture;\n+#[unstable(feature = \"is_terminal\", issue = \"98070\")]\n+pub use self::stdio::IsTerminal;\n #[unstable(feature = \"print_internals\", issue = \"none\")]\n pub use self::stdio::{_eprint, _print};\n #[stable(feature = \"rust1\", since = \"1.0.0\")]"}, {"sha": "1141a957d8712de984813a86117c927af63be7f1", "filename": "library/std/src/io/stdio.rs", "status": "modified", "additions": 29, "deletions": 0, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fio%2Fstdio.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -7,6 +7,7 @@ use crate::io::prelude::*;\n \n use crate::cell::{Cell, RefCell};\n use crate::fmt;\n+use crate::fs::File;\n use crate::io::{self, BufReader, IoSlice, IoSliceMut, LineWriter, Lines};\n use crate::sync::atomic::{AtomicBool, Ordering};\n use crate::sync::{Arc, Mutex, MutexGuard, OnceLock};\n@@ -1035,6 +1036,34 @@ pub(crate) fn attempt_print_to_stderr(args: fmt::Arguments<'_>) {\n     let _ = stderr().write_fmt(args);\n }\n \n+/// Trait to determine if a descriptor/handle refers to a terminal/tty.\n+#[unstable(feature = \"is_terminal\", issue = \"98070\")]\n+pub trait IsTerminal: crate::sealed::Sealed {\n+    /// Returns `true` if the descriptor/handle refers to a terminal/tty.\n+    ///\n+    /// On platforms where Rust does not know how to detect a terminal yet, this will return\n+    /// `false`. This will also return `false` if an unexpected error occurred, such as from\n+    /// passing an invalid file descriptor.\n+    fn is_terminal(&self) -> bool;\n+}\n+\n+macro_rules! impl_is_terminal {\n+    ($($t:ty),*$(,)?) => {$(\n+        #[unstable(feature = \"sealed\", issue = \"none\")]\n+        impl crate::sealed::Sealed for $t {}\n+\n+        #[unstable(feature = \"is_terminal\", issue = \"98070\")]\n+        impl IsTerminal for $t {\n+            #[inline]\n+            fn is_terminal(&self) -> bool {\n+                crate::sys::io::is_terminal(self)\n+            }\n+        }\n+    )*}\n+}\n+\n+impl_is_terminal!(File, Stdin, StdinLock<'_>, Stdout, StdoutLock<'_>, Stderr, StderrLock<'_>);\n+\n #[unstable(\n     feature = \"print_internals\",\n     reason = \"implementation detail which may disappear or be replaced at any time\","}, {"sha": "78838adb8dd278ad365b02cab629d68b59837c02", "filename": "library/std/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Flib.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -253,6 +253,7 @@\n #![feature(exhaustive_patterns)]\n #![feature(if_let_guard)]\n #![feature(intra_doc_pointers)]\n+#![feature(is_terminal)]\n #![feature(lang_items)]\n #![feature(let_chains)]\n #![feature(linkage)]"}, {"sha": "c16518577f7c466794127c9db77be3136e3d4c46", "filename": "library/std/src/os/fd/owned.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Ffd%2Fowned.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -193,6 +193,23 @@ impl fmt::Debug for OwnedFd {\n     }\n }\n \n+macro_rules! impl_is_terminal {\n+    ($($t:ty),*$(,)?) => {$(\n+        #[unstable(feature = \"sealed\", issue = \"none\")]\n+        impl crate::sealed::Sealed for $t {}\n+\n+        #[unstable(feature = \"is_terminal\", issue = \"98070\")]\n+        impl crate::io::IsTerminal for $t {\n+            #[inline]\n+            fn is_terminal(&self) -> bool {\n+                crate::sys::io::is_terminal(self)\n+            }\n+        }\n+    )*}\n+}\n+\n+impl_is_terminal!(BorrowedFd<'_>, OwnedFd);\n+\n /// A trait to borrow the file descriptor from an underlying object.\n ///\n /// This is only available on unix platforms and must be imported in order to"}, {"sha": "1dfecc57338a7bbab9e5533a638dddc489a5d963", "filename": "library/std/src/os/windows/io/handle.rs", "status": "modified", "additions": 17, "deletions": 0, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fos%2Fwindows%2Fio%2Fhandle.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -384,6 +384,23 @@ impl fmt::Debug for OwnedHandle {\n     }\n }\n \n+macro_rules! impl_is_terminal {\n+    ($($t:ty),*$(,)?) => {$(\n+        #[unstable(feature = \"sealed\", issue = \"none\")]\n+        impl crate::sealed::Sealed for $t {}\n+\n+        #[unstable(feature = \"is_terminal\", issue = \"98070\")]\n+        impl crate::io::IsTerminal for $t {\n+            #[inline]\n+            fn is_terminal(&self) -> bool {\n+                crate::sys::io::is_terminal(self)\n+            }\n+        }\n+    )*}\n+}\n+\n+impl_is_terminal!(BorrowedHandle<'_>, OwnedHandle);\n+\n /// A trait to borrow the handle from an underlying object.\n #[stable(feature = \"io_safety\", since = \"1.63.0\")]\n pub trait AsHandle {"}, {"sha": "29c340dd34942c86d820cd09cec0df3d51e203e9", "filename": "library/std/src/sys/unix/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funix%2Fio.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -1,4 +1,5 @@\n use crate::marker::PhantomData;\n+use crate::os::fd::{AsFd, AsRawFd};\n use crate::slice;\n \n use libc::{c_void, iovec};\n@@ -74,3 +75,8 @@ impl<'a> IoSliceMut<'a> {\n         unsafe { slice::from_raw_parts_mut(self.vec.iov_base as *mut u8, self.vec.iov_len) }\n     }\n }\n+\n+pub fn is_terminal(fd: &impl AsFd) -> bool {\n+    let fd = fd.as_fd();\n+    unsafe { libc::isatty(fd.as_raw_fd()) != 0 }\n+}"}, {"sha": "82610ffab7e1e5bca691805389b3b124160ccabe", "filename": "library/std/src/sys/unsupported/io.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Funsupported%2Fio.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -45,3 +45,7 @@ impl<'a> IoSliceMut<'a> {\n         self.0\n     }\n }\n+\n+pub fn is_terminal<T>(_: &T) -> bool {\n+    false\n+}"}, {"sha": "2cd45df88fad1796ac3faa8df216fc2ae385ba88", "filename": "library/std/src/sys/wasi/io.rs", "status": "modified", "additions": 6, "deletions": 0, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwasi%2Fio.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -1,6 +1,7 @@\n #![deny(unsafe_op_in_unsafe_fn)]\n \n use crate::marker::PhantomData;\n+use crate::os::fd::{AsFd, AsRawFd};\n use crate::slice;\n \n #[derive(Copy, Clone)]\n@@ -71,3 +72,8 @@ impl<'a> IoSliceMut<'a> {\n         unsafe { slice::from_raw_parts_mut(self.vec.buf as *mut u8, self.vec.buf_len) }\n     }\n }\n+\n+pub fn is_terminal(fd: &impl AsFd) -> bool {\n+    let fd = fd.as_fd();\n+    unsafe { libc::isatty(fd.as_raw_fd()) != 0 }\n+}"}, {"sha": "917fc8e4995e6120202a725880983b9881074367", "filename": "library/std/src/sys/windows/c.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fc.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -127,6 +127,8 @@ pub const SECURITY_SQOS_PRESENT: DWORD = 0x00100000;\n \n pub const FIONBIO: c_ulong = 0x8004667e;\n \n+pub const MAX_PATH: usize = 260;\n+\n #[repr(C)]\n #[derive(Copy)]\n pub struct WIN32_FIND_DATAW {\n@@ -538,6 +540,12 @@ pub struct SYMBOLIC_LINK_REPARSE_BUFFER {\n \n /// NB: Use carefully! In general using this as a reference is likely to get the\n /// provenance wrong for the `PathBuffer` field!\n+#[repr(C)]\n+pub struct FILE_NAME_INFO {\n+    pub FileNameLength: DWORD,\n+    pub FileName: [WCHAR; 1],\n+}\n+\n #[repr(C)]\n pub struct MOUNT_POINT_REPARSE_BUFFER {\n     pub SubstituteNameOffset: c_ushort,"}, {"sha": "489d66b06714f8fbcf2ef9e8d0a892f4a8ecbf30", "filename": "library/std/src/sys/windows/io.rs", "status": "modified", "additions": 59, "deletions": 0, "changes": 59, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Fstd%2Fsrc%2Fsys%2Fwindows%2Fio.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -1,6 +1,10 @@\n use crate::marker::PhantomData;\n+use crate::mem::size_of;\n+use crate::os::windows::io::{AsHandle, AsRawHandle, BorrowedHandle};\n use crate::slice;\n use crate::sys::c;\n+use core;\n+use libc;\n \n #[derive(Copy, Clone)]\n #[repr(transparent)]\n@@ -78,3 +82,58 @@ impl<'a> IoSliceMut<'a> {\n         unsafe { slice::from_raw_parts_mut(self.vec.buf as *mut u8, self.vec.len as usize) }\n     }\n }\n+\n+pub fn is_terminal(h: &impl AsHandle) -> bool {\n+    unsafe { handle_is_console(h.as_handle()) }\n+}\n+\n+unsafe fn handle_is_console(handle: BorrowedHandle<'_>) -> bool {\n+    let handle = handle.as_raw_handle();\n+\n+    let mut out = 0;\n+    if c::GetConsoleMode(handle, &mut out) != 0 {\n+        // False positives aren't possible. If we got a console then we definitely have a console.\n+        return true;\n+    }\n+\n+    // At this point, we *could* have a false negative. We can determine that this is a true\n+    // negative if we can detect the presence of a console on any of the standard I/O streams. If\n+    // another stream has a console, then we know we're in a Windows console and can therefore\n+    // trust the negative.\n+    for std_handle in [c::STD_INPUT_HANDLE, c::STD_OUTPUT_HANDLE, c::STD_ERROR_HANDLE] {\n+        let std_handle = c::GetStdHandle(std_handle);\n+        if std_handle != handle && c::GetConsoleMode(std_handle, &mut out) != 0 {\n+            return false;\n+        }\n+    }\n+\n+    // Otherwise, we fall back to an msys hack to see if we can detect the presence of a pty.\n+    msys_tty_on(handle)\n+}\n+\n+unsafe fn msys_tty_on(handle: c::HANDLE) -> bool {\n+    let size = size_of::<c::FILE_NAME_INFO>() + c::MAX_PATH * size_of::<c::WCHAR>();\n+    let mut name_info_bytes = vec![0u8; size];\n+    let res = c::GetFileInformationByHandleEx(\n+        handle,\n+        c::FileNameInfo,\n+        name_info_bytes.as_mut_ptr() as *mut libc::c_void,\n+        size as u32,\n+    );\n+    if res == 0 {\n+        return false;\n+    }\n+    let name_info: &c::FILE_NAME_INFO = &*(name_info_bytes.as_ptr() as *const c::FILE_NAME_INFO);\n+    let s = core::slice::from_raw_parts(\n+        name_info.FileName.as_ptr(),\n+        name_info.FileNameLength as usize / 2,\n+    );\n+    let name = String::from_utf16_lossy(s);\n+    // This checks whether 'pty' exists in the file name, which indicates that\n+    // a pseudo-terminal is attached. To mitigate against false positives\n+    // (e.g., an actual file name that contains 'pty'), we also require that\n+    // either the strings 'msys-' or 'cygwin-' are in the file name as well.)\n+    let is_msys = name.contains(\"msys-\") || name.contains(\"cygwin-\");\n+    let is_pty = name.contains(\"-pty\");\n+    is_msys && is_pty\n+}"}, {"sha": "8be32183fe780faa066052a08d84c14036850642", "filename": "library/test/src/cli.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Fcli.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Fcli.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fcli.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -3,9 +3,9 @@\n use std::env;\n use std::path::PathBuf;\n \n-use super::helpers::isatty;\n use super::options::{ColorConfig, Options, OutputFormat, RunIgnored};\n use super::time::TestTimeOptions;\n+use std::io::{self, IsTerminal};\n \n #[derive(Debug)]\n pub struct TestOpts {\n@@ -32,7 +32,7 @@ pub struct TestOpts {\n impl TestOpts {\n     pub fn use_color(&self) -> bool {\n         match self.color {\n-            ColorConfig::AutoColor => !self.nocapture && isatty::stdout_isatty(),\n+            ColorConfig::AutoColor => !self.nocapture && io::stdout().is_terminal(),\n             ColorConfig::AlwaysColor => true,\n             ColorConfig::NeverColor => false,\n         }"}, {"sha": "874ecc3764572b8f328a81f368a0f98cd567e7ae", "filename": "library/test/src/helpers/isatty.rs", "status": "removed", "additions": 0, "deletions": 32, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/bf15a9e5263fcea065a7ae9c179b2d24c2deb670/library%2Ftest%2Fsrc%2Fhelpers%2Fisatty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bf15a9e5263fcea065a7ae9c179b2d24c2deb670/library%2Ftest%2Fsrc%2Fhelpers%2Fisatty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fisatty.rs?ref=bf15a9e5263fcea065a7ae9c179b2d24c2deb670", "patch": "@@ -1,32 +0,0 @@\n-//! Helper module which provides a function to test\n-//! if stdout is a tty.\n-\n-cfg_if::cfg_if! {\n-    if #[cfg(unix)] {\n-        pub fn stdout_isatty() -> bool {\n-            unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-        }\n-    } else if #[cfg(windows)] {\n-        pub fn stdout_isatty() -> bool {\n-            type DWORD = u32;\n-            type BOOL = i32;\n-            type HANDLE = *mut u8;\n-            type LPDWORD = *mut u32;\n-            const STD_OUTPUT_HANDLE: DWORD = -11i32 as DWORD;\n-            extern \"system\" {\n-                fn GetStdHandle(which: DWORD) -> HANDLE;\n-                fn GetConsoleMode(hConsoleHandle: HANDLE, lpMode: LPDWORD) -> BOOL;\n-            }\n-            unsafe {\n-                let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-                let mut out = 0;\n-                GetConsoleMode(handle, &mut out) != 0\n-            }\n-        }\n-    } else {\n-        // FIXME: Implement isatty on SGX\n-        pub fn stdout_isatty() -> bool {\n-            false\n-        }\n-    }\n-}"}, {"sha": "6f366a911e8cd6795c0eeefce8e853365c95ad29", "filename": "library/test/src/helpers/mod.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Fhelpers%2Fmod.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -3,6 +3,5 @@\n \n pub mod concurrency;\n pub mod exit_code;\n-pub mod isatty;\n pub mod metrics;\n pub mod shuffle;"}, {"sha": "b1e0bbfc591c10d4372f1b54780c4afa07908daa", "filename": "library/test/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/326ef470a8b379a180d6dc4bbef08990698a737a/library%2Ftest%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/library%2Ftest%2Fsrc%2Flib.rs?ref=326ef470a8b379a180d6dc4bbef08990698a737a", "patch": "@@ -17,6 +17,7 @@\n #![unstable(feature = \"test\", issue = \"50297\")]\n #![doc(test(attr(deny(warnings))))]\n #![feature(internal_output_capture)]\n+#![feature(is_terminal)]\n #![feature(staged_api)]\n #![feature(process_exitcode_internals)]\n #![feature(test)]"}]}