{"sha": "c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "node_id": "MDY6Q29tbWl0NzI0NzEyOmMxNTQzN2MwYzZiZWIyYjdiZTRiODY1NjllMTI0YzhiMmNjZDAzYmI=", "commit": {"author": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-02T10:45:20Z"}, "committer": {"name": "Matthew Jasper", "email": "mjjasper1@gmail.com", "date": "2019-02-21T19:03:33Z"}, "message": "Improve error message and add tests for borrowck match handling", "tree": {"sha": "b1def4200d2deaa3fbb07e2157d7e66e2cb90273", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b1def4200d2deaa3fbb07e2157d7e66e2cb90273"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "html_url": "https://github.com/rust-lang/rust/commit/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/comments", "author": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "committer": {"login": "matthewjasper", "id": 20113453, "node_id": "MDQ6VXNlcjIwMTEzNDUz", "avatar_url": "https://avatars.githubusercontent.com/u/20113453?v=4", "gravatar_id": "", "url": "https://api.github.com/users/matthewjasper", "html_url": "https://github.com/matthewjasper", "followers_url": "https://api.github.com/users/matthewjasper/followers", "following_url": "https://api.github.com/users/matthewjasper/following{/other_user}", "gists_url": "https://api.github.com/users/matthewjasper/gists{/gist_id}", "starred_url": "https://api.github.com/users/matthewjasper/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/matthewjasper/subscriptions", "organizations_url": "https://api.github.com/users/matthewjasper/orgs", "repos_url": "https://api.github.com/users/matthewjasper/repos", "events_url": "https://api.github.com/users/matthewjasper/events{/privacy}", "received_events_url": "https://api.github.com/users/matthewjasper/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "f66e4697ae286985ddefc53c3a047614568458bb", "url": "https://api.github.com/repos/rust-lang/rust/commits/f66e4697ae286985ddefc53c3a047614568458bb", "html_url": "https://github.com/rust-lang/rust/commit/f66e4697ae286985ddefc53c3a047614568458bb"}], "stats": {"total": 187, "additions": 144, "deletions": 43}, "files": [{"sha": "744dd61f4f593926ac0c75ad7732dc8a9e239c2c", "filename": "src/librustc_mir/borrow_check/error_reporting.rs", "status": "modified", "additions": 19, "deletions": 11, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fborrow_check%2Ferror_reporting.rs?ref=c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "patch": "@@ -1330,22 +1330,30 @@ impl<'cx, 'gcx, 'tcx> MirBorrowckCtxt<'cx, 'gcx, 'tcx> {\n         let loan_span = loan_spans.args_or_use();\n \n         let tcx = self.infcx.tcx;\n-        let mut err = if loan.kind == BorrowKind::Shallow {\n-            tcx.cannot_mutate_in_match_guard(\n+        if loan.kind == BorrowKind::Shallow {\n+            let mut err = tcx.cannot_mutate_in_match_guard(\n                 span,\n                 loan_span,\n                 &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n                 \"assign\",\n                 Origin::Mir,\n-            )\n-        } else {\n-            tcx.cannot_assign_to_borrowed(\n-                span,\n-                loan_span,\n-                &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n-                Origin::Mir,\n-            )\n-        };\n+            );\n+            loan_spans.var_span_label(\n+                &mut err,\n+                format!(\"borrow occurs due to use{}\", loan_spans.describe()),\n+            );\n+\n+            err.buffer(&mut self.errors_buffer);\n+\n+            return;\n+        }\n+\n+        let mut err = tcx.cannot_assign_to_borrowed(\n+            span,\n+            loan_span,\n+            &self.describe_place(place).unwrap_or_else(|| \"_\".to_owned()),\n+            Origin::Mir,\n+        );\n \n         loan_spans.var_span_label(\n             &mut err,"}, {"sha": "a3add8856dfa1ecf81feb3ab8364fa29d996dd5b", "filename": "src/test/ui/nll/match-cfg-fake-edges.rs", "status": "added", "additions": 58, "deletions": 0, "changes": 58, "blob_url": "https://github.com/rust-lang/rust/blob/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.rs?ref=c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "patch": "@@ -0,0 +1,58 @@\n+// Test that we have enough false edges to avoid exposing the exact matching\n+// algorithm in borrow checking.\n+\n+#![feature(nll, bind_by_move_pattern_guards)]\n+\n+fn guard_always_precedes_arm(y: i32) {\n+    let mut x;\n+    // x should always be initialized, as the only way to reach the arm is\n+    // through the guard.\n+    match y {\n+        0 | 2 if { x = 2; true } => x,\n+        _ => 2,\n+    };\n+}\n+\n+fn guard_may_be_skipped(y: i32) {\n+    let x;\n+    // Even though x *is* always initialized, we don't want to have borrowck\n+    // results be based on whether patterns are exhaustive.\n+    match y {\n+        _ if { x = 2; true } => 1,\n+        _ if {\n+            x; //~ ERROR use of possibly uninitialized variable: `x`\n+            false\n+        } => 2,\n+        _ => 3,\n+    };\n+}\n+\n+fn guard_may_be_taken(y: bool) {\n+    let x = String::new();\n+    // Even though x *is* never moved before the use, we don't want to have\n+    // borrowck results be based on whether patterns are disjoint.\n+    match y {\n+        false if { drop(x); true } => 1,\n+        true => {\n+            x; //~ ERROR use of moved value: `x`\n+            2\n+        }\n+        false => 3,\n+    };\n+}\n+\n+fn all_previous_tests_may_be_done(y: &mut (bool, bool)) {\n+    let r = &mut y.1;\n+    // We don't actually test y.1 to select the second arm, but we don't want\n+    // borrowck results to be based on the order we match patterns.\n+    match y {\n+        (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n+        (true, _) => {\n+            r;\n+            2\n+        }\n+        (false, _) => 3,\n+    };\n+}\n+\n+fn main() {}"}, {"sha": "a855b28a978dd9473db8f916962459ac26eb77af", "filename": "src/test/ui/nll/match-cfg-fake-edges.stderr", "status": "added", "additions": 34, "deletions": 0, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-cfg-fake-edges.stderr?ref=c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "patch": "@@ -0,0 +1,34 @@\n+error[E0381]: use of possibly uninitialized variable: `x`\n+  --> $DIR/match-cfg-fake-edges.rs:23:13\n+   |\n+LL |             x; //~ ERROR use of possibly uninitialized variable: `x`\n+   |             ^ use of possibly uninitialized `x`\n+\n+error[E0382]: use of moved value: `x`\n+  --> $DIR/match-cfg-fake-edges.rs:37:13\n+   |\n+LL |     let x = String::new();\n+   |         - move occurs because `x` has type `std::string::String`, which does not implement the `Copy` trait\n+...\n+LL |         false if { drop(x); true } => 1,\n+   |                         - value moved here\n+LL |         true => {\n+LL |             x; //~ ERROR use of moved value: `x`\n+   |             ^ value used here after move\n+\n+error[E0503]: cannot use `y.1` because it was mutably borrowed\n+  --> $DIR/match-cfg-fake-edges.rs:49:17\n+   |\n+LL |     let r = &mut y.1;\n+   |             -------- borrow of `y.1` occurs here\n+...\n+LL |         (false, true) => 1, //~ ERROR cannot use `y.1` because it was mutably borrowed\n+   |                 ^^^^ use of borrowed `y.1`\n+LL |         (true, _) => {\n+LL |             r;\n+   |             - borrow later used here\n+\n+error: aborting due to 3 previous errors\n+\n+Some errors occurred: E0381, E0382, E0503.\n+For more information about an error, try `rustc --explain E0381`."}, {"sha": "cb8ea2c3d26bdb1abae1f65154af79d9ac2a523b", "filename": "src/test/ui/nll/match-guards-partially-borrow.rs", "status": "modified", "additions": 12, "deletions": 2, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.rs?ref=c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "patch": "@@ -30,7 +30,7 @@ fn ok_indirect_mutation_in_guard(mut p: &bool) {\n \n fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n     match q {\n-        // s doesn't match the pattern with the guard by the end of the guard.\n+        // q doesn't match the pattern with the guard by the end of the guard.\n         false if {\n             q = true; //~ ERROR\n             true\n@@ -41,7 +41,7 @@ fn mutation_invalidates_pattern_in_guard(mut q: bool) {\n \n fn mutation_invalidates_previous_pattern_in_guard(mut r: bool) {\n     match r {\n-        // s matches a previous pattern by the end of the guard.\n+        // r matches a previous pattern by the end of the guard.\n         true => (),\n         _ if {\n             r = true; //~ ERROR\n@@ -116,6 +116,16 @@ fn bad_mutation_in_guard4(mut w: (&mut bool,)) {\n     }\n }\n \n+fn bad_mutation_in_guard5(mut t: bool) {\n+    match t {\n+        s if {\n+            t = !t; //~ ERROR\n+            false\n+        } => (), // What value should `s` have in the arm?\n+        _ => (),\n+    }\n+}\n+\n fn bad_indirect_mutation_in_guard(mut y: &bool) {\n     match *y {\n         true => (),"}, {"sha": "b6302b3a65d3c6da68a074234994804fffefd520", "filename": "src/test/ui/nll/match-guards-partially-borrow.stderr", "status": "modified", "additions": 21, "deletions": 30, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/c15437c0c6beb2b7be4b86569e124c8b2ccd03bb/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fmatch-guards-partially-borrow.stderr?ref=c15437c0c6beb2b7be4b86569e124c8b2ccd03bb", "patch": "@@ -6,9 +6,6 @@ LL |     match q {\n ...\n LL |             q = true; //~ ERROR\n    |             ^^^^^^^^ cannot assign\n-...\n-LL |         _ => (),\n-   |         - borrow later used here\n \n error[E0510]: cannot assign `r` in match guard\n   --> $DIR/match-guards-partially-borrow.rs:47:13\n@@ -18,9 +15,6 @@ LL |     match r {\n ...\n LL |             r = true; //~ ERROR\n    |             ^^^^^^^^ cannot assign\n-...\n-LL |         _ => (),\n-   |         - borrow later used here\n \n error[E0503]: cannot use `s` because it was mutably borrowed\n   --> $DIR/match-guards-partially-borrow.rs:56:11\n@@ -41,9 +35,6 @@ LL |     match t {\n ...\n LL |             t = true; //~ ERROR\n    |             ^^^^^^^^ cannot assign\n-...\n-LL |         false => (),\n-   |         ----- borrow later used here\n \n error[E0506]: cannot assign to `u` because it is borrowed\n   --> $DIR/match-guards-partially-borrow.rs:83:13\n@@ -53,8 +44,8 @@ LL |     match u {\n ...\n LL |             u = true; //~ ERROR\n    |             ^^^^^^^^ assignment to borrowed `u` occurs here\n-...\n-LL |         x => (),\n+LL |             false\n+LL |         } => (),\n    |         - borrow later used here\n \n error[E0510]: cannot mutably borrow `x.0` in match guard\n@@ -74,59 +65,59 @@ LL |     match w {\n ...\n LL |             *w.0 = true; //~ ERROR\n    |             ^^^^^^^^^^^ assignment to borrowed `*w.0` occurs here\n-...\n-LL |         x => (),\n+LL |             false\n+LL |         } => (),\n+   |         - borrow later used here\n+\n+error[E0506]: cannot assign to `t` because it is borrowed\n+  --> $DIR/match-guards-partially-borrow.rs:122:13\n+   |\n+LL |     match t {\n+   |           - borrow of `t` occurs here\n+LL |         s if {\n+LL |             t = !t; //~ ERROR\n+   |             ^^^^^^ assignment to borrowed `t` occurs here\n+LL |             false\n+LL |         } => (), // What value should `s` have in the arm?\n    |         - borrow later used here\n \n error[E0510]: cannot assign `y` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:123:13\n+  --> $DIR/match-guards-partially-borrow.rs:133:13\n    |\n LL |     match *y {\n    |           -- value is immutable in match guard\n ...\n LL |             y = &true; //~ ERROR\n    |             ^^^^^^^^^ cannot assign\n-...\n-LL |         false => (),\n-   |         ----- borrow later used here\n \n error[E0510]: cannot assign `z` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:134:13\n+  --> $DIR/match-guards-partially-borrow.rs:144:13\n    |\n LL |     match z {\n    |           - value is immutable in match guard\n ...\n LL |             z = &true; //~ ERROR\n    |             ^^^^^^^^^ cannot assign\n-...\n-LL |         &false => (),\n-   |         ------ borrow later used here\n \n error[E0510]: cannot assign `a` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:146:13\n+  --> $DIR/match-guards-partially-borrow.rs:156:13\n    |\n LL |     match a {\n    |           - value is immutable in match guard\n ...\n LL |             a = &true; //~ ERROR\n    |             ^^^^^^^^^ cannot assign\n-...\n-LL |         false => (),\n-   |         ----- borrow later used here\n \n error[E0510]: cannot assign `b` in match guard\n-  --> $DIR/match-guards-partially-borrow.rs:157:13\n+  --> $DIR/match-guards-partially-borrow.rs:167:13\n    |\n LL |     match b {\n    |           - value is immutable in match guard\n ...\n LL |             b = &true; //~ ERROR\n    |             ^^^^^^^^^ cannot assign\n-...\n-LL |         &b => (),\n-   |         -- borrow later used here\n \n-error: aborting due to 11 previous errors\n+error: aborting due to 12 previous errors\n \n Some errors occurred: E0503, E0506, E0510.\n For more information about an error, try `rustc --explain E0503`."}]}