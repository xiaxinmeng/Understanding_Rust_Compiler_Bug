{"sha": "d4d5be18b702b5fd8b38b67d503860f788a14acd", "node_id": "MDY6Q29tbWl0NzI0NzEyOmQ0ZDViZTE4YjcwMmI1ZmQ4YjM4YjY3ZDUwMzg2MGY3ODhhMTRhY2Q=", "commit": {"author": {"name": "Simonas Kazlauskas", "email": "git@kazlauskas.me", "date": "2016-08-23T23:15:15Z"}, "committer": {"name": "est31", "email": "MTest31@outlook.com", "date": "2016-12-30T14:17:25Z"}, "message": "Feature gate the 128 bit types\n\nDangling a carrot in front of a donkey.\n\nThis commit includes manual merge conflict resolution changes from a rebase by @est31.", "tree": {"sha": "3262d6acc4849117b8779c783ac85defda36ac8b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3262d6acc4849117b8779c783ac85defda36ac8b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/d4d5be18b702b5fd8b38b67d503860f788a14acd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/d4d5be18b702b5fd8b38b67d503860f788a14acd", "html_url": "https://github.com/rust-lang/rust/commit/d4d5be18b702b5fd8b38b67d503860f788a14acd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/d4d5be18b702b5fd8b38b67d503860f788a14acd/comments", "author": {"login": "nagisa", "id": 679122, "node_id": "MDQ6VXNlcjY3OTEyMg==", "avatar_url": "https://avatars.githubusercontent.com/u/679122?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nagisa", "html_url": "https://github.com/nagisa", "followers_url": "https://api.github.com/users/nagisa/followers", "following_url": "https://api.github.com/users/nagisa/following{/other_user}", "gists_url": "https://api.github.com/users/nagisa/gists{/gist_id}", "starred_url": "https://api.github.com/users/nagisa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nagisa/subscriptions", "organizations_url": "https://api.github.com/users/nagisa/orgs", "repos_url": "https://api.github.com/users/nagisa/repos", "events_url": "https://api.github.com/users/nagisa/events{/privacy}", "received_events_url": "https://api.github.com/users/nagisa/received_events", "type": "User", "site_admin": false}, "committer": {"login": "est31", "id": 8872119, "node_id": "MDQ6VXNlcjg4NzIxMTk=", "avatar_url": "https://avatars.githubusercontent.com/u/8872119?v=4", "gravatar_id": "", "url": "https://api.github.com/users/est31", "html_url": "https://github.com/est31", "followers_url": "https://api.github.com/users/est31/followers", "following_url": "https://api.github.com/users/est31/following{/other_user}", "gists_url": "https://api.github.com/users/est31/gists{/gist_id}", "starred_url": "https://api.github.com/users/est31/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/est31/subscriptions", "organizations_url": "https://api.github.com/users/est31/orgs", "repos_url": "https://api.github.com/users/est31/repos", "events_url": "https://api.github.com/users/est31/events{/privacy}", "received_events_url": "https://api.github.com/users/est31/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "b5260644af9cf556fe614d50e578f7c994013ae1", "url": "https://api.github.com/repos/rust-lang/rust/commits/b5260644af9cf556fe614d50e578f7c994013ae1", "html_url": "https://github.com/rust-lang/rust/commit/b5260644af9cf556fe614d50e578f7c994013ae1"}], "stats": {"total": 78, "additions": 77, "deletions": 1}, "files": [{"sha": "2cb2f81fcffb55da39892a369b2b63cb208e0fd3", "filename": "src/libcore/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibcore%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibcore%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Flib.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -90,6 +90,7 @@\n #![feature(staged_api)]\n #![feature(unboxed_closures)]\n #![feature(never_type)]\n+#![cfg_attr(not(stage0), feature(i128_type))]\n #![feature(prelude_import)]\n \n #[prelude_import]"}, {"sha": "5b50c2b493ab2c3217fd6d92b4b242251b510b51", "filename": "src/librustc_i128/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_i128%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_i128%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_i128%2Flib.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -1,4 +1,5 @@\n #![allow(non_camel_case_types)]\n+#![feature(i128_type)]\n \n #[cfg(stage0)]\n pub type i128 = i64;"}, {"sha": "f27a5c80b9c996129aa03b31adcf2b14fca274d3", "filename": "src/librustc_resolve/lib.rs", "status": "modified", "additions": 14, "deletions": 1, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_resolve%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_resolve%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_resolve%2Flib.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -61,6 +61,7 @@ use syntax::ast::{FnDecl, ForeignItem, ForeignItemKind, Generics};\n use syntax::ast::{Item, ItemKind, ImplItem, ImplItemKind};\n use syntax::ast::{Local, Mutability, Pat, PatKind, Path};\n use syntax::ast::{QSelf, TraitItemKind, TraitRef, Ty, TyKind};\n+use syntax::feature_gate::{emit_feature_err, GateIssue};\n \n use syntax_pos::{Span, DUMMY_SP, MultiSpan};\n use errors::DiagnosticBuilder;\n@@ -2309,8 +2310,20 @@ impl<'a> Resolver<'a> {\n             PathResult::Module(..) | PathResult::Failed(..)\n                     if (ns == TypeNS || path.len() > 1) &&\n                        self.primitive_type_table.primitive_types.contains_key(&path[0].name) => {\n+                let prim = self.primitive_type_table.primitive_types[&path[0].name];\n+                match prim {\n+                    TyUint(UintTy::U128) | TyInt(IntTy::I128) => {\n+                        if !this.session.features.borrow().i128_type {\n+                            emit_feature_err(&this.session.parse_sess.span_diagnostic,\n+                                                \"i128_type\", span, GateIssue::Language,\n+                                                \"128-bit type is unstable\");\n+\n+                        }\n+                    }\n+                    _ => {}\n+                }\n                 PathResolution {\n-                    base_def: Def::PrimTy(self.primitive_type_table.primitive_types[&path[0].name]),\n+                    base_def: Def::PrimTy(prim),\n                     depth: path.len() - 1,\n                 }\n             }"}, {"sha": "051a4200235ab8de6fcae7818b1c96c9182ee799", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 7, "deletions": 0, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -1330,6 +1330,13 @@ pub fn check_enum_variants<'a,'tcx>(ccx: &CrateCtxt<'a,'tcx>,\n     }\n \n     let repr_type_ty = ccx.tcx.enum_repr_type(Some(&hint)).to_ty(ccx.tcx);\n+    if repr_type_ty == ccx.tcx.types.i128 || repr_type_ty == ccx.tcx.types.u128 {\n+        if !ccx.tcx.sess.features.borrow().i128_type {\n+            emit_feature_err(&ccx.tcx.sess.parse_sess.span_diagnostic,\n+                             \"i128_type\", sp, GateIssue::Language, \"128-bit type is unstable\");\n+        }\n+    }\n+\n     for v in vs {\n         if let Some(e) = v.node.disr_expr {\n             check_const_with_type(ccx, e, repr_type_ty, e.node_id);"}, {"sha": "a3f2cd3a0cdb8947e24496d9cdf3b49fcb6eb425", "filename": "src/libsyntax/feature_gate.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibsyntax%2Ffeature_gate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Flibsyntax%2Ffeature_gate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ffeature_gate.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -321,6 +321,9 @@ declare_features! (\n \n     // `extern \"ptx-*\" fn()`\n     (active, abi_ptx, \"1.15.0\", None),\n+\n+    // The `i128` type\n+    (active, i128_type, \"1.15.0\", Some(35118)),\n );\n \n declare_features! (\n@@ -1215,6 +1218,18 @@ impl<'a> Visitor<'a> for PostExpansionVisitor<'a> {\n                 gate_feature_post!(&self, loop_break_value, e.span,\n                                    \"`break` with a value is experimental\");\n             }\n+            ast::ExprKind::Lit(ref lit) => {\n+                if let ast::LitKind::Int(_, ref ty) = lit.node {\n+                    match *ty {\n+                        ast::LitIntType::Signed(ast::IntTy::I128) |\n+                        ast::LitIntType::Unsigned(ast::UintTy::U128) => {\n+                            gate_feature_post!(&self, i128_type, e.span,\n+                                               \"128-bit integers are not stable\");\n+                        }\n+                        _ => {}\n+                    }\n+                }\n+            }\n             _ => {}\n         }\n         visit::walk_expr(self, e);"}, {"sha": "b450ba33fdf82b2d684ba33dc0e3cedf2f7dab52", "filename": "src/test/compile-fail/i128-feature-2.rs", "status": "added", "additions": 20, "deletions": 0, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fi128-feature-2.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -0,0 +1,20 @@\n+fn test1() -> i128 { //~ ERROR 128-bit type is unstable\n+    0\n+}\n+\n+fn test1_2() -> u128 { //~ ERROR 128-bit type is unstable\n+    0\n+}\n+\n+fn test3() {\n+    let x: i128 = 0; //~ ERROR 128-bit type is unstable\n+}\n+\n+fn test3_2() {\n+    let x: u128 = 0; //~ ERROR 128-bit type is unstable\n+}\n+\n+#[repr(u128)]\n+enum A { //~ ERROR 128-bit type is unstable\n+    A(u64)\n+}"}, {"sha": "640cda1469d28e9921b67570649e357e3c9af351", "filename": "src/test/compile-fail/i128-feature.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fi128-feature.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -0,0 +1,8 @@\n+fn test2() {\n+    0i128; //~ ERROR 128-bit integers are not stable\n+}\n+\n+fn test2_2() {\n+    0u128; //~ ERROR 128-bit integers are not stable\n+}\n+"}, {"sha": "85a3f00e946bfd983c2d6d00b98ca955053784f0", "filename": "src/test/run-pass/i128.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Frun-pass%2Fi128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Frun-pass%2Fi128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fi128.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -1,3 +1,5 @@\n+#![feature(i128_type)]\n+\n fn main() {\n     let x: i128 = -1;\n     assert_eq!(0, !x);"}, {"sha": "57e1ea282e03c86958d496e674f2571fa7e1c48b", "filename": "src/test/run-pass/u128.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Frun-pass%2Fu128.rs", "raw_url": "https://github.com/rust-lang/rust/raw/d4d5be18b702b5fd8b38b67d503860f788a14acd/src%2Ftest%2Frun-pass%2Fu128.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fu128.rs?ref=d4d5be18b702b5fd8b38b67d503860f788a14acd", "patch": "@@ -1,8 +1,15 @@\n+#![feature(i128_type)]\n+\n fn main() {\n     let x: u128 = 0xFFFF_FFFF_FFFF_FFFF__FFFF_FFFF_FFFF_FFFF;\n     assert_eq!(0, !x);\n+    assert_eq!(0, !x);\n     let y: u128 = 0xFFFF_FFFF_FFFF_FFFF__FFFF_FFFF_FFFF_FFFE;\n     assert_eq!(!1, y);\n+    assert_eq!(x, y | 1);\n+    assert_eq!(0xFAFF_0000_FF8F_0000__FFFF_0000_FFFF_FFFE,\n+               y &\n+               0xFAFF_0000_FF8F_0000__FFFF_0000_FFFF_FFFF);\n     let z: u128 = 0xABCD_EF;\n     assert_eq!(z * z * z * z, 0x33EE_0E2A_54E2_59DA_A0E7_8E41);\n     assert_eq!(z + z + z + z, 0x2AF3_7BC);\n@@ -13,6 +20,8 @@ fn main() {\n     assert_eq!(0x1000_0000_0000_0000_0000_0000_0000_000,\n                k - 0x234_5678_9ABC_DEFF_EDCB_A987_6543_210);\n     assert_eq!(0x6EF5_DE4C_D3BC_2AAA_3BB4_CC5D_D6EE_8, k / 42);\n+    assert_eq!(0, k % 42);\n+    assert_eq!(15, z % 42);\n     assert_eq!(0x91A2_B3C4_D5E6_F7, k >> 65);\n     assert_eq!(0xFDB9_7530_ECA8_6420_0000_0000_0000_0000, k << 65);\n     assert!(k > z);"}]}