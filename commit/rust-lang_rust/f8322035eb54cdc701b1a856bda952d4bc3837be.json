{"sha": "f8322035eb54cdc701b1a856bda952d4bc3837be", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY4MzIyMDM1ZWI1NGNkYzcwMWIxYTg1NmJkYTk1MmQ0YmMzODM3YmU=", "commit": {"author": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-10-14T19:31:15Z"}, "committer": {"name": "Andrew Paseltiner", "email": "apaseltiner@gmail.com", "date": "2016-10-16T23:48:59Z"}, "message": "Implement `RefUnwindSafe` for atomic types\n\nCloses #37136", "tree": {"sha": "fed48b827ef63c90961b560bc30718c078b1ec4a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fed48b827ef63c90961b560bc30718c078b1ec4a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f8322035eb54cdc701b1a856bda952d4bc3837be", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdBQJYBBHrFhxhcGFzZWx0aW5lckBnbWFpbC5jb20ACgkQ2lzcFfm+\n2yun0hAAp598pMI6TwGiE7pzxXJSCtGaJpTiPql+zjS6ybCuUxegxfMFpWmF4SSF\nqjwAe//o2gYW0aHKF+c1FwesrlEMWftVAa2UDkS+WsI0wII33ZiDJcNJJKfCjQyh\nKq8h9BSLukmWzlewVZPDl/8FB3KS+sRJlo7BPHd0uonduG28zTfBesXcGq5qdIc/\nRKB5RBX19z8C5JtT1lCcrKkR4HTkOH5CKSnWvpkms4yfTKnwj6cmLS3ME87k4pKZ\n2hdvSevxPzDkJcGvl4hkSO2pI7PTBF2Py5j+lAmKxAqTmYs3TRiz81CGH8CVMqVH\n6zX8WEVrH/VZY1UY1KEFSfd4JIThw63ZzVr82mLyVi2fUeFfrjVfadN7P95WNV4I\npNLAC5jWUnEfXYafd3kCcRToJ5qfVvBZ83x1gRBd68BNSIhqq4ODI3ZwyENjK4an\nG8+pRsU0KKPuMzEPEsPeL7XkJB4DL2ld8iBfdpkkvDM+PcrCXoHR7zp30+4HwYbK\nIDvO6n3fhrSgN+fngmmHbLFn8fE9hgOaUovjLuJlzLMfYXyRVFRxHXpeRF4fJPjA\nxUNHWe8yRX3wKLooq+MkoqNFs/KA5NVqZQRP+7ibdg2HIF6zBtacC3dLgykD/Can\nWeGgtnRcgQOUfp7aEY/6S5jgw7nnom0ff+pKwoIS+65xZI+szEI=\n=ny8c\n-----END PGP SIGNATURE-----", "payload": "tree fed48b827ef63c90961b560bc30718c078b1ec4a\nparent 40cd1fdf0a951e2aa1a042c4cba613f5a2d50dcf\nauthor Andrew Paseltiner <apaseltiner@gmail.com> 1476473475 -0400\ncommitter Andrew Paseltiner <apaseltiner@gmail.com> 1476661739 -0400\n\nImplement `RefUnwindSafe` for atomic types\n\nCloses #37136\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f8322035eb54cdc701b1a856bda952d4bc3837be", "html_url": "https://github.com/rust-lang/rust/commit/f8322035eb54cdc701b1a856bda952d4bc3837be", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f8322035eb54cdc701b1a856bda952d4bc3837be/comments", "author": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "committer": {"login": "apasel422", "id": 8644784, "node_id": "MDQ6VXNlcjg2NDQ3ODQ=", "avatar_url": "https://avatars.githubusercontent.com/u/8644784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/apasel422", "html_url": "https://github.com/apasel422", "followers_url": "https://api.github.com/users/apasel422/followers", "following_url": "https://api.github.com/users/apasel422/following{/other_user}", "gists_url": "https://api.github.com/users/apasel422/gists{/gist_id}", "starred_url": "https://api.github.com/users/apasel422/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/apasel422/subscriptions", "organizations_url": "https://api.github.com/users/apasel422/orgs", "repos_url": "https://api.github.com/users/apasel422/repos", "events_url": "https://api.github.com/users/apasel422/events{/privacy}", "received_events_url": "https://api.github.com/users/apasel422/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "40cd1fdf0a951e2aa1a042c4cba613f5a2d50dcf", "url": "https://api.github.com/repos/rust-lang/rust/commits/40cd1fdf0a951e2aa1a042c4cba613f5a2d50dcf", "html_url": "https://github.com/rust-lang/rust/commit/40cd1fdf0a951e2aa1a042c4cba613f5a2d50dcf"}], "stats": {"total": 44, "additions": 43, "deletions": 1}, "files": [{"sha": "e697c15baab7bb55cec5d5c62fac37ab83dd3a36", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/f8322035eb54cdc701b1a856bda952d4bc3837be/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8322035eb54cdc701b1a856bda952d4bc3837be/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=f8322035eb54cdc701b1a856bda952d4bc3837be", "patch": "@@ -218,6 +218,7 @@\n #![feature(associated_consts)]\n #![feature(borrow_state)]\n #![feature(box_syntax)]\n+#![feature(cfg_target_has_atomic)]\n #![feature(cfg_target_thread_local)]\n #![feature(cfg_target_vendor)]\n #![feature(char_escape_debug)]\n@@ -239,6 +240,7 @@\n #![feature(heap_api)]\n #![feature(inclusive_range)]\n #![feature(int_error_internals)]\n+#![feature(integer_atomics)]\n #![feature(into_cow)]\n #![feature(lang_items)]\n #![feature(libc)]"}, {"sha": "a7e8c4fab3735031cab62da9896c41949a309a38", "filename": "src/libstd/panic.rs", "status": "modified", "additions": 41, "deletions": 1, "changes": 42, "blob_url": "https://github.com/rust-lang/rust/blob/f8322035eb54cdc701b1a856bda952d4bc3837be/src%2Flibstd%2Fpanic.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f8322035eb54cdc701b1a856bda952d4bc3837be/src%2Flibstd%2Fpanic.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fpanic.rs?ref=f8322035eb54cdc701b1a856bda952d4bc3837be", "patch": "@@ -18,7 +18,7 @@ use ops::{Deref, DerefMut};\n use panicking;\n use ptr::{Unique, Shared};\n use rc::Rc;\n-use sync::{Arc, Mutex, RwLock};\n+use sync::{Arc, Mutex, RwLock, atomic};\n use thread::Result;\n \n #[stable(feature = \"panic_hooks\", since = \"1.10.0\")]\n@@ -231,6 +231,46 @@ impl<T: ?Sized> RefUnwindSafe for Mutex<T> {}\n #[stable(feature = \"unwind_safe_lock_refs\", since = \"1.12.0\")]\n impl<T: ?Sized> RefUnwindSafe for RwLock<T> {}\n \n+#[cfg(target_has_atomic = \"ptr\")]\n+#[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+impl RefUnwindSafe for atomic::AtomicIsize {}\n+#[cfg(target_has_atomic = \"8\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicI8 {}\n+#[cfg(target_has_atomic = \"16\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicI16 {}\n+#[cfg(target_has_atomic = \"32\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicI32 {}\n+#[cfg(target_has_atomic = \"64\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicI64 {}\n+\n+#[cfg(target_has_atomic = \"ptr\")]\n+#[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+impl RefUnwindSafe for atomic::AtomicUsize {}\n+#[cfg(target_has_atomic = \"8\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicU8 {}\n+#[cfg(target_has_atomic = \"16\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicU16 {}\n+#[cfg(target_has_atomic = \"32\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicU32 {}\n+#[cfg(target_has_atomic = \"64\")]\n+#[unstable(feature = \"integer_atomics\", issue = \"32976\")]\n+impl RefUnwindSafe for atomic::AtomicU64 {}\n+\n+#[cfg(target_has_atomic = \"8\")]\n+#[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+impl RefUnwindSafe for atomic::AtomicBool {}\n+\n+#[cfg(target_has_atomic = \"ptr\")]\n+#[stable(feature = \"unwind_safe_atomic_refs\", since = \"1.14.0\")]\n+impl<T> RefUnwindSafe for atomic::AtomicPtr<T> {}\n+\n #[stable(feature = \"catch_unwind\", since = \"1.9.0\")]\n impl<T> Deref for AssertUnwindSafe<T> {\n     type Target = T;"}]}