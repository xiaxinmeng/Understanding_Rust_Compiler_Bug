{"sha": "51d7665be170df3abbaf4bc0fcf435820011d214", "node_id": "C_kwDOAAsO6NoAKDUxZDc2NjViZTE3MGRmM2FiYmFmNGJjMGZjZjQzNTgyMDAxMWQyMTQ", "commit": {"author": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2022-01-12T17:46:18Z"}, "committer": {"name": "Andy Russell", "email": "arussell123@gmail.com", "date": "2022-01-13T16:13:01Z"}, "message": "rustdoc: remove hand-rolled isatty", "tree": {"sha": "b5ef25ab4d3de3a60de2e4619889927c6a5512ba", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b5ef25ab4d3de3a60de2e4619889927c6a5512ba"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/51d7665be170df3abbaf4bc0fcf435820011d214", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQFKBAABCAA0FiEELriChyEaiMu0yCg7viIhAz7bw3QFAmHgT5AWHGFydXNzZWxs\nMTIzQGdtYWlsLmNvbQAKCRC+IiEDPtvDdI0bCACMA2RUDybqWQWd2KoL4xDr47A4\nl3NaNvZVDyISy1DdqfTuyZBnswfFwF5npeQWPRuHBFNcSLlZAYiTGx4030TRKqVV\nunDsE5VWL8Qb6Vj43dBELTNW2ImWNYN6oRt2Q3xnjHz+us75zUH4LOhymhiRNn6j\nvJXOr/NafCcztOlznjLHXuljdxQBX2oNDfZPsVvLp2k9NJxUgf/qHACbD5w805aE\njfRLT48eQ+aFWTrepeoN523Rhtb0ymxnd8U97wMNcHVrtwD0e0c2oZ+pOoUQiIhP\nzqZlNiTafttv97Rs1WQbhY8pvVmdCqPqQFlC7bGe8B6ERvHunGKsMzwAQmVX\n=v3B3\n-----END PGP SIGNATURE-----", "payload": "tree b5ef25ab4d3de3a60de2e4619889927c6a5512ba\nparent 256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a\nauthor Andy Russell <arussell123@gmail.com> 1642009578 -0500\ncommitter Andy Russell <arussell123@gmail.com> 1642090381 -0500\n\nrustdoc: remove hand-rolled isatty\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/51d7665be170df3abbaf4bc0fcf435820011d214", "html_url": "https://github.com/rust-lang/rust/commit/51d7665be170df3abbaf4bc0fcf435820011d214", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/51d7665be170df3abbaf4bc0fcf435820011d214/comments", "author": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "committer": {"login": "euclio", "id": 1372438, "node_id": "MDQ6VXNlcjEzNzI0Mzg=", "avatar_url": "https://avatars.githubusercontent.com/u/1372438?v=4", "gravatar_id": "", "url": "https://api.github.com/users/euclio", "html_url": "https://github.com/euclio", "followers_url": "https://api.github.com/users/euclio/followers", "following_url": "https://api.github.com/users/euclio/following{/other_user}", "gists_url": "https://api.github.com/users/euclio/gists{/gist_id}", "starred_url": "https://api.github.com/users/euclio/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/euclio/subscriptions", "organizations_url": "https://api.github.com/users/euclio/orgs", "repos_url": "https://api.github.com/users/euclio/repos", "events_url": "https://api.github.com/users/euclio/events{/privacy}", "received_events_url": "https://api.github.com/users/euclio/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "url": "https://api.github.com/repos/rust-lang/rust/commits/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a", "html_url": "https://github.com/rust-lang/rust/commit/256721ee519f6ff15dc5c1cfaf3ebf9af75efa4a"}], "stats": {"total": 58, "additions": 17, "deletions": 41}, "files": [{"sha": "86f37c3087a0945604c69f65537b6cc30caa6347", "filename": "Cargo.lock", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51d7665be170df3abbaf4bc0fcf435820011d214/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/51d7665be170df3abbaf4bc0fcf435820011d214/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=51d7665be170df3abbaf4bc0fcf435820011d214", "patch": "@@ -4679,6 +4679,7 @@ version = \"0.0.0\"\n dependencies = [\n  \"arrayvec\",\n  \"askama\",\n+ \"atty\",\n  \"expect-test\",\n  \"itertools 0.9.0\",\n  \"minifier\","}, {"sha": "b14ecaf0197b59490dd3b74d7b0ee6dc8012a862", "filename": "src/librustdoc/Cargo.toml", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/51d7665be170df3abbaf4bc0fcf435820011d214/src%2Flibrustdoc%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/51d7665be170df3abbaf4bc0fcf435820011d214/src%2Flibrustdoc%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2FCargo.toml?ref=51d7665be170df3abbaf4bc0fcf435820011d214", "patch": "@@ -9,6 +9,7 @@ path = \"lib.rs\"\n [dependencies]\n arrayvec = { version = \"0.7\", default-features = false }\n askama = { version = \"0.11\", default-features = false }\n+atty = \"0.2\"\n pulldown-cmark = { version = \"0.9\", default-features = false }\n minifier = \"0.0.41\"\n rayon = \"1.3.1\""}, {"sha": "572474f9307bf891d775290536bb7e245917a8a7", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 15, "deletions": 41, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/51d7665be170df3abbaf4bc0fcf435820011d214/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/51d7665be170df3abbaf4bc0fcf435820011d214/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=51d7665be170df3abbaf4bc0fcf435820011d214", "patch": "@@ -70,7 +70,8 @@ extern crate tikv_jemalloc_sys;\n use tikv_jemalloc_sys as jemalloc_sys;\n \n use std::default::Default;\n-use std::env;\n+use std::env::{self, VarError};\n+use std::io;\n use std::process;\n \n use rustc_driver::{abort_on_err, describe_lints};\n@@ -178,47 +179,20 @@ pub fn main() {\n }\n \n fn init_logging() {\n-    use std::io;\n-\n-    // FIXME remove these and use winapi 0.3 instead\n-    // Duplicates: bootstrap/compile.rs, librustc_errors/emitter.rs, rustc_driver/lib.rs\n-    #[cfg(unix)]\n-    fn stdout_isatty() -> bool {\n-        extern crate libc;\n-        unsafe { libc::isatty(libc::STDOUT_FILENO) != 0 }\n-    }\n-\n-    #[cfg(windows)]\n-    fn stdout_isatty() -> bool {\n-        extern crate winapi;\n-        use winapi::um::consoleapi::GetConsoleMode;\n-        use winapi::um::processenv::GetStdHandle;\n-        use winapi::um::winbase::STD_OUTPUT_HANDLE;\n-\n-        unsafe {\n-            let handle = GetStdHandle(STD_OUTPUT_HANDLE);\n-            let mut out = 0;\n-            GetConsoleMode(handle, &mut out) != 0\n-        }\n-    }\n-\n-    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\") {\n-        Ok(value) => match value.as_ref() {\n-            \"always\" => true,\n-            \"never\" => false,\n-            \"auto\" => stdout_isatty(),\n-            _ => early_error(\n-                ErrorOutputType::default(),\n-                &format!(\n-                    \"invalid log color value '{}': expected one of always, never, or auto\",\n-                    value\n-                ),\n-            ),\n-        },\n-        Err(std::env::VarError::NotPresent) => stdout_isatty(),\n-        Err(std::env::VarError::NotUnicode(_value)) => early_error(\n+    let color_logs = match std::env::var(\"RUSTDOC_LOG_COLOR\").as_deref() {\n+        Ok(\"always\") => true,\n+        Ok(\"never\") => false,\n+        Ok(\"auto\") | Err(VarError::NotPresent) => atty::is(atty::Stream::Stdout),\n+        Ok(value) => early_error(\n+            ErrorOutputType::default(),\n+            &format!(\"invalid log color value '{}': expected one of always, never, or auto\", value),\n+        ),\n+        Err(VarError::NotUnicode(value)) => early_error(\n             ErrorOutputType::default(),\n-            \"non-Unicode log color value: expected one of always, never, or auto\",\n+            &format!(\n+                \"invalid log color value '{}': expected one of always, never, or auto\",\n+                value.to_string_lossy()\n+            ),\n         ),\n     };\n     let filter = tracing_subscriber::EnvFilter::from_env(\"RUSTDOC_LOG\");"}]}