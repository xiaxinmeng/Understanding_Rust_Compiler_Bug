{"sha": "fc513861b114dbe9c9c5440c72838b2623a91bb6", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNTEzODYxYjExNGRiZTljOWM1NDQwYzcyODM4YjI2MjNhOTFiYjY=", "commit": {"author": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-05-18T23:20:48Z"}, "committer": {"name": "Andre Bogus", "email": "bogusandre@gmail.com", "date": "2017-05-18T23:20:48Z"}, "message": "fix some clippy warnings in librustc_errors", "tree": {"sha": "517ecc3a7ccd964c573861d10fe3f959ee59de8d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/517ecc3a7ccd964c573861d10fe3f959ee59de8d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc513861b114dbe9c9c5440c72838b2623a91bb6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc513861b114dbe9c9c5440c72838b2623a91bb6", "html_url": "https://github.com/rust-lang/rust/commit/fc513861b114dbe9c9c5440c72838b2623a91bb6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc513861b114dbe9c9c5440c72838b2623a91bb6/comments", "author": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "committer": {"login": "llogiq", "id": 4200835, "node_id": "MDQ6VXNlcjQyMDA4MzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4200835?v=4", "gravatar_id": "", "url": "https://api.github.com/users/llogiq", "html_url": "https://github.com/llogiq", "followers_url": "https://api.github.com/users/llogiq/followers", "following_url": "https://api.github.com/users/llogiq/following{/other_user}", "gists_url": "https://api.github.com/users/llogiq/gists{/gist_id}", "starred_url": "https://api.github.com/users/llogiq/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/llogiq/subscriptions", "organizations_url": "https://api.github.com/users/llogiq/orgs", "repos_url": "https://api.github.com/users/llogiq/repos", "events_url": "https://api.github.com/users/llogiq/events{/privacy}", "received_events_url": "https://api.github.com/users/llogiq/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0ed1ec9f9eb8174273867343d01177b5ac13ff4c", "url": "https://api.github.com/repos/rust-lang/rust/commits/0ed1ec9f9eb8174273867343d01177b5ac13ff4c", "html_url": "https://github.com/rust-lang/rust/commit/0ed1ec9f9eb8174273867343d01177b5ac13ff4c"}], "stats": {"total": 14, "additions": 6, "deletions": 8}, "files": [{"sha": "0081339a363f73f98ba35168ece1e11833540d49", "filename": "src/librustc_errors/diagnostic_builder.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Fdiagnostic_builder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Fdiagnostic_builder.rs?ref=fc513861b114dbe9c9c5440c72838b2623a91bb6", "patch": "@@ -192,8 +192,8 @@ impl<'a> Debug for DiagnosticBuilder<'a> {\n     }\n }\n \n-/// Destructor bomb - a DiagnosticBuilder must be either emitted or cancelled or\n-/// we emit a bug.\n+/// Destructor bomb - a `DiagnosticBuilder` must be either emitted or cancelled\n+/// or we emit a bug.\n impl<'a> Drop for DiagnosticBuilder<'a> {\n     fn drop(&mut self) {\n         if !panicking() && !self.cancelled() {"}, {"sha": "a9645f9ab7bb2305398a4ff23535cc93ee3d73c7", "filename": "src/librustc_errors/emitter.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Femitter.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Femitter.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Femitter.rs?ref=fc513861b114dbe9c9c5440c72838b2623a91bb6", "patch": "@@ -1296,10 +1296,8 @@ impl Write for BufferedWriter {\n     }\n     fn flush(&mut self) -> io::Result<()> {\n         let mut stderr = io::stderr();\n-        let result = (|| {\n-            stderr.write_all(&self.buffer)?;\n-            stderr.flush()\n-        })();\n+        let result = stderr.write_all(&self.buffer)\n+                           .and_then(|_| stderr.flush());\n         self.buffer.clear();\n         result\n     }"}, {"sha": "c91dc9d87978dedb3c1011792010971c70ab0e29", "filename": "src/librustc_errors/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/fc513861b114dbe9c9c5440c72838b2623a91bb6/src%2Flibrustc_errors%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_errors%2Flib.rs?ref=fc513861b114dbe9c9c5440c72838b2623a91bb6", "patch": "@@ -383,7 +383,7 @@ impl Handler {\n     pub fn span_fatal<S: Into<MultiSpan>>(&self, sp: S, msg: &str) -> FatalError {\n         self.emit(&sp.into(), msg, Fatal);\n         self.panic_if_treat_err_as_bug();\n-        return FatalError;\n+        FatalError\n     }\n     pub fn span_fatal_with_code<S: Into<MultiSpan>>(&self,\n                                                     sp: S,\n@@ -392,7 +392,7 @@ impl Handler {\n                                                     -> FatalError {\n         self.emit_with_code(&sp.into(), msg, code, Fatal);\n         self.panic_if_treat_err_as_bug();\n-        return FatalError;\n+        FatalError\n     }\n     pub fn span_err<S: Into<MultiSpan>>(&self, sp: S, msg: &str) {\n         self.emit(&sp.into(), msg, Error);"}]}