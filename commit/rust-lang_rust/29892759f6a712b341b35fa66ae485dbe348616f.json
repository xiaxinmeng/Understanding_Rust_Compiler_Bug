{"sha": "29892759f6a712b341b35fa66ae485dbe348616f", "node_id": "C_kwDOAAsO6NoAKDI5ODkyNzU5ZjZhNzEyYjM0MWIzNWZhNjZhZTQ4NWRiZTM0ODYxNmY", "commit": {"author": {"name": "Yuki Okushi", "email": "jtitor@2k36.org", "date": "2022-07-25T22:14:44Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2022-07-25T22:14:44Z"}, "message": "Rollup merge of #97077 - ouz-a:Optimize-backend, r=oli-obk\n\nSimplify some code that depend on Deref\n\nNow that we can assume #97025 works, it's safe to expect Deref is always in the first place of projections. With this, I was able to simplify some code that depended on Deref's place in projections. When we are able to move Derefer before `ElaborateDrops` successfully we will be able to optimize more places.\n\nr? `@oli-obk`", "tree": {"sha": "f280fdcbe9f88eccf83b8fbabc33160ccda142ae", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f280fdcbe9f88eccf83b8fbabc33160ccda142ae"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/29892759f6a712b341b35fa66ae485dbe348616f", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJi3xXUCRBK7hj4Ov3rIwAAjbAIAHXTL8wdSDt1syhJap6PBAWT\ndc05O7lg0IZ2VU2eQQn6qRmQiHpGF4KCXE4qx6S0hc4HYADwd6BTVWo3DeOLtCWD\nzQuGjLXpVF6a1VU4DU6ChCItBuw1gMIL8zjtdQxS2hHw/H/vQQYzy+R1wFdb08LT\ny/XkJosg/hCQL2Cs/svBFH7FmO6dPlWrAFHuaB3sR7UltL1oZn3wl0k8kx4YrKoq\nVu7jCe0xHlg3npvn9FYf7Xz2oEEBqobZ4TP4Skvpc++gN6F+/DtZPCcZ21Yh/M9e\nuUjaVoUuOaz+UOBNmMH+c+wt4Pj3fBVE1N+YkyK88XhZFUuSzi/aVFl09W/7SFU=\n=tjkE\n-----END PGP SIGNATURE-----\n", "payload": "tree f280fdcbe9f88eccf83b8fbabc33160ccda142ae\nparent c1647e10adb688cb9e5bb069946daa969d48f326\nparent 9f00d836af0a02110a0a47f4d4c7c7182f04574f\nauthor Yuki Okushi <jtitor@2k36.org> 1658787284 +0900\ncommitter GitHub <noreply@github.com> 1658787284 +0900\n\nRollup merge of #97077 - ouz-a:Optimize-backend, r=oli-obk\n\nSimplify some code that depend on Deref\n\nNow that we can assume #97025 works, it's safe to expect Deref is always in the first place of projections. With this, I was able to simplify some code that depended on Deref's place in projections. When we are able to move Derefer before `ElaborateDrops` successfully we will be able to optimize more places.\n\nr? `@oli-obk`\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/29892759f6a712b341b35fa66ae485dbe348616f", "html_url": "https://github.com/rust-lang/rust/commit/29892759f6a712b341b35fa66ae485dbe348616f", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/29892759f6a712b341b35fa66ae485dbe348616f/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c1647e10adb688cb9e5bb069946daa969d48f326", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1647e10adb688cb9e5bb069946daa969d48f326", "html_url": "https://github.com/rust-lang/rust/commit/c1647e10adb688cb9e5bb069946daa969d48f326"}, {"sha": "9f00d836af0a02110a0a47f4d4c7c7182f04574f", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f00d836af0a02110a0a47f4d4c7c7182f04574f", "html_url": "https://github.com/rust-lang/rust/commit/9f00d836af0a02110a0a47f4d4c7c7182f04574f"}], "stats": {"total": 52, "additions": 22, "deletions": 30}, "files": [{"sha": "268c4d765030568f074d975153a2bd6fa30a8f1b", "filename": "compiler/rustc_codegen_ssa/src/mir/place.rs", "status": "modified", "additions": 3, "deletions": 9, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fmir%2Fplace.rs?ref=29892759f6a712b341b35fa66ae485dbe348616f", "patch": "@@ -435,18 +435,12 @@ impl<'a, 'tcx, Bx: BuilderMethods<'a, 'tcx>> FunctionCx<'a, 'tcx, Bx> {\n             LocalRef::Place(place) => place,\n             LocalRef::UnsizedPlace(place) => bx.load_operand(place).deref(cx),\n             LocalRef::Operand(..) => {\n-                if let Some(elem) = place_ref\n-                    .projection\n-                    .iter()\n-                    .enumerate()\n-                    .find(|elem| matches!(elem.1, mir::ProjectionElem::Deref))\n-                {\n-                    base = elem.0 + 1;\n+                if place_ref.has_deref() {\n+                    base = 1;\n                     let cg_base = self.codegen_consume(\n                         bx,\n-                        mir::PlaceRef { projection: &place_ref.projection[..elem.0], ..place_ref },\n+                        mir::PlaceRef { projection: &place_ref.projection[..0], ..place_ref },\n                     );\n-\n                     cg_base.deref(bx.cx())\n                 } else {\n                     bug!(\"using operand local {:?} as place\", place_ref);"}, {"sha": "f7311ebdabfd91bcb235b98cfa6236f146000206", "filename": "compiler/rustc_middle/src/mir/mod.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fmir%2Fmod.rs?ref=29892759f6a712b341b35fa66ae485dbe348616f", "patch": "@@ -1461,6 +1461,14 @@ impl<'tcx> Place<'tcx> {\n         self.projection.iter().any(|elem| elem.is_indirect())\n     }\n \n+    /// If MirPhase >= Derefered and if projection contains Deref,\n+    /// It's guaranteed to be in the first place\n+    pub fn has_deref(&self) -> bool {\n+        // To make sure this is not accidently used in wrong mir phase\n+        debug_assert!(!self.projection[1..].contains(&PlaceElem::Deref));\n+        self.projection.first() == Some(&PlaceElem::Deref)\n+    }\n+\n     /// Finds the innermost `Local` from this `Place`, *if* it is either a local itself or\n     /// a single deref of a local.\n     #[inline(always)]\n@@ -1533,6 +1541,12 @@ impl<'tcx> PlaceRef<'tcx> {\n         }\n     }\n \n+    /// If MirPhase >= Derefered and if projection contains Deref,\n+    /// It's guaranteed to be in the first place\n+    pub fn has_deref(&self) -> bool {\n+        self.projection.first() == Some(&PlaceElem::Deref)\n+    }\n+\n     /// If this place represents a local variable like `_X` with no\n     /// projections, return `Some(_X)`.\n     #[inline]"}, {"sha": "9c5896c4e4aedef2008e849348559d97ffdabb9b", "filename": "compiler/rustc_mir_transform/src/add_retag.rs", "status": "modified", "additions": 5, "deletions": 21, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "raw_url": "https://github.com/rust-lang/rust/raw/29892759f6a712b341b35fa66ae485dbe348616f/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fadd_retag.rs?ref=29892759f6a712b341b35fa66ae485dbe348616f", "patch": "@@ -15,22 +15,9 @@ pub struct AddRetag;\n /// (Concurrent accesses by other threads are no problem as these are anyway non-atomic\n /// copies.  Data races are UB.)\n fn is_stable(place: PlaceRef<'_>) -> bool {\n-    place.projection.iter().all(|elem| {\n-        match elem {\n-            // Which place this evaluates to can change with any memory write,\n-            // so cannot assume this to be stable.\n-            ProjectionElem::Deref => false,\n-            // Array indices are interesting, but MIR building generates a *fresh*\n-            // temporary for every array access, so the index cannot be changed as\n-            // a side-effect.\n-            ProjectionElem::Index { .. } |\n-            // The rest is completely boring, they just offset by a constant.\n-            ProjectionElem::Field { .. } |\n-            ProjectionElem::ConstantIndex { .. } |\n-            ProjectionElem::Subslice { .. } |\n-            ProjectionElem::Downcast { .. } => true,\n-        }\n-    })\n+    // Which place this evaluates to can change with any memory write,\n+    // so cannot assume deref to be stable.\n+    !place.has_deref()\n }\n \n /// Determine whether this type may contain a reference (or box), and thus needs retagging.\n@@ -91,11 +78,8 @@ impl<'tcx> MirPass<'tcx> for AddRetag {\n         };\n         let place_base_raw = |place: &Place<'tcx>| {\n             // If this is a `Deref`, get the type of what we are deref'ing.\n-            let deref_base =\n-                place.projection.iter().rposition(|p| matches!(p, ProjectionElem::Deref));\n-            if let Some(deref_base) = deref_base {\n-                let base_proj = &place.projection[..deref_base];\n-                let ty = Place::ty_from(place.local, base_proj, &*local_decls, tcx).ty;\n+            if place.has_deref() {\n+                let ty = &local_decls[place.local].ty;\n                 ty.is_unsafe_ptr()\n             } else {\n                 // Not a deref, and thus not raw."}]}