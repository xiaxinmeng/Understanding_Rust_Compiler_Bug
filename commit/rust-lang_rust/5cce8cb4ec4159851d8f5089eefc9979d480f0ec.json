{"sha": "5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "node_id": "C_kwDOAAsO6NoAKDVjY2U4Y2I0ZWM0MTU5ODUxZDhmNTA4OWVlZmM5OTc5ZDQ4MGYwZWM", "commit": {"author": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-16T23:01:46Z"}, "committer": {"name": "Vadim Petrochenkov", "email": "vadim.petrochenkov@gmail.com", "date": "2022-04-19T19:53:50Z"}, "message": "rustdoc: Sligthly optimize `Attributes` construction and processing before doc link resolution", "tree": {"sha": "1ae953fe5a30e8d9292fb2e68be9871d5f74c0d4", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1ae953fe5a30e8d9292fb2e68be9871d5f74c0d4"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "html_url": "https://github.com/rust-lang/rust/commit/5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/comments", "author": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "committer": {"login": "petrochenkov", "id": 5751617, "node_id": "MDQ6VXNlcjU3NTE2MTc=", "avatar_url": "https://avatars.githubusercontent.com/u/5751617?v=4", "gravatar_id": "", "url": "https://api.github.com/users/petrochenkov", "html_url": "https://github.com/petrochenkov", "followers_url": "https://api.github.com/users/petrochenkov/followers", "following_url": "https://api.github.com/users/petrochenkov/following{/other_user}", "gists_url": "https://api.github.com/users/petrochenkov/gists{/gist_id}", "starred_url": "https://api.github.com/users/petrochenkov/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/petrochenkov/subscriptions", "organizations_url": "https://api.github.com/users/petrochenkov/orgs", "repos_url": "https://api.github.com/users/petrochenkov/repos", "events_url": "https://api.github.com/users/petrochenkov/events{/privacy}", "received_events_url": "https://api.github.com/users/petrochenkov/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "de287df86245bdeed485373d1a3b29ec028d33f5", "url": "https://api.github.com/repos/rust-lang/rust/commits/de287df86245bdeed485373d1a3b29ec028d33f5", "html_url": "https://github.com/rust-lang/rust/commit/de287df86245bdeed485373d1a3b29ec028d33f5"}], "stats": {"total": 75, "additions": 31, "deletions": 44}, "files": [{"sha": "95ac3ab622a149bbdc2ba9b37291902655cdacc6", "filename": "src/librustdoc/clean/types.rs", "status": "modified", "additions": 28, "deletions": 41, "changes": 69, "blob_url": "https://github.com/rust-lang/rust/blob/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fclean%2Ftypes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Ftypes.rs?ref=5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "patch": "@@ -1089,42 +1089,35 @@ impl Attributes {\n         attrs: &[ast::Attribute],\n         additional_attrs: Option<(&[ast::Attribute], DefId)>,\n     ) -> Attributes {\n-        Attributes::from_ast_iter(attrs.iter(), additional_attrs)\n+        // Additional documentation should be shown before the original documentation.\n+        let attrs1 = additional_attrs\n+            .into_iter()\n+            .flat_map(|(attrs, def_id)| attrs.iter().map(move |attr| (attr, Some(def_id))));\n+        let attrs2 = attrs.iter().map(|attr| (attr, None));\n+        Attributes::from_ast_iter(attrs1.chain(attrs2), false)\n     }\n \n     crate fn from_ast_iter<'a>(\n-        attrs: impl Iterator<Item = &'a ast::Attribute>,\n-        additional_attrs: Option<(&[ast::Attribute], DefId)>,\n+        attrs: impl Iterator<Item = (&'a ast::Attribute, Option<DefId>)>,\n+        doc_only: bool,\n     ) -> Attributes {\n-        let mut doc_strings: Vec<DocFragment> = vec![];\n-        let clean_attr = |(attr, parent_module): (&ast::Attribute, Option<DefId>)| {\n-            if let Some((value, kind)) = attr.doc_str_and_comment_kind() {\n-                trace!(\"got doc_str={:?}\", value);\n-                let value = beautify_doc_string(value, kind);\n+        let mut doc_strings = Vec::new();\n+        let mut other_attrs = Vec::new();\n+        for (attr, parent_module) in attrs {\n+            if let Some((doc_str, comment_kind)) = attr.doc_str_and_comment_kind() {\n+                trace!(\"got doc_str={doc_str:?}\");\n+                let doc = beautify_doc_string(doc_str, comment_kind);\n                 let kind = if attr.is_doc_comment() {\n                     DocFragmentKind::SugaredDoc\n                 } else {\n                     DocFragmentKind::RawDoc\n                 };\n-\n-                let frag =\n-                    DocFragment { span: attr.span, doc: value, kind, parent_module, indent: 0 };\n-\n-                doc_strings.push(frag);\n-\n-                None\n-            } else {\n-                Some(attr.clone())\n+                let fragment = DocFragment { span: attr.span, doc, kind, parent_module, indent: 0 };\n+                doc_strings.push(fragment);\n+            } else if !doc_only {\n+                other_attrs.push(attr.clone());\n             }\n-        };\n-\n-        // Additional documentation should be shown before the original documentation\n-        let other_attrs = additional_attrs\n-            .into_iter()\n-            .flat_map(|(attrs, id)| attrs.iter().map(move |attr| (attr, Some(id))))\n-            .chain(attrs.map(|attr| (attr, None)))\n-            .filter_map(clean_attr)\n-            .collect();\n+        }\n \n         Attributes { doc_strings, other_attrs }\n     }\n@@ -1145,23 +1138,17 @@ impl Attributes {\n     }\n \n     /// Return the doc-comments on this item, grouped by the module they came from.\n-    ///\n     /// The module can be different if this is a re-export with added documentation.\n-    crate fn collapsed_doc_value_by_module_level(&self) -> FxHashMap<Option<DefId>, String> {\n-        let mut ret = FxHashMap::default();\n-        if self.doc_strings.len() == 0 {\n-            return ret;\n-        }\n-        let last_index = self.doc_strings.len() - 1;\n-\n-        for (i, new_frag) in self.doc_strings.iter().enumerate() {\n-            let out = ret.entry(new_frag.parent_module).or_default();\n-            add_doc_fragment(out, new_frag);\n-            if i == last_index {\n-                out.pop();\n-            }\n+    ///\n+    /// The last newline is not trimmed so the produced strings are reusable between\n+    /// early and late doc link resolution regardless of their position.\n+    crate fn prepare_to_doc_link_resolution(&self) -> FxHashMap<Option<DefId>, String> {\n+        let mut res = FxHashMap::default();\n+        for fragment in &self.doc_strings {\n+            let out_str = res.entry(fragment.parent_module).or_default();\n+            add_doc_fragment(out_str, fragment);\n         }\n-        ret\n+        res\n     }\n \n     /// Finds all `doc` attributes as NameValues and returns their corresponding values, joined"}, {"sha": "42e87f3f9610b1b54cb855fce0679998e7cce810", "filename": "src/librustdoc/passes/collect_intra_doc_links.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links.rs?ref=5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "patch": "@@ -1050,7 +1050,7 @@ impl<'a, 'tcx> DocVisitor for LinkCollector<'a, 'tcx> {\n         // In the presence of re-exports, this is not the same as the module of the item.\n         // Rather than merging all documentation into one, resolve it one attribute at a time\n         // so we know which module it came from.\n-        for (parent_module, doc) in item.attrs.collapsed_doc_value_by_module_level() {\n+        for (parent_module, doc) in item.attrs.prepare_to_doc_link_resolution() {\n             if !may_have_doc_links(&doc) {\n                 continue;\n             }"}, {"sha": "e2359da870edc21ba6edefa2cfa5250d0e1b373e", "filename": "src/librustdoc/passes/collect_intra_doc_links/early.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5cce8cb4ec4159851d8f5089eefc9979d480f0ec/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fpasses%2Fcollect_intra_doc_links%2Fearly.rs?ref=5cce8cb4ec4159851d8f5089eefc9979d480f0ec", "patch": "@@ -63,7 +63,7 @@ crate fn early_resolve_intra_doc_links(\n }\n \n fn doc_attrs<'a>(attrs: impl Iterator<Item = &'a ast::Attribute>) -> Attributes {\n-    let mut attrs = Attributes::from_ast_iter(attrs.filter(|attr| attr.doc_str().is_some()), None);\n+    let mut attrs = Attributes::from_ast_iter(attrs.map(|attr| (attr, None)), true);\n     attrs.unindent_doc_comments();\n     attrs\n }\n@@ -201,7 +201,7 @@ impl EarlyDocLinkResolver<'_, '_> {\n \n     fn resolve_doc_links(&mut self, attrs: Attributes, module_id: DefId) {\n         let mut need_traits_in_scope = false;\n-        for (doc_module, doc) in attrs.collapsed_doc_value_by_module_level() {\n+        for (doc_module, doc) in attrs.prepare_to_doc_link_resolution() {\n             assert_eq!(doc_module, None);\n             let links = self\n                 .markdown_links"}]}