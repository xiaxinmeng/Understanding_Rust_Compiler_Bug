{"sha": "434c58e1ffa55e9f133352ee2a09ee8f846a94c0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQzNGM1OGUxZmZhNTVlOWYxMzMzNTJlZTJhMDllZThmODQ2YTk0YzA=", "commit": {"author": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-18T17:13:19Z"}, "committer": {"name": "Srinivas Reddy Thatiparthy", "email": "thatiparthysreenivas@gmail.com", "date": "2016-10-18T17:13:19Z"}, "message": "Apply rustfmt on liballoc folder", "tree": {"sha": "5f55c998e944bcc22d89f57eeac931c3c49c0287", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5f55c998e944bcc22d89f57eeac931c3c49c0287"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/434c58e1ffa55e9f133352ee2a09ee8f846a94c0", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\nVersion: GnuPG v1\n\niQIbBAABAgAGBQJYBlgvAAoJEAkcWPS/w2VxZuEP+J0bqMpQqCFbPbvgnUdGwPtG\n8tetDBeyZOPPQitIxw43DgrURPZLEt4LlvsChWf/d4l1UhveufIGtcN0W8E+3vRU\nI5jMA2QXutYf5nWz+1+aiYe7KTqPIcKjUOeDGfAZUi5K0q+jQg/LzEnJrrsmKRSZ\nVVDMoL1bDxtefdmQvqrc3Ezud0Ci/EIlZBMeZJlabwiSjrpSi/4iCcCqwuJ8x5r/\n5fqMAlEkcZ4PzTxk8EoVeXBZco1rGatC8W/2BlmkmfeD6GlyV1IgxS/Fi5cha7bo\n0QFKjmEYiT5DWLp3N8YtbncI1Uj4IEwA6UT0qeF2KZ9Ypv/Cy1EooClvonS1cYDQ\nXbAQDDhMvo+VsSoo+pAoTkETdxI3//xlWxsZcwXBqZHkUm5M98AVhF/VzGNvQ6Do\nd/dGmiB1ELHiB7zvJZoUjdzhZ3Hg1KSzqoZ/9hsakVOeI5YDCGrtIeSxCMMTqWty\nDlKygIT7/xliireTLH+1UOZGuwsHpGJgcJbAr9cHlGYAr85G7Hr2+9+AvMZ+VSp+\nxafDZsARnQ1KrmPRdDDpDtFRy//QMVLrayU5Oe6ubia9MZJPjeiwRk6XiyfgAdVJ\nc8A0OtV5iLiHJoMzg4m35cued/l4aScWw+v2kqtddJvmGBzM0D4f1NCZLtV8+k/C\ngSUe9XTbK8Nc6xJ5v3I=\n=5O5i\n-----END PGP SIGNATURE-----", "payload": "tree 5f55c998e944bcc22d89f57eeac931c3c49c0287\nparent 16eeeac783d2ede28e09f2a433c612dea309fe33\nauthor Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476810799 +0530\ncommitter Srinivas Reddy Thatiparthy <thatiparthysreenivas@gmail.com> 1476810799 +0530\n\nApply rustfmt on liballoc folder\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/434c58e1ffa55e9f133352ee2a09ee8f846a94c0", "html_url": "https://github.com/rust-lang/rust/commit/434c58e1ffa55e9f133352ee2a09ee8f846a94c0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/434c58e1ffa55e9f133352ee2a09ee8f846a94c0/comments", "author": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "committer": {"login": "srinivasreddy", "id": 198396, "node_id": "MDQ6VXNlcjE5ODM5Ng==", "avatar_url": "https://avatars.githubusercontent.com/u/198396?v=4", "gravatar_id": "", "url": "https://api.github.com/users/srinivasreddy", "html_url": "https://github.com/srinivasreddy", "followers_url": "https://api.github.com/users/srinivasreddy/followers", "following_url": "https://api.github.com/users/srinivasreddy/following{/other_user}", "gists_url": "https://api.github.com/users/srinivasreddy/gists{/gist_id}", "starred_url": "https://api.github.com/users/srinivasreddy/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/srinivasreddy/subscriptions", "organizations_url": "https://api.github.com/users/srinivasreddy/orgs", "repos_url": "https://api.github.com/users/srinivasreddy/repos", "events_url": "https://api.github.com/users/srinivasreddy/events{/privacy}", "received_events_url": "https://api.github.com/users/srinivasreddy/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "16eeeac783d2ede28e09f2a433c612dea309fe33", "url": "https://api.github.com/repos/rust-lang/rust/commits/16eeeac783d2ede28e09f2a433c612dea309fe33", "html_url": "https://github.com/rust-lang/rust/commit/16eeeac783d2ede28e09f2a433c612dea309fe33"}], "stats": {"total": 14, "additions": 3, "deletions": 11}, "files": [{"sha": "f23ea0ea8bf710dcf7794e2560ca14e7eb6595f6", "filename": "src/liballoc/raw_vec.rs", "status": "modified", "additions": 3, "deletions": 11, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/434c58e1ffa55e9f133352ee2a09ee8f846a94c0/src%2Fliballoc%2Fraw_vec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/434c58e1ffa55e9f133352ee2a09ee8f846a94c0/src%2Fliballoc%2Fraw_vec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fraw_vec.rs?ref=434c58e1ffa55e9f133352ee2a09ee8f846a94c0", "patch": "@@ -57,11 +57,7 @@ impl<T> RawVec<T> {\n     pub fn new() -> Self {\n         unsafe {\n             // !0 is usize::MAX. This branch should be stripped at compile time.\n-            let cap = if mem::size_of::<T>() == 0 {\n-                !0\n-            } else {\n-                0\n-            };\n+            let cap = if mem::size_of::<T>() == 0 { !0 } else { 0 };\n \n             // heap::EMPTY doubles as \"unallocated\" and \"zero-sized allocation\"\n             RawVec {\n@@ -209,11 +205,7 @@ impl<T> RawVec<T> {\n \n             let (new_cap, ptr) = if self.cap == 0 {\n                 // skip to 4 because tiny Vec's are dumb; but not if that would cause overflow\n-                let new_cap = if elem_size > (!0) / 8 {\n-                    1\n-                } else {\n-                    4\n-                };\n+                let new_cap = if elem_size > (!0) / 8 { 1 } else { 4 };\n                 let ptr = heap::allocate(new_cap * elem_size, align);\n                 (new_cap, ptr)\n             } else {\n@@ -347,7 +339,7 @@ impl<T> RawVec<T> {\n         let elem_size = mem::size_of::<T>();\n         // Nothing we can really do about these checks :(\n         let required_cap = used_cap.checked_add(needed_extra_cap)\n-                                   .expect(\"capacity overflow\");\n+            .expect(\"capacity overflow\");\n         // Cannot overflow, because `cap <= isize::MAX`, and type of `cap` is `usize`.\n         let double_cap = self.cap * 2;\n         // `double_cap` guarantees exponential growth."}]}