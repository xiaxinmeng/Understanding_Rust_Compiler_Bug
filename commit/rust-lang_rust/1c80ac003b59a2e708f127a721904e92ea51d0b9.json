{"sha": "1c80ac003b59a2e708f127a721904e92ea51d0b9", "node_id": "C_kwDOAAsO6NoAKDFjODBhYzAwM2I1OWEyZTcwOGYxMjdhNzIxOTA0ZTkyZWE1MWQwYjk", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T08:48:31Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2022-05-13T08:48:31Z"}, "message": "Auto merge of #96930 - ayrtonm:mips32-tmp-file, r=petrochenkov\n\nFix e_flags for 32-bit MIPS targets in generated object file\n\nIn #95604 the compiler started generating a temporary symbols.o which is added to the linker invocation. This object file has an `e_flags` which is invalid for 32-bit MIPS targets. Even though symbols.o doesn't contain code, linking these targets with [lld fails](https://github.com/llvm/llvm-project/blob/main/lld/ELF/Arch/MipsArchTree.cpp#L76-L79) with\n```\nrust-lld: error: foo-cgu.0.rcgu.o: ABI 'o32' is incompatible with target ABI 'n64'\n```\nbecause it omits the ABI bits (`EF_MIPS_ABI_O32`) so lld assumes it's using the N64 ABI. This breaks linking on nightly for the out-of-tree [mipsel-sony-psx target](https://github.com/ayrtonm/psx-sdk-rs/issues/9), the builtin mipsel-sony-psp target (cc `@overdrivenpotato)` and probably any other 32-bit MIPS target using lld.\n\nThis PR sets the ABI in `e_flags` to O32 since that's the only ABI for 32-bit MIPS that LLVM supports. It also sets other `e_flags` bits based on the target to avoid similar issues with the object file arch and PIC. I had to bump the object crate version since some of these constants were [added recently](https://github.com/gimli-rs/object/pull/433). I'm not sure if this PR needs a test, but I can confirm that it fixes the linking issue on both targets I mentioned.", "tree": {"sha": "0f4b5d1b2571a2033d632344436cc6e5272a0a00", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0f4b5d1b2571a2033d632344436cc6e5272a0a00"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1c80ac003b59a2e708f127a721904e92ea51d0b9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1c80ac003b59a2e708f127a721904e92ea51d0b9", "html_url": "https://github.com/rust-lang/rust/commit/1c80ac003b59a2e708f127a721904e92ea51d0b9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1c80ac003b59a2e708f127a721904e92ea51d0b9/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "97d48bec2d2ac7e1aac807e1fe3e8341189db7da", "url": "https://api.github.com/repos/rust-lang/rust/commits/97d48bec2d2ac7e1aac807e1fe3e8341189db7da", "html_url": "https://github.com/rust-lang/rust/commit/97d48bec2d2ac7e1aac807e1fe3e8341189db7da"}, {"sha": "3d5b1eeb7592da43442866d26af5e503c3169b6c", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d5b1eeb7592da43442866d26af5e503c3169b6c", "html_url": "https://github.com/rust-lang/rust/commit/3d5b1eeb7592da43442866d26af5e503c3169b6c"}], "stats": {"total": 38, "additions": 23, "deletions": 15}, "files": [{"sha": "afe1814de67201b1c5d18a17827b147713525867", "filename": "Cargo.lock", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/1c80ac003b59a2e708f127a721904e92ea51d0b9/Cargo.lock", "raw_url": "https://github.com/rust-lang/rust/raw/1c80ac003b59a2e708f127a721904e92ea51d0b9/Cargo.lock", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/Cargo.lock?ref=1c80ac003b59a2e708f127a721904e92ea51d0b9", "patch": "@@ -2509,9 +2509,9 @@ dependencies = [\n \n [[package]]\n name = \"object\"\n-version = \"0.28.1\"\n+version = \"0.28.4\"\n source = \"registry+https://github.com/rust-lang/crates.io-index\"\n-checksum = \"7ce8b38d41f9f3618fc23f908faae61510f8d8ce2d99cbe910641e8f1971f084\"\n+checksum = \"e42c982f2d955fac81dd7e1d0e1426a7d702acd9c98d19ab01083a6a0328c424\"\n dependencies = [\n  \"crc32fast\",\n  \"flate2\",\n@@ -3617,7 +3617,7 @@ dependencies = [\n  \"itertools\",\n  \"jobserver\",\n  \"libc\",\n- \"object 0.28.1\",\n+ \"object 0.28.4\",\n  \"pathdiff\",\n  \"regex\",\n  \"rustc_apfloat\",\n@@ -5207,7 +5207,7 @@ checksum = \"dd95b4559c196987c8451b4e14d08a4c796c2844f9adf4d2a2dbc9b3142843be\"\n dependencies = [\n  \"gimli 0.26.1\",\n  \"hashbrown 0.11.2\",\n- \"object 0.28.1\",\n+ \"object 0.28.4\",\n  \"tracing\",\n ]\n "}, {"sha": "93b10a07e449d1be6977cd61cae8fd1f24463086", "filename": "compiler/rustc_codegen_ssa/Cargo.toml", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1c80ac003b59a2e708f127a721904e92ea51d0b9/compiler%2Frustc_codegen_ssa%2FCargo.toml", "raw_url": "https://github.com/rust-lang/rust/raw/1c80ac003b59a2e708f127a721904e92ea51d0b9/compiler%2Frustc_codegen_ssa%2FCargo.toml", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2FCargo.toml?ref=1c80ac003b59a2e708f127a721904e92ea51d0b9", "patch": "@@ -41,6 +41,6 @@ rustc_target = { path = \"../rustc_target\" }\n rustc_session = { path = \"../rustc_session\" }\n \n [dependencies.object]\n-version = \"0.28.0\"\n+version = \"0.28.4\"\n default-features = false\n features = [\"read_core\", \"elf\", \"macho\", \"pe\", \"unaligned\", \"archive\", \"write\"]"}, {"sha": "6aa96f9f40300d8346e65b66feae63291608e5aa", "filename": "compiler/rustc_codegen_ssa/src/back/metadata.rs", "status": "modified", "additions": 18, "deletions": 10, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/1c80ac003b59a2e708f127a721904e92ea51d0b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1c80ac003b59a2e708f127a721904e92ea51d0b9/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_codegen_ssa%2Fsrc%2Fback%2Fmetadata.rs?ref=1c80ac003b59a2e708f127a721904e92ea51d0b9", "patch": "@@ -20,7 +20,7 @@ use rustc_metadata::EncodedMetadata;\n use rustc_session::cstore::MetadataLoader;\n use rustc_session::Session;\n use rustc_target::abi::Endian;\n-use rustc_target::spec::Target;\n+use rustc_target::spec::{RelocModel, Target};\n \n use crate::METADATA_FILENAME;\n \n@@ -132,15 +132,23 @@ pub(crate) fn create_object_file(sess: &Session) -> Option<write::Object<'static\n     let mut file = write::Object::new(binary_format, architecture, endianness);\n     match architecture {\n         Architecture::Mips => {\n-            // copied from `mipsel-linux-gnu-gcc foo.c -c` and\n-            // inspecting the resulting `e_flags` field.\n-            let e_flags = elf::EF_MIPS_CPIC\n-                | elf::EF_MIPS_PIC\n-                | if sess.target.options.cpu.contains(\"r6\") {\n-                    elf::EF_MIPS_ARCH_32R6 | elf::EF_MIPS_NAN2008\n-                } else {\n-                    elf::EF_MIPS_ARCH_32R2\n-                };\n+            let arch = match sess.target.options.cpu.as_ref() {\n+                \"mips1\" => elf::EF_MIPS_ARCH_1,\n+                \"mips2\" => elf::EF_MIPS_ARCH_2,\n+                \"mips3\" => elf::EF_MIPS_ARCH_3,\n+                \"mips4\" => elf::EF_MIPS_ARCH_4,\n+                \"mips5\" => elf::EF_MIPS_ARCH_5,\n+                s if s.contains(\"r6\") => elf::EF_MIPS_ARCH_32R6,\n+                _ => elf::EF_MIPS_ARCH_32R2,\n+            };\n+            // The only ABI LLVM supports for 32-bit MIPS CPUs is o32.\n+            let mut e_flags = elf::EF_MIPS_CPIC | elf::EF_MIPS_ABI_O32 | arch;\n+            if sess.target.options.relocation_model != RelocModel::Static {\n+                e_flags |= elf::EF_MIPS_PIC;\n+            }\n+            if sess.target.options.cpu.contains(\"r6\") {\n+                e_flags |= elf::EF_MIPS_NAN2008;\n+            }\n             file.flags = FileFlags::Elf { e_flags };\n         }\n         Architecture::Mips64 => {"}]}