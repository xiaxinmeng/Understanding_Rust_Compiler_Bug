{"sha": "1597f2a0fca681219c1f495ed3bbe01aa889fb43", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1OTdmMmEwZmNhNjgxMjE5YzFmNDk1ZWQzYmJlMDFhYTg4OWZiNDM=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-11-17T12:03:26Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2019-01-02T22:35:05Z"}, "message": "add the ability to highlight placeholders", "tree": {"sha": "d83db2c606d0e47d9bad25e241386512b3810423", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d83db2c606d0e47d9bad25e241386512b3810423"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1597f2a0fca681219c1f495ed3bbe01aa889fb43", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1597f2a0fca681219c1f495ed3bbe01aa889fb43", "html_url": "https://github.com/rust-lang/rust/commit/1597f2a0fca681219c1f495ed3bbe01aa889fb43", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1597f2a0fca681219c1f495ed3bbe01aa889fb43/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "url": "https://api.github.com/repos/rust-lang/rust/commits/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9", "html_url": "https://github.com/rust-lang/rust/commit/37b0b3e9a36ccbf4a6baace1f5d0f3ccf738d6b9"}], "stats": {"total": 83, "additions": 81, "deletions": 2}, "files": [{"sha": "55e3f3e6f930aff4671b7ef0e80249809d7fb6dd", "filename": "src/librustc/util/ppaux.rs", "status": "modified", "additions": 81, "deletions": 2, "changes": 83, "blob_url": "https://github.com/rust-lang/rust/blob/1597f2a0fca681219c1f495ed3bbe01aa889fb43/src%2Flibrustc%2Futil%2Fppaux.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1597f2a0fca681219c1f495ed3bbe01aa889fb43/src%2Flibrustc%2Futil%2Fppaux.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Futil%2Fppaux.rs?ref=1597f2a0fca681219c1f495ed3bbe01aa889fb43", "patch": "@@ -43,6 +43,13 @@ pub struct RegionHighlightMode {\n     /// y: &'a u32)` and we want to give a name to the region of the\n     /// reference `x`.\n     highlight_bound_region: Option<(ty::BoundRegion, usize)>,\n+\n+    /// If enabled, when printing a \"placeholder\" (what we get when\n+    /// substituting a universally quantified region as in `for<'a> T:\n+    /// Foo<'a>`), print out instead `'N`.\n+    ///\n+    /// (Unlike other modes, we can highlight more than one placeholder at a time.)\n+    highlight_placeholders: [Option<(ty::PlaceholderRegion, usize)>; 2],\n }\n \n thread_local! {\n@@ -53,10 +60,12 @@ thread_local! {\n }\n \n impl RegionHighlightMode {\n+    /// Read and return current region highlight settings (accesses thread-local state).a\n     pub fn get() -> Self {\n         REGION_HIGHLIGHT_MODE.with(|c| c.get())\n     }\n \n+    /// Internal helper to update current settings during the execution of `op`.\n     fn set<R>(\n         old_mode: Self,\n         new_mode: Self,\n@@ -70,6 +79,9 @@ impl RegionHighlightMode {\n         })\n     }\n \n+    /// During the execution of `op`, highlight the region inference\n+    /// vairable `vid` as `'N`.  We can only highlight one region vid\n+    /// at a time.\n     pub fn highlighting_region_vid<R>(vid: RegionVid, number: usize, op: impl FnOnce() -> R) -> R {\n         let old_mode = Self::get();\n         assert!(old_mode.highlight_region_vid.is_none());\n@@ -102,6 +114,52 @@ impl RegionHighlightMode {\n             op,\n         )\n     }\n+\n+    /// During the execution of `op`, highlight the given placeholders\n+    /// with the given numbers. Unlike other modes: non-highlighted\n+    /// placeholders are printed as `'_` (where they might normally print\n+    /// differently. This may want to be tweaked; but we do it for two reasons\n+    ///\n+    /// (a) to draw attention to the placeholders we are trying to highlight\n+    /// (b) because placeholder names can come from other scopes than the one\n+    ///     in which the error occurred, so that can be misleading.\n+    ///\n+    /// We can highlight up to two placeholders at a time.\n+    pub fn highlighting_placeholder<R>(\n+        placeholder: ty::PlaceholderRegion,\n+        number: usize,\n+        op: impl FnOnce() -> R,\n+    ) -> R {\n+        let old_mode = Self::get();\n+        let mut new_mode = old_mode;\n+        let first_avail_slot = new_mode.highlight_placeholders.iter_mut()\n+            .filter(|s| s.is_none())\n+            .next()\n+            .unwrap_or_else(|| {\n+                panic!(\n+                    \"can only highlight {} placeholders at a time\",\n+                    old_mode.highlight_placeholders.len(),\n+                )\n+            });\n+        *first_avail_slot = Some((placeholder, number));\n+        Self::set(old_mode, new_mode, op)\n+    }\n+\n+    /// Returns true if any placeholders are highlighted.\n+    pub fn any_placeholders_highlighted(&self) -> bool {\n+        self.highlight_placeholders.iter().any(|p| p.is_some())\n+    }\n+\n+    /// Returns `Some(N)` if the placeholder `p` is highlighted to print as `'N`.\n+    pub fn placeholder_highlight(&self, p: ty::PlaceholderRegion) -> Option<usize> {\n+        self.highlight_placeholders\n+            .iter()\n+            .filter_map(|h| match h {\n+                &Some((h, n)) if h == p => Some(n),\n+                _ => None,\n+            })\n+            .next()\n+    }\n }\n \n macro_rules! gen_display_debug_body {\n@@ -802,6 +860,25 @@ define_print! {\n     }\n }\n \n+define_print! {\n+    () ty::PlaceholderRegion, (self, f, cx) {\n+        display {\n+            if cx.is_verbose {\n+                return self.print_debug(f, cx);\n+            }\n+\n+            let highlight = RegionHighlightMode::get();\n+            if let Some(counter) = highlight.placeholder_highlight(*self) {\n+                write!(f, \"'{}\", counter)\n+            } else if highlight.any_placeholders_highlighted() {\n+                write!(f, \"'_\")\n+            } else {\n+                write!(f, \"{}\", self.name)\n+            }\n+        }\n+    }\n+}\n+\n define_print! {\n     () ty::RegionKind, (self, f, cx) {\n         display {\n@@ -818,10 +895,12 @@ define_print! {\n                     write!(f, \"{}\", data.name)\n                 }\n                 ty::ReLateBound(_, br) |\n-                ty::ReFree(ty::FreeRegion { bound_region: br, .. }) |\n-                ty::RePlaceholder(ty::PlaceholderRegion { name: br, .. }) => {\n+                ty::ReFree(ty::FreeRegion { bound_region: br, .. }) => {\n                     write!(f, \"{}\", br)\n                 }\n+                ty::RePlaceholder(p) => {\n+                    write!(f, \"{}\", p)\n+                }\n                 ty::ReScope(scope) if cx.identify_regions => {\n                     match scope.data {\n                         region::ScopeData::Node =>"}]}