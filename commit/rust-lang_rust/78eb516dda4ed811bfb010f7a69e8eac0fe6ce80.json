{"sha": "78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc4ZWI1MTZkZGE0ZWQ4MTFiZmIwMTBmN2E2OWU4ZWFjMGZlNmNlODA=", "commit": {"author": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-11-17T07:37:23Z"}, "committer": {"name": "Sergio Benitez", "email": "sb@sergio.bz", "date": "2018-11-17T07:37:23Z"}, "message": "Ignore non-semantic tokens for 'probably_eq' streams.", "tree": {"sha": "d55551717d3ac900396244e5c86855bb0ee36b06", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d55551717d3ac900396244e5c86855bb0ee36b06"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "html_url": "https://github.com/rust-lang/rust/commit/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/comments", "author": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "SergioBenitez", "id": 1480321, "node_id": "MDQ6VXNlcjE0ODAzMjE=", "avatar_url": "https://avatars.githubusercontent.com/u/1480321?v=4", "gravatar_id": "", "url": "https://api.github.com/users/SergioBenitez", "html_url": "https://github.com/SergioBenitez", "followers_url": "https://api.github.com/users/SergioBenitez/followers", "following_url": "https://api.github.com/users/SergioBenitez/following{/other_user}", "gists_url": "https://api.github.com/users/SergioBenitez/gists{/gist_id}", "starred_url": "https://api.github.com/users/SergioBenitez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/SergioBenitez/subscriptions", "organizations_url": "https://api.github.com/users/SergioBenitez/orgs", "repos_url": "https://api.github.com/users/SergioBenitez/repos", "events_url": "https://api.github.com/users/SergioBenitez/events{/privacy}", "received_events_url": "https://api.github.com/users/SergioBenitez/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "4ec0ba9545f7c848aafc0bc1b8762507395edd41", "url": "https://api.github.com/repos/rust-lang/rust/commits/4ec0ba9545f7c848aafc0bc1b8762507395edd41", "html_url": "https://github.com/rust-lang/rust/commit/4ec0ba9545f7c848aafc0bc1b8762507395edd41"}], "stats": {"total": 147, "additions": 141, "deletions": 6}, "files": [{"sha": "46fc6454d1c3bf453eb266549ca27698d29a815d", "filename": "src/libsyntax/parse/token.rs", "status": "modified", "additions": 3, "deletions": 2, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Flibsyntax%2Fparse%2Ftoken.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Flibsyntax%2Fparse%2Ftoken.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Ftoken.rs?ref=78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "patch": "@@ -570,8 +570,9 @@ impl Token {\n         //\n         // Instead the \"probably equal\" check here is \"does each token\n         // recursively have the same discriminant?\" We basically don't look at\n-        // the token values here and assume that such fine grained modifications\n-        // of token streams doesn't happen.\n+        // the token values here and assume that such fine grained token stream\n+        // modifications, including adding/removing typically non-semantic\n+        // tokens such as extra braces and commas, don't happen.\n         if let Some(tokens) = tokens {\n             if tokens.probably_equal_for_proc_macro(&tokens_for_real) {\n                 return tokens"}, {"sha": "a7f8c692675f4a2dca024c1d26cdfab34d77bbdc", "filename": "src/libsyntax/tokenstream.rs", "status": "modified", "additions": 26, "deletions": 4, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Flibsyntax%2Ftokenstream.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Flibsyntax%2Ftokenstream.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Ftokenstream.rs?ref=78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "patch": "@@ -26,7 +26,7 @@ use syntax_pos::{BytePos, Mark, Span, DUMMY_SP};\n use ext::base;\n use ext::tt::{macro_parser, quoted};\n use parse::Directory;\n-use parse::token::{self, Token};\n+use parse::token::{self, DelimToken, Token};\n use print::pprust;\n use serialize::{Decoder, Decodable, Encoder, Encodable};\n use util::RcVec;\n@@ -38,7 +38,7 @@ use std::{fmt, iter, mem};\n #[derive(Clone, PartialEq, RustcEncodable, RustcDecodable, Debug)]\n pub struct Delimited {\n     /// The type of delimiter\n-    pub delim: token::DelimToken,\n+    pub delim: DelimToken,\n     /// The delimited sequence of token trees\n     pub tts: ThinTokenStream,\n }\n@@ -368,8 +368,30 @@ impl TokenStream {\n     // This is otherwise the same as `eq_unspanned`, only recursing with a\n     // different method.\n     pub fn probably_equal_for_proc_macro(&self, other: &TokenStream) -> bool {\n-        let mut t1 = self.trees();\n-        let mut t2 = other.trees();\n+        // When checking for `probably_eq`, we ignore certain tokens that aren't\n+        // preserved in the AST. Because they are not preserved, the pretty\n+        // printer arbitrarily adds or removes them when printing as token\n+        // streams, making a comparison between a token stream generated from an\n+        // AST and a token stream which was parsed into an AST more reliable.\n+        fn semantic_tree(tree: &TokenTree) -> bool {\n+            match tree {\n+                // The pretty printer tends to add trailing commas to\n+                // everything, and in particular, after struct fields.\n+                | TokenTree::Token(_, Token::Comma)\n+                // The pretty printer emits `NoDelim` as whitespace.\n+                | TokenTree::Token(_, Token::OpenDelim(DelimToken::NoDelim))\n+                | TokenTree::Token(_, Token::CloseDelim(DelimToken::NoDelim))\n+                // The pretty printer collapses many semicolons into one.\n+                | TokenTree::Token(_, Token::Semi)\n+                // The pretty printer collapses whitespace arbitrarily and can\n+                // introduce whitespace from `NoDelim`.\n+                | TokenTree::Token(_, Token::Whitespace) => false,\n+                _ => true\n+            }\n+        }\n+\n+        let mut t1 = self.trees().filter(semantic_tree);\n+        let mut t2 = other.trees().filter(semantic_tree);\n         for (t1, t2) in t1.by_ref().zip(t2.by_ref()) {\n             if !t1.probably_equal_for_proc_macro(&t2) {\n                 return false;"}, {"sha": "65ed9cf7372548f76e278356189cc512347e246b", "filename": "src/test/ui-fulldeps/proc-macro/auxiliary/span-preservation.rs", "status": "added", "additions": 12, "deletions": 0, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fauxiliary%2Fspan-preservation.rs?ref=78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "patch": "@@ -0,0 +1,12 @@\n+// no-prefer-dynamic\n+\n+#![crate_type = \"proc-macro\"]\n+\n+extern crate proc_macro;\n+\n+use proc_macro::TokenStream;\n+\n+#[proc_macro_attribute]\n+pub fn foo(_: TokenStream, input: TokenStream) -> TokenStream {\n+    input.into_iter().collect()\n+}"}, {"sha": "adcb42ab2d1ccc4e3431aefc4b794b0e2e45bf09", "filename": "src/test/ui-fulldeps/proc-macro/span-preservation.rs", "status": "added", "additions": 51, "deletions": 0, "changes": 51, "blob_url": "https://github.com/rust-lang/rust/blob/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.rs?ref=78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "patch": "@@ -0,0 +1,51 @@\n+// aux-build:span-preservation.rs\n+\n+// For each of these, we should get the appropriate type mismatch error message,\n+// and the function should be echoed.\n+\n+extern crate span_preservation as foo;\n+\n+use foo::foo;\n+\n+#[foo]\n+fn a() {\n+    let x: usize = \"hello\";;;;;\n+}\n+\n+#[foo]\n+fn b(x: Option<isize>) -> usize {\n+    match x {\n+        Some(x) => { return x },\n+        None => 10\n+    }\n+}\n+\n+#[foo]\n+fn c() {\n+    struct Foo {\n+        a: usize\n+    }\n+\n+    struct Bar {\n+        a: usize,\n+        b: usize\n+    }\n+\n+    let x = Foo { a: 10isize };\n+    let y = Foo { a: 10, b: 10isize };\n+}\n+\n+// FIXME: This doesn't work at the moment. See the one below. The pretty-printer\n+// injects a \"C\" between `extern` and `fn` which causes a \"probably_eq\"\n+// `TokenStream` mismatch. The lack of `\"C\"` should be preserved in the AST.\n+#[foo]\n+extern fn bar() {\n+    0\n+}\n+\n+#[foo]\n+extern \"C\" fn baz() {\n+    0\n+}\n+\n+fn main() {}"}, {"sha": "f33245aec37201e031ddf1f5a4e0ac225822d219", "filename": "src/test/ui-fulldeps/proc-macro/span-preservation.stderr", "status": "added", "additions": 49, "deletions": 0, "changes": 49, "blob_url": "https://github.com/rust-lang/rust/blob/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/78eb516dda4ed811bfb010f7a69e8eac0fe6ce80/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui-fulldeps%2Fproc-macro%2Fspan-preservation.stderr?ref=78eb516dda4ed811bfb010f7a69e8eac0fe6ce80", "patch": "@@ -0,0 +1,49 @@\n+error[E0308]: mismatched types\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:12:20\n+   |\n+LL |     let x: usize = \"hello\";;;;;\n+   |                    ^^^^^^^ expected usize, found reference\n+   |\n+   = note: expected type `usize`\n+              found type `&'static str`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:18:29\n+   |\n+LL |         Some(x) => { return x },\n+   |                             ^ expected usize, found isize\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:34:22\n+   |\n+LL |     let x = Foo { a: 10isize };\n+   |                      ^^^^^^^ expected usize, found isize\n+\n+error[E0560]: struct `c::Foo` has no field named `b`\n+  --> $DIR/span-preservation.rs:35:26\n+   |\n+LL |     let y = Foo { a: 10, b: 10isize };\n+   |                          ^ `c::Foo` does not have this field\n+   |\n+   = note: available fields are: `a`\n+\n+error[E0308]: mismatched types\n+  --> $DIR/span-preservation.rs:48:5\n+   |\n+LL | extern \"C\" fn baz() {\n+   |                     - possibly return type missing here?\n+LL |     0\n+   |     ^ expected (), found integral variable\n+   |\n+   = note: expected type `()`\n+              found type `{integer}`\n+\n+error: aborting due to 6 previous errors\n+\n+Some errors occurred: E0308, E0560.\n+For more information about an error, try `rustc --explain E0308`."}]}