{"sha": "17d2e3b5d208d29d156ff94f112b5bc95acee351", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE3ZDJlM2I1ZDIwOGQyOWQxNTZmZjk0ZjExMmI1YmM5NWFjZWUzNTE=", "commit": {"author": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-15T23:22:24Z"}, "committer": {"name": "Valerii Lashmanov", "email": "vflashm@gmail.com", "date": "2020-09-18T01:44:11Z"}, "message": "Better handling for exponential-sized types in misc places\n\nMostly to fix ui/issues/issue-37311-type-length-limit/issue-37311.rs.\n\nMost parts of the compiler can handle deeply nested types with a lot\nof duplicates just fine, but some parts still attempt to naively\ntraverse type tree.\n\nBefore such problems were caught by type length limit check,\nbut now these places will have to be changed to handle\nduplicated types gracefully.", "tree": {"sha": "3cb112dbb2f875f1468f307aa5b1670034caf4aa", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3cb112dbb2f875f1468f307aa5b1670034caf4aa"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/17d2e3b5d208d29d156ff94f112b5bc95acee351", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/17d2e3b5d208d29d156ff94f112b5bc95acee351", "html_url": "https://github.com/rust-lang/rust/commit/17d2e3b5d208d29d156ff94f112b5bc95acee351", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/17d2e3b5d208d29d156ff94f112b5bc95acee351/comments", "author": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "committer": {"login": "VFLashM", "id": 3723853, "node_id": "MDQ6VXNlcjM3MjM4NTM=", "avatar_url": "https://avatars.githubusercontent.com/u/3723853?v=4", "gravatar_id": "", "url": "https://api.github.com/users/VFLashM", "html_url": "https://github.com/VFLashM", "followers_url": "https://api.github.com/users/VFLashM/followers", "following_url": "https://api.github.com/users/VFLashM/following{/other_user}", "gists_url": "https://api.github.com/users/VFLashM/gists{/gist_id}", "starred_url": "https://api.github.com/users/VFLashM/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/VFLashM/subscriptions", "organizations_url": "https://api.github.com/users/VFLashM/orgs", "repos_url": "https://api.github.com/users/VFLashM/repos", "events_url": "https://api.github.com/users/VFLashM/events{/privacy}", "received_events_url": "https://api.github.com/users/VFLashM/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2f3296192bb5be5fcb02975395052ee8c3b2bd68", "url": "https://api.github.com/repos/rust-lang/rust/commits/2f3296192bb5be5fcb02975395052ee8c3b2bd68", "html_url": "https://github.com/rust-lang/rust/commit/2f3296192bb5be5fcb02975395052ee8c3b2bd68"}], "stats": {"total": 130, "additions": 89, "deletions": 41}, "files": [{"sha": "bff8ed4ad05a596ca63c5437e35c3cd578da50bf", "filename": "compiler/rustc_infer/src/infer/combine.rs", "status": "modified", "additions": 13, "deletions": 2, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_infer%2Fsrc%2Finfer%2Fcombine.rs?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -31,6 +31,7 @@ use super::unify_key::replace_if_possible;\n use super::unify_key::{ConstVarValue, ConstVariableValue};\n use super::unify_key::{ConstVariableOrigin, ConstVariableOriginKind};\n use super::{InferCtxt, MiscVariable, TypeTrace};\n+use rustc_data_structures::fx::FxHashMap;\n \n use crate::traits::{Obligation, PredicateObligations};\n \n@@ -379,6 +380,7 @@ impl<'infcx, 'tcx> CombineFields<'infcx, 'tcx> {\n             needs_wf: false,\n             root_ty: ty,\n             param_env: self.param_env,\n+            cache: FxHashMap::default(),\n         };\n \n         let ty = match generalize.relate(ty, ty) {\n@@ -438,6 +440,8 @@ struct Generalizer<'cx, 'tcx> {\n     root_ty: Ty<'tcx>,\n \n     param_env: ty::ParamEnv<'tcx>,\n+\n+    cache: FxHashMap<(Ty<'tcx>, Ty<'tcx>), RelateResult<'tcx, Ty<'tcx>>>,\n }\n \n /// Result from a generalization operation. This includes\n@@ -535,13 +539,17 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n     fn tys(&mut self, t: Ty<'tcx>, t2: Ty<'tcx>) -> RelateResult<'tcx, Ty<'tcx>> {\n         assert_eq!(t, t2); // we are abusing TypeRelation here; both LHS and RHS ought to be ==\n \n+        let cache_key = (t, t2);\n+        if let Some(result) = self.cache.get(&cache_key) {\n+            return result.clone();\n+        }\n         debug!(\"generalize: t={:?}\", t);\n \n         // Check to see whether the type we are generalizing references\n         // any other type variable related to `vid` via\n         // subtyping. This is basically our \"occurs check\", preventing\n         // us from creating infinitely sized types.\n-        match *t.kind() {\n+        let result = match *t.kind() {\n             ty::Infer(ty::TyVar(vid)) => {\n                 let vid = self.infcx.inner.borrow_mut().type_variables().root_var(vid);\n                 let sub_vid = self.infcx.inner.borrow_mut().type_variables().sub_root_var(vid);\n@@ -598,7 +606,10 @@ impl TypeRelation<'tcx> for Generalizer<'_, 'tcx> {\n                 Ok(t)\n             }\n             _ => relate::super_relate_tys(self, t, t),\n-        }\n+        };\n+\n+        self.cache.insert(cache_key, result.clone());\n+        return result;\n     }\n \n     fn regions("}, {"sha": "4e424156c4d4157a757a73aa582ad580a0c2c320", "filename": "compiler/rustc_middle/src/ty/print/mod.rs", "status": "modified", "additions": 23, "deletions": 7, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fmod.rs?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -4,6 +4,7 @@ use crate::ty::{self, DefIdTree, Ty, TyCtxt};\n use rustc_data_structures::fx::FxHashSet;\n use rustc_hir::def_id::{CrateNum, DefId};\n use rustc_hir::definitions::{DefPathData, DisambiguatedDefPathData};\n+use rustc_middle::ty::walk::MiniSet;\n \n // `pretty` is a separate module only for organization.\n mod pretty;\n@@ -263,21 +264,33 @@ pub trait Printer<'tcx>: Sized {\n /// function tries to find a \"characteristic `DefId`\" for a\n /// type. It's just a heuristic so it makes some questionable\n /// decisions and we may want to adjust it later.\n-pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n+///\n+/// Visited set is needed in to avoid full iteration over\n+/// deeply nested tuples that have no DefId.\n+fn characteristic_def_id_of_type_cached<'a>(\n+    ty: Ty<'a>,\n+    visited: &mut MiniSet<Ty<'a>>,\n+) -> Option<DefId> {\n     match *ty.kind() {\n         ty::Adt(adt_def, _) => Some(adt_def.did),\n \n         ty::Dynamic(data, ..) => data.principal_def_id(),\n \n-        ty::Array(subty, _) | ty::Slice(subty) => characteristic_def_id_of_type(subty),\n+        ty::Array(subty, _) | ty::Slice(subty) => {\n+            characteristic_def_id_of_type_cached(subty, visited)\n+        }\n \n-        ty::RawPtr(mt) => characteristic_def_id_of_type(mt.ty),\n+        ty::RawPtr(mt) => characteristic_def_id_of_type_cached(mt.ty, visited),\n \n-        ty::Ref(_, ty, _) => characteristic_def_id_of_type(ty),\n+        ty::Ref(_, ty, _) => characteristic_def_id_of_type_cached(ty, visited),\n \n-        ty::Tuple(ref tys) => {\n-            tys.iter().find_map(|ty| characteristic_def_id_of_type(ty.expect_ty()))\n-        }\n+        ty::Tuple(ref tys) => tys.iter().find_map(|ty| {\n+            let ty = ty.expect_ty();\n+            if visited.insert(ty) {\n+                return characteristic_def_id_of_type_cached(ty, visited);\n+            }\n+            return None;\n+        }),\n \n         ty::FnDef(def_id, _)\n         | ty::Closure(def_id, _)\n@@ -302,6 +315,9 @@ pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n         | ty::Float(_) => None,\n     }\n }\n+pub fn characteristic_def_id_of_type(ty: Ty<'_>) -> Option<DefId> {\n+    characteristic_def_id_of_type_cached(ty, &mut MiniSet::new())\n+}\n \n impl<'tcx, P: Printer<'tcx>> Print<'tcx, P> for ty::RegionKind {\n     type Output = P::Region;"}, {"sha": "1ed98d1f2cafdd154692e500f282ce98d2fa458f", "filename": "compiler/rustc_middle/src/ty/print/pretty.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fprint%2Fpretty.rs?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1264,6 +1264,7 @@ pub struct FmtPrinterData<'a, 'tcx, F> {\n     used_region_names: FxHashSet<Symbol>,\n     region_index: usize,\n     binder_depth: usize,\n+    printed_type_count: usize,\n \n     pub region_highlight_mode: RegionHighlightMode,\n \n@@ -1294,6 +1295,7 @@ impl<F> FmtPrinter<'a, 'tcx, F> {\n             used_region_names: Default::default(),\n             region_index: 0,\n             binder_depth: 0,\n+            printed_type_count: 0,\n             region_highlight_mode: RegionHighlightMode::default(),\n             name_resolver: None,\n         }))\n@@ -1411,8 +1413,14 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n         self.pretty_print_region(region)\n     }\n \n-    fn print_type(self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n-        self.pretty_print_type(ty)\n+    fn print_type(mut self, ty: Ty<'tcx>) -> Result<Self::Type, Self::Error> {\n+        if self.tcx.sess.type_length_limit().value_within_limit(self.printed_type_count) {\n+            self.printed_type_count += 1;\n+            self.pretty_print_type(ty)\n+        } else {\n+            write!(self, \"...\")?;\n+            Ok(self)\n+        }\n     }\n \n     fn print_dyn_existential("}, {"sha": "0dbb4b1015e79ab5f1eb984fdac0f82dafc2a291", "filename": "compiler/rustc_mir/src/monomorphize/collector.rs", "status": "modified", "additions": 28, "deletions": 19, "changes": 47, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fmonomorphize%2Fcollector.rs?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -418,6 +418,29 @@ fn record_accesses<'a, 'tcx: 'a>(\n     inlining_map.lock_mut().record_accesses(caller, &accesses);\n }\n \n+// Shrinks string by keeping prefix and suffix of given sizes.\n+fn shrink(s: String, before: usize, after: usize) -> String {\n+    // An iterator of all byte positions including the end of the string.\n+    let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n+\n+    let shrunk = format!(\n+        \"{before}...{after}\",\n+        before = &s[..positions().nth(before).unwrap_or(s.len())],\n+        after = &s[positions().rev().nth(after).unwrap_or(0)..],\n+    );\n+\n+    // Only use the shrunk version if it's really shorter.\n+    // This also avoids the case where before and after slices overlap.\n+    if shrunk.len() < s.len() { shrunk } else { s }\n+}\n+\n+// Format instance name that is already known to be too long for rustc.\n+// Show only the first and last 32 characters to avoid blasting\n+// the user's terminal with thousands of lines of type-name.\n+fn shrunk_instance_name(instance: &Instance<'tcx>) -> String {\n+    shrink(instance.to_string(), 32, 32)\n+}\n+\n fn check_recursion_limit<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     instance: Instance<'tcx>,\n@@ -440,7 +463,10 @@ fn check_recursion_limit<'tcx>(\n     // more than the recursion limit is assumed to be causing an\n     // infinite expansion.\n     if !tcx.sess.recursion_limit().value_within_limit(adjusted_recursion_depth) {\n-        let error = format!(\"reached the recursion limit while instantiating `{}`\", instance);\n+        let error = format!(\n+            \"reached the recursion limit while instantiating `{}`\",\n+            shrunk_instance_name(&instance),\n+        );\n         let mut err = tcx.sess.struct_span_fatal(span, &error);\n         err.span_note(\n             tcx.def_span(def_id),\n@@ -474,26 +500,9 @@ fn check_type_length_limit<'tcx>(tcx: TyCtxt<'tcx>, instance: Instance<'tcx>) {\n     //\n     // Bail out in these cases to avoid that bad user experience.\n     if !tcx.sess.type_length_limit().value_within_limit(type_length) {\n-        // The instance name is already known to be too long for rustc.\n-        // Show only the first and last 32 characters to avoid blasting\n-        // the user's terminal with thousands of lines of type-name.\n-        let shrink = |s: String, before: usize, after: usize| {\n-            // An iterator of all byte positions including the end of the string.\n-            let positions = || s.char_indices().map(|(i, _)| i).chain(iter::once(s.len()));\n-\n-            let shrunk = format!(\n-                \"{before}...{after}\",\n-                before = &s[..positions().nth(before).unwrap_or(s.len())],\n-                after = &s[positions().rev().nth(after).unwrap_or(0)..],\n-            );\n-\n-            // Only use the shrunk version if it's really shorter.\n-            // This also avoids the case where before and after slices overlap.\n-            if shrunk.len() < s.len() { shrunk } else { s }\n-        };\n         let msg = format!(\n             \"reached the type-length limit while instantiating `{}`\",\n-            shrink(instance.to_string(), 32, 32)\n+            shrunk_instance_name(&instance),\n         );\n         let mut diag = tcx.sess.struct_span_fatal(tcx.def_span(instance.def_id()), &msg);\n         diag.note(&format!("}, {"sha": "d27d14842ce99f1f61c6cdc35a6f515722c9d3a3", "filename": "src/test/ui/infinite/infinite-instantiation.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-instantiation.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `function::<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<usize>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `function::<Option<Option<Option<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/infinite-instantiation.rs:21:9\n    |\n LL |         function(counter - 1, t.to_option());"}, {"sha": "d3d5863ddb3c9b6d1c757b7bb4f64c12889f7451", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.rs?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -12,8 +12,8 @@ trait Foo {\n \n impl<T> Foo for T {\n     #[allow(unconditional_recursion)]\n-    fn recurse(&self) { //~ ERROR reached the type-length limit\n-        (self, self).recurse();\n+    fn recurse(&self) {\n+        (self, self).recurse(); //~ ERROR reached the recursion limit\n     }\n }\n "}, {"sha": "a94f190d6b25d2f566c5ec45b37ceba07946b5d4", "filename": "src/test/ui/issues/issue-37311-type-length-limit/issue-37311.stderr", "status": "modified", "additions": 7, "deletions": 3, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-37311-type-length-limit%2Fissue-37311.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,10 +1,14 @@\n-error: reached the type-length limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(...))))))))))))))) as Foo>::recurse`\n+error: reached the recursion limit while instantiating `<(&(&(&(&(&(&(&(&(&(&(&(&(&(&(&(.....), ...), ...) as Foo>::recurse`\n+  --> $DIR/issue-37311.rs:16:9\n+   |\n+LL |         (self, self).recurse();\n+   |         ^^^^^^^^^^^^^^^^^^^^^^\n+   |\n+note: `<T as Foo>::recurse` defined here\n   --> $DIR/issue-37311.rs:15:5\n    |\n LL |     fn recurse(&self) {\n    |     ^^^^^^^^^^^^^^^^^\n-   |\n-   = note: consider adding a `#![type_length_limit=\"2097149\"]` attribute to your crate\n \n error: aborting due to previous error\n "}, {"sha": "f3e73399b57ce7445ca61bdfca2f7f52239e4874", "filename": "src/test/ui/issues/issue-67552.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-67552.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut &mut Empty>`\n+error: reached the recursion limit while instantiating `rec::<&mut &mut &mut &mut &mut &... &mut &mut &mut &mut &mut Empty>`\n   --> $DIR/issue-67552.rs:27:9\n    |\n LL |         rec(identity(&mut it))"}, {"sha": "279e3ffbb4a41772ea53b7171172aa490fa3666a", "filename": "src/test/ui/issues/issue-8727.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-8727.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -9,7 +9,7 @@ LL |     generic::<Option<T>>();\n    = note: `#[warn(unconditional_recursion)]` on by default\n    = help: a `loop` may express intention better if this is on purpose\n \n-error: reached the recursion limit while instantiating `generic::<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<Option<i32>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `generic::<Option<Option<Option<O...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/issue-8727.rs:7:5\n    |\n LL |     generic::<Option<T>>();"}, {"sha": "4d77b3d295c00bc203843fe98a6ecf64d669367b", "filename": "src/test/ui/recursion/issue-38591-non-regular-dropck-recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Fissue-38591-non-regular-dropck-recursion.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `drop_in_place::<S<fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(u32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))>> - shim(Some(S<fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(fn(u32))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))>))`\n+error: reached the recursion limit while instantiating `drop_in_place::<S<fn(fn(fn(fn(fn...)))))))))))))))))))))))))))))>))`\n   --> $SRC_DIR/core/src/ptr/mod.rs:LL:COL\n    |\n LL | / pub unsafe fn drop_in_place<T: ?Sized>(to_drop: *mut T) {"}, {"sha": "085bf82ef8b9351773b4bafd488a96476dcfb256", "filename": "src/test/ui/recursion/recursion.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Frecursion%2Frecursion.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,4 +1,4 @@\n-error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Cons<Nil>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n+error: reached the recursion limit while instantiating `test::<Cons<Cons<Cons<Cons<Cons<...>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>`\n   --> $DIR/recursion.rs:17:11\n    |\n LL |     _ => {test (n-1, i+1, Cons {head:2*i+1, tail:first}, Cons{head:i*i, tail:second})}"}, {"sha": "cf3d64d734ba0de7c28f986d1f75e1087e45dd4c", "filename": "src/test/ui/type_length_limit.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/17d2e3b5d208d29d156ff94f112b5bc95acee351/src%2Ftest%2Fui%2Ftype_length_limit.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ftype_length_limit.stderr?ref=17d2e3b5d208d29d156ff94f112b5bc95acee351", "patch": "@@ -1,4 +1,4 @@\n-error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((((G,... G), (G, G, G), (G, G, G))))))>>`\n+error: reached the type-length limit while instantiating `std::mem::drop::<Option<((((...,....., ...), ..., ...), ..., ...)>>`\n   --> $SRC_DIR/core/src/mem/mod.rs:LL:COL\n    |\n LL | pub fn drop<T>(_x: T) {}"}]}