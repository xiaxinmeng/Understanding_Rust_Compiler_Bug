{"sha": "aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "node_id": "MDY6Q29tbWl0NzI0NzEyOmFlYmYwN2UzZWI5NWRiY2ZhMWZmNDY4YTZhNDI4ZTcwMjljNThkNDE=", "commit": {"author": {"name": "Guillaume Gomez", "email": "guillaume1.gomez@gmail.com", "date": "2018-11-29T12:10:33Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2018-11-29T12:10:33Z"}, "message": "Rollup merge of #56114 - varkor:nonexhaustive-backticks, r=nikomatsakis\n\nEnclose type in backticks for \"non-exhaustive patterns\" error\n\nThis makes the error style consistent with the convention in error messages.", "tree": {"sha": "18ac50117daa54798b5b7e557a8c37d7f2f088b3", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/18ac50117daa54798b5b7e557a8c37d7f2f088b3"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJb/9c5CRBK7hj4Ov3rIwAAdHIIAB4NOHIYjYG8I8Mmn/4wNIAy\niGNajyUqQJHzup8UjsGrwY8H5Q7JGtzdo7Z/BtsiElY8x7gAbVYZ0BqZ9FhgCOTl\nX1Y09/Uk/ig9Ak05QnvTzpcecK/zw56hgMOOjC/9Rrjmo428oOAKi05o62O17pao\nlNr+yEnPJykddm5X9tURTVfdGjRxaJN4KQx/SdGxC0nVDbQhQLnWUXk1whe0NvCc\nWyBFM9cNYHHVLDpISy2ITvRx7iyDf3JM52zXbglFB6ZW5OnWLYvjNQkztsYDps/Z\n7j5uFDsoZR/mlOLq4jValJFLiJQmTK52AWO6fuGq9Fn6uskrKUCOGWkTevwEeTI=\n=rX51\n-----END PGP SIGNATURE-----\n", "payload": "tree 18ac50117daa54798b5b7e557a8c37d7f2f088b3\nparent 36a4abf6e0788ee444671126a19ffd76d73e13a2\nparent f03987276656134f25f92f7434d7d1c63c9e981c\nauthor Guillaume Gomez <guillaume1.gomez@gmail.com> 1543493433 +0100\ncommitter GitHub <noreply@github.com> 1543493433 +0100\n\nRollup merge of #56114 - varkor:nonexhaustive-backticks, r=nikomatsakis\n\nEnclose type in backticks for \"non-exhaustive patterns\" error\n\nThis makes the error style consistent with the convention in error messages.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "html_url": "https://github.com/rust-lang/rust/commit/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/comments", "author": {"login": "GuillaumeGomez", "id": 3050060, "node_id": "MDQ6VXNlcjMwNTAwNjA=", "avatar_url": "https://avatars.githubusercontent.com/u/3050060?v=4", "gravatar_id": "", "url": "https://api.github.com/users/GuillaumeGomez", "html_url": "https://github.com/GuillaumeGomez", "followers_url": "https://api.github.com/users/GuillaumeGomez/followers", "following_url": "https://api.github.com/users/GuillaumeGomez/following{/other_user}", "gists_url": "https://api.github.com/users/GuillaumeGomez/gists{/gist_id}", "starred_url": "https://api.github.com/users/GuillaumeGomez/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/GuillaumeGomez/subscriptions", "organizations_url": "https://api.github.com/users/GuillaumeGomez/orgs", "repos_url": "https://api.github.com/users/GuillaumeGomez/repos", "events_url": "https://api.github.com/users/GuillaumeGomez/events{/privacy}", "received_events_url": "https://api.github.com/users/GuillaumeGomez/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "36a4abf6e0788ee444671126a19ffd76d73e13a2", "url": "https://api.github.com/repos/rust-lang/rust/commits/36a4abf6e0788ee444671126a19ffd76d73e13a2", "html_url": "https://github.com/rust-lang/rust/commit/36a4abf6e0788ee444671126a19ffd76d73e13a2"}, {"sha": "f03987276656134f25f92f7434d7d1c63c9e981c", "url": "https://api.github.com/repos/rust-lang/rust/commits/f03987276656134f25f92f7434d7d1c63c9e981c", "html_url": "https://github.com/rust-lang/rust/commit/f03987276656134f25f92f7434d7d1c63c9e981c"}], "stats": {"total": 34, "additions": 17, "deletions": 17}, "files": [{"sha": "a6bd36e582fcd843c69466e3315a8ae2ec8ca24d", "filename": "src/librustc_mir/hair/pattern/check_match.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fhair%2Fpattern%2Fcheck_match.rs?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -234,7 +234,7 @@ impl<'a, 'tcx> MatchVisitor<'a, 'tcx> {\n                 if !scrutinee_is_uninhabited {\n                     // We know the type is inhabited, so this must be wrong\n                     let mut err = create_e0004(self.tcx.sess, scrut.span,\n-                                               format!(\"non-exhaustive patterns: type {} \\\n+                                               format!(\"non-exhaustive patterns: type `{}` \\\n                                                         is non-empty\",\n                                                        pat_ty));\n                     span_help!(&mut err, scrut.span,"}, {"sha": "2cd2bb5064877a2c9502e351bad54216a0b2ac36", "filename": "src/librustc_typeck/check/autoderef.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fautoderef.rs?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -59,15 +59,15 @@ impl<'a, 'gcx, 'tcx> Iterator for Autoderef<'a, 'gcx, 'tcx> {\n         if self.steps.len() >= *tcx.sess.recursion_limit.get() {\n             // We've reached the recursion limit, error gracefully.\n             let suggested_limit = *tcx.sess.recursion_limit.get() * 2;\n-            let msg = format!(\"reached the recursion limit while auto-dereferencing {:?}\",\n+            let msg = format!(\"reached the recursion limit while auto-dereferencing `{:?}`\",\n                               self.cur_ty);\n             let error_id = (DiagnosticMessageId::ErrorId(55), Some(self.span), msg);\n             let fresh = tcx.sess.one_time_diagnostics.borrow_mut().insert(error_id);\n             if fresh {\n                 struct_span_err!(tcx.sess,\n                                  self.span,\n                                  E0055,\n-                                 \"reached the recursion limit while auto-dereferencing {:?}\",\n+                                 \"reached the recursion limit while auto-dereferencing `{:?}`\",\n                                  self.cur_ty)\n                     .span_label(self.span, \"deref recursion limit reached\")\n                     .help(&format!("}, {"sha": "084951f4a2c168bf0b0af6d85cdd5da5fbf3a1cc", "filename": "src/librustc_typeck/diagnostics.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_typeck%2Fdiagnostics.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Flibrustc_typeck%2Fdiagnostics.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fdiagnostics.rs?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -538,7 +538,7 @@ fn main() {\n     let foo = Foo;\n     let ref_foo = &&Foo;\n \n-    // error, reached the recursion limit while auto-dereferencing &&Foo\n+    // error, reached the recursion limit while auto-dereferencing `&&Foo`\n     ref_foo.foo();\n }\n ```"}, {"sha": "7e7f21dd69c9261059affe69b915008efdf1d5ba", "filename": "src/test/ui/did_you_mean/recursion_limit_deref.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fdid_you_mean%2Frecursion_limit_deref.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing I\n+error[E0055]: reached the recursion limit while auto-dereferencing `I`\n   --> $DIR/recursion_limit_deref.rs:60:22\n    |\n LL |     let x: &Bottom = &t; //~ ERROR mismatched types"}, {"sha": "2d46196ddda552cab8ad6cde36e286d832b9464e", "filename": "src/test/ui/error-codes/E0004-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0004-2.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type std::option::Option<i32> is non-empty\n+error[E0004]: non-exhaustive patterns: type `std::option::Option<i32>` is non-empty\n   --> $DIR/E0004-2.rs:14:11\n    |\n LL |     match x { } //~ ERROR E0004"}, {"sha": "dddbd92765a5d0dda9f5eb32a4a167976546404e", "filename": "src/test/ui/error-codes/E0055.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Ferror-codes%2FE0055.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/E0055.rs:21:13\n    |\n LL |     ref_foo.foo();"}, {"sha": "ef68adecd1a5f21eba82613d40b75a21936b6813", "filename": "src/test/ui/infinite/infinite-autoderef.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Finfinite%2Finfinite-autoderef.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -7,15 +7,15 @@ LL |         x = box x;\n    |             cyclic type of infinite size\n    |             help: try using a conversion method: `box x.to_string()`\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:35:5\n    |\n LL |     Foo.foo;\n    |     ^^^^^^^ deref recursion limit reached\n    |\n    = help: consider adding a `#![recursion_limit=\"128\"]` attribute to your crate\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:35:9\n    |\n LL |     Foo.foo;\n@@ -29,7 +29,7 @@ error[E0609]: no field `foo` on type `Foo`\n LL |     Foo.foo;\n    |         ^^^ unknown field\n \n-error[E0055]: reached the recursion limit while auto-dereferencing Foo\n+error[E0055]: reached the recursion limit while auto-dereferencing `Foo`\n   --> $DIR/infinite-autoderef.rs:36:9\n    |\n LL |     Foo.bar();"}, {"sha": "f0782bd973805a8d43b6b6119860c0187ed4a276", "filename": "src/test/ui/issues/issue-3096-1.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-1.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type () is non-empty\n+error[E0004]: non-exhaustive patterns: type `()` is non-empty\n   --> $DIR/issue-3096-1.rs:12:11\n    |\n LL |     match () { } //~ ERROR non-exhaustive"}, {"sha": "e0fa641ff39e7fd7157aba0aa149c60889dd45fc", "filename": "src/test/ui/issues/issue-3096-2.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-3096-2.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0004]: non-exhaustive patterns: type *const bottom is non-empty\n+error[E0004]: non-exhaustive patterns: type `*const bottom` is non-empty\n   --> $DIR/issue-3096-2.rs:15:11\n    |\n LL |     match x { } //~ ERROR non-exhaustive patterns"}, {"sha": "1c785949547e5506a9b9c82ce959041a85611dfe", "filename": "src/test/ui/issues/issue-38940.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.rs?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -42,5 +42,5 @@ fn main() {\n     let t = Top::new();\n     let x: &Bottom = &t;\n     //~^ ERROR mismatched types\n-    //~| ERROR reached the recursion limit while auto-dereferencing I\n+    //~| ERROR reached the recursion limit while auto-dereferencing `I`\n }"}, {"sha": "d94a7101c0a3865d685afb7db8d5b5da38d457ec", "filename": "src/test/ui/issues/issue-38940.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissues%2Fissue-38940.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -1,4 +1,4 @@\n-error[E0055]: reached the recursion limit while auto-dereferencing I\n+error[E0055]: reached the recursion limit while auto-dereferencing `I`\n   --> $DIR/issue-38940.rs:43:22\n    |\n LL |     let x: &Bottom = &t;"}, {"sha": "f4974b8fa385402e7f7537c6a37b579729a2af56", "filename": "src/test/ui/uninhabited/uninhabited-matches-feature-gated.stderr", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/aebf07e3eb95dbcfa1ff468a6a428e7029c58d41/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Funinhabited%2Funinhabited-matches-feature-gated.stderr?ref=aebf07e3eb95dbcfa1ff468a6a428e7029c58d41", "patch": "@@ -4,7 +4,7 @@ error[E0004]: non-exhaustive patterns: `Err(_)` not covered\n LL |     let _ = match x {   //~ ERROR non-exhaustive\n    |                   ^ pattern `Err(_)` not covered\n \n-error[E0004]: non-exhaustive patterns: type &Void is non-empty\n+error[E0004]: non-exhaustive patterns: type `&Void` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:20:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -16,7 +16,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type (Void,) is non-empty\n+error[E0004]: non-exhaustive patterns: type `(Void,)` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:23:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n@@ -28,7 +28,7 @@ help: ensure that all possible cases are being handled, possibly by adding wildc\n LL |     let _ = match x {}; //~ ERROR non-exhaustive\n    |                   ^\n \n-error[E0004]: non-exhaustive patterns: type [Void; 1] is non-empty\n+error[E0004]: non-exhaustive patterns: type `[Void; 1]` is non-empty\n   --> $DIR/uninhabited-matches-feature-gated.rs:26:19\n    |\n LL |     let _ = match x {}; //~ ERROR non-exhaustive"}]}