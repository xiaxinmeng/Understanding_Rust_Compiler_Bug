{"sha": "13800624de1c91cbb133c262086a0e5550686239", "node_id": "C_kwDOAAsO6NoAKDEzODAwNjI0ZGUxYzkxY2JiMTMzYzI2MjA4NmEwZTU1NTA2ODYyMzk", "commit": {"author": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-02T23:14:24Z"}, "committer": {"name": "Santiago Pastorino", "email": "spastorino@gmail.com", "date": "2022-08-04T14:26:57Z"}, "message": "Remove captured_lifetimes and LifetimeCaptureContext and make create_lifetime_defs return the captures", "tree": {"sha": "971e0b1ea504442e6027e6e5905d946f05a12f49", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/971e0b1ea504442e6027e6e5905d946f05a12f49"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/13800624de1c91cbb133c262086a0e5550686239", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEEF0ntrgrd9qf9uuThgTGiTgx5768FAmLr1zEACgkQgTGiTgx5\n76+Ojg//RwBXD4HJXfyiy4gx5trX2zFD0zGvjI0krXxl0377Io8UEkFpZHzj/sSS\nrtUCv644SUtvtLeDSkzfJEPLl2MoZ54kCBvAUUgxzmuTaf3cM2LSMwnEF8+Ohc9e\nM6ix59dE7dsZYkp/AMQqnXjCe9kJGwYjwpzQKUV7O1DRWrp7HZGkAJA70j1nTmdM\nbhs3kApf6dKcpLVyTr+U/YkNrtoVGFO4R+FtuOQt6Dx7ayIvA3eEDDmjUwm3ltk3\nkJFzxhvKH8pVDuQIrQGSZJP5kuzYLrenhLa9OSbo7xl8Hc/loch0M21nCbTKagoX\np+9EDUGSWlJxcBbjDbpIZq3QhR9TtUbvLX8+8I3f+/nHNu7jlAaWItCcyqGF2cy1\noH6SjKfUlJYN1kqAqPxntXRZloICLDO1MCKFhGkhV4EqLDwu/ZPRavTQJZGoI1pT\nPUzWEdPGFAC30FLvVHuwUUDlIlys8s5MljUuDvDJV/vKGaxwkKnWxr85Sl97nGo3\nQw2Kyhp+z3rEDrPDvkiXfTjaR3G9he6il4DXbUJshTOwGzaprgEKBiNq7qYrvq13\nDPUhxQ52WTKqFT07n1M47lP8EOqfnBKWJqCtNaJikaf+eu9qg8DU1o5UNmvTHhqT\nVM01c3wXzeckNEVpRcix5XIyIFMt+iwZ4ARR9j8yHYYtejj1Exg=\n=f1eI\n-----END PGP SIGNATURE-----", "payload": "tree 971e0b1ea504442e6027e6e5905d946f05a12f49\nparent 1d6cebfd6bed99b1ef1671bcb1b6e0cd787953d5\nauthor Santiago Pastorino <spastorino@gmail.com> 1659482064 -0300\ncommitter Santiago Pastorino <spastorino@gmail.com> 1659623217 -0300\n\nRemove captured_lifetimes and LifetimeCaptureContext and make create_lifetime_defs return the captures\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/13800624de1c91cbb133c262086a0e5550686239", "html_url": "https://github.com/rust-lang/rust/commit/13800624de1c91cbb133c262086a0e5550686239", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/13800624de1c91cbb133c262086a0e5550686239/comments", "author": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "committer": {"login": "spastorino", "id": 52642, "node_id": "MDQ6VXNlcjUyNjQy", "avatar_url": "https://avatars.githubusercontent.com/u/52642?v=4", "gravatar_id": "", "url": "https://api.github.com/users/spastorino", "html_url": "https://github.com/spastorino", "followers_url": "https://api.github.com/users/spastorino/followers", "following_url": "https://api.github.com/users/spastorino/following{/other_user}", "gists_url": "https://api.github.com/users/spastorino/gists{/gist_id}", "starred_url": "https://api.github.com/users/spastorino/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/spastorino/subscriptions", "organizations_url": "https://api.github.com/users/spastorino/orgs", "repos_url": "https://api.github.com/users/spastorino/repos", "events_url": "https://api.github.com/users/spastorino/events{/privacy}", "received_events_url": "https://api.github.com/users/spastorino/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1d6cebfd6bed99b1ef1671bcb1b6e0cd787953d5", "url": "https://api.github.com/repos/rust-lang/rust/commits/1d6cebfd6bed99b1ef1671bcb1b6e0cd787953d5", "html_url": "https://github.com/rust-lang/rust/commit/1d6cebfd6bed99b1ef1671bcb1b6e0cd787953d5"}], "stats": {"total": 125, "additions": 43, "deletions": 82}, "files": [{"sha": "cffd025b1890c04541bcf869485a4289e50591db", "filename": "compiler/rustc_ast_lowering/src/item.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/13800624de1c91cbb133c262086a0e5550686239/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13800624de1c91cbb133c262086a0e5550686239/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Fitem.rs?ref=13800624de1c91cbb133c262086a0e5550686239", "patch": "@@ -80,7 +80,6 @@ impl<'a, 'hir> ItemLowerer<'a, 'hir> {\n             generator_kind: None,\n             task_context: None,\n             current_item: None,\n-            captured_lifetimes: None,\n             impl_trait_defs: Vec::new(),\n             impl_trait_bounds: Vec::new(),\n             allow_try_trait: Some([sym::try_trait_v2, sym::yeet_desugar_details][..].into()),"}, {"sha": "d2f9ea570fbc072f16fcfed2b6b1708841619df9", "filename": "compiler/rustc_ast_lowering/src/lib.rs", "status": "modified", "additions": 43, "deletions": 81, "changes": 124, "blob_url": "https://github.com/rust-lang/rust/blob/13800624de1c91cbb133c262086a0e5550686239/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/13800624de1c91cbb133c262086a0e5550686239/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_ast_lowering%2Fsrc%2Flib.rs?ref=13800624de1c91cbb133c262086a0e5550686239", "patch": "@@ -111,9 +111,6 @@ struct LoweringContext<'a, 'hir> {\n     is_in_trait_impl: bool,\n     is_in_dyn_type: bool,\n \n-    /// Used to handle lifetimes appearing in impl-traits.\n-    captured_lifetimes: Option<LifetimeCaptureContext>,\n-\n     current_hir_id_owner: LocalDefId,\n     item_local_id_counter: hir::ItemLocalId,\n     local_id_to_def_id: SortedMap<ItemLocalId, LocalDefId>,\n@@ -130,19 +127,6 @@ struct LoweringContext<'a, 'hir> {\n     allow_into_future: Option<Lrc<[Symbol]>>,\n }\n \n-/// When we lower a lifetime, it is inserted in `captures`, and the resolution is modified so\n-/// to point to the lifetime parameter impl-trait will generate.\n-/// When traversing `for<...>` binders, they are inserted in `binders_to_ignore` so we know *not*\n-/// to rebind the introduced lifetimes.\n-#[derive(Debug)]\n-struct LifetimeCaptureContext {\n-    /// Set of lifetimes to rebind.\n-    captures: Vec<(\n-        Lifetime,    // Lifetime parameter\n-        LifetimeRes, // original resolution\n-    )>,\n-}\n-\n trait ResolverAstLoweringExt {\n     fn legacy_const_generic_args(&self, expr: &Expr) -> Option<Vec<usize>>;\n     fn get_partial_res(&self, id: NodeId) -> Option<PartialRes>;\n@@ -1361,28 +1345,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n \n         self.with_hir_id_owner(opaque_ty_node_id, |lctx| {\n             if origin != hir::OpaqueTyOrigin::TyAlias {\n-                debug!(?lctx.captured_lifetimes);\n-\n-                let lifetime_stash = std::mem::replace(\n-                    &mut lctx.captured_lifetimes,\n-                    Some(LifetimeCaptureContext {\n-                        captures: std::mem::take(&mut collected_lifetimes),\n-                    }),\n-                );\n-\n                 let lifetimes_in_bounds =\n                     lifetime_collector::lifetimes_in_bounds(&lctx.resolver, bounds);\n                 debug!(?lifetimes_in_bounds);\n \n-                lctx.create_and_capture_lifetime_defs(\n+                collected_lifetimes = lctx.create_and_capture_lifetime_defs(\n                     opaque_ty_def_id,\n                     &lifetimes_in_bounds,\n                     &mut new_remapping,\n                 );\n-\n-                let ctxt = std::mem::replace(&mut lctx.captured_lifetimes, lifetime_stash).unwrap();\n-\n-                collected_lifetimes = ctxt.captures;\n             };\n             debug!(?new_remapping);\n             debug!(?collected_lifetimes);\n@@ -1481,58 +1452,58 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         parent_def_id: LocalDefId,\n         lifetimes_in_bounds: &[Lifetime],\n         remapping: &mut FxHashMap<LocalDefId, LocalDefId>,\n-    ) {\n+    ) -> Vec<(Lifetime, LifetimeRes)> {\n+        let mut result = Vec::new();\n+\n         for lifetime in lifetimes_in_bounds {\n             let res = self.resolver.get_lifetime_res(lifetime.id).unwrap_or(LifetimeRes::Error);\n             debug!(?res);\n \n-            if let Some(mut captured_lifetimes) = self.captured_lifetimes.take() {\n-                match res {\n-                    LifetimeRes::Param { param: old_def_id, binder: _ } => {\n-                        if remapping.get(&old_def_id).is_none() {\n-                            let node_id = self.next_node_id();\n-\n-                            let new_def_id = self.create_def(\n-                                parent_def_id,\n-                                node_id,\n-                                DefPathData::LifetimeNs(lifetime.ident.name),\n-                            );\n-                            remapping.insert(old_def_id, new_def_id);\n-\n-                            let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                            captured_lifetimes.captures.push((new_lifetime, res));\n-                        }\n-                    }\n+            match res {\n+                LifetimeRes::Param { param: old_def_id, binder: _ } => {\n+                    if remapping.get(&old_def_id).is_none() {\n+                        let node_id = self.next_node_id();\n \n-                    LifetimeRes::Fresh { param, binder: _ } => {\n-                        debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n-                        let old_def_id = self.local_def_id(param);\n-                        if remapping.get(&old_def_id).is_none() {\n-                            let node_id = self.next_node_id();\n-\n-                            let new_def_id = self.create_def(\n-                                parent_def_id,\n-                                node_id,\n-                                DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n-                            );\n-                            remapping.insert(old_def_id, new_def_id);\n-\n-                            let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n-                            captured_lifetimes.captures.push((new_lifetime, res));\n-                        }\n+                        let new_def_id = self.create_def(\n+                            parent_def_id,\n+                            node_id,\n+                            DefPathData::LifetimeNs(lifetime.ident.name),\n+                        );\n+                        remapping.insert(old_def_id, new_def_id);\n+\n+                        let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n+                        result.push((new_lifetime, res));\n                     }\n+                }\n \n-                    LifetimeRes::Static | LifetimeRes::Error => {}\n+                LifetimeRes::Fresh { param, binder: _ } => {\n+                    debug_assert_eq!(lifetime.ident.name, kw::UnderscoreLifetime);\n+                    let old_def_id = self.local_def_id(param);\n+                    if remapping.get(&old_def_id).is_none() {\n+                        let node_id = self.next_node_id();\n \n-                    res => panic!(\n-                        \"Unexpected lifetime resolution {:?} for {:?} at {:?}\",\n-                        res, lifetime.ident, lifetime.ident.span\n-                    ),\n+                        let new_def_id = self.create_def(\n+                            parent_def_id,\n+                            node_id,\n+                            DefPathData::LifetimeNs(kw::UnderscoreLifetime),\n+                        );\n+                        remapping.insert(old_def_id, new_def_id);\n+\n+                        let new_lifetime = Lifetime { id: node_id, ident: lifetime.ident };\n+                        result.push((new_lifetime, res));\n+                    }\n                 }\n \n-                self.captured_lifetimes = Some(captured_lifetimes);\n+                LifetimeRes::Static | LifetimeRes::Error => {}\n+\n+                res => panic!(\n+                    \"Unexpected lifetime resolution {:?} for {:?} at {:?}\",\n+                    res, lifetime.ident, lifetime.ident.span\n+                ),\n             }\n         }\n+\n+        result\n     }\n \n     fn lower_fn_params_to_names(&mut self, decl: &FnDecl) -> &'hir [Ident] {\n@@ -1768,24 +1739,15 @@ impl<'a, 'hir> LoweringContext<'a, 'hir> {\n         debug!(?captures);\n \n         self.with_hir_id_owner(opaque_ty_node_id, |this| {\n-            let lifetime_stash = std::mem::replace(\n-                &mut this.captured_lifetimes,\n-                Some(LifetimeCaptureContext { captures: std::mem::take(&mut captures) }),\n-            );\n-\n             let lifetimes_in_bounds =\n                 lifetime_collector::lifetimes_in_ret_ty(&this.resolver, output);\n             debug!(?lifetimes_in_bounds);\n \n-            this.create_and_capture_lifetime_defs(\n+            captures.extend(this.create_and_capture_lifetime_defs(\n                 opaque_ty_def_id,\n                 &lifetimes_in_bounds,\n                 &mut new_remapping,\n-            );\n-\n-            let ctxt = std::mem::replace(&mut this.captured_lifetimes, lifetime_stash).unwrap();\n-\n-            captures = ctxt.captures;\n+            ));\n \n             this.with_remapping(new_remapping, |this| {\n                 // We have to be careful to get elision right here. The"}]}