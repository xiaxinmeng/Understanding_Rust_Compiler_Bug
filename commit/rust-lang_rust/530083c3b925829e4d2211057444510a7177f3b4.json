{"sha": "530083c3b925829e4d2211057444510a7177f3b4", "node_id": "MDY6Q29tbWl0NzI0NzEyOjUzMDA4M2MzYjkyNTgyOWU0ZDIyMTEwNTc0NDQ1MTBhNzE3N2YzYjQ=", "commit": {"author": {"name": "Martin Carton", "email": "cartonmartin+github@gmail.com", "date": "2016-11-22T17:21:30Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2016-11-22T17:21:30Z"}, "message": "Merge pull request #1349 from philipturnbull/extend-chars\n\nLint `.extend(s.chars())` (closes #792)", "tree": {"sha": "25ab752222ea685256ecb11325da4cdd3402a32d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25ab752222ea685256ecb11325da4cdd3402a32d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/530083c3b925829e4d2211057444510a7177f3b4", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/530083c3b925829e4d2211057444510a7177f3b4", "html_url": "https://github.com/rust-lang/rust/commit/530083c3b925829e4d2211057444510a7177f3b4", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/530083c3b925829e4d2211057444510a7177f3b4/comments", "author": {"login": "mcarton", "id": 3751788, "node_id": "MDQ6VXNlcjM3NTE3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/3751788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mcarton", "html_url": "https://github.com/mcarton", "followers_url": "https://api.github.com/users/mcarton/followers", "following_url": "https://api.github.com/users/mcarton/following{/other_user}", "gists_url": "https://api.github.com/users/mcarton/gists{/gist_id}", "starred_url": "https://api.github.com/users/mcarton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mcarton/subscriptions", "organizations_url": "https://api.github.com/users/mcarton/orgs", "repos_url": "https://api.github.com/users/mcarton/repos", "events_url": "https://api.github.com/users/mcarton/events{/privacy}", "received_events_url": "https://api.github.com/users/mcarton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e2908dfc82ee26dc448b2a1b1e1a252708d5555c", "url": "https://api.github.com/repos/rust-lang/rust/commits/e2908dfc82ee26dc448b2a1b1e1a252708d5555c", "html_url": "https://github.com/rust-lang/rust/commit/e2908dfc82ee26dc448b2a1b1e1a252708d5555c"}, {"sha": "8705f3d11cbbb2237f84a4da6c070a1fa76f8d48", "url": "https://api.github.com/repos/rust-lang/rust/commits/8705f3d11cbbb2237f84a4da6c070a1fa76f8d48", "html_url": "https://github.com/rust-lang/rust/commit/8705f3d11cbbb2237f84a4da6c070a1fa76f8d48"}], "stats": {"total": 121, "additions": 114, "deletions": 7}, "files": [{"sha": "14bf8ba16090e2c68549f62a49d8631e6b67d737", "filename": "CHANGELOG.md", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/530083c3b925829e4d2211057444510a7177f3b4/CHANGELOG.md", "raw_url": "https://github.com/rust-lang/rust/raw/530083c3b925829e4d2211057444510a7177f3b4/CHANGELOG.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/CHANGELOG.md?ref=530083c3b925829e4d2211057444510a7177f3b4", "patch": "@@ -362,6 +362,7 @@ All notable changes to this project will be documented in this file.\n [`str_to_string`]: https://github.com/Manishearth/rust-clippy/wiki#str_to_string\n [`string_add`]: https://github.com/Manishearth/rust-clippy/wiki#string_add\n [`string_add_assign`]: https://github.com/Manishearth/rust-clippy/wiki#string_add_assign\n+[`string_extend_chars`]: https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars\n [`string_lit_as_bytes`]: https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes\n [`string_to_string`]: https://github.com/Manishearth/rust-clippy/wiki#string_to_string\n [`stutter`]: https://github.com/Manishearth/rust-clippy/wiki#stutter"}, {"sha": "db291adefaf3d3a8c8c848f3132fbe641f6a83d8", "filename": "README.md", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/530083c3b925829e4d2211057444510a7177f3b4/README.md", "raw_url": "https://github.com/rust-lang/rust/raw/530083c3b925829e4d2211057444510a7177f3b4/README.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/README.md?ref=530083c3b925829e4d2211057444510a7177f3b4", "patch": "@@ -182,7 +182,7 @@ You can check out this great service at [clippy.bashy.io](https://clippy.bashy.i\n \n ## Lints\n \n-There are 177 lints included in this crate:\n+There are 178 lints included in this crate:\n \n name                                                                                                                   | default | triggers on\n -----------------------------------------------------------------------------------------------------------------------|---------|----------------------------------------------------------------------------------------------------------------------------------\n@@ -327,6 +327,7 @@ name\n [single_match_else](https://github.com/Manishearth/rust-clippy/wiki#single_match_else)                                 | allow   | a match statement with a two arms where the second arm's pattern is a wildcard instead of `if let`\n [string_add](https://github.com/Manishearth/rust-clippy/wiki#string_add)                                               | allow   | using `x + ..` where x is a `String` instead of `push_str()`\n [string_add_assign](https://github.com/Manishearth/rust-clippy/wiki#string_add_assign)                                 | allow   | using `x = x + ..` where x is a `String` instead of `push_str()`\n+[string_extend_chars](https://github.com/Manishearth/rust-clippy/wiki#string_extend_chars)                             | warn    | using `x.extend(s.chars())` where s is a `&str` or `String`\n [string_lit_as_bytes](https://github.com/Manishearth/rust-clippy/wiki#string_lit_as_bytes)                             | warn    | calling `as_bytes` on a string literal instead of using a byte string literal\n [stutter](https://github.com/Manishearth/rust-clippy/wiki#stutter)                                                     | allow   | type names prefixed/postfixed with their containing module's name\n [suspicious_assignment_formatting](https://github.com/Manishearth/rust-clippy/wiki#suspicious_assignment_formatting)   | warn    | suspicious formatting of `*=`, `-=` or `!=`"}, {"sha": "a90f121fe79ac034c8b4d24d71bf10ac9ceb36a0", "filename": "clippy_lints/src/lib.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/530083c3b925829e4d2211057444510a7177f3b4/clippy_lints%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530083c3b925829e4d2211057444510a7177f3b4/clippy_lints%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Flib.rs?ref=530083c3b925829e4d2211057444510a7177f3b4", "patch": "@@ -391,6 +391,7 @@ pub fn register_plugins(reg: &mut rustc_plugin::Registry) {\n         methods::SEARCH_IS_SOME,\n         methods::SHOULD_IMPLEMENT_TRAIT,\n         methods::SINGLE_CHAR_PATTERN,\n+        methods::STRING_EXTEND_CHARS,\n         methods::TEMPORARY_CSTRING_AS_PTR,\n         methods::WRONG_SELF_CONVENTION,\n         minmax::MIN_MAX,"}, {"sha": "2d600300448a16935e6ba02f093fc2d7e528eed3", "filename": "clippy_lints/src/methods.rs", "status": "modified", "additions": 70, "deletions": 6, "changes": 76, "blob_url": "https://github.com/rust-lang/rust/blob/530083c3b925829e4d2211057444510a7177f3b4/clippy_lints%2Fsrc%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530083c3b925829e4d2211057444510a7177f3b4/clippy_lints%2Fsrc%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fmethods.rs?ref=530083c3b925829e4d2211057444510a7177f3b4", "patch": "@@ -490,6 +490,36 @@ declare_lint! {\n     \"using `.get().unwrap()` or `.get_mut().unwrap()` when using `[]` would work instead\"\n }\n \n+/// **What it does:** Checks for the use of `.extend(s.chars())` where s is a\n+/// `&str` or `String`.\n+///\n+/// **Why is this bad?** `.push_str(s)` is clearer\n+///\n+/// **Known problems:** None.\n+///\n+/// **Example:**\n+/// ```rust\n+/// let abc = \"abc\";\n+/// let def = String::from(\"def\");\n+/// let mut s = String::new();\n+/// s.extend(abc.chars());\n+/// s.extend(def.chars());\n+/// ```\n+/// The correct use would be:\n+/// ```rust\n+/// let abc = \"abc\";\n+/// let def = String::from(\"def\");\n+/// let mut s = String::new();\n+/// s.push_str(abc);\n+/// s.push_str(&def));\n+/// ```\n+\n+declare_lint! {\n+    pub STRING_EXTEND_CHARS,\n+    Warn,\n+    \"using `x.extend(s.chars())` where s is a `&str` or `String`\"\n+}\n+\n \n impl LintPass for Pass {\n     fn get_lints(&self) -> LintArray {\n@@ -514,7 +544,8 @@ impl LintPass for Pass {\n                     FILTER_MAP,\n                     ITER_NTH,\n                     ITER_SKIP_NEXT,\n-                    GET_UNWRAP)\n+                    GET_UNWRAP,\n+                    STRING_EXTEND_CHARS)\n     }\n }\n \n@@ -794,11 +825,7 @@ fn lint_clone_on_copy(cx: &LateContext, expr: &hir::Expr, arg: &hir::Expr, arg_t\n     }\n }\n \n-fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n-    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.tables().expr_ty(&args[0]));\n-    if !match_type(cx, obj_ty, &paths::VEC) {\n-        return;\n-    }\n+fn lint_vec_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n     let arg_ty = cx.tcx.tables().expr_ty(&args[1]);\n     if let Some(slice) = derefs_to_slice(cx, &args[1], arg_ty) {\n         span_lint_and_then(cx, EXTEND_FROM_SLICE, expr.span, \"use of `extend` to extend a Vec by a slice\", |db| {\n@@ -811,6 +838,43 @@ fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n     }\n }\n \n+fn lint_string_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n+    let arg = &args[1];\n+    if let Some(arglists) = method_chain_args(arg, &[\"chars\"]) {\n+        let target = &arglists[0][0];\n+        let (self_ty, _) = walk_ptrs_ty_depth(cx.tcx.tables().expr_ty(target));\n+        let ref_str = if self_ty.sty == ty::TyStr {\n+            \"\"\n+        } else if match_type(cx, self_ty, &paths::STRING) {\n+            \"&\"\n+        } else {\n+            return;\n+        };\n+\n+        span_lint_and_then(\n+            cx,\n+            STRING_EXTEND_CHARS,\n+            expr.span,\n+            \"calling `.extend(_.chars())`\",\n+            |db| {\n+                db.span_suggestion(expr.span, \"try this\",\n+                        format!(\"{}.push_str({}{})\",\n+                                snippet(cx, args[0].span, \"_\"),\n+                                ref_str,\n+                                snippet(cx, target.span, \"_\")));\n+            });\n+    }\n+}\n+\n+fn lint_extend(cx: &LateContext, expr: &hir::Expr, args: &MethodArgs) {\n+    let (obj_ty, _) = walk_ptrs_ty_depth(cx.tcx.tables().expr_ty(&args[0]));\n+    if match_type(cx, obj_ty, &paths::VEC) {\n+        lint_vec_extend(cx, expr, args);\n+    } else if match_type(cx, obj_ty, &paths::STRING) {\n+        lint_string_extend(cx, expr, args);\n+    }\n+}\n+\n fn lint_cstring_as_ptr(cx: &LateContext, expr: &hir::Expr, new: &hir::Expr, unwrap: &hir::Expr) {\n     if_let_chain!{[\n         let hir::ExprCall(ref fun, ref args) = new.node,"}, {"sha": "0add705d6f8cfad0b4c47b32194e171e135d5316", "filename": "tests/compile-fail/methods.rs", "status": "modified", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/530083c3b925829e4d2211057444510a7177f3b4/tests%2Fcompile-fail%2Fmethods.rs", "raw_url": "https://github.com/rust-lang/rust/raw/530083c3b925829e4d2211057444510a7177f3b4/tests%2Fcompile-fail%2Fmethods.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/tests%2Fcompile-fail%2Fmethods.rs?ref=530083c3b925829e4d2211057444510a7177f3b4", "patch": "@@ -180,6 +180,15 @@ impl IteratorFalsePositives {\n     }\n }\n \n+#[derive(Copy, Clone)]\n+struct HasChars;\n+\n+impl HasChars {\n+    fn chars(self) -> std::str::Chars<'static> {\n+        \"HasChars\".chars()\n+    }\n+}\n+\n /// Checks implementation of `FILTER_NEXT` lint\n fn filter_next() {\n     let v = vec![3, 2, 1, 0, -1, -2, -3];\n@@ -524,6 +533,37 @@ fn use_extend_from_slice() {\n     //~| SUGGESTION v.extend_from_slice(&[\"But\", \"this\"]);\n }\n \n+fn str_extend_chars() {\n+    let abc = \"abc\";\n+    let def = String::from(\"def\");\n+    let mut s = String::new();\n+\n+    s.push_str(abc);\n+    s.extend(abc.chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(abc)\n+\n+    s.push_str(\"abc\");\n+    s.extend(\"abc\".chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(\"abc\")\n+\n+    s.push_str(&def);\n+    s.extend(def.chars());\n+    //~^ERROR calling `.extend(_.chars())`\n+    //~|HELP try this\n+    //~|SUGGESTION s.push_str(&def)\n+\n+    s.extend(abc.chars().skip(1));\n+    s.extend(\"abc\".chars().skip(1));\n+    s.extend(['a', 'b', 'c'].iter());\n+\n+    let f = HasChars;\n+    s.extend(f.chars());\n+}\n+\n fn clone_on_copy() {\n     42.clone(); //~ERROR using `clone` on a `Copy` type\n                 //~| HELP try removing the `clone` call"}]}