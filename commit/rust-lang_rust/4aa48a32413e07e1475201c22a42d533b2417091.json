{"sha": "4aa48a32413e07e1475201c22a42d533b2417091", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRhYTQ4YTMyNDEzZTA3ZTE0NzUyMDFjMjJhNDJkNTMzYjI0MTcwOTE=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-04T10:26:47Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo", "date": "2018-01-04T10:26:47Z"}, "message": "Map invalid Spans to DUMMY_SP during crate metadata encoding.\n\nThis mirrors what we for stabilizing the incr. comp. cache and is\nnecessary for reproducible builds.", "tree": {"sha": "891f56dc4733b545f95dd507ef90a7d887fa4acc", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/891f56dc4733b545f95dd507ef90a7d887fa4acc"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4aa48a32413e07e1475201c22a42d533b2417091", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4aa48a32413e07e1475201c22a42d533b2417091", "html_url": "https://github.com/rust-lang/rust/commit/4aa48a32413e07e1475201c22a42d533b2417091", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4aa48a32413e07e1475201c22a42d533b2417091/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "78f24d86b84882a02c15f27768e831d0342a3f5d", "url": "https://api.github.com/repos/rust-lang/rust/commits/78f24d86b84882a02c15f27768e831d0342a3f5d", "html_url": "https://github.com/rust-lang/rust/commit/78f24d86b84882a02c15f27768e831d0342a3f5d"}], "stats": {"total": 72, "additions": 54, "deletions": 18}, "files": [{"sha": "91703425017f83ea7a97a5e832371129269b295a", "filename": "src/librustc_metadata/decoder.rs", "status": "modified", "additions": 11, "deletions": 17, "changes": 28, "blob_url": "https://github.com/rust-lang/rust/blob/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fdecoder.rs?ref=4aa48a32413e07e1475201c22a42d533b2417091", "patch": "@@ -270,19 +270,17 @@ impl<'a, 'tcx> SpecializedDecoder<DefIndex> for DecodeContext<'a, 'tcx> {\n \n impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n     fn specialized_decode(&mut self) -> Result<Span, Self::Error> {\n-        let lo = BytePos::decode(self)?;\n-        let hi = BytePos::decode(self)?;\n+        let tag = u8::decode(self)?;\n \n-        if lo == BytePos(0) && hi == BytePos(0) {\n-            // Don't try to rebase DUMMY_SP. Otherwise it will look like a valid\n-            // Span again.\n+        if tag == TAG_INVALID_SPAN {\n             return Ok(DUMMY_SP)\n         }\n \n-        if hi < lo {\n-            // Consistently map invalid spans to DUMMY_SP.\n-            return Ok(DUMMY_SP)\n-        }\n+        debug_assert_eq!(tag, TAG_VALID_SPAN);\n+\n+        let lo = BytePos::decode(self)?;\n+        let len = BytePos::decode(self)?;\n+        let hi = lo + len;\n \n         let sess = if let Some(sess) = self.sess {\n             sess\n@@ -297,9 +295,7 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n             let last_filemap = &imported_filemaps[self.last_filemap_index];\n \n             if lo >= last_filemap.original_start_pos &&\n-               lo <= last_filemap.original_end_pos &&\n-               hi >= last_filemap.original_start_pos &&\n-               hi <= last_filemap.original_end_pos {\n+               lo <= last_filemap.original_end_pos {\n                 last_filemap\n             } else {\n                 let mut a = 0;\n@@ -323,11 +319,9 @@ impl<'a, 'tcx> SpecializedDecoder<Span> for DecodeContext<'a, 'tcx> {\n         debug_assert!(lo >= filemap.original_start_pos &&\n                       lo <= filemap.original_end_pos);\n \n-        if hi < filemap.original_start_pos || hi > filemap.original_end_pos {\n-            // `hi` points to a different FileMap than `lo` which is invalid.\n-            // Again, map invalid Spans to DUMMY_SP.\n-            return Ok(DUMMY_SP)\n-        }\n+        // Make sure we correctly filtered out invalid spans during encoding\n+        debug_assert!(hi >= filemap.original_start_pos &&\n+                      hi <= filemap.original_end_pos);\n \n         let lo = (lo + filemap.translated_filemap.start_pos) - filemap.original_start_pos;\n         let hi = (hi + filemap.translated_filemap.start_pos) - filemap.original_start_pos;"}, {"sha": "efc39805a742d7c3494487e79d93ede19786d7a8", "filename": "src/librustc_metadata/encoder.rs", "status": "modified", "additions": 39, "deletions": 1, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fencoder.rs?ref=4aa48a32413e07e1475201c22a42d533b2417091", "patch": "@@ -41,7 +41,7 @@ use syntax::ast::{self, CRATE_NODE_ID};\n use syntax::codemap::Spanned;\n use syntax::attr;\n use syntax::symbol::Symbol;\n-use syntax_pos::{self, FileName};\n+use syntax_pos::{self, FileName, FileMap, Span, DUMMY_SP};\n \n use rustc::hir::{self, PatKind};\n use rustc::hir::itemlikevisit::ItemLikeVisitor;\n@@ -57,6 +57,9 @@ pub struct EncodeContext<'a, 'tcx: 'a> {\n     lazy_state: LazyState,\n     type_shorthands: FxHashMap<Ty<'tcx>, usize>,\n     predicate_shorthands: FxHashMap<ty::Predicate<'tcx>, usize>,\n+\n+    // This is used to speed up Span encoding.\n+    filemap_cache: Rc<FileMap>,\n }\n \n macro_rules! encoder_methods {\n@@ -140,6 +143,40 @@ impl<'a, 'tcx> SpecializedEncoder<DefIndex> for EncodeContext<'a, 'tcx> {\n     }\n }\n \n+impl<'a, 'tcx> SpecializedEncoder<Span> for EncodeContext<'a, 'tcx> {\n+    fn specialized_encode(&mut self, span: &Span) -> Result<(), Self::Error> {\n+        if *span == DUMMY_SP {\n+            return TAG_INVALID_SPAN.encode(self)\n+        }\n+\n+        let span = span.data();\n+\n+        if span.lo > span.hi {\n+            return TAG_INVALID_SPAN.encode(self)\n+        }\n+\n+        if !self.filemap_cache.contains(span.lo) {\n+            let codemap = self.tcx.sess.codemap();\n+            let filemap_index = codemap.lookup_filemap_idx(span.lo);\n+            self.filemap_cache = codemap.files()[filemap_index].clone();\n+        }\n+\n+        if !self.filemap_cache.contains(span.hi) {\n+            return TAG_INVALID_SPAN.encode(self)\n+        }\n+\n+        TAG_VALID_SPAN.encode(self)?;\n+        span.lo.encode(self)?;\n+\n+        // Encode length which is usually less than span.hi and profits more\n+        // from the variable-length integer encoding that we use.\n+        let len = span.hi - span.lo;\n+        len.encode(self)\n+\n+        // Don't encode the expansion context.\n+    }\n+}\n+\n impl<'a, 'tcx> SpecializedEncoder<Ty<'tcx>> for EncodeContext<'a, 'tcx> {\n     fn specialized_encode(&mut self, ty: &Ty<'tcx>) -> Result<(), Self::Error> {\n         ty_codec::encode_with_shorthand(self, ty, |ecx| &mut ecx.type_shorthands)\n@@ -1648,6 +1685,7 @@ pub fn encode_metadata<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n             lazy_state: LazyState::NoNode,\n             type_shorthands: Default::default(),\n             predicate_shorthands: Default::default(),\n+            filemap_cache: tcx.sess.codemap().files()[0].clone(),\n         };\n \n         // Encode the rustc version string in a predictable location."}, {"sha": "5510d66b55bfb7a2c9160e44cb64dc7550f22805", "filename": "src/librustc_metadata/schema.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fschema.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4aa48a32413e07e1475201c22a42d533b2417091/src%2Flibrustc_metadata%2Fschema.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fschema.rs?ref=4aa48a32413e07e1475201c22a42d533b2417091", "patch": "@@ -521,3 +521,7 @@ pub struct GeneratorData<'tcx> {\n     pub layout: mir::GeneratorLayout<'tcx>,\n }\n impl_stable_hash_for!(struct GeneratorData<'tcx> { layout });\n+\n+// Tags used for encoding Spans:\n+pub const TAG_VALID_SPAN: u8 = 0;\n+pub const TAG_INVALID_SPAN: u8 = 1;"}]}