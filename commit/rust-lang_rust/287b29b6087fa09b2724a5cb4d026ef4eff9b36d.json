{"sha": "287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI4N2IyOWI2MDg3ZmEwOWIyNzI0YTVjYjRkMDI2ZWY0ZWZmOWIzNmQ=", "commit": {"author": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-24T05:12:08Z"}, "committer": {"name": "Shotaro Yamada", "email": "sinkuu@sinkuu.xyz", "date": "2018-03-24T05:18:06Z"}, "message": "Resolve `impl Trait` in argument position", "tree": {"sha": "f848aefcbec2f929219355493ae337afa7b412c9", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/f848aefcbec2f929219355493ae337afa7b412c9"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "html_url": "https://github.com/rust-lang/rust/commit/287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/287b29b6087fa09b2724a5cb4d026ef4eff9b36d/comments", "author": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "sinkuu", "id": 7091080, "node_id": "MDQ6VXNlcjcwOTEwODA=", "avatar_url": "https://avatars.githubusercontent.com/u/7091080?v=4", "gravatar_id": "", "url": "https://api.github.com/users/sinkuu", "html_url": "https://github.com/sinkuu", "followers_url": "https://api.github.com/users/sinkuu/followers", "following_url": "https://api.github.com/users/sinkuu/following{/other_user}", "gists_url": "https://api.github.com/users/sinkuu/gists{/gist_id}", "starred_url": "https://api.github.com/users/sinkuu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/sinkuu/subscriptions", "organizations_url": "https://api.github.com/users/sinkuu/orgs", "repos_url": "https://api.github.com/users/sinkuu/repos", "events_url": "https://api.github.com/users/sinkuu/events{/privacy}", "received_events_url": "https://api.github.com/users/sinkuu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5dfa5f048ecf57752cf44036fa54a3246225f10d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5dfa5f048ecf57752cf44036fa54a3246225f10d", "html_url": "https://github.com/rust-lang/rust/commit/5dfa5f048ecf57752cf44036fa54a3246225f10d"}], "stats": {"total": 64, "additions": 54, "deletions": 10}, "files": [{"sha": "0154c6a08557cec87ede7b870467bc89a622003f", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 51, "deletions": 10, "changes": 61, "blob_url": "https://github.com/rust-lang/rust/blob/287b29b6087fa09b2724a5cb4d026ef4eff9b36d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287b29b6087fa09b2724a5cb4d026ef4eff9b36d/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "patch": "@@ -1774,11 +1774,12 @@ pub struct Method {\n \n impl<'a> Clean<Method> for (&'a hir::MethodSig, &'a hir::Generics, hir::BodyId) {\n     fn clean(&self, cx: &DocContext) -> Method {\n+        let generics = self.1.clean(cx);\n         Method {\n-            generics: self.1.clean(cx),\n+            decl: enter_impl_trait(cx, &generics.params, || (&*self.0.decl, self.2).clean(cx)),\n+            generics,\n             unsafety: self.0.unsafety,\n             constness: self.0.constness,\n-            decl: (&*self.0.decl, self.2).clean(cx),\n             abi: self.0.abi\n         }\n     }\n@@ -1803,6 +1804,8 @@ pub struct Function {\n \n impl Clean<Item> for doctree::Function {\n     fn clean(&self, cx: &DocContext) -> Item {\n+        let generics = self.generics.clean(cx);\n+        let decl = enter_impl_trait(cx, &generics.params, || (&self.decl, self.body).clean(cx));\n         Item {\n             name: Some(self.name.clean(cx)),\n             attrs: self.attrs.clean(cx),\n@@ -1812,8 +1815,8 @@ impl Clean<Item> for doctree::Function {\n             deprecation: self.depr.clean(cx),\n             def_id: cx.tcx.hir.local_def_id(self.id),\n             inner: FunctionItem(Function {\n-                decl: (&self.decl, self.body).clean(cx),\n-                generics: self.generics.clean(cx),\n+                decl,\n+                generics,\n                 unsafety: self.unsafety,\n                 constness: self.constness,\n                 abi: self.abi,\n@@ -2040,10 +2043,13 @@ impl Clean<Item> for hir::TraitItem {\n                 MethodItem((sig, &self.generics, body).clean(cx))\n             }\n             hir::TraitItemKind::Method(ref sig, hir::TraitMethod::Required(ref names)) => {\n+                let generics = self.generics.clean(cx);\n                 TyMethodItem(TyMethod {\n                     unsafety: sig.unsafety.clone(),\n-                    decl: (&*sig.decl, &names[..]).clean(cx),\n-                    generics: self.generics.clean(cx),\n+                    decl: enter_impl_trait(cx, &generics.params, || {\n+                        (&*sig.decl, &names[..]).clean(cx)\n+                    }),\n+                    generics,\n                     abi: sig.abi\n                 })\n             }\n@@ -2547,6 +2553,12 @@ impl Clean<Type> for hir::Ty {\n                     return new_ty;\n                 }\n \n+                if let Def::TyParam(did) = path.def {\n+                    if let Some(bounds) = cx.impl_trait_bounds.borrow_mut().remove(&did) {\n+                        return ImplTrait(bounds);\n+                    }\n+                }\n+\n                 let mut alias = None;\n                 if let Def::TyAlias(def_id) = path.def {\n                     // Substitute private type aliases\n@@ -3259,10 +3271,13 @@ pub struct BareFunctionDecl {\n \n impl Clean<BareFunctionDecl> for hir::BareFnTy {\n     fn clean(&self, cx: &DocContext) -> BareFunctionDecl {\n+        let generic_params = self.generic_params.clean(cx);\n         BareFunctionDecl {\n             unsafety: self.unsafety,\n-            generic_params: self.generic_params.clean(cx),\n-            decl: (&*self.decl, &self.arg_names[..]).clean(cx),\n+            decl: enter_impl_trait(cx, &generic_params, || {\n+                (&*self.decl, &self.arg_names[..]).clean(cx)\n+            }),\n+            generic_params,\n             abi: self.abi,\n         }\n     }\n@@ -3563,9 +3578,12 @@ impl Clean<Item> for hir::ForeignItem {\n     fn clean(&self, cx: &DocContext) -> Item {\n         let inner = match self.node {\n             hir::ForeignItemFn(ref decl, ref names, ref generics) => {\n+                let generics = generics.clean(cx);\n                 ForeignFunctionItem(Function {\n-                    decl: (&**decl, &names[..]).clean(cx),\n-                    generics: generics.clean(cx),\n+                    decl: enter_impl_trait(cx, &generics.params, || {\n+                        (&**decl, &names[..]).clean(cx)\n+                    }),\n+                    generics,\n                     unsafety: hir::Unsafety::Unsafe,\n                     abi: Abi::Rust,\n                     constness: hir::Constness::NotConst,\n@@ -3867,6 +3885,29 @@ pub fn def_id_to_path(cx: &DocContext, did: DefId, name: Option<String>) -> Vec<\n     once(crate_name).chain(relative).collect()\n }\n \n+pub fn enter_impl_trait<F, R>(cx: &DocContext, gps: &[GenericParam], f: F) -> R\n+where\n+    F: FnOnce() -> R,\n+{\n+    let bounds = gps.iter()\n+        .filter_map(|p| {\n+            if let GenericParam::Type(ref tp) = *p {\n+                if tp.synthetic == Some(hir::SyntheticTyParamKind::ImplTrait) {\n+                    return Some((tp.did, tp.bounds.clone()));\n+                }\n+            }\n+\n+            None\n+        })\n+        .collect::<FxHashMap<DefId, Vec<TyParamBound>>>();\n+\n+    let old_bounds = mem::replace(&mut *cx.impl_trait_bounds.borrow_mut(), bounds);\n+    let r = f();\n+    assert!(cx.impl_trait_bounds.borrow().is_empty());\n+    *cx.impl_trait_bounds.borrow_mut() = old_bounds;\n+    r\n+}\n+\n // Start of code copied from rust-clippy\n \n pub fn get_trait_def_id(tcx: &TyCtxt, path: &[&str], use_local: bool) -> Option<DefId> {"}, {"sha": "749d7ec126be30a8b8fa7dbe07cecb68245addc9", "filename": "src/librustdoc/core.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/287b29b6087fa09b2724a5cb4d026ef4eff9b36d/src%2Flibrustdoc%2Fcore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/287b29b6087fa09b2724a5cb4d026ef4eff9b36d/src%2Flibrustdoc%2Fcore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fcore.rs?ref=287b29b6087fa09b2724a5cb4d026ef4eff9b36d", "patch": "@@ -72,6 +72,8 @@ pub struct DocContext<'a, 'tcx: 'a, 'rcx: 'a> {\n     pub ty_substs: RefCell<FxHashMap<Def, clean::Type>>,\n     /// Table node id of lifetime parameter definition -> substituted lifetime\n     pub lt_substs: RefCell<FxHashMap<DefId, clean::Lifetime>>,\n+    /// Table DefId of `impl Trait` in argument position -> bounds\n+    pub impl_trait_bounds: RefCell<FxHashMap<DefId, Vec<clean::TyParamBound>>>,\n     pub send_trait: Option<DefId>,\n     pub fake_def_ids: RefCell<FxHashMap<CrateNum, DefId>>,\n     pub all_fake_def_ids: RefCell<FxHashSet<DefId>>,\n@@ -261,6 +263,7 @@ pub fn run_core(search_paths: SearchPaths,\n             renderinfo: Default::default(),\n             ty_substs: Default::default(),\n             lt_substs: Default::default(),\n+            impl_trait_bounds: Default::default(),\n             mod_ids: Default::default(),\n             send_trait: send_trait,\n             fake_def_ids: RefCell::new(FxHashMap()),"}]}