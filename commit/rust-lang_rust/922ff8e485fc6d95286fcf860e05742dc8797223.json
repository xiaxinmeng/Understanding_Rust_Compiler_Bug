{"sha": "922ff8e485fc6d95286fcf860e05742dc8797223", "node_id": "MDY6Q29tbWl0NzI0NzEyOjkyMmZmOGU0ODVmYzZkOTUyODZmY2Y4NjBlMDU3NDJkYzg3OTcyMjM=", "commit": {"author": {"name": "Aman Arora", "email": "me@aman-arora.com", "date": "2020-06-17T22:13:05Z"}, "committer": {"name": "Aman Arora", "email": "aman23091998@gmail.com", "date": "2020-06-18T22:59:38Z"}, "message": "Refactor hir::Place\n\nFor the following code\n```rust\nlet c = || bar(foo.x, foo.x)\n```\n\nWe generate two different `hir::Place`s for both `foo.x`.\nHandling this adds overhead for analysis we need to do for RFC 2229.\n\nWe also want to store type information at each Projection to support\nanalysis as part of the RFC. This resembles what we have for\n`mir::Place`\n\nThis commit modifies the Place as follows:\n- Rename to `PlaceWithHirId`, where there `hir_id` is that of the\nexpressioin.\n- Move any other information that describes the access out to another\nstruct now called `Place`.\n- Removed `Span`, it can be accessed using the [hir\nAPI](https://doc.rust-lang.org/nightly/nightly-rustc/rustc_middle/hir/map/struct.Map.html#method.span)\n- Modify `Projection` to be a strucutre of its own, that currently only\ncontains the `ProjectionKind`.\n\nAdding type information to projections wil be completed as part of https://github.com/rust-lang/project-rfc-2229/issues/5\n\nCloses https://github.com/rust-lang/project-rfc-2229/issues/3\n\nCo-authored-by: Aman Arora <me@aman-arora.com>\nCo-authored-by: Roxane Fruytier <roxane.fruytier@hotmail.com>", "tree": {"sha": "7040cda8f9c3fb0f9adb4b7c99d8bcb646b96620", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/7040cda8f9c3fb0f9adb4b7c99d8bcb646b96620"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/922ff8e485fc6d95286fcf860e05742dc8797223", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/922ff8e485fc6d95286fcf860e05742dc8797223", "html_url": "https://github.com/rust-lang/rust/commit/922ff8e485fc6d95286fcf860e05742dc8797223", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/922ff8e485fc6d95286fcf860e05742dc8797223/comments", "author": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "committer": {"login": "arora-aman", "id": 4193035, "node_id": "MDQ6VXNlcjQxOTMwMzU=", "avatar_url": "https://avatars.githubusercontent.com/u/4193035?v=4", "gravatar_id": "", "url": "https://api.github.com/users/arora-aman", "html_url": "https://github.com/arora-aman", "followers_url": "https://api.github.com/users/arora-aman/followers", "following_url": "https://api.github.com/users/arora-aman/following{/other_user}", "gists_url": "https://api.github.com/users/arora-aman/gists{/gist_id}", "starred_url": "https://api.github.com/users/arora-aman/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/arora-aman/subscriptions", "organizations_url": "https://api.github.com/users/arora-aman/orgs", "repos_url": "https://api.github.com/users/arora-aman/repos", "events_url": "https://api.github.com/users/arora-aman/events{/privacy}", "received_events_url": "https://api.github.com/users/arora-aman/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "93696f45fffbefa55ff57d91b12fc29c77ee6302", "url": "https://api.github.com/repos/rust-lang/rust/commits/93696f45fffbefa55ff57d91b12fc29c77ee6302", "html_url": "https://github.com/rust-lang/rust/commit/93696f45fffbefa55ff57d91b12fc29c77ee6302"}], "stats": {"total": 74, "additions": 38, "deletions": 36}, "files": [{"sha": "59af475af175e2c484318fe1cbfb354965d3a9ea", "filename": "clippy_lints/src/escape.rs", "status": "modified", "additions": 10, "deletions": 10, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Fescape.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Fescape.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fescape.rs?ref=922ff8e485fc6d95286fcf860e05742dc8797223", "patch": "@@ -6,7 +6,7 @@ use rustc_middle::ty::{self, Ty};\n use rustc_session::{declare_tool_lint, impl_lint_pass};\n use rustc_span::source_map::Span;\n use rustc_target::abi::LayoutOf;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n \n use crate::utils::span_lint;\n \n@@ -112,9 +112,9 @@ fn is_argument(map: rustc_middle::hir::map::Map<'_>, id: HirId) -> bool {\n }\n \n impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n-    fn consume(&mut self, cmt: &Place<'tcx>, mode: ConsumeMode) {\n-        if cmt.projections.is_empty() {\n-            if let PlaceBase::Local(lid) = cmt.base {\n+    fn consume(&mut self, cmt: &PlaceWithHirId<'tcx>, mode: ConsumeMode) {\n+        if cmt.place.projections.is_empty() {\n+            if let PlaceBase::Local(lid) = cmt.place.base {\n                 if let ConsumeMode::Move = mode {\n                     // moved out or in. clearly can't be localized\n                     self.set.remove(&lid);\n@@ -132,16 +132,16 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n         }\n     }\n \n-    fn borrow(&mut self, cmt: &Place<'tcx>, _: ty::BorrowKind) {\n-        if cmt.projections.is_empty() {\n-            if let PlaceBase::Local(lid) = cmt.base {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, _: ty::BorrowKind) {\n+        if cmt.place.projections.is_empty() {\n+            if let PlaceBase::Local(lid) = cmt.place.base {\n                 self.set.remove(&lid);\n             }\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &Place<'tcx>) {\n-        if cmt.projections.is_empty() {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n+        if cmt.place.projections.is_empty() {\n             let map = &self.cx.tcx.hir();\n             if is_argument(*map, cmt.hir_id) {\n                 // Skip closure arguments\n@@ -150,7 +150,7 @@ impl<'a, 'tcx> Delegate<'tcx> for EscapeDelegate<'a, 'tcx> {\n                     return;\n                 }\n \n-                if is_non_trait_box(cmt.ty) && !self.is_large_box(cmt.ty) {\n+                if is_non_trait_box(cmt.place.ty) && !self.is_large_box(cmt.place.ty) {\n                     self.set.insert(cmt.hir_id);\n                 }\n                 return;"}, {"sha": "83093ec51bd9037dd52569934fcb72bc1576b8f3", "filename": "clippy_lints/src/loops.rs", "status": "modified", "additions": 17, "deletions": 15, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Floops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Floops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Floops.rs?ref=922ff8e485fc6d95286fcf860e05742dc8797223", "patch": "@@ -28,7 +28,7 @@ use rustc_middle::ty::{self, Ty, TyS};\n use rustc_session::{declare_lint_pass, declare_tool_lint};\n use rustc_span::source_map::Span;\n use rustc_span::symbol::Symbol;\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n use std::iter::{once, Iterator};\n use std::mem;\n \n@@ -1489,42 +1489,43 @@ fn check_for_loop_over_map_kv<'a, 'tcx>(\n     }\n }\n \n-struct MutatePairDelegate {\n+struct MutatePairDelegate<'a, 'tcx> {\n+    cx: &'a LateContext<'a, 'tcx>,\n     hir_id_low: Option<HirId>,\n     hir_id_high: Option<HirId>,\n     span_low: Option<Span>,\n     span_high: Option<Span>,\n }\n \n-impl<'tcx> Delegate<'tcx> for MutatePairDelegate {\n-    fn consume(&mut self, _: &Place<'tcx>, _: ConsumeMode) {}\n+impl<'a, 'tcx> Delegate<'tcx> for MutatePairDelegate<'a, 'tcx> {\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &Place<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n-            if let PlaceBase::Local(id) = cmt.base {\n+            if let PlaceBase::Local(id) = cmt.place.base {\n                 if Some(id) == self.hir_id_low {\n-                    self.span_low = Some(cmt.span)\n+                    self.span_low = Some(self.cx.tcx.hir().span(cmt.hir_id))\n                 }\n                 if Some(id) == self.hir_id_high {\n-                    self.span_high = Some(cmt.span)\n+                    self.span_high = Some(self.cx.tcx.hir().span(cmt.hir_id))\n                 }\n             }\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &Place<'tcx>) {\n-        if let PlaceBase::Local(id) = cmt.base {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n+        if let PlaceBase::Local(id) = cmt.place.base {\n             if Some(id) == self.hir_id_low {\n-                self.span_low = Some(cmt.span)\n+                self.span_low = Some(self.cx.tcx.hir().span(cmt.hir_id))\n             }\n             if Some(id) == self.hir_id_high {\n-                self.span_high = Some(cmt.span)\n+                self.span_high = Some(self.cx.tcx.hir().span(cmt.hir_id))\n             }\n         }\n     }\n }\n \n-impl<'tcx> MutatePairDelegate {\n+impl<'a, 'tcx> MutatePairDelegate<'a, 'tcx> {\n     fn mutation_span(&self) -> (Option<Span>, Option<Span>) {\n         (self.span_low, self.span_high)\n     }\n@@ -1579,12 +1580,13 @@ fn check_for_mutability(cx: &LateContext<'_, '_>, bound: &Expr<'_>) -> Option<Hi\n     None\n }\n \n-fn check_for_mutation(\n-    cx: &LateContext<'_, '_>,\n+fn check_for_mutation<'a, 'tcx> (\n+    cx: &LateContext<'a, 'tcx>,\n     body: &Expr<'_>,\n     bound_ids: &[Option<HirId>],\n ) -> (Option<Span>, Option<Span>) {\n     let mut delegate = MutatePairDelegate {\n+        cx: cx,\n         hir_id_low: bound_ids[0],\n         hir_id_high: bound_ids[1],\n         span_low: None,"}, {"sha": "ca87deac9891c905913b99430bca8859ae6cfb2a", "filename": "clippy_lints/src/needless_pass_by_value.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Fneedless_pass_by_value.rs?ref=922ff8e485fc6d95286fcf860e05742dc8797223", "patch": "@@ -326,21 +326,21 @@ struct MovedVariablesCtxt {\n }\n \n impl MovedVariablesCtxt {\n-    fn move_common(&mut self, cmt: &euv::Place<'_>) {\n-        if let euv::PlaceBase::Local(vid) = cmt.base {\n+    fn move_common(&mut self, cmt: &euv::PlaceWithHirId<'_>) {\n+        if let euv::PlaceBase::Local(vid) = cmt.place.base {\n             self.moved_vars.insert(vid);\n         }\n     }\n }\n \n impl<'tcx> euv::Delegate<'tcx> for MovedVariablesCtxt {\n-    fn consume(&mut self, cmt: &euv::Place<'tcx>, mode: euv::ConsumeMode) {\n+    fn consume(&mut self, cmt: &euv::PlaceWithHirId<'tcx>, mode: euv::ConsumeMode) {\n         if let euv::ConsumeMode::Move = mode {\n             self.move_common(cmt);\n         }\n     }\n \n-    fn borrow(&mut self, _: &euv::Place<'tcx>, _: ty::BorrowKind) {}\n+    fn borrow(&mut self, _: &euv::PlaceWithHirId<'tcx>, _: ty::BorrowKind) {}\n \n-    fn mutate(&mut self, _: &euv::Place<'tcx>) {}\n+    fn mutate(&mut self, _: &euv::PlaceWithHirId<'tcx>) {}\n }"}, {"sha": "6a7a1f1ceaaef8fabe9cfa38e331e237b303db8c", "filename": "clippy_lints/src/utils/usage.rs", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "raw_url": "https://github.com/rust-lang/rust/raw/922ff8e485fc6d95286fcf860e05742dc8797223/clippy_lints%2Fsrc%2Futils%2Fusage.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/clippy_lints%2Fsrc%2Futils%2Fusage.rs?ref=922ff8e485fc6d95286fcf860e05742dc8797223", "patch": "@@ -8,7 +8,7 @@ use rustc_lint::LateContext;\n use rustc_middle::hir::map::Map;\n use rustc_middle::ty;\n use rustc_span::symbol::{Ident, Symbol};\n-use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, Place, PlaceBase};\n+use rustc_typeck::expr_use_visitor::{ConsumeMode, Delegate, ExprUseVisitor, PlaceWithHirId, PlaceBase};\n \n /// Returns a set of mutated local variable IDs, or `None` if mutations could not be determined.\n pub fn mutated_variables<'a, 'tcx>(expr: &'tcx Expr<'_>, cx: &'a LateContext<'a, 'tcx>) -> Option<FxHashSet<HirId>> {\n@@ -46,8 +46,8 @@ struct MutVarsDelegate {\n \n impl<'tcx> MutVarsDelegate {\n     #[allow(clippy::similar_names)]\n-    fn update(&mut self, cat: &Place<'tcx>) {\n-        match cat.base {\n+    fn update(&mut self, cat: &PlaceWithHirId<'tcx>) {\n+        match cat.place.base {\n             PlaceBase::Local(id) => {\n                 self.used_mutably.insert(id);\n             },\n@@ -63,15 +63,15 @@ impl<'tcx> MutVarsDelegate {\n }\n \n impl<'tcx> Delegate<'tcx> for MutVarsDelegate {\n-    fn consume(&mut self, _: &Place<'tcx>, _: ConsumeMode) {}\n+    fn consume(&mut self, _: &PlaceWithHirId<'tcx>, _: ConsumeMode) {}\n \n-    fn borrow(&mut self, cmt: &Place<'tcx>, bk: ty::BorrowKind) {\n+    fn borrow(&mut self, cmt: &PlaceWithHirId<'tcx>, bk: ty::BorrowKind) {\n         if let ty::BorrowKind::MutBorrow = bk {\n             self.update(&cmt)\n         }\n     }\n \n-    fn mutate(&mut self, cmt: &Place<'tcx>) {\n+    fn mutate(&mut self, cmt: &PlaceWithHirId<'tcx>) {\n         self.update(&cmt)\n     }\n }"}]}