{"sha": "a5402343f60271c7e428bb6e6aac704bd88bb2bf", "node_id": "C_kwDOAAsO6NoAKGE1NDAyMzQzZjYwMjcxYzdlNDI4YmI2ZTZhYWM3MDRiZDg4YmIyYmY", "commit": {"author": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-09-28T20:54:39Z"}, "committer": {"name": "Le\u00f3n Orell Valerian Liehr", "email": "liehr.exchange@gmx.net", "date": "2022-10-03T02:36:39Z"}, "message": "rustdoc: re-sugar more cross-crate trait bounds", "tree": {"sha": "dae2c78e0e784bf6130ac7dd8a5c06027e5d025c", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/dae2c78e0e784bf6130ac7dd8a5c06027e5d025c"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/a5402343f60271c7e428bb6e6aac704bd88bb2bf", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\niQIzBAABCAAdFiEE/neO4LLiv/pSFQJbzXXjHOLP19kFAmM6SsAACgkQzXXjHOLP\n19mSCw/7BgUFhqL4nLiL2d0ik6TVesn7KOsXIVUH8bSh9AYPShhsDPYVogrBxr9b\nAi4hrhXm37Vvktol/sGJPMJcdt59uXTufb0sSgr74pkshqROl7WaWjwyjcJ8MRuA\nxQpp7QGRJGoQrd/ajN3lkoZXkBuCYw6DAdZrqWYzyfLaQilPYTg2ebQp+bOXXIxG\n/9mjq4QSJrAPBcKlH/Ce5BC4OQpiZZ1LHsnPfazDCe3jcjVJzgz7hDakYmAwUwnG\nFUmIsFomTBoQ2it3GF2hFfQA1sOhd5+n9iv2f8Kuo1lZBumrwuDxas9xVx1Ixu1x\npQfcZ1XPPb2Yxaxtk3oITz3PRaVchvP1khG7oPQI27niYiqcmPQPPQphNbgzlxPN\nClo1g3Q3Fcyyu7ryZEBBmh27Hi/UhYHK+aFk8+iYQ1gCjpCQ/YnVdvfhjZvTY92k\nviTg3pC1b/pOqccTbniOYslRDF4NHxyq8AgJXeXhdgdFT+qZQHhkoXIEyYwzjxOt\nOYHoabOcdNnwKBHvTHzELuV3LhWZVvYII7wPANAVvY1Aokk6y+0LZQSqEfa+ymKW\nQXYJZO5lULiPS2JQHR9laaSTcO9atXyDif1eYs/0NUMTCNTXxFnkHLLFzVDplVL7\nCzKrT0qg/9/8oLHQ7/qN+sMG/riOYEnOWG4ywD23BGms9qfD+B4=\n=VxUR\n-----END PGP SIGNATURE-----", "payload": "tree dae2c78e0e784bf6130ac7dd8a5c06027e5d025c\nparent ff40f2ec95923c4d45366e85bcff17d75df68d68\nauthor Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1664398479 +0200\ncommitter Le\u00f3n Orell Valerian Liehr <liehr.exchange@gmx.net> 1664764599 +0200\n\nrustdoc: re-sugar more cross-crate trait bounds\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/a5402343f60271c7e428bb6e6aac704bd88bb2bf", "html_url": "https://github.com/rust-lang/rust/commit/a5402343f60271c7e428bb6e6aac704bd88bb2bf", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/a5402343f60271c7e428bb6e6aac704bd88bb2bf/comments", "author": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "committer": {"login": "fmease", "id": 14913065, "node_id": "MDQ6VXNlcjE0OTEzMDY1", "avatar_url": "https://avatars.githubusercontent.com/u/14913065?v=4", "gravatar_id": "", "url": "https://api.github.com/users/fmease", "html_url": "https://github.com/fmease", "followers_url": "https://api.github.com/users/fmease/followers", "following_url": "https://api.github.com/users/fmease/following{/other_user}", "gists_url": "https://api.github.com/users/fmease/gists{/gist_id}", "starred_url": "https://api.github.com/users/fmease/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/fmease/subscriptions", "organizations_url": "https://api.github.com/users/fmease/orgs", "repos_url": "https://api.github.com/users/fmease/repos", "events_url": "https://api.github.com/users/fmease/events{/privacy}", "received_events_url": "https://api.github.com/users/fmease/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "ff40f2ec95923c4d45366e85bcff17d75df68d68", "url": "https://api.github.com/repos/rust-lang/rust/commits/ff40f2ec95923c4d45366e85bcff17d75df68d68", "html_url": "https://github.com/rust-lang/rust/commit/ff40f2ec95923c4d45366e85bcff17d75df68d68"}], "stats": {"total": 130, "additions": 107, "deletions": 23}, "files": [{"sha": "dc17865d16371d50978634741dd91f7c48f5816b", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 9, "deletions": 0, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -1176,6 +1176,15 @@ pub(crate) fn clean_middle_assoc_item<'tcx>(\n             }\n \n             if let ty::TraitContainer = assoc_item.container {\n+                // FIXME(fmease): `tcx.explicit_item_bounds` does not contain the bounds of GATs,\n+                //                e.g. the bounds `Copy`, `Display` & (implicitly) `Sized` in\n+                //                `type Assoc<T: Copy> where T: Display`. This also means that we\n+                //                later incorrectly render `where T: ?Sized`.\n+                //\n+                //                The result of `tcx.explicit_predicates_of` *does* contain them but\n+                //                it does not contain the other bounds / predicates we need.\n+                //                Either merge those two interned lists somehow or refactor\n+                //                `clean_ty_generics` to call `explicit_item_bounds` by itself.\n                 let bounds = tcx.explicit_item_bounds(assoc_item.def_id);\n                 let predicates = ty::GenericPredicates { parent: None, predicates: bounds };\n                 let mut generics ="}, {"sha": "f82ea8969ab4461f296d2fd59f859b671cedd36b", "filename": "src/librustdoc/clean/simplify.rs", "status": "modified", "additions": 16, "deletions": 23, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Flibrustdoc%2Fclean%2Fsimplify.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fsimplify.rs?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -14,7 +14,6 @@\n use rustc_data_structures::fx::FxIndexMap;\n use rustc_hir::def_id::DefId;\n use rustc_middle::ty;\n-use rustc_span::Symbol;\n \n use crate::clean;\n use crate::clean::GenericArgs as PP;\n@@ -26,21 +25,17 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     //\n     // We use `FxIndexMap` so that the insertion order is preserved to prevent messing up to\n     // the order of the generated bounds.\n-    let mut params: FxIndexMap<Symbol, (Vec<_>, Vec<_>)> = FxIndexMap::default();\n+    let mut tybounds = FxIndexMap::default();\n     let mut lifetimes = Vec::new();\n     let mut equalities = Vec::new();\n-    let mut tybounds = Vec::new();\n \n     for clause in clauses {\n         match clause {\n-            WP::BoundPredicate { ty, bounds, bound_params } => match ty {\n-                clean::Generic(s) => {\n-                    let (b, p) = params.entry(s).or_default();\n-                    b.extend(bounds);\n-                    p.extend(bound_params);\n-                }\n-                t => tybounds.push((t, (bounds, bound_params))),\n-            },\n+            WP::BoundPredicate { ty, bounds, bound_params } => {\n+                let (b, p): &mut (Vec<_>, Vec<_>) = tybounds.entry(ty).or_default();\n+                b.extend(bounds);\n+                p.extend(bound_params);\n+            }\n             WP::RegionPredicate { lifetime, bounds } => {\n                 lifetimes.push((lifetime, bounds));\n             }\n@@ -49,14 +44,17 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     }\n \n     // Look for equality predicates on associated types that can be merged into\n-    // general bound predicates\n+    // general bound predicates.\n     equalities.retain(|&(ref lhs, ref rhs)| {\n-        let Some((self_, trait_did, name)) = lhs.projection() else {\n-            return true;\n-        };\n-        let clean::Generic(generic) = self_ else { return true };\n-        let Some((bounds, _)) = params.get_mut(generic) else { return true };\n-\n+        let Some((ty, trait_did, name)) = lhs.projection() else { return true; };\n+        // FIXME(fmease): We don't handle HRTBs correctly here.\n+        //                Pass `_bound_params` (higher-rank lifetimes) to a modified version of\n+        //                `merge_bounds`. That vector is currently always empty though since we\n+        //                don't keep track of late-bound lifetimes when cleaning projection\n+        //                predicates to cleaned equality predicates while we should first query\n+        //                them with `collect_referenced_late_bound_regions` and then store them\n+        //                (or something similar). For prior art, see `clean::auto_trait`.\n+        let Some((bounds, _bound_params)) = tybounds.get_mut(ty) else { return true };\n         merge_bounds(cx, bounds, trait_did, name, rhs)\n     });\n \n@@ -65,11 +63,6 @@ pub(crate) fn where_clauses(cx: &DocContext<'_>, clauses: Vec<WP>) -> Vec<WP> {\n     clauses.extend(\n         lifetimes.into_iter().map(|(lt, bounds)| WP::RegionPredicate { lifetime: lt, bounds }),\n     );\n-    clauses.extend(params.into_iter().map(|(k, (bounds, params))| WP::BoundPredicate {\n-        ty: clean::Generic(k),\n-        bounds,\n-        bound_params: params,\n-    }));\n     clauses.extend(tybounds.into_iter().map(|(ty, (bounds, bound_params))| WP::BoundPredicate {\n         ty,\n         bounds,"}, {"sha": "927a1a42a1f784bf77870265537784d3c59284c2", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out0.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out0.html?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out0\" class=\"associatedtype\">Out0</a>: <a class=\"trait\" href=\"../assoc_item_trait_bounds_with_bindings/trait.Support.html\" title=\"trait assoc_item_trait_bounds_with_bindings::Support\">Support</a>&lt;Item = <a class=\"primitive\" href=\"{{channel}}/std/primitive.unit.html\">()</a>&gt;</h4>\n\\ No newline at end of file"}, {"sha": "69d84e1b2c14e88ab373bb4989caa78b30f5d209", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.out9.html", "status": "added", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.out9.html?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -0,0 +1 @@\n+<h4 class=\"code-header\">type <a href=\"#associatedtype.Out9\" class=\"associatedtype\">Out9</a>: <a class=\"trait\" href=\"{{channel}}/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"{{channel}}/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"primitive\" href=\"{{channel}}/std/primitive.bool.html\">bool</a> + <a class=\"trait\" href=\"{{channel}}/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a></h4>\n\\ No newline at end of file"}, {"sha": "b026f399a56676617bd3f58fef3e614fb7313146", "filename": "src/test/rustdoc/inline_cross/assoc_item_trait_bounds_with_bindings.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fassoc_item_trait_bounds_with_bindings.rs?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -0,0 +1,40 @@\n+// Regression test for issues #77763, #84579 and #102142.\n+#![crate_name = \"main\"]\n+\n+// aux-build:assoc_item_trait_bounds_with_bindings.rs\n+// build-aux-docs\n+// ignore-cross-compile\n+extern crate assoc_item_trait_bounds_with_bindings as aux;\n+\n+// FIXME(fmease): Don't render an incorrect `T: ?Sized` where-clause for parameters\n+//                of GATs like `Main::Out{2,4}`. Add a snapshot test once it's fixed.\n+// FIXME(fmease): Print the `for<>` parameter list in the bounds of\n+//                `Main::Out{6,11,12}`.\n+\n+// @has main/trait.Main.html\n+// @has - '//*[@id=\"associatedtype.Out0\"]' 'type Out0: Support<Item = ()>'\n+// @has - '//*[@id=\"associatedtype.Out1\"]' 'type Out1: Support<Item = Self::Item>'\n+// @has - '//*[@id=\"associatedtype.Out2\"]' 'type Out2<T>: Support<Item = T>'\n+// @has - '//*[@id=\"associatedtype.Out3\"]' 'type Out3: Support<Produce<()> = bool>'\n+// @has - '//*[@id=\"associatedtype.Out4\"]' 'type Out4<T>: Support<Produce<T> = T>'\n+// @has - '//*[@id=\"associatedtype.Out5\"]' \"type Out5: Support<Output<'static> = &'static ()>\"\n+// @has - '//*[@id=\"associatedtype.Out6\"]' \"type Out6: Support<Output<'a> = &'a ()>\"\n+// @has - '//*[@id=\"associatedtype.Out7\"]' \"type Out7: Support<Item = String, Produce<i32> = u32> + Unrelated\"\n+// @has - '//*[@id=\"associatedtype.Out8\"]' \"type Out8: Unrelated + Protocol<i16, Q1 = u128, Q0 = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out9\"]' \"type Out9: FnMut(i32) -> bool + Clone\"\n+// @has - '//*[@id=\"associatedtype.Out10\"]' \"type Out10<'q>: Support<Output<'q> = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out11\"]' \"type Out11: Helper<A<'s> = &'s (), B<'r> = ()>\"\n+// @has - '//*[@id=\"associatedtype.Out12\"]' \"type Out12: Helper<B<'w> = Cow<'w, str>, A<'w> = bool>\"\n+//\n+// Snapshots: Check that we do not render any where-clauses for those associated types since all of\n+// the trait bounds contained within were moved to the bounds of the respective item.\n+//\n+// @snapshot out0 - '//*[@id=\"associatedtype.Out0\"]/*[@class=\"code-header\"]'\n+// @snapshot out9 - '//*[@id=\"associatedtype.Out9\"]/*[@class=\"code-header\"]'\n+//\n+// @has - '//*[@id=\"tymethod.make\"]' \\\n+// \"fn make<F>(F, impl FnMut(&str) -> bool)\\\n+// where \\\n+//     F: FnOnce(u32) -> String, \\\n+//     Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>\"\n+pub use aux::Main;"}, {"sha": "7225f2dca10dbb82445ed1ab0e911370c4a32ee3", "filename": "src/test/rustdoc/inline_cross/auxiliary/assoc_item_trait_bounds_with_bindings.rs", "status": "added", "additions": 40, "deletions": 0, "changes": 40, "blob_url": "https://github.com/rust-lang/rust/blob/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "raw_url": "https://github.com/rust-lang/rust/raw/a5402343f60271c7e428bb6e6aac704bd88bb2bf/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Finline_cross%2Fauxiliary%2Fassoc_item_trait_bounds_with_bindings.rs?ref=a5402343f60271c7e428bb6e6aac704bd88bb2bf", "patch": "@@ -0,0 +1,40 @@\n+pub trait Main {\n+    type Item;\n+\n+    type Out0: Support<Item = ()>;\n+    type Out1: Support<Item = Self::Item>;\n+    type Out2<T>: Support<Item = T>;\n+    type Out3: Support<Produce<()> = bool>;\n+    type Out4<T>: Support<Produce<T> = T>;\n+    type Out5: Support<Output<'static> = &'static ()>;\n+    type Out6: for<'a> Support<Output<'a> = &'a ()>;\n+    type Out7: Support<Item = String, Produce<i32> = u32> + Unrelated;\n+    type Out8: Unrelated + Protocol<i16, Q1 = u128, Q0 = ()>;\n+    type Out9: FnMut(i32) -> bool + Clone;\n+    type Out10<'q>: Support<Output<'q> = ()>;\n+    type Out11: for<'r, 's> Helper<A<'s> = &'s (), B<'r> = ()>;\n+    type Out12: for<'w> Helper<B<'w> = std::borrow::Cow<'w, str>, A<'w> = bool>;\n+\n+    fn make<F>(_: F, _: impl FnMut(&str) -> bool)\n+    where\n+        F: FnOnce(u32) -> String,\n+        Self::Out2<()>: Protocol<u8, Q0 = Self::Item, Q1 = ()>;\n+}\n+\n+pub trait Support {\n+    type Item;\n+    type Output<'a>;\n+    type Produce<T>;\n+}\n+\n+pub trait Protocol<K> {\n+    type Q0;\n+    type Q1;\n+}\n+\n+pub trait Unrelated {}\n+\n+pub trait Helper {\n+    type A<'q>;\n+    type B<'q>;\n+}"}]}