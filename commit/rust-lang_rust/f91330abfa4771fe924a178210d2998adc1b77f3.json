{"sha": "f91330abfa4771fe924a178210d2998adc1b77f3", "node_id": "MDY6Q29tbWl0NzI0NzEyOmY5MTMzMGFiZmE0NzcxZmU5MjRhMTc4MjEwZDI5OThhZGMxYjc3ZjM=", "commit": {"author": {"name": "Manish Goregaokar", "email": "manishsmail@gmail.com", "date": "2020-06-26T01:00:18Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-06-26T01:00:18Z"}, "message": "Rollup merge of #73621 - poliorcetics:mut-keyword, r=steveklabnik\n\nDocument the mut keyword\n\nPartial fix for #34601.\n\nDocumentation for the `mut` keyword. I think it's okay for it to be quite short, this is not the book not the reference, but if you find something is missing, do not hesitate to tell me.", "tree": {"sha": "fd752dfc74663935cee959099e08bbdd4d48c75d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/fd752dfc74663935cee959099e08bbdd4d48c75d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/f91330abfa4771fe924a178210d2998adc1b77f3", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJe9UiiCRBK7hj4Ov3rIwAAdHIIAAYCeyatVG5gWUZrR0uJV+VT\n+I+tppJzOwy9fMPm3rVYIs4QWw3ceqSJeCb1dMBXllDpuQhkyJswI/C+Xz1IKTcE\naduoib2Zbe0ueEE52fDQYmCfJ7C4homtaQFU15pXcABi5zFBgmjM5+Qeyv5uPjh4\nhYyVxb47/2LNJxDoCq/voqkQZ+Pas5ZNCguCzSCJUgZof03XLczQp/sU/5FX0AbG\nVMqwnrvakFYc3e3xGWndewlR8NgcdXJWeF8UH2H6EWY+Mj6mKFfdIEjLOdQiXqxa\n7qrlecEtM7qrpAt74x87IjXY/m0kjFz2X3IR8aUZRVB4QHAkI5icFAUTdv6j6uU=\n=ZYLS\n-----END PGP SIGNATURE-----\n", "payload": "tree fd752dfc74663935cee959099e08bbdd4d48c75d\nparent 01a293a838b0b2795249a72adde94a8b497e955f\nparent 3d09017477e562d44cb90fca1a4a38c75f664f2d\nauthor Manish Goregaokar <manishsmail@gmail.com> 1593133218 -0700\ncommitter GitHub <noreply@github.com> 1593133218 -0700\n\nRollup merge of #73621 - poliorcetics:mut-keyword, r=steveklabnik\n\nDocument the mut keyword\n\nPartial fix for #34601.\n\nDocumentation for the `mut` keyword. I think it's okay for it to be quite short, this is not the book not the reference, but if you find something is missing, do not hesitate to tell me.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/f91330abfa4771fe924a178210d2998adc1b77f3", "html_url": "https://github.com/rust-lang/rust/commit/f91330abfa4771fe924a178210d2998adc1b77f3", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/f91330abfa4771fe924a178210d2998adc1b77f3/comments", "author": {"login": "Manishearth", "id": 1617736, "node_id": "MDQ6VXNlcjE2MTc3MzY=", "avatar_url": "https://avatars.githubusercontent.com/u/1617736?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Manishearth", "html_url": "https://github.com/Manishearth", "followers_url": "https://api.github.com/users/Manishearth/followers", "following_url": "https://api.github.com/users/Manishearth/following{/other_user}", "gists_url": "https://api.github.com/users/Manishearth/gists{/gist_id}", "starred_url": "https://api.github.com/users/Manishearth/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Manishearth/subscriptions", "organizations_url": "https://api.github.com/users/Manishearth/orgs", "repos_url": "https://api.github.com/users/Manishearth/repos", "events_url": "https://api.github.com/users/Manishearth/events{/privacy}", "received_events_url": "https://api.github.com/users/Manishearth/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "01a293a838b0b2795249a72adde94a8b497e955f", "url": "https://api.github.com/repos/rust-lang/rust/commits/01a293a838b0b2795249a72adde94a8b497e955f", "html_url": "https://github.com/rust-lang/rust/commit/01a293a838b0b2795249a72adde94a8b497e955f"}, {"sha": "3d09017477e562d44cb90fca1a4a38c75f664f2d", "url": "https://api.github.com/repos/rust-lang/rust/commits/3d09017477e562d44cb90fca1a4a38c75f664f2d", "html_url": "https://github.com/rust-lang/rust/commit/3d09017477e562d44cb90fca1a4a38c75f664f2d"}], "stats": {"total": 56, "additions": 53, "deletions": 3}, "files": [{"sha": "c6b0f657179d8e10f957f32a5dfa59c2760b65e9", "filename": "src/libstd/keyword_docs.rs", "status": "modified", "additions": 53, "deletions": 3, "changes": 56, "blob_url": "https://github.com/rust-lang/rust/blob/f91330abfa4771fe924a178210d2998adc1b77f3/src%2Flibstd%2Fkeyword_docs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/f91330abfa4771fe924a178210d2998adc1b77f3/src%2Flibstd%2Fkeyword_docs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fkeyword_docs.rs?ref=f91330abfa4771fe924a178210d2998adc1b77f3", "patch": "@@ -983,11 +983,61 @@ mod move_keyword {}\n \n #[doc(keyword = \"mut\")]\n //\n-/// A mutable binding, reference, or pointer.\n+/// A mutable variable, reference, or pointer.\n ///\n-/// The documentation for this keyword is [not yet complete]. Pull requests welcome!\n+/// `mut` can be used in several situations. The first is mutable variables,\n+/// which can be used anywhere you can bind a value to a variable name. Some\n+/// examples:\n ///\n-/// [not yet complete]: https://github.com/rust-lang/rust/issues/34601\n+/// ```rust\n+/// // A mutable variable in the parameter list of a function.\n+/// fn foo(mut x: u8, y: u8) -> u8 {\n+///     x += y;\n+///     x\n+/// }\n+///\n+/// // Modifying a mutable variable.\n+/// # #[allow(unused_assignments)]\n+/// let mut a = 5;\n+/// a = 6;\n+///\n+/// assert_eq!(foo(3, 4), 7);\n+/// assert_eq!(a, 6);\n+/// ```\n+///\n+/// The second is mutable references. They can be created from `mut` variables\n+/// and must be unique: no other variables can have a mutable reference, nor a\n+/// shared reference.\n+///\n+/// ```rust\n+/// // Taking a mutable reference.\n+/// fn push_two(v: &mut Vec<u8>) {\n+///     v.push(2);\n+/// }\n+///\n+/// // A mutable reference cannot be taken to a non-mutable variable.\n+/// let mut v = vec![0, 1];\n+/// // Passing a mutable reference.\n+/// push_two(&mut v);\n+///\n+/// assert_eq!(v, vec![0, 1, 2]);\n+/// ```\n+///\n+/// ```rust,compile_fail,E0502\n+/// let mut v = vec![0, 1];\n+/// let mut_ref_v = &mut v;\n+/// ##[allow(unused)]\n+/// let ref_v = &v;\n+/// mut_ref_v.push(2);\n+/// ```\n+///\n+/// Mutable raw pointers work much like mutable references, with the added\n+/// possibility of not pointing to a valid object. The syntax is `*mut Type`.\n+///\n+/// More information on mutable references and pointers can be found in```\n+/// [Reference].\n+///\n+/// [Reference]: ../reference/types/pointer.html#mutable-references-mut\n mod mut_keyword {}\n \n #[doc(keyword = \"pub\")]"}]}