{"sha": "be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "node_id": "C_kwDOAAsO6NoAKGJlOTAxM2YwMmI2MjllYzdiNmQ0MGE1YTRmZjc5NjZlMmRmNzUxZjY", "commit": {"author": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-10-15T17:24:02Z"}, "committer": {"name": "Jannis Christopher K\u00f6hl", "email": "mail@koehl.dev", "date": "2022-11-07T09:35:23Z"}, "message": "Make overflow flag propagation conditional", "tree": {"sha": "e66c4deeb94b59bee026b720e8eaf45c738ef642", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e66c4deeb94b59bee026b720e8eaf45c738ef642"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "html_url": "https://github.com/rust-lang/rust/commit/be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/comments", "author": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "committer": {"login": "jachris", "id": 30163784, "node_id": "MDQ6VXNlcjMwMTYzNzg0", "avatar_url": "https://avatars.githubusercontent.com/u/30163784?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jachris", "html_url": "https://github.com/jachris", "followers_url": "https://api.github.com/users/jachris/followers", "following_url": "https://api.github.com/users/jachris/following{/other_user}", "gists_url": "https://api.github.com/users/jachris/gists{/gist_id}", "starred_url": "https://api.github.com/users/jachris/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jachris/subscriptions", "organizations_url": "https://api.github.com/users/jachris/orgs", "repos_url": "https://api.github.com/users/jachris/repos", "events_url": "https://api.github.com/users/jachris/events{/privacy}", "received_events_url": "https://api.github.com/users/jachris/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1dde908fae0c5c1f33d4a19bee1c58fd36c42cf6", "url": "https://api.github.com/repos/rust-lang/rust/commits/1dde908fae0c5c1f33d4a19bee1c58fd36c42cf6", "html_url": "https://github.com/rust-lang/rust/commit/1dde908fae0c5c1f33d4a19bee1c58fd36c42cf6"}], "stats": {"total": 71, "additions": 69, "deletions": 2}, "files": [{"sha": "2d7768105eb6c013c97f94397433d2c224800ea8", "filename": "compiler/rustc_mir_transform/src/dataflow_const_prop.rs", "status": "modified", "additions": 16, "deletions": 2, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fdataflow_const_prop.rs?ref=be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "patch": "@@ -7,7 +7,7 @@ use rustc_mir_dataflow::value_analysis::{\n     Map, ProjElem, State, ValueAnalysis, ValueOrPlace, ValueOrPlaceOrRef,\n };\n use rustc_mir_dataflow::{lattice::FlatSet, Analysis, ResultsVisitor, SwitchIntEdgeEffects};\n-use rustc_span::DUMMY_SP;\n+use rustc_span::{sym, DUMMY_SP};\n \n use crate::MirPass;\n \n@@ -38,6 +38,7 @@ struct ConstAnalysis<'tcx> {\n     tcx: TyCtxt<'tcx>,\n     ecx: InterpCx<'tcx, 'tcx, DummyMachine>,\n     param_env: ty::ParamEnv<'tcx>,\n+    propagate_overflow: bool,\n }\n \n impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n@@ -72,7 +73,11 @@ impl<'tcx> ValueAnalysis<'tcx> for ConstAnalysis<'tcx> {\n                 });\n \n                 if value_target.is_some() || overflow_target.is_some() {\n-                    let (val, overflow) = self.binary_op(state, *op, left, right);\n+                    let (val, mut overflow) = self.binary_op(state, *op, left, right);\n+\n+                    if !self.propagate_overflow {\n+                        overflow = FlatSet::Top;\n+                    }\n \n                     if let Some(value_target) = value_target {\n                         state.assign_idx(value_target, ValueOrPlaceOrRef::Value(val), self.map());\n@@ -202,11 +207,20 @@ impl<'tcx> std::fmt::Debug for ScalarTy<'tcx> {\n \n impl<'tcx> ConstAnalysis<'tcx> {\n     pub fn new(tcx: TyCtxt<'tcx>, body: &Body<'tcx>, map: Map) -> Self {\n+        // It can happen that overflow will be detected even though overflow checks are disabled.\n+        // This is caused by inlining functions that have #[rustc_inherit_overflow_checks]. Such\n+        // overflows must not be propagated if `-C overflow-checks=off`. Also, if the function we\n+        // are optimizing here has #[rustc_inherit_overflow_checks], the overflow checks may\n+        // actually not be triggered by the consuming crate, so we have to ignore them too.\n+        // Related to https://github.com/rust-lang/rust/issues/35310.\n+        let propagate_overflow = tcx.sess.overflow_checks()\n+            && !tcx.has_attr(body.source.def_id(), sym::rustc_inherit_overflow_checks);\n         Self {\n             map,\n             tcx,\n             ecx: InterpCx::new(tcx, DUMMY_SP, ty::ParamEnv::empty(), DummyMachine),\n             param_env: tcx.param_env(body.source.def_id()),\n+            propagate_overflow,\n         }\n     }\n "}, {"sha": "53c7ec41680472a9e6f500aeccef72b6459cc824", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow_checks_use.main.DataflowConstProp.diff", "status": "added", "additions": 45, "deletions": 0, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.main.DataflowConstProp.diff", "raw_url": "https://github.com/rust-lang/rust/raw/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.main.DataflowConstProp.diff", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.main.DataflowConstProp.diff?ref=be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "patch": "@@ -0,0 +1,45 @@\n+- // MIR for `main` before DataflowConstProp\n++ // MIR for `main` after DataflowConstProp\n+  \n+  fn main() -> () {\n+      let mut _0: ();                      // return place in scope 0 at $DIR/inherit_overflow_checks_use.rs:+0:11: +0:11\n+      let mut _1: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+      let mut _2: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+      let mut _3: u8;                      // in scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+      scope 1 {\n+      }\n+      scope 2 (inlined <u8 as Add>::add) { // at $DIR/inherit_overflow_checks_use.rs:7:13: 7:47\n+          debug self => _2;                // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          debug other => _3;               // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _4: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _5: u8;                  // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          let mut _6: (u8, bool);          // in scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb0: {\n+          StorageLive(_1);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageLive(_2);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          _2 = const u8::MAX;              // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageLive(_3);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          _3 = const 1_u8;                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageLive(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _4 = const u8::MAX;              // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageLive(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _5 = const 1_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          _6 = CheckedAdd(const u8::MAX, const 1_u8); // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          assert(!move (_6.1: bool), \"attempt to compute `{} + {}`, which would overflow\", const u8::MAX, const 1_u8) -> bb1; // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+      }\n+  \n+      bb1: {\n+-         _1 = move (_6.0: u8);            // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n++         _1 = const 0_u8;                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageDead(_5);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageDead(_4);                 // scope 2 at $SRC_DIR/core/src/ops/arith.rs:LL:COL\n+          StorageDead(_3);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageDead(_2);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:13: +3:47\n+          StorageDead(_1);                 // scope 0 at $DIR/inherit_overflow_checks_use.rs:+3:47: +3:48\n+          nop;                             // scope 0 at $DIR/inherit_overflow_checks_use.rs:+0:11: +4:2\n+          return;                          // scope 0 at $DIR/inherit_overflow_checks_use.rs:+4:2: +4:2\n+      }\n+  }\n+  "}, {"sha": "d4fcb1d77052b7a1f2d9ee967b0c6771fd8384f6", "filename": "src/test/mir-opt/dataflow-const-prop/inherit_overflow_checks_use.rs", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.rs", "raw_url": "https://github.com/rust-lang/rust/raw/be9013f02b629ec7b6d40a5a4ff7966e2df751f6/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fmir-opt%2Fdataflow-const-prop%2Finherit_overflow_checks_use.rs?ref=be9013f02b629ec7b6d40a5a4ff7966e2df751f6", "patch": "@@ -0,0 +1,8 @@\n+// compile-flags: -C overflow-checks=off\n+\n+// EMIT_MIR inherit_overflow_checks_use.main.DataflowConstProp.diff\n+fn main() {\n+    // After inlining, this will contain a `CheckedBinaryOp`. The overflow\n+    // must be ignored by the constant propagation to avoid triggering a panic.\n+    let _ = <u8 as std::ops::Add>::add(255, 1);\n+}"}]}