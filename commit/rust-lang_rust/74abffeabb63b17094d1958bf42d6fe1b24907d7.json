{"sha": "74abffeabb63b17094d1958bf42d6fe1b24907d7", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc0YWJmZmVhYmI2M2IxNzA5NGQxOTU4YmY0MmQ2ZmUxYjI0OTA3ZDc=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T21:12:18Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2018-04-04T21:12:18Z"}, "message": "Auto merge of #49642 - kennytm:rollup, r=kennytm\n\nRollup of 25 pull requests\n\nSuccessful merges:\n\n - #49179 (Handle future deprecation annotations )\n - #49512 (Add support for variant and types fields for intra links)\n - #49515 (fix targetted value background)\n - #49516 (Add missing anchor for union type fields)\n - #49532 (Add test for rustdoc ignore test)\n - #49533 (Add #[must_use] to a few standard library methods)\n - #49540 (Fix miri Discriminant() for non-ADT)\n - #49559 (Introduce Vec::resize_with method (see #41758))\n - #49570 (avoid IdxSets containing garbage above the universe length)\n - #49577 (Stabilize String::replace_range)\n - #49599 (Fix typo)\n - #49603 (Fix url for intra link provided method)\n - #49607 (Stabilize iterator methods in 1.27)\n - #49609 (run-pass/attr-stmt-expr: expand test cases)\n - #49612 (Fix \"since\" version for getpid feature.)\n - #49618 (Fix build error when compiling libcore for 16bit targets)\n - #49619 (tweak core::fmt docs)\n - #49637 (Stabilize parent_id())\n - #49639 (Update Cargo)\n - #49628 (Re-write the documentation index)\n - #49594 (Add some performance guidance to std::fs and std::io docs)\n - #49625 (miri: add public alloc_kind accessor)\n - #49634 (Add a test for the fix to issue #43058)\n - #49641 (Regression test for #46314)\n - #49547 (Unignore borrowck test)\n\nFailed merges:", "tree": {"sha": "25eb6694d5655eca9d78638fdbb8cac09a4d949b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/25eb6694d5655eca9d78638fdbb8cac09a4d949b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/74abffeabb63b17094d1958bf42d6fe1b24907d7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/74abffeabb63b17094d1958bf42d6fe1b24907d7", "html_url": "https://github.com/rust-lang/rust/commit/74abffeabb63b17094d1958bf42d6fe1b24907d7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/74abffeabb63b17094d1958bf42d6fe1b24907d7/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "url": "https://api.github.com/repos/rust-lang/rust/commits/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "html_url": "https://github.com/rust-lang/rust/commit/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be"}, {"sha": "00ada06bba83b0f6b780b017e4de406b0cee37ac", "url": "https://api.github.com/repos/rust-lang/rust/commits/00ada06bba83b0f6b780b017e4de406b0cee37ac", "html_url": "https://github.com/rust-lang/rust/commit/00ada06bba83b0f6b780b017e4de406b0cee37ac"}], "stats": {"total": 755, "additions": 595, "deletions": 160}, "files": [{"sha": "2e36831d7e86f9e7bcb022eb7f5ff0d3d03d0969", "filename": "src/doc/index.md", "status": "modified", "additions": 63, "deletions": 46, "changes": 109, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fdoc%2Findex.md", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fdoc%2Findex.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Findex.md?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -6,55 +6,72 @@ nav {\n }\n </style>\n \n-This page is an overview of the documentation included with your Rust install.\n-Other unofficial documentation may exist elsewhere; for example, the [Rust\n-Learning] project collects documentation from the community, and [Docs.rs]\n-builds documentation for individual Rust packages.\n+Welcome to an overview of the documentation provided by the Rust project.\n+All of these projects are managed by the Docs Team; there are other\n+unofficial documentation resources as well!\n \n-# API Documentation\n+Many of these resources take the form of \"books\"; we collectively call these\n+\"The Rust Bookshelf.\" Some are large, some are small.\n \n-Rust provides a standard library with a number of features; [we host its\n-documentation here][api].\n+## Learn Rust\n \n-# Extended Error Documentation\n+If you'd like to learn Rust, this is the spot for you! All of these resources\n+assume that you have programmed before, but not in any specific language:\n+\n+### The Rust Programming Language\n+\n+Affectionately nicknamed \"the book,\" [The Rust Programming\n+Language](book/index.html) will give you an overview of the language from\n+first principles. You'll build a few projects along the way, and by the end,\n+you'll have a solid grasp of the language.\n+\n+### Rust By Example\n+\n+If reading multiple hundreds of pages about a language isn't your style, then\n+[Rust By Example](rust-by-example/index.html) has you covered. While the book talks about code with\n+a lot of words, RBE shows off a bunch of code, and keeps the talking to a\n+minimum. It also includes exercises!\n+\n+## Use Rust\n+\n+Once you've gotten familliar with the language, these resources can help you\n+when you're actually using it day-to-day.\n+\n+### The Standard Library\n+\n+Rust's standard library has [extensive API documentation](std/index.html),\n+with explanations of how to use various things, as well as example code for\n+accomplishing various tasks.\n+\n+### The Cargo Book\n+\n+[The Cargo Book](cargo/index.html) is a guide to Cargo, Rust's build tool and dependency manager.\n+\n+### The Rustdoc Book\n+\n+[The Rustdoc Book](rustdoc/index.html) describes our documentation tool, `rustdoc`.\n+\n+### Extended Error Listing\n \n Many of Rust's errors come with error codes, and you can request extended\n-diagnostics from the compiler on those errors. We also [have the text of those\n-extended errors on the web][err], if you prefer to read them that way.\n-\n-# The Rust Bookshelf\n-\n-Rust provides a number of book-length sets of documentation, collectively\n-nicknamed 'The Rust Bookshelf.'\n-\n-* [The Rust Programming Language][book] teaches you how to program in Rust.\n-* [Rust By Example][rbe] teaches you how to program in Rust using editable examples.\n-* [The Cargo Book][cargo-book] is a guide to Cargo, Rust's build tool and dependency manager.\n-* [The Unstable Book][unstable-book] has documentation for unstable features.\n-* [The Rustonomicon][nomicon] is your guidebook to the dark arts of unsafe Rust.\n-* [The Reference][ref] is not a formal spec, but is more detailed and comprehensive than the book.\n-* [The Rustdoc Book][rustdoc-book] describes our documentation tool, `rustdoc`.\n-\n-Initially, documentation lands in the Unstable Book, and then, as part of the\n-stabilization process, is moved into the Book, Nomicon, or Reference.\n-\n-Another few words about the reference: it is guaranteed to be accurate, but not\n-complete. We have a policy that features must have documentation to be stabilized,\n-but we did not always have this policy, and so there are some stable things that\n-are not yet in the reference. We're working on back-filling things that landed\n-before this policy was put into place. That work is being tracked\n-[here][refchecklist].\n-\n-[Rust Learning]: https://github.com/ctjhoa/rust-learning\n-[Docs.rs]: https://docs.rs/\n-[api]: std/index.html\n-[ref]: reference/index.html\n-[refchecklist]: https://github.com/rust-lang-nursery/reference/issues/9\n-[err]: error-index.html\n-[book]: book/index.html\n-[rbe]: rust-by-example/index.html\n-[nomicon]: nomicon/index.html\n-[unstable-book]: unstable-book/index.html\n-[rustdoc-book]: rustdoc/index.html\n-[cargo-book]: cargo/index.html\n+diagnostics from the compiler on those errors. You can also [read them\n+here](error-index.html), if you prefer to read them that way.\n+\n+## Master Rust\n+\n+Once you're quite familiar with the language, you may find these advanced\n+resources useful.\n+\n+### The Reference\n+\n+[The Reference](reference/index.html) is not a formal spec, but is more detailed and\n+comprehensive than the book.\n+\n+### The Rustonomicon\n+\n+[The Rustonomicon](nomicon/index.html) is your guidebook to the dark arts of unsafe\n+Rust. It's also sometimes called \"the 'nomicon.\"\n+\n+### The Unstable Book\n \n+[The Unstable Book](unstable-book/index.html) has documentation for unstable features."}, {"sha": "2e4bb1a5257c94b76899fc56324825666a4542be", "filename": "src/doc/unstable-book/src/library-features/splice.md", "status": "removed", "additions": 0, "deletions": 22, "changes": 22, "blob_url": "https://github.com/rust-lang/rust/blob/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "raw_url": "https://github.com/rust-lang/rust/raw/fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fdoc%2Funstable-book%2Fsrc%2Flibrary-features%2Fsplice.md?ref=fb44b4c0eb1d344f84f7bb2c90f28e31a8a180be", "patch": "@@ -1,22 +0,0 @@\n-# `splice`\n-\n-The tracking issue for this feature is: [#44643]\n-\n-[#44643]: https://github.com/rust-lang/rust/issues/44643\n-\n-------------------------\n-\n-The `splice()` method on `String` allows you to replace a range\n-of values in a string with another range of values.\n-\n-A simple example:\n-\n-```rust\n-#![feature(splice)]\n-let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n-let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n-\n-// Replace the range up until the \u03b2 from the string\n-s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n-assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n-```"}, {"sha": "c6741ddb822d5bb9114889bc71fdd2203f72e559", "filename": "src/liballoc/borrow.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fborrow.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fborrow.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fborrow.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -59,6 +59,7 @@ pub trait ToOwned {\n     /// let vv: Vec<i32> = v.to_owned();\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn to_owned(&self) -> Self::Owned;\n \n     /// Uses borrowed data to replace owned data, usually by cloning."}, {"sha": "51a7802540192967d0547ec09e9e7389a6bb6f79", "filename": "src/liballoc/lib.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Flib.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -99,7 +99,6 @@\n #![feature(fundamental)]\n #![feature(generic_param_attrs)]\n #![cfg_attr(stage0, feature(i128_type))]\n-#![feature(iter_rfold)]\n #![feature(lang_items)]\n #![feature(needs_allocator)]\n #![feature(nonzero)]"}, {"sha": "b95aae02894ed758e1ba8acb86b716daceeeb673", "filename": "src/liballoc/string.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fstring.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1517,7 +1517,7 @@ impl String {\n         }\n     }\n \n-    /// Creates a splicing iterator that removes the specified range in the string,\n+    /// Removes the specified range in the string,\n     /// and replaces it with the given string.\n     /// The given string doesn't need to be the same length as the range.\n     ///\n@@ -1537,21 +1537,20 @@ impl String {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(splice)]\n     /// let mut s = String::from(\"\u03b1 is alpha, \u03b2 is beta\");\n     /// let beta_offset = s.find('\u03b2').unwrap_or(s.len());\n     ///\n     /// // Replace the range up until the \u03b2 from the string\n-    /// s.splice(..beta_offset, \"\u0391 is capital alpha; \");\n+    /// s.replace_range(..beta_offset, \"\u0391 is capital alpha; \");\n     /// assert_eq!(s, \"\u0391 is capital alpha; \u03b2 is beta\");\n     /// ```\n-    #[unstable(feature = \"splice\", reason = \"recently added\", issue = \"44643\")]\n-    pub fn splice<R>(&mut self, range: R, replace_with: &str)\n+    #[stable(feature = \"splice\", since = \"1.27.0\")]\n+    pub fn replace_range<R>(&mut self, range: R, replace_with: &str)\n         where R: RangeBounds<usize>\n     {\n         // Memory safety\n         //\n-        // The String version of Splice does not have the memory safety issues\n+        // Replace_range does not have the memory safety issues of a vector Splice.\n         // of the vector version. The data is just plain bytes.\n \n         match range.start() {"}, {"sha": "cb4a17a22d8a4aa867a2676ff55c53eb06f51d64", "filename": "src/liballoc/tests/string.rs", "status": "modified", "additions": 15, "deletions": 15, "changes": 30, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Ftests%2Fstring.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Ftests%2Fstring.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Ftests%2Fstring.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -443,53 +443,53 @@ fn test_drain() {\n }\n \n #[test]\n-fn test_splice() {\n+fn test_replace_range() {\n     let mut s = \"Hello, world!\".to_owned();\n-    s.splice(7..12, \"\u4e16\u754c\");\n+    s.replace_range(7..12, \"\u4e16\u754c\");\n     assert_eq!(s, \"Hello, \u4e16\u754c!\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_char_boundary() {\n+fn test_replace_range_char_boundary() {\n     let mut s = \"Hello, \u4e16\u754c!\".to_owned();\n-    s.splice(..8, \"\");\n+    s.replace_range(..8, \"\");\n }\n \n #[test]\n-fn test_splice_inclusive_range() {\n+fn test_replace_range_inclusive_range() {\n     let mut v = String::from(\"12345\");\n-    v.splice(2..=3, \"789\");\n+    v.replace_range(2..=3, \"789\");\n     assert_eq!(v, \"127895\");\n-    v.splice(1..=2, \"A\");\n+    v.replace_range(1..=2, \"A\");\n     assert_eq!(v, \"1A895\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_out_of_bounds() {\n+fn test_replace_range_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..6, \"789\");\n+    s.replace_range(5..6, \"789\");\n }\n \n #[test]\n #[should_panic]\n-fn test_splice_inclusive_out_of_bounds() {\n+fn test_replace_range_inclusive_out_of_bounds() {\n     let mut s = String::from(\"12345\");\n-    s.splice(5..=5, \"789\");\n+    s.replace_range(5..=5, \"789\");\n }\n \n #[test]\n-fn test_splice_empty() {\n+fn test_replace_range_empty() {\n     let mut s = String::from(\"12345\");\n-    s.splice(1..2, \"\");\n+    s.replace_range(1..2, \"\");\n     assert_eq!(s, \"1345\");\n }\n \n #[test]\n-fn test_splice_unbounded() {\n+fn test_replace_range_unbounded() {\n     let mut s = String::from(\"12345\");\n-    s.splice(.., \"\");\n+    s.replace_range(.., \"\");\n     assert_eq!(s, \"\");\n }\n "}, {"sha": "02008310b81613fe0b6e00c29d139e25f1d17315", "filename": "src/liballoc/vec.rs", "status": "modified", "additions": 57, "deletions": 7, "changes": 64, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fvec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Fliballoc%2Fvec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliballoc%2Fvec.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1283,6 +1283,49 @@ impl<T> Vec<T> {\n         }\n         other\n     }\n+\n+    /// Resizes the `Vec` in-place so that `len` is equal to `new_len`.\n+    ///\n+    /// If `new_len` is greater than `len`, the `Vec` is extended by the\n+    /// difference, with each additional slot filled with the result of\n+    /// calling the closure `f`. The return values from `f` will end up\n+    /// in the `Vec` in the order they have been generated.\n+    ///\n+    /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n+    ///\n+    /// This method uses a closure to create new values on every push. If\n+    /// you'd rather [`Clone`] a given value, use [`resize`]. If you want\n+    /// to use the [`Default`] trait to generate values, you can pass\n+    /// [`Default::default()`] as the second argument..\n+    ///\n+    /// # Examples\n+    ///\n+    /// ```\n+    /// #![feature(vec_resize_with)]\n+    ///\n+    /// let mut vec = vec![1, 2, 3];\n+    /// vec.resize_with(5, Default::default);\n+    /// assert_eq!(vec, [1, 2, 3, 0, 0]);\n+    ///\n+    /// let mut vec = vec![];\n+    /// let mut p = 1;\n+    /// vec.resize_with(4, || { p *= 2; p });\n+    /// assert_eq!(vec, [2, 4, 8, 16]);\n+    /// ```\n+    ///\n+    /// [`resize`]: #method.resize\n+    /// [`Clone`]: ../../std/clone/trait.Clone.html\n+    #[unstable(feature = \"vec_resize_with\", issue = \"41758\")]\n+    pub fn resize_with<F>(&mut self, new_len: usize, f: F)\n+        where F: FnMut() -> T\n+    {\n+        let len = self.len();\n+        if new_len > len {\n+            self.extend_with(new_len - len, ExtendFunc(f));\n+        } else {\n+            self.truncate(new_len);\n+        }\n+    }\n }\n \n impl<T: Clone> Vec<T> {\n@@ -1293,8 +1336,8 @@ impl<T: Clone> Vec<T> {\n     /// If `new_len` is less than `len`, the `Vec` is simply truncated.\n     ///\n     /// This method requires [`Clone`] to be able clone the passed value. If\n-    /// you'd rather create a value with [`Default`] instead, see\n-    /// [`resize_default`].\n+    /// you need more flexibility (or want to rely on [`Default`] instead of\n+    /// [`Clone`]), use [`resize_with`].\n     ///\n     /// # Examples\n     ///\n@@ -1310,7 +1353,7 @@ impl<T: Clone> Vec<T> {\n     ///\n     /// [`Clone`]: ../../std/clone/trait.Clone.html\n     /// [`Default`]: ../../std/default/trait.Default.html\n-    /// [`resize_default`]: #method.resize_default\n+    /// [`resize_with`]: #method.resize_with\n     #[stable(feature = \"vec_resize\", since = \"1.5.0\")]\n     pub fn resize(&mut self, new_len: usize, value: T) {\n         let len = self.len();\n@@ -1389,24 +1432,31 @@ impl<T: Default> Vec<T> {\n \n // This code generalises `extend_with_{element,default}`.\n trait ExtendWith<T> {\n-    fn next(&self) -> T;\n+    fn next(&mut self) -> T;\n     fn last(self) -> T;\n }\n \n struct ExtendElement<T>(T);\n impl<T: Clone> ExtendWith<T> for ExtendElement<T> {\n-    fn next(&self) -> T { self.0.clone() }\n+    fn next(&mut self) -> T { self.0.clone() }\n     fn last(self) -> T { self.0 }\n }\n \n struct ExtendDefault;\n impl<T: Default> ExtendWith<T> for ExtendDefault {\n-    fn next(&self) -> T { Default::default() }\n+    fn next(&mut self) -> T { Default::default() }\n     fn last(self) -> T { Default::default() }\n }\n+\n+struct ExtendFunc<F>(F);\n+impl<T, F: FnMut() -> T> ExtendWith<T> for ExtendFunc<F> {\n+    fn next(&mut self) -> T { (self.0)() }\n+    fn last(mut self) -> T { (self.0)() }\n+}\n+\n impl<T> Vec<T> {\n     /// Extend the vector by `n` values, using the given generator.\n-    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, value: E) {\n+    fn extend_with<E: ExtendWith<T>>(&mut self, n: usize, mut value: E) {\n         self.reserve(n);\n \n         unsafe {"}, {"sha": "58a8439162c118586033a21603889c32ed6bed7e", "filename": "src/libcore/clone.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fclone.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fclone.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fclone.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -117,6 +117,7 @@ pub trait Clone : Sized {\n     /// assert_eq!(\"Hello\", hello.clone());\n     /// ```\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"cloning is often expensive and is not expected to have side effects\"]\n     fn clone(&self) -> Self;\n \n     /// Performs copy-assignment from `source`."}, {"sha": "d55219d7226e6d5fda7e7679df06994ab6a987f8", "filename": "src/libcore/fmt/mod.rs", "status": "modified", "additions": 5, "deletions": 6, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Ffmt%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Ffmt%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Fmod.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -401,19 +401,18 @@ impl<'a> Arguments<'a> {\n /// safely be done, so no constructors are given and the fields are private\n /// to prevent modification.\n ///\n-/// The [`format_args!`] macro will safely create an instance of this structure\n-/// and pass it to a function or closure, passed as the first argument. The\n-/// macro validates the format string at compile-time so usage of the [`write`]\n-/// and [`format`] functions can be safely performed.\n+/// The [`format_args!`] macro will safely create an instance of this structure.\n+/// The macro validates the format string at compile-time so usage of the\n+/// [`write`] and [`format`] functions can be safely performed.\n ///\n /// You can use the `Arguments<'a>` that [`format_args!`] returns in `Debug`\n /// and `Display` contexts as seen below. The example also shows that `Debug`\n /// and `Display` format to the same thing: the interpolated format string\n /// in `format_args!`.\n ///\n /// ```rust\n-/// let display = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n-/// let debug = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n+/// let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n /// assert_eq!(\"1 foo 2\", display);\n /// assert_eq!(display, debug);\n /// ```"}, {"sha": "4ccf446aa6346f007655b95e50ebe30e60881c1a", "filename": "src/libcore/iter/iterator.rs", "status": "modified", "additions": 3, "deletions": 5, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Fiterator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Fiterator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Fiterator.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1368,6 +1368,7 @@ pub trait Iterator {\n     /// [`Result`]: ../../std/result/enum.Result.html\n     #[inline]\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n+    #[must_use = \"if you really need to exhaust the iterator, consider `.for_each(drop)` instead\"]\n     fn collect<B: FromIterator<Self::Item>>(self) -> B where Self: Sized {\n         FromIterator::from_iter(self)\n     }\n@@ -1446,7 +1447,6 @@ pub trait Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [1, 2, 3];\n     ///\n     /// // the checked sum of all of the elements of the array\n@@ -1458,7 +1458,6 @@ pub trait Iterator {\n     /// Short-circuiting:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [10, 20, 30, 100, 40, 50];\n     /// let mut it = a.iter();\n     ///\n@@ -1472,7 +1471,7 @@ pub trait Iterator {\n     /// assert_eq!(it.next(), Some(&40));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_fold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -1495,7 +1494,6 @@ pub trait Iterator {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// use std::fs::rename;\n     /// use std::io::{stdout, Write};\n     /// use std::path::Path;\n@@ -1512,7 +1510,7 @@ pub trait Iterator {\n     /// assert_eq!(it.next(), Some(\"stale_bread.json\"));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_for_each<F, R>(&mut self, mut f: F) -> R where\n         Self: Sized, F: FnMut(Self::Item) -> R, R: Try<Ok=()>\n     {"}, {"sha": "5d57207763e47b671306ca3674f20da7cfd7eb14", "filename": "src/libcore/iter/range.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Frange.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Frange.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Frange.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -488,6 +488,7 @@ macro_rules! try_from_unbounded {\n }\n \n // unsigned to signed (only positive bound)\n+#[cfg(any(target_pointer_width = \"32\", target_pointer_width = \"64\"))]\n macro_rules! try_from_upper_bounded {\n     ($($target:ty),*) => {$(\n         impl PrivateTryFromUsize for $target {"}, {"sha": "ddbb59989424f11502b5c4b0f17e8f29498c571c", "filename": "src/libcore/iter/traits.rs", "status": "modified", "additions": 4, "deletions": 12, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Ftraits.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Fiter%2Ftraits.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fiter%2Ftraits.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -427,7 +427,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [\"1\", \"2\", \"3\"];\n     /// let sum = a.iter()\n     ///     .map(|&s| s.parse::<i32>())\n@@ -438,7 +437,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Short-circuiting:\n     ///\n     /// ```\n-    /// #![feature(iterator_try_fold)]\n     /// let a = [\"1\", \"rust\", \"3\"];\n     /// let mut it = a.iter();\n     /// let sum = it\n@@ -452,7 +450,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(it.next_back(), Some(&\"1\"));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iterator_try_fold\", issue = \"45594\")]\n+    #[stable(feature = \"iterator_try_fold\", since = \"1.27.0\")]\n     fn try_rfold<B, F, R>(&mut self, init: B, mut f: F) -> R where\n         Self: Sized, F: FnMut(B, Self::Item) -> R, R: Try<Ok=B>\n     {\n@@ -491,7 +489,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_rfold)]\n     /// let a = [1, 2, 3];\n     ///\n     /// // the sum of all of the elements of a\n@@ -505,7 +502,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// and continuing with each element from the back until the front:\n     ///\n     /// ```\n-    /// #![feature(iter_rfold)]\n     /// let numbers = [1, 2, 3, 4, 5];\n     ///\n     /// let zero = \"0\".to_string();\n@@ -517,14 +513,14 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(result, \"(1 + (2 + (3 + (4 + (5 + 0)))))\");\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_rfold\", issue = \"44705\")]\n+    #[stable(feature = \"iter_rfold\", since = \"1.27.0\")]\n     fn rfold<B, F>(mut self, accum: B, mut f: F) -> B where\n         Self: Sized, F: FnMut(B, Self::Item) -> B,\n     {\n         self.try_rfold(accum, move |acc, x| AlwaysOk(f(acc, x))).0\n     }\n \n-    /// Searches for an element of an iterator from the right that satisfies a predicate.\n+    /// Searches for an element of an iterator from the back that satisfies a predicate.\n     ///\n     /// `rfind()` takes a closure that returns `true` or `false`. It applies\n     /// this closure to each element of the iterator, starting at the end, and if any\n@@ -547,8 +543,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Basic usage:\n     ///\n     /// ```\n-    /// #![feature(iter_rfind)]\n-    ///\n     /// let a = [1, 2, 3];\n     ///\n     /// assert_eq!(a.iter().rfind(|&&x| x == 2), Some(&2));\n@@ -559,8 +553,6 @@ pub trait DoubleEndedIterator: Iterator {\n     /// Stopping at the first `true`:\n     ///\n     /// ```\n-    /// #![feature(iter_rfind)]\n-    ///\n     /// let a = [1, 2, 3];\n     ///\n     /// let mut iter = a.iter();\n@@ -571,7 +563,7 @@ pub trait DoubleEndedIterator: Iterator {\n     /// assert_eq!(iter.next_back(), Some(&1));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"iter_rfind\", issue = \"39480\")]\n+    #[stable(feature = \"iter_rfind\", since = \"1.27.0\")]\n     fn rfind<P>(&mut self, mut predicate: P) -> Option<Self::Item> where\n         Self: Sized,\n         P: FnMut(&Self::Item) -> bool"}, {"sha": "de7211e718c9f20333b33a576cbf019f71cc1389", "filename": "src/libcore/tests/lib.rs", "status": "modified", "additions": 0, "deletions": 3, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Ftests%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibcore%2Ftests%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Flib.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -25,11 +25,8 @@\n #![feature(iterator_step_by)]\n #![cfg_attr(stage0, feature(i128_type))]\n #![cfg_attr(stage0, feature(inclusive_range_syntax))]\n-#![feature(iterator_try_fold)]\n #![feature(iterator_flatten)]\n #![cfg_attr(stage0, feature(conservative_impl_trait))]\n-#![feature(iter_rfind)]\n-#![feature(iter_rfold)]\n #![feature(iterator_repeat_with)]\n #![feature(nonzero)]\n #![feature(pattern)]"}, {"sha": "328b2db2b58282ade9b5d6267842fb50af59aa29", "filename": "src/librustc/middle/stability.rs", "status": "modified", "additions": 36, "deletions": 2, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc%2Fmiddle%2Fstability.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fstability.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -470,6 +470,30 @@ pub fn check_unstable_api_usage<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>) {\n     tcx.hir.krate().visit_all_item_likes(&mut checker.as_deep_visitor());\n }\n \n+/// Check whether an item marked with `deprecated(since=\"X\")` is currently\n+/// deprecated (i.e. whether X is not greater than the current rustc version).\n+pub fn deprecation_in_effect(since: &str) -> bool {\n+    fn parse_version(ver: &str) -> Vec<u32> {\n+        // We ignore non-integer components of the version (e.g. \"nightly\").\n+        ver.split(|c| c == '.' || c == '-').flat_map(|s| s.parse()).collect()\n+    }\n+\n+    if let Some(rustc) = option_env!(\"CFG_RELEASE\") {\n+        let since: Vec<u32> = parse_version(since);\n+        let rustc: Vec<u32> = parse_version(rustc);\n+        // We simply treat invalid `since` attributes as relating to a previous\n+        // Rust version, thus always displaying the warning.\n+        if since.len() != 3 {\n+            return true;\n+        }\n+        since <= rustc\n+    } else {\n+        // By default, a deprecation warning applies to\n+        // the current version of the compiler.\n+        true\n+    }\n+}\n+\n struct Checker<'a, 'tcx: 'a> {\n     tcx: TyCtxt<'a, 'tcx, 'tcx>,\n }\n@@ -559,9 +583,19 @@ impl<'a, 'gcx, 'tcx> TyCtxt<'a, 'gcx, 'tcx> {\n         // Deprecated attributes apply in-crate and cross-crate.\n         if let Some(id) = id {\n             if let Some(depr_entry) = self.lookup_deprecation_entry(def_id) {\n+                // If the deprecation is scheduled for a future Rust\n+                // version, then we should display no warning message.\n+                let deprecated_in_future_version = if let Some(sym) = depr_entry.attr.since {\n+                    let since = sym.as_str();\n+                    !deprecation_in_effect(&since)\n+                } else {\n+                    false\n+                };\n+\n                 let parent_def_id = self.hir.local_def_id(self.hir.get_parent(id));\n-                let skip = self.lookup_deprecation_entry(parent_def_id)\n-                    .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n+                let skip = deprecated_in_future_version ||\n+                           self.lookup_deprecation_entry(parent_def_id)\n+                               .map_or(false, |parent_depr| parent_depr.same_origin(&depr_entry));\n                 if !skip {\n                     lint_deprecated(def_id, id, depr_entry.attr.note);\n                 }"}, {"sha": "c9495587c4687aa6e5d6119b77550b5ec230b095", "filename": "src/librustc_data_structures/indexed_set.rs", "status": "modified", "additions": 73, "deletions": 1, "changes": 74, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_data_structures%2Findexed_set.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_data_structures%2Findexed_set.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_data_structures%2Findexed_set.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -121,7 +121,9 @@ impl<T: Idx> IdxSetBuf<T> {\n \n     /// Creates set holding every element whose index falls in range 0..universe_size.\n     pub fn new_filled(universe_size: usize) -> Self {\n-        Self::new(!0, universe_size)\n+        let mut result = Self::new(!0, universe_size);\n+        result.trim_to(universe_size);\n+        result\n     }\n \n     /// Creates set holding no elements.\n@@ -168,6 +170,36 @@ impl<T: Idx> IdxSet<T> {\n         }\n     }\n \n+    /// Sets all elements up to `universe_size`\n+    pub fn set_up_to(&mut self, universe_size: usize) {\n+        for b in &mut self.bits {\n+            *b = !0;\n+        }\n+        self.trim_to(universe_size);\n+    }\n+\n+    /// Clear all elements above `universe_size`.\n+    fn trim_to(&mut self, universe_size: usize) {\n+        let word_bits = mem::size_of::<Word>() * 8;\n+\n+        // `trim_block` is the first block where some bits have\n+        // to be cleared.\n+        let trim_block = universe_size / word_bits;\n+\n+        // all the blocks above it have to be completely cleared.\n+        if trim_block < self.bits.len() {\n+            for b in &mut self.bits[trim_block+1..] {\n+                *b = 0;\n+            }\n+\n+            // at that block, the `universe_size % word_bits` lsbs\n+            // should remain.\n+            let remaining_bits = universe_size % word_bits;\n+            let mask = (1<<remaining_bits)-1;\n+            self.bits[trim_block] &= mask;\n+        }\n+    }\n+\n     /// Removes `elem` from the set `self`; returns true iff this changed `self`.\n     pub fn remove(&mut self, elem: &T) -> bool {\n         self.bits.clear_bit(elem.index())\n@@ -252,3 +284,43 @@ impl<'a, T: Idx> Iterator for Iter<'a, T> {\n         }\n     }\n }\n+\n+#[test]\n+fn test_trim_to() {\n+    use std::cmp;\n+\n+    for i in 0..256 {\n+        let mut idx_buf: IdxSetBuf<usize> = IdxSetBuf::new_filled(128);\n+        idx_buf.trim_to(i);\n+\n+        let elems: Vec<usize> = idx_buf.iter().collect();\n+        let expected: Vec<usize> = (0..cmp::min(i, 128)).collect();\n+        assert_eq!(elems, expected);\n+    }\n+}\n+\n+#[test]\n+fn test_set_up_to() {\n+    for i in 0..128 {\n+        for mut idx_buf in\n+            vec![IdxSetBuf::new_empty(128), IdxSetBuf::new_filled(128)]\n+            .into_iter()\n+        {\n+            idx_buf.set_up_to(i);\n+\n+            let elems: Vec<usize> = idx_buf.iter().collect();\n+            let expected: Vec<usize> = (0..i).collect();\n+            assert_eq!(elems, expected);\n+        }\n+    }\n+}\n+\n+#[test]\n+fn test_new_filled() {\n+    for i in 0..128 {\n+        let mut idx_buf = IdxSetBuf::new_filled(i);\n+        let elems: Vec<usize> = idx_buf.iter().collect();\n+        let expected: Vec<usize> = (0..i).collect();\n+        assert_eq!(elems, expected);\n+    }\n+}"}, {"sha": "6f5fcc9e421cc115d780356092c1563455c30201", "filename": "src/librustc_mir/build/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Fbuild%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fbuild%2Fmod.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -317,7 +317,7 @@ newtype_index!(ScopeId);\n /// macro (and methods below) makes working with `BlockAnd` much more\n /// convenient.\n \n-#[must_use] // if you don't use one of these results, you're leaving a dangling edge\n+#[must_use = \"if you don't use one of these results, you're leaving a dangling edge\"]\n struct BlockAnd<T>(BasicBlock, T);\n \n trait BlockAndExtension {"}, {"sha": "287640439c0e8f9ab39216066e8e64eb38bc64d6", "filename": "src/librustc_mir/dataflow/impls/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fmod.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -389,7 +389,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for MaybeUninitializedPlaces<'a, 'gcx, 'tcx>\n     // sets on_entry bits for Arg places\n     fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n         // set all bits to 1 (uninit) before gathering counterevidence\n-        for e in entry_set.words_mut() { *e = !0; }\n+        entry_set.set_up_to(self.bits_per_block());\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,\n@@ -443,7 +443,7 @@ impl<'a, 'gcx, 'tcx> BitDenotation for DefinitelyInitializedPlaces<'a, 'gcx, 'tc\n \n     // sets on_entry bits for Arg places\n     fn start_block_effect(&self, entry_set: &mut IdxSet<MovePathIndex>) {\n-        for e in entry_set.words_mut() { *e = 0; }\n+        entry_set.clear();\n \n         drop_flag_effects_for_function_entry(\n             self.tcx, self.mir, self.mdpe,"}, {"sha": "cf3241fe9be662d6938e7d551020cbee98db5a4d", "filename": "src/librustc_mir/interpret/eval_context.rs", "status": "modified", "additions": 19, "deletions": 10, "changes": 29, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Feval_context.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -743,20 +743,29 @@ impl<'a, 'mir, 'tcx: 'mir, M: Machine<'mir, 'tcx>> EvalContext<'a, 'mir, 'tcx, M\n \n             Discriminant(ref place) => {\n                 let ty = self.place_ty(place);\n+                let layout = self.layout_of(ty)?;\n                 let place = self.eval_place(place)?;\n                 let discr_val = self.read_discriminant_value(place, ty)?;\n-                if let ty::TyAdt(adt_def, _) = ty.sty {\n-                    trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n-                    if adt_def.discriminants(*self.tcx).all(|v| {\n-                        discr_val != v.val\n-                    })\n-                    {\n-                        return err!(InvalidDiscriminant);\n+                match layout.variants {\n+                    layout::Variants::Single { index } => {\n+                        assert_eq!(discr_val, index as u128);\n+                    }\n+                    layout::Variants::Tagged { .. } |\n+                    layout::Variants::NicheFilling { .. } => {\n+                        if let ty::TyAdt(adt_def, _) = ty.sty {\n+                            trace!(\"Read discriminant {}, valid discriminants {:?}\", discr_val, adt_def.discriminants(*self.tcx).collect::<Vec<_>>());\n+                            if adt_def.discriminants(*self.tcx).all(|v| {\n+                                discr_val != v.val\n+                            })\n+                            {\n+                                return err!(InvalidDiscriminant);\n+                            }\n+                        } else {\n+                            bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n+                        }\n                     }\n-                    self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n-                } else {\n-                    bug!(\"rustc only generates Rvalue::Discriminant for enums\");\n                 }\n+                self.write_primval(dest, PrimVal::Bytes(discr_val), dest_ty)?;\n             }\n         }\n "}, {"sha": "dcf97f61545db2ca7a7ebd2d3a7fadc9c7bdbe8d", "filename": "src/librustc_mir/interpret/memory.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fmemory.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -328,6 +328,10 @@ impl<'a, 'mir, 'tcx, M: Machine<'mir, 'tcx>> Memory<'a, 'mir, 'tcx, M> {\n             .ok_or(EvalErrorKind::ExecuteMemory.into())\n     }\n \n+    pub fn get_alloc_kind(&self, id: AllocId) -> Option<MemoryKind<M::MemoryKinds>> {\n+        self.alloc_kind.get(&id).cloned()\n+    }\n+\n     /// For debugging, print an allocation and all allocations it points to, recursively.\n     pub fn dump_alloc(&self, id: AllocId) {\n         self.dump_allocs(vec![id]);"}, {"sha": "6ada4ccfbddc265e13728ed41c3cf4882ecb3f2c", "filename": "src/librustdoc/clean/mod.rs", "status": "modified", "additions": 29, "deletions": 4, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fclean%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fclean%2Fmod.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1074,8 +1074,7 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n         let ty = cx.resolver.borrow_mut()\n                             .with_scope(*id,\n             |resolver| {\n-                resolver.resolve_str_path_error(DUMMY_SP,\n-                                                &path, false)\n+                resolver.resolve_str_path_error(DUMMY_SP, &path, false)\n         })?;\n         match ty.def {\n             Def::Struct(did) | Def::Union(did) | Def::Enum(did) | Def::TyAlias(did) => {\n@@ -1090,7 +1089,27 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                     };\n                     Ok((ty.def, Some(format!(\"{}.{}\", out, item_name))))\n                 } else {\n-                    Err(())\n+                    let is_enum = match ty.def {\n+                        Def::Enum(_) => true,\n+                        _ => false,\n+                    };\n+                    let elem = if is_enum {\n+                        cx.tcx.adt_def(did).all_fields().find(|item| item.name == item_name)\n+                    } else {\n+                        cx.tcx.adt_def(did)\n+                              .non_enum_variant()\n+                              .fields\n+                              .iter()\n+                              .find(|item| item.name == item_name)\n+                    };\n+                    if let Some(item) = elem {\n+                        Ok((ty.def,\n+                            Some(format!(\"{}.{}\",\n+                                         if is_enum { \"variant\" } else { \"structfield\" },\n+                                         item.name))))\n+                    } else {\n+                        Err(())\n+                    }\n                 }\n             }\n             Def::Trait(did) => {\n@@ -1101,7 +1120,13 @@ fn resolve(cx: &DocContext, path_str: &str, is_val: bool) -> Result<(Def, Option\n                     let kind = match item.kind {\n                         ty::AssociatedKind::Const if is_val => \"associatedconstant\",\n                         ty::AssociatedKind::Type if !is_val => \"associatedtype\",\n-                        ty::AssociatedKind::Method if is_val => \"tymethod\",\n+                        ty::AssociatedKind::Method if is_val => {\n+                            if item.defaultness.has_value() {\n+                                \"method\"\n+                            } else {\n+                                \"tymethod\"\n+                            }\n+                        }\n                         _ => return Err(())\n                     };\n "}, {"sha": "8e6dcf8caf48481fb858d0ddd703612341bbb60d", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 25, "deletions": 6, "changes": 31, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -2113,9 +2113,15 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             } else {\n                 String::new()\n             };\n-            let text = format!(\"Deprecated{}{}\",\n-                               since,\n-                               MarkdownHtml(&deprecated_reason));\n+            let text = if stability::deprecation_in_effect(&stab.deprecated_since) {\n+                format!(\"Deprecated{}{}\",\n+                        since,\n+                        MarkdownHtml(&deprecated_reason))\n+            } else {\n+                format!(\"Deprecating in {}{}\",\n+                        Escape(&stab.deprecated_since),\n+                        MarkdownHtml(&deprecated_reason))\n+            };\n             stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n         };\n \n@@ -2165,7 +2171,15 @@ fn short_stability(item: &clean::Item, cx: &Context, show_reason: bool) -> Vec<S\n             String::new()\n         };\n \n-        let text = format!(\"Deprecated{}{}\", since, MarkdownHtml(&note));\n+        let text = if stability::deprecation_in_effect(&depr.since) {\n+            format!(\"Deprecated{}{}\",\n+                    since,\n+                    MarkdownHtml(&note))\n+        } else {\n+            format!(\"Deprecating in {}{}\",\n+                    Escape(&depr.since),\n+                    MarkdownHtml(&note))\n+        };\n         stability.push(format!(\"<div class='stab deprecated'>{}</div>\", text))\n     }\n \n@@ -2801,10 +2815,15 @@ fn item_union(w: &mut fmt::Formatter, cx: &Context, it: &clean::Item,\n         write!(w, \"<h2 id='fields' class='fields small-section-header'>\n                    Fields<a href='#fields' class='anchor'></a></h2>\")?;\n         for (field, ty) in fields {\n-            write!(w, \"<span id='{shortty}.{name}' class=\\\"{shortty}\\\"><code>{name}: {ty}</code>\n+            let name = field.name.as_ref().expect(\"union field name\");\n+            let id = format!(\"{}.{}\", ItemType::StructField, name);\n+            write!(w, \"<span id=\\\"{id}\\\" class=\\\"{shortty} small-section-header\\\">\\\n+                           <a href=\\\"#{id}\\\" class=\\\"anchor field\\\"></a>\\\n+                           <span class='invisible'><code>{name}: {ty}</code></span>\\\n                        </span>\",\n+                   id = id,\n+                   name = name,\n                    shortty = ItemType::StructField,\n-                   name = field.name.as_ref().unwrap(),\n                    ty = ty)?;\n             if let Some(stability_class) = field.stability_class() {\n                 write!(w, \"<span class='stab {stab}'></span>\","}, {"sha": "09776569f80bf8cee1c4ab432fb598a9b43c44c4", "filename": "src/librustdoc/html/static/themes/dark.css", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Fstatic%2Fthemes%2Fdark.css?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -239,7 +239,7 @@ a.test-arrow:hover{\n }\n \n :target > code {\n-\tbackground: #FDFFD3;\n+\tbackground-color: #494a3d;\n }\n \n pre.compile_fail {"}, {"sha": "7bd1adc411ae4b1c0f19009c51f0faf1ff046643", "filename": "src/libstd/fs.rs", "status": "modified", "additions": 6, "deletions": 2, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Ffs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Ffs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ffs.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -231,7 +231,9 @@ fn initial_buffer_size(file: &File) -> usize {\n /// Read the entire contents of a file into a bytes vector.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_end`]\n-/// with fewer imports and without an intermediate variable.\n+/// with fewer imports and without an intermediate variable.  It pre-allocates a\n+/// buffer based on the file size when available, so it is generally faster than\n+/// reading into a vector created with `Vec::new()`.\n ///\n /// [`File::open`]: struct.File.html#method.open\n /// [`read_to_end`]: ../io/trait.Read.html#method.read_to_end\n@@ -270,7 +272,9 @@ pub fn read<P: AsRef<Path>>(path: P) -> io::Result<Vec<u8>> {\n /// Read the entire contents of a file into a string.\n ///\n /// This is a convenience function for using [`File::open`] and [`read_to_string`]\n-/// with fewer imports and without an intermediate variable.\n+/// with fewer imports and without an intermediate variable.  It pre-allocates a\n+/// buffer based on the file size when available, so it is generally faster than\n+/// reading into a string created with `String::new()`.\n ///\n /// [`File::open`]: struct.File.html#method.open\n /// [`read_to_string`]: ../io/trait.Read.html#method.read_to_string"}, {"sha": "d6eac748334834ccae5136eb19cdc846b36995f9", "filename": "src/libstd/io/buffered.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fio%2Fbuffered.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fio%2Fbuffered.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fbuffered.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -25,6 +25,12 @@ use memchr;\n /// results in a system call. A `BufReader` performs large, infrequent reads on\n /// the underlying [`Read`] and maintains an in-memory buffer of the results.\n ///\n+/// `BufReader` can improve the speed of programs that make *small* and\n+/// *repeated* read calls to the same file or network socket.  It does not\n+/// help when reading very large amounts at once, or reading just one or a few\n+/// times.  It also provides no advantage when reading from a source that is\n+/// already in memory, like a `Vec<u8>`.\n+///\n /// [`Read`]: ../../std/io/trait.Read.html\n /// [`TcpStream::read`]: ../../std/net/struct.TcpStream.html#method.read\n /// [`TcpStream`]: ../../std/net/struct.TcpStream.html\n@@ -180,7 +186,7 @@ impl<R: Read> BufReader<R> {\n     ///\n     /// # Examples\n     ///\n-    /// ```no_ru\n+    /// ```no_run\n     /// # #![feature(bufreader_buffer)]\n     /// use std::io::{BufReader, BufRead};\n     /// use std::fs::File;\n@@ -359,6 +365,12 @@ impl<R: Seek> Seek for BufReader<R> {\n /// `BufWriter` keeps an in-memory buffer of data and writes it to an underlying\n /// writer in large, infrequent batches.\n ///\n+/// `BufWriter` can improve the speed of programs that make *small* and\n+/// *repeated* write calls to the same file or network socket.  It does not\n+/// help when writing very large amounts at once, or writing just one or a few\n+/// times.  It also provides no advantage when writing to a destination that is\n+/// in memory, like a `Vec<u8>`.\n+///\n /// When the `BufWriter` is dropped, the contents of its buffer will be written\n /// out. However, any errors that happen in the process of flushing the buffer\n /// when the writer is dropped will be ignored. Code that wishes to handle such"}, {"sha": "3b8c42ddb39d89d4e390ded3268be11350147859", "filename": "src/libstd/io/mod.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fio%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fio%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fio%2Fmod.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -595,6 +595,11 @@ pub trait Read {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// (See also the [`std::fs::read`] convenience function for reading from a\n+    /// file.)\n+    ///\n+    /// [`std::fs::read`]: ../fs/fn.read.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_end(&mut self, buf: &mut Vec<u8>) -> Result<usize> {\n         read_to_end(self, buf)\n@@ -633,6 +638,11 @@ pub trait Read {\n     ///     Ok(())\n     /// }\n     /// ```\n+    ///\n+    /// (See also the [`std::fs::read_to_string`] convenience function for\n+    /// reading from a file.)\n+    ///\n+    /// [`std::fs::read_to_string`]: ../fs/fn.read_to_string.html\n     #[stable(feature = \"rust1\", since = \"1.0.0\")]\n     fn read_to_string(&mut self, buf: &mut String) -> Result<usize> {\n         // Note that we do *not* call `.read_to_end()` here. We are passing"}, {"sha": "5ef7c15965505df76be13fe25edf6f41eb2af87e", "filename": "src/libstd/macros.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fmacros.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -341,8 +341,8 @@ pub mod builtin {\n     /// format string in `format_args!`.\n     ///\n     /// ```rust\n-    /// let display = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n-    /// let debug = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n+    /// let debug = format!(\"{:?}\", format_args!(\"{} foo {:?}\", 1, 2));\n+    /// let display = format!(\"{}\", format_args!(\"{} foo {:?}\", 1, 2));\n     /// assert_eq!(\"1 foo 2\", display);\n     /// assert_eq!(display, debug);\n     /// ```"}, {"sha": "40bc84f4bc104a900636a7f0ad5587dcb3cdb269", "filename": "src/libstd/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1426,7 +1426,7 @@ pub fn abort() -> ! {\n /// ```\n ///\n ///\n-#[stable(feature = \"getpid\", since = \"1.27.0\")]\n+#[stable(feature = \"getpid\", since = \"1.26.0\")]\n pub fn id() -> u32 {\n     ::sys::os::getpid()\n }"}, {"sha": "7b4ec20d91fb46e80a014cf95b25012f8c816cbf", "filename": "src/libstd/sys/unix/ext/process.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Fext%2Fprocess.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -193,7 +193,7 @@ impl IntoRawFd for process::ChildStderr {\n }\n \n /// Returns the OS-assigned process identifier associated with this process's parent.\n-#[unstable(feature = \"unix_ppid\", issue = \"46104\")]\n+#[stable(feature = \"unix_ppid\", since = \"1.27.0\")]\n pub fn parent_id() -> u32 {\n     ::sys::os::getppid()\n }"}, {"sha": "f2e6d51d064d14ae539c892d277c5604c5a47e69", "filename": "src/test/compile-fail/borrowck/borrowck-thread-local-static-borrow-outlives-fn.rs", "status": "modified", "additions": 0, "deletions": 1, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fborrowck%2Fborrowck-thread-local-static-borrow-outlives-fn.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -8,7 +8,6 @@\n // option. This file may not be copied, modified, or distributed\n // except according to those terms.\n \n-// ignore-test will be fixed later\n // revisions: ast mir\n //[mir]compile-flags: -Z borrowck=mir\n "}, {"sha": "93eb6b6b11544b0b9c6ec7ad4efc3b0c96d5196a", "filename": "src/test/compile-fail/deprecation-lint.rs", "status": "modified", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Fdeprecation-lint.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -180,6 +180,11 @@ mod this_crate {\n     #[deprecated(since = \"1.0.0\", note = \"text\")]\n     pub fn deprecated_text() {}\n \n+    #[deprecated(since = \"99.99.99\", note = \"text\")]\n+    pub fn deprecated_future() {}\n+    #[deprecated(since = \"99.99.99\", note = \"text\")]\n+    pub fn deprecated_future_text() {}\n+\n     pub struct MethodTester;\n \n     impl MethodTester {\n@@ -266,6 +271,9 @@ mod this_crate {\n         <Foo>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n         <Foo as Trait>::trait_deprecated_text(&foo); //~ ERROR use of deprecated item 'this_crate::Trait::trait_deprecated_text': text\n \n+        deprecated_future(); // Fine; no error.\n+        deprecated_future_text(); // Fine; no error.\n+\n         let _ = DeprecatedStruct {\n             //~^ ERROR use of deprecated item 'this_crate::DeprecatedStruct': text\n             i: 0 //~ ERROR use of deprecated item 'this_crate::DeprecatedStruct::i': text"}, {"sha": "98316c62ef135a0bf5dc4c8f4b429b5c230f0bc3", "filename": "src/test/run-pass-fulldeps/proc-macro/attr-stmt-expr.rs", "status": "modified", "additions": 13, "deletions": 1, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fattr-stmt-expr.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -14,7 +14,8 @@\n #![feature(proc_macro, stmt_expr_attributes)]\n \n extern crate attr_stmt_expr;\n-use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr};\n+use attr_stmt_expr::{expect_let, expect_print_stmt, expect_expr, expect_print_expr,\n+                     no_output, noop};\n \n fn print_str(string: &'static str) {\n     // macros are handled a bit differently\n@@ -29,6 +30,17 @@ fn main() {\n     #[expect_print_stmt]\n     println!(\"{}\", string);\n \n+    let _: () = {\n+        #[no_output]\n+        \"Hello, world!\"\n+    };\n+\n+    let _: &'static str = #[noop] \"Hello, world!\";\n+\n+    let _: &'static str = {\n+        #[noop] \"Hello, world!\"\n+    };\n+\n     #[expect_expr]\n     print_str(\"string\")\n }"}, {"sha": "972368b7b532a59f825f9536334388ad535729bb", "filename": "src/test/run-pass-fulldeps/proc-macro/auxiliary/attr-stmt-expr.rs", "status": "modified", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass-fulldeps%2Fproc-macro%2Fauxiliary%2Fattr-stmt-expr.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -44,3 +44,18 @@ pub fn expect_print_expr(attr: TokenStream, item: TokenStream) -> TokenStream {\n     assert_eq!(item.to_string(), \"println!(\\\"{}\\\" , string)\");\n     item\n }\n+\n+#[proc_macro_attribute]\n+pub fn no_output(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert!(!item.to_string().is_empty());\n+    \"\".parse().unwrap()\n+\n+}\n+\n+#[proc_macro_attribute]\n+pub fn noop(attr: TokenStream, item: TokenStream) -> TokenStream {\n+    assert!(attr.to_string().is_empty());\n+    assert!(!item.to_string().is_empty());\n+    item\n+}"}, {"sha": "9cde446eb941e47c5f0fd2d4371f02be6684a533", "filename": "src/test/rustdoc/default-trait-method-link.rs", "status": "added", "additions": 25, "deletions": 0, "changes": 25, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fdefault-trait-method-link.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fdefault-trait-method-link.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdefault-trait-method-link.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,25 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// @has foo/trait.Foo.html '//a[@href=\"../foo/trait.Foo.html#tymethod.req\"]' 'req'\n+// @has foo/trait.Foo.html '//a[@href=\"../foo/trait.Foo.html#method.prov\"]' 'prov'\n+\n+/// Always make sure to implement [`req`], but you don't have to implement [`prov`].\n+///\n+/// [`req`]: Foo::req\n+/// [`prov`]: Foo::prov\n+pub trait Foo {\n+    /// Required\n+    fn req();\n+    /// Provided\n+    fn prov() {}\n+}"}, {"sha": "6feb98dad09c6511ff940a7f6d6fe21f6f359669", "filename": "src/test/rustdoc/deprecated-future.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fdeprecated-future.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fdeprecated-future.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fdeprecated-future.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,16 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![feature(deprecated)]\n+\n+// @has deprecated_future/struct.S.html '//*[@class=\"stab deprecated\"]' \\\n+//      'Deprecating in 99.99.99: effectively never'\n+#[deprecated(since = \"99.99.99\", note = \"effectively never\")]\n+pub struct S;"}, {"sha": "3ab138079a1f0ccb8fbab41d114d3d3b7c0ee509", "filename": "src/test/rustdoc/issue-32556.rs", "status": "added", "additions": 15, "deletions": 0, "changes": 15, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fissue-32556.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fissue-32556.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fissue-32556.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,15 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+/// Blah blah blah\n+/// ```ignore (testing rustdoc's handling of ignore)\n+/// bad_assert!();\n+/// ```\n+pub fn foo() {}"}, {"sha": "c5016bac7d394d708ae833fd45786de431d02512", "filename": "src/test/rustdoc/struct-field.rs", "status": "added", "additions": 33, "deletions": 0, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Frustdoc%2Fstruct-field.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fstruct-field.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,33 @@\n+// Copyright 2018 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+// ignore-tidy-linelength\n+\n+// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/struct.Foo.html#structfield.bar\"]' 'Foo::bar'\n+// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/union.Bar.html#structfield.foo\"]' 'Bar::foo'\n+// @has foo/index.html '//*[@class=\"docblock\"]/p/a[@href=\"../foo/enum.Uniooon.html#X.v\"]' 'Uniooon::X'\n+\n+//! Test with [Foo::bar], [Bar::foo], [Uniooon::X]\n+\n+pub struct Foo {\n+    pub bar: usize,\n+}\n+\n+pub union Bar {\n+    pub foo: u32,\n+}\n+\n+pub enum Uniooon {\n+    F,\n+    X,\n+    Y,\n+}"}, {"sha": "1525791c881123f1ff9a3e36e429f674862c1d44", "filename": "src/test/ui/nll/decl-macro-illegal-copy.rs", "status": "added", "additions": 39, "deletions": 0, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,39 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Regression test for #46314\n+\n+#![feature(nll)]\n+#![feature(decl_macro)]\n+\n+struct NonCopy(String);\n+\n+struct Wrapper {\n+    inner: NonCopy,\n+}\n+\n+macro inner_copy($wrapper:ident) {\n+    $wrapper.inner\n+}\n+\n+fn main() {\n+    let wrapper = Wrapper {\n+        inner: NonCopy(\"foo\".into()),\n+    };\n+    assert_two_non_copy(\n+        inner_copy!(wrapper),\n+        wrapper.inner,\n+        //~^ ERROR use of moved value: `wrapper.inner` [E0382]\n+    );\n+}\n+\n+fn assert_two_non_copy(a: NonCopy, b: NonCopy) {\n+    assert_eq!(a.0, b.0);\n+}"}, {"sha": "8bc25c23e017888e38134e6ebe6ef0df0df35c76", "filename": "src/test/ui/nll/decl-macro-illegal-copy.stderr", "status": "added", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fdecl-macro-illegal-copy.stderr?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,14 @@\n+error[E0382]: use of moved value: `wrapper.inner`\n+  --> $DIR/decl-macro-illegal-copy.rs:32:9\n+   |\n+LL |     $wrapper.inner\n+   |     -------------- value moved here\n+...\n+LL |         wrapper.inner,\n+   |         ^^^^^^^^^^^^^ value used here after move\n+   |\n+   = note: move occurs because `wrapper.inner` has type `NonCopy`, which does not implement the `Copy` trait\n+\n+error: aborting due to previous error\n+\n+For more information about this error, try `rustc --explain E0382`."}, {"sha": "91ac7e400426068f0c14cda64196e74f63cd0930", "filename": "src/test/ui/nll/issue-43058.rs", "status": "added", "additions": 38, "deletions": 0, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "raw_url": "https://github.com/rust-lang/rust/raw/74abffeabb63b17094d1958bf42d6fe1b24907d7/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fnll%2Fissue-43058.rs?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -0,0 +1,38 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// must-compile-successfully\n+\n+#![feature(nll)]\n+\n+use std::borrow::Cow;\n+\n+#[derive(Clone, Debug)]\n+struct S<'a> {\n+    name: Cow<'a, str>\n+}\n+\n+#[derive(Clone, Debug)]\n+struct T<'a> {\n+    s: Cow<'a, [S<'a>]>\n+}\n+\n+fn main() {\n+    let s1 = [S { name: Cow::Borrowed(\"Test1\") }, S { name: Cow::Borrowed(\"Test2\") }];\n+    let b1 = T { s: Cow::Borrowed(&s1) };\n+    let s2 = [S { name: Cow::Borrowed(\"Test3\") }, S { name: Cow::Borrowed(\"Test4\") }];\n+    let b2 = T { s: Cow::Borrowed(&s2) };\n+\n+    let mut v = Vec::new();\n+    v.push(b1);\n+    v.push(b2);\n+\n+    println!(\"{:?}\", v);\n+}"}, {"sha": "b70ab13b31628e91b05961d55c07abf20ad49de6", "filename": "src/tools/cargo", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcargo?ref=74abffeabb63b17094d1958bf42d6fe1b24907d7", "patch": "@@ -1 +1 @@\n-Subproject commit d63299b6eafae99bfe1fd5ddc75bc7cf67ed58f9\n+Subproject commit b70ab13b31628e91b05961d55c07abf20ad49de6"}]}