{"sha": "799ec79f18e627f8d14d3520f2e1abff265c1abe", "node_id": "MDY6Q29tbWl0NzI0NzEyOjc5OWVjNzlmMThlNjI3ZjhkMTRkMzUyMGYyZTFhYmZmMjY1YzFhYmU=", "commit": {"author": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-07-05T15:16:09Z"}, "committer": {"name": "mahdi-frms", "email": "mahdif1380@outlook.com", "date": "2021-07-05T15:19:21Z"}, "message": "make the logs line buffered", "tree": {"sha": "57a7a0c59f0b2d79e608ab7d91a253583bea0be6", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/57a7a0c59f0b2d79e608ab7d91a253583bea0be6"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/799ec79f18e627f8d14d3520f2e1abff265c1abe", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/799ec79f18e627f8d14d3520f2e1abff265c1abe", "html_url": "https://github.com/rust-lang/rust/commit/799ec79f18e627f8d14d3520f2e1abff265c1abe", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/799ec79f18e627f8d14d3520f2e1abff265c1abe/comments", "author": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "committer": {"login": "mahdifrmz", "id": 62165556, "node_id": "MDQ6VXNlcjYyMTY1NTU2", "avatar_url": "https://avatars.githubusercontent.com/u/62165556?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mahdifrmz", "html_url": "https://github.com/mahdifrmz", "followers_url": "https://api.github.com/users/mahdifrmz/followers", "following_url": "https://api.github.com/users/mahdifrmz/following{/other_user}", "gists_url": "https://api.github.com/users/mahdifrmz/gists{/gist_id}", "starred_url": "https://api.github.com/users/mahdifrmz/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mahdifrmz/subscriptions", "organizations_url": "https://api.github.com/users/mahdifrmz/orgs", "repos_url": "https://api.github.com/users/mahdifrmz/repos", "events_url": "https://api.github.com/users/mahdifrmz/events{/privacy}", "received_events_url": "https://api.github.com/users/mahdifrmz/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "8b8eac5bf9d0b8d9c0fa4499179cfff88de1f5e4", "url": "https://api.github.com/repos/rust-lang/rust/commits/8b8eac5bf9d0b8d9c0fa4499179cfff88de1f5e4", "html_url": "https://github.com/rust-lang/rust/commit/8b8eac5bf9d0b8d9c0fa4499179cfff88de1f5e4"}], "stats": {"total": 17, "additions": 8, "deletions": 9}, "files": [{"sha": "35b3a9d696c7ad12073008db4c8c3cd56610e04a", "filename": "crates/rust-analyzer/src/bin/logger.rs", "status": "modified", "additions": 8, "deletions": 9, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/799ec79f18e627f8d14d3520f2e1abff265c1abe/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "raw_url": "https://github.com/rust-lang/rust/raw/799ec79f18e627f8d14d3520f2e1abff265c1abe/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Frust-analyzer%2Fsrc%2Fbin%2Flogger.rs?ref=799ec79f18e627f8d14d3520f2e1abff265c1abe", "patch": "@@ -48,7 +48,7 @@ impl Log for Logger {\n             return;\n         }\n \n-        let should_flush = match &self.file {\n+        match &self.file {\n             Some(w) => {\n                 let _ = writeln!(\n                     w.lock(),\n@@ -57,22 +57,21 @@ impl Log for Logger {\n                     record.module_path().unwrap_or_default(),\n                     record.args(),\n                 );\n-                self.no_buffering\n+\n+                if self.no_buffering {\n+                    self.flush();\n+                }\n             }\n             None => {\n-                eprintln!(\n-                    \"[{} {}] {}\",\n+                let message = format!(\n+                    \"[{} {}] {}\\n\",\n                     record.level(),\n                     record.module_path().unwrap_or_default(),\n                     record.args(),\n                 );\n-                true // flush stderr unconditionally\n+                eprint!(\"{}\", message);\n             }\n         };\n-\n-        if should_flush {\n-            self.flush();\n-        }\n     }\n \n     fn flush(&self) {"}]}