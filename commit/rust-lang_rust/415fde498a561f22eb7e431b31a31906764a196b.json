{"sha": "415fde498a561f22eb7e431b31a31906764a196b", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQxNWZkZTQ5OGE1NjFmMjJlYjdlNDMxYjMxYTMxOTA2NzY0YTE5NmI=", "commit": {"author": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-28T09:58:45Z"}, "committer": {"name": "Michael Woerister", "email": "michaelwoerister@posteo.net", "date": "2016-07-29T08:55:31Z"}, "message": "intravisit: Fold functionality of IdVisitor into the regular Visitor.", "tree": {"sha": "4f6651d8e443511371a3a998c405435f1625c45b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/4f6651d8e443511371a3a998c405435f1625c45b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/415fde498a561f22eb7e431b31a31906764a196b", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/415fde498a561f22eb7e431b31a31906764a196b", "html_url": "https://github.com/rust-lang/rust/commit/415fde498a561f22eb7e431b31a31906764a196b", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/415fde498a561f22eb7e431b31a31906764a196b/comments", "author": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "committer": {"login": "michaelwoerister", "id": 1825894, "node_id": "MDQ6VXNlcjE4MjU4OTQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1825894?v=4", "gravatar_id": "", "url": "https://api.github.com/users/michaelwoerister", "html_url": "https://github.com/michaelwoerister", "followers_url": "https://api.github.com/users/michaelwoerister/followers", "following_url": "https://api.github.com/users/michaelwoerister/following{/other_user}", "gists_url": "https://api.github.com/users/michaelwoerister/gists{/gist_id}", "starred_url": "https://api.github.com/users/michaelwoerister/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/michaelwoerister/subscriptions", "organizations_url": "https://api.github.com/users/michaelwoerister/orgs", "repos_url": "https://api.github.com/users/michaelwoerister/repos", "events_url": "https://api.github.com/users/michaelwoerister/events{/privacy}", "received_events_url": "https://api.github.com/users/michaelwoerister/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d9a911d236cbecb47775276ba51a5f9111bdbc9c", "url": "https://api.github.com/repos/rust-lang/rust/commits/d9a911d236cbecb47775276ba51a5f9111bdbc9c", "html_url": "https://github.com/rust-lang/rust/commit/d9a911d236cbecb47775276ba51a5f9111bdbc9c"}], "stats": {"total": 352, "additions": 119, "deletions": 233}, "files": [{"sha": "a06fc21764de4c068287c65320ae8ff984ef00a4", "filename": "src/librustc/hir/intravisit.rs", "status": "modified", "additions": 67, "deletions": 188, "changes": 255, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fintravisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fintravisit.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -94,11 +94,14 @@ pub trait Visitor<'v> : Sized {\n \n     ///////////////////////////////////////////////////////////////////////////\n \n+    fn visit_id(&mut self, _node_id: NodeId) {\n+        // Nothing to do.\n+    }\n     fn visit_name(&mut self, _span: Span, _name: Name) {\n         // Nothing to do.\n     }\n-    fn visit_mod(&mut self, m: &'v Mod, _s: Span, _n: NodeId) {\n-        walk_mod(self, m)\n+    fn visit_mod(&mut self, m: &'v Mod, _s: Span, n: NodeId) {\n+        walk_mod(self, m, n)\n     }\n     fn visit_foreign_item(&mut self, i: &'v ForeignItem) {\n         walk_foreign_item(self, i)\n@@ -135,8 +138,8 @@ pub trait Visitor<'v> : Sized {\n     fn visit_where_predicate(&mut self, predicate: &'v WherePredicate) {\n         walk_where_predicate(self, predicate)\n     }\n-    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, _: NodeId) {\n-        walk_fn(self, fk, fd, b, s)\n+    fn visit_fn(&mut self, fk: FnKind<'v>, fd: &'v FnDecl, b: &'v Block, s: Span, id: NodeId) {\n+        walk_fn(self, fk, fd, b, s, id)\n     }\n     fn visit_trait_item(&mut self, ti: &'v TraitItem) {\n         walk_trait_item(self, ti)\n@@ -157,7 +160,7 @@ pub trait Visitor<'v> : Sized {\n                           s: &'v VariantData,\n                           _: Name,\n                           _: &'v Generics,\n-                          _: NodeId,\n+                          _parent_id: NodeId,\n                           _: Span) {\n         walk_struct_def(self, s)\n     }\n@@ -225,24 +228,28 @@ pub fn walk_crate<'v, V: Visitor<'v>>(visitor: &mut V, krate: &'v Crate) {\n }\n \n pub fn walk_macro_def<'v, V: Visitor<'v>>(visitor: &mut V, macro_def: &'v MacroDef) {\n+    visitor.visit_id(macro_def.id);\n     visitor.visit_name(macro_def.span, macro_def.name);\n     walk_opt_name(visitor, macro_def.span, macro_def.imported_from);\n     walk_list!(visitor, visit_attribute, &macro_def.attrs);\n }\n \n-pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod) {\n+pub fn walk_mod<'v, V: Visitor<'v>>(visitor: &mut V, module: &'v Mod, mod_node_id: NodeId) {\n+    visitor.visit_id(mod_node_id);\n     for &item_id in &module.item_ids {\n         visitor.visit_nested_item(item_id);\n     }\n }\n \n pub fn walk_local<'v, V: Visitor<'v>>(visitor: &mut V, local: &'v Local) {\n+    visitor.visit_id(local.id);\n     visitor.visit_pat(&local.pat);\n     walk_list!(visitor, visit_ty, &local.ty);\n     walk_list!(visitor, visit_expr, &local.init);\n }\n \n pub fn walk_lifetime<'v, V: Visitor<'v>>(visitor: &mut V, lifetime: &'v Lifetime) {\n+    visitor.visit_id(lifetime.id);\n     visitor.visit_name(lifetime.span, lifetime.name);\n }\n \n@@ -263,6 +270,7 @@ pub fn walk_poly_trait_ref<'v, V>(visitor: &mut V,\n pub fn walk_trait_ref<'v, V>(visitor: &mut V, trait_ref: &'v TraitRef)\n     where V: Visitor<'v>\n {\n+    visitor.visit_id(trait_ref.ref_id);\n     visitor.visit_path(&trait_ref.path, trait_ref.ref_id)\n }\n \n@@ -271,9 +279,11 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n     visitor.visit_name(item.span, item.name);\n     match item.node {\n         ItemExternCrate(opt_name) => {\n+            visitor.visit_id(item.id);\n             walk_opt_name(visitor, item.span, opt_name)\n         }\n         ItemUse(ref vp) => {\n+            visitor.visit_id(item.id);\n             match vp.node {\n                 ViewPathSimple(name, ref path) => {\n                     visitor.visit_name(vp.span, name);\n@@ -292,6 +302,7 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n         }\n         ItemStatic(ref typ, _, ref expr) |\n         ItemConst(ref typ, ref expr) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_ty(typ);\n             visitor.visit_expr(expr);\n         }\n@@ -309,33 +320,41 @@ pub fn walk_item<'v, V: Visitor<'v>>(visitor: &mut V, item: &'v Item) {\n                              item.id)\n         }\n         ItemMod(ref module) => {\n+            // visit_mod() takes care of visiting the Item's NodeId\n             visitor.visit_mod(module, item.span, item.id)\n         }\n         ItemForeignMod(ref foreign_module) => {\n+            visitor.visit_id(item.id);\n             walk_list!(visitor, visit_foreign_item, &foreign_module.items);\n         }\n         ItemTy(ref typ, ref type_parameters) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_ty(typ);\n             visitor.visit_generics(type_parameters)\n         }\n         ItemEnum(ref enum_definition, ref type_parameters) => {\n             visitor.visit_generics(type_parameters);\n+            // visit_enum_def() takes care of visiting the Item's NodeId\n             visitor.visit_enum_def(enum_definition, type_parameters, item.id, item.span)\n         }\n         ItemDefaultImpl(_, ref trait_ref) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_trait_ref(trait_ref)\n         }\n         ItemImpl(_, _, ref type_parameters, ref opt_trait_reference, ref typ, ref impl_items) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_generics(type_parameters);\n             walk_list!(visitor, visit_trait_ref, opt_trait_reference);\n             visitor.visit_ty(typ);\n             walk_list!(visitor, visit_impl_item, impl_items);\n         }\n         ItemStruct(ref struct_definition, ref generics) => {\n             visitor.visit_generics(generics);\n+            visitor.visit_id(item.id);\n             visitor.visit_variant_data(struct_definition, item.name, generics, item.id, item.span);\n         }\n         ItemTrait(_, ref generics, ref bounds, ref methods) => {\n+            visitor.visit_id(item.id);\n             visitor.visit_generics(generics);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_trait_item, methods);\n@@ -348,6 +367,7 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n                                          enum_definition: &'v EnumDef,\n                                          generics: &'v Generics,\n                                          item_id: NodeId) {\n+    visitor.visit_id(item_id);\n     walk_list!(visitor,\n                visit_variant,\n                &enum_definition.variants,\n@@ -358,18 +378,20 @@ pub fn walk_enum_def<'v, V: Visitor<'v>>(visitor: &mut V,\n pub fn walk_variant<'v, V: Visitor<'v>>(visitor: &mut V,\n                                         variant: &'v Variant,\n                                         generics: &'v Generics,\n-                                        item_id: NodeId) {\n+                                        parent_item_id: NodeId) {\n     visitor.visit_name(variant.span, variant.node.name);\n     visitor.visit_variant_data(&variant.node.data,\n                                variant.node.name,\n                                generics,\n-                               item_id,\n+                               parent_item_id,\n                                variant.span);\n     walk_list!(visitor, visit_expr, &variant.node.disr_expr);\n     walk_list!(visitor, visit_attribute, &variant.node.attrs);\n }\n \n pub fn walk_ty<'v, V: Visitor<'v>>(visitor: &mut V, typ: &'v Ty) {\n+    visitor.visit_id(typ.id);\n+\n     match typ.node {\n         TyVec(ref ty) => {\n             visitor.visit_ty(ty)\n@@ -421,6 +443,7 @@ pub fn walk_path<'v, V: Visitor<'v>>(visitor: &mut V, path: &'v Path) {\n pub fn walk_path_list_item<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                _prefix: &'v Path,\n                                                item: &'v PathListItem) {\n+    visitor.visit_id(item.node.id());\n     walk_opt_name(visitor, item.span, item.node.name());\n     walk_opt_name(visitor, item.span, item.node.rename());\n }\n@@ -450,11 +473,13 @@ pub fn walk_path_parameters<'v, V: Visitor<'v>>(visitor: &mut V,\n \n pub fn walk_assoc_type_binding<'v, V: Visitor<'v>>(visitor: &mut V,\n                                                    type_binding: &'v TypeBinding) {\n+    visitor.visit_id(type_binding.id);\n     visitor.visit_name(type_binding.span, type_binding.name);\n     visitor.visit_ty(&type_binding.ty);\n }\n \n pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n+    visitor.visit_id(pattern.id);\n     match pattern.node {\n         PatKind::TupleStruct(ref path, ref children, _) => {\n             visitor.visit_path(path, pattern.id);\n@@ -499,6 +524,7 @@ pub fn walk_pat<'v, V: Visitor<'v>>(visitor: &mut V, pattern: &'v Pat) {\n }\n \n pub fn walk_foreign_item<'v, V: Visitor<'v>>(visitor: &mut V, foreign_item: &'v ForeignItem) {\n+    visitor.visit_id(foreign_item.id);\n     visitor.visit_vis(&foreign_item.vis);\n     visitor.visit_name(foreign_item.span, foreign_item.name);\n \n@@ -526,11 +552,13 @@ pub fn walk_ty_param_bound<'v, V: Visitor<'v>>(visitor: &mut V, bound: &'v TyPar\n \n pub fn walk_generics<'v, V: Visitor<'v>>(visitor: &mut V, generics: &'v Generics) {\n     for param in &generics.ty_params {\n+        visitor.visit_id(param.id);\n         visitor.visit_name(param.span, param.name);\n         walk_list!(visitor, visit_ty_param_bound, &param.bounds);\n         walk_list!(visitor, visit_ty, &param.default);\n     }\n     walk_list!(visitor, visit_lifetime_def, &generics.lifetimes);\n+    visitor.visit_id(generics.where_clause.id);\n     walk_list!(visitor, visit_where_predicate, &generics.where_clause.predicates);\n }\n \n@@ -557,6 +585,7 @@ pub fn walk_where_predicate<'v, V: Visitor<'v>>(\n                                                       ref path,\n                                                       ref ty,\n                                                       ..}) => {\n+            visitor.visit_id(id);\n             visitor.visit_path(path, id);\n             visitor.visit_ty(ty);\n         }\n@@ -571,6 +600,7 @@ pub fn walk_fn_ret_ty<'v, V: Visitor<'v>>(visitor: &mut V, ret_ty: &'v FunctionR\n \n pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n     for argument in &function_declaration.inputs {\n+        visitor.visit_id(argument.id);\n         visitor.visit_pat(&argument.pat);\n         visitor.visit_ty(&argument.ty)\n     }\n@@ -579,6 +609,7 @@ pub fn walk_fn_decl<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &\n \n pub fn walk_fn_decl_nopat<'v, V: Visitor<'v>>(visitor: &mut V, function_declaration: &'v FnDecl) {\n     for argument in &function_declaration.inputs {\n+        visitor.visit_id(argument.id);\n         visitor.visit_ty(&argument.ty)\n     }\n     walk_fn_ret_ty(visitor, &function_declaration.output)\n@@ -600,7 +631,9 @@ pub fn walk_fn<'v, V: Visitor<'v>>(visitor: &mut V,\n                                    function_kind: FnKind<'v>,\n                                    function_declaration: &'v FnDecl,\n                                    function_body: &'v Block,\n-                                   _span: Span) {\n+                                   _span: Span,\n+                                   id: NodeId) {\n+    visitor.visit_id(id);\n     walk_fn_decl(visitor, function_declaration);\n     walk_fn_kind(visitor, function_kind);\n     visitor.visit_block(function_body)\n@@ -611,10 +644,12 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n     walk_list!(visitor, visit_attribute, &trait_item.attrs);\n     match trait_item.node {\n         ConstTraitItem(ref ty, ref default) => {\n+            visitor.visit_id(trait_item.id);\n             visitor.visit_ty(ty);\n             walk_list!(visitor, visit_expr, default);\n         }\n         MethodTraitItem(ref sig, None) => {\n+            visitor.visit_id(trait_item.id);\n             visitor.visit_generics(&sig.generics);\n             walk_fn_decl(visitor, &sig.decl);\n         }\n@@ -629,6 +664,7 @@ pub fn walk_trait_item<'v, V: Visitor<'v>>(visitor: &mut V, trait_item: &'v Trai\n                              trait_item.id);\n         }\n         TypeTraitItem(ref bounds, ref default) => {\n+            visitor.visit_id(trait_item.id);\n             walk_list!(visitor, visit_ty_param_bound, bounds);\n             walk_list!(visitor, visit_ty, default);\n         }\n@@ -641,6 +677,7 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n     walk_list!(visitor, visit_attribute, &impl_item.attrs);\n     match impl_item.node {\n         ImplItemKind::Const(ref ty, ref expr) => {\n+            visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n             visitor.visit_expr(expr);\n         }\n@@ -655,31 +692,40 @@ pub fn walk_impl_item<'v, V: Visitor<'v>>(visitor: &mut V, impl_item: &'v ImplIt\n                              impl_item.id);\n         }\n         ImplItemKind::Type(ref ty) => {\n+            visitor.visit_id(impl_item.id);\n             visitor.visit_ty(ty);\n         }\n     }\n }\n \n pub fn walk_struct_def<'v, V: Visitor<'v>>(visitor: &mut V, struct_definition: &'v VariantData) {\n+    visitor.visit_id(struct_definition.id());\n     walk_list!(visitor, visit_struct_field, struct_definition.fields());\n }\n \n pub fn walk_struct_field<'v, V: Visitor<'v>>(visitor: &mut V, struct_field: &'v StructField) {\n+    visitor.visit_id(struct_field.id);\n     visitor.visit_vis(&struct_field.vis);\n     visitor.visit_name(struct_field.span, struct_field.name);\n     visitor.visit_ty(&struct_field.ty);\n     walk_list!(visitor, visit_attribute, &struct_field.attrs);\n }\n \n pub fn walk_block<'v, V: Visitor<'v>>(visitor: &mut V, block: &'v Block) {\n+    visitor.visit_id(block.id);\n     walk_list!(visitor, visit_stmt, &block.stmts);\n     walk_list!(visitor, visit_expr, &block.expr);\n }\n \n pub fn walk_stmt<'v, V: Visitor<'v>>(visitor: &mut V, statement: &'v Stmt) {\n     match statement.node {\n-        StmtDecl(ref declaration, _) => visitor.visit_decl(declaration),\n-        StmtExpr(ref expression, _) | StmtSemi(ref expression, _) => {\n+        StmtDecl(ref declaration, id) => {\n+            visitor.visit_id(id);\n+            visitor.visit_decl(declaration)\n+        }\n+        StmtExpr(ref expression, id) |\n+        StmtSemi(ref expression, id) => {\n+            visitor.visit_id(id);\n             visitor.visit_expr(expression)\n         }\n     }\n@@ -693,6 +739,7 @@ pub fn walk_decl<'v, V: Visitor<'v>>(visitor: &mut V, declaration: &'v Decl) {\n }\n \n pub fn walk_expr<'v, V: Visitor<'v>>(visitor: &mut V, expression: &'v Expr) {\n+    visitor.visit_id(expression.id);\n     match expression.node {\n         ExprBox(ref subexpression) => {\n             visitor.visit_expr(subexpression)\n@@ -815,6 +862,7 @@ pub fn walk_arm<'v, V: Visitor<'v>>(visitor: &mut V, arm: &'v Arm) {\n \n pub fn walk_vis<'v, V: Visitor<'v>>(visitor: &mut V, vis: &'v Visibility) {\n     if let Visibility::Restricted { ref path, id } = *vis {\n+        visitor.visit_id(id);\n         visitor.visit_path(path, id)\n     }\n }\n@@ -837,15 +885,16 @@ impl IdRange {\n         self.min >= self.max\n     }\n \n+    pub fn contains(&self, id: NodeId) -> bool {\n+        id >= self.min && id < self.max\n+    }\n+\n     pub fn add(&mut self, id: NodeId) {\n         self.min = cmp::min(self.min, id);\n         self.max = cmp::max(self.max, id + 1);\n     }\n }\n \n-pub trait IdVisitingOperation {\n-    fn visit_id(&mut self, node_id: NodeId);\n-}\n \n pub struct IdRangeComputingVisitor {\n     pub result: IdRange,\n@@ -861,190 +910,20 @@ impl IdRangeComputingVisitor {\n     }\n }\n \n-impl IdVisitingOperation for IdRangeComputingVisitor {\n+impl<'v> Visitor<'v> for IdRangeComputingVisitor {\n     fn visit_id(&mut self, id: NodeId) {\n         self.result.add(id);\n     }\n }\n \n-pub struct IdVisitor<'a, O: 'a> {\n-    operation: &'a mut O,\n-\n-    // In general, the id visitor visits the contents of an item, but\n-    // not including nested trait/impl items, nor other nested items.\n-    // The base visitor itself always skips nested items, but not\n-    // trait/impl items. This means in particular that if you start by\n-    // visiting a trait or an impl, you should not visit the\n-    // trait/impl items respectively.  This is handled by setting\n-    // `skip_members` to true when `visit_item` is on the stack. This\n-    // way, if the user begins by calling `visit_trait_item`, we will\n-    // visit the trait item, but if they begin with `visit_item`, we\n-    // won't visit the (nested) trait items.\n-    skip_members: bool,\n-}\n-\n-impl<'a, O: IdVisitingOperation> IdVisitor<'a, O> {\n-    pub fn new(operation: &'a mut O) -> IdVisitor<'a, O> {\n-        IdVisitor { operation: operation, skip_members: false }\n-    }\n-\n-    fn visit_generics_helper(&mut self, generics: &Generics) {\n-        for type_parameter in generics.ty_params.iter() {\n-            self.operation.visit_id(type_parameter.id)\n-        }\n-        for lifetime in &generics.lifetimes {\n-            self.operation.visit_id(lifetime.lifetime.id)\n-        }\n-    }\n-}\n-\n-impl<'a, 'v, O: IdVisitingOperation> Visitor<'v> for IdVisitor<'a, O> {\n-    fn visit_mod(&mut self, module: &Mod, _: Span, node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-        walk_mod(self, module)\n-    }\n-\n-    fn visit_foreign_item(&mut self, foreign_item: &ForeignItem) {\n-        self.operation.visit_id(foreign_item.id);\n-        walk_foreign_item(self, foreign_item)\n-    }\n-\n-    fn visit_item(&mut self, item: &Item) {\n-        assert!(!self.skip_members);\n-        self.skip_members = true;\n-\n-        self.operation.visit_id(item.id);\n-        match item.node {\n-            ItemUse(ref view_path) => {\n-                match view_path.node {\n-                    ViewPathSimple(_, _) |\n-                    ViewPathGlob(_) => {}\n-                    ViewPathList(_, ref paths) => {\n-                        for path in paths {\n-                            self.operation.visit_id(path.node.id())\n-                        }\n-                    }\n-                }\n-            }\n-            _ => {}\n-        }\n-        walk_item(self, item);\n-\n-        self.skip_members = false;\n-    }\n-\n-    fn visit_local(&mut self, local: &Local) {\n-        self.operation.visit_id(local.id);\n-        walk_local(self, local)\n-    }\n-\n-    fn visit_block(&mut self, block: &Block) {\n-        self.operation.visit_id(block.id);\n-        walk_block(self, block)\n-    }\n-\n-    fn visit_stmt(&mut self, statement: &Stmt) {\n-        self.operation.visit_id(statement.node.id());\n-        walk_stmt(self, statement)\n-    }\n-\n-    fn visit_pat(&mut self, pattern: &Pat) {\n-        self.operation.visit_id(pattern.id);\n-        walk_pat(self, pattern)\n-    }\n-\n-    fn visit_expr(&mut self, expression: &Expr) {\n-        self.operation.visit_id(expression.id);\n-        walk_expr(self, expression)\n-    }\n-\n-    fn visit_ty(&mut self, typ: &Ty) {\n-        self.operation.visit_id(typ.id);\n-        walk_ty(self, typ)\n-    }\n-\n-    fn visit_generics(&mut self, generics: &Generics) {\n-        self.visit_generics_helper(generics);\n-        walk_generics(self, generics)\n-    }\n-\n-    fn visit_fn(&mut self,\n-                function_kind: FnKind<'v>,\n-                function_declaration: &'v FnDecl,\n-                block: &'v Block,\n-                span: Span,\n-                node_id: NodeId) {\n-        self.operation.visit_id(node_id);\n-\n-        match function_kind {\n-            FnKind::ItemFn(_, generics, _, _, _, _, _) => {\n-                self.visit_generics_helper(generics)\n-            }\n-            FnKind::Method(_, sig, _, _) => {\n-                self.visit_generics_helper(&sig.generics)\n-            }\n-            FnKind::Closure(_) => {}\n-        }\n-\n-        for argument in &function_declaration.inputs {\n-            self.operation.visit_id(argument.id)\n-        }\n-\n-        walk_fn(self, function_kind, function_declaration, block, span);\n-    }\n-\n-    fn visit_struct_field(&mut self, struct_field: &StructField) {\n-        self.operation.visit_id(struct_field.id);\n-        walk_struct_field(self, struct_field)\n-    }\n-\n-    fn visit_variant_data(&mut self,\n-                          struct_def: &VariantData,\n-                          _: Name,\n-                          _: &Generics,\n-                          _: NodeId,\n-                          _: Span) {\n-        self.operation.visit_id(struct_def.id());\n-        walk_struct_def(self, struct_def);\n-    }\n-\n-    fn visit_trait_item(&mut self, ti: &TraitItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ti.id);\n-            walk_trait_item(self, ti);\n-        }\n-    }\n-\n-    fn visit_impl_item(&mut self, ii: &ImplItem) {\n-        if !self.skip_members {\n-            self.operation.visit_id(ii.id);\n-            walk_impl_item(self, ii);\n-        }\n-    }\n-\n-    fn visit_lifetime(&mut self, lifetime: &Lifetime) {\n-        self.operation.visit_id(lifetime.id);\n-    }\n-\n-    fn visit_lifetime_def(&mut self, def: &LifetimeDef) {\n-        self.visit_lifetime(&def.lifetime);\n-    }\n-\n-    fn visit_trait_ref(&mut self, trait_ref: &TraitRef) {\n-        self.operation.visit_id(trait_ref.ref_id);\n-        walk_trait_ref(self, trait_ref);\n-    }\n-}\n-\n /// Computes the id range for a single fn body, ignoring nested items.\n pub fn compute_id_range_for_fn_body(fk: FnKind,\n                                     decl: &FnDecl,\n                                     body: &Block,\n                                     sp: Span,\n                                     id: NodeId)\n                                     -> IdRange {\n-    let mut visitor = IdRangeComputingVisitor { result: IdRange::max() };\n-    let mut id_visitor = IdVisitor::new(&mut visitor);\n-    id_visitor.visit_fn(fk, decl, body, sp, id);\n-    id_visitor.operation.result\n+    let mut visitor = IdRangeComputingVisitor::new();\n+    visitor.visit_fn(fk, decl, body, sp, id);\n+    visitor.result()\n }"}, {"sha": "b3f222b22e8915314c1b1d7883b00a22aa8ac935", "filename": "src/librustc/hir/map/collector.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmap%2Fcollector.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -197,7 +197,7 @@ impl<'ast> Visitor<'ast> for NodeCollector<'ast> {\n     fn visit_fn(&mut self, fk: intravisit::FnKind<'ast>, fd: &'ast FnDecl,\n                 b: &'ast Block, s: Span, id: NodeId) {\n         assert_eq!(self.parent_node, id);\n-        intravisit::walk_fn(self, fk, fd, b, s);\n+        intravisit::walk_fn(self, fk, fd, b, s, id);\n     }\n \n     fn visit_block(&mut self, block: &'ast Block) {"}, {"sha": "20bf4f7d3edbb68dc88517338e2be124937d8642", "filename": "src/librustc/hir/mod.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fhir%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fmod.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -1362,9 +1362,9 @@ pub enum ViewPath_ {\n /// TraitRef's appear in impls.\n ///\n /// resolve maps each TraitRef's ref_id to its defining trait; that's all\n-/// that the ref_id is for. The impl_id maps to the \"self type\" of this impl.\n-/// If this impl is an ItemImpl, the impl_id is redundant (it could be the\n-/// same as the impl's node id).\n+/// that the ref_id is for. Note that ref_id's value is not the NodeId of the\n+/// trait being referred to but just a unique NodeId that serves as a key\n+/// within the DefMap.\n #[derive(Clone, PartialEq, Eq, RustcEncodable, RustcDecodable, Hash, Debug)]\n pub struct TraitRef {\n     pub path: Path,"}, {"sha": "a55957c4d193e594d8f10ba9afe7c74e95ab9fa1", "filename": "src/librustc/lint/context.rs", "status": "modified", "additions": 25, "deletions": 11, "changes": 36, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Flint%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Flint%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Flint%2Fcontext.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -45,7 +45,6 @@ use syntax_pos::Span;\n use errors::DiagnosticBuilder;\n use hir;\n use hir::intravisit as hir_visit;\n-use hir::intravisit::{IdVisitor, IdVisitingOperation};\n use syntax::visit as ast_visit;\n \n /// Information about the registered lints.\n@@ -663,9 +662,11 @@ impl<'a, 'tcx> LateContext<'a, 'tcx> {\n     }\n \n     fn visit_ids<F>(&mut self, f: F)\n-        where F: FnOnce(&mut IdVisitor<LateContext>)\n+        where F: FnOnce(&mut IdVisitor)\n     {\n-        let mut v = IdVisitor::new(self);\n+        let mut v = IdVisitor {\n+            cx: self\n+        };\n         f(&mut v);\n     }\n }\n@@ -779,7 +780,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_fn(&mut self, fk: hir_visit::FnKind<'v>, decl: &'v hir::FnDecl,\n                 body: &'v hir::Block, span: Span, id: ast::NodeId) {\n         run_lints!(self, check_fn, late_passes, fk, decl, body, span, id);\n-        hir_visit::walk_fn(self, fk, decl, body, span);\n+        hir_visit::walk_fn(self, fk, decl, body, span, id);\n         run_lints!(self, check_fn_post, late_passes, fk, decl, body, span, id);\n     }\n \n@@ -820,7 +821,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n \n     fn visit_mod(&mut self, m: &hir::Mod, s: Span, n: ast::NodeId) {\n         run_lints!(self, check_mod, late_passes, m, s, n);\n-        hir_visit::walk_mod(self, m);\n+        hir_visit::walk_mod(self, m, n);\n         run_lints!(self, check_mod_post, late_passes, m, s, n);\n     }\n \n@@ -859,7 +860,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_trait_item(&mut self, trait_item: &hir::TraitItem) {\n         self.with_lint_attrs(&trait_item.attrs, |cx| {\n             run_lints!(cx, check_trait_item, late_passes, trait_item);\n-            cx.visit_ids(|v| v.visit_trait_item(trait_item));\n+            cx.visit_ids(|v| hir_visit::walk_trait_item(v, trait_item));\n             hir_visit::walk_trait_item(cx, trait_item);\n             run_lints!(cx, check_trait_item_post, late_passes, trait_item);\n         });\n@@ -868,7 +869,7 @@ impl<'a, 'tcx, 'v> hir_visit::Visitor<'v> for LateContext<'a, 'tcx> {\n     fn visit_impl_item(&mut self, impl_item: &hir::ImplItem) {\n         self.with_lint_attrs(&impl_item.attrs, |cx| {\n             run_lints!(cx, check_impl_item, late_passes, impl_item);\n-            cx.visit_ids(|v| v.visit_impl_item(impl_item));\n+            cx.visit_ids(|v| hir_visit::walk_impl_item(v, impl_item));\n             hir_visit::walk_impl_item(cx, impl_item);\n             run_lints!(cx, check_impl_item_post, late_passes, impl_item);\n         });\n@@ -1046,16 +1047,30 @@ impl<'a> ast_visit::Visitor for EarlyContext<'a> {\n     }\n }\n \n+struct IdVisitor<'a, 'b: 'a, 'tcx: 'a+'b> {\n+    cx: &'a mut LateContext<'b, 'tcx>\n+}\n+\n // Output any lints that were previously added to the session.\n-impl<'a, 'tcx> IdVisitingOperation for LateContext<'a, 'tcx> {\n+impl<'a, 'b, 'tcx, 'v> hir_visit::Visitor<'v> for IdVisitor<'a, 'b, 'tcx> {\n+\n     fn visit_id(&mut self, id: ast::NodeId) {\n-        if let Some(lints) = self.sess().lints.borrow_mut().remove(&id) {\n+        if let Some(lints) = self.cx.sess().lints.borrow_mut().remove(&id) {\n             debug!(\"LateContext::visit_id: id={:?} lints={:?}\", id, lints);\n             for (lint_id, span, msg) in lints {\n-                self.span_lint(lint_id.lint, span, &msg[..])\n+                self.cx.span_lint(lint_id.lint, span, &msg[..])\n             }\n         }\n     }\n+\n+    fn visit_trait_item(&mut self, _ti: &hir::TraitItem) {\n+        // Do not recurse into trait or impl items automatically. These are\n+        // processed separately by calling hir_visit::walk_trait_item()\n+    }\n+\n+    fn visit_impl_item(&mut self, _ii: &hir::ImplItem) {\n+        // See visit_trait_item()\n+    }\n }\n \n enum CheckLintNameResult {\n@@ -1172,7 +1187,6 @@ pub fn check_crate<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n \n     // Visit the whole crate.\n     cx.with_lint_attrs(&krate.attrs, |cx| {\n-        cx.visit_id(ast::CRATE_NODE_ID);\n         cx.visit_ids(|v| {\n             hir_visit::walk_crate(v, krate);\n         });"}, {"sha": "484aacfd9ecc01f22747d3db740c4821fc678556", "filename": "src/librustc/middle/cstore.rs", "status": "modified", "additions": 1, "deletions": 6, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Fcstore.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fcstore.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -44,7 +44,7 @@ use syntax::parse::token::InternedString;\n use syntax_pos::Span;\n use rustc_back::target::Target;\n use hir;\n-use hir::intravisit::{IdVisitor, IdVisitingOperation, Visitor};\n+use hir::intravisit::Visitor;\n \n pub use self::DefLike::{DlDef, DlField, DlImpl};\n pub use self::NativeLibraryKind::{NativeStatic, NativeFramework, NativeUnknown};\n@@ -292,11 +292,6 @@ impl InlinedItem {\n             InlinedItem::ImplItem(_, ref ii) => visitor.visit_impl_item(ii),\n         }\n     }\n-\n-    pub fn visit_ids<O: IdVisitingOperation>(&self, operation: &mut O) {\n-        let mut id_visitor = IdVisitor::new(operation);\n-        self.visit(&mut id_visitor);\n-    }\n }\n \n // FIXME: find a better place for this?"}, {"sha": "446767ecbcaba1e1cb1daf08da4c0602b2826fff", "filename": "src/librustc/middle/effect.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Feffect.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Feffect.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -79,7 +79,7 @@ impl<'a, 'tcx> EffectCheckVisitor<'a, 'tcx> {\n \n impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n     fn visit_fn(&mut self, fn_kind: FnKind<'v>, fn_decl: &'v hir::FnDecl,\n-                block: &'v hir::Block, span: Span, _: ast::NodeId) {\n+                block: &'v hir::Block, span: Span, id: ast::NodeId) {\n \n         let (is_item_fn, is_unsafe_fn) = match fn_kind {\n             FnKind::ItemFn(_, _, unsafety, _, _, _, _) =>\n@@ -96,7 +96,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EffectCheckVisitor<'a, 'tcx> {\n             self.unsafe_context = UnsafeContext::new(SafeContext)\n         }\n \n-        intravisit::walk_fn(self, fn_kind, fn_decl, block, span);\n+        intravisit::walk_fn(self, fn_kind, fn_decl, block, span, id);\n \n         self.unsafe_context = old_unsafe_context\n     }"}, {"sha": "1222b5f42a19f6aeca5de5d471cadc434a05f1a9", "filename": "src/librustc/middle/liveness.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc%2Fmiddle%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmiddle%2Fliveness.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -390,7 +390,7 @@ fn visit_fn(ir: &mut IrMaps,\n \n     // gather up the various local variables, significant expressions,\n     // and so forth:\n-    intravisit::walk_fn(&mut fn_maps, fk, decl, body, sp);\n+    intravisit::walk_fn(&mut fn_maps, fk, decl, body, sp, id);\n \n     // Special nodes and variables:\n     // - exit_ln represents the end of the fn, either by return or panic"}, {"sha": "1fe47cd4853876ae544d568f32e65ac0481ffab2", "filename": "src/librustc_borrowck/borrowck/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_borrowck%2Fborrowck%2Fmod.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -197,7 +197,7 @@ fn borrowck_fn(this: &mut BorrowckCtxt,\n                              decl,\n                              body);\n \n-    intravisit::walk_fn(this, fk, decl, body, sp);\n+    intravisit::walk_fn(this, fk, decl, body, sp, id);\n }\n \n fn build_borrowck_dataflow_data<'a, 'tcx>(this: &mut BorrowckCtxt<'a, 'tcx>,"}, {"sha": "d3952de2fbe30eb1088c6cbaf1df0515d5264419", "filename": "src/librustc_const_eval/check_match.rs", "status": "modified", "additions": 4, "deletions": 6, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_const_eval%2Fcheck_match.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_const_eval%2Fcheck_match.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -34,7 +34,7 @@ use std::iter::{FromIterator, IntoIterator, repeat};\n \n use rustc::hir;\n use rustc::hir::{Pat, PatKind};\n-use rustc::hir::intravisit::{self, IdVisitor, IdVisitingOperation, Visitor, FnKind};\n+use rustc::hir::intravisit::{self, Visitor, FnKind};\n use rustc_back::slice;\n \n use syntax::ast::{self, DUMMY_NODE_ID, NodeId};\n@@ -474,7 +474,7 @@ struct RenamingRecorder<'map> {\n     renaming_map: &'map mut FnvHashMap<(NodeId, Span), NodeId>\n }\n \n-impl<'map> IdVisitingOperation for RenamingRecorder<'map> {\n+impl<'v, 'map> Visitor<'v> for RenamingRecorder<'map> {\n     fn visit_id(&mut self, node_id: NodeId) {\n         let key = (node_id, self.origin_span);\n         self.renaming_map.insert(key, self.substituted_node_id);\n@@ -529,9 +529,7 @@ impl<'a, 'tcx> Folder for StaticInliner<'a, 'tcx> {\n                 renaming_map: renaming_map,\n             };\n \n-            let mut id_visitor = IdVisitor::new(&mut renaming_recorder);\n-\n-            id_visitor.visit_expr(const_expr);\n+            renaming_recorder.visit_expr(const_expr);\n         }\n     }\n }\n@@ -1049,7 +1047,7 @@ fn check_fn(cx: &mut MatchCheckCtxt,\n         _ => cx.param_env = ParameterEnvironment::for_item(cx.tcx, fn_id),\n     }\n \n-    intravisit::walk_fn(cx, kind, decl, body, sp);\n+    intravisit::walk_fn(cx, kind, decl, body, sp, fn_id);\n \n     for input in &decl.inputs {\n         check_irrefutable(cx, &input.pat, true);"}, {"sha": "f9fa5154e20f3d25cbcfc4ff55aa353df9162195", "filename": "src/librustc_incremental/calculate_svh.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_incremental%2Fcalculate_svh.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_incremental%2Fcalculate_svh.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -384,9 +384,9 @@ mod svh_visitor {\n             SawItem.hash(self.st); visit::walk_item(self, i)\n         }\n \n-        fn visit_mod(&mut self, m: &'a Mod, _s: Span, _n: NodeId) {\n+        fn visit_mod(&mut self, m: &'a Mod, _s: Span, n: NodeId) {\n             debug!(\"visit_mod: st={:?}\", self.st);\n-            SawMod.hash(self.st); visit::walk_mod(self, m)\n+            SawMod.hash(self.st); visit::walk_mod(self, m, n)\n         }\n \n         fn visit_decl(&mut self, d: &'a Decl) {\n@@ -405,9 +405,9 @@ mod svh_visitor {\n         }\n \n         fn visit_fn(&mut self, fk: FnKind<'a>, fd: &'a FnDecl,\n-                    b: &'a Block, s: Span, _: NodeId) {\n+                    b: &'a Block, s: Span, n: NodeId) {\n             debug!(\"visit_fn: st={:?}\", self.st);\n-            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s)\n+            SawFn.hash(self.st); visit::walk_fn(self, fk, fd, b, s, n)\n         }\n \n         fn visit_trait_item(&mut self, ti: &'a TraitItem) {"}, {"sha": "454c805ab577e233ea8659a112bbd572b3cdddd8", "filename": "src/librustc_metadata/astencode.rs", "status": "modified", "additions": 5, "deletions": 5, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_metadata%2Fastencode.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_metadata%2Fastencode.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_metadata%2Fastencode.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -18,7 +18,7 @@ use rustc::session::Session;\n use rustc::hir;\n use rustc::hir::fold;\n use rustc::hir::fold::Folder;\n-use rustc::hir::intravisit::{IdRange, IdRangeComputingVisitor, IdVisitingOperation};\n+use rustc::hir::intravisit::{Visitor, IdRangeComputingVisitor, IdRange};\n \n use common as c;\n use cstore;\n@@ -693,7 +693,7 @@ struct SideTableEncodingIdVisitor<'a, 'b:'a, 'c:'a, 'tcx:'c> {\n     rbml_w: &'a mut Encoder<'b>,\n }\n \n-impl<'a, 'b, 'c, 'tcx> IdVisitingOperation for\n+impl<'a, 'b, 'c, 'tcx, 'v> Visitor<'v> for\n         SideTableEncodingIdVisitor<'a, 'b, 'c, 'tcx> {\n     fn visit_id(&mut self, id: ast::NodeId) {\n         encode_side_tables_for_id(self.ecx, self.rbml_w, id)\n@@ -704,7 +704,7 @@ fn encode_side_tables_for_ii(ecx: &e::EncodeContext,\n                              rbml_w: &mut Encoder,\n                              ii: &InlinedItem) {\n     rbml_w.start_tag(c::tag_table as usize);\n-    ii.visit_ids(&mut SideTableEncodingIdVisitor {\n+    ii.visit(&mut SideTableEncodingIdVisitor {\n         ecx: ecx,\n         rbml_w: rbml_w\n     });\n@@ -1242,9 +1242,9 @@ fn copy_item_types(dcx: &DecodeContext, ii: &InlinedItem, orig_did: DefId) {\n     }\n }\n \n-fn inlined_item_id_range(v: &InlinedItem) -> IdRange {\n+fn inlined_item_id_range(ii: &InlinedItem) -> IdRange {\n     let mut visitor = IdRangeComputingVisitor::new();\n-    v.visit_ids(&mut visitor);\n+    ii.visit(&mut visitor);\n     visitor.result()\n }\n "}, {"sha": "11d6b0779275ee40f6f6a56ae6728fdb9d0c687f", "filename": "src/librustc_mir/mir_map.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_mir%2Fmir_map.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_mir%2Fmir_map.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fmir_map.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -250,7 +250,7 @@ impl<'a, 'tcx> Visitor<'tcx> for BuildMir<'a, 'tcx> {\n             build::construct_fn(cx, id, arguments, fn_sig.output, body)\n         });\n \n-        intravisit::walk_fn(self, fk, decl, body, span);\n+        intravisit::walk_fn(self, fk, decl, body, span, id);\n     }\n }\n "}, {"sha": "1030a4b0116de5a07572ffa53fa974d909f4b6b7", "filename": "src/librustc_passes/consts.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_passes%2Fconsts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_passes%2Fconsts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Fconsts.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -158,7 +158,7 @@ impl<'a, 'gcx> CheckCrateVisitor<'a, 'gcx> {\n \n         let qualif = self.with_mode(mode, |this| {\n             this.with_euv(Some(fn_id), |euv| euv.walk_fn(fd, b));\n-            intravisit::walk_fn(this, fk, fd, b, s);\n+            intravisit::walk_fn(this, fk, fd, b, s, fn_id);\n             this.qualif\n         });\n "}, {"sha": "2a5dc50cae92f4682044ffae57dc069e04ce409c", "filename": "src/librustc_passes/rvalues.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_passes%2Frvalues.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_passes%2Frvalues.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_passes%2Frvalues.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -49,7 +49,7 @@ impl<'a, 'tcx, 'v> intravisit::Visitor<'v> for RvalueContext<'a, 'tcx> {\n             let mut euv = euv::ExprUseVisitor::new(&mut delegate, &infcx);\n             euv.walk_fn(fd, b);\n         });\n-        intravisit::walk_fn(self, fk, fd, b, s)\n+        intravisit::walk_fn(self, fk, fd, b, s, fn_id)\n     }\n }\n "}, {"sha": "793e52d37920354be1a9373fbdd672920c0eaba5", "filename": "src/librustc_privacy/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_privacy%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_privacy%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_privacy%2Flib.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -291,7 +291,7 @@ impl<'a, 'tcx, 'v> Visitor<'v> for EmbargoVisitor<'a, 'tcx> {\n             }\n         }\n \n-        intravisit::walk_mod(self, m);\n+        intravisit::walk_mod(self, m, id);\n     }\n \n     fn visit_macro_def(&mut self, md: &'v hir::MacroDef) {"}, {"sha": "6fdbc3282bccd01cb55ed792ab68ced9a3c65463", "filename": "src/librustc_typeck/check/upvar.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "raw_url": "https://github.com/rust-lang/rust/raw/415fde498a561f22eb7e431b31a31906764a196b/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fupvar.rs?ref=415fde498a561f22eb7e431b31a31906764a196b", "patch": "@@ -503,7 +503,7 @@ impl<'a, 'gcx, 'tcx, 'v> Visitor<'v> for AdjustBorrowKind<'a, 'gcx, 'tcx> {\n                 span: Span,\n                 id: ast::NodeId)\n     {\n-        intravisit::walk_fn(self, fn_kind, decl, body, span);\n+        intravisit::walk_fn(self, fn_kind, decl, body, span, id);\n         self.analyze_closure(id, span, decl, body);\n     }\n }"}]}