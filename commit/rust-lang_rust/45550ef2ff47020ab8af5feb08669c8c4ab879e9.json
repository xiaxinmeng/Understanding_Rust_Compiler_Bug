{"sha": "45550ef2ff47020ab8af5feb08669c8c4ab879e9", "node_id": "MDY6Q29tbWl0NzI0NzEyOjQ1NTUwZWYyZmY0NzAyMGFiOGFmNWZlYjA4NjY5YzhjNGFiODc5ZTk=", "commit": {"author": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-11T23:33:45Z"}, "committer": {"name": "Esteban K\u00fcber", "email": "esteban@kuber.com.ar", "date": "2019-12-11T23:33:45Z"}, "message": "Reuse existing HirId \u2192 DefId table", "tree": {"sha": "b248b1c949177080e1ba4ac64c6d78108ca49292", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/b248b1c949177080e1ba4ac64c6d78108ca49292"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/45550ef2ff47020ab8af5feb08669c8c4ab879e9", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/45550ef2ff47020ab8af5feb08669c8c4ab879e9", "html_url": "https://github.com/rust-lang/rust/commit/45550ef2ff47020ab8af5feb08669c8c4ab879e9", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/45550ef2ff47020ab8af5feb08669c8c4ab879e9/comments", "author": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "committer": {"login": "estebank", "id": 1606434, "node_id": "MDQ6VXNlcjE2MDY0MzQ=", "avatar_url": "https://avatars.githubusercontent.com/u/1606434?v=4", "gravatar_id": "", "url": "https://api.github.com/users/estebank", "html_url": "https://github.com/estebank", "followers_url": "https://api.github.com/users/estebank/followers", "following_url": "https://api.github.com/users/estebank/following{/other_user}", "gists_url": "https://api.github.com/users/estebank/gists{/gist_id}", "starred_url": "https://api.github.com/users/estebank/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/estebank/subscriptions", "organizations_url": "https://api.github.com/users/estebank/orgs", "repos_url": "https://api.github.com/users/estebank/repos", "events_url": "https://api.github.com/users/estebank/events{/privacy}", "received_events_url": "https://api.github.com/users/estebank/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "94ab9ec36bd3401b3185aff7b623ff0317b96356", "url": "https://api.github.com/repos/rust-lang/rust/commits/94ab9ec36bd3401b3185aff7b623ff0317b96356", "html_url": "https://github.com/rust-lang/rust/commit/94ab9ec36bd3401b3185aff7b623ff0317b96356"}], "stats": {"total": 48, "additions": 4, "deletions": 44}, "files": [{"sha": "4baab0492a5a503e912fbb608d922d54479f06cb", "filename": "src/librustc/infer/error_reporting/need_type_info.rs", "status": "modified", "additions": 4, "deletions": 5, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Finfer%2Ferror_reporting%2Fneed_type_info.rs?ref=45550ef2ff47020ab8af5feb08669c8c4ab879e9", "patch": "@@ -1,4 +1,4 @@\n-use crate::hir::def::Namespace;\n+use crate::hir::def::{DefKind, Namespace};\n use crate::hir::{self, Body, FunctionRetTy, Expr, ExprKind, HirId, Local, Pat};\n use crate::hir::intravisit::{self, Visitor, NestedVisitorMap};\n use crate::infer::InferCtxt;\n@@ -447,9 +447,8 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n             &segment.args,\n         ) {\n             let borrow = tables.borrow();\n-            let method_defs = borrow.node_method_def_id();\n-            if let Some(did) = method_defs.get(e.hir_id) {\n-                let generics = self.tcx.generics_of(*did);\n+            if let Some((DefKind::Method, did)) = borrow.type_dependent_def(e.hir_id) {\n+                let generics = self.tcx.generics_of(did);\n                 if !generics.params.is_empty() {\n                     err.span_suggestion(\n                         segment.ident.span,\n@@ -468,7 +467,7 @@ impl<'a, 'tcx> InferCtxt<'a, 'tcx> {\n                         Applicability::HasPlaceholders,\n                     );\n                 } else {\n-                    let sig = self.tcx.fn_sig(*did);\n+                    let sig = self.tcx.fn_sig(did);\n                     err.span_label(e.span, &format!(\n                         \"this method call resolves to `{:?}`\",\n                         sig.output().skip_binder(),"}, {"sha": "f7e422b0403dcf88dd59a63a89e98fb69498001a", "filename": "src/librustc/ty/context.rs", "status": "modified", "additions": 0, "deletions": 19, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fcontext.rs?ref=45550ef2ff47020ab8af5feb08669c8c4ab879e9", "patch": "@@ -338,8 +338,6 @@ pub struct TypeckTables<'tcx> {\n     /// typeck::check::fn_ctxt for details.\n     node_types: ItemLocalMap<Ty<'tcx>>,\n \n-    node_method_def_id: ItemLocalMap<DefId>,\n-\n     /// Stores the type parameters which were substituted to obtain the type\n     /// of this node. This only applies to nodes that refer to entities\n     /// parameterized by type parameters, such as generic fns, types, or\n@@ -444,7 +442,6 @@ impl<'tcx> TypeckTables<'tcx> {\n             user_provided_types: Default::default(),\n             user_provided_sigs: Default::default(),\n             node_types: Default::default(),\n-            node_method_def_id: Default::default(),\n             node_substs: Default::default(),\n             adjustments: Default::default(),\n             pat_binding_modes: Default::default(),\n@@ -545,20 +542,6 @@ impl<'tcx> TypeckTables<'tcx> {\n         }\n     }\n \n-    pub fn node_method_def_id(&self) -> LocalTableInContext<'_, DefId> {\n-        LocalTableInContext {\n-            local_id_root: self.local_id_root,\n-            data: &self.node_method_def_id\n-        }\n-    }\n-\n-    pub fn node_method_def_id_mut(&mut self) -> LocalTableInContextMut<'_, DefId> {\n-        LocalTableInContextMut {\n-            local_id_root: self.local_id_root,\n-            data: &mut self.node_method_def_id\n-        }\n-    }\n-\n     pub fn node_type(&self, id: hir::HirId) -> Ty<'tcx> {\n         self.node_type_opt(id).unwrap_or_else(||\n             bug!(\"node_type: no type for node `{}`\",\n@@ -765,7 +748,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             ref user_provided_types,\n             ref user_provided_sigs,\n             ref node_types,\n-            ref node_method_def_id,\n             ref node_substs,\n             ref adjustments,\n             ref pat_binding_modes,\n@@ -792,7 +774,6 @@ impl<'a, 'tcx> HashStable<StableHashingContext<'a>> for TypeckTables<'tcx> {\n             user_provided_types.hash_stable(hcx, hasher);\n             user_provided_sigs.hash_stable(hcx, hasher);\n             node_types.hash_stable(hcx, hasher);\n-            node_method_def_id.hash_stable(hcx, hasher);\n             node_substs.hash_stable(hcx, hasher);\n             adjustments.hash_stable(hcx, hasher);\n             pat_binding_modes.hash_stable(hcx, hasher);"}, {"sha": "fc7d19766373a2383676ce8ebd9b3778300b66a5", "filename": "src/librustc_typeck/check/expr.rs", "status": "modified", "additions": 0, "deletions": 20, "changes": 20, "blob_url": "https://github.com/rust-lang/rust/blob/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "raw_url": "https://github.com/rust-lang/rust/raw/45550ef2ff47020ab8af5feb08669c8c4ab879e9/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fexpr.rs?ref=45550ef2ff47020ab8af5feb08669c8c4ab879e9", "patch": "@@ -874,26 +874,6 @@ impl<'a, 'tcx> FnCtxt<'a, 'tcx> {\n                 // We could add a \"consider `foo::<params>`\" suggestion here, but I wasn't able to\n                 // trigger this codepath causing `structuraly_resolved_type` to emit an error.\n \n-                // We could do this only when type params are present in the method to reducte\n-                // memory usage, but doing it unconditionally lets us also point at the method\n-                // expression and state the resolved return value:\n-                // ```\n-                // error[E0282]: type annotations needed\n-                //    --> $DIR/issue-65611.rs:59:20\n-                //    |\n-                // LL |     let x = buffer.last().unwrap().0.clone();\n-                //    |             -------^^^^--\n-                //    |             |      |\n-                //    |             |      cannot infer type for `T`\n-                //    |             this method call resolves to `std::option::Option<&T>`\n-                //    |\n-                //    = note: type must be known at this point\n-                // ```\n-                self.tables.borrow_mut().node_method_def_id_mut().insert(\n-                    expr.hir_id,\n-                    method.def_id,\n-                );\n-\n                 self.write_method_call(expr.hir_id, method);\n                 Ok(method)\n             }"}]}