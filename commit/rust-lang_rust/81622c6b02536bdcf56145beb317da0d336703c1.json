{"sha": "81622c6b02536bdcf56145beb317da0d336703c1", "node_id": "MDY6Q29tbWl0NzI0NzEyOjgxNjIyYzZiMDI1MzZiZGNmNTYxNDViZWIzMTdkYTBkMzM2NzAzYzE=", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T14:47:21Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2017-12-20T14:47:21Z"}, "message": "Auto merge of #46874 - kennytm:rollup, r=kennytm\n\nRollup of 14 pull requests\n\n- Successful merges: #46359, #46517, #46671, #46751, #46760, #46787, #46794, #46828, #46831, #46835, #46851, #46852, #46856, #46870\n- Failed merges:", "tree": {"sha": "2624499fcf70ff3d8f4072b6aab9a42b9ec9342a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2624499fcf70ff3d8f4072b6aab9a42b9ec9342a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/81622c6b02536bdcf56145beb317da0d336703c1", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/81622c6b02536bdcf56145beb317da0d336703c1", "html_url": "https://github.com/rust-lang/rust/commit/81622c6b02536bdcf56145beb317da0d336703c1", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/81622c6b02536bdcf56145beb317da0d336703c1/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "df8dfdeff68e60a68d026a3374cfb8159d0495cb", "url": "https://api.github.com/repos/rust-lang/rust/commits/df8dfdeff68e60a68d026a3374cfb8159d0495cb", "html_url": "https://github.com/rust-lang/rust/commit/df8dfdeff68e60a68d026a3374cfb8159d0495cb"}, {"sha": "66e5c790682204d35191dd62332c6f503cdeddbd", "url": "https://api.github.com/repos/rust-lang/rust/commits/66e5c790682204d35191dd62332c6f503cdeddbd", "html_url": "https://github.com/rust-lang/rust/commit/66e5c790682204d35191dd62332c6f503cdeddbd"}], "stats": {"total": 398, "additions": 255, "deletions": 143}, "files": [{"sha": "78de9ec62d9185a955ce8835df6dd1b66926cc7f", "filename": "src/bootstrap/dist.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Fbootstrap%2Fdist.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Fbootstrap%2Fdist.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fbootstrap%2Fdist.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -504,6 +504,7 @@ impl Step for DebuggerScripts {\n             install(&build.src.join(\"src/etc/rust-windbg.cmd\"), &sysroot.join(\"bin\"),\n                 0o755);\n \n+            cp_debugger_script(\"natvis/intrinsic.natvis\");\n             cp_debugger_script(\"natvis/liballoc.natvis\");\n             cp_debugger_script(\"natvis/libcore.natvis\");\n         } else {"}, {"sha": "8da4efb58039dc9eb23e887b00bf9435d28948a8", "filename": "src/etc/rust-windbg.cmd", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Fetc%2Frust-windbg.cmd", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Fetc%2Frust-windbg.cmd", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Frust-windbg.cmd?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -15,4 +15,4 @@ for /f \"delims=\" %%i in ('rustc --print=sysroot') do set rustc_sysroot=%%i\n \n set rust_etc=%rustc_sysroot%\\lib\\rustlib\\etc\n \n-windbg -c \".nvload %rust_etc%\\liballoc.natvis; .nvload %rust_etc%\\libcore.natvis;\" %*\n+windbg -c \".nvload %rust_etc%\\intrinsic.natvis; .nvload %rust_etc%\\liballoc.natvis; .nvload %rust_etc%\\libcore.natvis;\" %*"}, {"sha": "c5375d1e00cb1256c4acef8c3b7a1d1c0dddaa6b", "filename": "src/libcore/cell.rs", "status": "modified", "additions": 2, "deletions": 4, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Fcell.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Fcell.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fcell.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -584,15 +584,14 @@ impl<T> RefCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(refcell_replace_swap)]\n     /// use std::cell::RefCell;\n     /// let cell = RefCell::new(5);\n     /// let old_value = cell.replace(6);\n     /// assert_eq!(old_value, 5);\n     /// assert_eq!(cell, RefCell::new(6));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    #[stable(feature = \"refcell_replace\", since=\"1.24.0\")]\n     pub fn replace(&self, t: T) -> T {\n         mem::replace(&mut *self.borrow_mut(), t)\n     }\n@@ -636,7 +635,6 @@ impl<T> RefCell<T> {\n     /// # Examples\n     ///\n     /// ```\n-    /// #![feature(refcell_replace_swap)]\n     /// use std::cell::RefCell;\n     /// let c = RefCell::new(5);\n     /// let d = RefCell::new(6);\n@@ -645,7 +643,7 @@ impl<T> RefCell<T> {\n     /// assert_eq!(d, RefCell::new(5));\n     /// ```\n     #[inline]\n-    #[unstable(feature = \"refcell_replace_swap\", issue=\"43570\")]\n+    #[stable(feature = \"refcell_swap\", since=\"1.24.0\")]\n     pub fn swap(&self, other: &Self) {\n         mem::swap(&mut *self.borrow_mut(), &mut *other.borrow_mut())\n     }"}, {"sha": "03e7a9a49d8a763da0c6772b678ab23cba06ceb6", "filename": "src/libcore/fmt/float.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ffmt%2Ffloat.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -32,22 +32,23 @@ fn float_to_decimal_common_exact<T>(fmt: &mut Formatter, num: &T,\n // Don't inline this so callers that call both this and the above won't wind\n // up using the combined stack space of both functions in some cases.\n #[inline(never)]\n-fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter,\n-                                       num: &T, sign: flt2dec::Sign) -> Result\n+fn float_to_decimal_common_shortest<T>(fmt: &mut Formatter, num: &T,\n+                                       sign: flt2dec::Sign, precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     unsafe {\n         // enough for f32 and f64\n         let mut buf: [u8; flt2dec::MAX_SIG_DIGITS] = mem::uninitialized();\n         let mut parts: [flt2dec::Part; 4] = mem::uninitialized();\n-        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest,\n-                                                 *num, sign, 0, false, &mut buf, &mut parts);\n+        let formatted = flt2dec::to_shortest_str(flt2dec::strategy::grisu::format_shortest, *num,\n+                                                 sign, precision, false, &mut buf, &mut parts);\n         fmt.pad_formatted_parts(&formatted)\n     }\n }\n \n // Common code of floating point Debug and Display.\n-fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool) -> Result\n+fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T,\n+                              negative_zero: bool, min_precision: usize) -> Result\n     where T: flt2dec::DecodableFloat\n {\n     let force_sign = fmt.sign_plus();\n@@ -61,7 +62,7 @@ fn float_to_decimal_common<T>(fmt: &mut Formatter, num: &T, negative_zero: bool)\n     if let Some(precision) = fmt.precision {\n         float_to_decimal_common_exact(fmt, num, sign, precision)\n     } else {\n-        float_to_decimal_common_shortest(fmt, num, sign)\n+        float_to_decimal_common_shortest(fmt, num, sign, min_precision)\n     }\n }\n \n@@ -125,14 +126,14 @@ macro_rules! floating {\n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Debug for $ty {\n             fn fmt(&self, fmt: &mut Formatter) -> Result {\n-                float_to_decimal_common(fmt, self, true)\n+                float_to_decimal_common(fmt, self, true, 1)\n             }\n         }\n \n         #[stable(feature = \"rust1\", since = \"1.0.0\")]\n         impl Display for $ty {\n             fn fmt(&self, fmt: &mut Formatter) -> Result {\n-                float_to_decimal_common(fmt, self, false)\n+                float_to_decimal_common(fmt, self, false, 0)\n             }\n         }\n "}, {"sha": "ca5cf04b1d4370e5f3c729bca3d9a43e41532dda", "filename": "src/libcore/slice/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Fslice%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Fslice%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Fslice%2Fmod.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -400,7 +400,7 @@ impl<T> SliceExt for [T] {\n         while size > 1 {\n             let half = size / 2;\n             let mid = base + half;\n-            // mid is always in [0, size).\n+            // mid is always in [0, size), that means mid is >= 0 and < size.\n             // mid >= 0: by definition\n             // mid < size: mid = size / 2 + size / 4 + size / 8 ...\n             let cmp = f(unsafe { s.get_unchecked(mid) });"}, {"sha": "138c3970e9087e6186f0be7c8e60ef7cd29696b6", "filename": "src/libcore/tests/fmt/float.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Ftests%2Ffmt%2Ffloat.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -20,6 +20,8 @@ fn test_format_f64() {\n     assert_eq!(\"1.23456789e3\", format!(\"{:e}\", 1234.56789f64));\n     assert_eq!(\"1.23456789E6\", format!(\"{:E}\", 1234567.89f64));\n     assert_eq!(\"1.23456789E3\", format!(\"{:E}\", 1234.56789f64));\n+    assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f64));\n+    assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f64));\n }\n \n #[test]\n@@ -34,4 +36,6 @@ fn test_format_f32() {\n     assert_eq!(\"1.2345679e3\", format!(\"{:e}\", 1234.56789f32));\n     assert_eq!(\"1.2345679E6\", format!(\"{:E}\", 1234567.89f32));\n     assert_eq!(\"1.2345679E3\", format!(\"{:E}\", 1234.56789f32));\n+    assert_eq!(\"0.0\", format!(\"{:?}\", 0.0f32));\n+    assert_eq!(\"1.01\", format!(\"{:?}\", 1.01f32));\n }"}, {"sha": "ef9eefb6df3f3a2cb989e8050519661faa7d7118", "filename": "src/liblibc", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": null, "raw_url": null, "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fliblibc?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1 +1 @@\n-Subproject commit 1a2f9639f8d293cefbe050053a574decbfe863f7\n+Subproject commit ef9eefb6df3f3a2cb989e8050519661faa7d7118"}, {"sha": "b2c2c96f6245a954ab84f365ac389eed023a29da", "filename": "src/librustc/hir/print.rs", "status": "modified", "additions": 18, "deletions": 16, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fhir%2Fprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fhir%2Fprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fhir%2Fprint.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -408,15 +408,16 @@ impl<'a> State<'a> {\n             hir::TyTraitObject(ref bounds, ref lifetime) => {\n                 let mut first = true;\n                 for bound in bounds {\n-                    self.nbsp()?;\n                     if first {\n                         first = false;\n                     } else {\n+                        self.nbsp()?;\n                         self.word_space(\"+\")?;\n                     }\n                     self.print_poly_trait_ref(bound)?;\n                 }\n                 if !lifetime.is_elided() {\n+                    self.nbsp()?;\n                     self.word_space(\"+\")?;\n                     self.print_lifetime(lifetime)?;\n                 }\n@@ -764,7 +765,8 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.nbsp()?;\n+                self.print_bounds(\"=\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\";\")?;\n             }\n@@ -788,6 +790,7 @@ impl<'a> State<'a> {\n                 comma = true;\n             }\n             self.s.word(\">\")?;\n+            self.nbsp()?;\n         }\n         Ok(())\n     }\n@@ -2016,30 +2019,29 @@ impl<'a> State<'a> {\n             self.s.word(prefix)?;\n             let mut first = true;\n             for bound in bounds {\n-                self.nbsp()?;\n+                if !(first && prefix.is_empty()) {\n+                    self.nbsp()?;\n+                }\n                 if first {\n                     first = false;\n                 } else {\n                     self.word_space(\"+\")?;\n                 }\n \n-                match *bound {\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::None) => {\n-                        self.print_poly_trait_ref(tref)\n-                    }\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::Maybe) => {\n-                        self.s.word(\"?\")?;\n-                        self.print_poly_trait_ref(tref)\n+                match bound {\n+                    TraitTyParamBound(tref, modifier) => {\n+                        if modifier == &TraitBoundModifier::Maybe {\n+                            self.s.word(\"?\")?;\n+                        }\n+                        self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(ref lt) => {\n-                        self.print_lifetime(lt)\n+                    RegionTyParamBound(lt) => {\n+                        self.print_lifetime(lt)?;\n                     }\n-                }?\n+                }\n             }\n-            Ok(())\n-        } else {\n-            Ok(())\n         }\n+        Ok(())\n     }\n \n     pub fn print_lifetime(&mut self, lifetime: &hir::Lifetime) -> io::Result<()> {"}, {"sha": "a50a9c819f6ecb57cc95a1229a826b8be8fef3f3", "filename": "src/librustc/mir/visit.rs", "status": "modified", "additions": 8, "deletions": 2, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fmir%2Fvisit.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fmir%2Fvisit.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fmir%2Fvisit.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -376,7 +376,7 @@ macro_rules! make_mir_visitor {\n                                                ref $($mutability)* inputs,\n                                                asm: _ } => {\n                         for output in & $($mutability)* outputs[..] {\n-                            self.visit_place(output, PlaceContext::Store, location);\n+                            self.visit_place(output, PlaceContext::AsmOutput, location);\n                         }\n                         for input in & $($mutability)* inputs[..] {\n                             self.visit_operand(input, location);\n@@ -835,6 +835,11 @@ pub enum PlaceContext<'tcx> {\n     // Appears as LHS of an assignment\n     Store,\n \n+    // Can often be treated as a Store, but needs to be separate because\n+    // ASM is allowed to read outputs as well, so a Store-AsmOutput sequence\n+    // cannot be simplified the way a Store-Store can be.\n+    AsmOutput,\n+\n     // Dest of a call\n     Call,\n \n@@ -910,7 +915,7 @@ impl<'tcx> PlaceContext<'tcx> {\n     /// Returns true if this place context represents a use that potentially changes the value.\n     pub fn is_mutating_use(&self) -> bool {\n         match *self {\n-            PlaceContext::Store | PlaceContext::Call |\n+            PlaceContext::Store | PlaceContext::AsmOutput | PlaceContext::Call |\n             PlaceContext::Borrow { kind: BorrowKind::Mut, .. } |\n             PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop => true,\n@@ -932,6 +937,7 @@ impl<'tcx> PlaceContext<'tcx> {\n             PlaceContext::Projection(Mutability::Not) |\n             PlaceContext::Copy | PlaceContext::Move => true,\n             PlaceContext::Borrow { kind: BorrowKind::Mut, .. } | PlaceContext::Store |\n+            PlaceContext::AsmOutput |\n             PlaceContext::Call | PlaceContext::Projection(Mutability::Mut) |\n             PlaceContext::Drop | PlaceContext::StorageLive | PlaceContext::StorageDead |\n             PlaceContext::Validate => false,"}, {"sha": "a1cf38ae336d21243af97ee5203717e033bd0ceb", "filename": "src/librustc/session/config.rs", "status": "modified", "additions": 23, "deletions": 3, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc%2Fsession%2Fconfig.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fsession%2Fconfig.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1013,6 +1013,8 @@ options! {CodegenOptions, CodegenSetter, basic_codegen_options,\n         \"set the threshold for inlining a function (default: 225)\"),\n     panic: Option<PanicStrategy> = (None, parse_panic_strategy,\n         [TRACKED], \"panic strategy to compile crate with\"),\n+    incremental: Option<String> = (None, parse_opt_string, [UNTRACKED],\n+          \"enable incremental compilation\"),\n }\n \n options! {DebuggingOptions, DebuggingSetter, basic_debugging_options,\n@@ -1663,7 +1665,24 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n         early_error(error_format, \"Value for codegen units must be a positive nonzero integer\");\n     }\n \n-    if cg.lto && debugging_opts.incremental.is_some() {\n+    let incremental = match (&debugging_opts.incremental, &cg.incremental) {\n+        (&Some(ref path1), &Some(ref path2)) => {\n+            if path1 != path2 {\n+                early_error(error_format,\n+                    &format!(\"conflicting paths for `-Z incremental` and \\\n+                              `-C incremental` specified: {} versus {}\",\n+                              path1,\n+                              path2));\n+            } else {\n+                Some(path1)\n+            }\n+        }\n+        (&Some(ref path), &None) => Some(path),\n+        (&None, &Some(ref path)) => Some(path),\n+        (&None, &None) => None,\n+    }.map(|m| PathBuf::from(m));\n+\n+    if cg.lto && incremental.is_some() {\n         early_error(error_format, \"can't perform LTO when compiling incrementally\");\n     }\n \n@@ -1837,8 +1856,6 @@ pub fn build_session_options_and_crate_config(matches: &getopts::Matches)\n \n     let crate_name = matches.opt_str(\"crate-name\");\n \n-    let incremental = debugging_opts.incremental.as_ref().map(|m| PathBuf::from(m));\n-\n     (Options {\n         crate_types,\n         optimize: opt_level,\n@@ -2581,6 +2598,9 @@ mod tests {\n         opts.cg.save_temps = true;\n         assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n \n+        opts.cg.incremental = Some(String::from(\"abc\"));\n+        assert_eq!(reference.dep_tracking_hash(), opts.dep_tracking_hash());\n+\n \n         // Make sure changing a [TRACKED] option changes the hash\n         opts = reference.clone();"}, {"sha": "2504aa5ff378acf9f07ec2401ead0bc9e2ea8f24", "filename": "src/librustc_mir/dataflow/impls/borrows.rs", "status": "modified", "additions": 4, "deletions": 0, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Fdataflow%2Fimpls%2Fborrows.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -540,6 +540,10 @@ impl<'a, 'b, 'tcx> FindPlaceUses<'a, 'b, 'tcx> {\n             // \"deep\" does validation go?\n             PlaceContext::Validate => false,\n \n+            // FIXME: This is here to not change behaviour from before\n+            // AsmOutput existed, but it's not necessarily a pure overwrite.\n+            // so it's possible this should activate the place.\n+            PlaceContext::AsmOutput |\n             // pure overwrites of an place do not activate it. (note\n             // PlaceContext::Call is solely about dest place)\n             PlaceContext::Store | PlaceContext::Call => false,"}, {"sha": "e7ce5285071807741cecd0d9f10e33a1a2e9dce2", "filename": "src/librustc_mir/transform/check_unsafety.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fcheck_unsafety.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -173,6 +173,7 @@ impl<'a, 'tcx> Visitor<'tcx> for UnsafetyChecker<'a, 'tcx> {\n                     ty::TyAdt(adt, _) => {\n                         if adt.is_union() {\n                             if context == PlaceContext::Store ||\n+                                context == PlaceContext::AsmOutput ||\n                                 context == PlaceContext::Drop\n                             {\n                                 let elem_ty = match elem {"}, {"sha": "1545040f2da796a688747fdbaaba9aa81852f698", "filename": "src/librustc_mir/transform/promote_consts.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Ftransform%2Fpromote_consts.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -103,6 +103,7 @@ impl<'tcx> Visitor<'tcx> for TempCollector<'tcx> {\n         if *temp == TempState::Undefined {\n             match context {\n                 PlaceContext::Store |\n+                PlaceContext::AsmOutput |\n                 PlaceContext::Call => {\n                     *temp = TempState::Defined {\n                         location,"}, {"sha": "45c9c350e7e435e14d5366f6eee0bfa5fd56d669", "filename": "src/librustc_mir/util/liveness.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_mir%2Futil%2Fliveness.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Futil%2Fliveness.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -273,6 +273,9 @@ impl<'tcx> Visitor<'tcx> for DefsUsesVisitor {\n \n             PlaceContext::Store |\n \n+            // This is potentially both a def and a use...\n+            PlaceContext::AsmOutput |\n+\n             // We let Call define the result in both the success and\n             // unwind cases. This is not really correct, however it\n             // does not seem to be observable due to the way that we"}, {"sha": "ea68925705f521cb598d823ddd8578e3311f928b", "filename": "src/librustc_trans/base.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_trans%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_trans%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fbase.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1024,7 +1024,7 @@ fn collect_and_partition_translation_items<'a, 'tcx>(\n \n     assert_symbols_are_distinct(tcx, items.iter());\n \n-    let strategy = if tcx.sess.opts.debugging_opts.incremental.is_some() {\n+    let strategy = if tcx.sess.opts.incremental.is_some() {\n         PartitioningStrategy::PerModule\n     } else {\n         PartitioningStrategy::FixedUnitCount(tcx.sess.codegen_units())"}, {"sha": "cfe55aba0d3c5e0019520887b16bdd88bbebc4ec", "filename": "src/librustc_trans/mir/analyze.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_trans%2Fmir%2Fanalyze.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -193,6 +193,7 @@ impl<'mir, 'a, 'tcx> Visitor<'tcx> for LocalAnalyzer<'mir, 'a, 'tcx> {\n \n             PlaceContext::Inspect |\n             PlaceContext::Store |\n+            PlaceContext::AsmOutput |\n             PlaceContext::Borrow { .. } |\n             PlaceContext::Projection(..) => {\n                 self.mark_as_memory(index);"}, {"sha": "7ebdb876ed02f54ce20de59cfead13cc0b26a893", "filename": "src/librustc_typeck/check/mod.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_typeck%2Fcheck%2Fmod.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1274,6 +1274,8 @@ fn check_impl_items_against_trait<'a, 'tcx>(tcx: TyCtxt<'a, 'tcx, 'tcx>,\n                                             impl_id: DefId,\n                                             impl_trait_ref: ty::TraitRef<'tcx>,\n                                             impl_item_refs: &[hir::ImplItemRef]) {\n+    let impl_span = tcx.sess.codemap().def_span(impl_span);\n+\n     // If the trait reference itself is erroneous (so the compilation is going\n     // to fail), skip checking the items here -- the `impl_item` table in `tcx`\n     // isn't populated for such impls."}, {"sha": "9f981e97a762bf8dba9bd7bb88dc60fff48139c3", "filename": "src/librustdoc/html/render.rs", "status": "modified", "additions": 13, "deletions": 4, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustdoc%2Fhtml%2Frender.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Fhtml%2Frender.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -129,6 +129,9 @@ pub struct SharedContext {\n     /// The directories that have already been created in this doc run. Used to reduce the number\n     /// of spurious `create_dir_all` calls.\n     pub created_dirs: RefCell<FxHashSet<PathBuf>>,\n+    /// This flag indicates whether listings of modules (in the side bar and documentation itself)\n+    /// should be ordered alphabetically or in order of appearance (in the source code).\n+    pub sort_modules_alphabetically: bool,\n }\n \n impl SharedContext {\n@@ -491,7 +494,8 @@ pub fn run(mut krate: clean::Crate,\n            passes: FxHashSet<String>,\n            css_file_extension: Option<PathBuf>,\n            renderinfo: RenderInfo,\n-           render_type: RenderType) -> Result<(), Error> {\n+           render_type: RenderType,\n+           sort_modules_alphabetically: bool) -> Result<(), Error> {\n     let src_root = match krate.src {\n         FileName::Real(ref p) => match p.parent() {\n             Some(p) => p.to_path_buf(),\n@@ -514,6 +518,7 @@ pub fn run(mut krate: clean::Crate,\n         css_file_extension: css_file_extension.clone(),\n         markdown_warnings: RefCell::new(vec![]),\n         created_dirs: RefCell::new(FxHashSet()),\n+        sort_modules_alphabetically,\n     };\n \n     // If user passed in `--playground-url` arg, we fill in crate name here\n@@ -1654,8 +1659,10 @@ impl Context {\n                 .push((myname, Some(plain_summary_line(item.doc_value()))));\n         }\n \n-        for (_, items) in &mut map {\n-            items.sort();\n+        if self.shared.sort_modules_alphabetically {\n+            for (_, items) in &mut map {\n+                items.sort();\n+            }\n         }\n         map\n     }\n@@ -2013,7 +2020,9 @@ fn item_module(w: &mut fmt::Formatter, cx: &Context,\n         name_key(lhs).cmp(&name_key(rhs))\n     }\n \n-    indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n+    if cx.shared.sort_modules_alphabetically {\n+        indices.sort_by(|&i1, &i2| cmp(&items[i1], &items[i2], i1, i2));\n+    }\n     // This call is to remove reexport duplicates in cases such as:\n     //\n     // ```"}, {"sha": "7ebacdec1f0b23d8c6dd19c3d734ae3b6623b28f", "filename": "src/librustdoc/lib.rs", "status": "modified", "additions": 7, "deletions": 1, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustdoc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibrustdoc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustdoc%2Flib.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -253,6 +253,10 @@ pub fn opts() -> Vec<RustcOptGroup> {\n         unstable(\"linker\", |o| {\n             o.optopt(\"\", \"linker\", \"linker used for building executable test code\", \"PATH\")\n         }),\n+        unstable(\"sort-modules-by-appearance\", |o| {\n+            o.optflag(\"\", \"sort-modules-by-appearance\", \"sort modules by where they appear in the \\\n+                                                         program, rather than alphabetically\")\n+        }),\n     ]\n }\n \n@@ -369,6 +373,7 @@ pub fn main_args(args: &[String]) -> isize {\n     let maybe_sysroot = matches.opt_str(\"sysroot\").map(PathBuf::from);\n     let display_warnings = matches.opt_present(\"display-warnings\");\n     let linker = matches.opt_str(\"linker\").map(PathBuf::from);\n+    let sort_modules_alphabetically = !matches.opt_present(\"sort-modules-by-appearance\");\n \n     match (should_test, markdown_input) {\n         (true, true) => {\n@@ -398,7 +403,8 @@ pub fn main_args(args: &[String]) -> isize {\n                                   passes.into_iter().collect(),\n                                   css_file_extension,\n                                   renderinfo,\n-                                  render_type)\n+                                  render_type,\n+                                  sort_modules_alphabetically)\n                     .expect(\"failed to generate documentation\");\n                 0\n             }"}, {"sha": "0d73a6f4fd7f4928cdca0f68f2823b5384e18459", "filename": "src/libstd/net/ip.rs", "status": "modified", "additions": 3, "deletions": 0, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fnet%2Fip.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fnet%2Fip.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fip.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1451,6 +1451,9 @@ mod tests {\n         // two double colons\n         let none: Option<Ipv6Addr> = \"1:2::6::8\".parse().ok();\n         assert_eq!(None, none);\n+        // `::` indicating zero groups of zeros\n+        let none: Option<Ipv6Addr> = \"1:2:3:4::5:6:7:8\".parse().ok();\n+        assert_eq!(None, none);\n     }\n \n     #[test]"}, {"sha": "261d44eebaa278973ae3f66490ba74278a168245", "filename": "src/libstd/net/parser.rs", "status": "modified", "additions": 3, "deletions": 1, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fnet%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fnet%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fnet%2Fparser.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -246,7 +246,9 @@ impl<'a> Parser<'a> {\n         }\n \n         let mut tail = [0; 8];\n-        let (tail_size, _) = read_groups(self, &mut tail, 8 - head_size);\n+        // `::` indicates one or more groups of 16 bits of zeros\n+        let limit = 8 - (head_size + 1);\n+        let (tail_size, _) = read_groups(self, &mut tail, limit);\n         Some(ipv6_addr_from_head_tail(&head[..head_size], &tail[..tail_size]))\n     }\n "}, {"sha": "279caf8053a857da1ca4257541e908743e5ddc53", "filename": "src/libstd/os/raw.rs", "status": "modified", "additions": 2, "deletions": 0, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fos%2Fraw.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fos%2Fraw.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fos%2Fraw.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -22,6 +22,7 @@ use fmt;\n           all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                          target_arch = \"arm\")),\n           all(target_os = \"l4re\", target_arch = \"x86_64\"),\n+          all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n           all(target_os = \"fuchsia\", target_arch = \"aarch64\")))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = u8;\n #[cfg(not(any(all(target_os = \"linux\", any(target_arch = \"aarch64\",\n@@ -32,6 +33,7 @@ use fmt;\n               all(target_os = \"android\", any(target_arch = \"aarch64\",\n                                              target_arch = \"arm\")),\n               all(target_os = \"l4re\", target_arch = \"x86_64\"),\n+              all(target_os = \"openbsd\", target_arch = \"aarch64\"),\n               all(target_os = \"fuchsia\", target_arch = \"aarch64\"))))]\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_char = i8;\n #[stable(feature = \"raw_os\", since = \"1.1.0\")] pub type c_schar = i8;"}, {"sha": "cf798500b7fd2d716dcccaaa7adb62250b879a88", "filename": "src/libstd/sys/redox/time.rs", "status": "modified", "additions": 10, "deletions": 2, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fredox%2Ftime.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -13,6 +13,7 @@ use fmt;\n use sys::{cvt, syscall};\n use time::Duration;\n use convert::TryInto;\n+use core::hash::{Hash, Hasher};\n \n const NSEC_PER_SEC: u64 = 1_000_000_000;\n \n@@ -110,12 +111,19 @@ impl Ord for Timespec {\n     }\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+impl Hash for Timespec {\n+    fn hash<H : Hasher>(&self, state: &mut H) {\n+        self.t.tv_sec.hash(state);\n+        self.t.tv_nsec.hash(state);\n+    }\n+}\n+\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct Instant {\n     t: Timespec,\n }\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct SystemTime {\n     t: Timespec,\n }"}, {"sha": "83127935909931211957d8df0e34e7c599e92ceb", "filename": "src/libstd/sys/unix/time.rs", "status": "modified", "additions": 12, "deletions": 4, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Funix%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Funix%2Ftime.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -11,6 +11,7 @@\n use cmp::Ordering;\n use libc;\n use time::Duration;\n+use core::hash::{Hash, Hasher};\n \n pub use self::inner::{Instant, SystemTime, UNIX_EPOCH};\n use convert::TryInto;\n@@ -111,6 +112,13 @@ impl Ord for Timespec {\n     }\n }\n \n+impl Hash for Timespec {\n+    fn hash<H : Hasher>(&self, state: &mut H) {\n+        self.t.tv_sec.hash(state);\n+        self.t.tv_nsec.hash(state);\n+    }\n+}\n+\n #[cfg(any(target_os = \"macos\", target_os = \"ios\"))]\n mod inner {\n     use fmt;\n@@ -123,12 +131,12 @@ mod inner {\n     use super::NSEC_PER_SEC;\n     use super::Timespec;\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n     pub struct Instant {\n         t: u64\n     }\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct SystemTime {\n         t: Timespec,\n     }\n@@ -255,12 +263,12 @@ mod inner {\n \n     use super::Timespec;\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct Instant {\n         t: Timespec,\n     }\n \n-    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+    #[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n     pub struct SystemTime {\n         t: Timespec,\n     }"}, {"sha": "c269def98f6ffdae4f226414e678871adc3e6df7", "filename": "src/libstd/sys/wasm/time.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwasm%2Ftime.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -11,10 +11,10 @@\n use fmt;\n use time::Duration;\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Debug, Hash)]\n pub struct Instant;\n \n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n pub struct SystemTime;\n \n pub const UNIX_EPOCH: SystemTime = SystemTime;"}, {"sha": "07e64d386a1c2b7c94927fda6d73a1f6b190ba5e", "filename": "src/libstd/sys/windows/time.rs", "status": "modified", "additions": 8, "deletions": 1, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsys%2Fwindows%2Ftime.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -17,11 +17,12 @@ use sys::cvt;\n use sys_common::mul_div_u64;\n use time::Duration;\n use convert::TryInto;\n+use core::hash::{Hash, Hasher};\n \n const NANOS_PER_SEC: u64 = 1_000_000_000;\n const INTERVALS_PER_SEC: u64 = NANOS_PER_SEC / 100;\n \n-#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug)]\n+#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Debug, Hash)]\n pub struct Instant {\n     t: c::LARGE_INTEGER,\n }\n@@ -173,6 +174,12 @@ impl From<c::FILETIME> for SystemTime {\n     }\n }\n \n+impl Hash for SystemTime {\n+    fn hash<H : Hasher>(&self, state: &mut H) {\n+        self.intervals().hash(state)\n+    }\n+}\n+\n fn dur2intervals(d: &Duration) -> i64 {\n     d.as_secs()\n         .checked_mul(INTERVALS_PER_SEC)"}, {"sha": "6ce3b3e8a003191049ab3b4ebc2d8c4e04e2cec4", "filename": "src/libstd/time/mod.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Ftime%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibstd%2Ftime%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftime%2Fmod.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -66,7 +66,7 @@ mod duration;\n ///    println!(\"{}\", now.elapsed().as_secs());\n /// }\n /// ```\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct Instant(time::Instant);\n \n@@ -118,7 +118,7 @@ pub struct Instant(time::Instant);\n ///    }\n /// }\n /// ```\n-#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord)]\n+#[derive(Copy, Clone, PartialEq, Eq, PartialOrd, Ord, Hash)]\n #[stable(feature = \"time2\", since = \"1.8.0\")]\n pub struct SystemTime(time::SystemTime);\n "}, {"sha": "74ec11b83c78a80a2bcf7856f38c4f4e4e5bae62", "filename": "src/libsyntax/parse/parser.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibsyntax%2Fparse%2Fparser.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibsyntax%2Fparse%2Fparser.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fparse%2Fparser.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1553,7 +1553,7 @@ impl<'a> Parser<'a> {\n             if self.eat(&token::Not) {\n                 // Macro invocation in type position\n                 let (_, tts) = self.expect_delimited_token_tree()?;\n-                TyKind::Mac(respan(lo.to(self.span), Mac_ { path: path, tts: tts }))\n+                TyKind::Mac(respan(lo.to(self.prev_span), Mac_ { path: path, tts: tts }))\n             } else {\n                 // Just a type path or bound list (trait object type) starting with a trait.\n                 //   `Type`"}, {"sha": "da4d5f5f676a632048639ee37c215512749559be", "filename": "src/libsyntax/print/pprust.rs", "status": "modified", "additions": 18, "deletions": 17, "changes": 35, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Flibsyntax%2Fprint%2Fpprust.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibsyntax%2Fprint%2Fpprust.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1066,11 +1066,11 @@ impl<'a> State<'a> {\n                 self.print_qpath(path, qself, false)?\n             }\n             ast::TyKind::TraitObject(ref bounds, syntax) => {\n-                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn \" } else { \"\" };\n+                let prefix = if syntax == ast::TraitObjectSyntax::Dyn { \"dyn\" } else { \"\" };\n                 self.print_bounds(prefix, &bounds[..])?;\n             }\n             ast::TyKind::ImplTrait(ref bounds) => {\n-                self.print_bounds(\"impl \", &bounds[..])?;\n+                self.print_bounds(\"impl\", &bounds[..])?;\n             }\n             ast::TyKind::Array(ref ty, ref v) => {\n                 self.s.word(\"[\")?;\n@@ -1398,7 +1398,8 @@ impl<'a> State<'a> {\n                         real_bounds.push(b.clone());\n                     }\n                 }\n-                self.print_bounds(\" = \", &real_bounds[..])?;\n+                self.nbsp()?;\n+                self.print_bounds(\"=\", &real_bounds[..])?;\n                 self.print_where_clause(&generics.where_clause)?;\n                 self.s.word(\";\")?;\n             }\n@@ -1444,6 +1445,7 @@ impl<'a> State<'a> {\n                 comma = true;\n             }\n             self.s.word(\">\")?;\n+            self.nbsp()?;\n         }\n         Ok(())\n     }\n@@ -2818,30 +2820,29 @@ impl<'a> State<'a> {\n             self.s.word(prefix)?;\n             let mut first = true;\n             for bound in bounds {\n-                self.nbsp()?;\n+                if !(first && prefix.is_empty()) {\n+                    self.nbsp()?;\n+                }\n                 if first {\n                     first = false;\n                 } else {\n                     self.word_space(\"+\")?;\n                 }\n \n-                (match *bound {\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::None) => {\n-                        self.print_poly_trait_ref(tref)\n-                    }\n-                    TraitTyParamBound(ref tref, TraitBoundModifier::Maybe) => {\n-                        self.s.word(\"?\")?;\n-                        self.print_poly_trait_ref(tref)\n+                match bound {\n+                    TraitTyParamBound(tref, modifier) => {\n+                        if modifier == &TraitBoundModifier::Maybe {\n+                            self.s.word(\"?\")?;\n+                        }\n+                        self.print_poly_trait_ref(tref)?;\n                     }\n-                    RegionTyParamBound(ref lt) => {\n-                        self.print_lifetime(lt)\n+                    RegionTyParamBound(lt) => {\n+                        self.print_lifetime(lt)?;\n                     }\n-                })?\n+                }\n             }\n-            Ok(())\n-        } else {\n-            Ok(())\n         }\n+        Ok(())\n     }\n \n     pub fn print_lifetime(&mut self,"}, {"sha": "25e9c3071d654090d6c421664e4c3a391c6369be", "filename": "src/test/parse-fail/trait-object-bad-parens.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-bad-parens.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -14,9 +14,9 @@ fn main() {\n     let _: Box<((Copy)) + Copy>;\n     //~^ ERROR expected a path on the left-hand side of `+`, not `((Copy))`\n     let _: Box<(Copy + Copy) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy + Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(Copy + Copy)`\n     let _: Box<(Copy +) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `( Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(Copy)`\n     let _: Box<(dyn Copy) + Copy>;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `(dyn  Copy)`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `(dyn Copy)`\n }"}, {"sha": "b5fc06ddaac05b7b8713f0261d100afad681eaa1", "filename": "src/test/parse-fail/trait-object-polytrait-priority.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fparse-fail%2Ftrait-object-polytrait-priority.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -12,7 +12,7 @@ trait Trait<'a> {}\n \n fn main() {\n     let _: &for<'a> Trait<'a> + 'static;\n-    //~^ ERROR expected a path on the left-hand side of `+`, not `& for<'a>Trait<'a>`\n+    //~^ ERROR expected a path on the left-hand side of `+`, not `&for<'a> Trait<'a>`\n     //~| HELP try adding parentheses\n-    //~| SUGGESTION &( for<'a>Trait<'a> + 'static)\n+    //~| SUGGESTION &(for<'a> Trait<'a> + 'static)\n }"}, {"sha": "a1fdebf6fa1c0347602d506b48c42dd95df11a0f", "filename": "src/test/pretty/closure-reform-pretty.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fclosure-reform-pretty.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -17,7 +17,7 @@ fn call_it(f: Box<FnMut(String) -> String>) { }\n \n fn call_this<F>(f: F) where F: Fn(&str) + Send { }\n \n-fn call_that<F>(f: F) where F: for<'a>Fn(&'a isize, &'a isize) -> isize { }\n+fn call_that<F>(f: F) where F: for<'a> Fn(&'a isize, &'a isize) -> isize { }\n \n fn call_extern(f: fn() -> isize) { }\n "}, {"sha": "ae6a0fc314226327a6347e0a757ca7d025200c80", "filename": "src/test/pretty/path-type-bounds.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fpretty%2Fpath-type-bounds.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -16,10 +16,10 @@ trait Tr {\n }\n impl Tr for isize { }\n \n-fn foo<'a>(x: Box< Tr + Sync + 'a>) -> Box< Tr + Sync + 'a> { x }\n+fn foo<'a>(x: Box<Tr + Sync + 'a>) -> Box<Tr + Sync + 'a> { x }\n \n fn main() {\n-    let x: Box< Tr + Sync>;\n+    let x: Box<Tr + Sync>;\n \n-    Box::new(1isize) as Box< Tr + Sync>;\n+    Box::new(1isize) as Box<Tr + Sync>;\n }"}, {"sha": "d09376acc84ae82c0862db78f4b1e154e5b559f9", "filename": "src/test/run-pass/ifmt.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frun-pass%2Fifmt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frun-pass%2Fifmt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frun-pass%2Fifmt.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -158,8 +158,8 @@ pub fn main() {\n \n     // Float edge cases\n     t!(format!(\"{}\", -0.0), \"0\");\n-    t!(format!(\"{:?}\", -0.0), \"-0\");\n-    t!(format!(\"{:?}\", 0.0), \"0\");\n+    t!(format!(\"{:?}\", -0.0), \"-0.0\");\n+    t!(format!(\"{:?}\", 0.0), \"0.0\");\n \n     // sign aware zero padding\n     t!(format!(\"{:<3}\", 1), \"1  \");"}, {"sha": "d16932828d04ff98d154eaf8079cf41cb7b31a4c", "filename": "src/test/rustdoc/hidden-trait-struct-impls.rs", "status": "added", "additions": 32, "deletions": 0, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frustdoc%2Fhidden-trait-struct-impls.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frustdoc%2Fhidden-trait-struct-impls.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fhidden-trait-struct-impls.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -0,0 +1,32 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+#![crate_name = \"foo\"]\n+\n+#[doc(hidden)]\n+pub trait Foo {}\n+\n+trait Dark {}\n+\n+pub trait Bam {}\n+\n+pub struct Bar;\n+\n+struct Hidden;\n+\n+// @!has foo/struct.Bar.html '//*[@id=\"impl-Foo\"]' 'impl Foo for Bar'\n+impl Foo for Bar {}\n+// @!has foo/struct.Bar.html '//*[@id=\"impl-Dark\"]' 'impl Dark for Bar'\n+impl Dark for Bar {}\n+// @has foo/struct.Bar.html '//*[@id=\"impl-Bam\"]' 'impl Bam for Bar'\n+// @has foo/trait.Bam.html '//*[@id=\"implementors-list\"]' 'impl Bam for Bar'\n+impl Bam for Bar {}\n+// @!has foo/trait.Bam.html '//*[@id=\"implementors-list\"]' 'impl Bam for Hidden'\n+impl Bam for Hidden {}"}, {"sha": "abffe6fb95b99cd6c8b4f77d92f90aa0c70cbe54", "filename": "src/test/rustdoc/sort-modules-by-appearance.rs", "status": "added", "additions": 23, "deletions": 0, "changes": 23, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Frustdoc%2Fsort-modules-by-appearance.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -0,0 +1,23 @@\n+// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n+// file at the top-level directory of this distribution and at\n+// http://rust-lang.org/COPYRIGHT.\n+//\n+// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n+// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n+// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n+// option. This file may not be copied, modified, or distributed\n+// except according to those terms.\n+\n+// Tests the rustdoc --sort-modules-by-appearance option, that allows module declarations to appear\n+// in the order they are declared in the source code, rather than only alphabetically.\n+\n+// compile-flags: -Z unstable-options --sort-modules-by-appearance\n+\n+pub mod module_b {}\n+\n+pub mod module_c {}\n+\n+pub mod module_a {}\n+\n+// @matches 'sort_modules_by_appearance/index.html' '(?s)module_b.*module_c.*module_a'\n+// @matches 'sort_modules_by_appearance/sidebar-items.js' '\"module_b\".*\"module_c\".*\"module_a\"'"}, {"sha": "7a0d01a8ec2156234c3ed4b82aa90af25830d8a3", "filename": "src/test/ui/impl-trait/trait_type.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fimpl-trait%2Ftrait_type.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -27,7 +27,7 @@ error[E0046]: not all trait items implemented, missing: `fmt`\n   --> $DIR/trait_type.rs:31:1\n    |\n 31 | impl std::fmt::Display for MyType4 {}\n-   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n "}, {"sha": "abfa03f4d581a28913191f873081762eebb98d0b", "filename": "src/test/ui/issue-32950.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fissue-32950.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fissue-32950.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fissue-32950.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1,9 +1,8 @@\n error: `derive` cannot be used on items with type macros\n   --> $DIR/issue-32950.rs:15:5\n    |\n-15 | /     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n-16 | | );\n-   | |_^\n+15 |     concat_idents!(Foo, Bar) //~ ERROR `derive` cannot be used on items with type macros\n+   |     ^^^^^^^^^^^^^^^^^^^^^^^^\n \n error: aborting due to previous error\n "}, {"sha": "8c57214ec771f91a7472905104caf735a6b4e66c", "filename": "src/test/ui/missing-items/m2.stderr", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fmissing-items%2Fm2.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -3,9 +3,8 @@ error[E0601]: main function not found\n error[E0046]: not all trait items implemented, missing: `CONSTANT`, `Type`, `method`\n   --> $DIR/m2.rs:19:1\n    |\n-19 | / impl m1::X for X { //~ ERROR not all trait items implemented\n-20 | | }\n-   | |_^ missing `CONSTANT`, `Type`, `method` in implementation\n+19 | impl m1::X for X { //~ ERROR not all trait items implemented\n+   | ^^^^^^^^^^^^^^^^ missing `CONSTANT`, `Type`, `method` in implementation\n    |\n    = note: `CONSTANT` from trait: `const CONSTANT: u32;`\n    = note: `Type` from trait: `type Type;`"}, {"sha": "fb13f21fe00f70ecdfbdd4c5c7c7f0faa6ef653f", "filename": "src/test/ui/span/E0046.stderr", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2FE0046.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2FE0046.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -5,7 +5,7 @@ error[E0046]: not all trait items implemented, missing: `foo`\n    |     --------- `foo` from trait\n ...\n 17 | impl Foo for Bar {}\n-   | ^^^^^^^^^^^^^^^^^^^ missing `foo` in implementation\n+   | ^^^^^^^^^^^^^^^^ missing `foo` in implementation\n \n error: aborting due to previous error\n "}, {"sha": "6473b24dec5b32dc1c3e021e6a30863c7b3733cf", "filename": "src/test/ui/span/impl-wrong-item-for-trait.stderr", "status": "modified", "additions": 14, "deletions": 31, "changes": 45, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fimpl-wrong-item-for-trait.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -16,16 +16,11 @@ error[E0323]: item `bar` is an associated const, which doesn't match its trait `\n error[E0046]: not all trait items implemented, missing: `bar`\n   --> $DIR/impl-wrong-item-for-trait.rs:21:1\n    |\n-15 |       fn bar(&self);\n-   |       -------------- `bar` from trait\n+15 |     fn bar(&self);\n+   |     -------------- `bar` from trait\n ...\n-21 | / impl Foo for FooConstForMethod {\n-22 | |     //~^ ERROR E0046\n-23 | |     const bar: u64 = 1;\n-24 | |     //~^ ERROR E0323\n-25 | |     const MY_CONST: u32 = 1;\n-26 | | }\n-   | |_^ missing `bar` in implementation\n+21 | impl Foo for FooConstForMethod {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `bar` in implementation\n \n error[E0324]: item `MY_CONST` is an associated method, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:33:5\n@@ -39,16 +34,11 @@ error[E0324]: item `MY_CONST` is an associated method, which doesn't match its t\n error[E0046]: not all trait items implemented, missing: `MY_CONST`\n   --> $DIR/impl-wrong-item-for-trait.rs:30:1\n    |\n-16 |       const MY_CONST: u32;\n-   |       -------------------- `MY_CONST` from trait\n+16 |     const MY_CONST: u32;\n+   |     -------------------- `MY_CONST` from trait\n ...\n-30 | / impl Foo for FooMethodForConst {\n-31 | |     //~^ ERROR E0046\n-32 | |     fn bar(&self) {}\n-33 | |     fn MY_CONST() {}\n-34 | |     //~^ ERROR E0324\n-35 | | }\n-   | |_^ missing `MY_CONST` in implementation\n+30 | impl Foo for FooMethodForConst {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `MY_CONST` in implementation\n \n error[E0325]: item `bar` is an associated type, which doesn't match its trait `Foo`\n   --> $DIR/impl-wrong-item-for-trait.rs:41:5\n@@ -62,24 +52,17 @@ error[E0325]: item `bar` is an associated type, which doesn't match its trait `F\n error[E0046]: not all trait items implemented, missing: `bar`\n   --> $DIR/impl-wrong-item-for-trait.rs:39:1\n    |\n-15 |       fn bar(&self);\n-   |       -------------- `bar` from trait\n+15 |     fn bar(&self);\n+   |     -------------- `bar` from trait\n ...\n-39 | / impl Foo for FooTypeForMethod {\n-40 | |     //~^ ERROR E0046\n-41 | |     type bar = u64;\n-42 | |     //~^ ERROR E0325\n-43 | |     //~| ERROR E0437\n-44 | |     const MY_CONST: u32 = 1;\n-45 | | }\n-   | |_^ missing `bar` in implementation\n+39 | impl Foo for FooTypeForMethod {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `bar` in implementation\n \n error[E0046]: not all trait items implemented, missing: `fmt`\n   --> $DIR/impl-wrong-item-for-trait.rs:47:1\n    |\n-47 | / impl Debug for FooTypeForMethod {\n-48 | | }\n-   | |_^ missing `fmt` in implementation\n+47 | impl Debug for FooTypeForMethod {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `fmt` in implementation\n    |\n    = note: `fmt` from trait: `fn(&Self, &mut std::fmt::Formatter<'_>) -> std::result::Result<(), std::fmt::Error>`\n "}, {"sha": "60bf804ff30c4d2dcdcff8fede42303e405cd7c6", "filename": "src/test/ui/span/issue-23729.stderr", "status": "modified", "additions": 2, "deletions": 8, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23729.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1,14 +1,8 @@\n error[E0046]: not all trait items implemented, missing: `Item`\n   --> $DIR/issue-23729.rs:20:9\n    |\n-20 | /         impl Iterator for Recurrence {\n-21 | |             //~^ ERROR E0046\n-22 | |             #[inline]\n-23 | |             fn next(&mut self) -> Option<u64> {\n-...  |\n-34 | |             }\n-35 | |         }\n-   | |_________^ missing `Item` in implementation\n+20 |         impl Iterator for Recurrence {\n+   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Item` in implementation\n    |\n    = note: `Item` from trait: `type Item;`\n "}, {"sha": "d06d6c03616e31455722ece5f395b283c615f284", "filename": "src/test/ui/span/issue-23827.stderr", "status": "modified", "additions": 2, "deletions": 7, "changes": 9, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-23827.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1,13 +1,8 @@\n error[E0046]: not all trait items implemented, missing: `Output`\n   --> $DIR/issue-23827.rs:36:1\n    |\n-36 | / impl<C: Component> FnOnce<(C,)> for Prototype {\n-37 | |     //~^ ERROR E0046\n-38 | |     extern \"rust-call\" fn call_once(self, (comp,): (C,)) -> Prototype {\n-39 | |         Fn::call(&self, (comp,))\n-40 | |     }\n-41 | | }\n-   | |_^ missing `Output` in implementation\n+36 | impl<C: Component> FnOnce<(C,)> for Prototype {\n+   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ missing `Output` in implementation\n    |\n    = note: `Output` from trait: `type Output;`\n "}, {"sha": "58fb943fef827a249feedf12c8786bc5d40bd6d3", "filename": "src/test/ui/span/issue-24356.stderr", "status": "modified", "additions": 2, "deletions": 5, "changes": 7, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fspan%2Fissue-24356.stderr?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1,11 +1,8 @@\n error[E0046]: not all trait items implemented, missing: `Target`\n   --> $DIR/issue-24356.rs:30:9\n    |\n-30 | /         impl Deref for Thing {\n-31 | |             //~^ ERROR E0046\n-32 | |             fn deref(&self) -> i8 { self.0 }\n-33 | |         }\n-   | |_________^ missing `Target` in implementation\n+30 |         impl Deref for Thing {\n+   |         ^^^^^^^^^^^^^^^^^^^^ missing `Target` in implementation\n    |\n    = note: `Target` from trait: `type Target;`\n "}, {"sha": "3aee88136a1ff1ab6488b68ea1521483d157dd04", "filename": "src/tools/compiletest/src/runtest.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "raw_url": "https://github.com/rust-lang/rust/raw/81622c6b02536bdcf56145beb317da0d336703c1/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftools%2Fcompiletest%2Fsrc%2Fruntest.rs?ref=81622c6b02536bdcf56145beb317da0d336703c1", "patch": "@@ -1506,7 +1506,7 @@ impl<'test> TestCx<'test> {\n \n         if let Some(ref incremental_dir) = self.props.incremental_dir {\n             rustc.args(&[\n-                \"-Z\",\n+                \"-C\",\n                 &format!(\"incremental={}\", incremental_dir.display()),\n             ]);\n             rustc.args(&[\"-Z\", \"incremental-verify-ich\"]);"}]}