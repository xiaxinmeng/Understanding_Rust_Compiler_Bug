{"sha": "e08ed23a8061703b76230c15e053da67e7473a11", "node_id": "MDY6Q29tbWl0NzI0NzEyOmUwOGVkMjNhODA2MTcwM2I3NjIzMGMxNWUwNTNkYTY3ZTc0NzNhMTE=", "commit": {"author": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-29T23:04:22Z"}, "committer": {"name": "Graydon Hoare", "email": "graydon@mozilla.com", "date": "2010-07-29T23:04:22Z"}, "message": "Make note of new literal forms in docs.", "tree": {"sha": "d46130c9ec6db80c0ec30def75bbb9de61367b43", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/d46130c9ec6db80c0ec30def75bbb9de61367b43"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/e08ed23a8061703b76230c15e053da67e7473a11", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/e08ed23a8061703b76230c15e053da67e7473a11", "html_url": "https://github.com/rust-lang/rust/commit/e08ed23a8061703b76230c15e053da67e7473a11", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/e08ed23a8061703b76230c15e053da67e7473a11/comments", "author": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "committer": {"login": "graydon", "id": 14097, "node_id": "MDQ6VXNlcjE0MDk3", "avatar_url": "https://avatars.githubusercontent.com/u/14097?v=4", "gravatar_id": "", "url": "https://api.github.com/users/graydon", "html_url": "https://github.com/graydon", "followers_url": "https://api.github.com/users/graydon/followers", "following_url": "https://api.github.com/users/graydon/following{/other_user}", "gists_url": "https://api.github.com/users/graydon/gists{/gist_id}", "starred_url": "https://api.github.com/users/graydon/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/graydon/subscriptions", "organizations_url": "https://api.github.com/users/graydon/orgs", "repos_url": "https://api.github.com/users/graydon/repos", "events_url": "https://api.github.com/users/graydon/events{/privacy}", "received_events_url": "https://api.github.com/users/graydon/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "0b9c882d663d5ed5e761da4c15621f6753f63e79", "url": "https://api.github.com/repos/rust-lang/rust/commits/0b9c882d663d5ed5e761da4c15621f6753f63e79", "html_url": "https://github.com/rust-lang/rust/commit/0b9c882d663d5ed5e761da4c15621f6753f63e79"}], "stats": {"total": 46, "additions": 44, "deletions": 2}, "files": [{"sha": "3aa079d705f09e4e161e82c7f5cc66b7de9233c0", "filename": "doc/rust.texi", "status": "modified", "additions": 44, "deletions": 2, "changes": 46, "blob_url": "https://github.com/rust-lang/rust/blob/e08ed23a8061703b76230c15e053da67e7473a11/doc%2Frust.texi", "raw_url": "https://github.com/rust-lang/rust/raw/e08ed23a8061703b76230c15e053da67e7473a11/doc%2Frust.texi", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/doc%2Frust.texi?ref=e08ed23a8061703b76230c15e053da67e7473a11", "patch": "@@ -756,6 +756,19 @@ and @emph{underscores}.\n \n @end enumerate\n \n+By default, an integer literal is of type @code{int}. An integer literal may\n+be followed (immediately, without any spaces) by a @dfn{integer suffix}, which\n+changes the type of the literal. There are three kinds of integer literal\n+suffix:\n+\n+@enumerate\n+@item The @code{u} suffix gives the literal type @code{uint}.\n+@item The @code{g} suffix gives the literal type @code{big}.\n+@item Each of the signed and unsigned machine types @code{u8}, @code{i8},\n+@code{u16}, @code{i16}, @code{u32}, @code{i32}, @code{u64} and @code{i64}\n+give the literal the corresponding machine type.\n+@end enumerate\n+\n @sp 1\n A @dfn{floating-point literal} has one of two forms:\n @enumerate\n@@ -765,6 +778,13 @@ second @emph{decimal literal}.\n @item A single @emph{decimal literal} followed by an @emph{exponent}.\n @end enumerate\n \n+By default, a floating-point literal is of type @code{float}. A floating-point\n+literal may be followed (immediately, without any spaces) by a\n+@dfn{floating-point suffix}, which changes the type of the literal. There are\n+only two floating-point suffixes: @code{f32} and @code{f64}. Each of these\n+gives the floating point literal the associated type, rather than\n+@code{float}.\n+\n @sp 1\n A @dfn{hex digit} is either a @emph{decimal digit} or else a character in the\n ranges U+0061-U+0066 and U+0041-U+0046 (@code{'a'}-@code{'f'},\n@@ -779,6 +799,28 @@ followed by a trailing @emph{decimal literal}.\n \n A @dfn{sign character} is either U+002B or U+002D (@code{'+'} or @code{'-'}).\n \n+\n+Examples of integer literals of various forms:\n+@example\n+123;                               // type int\n+123u;                              // type uint\n+123_u;                             // type uint\n+0xff00;                            // type int\n+0xffu8;                            // type u8\n+0b1111_1111_1001_0000_i32;         // type i32\n+0xffff_ffff_ffff_ffff_ffff_ffffg;  // type big\n+@end example\n+\n+\n+Examples of floating-point literals of various forms:\n+@example\n+123.0;                             // type float\n+0.1;                               // type float\n+0.1f32;                            // type f32\n+12E+99_f64;                        // type f64\n+@end example\n+\n+\n @node       Ref.Lex.Text\n @subsection Ref.Lex.Text\n @c * Ref.Lex.Key::                 String and character tokens.\n@@ -1314,8 +1356,8 @@ Other operations act on box values as single-word-sized address values,\n automatically adjusting reference counts on the associated heap\n allocation. For these operations, to access the value held in the box requires\n an explicit dereference of the box value. Explicitly dereferencing a box is\n-indicated with the @emph{star} sigil @code{*}. Examples of such @dfn{explicit\n-dererence} operations are:\n+indicated with the unary @emph{star} operator @code{*}. Examples of such\n+@dfn{explicit dererence} operations are:\n @itemize\n @item copying box values (@code{x = y})\n @item passing box values to functions (@code{f(x,y)})"}]}