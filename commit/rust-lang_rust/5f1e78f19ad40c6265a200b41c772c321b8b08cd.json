{"sha": "5f1e78f19ad40c6265a200b41c772c321b8b08cd", "node_id": "MDY6Q29tbWl0NzI0NzEyOjVmMWU3OGYxOWFkNDBjNjI2NWEyMDBiNDFjNzcyYzMyMWI4YjA4Y2Q=", "commit": {"author": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-22T22:36:55Z"}, "committer": {"name": "Niko Matsakis", "email": "niko@alum.mit.edu", "date": "2018-02-22T22:57:08Z"}, "message": "move Termination trait to std::process", "tree": {"sha": "cfa88d292f71b6252f9864b4ff731bcb71424e23", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/cfa88d292f71b6252f9864b4ff731bcb71424e23"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/5f1e78f19ad40c6265a200b41c772c321b8b08cd", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/5f1e78f19ad40c6265a200b41c772c321b8b08cd", "html_url": "https://github.com/rust-lang/rust/commit/5f1e78f19ad40c6265a200b41c772c321b8b08cd", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/5f1e78f19ad40c6265a200b41c772c321b8b08cd/comments", "author": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "committer": {"login": "nikomatsakis", "id": 155238, "node_id": "MDQ6VXNlcjE1NTIzOA==", "avatar_url": "https://avatars.githubusercontent.com/u/155238?v=4", "gravatar_id": "", "url": "https://api.github.com/users/nikomatsakis", "html_url": "https://github.com/nikomatsakis", "followers_url": "https://api.github.com/users/nikomatsakis/followers", "following_url": "https://api.github.com/users/nikomatsakis/following{/other_user}", "gists_url": "https://api.github.com/users/nikomatsakis/gists{/gist_id}", "starred_url": "https://api.github.com/users/nikomatsakis/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/nikomatsakis/subscriptions", "organizations_url": "https://api.github.com/users/nikomatsakis/orgs", "repos_url": "https://api.github.com/users/nikomatsakis/repos", "events_url": "https://api.github.com/users/nikomatsakis/events{/privacy}", "received_events_url": "https://api.github.com/users/nikomatsakis/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "e446f706a89e3d5c26c01318bd70904d492ab8b2", "url": "https://api.github.com/repos/rust-lang/rust/commits/e446f706a89e3d5c26c01318bd70904d492ab8b2", "html_url": "https://github.com/rust-lang/rust/commit/e446f706a89e3d5c26c01318bd70904d492ab8b2"}], "stats": {"total": 160, "additions": 71, "deletions": 89}, "files": [{"sha": "bdda741633692c0297c696691f41f6f202f96d07", "filename": "src/libstd/lib.rs", "status": "modified", "additions": 0, "deletions": 4, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Flib.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -502,10 +502,6 @@ mod memchr;\n // compiler\n pub mod rt;\n \n-// The trait to support returning arbitrary types in the main function\n-#[unstable(feature = \"termination_trait\", issue = \"43301\")]\n-pub mod termination;\n-\n // Include a number of private modules that exist solely to provide\n // the rustdoc documentation for primitive types. Using `include!`\n // because rustdoc only looks for these modules at the crate level."}, {"sha": "e25599b8bd8712e6c13fafbf9ec27fe93509d329", "filename": "src/libstd/process.rs", "status": "modified", "additions": 67, "deletions": 0, "changes": 67, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Fprocess.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Fprocess.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fprocess.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -1392,6 +1392,73 @@ pub fn id() -> u32 {\n     ::sys::os::getpid()\n }\n \n+#[cfg(target_arch = \"wasm32\")]\n+mod exit {\n+    pub const SUCCESS: i32 = 0;\n+    pub const FAILURE: i32 = 1;\n+}\n+#[cfg(not(target_arch = \"wasm32\"))]\n+mod exit {\n+    use libc;\n+    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n+    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n+}\n+\n+/// A trait for implementing arbitrary return types in the `main` function.\n+///\n+/// The c-main function only supports to return integers as return type.\n+/// So, every type implementing the `Termination` trait has to be converted\n+/// to an integer.\n+///\n+/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n+/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n+#[cfg_attr(not(test), lang = \"termination\")]\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+#[rustc_on_unimplemented =\n+  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n+pub trait Termination {\n+    /// Is called to get the representation of the value as status code.\n+    /// This status code is returned to the operating system.\n+    fn report(self) -> i32;\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for () {\n+    fn report(self) -> i32 { exit::SUCCESS }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl<T: Termination, E: fmt::Debug> Termination for Result<T, E> {\n+    fn report(self) -> i32 {\n+        match self {\n+            Ok(val) => val.report(),\n+            Err(err) => {\n+                eprintln!(\"Error: {:?}\", err);\n+                exit::FAILURE\n+            }\n+        }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for ! {\n+    fn report(self) -> i32 { unreachable!(); }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for bool {\n+    fn report(self) -> i32 {\n+        if self { exit::SUCCESS } else { exit::FAILURE }\n+    }\n+}\n+\n+#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n+impl Termination for i32 {\n+    fn report(self) -> i32 {\n+        self\n+    }\n+}\n+\n #[cfg(all(test, not(any(target_os = \"cloudabi\", target_os = \"emscripten\"))))]\n mod tests {\n     use io::prelude::*;"}, {"sha": "e1392762a59dc7c76e5b73142b11b05a9702bae7", "filename": "src/libstd/rt.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Frt.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibstd%2Frt.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Frt.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -68,7 +68,7 @@ fn lang_start_internal(main: &(Fn() -> i32 + Sync + ::panic::RefUnwindSafe),\n \n #[cfg(not(test))]\n #[lang = \"start\"]\n-fn lang_start<T: ::termination::Termination + 'static>\n+fn lang_start<T: ::process::Termination + 'static>\n     (main: fn() -> T, argc: isize, argv: *const *const u8) -> isize\n {\n     lang_start_internal(&move || main().report(), argc, argv)"}, {"sha": "203870766a9ab2b46bc219ee1302c68394925f57", "filename": "src/libstd/termination.rs", "status": "removed", "additions": 0, "deletions": 81, "changes": 81, "blob_url": "https://github.com/rust-lang/rust/blob/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Ftermination.rs", "raw_url": "https://github.com/rust-lang/rust/raw/e446f706a89e3d5c26c01318bd70904d492ab8b2/src%2Flibstd%2Ftermination.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Ftermination.rs?ref=e446f706a89e3d5c26c01318bd70904d492ab8b2", "patch": "@@ -1,81 +0,0 @@\n-// Copyright 2017 The Rust Project Developers. See the COPYRIGHT\n-// file at the top-level directory of this distribution and at\n-// http://rust-lang.org/COPYRIGHT.\n-//\n-// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or\n-// http://www.apache.org/licenses/LICENSE-2.0> or the MIT license\n-// <LICENSE-MIT or http://opensource.org/licenses/MIT>, at your\n-// option. This file may not be copied, modified, or distributed\n-// except according to those terms.\n-\n-//! Defines the meaning of the return value from `main`, and hence\n-//! controls what happens in a Rust program after `main` returns.\n-\n-use fmt::Debug;\n-\n-#[cfg(target_arch = \"wasm32\")]\n-mod exit {\n-    pub const SUCCESS: i32 = 0;\n-    pub const FAILURE: i32 = 1;\n-}\n-#[cfg(not(target_arch = \"wasm32\"))]\n-mod exit {\n-    use libc;\n-    pub const SUCCESS: i32 = libc::EXIT_SUCCESS;\n-    pub const FAILURE: i32 = libc::EXIT_FAILURE;\n-}\n-\n-/// A trait for implementing arbitrary return types in the `main` function.\n-///\n-/// The c-main function only supports to return integers as return type.\n-/// So, every type implementing the `Termination` trait has to be converted\n-/// to an integer.\n-///\n-/// The default implementations are returning `libc::EXIT_SUCCESS` to indicate\n-/// a successful execution. In case of a failure, `libc::EXIT_FAILURE` is returned.\n-#[cfg_attr(not(test), lang = \"termination\")]\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-#[rustc_on_unimplemented =\n-  \"`main` can only return types that implement {Termination}, not `{Self}`\"]\n-pub trait Termination {\n-    /// Is called to get the representation of the value as status code.\n-    /// This status code is returned to the operating system.\n-    fn report(self) -> i32;\n-}\n-\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-impl Termination for () {\n-    fn report(self) -> i32 { exit::SUCCESS }\n-}\n-\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-impl<T: Termination, E: Debug> Termination for Result<T, E> {\n-    fn report(self) -> i32 {\n-        match self {\n-            Ok(val) => val.report(),\n-            Err(err) => {\n-                eprintln!(\"Error: {:?}\", err);\n-                exit::FAILURE\n-            }\n-        }\n-    }\n-}\n-\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-impl Termination for ! {\n-    fn report(self) -> i32 { unreachable!(); }\n-}\n-\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-impl Termination for bool {\n-    fn report(self) -> i32 {\n-        if self { exit::SUCCESS } else { exit::FAILURE }\n-    }\n-}\n-\n-#[unstable(feature = \"termination_trait_lib\", issue = \"43301\")]\n-impl Termination for i32 {\n-    fn report(self) -> i32 {\n-        self\n-    }\n-}"}, {"sha": "06a23cd8818eed141580628c5a088f57c75f358f", "filename": "src/libtest/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibtest%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Flibtest%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibtest%2Flib.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -68,9 +68,9 @@ use std::io::prelude::*;\n use std::io;\n use std::iter::repeat;\n use std::path::PathBuf;\n+use std::process::Termination;\n use std::sync::mpsc::{channel, Sender};\n use std::sync::{Arc, Mutex};\n-use std::termination::Termination;\n use std::thread;\n use std::time::{Instant, Duration};\n use std::borrow::Cow;"}, {"sha": "93e2561adf753fed810ab5ffddeb9295130ecac0", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-main-wrong-type.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-main-wrong-type.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -10,6 +10,6 @@\n #![feature(termination_trait)]\n \n fn main() -> char {\n-//~^ ERROR: the trait bound `char: std::termination::Termination` is not satisfied\n+//~^ ERROR: the trait bound `char: std::process::Termination` is not satisfied\n     ' '\n }"}, {"sha": "e87e0ceebf1b1a1263bcca8da59dba65d40919a7", "filename": "src/test/compile-fail/rfc-1937-termination-trait/termination-trait-not-satisfied.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "raw_url": "https://github.com/rust-lang/rust/raw/5f1e78f19ad40c6265a200b41c772c321b8b08cd/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fcompile-fail%2Frfc-1937-termination-trait%2Ftermination-trait-not-satisfied.rs?ref=5f1e78f19ad40c6265a200b41c772c321b8b08cd", "patch": "@@ -12,6 +12,6 @@\n \n struct ReturnType {}\n \n-fn main() -> ReturnType { //~ ERROR `ReturnType: std::termination::Termination` is not satisfied\n+fn main() -> ReturnType { //~ ERROR `ReturnType: std::process::Termination` is not satisfied\n     ReturnType {}\n }"}]}