{"sha": "cbaecee87cfceb2d21413ed431321e9cf480c176", "node_id": "MDY6Q29tbWl0NzI0NzEyOmNiYWVjZWU4N2NmY2ViMmQyMTQxM2VkNDMxMzIxZTljZjQ4MGMxNzY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-01-24T22:45:10Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-01-24T22:45:10Z"}, "message": "Rollup merge of #68111 - varkor:const-generics-type_name, r=oli-obk\n\nPrint constants in `type_name` for const generics\n\nFixes https://github.com/rust-lang/rust/issues/65372.\n\nr? @oli-obk as there may have been a deliberate decision not to in https://github.com/rust-lang/rust/commit/5b9848912a85e28d000602fc2e81bad9c2f2a981#diff-4ed1a72c0bfdf17be769ed520932cd02R80.", "tree": {"sha": "1810d27e19e1c73a8af0ec1912520899b76c12bd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/1810d27e19e1c73a8af0ec1912520899b76c12bd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/cbaecee87cfceb2d21413ed431321e9cf480c176", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJeK3N2CRBK7hj4Ov3rIwAAdHIIAFzKwjU4kxdjjTs88bmr5VX5\nifKdJHpr8chAXfXxD9Bbd6jQmIavGuNn6mPM10de6Rbvleqi2rX1rpOAVItYEzS5\nCcCCzuoHmIAX+BsFKBb3KlcpbdNdMWvgVKfPZmWBf7VjPpQvX3TXgNpAsi7pieQh\n/fi3+bpCeMgPgEc5CtiOdVTHHGE+3KfDuyug2c9pDr1TaaytLRVHxCF9HBd8snl0\nnq4it8R7Gehfcufx2JloeIf4cpkDUprV8dtE+5kExn9W4msjWqqzIjyoL4/Ocx+k\n+/ZeAI2fWRoZ+ErrmlbNQBXKVUS3NXhO1e19J57smDVPm7R9kgQcylGfO5tRszk=\n=T6Zf\n-----END PGP SIGNATURE-----\n", "payload": "tree 1810d27e19e1c73a8af0ec1912520899b76c12bd\nparent c2d141df59703393c0c683abc259f9a8c3be041a\nparent 50dd8eaeb9ebbccb8b79ff30d3068d0ee337cd2f\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1579905910 +0900\ncommitter GitHub <noreply@github.com> 1579905910 +0900\n\nRollup merge of #68111 - varkor:const-generics-type_name, r=oli-obk\n\nPrint constants in `type_name` for const generics\n\nFixes https://github.com/rust-lang/rust/issues/65372.\n\nr? @oli-obk as there may have been a deliberate decision not to in https://github.com/rust-lang/rust/commit/5b9848912a85e28d000602fc2e81bad9c2f2a981#diff-4ed1a72c0bfdf17be769ed520932cd02R80.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/cbaecee87cfceb2d21413ed431321e9cf480c176", "html_url": "https://github.com/rust-lang/rust/commit/cbaecee87cfceb2d21413ed431321e9cf480c176", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/cbaecee87cfceb2d21413ed431321e9cf480c176/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "c2d141df59703393c0c683abc259f9a8c3be041a", "url": "https://api.github.com/repos/rust-lang/rust/commits/c2d141df59703393c0c683abc259f9a8c3be041a", "html_url": "https://github.com/rust-lang/rust/commit/c2d141df59703393c0c683abc259f9a8c3be041a"}, {"sha": "50dd8eaeb9ebbccb8b79ff30d3068d0ee337cd2f", "url": "https://api.github.com/repos/rust-lang/rust/commits/50dd8eaeb9ebbccb8b79ff30d3068d0ee337cd2f", "html_url": "https://github.com/rust-lang/rust/commit/50dd8eaeb9ebbccb8b79ff30d3068d0ee337cd2f"}], "stats": {"total": 64, "additions": 52, "deletions": 12}, "files": [{"sha": "7dd3c8f4a72951d68c5a8f54c2c0a8ea2ac6c2fb", "filename": "src/librustc/ty/print/pretty.rs", "status": "modified", "additions": 30, "deletions": 8, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc%2Fty%2Fprint%2Fpretty.rs?ref=cbaecee87cfceb2d21413ed431321e9cf480c176", "patch": "@@ -831,14 +831,27 @@ pub trait PrettyPrinter<'tcx>:\n         Ok(self)\n     }\n \n-    fn pretty_print_const(mut self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+    fn pretty_print_const(\n+        mut self,\n+        ct: &'tcx ty::Const<'tcx>,\n+        print_ty: bool,\n+    ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n         if self.tcx().sess.verbose() {\n             p!(write(\"Const({:?}: {:?})\", ct.val, ct.ty));\n             return Ok(self);\n         }\n \n+        macro_rules! print_underscore {\n+            () => {{\n+                p!(write(\"_\"));\n+                if print_ty {\n+                    p!(write(\": \"), print(ct.ty));\n+                }\n+            }};\n+        }\n+\n         match (ct.val, &ct.ty.kind) {\n             (_, ty::FnDef(did, substs)) => p!(print_value_path(*did, substs)),\n             (ty::ConstKind::Unevaluated(did, substs, promoted), _) => {\n@@ -857,22 +870,27 @@ pub trait PrettyPrinter<'tcx>:\n                                 {\n                                     p!(write(\"{}\", snip))\n                                 } else {\n-                                    p!(write(\"_: \"), print(ct.ty))\n+                                    print_underscore!()\n                                 }\n                             } else {\n-                                p!(write(\"_: \"), print(ct.ty))\n+                                print_underscore!()\n                             }\n                         }\n                     }\n                 }\n             }\n-            (ty::ConstKind::Infer(..), _) => p!(write(\"_: \"), print(ct.ty)),\n+            (ty::ConstKind::Infer(..), _) => print_underscore!(),\n             (ty::ConstKind::Param(ParamConst { name, .. }), _) => p!(write(\"{}\", name)),\n-            (ty::ConstKind::Value(value), _) => return self.pretty_print_const_value(value, ct.ty),\n+            (ty::ConstKind::Value(value), _) => {\n+                return self.pretty_print_const_value(value, ct.ty, print_ty);\n+            }\n \n             _ => {\n                 // fallback\n-                p!(write(\"{:?} : \", ct.val), print(ct.ty))\n+                p!(write(\"{:?}\", ct.val));\n+                if print_ty {\n+                    p!(write(\" : \"), print(ct.ty));\n+                }\n             }\n         };\n         Ok(self)\n@@ -882,6 +900,7 @@ pub trait PrettyPrinter<'tcx>:\n         mut self,\n         ct: ConstValue<'tcx>,\n         ty: Ty<'tcx>,\n+        print_ty: bool,\n     ) -> Result<Self::Const, Self::Error> {\n         define_scoped_cx!(self);\n \n@@ -988,7 +1007,10 @@ pub trait PrettyPrinter<'tcx>:\n                 };\n                 if !printed {\n                     // fallback\n-                    p!(write(\"{:?} : \", ct), print(ty))\n+                    p!(write(\"{:?}\", ct));\n+                    if print_ty {\n+                        p!(write(\" : \"), print(ty));\n+                    }\n                 }\n             }\n         };\n@@ -1162,7 +1184,7 @@ impl<F: fmt::Write> Printer<'tcx> for FmtPrinter<'_, 'tcx, F> {\n     }\n \n     fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        self.pretty_print_const(ct)\n+        self.pretty_print_const(ct, true)\n     }\n \n     fn path_crate(mut self, cnum: CrateNum) -> Result<Self::Path, Self::Error> {"}, {"sha": "0dedda9bb6b73e67c0017ab9f063dd494124dd3f", "filename": "src/librustc_codegen_utils/symbol_names/legacy.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_codegen_utils%2Fsymbol_names%2Flegacy.rs?ref=cbaecee87cfceb2d21413ed431321e9cf480c176", "patch": "@@ -237,7 +237,7 @@ impl Printer<'tcx> for SymbolPrinter<'tcx> {\n         // only print integers\n         if let ty::ConstKind::Value(ConstValue::Scalar(Scalar::Raw { .. })) = ct.val {\n             if ct.ty.is_integral() {\n-                return self.pretty_print_const(ct);\n+                return self.pretty_print_const(ct, true);\n             }\n         }\n         self.write_str(\"_\")?;"}, {"sha": "cd8bf7085d1b1c4fb8c383e730373027caeb3e08", "filename": "src/librustc_mir/interpret/intrinsics/type_name.rs", "status": "modified", "additions": 2, "deletions": 3, "changes": 5, "blob_url": "https://github.com/rust-lang/rust/blob/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibrustc_mir%2Finterpret%2Fintrinsics%2Ftype_name.rs?ref=cbaecee87cfceb2d21413ed431321e9cf480c176", "patch": "@@ -69,9 +69,8 @@ impl<'tcx> Printer<'tcx> for AbsolutePathPrinter<'tcx> {\n         }\n     }\n \n-    fn print_const(self, _: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n-        // don't print constants to the user\n-        Ok(self)\n+    fn print_const(self, ct: &'tcx ty::Const<'tcx>) -> Result<Self::Const, Self::Error> {\n+        self.pretty_print_const(ct, false)\n     }\n \n     fn print_dyn_existential("}, {"sha": "28586426b44e9f736951a6dc297774ef81b4f6a8", "filename": "src/test/ui/const-generics/const-generic-type_name.rs", "status": "added", "additions": 11, "deletions": 0, "changes": 11, "blob_url": "https://github.com/rust-lang/rust/blob/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "raw_url": "https://github.com/rust-lang/rust/raw/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.rs?ref=cbaecee87cfceb2d21413ed431321e9cf480c176", "patch": "@@ -0,0 +1,11 @@\n+// run-pass\n+\n+#![feature(const_generics)]\n+//~^ WARN the feature `const_generics` is incomplete and may cause the compiler to crash\n+\n+#[derive(Debug)]\n+struct S<const N: usize>;\n+\n+fn main() {\n+    assert_eq!(std::any::type_name::<S<3>>(), \"const_generic_type_name::S<3usize>\");\n+}"}, {"sha": "6b60a77effea50bc665db39c09fd8f04302caa22", "filename": "src/test/ui/const-generics/const-generic-type_name.stderr", "status": "added", "additions": 8, "deletions": 0, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/cbaecee87cfceb2d21413ed431321e9cf480c176/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Fconst-generic-type_name.stderr?ref=cbaecee87cfceb2d21413ed431321e9cf480c176", "patch": "@@ -0,0 +1,8 @@\n+warning: the feature `const_generics` is incomplete and may cause the compiler to crash\n+  --> $DIR/const-generic-type_name.rs:3:12\n+   |\n+LL | #![feature(const_generics)]\n+   |            ^^^^^^^^^^^^^^\n+   |\n+   = note: `#[warn(incomplete_features)]` on by default\n+"}]}