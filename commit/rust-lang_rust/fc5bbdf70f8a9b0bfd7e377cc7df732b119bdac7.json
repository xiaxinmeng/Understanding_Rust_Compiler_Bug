{"sha": "fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "node_id": "MDY6Q29tbWl0NzI0NzEyOmZjNWJiZGY3MGY4YTliMGJmZDdlMzc3Y2M3ZGY3MzJiMTE5YmRhYzc=", "commit": {"author": {"name": "Kevin Yap", "email": "me@kevinyap.ca", "date": "2015-01-23T01:54:49Z"}, "committer": {"name": "Kevin Yap", "email": "me@kevinyap.ca", "date": "2015-01-23T07:04:07Z"}, "message": "Make `make tidy` Python scripts more idiomatic\n\nAlso makes errorck.py and tidy.py compatible with Python 3.", "tree": {"sha": "6cef992c84a0a17dee7fbc4c4d33344b0c73baff", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/6cef992c84a0a17dee7fbc4c4d33344b0c73baff"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "html_url": "https://github.com/rust-lang/rust/commit/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/comments", "author": {"login": "iKevinY", "id": 2434728, "node_id": "MDQ6VXNlcjI0MzQ3Mjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2434728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iKevinY", "html_url": "https://github.com/iKevinY", "followers_url": "https://api.github.com/users/iKevinY/followers", "following_url": "https://api.github.com/users/iKevinY/following{/other_user}", "gists_url": "https://api.github.com/users/iKevinY/gists{/gist_id}", "starred_url": "https://api.github.com/users/iKevinY/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iKevinY/subscriptions", "organizations_url": "https://api.github.com/users/iKevinY/orgs", "repos_url": "https://api.github.com/users/iKevinY/repos", "events_url": "https://api.github.com/users/iKevinY/events{/privacy}", "received_events_url": "https://api.github.com/users/iKevinY/received_events", "type": "User", "site_admin": false}, "committer": {"login": "iKevinY", "id": 2434728, "node_id": "MDQ6VXNlcjI0MzQ3Mjg=", "avatar_url": "https://avatars.githubusercontent.com/u/2434728?v=4", "gravatar_id": "", "url": "https://api.github.com/users/iKevinY", "html_url": "https://github.com/iKevinY", "followers_url": "https://api.github.com/users/iKevinY/followers", "following_url": "https://api.github.com/users/iKevinY/following{/other_user}", "gists_url": "https://api.github.com/users/iKevinY/gists{/gist_id}", "starred_url": "https://api.github.com/users/iKevinY/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/iKevinY/subscriptions", "organizations_url": "https://api.github.com/users/iKevinY/orgs", "repos_url": "https://api.github.com/users/iKevinY/repos", "events_url": "https://api.github.com/users/iKevinY/events{/privacy}", "received_events_url": "https://api.github.com/users/iKevinY/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "url": "https://api.github.com/repos/rust-lang/rust/commits/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e", "html_url": "https://github.com/rust-lang/rust/commit/d8d5e4d2178097fbe92b26e57d0e18dc1eedbe5e"}], "stats": {"total": 53, "additions": 21, "deletions": 32}, "files": [{"sha": "952e299265d85aba4ca5d6f76ca4b8c37ca2aa0a", "filename": "src/etc/errorck.py", "status": "modified", "additions": 14, "deletions": 25, "changes": 39, "blob_url": "https://github.com/rust-lang/rust/blob/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Ferrorck.py", "raw_url": "https://github.com/rust-lang/rust/raw/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Ferrorck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ferrorck.py?ref=fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "patch": "@@ -14,11 +14,10 @@\n import sys, os, re\n \n src_dir = sys.argv[1]\n-\n-errcode_map = { }\n+errcode_map = {}\n+error_re = re.compile(\"(E\\d\\d\\d\\d)\")\n \n for (dirpath, dirnames, filenames) in os.walk(src_dir):\n-\n     if \"src/test\" in dirpath or \"src/llvm\" in dirpath:\n         # Short circuit for fast\n         continue\n@@ -28,15 +27,12 @@\n             continue\n \n         path = os.path.join(dirpath, filename)\n-        line_num = 1\n-        with open(path, 'r') as f:\n-            for line in f:\n-\n-                p = re.compile(\"(E\\d\\d\\d\\d)\")\n-                m = p.search(line)\n-                if not m is None:\n-                    errcode = m.group(1)\n \n+        with open(path, 'r') as f:\n+            for line_num, line in enumerate(f, start=1):\n+                match = error_re.search(line)\n+                if match:\n+                    errcode = match.group(1)\n                     new_record = [(errcode, path, line_num, line)]\n                     existing = errcode_map.get(errcode)\n                     if existing is not None:\n@@ -45,26 +41,19 @@\n                     else:\n                         errcode_map[errcode] = new_record\n \n-                line_num += 1\n-\n errors = False\n all_errors = []\n-for errcode in errcode_map:\n-    entries = errcode_map[errcode]\n-    all_errors += [entries[0][0]]\n+\n+for errcode, entries in errcode_map.items():\n+    all_errors.append(entries[0][0])\n     if len(entries) > 1:\n-        print \"error: duplicate error code \" + errcode\n+        print(\"error: duplicate error code \" + errcode)\n         for entry in entries:\n-            print entry[1] + \": \" + str(entry[2])\n-            print entry[3]\n+            print(\"{1}: {2}\\n{3}\".format(*entry))\n         errors = True\n \n-print str(len(errcode_map)) + \" error codes\"\n-\n-all_errors.sort()\n-all_errors.reverse()\n-\n-print \"highest error code: \" + all_errors[0]\n+print(\"{0} error codes\".format(len(errcode_map)))\n+print(\"highest error code: \" + max(all_errors))\n \n if errors:\n     sys.exit(1)"}, {"sha": "44a50efcd09ee8c9362301fb106b5b142a80463f", "filename": "src/etc/licenseck.py", "status": "modified", "additions": 6, "deletions": 6, "changes": 12, "blob_url": "https://github.com/rust-lang/rust/blob/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Flicenseck.py", "raw_url": "https://github.com/rust-lang/rust/raw/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Flicenseck.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Flicenseck.py?ref=fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "patch": "@@ -57,18 +57,18 @@\n \n def check_license(name, contents):\n     # Whitelist check\n-    for exception in exceptions:\n-        if name.endswith(exception):\n-            return True\n+    if any(name.endswith(e) for e in exceptions):\n+        return True\n \n     # Xfail check\n     firstlineish = contents[:100]\n-    if firstlineish.find(\"ignore-license\") != -1:\n+    if \"ignore-license\" in firstlineish:\n         return True\n \n     # License check\n     boilerplate = contents[:500]\n-    if (boilerplate.find(license1) == -1 or boilerplate.find(license2) == -1) and \\\n-       (boilerplate.find(license3) == -1 or boilerplate.find(license4) == -1):\n+    if (license1 not in boilerplate or license2 not in boilerplate) and \\\n+       (license3 not in boilerplate or license4 not in boilerplate):\n         return False\n+\n     return True"}, {"sha": "c65b762e5173168c880f18dc5209b99e62c65226", "filename": "src/etc/tidy.py", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Ftidy.py", "raw_url": "https://github.com/rust-lang/rust/raw/fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7/src%2Fetc%2Ftidy.py", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Fetc%2Ftidy.py?ref=fc5bbdf70f8a9b0bfd7e377cc7df732b119bdac7", "patch": "@@ -113,7 +113,7 @@ def do_license_check(name, contents):\n     if current_name != \"\":\n         do_license_check(current_name, current_contents)\n \n-except UnicodeDecodeError, e:\n+except UnicodeDecodeError as e:\n     report_err(\"UTF-8 decoding error \" + str(e))\n \n "}]}