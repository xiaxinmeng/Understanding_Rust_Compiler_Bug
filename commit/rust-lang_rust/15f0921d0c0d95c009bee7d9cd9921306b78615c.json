{"sha": "15f0921d0c0d95c009bee7d9cd9921306b78615c", "node_id": "MDY6Q29tbWl0NzI0NzEyOjE1ZjA5MjFkMGMwZDk1YzAwOWJlZTdkOWNkOTkyMTMwNmI3ODYxNWM=", "commit": {"author": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2020-11-22T12:57:11Z"}, "committer": {"name": "Bastian Kauschke", "email": "bastian_kauschke@hotmail.de", "date": "2021-01-16T18:27:42Z"}, "message": "correctly deal with late-bound lifetimes in anon consts", "tree": {"sha": "c0631ec0f0c48ade42fbb04694607680b9ebf0f5", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/c0631ec0f0c48ade42fbb04694607680b9ebf0f5"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/15f0921d0c0d95c009bee7d9cd9921306b78615c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/15f0921d0c0d95c009bee7d9cd9921306b78615c", "html_url": "https://github.com/rust-lang/rust/commit/15f0921d0c0d95c009bee7d9cd9921306b78615c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/15f0921d0c0d95c009bee7d9cd9921306b78615c/comments", "author": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "committer": {"login": "lcnr", "id": 29864074, "node_id": "MDQ6VXNlcjI5ODY0MDc0", "avatar_url": "https://avatars.githubusercontent.com/u/29864074?v=4", "gravatar_id": "", "url": "https://api.github.com/users/lcnr", "html_url": "https://github.com/lcnr", "followers_url": "https://api.github.com/users/lcnr/followers", "following_url": "https://api.github.com/users/lcnr/following{/other_user}", "gists_url": "https://api.github.com/users/lcnr/gists{/gist_id}", "starred_url": "https://api.github.com/users/lcnr/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/lcnr/subscriptions", "organizations_url": "https://api.github.com/users/lcnr/orgs", "repos_url": "https://api.github.com/users/lcnr/repos", "events_url": "https://api.github.com/users/lcnr/events{/privacy}", "received_events_url": "https://api.github.com/users/lcnr/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "63a83c5f55801b17b77adf690db397d17c706c48", "url": "https://api.github.com/repos/rust-lang/rust/commits/63a83c5f55801b17b77adf690db397d17c706c48", "html_url": "https://github.com/rust-lang/rust/commit/63a83c5f55801b17b77adf690db397d17c706c48"}], "stats": {"total": 79, "additions": 71, "deletions": 8}, "files": [{"sha": "0a9f740d53ac0b64d81640176a6582f4c5e75bf7", "filename": "compiler/rustc_middle/src/query/mod.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fquery%2Fmod.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -1316,7 +1316,7 @@ rustc_queries! {\n             desc { \"looking up a named region\" }\n         }\n         query is_late_bound_map(_: LocalDefId) ->\n-            Option<&'tcx FxHashSet<ItemLocalId>> {\n+            Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n             desc { \"testing if a region is late bound\" }\n         }\n         query object_lifetime_defaults_map(_: LocalDefId)"}, {"sha": "148ac604596045857eb5e51fd171b07125d64d94", "filename": "compiler/rustc_middle/src/ty/context.rs", "status": "modified", "additions": 2, "deletions": 1, "changes": 3, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcontext.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -2578,7 +2578,8 @@ impl<'tcx> TyCtxt<'tcx> {\n     }\n \n     pub fn is_late_bound(self, id: HirId) -> bool {\n-        self.is_late_bound_map(id.owner).map_or(false, |set| set.contains(&id.local_id))\n+        self.is_late_bound_map(id.owner)\n+            .map_or(false, |(owner, set)| owner == id.owner && set.contains(&id.local_id))\n     }\n \n     pub fn object_lifetime_defaults(self, id: HirId) -> Option<&'tcx [ObjectLifetimeDefault]> {"}, {"sha": "02d951b70e28d4c29402e63bff6d3d17c2b96692", "filename": "compiler/rustc_mir/src/borrow_check/universal_regions.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Fborrow_check%2Funiversal_regions.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -788,13 +788,13 @@ fn for_each_late_bound_region_defined_on<'tcx>(\n     fn_def_id: DefId,\n     mut f: impl FnMut(ty::Region<'tcx>),\n ) {\n-    if let Some(late_bounds) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n-        for late_bound in late_bounds.iter() {\n-            let hir_id = HirId { owner: fn_def_id.expect_local(), local_id: *late_bound };\n+    if let Some((owner, late_bounds)) = tcx.is_late_bound_map(fn_def_id.expect_local()) {\n+        for &late_bound in late_bounds.iter() {\n+            let hir_id = HirId { owner, local_id: late_bound };\n             let name = tcx.hir().name(hir_id);\n             let region_def_id = tcx.hir().local_def_id(hir_id);\n             let liberated_region = tcx.mk_region(ty::ReFree(ty::FreeRegion {\n-                scope: fn_def_id,\n+                scope: owner.to_def_id(),\n                 bound_region: ty::BoundRegionKind::BrNamed(region_def_id.to_def_id(), name),\n             }));\n             f(liberated_region);"}, {"sha": "1be06a446875bb9b927d9cba3ab313c464552b44", "filename": "compiler/rustc_resolve/src/late/lifetimes.rs", "status": "modified", "additions": 30, "deletions": 2, "changes": 32, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flate%2Flifetimes.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -11,7 +11,8 @@ use rustc_data_structures::fx::{FxHashMap, FxHashSet};\n use rustc_errors::{struct_span_err, Applicability, DiagnosticBuilder};\n use rustc_hir as hir;\n use rustc_hir::def::{DefKind, Res};\n-use rustc_hir::def_id::{CrateNum, DefId, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::def_id::{CrateNum, DefIdMap, LOCAL_CRATE};\n+use rustc_hir::hir_id::ItemLocalId;\n use rustc_hir::intravisit::{self, NestedVisitorMap, Visitor};\n use rustc_hir::{GenericArg, GenericParam, LifetimeName, Node, ParamName, QPath};\n use rustc_hir::{GenericParamKind, HirIdMap, HirIdSet, LifetimeParamKind};\n@@ -20,6 +21,7 @@ use rustc_middle::middle::resolve_lifetime::*;\n use rustc_middle::ty::{self, DefIdTree, GenericParamDefKind, TyCtxt};\n use rustc_middle::{bug, span_bug};\n use rustc_session::lint;\n+use rustc_span::def_id::{DefId, LocalDefId};\n use rustc_span::symbol::{kw, sym, Ident, Symbol};\n use rustc_span::Span;\n use std::borrow::Cow;\n@@ -284,7 +286,7 @@ pub fn provide(providers: &mut ty::query::Providers) {\n         resolve_lifetimes,\n \n         named_region_map: |tcx, id| tcx.resolve_lifetimes(LOCAL_CRATE).defs.get(&id),\n-        is_late_bound_map: |tcx, id| tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&id),\n+        is_late_bound_map,\n         object_lifetime_defaults_map: |tcx, id| {\n             tcx.resolve_lifetimes(LOCAL_CRATE).object_lifetime_defaults.get(&id)\n         },\n@@ -320,6 +322,32 @@ fn resolve_lifetimes(tcx: TyCtxt<'_>, for_krate: CrateNum) -> ResolveLifetimes {\n     rl\n }\n \n+fn is_late_bound_map<'tcx>(\n+    tcx: TyCtxt<'tcx>,\n+    def_id: LocalDefId,\n+) -> Option<(LocalDefId, &'tcx FxHashSet<ItemLocalId>)> {\n+    match tcx.def_kind(def_id) {\n+        DefKind::AnonConst => {\n+            let mut def_id = tcx\n+                .parent(def_id.to_def_id())\n+                .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));\n+            // We search for the next outer anon const or fn here\n+            // while skipping closures.\n+            //\n+            // Note that for `AnonConst` we still just recurse until we\n+            // find a function body, but who cares :shrug:\n+            while tcx.is_closure(def_id) {\n+                def_id = tcx\n+                    .parent(def_id)\n+                    .unwrap_or_else(|| bug!(\"anon const or closure without a parent\"));\n+            }\n+\n+            tcx.is_late_bound_map(def_id.expect_local())\n+        }\n+        _ => tcx.resolve_lifetimes(LOCAL_CRATE).late_bound.get(&def_id).map(|lt| (def_id, lt)),\n+    }\n+}\n+\n fn krate(tcx: TyCtxt<'_>) -> NamedRegionMap {\n     let krate = tcx.hir().krate();\n     let mut map = NamedRegionMap {"}, {"sha": "0aaeaffb4cb9db43a0459a46fb56378cb5c86ca8", "filename": "src/test/ui/const-generics/late-bound-vars/in_closure.rs", "status": "added", "additions": 18, "deletions": 0, "changes": 18, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fin_closure.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -0,0 +1,18 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+const fn inner<'a>() -> usize where &'a (): Sized {\n+    3\n+}\n+\n+fn test<'a>() {\n+    let _ = || {\n+        let _: [u8; inner::<'a>()];\n+        let _ = [0; inner::<'a>()];\n+    };\n+}\n+\n+fn main() {\n+    test();\n+}"}, {"sha": "2c411a3bdc5f36cd2273f535202c4611a35fe7c0", "filename": "src/test/ui/const-generics/late-bound-vars/simple.rs", "status": "added", "additions": 16, "deletions": 0, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/15f0921d0c0d95c009bee7d9cd9921306b78615c/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "raw_url": "https://github.com/rust-lang/rust/raw/15f0921d0c0d95c009bee7d9cd9921306b78615c/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconst-generics%2Flate-bound-vars%2Fsimple.rs?ref=15f0921d0c0d95c009bee7d9cd9921306b78615c", "patch": "@@ -0,0 +1,16 @@\n+// run-pass\n+#![feature(const_generics)]\n+#![allow(incomplete_features)]\n+\n+const fn inner<'a>() -> usize where &'a (): Sized {\n+    3\n+}\n+\n+fn test<'a>() {\n+    let _: [u8; inner::<'a>()];\n+    let _ = [0; inner::<'a>()];\n+}\n+\n+fn main() {\n+    test();\n+}"}]}