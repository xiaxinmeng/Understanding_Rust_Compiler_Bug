{"sha": "4b7d3634955ca6c7f4632d2c74ccc0137438e744", "node_id": "MDY6Q29tbWl0NzI0NzEyOjRiN2QzNjM0OTU1Y2E2YzdmNDYzMmQyYzc0Y2NjMDEzNzQzOGU3NDQ=", "commit": {"author": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-10T19:08:19Z"}, "committer": {"name": "Dan Luu", "email": "danluu@gmail.com", "date": "2013-04-10T19:08:19Z"}, "message": "Add examples for Rng functions.", "tree": {"sha": "0622be426a6d1c6e1700e90d846a01746e2ed03b", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/0622be426a6d1c6e1700e90d846a01746e2ed03b"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/4b7d3634955ca6c7f4632d2c74ccc0137438e744", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/4b7d3634955ca6c7f4632d2c74ccc0137438e744", "html_url": "https://github.com/rust-lang/rust/commit/4b7d3634955ca6c7f4632d2c74ccc0137438e744", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/4b7d3634955ca6c7f4632d2c74ccc0137438e744/comments", "author": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "committer": {"login": "danluu", "id": 157136, "node_id": "MDQ6VXNlcjE1NzEzNg==", "avatar_url": "https://avatars.githubusercontent.com/u/157136?v=4", "gravatar_id": "", "url": "https://api.github.com/users/danluu", "html_url": "https://github.com/danluu", "followers_url": "https://api.github.com/users/danluu/followers", "following_url": "https://api.github.com/users/danluu/following{/other_user}", "gists_url": "https://api.github.com/users/danluu/gists{/gist_id}", "starred_url": "https://api.github.com/users/danluu/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/danluu/subscriptions", "organizations_url": "https://api.github.com/users/danluu/orgs", "repos_url": "https://api.github.com/users/danluu/repos", "events_url": "https://api.github.com/users/danluu/events{/privacy}", "received_events_url": "https://api.github.com/users/danluu/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "2c649830be732bc0af585ba4ef54b2c6555b7c1c", "url": "https://api.github.com/repos/rust-lang/rust/commits/2c649830be732bc0af585ba4ef54b2c6555b7c1c", "html_url": "https://github.com/rust-lang/rust/commit/2c649830be732bc0af585ba4ef54b2c6555b7c1c"}], "stats": {"total": 184, "additions": 176, "deletions": 8}, "files": [{"sha": "df08c370546f76af749ceb0798b7be682778816f", "filename": "src/libcore/rand.rs", "status": "modified", "additions": 176, "deletions": 8, "changes": 184, "blob_url": "https://github.com/rust-lang/rust/blob/4b7d3634955ca6c7f4632d2c74ccc0137438e744/src%2Flibcore%2Frand.rs", "raw_url": "https://github.com/rust-lang/rust/raw/4b7d3634955ca6c7f4632d2c74ccc0137438e744/src%2Flibcore%2Frand.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibcore%2Frand.rs?ref=4b7d3634955ca6c7f4632d2c74ccc0137438e744", "patch": "@@ -150,7 +150,21 @@ pub struct Weighted<T> {\n \n pub trait RngUtil {\n     fn gen<T:Rand>(&self) -> T;\n-    /// Return a random int\n+    /**\n+     * Return a random int\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%d\",rng.gen_int())); \n+     * }\n+     * ~~~\n+     */\n     fn gen_int(&self) -> int;\n     fn gen_int_range(&self, start: int, end: int) -> int;\n     /// Return a random i8\n@@ -176,7 +190,21 @@ pub trait RngUtil {\n     fn gen_u32(&self) -> u32;\n     /// Return a random u64\n     fn gen_u64(&self) -> u64;\n-    /// Return a random float in the interval [0,1]\n+    /**\n+     * Return random float in the interval [0,1]\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%f\",rng.gen_float())); \n+     * }\n+     * ~~~\n+     */\n     fn gen_float(&self) -> float;\n     /// Return a random f32 in the interval [0,1]\n     fn gen_f32(&self) -> f32;\n@@ -188,38 +216,178 @@ pub trait RngUtil {\n      * Return a char randomly chosen from chars, failing if chars is empty\n      */\n     fn gen_char_from(&self, chars: &str) -> char;\n-    /// Return a random bool\n+    /**\n+     * Return a random bool\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%b\",rng.gen_bool()));\n+     * }\n+     * ~~~\n+     */\n     fn gen_bool(&self) -> bool;\n-    /// Return a bool with a 1 in n chance of true\n+    /**\n+     * Return a bool with a 1 in n chance of true\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%b\",rng.gen_weighted_bool(3))); \n+     * }\n+     * ~~~\n+     */\n     fn gen_weighted_bool(&self, n: uint) -> bool;\n     /**\n      * Return a random string of the specified length composed of A-Z,a-z,0-9\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(rng.gen_str(8)); \n+     * }\n+     * ~~~\n      */\n     fn gen_str(&self, len: uint) -> ~str;\n-    /// Return a random byte string of the specified length\n+    /**\n+     * Return a random byte string of the specified length\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%?\",rng.gen_bytes(8))); \n+     * }\n+     * ~~~\n+     */\n     fn gen_bytes(&self, len: uint) -> ~[u8];\n-    /// Choose an item randomly, failing if values is empty\n+    /// \n+    /**\n+     * Choose an item randomly, failing if values is empty\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%d\",rng.choose([1,2,4,8,16,32]))); \n+     * }\n+     * ~~~\n+     */\n     fn choose<T:Copy>(&self, values: &[T]) -> T;\n     /// Choose Some(item) randomly, returning None if values is empty\n     fn choose_option<T:Copy>(&self, values: &[T]) -> Option<T>;\n     /**\n      * Choose an item respecting the relative weights, failing if the sum of\n      * the weights is 0\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     println(fmt!(\"%c\",rng.choose_weighted(x)));\n+     * }\n+     * ~~~\n      */\n     fn choose_weighted<T:Copy>(&self, v : &[Weighted<T>]) -> T;\n     /**\n      * Choose Some(item) respecting the relative weights, returning none if\n      * the sum of the weights is 0\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     println(fmt!(\"%?\",rng.choose_weighted_option(x)));\n+     * }\n+     * ~~~\n      */\n     fn choose_weighted_option<T:Copy>(&self, v: &[Weighted<T>]) -> Option<T>;\n     /**\n      * Return a vec containing copies of the items, in order, where\n      * the weight of the item determines how many copies there are\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     let x = [rand::Weighted {weight: 4, item: 'a'}, rand::Weighted {weight: 2, item: 'b'}, rand::Weighted {weight: 2, item: 'c'}];\n+     *     println(fmt!(\"%?\",rng.weighted_vec(x)));\n+     * }\n+     * ~~~\n      */\n     fn weighted_vec<T:Copy>(&self, v: &[Weighted<T>]) -> ~[T];\n-    /// Shuffle a vec\n+    /**\n+     * Shuffle a vec\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     println(fmt!(\"%?\",rng.shuffle([1,2,3])));\n+     * }\n+     * ~~~\n+     */\n     fn shuffle<T:Copy>(&self, values: &[T]) -> ~[T];\n-    /// Shuffle a mutable vec in place\n+    /**\n+     * Shuffle a mutable vec in place\n+     *\n+     * *Example*\n+     *\n+     * ~~~\n+     *\n+     * use core::rand::RngUtil;  \n+     *\n+     * fn main() {\n+     *     rng = rand::Rng(); \n+     *     let mut y = [1,2,3];\n+     *     rng.shuffle_mut(y);\n+     *     println(fmt!(\"%?\",y));\n+     *     rng.shuffle_mut(y);\n+     *     println(fmt!(\"%?\",y));\n+     * }\n+     * ~~~\n+     */\n     fn shuffle_mut<T>(&self, values: &mut [T]);\n }\n "}]}