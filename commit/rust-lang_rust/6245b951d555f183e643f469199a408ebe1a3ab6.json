{"sha": "6245b951d555f183e643f469199a408ebe1a3ab6", "node_id": "MDY6Q29tbWl0NzI0NzEyOjYyNDViOTUxZDU1NWYxODNlNjQzZjQ2OTE5OWE0MDhlYmUxYTNhYjY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2020-10-22T00:45:25Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2020-10-22T00:45:25Z"}, "message": "Rollup merge of #77420 - ecstatic-morse:const-checking-raw-mut-ref, r=davidtwco\n\nUnify const-checking structured errors for `&mut` and `&raw mut`\n\nResolves #77414 as well as a FIXME.", "tree": {"sha": "e3979f606c18d7ecbd2fe535ff41202b3026f0de", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/e3979f606c18d7ecbd2fe535ff41202b3026f0de"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/6245b951d555f183e643f469199a408ebe1a3ab6", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJfkNYlCRBK7hj4Ov3rIwAAdHIIAF2vFjwN6XdatQit/LtzL0+e\nzUy86IzOEfJ84XgUaECSuApcjMmGpXlyENjuMgkRgsnnEXeq+peAsCchLLiYVkyC\nVJpK1aw6AgHUSj7TDuyJJMJvdZbbacOjzpDVqbEf3numSAtTwPckTQK2ByR0xbW1\nQAN1lK+5WuJfQnTKBzSfMRIirQSa2ekDYgSO9OoHxuumsLfid/ZMYDcd+wdiH1f/\nuOtnbmkSR/LCwCv196abHU3dXRIpKB+gbWrG9W3WQpknwUAYZJWdyBsPqxCGii/x\nTCkeW1jlUT8rJei2UcEzD6WdDMabTQ4J7wfT3ujDw2JZ84iZJ4OeYZAuMchMCKo=\n=MKOc\n-----END PGP SIGNATURE-----\n", "payload": "tree e3979f606c18d7ecbd2fe535ff41202b3026f0de\nparent 1eaadebb3dee31669c7649b32747381d11614fae\nparent c1494d60dbad39c218e7b0825bfe590cc22bf2fa\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1603327525 +0900\ncommitter GitHub <noreply@github.com> 1603327525 +0900\n\nRollup merge of #77420 - ecstatic-morse:const-checking-raw-mut-ref, r=davidtwco\n\nUnify const-checking structured errors for `&mut` and `&raw mut`\n\nResolves #77414 as well as a FIXME.\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/6245b951d555f183e643f469199a408ebe1a3ab6", "html_url": "https://github.com/rust-lang/rust/commit/6245b951d555f183e643f469199a408ebe1a3ab6", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/6245b951d555f183e643f469199a408ebe1a3ab6/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "1eaadebb3dee31669c7649b32747381d11614fae", "url": "https://api.github.com/repos/rust-lang/rust/commits/1eaadebb3dee31669c7649b32747381d11614fae", "html_url": "https://github.com/rust-lang/rust/commit/1eaadebb3dee31669c7649b32747381d11614fae"}, {"sha": "c1494d60dbad39c218e7b0825bfe590cc22bf2fa", "url": "https://api.github.com/repos/rust-lang/rust/commits/c1494d60dbad39c218e7b0825bfe590cc22bf2fa", "html_url": "https://github.com/rust-lang/rust/commit/c1494d60dbad39c218e7b0825bfe590cc22bf2fa"}], "stats": {"total": 86, "additions": 32, "deletions": 54}, "files": [{"sha": "bd51136b8db586e240d788ae571159fe8017291e", "filename": "compiler/rustc_mir/src/transform/check_consts/ops.rs", "status": "modified", "additions": 11, "deletions": 27, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fops.rs?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -224,7 +224,8 @@ impl NonConstOp for CellBorrow {\n }\n \n #[derive(Debug)]\n-pub struct MutBorrow;\n+pub struct MutBorrow(pub hir::BorrowKind);\n+\n impl NonConstOp for MutBorrow {\n     fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n         // Forbid everywhere except in const fn with a feature gate\n@@ -236,22 +237,28 @@ impl NonConstOp for MutBorrow {\n     }\n \n     fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n+        let raw = match self.0 {\n+            hir::BorrowKind::Raw => \"raw \",\n+            hir::BorrowKind::Ref => \"\",\n+        };\n+\n         let mut err = if ccx.const_kind() == hir::ConstContext::ConstFn {\n             feature_err(\n                 &ccx.tcx.sess.parse_sess,\n                 sym::const_mut_refs,\n                 span,\n-                &format!(\"mutable references are not allowed in {}s\", ccx.const_kind()),\n+                &format!(\"{}mutable references are not allowed in {}s\", raw, ccx.const_kind()),\n             )\n         } else {\n             let mut err = struct_span_err!(\n                 ccx.tcx.sess,\n                 span,\n                 E0764,\n-                \"mutable references are not allowed in {}s\",\n+                \"{}mutable references are not allowed in {}s\",\n+                raw,\n                 ccx.const_kind(),\n             );\n-            err.span_label(span, format!(\"`&mut` is only allowed in `const fn`\"));\n+            err.span_label(span, format!(\"`&{}mut` is only allowed in `const fn`\", raw));\n             err\n         };\n         if ccx.tcx.sess.teach(&err.get_code().unwrap()) {\n@@ -270,29 +277,6 @@ impl NonConstOp for MutBorrow {\n     }\n }\n \n-// FIXME(ecstaticmorse): Unify this with `MutBorrow`. It has basically the same issues.\n-#[derive(Debug)]\n-pub struct MutAddressOf;\n-impl NonConstOp for MutAddressOf {\n-    fn status_in_item(&self, ccx: &ConstCx<'_, '_>) -> Status {\n-        // Forbid everywhere except in const fn with a feature gate\n-        if ccx.const_kind() == hir::ConstContext::ConstFn {\n-            Status::Unstable(sym::const_mut_refs)\n-        } else {\n-            Status::Forbidden\n-        }\n-    }\n-\n-    fn build_error(&self, ccx: &ConstCx<'_, 'tcx>, span: Span) -> DiagnosticBuilder<'tcx> {\n-        feature_err(\n-            &ccx.tcx.sess.parse_sess,\n-            sym::const_mut_refs,\n-            span,\n-            &format!(\"`&raw mut` is not allowed in {}s\", ccx.const_kind()),\n-        )\n-    }\n-}\n-\n #[derive(Debug)]\n pub struct MutDeref;\n impl NonConstOp for MutDeref {"}, {"sha": "c991eb4bf5ecc7d80b94799669b4923a5acd8a59", "filename": "compiler/rustc_mir/src/transform/check_consts/validation.rs", "status": "modified", "additions": 4, "deletions": 2, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir%2Fsrc%2Ftransform%2Fcheck_consts%2Fvalidation.rs?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -525,14 +525,16 @@ impl Visitor<'tcx> for Validator<'mir, 'tcx> {\n \n                 if !is_allowed {\n                     if let BorrowKind::Mut { .. } = kind {\n-                        self.check_op(ops::MutBorrow);\n+                        self.check_op(ops::MutBorrow(hir::BorrowKind::Ref));\n                     } else {\n                         self.check_op(ops::CellBorrow);\n                     }\n                 }\n             }\n \n-            Rvalue::AddressOf(Mutability::Mut, _) => self.check_op(ops::MutAddressOf),\n+            Rvalue::AddressOf(Mutability::Mut, _) => {\n+                self.check_op(ops::MutBorrow(hir::BorrowKind::Raw))\n+            }\n \n             Rvalue::Ref(_, BorrowKind::Shared | BorrowKind::Shallow, ref place)\n             | Rvalue::AddressOf(Mutability::Not, ref place) => {"}, {"sha": "3788088b810b9e51e6ae444d0e470a63a3c55a5c", "filename": "src/test/ui/consts/const-address-of-mut.rs", "status": "modified", "additions": 4, "deletions": 4, "changes": 8, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.rs?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -1,14 +1,14 @@\n #![feature(raw_ref_op)]\n \n-const A: () = { let mut x = 2; &raw mut x; };           //~ ERROR `&raw mut` is not allowed\n+const A: () = { let mut x = 2; &raw mut x; };           //~ mutable reference\n \n-static B: () = { let mut x = 2; &raw mut x; };          //~ ERROR `&raw mut` is not allowed\n+static B: () = { let mut x = 2; &raw mut x; };          //~ mutable reference\n \n-static mut C: () = { let mut x = 2; &raw mut x; };      //~ ERROR `&raw mut` is not allowed\n+static mut C: () = { let mut x = 2; &raw mut x; };      //~ mutable reference\n \n const fn foo() {\n     let mut x = 0;\n-    let y = &raw mut x;                                 //~ ERROR `&raw mut` is not allowed\n+    let y = &raw mut x;                                 //~ mutable reference\n }\n \n fn main() {}"}, {"sha": "ec2dac5a7d16f951b036504cdd97239ba2b5f507", "filename": "src/test/ui/consts/const-address-of-mut.stderr", "status": "modified", "additions": 9, "deletions": 17, "changes": 26, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fconst-address-of-mut.stderr?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -1,31 +1,22 @@\n-error[E0658]: `&raw mut` is not allowed in constants\n+error[E0764]: raw mutable references are not allowed in constants\n   --> $DIR/const-address-of-mut.rs:3:32\n    |\n LL | const A: () = { let mut x = 2; &raw mut x; };\n-   |                                ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in statics\n+error[E0764]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:5:33\n    |\n LL | static B: () = { let mut x = 2; &raw mut x; };\n-   |                                 ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                 ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in statics\n+error[E0764]: raw mutable references are not allowed in statics\n   --> $DIR/const-address-of-mut.rs:7:37\n    |\n LL | static mut C: () = { let mut x = 2; &raw mut x; };\n-   |                                     ^^^^^^^^^^\n-   |\n-   = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n-   = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n+   |                                     ^^^^^^^^^^ `&raw mut` is only allowed in `const fn`\n \n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/const-address-of-mut.rs:11:13\n    |\n LL |     let y = &raw mut x;\n@@ -36,4 +27,5 @@ LL |     let y = &raw mut x;\n \n error: aborting due to 4 previous errors\n \n-For more information about this error, try `rustc --explain E0658`.\n+Some errors have detailed explanations: E0658, E0764.\n+For more information about an error, try `rustc --explain E0658`."}, {"sha": "40d1882d7d2ad0ebab630acde3acd3fc77bd6278", "filename": "src/test/ui/consts/min_const_fn/address_of.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.rs?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -2,15 +2,15 @@\n \n const fn mutable_address_of_in_const() {\n     let mut a = 0;\n-    let b = &raw mut a;         //~ ERROR `&raw mut` is not allowed\n+    let b = &raw mut a;         //~ ERROR mutable reference\n }\n \n struct X;\n \n impl X {\n     const fn inherent_mutable_address_of_in_const() {\n         let mut a = 0;\n-        let b = &raw mut a;     //~ ERROR `&raw mut` is not allowed\n+        let b = &raw mut a;     //~ ERROR mutable reference\n     }\n }\n "}, {"sha": "facc566513c28527112c0bccb7b6e9594d310a85", "filename": "src/test/ui/consts/min_const_fn/address_of.stderr", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "raw_url": "https://github.com/rust-lang/rust/raw/6245b951d555f183e643f469199a408ebe1a3ab6/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Ftest%2Fui%2Fconsts%2Fmin_const_fn%2Faddress_of.stderr?ref=6245b951d555f183e643f469199a408ebe1a3ab6", "patch": "@@ -1,4 +1,4 @@\n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/address_of.rs:5:13\n    |\n LL |     let b = &raw mut a;\n@@ -7,7 +7,7 @@ LL |     let b = &raw mut a;\n    = note: see issue #57349 <https://github.com/rust-lang/rust/issues/57349> for more information\n    = help: add `#![feature(const_mut_refs)]` to the crate attributes to enable\n \n-error[E0658]: `&raw mut` is not allowed in constant functions\n+error[E0658]: raw mutable references are not allowed in constant functions\n   --> $DIR/address_of.rs:13:17\n    |\n LL |         let b = &raw mut a;"}]}