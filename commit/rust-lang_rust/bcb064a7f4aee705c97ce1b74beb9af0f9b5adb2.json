{"sha": "bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "node_id": "C_kwDOAAsO6NoAKGJjYjA2NGE3ZjRhZWU3MDVjOTdjZTFiNzRiZWI5YWYwZjliNWFkYjI", "commit": {"author": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T01:27:11Z"}, "committer": {"name": "bors", "email": "bors@rust-lang.org", "date": "2023-01-29T01:27:11Z"}, "message": "Auto merge of #107406 - cjgillot:eliminate-witnesses, r=compiler-errors\n\nOnly compute mir_generator_witnesses query in drop_tracking_mir mode.\n\nAttempt to fix the perf regression in https://github.com/rust-lang/rust/pull/101692\n\nr? `@ghost`", "tree": {"sha": "5ac5ea7d8330ef48aa44d6dc2fd4467b1d52f24a", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/5ac5ea7d8330ef48aa44d6dc2fd4467b1d52f24a"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "html_url": "https://github.com/rust-lang/rust/commit/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/comments", "author": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "committer": {"login": "bors", "id": 3372342, "node_id": "MDQ6VXNlcjMzNzIzNDI=", "avatar_url": "https://avatars.githubusercontent.com/u/3372342?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors", "html_url": "https://github.com/bors", "followers_url": "https://api.github.com/users/bors/followers", "following_url": "https://api.github.com/users/bors/following{/other_user}", "gists_url": "https://api.github.com/users/bors/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors/subscriptions", "organizations_url": "https://api.github.com/users/bors/orgs", "repos_url": "https://api.github.com/users/bors/repos", "events_url": "https://api.github.com/users/bors/events{/privacy}", "received_events_url": "https://api.github.com/users/bors/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "9f82651a5fa4b1d96f55ce5507dd2aa204c7fb61", "url": "https://api.github.com/repos/rust-lang/rust/commits/9f82651a5fa4b1d96f55ce5507dd2aa204c7fb61", "html_url": "https://github.com/rust-lang/rust/commit/9f82651a5fa4b1d96f55ce5507dd2aa204c7fb61"}, {"sha": "4db4860503a9ace3c650b0efe55953926af844a5", "url": "https://api.github.com/repos/rust-lang/rust/commits/4db4860503a9ace3c650b0efe55953926af844a5", "html_url": "https://github.com/rust-lang/rust/commit/4db4860503a9ace3c650b0efe55953926af844a5"}], "stats": {"total": 37, "additions": 19, "deletions": 18}, "files": [{"sha": "29507ff3a86c1dc2f27e66027f67e46ceea53331", "filename": "compiler/rustc_metadata/src/rmeta/encoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fencoder.rs?ref=bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "patch": "@@ -1415,7 +1415,7 @@ impl<'a, 'tcx> EncodeContext<'a, 'tcx> {\n             if encode_opt {\n                 record!(self.tables.optimized_mir[def_id.to_def_id()] <- tcx.optimized_mir(def_id));\n \n-                if let DefKind::Generator = self.tcx.def_kind(def_id) {\n+                if let DefKind::Generator = self.tcx.def_kind(def_id) && tcx.sess.opts.unstable_opts.drop_tracking_mir {\n                     record!(self.tables.mir_generator_witnesses[def_id.to_def_id()] <- tcx.mir_generator_witnesses(def_id));\n                 }\n             }"}, {"sha": "a9fd95f45412f587fca98fcb66e1cf602126e4a9", "filename": "compiler/rustc_mir_transform/src/generator.rs", "status": "modified", "additions": 17, "deletions": 16, "changes": 33, "blob_url": "https://github.com/rust-lang/rust/blob/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Fgenerator.rs?ref=bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "patch": "@@ -1390,6 +1390,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     tcx: TyCtxt<'tcx>,\n     def_id: DefId,\n ) -> GeneratorLayout<'tcx> {\n+    assert!(tcx.sess.opts.unstable_opts.drop_tracking_mir);\n     let def_id = def_id.expect_local();\n \n     let (body, _) = tcx.mir_promoted(ty::WithOptConstParam::unknown(def_id));\n@@ -1400,15 +1401,8 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     let gen_ty = body.local_decls[ty::CAPTURE_STRUCT_LOCAL].ty;\n \n     // Get the interior types and substs which typeck computed\n-    let (upvars, interior, movable) = match *gen_ty.kind() {\n-        ty::Generator(_, substs, movability) => {\n-            let substs = substs.as_generator();\n-            (\n-                substs.upvar_tys().collect::<Vec<_>>(),\n-                substs.witness(),\n-                movability == hir::Movability::Movable,\n-            )\n-        }\n+    let movable = match *gen_ty.kind() {\n+        ty::Generator(_, _, movability) => movability == hir::Movability::Movable,\n         _ => span_bug!(body.span, \"unexpected generator type {}\", gen_ty),\n     };\n \n@@ -1422,11 +1416,7 @@ pub(crate) fn mir_generator_witnesses<'tcx>(\n     // `storage_liveness` tells us which locals have live storage at suspension points\n     let (_, generator_layout, _) = compute_layout(tcx, liveness_info, body);\n \n-    if tcx.sess.opts.unstable_opts.drop_tracking_mir {\n-        check_suspend_tys(tcx, &generator_layout, &body);\n-    } else {\n-        sanitize_witness(tcx, body, interior, upvars, &generator_layout);\n-    }\n+    check_suspend_tys(tcx, &generator_layout, &body);\n \n     generator_layout\n }\n@@ -1444,10 +1434,15 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         let gen_ty = body.local_decls.raw[1].ty;\n \n         // Get the discriminant type and substs which typeck computed\n-        let (discr_ty, movable) = match *gen_ty.kind() {\n+        let (discr_ty, upvars, interior, movable) = match *gen_ty.kind() {\n             ty::Generator(_, substs, movability) => {\n                 let substs = substs.as_generator();\n-                (substs.discr_ty(tcx), movability == hir::Movability::Movable)\n+                (\n+                    substs.discr_ty(tcx),\n+                    substs.upvar_tys().collect::<Vec<_>>(),\n+                    substs.witness(),\n+                    movability == hir::Movability::Movable,\n+                )\n             }\n             _ => {\n                 tcx.sess\n@@ -1524,6 +1519,12 @@ impl<'tcx> MirPass<'tcx> for StateTransform {\n         // `storage_liveness` tells us which locals have live storage at suspension points\n         let (remap, layout, storage_liveness) = compute_layout(tcx, liveness_info, body);\n \n+        if tcx.sess.opts.unstable_opts.validate_mir\n+            && !tcx.sess.opts.unstable_opts.drop_tracking_mir\n+        {\n+            sanitize_witness(tcx, body, interior, upvars, &layout);\n+        }\n+\n         let can_return = can_return(tcx, body, tcx.param_env(body.source.def_id()));\n \n         // Run the transformation which converts Places from Local to generator struct"}, {"sha": "fcb09fa02dd2a393cfc20025f942692200a5107b", "filename": "compiler/rustc_mir_transform/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_mir_transform%2Fsrc%2Flib.rs?ref=bcb064a7f4aee705c97ce1b74beb9af0f9b5adb2", "patch": "@@ -426,7 +426,7 @@ fn mir_drops_elaborated_and_const_checked(\n         return tcx.mir_drops_elaborated_and_const_checked(def);\n     }\n \n-    if tcx.generator_kind(def.did).is_some() {\n+    if tcx.generator_kind(def.did).is_some() && tcx.sess.opts.unstable_opts.drop_tracking_mir {\n         tcx.ensure().mir_generator_witnesses(def.did);\n     }\n     let mir_borrowck = tcx.mir_borrowck_opt_const_arg(def);"}]}