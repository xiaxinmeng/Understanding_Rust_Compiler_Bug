{"sha": "1deb1d3209556a47c08b62beee00897b73ff5d2a", "node_id": "MDY6Q29tbWl0NzI0NzEyOjFkZWIxZDMyMDk1NTZhNDdjMDhiNjJiZWVlMDA4OTdiNzNmZjVkMmE=", "commit": {"author": {"name": "bors[bot]", "email": "26634292+bors[bot]@users.noreply.github.com", "date": "2021-06-23T17:14:37Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-06-23T17:14:37Z"}, "message": "Merge #9390\n\n9390: fix: Improve type bound completions r=Veykril a=Veykril\n\nCloses #9389\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>", "tree": {"sha": "af51f1b1f0892aa5fea0ae5309c90d1be686165e", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/af51f1b1f0892aa5fea0ae5309c90d1be686165e"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/1deb1d3209556a47c08b62beee00897b73ff5d2a", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJg02v9CRBK7hj4Ov3rIwAA//wIAIH4Xy3/wRBoYDuyQy6wLPfD\nSJqXvnQa2Ml+m7PInMp6Wj2yCol1ur4qHqgHPiusRU3oaW6LuMEIf370b2bVl8f2\nzJKDCpI+3vCTzhuBKDDf8gMjWdjiNwiBQN6h4FUYl8qBiUJ375NjjsnZgOTfJ3/H\n9D8OkpiYElZk8MmGRBzBoJ5ivBf3al/K/EjQZ6O5ddGqlJ1dkQwCqhwi/8dyoPKp\ntYMwwoxETGK7xUiCFY83gMJ1mi018ioX3sEkvNmk+aQY9Opqk5D/NcQ8jbSPhjAb\noFfmu8qD+EFHk1nPjKlLEsl4NI3nHLVlW9W2EwxqWTi87/T4q8bZhC7VAVrdMAg=\n=esbr\n-----END PGP SIGNATURE-----\n", "payload": "tree af51f1b1f0892aa5fea0ae5309c90d1be686165e\nparent 3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b\nparent 85736f2dc9f42188e316f3aca8c391c48f5c32b1\nauthor bors[bot] <26634292+bors[bot]@users.noreply.github.com> 1624468477 +0000\ncommitter GitHub <noreply@github.com> 1624468477 +0000\n\nMerge #9390\n\n9390: fix: Improve type bound completions r=Veykril a=Veykril\n\nCloses #9389\r\nbors r+\n\nCo-authored-by: Lukas Wirth <lukastw97@gmail.com>\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/1deb1d3209556a47c08b62beee00897b73ff5d2a", "html_url": "https://github.com/rust-lang/rust/commit/1deb1d3209556a47c08b62beee00897b73ff5d2a", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/1deb1d3209556a47c08b62beee00897b73ff5d2a/comments", "author": {"login": "bors[bot]", "id": 26634292, "node_id": "MDM6Qm90MjY2MzQyOTI=", "avatar_url": "https://avatars.githubusercontent.com/in/1847?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bors%5Bbot%5D", "html_url": "https://github.com/apps/bors", "followers_url": "https://api.github.com/users/bors%5Bbot%5D/followers", "following_url": "https://api.github.com/users/bors%5Bbot%5D/following{/other_user}", "gists_url": "https://api.github.com/users/bors%5Bbot%5D/gists{/gist_id}", "starred_url": "https://api.github.com/users/bors%5Bbot%5D/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bors%5Bbot%5D/subscriptions", "organizations_url": "https://api.github.com/users/bors%5Bbot%5D/orgs", "repos_url": "https://api.github.com/users/bors%5Bbot%5D/repos", "events_url": "https://api.github.com/users/bors%5Bbot%5D/events{/privacy}", "received_events_url": "https://api.github.com/users/bors%5Bbot%5D/received_events", "type": "Bot", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b", "url": "https://api.github.com/repos/rust-lang/rust/commits/3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b", "html_url": "https://github.com/rust-lang/rust/commit/3381c2e4a8bcea2db3edd1741a7dd3fcdb15231b"}, {"sha": "85736f2dc9f42188e316f3aca8c391c48f5c32b1", "url": "https://api.github.com/repos/rust-lang/rust/commits/85736f2dc9f42188e316f3aca8c391c48f5c32b1", "html_url": "https://github.com/rust-lang/rust/commit/85736f2dc9f42188e316f3aca8c391c48f5c32b1"}], "stats": {"total": 281, "additions": 211, "deletions": 70}, "files": [{"sha": "d9754053470fd9c210745b1193b5641495925edd", "filename": "crates/ide_completion/src/completions/dot.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Fdot.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -33,7 +33,7 @@ fn complete_undotted_self(acc: &mut Completions, ctx: &CompletionContext) {\n     if !ctx.config.enable_self_on_the_fly {\n         return;\n     }\n-    if !ctx.is_trivial_path() || ctx.is_path_disallowed() {\n+    if !ctx.is_trivial_path() || ctx.is_path_disallowed() || !ctx.expects_expression() {\n         return;\n     }\n     ctx.scope.process_all_names(&mut |name, def| {"}, {"sha": "5abd6ee37f7e9d4d37fc5d1115a76ebdc8f1b993", "filename": "crates/ide_completion/src/completions/unqualified_path.rs", "status": "modified", "additions": 14, "deletions": 0, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fcompletions%2Funqualified_path.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -36,6 +36,20 @@ pub(crate) fn complete_unqualified_path(acc: &mut Completions, ctx: &CompletionC\n         return;\n     }\n \n+    if matches!(&ctx.completion_location, Some(ImmediateLocation::TypeBound)) {\n+        ctx.scope.process_all_names(&mut |name, res| {\n+            let add_resolution = match res {\n+                ScopeDef::MacroDef(mac) => mac.is_fn_like(),\n+                ScopeDef::ModuleDef(hir::ModuleDef::Trait(_) | hir::ModuleDef::Module(_)) => true,\n+                _ => false,\n+            };\n+            if add_resolution {\n+                acc.add_resolution(ctx, name, &res);\n+            }\n+        });\n+        return;\n+    }\n+\n     if !ctx.expects_type() {\n         if let Some(hir::Adt::Enum(e)) =\n             ctx.expected_type.as_ref().and_then(|ty| ty.strip_references().as_adt())"}, {"sha": "b673ce8c9ad2ddbb8fbb4478b747e6eb63f549a3", "filename": "crates/ide_completion/src/patterns.rs", "status": "modified", "additions": 10, "deletions": 0, "changes": 10, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Fpatterns.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Fpatterns.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -36,6 +36,7 @@ pub(crate) enum ImmediateLocation {\n     IdentPat,\n     BlockExpr,\n     ItemList,\n+    TypeBound,\n     // Fake file ast node\n     Attribute(ast::Attr),\n     // Fake file ast node\n@@ -154,6 +155,13 @@ pub(crate) fn determine_location(\n         ast::NameLike::Lifetime(lt) => lt.syntax().clone(),\n     };\n \n+    match_ast! {\n+        match node {\n+            ast::TypeBoundList(_it) => return Some(ImmediateLocation::TypeBound),\n+            _ => (),\n+        }\n+    };\n+\n     let parent = match node.parent() {\n         Some(parent) => match ast::MacroCall::cast(parent.clone()) {\n             // When a path is being typed in an (Assoc)ItemList the parser will always emit a macro_call.\n@@ -195,6 +203,8 @@ pub(crate) fn determine_location(\n             },\n             ast::TupleField(_it) => ImmediateLocation::TupleField,\n             ast::TupleFieldList(_it) => ImmediateLocation::TupleField,\n+            ast::TypeBound(_it) => ImmediateLocation::TypeBound,\n+            ast::TypeBoundList(_it) => ImmediateLocation::TypeBound,\n             ast::AssocItemList(it) => match it.syntax().parent().map(|it| it.kind()) {\n                 Some(IMPL) => ImmediateLocation::Impl,\n                 Some(TRAIT) => ImmediateLocation::Trait,"}, {"sha": "d2a502b9f9fb305c038422e0e467ebbbf9f633c5", "filename": "crates/ide_completion/src/tests.rs", "status": "modified", "additions": 19, "deletions": 0, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -9,6 +9,7 @@ mod use_tree;\n mod items;\n mod pattern;\n mod type_pos;\n+mod predicate;\n \n use std::mem;\n \n@@ -28,6 +29,24 @@ use test_utils::assert_eq_text;\n \n use crate::{item::CompletionKind, CompletionConfig, CompletionItem};\n \n+/// Lots of basic item definitions\n+const BASE_FIXTURE: &str = r#\"\n+enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n+use self::Enum::TupleV;\n+mod module {}\n+\n+trait Trait {}\n+static STATIC: Unit = Unit;\n+const CONST: Unit = Unit;\n+struct Record { field: u32 }\n+struct Tuple(u32);\n+struct Unit;\n+#[macro_export]\n+macro_rules! makro {}\n+#[rustc_builtin_macro]\n+pub macro Clone {}\n+\"#;\n+\n pub(crate) const TEST_CONFIG: CompletionConfig = CompletionConfig {\n     enable_postfix_completions: true,\n     enable_imports_on_the_fly: true,"}, {"sha": "77f00e8e5c13297d56a64121d41b1238c5d431cc", "filename": "crates/ide_completion/src/tests/item_list.rs", "status": "modified", "additions": 14, "deletions": 24, "changes": 38, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitem_list.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -1,19 +1,9 @@\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"#[rustc_builtin_macro]\n-pub macro Clone {}\n-enum Enum { Variant }\n-struct Struct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-trait Trait {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -40,7 +30,7 @@ fn in_mod_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -68,9 +58,9 @@ fn in_source_file_item_list() {\n             sn tmod (Test module)\n             sn tfn (Test function)\n             sn macro_rules\n-            md bar\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)          #[macro_export] macro_rules! foo\n+            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n+            md module\n+            ma makro!(\u2026)        #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -122,8 +112,8 @@ fn in_qualified_path() {\n             kw enum\n             kw struct\n             kw union\n-            md bar\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            md module\n         \"##]],\n     )\n }\n@@ -184,9 +174,9 @@ fn in_impl_assoc_item_list() {\n             kw fn\n             kw const\n             kw type\n-            md bar\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n-            ma foo!(\u2026)    #[macro_export] macro_rules! foo\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n+            md module\n+            ma makro!(\u2026)  #[macro_export] macro_rules! makro\n         \"##]],\n     )\n }\n@@ -215,9 +205,9 @@ fn in_trait_assoc_item_list() {\n             kw fn\n             kw const\n             kw type\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            md module\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n         \"##]],\n     );\n }"}, {"sha": "ef2015107e3c359b61a48ab3f945215affc5297a", "filename": "crates/ide_completion/src/tests/items.rs", "status": "modified", "additions": 14, "deletions": 20, "changes": 34, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fitems.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -4,20 +4,10 @@\n //! in [crate::completions::mod_].\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"#[rustc_builtin_macro]\n-pub macro Clone {}\n-enum Enum { Variant }\n-struct Struct {}\n-#[macro_export]\n-macro_rules! foo {}\n-mod bar {}\n-const CONST: () = ();\n-trait Trait {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -30,10 +20,12 @@ impl Tra$0\n         expect![[r##\"\n             tt Trait\n             en Enum\n-            st Struct\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            st Record\n+            st Tuple\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            md module\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )\n@@ -48,10 +40,12 @@ impl Trait for Str$0\n         expect![[r##\"\n             tt Trait\n             en Enum\n-            st Struct\n-            md bar\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n-            ma foo!(\u2026) #[macro_export] macro_rules! foo\n+            st Record\n+            st Tuple\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            md module\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bt u32\n         \"##]],\n     )"}, {"sha": "9d70aca3c95c4f8171a29b721a28ee43d2245678", "filename": "crates/ide_completion/src/tests/pattern.rs", "status": "modified", "additions": 16, "deletions": 25, "changes": 41, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpattern.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -1,27 +1,15 @@\n //! Completions tests for pattern position.\n use expect_test::{expect, Expect};\n \n-use crate::tests::completion_list;\n+use crate::tests::{completion_list, BASE_FIXTURE};\n \n fn check(ra_fixture: &str, expect: Expect) {\n     let actual = completion_list(ra_fixture);\n     expect.assert_eq(&actual)\n }\n \n fn check_with(ra_fixture: &str, expect: Expect) {\n-    let base = r#\"\n-enum Enum { TupleV(u32), RecordV { field: u32 }, UnitV }\n-use self::Enum::TupleV;\n-mod module {}\n-\n-static STATIC: Unit = Unit;\n-const CONST: Unit = Unit;\n-struct Record { field: u32 }\n-struct Tuple(u32);\n-struct Unit\n-macro_rules! makro {}\n-\"#;\n-    let actual = completion_list(&format!(\"{}\\n{}\", base, ra_fixture));\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n     expect.assert_eq(&actual)\n }\n \n@@ -121,20 +109,21 @@ fn foo() {\n     if let a$0\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw mut\n+            en Enum\n             bn Record    Record { field$1 }$0\n             st Record\n-            en Enum\n             bn Tuple     Tuple($1)$0\n             st Tuple\n             md module\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n             bn TupleV    TupleV($1)$0\n             ev TupleV\n-            st Unit\n             ct CONST\n-            ma makro!(\u2026) macro_rules! makro\n-        \"#]],\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n     );\n }\n \n@@ -146,15 +135,16 @@ fn foo() {\n    let a$0\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw mut\n             bn Record    Record { field$1 }$0\n             st Record\n             bn Tuple     Tuple($1)$0\n             st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n-        \"#]],\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n     );\n }\n \n@@ -165,15 +155,16 @@ fn in_param() {\n fn foo(a$0) {\n }\n \"#,\n-        expect![[r#\"\n+        expect![[r##\"\n             kw mut\n             bn Record    Record { field$1 }: Record$0\n             st Record\n             bn Tuple     Tuple($1): Tuple$0\n             st Tuple\n             st Unit\n-            ma makro!(\u2026) macro_rules! makro\n-        \"#]],\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n     );\n }\n "}, {"sha": "2b8ba86b2384f872f799ed3b2bb6e890060cea80", "filename": "crates/ide_completion/src/tests/predicate.rs", "status": "added", "additions": 122, "deletions": 0, "changes": 122, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fpredicate.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -0,0 +1,122 @@\n+//! Completion tests for predicates and bounds.\n+use expect_test::{expect, Expect};\n+\n+use crate::tests::{completion_list, BASE_FIXTURE};\n+\n+fn check(ra_fixture: &str, expect: Expect) {\n+    let actual = completion_list(&format!(\"{}\\n{}\", BASE_FIXTURE, ra_fixture));\n+    expect.assert_eq(&actual)\n+}\n+\n+#[test]\n+fn predicate_start() {\n+    // FIXME: `for` kw\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where $0 {}\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            bt u32\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_type_pred() {\n+    // FIXME: only show traits, macros and modules\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where T: $0 {}\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            md module\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_lifetime_pred() {\n+    // FIXME: should only show lifetimes here\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where 'lt: $0 {}\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            md module\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn bound_for_for_pred() {\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where for<'a> T: $0 {}\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            md module\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn param_list_for_for_pred() {\n+    check(\n+        r#\"\n+struct Foo<'lt, T, const C: usize> where for<'a> $0 {}\n+\"#,\n+        expect![[r##\"\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            md module\n+            st Foo<\u2026>\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            bt u32\n+        \"##]],\n+    );\n+}\n+\n+#[test]\n+fn pred_on_fn_in_impl() {\n+    check(\n+        r#\"\n+impl Record {\n+    fn method(self) where $0 {}\n+}\n+\"#,\n+        expect![[r##\"\n+            sp Self\n+            tt Trait\n+            en Enum\n+            st Record\n+            st Tuple\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            md module\n+            st Unit\n+            ma makro!(\u2026) #[macro_export] macro_rules! makro\n+            bt u32\n+        \"##]],\n+    );\n+}"}, {"sha": "7ad679f10eab221f8476c0f1e2e15f0b2de89d1b", "filename": "crates/ide_completion/src/tests/use_tree.rs", "status": "modified", "additions": 1, "deletions": 0, "changes": 1, "blob_url": "https://github.com/rust-lang/rust/blob/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "raw_url": "https://github.com/rust-lang/rust/raw/1deb1d3209556a47c08b62beee00897b73ff5d2a/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_completion%2Fsrc%2Ftests%2Fuse_tree.rs?ref=1deb1d3209556a47c08b62beee00897b73ff5d2a", "patch": "@@ -1,3 +1,4 @@\n+//! Completions tests for use trees.\n use expect_test::{expect, Expect};\n \n use crate::tests::completion_list;"}]}