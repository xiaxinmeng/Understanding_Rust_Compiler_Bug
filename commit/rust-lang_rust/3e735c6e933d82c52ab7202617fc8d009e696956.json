{"sha": "3e735c6e933d82c52ab7202617fc8d009e696956", "node_id": "MDY6Q29tbWl0NzI0NzEyOjNlNzM1YzZlOTMzZDgyYzUyYWI3MjAyNjE3ZmM4ZDAwOWU2OTY5NTY=", "commit": {"author": {"name": "Yuki Okushi", "email": "huyuumi.dev@gmail.com", "date": "2021-01-10T07:56:05Z"}, "committer": {"name": "GitHub", "email": "noreply@github.com", "date": "2021-01-10T07:56:05Z"}, "message": "Rollup merge of #80850 - m-ou-se:rustc-builtin-macro-name, r=petrochenkov\n\nAllow #[rustc_builtin_macro = \"name\"]\n\nThis adds the option of specifying the name of a builtin macro in the `#[rustc_builtin_macro]` attribute: `#[rustc_builtin_macro = \"name\"]`.\n\nThis makes it possible to have both `std::panic!` and `core::panic!` as a builtin macro, by using different builtin macro names for each. This is needed to implement the edition-specific behaviour of the panic macros of RFC 3007.\n\nAlso removes `SyntaxExtension::is_derive_copy`, as the macro name (e.g. `sym::Copy`) is now tracked and provides that information directly.\n\nr? ``@petrochenkov``", "tree": {"sha": "8a3f99624f734d16b2405f640b0ba183236f8c7d", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/8a3f99624f734d16b2405f640b0ba183236f8c7d"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/3e735c6e933d82c52ab7202617fc8d009e696956", "comment_count": 0, "verification": {"verified": true, "reason": "valid", "signature": "-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJf+rMVCRBK7hj4Ov3rIwAAdHIIAAYT1qgAN6MaW77vRlt+P+O8\nFQSyKZ9/ypjRUb/16hq8PIDd8J8TGoypLmN7aLqDXdFTh/01+TsuWA7HFOgJw8XM\n+P9Ggr8RDXIStRztTJ+yfIY3LC6fV8ZWHul332lpHmRcI27N7ivIEsUKB3rLOjs6\ngq6/n9ACz3lzBciIw2gm/bf75oLlNriwuAN3aBJmjjr1YetJlQGOdYEZDYhi4jlK\nG8z9BUrfCQq95syGP9aP1xTnwFmv2J1dZ8M5o0ydhKIoRzfdgZrWFIRa4WN6gwFD\n6Epx2QLbQg95BtEd/uerSD2x6T1ATnYEcJ0B4ryDfsDH3n7YMRV/Y9hYKHYcw+4=\n=pmIr\n-----END PGP SIGNATURE-----\n", "payload": "tree 8a3f99624f734d16b2405f640b0ba183236f8c7d\nparent 5acac4c9797b701285a827bb734416dc3a31d78d\nparent b293bbaba007659495025b7db945684bb1fa5b71\nauthor Yuki Okushi <huyuumi.dev@gmail.com> 1610265365 +0900\ncommitter GitHub <noreply@github.com> 1610265365 +0900\n\nRollup merge of #80850 - m-ou-se:rustc-builtin-macro-name, r=petrochenkov\n\nAllow #[rustc_builtin_macro = \"name\"]\n\nThis adds the option of specifying the name of a builtin macro in the `#[rustc_builtin_macro]` attribute: `#[rustc_builtin_macro = \"name\"]`.\n\nThis makes it possible to have both `std::panic!` and `core::panic!` as a builtin macro, by using different builtin macro names for each. This is needed to implement the edition-specific behaviour of the panic macros of RFC 3007.\n\nAlso removes `SyntaxExtension::is_derive_copy`, as the macro name (e.g. `sym::Copy`) is now tracked and provides that information directly.\n\nr? ``@petrochenkov``\n"}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/3e735c6e933d82c52ab7202617fc8d009e696956", "html_url": "https://github.com/rust-lang/rust/commit/3e735c6e933d82c52ab7202617fc8d009e696956", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/3e735c6e933d82c52ab7202617fc8d009e696956/comments", "author": {"login": "JohnTitor", "id": 25030997, "node_id": "MDQ6VXNlcjI1MDMwOTk3", "avatar_url": "https://avatars.githubusercontent.com/u/25030997?v=4", "gravatar_id": "", "url": "https://api.github.com/users/JohnTitor", "html_url": "https://github.com/JohnTitor", "followers_url": "https://api.github.com/users/JohnTitor/followers", "following_url": "https://api.github.com/users/JohnTitor/following{/other_user}", "gists_url": "https://api.github.com/users/JohnTitor/gists{/gist_id}", "starred_url": "https://api.github.com/users/JohnTitor/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/JohnTitor/subscriptions", "organizations_url": "https://api.github.com/users/JohnTitor/orgs", "repos_url": "https://api.github.com/users/JohnTitor/repos", "events_url": "https://api.github.com/users/JohnTitor/events{/privacy}", "received_events_url": "https://api.github.com/users/JohnTitor/received_events", "type": "User", "site_admin": false}, "committer": {"login": "web-flow", "id": 19864447, "node_id": "MDQ6VXNlcjE5ODY0NDQ3", "avatar_url": "https://avatars.githubusercontent.com/u/19864447?v=4", "gravatar_id": "", "url": "https://api.github.com/users/web-flow", "html_url": "https://github.com/web-flow", "followers_url": "https://api.github.com/users/web-flow/followers", "following_url": "https://api.github.com/users/web-flow/following{/other_user}", "gists_url": "https://api.github.com/users/web-flow/gists{/gist_id}", "starred_url": "https://api.github.com/users/web-flow/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/web-flow/subscriptions", "organizations_url": "https://api.github.com/users/web-flow/orgs", "repos_url": "https://api.github.com/users/web-flow/repos", "events_url": "https://api.github.com/users/web-flow/events{/privacy}", "received_events_url": "https://api.github.com/users/web-flow/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "5acac4c9797b701285a827bb734416dc3a31d78d", "url": "https://api.github.com/repos/rust-lang/rust/commits/5acac4c9797b701285a827bb734416dc3a31d78d", "html_url": "https://github.com/rust-lang/rust/commit/5acac4c9797b701285a827bb734416dc3a31d78d"}, {"sha": "b293bbaba007659495025b7db945684bb1fa5b71", "url": "https://api.github.com/repos/rust-lang/rust/commits/b293bbaba007659495025b7db945684bb1fa5b71", "html_url": "https://github.com/rust-lang/rust/commit/b293bbaba007659495025b7db945684bb1fa5b71"}], "stats": {"total": 28, "additions": 13, "deletions": 15}, "files": [{"sha": "ed76d51231d0b1c9f0bf6f2380e12ada288068d3", "filename": "compiler/rustc_builtin_macros/src/lib.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_builtin_macros%2Fsrc%2Flib.rs?ref=3e735c6e933d82c52ab7202617fc8d009e696956", "patch": "@@ -48,7 +48,7 @@ pub fn register_builtin_macros(resolver: &mut dyn ResolverExpand, edition: Editi\n     let mut register = |name, kind| {\n         resolver.register_builtin_macro(\n             Ident::with_dummy_span(name),\n-            SyntaxExtension { is_builtin: true, ..SyntaxExtension::default(kind, edition) },\n+            SyntaxExtension::default(kind, edition),\n         )\n     };\n     macro register_bang($($name:ident: $f:expr,)*) {"}, {"sha": "c1953c4d37300ffd57bb0e39768419b20fcf6e1a", "filename": "compiler/rustc_expand/src/base.rs", "status": "modified", "additions": 6, "deletions": 8, "changes": 14, "blob_url": "https://github.com/rust-lang/rust/blob/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_expand%2Fsrc%2Fbase.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_expand%2Fsrc%2Fbase.rs?ref=3e735c6e933d82c52ab7202617fc8d009e696956", "patch": "@@ -728,9 +728,7 @@ pub struct SyntaxExtension {\n     pub edition: Edition,\n     /// Built-in macros have a couple of special properties like availability\n     /// in `#[no_implicit_prelude]` modules, so we have to keep this flag.\n-    pub is_builtin: bool,\n-    /// We have to identify macros providing a `Copy` impl early for compatibility reasons.\n-    pub is_derive_copy: bool,\n+    pub builtin_name: Option<Symbol>,\n }\n \n impl SyntaxExtension {\n@@ -758,8 +756,7 @@ impl SyntaxExtension {\n             deprecation: None,\n             helper_attrs: Vec::new(),\n             edition,\n-            is_builtin: false,\n-            is_derive_copy: false,\n+            builtin_name: None,\n             kind,\n         }\n     }\n@@ -785,7 +782,9 @@ impl SyntaxExtension {\n             }\n         }\n \n-        let is_builtin = sess.contains_name(attrs, sym::rustc_builtin_macro);\n+        let builtin_name = sess\n+            .find_by_name(attrs, sym::rustc_builtin_macro)\n+            .map(|a| a.value_str().unwrap_or(name));\n         let (stability, const_stability) = attr::find_stability(&sess, attrs, span);\n         if const_stability.is_some() {\n             sess.parse_sess\n@@ -803,8 +802,7 @@ impl SyntaxExtension {\n             deprecation: attr::find_deprecation(&sess, attrs).map(|(d, _)| d),\n             helper_attrs,\n             edition,\n-            is_builtin,\n-            is_derive_copy: is_builtin && name == sym::Copy,\n+            builtin_name,\n         }\n     }\n "}, {"sha": "3ed5320da73b372adcec4b87977a1a4521675cf9", "filename": "compiler/rustc_feature/src/builtin_attrs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_feature%2Fsrc%2Fbuiltin_attrs.rs?ref=3e735c6e933d82c52ab7202617fc8d009e696956", "patch": "@@ -442,7 +442,7 @@ pub const BUILTIN_ATTRIBUTES: &[BuiltinAttribute] = &[\n     // Internal attributes, Macro related:\n     // ==========================================================================\n \n-    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word), IMPL_DETAIL),\n+    rustc_attr!(rustc_builtin_macro, AssumedUsed, template!(Word, NameValueStr: \"name\"), IMPL_DETAIL),\n     rustc_attr!(rustc_proc_macro_decls, Normal, template!(Word), INTERNAL_UNSTABLE),\n     rustc_attr!(\n         rustc_macro_transparency, AssumedUsed,"}, {"sha": "bc6c70c26ae0e5ec2d8189872ae810efa4434dfb", "filename": "compiler/rustc_resolve/src/lib.rs", "status": "modified", "additions": 2, "deletions": 2, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_resolve%2Fsrc%2Flib.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Flib.rs?ref=3e735c6e933d82c52ab7202617fc8d009e696956", "patch": "@@ -1447,7 +1447,7 @@ impl<'a> Resolver<'a> {\n     }\n \n     fn is_builtin_macro(&mut self, res: Res) -> bool {\n-        self.get_macro(res).map_or(false, |ext| ext.is_builtin)\n+        self.get_macro(res).map_or(false, |ext| ext.builtin_name.is_some())\n     }\n \n     fn macro_def(&self, mut ctxt: SyntaxContext) -> DefId {\n@@ -2014,7 +2014,7 @@ impl<'a> Resolver<'a> {\n                 // The macro is a proc macro derive\n                 if let Some(def_id) = module.expansion.expn_data().macro_def_id {\n                     let ext = self.get_macro_by_def_id(def_id);\n-                    if !ext.is_builtin\n+                    if ext.builtin_name.is_none()\n                         && ext.macro_kind() == MacroKind::Derive\n                         && parent.expansion.outer_expn_is_descendant_of(span.ctxt())\n                     {"}, {"sha": "60a1fc8863132c97d5285e8473de22d00d238d6e", "filename": "compiler/rustc_resolve/src/macros.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "raw_url": "https://github.com/rust-lang/rust/raw/3e735c6e933d82c52ab7202617fc8d009e696956/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_resolve%2Fsrc%2Fmacros.rs?ref=3e735c6e933d82c52ab7202617fc8d009e696956", "patch": "@@ -285,7 +285,7 @@ impl<'a> ResolverExpand for Resolver<'a> {\n                                 helper_attrs.extend(\n                                     ext.helper_attrs.iter().map(|name| Ident::new(*name, span)),\n                                 );\n-                                if ext.is_derive_copy {\n+                                if ext.builtin_name == Some(sym::Copy) {\n                                     self.containers_deriving_copy.insert(invoc_id);\n                                 }\n                                 ext\n@@ -1089,9 +1089,9 @@ impl<'a> Resolver<'a> {\n             edition,\n         );\n \n-        if result.is_builtin {\n+        if let Some(builtin_name) = result.builtin_name {\n             // The macro was marked with `#[rustc_builtin_macro]`.\n-            if let Some(builtin_macro) = self.builtin_macros.get_mut(&item.ident.name) {\n+            if let Some(builtin_macro) = self.builtin_macros.get_mut(&builtin_name) {\n                 // The macro is a built-in, replace its expander function\n                 // while still taking everything else from the source code.\n                 // If we already loaded this builtin macro, give a better error message than 'no such builtin macro'."}]}