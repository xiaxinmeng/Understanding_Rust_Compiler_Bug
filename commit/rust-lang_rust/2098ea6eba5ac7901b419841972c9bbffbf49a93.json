{"sha": "2098ea6eba5ac7901b419841972c9bbffbf49a93", "node_id": "C_kwDOAAsO6NoAKDIwOThlYTZlYmE1YWM3OTAxYjQxOTg0MTk3MmM5YmJmZmJmNDlhOTM", "commit": {"author": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-22T23:11:59Z"}, "committer": {"name": "Mark Rousskov", "email": "mark.simulacrum@gmail.com", "date": "2022-02-22T23:11:59Z"}, "message": "Provide copy-free access to raw Decoder bytes", "tree": {"sha": "2c50ce2dfd1dd9ae41d2ed1921c35f911d918062", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/2c50ce2dfd1dd9ae41d2ed1921c35f911d918062"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2098ea6eba5ac7901b419841972c9bbffbf49a93", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2098ea6eba5ac7901b419841972c9bbffbf49a93", "html_url": "https://github.com/rust-lang/rust/commit/2098ea6eba5ac7901b419841972c9bbffbf49a93", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2098ea6eba5ac7901b419841972c9bbffbf49a93/comments", "author": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Mark-Simulacrum", "id": 5047365, "node_id": "MDQ6VXNlcjUwNDczNjU=", "avatar_url": "https://avatars.githubusercontent.com/u/5047365?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Mark-Simulacrum", "html_url": "https://github.com/Mark-Simulacrum", "followers_url": "https://api.github.com/users/Mark-Simulacrum/followers", "following_url": "https://api.github.com/users/Mark-Simulacrum/following{/other_user}", "gists_url": "https://api.github.com/users/Mark-Simulacrum/gists{/gist_id}", "starred_url": "https://api.github.com/users/Mark-Simulacrum/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Mark-Simulacrum/subscriptions", "organizations_url": "https://api.github.com/users/Mark-Simulacrum/orgs", "repos_url": "https://api.github.com/users/Mark-Simulacrum/repos", "events_url": "https://api.github.com/users/Mark-Simulacrum/events{/privacy}", "received_events_url": "https://api.github.com/users/Mark-Simulacrum/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "da3b2ca95636eea18c62089bae5e7443ecf94c9a", "url": "https://api.github.com/repos/rust-lang/rust/commits/da3b2ca95636eea18c62089bae5e7443ecf94c9a", "html_url": "https://github.com/rust-lang/rust/commit/da3b2ca95636eea18c62089bae5e7443ecf94c9a"}], "stats": {"total": 33, "additions": 12, "deletions": 21}, "files": [{"sha": "c88f3e73cff37255d14bbfffaf947d6189f76a09", "filename": "compiler/rustc_data_structures/src/fingerprint.rs", "status": "modified", "additions": 1, "deletions": 3, "changes": 4, "blob_url": "https://github.com/rust-lang/rust/blob/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_data_structures%2Fsrc%2Ffingerprint.rs?ref=2098ea6eba5ac7901b419841972c9bbffbf49a93", "patch": "@@ -153,9 +153,7 @@ impl<E: rustc_serialize::Encoder> Encodable<E> for Fingerprint {\n impl<D: rustc_serialize::Decoder> Decodable<D> for Fingerprint {\n     #[inline]\n     fn decode(d: &mut D) -> Self {\n-        let mut bytes = [0u8; 16];\n-        d.read_raw_bytes_into(&mut bytes);\n-        Fingerprint::from_le_bytes(bytes)\n+        Fingerprint::from_le_bytes(d.read_raw_bytes(16).try_into().unwrap())\n     }\n }\n "}, {"sha": "b715f6c3f1fc97284277bb64c245f3a63151bcae", "filename": "compiler/rustc_metadata/src/rmeta/decoder.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_metadata%2Fsrc%2Frmeta%2Fdecoder.rs?ref=2098ea6eba5ac7901b419841972c9bbffbf49a93", "patch": "@@ -316,7 +316,7 @@ impl<'a, 'tcx> DecodeContext<'a, 'tcx> {\n     }\n \n     #[inline]\n-    pub fn read_raw_bytes(&mut self, len: usize) -> &'a [u8] {\n+    pub fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n         self.opaque.read_raw_bytes(len)\n     }\n }"}, {"sha": "7a6cbea00d866ce7cf8d923e2384a3ee8e7e24b2", "filename": "compiler/rustc_middle/src/ty/codec.rs", "status": "modified", "additions": 3, "deletions": 3, "changes": 6, "blob_url": "https://github.com/rust-lang/rust/blob/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_middle%2Fsrc%2Fty%2Fcodec.rs?ref=2098ea6eba5ac7901b419841972c9bbffbf49a93", "patch": "@@ -485,12 +485,12 @@ macro_rules! implement_ty_decoder {\n                     read_f64 -> f64;\n                     read_f32 -> f32;\n                     read_char -> char;\n-                    read_str -> Cow<'_, str>;\n+                    read_str -> &str;\n                 }\n \n                 #[inline]\n-                fn read_raw_bytes_into(&mut self, bytes: &mut [u8]) {\n-                    self.opaque.read_raw_bytes_into(bytes)\n+                fn read_raw_bytes(&mut self, len: usize) -> &[u8] {\n+                    self.opaque.read_raw_bytes(len)\n                 }\n             }\n         }"}, {"sha": "1a71ee9038bcbee688930cb791539797e69cae3a", "filename": "compiler/rustc_serialize/src/opaque.rs", "status": "modified", "additions": 6, "deletions": 13, "changes": 19, "blob_url": "https://github.com/rust-lang/rust/blob/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fopaque.rs?ref=2098ea6eba5ac7901b419841972c9bbffbf49a93", "patch": "@@ -1,5 +1,5 @@\n use crate::leb128::{self, max_leb128_len};\n-use crate::serialize::{self, Encoder as _};\n+use crate::serialize::{self, Decoder as _, Encoder as _};\n use std::convert::TryInto;\n use std::fs::File;\n use std::io::{self, Write};\n@@ -548,13 +548,6 @@ impl<'a> Decoder<'a> {\n     pub fn advance(&mut self, bytes: usize) {\n         self.position += bytes;\n     }\n-\n-    #[inline]\n-    pub fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n-        let start = self.position;\n-        self.position += bytes;\n-        &self.data[start..self.position]\n-    }\n }\n \n macro_rules! read_leb128 {\n@@ -662,7 +655,7 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_str(&mut self) -> &str {\n+    fn read_str(&mut self) -> &'a str {\n         let len = self.read_usize();\n         let sentinel = self.data[self.position + len];\n         assert!(sentinel == STR_SENTINEL);\n@@ -674,10 +667,10 @@ impl<'a> serialize::Decoder for Decoder<'a> {\n     }\n \n     #[inline]\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]) {\n+    fn read_raw_bytes(&mut self, bytes: usize) -> &'a [u8] {\n         let start = self.position;\n-        self.position += s.len();\n-        s.copy_from_slice(&self.data[start..self.position]);\n+        self.position += bytes;\n+        &self.data[start..self.position]\n     }\n }\n \n@@ -745,10 +738,10 @@ impl<'a> serialize::Decodable<Decoder<'a>> for IntEncodedWithFixedSize {\n     fn decode(decoder: &mut Decoder<'a>) -> IntEncodedWithFixedSize {\n         let _start_pos = decoder.position();\n         let bytes = decoder.read_raw_bytes(IntEncodedWithFixedSize::ENCODED_SIZE);\n+        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         let _end_pos = decoder.position();\n         debug_assert_eq!((_end_pos - _start_pos), IntEncodedWithFixedSize::ENCODED_SIZE);\n \n-        let value = u64::from_le_bytes(bytes.try_into().unwrap());\n         IntEncodedWithFixedSize(value)\n     }\n }"}, {"sha": "7b6dd8b60f800fbfa1af7a32bcff5b20c9224629", "filename": "compiler/rustc_serialize/src/serialize.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2098ea6eba5ac7901b419841972c9bbffbf49a93/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/compiler%2Frustc_serialize%2Fsrc%2Fserialize.rs?ref=2098ea6eba5ac7901b419841972c9bbffbf49a93", "patch": "@@ -199,7 +199,7 @@ pub trait Decoder {\n     fn read_f32(&mut self) -> f32;\n     fn read_char(&mut self) -> char;\n     fn read_str(&mut self) -> &str;\n-    fn read_raw_bytes_into(&mut self, s: &mut [u8]);\n+    fn read_raw_bytes(&mut self, len: usize) -> &[u8];\n }\n \n /// Trait for types that can be serialized"}]}