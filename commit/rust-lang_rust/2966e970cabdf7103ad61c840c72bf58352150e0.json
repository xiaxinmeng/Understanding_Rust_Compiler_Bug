{"sha": "2966e970cabdf7103ad61c840c72bf58352150e0", "node_id": "MDY6Q29tbWl0NzI0NzEyOjI5NjZlOTcwY2FiZGY3MTAzYWQ2MWM4NDBjNzJiZjU4MzUyMTUwZTA=", "commit": {"author": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:27:52Z"}, "committer": {"name": "Alex Crichton", "email": "alex@alexcrichton.com", "date": "2014-05-20T00:27:52Z"}, "message": "std: Rebuild mpsc queue with Unsafe/&self\n\nThis removes the incorrect `&mut self` taken because it can alias among many\nthreads.", "tree": {"sha": "99c38070218c4f5e899d4a8bc5d35c9441e4f7ad", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/99c38070218c4f5e899d4a8bc5d35c9441e4f7ad"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/2966e970cabdf7103ad61c840c72bf58352150e0", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/2966e970cabdf7103ad61c840c72bf58352150e0", "html_url": "https://github.com/rust-lang/rust/commit/2966e970cabdf7103ad61c840c72bf58352150e0", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/2966e970cabdf7103ad61c840c72bf58352150e0/comments", "author": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "committer": {"login": "alexcrichton", "id": 64996, "node_id": "MDQ6VXNlcjY0OTk2", "avatar_url": "https://avatars.githubusercontent.com/u/64996?v=4", "gravatar_id": "", "url": "https://api.github.com/users/alexcrichton", "html_url": "https://github.com/alexcrichton", "followers_url": "https://api.github.com/users/alexcrichton/followers", "following_url": "https://api.github.com/users/alexcrichton/following{/other_user}", "gists_url": "https://api.github.com/users/alexcrichton/gists{/gist_id}", "starred_url": "https://api.github.com/users/alexcrichton/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/alexcrichton/subscriptions", "organizations_url": "https://api.github.com/users/alexcrichton/orgs", "repos_url": "https://api.github.com/users/alexcrichton/repos", "events_url": "https://api.github.com/users/alexcrichton/events{/privacy}", "received_events_url": "https://api.github.com/users/alexcrichton/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "7db02e20f2140530a9402f7d7452b10cac6fdf7b", "url": "https://api.github.com/repos/rust-lang/rust/commits/7db02e20f2140530a9402f7d7452b10cac6fdf7b", "html_url": "https://github.com/rust-lang/rust/commit/7db02e20f2140530a9402f7d7452b10cac6fdf7b"}], "stats": {"total": 17, "additions": 9, "deletions": 8}, "files": [{"sha": "23afb9487ec23d9464a3bd6bd34da97bd01e30ff", "filename": "src/libstd/sync/mpsc_queue.rs", "status": "modified", "additions": 9, "deletions": 8, "changes": 17, "blob_url": "https://github.com/rust-lang/rust/blob/2966e970cabdf7103ad61c840c72bf58352150e0/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "raw_url": "https://github.com/rust-lang/rust/raw/2966e970cabdf7103ad61c840c72bf58352150e0/src%2Flibstd%2Fsync%2Fmpsc_queue.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/src%2Flibstd%2Fsync%2Fmpsc_queue.rs?ref=2966e970cabdf7103ad61c840c72bf58352150e0", "patch": "@@ -45,6 +45,7 @@ use option::{Option, None, Some};\n use owned::Box;\n use ptr::RawPtr;\n use sync::atomics::{AtomicPtr, Release, Acquire, AcqRel, Relaxed};\n+use ty::Unsafe;\n \n /// A result of the `pop` function.\n pub enum PopResult<T> {\n@@ -69,7 +70,7 @@ struct Node<T> {\n /// popper at a time (many pushers are allowed).\n pub struct Queue<T> {\n     head: AtomicPtr<Node<T>>,\n-    tail: *mut Node<T>,\n+    tail: Unsafe<*mut Node<T>>,\n }\n \n impl<T> Node<T> {\n@@ -88,12 +89,12 @@ impl<T: Send> Queue<T> {\n         let stub = unsafe { Node::new(None) };\n         Queue {\n             head: AtomicPtr::new(stub),\n-            tail: stub,\n+            tail: Unsafe::new(stub),\n         }\n     }\n \n     /// Pushes a new value onto this queue.\n-    pub fn push(&mut self, t: T) {\n+    pub fn push(&self, t: T) {\n         unsafe {\n             let n = Node::new(Some(t));\n             let prev = self.head.swap(n, AcqRel);\n@@ -111,13 +112,13 @@ impl<T: Send> Queue<T> {\n     ///\n     /// This inconsistent state means that this queue does indeed have data, but\n     /// it does not currently have access to it at this time.\n-    pub fn pop(&mut self) -> PopResult<T> {\n+    pub fn pop(&self) -> PopResult<T> {\n         unsafe {\n-            let tail = self.tail;\n+            let tail = *self.tail.get();\n             let next = (*tail).next.load(Acquire);\n \n             if !next.is_null() {\n-                self.tail = next;\n+                *self.tail.get() = next;\n                 assert!((*tail).value.is_none());\n                 assert!((*next).value.is_some());\n                 let ret = (*next).value.take_unwrap();\n@@ -131,7 +132,7 @@ impl<T: Send> Queue<T> {\n \n     /// Attempts to pop data from this queue, but doesn't attempt too hard. This\n     /// will canonicalize inconsistent states to a `None` value.\n-    pub fn casual_pop(&mut self) -> Option<T> {\n+    pub fn casual_pop(&self) -> Option<T> {\n         match self.pop() {\n             Data(t) => Some(t),\n             Empty | Inconsistent => None,\n@@ -143,7 +144,7 @@ impl<T: Send> Queue<T> {\n impl<T: Send> Drop for Queue<T> {\n     fn drop(&mut self) {\n         unsafe {\n-            let mut cur = self.tail;\n+            let mut cur = *self.tail.get();\n             while !cur.is_null() {\n                 let next = (*cur).next.load(Relaxed);\n                 let _: Box<Node<T>> = mem::transmute(cur);"}]}