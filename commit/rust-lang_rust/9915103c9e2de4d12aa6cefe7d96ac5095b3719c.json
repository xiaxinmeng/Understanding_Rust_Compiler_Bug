{"sha": "9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "node_id": "C_kwDOAAsO6NoAKDk5MTUxMDNjOWUyZGU0ZDEyYWE2Y2VmZTdkOTZhYzUwOTViMzcxOWM", "commit": {"author": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:38:20Z"}, "committer": {"name": "Lukas Wirth", "email": "lukastw97@gmail.com", "date": "2021-12-14T11:38:20Z"}, "message": "Simplify", "tree": {"sha": "3ec662d2d9bef21ea7ec0f369d435cd4be5f42cd", "url": "https://api.github.com/repos/rust-lang/rust/git/trees/3ec662d2d9bef21ea7ec0f369d435cd4be5f42cd"}, "url": "https://api.github.com/repos/rust-lang/rust/git/commits/9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "comment_count": 0, "verification": {"verified": false, "reason": "unsigned", "signature": null, "payload": null}}, "url": "https://api.github.com/repos/rust-lang/rust/commits/9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "html_url": "https://github.com/rust-lang/rust/commit/9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "comments_url": "https://api.github.com/repos/rust-lang/rust/commits/9915103c9e2de4d12aa6cefe7d96ac5095b3719c/comments", "author": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "committer": {"login": "Veykril", "id": 3757771, "node_id": "MDQ6VXNlcjM3NTc3NzE=", "avatar_url": "https://avatars.githubusercontent.com/u/3757771?v=4", "gravatar_id": "", "url": "https://api.github.com/users/Veykril", "html_url": "https://github.com/Veykril", "followers_url": "https://api.github.com/users/Veykril/followers", "following_url": "https://api.github.com/users/Veykril/following{/other_user}", "gists_url": "https://api.github.com/users/Veykril/gists{/gist_id}", "starred_url": "https://api.github.com/users/Veykril/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/Veykril/subscriptions", "organizations_url": "https://api.github.com/users/Veykril/orgs", "repos_url": "https://api.github.com/users/Veykril/repos", "events_url": "https://api.github.com/users/Veykril/events{/privacy}", "received_events_url": "https://api.github.com/users/Veykril/received_events", "type": "User", "site_admin": false}, "parents": [{"sha": "536ed7c45198128bed4c0cb8d50afb09b44cba0a", "url": "https://api.github.com/repos/rust-lang/rust/commits/536ed7c45198128bed4c0cb8d50afb09b44cba0a", "html_url": "https://github.com/rust-lang/rust/commit/536ed7c45198128bed4c0cb8d50afb09b44cba0a"}], "stats": {"total": 18, "additions": 9, "deletions": 9}, "files": [{"sha": "79163ad4d0280604fc5834232667b42a3506c146", "filename": "crates/hir/src/source_analyzer.rs", "status": "modified", "additions": 8, "deletions": 8, "changes": 16, "blob_url": "https://github.com/rust-lang/rust/blob/9915103c9e2de4d12aa6cefe7d96ac5095b3719c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9915103c9e2de4d12aa6cefe7d96ac5095b3719c/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fhir%2Fsrc%2Fsource_analyzer.rs?ref=9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "patch": "@@ -291,15 +291,12 @@ impl SourceAnalyzer {\n             }\n         }\n \n-        if let Some(pat) = parent()\n-            .and_then(ast::RecordPat::cast)\n-            .map(ast::Pat::from)\n-            .or_else(|| parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from))\n-        {\n+        let record_pat = parent().and_then(ast::RecordPat::cast).map(ast::Pat::from);\n+        let tuple_struct_pat = || parent().and_then(ast::TupleStructPat::cast).map(ast::Pat::from);\n+        if let Some(pat) = record_pat.or_else(tuple_struct_pat) {\n             let pat_id = self.pat_id(&pat)?;\n-            if let Some(VariantId::EnumVariantId(variant)) =\n-                self.infer.as_ref()?.variant_resolution_for_pat(pat_id)\n-            {\n+            let variant_res_for_pat = self.infer.as_ref()?.variant_resolution_for_pat(pat_id);\n+            if let Some(VariantId::EnumVariantId(variant)) = variant_res_for_pat {\n                 return Some(PathResolution::Def(ModuleDef::Variant(variant.into())));\n             }\n         }\n@@ -335,6 +332,9 @@ impl SourceAnalyzer {\n                 }\n             }\n         } else if is_path_of_attr {\n+            // Case where we are resolving the final path segment of a path in an attribute\n+            // in this case we have to check for inert/builtin attributes and tools and prioritize\n+            // resolution of attributes over other namesapces\n             let name_ref = path.as_single_name_ref();\n             let builtin =\n                 name_ref.as_ref().map(ast::NameRef::text).as_deref().and_then(BuiltinAttr::by_name);"}, {"sha": "30ebf7828ae0a2461ac79f859edad1ada8400904", "filename": "crates/ide_db/src/defs.rs", "status": "modified", "additions": 1, "deletions": 1, "changes": 2, "blob_url": "https://github.com/rust-lang/rust/blob/9915103c9e2de4d12aa6cefe7d96ac5095b3719c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "raw_url": "https://github.com/rust-lang/rust/raw/9915103c9e2de4d12aa6cefe7d96ac5095b3719c/crates%2Fide_db%2Fsrc%2Fdefs.rs", "contents_url": "https://api.github.com/repos/rust-lang/rust/contents/crates%2Fide_db%2Fsrc%2Fdefs.rs?ref=9915103c9e2de4d12aa6cefe7d96ac5095b3719c", "patch": "@@ -447,7 +447,7 @@ impl NameRefClass {\n             }\n         }\n \n-        if let Some(path) = name_ref.syntax().ancestors().find_map(ast::Path::cast) {\n+        if let Some(path) = ast::PathSegment::cast(parent.clone()).map(|it| it.parent_path()) {\n             if path.qualifier().is_none() {\n                 if let Some(macro_call) = path.syntax().parent().and_then(ast::MacroCall::cast) {\n                     // Only use this to resolve single-segment macro calls like `foo!()`. Multi-segment"}]}